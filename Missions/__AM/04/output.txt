// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39782 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39782 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39782 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39782 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39782 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39782 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39782 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39782 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39782 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39782 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39782 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39782 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39782 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: PUSH
10656: LD_EXP 5
10660: PUSH
10661: EMPTY
10662: LIST
10663: DIFF
10664: ST_TO_ADDR
// DialogueOn ;
10665: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_STRING D3-Sol1-1
10686: PPUSH
10687: LD_STRING D3-Sol1-1
10689: PPUSH
10690: CALL 4598 0 3
10694: DIFF
10695: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10696: LD_VAR 0 1
10700: PPUSH
10701: LD_STRING D3-Sol2-1
10703: PPUSH
10704: LD_STRING D3-Sol2-1
10706: PPUSH
10707: CALL 4598 0 3
// if Frank then
10711: LD_EXP 5
10715: IFFALSE 10729
// Say ( Frank , D3-Frank-1 ) ;
10717: LD_EXP 5
10721: PPUSH
10722: LD_STRING D3-Frank-1
10724: PPUSH
10725: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10729: LD_EXP 13
10733: PPUSH
10734: LD_STRING D3-Don-1
10736: PPUSH
10737: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10741: LD_EXP 13
10745: PPUSH
10746: LD_STRING D3-Don-1a
10748: PPUSH
10749: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10753: LD_EXP 1
10757: PPUSH
10758: LD_STRING D3-JMM-1
10760: PPUSH
10761: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10765: LD_EXP 13
10769: PPUSH
10770: LD_STRING D3-Don-2
10772: PPUSH
10773: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10777: LD_INT 22
10779: PUSH
10780: LD_INT 6
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: IFFALSE 10943
// begin Say ( JMM , D3-JMM-2 ) ;
10807: LD_EXP 1
10811: PPUSH
10812: LD_STRING D3-JMM-2
10814: PPUSH
10815: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10819: LD_EXP 13
10823: PPUSH
10824: LD_STRING D3-Don-3
10826: PPUSH
10827: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10831: LD_EXP 1
10835: PPUSH
10836: LD_STRING D3-JMM-3
10838: PPUSH
10839: CALL_OW 88
// if IsOK ( Frank ) then
10843: LD_EXP 5
10847: PPUSH
10848: CALL_OW 302
10852: IFFALSE 10866
// Say ( Frank , D3-Frank-3 ) ;
10854: LD_EXP 5
10858: PPUSH
10859: LD_STRING D3-Frank-3
10861: PPUSH
10862: CALL_OW 88
// DialogueOff ;
10866: CALL_OW 7
// if IsOk ( Frank ) then
10870: LD_EXP 5
10874: PPUSH
10875: CALL_OW 302
10879: IFFALSE 10941
// begin SetSide ( Frank , 0 ) ;
10881: LD_EXP 5
10885: PPUSH
10886: LD_INT 0
10888: PPUSH
10889: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10893: LD_EXP 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10905: LD_EXP 5
10909: PPUSH
10910: LD_STRING 04t_Frank
10912: PPUSH
10913: CALL_OW 38
// wait ( 0 0$3 ) ;
10917: LD_INT 105
10919: PPUSH
10920: CALL_OW 67
// frankScoutBase = 1 ;
10924: LD_ADDR_EXP 25
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10932: LD_EXP 5
10936: PPUSH
10937: CALL_OW 64
// end ; end else
10941: GO 11030
// begin Say ( JMM , D3-JMM-4 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D3-JMM-4
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// if IsOk ( Frank ) then
10959: LD_EXP 5
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11030
// begin SetSide ( Frank , 0 ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 0
10977: PPUSH
10978: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_INT 12
10989: PPUSH
10990: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10994: LD_EXP 5
10998: PPUSH
10999: LD_STRING 04t_Frank
11001: PPUSH
11002: CALL_OW 38
// wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// frankScoutBase = 1 ;
11013: LD_ADDR_EXP 25
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11021: LD_EXP 5
11025: PPUSH
11026: CALL_OW 64
// end ; end ; end ;
11030: PPOPN 1
11032: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11033: LD_EXP 13
11037: PPUSH
11038: CALL_OW 255
11042: PUSH
11043: LD_INT 4
11045: EQUAL
11046: PUSH
11047: LD_EXP 13
11051: PPUSH
11052: CALL_OW 302
11056: AND
11057: IFFALSE 11297
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
// begin wait ( 5 5$00 ) ;
11066: LD_INT 10500
11068: PPUSH
11069: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11073: LD_EXP 13
11077: PPUSH
11078: CALL_OW 255
11082: PUSH
11083: LD_INT 1
11085: EQUAL
11086: PUSH
11087: LD_EXP 13
11091: PPUSH
11092: CALL_OW 301
11096: OR
11097: IFFALSE 11101
// exit ;
11099: GO 11297
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11101: LD_EXP 13
11105: PPUSH
11106: LD_STRING D3b-Don-1
11108: PPUSH
11109: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11113: LD_ADDR_EXP 41
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11141: LD_INT 35
11143: PPUSH
11144: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11148: LD_VAR 0 2
11152: NOT
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_INT 6
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 101
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: OR
11183: IFFALSE 11141
// if not tmp then
11185: LD_VAR 0 2
11189: NOT
11190: IFFALSE 11194
// exit ;
11192: GO 11297
// for i in tmp do
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11224
// ComAgressiveMove ( i , 52 , 64 ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_INT 52
11214: PPUSH
11215: LD_INT 64
11217: PPUSH
11218: CALL_OW 114
11222: GO 11204
11224: POP
11225: POP
// wait ( 0 0$10 ) ;
11226: LD_INT 350
11228: PPUSH
11229: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: PUSH
11253: LD_EXP 5
11257: DIFF
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11276
// SetSide ( i , 1 ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 235
11274: GO 11259
11276: POP
11277: POP
// if IsLive ( Donaldson ) then
11278: LD_EXP 13
11282: PPUSH
11283: CALL_OW 300
11287: IFFALSE 11297
// saveDonaldson := 1 ;
11289: LD_ADDR_EXP 24
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// end ;
11297: PPOPN 2
11299: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 302
11309: PUSH
11310: LD_EXP 24
11314: NOT
11315: AND
11316: PUSH
11317: LD_EXP 41
11321: NOT
11322: AND
11323: PUSH
11324: LD_INT 26
11326: PPUSH
11327: LD_INT 22
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 70
11341: PUSH
11342: LD_EXP 13
11346: PPUSH
11347: LD_EXP 1
11351: PPUSH
11352: CALL_OW 296
11356: PUSH
11357: LD_INT 6
11359: LESS
11360: OR
11361: AND
11362: IFFALSE 11417
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin saveDonaldson := 1 ;
11370: LD_ADDR_EXP 24
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11378: LD_ADDR_VAR 0 1
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 4
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PPUSH
11393: CALL_OW 69
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11415
// SetSide ( i , 1 ) ;
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 235
11413: GO 11398
11415: POP
11416: POP
// end ;
11417: PPOPN 1
11419: END
// every 0 0$1 trigger frankScoutBase do
11420: LD_EXP 25
11424: IFFALSE 11789
11426: GO 11428
11428: DISABLE
// begin wait ( 2 2$30 ) ;
11429: LD_INT 5250
11431: PPUSH
11432: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11443: LD_INT 81
11445: PUSH
11446: LD_INT 4
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 92
11455: PUSH
11456: LD_INT 84
11458: PUSH
11459: LD_INT 28
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 69
11479: NOT
11480: IFFALSE 11436
// uc_side = 4 ;
11482: LD_ADDR_OWVAR 20
11486: PUSH
11487: LD_INT 4
11489: ST_TO_ADDR
// uc_nation = 1 ;
11490: LD_ADDR_OWVAR 21
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11498: LD_ADDR_EXP 5
11502: PUSH
11503: LD_STRING 04t_Frank
11505: PPUSH
11506: CALL_OW 34
11510: ST_TO_ADDR
// if not Frank then
11511: LD_EXP 5
11515: NOT
11516: IFFALSE 11520
// exit ;
11518: GO 11789
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11520: LD_EXP 5
11524: PPUSH
11525: LD_INT 13
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11535: LD_INT 35
11537: PPUSH
11538: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11542: LD_EXP 1
11546: PPUSH
11547: CALL_OW 310
11551: NOT
11552: PUSH
11553: LD_EXP 1
11557: PPUSH
11558: LD_INT 4
11560: PPUSH
11561: CALL_OW 296
11565: PUSH
11566: LD_INT 20
11568: LESS
11569: AND
11570: IFFALSE 11603
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11572: LD_EXP 5
11576: PPUSH
11577: LD_EXP 1
11581: PPUSH
11582: CALL_OW 250
11586: PPUSH
11587: LD_EXP 1
11591: PPUSH
11592: CALL_OW 251
11596: PPUSH
11597: CALL_OW 111
11601: GO 11618
// ComMoveXY ( Frank , 51 , 15 ) ;
11603: LD_EXP 5
11607: PPUSH
11608: LD_INT 51
11610: PPUSH
11611: LD_INT 15
11613: PPUSH
11614: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11618: LD_EXP 5
11622: PPUSH
11623: LD_EXP 1
11627: PPUSH
11628: CALL_OW 296
11632: PUSH
11633: LD_INT 10
11635: LESS
11636: IFFALSE 11535
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11638: LD_EXP 1
11642: PUSH
11643: LD_EXP 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 87
// DialogueOn ;
11656: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11660: LD_EXP 5
11664: PPUSH
11665: LD_STRING D3a-Frank-1
11667: PPUSH
11668: CALL_OW 88
// if Lisa then
11672: LD_EXP 4
11676: IFFALSE 11726
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11678: LD_EXP 4
11682: PPUSH
11683: LD_STRING D3a-Lisa-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11690: LD_EXP 5
11694: PPUSH
11695: LD_STRING D3a-Frank-2
11697: PPUSH
11698: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11702: LD_EXP 4
11706: PPUSH
11707: LD_STRING D3a-Lisa-2
11709: PPUSH
11710: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11714: LD_EXP 5
11718: PPUSH
11719: LD_STRING D3a-Frank-3
11721: PPUSH
11722: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11726: LD_EXP 1
11730: PPUSH
11731: LD_STRING D3a-JMM-3
11733: PPUSH
11734: CALL_OW 88
// DialogueOff ;
11738: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11742: LD_EXP 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 235
// InGameOn ;
11754: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11758: LD_INT 1
11760: PPUSH
11761: LD_INT 7
11763: PPUSH
11764: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11768: LD_INT 93
11770: PPUSH
11771: LD_INT 91
11773: PPUSH
11774: CALL_OW 84
// wait ( 0 0$5 ) ;
11778: LD_INT 175
11780: PPUSH
11781: CALL_OW 67
// InGameOff ;
11785: CALL_OW 9
// end ;
11789: END
// every 12 12$0 trigger Difficulty > 1 do
11790: LD_OWVAR 67
11794: PUSH
11795: LD_INT 1
11797: GREATER
11798: IFFALSE 11822
11800: GO 11802
11802: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11803: LD_INT 24
11805: PPUSH
11806: LD_INT 24
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: LD_INT 53
11817: PPUSH
11818: CALL_OW 185
11822: END
// every 18 18$0 do
11823: GO 11825
11825: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11826: LD_EXP 14
11830: PPUSH
11831: LD_STRING D4-Har-1
11833: PPUSH
11834: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11838: LD_EXP 1
11842: PPUSH
11843: LD_STRING D4-JMM-1
11845: PPUSH
11846: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11850: LD_EXP 14
11854: PPUSH
11855: LD_STRING D4-Har-2
11857: PPUSH
11858: CALL_OW 94
// case Query ( Q1 ) of 1 :
11862: LD_STRING Q1
11864: PPUSH
11865: CALL_OW 97
11869: PUSH
11870: LD_INT 1
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11937
11878: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_STRING D5-JMM-1
11886: PPUSH
11887: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11891: LD_EXP 14
11895: PPUSH
11896: LD_STRING D5-Har-1
11898: PPUSH
11899: CALL_OW 94
// timeToSupport = 10 10$0 ;
11903: LD_ADDR_EXP 28
11907: PUSH
11908: LD_INT 21000
11910: ST_TO_ADDR
// timerStatus = 2 ;
11911: LD_ADDR_EXP 29
11915: PUSH
11916: LD_INT 2
11918: ST_TO_ADDR
// startTimer = 1 ;
11919: LD_ADDR_EXP 30
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// harrAnswer = 1 ;
11927: LD_ADDR_EXP 26
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// end ; 2 :
11935: GO 12072
11937: LD_INT 2
11939: DOUBLE
11940: EQUAL
11941: IFTRUE 11945
11943: GO 12004
11945: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11946: LD_EXP 1
11950: PPUSH
11951: LD_STRING D5-JMM-2
11953: PPUSH
11954: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11958: LD_EXP 14
11962: PPUSH
11963: LD_STRING D5-Har-2
11965: PPUSH
11966: CALL_OW 94
// timeToSupport = 5 5$0 ;
11970: LD_ADDR_EXP 28
11974: PUSH
11975: LD_INT 10500
11977: ST_TO_ADDR
// timerStatus = 2 ;
11978: LD_ADDR_EXP 29
11982: PUSH
11983: LD_INT 2
11985: ST_TO_ADDR
// startTimer = 1 ;
11986: LD_ADDR_EXP 30
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// harrAnswer = 2 ;
11994: LD_ADDR_EXP 26
11998: PUSH
11999: LD_INT 2
12001: ST_TO_ADDR
// end ; 3 :
12002: GO 12072
12004: LD_INT 3
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12071
12012: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12013: LD_EXP 1
12017: PPUSH
12018: LD_STRING D5-JMM-3
12020: PPUSH
12021: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12025: LD_EXP 14
12029: PPUSH
12030: LD_STRING D5-Har-3
12032: PPUSH
12033: CALL_OW 94
// timeToSupport = 5 5$0 ;
12037: LD_ADDR_EXP 28
12041: PUSH
12042: LD_INT 10500
12044: ST_TO_ADDR
// timerStatus = 2 ;
12045: LD_ADDR_EXP 29
12049: PUSH
12050: LD_INT 2
12052: ST_TO_ADDR
// startTimer = 1 ;
12053: LD_ADDR_EXP 30
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// harrAnswer = 3 ;
12061: LD_ADDR_EXP 26
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// end ; end ;
12069: GO 12072
12071: POP
// end ;
12072: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12073: LD_EXP 29
12077: PUSH
12078: LD_INT 2
12080: EQUAL
12081: PUSH
12082: LD_EXP 28
12086: PUSH
12087: LD_INT 0
12089: EQUAL
12090: AND
12091: IFFALSE 12380
12093: GO 12095
12095: DISABLE
// begin timerStatus = 4 ;
12096: LD_ADDR_EXP 29
12100: PUSH
12101: LD_INT 4
12103: ST_TO_ADDR
// if harrAnswer = 1 then
12104: LD_EXP 26
12108: PUSH
12109: LD_INT 1
12111: EQUAL
12112: IFFALSE 12196
// begin PrepareHarrisonSupport ( 3 ) ;
12114: LD_INT 3
12116: PPUSH
12117: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12121: LD_INT 2100
12123: PPUSH
12124: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12128: LD_EXP 14
12132: PPUSH
12133: LD_STRING D7-Har-1
12135: PPUSH
12136: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12140: LD_STRING M2
12142: PPUSH
12143: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12147: LD_ADDR_EXP 27
12151: PUSH
12152: LD_INT 31500
12154: PUSH
12155: LD_INT 10500
12157: PUSH
12158: LD_INT 8400
12160: PUSH
12161: LD_INT 6300
12163: PUSH
12164: LD_INT 6300
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_OWVAR 67
12177: ARRAY
12178: PLUS
12179: ST_TO_ADDR
// startTimer = 1 ;
12180: LD_ADDR_EXP 30
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// timerStatus = 3 ;
12188: LD_ADDR_EXP 29
12192: PUSH
12193: LD_INT 3
12195: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12196: LD_EXP 26
12200: PUSH
12201: LD_INT 2
12203: EQUAL
12204: IFFALSE 12288
// begin PrepareHarrisonSupport ( 4 ) ;
12206: LD_INT 4
12208: PPUSH
12209: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12213: LD_INT 2100
12215: PPUSH
12216: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12220: LD_EXP 14
12224: PPUSH
12225: LD_STRING D7-Har-1
12227: PPUSH
12228: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12232: LD_STRING M2
12234: PPUSH
12235: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12239: LD_ADDR_EXP 27
12243: PUSH
12244: LD_INT 33600
12246: PUSH
12247: LD_INT 10500
12249: PUSH
12250: LD_INT 8400
12252: PUSH
12253: LD_INT 6300
12255: PUSH
12256: LD_INT 5250
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_OWVAR 67
12269: ARRAY
12270: PLUS
12271: ST_TO_ADDR
// startTimer = 1 ;
12272: LD_ADDR_EXP 30
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// timerStatus = 3 ;
12280: LD_ADDR_EXP 29
12284: PUSH
12285: LD_INT 3
12287: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12288: LD_EXP 26
12292: PUSH
12293: LD_INT 3
12295: EQUAL
12296: IFFALSE 12380
// begin PrepareHarrisonSupport ( 5 ) ;
12298: LD_INT 5
12300: PPUSH
12301: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12305: LD_INT 2100
12307: PPUSH
12308: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12312: LD_EXP 14
12316: PPUSH
12317: LD_STRING D7-Har-1
12319: PPUSH
12320: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12324: LD_STRING M2
12326: PPUSH
12327: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12331: LD_ADDR_EXP 27
12335: PUSH
12336: LD_INT 35700
12338: PUSH
12339: LD_INT 10500
12341: PUSH
12342: LD_INT 6300
12344: PUSH
12345: LD_INT 4200
12347: PUSH
12348: LD_INT 3150
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_OWVAR 67
12361: ARRAY
12362: PLUS
12363: ST_TO_ADDR
// startTimer = 1 ;
12364: LD_ADDR_EXP 30
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// timerStatus = 3 ;
12372: LD_ADDR_EXP 29
12376: PUSH
12377: LD_INT 3
12379: ST_TO_ADDR
// end ; end ;
12380: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12381: LD_EXP 27
12385: PUSH
12386: LD_INT 8400
12388: LESSEQUAL
12389: PUSH
12390: LD_EXP 29
12394: PUSH
12395: LD_INT 3
12397: EQUAL
12398: AND
12399: IFFALSE 12431
12401: GO 12403
12403: DISABLE
// begin DialogueOn ;
12404: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12408: LD_EXP 14
12412: PPUSH
12413: LD_STRING D7a-Har-1
12415: PPUSH
12416: CALL_OW 94
// DialogueOff ;
12420: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12424: LD_STRING M2a
12426: PPUSH
12427: CALL_OW 337
// end ;
12431: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12432: LD_EXP 27
12436: PUSH
12437: LD_INT 0
12439: LESSEQUAL
12440: PUSH
12441: LD_EXP 29
12445: PUSH
12446: LD_INT 3
12448: EQUAL
12449: AND
12450: PUSH
12451: LD_EXP 40
12455: NOT
12456: AND
12457: IFFALSE 12596
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: DIFF
12493: ST_TO_ADDR
// saveDonaldson = 2 ;
12494: LD_ADDR_EXP 24
12498: PUSH
12499: LD_INT 2
12501: ST_TO_ADDR
// DialogueOn ;
12502: CALL_OW 6
// if IsOk ( Donaldson ) then
12506: LD_EXP 13
12510: PPUSH
12511: CALL_OW 302
12515: IFFALSE 12531
// SayRadio ( Harisson , D8-Har-1 ) else
12517: LD_EXP 14
12521: PPUSH
12522: LD_STRING D8-Har-1
12524: PPUSH
12525: CALL_OW 94
12529: GO 12543
// SayRadio ( Harisson , D8-Har-1a ) ;
12531: LD_EXP 14
12535: PPUSH
12536: LD_STRING D8-Har-1a
12538: PPUSH
12539: CALL_OW 94
// DialogueOff ;
12543: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 4
12554: PPUSH
12555: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12559: LD_VAR 0 1
12563: PPUSH
12564: LD_INT 88
12566: PPUSH
12567: LD_INT 89
12569: PPUSH
12570: CALL_OW 114
// honor = 0 ;
12574: LD_ADDR_EXP 39
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12582: LD_INT 350
12584: PPUSH
12585: CALL_OW 67
// YouLost ( LostCommand ) ;
12589: LD_STRING LostCommand
12591: PPUSH
12592: CALL_OW 104
// end ;
12596: PPOPN 1
12598: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12599: LD_INT 22
12601: PUSH
12602: LD_INT 6
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 69
12627: PUSH
12628: LD_INT 0
12630: EQUAL
12631: PUSH
12632: LD_EXP 20
12636: PUSH
12637: LD_INT 0
12639: EQUAL
12640: AND
12641: PUSH
12642: LD_EXP 44
12646: PUSH
12647: LD_INT 1
12649: EQUAL
12650: AND
12651: IFFALSE 12745
12653: GO 12655
12655: DISABLE
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_INT 22
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 23
12687: PUSH
12688: LD_INT 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// for i in tmp do
12705: LD_ADDR_VAR 0 1
12709: PUSH
12710: LD_VAR 0 2
12714: PUSH
12715: FOR_IN
12716: IFFALSE 12743
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12718: LD_VAR 0 1
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 4
12728: PPUSH
12729: CALL_OW 12
12733: PPUSH
12734: LD_INT 500
12736: PPUSH
12737: CALL_OW 492
12741: GO 12715
12743: POP
12744: POP
// end ; end_of_file
12745: PPOPN 2
12747: END
// every 0 0$1 trigger AIEnable do
12748: LD_EXP 37
12752: IFFALSE 12846
12754: GO 12756
12756: DISABLE
// begin enable ;
12757: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12758: LD_INT 3
12760: PPUSH
12761: LD_INT 21
12763: PPUSH
12764: LD_INT 7
12766: PPUSH
12767: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12771: LD_INT 3
12773: PPUSH
12774: LD_INT 8
12776: PPUSH
12777: LD_INT 7
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12787: LD_EXP 20
12791: PUSH
12792: LD_INT 2
12794: EQUAL
12795: PUSH
12796: LD_INT 22
12798: PUSH
12799: LD_INT 6
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: AND
12811: IFFALSE 12846
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12813: LD_INT 6
12815: PPUSH
12816: LD_EXP 21
12820: PPUSH
12821: LD_INT 6
12823: PPUSH
12824: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12828: LD_INT 6
12830: PPUSH
12831: LD_INT 9
12833: PPUSH
12834: LD_INT 6
12836: PPUSH
12837: LD_EXP 22
12841: PPUSH
12842: CALL 6334 0 4
// end ; end ;
12846: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12847: LD_EXP 15
12851: PPUSH
12852: CALL_OW 310
12856: NOT
12857: PUSH
12858: LD_INT 21
12860: PPUSH
12861: CALL_OW 302
12865: AND
12866: PUSH
12867: LD_INT 21
12869: PPUSH
12870: CALL_OW 255
12874: PUSH
12875: LD_INT 3
12877: EQUAL
12878: AND
12879: IFFALSE 12896
12881: GO 12883
12883: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12884: LD_EXP 15
12888: PPUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 120
12896: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12897: LD_INT 22
12899: PUSH
12900: LD_INT 3
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 21
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: EMPTY
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: LD_INT 0
12935: EQUAL
12936: PUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 255
12944: PUSH
12945: LD_INT 3
12947: EQUAL
12948: AND
12949: PUSH
12950: LD_INT 21
12952: PPUSH
12953: CALL_OW 302
12957: AND
12958: PUSH
12959: LD_INT 21
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: IFFALSE 13192
12982: GO 12984
12984: DISABLE
// begin enable ;
12985: ENABLE
// if Difficulty = 1 then
12986: LD_OWVAR 67
12990: PUSH
12991: LD_INT 1
12993: EQUAL
12994: IFFALSE 13038
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12996: LD_INT 3
12998: PPUSH
12999: LD_INT 24
13001: PPUSH
13002: LD_OWVAR 67
13006: PUSH
13007: LD_INT 2
13009: PLUS
13010: PPUSH
13011: LD_INT 42
13013: PUSH
13014: LD_INT 44
13016: PUSH
13017: LD_INT 43
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_INT 21
13033: PPUSH
13034: CALL 6848 0 7
// if Difficulty = 2 then
13038: LD_OWVAR 67
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13113
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13048: LD_INT 3
13050: PPUSH
13051: LD_INT 24
13053: PPUSH
13054: LD_OWVAR 67
13058: PUSH
13059: LD_INT 2
13061: PLUS
13062: PPUSH
13063: LD_INT 44
13065: PUSH
13066: LD_INT 44
13068: PUSH
13069: LD_INT 43
13071: PUSH
13072: LD_INT 43
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_INT 21
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 1
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 12
13107: ARRAY
13108: PPUSH
13109: CALL 6848 0 7
// if Difficulty >= 3 then
13113: LD_OWVAR 67
13117: PUSH
13118: LD_INT 3
13120: GREATEREQUAL
13121: IFFALSE 13192
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13123: LD_INT 3
13125: PPUSH
13126: LD_INT 24
13128: PPUSH
13129: LD_OWVAR 67
13133: PUSH
13134: LD_INT 2
13136: PPUSH
13137: LD_INT 3
13139: PPUSH
13140: CALL_OW 12
13144: PLUS
13145: PPUSH
13146: LD_INT 44
13148: PUSH
13149: LD_INT 44
13151: PUSH
13152: LD_INT 43
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 2
13181: PPUSH
13182: CALL_OW 12
13186: ARRAY
13187: PPUSH
13188: CALL 6848 0 7
// end ;
13192: END
// every 0 0$1 do
13193: GO 13195
13195: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13196: LD_INT 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: LD_INT 3
13204: PPUSH
13205: CALL 5951 0 3
13209: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13210: LD_EXP 20
13214: PUSH
13215: LD_INT 1
13217: EQUAL
13218: IFFALSE 13365
13220: GO 13222
13222: DISABLE
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 6
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 21
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 34
13254: PUSH
13255: LD_INT 51
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13272: LD_VAR 0 2
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: LD_EXP 21
13285: PPUSH
13286: CALL_OW 250
13290: PUSH
13291: LD_INT 5
13293: MINUS
13294: PPUSH
13295: LD_EXP 21
13299: PPUSH
13300: CALL_OW 251
13304: PUSH
13305: LD_INT 5
13307: MINUS
13308: PPUSH
13309: CALL_OW 111
// wait ( 0 0$5 ) ;
13313: LD_INT 175
13315: PPUSH
13316: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13320: LD_VAR 0 2
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: LD_INT 41
13331: PPUSH
13332: LD_INT 52
13334: PPUSH
13335: CALL_OW 177
// wait ( 0 0$40 ) ;
13339: LD_INT 1400
13341: PPUSH
13342: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13346: LD_VAR 0 2
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: PPUSH
13355: LD_INT 41
13357: PPUSH
13358: LD_INT 44
13360: PPUSH
13361: CALL_OW 111
// end ;
13365: PPOPN 2
13367: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13368: LD_EXP 21
13372: PPUSH
13373: CALL_OW 274
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 275
13385: PUSH
13386: LD_INT 100
13388: GREATEREQUAL
13389: IFFALSE 13617
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 22
13404: PUSH
13405: LD_INT 6
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13442: LD_VAR 0 1
13446: PUSH
13447: LD_INT 1
13449: ARRAY
13450: PPUSH
13451: LD_INT 4
13453: PPUSH
13454: LD_INT 39
13456: PPUSH
13457: LD_INT 37
13459: PPUSH
13460: LD_INT 3
13462: PPUSH
13463: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PPUSH
13476: LD_INT 29
13478: PPUSH
13479: LD_INT 42
13481: PPUSH
13482: LD_INT 54
13484: PPUSH
13485: LD_INT 3
13487: PPUSH
13488: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13492: LD_VAR 0 1
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_INT 6
13503: PPUSH
13504: LD_INT 38
13506: PPUSH
13507: LD_INT 48
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13517: LD_VAR 0 1
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: LD_INT 32
13531: PPUSH
13532: LD_INT 38
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13542: LD_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PPUSH
13551: LD_INT 26
13553: PPUSH
13554: LD_INT 39
13556: PPUSH
13557: LD_INT 55
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: LD_INT 32
13578: PPUSH
13579: LD_INT 31
13581: PPUSH
13582: LD_INT 31
13584: PPUSH
13585: LD_INT 3
13587: PPUSH
13588: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 50
13606: PPUSH
13607: LD_INT 51
13609: PPUSH
13610: LD_INT 4
13612: PPUSH
13613: CALL_OW 205
// end ;
13617: PPOPN 1
13619: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13620: LD_EXP 46
13624: IFFALSE 14189
13626: GO 13628
13628: DISABLE
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
// begin enable ;
13634: ENABLE
// if not ruMobile then
13635: LD_EXP 46
13639: NOT
13640: IFFALSE 13644
// exit ;
13642: GO 14189
// for i in ruMobile do
13644: LD_ADDR_VAR 0 1
13648: PUSH
13649: LD_EXP 46
13653: PUSH
13654: FOR_IN
13655: IFFALSE 14187
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 302
13666: NOT
13667: PUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 255
13677: PUSH
13678: LD_INT 3
13680: NONEQUAL
13681: OR
13682: IFFALSE 13702
// begin ruMobile := ruMobile diff i ;
13684: LD_ADDR_EXP 46
13688: PUSH
13689: LD_EXP 46
13693: PUSH
13694: LD_VAR 0 1
13698: DIFF
13699: ST_TO_ADDR
// continue ;
13700: GO 13654
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 110
13711: NOT
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 110
13722: PUSH
13723: LD_INT 0
13725: EQUAL
13726: OR
13727: IFFALSE 13842
// begin if GetFuel ( i ) < 50 then
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 261
13738: PUSH
13739: LD_INT 50
13741: LESS
13742: IFFALSE 13801
// begin ComMoveXY ( i , 106 , 88 ) ;
13744: LD_VAR 0 1
13748: PPUSH
13749: LD_INT 106
13751: PPUSH
13752: LD_INT 88
13754: PPUSH
13755: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13759: LD_INT 35
13761: PPUSH
13762: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 297
13781: PUSH
13782: LD_INT 4
13784: LESS
13785: IFFALSE 13759
// SetFuel ( i , 100 ) ;
13787: LD_VAR 0 1
13791: PPUSH
13792: LD_INT 100
13794: PPUSH
13795: CALL_OW 240
// end else
13799: GO 13842
// if not IsInArea ( i , ruParking ) then
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 25
13808: PPUSH
13809: CALL_OW 308
13813: NOT
13814: IFFALSE 13830
// ComMoveToArea ( i , ruParking ) else
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 25
13823: PPUSH
13824: CALL_OW 113
13828: GO 13842
// SetTag ( i , 1 ) ;
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 110
13851: PUSH
13852: LD_INT 1
13854: EQUAL
13855: IFFALSE 13985
// begin if GetLives ( i ) < 650 then
13857: LD_VAR 0 1
13861: PPUSH
13862: CALL_OW 256
13866: PUSH
13867: LD_INT 650
13869: LESS
13870: IFFALSE 13962
// begin if not IsDrivenBy ( i ) then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 311
13881: NOT
13882: IFFALSE 13886
// continue ;
13884: GO 13654
// mech := IsDrivenBy ( i ) ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 311
13900: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13901: LD_VAR 0 2
13905: PPUSH
13906: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13924: LD_INT 35
13926: PPUSH
13927: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 256
13940: PUSH
13941: LD_INT 1000
13943: EQUAL
13944: IFFALSE 13924
// ComEnterUnit ( mech , i ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 120
// end else
13960: GO 13985
// if IsDrivenBy ( i ) then
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 311
13971: IFFALSE 13985
// SetTag ( i , 2 ) ;
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_INT 2
13980: PPUSH
13981: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 110
13994: PUSH
13995: LD_INT 2
13997: EQUAL
13998: IFFALSE 14185
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 24
14007: PPUSH
14008: LD_INT 81
14010: PUSH
14011: LD_INT 3
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 70
14022: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 256
14032: PUSH
14033: LD_INT 650
14035: LESS
14036: IFFALSE 14061
// begin ComStop ( i ) ;
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 141
// SetTag ( i , 0 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 0
14054: PPUSH
14055: CALL_OW 109
// continue ;
14059: GO 13654
// end ; if enemy then
14061: LD_VAR 0 3
14065: IFFALSE 14105
// begin if not HasTask ( i ) then
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 314
14076: NOT
14077: IFFALSE 14103
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14079: LD_VAR 0 1
14083: PPUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 74
14098: PPUSH
14099: CALL_OW 115
// end else
14103: GO 14185
// if ruMobile > 2 then
14105: LD_EXP 46
14109: PUSH
14110: LD_INT 2
14112: GREATER
14113: IFFALSE 14185
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: LD_INT 81
14122: PUSH
14123: LD_INT 3
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: ST_TO_ADDR
// if enemy then
14135: LD_VAR 0 3
14139: IFFALSE 14185
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_INT 95
14148: PUSH
14149: LD_INT 74
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 67
14158: PUSH
14159: LD_INT 59
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 55
14168: PUSH
14169: LD_INT 41
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL 79678 0 2
// end ; end ; end ;
14185: GO 13654
14187: POP
14188: POP
// end ; end_of_file
14189: PPOPN 3
14191: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: LD_INT 6
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 54
14241: PUSH
14242: EMPTY
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14260: LD_ADDR_VAR 0 7
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_INT 6
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 21
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 54
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14312: LD_ADDR_VAR 0 4
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_INT 6
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_INT 6
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: PPUSH
14397: CALL_OW 69
14401: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14402: LD_ADDR_VAR 0 8
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 6
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 34
14429: PUSH
14430: LD_INT 51
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 6
14459: EQUAL
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 266
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: AND
14475: IFFALSE 14495
// begin ruPDepot = building ;
14477: LD_ADDR_EXP 21
14481: PUSH
14482: LD_VAR 0 1
14486: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14487: LD_ADDR_EXP 20
14491: PUSH
14492: LD_INT 1
14494: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 4
14507: EQUAL
14508: PUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 255
14518: PUSH
14519: LD_INT 6
14521: EQUAL
14522: AND
14523: IFFALSE 14556
// for i in tmpSold do
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14554
// ComEnterUnit ( i , building ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 120
14552: GO 14535
14554: POP
14555: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 266
14565: PUSH
14566: LD_INT 6
14568: EQUAL
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 255
14579: PUSH
14580: LD_INT 6
14582: EQUAL
14583: AND
14584: IFFALSE 14642
// begin for i in tmpSci do
14586: LD_ADDR_VAR 0 2
14590: PUSH
14591: LD_VAR 0 6
14595: PUSH
14596: FOR_IN
14597: IFFALSE 14615
// ComEnterUnit ( i , building ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 120
14613: GO 14596
14615: POP
14616: POP
// ResAllTechs ( 6 , building , 3 ) ;
14617: LD_INT 6
14619: PPUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 3
14627: PPUSH
14628: CALL 5951 0 3
// ruPLab = building ;
14632: LD_ADDR_EXP 22
14636: PUSH
14637: LD_VAR 0 1
14641: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 266
14651: PUSH
14652: LD_INT 2
14654: EQUAL
14655: PUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 255
14665: PUSH
14666: LD_INT 6
14668: EQUAL
14669: AND
14670: IFFALSE 14721
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_VAR 0 8
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: CALL_OW 313
14690: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14691: LD_VAR 0 5
14695: PPUSH
14696: CALL_OW 121
// wait ( 0 0$1 ) ;
14700: LD_INT 35
14702: PPUSH
14703: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14707: LD_VAR 0 5
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 266
14730: PUSH
14731: LD_INT 32
14733: EQUAL
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 255
14744: PUSH
14745: LD_INT 6
14747: EQUAL
14748: AND
14749: IFFALSE 14801
// begin ComPlaceWeapon ( building , 42 ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_INT 42
14758: PPUSH
14759: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14763: LD_VAR 0 7
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: CALL_OW 122
// wait ( 0 0$1 ) ;
14776: LD_INT 35
14778: PPUSH
14779: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14783: LD_VAR 0 7
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 266
14810: PUSH
14811: LD_INT 31
14813: EQUAL
14814: PUSH
14815: LD_VAR 0 1
14819: PPUSH
14820: CALL_OW 255
14824: PUSH
14825: LD_INT 6
14827: EQUAL
14828: AND
14829: IFFALSE 14895
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14831: LD_VAR 0 7
14835: PUSH
14836: LD_INT 2
14838: ARRAY
14839: PPUSH
14840: CALL_OW 122
// wait ( 0 0$1 ) ;
14844: LD_INT 35
14846: PPUSH
14847: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14851: LD_VAR 0 7
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: PPUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14869: LD_VAR 0 4
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: PPUSH
14878: LD_EXP 21
14882: PPUSH
14883: CALL_OW 120
// baseReadyToBuild = 2 ;
14887: LD_ADDR_EXP 20
14891: PUSH
14892: LD_INT 2
14894: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14895: LD_VAR 0 1
14899: PPUSH
14900: CALL_OW 266
14904: PUSH
14905: LD_INT 32
14907: EQUAL
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 255
14918: PUSH
14919: LD_INT 1
14921: EQUAL
14922: AND
14923: PUSH
14924: LD_EXP 32
14928: PUSH
14929: LD_INT 0
14931: EQUAL
14932: AND
14933: IFFALSE 15178
// begin bunkerDialog = 1 ;
14935: LD_ADDR_EXP 32
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14943: LD_EXP 11
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14968
// Say ( Claptopn , D11-Eng1-1 ) else
14954: LD_EXP 11
14958: PPUSH
14959: LD_STRING D11-Eng1-1
14961: PPUSH
14962: CALL_OW 88
14966: GO 15164
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14968: LD_INT 22
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: PUSH
15019: LD_EXP 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: GREATER
15030: DIFF
15031: IFFALSE 15105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15033: LD_INT 22
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 21
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 25
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 26
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 69
15083: PUSH
15084: LD_EXP 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: DIFF
15092: PPUSH
15093: LD_STRING D11-Eng1-1
15095: PPUSH
15096: LD_STRING D11-Eng1-1
15098: PPUSH
15099: CALL 4598 0 3
15103: GO 15164
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15105: LD_INT 22
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 26
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: PUSH
15145: LD_EXP 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: DIFF
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: LD_STRING D11-Eng1-1
15159: PPUSH
15160: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15164: LD_EXP 33
15168: PUSH
15169: LD_INT 0
15171: EQUAL
15172: IFFALSE 15178
// EnergyDialog ;
15174: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15178: LD_VAR 0 1
15182: PPUSH
15183: CALL_OW 266
15187: PUSH
15188: LD_INT 29
15190: EQUAL
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 255
15201: PUSH
15202: LD_INT 1
15204: EQUAL
15205: AND
15206: IFFALSE 15216
// buildOil = 1 ;
15208: LD_ADDR_EXP 34
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 266
15225: PUSH
15226: LD_INT 26
15228: EQUAL
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: AND
15244: IFFALSE 15254
// buildPower = 1 ;
15246: LD_ADDR_EXP 35
15250: PUSH
15251: LD_INT 1
15253: ST_TO_ADDR
// end ;
15254: PPOPN 8
15256: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 266
15266: PUSH
15267: LD_INT 3
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 255
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: PUSH
15286: LD_EXP 31
15290: PUSH
15291: LD_INT 0
15293: EQUAL
15294: AND
15295: IFFALSE 15643
// begin factoryDialog = 1 ;
15297: LD_ADDR_EXP 31
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15305: LD_INT 47
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 321
15315: PUSH
15316: LD_INT 1
15318: EQUAL
15319: PUSH
15320: LD_INT 45
15322: PPUSH
15323: LD_INT 1
15325: PPUSH
15326: CALL_OW 321
15330: PUSH
15331: LD_INT 1
15333: EQUAL
15334: AND
15335: IFFALSE 15643
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15337: LD_INT 22
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 30
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 24
15369: PUSH
15370: LD_INT 1000
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: PUSH
15388: LD_INT 1
15390: ARRAY
15391: PPUSH
15392: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15396: LD_EXP 1
15400: PPUSH
15401: LD_STRING D9a-JMM-1
15403: PPUSH
15404: CALL_OW 88
// if IsOK ( Campell ) then
15408: LD_EXP 12
15412: PPUSH
15413: CALL_OW 302
15417: IFFALSE 15433
// Say ( Campell , D9a-Mech1-1 ) else
15419: LD_EXP 12
15423: PPUSH
15424: LD_STRING D9a-Mech1-1
15426: PPUSH
15427: CALL_OW 88
15431: GO 15629
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15433: LD_INT 22
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 25
15455: PUSH
15456: LD_INT 3
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 26
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PUSH
15484: LD_EXP 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: PUSH
15492: LD_INT 0
15494: GREATER
15495: DIFF
15496: IFFALSE 15570
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15498: LD_INT 22
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: PUSH
15549: LD_EXP 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: DIFF
15557: PPUSH
15558: LD_STRING D9a-Mech1-1
15560: PPUSH
15561: LD_STRING D9a-Mech1-1
15563: PPUSH
15564: CALL 4598 0 3
15568: GO 15629
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15570: LD_INT 22
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 26
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: PUSH
15610: LD_EXP 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: DIFF
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: LD_STRING D9a-Mech1-1
15624: PPUSH
15625: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15629: LD_EXP 33
15633: PUSH
15634: LD_INT 0
15636: EQUAL
15637: IFFALSE 15643
// EnergyDialog ;
15639: CALL 5003 0 0
// end ; end ; end ;
15643: PPOPN 1
15645: END
// on UnitDestroyed ( unit ) do var mech ;
15646: LD_INT 0
15648: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL 35493 0 1
// if unit = JMM then
15658: LD_VAR 0 1
15662: PUSH
15663: LD_EXP 1
15667: EQUAL
15668: IFFALSE 15677
// YouLost ( JMM ) ;
15670: LD_STRING JMM
15672: PPUSH
15673: CALL_OW 104
// if unit = ambdept0 then
15677: LD_VAR 0 1
15681: PUSH
15682: LD_INT 4
15684: EQUAL
15685: IFFALSE 15694
// YouLost ( Base ) ;
15687: LD_STRING Base
15689: PPUSH
15690: CALL_OW 104
// if unit in ruMobile then
15694: LD_VAR 0 1
15698: PUSH
15699: LD_EXP 46
15703: IN
15704: IFFALSE 15722
// ruMobile = ruMobile diff ruMobile ;
15706: LD_ADDR_EXP 46
15710: PUSH
15711: LD_EXP 46
15715: PUSH
15716: LD_EXP 46
15720: DIFF
15721: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 247
15731: PUSH
15732: LD_INT 1
15734: EQUAL
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 255
15745: PUSH
15746: LD_INT 1
15748: EQUAL
15749: AND
15750: IFFALSE 15766
// lostCounter = lostCounter + 1 ;
15752: LD_ADDR_EXP 38
15756: PUSH
15757: LD_EXP 38
15761: PUSH
15762: LD_INT 1
15764: PLUS
15765: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15766: LD_EXP 43
15770: PUSH
15771: LD_INT 24
15773: PPUSH
15774: CALL_OW 313
15778: PUSH
15779: LD_INT 6
15781: LESS
15782: AND
15783: PUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 257
15793: PUSH
15794: LD_INT 3
15796: EQUAL
15797: AND
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 255
15808: PUSH
15809: LD_INT 3
15811: EQUAL
15812: AND
15813: PUSH
15814: LD_INT 24
15816: PPUSH
15817: CALL_OW 302
15821: AND
15822: PUSH
15823: LD_INT 24
15825: PPUSH
15826: CALL_OW 255
15830: PUSH
15831: LD_INT 3
15833: EQUAL
15834: AND
15835: IFFALSE 15964
// begin ruMech := ruMech - 1 ;
15837: LD_ADDR_EXP 43
15841: PUSH
15842: LD_EXP 43
15846: PUSH
15847: LD_INT 1
15849: MINUS
15850: ST_TO_ADDR
// if ruMech = 0 then
15851: LD_EXP 43
15855: PUSH
15856: LD_INT 0
15858: EQUAL
15859: IFFALSE 15863
// exit ;
15861: GO 15964
// wait ( 0 0$40 ) ;
15863: LD_INT 1400
15865: PPUSH
15866: CALL_OW 67
// uc_side = 3 ;
15870: LD_ADDR_OWVAR 20
15874: PUSH
15875: LD_INT 3
15877: ST_TO_ADDR
// uc_nation = 3 ;
15878: LD_ADDR_OWVAR 21
15882: PUSH
15883: LD_INT 3
15885: ST_TO_ADDR
// hc_gallery :=  ;
15886: LD_ADDR_OWVAR 33
15890: PUSH
15891: LD_STRING 
15893: ST_TO_ADDR
// hc_name :=  ;
15894: LD_ADDR_OWVAR 26
15898: PUSH
15899: LD_STRING 
15901: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15902: LD_INT 0
15904: PPUSH
15905: LD_EXP 16
15909: PPUSH
15910: LD_EXP 17
15914: PPUSH
15915: CALL_OW 12
15919: PPUSH
15920: CALL_OW 383
// mech := CreateHuman ;
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: CALL_OW 44
15933: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 124
15941: PPUSH
15942: LD_INT 97
15944: PPUSH
15945: LD_INT 0
15947: PPUSH
15948: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15952: LD_VAR 0 2
15956: PPUSH
15957: LD_INT 24
15959: PPUSH
15960: CALL_OW 120
// end ; end ;
15964: PPOPN 2
15966: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15967: LD_INT 0
15969: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL 35613 0 2
// if GetSide ( vehicle ) = 1 then
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 255
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 16013
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15999: LD_ADDR_EXP 42
16003: PUSH
16004: LD_EXP 42
16008: PUSH
16009: LD_INT 1
16011: PLUS
16012: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 255
16022: PUSH
16023: LD_INT 3
16025: EQUAL
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 264
16036: PUSH
16037: LD_INT 42
16039: PUSH
16040: LD_INT 43
16042: PUSH
16043: LD_INT 44
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: IN
16051: AND
16052: IFFALSE 16070
// ruMobile := ruMobile union vehicle ;
16054: LD_ADDR_EXP 46
16058: PUSH
16059: LD_EXP 46
16063: PUSH
16064: LD_VAR 0 1
16068: UNION
16069: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 264
16079: PUSH
16080: LD_INT 53
16082: EQUAL
16083: IFFALSE 16219
// begin uc_side = 3 ;
16085: LD_ADDR_OWVAR 20
16089: PUSH
16090: LD_INT 3
16092: ST_TO_ADDR
// uc_nation = 3 ;
16093: LD_ADDR_OWVAR 21
16097: PUSH
16098: LD_INT 3
16100: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16101: LD_INT 0
16103: PPUSH
16104: LD_EXP 17
16108: PPUSH
16109: CALL_OW 383
// driver := CreateHuman ;
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: CALL_OW 44
16122: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_VAR 0 2
16132: PPUSH
16133: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_INT 21
16144: PPUSH
16145: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16149: LD_INT 35
16151: PPUSH
16152: CALL_OW 67
// until not HasTask ( vehicle ) ;
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 314
16165: NOT
16166: IFFALSE 16149
// driver := IsDrivenBy ( vehicle ) ;
16168: LD_ADDR_VAR 0 3
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 311
16182: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 104
16190: PPUSH
16191: LD_INT 73
16193: PPUSH
16194: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16198: LD_VAR 0 3
16202: PPUSH
16203: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_INT 24
16214: PPUSH
16215: CALL_OW 180
// end ; end ;
16219: PPOPN 3
16221: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 255
16231: PUSH
16232: LD_INT 3
16234: EQUAL
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 247
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: AND
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 264
16260: PUSH
16261: LD_INT 42
16263: PUSH
16264: LD_INT 43
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: IN
16275: AND
16276: IFFALSE 16325
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16278: LD_INT 24
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 265
16290: PPUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 262
16300: PPUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 263
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 264
16320: PPUSH
16321: CALL_OW 185
// end ;
16325: PPOPN 1
16327: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 255
16337: PUSH
16338: LD_INT 3
16340: EQUAL
16341: PUSH
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: LD_INT 3
16354: EQUAL
16355: AND
16356: PUSH
16357: LD_INT 24
16359: PPUSH
16360: CALL_OW 302
16364: AND
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 302
16375: NOT
16376: AND
16377: IFFALSE 16391
// ComEnterUnit ( human , rubfact0 ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 24
16386: PPUSH
16387: CALL_OW 120
// end ;
16391: PPOPN 2
16393: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16394: LD_VAR 0 1
16398: PUSH
16399: LD_INT 24
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 256
16412: PUSH
16413: LD_INT 1000
16415: LESS
16416: AND
16417: IFFALSE 16431
// SetLives ( un , 1000 ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: LD_INT 1000
16426: PPUSH
16427: CALL_OW 234
// end ;
16431: PPOPN 2
16433: END
// on Command ( comandid ) do var i , j , tmp ;
16434: LD_INT 0
16436: PPUSH
16437: PPUSH
16438: PPUSH
// begin SOS_Command ( comandid ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL 35597 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16448: LD_INT 22
16450: PUSH
16451: LD_INT 4
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PPUSH
16458: CALL_OW 69
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16632
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 21
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: PUSH
16519: FOR_IN
16520: IFFALSE 16630
// begin if GetTaskList ( i ) > 0 then
16522: LD_VAR 0 2
16526: PPUSH
16527: CALL_OW 437
16531: PUSH
16532: LD_INT 0
16534: GREATER
16535: IFFALSE 16628
// begin for j = 1 to GetTaskList ( i ) do
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: DOUBLE
16543: LD_INT 1
16545: DEC
16546: ST_TO_ADDR
16547: LD_VAR 0 2
16551: PPUSH
16552: CALL_OW 437
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16626
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16560: LD_ADDR_VAR 0 4
16564: PUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 437
16574: PUSH
16575: LD_VAR 0 3
16579: ARRAY
16580: PUSH
16581: LD_INT 4
16583: ARRAY
16584: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16585: LD_VAR 0 4
16589: PPUSH
16590: CALL_OW 255
16594: PUSH
16595: LD_INT 4
16597: EQUAL
16598: PUSH
16599: LD_VAR 0 4
16603: PPUSH
16604: CALL_OW 255
16608: PUSH
16609: LD_INT 0
16611: EQUAL
16612: OR
16613: IFFALSE 16624
// ComStop ( i ) ;
16615: LD_VAR 0 2
16619: PPUSH
16620: CALL_OW 141
// end ;
16624: GO 16557
16626: POP
16627: POP
// end ; end ;
16628: GO 16519
16630: POP
16631: POP
// end ; end_of_file
16632: PPOPN 4
16634: END
// every 10 10$0 do
16635: GO 16637
16637: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16638: LD_INT 5
16640: PPUSH
16641: LD_INT 3
16643: PPUSH
16644: LD_INT 2
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: LD_INT 4
16655: PUSH
16656: LD_INT 4
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: LD_OWVAR 67
16669: ARRAY
16670: PLUS
16671: PPUSH
16672: LD_INT 0
16674: PPUSH
16675: LD_EXP 16
16679: PPUSH
16680: LD_EXP 17
16684: PPUSH
16685: CALL_OW 12
16689: PPUSH
16690: LD_INT 4
16692: PPUSH
16693: LD_INT 14
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: LD_INT 2
16701: PPUSH
16702: CALL 6960 0 9
16706: END
// every 20 20$0 do
16707: GO 16709
16709: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16710: LD_INT 5
16712: PPUSH
16713: LD_INT 3
16715: PPUSH
16716: LD_INT 4
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 3
16724: PUSH
16725: LD_INT 4
16727: PUSH
16728: LD_INT 5
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_OWVAR 67
16741: ARRAY
16742: PLUS
16743: PPUSH
16744: LD_INT 2
16746: PPUSH
16747: LD_EXP 16
16751: PPUSH
16752: LD_EXP 17
16756: PPUSH
16757: CALL_OW 12
16761: PPUSH
16762: LD_INT 4
16764: PPUSH
16765: LD_INT 14
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: CALL 6960 0 9
16778: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16779: GO 16781
16781: DISABLE
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
// begin hex := [ 123 , 95 ] ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_INT 123
16796: PUSH
16797: LD_INT 95
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: ST_TO_ADDR
// tmp := [ ] ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: EMPTY
16810: ST_TO_ADDR
// if Difficulty > 1 then
16811: LD_OWVAR 67
16815: PUSH
16816: LD_INT 1
16818: GREATER
16819: IFFALSE 16829
// specAttack := true ;
16821: LD_ADDR_EXP 47
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16829: LD_ADDR_VAR 0 1
16833: PUSH
16834: DOUBLE
16835: LD_INT 1
16837: DEC
16838: ST_TO_ADDR
16839: LD_INT 4
16841: PUSH
16842: LD_INT 5
16844: PUSH
16845: LD_INT 6
16847: PUSH
16848: LD_INT 7
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: LD_OWVAR 67
16861: ARRAY
16862: PUSH
16863: FOR_TO
16864: IFFALSE 17166
// begin uc_side := 5 ;
16866: LD_ADDR_OWVAR 20
16870: PUSH
16871: LD_INT 5
16873: ST_TO_ADDR
// uc_nation := 3 ;
16874: LD_ADDR_OWVAR 21
16878: PUSH
16879: LD_INT 3
16881: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16882: LD_ADDR_OWVAR 37
16886: PUSH
16887: LD_INT 21
16889: PUSH
16890: LD_INT 22
16892: PUSH
16893: LD_INT 23
16895: PUSH
16896: LD_INT 24
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_VAR 0 1
16909: PUSH
16910: LD_OWVAR 67
16914: MOD
16915: PUSH
16916: LD_INT 1
16918: PLUS
16919: ARRAY
16920: ST_TO_ADDR
// vc_engine := engine_combustion ;
16921: LD_ADDR_OWVAR 39
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// vc_control := control_manual ;
16929: LD_ADDR_OWVAR 38
16933: PUSH
16934: LD_INT 1
16936: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16937: LD_ADDR_OWVAR 40
16941: PUSH
16942: LD_INT 42
16944: PUSH
16945: LD_INT 43
16947: PUSH
16948: LD_INT 44
16950: PUSH
16951: LD_INT 44
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: LD_VAR 0 1
16964: PUSH
16965: LD_OWVAR 67
16969: MOD
16970: PUSH
16971: LD_INT 1
16973: PLUS
16974: ARRAY
16975: ST_TO_ADDR
// veh := CreateVehicle ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: CALL_OW 45
16985: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_INT 5
16993: PPUSH
16994: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16998: LD_INT 35
17000: PPUSH
17001: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17005: LD_VAR 0 4
17009: PUSH
17010: LD_INT 1
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 4
17018: PUSH
17019: LD_INT 2
17021: ARRAY
17022: PPUSH
17023: CALL_OW 428
17027: PUSH
17028: LD_INT 0
17030: EQUAL
17031: IFFALSE 16998
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17033: LD_VAR 0 3
17037: PPUSH
17038: LD_VAR 0 4
17042: PUSH
17043: LD_INT 1
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 4
17051: PUSH
17052: LD_INT 2
17054: ARRAY
17055: PPUSH
17056: LD_INT 0
17058: PPUSH
17059: CALL_OW 48
// uc_side := 5 ;
17063: LD_ADDR_OWVAR 20
17067: PUSH
17068: LD_INT 5
17070: ST_TO_ADDR
// uc_nation := 3 ;
17071: LD_ADDR_OWVAR 21
17075: PUSH
17076: LD_INT 3
17078: ST_TO_ADDR
// InitHC_All ( ) ;
17079: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17083: LD_INT 0
17085: PPUSH
17086: LD_INT 2
17088: PUSH
17089: LD_OWVAR 67
17093: PLUS
17094: PPUSH
17095: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17099: CALL_OW 44
17103: PPUSH
17104: LD_VAR 0 3
17108: PPUSH
17109: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 101
17120: PPUSH
17121: LD_INT 77
17123: PPUSH
17124: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17128: LD_ADDR_VAR 0 5
17132: PUSH
17133: LD_VAR 0 5
17137: PPUSH
17138: LD_VAR 0 5
17142: PUSH
17143: LD_INT 1
17145: PLUS
17146: PPUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: CALL_OW 1
17156: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17157: LD_INT 105
17159: PPUSH
17160: CALL_OW 67
// end ;
17164: GO 16863
17166: POP
17167: POP
// repeat wait ( 0 0$1 ) ;
17168: LD_INT 35
17170: PPUSH
17171: CALL_OW 67
// for i in tmp do
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_VAR 0 5
17184: PUSH
17185: FOR_IN
17186: IFFALSE 17254
// if not IsOk ( i ) then
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 302
17197: NOT
17198: IFFALSE 17218
// tmp := tmp diff i else
17200: LD_ADDR_VAR 0 5
17204: PUSH
17205: LD_VAR 0 5
17209: PUSH
17210: LD_VAR 0 1
17214: DIFF
17215: ST_TO_ADDR
17216: GO 17252
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 74
17247: PPUSH
17248: CALL_OW 115
17252: GO 17185
17254: POP
17255: POP
// until not tmp ;
17256: LD_VAR 0 5
17260: NOT
17261: IFFALSE 17168
// end ;
17263: PPOPN 5
17265: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17266: LD_EXP 47
17270: IFFALSE 17648
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
// begin wait ( 0 0$20 ) ;
17281: LD_INT 700
17283: PPUSH
17284: CALL_OW 67
// uc_side := 5 ;
17288: LD_ADDR_OWVAR 20
17292: PUSH
17293: LD_INT 5
17295: ST_TO_ADDR
// uc_nation := 3 ;
17296: LD_ADDR_OWVAR 21
17300: PUSH
17301: LD_INT 3
17303: ST_TO_ADDR
// InitHc ;
17304: CALL_OW 19
// hc_importance := 0 ;
17308: LD_ADDR_OWVAR 32
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// tmp := [ ] ;
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: EMPTY
17322: ST_TO_ADDR
// InitHC_All ( ) ;
17323: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17327: LD_INT 0
17329: PPUSH
17330: LD_INT 2
17332: PPUSH
17333: LD_INT 6
17335: PPUSH
17336: CALL_OW 380
// eng := CreateHuman ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: CALL_OW 44
17349: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_INT 78
17357: PPUSH
17358: LD_INT 2
17360: PPUSH
17361: LD_INT 4
17363: PPUSH
17364: LD_INT 0
17366: PPUSH
17367: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: DOUBLE
17377: LD_INT 1
17379: DEC
17380: ST_TO_ADDR
17381: LD_INT 3
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 4
17389: PUSH
17390: LD_INT 5
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_OWVAR 67
17403: ARRAY
17404: PUSH
17405: FOR_TO
17406: IFFALSE 17495
// begin InitHC_All ( ) ;
17408: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17412: LD_INT 0
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 4
17420: PUSH
17421: LD_INT 5
17423: PUSH
17424: LD_INT 6
17426: PUSH
17427: LD_INT 6
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_OWVAR 67
17440: ARRAY
17441: PPUSH
17442: CALL_OW 380
// un := CreateHuman ;
17446: LD_ADDR_VAR 0 1
17450: PUSH
17451: CALL_OW 44
17455: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17456: LD_VAR 0 1
17460: PPUSH
17461: LD_INT 78
17463: PPUSH
17464: LD_INT 2
17466: PPUSH
17467: LD_INT 4
17469: PPUSH
17470: LD_INT 0
17472: PPUSH
17473: CALL_OW 50
// tmp := tmp ^ un ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_VAR 0 2
17486: PUSH
17487: LD_VAR 0 1
17491: ADD
17492: ST_TO_ADDR
// end ;
17493: GO 17405
17495: POP
17496: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17497: LD_VAR 0 2
17501: PPUSH
17502: LD_INT 49
17504: PPUSH
17505: LD_INT 3
17507: PPUSH
17508: CALL_OW 111
// wait ( 0 0$2 ) ;
17512: LD_INT 70
17514: PPUSH
17515: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17519: LD_VAR 0 4
17523: PPUSH
17524: LD_INT 49
17526: PPUSH
17527: LD_INT 3
17529: PPUSH
17530: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17534: LD_VAR 0 4
17538: PPUSH
17539: LD_INT 4
17541: PPUSH
17542: CALL_OW 227
// wait ( 0 0$10 ) ;
17546: LD_INT 350
17548: PPUSH
17549: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17553: LD_INT 35
17555: PPUSH
17556: CALL_OW 67
// for i in tmp do
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: FOR_IN
17571: IFFALSE 17639
// if not IsOk ( i ) then
17573: LD_VAR 0 3
17577: PPUSH
17578: CALL_OW 302
17582: NOT
17583: IFFALSE 17603
// tmp := tmp diff i else
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_VAR 0 2
17594: PUSH
17595: LD_VAR 0 3
17599: DIFF
17600: ST_TO_ADDR
17601: GO 17637
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 22
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: CALL_OW 74
17632: PPUSH
17633: CALL_OW 115
17637: GO 17570
17639: POP
17640: POP
// until not tmp ;
17641: LD_VAR 0 2
17645: NOT
17646: IFFALSE 17553
// end ; end_of_file
17648: PPOPN 4
17650: END
// every 0 0$1 trigger startTimer = 1 do
17651: LD_EXP 30
17655: PUSH
17656: LD_INT 1
17658: EQUAL
17659: IFFALSE 17789
17661: GO 17663
17663: DISABLE
// begin enable ;
17664: ENABLE
// if timerStatus = 1 then
17665: LD_EXP 29
17669: PUSH
17670: LD_INT 1
17672: EQUAL
17673: IFFALSE 17706
// begin timeToSupport = timeToSupport - 0 0$01 ;
17675: LD_ADDR_EXP 28
17679: PUSH
17680: LD_EXP 28
17684: PUSH
17685: LD_INT 35
17687: MINUS
17688: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17689: LD_ADDR_OWVAR 47
17693: PUSH
17694: LD_STRING #Am04-1
17696: PUSH
17697: LD_EXP 28
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: ST_TO_ADDR
// end ; if timerStatus = 2 then
17706: LD_EXP 29
17710: PUSH
17711: LD_INT 2
17713: EQUAL
17714: IFFALSE 17747
// begin timeToSupport = timeToSupport - 0 0$01 ;
17716: LD_ADDR_EXP 28
17720: PUSH
17721: LD_EXP 28
17725: PUSH
17726: LD_INT 35
17728: MINUS
17729: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17730: LD_ADDR_OWVAR 47
17734: PUSH
17735: LD_STRING #Am04-2
17737: PUSH
17738: LD_EXP 28
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: ST_TO_ADDR
// end ; if timerStatus = 3 then
17747: LD_EXP 29
17751: PUSH
17752: LD_INT 3
17754: EQUAL
17755: IFFALSE 17771
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17757: LD_ADDR_EXP 27
17761: PUSH
17762: LD_EXP 27
17766: PUSH
17767: LD_INT 35
17769: MINUS
17770: ST_TO_ADDR
// if timerStatus = 4 then
17771: LD_EXP 29
17775: PUSH
17776: LD_INT 4
17778: EQUAL
17779: IFFALSE 17789
// display_strings =  ;
17781: LD_ADDR_OWVAR 47
17785: PUSH
17786: LD_STRING 
17788: ST_TO_ADDR
// end ; end_of_file
17789: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17790: LD_EXP 15
17794: PPUSH
17795: CALL_OW 301
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 21
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: PUSH
17829: LD_INT 14
17831: PUSH
17832: LD_INT 13
17834: PUSH
17835: LD_INT 12
17837: PUSH
17838: LD_INT 11
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: PUSH
17847: LD_OWVAR 67
17851: ARRAY
17852: LESS
17853: AND
17854: IFFALSE 18440
17856: GO 17858
17858: DISABLE
17859: LD_INT 0
17861: PPUSH
17862: PPUSH
17863: PPUSH
// begin AIEnable = 0 ;
17864: LD_ADDR_EXP 37
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// escapeAvalaible = 1 ;
17872: LD_ADDR_EXP 40
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// Video ( true ) ;
17880: LD_INT 1
17882: PPUSH
17883: CALL 77046 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17887: LD_INT 3
17889: PPUSH
17890: LD_INT 1
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_INT 0
17898: PPUSH
17899: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17903: LD_INT 6
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: LD_INT 0
17914: PPUSH
17915: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17919: LD_INT 5
17921: PPUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_INT 0
17930: PPUSH
17931: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17935: LD_INT 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17945: LD_INT 97
17947: PPUSH
17948: LD_INT 91
17950: PPUSH
17951: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17955: LD_INT 22
17957: PUSH
17958: LD_INT 3
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 21
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: PPUSH
17984: CALL_OW 121
// wait ( 0 0$01 ) ;
17988: LD_INT 35
17990: PPUSH
17991: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17995: LD_INT 22
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 21
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: PPUSH
18024: LD_INT 124
18026: PPUSH
18027: LD_INT 98
18029: PPUSH
18030: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18034: LD_INT 22
18036: PUSH
18037: LD_INT 5
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 21
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PPUSH
18058: CALL_OW 69
18062: PPUSH
18063: CALL_OW 121
// wait ( 0 0$01 ) ;
18067: LD_INT 35
18069: PPUSH
18070: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18074: LD_INT 22
18076: PUSH
18077: LD_INT 5
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 21
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 69
18102: PPUSH
18103: LD_INT 124
18105: PPUSH
18106: LD_INT 98
18108: PPUSH
18109: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18113: LD_INT 22
18115: PUSH
18116: LD_INT 6
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 21
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: CALL_OW 121
// wait ( 0 0$01 ) ;
18146: LD_INT 35
18148: PPUSH
18149: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18153: LD_INT 22
18155: PUSH
18156: LD_INT 6
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 21
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: PPUSH
18182: LD_INT 124
18184: PPUSH
18185: LD_INT 98
18187: PPUSH
18188: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18192: LD_INT 22
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PPUSH
18221: LD_INT 124
18223: PPUSH
18224: LD_INT 96
18226: PPUSH
18227: CALL_OW 114
// wait ( 0 0$1 ) ;
18231: LD_INT 35
18233: PPUSH
18234: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18238: LD_INT 124
18240: PPUSH
18241: LD_INT 96
18243: PPUSH
18244: CALL_OW 84
// p := 0 0$0 ;
18248: LD_ADDR_VAR 0 3
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_INT 6
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 21
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 69
18307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18308: LD_INT 35
18310: PPUSH
18311: CALL_OW 67
// p := p + 0 0$1 ;
18315: LD_ADDR_VAR 0 3
18319: PUSH
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 35
18327: PLUS
18328: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_INT 5
18336: PPUSH
18337: CALL_OW 113
// for i in tmp do
18341: LD_ADDR_VAR 0 1
18345: PUSH
18346: LD_VAR 0 2
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18379
// if IsInArea ( tmp , RussianEscape ) then
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_INT 5
18361: PPUSH
18362: CALL_OW 308
18366: IFFALSE 18377
// RemoveUnit ( i ) ;
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 64
18377: GO 18351
18379: POP
18380: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18381: LD_INT 23
18383: PUSH
18384: LD_INT 3
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 21
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 24
18403: PUSH
18404: LD_INT 250
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: PUSH
18421: LD_INT 0
18423: EQUAL
18424: PUSH
18425: LD_VAR 0 3
18429: PUSH
18430: LD_INT 245
18432: GREATEREQUAL
18433: OR
18434: IFFALSE 18308
// FinishMission ;
18436: CALL 18443 0 0
// end ;
18440: PPOPN 3
18442: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18443: LD_INT 0
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
// if not vehicleProduceCounter then
18450: LD_EXP 42
18454: NOT
18455: IFFALSE 18464
// SetAchievement ( ACH_INFANTRY ) ;
18457: LD_STRING ACH_INFANTRY
18459: PPUSH
18460: CALL_OW 543
// if tick <= 20 20$00 then
18464: LD_OWVAR 1
18468: PUSH
18469: LD_INT 42000
18471: LESSEQUAL
18472: IFFALSE 18488
// begin wait ( 3 ) ;
18474: LD_INT 3
18476: PPUSH
18477: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18481: LD_STRING ACH_ASPEED_4
18483: PPUSH
18484: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18488: LD_INT 22
18490: PPUSH
18491: CALL 19132 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18495: LD_INT 69
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 321
18505: PPUSH
18506: LD_STRING GatlingInGamma
18508: PPUSH
18509: CALL_OW 39
// m1 := false ;
18513: LD_ADDR_VAR 0 3
18517: PUSH
18518: LD_INT 0
18520: ST_TO_ADDR
// m2 := false ;
18521: LD_ADDR_VAR 0 4
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// m3 := false ;
18529: LD_ADDR_VAR 0 5
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18537: LD_EXP 34
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: PUSH
18546: LD_EXP 35
18550: PUSH
18551: LD_INT 1
18553: EQUAL
18554: AND
18555: IFFALSE 18577
// begin AddMedal ( oil , 1 ) ;
18557: LD_STRING oil
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 101
// m1 := true ;
18567: LD_ADDR_VAR 0 3
18571: PUSH
18572: LD_INT 1
18574: ST_TO_ADDR
// end else
18575: GO 18670
// begin if buildOil = 1 and buildPower = 0 then
18577: LD_EXP 34
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: PUSH
18586: LD_EXP 35
18590: PUSH
18591: LD_INT 0
18593: EQUAL
18594: AND
18595: IFFALSE 18608
// AddMedal ( oil , - 1 ) ;
18597: LD_STRING oil
18599: PPUSH
18600: LD_INT 1
18602: NEG
18603: PPUSH
18604: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18608: LD_EXP 34
18612: PUSH
18613: LD_INT 0
18615: EQUAL
18616: PUSH
18617: LD_EXP 35
18621: PUSH
18622: LD_INT 1
18624: EQUAL
18625: AND
18626: IFFALSE 18639
// AddMedal ( oil , - 2 ) ;
18628: LD_STRING oil
18630: PPUSH
18631: LD_INT 2
18633: NEG
18634: PPUSH
18635: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18639: LD_EXP 34
18643: PUSH
18644: LD_INT 0
18646: EQUAL
18647: PUSH
18648: LD_EXP 35
18652: PUSH
18653: LD_INT 0
18655: EQUAL
18656: AND
18657: IFFALSE 18670
// AddMedal ( oil , - 3 ) ;
18659: LD_STRING oil
18661: PPUSH
18662: LD_INT 3
18664: NEG
18665: PPUSH
18666: CALL_OW 101
// end ; if lostCounter > 3 then
18670: LD_EXP 38
18674: PUSH
18675: LD_INT 3
18677: GREATER
18678: IFFALSE 18693
// AddMedal ( deaths , - 1 ) else
18680: LD_STRING deaths
18682: PPUSH
18683: LD_INT 1
18685: NEG
18686: PPUSH
18687: CALL_OW 101
18691: GO 18711
// begin AddMedal ( deaths , 1 ) ;
18693: LD_STRING deaths
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 101
// m2 := true ;
18703: LD_ADDR_VAR 0 4
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// end ; if honor = 1 then
18711: LD_EXP 39
18715: PUSH
18716: LD_INT 1
18718: EQUAL
18719: IFFALSE 18741
// begin AddMedal ( honour , 1 ) ;
18721: LD_STRING honour
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: CALL_OW 101
// m3 := true ;
18731: LD_ADDR_VAR 0 5
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// end else
18739: GO 18752
// AddMedal ( honour , - 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: NEG
18747: PPUSH
18748: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_VAR 0 4
18761: AND
18762: PUSH
18763: LD_VAR 0 5
18767: AND
18768: PUSH
18769: LD_OWVAR 67
18773: PUSH
18774: LD_INT 3
18776: GREATEREQUAL
18777: AND
18778: IFFALSE 18790
// SetAchievementEX ( ACH_AMER , 4 ) ;
18780: LD_STRING ACH_AMER
18782: PPUSH
18783: LD_INT 4
18785: PPUSH
18786: CALL_OW 564
// GiveMedals ( Main ) ;
18790: LD_STRING Main
18792: PPUSH
18793: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18797: LD_INT 22
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 23
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: PPUSH
18832: CALL_OW 69
18836: PPUSH
18837: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18841: LD_EXP 1
18845: PPUSH
18846: LD_EXP 48
18850: PUSH
18851: LD_STRING JMM
18853: STR
18854: PPUSH
18855: CALL_OW 38
// if IsOK ( Bobby ) then
18859: LD_EXP 2
18863: PPUSH
18864: CALL_OW 302
18868: IFFALSE 18888
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18870: LD_EXP 2
18874: PPUSH
18875: LD_EXP 48
18879: PUSH
18880: LD_STRING Bobby
18882: STR
18883: PPUSH
18884: CALL_OW 38
// if IsOK ( Cyrus ) then
18888: LD_EXP 3
18892: PPUSH
18893: CALL_OW 302
18897: IFFALSE 18917
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18899: LD_EXP 3
18903: PPUSH
18904: LD_EXP 48
18908: PUSH
18909: LD_STRING Cyrus
18911: STR
18912: PPUSH
18913: CALL_OW 38
// if IsOK ( Lisa ) then
18917: LD_EXP 4
18921: PPUSH
18922: CALL_OW 302
18926: IFFALSE 18946
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18928: LD_EXP 4
18932: PPUSH
18933: LD_EXP 48
18937: PUSH
18938: LD_STRING Lisa
18940: STR
18941: PPUSH
18942: CALL_OW 38
// if IsOK ( Brown ) then
18946: LD_EXP 7
18950: PPUSH
18951: CALL_OW 302
18955: IFFALSE 18975
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18957: LD_EXP 7
18961: PPUSH
18962: LD_EXP 48
18966: PUSH
18967: LD_STRING Brown
18969: STR
18970: PPUSH
18971: CALL_OW 38
// if not IsDead ( Donaldson ) then
18975: LD_EXP 13
18979: PPUSH
18980: CALL_OW 301
18984: NOT
18985: IFFALSE 19005
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18987: LD_EXP 13
18991: PPUSH
18992: LD_EXP 48
18996: PUSH
18997: LD_STRING Donaldson
18999: STR
19000: PPUSH
19001: CALL_OW 38
// if not IsDead ( Frank ) then
19005: LD_EXP 5
19009: PPUSH
19010: CALL_OW 301
19014: NOT
19015: IFFALSE 19035
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19017: LD_EXP 5
19021: PPUSH
19022: LD_EXP 48
19026: PUSH
19027: LD_STRING Frank
19029: STR
19030: PPUSH
19031: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19035: LD_INT 50
19037: PUSH
19038: EMPTY
19039: LIST
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 21
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: PUSH
19071: LD_EXP 1
19075: PUSH
19076: LD_EXP 2
19080: PUSH
19081: LD_EXP 3
19085: PUSH
19086: LD_EXP 4
19090: PUSH
19091: LD_EXP 7
19095: PUSH
19096: LD_EXP 13
19100: PUSH
19101: LD_EXP 5
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: DIFF
19115: PPUSH
19116: LD_STRING 04_other_survivors
19118: PPUSH
19119: CALL_OW 38
// YouWin ;
19123: CALL_OW 103
// end ;
19127: LD_VAR 0 1
19131: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19132: LD_INT 0
19134: PPUSH
19135: PPUSH
19136: PPUSH
19137: PPUSH
// gammaBase = [ ] ;
19138: LD_ADDR_VAR 0 4
19142: PUSH
19143: EMPTY
19144: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19145: LD_ADDR_VAR 0 5
19149: PUSH
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_INT 22
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 21
19167: PUSH
19168: LD_INT 3
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 70
19183: ST_TO_ADDR
// for i in buildings do
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_VAR 0 5
19193: PUSH
19194: FOR_IN
19195: IFFALSE 19532
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19197: LD_VAR 0 3
19201: PPUSH
19202: CALL_OW 266
19206: PUSH
19207: LD_INT 6
19209: PUSH
19210: LD_INT 7
19212: PUSH
19213: LD_INT 8
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: IN
19221: IFFALSE 19335
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19223: LD_ADDR_VAR 0 4
19227: PUSH
19228: LD_VAR 0 4
19232: PUSH
19233: LD_VAR 0 3
19237: PPUSH
19238: CALL_OW 266
19242: PUSH
19243: LD_VAR 0 3
19247: PPUSH
19248: CALL_OW 250
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 251
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 254
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 267
19282: PUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 248
19292: PUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: LD_INT 1
19300: PPUSH
19301: CALL_OW 268
19305: PUSH
19306: LD_VAR 0 3
19310: PPUSH
19311: LD_INT 2
19313: PPUSH
19314: CALL_OW 268
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: ADD
19332: ST_TO_ADDR
19333: GO 19530
// if GetBType ( i ) in [ b_bunker ] then
19335: LD_VAR 0 3
19339: PPUSH
19340: CALL_OW 266
19344: PUSH
19345: LD_INT 32
19347: PUSH
19348: EMPTY
19349: LIST
19350: IN
19351: IFFALSE 19448
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19353: LD_ADDR_VAR 0 4
19357: PUSH
19358: LD_VAR 0 4
19362: PUSH
19363: LD_VAR 0 3
19367: PPUSH
19368: CALL_OW 266
19372: PUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: CALL_OW 250
19382: PUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: CALL_OW 251
19392: PUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: CALL_OW 254
19402: PUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: CALL_OW 267
19412: PUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: CALL_OW 248
19422: PUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 269
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: PUSH
19442: EMPTY
19443: LIST
19444: ADD
19445: ST_TO_ADDR
19446: GO 19530
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19448: LD_ADDR_VAR 0 4
19452: PUSH
19453: LD_VAR 0 4
19457: PUSH
19458: LD_VAR 0 3
19462: PPUSH
19463: CALL_OW 266
19467: PUSH
19468: LD_VAR 0 3
19472: PPUSH
19473: CALL_OW 250
19477: PUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: CALL_OW 251
19487: PUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: CALL_OW 254
19497: PUSH
19498: LD_VAR 0 3
19502: PPUSH
19503: CALL_OW 267
19507: PUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 248
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: ADD
19529: ST_TO_ADDR
// end ;
19530: GO 19194
19532: POP
19533: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19534: LD_VAR 0 4
19538: PPUSH
19539: LD_STRING GammaBase
19541: PPUSH
19542: CALL_OW 39
// end ; end_of_file
19546: LD_VAR 0 2
19550: RET
// every 1 1$15 do
19551: GO 19553
19553: DISABLE
// begin if supply <= 13 and supply > 7 then
19554: LD_EXP 36
19558: PUSH
19559: LD_INT 13
19561: LESSEQUAL
19562: PUSH
19563: LD_EXP 36
19567: PUSH
19568: LD_INT 7
19570: GREATER
19571: AND
19572: IFFALSE 19595
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19574: LD_INT 3
19576: PPUSH
19577: LD_INT 5
19579: PPUSH
19580: CALL_OW 12
19584: PPUSH
19585: LD_INT 18
19587: PPUSH
19588: LD_INT 1
19590: PPUSH
19591: CALL_OW 55
// if supply <= 7 and supply > 4 then
19595: LD_EXP 36
19599: PUSH
19600: LD_INT 7
19602: LESSEQUAL
19603: PUSH
19604: LD_EXP 36
19608: PUSH
19609: LD_INT 4
19611: GREATER
19612: AND
19613: IFFALSE 19636
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19615: LD_INT 3
19617: PPUSH
19618: LD_INT 5
19620: PPUSH
19621: CALL_OW 12
19625: PPUSH
19626: LD_INT 19
19628: PPUSH
19629: LD_INT 1
19631: PPUSH
19632: CALL_OW 55
// if supply <= 4 and supply > 0 then
19636: LD_EXP 36
19640: PUSH
19641: LD_INT 4
19643: LESSEQUAL
19644: PUSH
19645: LD_EXP 36
19649: PUSH
19650: LD_INT 0
19652: GREATER
19653: AND
19654: IFFALSE 19677
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19656: LD_INT 3
19658: PPUSH
19659: LD_INT 5
19661: PPUSH
19662: CALL_OW 12
19666: PPUSH
19667: LD_INT 20
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 55
// if supply then
19677: LD_EXP 36
19681: IFFALSE 19698
// begin supply = supply - 1 ;
19683: LD_ADDR_EXP 36
19687: PUSH
19688: LD_EXP 36
19692: PUSH
19693: LD_INT 1
19695: MINUS
19696: ST_TO_ADDR
// enable ;
19697: ENABLE
// end ; end ; end_of_file end_of_file
19698: END
// export globalGameSaveCounter ; every 0 0$1 do
19699: GO 19701
19701: DISABLE
// begin enable ;
19702: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19703: LD_STRING updateTimer(
19705: PUSH
19706: LD_OWVAR 1
19710: STR
19711: PUSH
19712: LD_STRING );
19714: STR
19715: PPUSH
19716: CALL_OW 559
// end ;
19720: END
// every 0 0$1 do
19721: GO 19723
19723: DISABLE
// begin globalGameSaveCounter := 0 ;
19724: LD_ADDR_EXP 50
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19732: LD_STRING setGameSaveCounter(0)
19734: PPUSH
19735: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19739: LD_STRING initStreamRollete();
19741: PPUSH
19742: CALL_OW 559
// InitStreamMode ;
19746: CALL 21072 0 0
// DefineStreamItems ( false ) ;
19750: LD_INT 0
19752: PPUSH
19753: CALL 21536 0 1
// end ;
19757: END
// export function SOS_MapStart ( ) ; begin
19758: LD_INT 0
19760: PPUSH
// if streamModeActive then
19761: LD_EXP 51
19765: IFFALSE 19774
// DefineStreamItems ( true ) ;
19767: LD_INT 1
19769: PPUSH
19770: CALL 21536 0 1
// UpdateLuaVariables ( ) ;
19774: CALL 19791 0 0
// UpdateFactoryWaypoints ( ) ;
19778: CALL 34397 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19782: CALL 34654 0 0
// end ;
19786: LD_VAR 0 1
19790: RET
// function UpdateLuaVariables ( ) ; begin
19791: LD_INT 0
19793: PPUSH
// if globalGameSaveCounter then
19794: LD_EXP 50
19798: IFFALSE 19832
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19800: LD_ADDR_EXP 50
19804: PUSH
19805: LD_EXP 50
19809: PPUSH
19810: CALL 78435 0 1
19814: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19815: LD_STRING setGameSaveCounter(
19817: PUSH
19818: LD_EXP 50
19822: STR
19823: PUSH
19824: LD_STRING )
19826: STR
19827: PPUSH
19828: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19832: LD_STRING setGameDifficulty(
19834: PUSH
19835: LD_OWVAR 67
19839: STR
19840: PUSH
19841: LD_STRING )
19843: STR
19844: PPUSH
19845: CALL_OW 559
// end ;
19849: LD_VAR 0 1
19853: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19854: LD_INT 0
19856: PPUSH
// if p2 = stream_mode then
19857: LD_VAR 0 2
19861: PUSH
19862: LD_INT 100
19864: EQUAL
19865: IFFALSE 20868
// begin if not StreamModeActive then
19867: LD_EXP 51
19871: NOT
19872: IFFALSE 19882
// StreamModeActive := true ;
19874: LD_ADDR_EXP 51
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// if p3 = 0 then
19882: LD_VAR 0 3
19886: PUSH
19887: LD_INT 0
19889: EQUAL
19890: IFFALSE 19896
// InitStreamMode ;
19892: CALL 21072 0 0
// if p3 = 1 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 1
19903: EQUAL
19904: IFFALSE 19914
// sRocket := true ;
19906: LD_ADDR_EXP 56
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// if p3 = 2 then
19914: LD_VAR 0 3
19918: PUSH
19919: LD_INT 2
19921: EQUAL
19922: IFFALSE 19932
// sSpeed := true ;
19924: LD_ADDR_EXP 55
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// if p3 = 3 then
19932: LD_VAR 0 3
19936: PUSH
19937: LD_INT 3
19939: EQUAL
19940: IFFALSE 19950
// sEngine := true ;
19942: LD_ADDR_EXP 57
19946: PUSH
19947: LD_INT 1
19949: ST_TO_ADDR
// if p3 = 4 then
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 4
19957: EQUAL
19958: IFFALSE 19968
// sSpec := true ;
19960: LD_ADDR_EXP 54
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// if p3 = 5 then
19968: LD_VAR 0 3
19972: PUSH
19973: LD_INT 5
19975: EQUAL
19976: IFFALSE 19986
// sLevel := true ;
19978: LD_ADDR_EXP 58
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 6 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 6
19993: EQUAL
19994: IFFALSE 20004
// sArmoury := true ;
19996: LD_ADDR_EXP 59
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if p3 = 7 then
20004: LD_VAR 0 3
20008: PUSH
20009: LD_INT 7
20011: EQUAL
20012: IFFALSE 20022
// sRadar := true ;
20014: LD_ADDR_EXP 60
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// if p3 = 8 then
20022: LD_VAR 0 3
20026: PUSH
20027: LD_INT 8
20029: EQUAL
20030: IFFALSE 20040
// sBunker := true ;
20032: LD_ADDR_EXP 61
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// if p3 = 9 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 9
20047: EQUAL
20048: IFFALSE 20058
// sHack := true ;
20050: LD_ADDR_EXP 62
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// if p3 = 10 then
20058: LD_VAR 0 3
20062: PUSH
20063: LD_INT 10
20065: EQUAL
20066: IFFALSE 20076
// sFire := true ;
20068: LD_ADDR_EXP 63
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// if p3 = 11 then
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 11
20083: EQUAL
20084: IFFALSE 20094
// sRefresh := true ;
20086: LD_ADDR_EXP 64
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// if p3 = 12 then
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 12
20101: EQUAL
20102: IFFALSE 20112
// sExp := true ;
20104: LD_ADDR_EXP 65
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// if p3 = 13 then
20112: LD_VAR 0 3
20116: PUSH
20117: LD_INT 13
20119: EQUAL
20120: IFFALSE 20130
// sDepot := true ;
20122: LD_ADDR_EXP 66
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// if p3 = 14 then
20130: LD_VAR 0 3
20134: PUSH
20135: LD_INT 14
20137: EQUAL
20138: IFFALSE 20148
// sFlag := true ;
20140: LD_ADDR_EXP 67
20144: PUSH
20145: LD_INT 1
20147: ST_TO_ADDR
// if p3 = 15 then
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 15
20155: EQUAL
20156: IFFALSE 20166
// sKamikadze := true ;
20158: LD_ADDR_EXP 75
20162: PUSH
20163: LD_INT 1
20165: ST_TO_ADDR
// if p3 = 16 then
20166: LD_VAR 0 3
20170: PUSH
20171: LD_INT 16
20173: EQUAL
20174: IFFALSE 20184
// sTroll := true ;
20176: LD_ADDR_EXP 76
20180: PUSH
20181: LD_INT 1
20183: ST_TO_ADDR
// if p3 = 17 then
20184: LD_VAR 0 3
20188: PUSH
20189: LD_INT 17
20191: EQUAL
20192: IFFALSE 20202
// sSlow := true ;
20194: LD_ADDR_EXP 77
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// if p3 = 18 then
20202: LD_VAR 0 3
20206: PUSH
20207: LD_INT 18
20209: EQUAL
20210: IFFALSE 20220
// sLack := true ;
20212: LD_ADDR_EXP 78
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// if p3 = 19 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 19
20227: EQUAL
20228: IFFALSE 20238
// sTank := true ;
20230: LD_ADDR_EXP 80
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 20 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 20
20245: EQUAL
20246: IFFALSE 20256
// sRemote := true ;
20248: LD_ADDR_EXP 81
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 21 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 21
20263: EQUAL
20264: IFFALSE 20274
// sPowell := true ;
20266: LD_ADDR_EXP 82
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 22 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 22
20281: EQUAL
20282: IFFALSE 20292
// sTeleport := true ;
20284: LD_ADDR_EXP 85
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 23 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 23
20299: EQUAL
20300: IFFALSE 20310
// sOilTower := true ;
20302: LD_ADDR_EXP 87
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 24 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 24
20317: EQUAL
20318: IFFALSE 20328
// sShovel := true ;
20320: LD_ADDR_EXP 88
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 25 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 25
20335: EQUAL
20336: IFFALSE 20346
// sSheik := true ;
20338: LD_ADDR_EXP 89
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 26 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 26
20353: EQUAL
20354: IFFALSE 20364
// sEarthquake := true ;
20356: LD_ADDR_EXP 91
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 27 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 27
20371: EQUAL
20372: IFFALSE 20382
// sAI := true ;
20374: LD_ADDR_EXP 92
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 28 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 28
20389: EQUAL
20390: IFFALSE 20400
// sCargo := true ;
20392: LD_ADDR_EXP 95
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 29 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 29
20407: EQUAL
20408: IFFALSE 20418
// sDLaser := true ;
20410: LD_ADDR_EXP 96
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 30 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 30
20425: EQUAL
20426: IFFALSE 20436
// sExchange := true ;
20428: LD_ADDR_EXP 97
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// if p3 = 31 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 31
20443: EQUAL
20444: IFFALSE 20454
// sFac := true ;
20446: LD_ADDR_EXP 98
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// if p3 = 32 then
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 32
20461: EQUAL
20462: IFFALSE 20472
// sPower := true ;
20464: LD_ADDR_EXP 99
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// if p3 = 33 then
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 33
20479: EQUAL
20480: IFFALSE 20490
// sRandom := true ;
20482: LD_ADDR_EXP 100
20486: PUSH
20487: LD_INT 1
20489: ST_TO_ADDR
// if p3 = 34 then
20490: LD_VAR 0 3
20494: PUSH
20495: LD_INT 34
20497: EQUAL
20498: IFFALSE 20508
// sShield := true ;
20500: LD_ADDR_EXP 101
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if p3 = 35 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 35
20515: EQUAL
20516: IFFALSE 20526
// sTime := true ;
20518: LD_ADDR_EXP 102
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// if p3 = 36 then
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 36
20533: EQUAL
20534: IFFALSE 20544
// sTools := true ;
20536: LD_ADDR_EXP 103
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// if p3 = 101 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_INT 101
20551: EQUAL
20552: IFFALSE 20562
// sSold := true ;
20554: LD_ADDR_EXP 68
20558: PUSH
20559: LD_INT 1
20561: ST_TO_ADDR
// if p3 = 102 then
20562: LD_VAR 0 3
20566: PUSH
20567: LD_INT 102
20569: EQUAL
20570: IFFALSE 20580
// sDiff := true ;
20572: LD_ADDR_EXP 69
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// if p3 = 103 then
20580: LD_VAR 0 3
20584: PUSH
20585: LD_INT 103
20587: EQUAL
20588: IFFALSE 20598
// sFog := true ;
20590: LD_ADDR_EXP 72
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// if p3 = 104 then
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 104
20605: EQUAL
20606: IFFALSE 20616
// sReset := true ;
20608: LD_ADDR_EXP 73
20612: PUSH
20613: LD_INT 1
20615: ST_TO_ADDR
// if p3 = 105 then
20616: LD_VAR 0 3
20620: PUSH
20621: LD_INT 105
20623: EQUAL
20624: IFFALSE 20634
// sSun := true ;
20626: LD_ADDR_EXP 74
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// if p3 = 106 then
20634: LD_VAR 0 3
20638: PUSH
20639: LD_INT 106
20641: EQUAL
20642: IFFALSE 20652
// sTiger := true ;
20644: LD_ADDR_EXP 70
20648: PUSH
20649: LD_INT 1
20651: ST_TO_ADDR
// if p3 = 107 then
20652: LD_VAR 0 3
20656: PUSH
20657: LD_INT 107
20659: EQUAL
20660: IFFALSE 20670
// sBomb := true ;
20662: LD_ADDR_EXP 71
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// if p3 = 108 then
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 108
20677: EQUAL
20678: IFFALSE 20688
// sWound := true ;
20680: LD_ADDR_EXP 79
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// if p3 = 109 then
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 109
20695: EQUAL
20696: IFFALSE 20706
// sBetray := true ;
20698: LD_ADDR_EXP 83
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// if p3 = 110 then
20706: LD_VAR 0 3
20710: PUSH
20711: LD_INT 110
20713: EQUAL
20714: IFFALSE 20724
// sContamin := true ;
20716: LD_ADDR_EXP 84
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if p3 = 111 then
20724: LD_VAR 0 3
20728: PUSH
20729: LD_INT 111
20731: EQUAL
20732: IFFALSE 20742
// sOil := true ;
20734: LD_ADDR_EXP 86
20738: PUSH
20739: LD_INT 1
20741: ST_TO_ADDR
// if p3 = 112 then
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 112
20749: EQUAL
20750: IFFALSE 20760
// sStu := true ;
20752: LD_ADDR_EXP 90
20756: PUSH
20757: LD_INT 1
20759: ST_TO_ADDR
// if p3 = 113 then
20760: LD_VAR 0 3
20764: PUSH
20765: LD_INT 113
20767: EQUAL
20768: IFFALSE 20778
// sBazooka := true ;
20770: LD_ADDR_EXP 93
20774: PUSH
20775: LD_INT 1
20777: ST_TO_ADDR
// if p3 = 114 then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 114
20785: EQUAL
20786: IFFALSE 20796
// sMortar := true ;
20788: LD_ADDR_EXP 94
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// if p3 = 115 then
20796: LD_VAR 0 3
20800: PUSH
20801: LD_INT 115
20803: EQUAL
20804: IFFALSE 20814
// sRanger := true ;
20806: LD_ADDR_EXP 104
20810: PUSH
20811: LD_INT 1
20813: ST_TO_ADDR
// if p3 = 116 then
20814: LD_VAR 0 3
20818: PUSH
20819: LD_INT 116
20821: EQUAL
20822: IFFALSE 20832
// sComputer := true ;
20824: LD_ADDR_EXP 105
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// if p3 = 117 then
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 117
20839: EQUAL
20840: IFFALSE 20850
// s30 := true ;
20842: LD_ADDR_EXP 106
20846: PUSH
20847: LD_INT 1
20849: ST_TO_ADDR
// if p3 = 118 then
20850: LD_VAR 0 3
20854: PUSH
20855: LD_INT 118
20857: EQUAL
20858: IFFALSE 20868
// s60 := true ;
20860: LD_ADDR_EXP 107
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// end ; if p2 = hack_mode then
20868: LD_VAR 0 2
20872: PUSH
20873: LD_INT 101
20875: EQUAL
20876: IFFALSE 21004
// begin case p3 of 1 :
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 1
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20898
20891: POP
// hHackUnlimitedResources ; 2 :
20892: CALL 33143 0 0
20896: GO 21004
20898: LD_INT 2
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20913
20906: POP
// hHackSetLevel10 ; 3 :
20907: CALL 33276 0 0
20911: GO 21004
20913: LD_INT 3
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20928
20921: POP
// hHackSetLevel10YourUnits ; 4 :
20922: CALL 33361 0 0
20926: GO 21004
20928: LD_INT 4
20930: DOUBLE
20931: EQUAL
20932: IFTRUE 20936
20934: GO 20943
20936: POP
// hHackInvincible ; 5 :
20937: CALL 33809 0 0
20941: GO 21004
20943: LD_INT 5
20945: DOUBLE
20946: EQUAL
20947: IFTRUE 20951
20949: GO 20958
20951: POP
// hHackInvisible ; 6 :
20952: CALL 33920 0 0
20956: GO 21004
20958: LD_INT 6
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 20973
20966: POP
// hHackChangeYourSide ; 7 :
20967: CALL 33977 0 0
20971: GO 21004
20973: LD_INT 7
20975: DOUBLE
20976: EQUAL
20977: IFTRUE 20981
20979: GO 20988
20981: POP
// hHackChangeUnitSide ; 8 :
20982: CALL 34019 0 0
20986: GO 21004
20988: LD_INT 8
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21003
20996: POP
// hHackFog ; end ;
20997: CALL 34120 0 0
21001: GO 21004
21003: POP
// end ; if p2 = game_save_mode then
21004: LD_VAR 0 2
21008: PUSH
21009: LD_INT 102
21011: EQUAL
21012: IFFALSE 21067
// begin if p3 = 1 then
21014: LD_VAR 0 3
21018: PUSH
21019: LD_INT 1
21021: EQUAL
21022: IFFALSE 21034
// globalGameSaveCounter := p4 ;
21024: LD_ADDR_EXP 50
21028: PUSH
21029: LD_VAR 0 4
21033: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21034: LD_VAR 0 3
21038: PUSH
21039: LD_INT 2
21041: EQUAL
21042: PUSH
21043: LD_EXP 50
21047: AND
21048: IFFALSE 21067
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21050: LD_STRING setGameSaveCounter(
21052: PUSH
21053: LD_EXP 50
21057: STR
21058: PUSH
21059: LD_STRING )
21061: STR
21062: PPUSH
21063: CALL_OW 559
// end ; end ;
21067: LD_VAR 0 7
21071: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21072: LD_INT 0
21074: PPUSH
// streamModeActive := false ;
21075: LD_ADDR_EXP 51
21079: PUSH
21080: LD_INT 0
21082: ST_TO_ADDR
// normalCounter := 36 ;
21083: LD_ADDR_EXP 52
21087: PUSH
21088: LD_INT 36
21090: ST_TO_ADDR
// hardcoreCounter := 18 ;
21091: LD_ADDR_EXP 53
21095: PUSH
21096: LD_INT 18
21098: ST_TO_ADDR
// sRocket := false ;
21099: LD_ADDR_EXP 56
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
// sSpeed := false ;
21107: LD_ADDR_EXP 55
21111: PUSH
21112: LD_INT 0
21114: ST_TO_ADDR
// sEngine := false ;
21115: LD_ADDR_EXP 57
21119: PUSH
21120: LD_INT 0
21122: ST_TO_ADDR
// sSpec := false ;
21123: LD_ADDR_EXP 54
21127: PUSH
21128: LD_INT 0
21130: ST_TO_ADDR
// sLevel := false ;
21131: LD_ADDR_EXP 58
21135: PUSH
21136: LD_INT 0
21138: ST_TO_ADDR
// sArmoury := false ;
21139: LD_ADDR_EXP 59
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// sRadar := false ;
21147: LD_ADDR_EXP 60
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// sBunker := false ;
21155: LD_ADDR_EXP 61
21159: PUSH
21160: LD_INT 0
21162: ST_TO_ADDR
// sHack := false ;
21163: LD_ADDR_EXP 62
21167: PUSH
21168: LD_INT 0
21170: ST_TO_ADDR
// sFire := false ;
21171: LD_ADDR_EXP 63
21175: PUSH
21176: LD_INT 0
21178: ST_TO_ADDR
// sRefresh := false ;
21179: LD_ADDR_EXP 64
21183: PUSH
21184: LD_INT 0
21186: ST_TO_ADDR
// sExp := false ;
21187: LD_ADDR_EXP 65
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// sDepot := false ;
21195: LD_ADDR_EXP 66
21199: PUSH
21200: LD_INT 0
21202: ST_TO_ADDR
// sFlag := false ;
21203: LD_ADDR_EXP 67
21207: PUSH
21208: LD_INT 0
21210: ST_TO_ADDR
// sKamikadze := false ;
21211: LD_ADDR_EXP 75
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
// sTroll := false ;
21219: LD_ADDR_EXP 76
21223: PUSH
21224: LD_INT 0
21226: ST_TO_ADDR
// sSlow := false ;
21227: LD_ADDR_EXP 77
21231: PUSH
21232: LD_INT 0
21234: ST_TO_ADDR
// sLack := false ;
21235: LD_ADDR_EXP 78
21239: PUSH
21240: LD_INT 0
21242: ST_TO_ADDR
// sTank := false ;
21243: LD_ADDR_EXP 80
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// sRemote := false ;
21251: LD_ADDR_EXP 81
21255: PUSH
21256: LD_INT 0
21258: ST_TO_ADDR
// sPowell := false ;
21259: LD_ADDR_EXP 82
21263: PUSH
21264: LD_INT 0
21266: ST_TO_ADDR
// sTeleport := false ;
21267: LD_ADDR_EXP 85
21271: PUSH
21272: LD_INT 0
21274: ST_TO_ADDR
// sOilTower := false ;
21275: LD_ADDR_EXP 87
21279: PUSH
21280: LD_INT 0
21282: ST_TO_ADDR
// sShovel := false ;
21283: LD_ADDR_EXP 88
21287: PUSH
21288: LD_INT 0
21290: ST_TO_ADDR
// sSheik := false ;
21291: LD_ADDR_EXP 89
21295: PUSH
21296: LD_INT 0
21298: ST_TO_ADDR
// sEarthquake := false ;
21299: LD_ADDR_EXP 91
21303: PUSH
21304: LD_INT 0
21306: ST_TO_ADDR
// sAI := false ;
21307: LD_ADDR_EXP 92
21311: PUSH
21312: LD_INT 0
21314: ST_TO_ADDR
// sCargo := false ;
21315: LD_ADDR_EXP 95
21319: PUSH
21320: LD_INT 0
21322: ST_TO_ADDR
// sDLaser := false ;
21323: LD_ADDR_EXP 96
21327: PUSH
21328: LD_INT 0
21330: ST_TO_ADDR
// sExchange := false ;
21331: LD_ADDR_EXP 97
21335: PUSH
21336: LD_INT 0
21338: ST_TO_ADDR
// sFac := false ;
21339: LD_ADDR_EXP 98
21343: PUSH
21344: LD_INT 0
21346: ST_TO_ADDR
// sPower := false ;
21347: LD_ADDR_EXP 99
21351: PUSH
21352: LD_INT 0
21354: ST_TO_ADDR
// sRandom := false ;
21355: LD_ADDR_EXP 100
21359: PUSH
21360: LD_INT 0
21362: ST_TO_ADDR
// sShield := false ;
21363: LD_ADDR_EXP 101
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
// sTime := false ;
21371: LD_ADDR_EXP 102
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
// sTools := false ;
21379: LD_ADDR_EXP 103
21383: PUSH
21384: LD_INT 0
21386: ST_TO_ADDR
// sSold := false ;
21387: LD_ADDR_EXP 68
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
// sDiff := false ;
21395: LD_ADDR_EXP 69
21399: PUSH
21400: LD_INT 0
21402: ST_TO_ADDR
// sFog := false ;
21403: LD_ADDR_EXP 72
21407: PUSH
21408: LD_INT 0
21410: ST_TO_ADDR
// sReset := false ;
21411: LD_ADDR_EXP 73
21415: PUSH
21416: LD_INT 0
21418: ST_TO_ADDR
// sSun := false ;
21419: LD_ADDR_EXP 74
21423: PUSH
21424: LD_INT 0
21426: ST_TO_ADDR
// sTiger := false ;
21427: LD_ADDR_EXP 70
21431: PUSH
21432: LD_INT 0
21434: ST_TO_ADDR
// sBomb := false ;
21435: LD_ADDR_EXP 71
21439: PUSH
21440: LD_INT 0
21442: ST_TO_ADDR
// sWound := false ;
21443: LD_ADDR_EXP 79
21447: PUSH
21448: LD_INT 0
21450: ST_TO_ADDR
// sBetray := false ;
21451: LD_ADDR_EXP 83
21455: PUSH
21456: LD_INT 0
21458: ST_TO_ADDR
// sContamin := false ;
21459: LD_ADDR_EXP 84
21463: PUSH
21464: LD_INT 0
21466: ST_TO_ADDR
// sOil := false ;
21467: LD_ADDR_EXP 86
21471: PUSH
21472: LD_INT 0
21474: ST_TO_ADDR
// sStu := false ;
21475: LD_ADDR_EXP 90
21479: PUSH
21480: LD_INT 0
21482: ST_TO_ADDR
// sBazooka := false ;
21483: LD_ADDR_EXP 93
21487: PUSH
21488: LD_INT 0
21490: ST_TO_ADDR
// sMortar := false ;
21491: LD_ADDR_EXP 94
21495: PUSH
21496: LD_INT 0
21498: ST_TO_ADDR
// sRanger := false ;
21499: LD_ADDR_EXP 104
21503: PUSH
21504: LD_INT 0
21506: ST_TO_ADDR
// sComputer := false ;
21507: LD_ADDR_EXP 105
21511: PUSH
21512: LD_INT 0
21514: ST_TO_ADDR
// s30 := false ;
21515: LD_ADDR_EXP 106
21519: PUSH
21520: LD_INT 0
21522: ST_TO_ADDR
// s60 := false ;
21523: LD_ADDR_EXP 107
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// end ;
21531: LD_VAR 0 1
21535: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21536: LD_INT 0
21538: PPUSH
21539: PPUSH
21540: PPUSH
21541: PPUSH
21542: PPUSH
21543: PPUSH
21544: PPUSH
// result := [ ] ;
21545: LD_ADDR_VAR 0 2
21549: PUSH
21550: EMPTY
21551: ST_TO_ADDR
// if campaign_id = 1 then
21552: LD_OWVAR 69
21556: PUSH
21557: LD_INT 1
21559: EQUAL
21560: IFFALSE 24726
// begin case mission_number of 1 :
21562: LD_OWVAR 70
21566: PUSH
21567: LD_INT 1
21569: DOUBLE
21570: EQUAL
21571: IFTRUE 21575
21573: GO 21651
21575: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21576: LD_ADDR_VAR 0 2
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: LD_INT 4
21586: PUSH
21587: LD_INT 11
21589: PUSH
21590: LD_INT 12
21592: PUSH
21593: LD_INT 15
21595: PUSH
21596: LD_INT 16
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_INT 23
21604: PUSH
21605: LD_INT 26
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 101
21621: PUSH
21622: LD_INT 102
21624: PUSH
21625: LD_INT 106
21627: PUSH
21628: LD_INT 116
21630: PUSH
21631: LD_INT 117
21633: PUSH
21634: LD_INT 118
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: ST_TO_ADDR
21649: GO 24724
21651: LD_INT 2
21653: DOUBLE
21654: EQUAL
21655: IFTRUE 21659
21657: GO 21743
21659: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21660: LD_ADDR_VAR 0 2
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: LD_INT 4
21670: PUSH
21671: LD_INT 11
21673: PUSH
21674: LD_INT 12
21676: PUSH
21677: LD_INT 15
21679: PUSH
21680: LD_INT 16
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 26
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 101
21705: PUSH
21706: LD_INT 102
21708: PUSH
21709: LD_INT 105
21711: PUSH
21712: LD_INT 106
21714: PUSH
21715: LD_INT 108
21717: PUSH
21718: LD_INT 116
21720: PUSH
21721: LD_INT 117
21723: PUSH
21724: LD_INT 118
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: ST_TO_ADDR
21741: GO 24724
21743: LD_INT 3
21745: DOUBLE
21746: EQUAL
21747: IFTRUE 21751
21749: GO 21839
21751: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21752: LD_ADDR_VAR 0 2
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 4
21762: PUSH
21763: LD_INT 5
21765: PUSH
21766: LD_INT 11
21768: PUSH
21769: LD_INT 12
21771: PUSH
21772: LD_INT 15
21774: PUSH
21775: LD_INT 16
21777: PUSH
21778: LD_INT 22
21780: PUSH
21781: LD_INT 26
21783: PUSH
21784: LD_INT 36
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 101
21801: PUSH
21802: LD_INT 102
21804: PUSH
21805: LD_INT 105
21807: PUSH
21808: LD_INT 106
21810: PUSH
21811: LD_INT 108
21813: PUSH
21814: LD_INT 116
21816: PUSH
21817: LD_INT 117
21819: PUSH
21820: LD_INT 118
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: ST_TO_ADDR
21837: GO 24724
21839: LD_INT 4
21841: DOUBLE
21842: EQUAL
21843: IFTRUE 21847
21845: GO 21943
21847: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21848: LD_ADDR_VAR 0 2
21852: PUSH
21853: LD_INT 2
21855: PUSH
21856: LD_INT 4
21858: PUSH
21859: LD_INT 5
21861: PUSH
21862: LD_INT 8
21864: PUSH
21865: LD_INT 11
21867: PUSH
21868: LD_INT 12
21870: PUSH
21871: LD_INT 15
21873: PUSH
21874: LD_INT 16
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 26
21885: PUSH
21886: LD_INT 36
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 101
21905: PUSH
21906: LD_INT 102
21908: PUSH
21909: LD_INT 105
21911: PUSH
21912: LD_INT 106
21914: PUSH
21915: LD_INT 108
21917: PUSH
21918: LD_INT 116
21920: PUSH
21921: LD_INT 117
21923: PUSH
21924: LD_INT 118
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: ST_TO_ADDR
21941: GO 24724
21943: LD_INT 5
21945: DOUBLE
21946: EQUAL
21947: IFTRUE 21951
21949: GO 22063
21951: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21952: LD_ADDR_VAR 0 2
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: LD_INT 4
21962: PUSH
21963: LD_INT 5
21965: PUSH
21966: LD_INT 6
21968: PUSH
21969: LD_INT 8
21971: PUSH
21972: LD_INT 11
21974: PUSH
21975: LD_INT 12
21977: PUSH
21978: LD_INT 15
21980: PUSH
21981: LD_INT 16
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_INT 23
21989: PUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 26
21995: PUSH
21996: LD_INT 36
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 101
22017: PUSH
22018: LD_INT 102
22020: PUSH
22021: LD_INT 105
22023: PUSH
22024: LD_INT 106
22026: PUSH
22027: LD_INT 108
22029: PUSH
22030: LD_INT 109
22032: PUSH
22033: LD_INT 112
22035: PUSH
22036: LD_INT 116
22038: PUSH
22039: LD_INT 117
22041: PUSH
22042: LD_INT 118
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: ST_TO_ADDR
22061: GO 24724
22063: LD_INT 6
22065: DOUBLE
22066: EQUAL
22067: IFTRUE 22071
22069: GO 22203
22071: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22072: LD_ADDR_VAR 0 2
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 4
22082: PUSH
22083: LD_INT 5
22085: PUSH
22086: LD_INT 6
22088: PUSH
22089: LD_INT 8
22091: PUSH
22092: LD_INT 11
22094: PUSH
22095: LD_INT 12
22097: PUSH
22098: LD_INT 15
22100: PUSH
22101: LD_INT 16
22103: PUSH
22104: LD_INT 20
22106: PUSH
22107: LD_INT 21
22109: PUSH
22110: LD_INT 22
22112: PUSH
22113: LD_INT 23
22115: PUSH
22116: LD_INT 25
22118: PUSH
22119: LD_INT 26
22121: PUSH
22122: LD_INT 30
22124: PUSH
22125: LD_INT 31
22127: PUSH
22128: LD_INT 32
22130: PUSH
22131: LD_INT 36
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 101
22157: PUSH
22158: LD_INT 102
22160: PUSH
22161: LD_INT 105
22163: PUSH
22164: LD_INT 106
22166: PUSH
22167: LD_INT 108
22169: PUSH
22170: LD_INT 109
22172: PUSH
22173: LD_INT 112
22175: PUSH
22176: LD_INT 116
22178: PUSH
22179: LD_INT 117
22181: PUSH
22182: LD_INT 118
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: ST_TO_ADDR
22201: GO 24724
22203: LD_INT 7
22205: DOUBLE
22206: EQUAL
22207: IFTRUE 22211
22209: GO 22323
22211: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22212: LD_ADDR_VAR 0 2
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: LD_INT 4
22222: PUSH
22223: LD_INT 5
22225: PUSH
22226: LD_INT 7
22228: PUSH
22229: LD_INT 11
22231: PUSH
22232: LD_INT 12
22234: PUSH
22235: LD_INT 15
22237: PUSH
22238: LD_INT 16
22240: PUSH
22241: LD_INT 20
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 22
22249: PUSH
22250: LD_INT 23
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 26
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 101
22277: PUSH
22278: LD_INT 102
22280: PUSH
22281: LD_INT 103
22283: PUSH
22284: LD_INT 105
22286: PUSH
22287: LD_INT 106
22289: PUSH
22290: LD_INT 108
22292: PUSH
22293: LD_INT 112
22295: PUSH
22296: LD_INT 116
22298: PUSH
22299: LD_INT 117
22301: PUSH
22302: LD_INT 118
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 24724
22323: LD_INT 8
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22471
22331: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 6
22348: PUSH
22349: LD_INT 7
22351: PUSH
22352: LD_INT 8
22354: PUSH
22355: LD_INT 11
22357: PUSH
22358: LD_INT 12
22360: PUSH
22361: LD_INT 15
22363: PUSH
22364: LD_INT 16
22366: PUSH
22367: LD_INT 20
22369: PUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 22
22375: PUSH
22376: LD_INT 23
22378: PUSH
22379: LD_INT 25
22381: PUSH
22382: LD_INT 26
22384: PUSH
22385: LD_INT 30
22387: PUSH
22388: LD_INT 31
22390: PUSH
22391: LD_INT 32
22393: PUSH
22394: LD_INT 36
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 101
22421: PUSH
22422: LD_INT 102
22424: PUSH
22425: LD_INT 103
22427: PUSH
22428: LD_INT 105
22430: PUSH
22431: LD_INT 106
22433: PUSH
22434: LD_INT 108
22436: PUSH
22437: LD_INT 109
22439: PUSH
22440: LD_INT 112
22442: PUSH
22443: LD_INT 116
22445: PUSH
22446: LD_INT 117
22448: PUSH
22449: LD_INT 118
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: ST_TO_ADDR
22469: GO 24724
22471: LD_INT 9
22473: DOUBLE
22474: EQUAL
22475: IFTRUE 22479
22477: GO 22627
22479: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22480: LD_ADDR_VAR 0 2
22484: PUSH
22485: LD_INT 2
22487: PUSH
22488: LD_INT 4
22490: PUSH
22491: LD_INT 5
22493: PUSH
22494: LD_INT 6
22496: PUSH
22497: LD_INT 7
22499: PUSH
22500: LD_INT 8
22502: PUSH
22503: LD_INT 11
22505: PUSH
22506: LD_INT 12
22508: PUSH
22509: LD_INT 15
22511: PUSH
22512: LD_INT 16
22514: PUSH
22515: LD_INT 20
22517: PUSH
22518: LD_INT 21
22520: PUSH
22521: LD_INT 22
22523: PUSH
22524: LD_INT 23
22526: PUSH
22527: LD_INT 25
22529: PUSH
22530: LD_INT 26
22532: PUSH
22533: LD_INT 28
22535: PUSH
22536: LD_INT 30
22538: PUSH
22539: LD_INT 31
22541: PUSH
22542: LD_INT 32
22544: PUSH
22545: LD_INT 36
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 101
22573: PUSH
22574: LD_INT 102
22576: PUSH
22577: LD_INT 103
22579: PUSH
22580: LD_INT 105
22582: PUSH
22583: LD_INT 106
22585: PUSH
22586: LD_INT 108
22588: PUSH
22589: LD_INT 109
22591: PUSH
22592: LD_INT 112
22594: PUSH
22595: LD_INT 114
22597: PUSH
22598: LD_INT 116
22600: PUSH
22601: LD_INT 117
22603: PUSH
22604: LD_INT 118
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: ST_TO_ADDR
22625: GO 24724
22627: LD_INT 10
22629: DOUBLE
22630: EQUAL
22631: IFTRUE 22635
22633: GO 22831
22635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 4
22646: PUSH
22647: LD_INT 5
22649: PUSH
22650: LD_INT 6
22652: PUSH
22653: LD_INT 7
22655: PUSH
22656: LD_INT 8
22658: PUSH
22659: LD_INT 9
22661: PUSH
22662: LD_INT 10
22664: PUSH
22665: LD_INT 11
22667: PUSH
22668: LD_INT 12
22670: PUSH
22671: LD_INT 13
22673: PUSH
22674: LD_INT 14
22676: PUSH
22677: LD_INT 15
22679: PUSH
22680: LD_INT 16
22682: PUSH
22683: LD_INT 17
22685: PUSH
22686: LD_INT 18
22688: PUSH
22689: LD_INT 19
22691: PUSH
22692: LD_INT 20
22694: PUSH
22695: LD_INT 21
22697: PUSH
22698: LD_INT 22
22700: PUSH
22701: LD_INT 23
22703: PUSH
22704: LD_INT 24
22706: PUSH
22707: LD_INT 25
22709: PUSH
22710: LD_INT 26
22712: PUSH
22713: LD_INT 28
22715: PUSH
22716: LD_INT 30
22718: PUSH
22719: LD_INT 31
22721: PUSH
22722: LD_INT 32
22724: PUSH
22725: LD_INT 36
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: LD_INT 104
22770: PUSH
22771: LD_INT 105
22773: PUSH
22774: LD_INT 106
22776: PUSH
22777: LD_INT 107
22779: PUSH
22780: LD_INT 108
22782: PUSH
22783: LD_INT 109
22785: PUSH
22786: LD_INT 110
22788: PUSH
22789: LD_INT 111
22791: PUSH
22792: LD_INT 112
22794: PUSH
22795: LD_INT 114
22797: PUSH
22798: LD_INT 116
22800: PUSH
22801: LD_INT 117
22803: PUSH
22804: LD_INT 118
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: ST_TO_ADDR
22829: GO 24724
22831: LD_INT 11
22833: DOUBLE
22834: EQUAL
22835: IFTRUE 22839
22837: GO 23043
22839: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22840: LD_ADDR_VAR 0 2
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: LD_INT 4
22853: PUSH
22854: LD_INT 5
22856: PUSH
22857: LD_INT 6
22859: PUSH
22860: LD_INT 7
22862: PUSH
22863: LD_INT 8
22865: PUSH
22866: LD_INT 9
22868: PUSH
22869: LD_INT 10
22871: PUSH
22872: LD_INT 11
22874: PUSH
22875: LD_INT 12
22877: PUSH
22878: LD_INT 13
22880: PUSH
22881: LD_INT 14
22883: PUSH
22884: LD_INT 15
22886: PUSH
22887: LD_INT 16
22889: PUSH
22890: LD_INT 17
22892: PUSH
22893: LD_INT 18
22895: PUSH
22896: LD_INT 19
22898: PUSH
22899: LD_INT 20
22901: PUSH
22902: LD_INT 21
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_INT 23
22910: PUSH
22911: LD_INT 24
22913: PUSH
22914: LD_INT 25
22916: PUSH
22917: LD_INT 26
22919: PUSH
22920: LD_INT 28
22922: PUSH
22923: LD_INT 30
22925: PUSH
22926: LD_INT 31
22928: PUSH
22929: LD_INT 32
22931: PUSH
22932: LD_INT 34
22934: PUSH
22935: LD_INT 36
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 101
22973: PUSH
22974: LD_INT 102
22976: PUSH
22977: LD_INT 103
22979: PUSH
22980: LD_INT 104
22982: PUSH
22983: LD_INT 105
22985: PUSH
22986: LD_INT 106
22988: PUSH
22989: LD_INT 107
22991: PUSH
22992: LD_INT 108
22994: PUSH
22995: LD_INT 109
22997: PUSH
22998: LD_INT 110
23000: PUSH
23001: LD_INT 111
23003: PUSH
23004: LD_INT 112
23006: PUSH
23007: LD_INT 114
23009: PUSH
23010: LD_INT 116
23012: PUSH
23013: LD_INT 117
23015: PUSH
23016: LD_INT 118
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: ST_TO_ADDR
23041: GO 24724
23043: LD_INT 12
23045: DOUBLE
23046: EQUAL
23047: IFTRUE 23051
23049: GO 23271
23051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23052: LD_ADDR_VAR 0 2
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: LD_INT 4
23068: PUSH
23069: LD_INT 5
23071: PUSH
23072: LD_INT 6
23074: PUSH
23075: LD_INT 7
23077: PUSH
23078: LD_INT 8
23080: PUSH
23081: LD_INT 9
23083: PUSH
23084: LD_INT 10
23086: PUSH
23087: LD_INT 11
23089: PUSH
23090: LD_INT 12
23092: PUSH
23093: LD_INT 13
23095: PUSH
23096: LD_INT 14
23098: PUSH
23099: LD_INT 15
23101: PUSH
23102: LD_INT 16
23104: PUSH
23105: LD_INT 17
23107: PUSH
23108: LD_INT 18
23110: PUSH
23111: LD_INT 19
23113: PUSH
23114: LD_INT 20
23116: PUSH
23117: LD_INT 21
23119: PUSH
23120: LD_INT 22
23122: PUSH
23123: LD_INT 23
23125: PUSH
23126: LD_INT 24
23128: PUSH
23129: LD_INT 25
23131: PUSH
23132: LD_INT 26
23134: PUSH
23135: LD_INT 27
23137: PUSH
23138: LD_INT 28
23140: PUSH
23141: LD_INT 30
23143: PUSH
23144: LD_INT 31
23146: PUSH
23147: LD_INT 32
23149: PUSH
23150: LD_INT 33
23152: PUSH
23153: LD_INT 34
23155: PUSH
23156: LD_INT 36
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 101
23197: PUSH
23198: LD_INT 102
23200: PUSH
23201: LD_INT 103
23203: PUSH
23204: LD_INT 104
23206: PUSH
23207: LD_INT 105
23209: PUSH
23210: LD_INT 106
23212: PUSH
23213: LD_INT 107
23215: PUSH
23216: LD_INT 108
23218: PUSH
23219: LD_INT 109
23221: PUSH
23222: LD_INT 110
23224: PUSH
23225: LD_INT 111
23227: PUSH
23228: LD_INT 112
23230: PUSH
23231: LD_INT 113
23233: PUSH
23234: LD_INT 114
23236: PUSH
23237: LD_INT 116
23239: PUSH
23240: LD_INT 117
23242: PUSH
23243: LD_INT 118
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: ST_TO_ADDR
23269: GO 24724
23271: LD_INT 13
23273: DOUBLE
23274: EQUAL
23275: IFTRUE 23279
23277: GO 23487
23279: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23280: LD_ADDR_VAR 0 2
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 3
23293: PUSH
23294: LD_INT 4
23296: PUSH
23297: LD_INT 5
23299: PUSH
23300: LD_INT 8
23302: PUSH
23303: LD_INT 9
23305: PUSH
23306: LD_INT 10
23308: PUSH
23309: LD_INT 11
23311: PUSH
23312: LD_INT 12
23314: PUSH
23315: LD_INT 14
23317: PUSH
23318: LD_INT 15
23320: PUSH
23321: LD_INT 16
23323: PUSH
23324: LD_INT 17
23326: PUSH
23327: LD_INT 18
23329: PUSH
23330: LD_INT 19
23332: PUSH
23333: LD_INT 20
23335: PUSH
23336: LD_INT 21
23338: PUSH
23339: LD_INT 22
23341: PUSH
23342: LD_INT 23
23344: PUSH
23345: LD_INT 24
23347: PUSH
23348: LD_INT 25
23350: PUSH
23351: LD_INT 26
23353: PUSH
23354: LD_INT 27
23356: PUSH
23357: LD_INT 28
23359: PUSH
23360: LD_INT 30
23362: PUSH
23363: LD_INT 31
23365: PUSH
23366: LD_INT 32
23368: PUSH
23369: LD_INT 33
23371: PUSH
23372: LD_INT 34
23374: PUSH
23375: LD_INT 36
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 101
23413: PUSH
23414: LD_INT 102
23416: PUSH
23417: LD_INT 103
23419: PUSH
23420: LD_INT 104
23422: PUSH
23423: LD_INT 105
23425: PUSH
23426: LD_INT 106
23428: PUSH
23429: LD_INT 107
23431: PUSH
23432: LD_INT 108
23434: PUSH
23435: LD_INT 109
23437: PUSH
23438: LD_INT 110
23440: PUSH
23441: LD_INT 111
23443: PUSH
23444: LD_INT 112
23446: PUSH
23447: LD_INT 113
23449: PUSH
23450: LD_INT 114
23452: PUSH
23453: LD_INT 116
23455: PUSH
23456: LD_INT 117
23458: PUSH
23459: LD_INT 118
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: ST_TO_ADDR
23485: GO 24724
23487: LD_INT 14
23489: DOUBLE
23490: EQUAL
23491: IFTRUE 23495
23493: GO 23719
23495: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: LD_INT 4
23512: PUSH
23513: LD_INT 5
23515: PUSH
23516: LD_INT 6
23518: PUSH
23519: LD_INT 7
23521: PUSH
23522: LD_INT 8
23524: PUSH
23525: LD_INT 9
23527: PUSH
23528: LD_INT 10
23530: PUSH
23531: LD_INT 11
23533: PUSH
23534: LD_INT 12
23536: PUSH
23537: LD_INT 13
23539: PUSH
23540: LD_INT 14
23542: PUSH
23543: LD_INT 15
23545: PUSH
23546: LD_INT 16
23548: PUSH
23549: LD_INT 17
23551: PUSH
23552: LD_INT 18
23554: PUSH
23555: LD_INT 19
23557: PUSH
23558: LD_INT 20
23560: PUSH
23561: LD_INT 21
23563: PUSH
23564: LD_INT 22
23566: PUSH
23567: LD_INT 23
23569: PUSH
23570: LD_INT 24
23572: PUSH
23573: LD_INT 25
23575: PUSH
23576: LD_INT 26
23578: PUSH
23579: LD_INT 27
23581: PUSH
23582: LD_INT 28
23584: PUSH
23585: LD_INT 29
23587: PUSH
23588: LD_INT 30
23590: PUSH
23591: LD_INT 31
23593: PUSH
23594: LD_INT 32
23596: PUSH
23597: LD_INT 33
23599: PUSH
23600: LD_INT 34
23602: PUSH
23603: LD_INT 36
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 101
23645: PUSH
23646: LD_INT 102
23648: PUSH
23649: LD_INT 103
23651: PUSH
23652: LD_INT 104
23654: PUSH
23655: LD_INT 105
23657: PUSH
23658: LD_INT 106
23660: PUSH
23661: LD_INT 107
23663: PUSH
23664: LD_INT 108
23666: PUSH
23667: LD_INT 109
23669: PUSH
23670: LD_INT 110
23672: PUSH
23673: LD_INT 111
23675: PUSH
23676: LD_INT 112
23678: PUSH
23679: LD_INT 113
23681: PUSH
23682: LD_INT 114
23684: PUSH
23685: LD_INT 116
23687: PUSH
23688: LD_INT 117
23690: PUSH
23691: LD_INT 118
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: ST_TO_ADDR
23717: GO 24724
23719: LD_INT 15
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 23951
23727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23728: LD_ADDR_VAR 0 2
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 3
23741: PUSH
23742: LD_INT 4
23744: PUSH
23745: LD_INT 5
23747: PUSH
23748: LD_INT 6
23750: PUSH
23751: LD_INT 7
23753: PUSH
23754: LD_INT 8
23756: PUSH
23757: LD_INT 9
23759: PUSH
23760: LD_INT 10
23762: PUSH
23763: LD_INT 11
23765: PUSH
23766: LD_INT 12
23768: PUSH
23769: LD_INT 13
23771: PUSH
23772: LD_INT 14
23774: PUSH
23775: LD_INT 15
23777: PUSH
23778: LD_INT 16
23780: PUSH
23781: LD_INT 17
23783: PUSH
23784: LD_INT 18
23786: PUSH
23787: LD_INT 19
23789: PUSH
23790: LD_INT 20
23792: PUSH
23793: LD_INT 21
23795: PUSH
23796: LD_INT 22
23798: PUSH
23799: LD_INT 23
23801: PUSH
23802: LD_INT 24
23804: PUSH
23805: LD_INT 25
23807: PUSH
23808: LD_INT 26
23810: PUSH
23811: LD_INT 27
23813: PUSH
23814: LD_INT 28
23816: PUSH
23817: LD_INT 29
23819: PUSH
23820: LD_INT 30
23822: PUSH
23823: LD_INT 31
23825: PUSH
23826: LD_INT 32
23828: PUSH
23829: LD_INT 33
23831: PUSH
23832: LD_INT 34
23834: PUSH
23835: LD_INT 36
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 101
23877: PUSH
23878: LD_INT 102
23880: PUSH
23881: LD_INT 103
23883: PUSH
23884: LD_INT 104
23886: PUSH
23887: LD_INT 105
23889: PUSH
23890: LD_INT 106
23892: PUSH
23893: LD_INT 107
23895: PUSH
23896: LD_INT 108
23898: PUSH
23899: LD_INT 109
23901: PUSH
23902: LD_INT 110
23904: PUSH
23905: LD_INT 111
23907: PUSH
23908: LD_INT 112
23910: PUSH
23911: LD_INT 113
23913: PUSH
23914: LD_INT 114
23916: PUSH
23917: LD_INT 116
23919: PUSH
23920: LD_INT 117
23922: PUSH
23923: LD_INT 118
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: ST_TO_ADDR
23949: GO 24724
23951: LD_INT 16
23953: DOUBLE
23954: EQUAL
23955: IFTRUE 23959
23957: GO 24095
23959: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23960: LD_ADDR_VAR 0 2
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: LD_INT 4
23970: PUSH
23971: LD_INT 5
23973: PUSH
23974: LD_INT 7
23976: PUSH
23977: LD_INT 11
23979: PUSH
23980: LD_INT 12
23982: PUSH
23983: LD_INT 15
23985: PUSH
23986: LD_INT 16
23988: PUSH
23989: LD_INT 20
23991: PUSH
23992: LD_INT 21
23994: PUSH
23995: LD_INT 22
23997: PUSH
23998: LD_INT 23
24000: PUSH
24001: LD_INT 25
24003: PUSH
24004: LD_INT 26
24006: PUSH
24007: LD_INT 30
24009: PUSH
24010: LD_INT 31
24012: PUSH
24013: LD_INT 32
24015: PUSH
24016: LD_INT 33
24018: PUSH
24019: LD_INT 34
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 101
24045: PUSH
24046: LD_INT 102
24048: PUSH
24049: LD_INT 103
24051: PUSH
24052: LD_INT 106
24054: PUSH
24055: LD_INT 108
24057: PUSH
24058: LD_INT 112
24060: PUSH
24061: LD_INT 113
24063: PUSH
24064: LD_INT 114
24066: PUSH
24067: LD_INT 116
24069: PUSH
24070: LD_INT 117
24072: PUSH
24073: LD_INT 118
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: ST_TO_ADDR
24093: GO 24724
24095: LD_INT 17
24097: DOUBLE
24098: EQUAL
24099: IFTRUE 24103
24101: GO 24327
24103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24104: LD_ADDR_VAR 0 2
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: LD_INT 3
24117: PUSH
24118: LD_INT 4
24120: PUSH
24121: LD_INT 5
24123: PUSH
24124: LD_INT 6
24126: PUSH
24127: LD_INT 7
24129: PUSH
24130: LD_INT 8
24132: PUSH
24133: LD_INT 9
24135: PUSH
24136: LD_INT 10
24138: PUSH
24139: LD_INT 11
24141: PUSH
24142: LD_INT 12
24144: PUSH
24145: LD_INT 13
24147: PUSH
24148: LD_INT 14
24150: PUSH
24151: LD_INT 15
24153: PUSH
24154: LD_INT 16
24156: PUSH
24157: LD_INT 17
24159: PUSH
24160: LD_INT 18
24162: PUSH
24163: LD_INT 19
24165: PUSH
24166: LD_INT 20
24168: PUSH
24169: LD_INT 21
24171: PUSH
24172: LD_INT 22
24174: PUSH
24175: LD_INT 23
24177: PUSH
24178: LD_INT 24
24180: PUSH
24181: LD_INT 25
24183: PUSH
24184: LD_INT 26
24186: PUSH
24187: LD_INT 27
24189: PUSH
24190: LD_INT 28
24192: PUSH
24193: LD_INT 29
24195: PUSH
24196: LD_INT 30
24198: PUSH
24199: LD_INT 31
24201: PUSH
24202: LD_INT 32
24204: PUSH
24205: LD_INT 33
24207: PUSH
24208: LD_INT 34
24210: PUSH
24211: LD_INT 36
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 101
24253: PUSH
24254: LD_INT 102
24256: PUSH
24257: LD_INT 103
24259: PUSH
24260: LD_INT 104
24262: PUSH
24263: LD_INT 105
24265: PUSH
24266: LD_INT 106
24268: PUSH
24269: LD_INT 107
24271: PUSH
24272: LD_INT 108
24274: PUSH
24275: LD_INT 109
24277: PUSH
24278: LD_INT 110
24280: PUSH
24281: LD_INT 111
24283: PUSH
24284: LD_INT 112
24286: PUSH
24287: LD_INT 113
24289: PUSH
24290: LD_INT 114
24292: PUSH
24293: LD_INT 116
24295: PUSH
24296: LD_INT 117
24298: PUSH
24299: LD_INT 118
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: ST_TO_ADDR
24325: GO 24724
24327: LD_INT 18
24329: DOUBLE
24330: EQUAL
24331: IFTRUE 24335
24333: GO 24483
24335: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24336: LD_ADDR_VAR 0 2
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 4
24346: PUSH
24347: LD_INT 5
24349: PUSH
24350: LD_INT 7
24352: PUSH
24353: LD_INT 11
24355: PUSH
24356: LD_INT 12
24358: PUSH
24359: LD_INT 15
24361: PUSH
24362: LD_INT 16
24364: PUSH
24365: LD_INT 20
24367: PUSH
24368: LD_INT 21
24370: PUSH
24371: LD_INT 22
24373: PUSH
24374: LD_INT 23
24376: PUSH
24377: LD_INT 25
24379: PUSH
24380: LD_INT 26
24382: PUSH
24383: LD_INT 30
24385: PUSH
24386: LD_INT 31
24388: PUSH
24389: LD_INT 32
24391: PUSH
24392: LD_INT 33
24394: PUSH
24395: LD_INT 34
24397: PUSH
24398: LD_INT 35
24400: PUSH
24401: LD_INT 36
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 101
24429: PUSH
24430: LD_INT 102
24432: PUSH
24433: LD_INT 103
24435: PUSH
24436: LD_INT 106
24438: PUSH
24439: LD_INT 108
24441: PUSH
24442: LD_INT 112
24444: PUSH
24445: LD_INT 113
24447: PUSH
24448: LD_INT 114
24450: PUSH
24451: LD_INT 115
24453: PUSH
24454: LD_INT 116
24456: PUSH
24457: LD_INT 117
24459: PUSH
24460: LD_INT 118
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: ST_TO_ADDR
24481: GO 24724
24483: LD_INT 19
24485: DOUBLE
24486: EQUAL
24487: IFTRUE 24491
24489: GO 24723
24491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24492: LD_ADDR_VAR 0 2
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 3
24505: PUSH
24506: LD_INT 4
24508: PUSH
24509: LD_INT 5
24511: PUSH
24512: LD_INT 6
24514: PUSH
24515: LD_INT 7
24517: PUSH
24518: LD_INT 8
24520: PUSH
24521: LD_INT 9
24523: PUSH
24524: LD_INT 10
24526: PUSH
24527: LD_INT 11
24529: PUSH
24530: LD_INT 12
24532: PUSH
24533: LD_INT 13
24535: PUSH
24536: LD_INT 14
24538: PUSH
24539: LD_INT 15
24541: PUSH
24542: LD_INT 16
24544: PUSH
24545: LD_INT 17
24547: PUSH
24548: LD_INT 18
24550: PUSH
24551: LD_INT 19
24553: PUSH
24554: LD_INT 20
24556: PUSH
24557: LD_INT 21
24559: PUSH
24560: LD_INT 22
24562: PUSH
24563: LD_INT 23
24565: PUSH
24566: LD_INT 24
24568: PUSH
24569: LD_INT 25
24571: PUSH
24572: LD_INT 26
24574: PUSH
24575: LD_INT 27
24577: PUSH
24578: LD_INT 28
24580: PUSH
24581: LD_INT 29
24583: PUSH
24584: LD_INT 30
24586: PUSH
24587: LD_INT 31
24589: PUSH
24590: LD_INT 32
24592: PUSH
24593: LD_INT 33
24595: PUSH
24596: LD_INT 34
24598: PUSH
24599: LD_INT 35
24601: PUSH
24602: LD_INT 36
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 101
24645: PUSH
24646: LD_INT 102
24648: PUSH
24649: LD_INT 103
24651: PUSH
24652: LD_INT 104
24654: PUSH
24655: LD_INT 105
24657: PUSH
24658: LD_INT 106
24660: PUSH
24661: LD_INT 107
24663: PUSH
24664: LD_INT 108
24666: PUSH
24667: LD_INT 109
24669: PUSH
24670: LD_INT 110
24672: PUSH
24673: LD_INT 111
24675: PUSH
24676: LD_INT 112
24678: PUSH
24679: LD_INT 113
24681: PUSH
24682: LD_INT 114
24684: PUSH
24685: LD_INT 115
24687: PUSH
24688: LD_INT 116
24690: PUSH
24691: LD_INT 117
24693: PUSH
24694: LD_INT 118
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: ST_TO_ADDR
24721: GO 24724
24723: POP
// end else
24724: GO 24955
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: LD_INT 2
24736: PUSH
24737: LD_INT 3
24739: PUSH
24740: LD_INT 4
24742: PUSH
24743: LD_INT 5
24745: PUSH
24746: LD_INT 6
24748: PUSH
24749: LD_INT 7
24751: PUSH
24752: LD_INT 8
24754: PUSH
24755: LD_INT 9
24757: PUSH
24758: LD_INT 10
24760: PUSH
24761: LD_INT 11
24763: PUSH
24764: LD_INT 12
24766: PUSH
24767: LD_INT 13
24769: PUSH
24770: LD_INT 14
24772: PUSH
24773: LD_INT 15
24775: PUSH
24776: LD_INT 16
24778: PUSH
24779: LD_INT 17
24781: PUSH
24782: LD_INT 18
24784: PUSH
24785: LD_INT 19
24787: PUSH
24788: LD_INT 20
24790: PUSH
24791: LD_INT 21
24793: PUSH
24794: LD_INT 22
24796: PUSH
24797: LD_INT 23
24799: PUSH
24800: LD_INT 24
24802: PUSH
24803: LD_INT 25
24805: PUSH
24806: LD_INT 26
24808: PUSH
24809: LD_INT 27
24811: PUSH
24812: LD_INT 28
24814: PUSH
24815: LD_INT 29
24817: PUSH
24818: LD_INT 30
24820: PUSH
24821: LD_INT 31
24823: PUSH
24824: LD_INT 32
24826: PUSH
24827: LD_INT 33
24829: PUSH
24830: LD_INT 34
24832: PUSH
24833: LD_INT 35
24835: PUSH
24836: LD_INT 36
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 101
24879: PUSH
24880: LD_INT 102
24882: PUSH
24883: LD_INT 103
24885: PUSH
24886: LD_INT 104
24888: PUSH
24889: LD_INT 105
24891: PUSH
24892: LD_INT 106
24894: PUSH
24895: LD_INT 107
24897: PUSH
24898: LD_INT 108
24900: PUSH
24901: LD_INT 109
24903: PUSH
24904: LD_INT 110
24906: PUSH
24907: LD_INT 111
24909: PUSH
24910: LD_INT 112
24912: PUSH
24913: LD_INT 113
24915: PUSH
24916: LD_INT 114
24918: PUSH
24919: LD_INT 115
24921: PUSH
24922: LD_INT 116
24924: PUSH
24925: LD_INT 117
24927: PUSH
24928: LD_INT 118
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// if result then
24955: LD_VAR 0 2
24959: IFFALSE 25745
// begin normal :=  ;
24961: LD_ADDR_VAR 0 5
24965: PUSH
24966: LD_STRING 
24968: ST_TO_ADDR
// hardcore :=  ;
24969: LD_ADDR_VAR 0 6
24973: PUSH
24974: LD_STRING 
24976: ST_TO_ADDR
// active :=  ;
24977: LD_ADDR_VAR 0 7
24981: PUSH
24982: LD_STRING 
24984: ST_TO_ADDR
// for i = 1 to normalCounter do
24985: LD_ADDR_VAR 0 8
24989: PUSH
24990: DOUBLE
24991: LD_INT 1
24993: DEC
24994: ST_TO_ADDR
24995: LD_EXP 52
24999: PUSH
25000: FOR_TO
25001: IFFALSE 25102
// begin tmp := 0 ;
25003: LD_ADDR_VAR 0 3
25007: PUSH
25008: LD_STRING 0
25010: ST_TO_ADDR
// if result [ 1 ] then
25011: LD_VAR 0 2
25015: PUSH
25016: LD_INT 1
25018: ARRAY
25019: IFFALSE 25084
// if result [ 1 ] [ 1 ] = i then
25021: LD_VAR 0 2
25025: PUSH
25026: LD_INT 1
25028: ARRAY
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: PUSH
25034: LD_VAR 0 8
25038: EQUAL
25039: IFFALSE 25084
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25041: LD_ADDR_VAR 0 2
25045: PUSH
25046: LD_VAR 0 2
25050: PPUSH
25051: LD_INT 1
25053: PPUSH
25054: LD_VAR 0 2
25058: PUSH
25059: LD_INT 1
25061: ARRAY
25062: PPUSH
25063: LD_INT 1
25065: PPUSH
25066: CALL_OW 3
25070: PPUSH
25071: CALL_OW 1
25075: ST_TO_ADDR
// tmp := 1 ;
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_STRING 1
25083: ST_TO_ADDR
// end ; normal := normal & tmp ;
25084: LD_ADDR_VAR 0 5
25088: PUSH
25089: LD_VAR 0 5
25093: PUSH
25094: LD_VAR 0 3
25098: STR
25099: ST_TO_ADDR
// end ;
25100: GO 25000
25102: POP
25103: POP
// for i = 1 to hardcoreCounter do
25104: LD_ADDR_VAR 0 8
25108: PUSH
25109: DOUBLE
25110: LD_INT 1
25112: DEC
25113: ST_TO_ADDR
25114: LD_EXP 53
25118: PUSH
25119: FOR_TO
25120: IFFALSE 25225
// begin tmp := 0 ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_STRING 0
25129: ST_TO_ADDR
// if result [ 2 ] then
25130: LD_VAR 0 2
25134: PUSH
25135: LD_INT 2
25137: ARRAY
25138: IFFALSE 25207
// if result [ 2 ] [ 1 ] = 100 + i then
25140: LD_VAR 0 2
25144: PUSH
25145: LD_INT 2
25147: ARRAY
25148: PUSH
25149: LD_INT 1
25151: ARRAY
25152: PUSH
25153: LD_INT 100
25155: PUSH
25156: LD_VAR 0 8
25160: PLUS
25161: EQUAL
25162: IFFALSE 25207
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_VAR 0 2
25173: PPUSH
25174: LD_INT 2
25176: PPUSH
25177: LD_VAR 0 2
25181: PUSH
25182: LD_INT 2
25184: ARRAY
25185: PPUSH
25186: LD_INT 1
25188: PPUSH
25189: CALL_OW 3
25193: PPUSH
25194: CALL_OW 1
25198: ST_TO_ADDR
// tmp := 1 ;
25199: LD_ADDR_VAR 0 3
25203: PUSH
25204: LD_STRING 1
25206: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25207: LD_ADDR_VAR 0 6
25211: PUSH
25212: LD_VAR 0 6
25216: PUSH
25217: LD_VAR 0 3
25221: STR
25222: ST_TO_ADDR
// end ;
25223: GO 25119
25225: POP
25226: POP
// if isGameLoad then
25227: LD_VAR 0 1
25231: IFFALSE 25706
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25233: LD_ADDR_VAR 0 4
25237: PUSH
25238: LD_EXP 56
25242: PUSH
25243: LD_EXP 55
25247: PUSH
25248: LD_EXP 57
25252: PUSH
25253: LD_EXP 54
25257: PUSH
25258: LD_EXP 58
25262: PUSH
25263: LD_EXP 59
25267: PUSH
25268: LD_EXP 60
25272: PUSH
25273: LD_EXP 61
25277: PUSH
25278: LD_EXP 62
25282: PUSH
25283: LD_EXP 63
25287: PUSH
25288: LD_EXP 64
25292: PUSH
25293: LD_EXP 65
25297: PUSH
25298: LD_EXP 66
25302: PUSH
25303: LD_EXP 67
25307: PUSH
25308: LD_EXP 75
25312: PUSH
25313: LD_EXP 76
25317: PUSH
25318: LD_EXP 77
25322: PUSH
25323: LD_EXP 78
25327: PUSH
25328: LD_EXP 80
25332: PUSH
25333: LD_EXP 81
25337: PUSH
25338: LD_EXP 82
25342: PUSH
25343: LD_EXP 85
25347: PUSH
25348: LD_EXP 87
25352: PUSH
25353: LD_EXP 88
25357: PUSH
25358: LD_EXP 89
25362: PUSH
25363: LD_EXP 91
25367: PUSH
25368: LD_EXP 92
25372: PUSH
25373: LD_EXP 95
25377: PUSH
25378: LD_EXP 96
25382: PUSH
25383: LD_EXP 97
25387: PUSH
25388: LD_EXP 98
25392: PUSH
25393: LD_EXP 99
25397: PUSH
25398: LD_EXP 100
25402: PUSH
25403: LD_EXP 101
25407: PUSH
25408: LD_EXP 102
25412: PUSH
25413: LD_EXP 103
25417: PUSH
25418: LD_EXP 68
25422: PUSH
25423: LD_EXP 69
25427: PUSH
25428: LD_EXP 72
25432: PUSH
25433: LD_EXP 73
25437: PUSH
25438: LD_EXP 74
25442: PUSH
25443: LD_EXP 70
25447: PUSH
25448: LD_EXP 71
25452: PUSH
25453: LD_EXP 79
25457: PUSH
25458: LD_EXP 83
25462: PUSH
25463: LD_EXP 84
25467: PUSH
25468: LD_EXP 86
25472: PUSH
25473: LD_EXP 90
25477: PUSH
25478: LD_EXP 93
25482: PUSH
25483: LD_EXP 94
25487: PUSH
25488: LD_EXP 104
25492: PUSH
25493: LD_EXP 105
25497: PUSH
25498: LD_EXP 106
25502: PUSH
25503: LD_EXP 107
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: ST_TO_ADDR
// tmp :=  ;
25564: LD_ADDR_VAR 0 3
25568: PUSH
25569: LD_STRING 
25571: ST_TO_ADDR
// for i = 1 to normalCounter do
25572: LD_ADDR_VAR 0 8
25576: PUSH
25577: DOUBLE
25578: LD_INT 1
25580: DEC
25581: ST_TO_ADDR
25582: LD_EXP 52
25586: PUSH
25587: FOR_TO
25588: IFFALSE 25624
// begin if flags [ i ] then
25590: LD_VAR 0 4
25594: PUSH
25595: LD_VAR 0 8
25599: ARRAY
25600: IFFALSE 25622
// tmp := tmp & i & ; ;
25602: LD_ADDR_VAR 0 3
25606: PUSH
25607: LD_VAR 0 3
25611: PUSH
25612: LD_VAR 0 8
25616: STR
25617: PUSH
25618: LD_STRING ;
25620: STR
25621: ST_TO_ADDR
// end ;
25622: GO 25587
25624: POP
25625: POP
// for i = 1 to hardcoreCounter do
25626: LD_ADDR_VAR 0 8
25630: PUSH
25631: DOUBLE
25632: LD_INT 1
25634: DEC
25635: ST_TO_ADDR
25636: LD_EXP 53
25640: PUSH
25641: FOR_TO
25642: IFFALSE 25688
// begin if flags [ normalCounter + i ] then
25644: LD_VAR 0 4
25648: PUSH
25649: LD_EXP 52
25653: PUSH
25654: LD_VAR 0 8
25658: PLUS
25659: ARRAY
25660: IFFALSE 25686
// tmp := tmp & ( 100 + i ) & ; ;
25662: LD_ADDR_VAR 0 3
25666: PUSH
25667: LD_VAR 0 3
25671: PUSH
25672: LD_INT 100
25674: PUSH
25675: LD_VAR 0 8
25679: PLUS
25680: STR
25681: PUSH
25682: LD_STRING ;
25684: STR
25685: ST_TO_ADDR
// end ;
25686: GO 25641
25688: POP
25689: POP
// if tmp then
25690: LD_VAR 0 3
25694: IFFALSE 25706
// active := tmp ;
25696: LD_ADDR_VAR 0 7
25700: PUSH
25701: LD_VAR 0 3
25705: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25706: LD_STRING getStreamItemsFromMission("
25708: PUSH
25709: LD_VAR 0 5
25713: STR
25714: PUSH
25715: LD_STRING ","
25717: STR
25718: PUSH
25719: LD_VAR 0 6
25723: STR
25724: PUSH
25725: LD_STRING ","
25727: STR
25728: PUSH
25729: LD_VAR 0 7
25733: STR
25734: PUSH
25735: LD_STRING ")
25737: STR
25738: PPUSH
25739: CALL_OW 559
// end else
25743: GO 25752
// ToLua ( getStreamItemsFromMission("","","") ) ;
25745: LD_STRING getStreamItemsFromMission("","","")
25747: PPUSH
25748: CALL_OW 559
// end ;
25752: LD_VAR 0 2
25756: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25757: LD_EXP 51
25761: PUSH
25762: LD_EXP 56
25766: AND
25767: IFFALSE 25891
25769: GO 25771
25771: DISABLE
25772: LD_INT 0
25774: PPUSH
25775: PPUSH
// begin enable ;
25776: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_OWVAR 2
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: LD_INT 34
25799: PUSH
25800: LD_INT 7
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 34
25809: PUSH
25810: LD_INT 45
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 34
25819: PUSH
25820: LD_INT 28
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 34
25829: PUSH
25830: LD_INT 47
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PPUSH
25848: CALL_OW 69
25852: ST_TO_ADDR
// if not tmp then
25853: LD_VAR 0 2
25857: NOT
25858: IFFALSE 25862
// exit ;
25860: GO 25891
// for i in tmp do
25862: LD_ADDR_VAR 0 1
25866: PUSH
25867: LD_VAR 0 2
25871: PUSH
25872: FOR_IN
25873: IFFALSE 25889
// begin SetLives ( i , 0 ) ;
25875: LD_VAR 0 1
25879: PPUSH
25880: LD_INT 0
25882: PPUSH
25883: CALL_OW 234
// end ;
25887: GO 25872
25889: POP
25890: POP
// end ;
25891: PPOPN 2
25893: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25894: LD_EXP 51
25898: PUSH
25899: LD_EXP 57
25903: AND
25904: IFFALSE 25988
25906: GO 25908
25908: DISABLE
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
// begin enable ;
25913: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25914: LD_ADDR_VAR 0 2
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_OWVAR 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 32
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PPUSH
25945: CALL_OW 69
25949: ST_TO_ADDR
// if not tmp then
25950: LD_VAR 0 2
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 25988
// for i in tmp do
25959: LD_ADDR_VAR 0 1
25963: PUSH
25964: LD_VAR 0 2
25968: PUSH
25969: FOR_IN
25970: IFFALSE 25986
// begin SetLives ( i , 0 ) ;
25972: LD_VAR 0 1
25976: PPUSH
25977: LD_INT 0
25979: PPUSH
25980: CALL_OW 234
// end ;
25984: GO 25969
25986: POP
25987: POP
// end ;
25988: PPOPN 2
25990: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25991: LD_EXP 51
25995: PUSH
25996: LD_EXP 54
26000: AND
26001: IFFALSE 26094
26003: GO 26005
26005: DISABLE
26006: LD_INT 0
26008: PPUSH
// begin enable ;
26009: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26010: LD_ADDR_VAR 0 1
26014: PUSH
26015: LD_INT 22
26017: PUSH
26018: LD_OWVAR 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 25
26032: PUSH
26033: LD_INT 5
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 25
26042: PUSH
26043: LD_INT 9
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 25
26052: PUSH
26053: LD_INT 8
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PPUSH
26070: CALL_OW 69
26074: PUSH
26075: FOR_IN
26076: IFFALSE 26092
// begin SetClass ( i , 1 ) ;
26078: LD_VAR 0 1
26082: PPUSH
26083: LD_INT 1
26085: PPUSH
26086: CALL_OW 336
// end ;
26090: GO 26075
26092: POP
26093: POP
// end ;
26094: PPOPN 1
26096: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26097: LD_EXP 51
26101: PUSH
26102: LD_EXP 55
26106: AND
26107: PUSH
26108: LD_OWVAR 65
26112: PUSH
26113: LD_INT 7
26115: LESS
26116: AND
26117: IFFALSE 26131
26119: GO 26121
26121: DISABLE
// begin enable ;
26122: ENABLE
// game_speed := 7 ;
26123: LD_ADDR_OWVAR 65
26127: PUSH
26128: LD_INT 7
26130: ST_TO_ADDR
// end ;
26131: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26132: LD_EXP 51
26136: PUSH
26137: LD_EXP 58
26141: AND
26142: IFFALSE 26344
26144: GO 26146
26146: DISABLE
26147: LD_INT 0
26149: PPUSH
26150: PPUSH
26151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: LD_INT 81
26159: PUSH
26160: LD_OWVAR 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 21
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PPUSH
26183: CALL_OW 69
26187: ST_TO_ADDR
// if not tmp then
26188: LD_VAR 0 3
26192: NOT
26193: IFFALSE 26197
// exit ;
26195: GO 26344
// if tmp > 5 then
26197: LD_VAR 0 3
26201: PUSH
26202: LD_INT 5
26204: GREATER
26205: IFFALSE 26217
// k := 5 else
26207: LD_ADDR_VAR 0 2
26211: PUSH
26212: LD_INT 5
26214: ST_TO_ADDR
26215: GO 26227
// k := tmp ;
26217: LD_ADDR_VAR 0 2
26221: PUSH
26222: LD_VAR 0 3
26226: ST_TO_ADDR
// for i := 1 to k do
26227: LD_ADDR_VAR 0 1
26231: PUSH
26232: DOUBLE
26233: LD_INT 1
26235: DEC
26236: ST_TO_ADDR
26237: LD_VAR 0 2
26241: PUSH
26242: FOR_TO
26243: IFFALSE 26342
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26245: LD_VAR 0 3
26249: PUSH
26250: LD_VAR 0 1
26254: ARRAY
26255: PPUSH
26256: LD_VAR 0 1
26260: PUSH
26261: LD_INT 4
26263: MOD
26264: PUSH
26265: LD_INT 1
26267: PLUS
26268: PPUSH
26269: CALL_OW 259
26273: PUSH
26274: LD_INT 10
26276: LESS
26277: IFFALSE 26340
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26279: LD_VAR 0 3
26283: PUSH
26284: LD_VAR 0 1
26288: ARRAY
26289: PPUSH
26290: LD_VAR 0 1
26294: PUSH
26295: LD_INT 4
26297: MOD
26298: PUSH
26299: LD_INT 1
26301: PLUS
26302: PPUSH
26303: LD_VAR 0 3
26307: PUSH
26308: LD_VAR 0 1
26312: ARRAY
26313: PPUSH
26314: LD_VAR 0 1
26318: PUSH
26319: LD_INT 4
26321: MOD
26322: PUSH
26323: LD_INT 1
26325: PLUS
26326: PPUSH
26327: CALL_OW 259
26331: PUSH
26332: LD_INT 1
26334: PLUS
26335: PPUSH
26336: CALL_OW 237
26340: GO 26242
26342: POP
26343: POP
// end ;
26344: PPOPN 3
26346: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26347: LD_EXP 51
26351: PUSH
26352: LD_EXP 59
26356: AND
26357: IFFALSE 26377
26359: GO 26361
26361: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26362: LD_INT 4
26364: PPUSH
26365: LD_OWVAR 2
26369: PPUSH
26370: LD_INT 0
26372: PPUSH
26373: CALL_OW 324
26377: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26378: LD_EXP 51
26382: PUSH
26383: LD_EXP 88
26387: AND
26388: IFFALSE 26408
26390: GO 26392
26392: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26393: LD_INT 19
26395: PPUSH
26396: LD_OWVAR 2
26400: PPUSH
26401: LD_INT 0
26403: PPUSH
26404: CALL_OW 324
26408: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26409: LD_EXP 51
26413: PUSH
26414: LD_EXP 60
26418: AND
26419: IFFALSE 26521
26421: GO 26423
26423: DISABLE
26424: LD_INT 0
26426: PPUSH
26427: PPUSH
// begin enable ;
26428: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26429: LD_ADDR_VAR 0 2
26433: PUSH
26434: LD_INT 22
26436: PUSH
26437: LD_OWVAR 2
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 2
26448: PUSH
26449: LD_INT 34
26451: PUSH
26452: LD_INT 11
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 34
26461: PUSH
26462: LD_INT 30
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PPUSH
26478: CALL_OW 69
26482: ST_TO_ADDR
// if not tmp then
26483: LD_VAR 0 2
26487: NOT
26488: IFFALSE 26492
// exit ;
26490: GO 26521
// for i in tmp do
26492: LD_ADDR_VAR 0 1
26496: PUSH
26497: LD_VAR 0 2
26501: PUSH
26502: FOR_IN
26503: IFFALSE 26519
// begin SetLives ( i , 0 ) ;
26505: LD_VAR 0 1
26509: PPUSH
26510: LD_INT 0
26512: PPUSH
26513: CALL_OW 234
// end ;
26517: GO 26502
26519: POP
26520: POP
// end ;
26521: PPOPN 2
26523: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26524: LD_EXP 51
26528: PUSH
26529: LD_EXP 61
26533: AND
26534: IFFALSE 26554
26536: GO 26538
26538: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26539: LD_INT 32
26541: PPUSH
26542: LD_OWVAR 2
26546: PPUSH
26547: LD_INT 0
26549: PPUSH
26550: CALL_OW 324
26554: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26555: LD_EXP 51
26559: PUSH
26560: LD_EXP 62
26564: AND
26565: IFFALSE 26746
26567: GO 26569
26569: DISABLE
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26575: LD_ADDR_VAR 0 2
26579: PUSH
26580: LD_INT 22
26582: PUSH
26583: LD_OWVAR 2
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 33
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 69
26610: ST_TO_ADDR
// if not tmp then
26611: LD_VAR 0 2
26615: NOT
26616: IFFALSE 26620
// exit ;
26618: GO 26746
// side := 0 ;
26620: LD_ADDR_VAR 0 3
26624: PUSH
26625: LD_INT 0
26627: ST_TO_ADDR
// for i := 1 to 8 do
26628: LD_ADDR_VAR 0 1
26632: PUSH
26633: DOUBLE
26634: LD_INT 1
26636: DEC
26637: ST_TO_ADDR
26638: LD_INT 8
26640: PUSH
26641: FOR_TO
26642: IFFALSE 26690
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26644: LD_OWVAR 2
26648: PUSH
26649: LD_VAR 0 1
26653: NONEQUAL
26654: PUSH
26655: LD_OWVAR 2
26659: PPUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 81
26669: PUSH
26670: LD_INT 2
26672: EQUAL
26673: AND
26674: IFFALSE 26688
// begin side := i ;
26676: LD_ADDR_VAR 0 3
26680: PUSH
26681: LD_VAR 0 1
26685: ST_TO_ADDR
// break ;
26686: GO 26690
// end ;
26688: GO 26641
26690: POP
26691: POP
// if not side then
26692: LD_VAR 0 3
26696: NOT
26697: IFFALSE 26701
// exit ;
26699: GO 26746
// for i := 1 to tmp do
26701: LD_ADDR_VAR 0 1
26705: PUSH
26706: DOUBLE
26707: LD_INT 1
26709: DEC
26710: ST_TO_ADDR
26711: LD_VAR 0 2
26715: PUSH
26716: FOR_TO
26717: IFFALSE 26744
// if Prob ( 60 ) then
26719: LD_INT 60
26721: PPUSH
26722: CALL_OW 13
26726: IFFALSE 26742
// SetSide ( i , side ) ;
26728: LD_VAR 0 1
26732: PPUSH
26733: LD_VAR 0 3
26737: PPUSH
26738: CALL_OW 235
26742: GO 26716
26744: POP
26745: POP
// end ;
26746: PPOPN 3
26748: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26749: LD_EXP 51
26753: PUSH
26754: LD_EXP 64
26758: AND
26759: IFFALSE 26878
26761: GO 26763
26763: DISABLE
26764: LD_INT 0
26766: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26767: LD_ADDR_VAR 0 1
26771: PUSH
26772: LD_INT 22
26774: PUSH
26775: LD_OWVAR 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 21
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 3
26796: PUSH
26797: LD_INT 23
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: LIST
26815: PPUSH
26816: CALL_OW 69
26820: PUSH
26821: FOR_IN
26822: IFFALSE 26876
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26824: LD_VAR 0 1
26828: PPUSH
26829: CALL_OW 257
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: LD_INT 3
26842: PUSH
26843: LD_INT 4
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: IN
26852: IFFALSE 26874
// SetClass ( un , rand ( 1 , 4 ) ) ;
26854: LD_VAR 0 1
26858: PPUSH
26859: LD_INT 1
26861: PPUSH
26862: LD_INT 4
26864: PPUSH
26865: CALL_OW 12
26869: PPUSH
26870: CALL_OW 336
26874: GO 26821
26876: POP
26877: POP
// end ;
26878: PPOPN 1
26880: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26881: LD_EXP 51
26885: PUSH
26886: LD_EXP 63
26890: AND
26891: IFFALSE 26970
26893: GO 26895
26895: DISABLE
26896: LD_INT 0
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26899: LD_ADDR_VAR 0 1
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 21
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 1
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 26970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26944: LD_VAR 0 1
26948: PUSH
26949: LD_INT 1
26951: PPUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: CALL_OW 12
26961: ARRAY
26962: PPUSH
26963: LD_INT 100
26965: PPUSH
26966: CALL_OW 234
// end ;
26970: PPOPN 1
26972: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26973: LD_EXP 51
26977: PUSH
26978: LD_EXP 65
26982: AND
26983: IFFALSE 27081
26985: GO 26987
26987: DISABLE
26988: LD_INT 0
26990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26991: LD_ADDR_VAR 0 1
26995: PUSH
26996: LD_INT 22
26998: PUSH
26999: LD_OWVAR 2
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 21
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PPUSH
27022: CALL_OW 69
27026: ST_TO_ADDR
// if not tmp then
27027: LD_VAR 0 1
27031: NOT
27032: IFFALSE 27036
// exit ;
27034: GO 27081
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27036: LD_VAR 0 1
27040: PUSH
27041: LD_INT 1
27043: PPUSH
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 12
27053: ARRAY
27054: PPUSH
27055: LD_INT 1
27057: PPUSH
27058: LD_INT 4
27060: PPUSH
27061: CALL_OW 12
27065: PPUSH
27066: LD_INT 3000
27068: PPUSH
27069: LD_INT 9000
27071: PPUSH
27072: CALL_OW 12
27076: PPUSH
27077: CALL_OW 492
// end ;
27081: PPOPN 1
27083: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27084: LD_EXP 51
27088: PUSH
27089: LD_EXP 66
27093: AND
27094: IFFALSE 27114
27096: GO 27098
27098: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27099: LD_INT 1
27101: PPUSH
27102: LD_OWVAR 2
27106: PPUSH
27107: LD_INT 0
27109: PPUSH
27110: CALL_OW 324
27114: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27115: LD_EXP 51
27119: PUSH
27120: LD_EXP 67
27124: AND
27125: IFFALSE 27208
27127: GO 27129
27129: DISABLE
27130: LD_INT 0
27132: PPUSH
27133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27134: LD_ADDR_VAR 0 2
27138: PUSH
27139: LD_INT 22
27141: PUSH
27142: LD_OWVAR 2
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 21
27153: PUSH
27154: LD_INT 3
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PPUSH
27165: CALL_OW 69
27169: ST_TO_ADDR
// if not tmp then
27170: LD_VAR 0 2
27174: NOT
27175: IFFALSE 27179
// exit ;
27177: GO 27208
// for i in tmp do
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_VAR 0 2
27188: PUSH
27189: FOR_IN
27190: IFFALSE 27206
// SetBLevel ( i , 10 ) ;
27192: LD_VAR 0 1
27196: PPUSH
27197: LD_INT 10
27199: PPUSH
27200: CALL_OW 241
27204: GO 27189
27206: POP
27207: POP
// end ;
27208: PPOPN 2
27210: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27211: LD_EXP 51
27215: PUSH
27216: LD_EXP 68
27220: AND
27221: IFFALSE 27332
27223: GO 27225
27225: DISABLE
27226: LD_INT 0
27228: PPUSH
27229: PPUSH
27230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27231: LD_ADDR_VAR 0 3
27235: PUSH
27236: LD_INT 22
27238: PUSH
27239: LD_OWVAR 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 25
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PPUSH
27262: CALL_OW 69
27266: ST_TO_ADDR
// if not tmp then
27267: LD_VAR 0 3
27271: NOT
27272: IFFALSE 27276
// exit ;
27274: GO 27332
// un := tmp [ rand ( 1 , tmp ) ] ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_VAR 0 3
27285: PUSH
27286: LD_INT 1
27288: PPUSH
27289: LD_VAR 0 3
27293: PPUSH
27294: CALL_OW 12
27298: ARRAY
27299: ST_TO_ADDR
// if Crawls ( un ) then
27300: LD_VAR 0 2
27304: PPUSH
27305: CALL_OW 318
27309: IFFALSE 27320
// ComWalk ( un ) ;
27311: LD_VAR 0 2
27315: PPUSH
27316: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27320: LD_VAR 0 2
27324: PPUSH
27325: LD_INT 5
27327: PPUSH
27328: CALL_OW 336
// end ;
27332: PPOPN 3
27334: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27335: LD_EXP 51
27339: PUSH
27340: LD_EXP 69
27344: AND
27345: PUSH
27346: LD_OWVAR 67
27350: PUSH
27351: LD_INT 4
27353: LESS
27354: AND
27355: IFFALSE 27374
27357: GO 27359
27359: DISABLE
// begin Difficulty := Difficulty + 1 ;
27360: LD_ADDR_OWVAR 67
27364: PUSH
27365: LD_OWVAR 67
27369: PUSH
27370: LD_INT 1
27372: PLUS
27373: ST_TO_ADDR
// end ;
27374: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27375: LD_EXP 51
27379: PUSH
27380: LD_EXP 70
27384: AND
27385: IFFALSE 27488
27387: GO 27389
27389: DISABLE
27390: LD_INT 0
27392: PPUSH
// begin for i := 1 to 5 do
27393: LD_ADDR_VAR 0 1
27397: PUSH
27398: DOUBLE
27399: LD_INT 1
27401: DEC
27402: ST_TO_ADDR
27403: LD_INT 5
27405: PUSH
27406: FOR_TO
27407: IFFALSE 27486
// begin uc_nation := nation_nature ;
27409: LD_ADDR_OWVAR 21
27413: PUSH
27414: LD_INT 0
27416: ST_TO_ADDR
// uc_side := 0 ;
27417: LD_ADDR_OWVAR 20
27421: PUSH
27422: LD_INT 0
27424: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27425: LD_ADDR_OWVAR 29
27429: PUSH
27430: LD_INT 12
27432: PUSH
27433: LD_INT 12
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: ST_TO_ADDR
// hc_agressivity := 20 ;
27440: LD_ADDR_OWVAR 35
27444: PUSH
27445: LD_INT 20
27447: ST_TO_ADDR
// hc_class := class_tiger ;
27448: LD_ADDR_OWVAR 28
27452: PUSH
27453: LD_INT 14
27455: ST_TO_ADDR
// hc_gallery :=  ;
27456: LD_ADDR_OWVAR 33
27460: PUSH
27461: LD_STRING 
27463: ST_TO_ADDR
// hc_name :=  ;
27464: LD_ADDR_OWVAR 26
27468: PUSH
27469: LD_STRING 
27471: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27472: CALL_OW 44
27476: PPUSH
27477: LD_INT 0
27479: PPUSH
27480: CALL_OW 51
// end ;
27484: GO 27406
27486: POP
27487: POP
// end ;
27488: PPOPN 1
27490: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27491: LD_EXP 51
27495: PUSH
27496: LD_EXP 71
27500: AND
27501: IFFALSE 27510
27503: GO 27505
27505: DISABLE
// StreamSibBomb ;
27506: CALL 27511 0 0
27510: END
// export function StreamSibBomb ; var i , x , y ; begin
27511: LD_INT 0
27513: PPUSH
27514: PPUSH
27515: PPUSH
27516: PPUSH
// result := false ;
27517: LD_ADDR_VAR 0 1
27521: PUSH
27522: LD_INT 0
27524: ST_TO_ADDR
// for i := 1 to 16 do
27525: LD_ADDR_VAR 0 2
27529: PUSH
27530: DOUBLE
27531: LD_INT 1
27533: DEC
27534: ST_TO_ADDR
27535: LD_INT 16
27537: PUSH
27538: FOR_TO
27539: IFFALSE 27738
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_INT 10
27548: PUSH
27549: LD_INT 20
27551: PUSH
27552: LD_INT 30
27554: PUSH
27555: LD_INT 40
27557: PUSH
27558: LD_INT 50
27560: PUSH
27561: LD_INT 60
27563: PUSH
27564: LD_INT 70
27566: PUSH
27567: LD_INT 80
27569: PUSH
27570: LD_INT 90
27572: PUSH
27573: LD_INT 100
27575: PUSH
27576: LD_INT 110
27578: PUSH
27579: LD_INT 120
27581: PUSH
27582: LD_INT 130
27584: PUSH
27585: LD_INT 140
27587: PUSH
27588: LD_INT 150
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: PPUSH
27611: LD_INT 15
27613: PPUSH
27614: CALL_OW 12
27618: ARRAY
27619: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27620: LD_ADDR_VAR 0 4
27624: PUSH
27625: LD_INT 10
27627: PUSH
27628: LD_INT 20
27630: PUSH
27631: LD_INT 30
27633: PUSH
27634: LD_INT 40
27636: PUSH
27637: LD_INT 50
27639: PUSH
27640: LD_INT 60
27642: PUSH
27643: LD_INT 70
27645: PUSH
27646: LD_INT 80
27648: PUSH
27649: LD_INT 90
27651: PUSH
27652: LD_INT 100
27654: PUSH
27655: LD_INT 110
27657: PUSH
27658: LD_INT 120
27660: PUSH
27661: LD_INT 130
27663: PUSH
27664: LD_INT 140
27666: PUSH
27667: LD_INT 150
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PPUSH
27690: LD_INT 15
27692: PPUSH
27693: CALL_OW 12
27697: ARRAY
27698: ST_TO_ADDR
// if ValidHex ( x , y ) then
27699: LD_VAR 0 3
27703: PPUSH
27704: LD_VAR 0 4
27708: PPUSH
27709: CALL_OW 488
27713: IFFALSE 27736
// begin result := [ x , y ] ;
27715: LD_ADDR_VAR 0 1
27719: PUSH
27720: LD_VAR 0 3
27724: PUSH
27725: LD_VAR 0 4
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: ST_TO_ADDR
// break ;
27734: GO 27738
// end ; end ;
27736: GO 27538
27738: POP
27739: POP
// if result then
27740: LD_VAR 0 1
27744: IFFALSE 27804
// begin ToLua ( playSibBomb() ) ;
27746: LD_STRING playSibBomb()
27748: PPUSH
27749: CALL_OW 559
// wait ( 0 0$14 ) ;
27753: LD_INT 490
27755: PPUSH
27756: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27760: LD_VAR 0 1
27764: PUSH
27765: LD_INT 1
27767: ARRAY
27768: PPUSH
27769: LD_VAR 0 1
27773: PUSH
27774: LD_INT 2
27776: ARRAY
27777: PPUSH
27778: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27782: LD_VAR 0 1
27786: PUSH
27787: LD_INT 1
27789: ARRAY
27790: PPUSH
27791: LD_VAR 0 1
27795: PUSH
27796: LD_INT 2
27798: ARRAY
27799: PPUSH
27800: CALL_OW 429
// end ; end ;
27804: LD_VAR 0 1
27808: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27809: LD_EXP 51
27813: PUSH
27814: LD_EXP 73
27818: AND
27819: IFFALSE 27831
27821: GO 27823
27823: DISABLE
// YouLost (  ) ;
27824: LD_STRING 
27826: PPUSH
27827: CALL_OW 104
27831: END
// every 0 0$1 trigger StreamModeActive and sFog do
27832: LD_EXP 51
27836: PUSH
27837: LD_EXP 72
27841: AND
27842: IFFALSE 27856
27844: GO 27846
27846: DISABLE
// FogOff ( your_side ) ;
27847: LD_OWVAR 2
27851: PPUSH
27852: CALL_OW 344
27856: END
// every 0 0$1 trigger StreamModeActive and sSun do
27857: LD_EXP 51
27861: PUSH
27862: LD_EXP 74
27866: AND
27867: IFFALSE 27895
27869: GO 27871
27871: DISABLE
// begin solar_recharge_percent := 0 ;
27872: LD_ADDR_OWVAR 79
27876: PUSH
27877: LD_INT 0
27879: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27880: LD_INT 10500
27882: PPUSH
27883: CALL_OW 67
// solar_recharge_percent := 100 ;
27887: LD_ADDR_OWVAR 79
27891: PUSH
27892: LD_INT 100
27894: ST_TO_ADDR
// end ;
27895: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27896: LD_EXP 51
27900: PUSH
27901: LD_EXP 75
27905: AND
27906: IFFALSE 28145
27908: GO 27910
27910: DISABLE
27911: LD_INT 0
27913: PPUSH
27914: PPUSH
27915: PPUSH
// begin tmp := [ ] ;
27916: LD_ADDR_VAR 0 3
27920: PUSH
27921: EMPTY
27922: ST_TO_ADDR
// for i := 1 to 6 do
27923: LD_ADDR_VAR 0 1
27927: PUSH
27928: DOUBLE
27929: LD_INT 1
27931: DEC
27932: ST_TO_ADDR
27933: LD_INT 6
27935: PUSH
27936: FOR_TO
27937: IFFALSE 28042
// begin uc_nation := nation_nature ;
27939: LD_ADDR_OWVAR 21
27943: PUSH
27944: LD_INT 0
27946: ST_TO_ADDR
// uc_side := 0 ;
27947: LD_ADDR_OWVAR 20
27951: PUSH
27952: LD_INT 0
27954: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27955: LD_ADDR_OWVAR 29
27959: PUSH
27960: LD_INT 12
27962: PUSH
27963: LD_INT 12
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: ST_TO_ADDR
// hc_agressivity := 20 ;
27970: LD_ADDR_OWVAR 35
27974: PUSH
27975: LD_INT 20
27977: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27978: LD_ADDR_OWVAR 28
27982: PUSH
27983: LD_INT 17
27985: ST_TO_ADDR
// hc_gallery :=  ;
27986: LD_ADDR_OWVAR 33
27990: PUSH
27991: LD_STRING 
27993: ST_TO_ADDR
// hc_name :=  ;
27994: LD_ADDR_OWVAR 26
27998: PUSH
27999: LD_STRING 
28001: ST_TO_ADDR
// un := CreateHuman ;
28002: LD_ADDR_VAR 0 2
28006: PUSH
28007: CALL_OW 44
28011: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28012: LD_VAR 0 2
28016: PPUSH
28017: LD_INT 1
28019: PPUSH
28020: CALL_OW 51
// tmp := tmp ^ un ;
28024: LD_ADDR_VAR 0 3
28028: PUSH
28029: LD_VAR 0 3
28033: PUSH
28034: LD_VAR 0 2
28038: ADD
28039: ST_TO_ADDR
// end ;
28040: GO 27936
28042: POP
28043: POP
// repeat wait ( 0 0$1 ) ;
28044: LD_INT 35
28046: PPUSH
28047: CALL_OW 67
// for un in tmp do
28051: LD_ADDR_VAR 0 2
28055: PUSH
28056: LD_VAR 0 3
28060: PUSH
28061: FOR_IN
28062: IFFALSE 28136
// begin if IsDead ( un ) then
28064: LD_VAR 0 2
28068: PPUSH
28069: CALL_OW 301
28073: IFFALSE 28093
// begin tmp := tmp diff un ;
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: LD_VAR 0 3
28084: PUSH
28085: LD_VAR 0 2
28089: DIFF
28090: ST_TO_ADDR
// continue ;
28091: GO 28061
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28093: LD_VAR 0 2
28097: PPUSH
28098: LD_INT 3
28100: PUSH
28101: LD_INT 22
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PPUSH
28115: CALL_OW 69
28119: PPUSH
28120: LD_VAR 0 2
28124: PPUSH
28125: CALL_OW 74
28129: PPUSH
28130: CALL_OW 115
// end ;
28134: GO 28061
28136: POP
28137: POP
// until not tmp ;
28138: LD_VAR 0 3
28142: NOT
28143: IFFALSE 28044
// end ;
28145: PPOPN 3
28147: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28148: LD_EXP 51
28152: PUSH
28153: LD_EXP 76
28157: AND
28158: IFFALSE 28212
28160: GO 28162
28162: DISABLE
// begin ToLua ( displayTroll(); ) ;
28163: LD_STRING displayTroll();
28165: PPUSH
28166: CALL_OW 559
// wait ( 3 3$00 ) ;
28170: LD_INT 6300
28172: PPUSH
28173: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28177: LD_STRING hideTroll();
28179: PPUSH
28180: CALL_OW 559
// wait ( 1 1$00 ) ;
28184: LD_INT 2100
28186: PPUSH
28187: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28191: LD_STRING displayTroll();
28193: PPUSH
28194: CALL_OW 559
// wait ( 1 1$00 ) ;
28198: LD_INT 2100
28200: PPUSH
28201: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28205: LD_STRING hideTroll();
28207: PPUSH
28208: CALL_OW 559
// end ;
28212: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28213: LD_EXP 51
28217: PUSH
28218: LD_EXP 77
28222: AND
28223: IFFALSE 28286
28225: GO 28227
28227: DISABLE
28228: LD_INT 0
28230: PPUSH
// begin p := 0 ;
28231: LD_ADDR_VAR 0 1
28235: PUSH
28236: LD_INT 0
28238: ST_TO_ADDR
// repeat game_speed := 1 ;
28239: LD_ADDR_OWVAR 65
28243: PUSH
28244: LD_INT 1
28246: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28247: LD_INT 35
28249: PPUSH
28250: CALL_OW 67
// p := p + 1 ;
28254: LD_ADDR_VAR 0 1
28258: PUSH
28259: LD_VAR 0 1
28263: PUSH
28264: LD_INT 1
28266: PLUS
28267: ST_TO_ADDR
// until p >= 60 ;
28268: LD_VAR 0 1
28272: PUSH
28273: LD_INT 60
28275: GREATEREQUAL
28276: IFFALSE 28239
// game_speed := 4 ;
28278: LD_ADDR_OWVAR 65
28282: PUSH
28283: LD_INT 4
28285: ST_TO_ADDR
// end ;
28286: PPOPN 1
28288: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28289: LD_EXP 51
28293: PUSH
28294: LD_EXP 78
28298: AND
28299: IFFALSE 28445
28301: GO 28303
28303: DISABLE
28304: LD_INT 0
28306: PPUSH
28307: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28308: LD_ADDR_VAR 0 1
28312: PUSH
28313: LD_INT 22
28315: PUSH
28316: LD_OWVAR 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: LD_INT 30
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 30
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PPUSH
28357: CALL_OW 69
28361: ST_TO_ADDR
// if not depot then
28362: LD_VAR 0 1
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28445
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28371: LD_ADDR_VAR 0 2
28375: PUSH
28376: LD_VAR 0 1
28380: PUSH
28381: LD_INT 1
28383: PPUSH
28384: LD_VAR 0 1
28388: PPUSH
28389: CALL_OW 12
28393: ARRAY
28394: PPUSH
28395: CALL_OW 274
28399: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28400: LD_VAR 0 2
28404: PPUSH
28405: LD_INT 1
28407: PPUSH
28408: LD_INT 0
28410: PPUSH
28411: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28415: LD_VAR 0 2
28419: PPUSH
28420: LD_INT 2
28422: PPUSH
28423: LD_INT 0
28425: PPUSH
28426: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28430: LD_VAR 0 2
28434: PPUSH
28435: LD_INT 3
28437: PPUSH
28438: LD_INT 0
28440: PPUSH
28441: CALL_OW 277
// end ;
28445: PPOPN 2
28447: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28448: LD_EXP 51
28452: PUSH
28453: LD_EXP 79
28457: AND
28458: IFFALSE 28555
28460: GO 28462
28462: DISABLE
28463: LD_INT 0
28465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: LD_INT 22
28473: PUSH
28474: LD_OWVAR 2
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 21
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 3
28495: PUSH
28496: LD_INT 23
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: PPUSH
28515: CALL_OW 69
28519: ST_TO_ADDR
// if not tmp then
28520: LD_VAR 0 1
28524: NOT
28525: IFFALSE 28529
// exit ;
28527: GO 28555
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28529: LD_VAR 0 1
28533: PUSH
28534: LD_INT 1
28536: PPUSH
28537: LD_VAR 0 1
28541: PPUSH
28542: CALL_OW 12
28546: ARRAY
28547: PPUSH
28548: LD_INT 200
28550: PPUSH
28551: CALL_OW 234
// end ;
28555: PPOPN 1
28557: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28558: LD_EXP 51
28562: PUSH
28563: LD_EXP 80
28567: AND
28568: IFFALSE 28647
28570: GO 28572
28572: DISABLE
28573: LD_INT 0
28575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28576: LD_ADDR_VAR 0 1
28580: PUSH
28581: LD_INT 22
28583: PUSH
28584: LD_OWVAR 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 21
28595: PUSH
28596: LD_INT 2
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PPUSH
28607: CALL_OW 69
28611: ST_TO_ADDR
// if not tmp then
28612: LD_VAR 0 1
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 28647
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28621: LD_VAR 0 1
28625: PUSH
28626: LD_INT 1
28628: PPUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 12
28638: ARRAY
28639: PPUSH
28640: LD_INT 60
28642: PPUSH
28643: CALL_OW 234
// end ;
28647: PPOPN 1
28649: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28650: LD_EXP 51
28654: PUSH
28655: LD_EXP 81
28659: AND
28660: IFFALSE 28759
28662: GO 28664
28664: DISABLE
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
// begin enable ;
28669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28670: LD_ADDR_VAR 0 1
28674: PUSH
28675: LD_INT 22
28677: PUSH
28678: LD_OWVAR 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 61
28689: PUSH
28690: EMPTY
28691: LIST
28692: PUSH
28693: LD_INT 33
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: PPUSH
28708: CALL_OW 69
28712: ST_TO_ADDR
// if not tmp then
28713: LD_VAR 0 1
28717: NOT
28718: IFFALSE 28722
// exit ;
28720: GO 28759
// for i in tmp do
28722: LD_ADDR_VAR 0 2
28726: PUSH
28727: LD_VAR 0 1
28731: PUSH
28732: FOR_IN
28733: IFFALSE 28757
// if IsControledBy ( i ) then
28735: LD_VAR 0 2
28739: PPUSH
28740: CALL_OW 312
28744: IFFALSE 28755
// ComUnlink ( i ) ;
28746: LD_VAR 0 2
28750: PPUSH
28751: CALL_OW 136
28755: GO 28732
28757: POP
28758: POP
// end ;
28759: PPOPN 2
28761: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28762: LD_EXP 51
28766: PUSH
28767: LD_EXP 82
28771: AND
28772: IFFALSE 28912
28774: GO 28776
28776: DISABLE
28777: LD_INT 0
28779: PPUSH
28780: PPUSH
// begin ToLua ( displayPowell(); ) ;
28781: LD_STRING displayPowell();
28783: PPUSH
28784: CALL_OW 559
// uc_side := 0 ;
28788: LD_ADDR_OWVAR 20
28792: PUSH
28793: LD_INT 0
28795: ST_TO_ADDR
// uc_nation := 2 ;
28796: LD_ADDR_OWVAR 21
28800: PUSH
28801: LD_INT 2
28803: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28804: LD_ADDR_OWVAR 37
28808: PUSH
28809: LD_INT 14
28811: ST_TO_ADDR
// vc_engine := engine_siberite ;
28812: LD_ADDR_OWVAR 39
28816: PUSH
28817: LD_INT 3
28819: ST_TO_ADDR
// vc_control := control_apeman ;
28820: LD_ADDR_OWVAR 38
28824: PUSH
28825: LD_INT 5
28827: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28828: LD_ADDR_OWVAR 40
28832: PUSH
28833: LD_INT 29
28835: ST_TO_ADDR
// un := CreateVehicle ;
28836: LD_ADDR_VAR 0 2
28840: PUSH
28841: CALL_OW 45
28845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28846: LD_VAR 0 2
28850: PPUSH
28851: LD_INT 1
28853: PPUSH
28854: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28858: LD_INT 35
28860: PPUSH
28861: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28865: LD_VAR 0 2
28869: PPUSH
28870: LD_INT 22
28872: PUSH
28873: LD_OWVAR 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PPUSH
28882: CALL_OW 69
28886: PPUSH
28887: LD_VAR 0 2
28891: PPUSH
28892: CALL_OW 74
28896: PPUSH
28897: CALL_OW 115
// until IsDead ( un ) ;
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 301
28910: IFFALSE 28858
// end ;
28912: PPOPN 2
28914: END
// every 0 0$1 trigger StreamModeActive and sStu do
28915: LD_EXP 51
28919: PUSH
28920: LD_EXP 90
28924: AND
28925: IFFALSE 28941
28927: GO 28929
28929: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28930: LD_STRING displayStucuk();
28932: PPUSH
28933: CALL_OW 559
// ResetFog ;
28937: CALL_OW 335
// end ;
28941: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28942: LD_EXP 51
28946: PUSH
28947: LD_EXP 83
28951: AND
28952: IFFALSE 29093
28954: GO 28956
28956: DISABLE
28957: LD_INT 0
28959: PPUSH
28960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28961: LD_ADDR_VAR 0 2
28965: PUSH
28966: LD_INT 22
28968: PUSH
28969: LD_OWVAR 2
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 21
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PPUSH
28992: CALL_OW 69
28996: ST_TO_ADDR
// if not tmp then
28997: LD_VAR 0 2
29001: NOT
29002: IFFALSE 29006
// exit ;
29004: GO 29093
// un := tmp [ rand ( 1 , tmp ) ] ;
29006: LD_ADDR_VAR 0 1
29010: PUSH
29011: LD_VAR 0 2
29015: PUSH
29016: LD_INT 1
29018: PPUSH
29019: LD_VAR 0 2
29023: PPUSH
29024: CALL_OW 12
29028: ARRAY
29029: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29030: LD_VAR 0 1
29034: PPUSH
29035: LD_INT 0
29037: PPUSH
29038: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29042: LD_VAR 0 1
29046: PPUSH
29047: LD_OWVAR 3
29051: PUSH
29052: LD_VAR 0 1
29056: DIFF
29057: PPUSH
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 74
29067: PPUSH
29068: CALL_OW 115
// wait ( 0 0$20 ) ;
29072: LD_INT 700
29074: PPUSH
29075: CALL_OW 67
// SetSide ( un , your_side ) ;
29079: LD_VAR 0 1
29083: PPUSH
29084: LD_OWVAR 2
29088: PPUSH
29089: CALL_OW 235
// end ;
29093: PPOPN 2
29095: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29096: LD_EXP 51
29100: PUSH
29101: LD_EXP 84
29105: AND
29106: IFFALSE 29212
29108: GO 29110
29110: DISABLE
29111: LD_INT 0
29113: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29114: LD_ADDR_VAR 0 1
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: LD_INT 30
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 30
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PPUSH
29163: CALL_OW 69
29167: ST_TO_ADDR
// if not depot then
29168: LD_VAR 0 1
29172: NOT
29173: IFFALSE 29177
// exit ;
29175: GO 29212
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29177: LD_VAR 0 1
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: CALL_OW 250
29190: PPUSH
29191: LD_VAR 0 1
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PPUSH
29200: CALL_OW 251
29204: PPUSH
29205: LD_INT 70
29207: PPUSH
29208: CALL_OW 495
// end ;
29212: PPOPN 1
29214: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29215: LD_EXP 51
29219: PUSH
29220: LD_EXP 85
29224: AND
29225: IFFALSE 29436
29227: GO 29229
29229: DISABLE
29230: LD_INT 0
29232: PPUSH
29233: PPUSH
29234: PPUSH
29235: PPUSH
29236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29237: LD_ADDR_VAR 0 5
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_OWVAR 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 21
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PPUSH
29268: CALL_OW 69
29272: ST_TO_ADDR
// if not tmp then
29273: LD_VAR 0 5
29277: NOT
29278: IFFALSE 29282
// exit ;
29280: GO 29436
// for i in tmp do
29282: LD_ADDR_VAR 0 1
29286: PUSH
29287: LD_VAR 0 5
29291: PUSH
29292: FOR_IN
29293: IFFALSE 29434
// begin d := rand ( 0 , 5 ) ;
29295: LD_ADDR_VAR 0 4
29299: PUSH
29300: LD_INT 0
29302: PPUSH
29303: LD_INT 5
29305: PPUSH
29306: CALL_OW 12
29310: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29311: LD_ADDR_VAR 0 2
29315: PUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 250
29325: PPUSH
29326: LD_VAR 0 4
29330: PPUSH
29331: LD_INT 3
29333: PPUSH
29334: LD_INT 12
29336: PPUSH
29337: CALL_OW 12
29341: PPUSH
29342: CALL_OW 272
29346: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29347: LD_ADDR_VAR 0 3
29351: PUSH
29352: LD_VAR 0 1
29356: PPUSH
29357: CALL_OW 251
29361: PPUSH
29362: LD_VAR 0 4
29366: PPUSH
29367: LD_INT 3
29369: PPUSH
29370: LD_INT 12
29372: PPUSH
29373: CALL_OW 12
29377: PPUSH
29378: CALL_OW 273
29382: ST_TO_ADDR
// if ValidHex ( x , y ) then
29383: LD_VAR 0 2
29387: PPUSH
29388: LD_VAR 0 3
29392: PPUSH
29393: CALL_OW 488
29397: IFFALSE 29432
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29399: LD_VAR 0 1
29403: PPUSH
29404: LD_VAR 0 2
29408: PPUSH
29409: LD_VAR 0 3
29413: PPUSH
29414: LD_INT 3
29416: PPUSH
29417: LD_INT 6
29419: PPUSH
29420: CALL_OW 12
29424: PPUSH
29425: LD_INT 1
29427: PPUSH
29428: CALL_OW 483
// end ;
29432: GO 29292
29434: POP
29435: POP
// end ;
29436: PPOPN 5
29438: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29439: LD_EXP 51
29443: PUSH
29444: LD_EXP 86
29448: AND
29449: IFFALSE 29543
29451: GO 29453
29453: DISABLE
29454: LD_INT 0
29456: PPUSH
29457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29458: LD_ADDR_VAR 0 2
29462: PUSH
29463: LD_INT 22
29465: PUSH
29466: LD_OWVAR 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 32
29477: PUSH
29478: LD_INT 1
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 21
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: PPUSH
29500: CALL_OW 69
29504: ST_TO_ADDR
// if not tmp then
29505: LD_VAR 0 2
29509: NOT
29510: IFFALSE 29514
// exit ;
29512: GO 29543
// for i in tmp do
29514: LD_ADDR_VAR 0 1
29518: PUSH
29519: LD_VAR 0 2
29523: PUSH
29524: FOR_IN
29525: IFFALSE 29541
// SetFuel ( i , 0 ) ;
29527: LD_VAR 0 1
29531: PPUSH
29532: LD_INT 0
29534: PPUSH
29535: CALL_OW 240
29539: GO 29524
29541: POP
29542: POP
// end ;
29543: PPOPN 2
29545: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29546: LD_EXP 51
29550: PUSH
29551: LD_EXP 87
29555: AND
29556: IFFALSE 29622
29558: GO 29560
29560: DISABLE
29561: LD_INT 0
29563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29564: LD_ADDR_VAR 0 1
29568: PUSH
29569: LD_INT 22
29571: PUSH
29572: LD_OWVAR 2
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 30
29583: PUSH
29584: LD_INT 29
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PPUSH
29595: CALL_OW 69
29599: ST_TO_ADDR
// if not tmp then
29600: LD_VAR 0 1
29604: NOT
29605: IFFALSE 29609
// exit ;
29607: GO 29622
// DestroyUnit ( tmp [ 1 ] ) ;
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 1
29616: ARRAY
29617: PPUSH
29618: CALL_OW 65
// end ;
29622: PPOPN 1
29624: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29625: LD_EXP 51
29629: PUSH
29630: LD_EXP 89
29634: AND
29635: IFFALSE 29764
29637: GO 29639
29639: DISABLE
29640: LD_INT 0
29642: PPUSH
// begin uc_side := 0 ;
29643: LD_ADDR_OWVAR 20
29647: PUSH
29648: LD_INT 0
29650: ST_TO_ADDR
// uc_nation := nation_arabian ;
29651: LD_ADDR_OWVAR 21
29655: PUSH
29656: LD_INT 2
29658: ST_TO_ADDR
// hc_gallery :=  ;
29659: LD_ADDR_OWVAR 33
29663: PUSH
29664: LD_STRING 
29666: ST_TO_ADDR
// hc_name :=  ;
29667: LD_ADDR_OWVAR 26
29671: PUSH
29672: LD_STRING 
29674: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29675: LD_INT 1
29677: PPUSH
29678: LD_INT 11
29680: PPUSH
29681: LD_INT 10
29683: PPUSH
29684: CALL_OW 380
// un := CreateHuman ;
29688: LD_ADDR_VAR 0 1
29692: PUSH
29693: CALL_OW 44
29697: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29698: LD_VAR 0 1
29702: PPUSH
29703: LD_INT 1
29705: PPUSH
29706: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29710: LD_INT 35
29712: PPUSH
29713: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_INT 22
29724: PUSH
29725: LD_OWVAR 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: PPUSH
29739: LD_VAR 0 1
29743: PPUSH
29744: CALL_OW 74
29748: PPUSH
29749: CALL_OW 115
// until IsDead ( un ) ;
29753: LD_VAR 0 1
29757: PPUSH
29758: CALL_OW 301
29762: IFFALSE 29710
// end ;
29764: PPOPN 1
29766: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29767: LD_EXP 51
29771: PUSH
29772: LD_EXP 91
29776: AND
29777: IFFALSE 29789
29779: GO 29781
29781: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29782: LD_STRING earthquake(getX(game), 0, 32)
29784: PPUSH
29785: CALL_OW 559
29789: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29790: LD_EXP 51
29794: PUSH
29795: LD_EXP 92
29799: AND
29800: IFFALSE 29891
29802: GO 29804
29804: DISABLE
29805: LD_INT 0
29807: PPUSH
// begin enable ;
29808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29809: LD_ADDR_VAR 0 1
29813: PUSH
29814: LD_INT 22
29816: PUSH
29817: LD_OWVAR 2
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 21
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 33
29838: PUSH
29839: LD_INT 3
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: LIST
29850: PPUSH
29851: CALL_OW 69
29855: ST_TO_ADDR
// if not tmp then
29856: LD_VAR 0 1
29860: NOT
29861: IFFALSE 29865
// exit ;
29863: GO 29891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29865: LD_VAR 0 1
29869: PUSH
29870: LD_INT 1
29872: PPUSH
29873: LD_VAR 0 1
29877: PPUSH
29878: CALL_OW 12
29882: ARRAY
29883: PPUSH
29884: LD_INT 1
29886: PPUSH
29887: CALL_OW 234
// end ;
29891: PPOPN 1
29893: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29894: LD_EXP 51
29898: PUSH
29899: LD_EXP 93
29903: AND
29904: IFFALSE 30045
29906: GO 29908
29908: DISABLE
29909: LD_INT 0
29911: PPUSH
29912: PPUSH
29913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29914: LD_ADDR_VAR 0 3
29918: PUSH
29919: LD_INT 22
29921: PUSH
29922: LD_OWVAR 2
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 25
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PPUSH
29945: CALL_OW 69
29949: ST_TO_ADDR
// if not tmp then
29950: LD_VAR 0 3
29954: NOT
29955: IFFALSE 29959
// exit ;
29957: GO 30045
// un := tmp [ rand ( 1 , tmp ) ] ;
29959: LD_ADDR_VAR 0 2
29963: PUSH
29964: LD_VAR 0 3
29968: PUSH
29969: LD_INT 1
29971: PPUSH
29972: LD_VAR 0 3
29976: PPUSH
29977: CALL_OW 12
29981: ARRAY
29982: ST_TO_ADDR
// if Crawls ( un ) then
29983: LD_VAR 0 2
29987: PPUSH
29988: CALL_OW 318
29992: IFFALSE 30003
// ComWalk ( un ) ;
29994: LD_VAR 0 2
29998: PPUSH
29999: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30003: LD_VAR 0 2
30007: PPUSH
30008: LD_INT 9
30010: PPUSH
30011: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30015: LD_INT 28
30017: PPUSH
30018: LD_OWVAR 2
30022: PPUSH
30023: LD_INT 2
30025: PPUSH
30026: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30030: LD_INT 29
30032: PPUSH
30033: LD_OWVAR 2
30037: PPUSH
30038: LD_INT 2
30040: PPUSH
30041: CALL_OW 322
// end ;
30045: PPOPN 3
30047: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30048: LD_EXP 51
30052: PUSH
30053: LD_EXP 94
30057: AND
30058: IFFALSE 30169
30060: GO 30062
30062: DISABLE
30063: LD_INT 0
30065: PPUSH
30066: PPUSH
30067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30068: LD_ADDR_VAR 0 3
30072: PUSH
30073: LD_INT 22
30075: PUSH
30076: LD_OWVAR 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 25
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 69
30103: ST_TO_ADDR
// if not tmp then
30104: LD_VAR 0 3
30108: NOT
30109: IFFALSE 30113
// exit ;
30111: GO 30169
// un := tmp [ rand ( 1 , tmp ) ] ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_VAR 0 3
30122: PUSH
30123: LD_INT 1
30125: PPUSH
30126: LD_VAR 0 3
30130: PPUSH
30131: CALL_OW 12
30135: ARRAY
30136: ST_TO_ADDR
// if Crawls ( un ) then
30137: LD_VAR 0 2
30141: PPUSH
30142: CALL_OW 318
30146: IFFALSE 30157
// ComWalk ( un ) ;
30148: LD_VAR 0 2
30152: PPUSH
30153: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30157: LD_VAR 0 2
30161: PPUSH
30162: LD_INT 8
30164: PPUSH
30165: CALL_OW 336
// end ;
30169: PPOPN 3
30171: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30172: LD_EXP 51
30176: PUSH
30177: LD_EXP 95
30181: AND
30182: IFFALSE 30326
30184: GO 30186
30186: DISABLE
30187: LD_INT 0
30189: PPUSH
30190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30191: LD_ADDR_VAR 0 2
30195: PUSH
30196: LD_INT 22
30198: PUSH
30199: LD_OWVAR 2
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 21
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: LD_INT 34
30223: PUSH
30224: LD_INT 12
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 34
30233: PUSH
30234: LD_INT 51
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 34
30243: PUSH
30244: LD_INT 32
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: PPUSH
30262: CALL_OW 69
30266: ST_TO_ADDR
// if not tmp then
30267: LD_VAR 0 2
30271: NOT
30272: IFFALSE 30276
// exit ;
30274: GO 30326
// for i in tmp do
30276: LD_ADDR_VAR 0 1
30280: PUSH
30281: LD_VAR 0 2
30285: PUSH
30286: FOR_IN
30287: IFFALSE 30324
// if GetCargo ( i , mat_artifact ) = 0 then
30289: LD_VAR 0 1
30293: PPUSH
30294: LD_INT 4
30296: PPUSH
30297: CALL_OW 289
30301: PUSH
30302: LD_INT 0
30304: EQUAL
30305: IFFALSE 30322
// SetCargo ( i , mat_siberit , 100 ) ;
30307: LD_VAR 0 1
30311: PPUSH
30312: LD_INT 3
30314: PPUSH
30315: LD_INT 100
30317: PPUSH
30318: CALL_OW 290
30322: GO 30286
30324: POP
30325: POP
// end ;
30326: PPOPN 2
30328: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30329: LD_EXP 51
30333: PUSH
30334: LD_EXP 96
30338: AND
30339: IFFALSE 30522
30341: GO 30343
30343: DISABLE
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30348: LD_ADDR_VAR 0 2
30352: PUSH
30353: LD_INT 22
30355: PUSH
30356: LD_OWVAR 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 69
30369: ST_TO_ADDR
// if not tmp then
30370: LD_VAR 0 2
30374: NOT
30375: IFFALSE 30379
// exit ;
30377: GO 30522
// for i := 1 to 2 do
30379: LD_ADDR_VAR 0 1
30383: PUSH
30384: DOUBLE
30385: LD_INT 1
30387: DEC
30388: ST_TO_ADDR
30389: LD_INT 2
30391: PUSH
30392: FOR_TO
30393: IFFALSE 30520
// begin uc_side := your_side ;
30395: LD_ADDR_OWVAR 20
30399: PUSH
30400: LD_OWVAR 2
30404: ST_TO_ADDR
// uc_nation := nation_american ;
30405: LD_ADDR_OWVAR 21
30409: PUSH
30410: LD_INT 1
30412: ST_TO_ADDR
// vc_chassis := us_morphling ;
30413: LD_ADDR_OWVAR 37
30417: PUSH
30418: LD_INT 5
30420: ST_TO_ADDR
// vc_engine := engine_siberite ;
30421: LD_ADDR_OWVAR 39
30425: PUSH
30426: LD_INT 3
30428: ST_TO_ADDR
// vc_control := control_computer ;
30429: LD_ADDR_OWVAR 38
30433: PUSH
30434: LD_INT 3
30436: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30437: LD_ADDR_OWVAR 40
30441: PUSH
30442: LD_INT 10
30444: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30445: LD_VAR 0 2
30449: PUSH
30450: LD_INT 1
30452: ARRAY
30453: PPUSH
30454: CALL_OW 310
30458: NOT
30459: IFFALSE 30506
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30461: CALL_OW 45
30465: PPUSH
30466: LD_VAR 0 2
30470: PUSH
30471: LD_INT 1
30473: ARRAY
30474: PPUSH
30475: CALL_OW 250
30479: PPUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: CALL_OW 251
30493: PPUSH
30494: LD_INT 12
30496: PPUSH
30497: LD_INT 1
30499: PPUSH
30500: CALL_OW 50
30504: GO 30518
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30506: CALL_OW 45
30510: PPUSH
30511: LD_INT 1
30513: PPUSH
30514: CALL_OW 51
// end ;
30518: GO 30392
30520: POP
30521: POP
// end ;
30522: PPOPN 2
30524: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30525: LD_EXP 51
30529: PUSH
30530: LD_EXP 97
30534: AND
30535: IFFALSE 30757
30537: GO 30539
30539: DISABLE
30540: LD_INT 0
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30548: LD_ADDR_VAR 0 6
30552: PUSH
30553: LD_INT 22
30555: PUSH
30556: LD_OWVAR 2
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 21
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 23
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: PPUSH
30597: CALL_OW 69
30601: ST_TO_ADDR
// if not tmp then
30602: LD_VAR 0 6
30606: NOT
30607: IFFALSE 30611
// exit ;
30609: GO 30757
// s1 := rand ( 1 , 4 ) ;
30611: LD_ADDR_VAR 0 2
30615: PUSH
30616: LD_INT 1
30618: PPUSH
30619: LD_INT 4
30621: PPUSH
30622: CALL_OW 12
30626: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30627: LD_ADDR_VAR 0 4
30631: PUSH
30632: LD_VAR 0 6
30636: PUSH
30637: LD_INT 1
30639: ARRAY
30640: PPUSH
30641: LD_VAR 0 2
30645: PPUSH
30646: CALL_OW 259
30650: ST_TO_ADDR
// if s1 = 1 then
30651: LD_VAR 0 2
30655: PUSH
30656: LD_INT 1
30658: EQUAL
30659: IFFALSE 30679
// s2 := rand ( 2 , 4 ) else
30661: LD_ADDR_VAR 0 3
30665: PUSH
30666: LD_INT 2
30668: PPUSH
30669: LD_INT 4
30671: PPUSH
30672: CALL_OW 12
30676: ST_TO_ADDR
30677: GO 30687
// s2 := 1 ;
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: LD_INT 1
30686: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30687: LD_ADDR_VAR 0 5
30691: PUSH
30692: LD_VAR 0 6
30696: PUSH
30697: LD_INT 1
30699: ARRAY
30700: PPUSH
30701: LD_VAR 0 3
30705: PPUSH
30706: CALL_OW 259
30710: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30711: LD_VAR 0 6
30715: PUSH
30716: LD_INT 1
30718: ARRAY
30719: PPUSH
30720: LD_VAR 0 2
30724: PPUSH
30725: LD_VAR 0 5
30729: PPUSH
30730: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30734: LD_VAR 0 6
30738: PUSH
30739: LD_INT 1
30741: ARRAY
30742: PPUSH
30743: LD_VAR 0 3
30747: PPUSH
30748: LD_VAR 0 4
30752: PPUSH
30753: CALL_OW 237
// end ;
30757: PPOPN 6
30759: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30760: LD_EXP 51
30764: PUSH
30765: LD_EXP 98
30769: AND
30770: IFFALSE 30849
30772: GO 30774
30774: DISABLE
30775: LD_INT 0
30777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30778: LD_ADDR_VAR 0 1
30782: PUSH
30783: LD_INT 22
30785: PUSH
30786: LD_OWVAR 2
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 30
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PPUSH
30809: CALL_OW 69
30813: ST_TO_ADDR
// if not tmp then
30814: LD_VAR 0 1
30818: NOT
30819: IFFALSE 30823
// exit ;
30821: GO 30849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30823: LD_VAR 0 1
30827: PUSH
30828: LD_INT 1
30830: PPUSH
30831: LD_VAR 0 1
30835: PPUSH
30836: CALL_OW 12
30840: ARRAY
30841: PPUSH
30842: LD_INT 1
30844: PPUSH
30845: CALL_OW 234
// end ;
30849: PPOPN 1
30851: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30852: LD_EXP 51
30856: PUSH
30857: LD_EXP 99
30861: AND
30862: IFFALSE 30974
30864: GO 30866
30866: DISABLE
30867: LD_INT 0
30869: PPUSH
30870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30871: LD_ADDR_VAR 0 2
30875: PUSH
30876: LD_INT 22
30878: PUSH
30879: LD_OWVAR 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: LD_INT 30
30893: PUSH
30894: LD_INT 27
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 30
30903: PUSH
30904: LD_INT 26
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 30
30913: PUSH
30914: LD_INT 28
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 2
30940: NOT
30941: IFFALSE 30945
// exit ;
30943: GO 30974
// for i in tmp do
30945: LD_ADDR_VAR 0 1
30949: PUSH
30950: LD_VAR 0 2
30954: PUSH
30955: FOR_IN
30956: IFFALSE 30972
// SetLives ( i , 1 ) ;
30958: LD_VAR 0 1
30962: PPUSH
30963: LD_INT 1
30965: PPUSH
30966: CALL_OW 234
30970: GO 30955
30972: POP
30973: POP
// end ;
30974: PPOPN 2
30976: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30977: LD_EXP 51
30981: PUSH
30982: LD_EXP 100
30986: AND
30987: IFFALSE 31274
30989: GO 30991
30991: DISABLE
30992: LD_INT 0
30994: PPUSH
30995: PPUSH
30996: PPUSH
// begin i := rand ( 1 , 7 ) ;
30997: LD_ADDR_VAR 0 1
31001: PUSH
31002: LD_INT 1
31004: PPUSH
31005: LD_INT 7
31007: PPUSH
31008: CALL_OW 12
31012: ST_TO_ADDR
// case i of 1 :
31013: LD_VAR 0 1
31017: PUSH
31018: LD_INT 1
31020: DOUBLE
31021: EQUAL
31022: IFTRUE 31026
31024: GO 31036
31026: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31027: LD_STRING earthquake(getX(game), 0, 32)
31029: PPUSH
31030: CALL_OW 559
31034: GO 31274
31036: LD_INT 2
31038: DOUBLE
31039: EQUAL
31040: IFTRUE 31044
31042: GO 31058
31044: POP
// begin ToLua ( displayStucuk(); ) ;
31045: LD_STRING displayStucuk();
31047: PPUSH
31048: CALL_OW 559
// ResetFog ;
31052: CALL_OW 335
// end ; 3 :
31056: GO 31274
31058: LD_INT 3
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31170
31066: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31067: LD_ADDR_VAR 0 2
31071: PUSH
31072: LD_INT 22
31074: PUSH
31075: LD_OWVAR 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 25
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PPUSH
31098: CALL_OW 69
31102: ST_TO_ADDR
// if not tmp then
31103: LD_VAR 0 2
31107: NOT
31108: IFFALSE 31112
// exit ;
31110: GO 31274
// un := tmp [ rand ( 1 , tmp ) ] ;
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_VAR 0 2
31121: PUSH
31122: LD_INT 1
31124: PPUSH
31125: LD_VAR 0 2
31129: PPUSH
31130: CALL_OW 12
31134: ARRAY
31135: ST_TO_ADDR
// if Crawls ( un ) then
31136: LD_VAR 0 3
31140: PPUSH
31141: CALL_OW 318
31145: IFFALSE 31156
// ComWalk ( un ) ;
31147: LD_VAR 0 3
31151: PPUSH
31152: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31156: LD_VAR 0 3
31160: PPUSH
31161: LD_INT 8
31163: PPUSH
31164: CALL_OW 336
// end ; 4 :
31168: GO 31274
31170: LD_INT 4
31172: DOUBLE
31173: EQUAL
31174: IFTRUE 31178
31176: GO 31252
31178: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31179: LD_ADDR_VAR 0 2
31183: PUSH
31184: LD_INT 22
31186: PUSH
31187: LD_OWVAR 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: LD_INT 29
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PPUSH
31210: CALL_OW 69
31214: ST_TO_ADDR
// if not tmp then
31215: LD_VAR 0 2
31219: NOT
31220: IFFALSE 31224
// exit ;
31222: GO 31274
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31224: LD_VAR 0 2
31228: PUSH
31229: LD_INT 1
31231: ARRAY
31232: PPUSH
31233: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31237: LD_VAR 0 2
31241: PUSH
31242: LD_INT 1
31244: ARRAY
31245: PPUSH
31246: CALL_OW 65
// end ; 5 .. 7 :
31250: GO 31274
31252: LD_INT 5
31254: DOUBLE
31255: GREATEREQUAL
31256: IFFALSE 31264
31258: LD_INT 7
31260: DOUBLE
31261: LESSEQUAL
31262: IFTRUE 31266
31264: GO 31273
31266: POP
// StreamSibBomb ; end ;
31267: CALL 27511 0 0
31271: GO 31274
31273: POP
// end ;
31274: PPOPN 3
31276: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31277: LD_EXP 51
31281: PUSH
31282: LD_EXP 101
31286: AND
31287: IFFALSE 31443
31289: GO 31291
31291: DISABLE
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
31296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31297: LD_ADDR_VAR 0 2
31301: PUSH
31302: LD_INT 81
31304: PUSH
31305: LD_OWVAR 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: LD_INT 21
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 21
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PPUSH
31346: CALL_OW 69
31350: ST_TO_ADDR
// if not tmp then
31351: LD_VAR 0 2
31355: NOT
31356: IFFALSE 31360
// exit ;
31358: GO 31443
// p := 0 ;
31360: LD_ADDR_VAR 0 3
31364: PUSH
31365: LD_INT 0
31367: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31368: LD_INT 35
31370: PPUSH
31371: CALL_OW 67
// p := p + 1 ;
31375: LD_ADDR_VAR 0 3
31379: PUSH
31380: LD_VAR 0 3
31384: PUSH
31385: LD_INT 1
31387: PLUS
31388: ST_TO_ADDR
// for i in tmp do
31389: LD_ADDR_VAR 0 1
31393: PUSH
31394: LD_VAR 0 2
31398: PUSH
31399: FOR_IN
31400: IFFALSE 31431
// if GetLives ( i ) < 1000 then
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 256
31411: PUSH
31412: LD_INT 1000
31414: LESS
31415: IFFALSE 31429
// SetLives ( i , 1000 ) ;
31417: LD_VAR 0 1
31421: PPUSH
31422: LD_INT 1000
31424: PPUSH
31425: CALL_OW 234
31429: GO 31399
31431: POP
31432: POP
// until p > 20 ;
31433: LD_VAR 0 3
31437: PUSH
31438: LD_INT 20
31440: GREATER
31441: IFFALSE 31368
// end ;
31443: PPOPN 3
31445: END
// every 0 0$1 trigger StreamModeActive and sTime do
31446: LD_EXP 51
31450: PUSH
31451: LD_EXP 102
31455: AND
31456: IFFALSE 31491
31458: GO 31460
31460: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31461: LD_INT 28
31463: PPUSH
31464: LD_OWVAR 2
31468: PPUSH
31469: LD_INT 2
31471: PPUSH
31472: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31476: LD_INT 30
31478: PPUSH
31479: LD_OWVAR 2
31483: PPUSH
31484: LD_INT 2
31486: PPUSH
31487: CALL_OW 322
// end ;
31491: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31492: LD_EXP 51
31496: PUSH
31497: LD_EXP 103
31501: AND
31502: IFFALSE 31623
31504: GO 31506
31506: DISABLE
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31511: LD_ADDR_VAR 0 2
31515: PUSH
31516: LD_INT 22
31518: PUSH
31519: LD_OWVAR 2
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 21
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: LD_INT 23
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: PPUSH
31560: CALL_OW 69
31564: ST_TO_ADDR
// if not tmp then
31565: LD_VAR 0 2
31569: NOT
31570: IFFALSE 31574
// exit ;
31572: GO 31623
// for i in tmp do
31574: LD_ADDR_VAR 0 1
31578: PUSH
31579: LD_VAR 0 2
31583: PUSH
31584: FOR_IN
31585: IFFALSE 31621
// begin if Crawls ( i ) then
31587: LD_VAR 0 1
31591: PPUSH
31592: CALL_OW 318
31596: IFFALSE 31607
// ComWalk ( i ) ;
31598: LD_VAR 0 1
31602: PPUSH
31603: CALL_OW 138
// SetClass ( i , 2 ) ;
31607: LD_VAR 0 1
31611: PPUSH
31612: LD_INT 2
31614: PPUSH
31615: CALL_OW 336
// end ;
31619: GO 31584
31621: POP
31622: POP
// end ;
31623: PPOPN 2
31625: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31626: LD_EXP 51
31630: PUSH
31631: LD_EXP 104
31635: AND
31636: IFFALSE 31924
31638: GO 31640
31640: DISABLE
31641: LD_INT 0
31643: PPUSH
31644: PPUSH
31645: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31646: LD_OWVAR 2
31650: PPUSH
31651: LD_INT 9
31653: PPUSH
31654: LD_INT 1
31656: PPUSH
31657: LD_INT 1
31659: PPUSH
31660: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31664: LD_INT 9
31666: PPUSH
31667: LD_OWVAR 2
31671: PPUSH
31672: CALL_OW 343
// uc_side := 9 ;
31676: LD_ADDR_OWVAR 20
31680: PUSH
31681: LD_INT 9
31683: ST_TO_ADDR
// uc_nation := 2 ;
31684: LD_ADDR_OWVAR 21
31688: PUSH
31689: LD_INT 2
31691: ST_TO_ADDR
// hc_name := Dark Warrior ;
31692: LD_ADDR_OWVAR 26
31696: PUSH
31697: LD_STRING Dark Warrior
31699: ST_TO_ADDR
// hc_gallery :=  ;
31700: LD_ADDR_OWVAR 33
31704: PUSH
31705: LD_STRING 
31707: ST_TO_ADDR
// hc_noskilllimit := true ;
31708: LD_ADDR_OWVAR 76
31712: PUSH
31713: LD_INT 1
31715: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31716: LD_ADDR_OWVAR 31
31720: PUSH
31721: LD_INT 30
31723: PUSH
31724: LD_INT 30
31726: PUSH
31727: LD_INT 30
31729: PUSH
31730: LD_INT 30
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: ST_TO_ADDR
// un := CreateHuman ;
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: CALL_OW 44
31748: ST_TO_ADDR
// hc_noskilllimit := false ;
31749: LD_ADDR_OWVAR 76
31753: PUSH
31754: LD_INT 0
31756: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31757: LD_VAR 0 3
31761: PPUSH
31762: LD_INT 1
31764: PPUSH
31765: CALL_OW 51
// ToLua ( playRanger() ) ;
31769: LD_STRING playRanger()
31771: PPUSH
31772: CALL_OW 559
// p := 0 ;
31776: LD_ADDR_VAR 0 2
31780: PUSH
31781: LD_INT 0
31783: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31784: LD_INT 35
31786: PPUSH
31787: CALL_OW 67
// p := p + 1 ;
31791: LD_ADDR_VAR 0 2
31795: PUSH
31796: LD_VAR 0 2
31800: PUSH
31801: LD_INT 1
31803: PLUS
31804: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31805: LD_VAR 0 3
31809: PPUSH
31810: CALL_OW 256
31814: PUSH
31815: LD_INT 1000
31817: LESS
31818: IFFALSE 31832
// SetLives ( un , 1000 ) ;
31820: LD_VAR 0 3
31824: PPUSH
31825: LD_INT 1000
31827: PPUSH
31828: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31832: LD_VAR 0 3
31836: PPUSH
31837: LD_INT 81
31839: PUSH
31840: LD_OWVAR 2
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 91
31851: PUSH
31852: LD_VAR 0 3
31856: PUSH
31857: LD_INT 30
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PPUSH
31869: CALL_OW 69
31873: PPUSH
31874: LD_VAR 0 3
31878: PPUSH
31879: CALL_OW 74
31883: PPUSH
31884: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31888: LD_VAR 0 2
31892: PUSH
31893: LD_INT 80
31895: GREATER
31896: PUSH
31897: LD_VAR 0 3
31901: PPUSH
31902: CALL_OW 301
31906: OR
31907: IFFALSE 31784
// if un then
31909: LD_VAR 0 3
31913: IFFALSE 31924
// RemoveUnit ( un ) ;
31915: LD_VAR 0 3
31919: PPUSH
31920: CALL_OW 64
// end ;
31924: PPOPN 3
31926: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31927: LD_EXP 105
31931: IFFALSE 32047
31933: GO 31935
31935: DISABLE
31936: LD_INT 0
31938: PPUSH
31939: PPUSH
31940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31941: LD_ADDR_VAR 0 2
31945: PUSH
31946: LD_INT 81
31948: PUSH
31949: LD_OWVAR 2
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 21
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 69
31976: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31977: LD_STRING playComputer()
31979: PPUSH
31980: CALL_OW 559
// if not tmp then
31984: LD_VAR 0 2
31988: NOT
31989: IFFALSE 31993
// exit ;
31991: GO 32047
// for i in tmp do
31993: LD_ADDR_VAR 0 1
31997: PUSH
31998: LD_VAR 0 2
32002: PUSH
32003: FOR_IN
32004: IFFALSE 32045
// for j := 1 to 4 do
32006: LD_ADDR_VAR 0 3
32010: PUSH
32011: DOUBLE
32012: LD_INT 1
32014: DEC
32015: ST_TO_ADDR
32016: LD_INT 4
32018: PUSH
32019: FOR_TO
32020: IFFALSE 32041
// SetSkill ( i , j , 10 ) ;
32022: LD_VAR 0 1
32026: PPUSH
32027: LD_VAR 0 3
32031: PPUSH
32032: LD_INT 10
32034: PPUSH
32035: CALL_OW 237
32039: GO 32019
32041: POP
32042: POP
32043: GO 32003
32045: POP
32046: POP
// end ;
32047: PPOPN 3
32049: END
// every 0 0$1 trigger s30 do var i , tmp ;
32050: LD_EXP 106
32054: IFFALSE 32123
32056: GO 32058
32058: DISABLE
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32063: LD_ADDR_VAR 0 2
32067: PUSH
32068: LD_INT 22
32070: PUSH
32071: LD_OWVAR 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PPUSH
32080: CALL_OW 69
32084: ST_TO_ADDR
// if not tmp then
32085: LD_VAR 0 2
32089: NOT
32090: IFFALSE 32094
// exit ;
32092: GO 32123
// for i in tmp do
32094: LD_ADDR_VAR 0 1
32098: PUSH
32099: LD_VAR 0 2
32103: PUSH
32104: FOR_IN
32105: IFFALSE 32121
// SetLives ( i , 300 ) ;
32107: LD_VAR 0 1
32111: PPUSH
32112: LD_INT 300
32114: PPUSH
32115: CALL_OW 234
32119: GO 32104
32121: POP
32122: POP
// end ;
32123: PPOPN 2
32125: END
// every 0 0$1 trigger s60 do var i , tmp ;
32126: LD_EXP 107
32130: IFFALSE 32199
32132: GO 32134
32134: DISABLE
32135: LD_INT 0
32137: PPUSH
32138: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32139: LD_ADDR_VAR 0 2
32143: PUSH
32144: LD_INT 22
32146: PUSH
32147: LD_OWVAR 2
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PPUSH
32156: CALL_OW 69
32160: ST_TO_ADDR
// if not tmp then
32161: LD_VAR 0 2
32165: NOT
32166: IFFALSE 32170
// exit ;
32168: GO 32199
// for i in tmp do
32170: LD_ADDR_VAR 0 1
32174: PUSH
32175: LD_VAR 0 2
32179: PUSH
32180: FOR_IN
32181: IFFALSE 32197
// SetLives ( i , 600 ) ;
32183: LD_VAR 0 1
32187: PPUSH
32188: LD_INT 600
32190: PPUSH
32191: CALL_OW 234
32195: GO 32180
32197: POP
32198: POP
// end ;
32199: PPOPN 2
32201: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32202: LD_INT 0
32204: PPUSH
// case cmd of 301 :
32205: LD_VAR 0 1
32209: PUSH
32210: LD_INT 301
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32250
32218: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32219: LD_VAR 0 6
32223: PPUSH
32224: LD_VAR 0 7
32228: PPUSH
32229: LD_VAR 0 8
32233: PPUSH
32234: LD_VAR 0 4
32238: PPUSH
32239: LD_VAR 0 5
32243: PPUSH
32244: CALL 33451 0 5
32248: GO 32371
32250: LD_INT 302
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 32295
32258: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32259: LD_VAR 0 6
32263: PPUSH
32264: LD_VAR 0 7
32268: PPUSH
32269: LD_VAR 0 8
32273: PPUSH
32274: LD_VAR 0 9
32278: PPUSH
32279: LD_VAR 0 4
32283: PPUSH
32284: LD_VAR 0 5
32288: PPUSH
32289: CALL 33542 0 6
32293: GO 32371
32295: LD_INT 303
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32340
32303: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32304: LD_VAR 0 6
32308: PPUSH
32309: LD_VAR 0 7
32313: PPUSH
32314: LD_VAR 0 8
32318: PPUSH
32319: LD_VAR 0 9
32323: PPUSH
32324: LD_VAR 0 4
32328: PPUSH
32329: LD_VAR 0 5
32333: PPUSH
32334: CALL 32376 0 6
32338: GO 32371
32340: LD_INT 304
32342: DOUBLE
32343: EQUAL
32344: IFTRUE 32348
32346: GO 32370
32348: POP
// hHackTeleport ( unit , x , y ) ; end ;
32349: LD_VAR 0 2
32353: PPUSH
32354: LD_VAR 0 4
32358: PPUSH
32359: LD_VAR 0 5
32363: PPUSH
32364: CALL 34135 0 3
32368: GO 32371
32370: POP
// end ;
32371: LD_VAR 0 12
32375: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32376: LD_INT 0
32378: PPUSH
32379: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32380: LD_VAR 0 1
32384: PUSH
32385: LD_INT 1
32387: LESS
32388: PUSH
32389: LD_VAR 0 1
32393: PUSH
32394: LD_INT 3
32396: GREATER
32397: OR
32398: PUSH
32399: LD_VAR 0 5
32403: PPUSH
32404: LD_VAR 0 6
32408: PPUSH
32409: CALL_OW 428
32413: OR
32414: IFFALSE 32418
// exit ;
32416: GO 33138
// uc_side := your_side ;
32418: LD_ADDR_OWVAR 20
32422: PUSH
32423: LD_OWVAR 2
32427: ST_TO_ADDR
// uc_nation := nation ;
32428: LD_ADDR_OWVAR 21
32432: PUSH
32433: LD_VAR 0 1
32437: ST_TO_ADDR
// bc_level = 1 ;
32438: LD_ADDR_OWVAR 43
32442: PUSH
32443: LD_INT 1
32445: ST_TO_ADDR
// case btype of 1 :
32446: LD_VAR 0 2
32450: PUSH
32451: LD_INT 1
32453: DOUBLE
32454: EQUAL
32455: IFTRUE 32459
32457: GO 32470
32459: POP
// bc_type := b_depot ; 2 :
32460: LD_ADDR_OWVAR 42
32464: PUSH
32465: LD_INT 0
32467: ST_TO_ADDR
32468: GO 33082
32470: LD_INT 2
32472: DOUBLE
32473: EQUAL
32474: IFTRUE 32478
32476: GO 32489
32478: POP
// bc_type := b_warehouse ; 3 :
32479: LD_ADDR_OWVAR 42
32483: PUSH
32484: LD_INT 1
32486: ST_TO_ADDR
32487: GO 33082
32489: LD_INT 3
32491: DOUBLE
32492: EQUAL
32493: IFTRUE 32497
32495: GO 32508
32497: POP
// bc_type := b_lab ; 4 .. 9 :
32498: LD_ADDR_OWVAR 42
32502: PUSH
32503: LD_INT 6
32505: ST_TO_ADDR
32506: GO 33082
32508: LD_INT 4
32510: DOUBLE
32511: GREATEREQUAL
32512: IFFALSE 32520
32514: LD_INT 9
32516: DOUBLE
32517: LESSEQUAL
32518: IFTRUE 32522
32520: GO 32574
32522: POP
// begin bc_type := b_lab_half ;
32523: LD_ADDR_OWVAR 42
32527: PUSH
32528: LD_INT 7
32530: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32531: LD_ADDR_OWVAR 44
32535: PUSH
32536: LD_INT 10
32538: PUSH
32539: LD_INT 11
32541: PUSH
32542: LD_INT 12
32544: PUSH
32545: LD_INT 15
32547: PUSH
32548: LD_INT 14
32550: PUSH
32551: LD_INT 13
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: PUSH
32562: LD_VAR 0 2
32566: PUSH
32567: LD_INT 3
32569: MINUS
32570: ARRAY
32571: ST_TO_ADDR
// end ; 10 .. 13 :
32572: GO 33082
32574: LD_INT 10
32576: DOUBLE
32577: GREATEREQUAL
32578: IFFALSE 32586
32580: LD_INT 13
32582: DOUBLE
32583: LESSEQUAL
32584: IFTRUE 32588
32586: GO 32665
32588: POP
// begin bc_type := b_lab_full ;
32589: LD_ADDR_OWVAR 42
32593: PUSH
32594: LD_INT 8
32596: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32597: LD_ADDR_OWVAR 44
32601: PUSH
32602: LD_INT 10
32604: PUSH
32605: LD_INT 12
32607: PUSH
32608: LD_INT 14
32610: PUSH
32611: LD_INT 13
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: PUSH
32620: LD_VAR 0 2
32624: PUSH
32625: LD_INT 9
32627: MINUS
32628: ARRAY
32629: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32630: LD_ADDR_OWVAR 45
32634: PUSH
32635: LD_INT 11
32637: PUSH
32638: LD_INT 15
32640: PUSH
32641: LD_INT 12
32643: PUSH
32644: LD_INT 15
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: PUSH
32653: LD_VAR 0 2
32657: PUSH
32658: LD_INT 9
32660: MINUS
32661: ARRAY
32662: ST_TO_ADDR
// end ; 14 :
32663: GO 33082
32665: LD_INT 14
32667: DOUBLE
32668: EQUAL
32669: IFTRUE 32673
32671: GO 32684
32673: POP
// bc_type := b_workshop ; 15 :
32674: LD_ADDR_OWVAR 42
32678: PUSH
32679: LD_INT 2
32681: ST_TO_ADDR
32682: GO 33082
32684: LD_INT 15
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32703
32692: POP
// bc_type := b_factory ; 16 :
32693: LD_ADDR_OWVAR 42
32697: PUSH
32698: LD_INT 3
32700: ST_TO_ADDR
32701: GO 33082
32703: LD_INT 16
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32711
32709: GO 32722
32711: POP
// bc_type := b_ext_gun ; 17 :
32712: LD_ADDR_OWVAR 42
32716: PUSH
32717: LD_INT 17
32719: ST_TO_ADDR
32720: GO 33082
32722: LD_INT 17
32724: DOUBLE
32725: EQUAL
32726: IFTRUE 32730
32728: GO 32758
32730: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32731: LD_ADDR_OWVAR 42
32735: PUSH
32736: LD_INT 19
32738: PUSH
32739: LD_INT 23
32741: PUSH
32742: LD_INT 19
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: PUSH
32750: LD_VAR 0 1
32754: ARRAY
32755: ST_TO_ADDR
32756: GO 33082
32758: LD_INT 18
32760: DOUBLE
32761: EQUAL
32762: IFTRUE 32766
32764: GO 32777
32766: POP
// bc_type := b_ext_radar ; 19 :
32767: LD_ADDR_OWVAR 42
32771: PUSH
32772: LD_INT 20
32774: ST_TO_ADDR
32775: GO 33082
32777: LD_INT 19
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32785
32783: GO 32796
32785: POP
// bc_type := b_ext_radio ; 20 :
32786: LD_ADDR_OWVAR 42
32790: PUSH
32791: LD_INT 22
32793: ST_TO_ADDR
32794: GO 33082
32796: LD_INT 20
32798: DOUBLE
32799: EQUAL
32800: IFTRUE 32804
32802: GO 32815
32804: POP
// bc_type := b_ext_siberium ; 21 :
32805: LD_ADDR_OWVAR 42
32809: PUSH
32810: LD_INT 21
32812: ST_TO_ADDR
32813: GO 33082
32815: LD_INT 21
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 32834
32823: POP
// bc_type := b_ext_computer ; 22 :
32824: LD_ADDR_OWVAR 42
32828: PUSH
32829: LD_INT 24
32831: ST_TO_ADDR
32832: GO 33082
32834: LD_INT 22
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32842
32840: GO 32853
32842: POP
// bc_type := b_ext_track ; 23 :
32843: LD_ADDR_OWVAR 42
32847: PUSH
32848: LD_INT 16
32850: ST_TO_ADDR
32851: GO 33082
32853: LD_INT 23
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32861
32859: GO 32872
32861: POP
// bc_type := b_ext_laser ; 24 :
32862: LD_ADDR_OWVAR 42
32866: PUSH
32867: LD_INT 25
32869: ST_TO_ADDR
32870: GO 33082
32872: LD_INT 24
32874: DOUBLE
32875: EQUAL
32876: IFTRUE 32880
32878: GO 32891
32880: POP
// bc_type := b_control_tower ; 25 :
32881: LD_ADDR_OWVAR 42
32885: PUSH
32886: LD_INT 36
32888: ST_TO_ADDR
32889: GO 33082
32891: LD_INT 25
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 32910
32899: POP
// bc_type := b_breastwork ; 26 :
32900: LD_ADDR_OWVAR 42
32904: PUSH
32905: LD_INT 31
32907: ST_TO_ADDR
32908: GO 33082
32910: LD_INT 26
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32929
32918: POP
// bc_type := b_bunker ; 27 :
32919: LD_ADDR_OWVAR 42
32923: PUSH
32924: LD_INT 32
32926: ST_TO_ADDR
32927: GO 33082
32929: LD_INT 27
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32937
32935: GO 32948
32937: POP
// bc_type := b_turret ; 28 :
32938: LD_ADDR_OWVAR 42
32942: PUSH
32943: LD_INT 33
32945: ST_TO_ADDR
32946: GO 33082
32948: LD_INT 28
32950: DOUBLE
32951: EQUAL
32952: IFTRUE 32956
32954: GO 32967
32956: POP
// bc_type := b_armoury ; 29 :
32957: LD_ADDR_OWVAR 42
32961: PUSH
32962: LD_INT 4
32964: ST_TO_ADDR
32965: GO 33082
32967: LD_INT 29
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 32986
32975: POP
// bc_type := b_barracks ; 30 :
32976: LD_ADDR_OWVAR 42
32980: PUSH
32981: LD_INT 5
32983: ST_TO_ADDR
32984: GO 33082
32986: LD_INT 30
32988: DOUBLE
32989: EQUAL
32990: IFTRUE 32994
32992: GO 33005
32994: POP
// bc_type := b_solar_power ; 31 :
32995: LD_ADDR_OWVAR 42
32999: PUSH
33000: LD_INT 27
33002: ST_TO_ADDR
33003: GO 33082
33005: LD_INT 31
33007: DOUBLE
33008: EQUAL
33009: IFTRUE 33013
33011: GO 33024
33013: POP
// bc_type := b_oil_power ; 32 :
33014: LD_ADDR_OWVAR 42
33018: PUSH
33019: LD_INT 26
33021: ST_TO_ADDR
33022: GO 33082
33024: LD_INT 32
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33043
33032: POP
// bc_type := b_siberite_power ; 33 :
33033: LD_ADDR_OWVAR 42
33037: PUSH
33038: LD_INT 28
33040: ST_TO_ADDR
33041: GO 33082
33043: LD_INT 33
33045: DOUBLE
33046: EQUAL
33047: IFTRUE 33051
33049: GO 33062
33051: POP
// bc_type := b_oil_mine ; 34 :
33052: LD_ADDR_OWVAR 42
33056: PUSH
33057: LD_INT 29
33059: ST_TO_ADDR
33060: GO 33082
33062: LD_INT 34
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33081
33070: POP
// bc_type := b_siberite_mine ; end ;
33071: LD_ADDR_OWVAR 42
33075: PUSH
33076: LD_INT 30
33078: ST_TO_ADDR
33079: GO 33082
33081: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33082: LD_ADDR_VAR 0 8
33086: PUSH
33087: LD_VAR 0 5
33091: PPUSH
33092: LD_VAR 0 6
33096: PPUSH
33097: LD_VAR 0 3
33101: PPUSH
33102: CALL_OW 47
33106: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33107: LD_OWVAR 42
33111: PUSH
33112: LD_INT 32
33114: PUSH
33115: LD_INT 33
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: IN
33122: IFFALSE 33138
// PlaceWeaponTurret ( b , weapon ) ;
33124: LD_VAR 0 8
33128: PPUSH
33129: LD_VAR 0 4
33133: PPUSH
33134: CALL_OW 431
// end ;
33138: LD_VAR 0 7
33142: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33149: LD_ADDR_VAR 0 4
33153: PUSH
33154: LD_INT 22
33156: PUSH
33157: LD_OWVAR 2
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 30
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 30
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PPUSH
33198: CALL_OW 69
33202: ST_TO_ADDR
// if not tmp then
33203: LD_VAR 0 4
33207: NOT
33208: IFFALSE 33212
// exit ;
33210: GO 33271
// for i in tmp do
33212: LD_ADDR_VAR 0 2
33216: PUSH
33217: LD_VAR 0 4
33221: PUSH
33222: FOR_IN
33223: IFFALSE 33269
// for j = 1 to 3 do
33225: LD_ADDR_VAR 0 3
33229: PUSH
33230: DOUBLE
33231: LD_INT 1
33233: DEC
33234: ST_TO_ADDR
33235: LD_INT 3
33237: PUSH
33238: FOR_TO
33239: IFFALSE 33265
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33241: LD_VAR 0 2
33245: PPUSH
33246: CALL_OW 274
33250: PPUSH
33251: LD_VAR 0 3
33255: PPUSH
33256: LD_INT 99999
33258: PPUSH
33259: CALL_OW 277
33263: GO 33238
33265: POP
33266: POP
33267: GO 33222
33269: POP
33270: POP
// end ;
33271: LD_VAR 0 1
33275: RET
// export function hHackSetLevel10 ; var i , j ; begin
33276: LD_INT 0
33278: PPUSH
33279: PPUSH
33280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33281: LD_ADDR_VAR 0 2
33285: PUSH
33286: LD_INT 21
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PPUSH
33296: CALL_OW 69
33300: PUSH
33301: FOR_IN
33302: IFFALSE 33354
// if IsSelected ( i ) then
33304: LD_VAR 0 2
33308: PPUSH
33309: CALL_OW 306
33313: IFFALSE 33352
// begin for j := 1 to 4 do
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: DOUBLE
33321: LD_INT 1
33323: DEC
33324: ST_TO_ADDR
33325: LD_INT 4
33327: PUSH
33328: FOR_TO
33329: IFFALSE 33350
// SetSkill ( i , j , 10 ) ;
33331: LD_VAR 0 2
33335: PPUSH
33336: LD_VAR 0 3
33340: PPUSH
33341: LD_INT 10
33343: PPUSH
33344: CALL_OW 237
33348: GO 33328
33350: POP
33351: POP
// end ;
33352: GO 33301
33354: POP
33355: POP
// end ;
33356: LD_VAR 0 1
33360: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33361: LD_INT 0
33363: PPUSH
33364: PPUSH
33365: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33366: LD_ADDR_VAR 0 2
33370: PUSH
33371: LD_INT 22
33373: PUSH
33374: LD_OWVAR 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 21
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PPUSH
33397: CALL_OW 69
33401: PUSH
33402: FOR_IN
33403: IFFALSE 33444
// begin for j := 1 to 4 do
33405: LD_ADDR_VAR 0 3
33409: PUSH
33410: DOUBLE
33411: LD_INT 1
33413: DEC
33414: ST_TO_ADDR
33415: LD_INT 4
33417: PUSH
33418: FOR_TO
33419: IFFALSE 33440
// SetSkill ( i , j , 10 ) ;
33421: LD_VAR 0 2
33425: PPUSH
33426: LD_VAR 0 3
33430: PPUSH
33431: LD_INT 10
33433: PPUSH
33434: CALL_OW 237
33438: GO 33418
33440: POP
33441: POP
// end ;
33442: GO 33402
33444: POP
33445: POP
// end ;
33446: LD_VAR 0 1
33450: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33451: LD_INT 0
33453: PPUSH
// uc_side := your_side ;
33454: LD_ADDR_OWVAR 20
33458: PUSH
33459: LD_OWVAR 2
33463: ST_TO_ADDR
// uc_nation := nation ;
33464: LD_ADDR_OWVAR 21
33468: PUSH
33469: LD_VAR 0 1
33473: ST_TO_ADDR
// InitHc ;
33474: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33478: LD_INT 0
33480: PPUSH
33481: LD_VAR 0 2
33485: PPUSH
33486: LD_VAR 0 3
33490: PPUSH
33491: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33495: LD_VAR 0 4
33499: PPUSH
33500: LD_VAR 0 5
33504: PPUSH
33505: CALL_OW 428
33509: PUSH
33510: LD_INT 0
33512: EQUAL
33513: IFFALSE 33537
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33515: CALL_OW 44
33519: PPUSH
33520: LD_VAR 0 4
33524: PPUSH
33525: LD_VAR 0 5
33529: PPUSH
33530: LD_INT 1
33532: PPUSH
33533: CALL_OW 48
// end ;
33537: LD_VAR 0 6
33541: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33542: LD_INT 0
33544: PPUSH
33545: PPUSH
// uc_side := your_side ;
33546: LD_ADDR_OWVAR 20
33550: PUSH
33551: LD_OWVAR 2
33555: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33556: LD_VAR 0 1
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 3
33569: PUSH
33570: LD_INT 4
33572: PUSH
33573: LD_INT 5
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: IN
33583: IFFALSE 33595
// uc_nation := nation_american else
33585: LD_ADDR_OWVAR 21
33589: PUSH
33590: LD_INT 1
33592: ST_TO_ADDR
33593: GO 33638
// if chassis in [ 11 , 12 , 13 , 14 ] then
33595: LD_VAR 0 1
33599: PUSH
33600: LD_INT 11
33602: PUSH
33603: LD_INT 12
33605: PUSH
33606: LD_INT 13
33608: PUSH
33609: LD_INT 14
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: IN
33618: IFFALSE 33630
// uc_nation := nation_arabian else
33620: LD_ADDR_OWVAR 21
33624: PUSH
33625: LD_INT 2
33627: ST_TO_ADDR
33628: GO 33638
// uc_nation := nation_russian ;
33630: LD_ADDR_OWVAR 21
33634: PUSH
33635: LD_INT 3
33637: ST_TO_ADDR
// vc_chassis := chassis ;
33638: LD_ADDR_OWVAR 37
33642: PUSH
33643: LD_VAR 0 1
33647: ST_TO_ADDR
// vc_engine := engine ;
33648: LD_ADDR_OWVAR 39
33652: PUSH
33653: LD_VAR 0 2
33657: ST_TO_ADDR
// vc_control := control ;
33658: LD_ADDR_OWVAR 38
33662: PUSH
33663: LD_VAR 0 3
33667: ST_TO_ADDR
// vc_weapon := weapon ;
33668: LD_ADDR_OWVAR 40
33672: PUSH
33673: LD_VAR 0 4
33677: ST_TO_ADDR
// un := CreateVehicle ;
33678: LD_ADDR_VAR 0 8
33682: PUSH
33683: CALL_OW 45
33687: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33688: LD_VAR 0 8
33692: PPUSH
33693: LD_INT 0
33695: PPUSH
33696: LD_INT 5
33698: PPUSH
33699: CALL_OW 12
33703: PPUSH
33704: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33708: LD_VAR 0 8
33712: PPUSH
33713: LD_VAR 0 5
33717: PPUSH
33718: LD_VAR 0 6
33722: PPUSH
33723: LD_INT 1
33725: PPUSH
33726: CALL_OW 48
// end ;
33730: LD_VAR 0 7
33734: RET
// export hInvincible ; every 1 do
33735: GO 33737
33737: DISABLE
// hInvincible := [ ] ;
33738: LD_ADDR_EXP 108
33742: PUSH
33743: EMPTY
33744: ST_TO_ADDR
33745: END
// every 10 do var i ;
33746: GO 33748
33748: DISABLE
33749: LD_INT 0
33751: PPUSH
// begin enable ;
33752: ENABLE
// if not hInvincible then
33753: LD_EXP 108
33757: NOT
33758: IFFALSE 33762
// exit ;
33760: GO 33806
// for i in hInvincible do
33762: LD_ADDR_VAR 0 1
33766: PUSH
33767: LD_EXP 108
33771: PUSH
33772: FOR_IN
33773: IFFALSE 33804
// if GetLives ( i ) < 1000 then
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 256
33784: PUSH
33785: LD_INT 1000
33787: LESS
33788: IFFALSE 33802
// SetLives ( i , 1000 ) ;
33790: LD_VAR 0 1
33794: PPUSH
33795: LD_INT 1000
33797: PPUSH
33798: CALL_OW 234
33802: GO 33772
33804: POP
33805: POP
// end ;
33806: PPOPN 1
33808: END
// export function hHackInvincible ; var i ; begin
33809: LD_INT 0
33811: PPUSH
33812: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33813: LD_ADDR_VAR 0 2
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: LD_INT 21
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 21
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: PPUSH
33846: CALL_OW 69
33850: PUSH
33851: FOR_IN
33852: IFFALSE 33913
// if IsSelected ( i ) then
33854: LD_VAR 0 2
33858: PPUSH
33859: CALL_OW 306
33863: IFFALSE 33911
// begin if i in hInvincible then
33865: LD_VAR 0 2
33869: PUSH
33870: LD_EXP 108
33874: IN
33875: IFFALSE 33895
// hInvincible := hInvincible diff i else
33877: LD_ADDR_EXP 108
33881: PUSH
33882: LD_EXP 108
33886: PUSH
33887: LD_VAR 0 2
33891: DIFF
33892: ST_TO_ADDR
33893: GO 33911
// hInvincible := hInvincible union i ;
33895: LD_ADDR_EXP 108
33899: PUSH
33900: LD_EXP 108
33904: PUSH
33905: LD_VAR 0 2
33909: UNION
33910: ST_TO_ADDR
// end ;
33911: GO 33851
33913: POP
33914: POP
// end ;
33915: LD_VAR 0 1
33919: RET
// export function hHackInvisible ; var i , j ; begin
33920: LD_INT 0
33922: PPUSH
33923: PPUSH
33924: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33925: LD_ADDR_VAR 0 2
33929: PUSH
33930: LD_INT 21
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PPUSH
33940: CALL_OW 69
33944: PUSH
33945: FOR_IN
33946: IFFALSE 33970
// if IsSelected ( i ) then
33948: LD_VAR 0 2
33952: PPUSH
33953: CALL_OW 306
33957: IFFALSE 33968
// ComForceInvisible ( i ) ;
33959: LD_VAR 0 2
33963: PPUSH
33964: CALL_OW 496
33968: GO 33945
33970: POP
33971: POP
// end ;
33972: LD_VAR 0 1
33976: RET
// export function hHackChangeYourSide ; begin
33977: LD_INT 0
33979: PPUSH
// if your_side = 8 then
33980: LD_OWVAR 2
33984: PUSH
33985: LD_INT 8
33987: EQUAL
33988: IFFALSE 34000
// your_side := 0 else
33990: LD_ADDR_OWVAR 2
33994: PUSH
33995: LD_INT 0
33997: ST_TO_ADDR
33998: GO 34014
// your_side := your_side + 1 ;
34000: LD_ADDR_OWVAR 2
34004: PUSH
34005: LD_OWVAR 2
34009: PUSH
34010: LD_INT 1
34012: PLUS
34013: ST_TO_ADDR
// end ;
34014: LD_VAR 0 1
34018: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34019: LD_INT 0
34021: PPUSH
34022: PPUSH
34023: PPUSH
// for i in all_units do
34024: LD_ADDR_VAR 0 2
34028: PUSH
34029: LD_OWVAR 3
34033: PUSH
34034: FOR_IN
34035: IFFALSE 34113
// if IsSelected ( i ) then
34037: LD_VAR 0 2
34041: PPUSH
34042: CALL_OW 306
34046: IFFALSE 34111
// begin j := GetSide ( i ) ;
34048: LD_ADDR_VAR 0 3
34052: PUSH
34053: LD_VAR 0 2
34057: PPUSH
34058: CALL_OW 255
34062: ST_TO_ADDR
// if j = 8 then
34063: LD_VAR 0 3
34067: PUSH
34068: LD_INT 8
34070: EQUAL
34071: IFFALSE 34083
// j := 0 else
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 0
34080: ST_TO_ADDR
34081: GO 34097
// j := j + 1 ;
34083: LD_ADDR_VAR 0 3
34087: PUSH
34088: LD_VAR 0 3
34092: PUSH
34093: LD_INT 1
34095: PLUS
34096: ST_TO_ADDR
// SetSide ( i , j ) ;
34097: LD_VAR 0 2
34101: PPUSH
34102: LD_VAR 0 3
34106: PPUSH
34107: CALL_OW 235
// end ;
34111: GO 34034
34113: POP
34114: POP
// end ;
34115: LD_VAR 0 1
34119: RET
// export function hHackFog ; begin
34120: LD_INT 0
34122: PPUSH
// FogOff ( true ) ;
34123: LD_INT 1
34125: PPUSH
34126: CALL_OW 344
// end ;
34130: LD_VAR 0 1
34134: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34135: LD_INT 0
34137: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34138: LD_VAR 0 1
34142: PPUSH
34143: LD_VAR 0 2
34147: PPUSH
34148: LD_VAR 0 3
34152: PPUSH
34153: LD_INT 1
34155: PPUSH
34156: LD_INT 1
34158: PPUSH
34159: CALL_OW 483
// CenterOnXY ( x , y ) ;
34163: LD_VAR 0 2
34167: PPUSH
34168: LD_VAR 0 3
34172: PPUSH
34173: CALL_OW 84
// end ;
34177: LD_VAR 0 4
34181: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34182: LD_INT 0
34184: PPUSH
34185: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34186: LD_VAR 0 1
34190: NOT
34191: PUSH
34192: LD_VAR 0 2
34196: PPUSH
34197: LD_VAR 0 3
34201: PPUSH
34202: CALL_OW 488
34206: NOT
34207: OR
34208: PUSH
34209: LD_VAR 0 1
34213: PPUSH
34214: CALL_OW 266
34218: PUSH
34219: LD_INT 3
34221: NONEQUAL
34222: PUSH
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 247
34232: PUSH
34233: LD_INT 1
34235: EQUAL
34236: NOT
34237: AND
34238: OR
34239: IFFALSE 34243
// exit ;
34241: GO 34392
// if GetType ( factory ) = unit_human then
34243: LD_VAR 0 1
34247: PPUSH
34248: CALL_OW 247
34252: PUSH
34253: LD_INT 1
34255: EQUAL
34256: IFFALSE 34273
// factory := IsInUnit ( factory ) ;
34258: LD_ADDR_VAR 0 1
34262: PUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 310
34272: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34273: LD_VAR 0 1
34277: PPUSH
34278: CALL_OW 266
34282: PUSH
34283: LD_INT 3
34285: NONEQUAL
34286: IFFALSE 34290
// exit ;
34288: GO 34392
// if HexInfo ( x , y ) = factory then
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: CALL_OW 428
34304: PUSH
34305: LD_VAR 0 1
34309: EQUAL
34310: IFFALSE 34337
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34312: LD_ADDR_EXP 109
34316: PUSH
34317: LD_EXP 109
34321: PPUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: LD_INT 0
34329: PPUSH
34330: CALL_OW 1
34334: ST_TO_ADDR
34335: GO 34388
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34337: LD_ADDR_EXP 109
34341: PUSH
34342: LD_EXP 109
34346: PPUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 255
34361: PUSH
34362: LD_VAR 0 1
34366: PUSH
34367: LD_VAR 0 2
34371: PUSH
34372: LD_VAR 0 3
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: PPUSH
34383: CALL_OW 1
34387: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34388: CALL 34397 0 0
// end ;
34392: LD_VAR 0 4
34396: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34397: LD_INT 0
34399: PPUSH
34400: PPUSH
34401: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34402: LD_STRING resetFactoryWaypoint();
34404: PPUSH
34405: CALL_OW 559
// if factoryWaypoints then
34409: LD_EXP 109
34413: IFFALSE 34539
// begin list := PrepareArray ( factoryWaypoints ) ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_EXP 109
34424: PPUSH
34425: CALL 80832 0 1
34429: ST_TO_ADDR
// for i := 1 to list do
34430: LD_ADDR_VAR 0 2
34434: PUSH
34435: DOUBLE
34436: LD_INT 1
34438: DEC
34439: ST_TO_ADDR
34440: LD_VAR 0 3
34444: PUSH
34445: FOR_TO
34446: IFFALSE 34537
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34448: LD_STRING setFactoryWaypointXY(
34450: PUSH
34451: LD_VAR 0 3
34455: PUSH
34456: LD_VAR 0 2
34460: ARRAY
34461: PUSH
34462: LD_INT 1
34464: ARRAY
34465: STR
34466: PUSH
34467: LD_STRING ,
34469: STR
34470: PUSH
34471: LD_VAR 0 3
34475: PUSH
34476: LD_VAR 0 2
34480: ARRAY
34481: PUSH
34482: LD_INT 2
34484: ARRAY
34485: STR
34486: PUSH
34487: LD_STRING ,
34489: STR
34490: PUSH
34491: LD_VAR 0 3
34495: PUSH
34496: LD_VAR 0 2
34500: ARRAY
34501: PUSH
34502: LD_INT 3
34504: ARRAY
34505: STR
34506: PUSH
34507: LD_STRING ,
34509: STR
34510: PUSH
34511: LD_VAR 0 3
34515: PUSH
34516: LD_VAR 0 2
34520: ARRAY
34521: PUSH
34522: LD_INT 4
34524: ARRAY
34525: STR
34526: PUSH
34527: LD_STRING )
34529: STR
34530: PPUSH
34531: CALL_OW 559
34535: GO 34445
34537: POP
34538: POP
// end ; end ;
34539: LD_VAR 0 1
34543: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34544: LD_INT 0
34546: PPUSH
// if HexInfo ( x , y ) = warehouse then
34547: LD_VAR 0 2
34551: PPUSH
34552: LD_VAR 0 3
34556: PPUSH
34557: CALL_OW 428
34561: PUSH
34562: LD_VAR 0 1
34566: EQUAL
34567: IFFALSE 34594
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34569: LD_ADDR_EXP 110
34573: PUSH
34574: LD_EXP 110
34578: PPUSH
34579: LD_VAR 0 1
34583: PPUSH
34584: LD_INT 0
34586: PPUSH
34587: CALL_OW 1
34591: ST_TO_ADDR
34592: GO 34645
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34594: LD_ADDR_EXP 110
34598: PUSH
34599: LD_EXP 110
34603: PPUSH
34604: LD_VAR 0 1
34608: PPUSH
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 255
34618: PUSH
34619: LD_VAR 0 1
34623: PUSH
34624: LD_VAR 0 2
34628: PUSH
34629: LD_VAR 0 3
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: PPUSH
34640: CALL_OW 1
34644: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34645: CALL 34654 0 0
// end ;
34649: LD_VAR 0 4
34653: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34654: LD_INT 0
34656: PPUSH
34657: PPUSH
34658: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34659: LD_STRING resetWarehouseGatheringPoints();
34661: PPUSH
34662: CALL_OW 559
// if warehouseGatheringPoints then
34666: LD_EXP 110
34670: IFFALSE 34796
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34672: LD_ADDR_VAR 0 3
34676: PUSH
34677: LD_EXP 110
34681: PPUSH
34682: CALL 80832 0 1
34686: ST_TO_ADDR
// for i := 1 to list do
34687: LD_ADDR_VAR 0 2
34691: PUSH
34692: DOUBLE
34693: LD_INT 1
34695: DEC
34696: ST_TO_ADDR
34697: LD_VAR 0 3
34701: PUSH
34702: FOR_TO
34703: IFFALSE 34794
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34705: LD_STRING setWarehouseGatheringPointXY(
34707: PUSH
34708: LD_VAR 0 3
34712: PUSH
34713: LD_VAR 0 2
34717: ARRAY
34718: PUSH
34719: LD_INT 1
34721: ARRAY
34722: STR
34723: PUSH
34724: LD_STRING ,
34726: STR
34727: PUSH
34728: LD_VAR 0 3
34732: PUSH
34733: LD_VAR 0 2
34737: ARRAY
34738: PUSH
34739: LD_INT 2
34741: ARRAY
34742: STR
34743: PUSH
34744: LD_STRING ,
34746: STR
34747: PUSH
34748: LD_VAR 0 3
34752: PUSH
34753: LD_VAR 0 2
34757: ARRAY
34758: PUSH
34759: LD_INT 3
34761: ARRAY
34762: STR
34763: PUSH
34764: LD_STRING ,
34766: STR
34767: PUSH
34768: LD_VAR 0 3
34772: PUSH
34773: LD_VAR 0 2
34777: ARRAY
34778: PUSH
34779: LD_INT 4
34781: ARRAY
34782: STR
34783: PUSH
34784: LD_STRING )
34786: STR
34787: PPUSH
34788: CALL_OW 559
34792: GO 34702
34794: POP
34795: POP
// end ; end ;
34796: LD_VAR 0 1
34800: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34801: LD_EXP 110
34805: IFFALSE 35490
34807: GO 34809
34809: DISABLE
34810: LD_INT 0
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
34818: PPUSH
34819: PPUSH
34820: PPUSH
// begin enable ;
34821: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34822: LD_ADDR_VAR 0 3
34826: PUSH
34827: LD_EXP 110
34831: PPUSH
34832: CALL 80832 0 1
34836: ST_TO_ADDR
// if not list then
34837: LD_VAR 0 3
34841: NOT
34842: IFFALSE 34846
// exit ;
34844: GO 35490
// for i := 1 to list do
34846: LD_ADDR_VAR 0 1
34850: PUSH
34851: DOUBLE
34852: LD_INT 1
34854: DEC
34855: ST_TO_ADDR
34856: LD_VAR 0 3
34860: PUSH
34861: FOR_TO
34862: IFFALSE 35488
// begin depot := list [ i ] [ 2 ] ;
34864: LD_ADDR_VAR 0 8
34868: PUSH
34869: LD_VAR 0 3
34873: PUSH
34874: LD_VAR 0 1
34878: ARRAY
34879: PUSH
34880: LD_INT 2
34882: ARRAY
34883: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34884: LD_ADDR_VAR 0 5
34888: PUSH
34889: LD_VAR 0 3
34893: PUSH
34894: LD_VAR 0 1
34898: ARRAY
34899: PUSH
34900: LD_INT 1
34902: ARRAY
34903: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34904: LD_VAR 0 8
34908: PPUSH
34909: CALL_OW 301
34913: PUSH
34914: LD_VAR 0 5
34918: PUSH
34919: LD_VAR 0 8
34923: PPUSH
34924: CALL_OW 255
34928: NONEQUAL
34929: OR
34930: IFFALSE 34959
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34932: LD_ADDR_EXP 110
34936: PUSH
34937: LD_EXP 110
34941: PPUSH
34942: LD_VAR 0 8
34946: PPUSH
34947: LD_INT 0
34949: PPUSH
34950: CALL_OW 1
34954: ST_TO_ADDR
// exit ;
34955: POP
34956: POP
34957: GO 35490
// end ; x := list [ i ] [ 3 ] ;
34959: LD_ADDR_VAR 0 6
34963: PUSH
34964: LD_VAR 0 3
34968: PUSH
34969: LD_VAR 0 1
34973: ARRAY
34974: PUSH
34975: LD_INT 3
34977: ARRAY
34978: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34979: LD_ADDR_VAR 0 7
34983: PUSH
34984: LD_VAR 0 3
34988: PUSH
34989: LD_VAR 0 1
34993: ARRAY
34994: PUSH
34995: LD_INT 4
34997: ARRAY
34998: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_VAR 0 6
35008: PPUSH
35009: LD_VAR 0 7
35013: PPUSH
35014: LD_INT 16
35016: PPUSH
35017: CALL 79420 0 3
35021: ST_TO_ADDR
// if not cratesNearbyPoint then
35022: LD_VAR 0 9
35026: NOT
35027: IFFALSE 35033
// exit ;
35029: POP
35030: POP
35031: GO 35490
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35033: LD_ADDR_VAR 0 4
35037: PUSH
35038: LD_INT 22
35040: PUSH
35041: LD_VAR 0 5
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 3
35052: PUSH
35053: LD_INT 60
35055: PUSH
35056: EMPTY
35057: LIST
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 91
35065: PUSH
35066: LD_VAR 0 8
35070: PUSH
35071: LD_INT 6
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 25
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 25
35094: PUSH
35095: LD_INT 16
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: PPUSH
35113: CALL_OW 69
35117: PUSH
35118: LD_VAR 0 8
35122: PPUSH
35123: CALL_OW 313
35127: PPUSH
35128: LD_INT 3
35130: PUSH
35131: LD_INT 60
35133: PUSH
35134: EMPTY
35135: LIST
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 25
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 25
35156: PUSH
35157: LD_INT 16
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PPUSH
35173: CALL_OW 72
35177: UNION
35178: ST_TO_ADDR
// if tmp then
35179: LD_VAR 0 4
35183: IFFALSE 35263
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35185: LD_ADDR_VAR 0 4
35189: PUSH
35190: LD_VAR 0 4
35194: PPUSH
35195: LD_INT 3
35197: PPUSH
35198: CALL 77389 0 2
35202: ST_TO_ADDR
// for j in tmp do
35203: LD_ADDR_VAR 0 2
35207: PUSH
35208: LD_VAR 0 4
35212: PUSH
35213: FOR_IN
35214: IFFALSE 35257
// begin if IsInUnit ( j ) then
35216: LD_VAR 0 2
35220: PPUSH
35221: CALL_OW 310
35225: IFFALSE 35236
// ComExit ( j ) ;
35227: LD_VAR 0 2
35231: PPUSH
35232: CALL 77472 0 1
// AddComCollect ( j , x , y ) ;
35236: LD_VAR 0 2
35240: PPUSH
35241: LD_VAR 0 6
35245: PPUSH
35246: LD_VAR 0 7
35250: PPUSH
35251: CALL_OW 177
// end ;
35255: GO 35213
35257: POP
35258: POP
// exit ;
35259: POP
35260: POP
35261: GO 35490
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35263: LD_ADDR_VAR 0 4
35267: PUSH
35268: LD_INT 22
35270: PUSH
35271: LD_VAR 0 5
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 91
35282: PUSH
35283: LD_VAR 0 8
35287: PUSH
35288: LD_INT 8
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: LD_INT 34
35301: PUSH
35302: LD_INT 12
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 34
35311: PUSH
35312: LD_INT 51
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 34
35321: PUSH
35322: LD_INT 32
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 34
35331: PUSH
35332: LD_INT 89
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: PPUSH
35351: CALL_OW 69
35355: ST_TO_ADDR
// if tmp then
35356: LD_VAR 0 4
35360: IFFALSE 35486
// begin for j in tmp do
35362: LD_ADDR_VAR 0 2
35366: PUSH
35367: LD_VAR 0 4
35371: PUSH
35372: FOR_IN
35373: IFFALSE 35484
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35375: LD_VAR 0 2
35379: PPUSH
35380: CALL_OW 262
35384: PUSH
35385: LD_INT 3
35387: EQUAL
35388: PUSH
35389: LD_VAR 0 2
35393: PPUSH
35394: CALL_OW 261
35398: PUSH
35399: LD_INT 20
35401: GREATER
35402: OR
35403: PUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: CALL_OW 314
35413: NOT
35414: AND
35415: PUSH
35416: LD_VAR 0 2
35420: PPUSH
35421: CALL_OW 263
35425: PUSH
35426: LD_INT 1
35428: NONEQUAL
35429: PUSH
35430: LD_VAR 0 2
35434: PPUSH
35435: CALL_OW 311
35439: OR
35440: AND
35441: IFFALSE 35482
// begin ComCollect ( j , x , y ) ;
35443: LD_VAR 0 2
35447: PPUSH
35448: LD_VAR 0 6
35452: PPUSH
35453: LD_VAR 0 7
35457: PPUSH
35458: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35462: LD_VAR 0 2
35466: PPUSH
35467: LD_VAR 0 8
35471: PPUSH
35472: CALL_OW 172
// exit ;
35476: POP
35477: POP
35478: POP
35479: POP
35480: GO 35490
// end ;
35482: GO 35372
35484: POP
35485: POP
// end ; end ;
35486: GO 34861
35488: POP
35489: POP
// end ; end_of_file
35490: PPOPN 9
35492: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35493: LD_INT 0
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 264
35508: PUSH
35509: LD_INT 91
35511: EQUAL
35512: IFFALSE 35584
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35514: LD_INT 68
35516: PPUSH
35517: LD_VAR 0 1
35521: PPUSH
35522: CALL_OW 255
35526: PPUSH
35527: CALL_OW 321
35531: PUSH
35532: LD_INT 2
35534: EQUAL
35535: IFFALSE 35547
// eff := 70 else
35537: LD_ADDR_VAR 0 4
35541: PUSH
35542: LD_INT 70
35544: ST_TO_ADDR
35545: GO 35555
// eff := 30 ;
35547: LD_ADDR_VAR 0 4
35551: PUSH
35552: LD_INT 30
35554: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35555: LD_VAR 0 1
35559: PPUSH
35560: CALL_OW 250
35564: PPUSH
35565: LD_VAR 0 1
35569: PPUSH
35570: CALL_OW 251
35574: PPUSH
35575: LD_VAR 0 4
35579: PPUSH
35580: CALL_OW 495
// end ; end ;
35584: LD_VAR 0 2
35588: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35589: LD_INT 0
35591: PPUSH
// end ;
35592: LD_VAR 0 4
35596: RET
// export function SOS_Command ( cmd ) ; begin
35597: LD_INT 0
35599: PPUSH
// end ;
35600: LD_VAR 0 2
35604: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35605: LD_INT 0
35607: PPUSH
// end ;
35608: LD_VAR 0 6
35612: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35613: LD_INT 0
35615: PPUSH
35616: PPUSH
// if not vehicle or not factory then
35617: LD_VAR 0 1
35621: NOT
35622: PUSH
35623: LD_VAR 0 2
35627: NOT
35628: OR
35629: IFFALSE 35633
// exit ;
35631: GO 35864
// if factoryWaypoints >= factory then
35633: LD_EXP 109
35637: PUSH
35638: LD_VAR 0 2
35642: GREATEREQUAL
35643: IFFALSE 35864
// if factoryWaypoints [ factory ] then
35645: LD_EXP 109
35649: PUSH
35650: LD_VAR 0 2
35654: ARRAY
35655: IFFALSE 35864
// begin if GetControl ( vehicle ) = control_manual then
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 263
35666: PUSH
35667: LD_INT 1
35669: EQUAL
35670: IFFALSE 35751
// begin driver := IsDrivenBy ( vehicle ) ;
35672: LD_ADDR_VAR 0 4
35676: PUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 311
35686: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35687: LD_VAR 0 4
35691: PPUSH
35692: LD_EXP 109
35696: PUSH
35697: LD_VAR 0 2
35701: ARRAY
35702: PUSH
35703: LD_INT 3
35705: ARRAY
35706: PPUSH
35707: LD_EXP 109
35711: PUSH
35712: LD_VAR 0 2
35716: ARRAY
35717: PUSH
35718: LD_INT 4
35720: ARRAY
35721: PPUSH
35722: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35726: LD_VAR 0 4
35730: PPUSH
35731: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35735: LD_VAR 0 4
35739: PPUSH
35740: LD_VAR 0 2
35744: PPUSH
35745: CALL_OW 180
// end else
35749: GO 35864
// if GetControl ( vehicle ) = control_remote then
35751: LD_VAR 0 1
35755: PPUSH
35756: CALL_OW 263
35760: PUSH
35761: LD_INT 2
35763: EQUAL
35764: IFFALSE 35825
// begin wait ( 0 0$2 ) ;
35766: LD_INT 70
35768: PPUSH
35769: CALL_OW 67
// if Connect ( vehicle ) then
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL 47713 0 1
35782: IFFALSE 35823
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35784: LD_VAR 0 1
35788: PPUSH
35789: LD_EXP 109
35793: PUSH
35794: LD_VAR 0 2
35798: ARRAY
35799: PUSH
35800: LD_INT 3
35802: ARRAY
35803: PPUSH
35804: LD_EXP 109
35808: PUSH
35809: LD_VAR 0 2
35813: ARRAY
35814: PUSH
35815: LD_INT 4
35817: ARRAY
35818: PPUSH
35819: CALL_OW 171
// end else
35823: GO 35864
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35825: LD_VAR 0 1
35829: PPUSH
35830: LD_EXP 109
35834: PUSH
35835: LD_VAR 0 2
35839: ARRAY
35840: PUSH
35841: LD_INT 3
35843: ARRAY
35844: PPUSH
35845: LD_EXP 109
35849: PUSH
35850: LD_VAR 0 2
35854: ARRAY
35855: PUSH
35856: LD_INT 4
35858: ARRAY
35859: PPUSH
35860: CALL_OW 171
// end ; end ;
35864: LD_VAR 0 3
35868: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35869: LD_INT 0
35871: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35872: LD_VAR 0 1
35876: PUSH
35877: LD_INT 250
35879: EQUAL
35880: PUSH
35881: LD_VAR 0 2
35885: PPUSH
35886: CALL_OW 264
35890: PUSH
35891: LD_INT 81
35893: EQUAL
35894: AND
35895: IFFALSE 35916
// MinerPlaceMine ( unit , x , y ) ;
35897: LD_VAR 0 2
35901: PPUSH
35902: LD_VAR 0 4
35906: PPUSH
35907: LD_VAR 0 5
35911: PPUSH
35912: CALL 38301 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35916: LD_VAR 0 1
35920: PUSH
35921: LD_INT 251
35923: EQUAL
35924: PUSH
35925: LD_VAR 0 2
35929: PPUSH
35930: CALL_OW 264
35934: PUSH
35935: LD_INT 81
35937: EQUAL
35938: AND
35939: IFFALSE 35960
// MinerDetonateMine ( unit , x , y ) ;
35941: LD_VAR 0 2
35945: PPUSH
35946: LD_VAR 0 4
35950: PPUSH
35951: LD_VAR 0 5
35955: PPUSH
35956: CALL 38576 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35960: LD_VAR 0 1
35964: PUSH
35965: LD_INT 252
35967: EQUAL
35968: PUSH
35969: LD_VAR 0 2
35973: PPUSH
35974: CALL_OW 264
35978: PUSH
35979: LD_INT 81
35981: EQUAL
35982: AND
35983: IFFALSE 36004
// MinerCreateMinefield ( unit , x , y ) ;
35985: LD_VAR 0 2
35989: PPUSH
35990: LD_VAR 0 4
35994: PPUSH
35995: LD_VAR 0 5
35999: PPUSH
36000: CALL 38993 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36004: LD_VAR 0 1
36008: PUSH
36009: LD_INT 253
36011: EQUAL
36012: PUSH
36013: LD_VAR 0 2
36017: PPUSH
36018: CALL_OW 257
36022: PUSH
36023: LD_INT 5
36025: EQUAL
36026: AND
36027: IFFALSE 36048
// ComBinocular ( unit , x , y ) ;
36029: LD_VAR 0 2
36033: PPUSH
36034: LD_VAR 0 4
36038: PPUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL 39362 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36048: LD_VAR 0 1
36052: PUSH
36053: LD_INT 254
36055: EQUAL
36056: PUSH
36057: LD_VAR 0 2
36061: PPUSH
36062: CALL_OW 264
36066: PUSH
36067: LD_INT 99
36069: EQUAL
36070: AND
36071: PUSH
36072: LD_VAR 0 3
36076: PPUSH
36077: CALL_OW 263
36081: PUSH
36082: LD_INT 3
36084: EQUAL
36085: AND
36086: IFFALSE 36102
// HackDestroyVehicle ( unit , selectedUnit ) ;
36088: LD_VAR 0 2
36092: PPUSH
36093: LD_VAR 0 3
36097: PPUSH
36098: CALL 37665 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36102: LD_VAR 0 1
36106: PUSH
36107: LD_INT 255
36109: EQUAL
36110: PUSH
36111: LD_VAR 0 2
36115: PPUSH
36116: CALL_OW 264
36120: PUSH
36121: LD_INT 14
36123: PUSH
36124: LD_INT 53
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: IN
36131: AND
36132: PUSH
36133: LD_VAR 0 4
36137: PPUSH
36138: LD_VAR 0 5
36142: PPUSH
36143: CALL_OW 488
36147: AND
36148: IFFALSE 36172
// CutTreeXYR ( unit , x , y , 12 ) ;
36150: LD_VAR 0 2
36154: PPUSH
36155: LD_VAR 0 4
36159: PPUSH
36160: LD_VAR 0 5
36164: PPUSH
36165: LD_INT 12
36167: PPUSH
36168: CALL 36235 0 4
// if cmd = 256 then
36172: LD_VAR 0 1
36176: PUSH
36177: LD_INT 256
36179: EQUAL
36180: IFFALSE 36201
// SetFactoryWaypoint ( unit , x , y ) ;
36182: LD_VAR 0 2
36186: PPUSH
36187: LD_VAR 0 4
36191: PPUSH
36192: LD_VAR 0 5
36196: PPUSH
36197: CALL 34182 0 3
// if cmd = 257 then
36201: LD_VAR 0 1
36205: PUSH
36206: LD_INT 257
36208: EQUAL
36209: IFFALSE 36230
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36211: LD_VAR 0 2
36215: PPUSH
36216: LD_VAR 0 4
36220: PPUSH
36221: LD_VAR 0 5
36225: PPUSH
36226: CALL 34544 0 3
// end ;
36230: LD_VAR 0 6
36234: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36235: LD_INT 0
36237: PPUSH
36238: PPUSH
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36246: LD_VAR 0 1
36250: NOT
36251: PUSH
36252: LD_VAR 0 2
36256: PPUSH
36257: LD_VAR 0 3
36261: PPUSH
36262: CALL_OW 488
36266: NOT
36267: OR
36268: PUSH
36269: LD_VAR 0 4
36273: NOT
36274: OR
36275: IFFALSE 36279
// exit ;
36277: GO 36619
// list := [ ] ;
36279: LD_ADDR_VAR 0 13
36283: PUSH
36284: EMPTY
36285: ST_TO_ADDR
// if x - r < 0 then
36286: LD_VAR 0 2
36290: PUSH
36291: LD_VAR 0 4
36295: MINUS
36296: PUSH
36297: LD_INT 0
36299: LESS
36300: IFFALSE 36312
// min_x := 0 else
36302: LD_ADDR_VAR 0 7
36306: PUSH
36307: LD_INT 0
36309: ST_TO_ADDR
36310: GO 36328
// min_x := x - r ;
36312: LD_ADDR_VAR 0 7
36316: PUSH
36317: LD_VAR 0 2
36321: PUSH
36322: LD_VAR 0 4
36326: MINUS
36327: ST_TO_ADDR
// if y - r < 0 then
36328: LD_VAR 0 3
36332: PUSH
36333: LD_VAR 0 4
36337: MINUS
36338: PUSH
36339: LD_INT 0
36341: LESS
36342: IFFALSE 36354
// min_y := 0 else
36344: LD_ADDR_VAR 0 8
36348: PUSH
36349: LD_INT 0
36351: ST_TO_ADDR
36352: GO 36370
// min_y := y - r ;
36354: LD_ADDR_VAR 0 8
36358: PUSH
36359: LD_VAR 0 3
36363: PUSH
36364: LD_VAR 0 4
36368: MINUS
36369: ST_TO_ADDR
// max_x := x + r ;
36370: LD_ADDR_VAR 0 9
36374: PUSH
36375: LD_VAR 0 2
36379: PUSH
36380: LD_VAR 0 4
36384: PLUS
36385: ST_TO_ADDR
// max_y := y + r ;
36386: LD_ADDR_VAR 0 10
36390: PUSH
36391: LD_VAR 0 3
36395: PUSH
36396: LD_VAR 0 4
36400: PLUS
36401: ST_TO_ADDR
// for _x = min_x to max_x do
36402: LD_ADDR_VAR 0 11
36406: PUSH
36407: DOUBLE
36408: LD_VAR 0 7
36412: DEC
36413: ST_TO_ADDR
36414: LD_VAR 0 9
36418: PUSH
36419: FOR_TO
36420: IFFALSE 36537
// for _y = min_y to max_y do
36422: LD_ADDR_VAR 0 12
36426: PUSH
36427: DOUBLE
36428: LD_VAR 0 8
36432: DEC
36433: ST_TO_ADDR
36434: LD_VAR 0 10
36438: PUSH
36439: FOR_TO
36440: IFFALSE 36533
// begin if not ValidHex ( _x , _y ) then
36442: LD_VAR 0 11
36446: PPUSH
36447: LD_VAR 0 12
36451: PPUSH
36452: CALL_OW 488
36456: NOT
36457: IFFALSE 36461
// continue ;
36459: GO 36439
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36461: LD_VAR 0 11
36465: PPUSH
36466: LD_VAR 0 12
36470: PPUSH
36471: CALL_OW 351
36475: PUSH
36476: LD_VAR 0 11
36480: PPUSH
36481: LD_VAR 0 12
36485: PPUSH
36486: CALL_OW 554
36490: AND
36491: IFFALSE 36531
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36493: LD_ADDR_VAR 0 13
36497: PUSH
36498: LD_VAR 0 13
36502: PPUSH
36503: LD_VAR 0 13
36507: PUSH
36508: LD_INT 1
36510: PLUS
36511: PPUSH
36512: LD_VAR 0 11
36516: PUSH
36517: LD_VAR 0 12
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PPUSH
36526: CALL_OW 2
36530: ST_TO_ADDR
// end ;
36531: GO 36439
36533: POP
36534: POP
36535: GO 36419
36537: POP
36538: POP
// if not list then
36539: LD_VAR 0 13
36543: NOT
36544: IFFALSE 36548
// exit ;
36546: GO 36619
// for i in list do
36548: LD_ADDR_VAR 0 6
36552: PUSH
36553: LD_VAR 0 13
36557: PUSH
36558: FOR_IN
36559: IFFALSE 36617
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36561: LD_VAR 0 1
36565: PPUSH
36566: LD_STRING M
36568: PUSH
36569: LD_VAR 0 6
36573: PUSH
36574: LD_INT 1
36576: ARRAY
36577: PUSH
36578: LD_VAR 0 6
36582: PUSH
36583: LD_INT 2
36585: ARRAY
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: PUSH
36608: EMPTY
36609: LIST
36610: PPUSH
36611: CALL_OW 447
36615: GO 36558
36617: POP
36618: POP
// end ;
36619: LD_VAR 0 5
36623: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36624: LD_EXP 112
36628: NOT
36629: IFFALSE 36679
36631: GO 36633
36633: DISABLE
// begin initHack := true ;
36634: LD_ADDR_EXP 112
36638: PUSH
36639: LD_INT 1
36641: ST_TO_ADDR
// hackTanks := [ ] ;
36642: LD_ADDR_EXP 113
36646: PUSH
36647: EMPTY
36648: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36649: LD_ADDR_EXP 114
36653: PUSH
36654: EMPTY
36655: ST_TO_ADDR
// hackLimit := 3 ;
36656: LD_ADDR_EXP 115
36660: PUSH
36661: LD_INT 3
36663: ST_TO_ADDR
// hackDist := 12 ;
36664: LD_ADDR_EXP 116
36668: PUSH
36669: LD_INT 12
36671: ST_TO_ADDR
// hackCounter := [ ] ;
36672: LD_ADDR_EXP 117
36676: PUSH
36677: EMPTY
36678: ST_TO_ADDR
// end ;
36679: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36680: LD_EXP 112
36684: PUSH
36685: LD_INT 34
36687: PUSH
36688: LD_INT 99
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PPUSH
36695: CALL_OW 69
36699: AND
36700: IFFALSE 36953
36702: GO 36704
36704: DISABLE
36705: LD_INT 0
36707: PPUSH
36708: PPUSH
// begin enable ;
36709: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36710: LD_ADDR_VAR 0 1
36714: PUSH
36715: LD_INT 34
36717: PUSH
36718: LD_INT 99
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PPUSH
36725: CALL_OW 69
36729: PUSH
36730: FOR_IN
36731: IFFALSE 36951
// begin if not i in hackTanks then
36733: LD_VAR 0 1
36737: PUSH
36738: LD_EXP 113
36742: IN
36743: NOT
36744: IFFALSE 36827
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36746: LD_ADDR_EXP 113
36750: PUSH
36751: LD_EXP 113
36755: PPUSH
36756: LD_EXP 113
36760: PUSH
36761: LD_INT 1
36763: PLUS
36764: PPUSH
36765: LD_VAR 0 1
36769: PPUSH
36770: CALL_OW 1
36774: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36775: LD_ADDR_EXP 114
36779: PUSH
36780: LD_EXP 114
36784: PPUSH
36785: LD_EXP 114
36789: PUSH
36790: LD_INT 1
36792: PLUS
36793: PPUSH
36794: EMPTY
36795: PPUSH
36796: CALL_OW 1
36800: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36801: LD_ADDR_EXP 117
36805: PUSH
36806: LD_EXP 117
36810: PPUSH
36811: LD_EXP 117
36815: PUSH
36816: LD_INT 1
36818: PLUS
36819: PPUSH
36820: EMPTY
36821: PPUSH
36822: CALL_OW 1
36826: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36827: LD_VAR 0 1
36831: PPUSH
36832: CALL_OW 302
36836: NOT
36837: IFFALSE 36850
// begin HackUnlinkAll ( i ) ;
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL 36956 0 1
// continue ;
36848: GO 36730
// end ; HackCheckCapturedStatus ( i ) ;
36850: LD_VAR 0 1
36854: PPUSH
36855: CALL 37399 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: LD_INT 81
36866: PUSH
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 255
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 33
36883: PUSH
36884: LD_INT 3
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 91
36893: PUSH
36894: LD_VAR 0 1
36898: PUSH
36899: LD_EXP 116
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 50
36911: PUSH
36912: EMPTY
36913: LIST
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: PPUSH
36921: CALL_OW 69
36925: ST_TO_ADDR
// if not tmp then
36926: LD_VAR 0 2
36930: NOT
36931: IFFALSE 36935
// continue ;
36933: GO 36730
// HackLink ( i , tmp ) ;
36935: LD_VAR 0 1
36939: PPUSH
36940: LD_VAR 0 2
36944: PPUSH
36945: CALL 37092 0 2
// end ;
36949: GO 36730
36951: POP
36952: POP
// end ;
36953: PPOPN 2
36955: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36956: LD_INT 0
36958: PPUSH
36959: PPUSH
36960: PPUSH
// if not hack in hackTanks then
36961: LD_VAR 0 1
36965: PUSH
36966: LD_EXP 113
36970: IN
36971: NOT
36972: IFFALSE 36976
// exit ;
36974: GO 37087
// index := GetElementIndex ( hackTanks , hack ) ;
36976: LD_ADDR_VAR 0 4
36980: PUSH
36981: LD_EXP 113
36985: PPUSH
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL 44529 0 2
36995: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36996: LD_EXP 114
37000: PUSH
37001: LD_VAR 0 4
37005: ARRAY
37006: IFFALSE 37087
// begin for i in hackTanksCaptured [ index ] do
37008: LD_ADDR_VAR 0 3
37012: PUSH
37013: LD_EXP 114
37017: PUSH
37018: LD_VAR 0 4
37022: ARRAY
37023: PUSH
37024: FOR_IN
37025: IFFALSE 37051
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37027: LD_VAR 0 3
37031: PUSH
37032: LD_INT 1
37034: ARRAY
37035: PPUSH
37036: LD_VAR 0 3
37040: PUSH
37041: LD_INT 2
37043: ARRAY
37044: PPUSH
37045: CALL_OW 235
37049: GO 37024
37051: POP
37052: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37053: LD_ADDR_EXP 114
37057: PUSH
37058: LD_EXP 114
37062: PPUSH
37063: LD_VAR 0 4
37067: PPUSH
37068: EMPTY
37069: PPUSH
37070: CALL_OW 1
37074: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37075: LD_VAR 0 1
37079: PPUSH
37080: LD_INT 0
37082: PPUSH
37083: CALL_OW 505
// end ; end ;
37087: LD_VAR 0 2
37091: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37092: LD_INT 0
37094: PPUSH
37095: PPUSH
37096: PPUSH
// if not hack in hackTanks or not vehicles then
37097: LD_VAR 0 1
37101: PUSH
37102: LD_EXP 113
37106: IN
37107: NOT
37108: PUSH
37109: LD_VAR 0 2
37113: NOT
37114: OR
37115: IFFALSE 37119
// exit ;
37117: GO 37394
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37119: LD_ADDR_VAR 0 2
37123: PUSH
37124: LD_VAR 0 1
37128: PPUSH
37129: LD_VAR 0 2
37133: PPUSH
37134: LD_INT 1
37136: PPUSH
37137: LD_INT 1
37139: PPUSH
37140: CALL 45179 0 4
37144: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37145: LD_ADDR_VAR 0 5
37149: PUSH
37150: LD_EXP 113
37154: PPUSH
37155: LD_VAR 0 1
37159: PPUSH
37160: CALL 44529 0 2
37164: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37165: LD_EXP 114
37169: PUSH
37170: LD_VAR 0 5
37174: ARRAY
37175: PUSH
37176: LD_EXP 115
37180: LESS
37181: IFFALSE 37370
// begin for i := 1 to vehicles do
37183: LD_ADDR_VAR 0 4
37187: PUSH
37188: DOUBLE
37189: LD_INT 1
37191: DEC
37192: ST_TO_ADDR
37193: LD_VAR 0 2
37197: PUSH
37198: FOR_TO
37199: IFFALSE 37368
// begin if hackTanksCaptured [ index ] = hackLimit then
37201: LD_EXP 114
37205: PUSH
37206: LD_VAR 0 5
37210: ARRAY
37211: PUSH
37212: LD_EXP 115
37216: EQUAL
37217: IFFALSE 37221
// break ;
37219: GO 37368
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37221: LD_ADDR_EXP 117
37225: PUSH
37226: LD_EXP 117
37230: PPUSH
37231: LD_VAR 0 5
37235: PPUSH
37236: LD_EXP 117
37240: PUSH
37241: LD_VAR 0 5
37245: ARRAY
37246: PUSH
37247: LD_INT 1
37249: PLUS
37250: PPUSH
37251: CALL_OW 1
37255: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37256: LD_ADDR_EXP 114
37260: PUSH
37261: LD_EXP 114
37265: PPUSH
37266: LD_VAR 0 5
37270: PUSH
37271: LD_EXP 114
37275: PUSH
37276: LD_VAR 0 5
37280: ARRAY
37281: PUSH
37282: LD_INT 1
37284: PLUS
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PPUSH
37290: LD_VAR 0 2
37294: PUSH
37295: LD_VAR 0 4
37299: ARRAY
37300: PUSH
37301: LD_VAR 0 2
37305: PUSH
37306: LD_VAR 0 4
37310: ARRAY
37311: PPUSH
37312: CALL_OW 255
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PPUSH
37321: CALL 44744 0 3
37325: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37326: LD_VAR 0 2
37330: PUSH
37331: LD_VAR 0 4
37335: ARRAY
37336: PPUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: CALL_OW 255
37346: PPUSH
37347: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37351: LD_VAR 0 2
37355: PUSH
37356: LD_VAR 0 4
37360: ARRAY
37361: PPUSH
37362: CALL_OW 141
// end ;
37366: GO 37198
37368: POP
37369: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37370: LD_VAR 0 1
37374: PPUSH
37375: LD_EXP 114
37379: PUSH
37380: LD_VAR 0 5
37384: ARRAY
37385: PUSH
37386: LD_INT 0
37388: PLUS
37389: PPUSH
37390: CALL_OW 505
// end ;
37394: LD_VAR 0 3
37398: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37399: LD_INT 0
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
// if not hack in hackTanks then
37405: LD_VAR 0 1
37409: PUSH
37410: LD_EXP 113
37414: IN
37415: NOT
37416: IFFALSE 37420
// exit ;
37418: GO 37660
// index := GetElementIndex ( hackTanks , hack ) ;
37420: LD_ADDR_VAR 0 4
37424: PUSH
37425: LD_EXP 113
37429: PPUSH
37430: LD_VAR 0 1
37434: PPUSH
37435: CALL 44529 0 2
37439: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37440: LD_ADDR_VAR 0 3
37444: PUSH
37445: DOUBLE
37446: LD_EXP 114
37450: PUSH
37451: LD_VAR 0 4
37455: ARRAY
37456: INC
37457: ST_TO_ADDR
37458: LD_INT 1
37460: PUSH
37461: FOR_DOWNTO
37462: IFFALSE 37634
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37464: LD_ADDR_VAR 0 5
37468: PUSH
37469: LD_EXP 114
37473: PUSH
37474: LD_VAR 0 4
37478: ARRAY
37479: PUSH
37480: LD_VAR 0 3
37484: ARRAY
37485: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37486: LD_VAR 0 5
37490: PUSH
37491: LD_INT 1
37493: ARRAY
37494: PPUSH
37495: CALL_OW 302
37499: NOT
37500: PUSH
37501: LD_VAR 0 5
37505: PUSH
37506: LD_INT 1
37508: ARRAY
37509: PPUSH
37510: CALL_OW 255
37514: PUSH
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 255
37524: NONEQUAL
37525: OR
37526: IFFALSE 37632
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37528: LD_VAR 0 5
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: PPUSH
37537: CALL_OW 305
37541: PUSH
37542: LD_VAR 0 5
37546: PUSH
37547: LD_INT 1
37549: ARRAY
37550: PPUSH
37551: CALL_OW 255
37555: PUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: CALL_OW 255
37565: EQUAL
37566: AND
37567: IFFALSE 37591
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37569: LD_VAR 0 5
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: LD_VAR 0 5
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: PPUSH
37587: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37591: LD_ADDR_EXP 114
37595: PUSH
37596: LD_EXP 114
37600: PPUSH
37601: LD_VAR 0 4
37605: PPUSH
37606: LD_EXP 114
37610: PUSH
37611: LD_VAR 0 4
37615: ARRAY
37616: PPUSH
37617: LD_VAR 0 3
37621: PPUSH
37622: CALL_OW 3
37626: PPUSH
37627: CALL_OW 1
37631: ST_TO_ADDR
// end ; end ;
37632: GO 37461
37634: POP
37635: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37636: LD_VAR 0 1
37640: PPUSH
37641: LD_EXP 114
37645: PUSH
37646: LD_VAR 0 4
37650: ARRAY
37651: PUSH
37652: LD_INT 0
37654: PLUS
37655: PPUSH
37656: CALL_OW 505
// end ;
37660: LD_VAR 0 2
37664: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37665: LD_INT 0
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
// if not hack in hackTanks then
37671: LD_VAR 0 1
37675: PUSH
37676: LD_EXP 113
37680: IN
37681: NOT
37682: IFFALSE 37686
// exit ;
37684: GO 37771
// index := GetElementIndex ( hackTanks , hack ) ;
37686: LD_ADDR_VAR 0 5
37690: PUSH
37691: LD_EXP 113
37695: PPUSH
37696: LD_VAR 0 1
37700: PPUSH
37701: CALL 44529 0 2
37705: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37706: LD_ADDR_VAR 0 4
37710: PUSH
37711: DOUBLE
37712: LD_INT 1
37714: DEC
37715: ST_TO_ADDR
37716: LD_EXP 114
37720: PUSH
37721: LD_VAR 0 5
37725: ARRAY
37726: PUSH
37727: FOR_TO
37728: IFFALSE 37769
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37730: LD_EXP 114
37734: PUSH
37735: LD_VAR 0 5
37739: ARRAY
37740: PUSH
37741: LD_VAR 0 4
37745: ARRAY
37746: PUSH
37747: LD_INT 1
37749: ARRAY
37750: PUSH
37751: LD_VAR 0 2
37755: EQUAL
37756: IFFALSE 37767
// KillUnit ( vehicle ) ;
37758: LD_VAR 0 2
37762: PPUSH
37763: CALL_OW 66
37767: GO 37727
37769: POP
37770: POP
// end ;
37771: LD_VAR 0 3
37775: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37776: LD_EXP 118
37780: NOT
37781: IFFALSE 37816
37783: GO 37785
37785: DISABLE
// begin initMiner := true ;
37786: LD_ADDR_EXP 118
37790: PUSH
37791: LD_INT 1
37793: ST_TO_ADDR
// minersList := [ ] ;
37794: LD_ADDR_EXP 119
37798: PUSH
37799: EMPTY
37800: ST_TO_ADDR
// minerMinesList := [ ] ;
37801: LD_ADDR_EXP 120
37805: PUSH
37806: EMPTY
37807: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37808: LD_ADDR_EXP 121
37812: PUSH
37813: LD_INT 5
37815: ST_TO_ADDR
// end ;
37816: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37817: LD_EXP 118
37821: PUSH
37822: LD_INT 34
37824: PUSH
37825: LD_INT 81
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PPUSH
37832: CALL_OW 69
37836: AND
37837: IFFALSE 38298
37839: GO 37841
37841: DISABLE
37842: LD_INT 0
37844: PPUSH
37845: PPUSH
37846: PPUSH
37847: PPUSH
// begin enable ;
37848: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37849: LD_ADDR_VAR 0 1
37853: PUSH
37854: LD_INT 34
37856: PUSH
37857: LD_INT 81
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PPUSH
37864: CALL_OW 69
37868: PUSH
37869: FOR_IN
37870: IFFALSE 37942
// begin if not i in minersList then
37872: LD_VAR 0 1
37876: PUSH
37877: LD_EXP 119
37881: IN
37882: NOT
37883: IFFALSE 37940
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37885: LD_ADDR_EXP 119
37889: PUSH
37890: LD_EXP 119
37894: PPUSH
37895: LD_EXP 119
37899: PUSH
37900: LD_INT 1
37902: PLUS
37903: PPUSH
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 1
37913: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37914: LD_ADDR_EXP 120
37918: PUSH
37919: LD_EXP 120
37923: PPUSH
37924: LD_EXP 120
37928: PUSH
37929: LD_INT 1
37931: PLUS
37932: PPUSH
37933: EMPTY
37934: PPUSH
37935: CALL_OW 1
37939: ST_TO_ADDR
// end end ;
37940: GO 37869
37942: POP
37943: POP
// for i := minerMinesList downto 1 do
37944: LD_ADDR_VAR 0 1
37948: PUSH
37949: DOUBLE
37950: LD_EXP 120
37954: INC
37955: ST_TO_ADDR
37956: LD_INT 1
37958: PUSH
37959: FOR_DOWNTO
37960: IFFALSE 38296
// begin if IsLive ( minersList [ i ] ) then
37962: LD_EXP 119
37966: PUSH
37967: LD_VAR 0 1
37971: ARRAY
37972: PPUSH
37973: CALL_OW 300
37977: IFFALSE 38005
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37979: LD_EXP 119
37983: PUSH
37984: LD_VAR 0 1
37988: ARRAY
37989: PPUSH
37990: LD_EXP 120
37994: PUSH
37995: LD_VAR 0 1
37999: ARRAY
38000: PPUSH
38001: CALL_OW 505
// if not minerMinesList [ i ] then
38005: LD_EXP 120
38009: PUSH
38010: LD_VAR 0 1
38014: ARRAY
38015: NOT
38016: IFFALSE 38020
// continue ;
38018: GO 37959
// for j := minerMinesList [ i ] downto 1 do
38020: LD_ADDR_VAR 0 2
38024: PUSH
38025: DOUBLE
38026: LD_EXP 120
38030: PUSH
38031: LD_VAR 0 1
38035: ARRAY
38036: INC
38037: ST_TO_ADDR
38038: LD_INT 1
38040: PUSH
38041: FOR_DOWNTO
38042: IFFALSE 38292
// begin side := GetSide ( minersList [ i ] ) ;
38044: LD_ADDR_VAR 0 3
38048: PUSH
38049: LD_EXP 119
38053: PUSH
38054: LD_VAR 0 1
38058: ARRAY
38059: PPUSH
38060: CALL_OW 255
38064: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38065: LD_ADDR_VAR 0 4
38069: PUSH
38070: LD_EXP 120
38074: PUSH
38075: LD_VAR 0 1
38079: ARRAY
38080: PUSH
38081: LD_VAR 0 2
38085: ARRAY
38086: PUSH
38087: LD_INT 1
38089: ARRAY
38090: PPUSH
38091: LD_EXP 120
38095: PUSH
38096: LD_VAR 0 1
38100: ARRAY
38101: PUSH
38102: LD_VAR 0 2
38106: ARRAY
38107: PUSH
38108: LD_INT 2
38110: ARRAY
38111: PPUSH
38112: CALL_OW 428
38116: ST_TO_ADDR
// if not tmp then
38117: LD_VAR 0 4
38121: NOT
38122: IFFALSE 38126
// continue ;
38124: GO 38041
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38126: LD_VAR 0 4
38130: PUSH
38131: LD_INT 81
38133: PUSH
38134: LD_VAR 0 3
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PPUSH
38143: CALL_OW 69
38147: IN
38148: PUSH
38149: LD_EXP 120
38153: PUSH
38154: LD_VAR 0 1
38158: ARRAY
38159: PUSH
38160: LD_VAR 0 2
38164: ARRAY
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: LD_EXP 120
38174: PUSH
38175: LD_VAR 0 1
38179: ARRAY
38180: PUSH
38181: LD_VAR 0 2
38185: ARRAY
38186: PUSH
38187: LD_INT 2
38189: ARRAY
38190: PPUSH
38191: CALL_OW 458
38195: AND
38196: IFFALSE 38290
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38198: LD_EXP 120
38202: PUSH
38203: LD_VAR 0 1
38207: ARRAY
38208: PUSH
38209: LD_VAR 0 2
38213: ARRAY
38214: PUSH
38215: LD_INT 1
38217: ARRAY
38218: PPUSH
38219: LD_EXP 120
38223: PUSH
38224: LD_VAR 0 1
38228: ARRAY
38229: PUSH
38230: LD_VAR 0 2
38234: ARRAY
38235: PUSH
38236: LD_INT 2
38238: ARRAY
38239: PPUSH
38240: LD_VAR 0 3
38244: PPUSH
38245: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38249: LD_ADDR_EXP 120
38253: PUSH
38254: LD_EXP 120
38258: PPUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_EXP 120
38268: PUSH
38269: LD_VAR 0 1
38273: ARRAY
38274: PPUSH
38275: LD_VAR 0 2
38279: PPUSH
38280: CALL_OW 3
38284: PPUSH
38285: CALL_OW 1
38289: ST_TO_ADDR
// end ; end ;
38290: GO 38041
38292: POP
38293: POP
// end ;
38294: GO 37959
38296: POP
38297: POP
// end ;
38298: PPOPN 4
38300: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38301: LD_INT 0
38303: PPUSH
38304: PPUSH
// result := false ;
38305: LD_ADDR_VAR 0 4
38309: PUSH
38310: LD_INT 0
38312: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38313: LD_VAR 0 1
38317: PPUSH
38318: CALL_OW 264
38322: PUSH
38323: LD_INT 81
38325: EQUAL
38326: NOT
38327: IFFALSE 38331
// exit ;
38329: GO 38571
// index := GetElementIndex ( minersList , unit ) ;
38331: LD_ADDR_VAR 0 5
38335: PUSH
38336: LD_EXP 119
38340: PPUSH
38341: LD_VAR 0 1
38345: PPUSH
38346: CALL 44529 0 2
38350: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38351: LD_EXP 120
38355: PUSH
38356: LD_VAR 0 5
38360: ARRAY
38361: PUSH
38362: LD_EXP 121
38366: GREATEREQUAL
38367: IFFALSE 38371
// exit ;
38369: GO 38571
// ComMoveXY ( unit , x , y ) ;
38371: LD_VAR 0 1
38375: PPUSH
38376: LD_VAR 0 2
38380: PPUSH
38381: LD_VAR 0 3
38385: PPUSH
38386: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38390: LD_INT 35
38392: PPUSH
38393: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38397: LD_VAR 0 1
38401: PPUSH
38402: LD_VAR 0 2
38406: PPUSH
38407: LD_VAR 0 3
38411: PPUSH
38412: CALL 75884 0 3
38416: NOT
38417: PUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 314
38427: AND
38428: IFFALSE 38432
// exit ;
38430: GO 38571
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38432: LD_VAR 0 2
38436: PPUSH
38437: LD_VAR 0 3
38441: PPUSH
38442: CALL_OW 428
38446: PUSH
38447: LD_VAR 0 1
38451: EQUAL
38452: PUSH
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 314
38462: NOT
38463: AND
38464: IFFALSE 38390
// PlaySoundXY ( x , y , PlantMine ) ;
38466: LD_VAR 0 2
38470: PPUSH
38471: LD_VAR 0 3
38475: PPUSH
38476: LD_STRING PlantMine
38478: PPUSH
38479: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38483: LD_VAR 0 2
38487: PPUSH
38488: LD_VAR 0 3
38492: PPUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 255
38502: PPUSH
38503: LD_INT 0
38505: PPUSH
38506: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38510: LD_ADDR_EXP 120
38514: PUSH
38515: LD_EXP 120
38519: PPUSH
38520: LD_VAR 0 5
38524: PUSH
38525: LD_EXP 120
38529: PUSH
38530: LD_VAR 0 5
38534: ARRAY
38535: PUSH
38536: LD_INT 1
38538: PLUS
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PPUSH
38544: LD_VAR 0 2
38548: PUSH
38549: LD_VAR 0 3
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PPUSH
38558: CALL 44744 0 3
38562: ST_TO_ADDR
// result := true ;
38563: LD_ADDR_VAR 0 4
38567: PUSH
38568: LD_INT 1
38570: ST_TO_ADDR
// end ;
38571: LD_VAR 0 4
38575: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38576: LD_INT 0
38578: PPUSH
38579: PPUSH
38580: PPUSH
// if not unit in minersList then
38581: LD_VAR 0 1
38585: PUSH
38586: LD_EXP 119
38590: IN
38591: NOT
38592: IFFALSE 38596
// exit ;
38594: GO 38988
// index := GetElementIndex ( minersList , unit ) ;
38596: LD_ADDR_VAR 0 6
38600: PUSH
38601: LD_EXP 119
38605: PPUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL 44529 0 2
38615: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38616: LD_ADDR_VAR 0 5
38620: PUSH
38621: DOUBLE
38622: LD_EXP 120
38626: PUSH
38627: LD_VAR 0 6
38631: ARRAY
38632: INC
38633: ST_TO_ADDR
38634: LD_INT 1
38636: PUSH
38637: FOR_DOWNTO
38638: IFFALSE 38799
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38640: LD_EXP 120
38644: PUSH
38645: LD_VAR 0 6
38649: ARRAY
38650: PUSH
38651: LD_VAR 0 5
38655: ARRAY
38656: PUSH
38657: LD_INT 1
38659: ARRAY
38660: PUSH
38661: LD_VAR 0 2
38665: EQUAL
38666: PUSH
38667: LD_EXP 120
38671: PUSH
38672: LD_VAR 0 6
38676: ARRAY
38677: PUSH
38678: LD_VAR 0 5
38682: ARRAY
38683: PUSH
38684: LD_INT 2
38686: ARRAY
38687: PUSH
38688: LD_VAR 0 3
38692: EQUAL
38693: AND
38694: IFFALSE 38797
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38696: LD_EXP 120
38700: PUSH
38701: LD_VAR 0 6
38705: ARRAY
38706: PUSH
38707: LD_VAR 0 5
38711: ARRAY
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: PPUSH
38717: LD_EXP 120
38721: PUSH
38722: LD_VAR 0 6
38726: ARRAY
38727: PUSH
38728: LD_VAR 0 5
38732: ARRAY
38733: PUSH
38734: LD_INT 2
38736: ARRAY
38737: PPUSH
38738: LD_VAR 0 1
38742: PPUSH
38743: CALL_OW 255
38747: PPUSH
38748: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38752: LD_ADDR_EXP 120
38756: PUSH
38757: LD_EXP 120
38761: PPUSH
38762: LD_VAR 0 6
38766: PPUSH
38767: LD_EXP 120
38771: PUSH
38772: LD_VAR 0 6
38776: ARRAY
38777: PPUSH
38778: LD_VAR 0 5
38782: PPUSH
38783: CALL_OW 3
38787: PPUSH
38788: CALL_OW 1
38792: ST_TO_ADDR
// exit ;
38793: POP
38794: POP
38795: GO 38988
// end ; end ;
38797: GO 38637
38799: POP
38800: POP
// for i := minerMinesList [ index ] downto 1 do
38801: LD_ADDR_VAR 0 5
38805: PUSH
38806: DOUBLE
38807: LD_EXP 120
38811: PUSH
38812: LD_VAR 0 6
38816: ARRAY
38817: INC
38818: ST_TO_ADDR
38819: LD_INT 1
38821: PUSH
38822: FOR_DOWNTO
38823: IFFALSE 38986
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38825: LD_EXP 120
38829: PUSH
38830: LD_VAR 0 6
38834: ARRAY
38835: PUSH
38836: LD_VAR 0 5
38840: ARRAY
38841: PUSH
38842: LD_INT 1
38844: ARRAY
38845: PPUSH
38846: LD_EXP 120
38850: PUSH
38851: LD_VAR 0 6
38855: ARRAY
38856: PUSH
38857: LD_VAR 0 5
38861: ARRAY
38862: PUSH
38863: LD_INT 2
38865: ARRAY
38866: PPUSH
38867: LD_VAR 0 2
38871: PPUSH
38872: LD_VAR 0 3
38876: PPUSH
38877: CALL_OW 298
38881: PUSH
38882: LD_INT 6
38884: LESS
38885: IFFALSE 38984
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38887: LD_EXP 120
38891: PUSH
38892: LD_VAR 0 6
38896: ARRAY
38897: PUSH
38898: LD_VAR 0 5
38902: ARRAY
38903: PUSH
38904: LD_INT 1
38906: ARRAY
38907: PPUSH
38908: LD_EXP 120
38912: PUSH
38913: LD_VAR 0 6
38917: ARRAY
38918: PUSH
38919: LD_VAR 0 5
38923: ARRAY
38924: PUSH
38925: LD_INT 2
38927: ARRAY
38928: PPUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: CALL_OW 255
38938: PPUSH
38939: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38943: LD_ADDR_EXP 120
38947: PUSH
38948: LD_EXP 120
38952: PPUSH
38953: LD_VAR 0 6
38957: PPUSH
38958: LD_EXP 120
38962: PUSH
38963: LD_VAR 0 6
38967: ARRAY
38968: PPUSH
38969: LD_VAR 0 5
38973: PPUSH
38974: CALL_OW 3
38978: PPUSH
38979: CALL_OW 1
38983: ST_TO_ADDR
// end ; end ;
38984: GO 38822
38986: POP
38987: POP
// end ;
38988: LD_VAR 0 4
38992: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38993: LD_INT 0
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL_OW 264
39013: PUSH
39014: LD_INT 81
39016: EQUAL
39017: NOT
39018: PUSH
39019: LD_VAR 0 1
39023: PUSH
39024: LD_EXP 119
39028: IN
39029: NOT
39030: OR
39031: IFFALSE 39035
// exit ;
39033: GO 39357
// index := GetElementIndex ( minersList , unit ) ;
39035: LD_ADDR_VAR 0 6
39039: PUSH
39040: LD_EXP 119
39044: PPUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL 44529 0 2
39054: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39055: LD_ADDR_VAR 0 8
39059: PUSH
39060: LD_EXP 121
39064: PUSH
39065: LD_EXP 120
39069: PUSH
39070: LD_VAR 0 6
39074: ARRAY
39075: MINUS
39076: ST_TO_ADDR
// if not minesFreeAmount then
39077: LD_VAR 0 8
39081: NOT
39082: IFFALSE 39086
// exit ;
39084: GO 39357
// tmp := [ ] ;
39086: LD_ADDR_VAR 0 7
39090: PUSH
39091: EMPTY
39092: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39093: LD_ADDR_VAR 0 5
39097: PUSH
39098: DOUBLE
39099: LD_INT 1
39101: DEC
39102: ST_TO_ADDR
39103: LD_VAR 0 8
39107: PUSH
39108: FOR_TO
39109: IFFALSE 39304
// begin _d := rand ( 0 , 5 ) ;
39111: LD_ADDR_VAR 0 11
39115: PUSH
39116: LD_INT 0
39118: PPUSH
39119: LD_INT 5
39121: PPUSH
39122: CALL_OW 12
39126: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39127: LD_ADDR_VAR 0 12
39131: PUSH
39132: LD_INT 2
39134: PPUSH
39135: LD_INT 6
39137: PPUSH
39138: CALL_OW 12
39142: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39143: LD_ADDR_VAR 0 9
39147: PUSH
39148: LD_VAR 0 2
39152: PPUSH
39153: LD_VAR 0 11
39157: PPUSH
39158: LD_VAR 0 12
39162: PPUSH
39163: CALL_OW 272
39167: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39168: LD_ADDR_VAR 0 10
39172: PUSH
39173: LD_VAR 0 3
39177: PPUSH
39178: LD_VAR 0 11
39182: PPUSH
39183: LD_VAR 0 12
39187: PPUSH
39188: CALL_OW 273
39192: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39193: LD_VAR 0 9
39197: PPUSH
39198: LD_VAR 0 10
39202: PPUSH
39203: CALL_OW 488
39207: PUSH
39208: LD_VAR 0 9
39212: PUSH
39213: LD_VAR 0 10
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_VAR 0 7
39226: IN
39227: NOT
39228: AND
39229: PUSH
39230: LD_VAR 0 9
39234: PPUSH
39235: LD_VAR 0 10
39239: PPUSH
39240: CALL_OW 458
39244: NOT
39245: AND
39246: IFFALSE 39288
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39248: LD_ADDR_VAR 0 7
39252: PUSH
39253: LD_VAR 0 7
39257: PPUSH
39258: LD_VAR 0 7
39262: PUSH
39263: LD_INT 1
39265: PLUS
39266: PPUSH
39267: LD_VAR 0 9
39271: PUSH
39272: LD_VAR 0 10
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PPUSH
39281: CALL_OW 1
39285: ST_TO_ADDR
39286: GO 39302
// i := i - 1 ;
39288: LD_ADDR_VAR 0 5
39292: PUSH
39293: LD_VAR 0 5
39297: PUSH
39298: LD_INT 1
39300: MINUS
39301: ST_TO_ADDR
// end ;
39302: GO 39108
39304: POP
39305: POP
// for i in tmp do
39306: LD_ADDR_VAR 0 5
39310: PUSH
39311: LD_VAR 0 7
39315: PUSH
39316: FOR_IN
39317: IFFALSE 39355
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39319: LD_VAR 0 1
39323: PPUSH
39324: LD_VAR 0 5
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: PPUSH
39333: LD_VAR 0 5
39337: PUSH
39338: LD_INT 2
39340: ARRAY
39341: PPUSH
39342: CALL 38301 0 3
39346: NOT
39347: IFFALSE 39353
// exit ;
39349: POP
39350: POP
39351: GO 39357
39353: GO 39316
39355: POP
39356: POP
// end ;
39357: LD_VAR 0 4
39361: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39362: LD_INT 0
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
39370: PPUSH
// if not GetClass ( unit ) = class_sniper then
39371: LD_VAR 0 1
39375: PPUSH
39376: CALL_OW 257
39380: PUSH
39381: LD_INT 5
39383: EQUAL
39384: NOT
39385: IFFALSE 39389
// exit ;
39387: GO 39777
// dist := 8 ;
39389: LD_ADDR_VAR 0 5
39393: PUSH
39394: LD_INT 8
39396: ST_TO_ADDR
// viewRange := 12 ;
39397: LD_ADDR_VAR 0 7
39401: PUSH
39402: LD_INT 12
39404: ST_TO_ADDR
// side := GetSide ( unit ) ;
39405: LD_ADDR_VAR 0 6
39409: PUSH
39410: LD_VAR 0 1
39414: PPUSH
39415: CALL_OW 255
39419: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39420: LD_INT 61
39422: PPUSH
39423: LD_VAR 0 6
39427: PPUSH
39428: CALL_OW 321
39432: PUSH
39433: LD_INT 2
39435: EQUAL
39436: IFFALSE 39446
// viewRange := 16 ;
39438: LD_ADDR_VAR 0 7
39442: PUSH
39443: LD_INT 16
39445: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39446: LD_VAR 0 1
39450: PPUSH
39451: LD_VAR 0 2
39455: PPUSH
39456: LD_VAR 0 3
39460: PPUSH
39461: CALL_OW 297
39465: PUSH
39466: LD_VAR 0 5
39470: GREATER
39471: IFFALSE 39550
// begin ComMoveXY ( unit , x , y ) ;
39473: LD_VAR 0 1
39477: PPUSH
39478: LD_VAR 0 2
39482: PPUSH
39483: LD_VAR 0 3
39487: PPUSH
39488: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39492: LD_INT 35
39494: PPUSH
39495: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39499: LD_VAR 0 1
39503: PPUSH
39504: LD_VAR 0 2
39508: PPUSH
39509: LD_VAR 0 3
39513: PPUSH
39514: CALL 75884 0 3
39518: NOT
39519: IFFALSE 39523
// exit ;
39521: GO 39777
// until GetDistUnitXY ( unit , x , y ) < dist ;
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_VAR 0 3
39537: PPUSH
39538: CALL_OW 297
39542: PUSH
39543: LD_VAR 0 5
39547: LESS
39548: IFFALSE 39492
// end ; ComTurnXY ( unit , x , y ) ;
39550: LD_VAR 0 1
39554: PPUSH
39555: LD_VAR 0 2
39559: PPUSH
39560: LD_VAR 0 3
39564: PPUSH
39565: CALL_OW 118
// wait ( 5 ) ;
39569: LD_INT 5
39571: PPUSH
39572: CALL_OW 67
// _d := GetDir ( unit ) ;
39576: LD_ADDR_VAR 0 10
39580: PUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL_OW 254
39590: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39591: LD_ADDR_VAR 0 8
39595: PUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: CALL_OW 250
39605: PPUSH
39606: LD_VAR 0 10
39610: PPUSH
39611: LD_VAR 0 5
39615: PPUSH
39616: CALL_OW 272
39620: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39621: LD_ADDR_VAR 0 9
39625: PUSH
39626: LD_VAR 0 1
39630: PPUSH
39631: CALL_OW 251
39635: PPUSH
39636: LD_VAR 0 10
39640: PPUSH
39641: LD_VAR 0 5
39645: PPUSH
39646: CALL_OW 273
39650: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39651: LD_VAR 0 8
39655: PPUSH
39656: LD_VAR 0 9
39660: PPUSH
39661: CALL_OW 488
39665: NOT
39666: IFFALSE 39670
// exit ;
39668: GO 39777
// ComAnimCustom ( unit , 1 ) ;
39670: LD_VAR 0 1
39674: PPUSH
39675: LD_INT 1
39677: PPUSH
39678: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39682: LD_VAR 0 8
39686: PPUSH
39687: LD_VAR 0 9
39691: PPUSH
39692: LD_VAR 0 6
39696: PPUSH
39697: LD_VAR 0 7
39701: PPUSH
39702: CALL_OW 330
// repeat wait ( 1 ) ;
39706: LD_INT 1
39708: PPUSH
39709: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39713: LD_VAR 0 1
39717: PPUSH
39718: CALL_OW 316
39722: PUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 314
39732: OR
39733: PUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 302
39743: NOT
39744: OR
39745: PUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL_OW 301
39755: OR
39756: IFFALSE 39706
// RemoveSeeing ( _x , _y , side ) ;
39758: LD_VAR 0 8
39762: PPUSH
39763: LD_VAR 0 9
39767: PPUSH
39768: LD_VAR 0 6
39772: PPUSH
39773: CALL_OW 331
// end ; end_of_file
39777: LD_VAR 0 4
39781: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39782: LD_INT 0
39784: PPUSH
39785: PPUSH
// if exist_mode then
39786: LD_VAR 0 2
39790: IFFALSE 39815
// unit := CreateCharacter ( prefix & ident ) else
39792: LD_ADDR_VAR 0 5
39796: PUSH
39797: LD_VAR 0 3
39801: PUSH
39802: LD_VAR 0 1
39806: STR
39807: PPUSH
39808: CALL_OW 34
39812: ST_TO_ADDR
39813: GO 39830
// unit := NewCharacter ( ident ) ;
39815: LD_ADDR_VAR 0 5
39819: PUSH
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 25
39829: ST_TO_ADDR
// result := unit ;
39830: LD_ADDR_VAR 0 4
39834: PUSH
39835: LD_VAR 0 5
39839: ST_TO_ADDR
// end ;
39840: LD_VAR 0 4
39844: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39845: LD_INT 0
39847: PPUSH
39848: PPUSH
// if not side or not nation then
39849: LD_VAR 0 1
39853: NOT
39854: PUSH
39855: LD_VAR 0 2
39859: NOT
39860: OR
39861: IFFALSE 39865
// exit ;
39863: GO 40633
// case nation of nation_american :
39865: LD_VAR 0 2
39869: PUSH
39870: LD_INT 1
39872: DOUBLE
39873: EQUAL
39874: IFTRUE 39878
39876: GO 40092
39878: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39879: LD_ADDR_VAR 0 4
39883: PUSH
39884: LD_INT 35
39886: PUSH
39887: LD_INT 45
39889: PUSH
39890: LD_INT 46
39892: PUSH
39893: LD_INT 47
39895: PUSH
39896: LD_INT 82
39898: PUSH
39899: LD_INT 83
39901: PUSH
39902: LD_INT 84
39904: PUSH
39905: LD_INT 85
39907: PUSH
39908: LD_INT 86
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 6
39919: PUSH
39920: LD_INT 15
39922: PUSH
39923: LD_INT 16
39925: PUSH
39926: LD_INT 7
39928: PUSH
39929: LD_INT 12
39931: PUSH
39932: LD_INT 13
39934: PUSH
39935: LD_INT 10
39937: PUSH
39938: LD_INT 14
39940: PUSH
39941: LD_INT 20
39943: PUSH
39944: LD_INT 21
39946: PUSH
39947: LD_INT 22
39949: PUSH
39950: LD_INT 25
39952: PUSH
39953: LD_INT 32
39955: PUSH
39956: LD_INT 27
39958: PUSH
39959: LD_INT 36
39961: PUSH
39962: LD_INT 69
39964: PUSH
39965: LD_INT 39
39967: PUSH
39968: LD_INT 34
39970: PUSH
39971: LD_INT 40
39973: PUSH
39974: LD_INT 48
39976: PUSH
39977: LD_INT 49
39979: PUSH
39980: LD_INT 50
39982: PUSH
39983: LD_INT 51
39985: PUSH
39986: LD_INT 52
39988: PUSH
39989: LD_INT 53
39991: PUSH
39992: LD_INT 54
39994: PUSH
39995: LD_INT 55
39997: PUSH
39998: LD_INT 56
40000: PUSH
40001: LD_INT 57
40003: PUSH
40004: LD_INT 58
40006: PUSH
40007: LD_INT 59
40009: PUSH
40010: LD_INT 60
40012: PUSH
40013: LD_INT 61
40015: PUSH
40016: LD_INT 62
40018: PUSH
40019: LD_INT 80
40021: PUSH
40022: LD_INT 82
40024: PUSH
40025: LD_INT 83
40027: PUSH
40028: LD_INT 84
40030: PUSH
40031: LD_INT 85
40033: PUSH
40034: LD_INT 86
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: ST_TO_ADDR
40090: GO 40557
40092: LD_INT 2
40094: DOUBLE
40095: EQUAL
40096: IFTRUE 40100
40098: GO 40326
40100: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40101: LD_ADDR_VAR 0 4
40105: PUSH
40106: LD_INT 35
40108: PUSH
40109: LD_INT 45
40111: PUSH
40112: LD_INT 46
40114: PUSH
40115: LD_INT 47
40117: PUSH
40118: LD_INT 82
40120: PUSH
40121: LD_INT 83
40123: PUSH
40124: LD_INT 84
40126: PUSH
40127: LD_INT 85
40129: PUSH
40130: LD_INT 87
40132: PUSH
40133: LD_INT 70
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 11
40141: PUSH
40142: LD_INT 3
40144: PUSH
40145: LD_INT 4
40147: PUSH
40148: LD_INT 5
40150: PUSH
40151: LD_INT 6
40153: PUSH
40154: LD_INT 15
40156: PUSH
40157: LD_INT 18
40159: PUSH
40160: LD_INT 7
40162: PUSH
40163: LD_INT 17
40165: PUSH
40166: LD_INT 8
40168: PUSH
40169: LD_INT 20
40171: PUSH
40172: LD_INT 21
40174: PUSH
40175: LD_INT 22
40177: PUSH
40178: LD_INT 72
40180: PUSH
40181: LD_INT 26
40183: PUSH
40184: LD_INT 69
40186: PUSH
40187: LD_INT 39
40189: PUSH
40190: LD_INT 40
40192: PUSH
40193: LD_INT 41
40195: PUSH
40196: LD_INT 42
40198: PUSH
40199: LD_INT 43
40201: PUSH
40202: LD_INT 48
40204: PUSH
40205: LD_INT 49
40207: PUSH
40208: LD_INT 50
40210: PUSH
40211: LD_INT 51
40213: PUSH
40214: LD_INT 52
40216: PUSH
40217: LD_INT 53
40219: PUSH
40220: LD_INT 54
40222: PUSH
40223: LD_INT 55
40225: PUSH
40226: LD_INT 56
40228: PUSH
40229: LD_INT 60
40231: PUSH
40232: LD_INT 61
40234: PUSH
40235: LD_INT 62
40237: PUSH
40238: LD_INT 66
40240: PUSH
40241: LD_INT 67
40243: PUSH
40244: LD_INT 68
40246: PUSH
40247: LD_INT 81
40249: PUSH
40250: LD_INT 82
40252: PUSH
40253: LD_INT 83
40255: PUSH
40256: LD_INT 84
40258: PUSH
40259: LD_INT 85
40261: PUSH
40262: LD_INT 87
40264: PUSH
40265: LD_INT 88
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: ST_TO_ADDR
40324: GO 40557
40326: LD_INT 3
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40556
40334: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40335: LD_ADDR_VAR 0 4
40339: PUSH
40340: LD_INT 46
40342: PUSH
40343: LD_INT 47
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 82
40354: PUSH
40355: LD_INT 83
40357: PUSH
40358: LD_INT 84
40360: PUSH
40361: LD_INT 85
40363: PUSH
40364: LD_INT 86
40366: PUSH
40367: LD_INT 11
40369: PUSH
40370: LD_INT 9
40372: PUSH
40373: LD_INT 20
40375: PUSH
40376: LD_INT 19
40378: PUSH
40379: LD_INT 21
40381: PUSH
40382: LD_INT 24
40384: PUSH
40385: LD_INT 22
40387: PUSH
40388: LD_INT 25
40390: PUSH
40391: LD_INT 28
40393: PUSH
40394: LD_INT 29
40396: PUSH
40397: LD_INT 30
40399: PUSH
40400: LD_INT 31
40402: PUSH
40403: LD_INT 37
40405: PUSH
40406: LD_INT 38
40408: PUSH
40409: LD_INT 32
40411: PUSH
40412: LD_INT 27
40414: PUSH
40415: LD_INT 33
40417: PUSH
40418: LD_INT 69
40420: PUSH
40421: LD_INT 39
40423: PUSH
40424: LD_INT 34
40426: PUSH
40427: LD_INT 40
40429: PUSH
40430: LD_INT 71
40432: PUSH
40433: LD_INT 23
40435: PUSH
40436: LD_INT 44
40438: PUSH
40439: LD_INT 48
40441: PUSH
40442: LD_INT 49
40444: PUSH
40445: LD_INT 50
40447: PUSH
40448: LD_INT 51
40450: PUSH
40451: LD_INT 52
40453: PUSH
40454: LD_INT 53
40456: PUSH
40457: LD_INT 54
40459: PUSH
40460: LD_INT 55
40462: PUSH
40463: LD_INT 56
40465: PUSH
40466: LD_INT 57
40468: PUSH
40469: LD_INT 58
40471: PUSH
40472: LD_INT 59
40474: PUSH
40475: LD_INT 63
40477: PUSH
40478: LD_INT 64
40480: PUSH
40481: LD_INT 65
40483: PUSH
40484: LD_INT 82
40486: PUSH
40487: LD_INT 83
40489: PUSH
40490: LD_INT 84
40492: PUSH
40493: LD_INT 85
40495: PUSH
40496: LD_INT 86
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
40554: GO 40557
40556: POP
// if state > - 1 and state < 3 then
40557: LD_VAR 0 3
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: GREATER
40566: PUSH
40567: LD_VAR 0 3
40571: PUSH
40572: LD_INT 3
40574: LESS
40575: AND
40576: IFFALSE 40633
// for i in result do
40578: LD_ADDR_VAR 0 5
40582: PUSH
40583: LD_VAR 0 4
40587: PUSH
40588: FOR_IN
40589: IFFALSE 40631
// if GetTech ( i , side ) <> state then
40591: LD_VAR 0 5
40595: PPUSH
40596: LD_VAR 0 1
40600: PPUSH
40601: CALL_OW 321
40605: PUSH
40606: LD_VAR 0 3
40610: NONEQUAL
40611: IFFALSE 40629
// result := result diff i ;
40613: LD_ADDR_VAR 0 4
40617: PUSH
40618: LD_VAR 0 4
40622: PUSH
40623: LD_VAR 0 5
40627: DIFF
40628: ST_TO_ADDR
40629: GO 40588
40631: POP
40632: POP
// end ;
40633: LD_VAR 0 4
40637: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40638: LD_INT 0
40640: PPUSH
40641: PPUSH
40642: PPUSH
// result := true ;
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_INT 1
40650: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40651: LD_ADDR_VAR 0 5
40655: PUSH
40656: LD_VAR 0 2
40660: PPUSH
40661: CALL_OW 480
40665: ST_TO_ADDR
// if not tmp then
40666: LD_VAR 0 5
40670: NOT
40671: IFFALSE 40675
// exit ;
40673: GO 40724
// for i in tmp do
40675: LD_ADDR_VAR 0 4
40679: PUSH
40680: LD_VAR 0 5
40684: PUSH
40685: FOR_IN
40686: IFFALSE 40722
// if GetTech ( i , side ) <> state_researched then
40688: LD_VAR 0 4
40692: PPUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 321
40702: PUSH
40703: LD_INT 2
40705: NONEQUAL
40706: IFFALSE 40720
// begin result := false ;
40708: LD_ADDR_VAR 0 3
40712: PUSH
40713: LD_INT 0
40715: ST_TO_ADDR
// exit ;
40716: POP
40717: POP
40718: GO 40724
// end ;
40720: GO 40685
40722: POP
40723: POP
// end ;
40724: LD_VAR 0 3
40728: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40729: LD_INT 0
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40744: LD_VAR 0 1
40748: NOT
40749: PUSH
40750: LD_VAR 0 1
40754: PPUSH
40755: CALL_OW 257
40759: PUSH
40760: LD_INT 9
40762: NONEQUAL
40763: OR
40764: IFFALSE 40768
// exit ;
40766: GO 41341
// side := GetSide ( unit ) ;
40768: LD_ADDR_VAR 0 9
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 255
40782: ST_TO_ADDR
// tech_space := tech_spacanom ;
40783: LD_ADDR_VAR 0 12
40787: PUSH
40788: LD_INT 29
40790: ST_TO_ADDR
// tech_time := tech_taurad ;
40791: LD_ADDR_VAR 0 13
40795: PUSH
40796: LD_INT 28
40798: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40799: LD_ADDR_VAR 0 11
40803: PUSH
40804: LD_VAR 0 1
40808: PPUSH
40809: CALL_OW 310
40813: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40814: LD_VAR 0 11
40818: PPUSH
40819: CALL_OW 247
40823: PUSH
40824: LD_INT 2
40826: EQUAL
40827: IFFALSE 40831
// exit ;
40829: GO 41341
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40831: LD_ADDR_VAR 0 8
40835: PUSH
40836: LD_INT 81
40838: PUSH
40839: LD_VAR 0 9
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 3
40850: PUSH
40851: LD_INT 21
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PPUSH
40869: CALL_OW 69
40873: ST_TO_ADDR
// if not tmp then
40874: LD_VAR 0 8
40878: NOT
40879: IFFALSE 40883
// exit ;
40881: GO 41341
// if in_unit then
40883: LD_VAR 0 11
40887: IFFALSE 40911
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40889: LD_ADDR_VAR 0 10
40893: PUSH
40894: LD_VAR 0 8
40898: PPUSH
40899: LD_VAR 0 11
40903: PPUSH
40904: CALL_OW 74
40908: ST_TO_ADDR
40909: GO 40931
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40911: LD_ADDR_VAR 0 10
40915: PUSH
40916: LD_VAR 0 8
40920: PPUSH
40921: LD_VAR 0 1
40925: PPUSH
40926: CALL_OW 74
40930: ST_TO_ADDR
// if not enemy then
40931: LD_VAR 0 10
40935: NOT
40936: IFFALSE 40940
// exit ;
40938: GO 41341
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40940: LD_VAR 0 11
40944: PUSH
40945: LD_VAR 0 11
40949: PPUSH
40950: LD_VAR 0 10
40954: PPUSH
40955: CALL_OW 296
40959: PUSH
40960: LD_INT 13
40962: GREATER
40963: AND
40964: PUSH
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_VAR 0 10
40974: PPUSH
40975: CALL_OW 296
40979: PUSH
40980: LD_INT 12
40982: GREATER
40983: OR
40984: IFFALSE 40988
// exit ;
40986: GO 41341
// missile := [ 1 ] ;
40988: LD_ADDR_VAR 0 14
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40999: LD_VAR 0 9
41003: PPUSH
41004: LD_VAR 0 12
41008: PPUSH
41009: CALL_OW 325
41013: IFFALSE 41042
// missile := Replace ( missile , missile + 1 , 2 ) ;
41015: LD_ADDR_VAR 0 14
41019: PUSH
41020: LD_VAR 0 14
41024: PPUSH
41025: LD_VAR 0 14
41029: PUSH
41030: LD_INT 1
41032: PLUS
41033: PPUSH
41034: LD_INT 2
41036: PPUSH
41037: CALL_OW 1
41041: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41042: LD_VAR 0 9
41046: PPUSH
41047: LD_VAR 0 13
41051: PPUSH
41052: CALL_OW 325
41056: PUSH
41057: LD_VAR 0 10
41061: PPUSH
41062: CALL_OW 255
41066: PPUSH
41067: LD_VAR 0 13
41071: PPUSH
41072: CALL_OW 325
41076: NOT
41077: AND
41078: IFFALSE 41107
// missile := Replace ( missile , missile + 1 , 3 ) ;
41080: LD_ADDR_VAR 0 14
41084: PUSH
41085: LD_VAR 0 14
41089: PPUSH
41090: LD_VAR 0 14
41094: PUSH
41095: LD_INT 1
41097: PLUS
41098: PPUSH
41099: LD_INT 3
41101: PPUSH
41102: CALL_OW 1
41106: ST_TO_ADDR
// if missile < 2 then
41107: LD_VAR 0 14
41111: PUSH
41112: LD_INT 2
41114: LESS
41115: IFFALSE 41119
// exit ;
41117: GO 41341
// x := GetX ( enemy ) ;
41119: LD_ADDR_VAR 0 4
41123: PUSH
41124: LD_VAR 0 10
41128: PPUSH
41129: CALL_OW 250
41133: ST_TO_ADDR
// y := GetY ( enemy ) ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_VAR 0 10
41143: PPUSH
41144: CALL_OW 251
41148: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41149: LD_ADDR_VAR 0 6
41153: PUSH
41154: LD_VAR 0 4
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PPUSH
41163: LD_INT 1
41165: PPUSH
41166: CALL_OW 12
41170: PLUS
41171: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41172: LD_ADDR_VAR 0 7
41176: PUSH
41177: LD_VAR 0 5
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PPUSH
41186: LD_INT 1
41188: PPUSH
41189: CALL_OW 12
41193: PLUS
41194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41195: LD_VAR 0 6
41199: PPUSH
41200: LD_VAR 0 7
41204: PPUSH
41205: CALL_OW 488
41209: NOT
41210: IFFALSE 41232
// begin _x := x ;
41212: LD_ADDR_VAR 0 6
41216: PUSH
41217: LD_VAR 0 4
41221: ST_TO_ADDR
// _y := y ;
41222: LD_ADDR_VAR 0 7
41226: PUSH
41227: LD_VAR 0 5
41231: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41232: LD_ADDR_VAR 0 3
41236: PUSH
41237: LD_INT 1
41239: PPUSH
41240: LD_VAR 0 14
41244: PPUSH
41245: CALL_OW 12
41249: ST_TO_ADDR
// case i of 1 :
41250: LD_VAR 0 3
41254: PUSH
41255: LD_INT 1
41257: DOUBLE
41258: EQUAL
41259: IFTRUE 41263
41261: GO 41280
41263: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41264: LD_VAR 0 1
41268: PPUSH
41269: LD_VAR 0 10
41273: PPUSH
41274: CALL_OW 115
41278: GO 41341
41280: LD_INT 2
41282: DOUBLE
41283: EQUAL
41284: IFTRUE 41288
41286: GO 41310
41288: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41289: LD_VAR 0 1
41293: PPUSH
41294: LD_VAR 0 6
41298: PPUSH
41299: LD_VAR 0 7
41303: PPUSH
41304: CALL_OW 153
41308: GO 41341
41310: LD_INT 3
41312: DOUBLE
41313: EQUAL
41314: IFTRUE 41318
41316: GO 41340
41318: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41319: LD_VAR 0 1
41323: PPUSH
41324: LD_VAR 0 6
41328: PPUSH
41329: LD_VAR 0 7
41333: PPUSH
41334: CALL_OW 154
41338: GO 41341
41340: POP
// end ;
41341: LD_VAR 0 2
41345: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41346: LD_INT 0
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
// if not unit or not building then
41354: LD_VAR 0 1
41358: NOT
41359: PUSH
41360: LD_VAR 0 2
41364: NOT
41365: OR
41366: IFFALSE 41370
// exit ;
41368: GO 41528
// x := GetX ( building ) ;
41370: LD_ADDR_VAR 0 5
41374: PUSH
41375: LD_VAR 0 2
41379: PPUSH
41380: CALL_OW 250
41384: ST_TO_ADDR
// y := GetY ( building ) ;
41385: LD_ADDR_VAR 0 6
41389: PUSH
41390: LD_VAR 0 2
41394: PPUSH
41395: CALL_OW 251
41399: ST_TO_ADDR
// for i = 0 to 5 do
41400: LD_ADDR_VAR 0 4
41404: PUSH
41405: DOUBLE
41406: LD_INT 0
41408: DEC
41409: ST_TO_ADDR
41410: LD_INT 5
41412: PUSH
41413: FOR_TO
41414: IFFALSE 41526
// begin _x := ShiftX ( x , i , 3 ) ;
41416: LD_ADDR_VAR 0 7
41420: PUSH
41421: LD_VAR 0 5
41425: PPUSH
41426: LD_VAR 0 4
41430: PPUSH
41431: LD_INT 3
41433: PPUSH
41434: CALL_OW 272
41438: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41439: LD_ADDR_VAR 0 8
41443: PUSH
41444: LD_VAR 0 6
41448: PPUSH
41449: LD_VAR 0 4
41453: PPUSH
41454: LD_INT 3
41456: PPUSH
41457: CALL_OW 273
41461: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41462: LD_VAR 0 7
41466: PPUSH
41467: LD_VAR 0 8
41471: PPUSH
41472: CALL_OW 488
41476: NOT
41477: IFFALSE 41481
// continue ;
41479: GO 41413
// if HexInfo ( _x , _y ) = 0 then
41481: LD_VAR 0 7
41485: PPUSH
41486: LD_VAR 0 8
41490: PPUSH
41491: CALL_OW 428
41495: PUSH
41496: LD_INT 0
41498: EQUAL
41499: IFFALSE 41524
// begin ComMoveXY ( unit , _x , _y ) ;
41501: LD_VAR 0 1
41505: PPUSH
41506: LD_VAR 0 7
41510: PPUSH
41511: LD_VAR 0 8
41515: PPUSH
41516: CALL_OW 111
// exit ;
41520: POP
41521: POP
41522: GO 41528
// end ; end ;
41524: GO 41413
41526: POP
41527: POP
// end ;
41528: LD_VAR 0 3
41532: RET
// export function ScanBase ( side , base_area ) ; begin
41533: LD_INT 0
41535: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41536: LD_ADDR_VAR 0 3
41540: PUSH
41541: LD_VAR 0 2
41545: PPUSH
41546: LD_INT 81
41548: PUSH
41549: LD_VAR 0 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PPUSH
41558: CALL_OW 70
41562: ST_TO_ADDR
// end ;
41563: LD_VAR 0 3
41567: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41568: LD_INT 0
41570: PPUSH
41571: PPUSH
41572: PPUSH
41573: PPUSH
// result := false ;
41574: LD_ADDR_VAR 0 2
41578: PUSH
41579: LD_INT 0
41581: ST_TO_ADDR
// side := GetSide ( unit ) ;
41582: LD_ADDR_VAR 0 3
41586: PUSH
41587: LD_VAR 0 1
41591: PPUSH
41592: CALL_OW 255
41596: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41597: LD_ADDR_VAR 0 4
41601: PUSH
41602: LD_VAR 0 1
41606: PPUSH
41607: CALL_OW 248
41611: ST_TO_ADDR
// case nat of 1 :
41612: LD_VAR 0 4
41616: PUSH
41617: LD_INT 1
41619: DOUBLE
41620: EQUAL
41621: IFTRUE 41625
41623: GO 41636
41625: POP
// tech := tech_lassight ; 2 :
41626: LD_ADDR_VAR 0 5
41630: PUSH
41631: LD_INT 12
41633: ST_TO_ADDR
41634: GO 41675
41636: LD_INT 2
41638: DOUBLE
41639: EQUAL
41640: IFTRUE 41644
41642: GO 41655
41644: POP
// tech := tech_mortar ; 3 :
41645: LD_ADDR_VAR 0 5
41649: PUSH
41650: LD_INT 41
41652: ST_TO_ADDR
41653: GO 41675
41655: LD_INT 3
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41663
41661: GO 41674
41663: POP
// tech := tech_bazooka ; end ;
41664: LD_ADDR_VAR 0 5
41668: PUSH
41669: LD_INT 44
41671: ST_TO_ADDR
41672: GO 41675
41674: POP
// if Researched ( side , tech ) then
41675: LD_VAR 0 3
41679: PPUSH
41680: LD_VAR 0 5
41684: PPUSH
41685: CALL_OW 325
41689: IFFALSE 41716
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41691: LD_ADDR_VAR 0 2
41695: PUSH
41696: LD_INT 5
41698: PUSH
41699: LD_INT 8
41701: PUSH
41702: LD_INT 9
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: LIST
41709: PUSH
41710: LD_VAR 0 4
41714: ARRAY
41715: ST_TO_ADDR
// end ;
41716: LD_VAR 0 2
41720: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41721: LD_INT 0
41723: PPUSH
41724: PPUSH
41725: PPUSH
// if not mines then
41726: LD_VAR 0 2
41730: NOT
41731: IFFALSE 41735
// exit ;
41733: GO 41879
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41735: LD_ADDR_VAR 0 5
41739: PUSH
41740: LD_INT 81
41742: PUSH
41743: LD_VAR 0 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: LD_INT 21
41757: PUSH
41758: LD_INT 3
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PPUSH
41773: CALL_OW 69
41777: ST_TO_ADDR
// for i in mines do
41778: LD_ADDR_VAR 0 4
41782: PUSH
41783: LD_VAR 0 2
41787: PUSH
41788: FOR_IN
41789: IFFALSE 41877
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41791: LD_VAR 0 4
41795: PUSH
41796: LD_INT 1
41798: ARRAY
41799: PPUSH
41800: LD_VAR 0 4
41804: PUSH
41805: LD_INT 2
41807: ARRAY
41808: PPUSH
41809: CALL_OW 458
41813: NOT
41814: IFFALSE 41818
// continue ;
41816: GO 41788
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41818: LD_VAR 0 4
41822: PUSH
41823: LD_INT 1
41825: ARRAY
41826: PPUSH
41827: LD_VAR 0 4
41831: PUSH
41832: LD_INT 2
41834: ARRAY
41835: PPUSH
41836: CALL_OW 428
41840: PUSH
41841: LD_VAR 0 5
41845: IN
41846: IFFALSE 41875
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41848: LD_VAR 0 4
41852: PUSH
41853: LD_INT 1
41855: ARRAY
41856: PPUSH
41857: LD_VAR 0 4
41861: PUSH
41862: LD_INT 2
41864: ARRAY
41865: PPUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 456
// end ;
41875: GO 41788
41877: POP
41878: POP
// end ;
41879: LD_VAR 0 3
41883: RET
// export function Count ( array ) ; begin
41884: LD_INT 0
41886: PPUSH
// result := array + 0 ;
41887: LD_ADDR_VAR 0 2
41891: PUSH
41892: LD_VAR 0 1
41896: PUSH
41897: LD_INT 0
41899: PLUS
41900: ST_TO_ADDR
// end ;
41901: LD_VAR 0 2
41905: RET
// export function IsEmpty ( building ) ; begin
41906: LD_INT 0
41908: PPUSH
// if not building then
41909: LD_VAR 0 1
41913: NOT
41914: IFFALSE 41918
// exit ;
41916: GO 41961
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41918: LD_ADDR_VAR 0 2
41922: PUSH
41923: LD_VAR 0 1
41927: PUSH
41928: LD_INT 22
41930: PUSH
41931: LD_VAR 0 1
41935: PPUSH
41936: CALL_OW 255
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 58
41947: PUSH
41948: EMPTY
41949: LIST
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PPUSH
41955: CALL_OW 69
41959: IN
41960: ST_TO_ADDR
// end ;
41961: LD_VAR 0 2
41965: RET
// export function IsNotFull ( building ) ; var places ; begin
41966: LD_INT 0
41968: PPUSH
41969: PPUSH
// if not building then
41970: LD_VAR 0 1
41974: NOT
41975: IFFALSE 41979
// exit ;
41977: GO 42007
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41979: LD_ADDR_VAR 0 2
41983: PUSH
41984: LD_VAR 0 1
41988: PPUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 62
41994: PUSH
41995: EMPTY
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PPUSH
42002: CALL_OW 72
42006: ST_TO_ADDR
// end ;
42007: LD_VAR 0 2
42011: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42012: LD_INT 0
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
// tmp := [ ] ;
42018: LD_ADDR_VAR 0 3
42022: PUSH
42023: EMPTY
42024: ST_TO_ADDR
// list := [ ] ;
42025: LD_ADDR_VAR 0 5
42029: PUSH
42030: EMPTY
42031: ST_TO_ADDR
// for i = 16 to 25 do
42032: LD_ADDR_VAR 0 4
42036: PUSH
42037: DOUBLE
42038: LD_INT 16
42040: DEC
42041: ST_TO_ADDR
42042: LD_INT 25
42044: PUSH
42045: FOR_TO
42046: IFFALSE 42119
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_VAR 0 3
42057: PUSH
42058: LD_INT 22
42060: PUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: CALL_OW 255
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 91
42077: PUSH
42078: LD_VAR 0 1
42082: PUSH
42083: LD_INT 6
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 30
42093: PUSH
42094: LD_VAR 0 4
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: PUSH
42108: EMPTY
42109: LIST
42110: PPUSH
42111: CALL_OW 69
42115: ADD
42116: ST_TO_ADDR
42117: GO 42045
42119: POP
42120: POP
// for i = 1 to tmp do
42121: LD_ADDR_VAR 0 4
42125: PUSH
42126: DOUBLE
42127: LD_INT 1
42129: DEC
42130: ST_TO_ADDR
42131: LD_VAR 0 3
42135: PUSH
42136: FOR_TO
42137: IFFALSE 42225
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42139: LD_ADDR_VAR 0 5
42143: PUSH
42144: LD_VAR 0 5
42148: PUSH
42149: LD_VAR 0 3
42153: PUSH
42154: LD_VAR 0 4
42158: ARRAY
42159: PPUSH
42160: CALL_OW 266
42164: PUSH
42165: LD_VAR 0 3
42169: PUSH
42170: LD_VAR 0 4
42174: ARRAY
42175: PPUSH
42176: CALL_OW 250
42180: PUSH
42181: LD_VAR 0 3
42185: PUSH
42186: LD_VAR 0 4
42190: ARRAY
42191: PPUSH
42192: CALL_OW 251
42196: PUSH
42197: LD_VAR 0 3
42201: PUSH
42202: LD_VAR 0 4
42206: ARRAY
42207: PPUSH
42208: CALL_OW 254
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: ADD
42222: ST_TO_ADDR
42223: GO 42136
42225: POP
42226: POP
// result := list ;
42227: LD_ADDR_VAR 0 2
42231: PUSH
42232: LD_VAR 0 5
42236: ST_TO_ADDR
// end ;
42237: LD_VAR 0 2
42241: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42242: LD_INT 0
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
// if not factory then
42251: LD_VAR 0 1
42255: NOT
42256: IFFALSE 42260
// exit ;
42258: GO 42853
// if control = control_apeman then
42260: LD_VAR 0 4
42264: PUSH
42265: LD_INT 5
42267: EQUAL
42268: IFFALSE 42377
// begin tmp := UnitsInside ( factory ) ;
42270: LD_ADDR_VAR 0 8
42274: PUSH
42275: LD_VAR 0 1
42279: PPUSH
42280: CALL_OW 313
42284: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42285: LD_VAR 0 8
42289: PPUSH
42290: LD_INT 25
42292: PUSH
42293: LD_INT 12
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PPUSH
42300: CALL_OW 72
42304: NOT
42305: IFFALSE 42315
// control := control_manual ;
42307: LD_ADDR_VAR 0 4
42311: PUSH
42312: LD_INT 1
42314: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42315: LD_ADDR_VAR 0 8
42319: PUSH
42320: LD_VAR 0 1
42324: PPUSH
42325: CALL 42012 0 1
42329: ST_TO_ADDR
// if tmp then
42330: LD_VAR 0 8
42334: IFFALSE 42377
// begin for i in tmp do
42336: LD_ADDR_VAR 0 7
42340: PUSH
42341: LD_VAR 0 8
42345: PUSH
42346: FOR_IN
42347: IFFALSE 42375
// if i [ 1 ] = b_ext_radio then
42349: LD_VAR 0 7
42353: PUSH
42354: LD_INT 1
42356: ARRAY
42357: PUSH
42358: LD_INT 22
42360: EQUAL
42361: IFFALSE 42373
// begin control := control_remote ;
42363: LD_ADDR_VAR 0 4
42367: PUSH
42368: LD_INT 2
42370: ST_TO_ADDR
// break ;
42371: GO 42375
// end ;
42373: GO 42346
42375: POP
42376: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42377: LD_VAR 0 1
42381: PPUSH
42382: LD_VAR 0 2
42386: PPUSH
42387: LD_VAR 0 3
42391: PPUSH
42392: LD_VAR 0 4
42396: PPUSH
42397: LD_VAR 0 5
42401: PPUSH
42402: CALL_OW 448
42406: IFFALSE 42441
// begin result := [ chassis , engine , control , weapon ] ;
42408: LD_ADDR_VAR 0 6
42412: PUSH
42413: LD_VAR 0 2
42417: PUSH
42418: LD_VAR 0 3
42422: PUSH
42423: LD_VAR 0 4
42427: PUSH
42428: LD_VAR 0 5
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// exit ;
42439: GO 42853
// end ; _chassis := AvailableChassisList ( factory ) ;
42441: LD_ADDR_VAR 0 9
42445: PUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 475
42455: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42456: LD_ADDR_VAR 0 11
42460: PUSH
42461: LD_VAR 0 1
42465: PPUSH
42466: CALL_OW 476
42470: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42471: LD_ADDR_VAR 0 12
42475: PUSH
42476: LD_VAR 0 1
42480: PPUSH
42481: CALL_OW 477
42485: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42486: LD_ADDR_VAR 0 10
42490: PUSH
42491: LD_VAR 0 1
42495: PPUSH
42496: CALL_OW 478
42500: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42501: LD_VAR 0 9
42505: NOT
42506: PUSH
42507: LD_VAR 0 11
42511: NOT
42512: OR
42513: PUSH
42514: LD_VAR 0 12
42518: NOT
42519: OR
42520: PUSH
42521: LD_VAR 0 10
42525: NOT
42526: OR
42527: IFFALSE 42562
// begin result := [ chassis , engine , control , weapon ] ;
42529: LD_ADDR_VAR 0 6
42533: PUSH
42534: LD_VAR 0 2
42538: PUSH
42539: LD_VAR 0 3
42543: PUSH
42544: LD_VAR 0 4
42548: PUSH
42549: LD_VAR 0 5
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: ST_TO_ADDR
// exit ;
42560: GO 42853
// end ; if not chassis in _chassis then
42562: LD_VAR 0 2
42566: PUSH
42567: LD_VAR 0 9
42571: IN
42572: NOT
42573: IFFALSE 42599
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42575: LD_ADDR_VAR 0 2
42579: PUSH
42580: LD_VAR 0 9
42584: PUSH
42585: LD_INT 1
42587: PPUSH
42588: LD_VAR 0 9
42592: PPUSH
42593: CALL_OW 12
42597: ARRAY
42598: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42599: LD_VAR 0 2
42603: PPUSH
42604: LD_VAR 0 3
42608: PPUSH
42609: CALL 42858 0 2
42613: NOT
42614: IFFALSE 42673
// repeat engine := _engine [ 1 ] ;
42616: LD_ADDR_VAR 0 3
42620: PUSH
42621: LD_VAR 0 11
42625: PUSH
42626: LD_INT 1
42628: ARRAY
42629: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42630: LD_ADDR_VAR 0 11
42634: PUSH
42635: LD_VAR 0 11
42639: PPUSH
42640: LD_INT 1
42642: PPUSH
42643: CALL_OW 3
42647: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42648: LD_VAR 0 2
42652: PPUSH
42653: LD_VAR 0 3
42657: PPUSH
42658: CALL 42858 0 2
42662: PUSH
42663: LD_VAR 0 11
42667: PUSH
42668: EMPTY
42669: EQUAL
42670: OR
42671: IFFALSE 42616
// if not control in _control then
42673: LD_VAR 0 4
42677: PUSH
42678: LD_VAR 0 12
42682: IN
42683: NOT
42684: IFFALSE 42710
// control := _control [ rand ( 1 , _control ) ] ;
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_VAR 0 12
42695: PUSH
42696: LD_INT 1
42698: PPUSH
42699: LD_VAR 0 12
42703: PPUSH
42704: CALL_OW 12
42708: ARRAY
42709: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42710: LD_VAR 0 2
42714: PPUSH
42715: LD_VAR 0 5
42719: PPUSH
42720: CALL 43078 0 2
42724: NOT
42725: IFFALSE 42784
// repeat weapon := _weapon [ 1 ] ;
42727: LD_ADDR_VAR 0 5
42731: PUSH
42732: LD_VAR 0 10
42736: PUSH
42737: LD_INT 1
42739: ARRAY
42740: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42741: LD_ADDR_VAR 0 10
42745: PUSH
42746: LD_VAR 0 10
42750: PPUSH
42751: LD_INT 1
42753: PPUSH
42754: CALL_OW 3
42758: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42759: LD_VAR 0 2
42763: PPUSH
42764: LD_VAR 0 5
42768: PPUSH
42769: CALL 43078 0 2
42773: PUSH
42774: LD_VAR 0 10
42778: PUSH
42779: EMPTY
42780: EQUAL
42781: OR
42782: IFFALSE 42727
// result := [ ] ;
42784: LD_ADDR_VAR 0 6
42788: PUSH
42789: EMPTY
42790: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42791: LD_VAR 0 1
42795: PPUSH
42796: LD_VAR 0 2
42800: PPUSH
42801: LD_VAR 0 3
42805: PPUSH
42806: LD_VAR 0 4
42810: PPUSH
42811: LD_VAR 0 5
42815: PPUSH
42816: CALL_OW 448
42820: IFFALSE 42853
// result := [ chassis , engine , control , weapon ] ;
42822: LD_ADDR_VAR 0 6
42826: PUSH
42827: LD_VAR 0 2
42831: PUSH
42832: LD_VAR 0 3
42836: PUSH
42837: LD_VAR 0 4
42841: PUSH
42842: LD_VAR 0 5
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
// end ;
42853: LD_VAR 0 6
42857: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42858: LD_INT 0
42860: PPUSH
// if not chassis or not engine then
42861: LD_VAR 0 1
42865: NOT
42866: PUSH
42867: LD_VAR 0 2
42871: NOT
42872: OR
42873: IFFALSE 42877
// exit ;
42875: GO 43073
// case engine of engine_solar :
42877: LD_VAR 0 2
42881: PUSH
42882: LD_INT 2
42884: DOUBLE
42885: EQUAL
42886: IFTRUE 42890
42888: GO 42928
42890: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42891: LD_ADDR_VAR 0 3
42895: PUSH
42896: LD_INT 11
42898: PUSH
42899: LD_INT 12
42901: PUSH
42902: LD_INT 13
42904: PUSH
42905: LD_INT 14
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 3
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
42926: GO 43057
42928: LD_INT 1
42930: DOUBLE
42931: EQUAL
42932: IFTRUE 42936
42934: GO 42998
42936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42937: LD_ADDR_VAR 0 3
42941: PUSH
42942: LD_INT 11
42944: PUSH
42945: LD_INT 12
42947: PUSH
42948: LD_INT 13
42950: PUSH
42951: LD_INT 14
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: LD_INT 3
42962: PUSH
42963: LD_INT 4
42965: PUSH
42966: LD_INT 5
42968: PUSH
42969: LD_INT 21
42971: PUSH
42972: LD_INT 23
42974: PUSH
42975: LD_INT 22
42977: PUSH
42978: LD_INT 24
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
42996: GO 43057
42998: LD_INT 3
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43006
43004: GO 43056
43006: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43007: LD_ADDR_VAR 0 3
43011: PUSH
43012: LD_INT 13
43014: PUSH
43015: LD_INT 14
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: LD_INT 4
43026: PUSH
43027: LD_INT 5
43029: PUSH
43030: LD_INT 21
43032: PUSH
43033: LD_INT 22
43035: PUSH
43036: LD_INT 23
43038: PUSH
43039: LD_INT 24
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: ST_TO_ADDR
43054: GO 43057
43056: POP
// result := ( chassis in result ) ;
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: LD_VAR 0 1
43066: PUSH
43067: LD_VAR 0 3
43071: IN
43072: ST_TO_ADDR
// end ;
43073: LD_VAR 0 3
43077: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43078: LD_INT 0
43080: PPUSH
// if not chassis or not weapon then
43081: LD_VAR 0 1
43085: NOT
43086: PUSH
43087: LD_VAR 0 2
43091: NOT
43092: OR
43093: IFFALSE 43097
// exit ;
43095: GO 44157
// case weapon of us_machine_gun :
43097: LD_VAR 0 2
43101: PUSH
43102: LD_INT 2
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43140
43110: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43111: LD_ADDR_VAR 0 3
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: LD_INT 4
43127: PUSH
43128: LD_INT 5
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
43138: GO 44141
43140: LD_INT 3
43142: DOUBLE
43143: EQUAL
43144: IFTRUE 43148
43146: GO 43178
43148: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: LD_INT 5
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
43176: GO 44141
43178: LD_INT 11
43180: DOUBLE
43181: EQUAL
43182: IFTRUE 43186
43184: GO 43216
43186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43187: LD_ADDR_VAR 0 3
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 4
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
43214: GO 44141
43216: LD_INT 4
43218: DOUBLE
43219: EQUAL
43220: IFTRUE 43224
43222: GO 43250
43224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: LD_INT 5
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: ST_TO_ADDR
43248: GO 44141
43250: LD_INT 5
43252: DOUBLE
43253: EQUAL
43254: IFTRUE 43258
43256: GO 43284
43258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43259: LD_ADDR_VAR 0 3
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 3
43269: PUSH
43270: LD_INT 4
43272: PUSH
43273: LD_INT 5
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
43282: GO 44141
43284: LD_INT 9
43286: DOUBLE
43287: EQUAL
43288: IFTRUE 43292
43290: GO 43318
43292: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43293: LD_ADDR_VAR 0 3
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: LD_INT 4
43306: PUSH
43307: LD_INT 5
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
43316: GO 44141
43318: LD_INT 7
43320: DOUBLE
43321: EQUAL
43322: IFTRUE 43326
43324: GO 43352
43326: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43327: LD_ADDR_VAR 0 3
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 3
43337: PUSH
43338: LD_INT 4
43340: PUSH
43341: LD_INT 5
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: ST_TO_ADDR
43350: GO 44141
43352: LD_INT 12
43354: DOUBLE
43355: EQUAL
43356: IFTRUE 43360
43358: GO 43386
43360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43361: LD_ADDR_VAR 0 3
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 4
43374: PUSH
43375: LD_INT 5
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: ST_TO_ADDR
43384: GO 44141
43386: LD_INT 13
43388: DOUBLE
43389: EQUAL
43390: IFTRUE 43394
43392: GO 43420
43394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43395: LD_ADDR_VAR 0 3
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 3
43405: PUSH
43406: LD_INT 4
43408: PUSH
43409: LD_INT 5
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
43418: GO 44141
43420: LD_INT 14
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43428
43426: GO 43446
43428: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43429: LD_ADDR_VAR 0 3
43433: PUSH
43434: LD_INT 4
43436: PUSH
43437: LD_INT 5
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: ST_TO_ADDR
43444: GO 44141
43446: LD_INT 6
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 43472
43454: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43455: LD_ADDR_VAR 0 3
43459: PUSH
43460: LD_INT 4
43462: PUSH
43463: LD_INT 5
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: ST_TO_ADDR
43470: GO 44141
43472: LD_INT 10
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 43498
43480: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_INT 4
43488: PUSH
43489: LD_INT 5
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: ST_TO_ADDR
43496: GO 44141
43498: LD_INT 22
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43532
43506: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43507: LD_ADDR_VAR 0 3
43511: PUSH
43512: LD_INT 11
43514: PUSH
43515: LD_INT 12
43517: PUSH
43518: LD_INT 13
43520: PUSH
43521: LD_INT 14
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
43530: GO 44141
43532: LD_INT 23
43534: DOUBLE
43535: EQUAL
43536: IFTRUE 43540
43538: GO 43566
43540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 11
43548: PUSH
43549: LD_INT 12
43551: PUSH
43552: LD_INT 13
43554: PUSH
43555: LD_INT 14
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: ST_TO_ADDR
43564: GO 44141
43566: LD_INT 24
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43600
43574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_INT 11
43582: PUSH
43583: LD_INT 12
43585: PUSH
43586: LD_INT 13
43588: PUSH
43589: LD_INT 14
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: ST_TO_ADDR
43598: GO 44141
43600: LD_INT 30
43602: DOUBLE
43603: EQUAL
43604: IFTRUE 43608
43606: GO 43634
43608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43609: LD_ADDR_VAR 0 3
43613: PUSH
43614: LD_INT 11
43616: PUSH
43617: LD_INT 12
43619: PUSH
43620: LD_INT 13
43622: PUSH
43623: LD_INT 14
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
43632: GO 44141
43634: LD_INT 25
43636: DOUBLE
43637: EQUAL
43638: IFTRUE 43642
43640: GO 43660
43642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_INT 13
43650: PUSH
43651: LD_INT 14
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: ST_TO_ADDR
43658: GO 44141
43660: LD_INT 27
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43668
43666: GO 43686
43668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: LD_INT 13
43676: PUSH
43677: LD_INT 14
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: ST_TO_ADDR
43684: GO 44141
43686: LD_INT 92
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43694
43692: GO 43720
43694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43695: LD_ADDR_VAR 0 3
43699: PUSH
43700: LD_INT 11
43702: PUSH
43703: LD_INT 12
43705: PUSH
43706: LD_INT 13
43708: PUSH
43709: LD_INT 14
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
43718: GO 44141
43720: LD_INT 28
43722: DOUBLE
43723: EQUAL
43724: IFTRUE 43728
43726: GO 43746
43728: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43729: LD_ADDR_VAR 0 3
43733: PUSH
43734: LD_INT 13
43736: PUSH
43737: LD_INT 14
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: ST_TO_ADDR
43744: GO 44141
43746: LD_INT 29
43748: DOUBLE
43749: EQUAL
43750: IFTRUE 43754
43752: GO 43772
43754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43755: LD_ADDR_VAR 0 3
43759: PUSH
43760: LD_INT 13
43762: PUSH
43763: LD_INT 14
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: ST_TO_ADDR
43770: GO 44141
43772: LD_INT 31
43774: DOUBLE
43775: EQUAL
43776: IFTRUE 43780
43778: GO 43798
43780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43781: LD_ADDR_VAR 0 3
43785: PUSH
43786: LD_INT 13
43788: PUSH
43789: LD_INT 14
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: ST_TO_ADDR
43796: GO 44141
43798: LD_INT 26
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43806
43804: GO 43824
43806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_INT 13
43814: PUSH
43815: LD_INT 14
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: ST_TO_ADDR
43822: GO 44141
43824: LD_INT 42
43826: DOUBLE
43827: EQUAL
43828: IFTRUE 43832
43830: GO 43858
43832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43833: LD_ADDR_VAR 0 3
43837: PUSH
43838: LD_INT 21
43840: PUSH
43841: LD_INT 22
43843: PUSH
43844: LD_INT 23
43846: PUSH
43847: LD_INT 24
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
43856: GO 44141
43858: LD_INT 43
43860: DOUBLE
43861: EQUAL
43862: IFTRUE 43866
43864: GO 43892
43866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_INT 21
43874: PUSH
43875: LD_INT 22
43877: PUSH
43878: LD_INT 23
43880: PUSH
43881: LD_INT 24
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
43890: GO 44141
43892: LD_INT 44
43894: DOUBLE
43895: EQUAL
43896: IFTRUE 43900
43898: GO 43926
43900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43901: LD_ADDR_VAR 0 3
43905: PUSH
43906: LD_INT 21
43908: PUSH
43909: LD_INT 22
43911: PUSH
43912: LD_INT 23
43914: PUSH
43915: LD_INT 24
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: ST_TO_ADDR
43924: GO 44141
43926: LD_INT 45
43928: DOUBLE
43929: EQUAL
43930: IFTRUE 43934
43932: GO 43960
43934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43935: LD_ADDR_VAR 0 3
43939: PUSH
43940: LD_INT 21
43942: PUSH
43943: LD_INT 22
43945: PUSH
43946: LD_INT 23
43948: PUSH
43949: LD_INT 24
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
43958: GO 44141
43960: LD_INT 49
43962: DOUBLE
43963: EQUAL
43964: IFTRUE 43968
43966: GO 43994
43968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43969: LD_ADDR_VAR 0 3
43973: PUSH
43974: LD_INT 21
43976: PUSH
43977: LD_INT 22
43979: PUSH
43980: LD_INT 23
43982: PUSH
43983: LD_INT 24
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: ST_TO_ADDR
43992: GO 44141
43994: LD_INT 51
43996: DOUBLE
43997: EQUAL
43998: IFTRUE 44002
44000: GO 44028
44002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_INT 21
44010: PUSH
44011: LD_INT 22
44013: PUSH
44014: LD_INT 23
44016: PUSH
44017: LD_INT 24
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
44026: GO 44141
44028: LD_INT 52
44030: DOUBLE
44031: EQUAL
44032: IFTRUE 44036
44034: GO 44062
44036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44037: LD_ADDR_VAR 0 3
44041: PUSH
44042: LD_INT 21
44044: PUSH
44045: LD_INT 22
44047: PUSH
44048: LD_INT 23
44050: PUSH
44051: LD_INT 24
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: ST_TO_ADDR
44060: GO 44141
44062: LD_INT 53
44064: DOUBLE
44065: EQUAL
44066: IFTRUE 44070
44068: GO 44088
44070: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44071: LD_ADDR_VAR 0 3
44075: PUSH
44076: LD_INT 23
44078: PUSH
44079: LD_INT 24
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: ST_TO_ADDR
44086: GO 44141
44088: LD_INT 46
44090: DOUBLE
44091: EQUAL
44092: IFTRUE 44096
44094: GO 44114
44096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44097: LD_ADDR_VAR 0 3
44101: PUSH
44102: LD_INT 23
44104: PUSH
44105: LD_INT 24
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: ST_TO_ADDR
44112: GO 44141
44114: LD_INT 47
44116: DOUBLE
44117: EQUAL
44118: IFTRUE 44122
44120: GO 44140
44122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44123: LD_ADDR_VAR 0 3
44127: PUSH
44128: LD_INT 23
44130: PUSH
44131: LD_INT 24
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: ST_TO_ADDR
44138: GO 44141
44140: POP
// result := ( chassis in result ) ;
44141: LD_ADDR_VAR 0 3
44145: PUSH
44146: LD_VAR 0 1
44150: PUSH
44151: LD_VAR 0 3
44155: IN
44156: ST_TO_ADDR
// end ;
44157: LD_VAR 0 3
44161: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44162: LD_INT 0
44164: PPUSH
44165: PPUSH
44166: PPUSH
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
// result := array ;
44171: LD_ADDR_VAR 0 5
44175: PUSH
44176: LD_VAR 0 1
44180: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44181: LD_VAR 0 1
44185: NOT
44186: PUSH
44187: LD_VAR 0 2
44191: NOT
44192: OR
44193: PUSH
44194: LD_VAR 0 3
44198: NOT
44199: OR
44200: PUSH
44201: LD_VAR 0 2
44205: PUSH
44206: LD_VAR 0 1
44210: GREATER
44211: OR
44212: PUSH
44213: LD_VAR 0 3
44217: PUSH
44218: LD_VAR 0 1
44222: GREATER
44223: OR
44224: IFFALSE 44228
// exit ;
44226: GO 44524
// if direction then
44228: LD_VAR 0 4
44232: IFFALSE 44296
// begin d := 1 ;
44234: LD_ADDR_VAR 0 9
44238: PUSH
44239: LD_INT 1
44241: ST_TO_ADDR
// if i_from > i_to then
44242: LD_VAR 0 2
44246: PUSH
44247: LD_VAR 0 3
44251: GREATER
44252: IFFALSE 44278
// length := ( array - i_from ) + i_to else
44254: LD_ADDR_VAR 0 11
44258: PUSH
44259: LD_VAR 0 1
44263: PUSH
44264: LD_VAR 0 2
44268: MINUS
44269: PUSH
44270: LD_VAR 0 3
44274: PLUS
44275: ST_TO_ADDR
44276: GO 44294
// length := i_to - i_from ;
44278: LD_ADDR_VAR 0 11
44282: PUSH
44283: LD_VAR 0 3
44287: PUSH
44288: LD_VAR 0 2
44292: MINUS
44293: ST_TO_ADDR
// end else
44294: GO 44357
// begin d := - 1 ;
44296: LD_ADDR_VAR 0 9
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: ST_TO_ADDR
// if i_from > i_to then
44305: LD_VAR 0 2
44309: PUSH
44310: LD_VAR 0 3
44314: GREATER
44315: IFFALSE 44335
// length := i_from - i_to else
44317: LD_ADDR_VAR 0 11
44321: PUSH
44322: LD_VAR 0 2
44326: PUSH
44327: LD_VAR 0 3
44331: MINUS
44332: ST_TO_ADDR
44333: GO 44357
// length := ( array - i_to ) + i_from ;
44335: LD_ADDR_VAR 0 11
44339: PUSH
44340: LD_VAR 0 1
44344: PUSH
44345: LD_VAR 0 3
44349: MINUS
44350: PUSH
44351: LD_VAR 0 2
44355: PLUS
44356: ST_TO_ADDR
// end ; if not length then
44357: LD_VAR 0 11
44361: NOT
44362: IFFALSE 44366
// exit ;
44364: GO 44524
// tmp := array ;
44366: LD_ADDR_VAR 0 10
44370: PUSH
44371: LD_VAR 0 1
44375: ST_TO_ADDR
// for i = 1 to length do
44376: LD_ADDR_VAR 0 6
44380: PUSH
44381: DOUBLE
44382: LD_INT 1
44384: DEC
44385: ST_TO_ADDR
44386: LD_VAR 0 11
44390: PUSH
44391: FOR_TO
44392: IFFALSE 44512
// begin for j = 1 to array do
44394: LD_ADDR_VAR 0 7
44398: PUSH
44399: DOUBLE
44400: LD_INT 1
44402: DEC
44403: ST_TO_ADDR
44404: LD_VAR 0 1
44408: PUSH
44409: FOR_TO
44410: IFFALSE 44498
// begin k := j + d ;
44412: LD_ADDR_VAR 0 8
44416: PUSH
44417: LD_VAR 0 7
44421: PUSH
44422: LD_VAR 0 9
44426: PLUS
44427: ST_TO_ADDR
// if k > array then
44428: LD_VAR 0 8
44432: PUSH
44433: LD_VAR 0 1
44437: GREATER
44438: IFFALSE 44448
// k := 1 ;
44440: LD_ADDR_VAR 0 8
44444: PUSH
44445: LD_INT 1
44447: ST_TO_ADDR
// if not k then
44448: LD_VAR 0 8
44452: NOT
44453: IFFALSE 44465
// k := array ;
44455: LD_ADDR_VAR 0 8
44459: PUSH
44460: LD_VAR 0 1
44464: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44465: LD_ADDR_VAR 0 10
44469: PUSH
44470: LD_VAR 0 10
44474: PPUSH
44475: LD_VAR 0 8
44479: PPUSH
44480: LD_VAR 0 1
44484: PUSH
44485: LD_VAR 0 7
44489: ARRAY
44490: PPUSH
44491: CALL_OW 1
44495: ST_TO_ADDR
// end ;
44496: GO 44409
44498: POP
44499: POP
// array := tmp ;
44500: LD_ADDR_VAR 0 1
44504: PUSH
44505: LD_VAR 0 10
44509: ST_TO_ADDR
// end ;
44510: GO 44391
44512: POP
44513: POP
// result := array ;
44514: LD_ADDR_VAR 0 5
44518: PUSH
44519: LD_VAR 0 1
44523: ST_TO_ADDR
// end ;
44524: LD_VAR 0 5
44528: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44529: LD_INT 0
44531: PPUSH
44532: PPUSH
// result := 0 ;
44533: LD_ADDR_VAR 0 3
44537: PUSH
44538: LD_INT 0
44540: ST_TO_ADDR
// if not array or not value in array then
44541: LD_VAR 0 1
44545: NOT
44546: PUSH
44547: LD_VAR 0 2
44551: PUSH
44552: LD_VAR 0 1
44556: IN
44557: NOT
44558: OR
44559: IFFALSE 44563
// exit ;
44561: GO 44617
// for i = 1 to array do
44563: LD_ADDR_VAR 0 4
44567: PUSH
44568: DOUBLE
44569: LD_INT 1
44571: DEC
44572: ST_TO_ADDR
44573: LD_VAR 0 1
44577: PUSH
44578: FOR_TO
44579: IFFALSE 44615
// if value = array [ i ] then
44581: LD_VAR 0 2
44585: PUSH
44586: LD_VAR 0 1
44590: PUSH
44591: LD_VAR 0 4
44595: ARRAY
44596: EQUAL
44597: IFFALSE 44613
// begin result := i ;
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: LD_VAR 0 4
44608: ST_TO_ADDR
// exit ;
44609: POP
44610: POP
44611: GO 44617
// end ;
44613: GO 44578
44615: POP
44616: POP
// end ;
44617: LD_VAR 0 3
44621: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44622: LD_INT 0
44624: PPUSH
// vc_chassis := chassis ;
44625: LD_ADDR_OWVAR 37
44629: PUSH
44630: LD_VAR 0 1
44634: ST_TO_ADDR
// vc_engine := engine ;
44635: LD_ADDR_OWVAR 39
44639: PUSH
44640: LD_VAR 0 2
44644: ST_TO_ADDR
// vc_control := control ;
44645: LD_ADDR_OWVAR 38
44649: PUSH
44650: LD_VAR 0 3
44654: ST_TO_ADDR
// vc_weapon := weapon ;
44655: LD_ADDR_OWVAR 40
44659: PUSH
44660: LD_VAR 0 4
44664: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44665: LD_ADDR_OWVAR 41
44669: PUSH
44670: LD_VAR 0 5
44674: ST_TO_ADDR
// end ;
44675: LD_VAR 0 6
44679: RET
// export function WantPlant ( unit ) ; var task ; begin
44680: LD_INT 0
44682: PPUSH
44683: PPUSH
// result := false ;
44684: LD_ADDR_VAR 0 2
44688: PUSH
44689: LD_INT 0
44691: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_VAR 0 1
44701: PPUSH
44702: CALL_OW 437
44706: ST_TO_ADDR
// if task then
44707: LD_VAR 0 3
44711: IFFALSE 44739
// if task [ 1 ] [ 1 ] = p then
44713: LD_VAR 0 3
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: PUSH
44722: LD_INT 1
44724: ARRAY
44725: PUSH
44726: LD_STRING p
44728: EQUAL
44729: IFFALSE 44739
// result := true ;
44731: LD_ADDR_VAR 0 2
44735: PUSH
44736: LD_INT 1
44738: ST_TO_ADDR
// end ;
44739: LD_VAR 0 2
44743: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44744: LD_INT 0
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
// if pos < 1 then
44750: LD_VAR 0 2
44754: PUSH
44755: LD_INT 1
44757: LESS
44758: IFFALSE 44762
// exit ;
44760: GO 45065
// if pos = 1 then
44762: LD_VAR 0 2
44766: PUSH
44767: LD_INT 1
44769: EQUAL
44770: IFFALSE 44803
// result := Replace ( arr , pos [ 1 ] , value ) else
44772: LD_ADDR_VAR 0 4
44776: PUSH
44777: LD_VAR 0 1
44781: PPUSH
44782: LD_VAR 0 2
44786: PUSH
44787: LD_INT 1
44789: ARRAY
44790: PPUSH
44791: LD_VAR 0 3
44795: PPUSH
44796: CALL_OW 1
44800: ST_TO_ADDR
44801: GO 45065
// begin tmp := arr ;
44803: LD_ADDR_VAR 0 6
44807: PUSH
44808: LD_VAR 0 1
44812: ST_TO_ADDR
// s_arr := [ tmp ] ;
44813: LD_ADDR_VAR 0 7
44817: PUSH
44818: LD_VAR 0 6
44822: PUSH
44823: EMPTY
44824: LIST
44825: ST_TO_ADDR
// for i = 1 to pos - 1 do
44826: LD_ADDR_VAR 0 5
44830: PUSH
44831: DOUBLE
44832: LD_INT 1
44834: DEC
44835: ST_TO_ADDR
44836: LD_VAR 0 2
44840: PUSH
44841: LD_INT 1
44843: MINUS
44844: PUSH
44845: FOR_TO
44846: IFFALSE 44891
// begin tmp := tmp [ pos [ i ] ] ;
44848: LD_ADDR_VAR 0 6
44852: PUSH
44853: LD_VAR 0 6
44857: PUSH
44858: LD_VAR 0 2
44862: PUSH
44863: LD_VAR 0 5
44867: ARRAY
44868: ARRAY
44869: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44870: LD_ADDR_VAR 0 7
44874: PUSH
44875: LD_VAR 0 7
44879: PUSH
44880: LD_VAR 0 6
44884: PUSH
44885: EMPTY
44886: LIST
44887: ADD
44888: ST_TO_ADDR
// end ;
44889: GO 44845
44891: POP
44892: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44893: LD_ADDR_VAR 0 6
44897: PUSH
44898: LD_VAR 0 6
44902: PPUSH
44903: LD_VAR 0 2
44907: PUSH
44908: LD_VAR 0 2
44912: ARRAY
44913: PPUSH
44914: LD_VAR 0 3
44918: PPUSH
44919: CALL_OW 1
44923: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44924: LD_ADDR_VAR 0 7
44928: PUSH
44929: LD_VAR 0 7
44933: PPUSH
44934: LD_VAR 0 7
44938: PPUSH
44939: LD_VAR 0 6
44943: PPUSH
44944: CALL_OW 1
44948: ST_TO_ADDR
// for i = s_arr downto 2 do
44949: LD_ADDR_VAR 0 5
44953: PUSH
44954: DOUBLE
44955: LD_VAR 0 7
44959: INC
44960: ST_TO_ADDR
44961: LD_INT 2
44963: PUSH
44964: FOR_DOWNTO
44965: IFFALSE 45049
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44967: LD_ADDR_VAR 0 6
44971: PUSH
44972: LD_VAR 0 7
44976: PUSH
44977: LD_VAR 0 5
44981: PUSH
44982: LD_INT 1
44984: MINUS
44985: ARRAY
44986: PPUSH
44987: LD_VAR 0 2
44991: PUSH
44992: LD_VAR 0 5
44996: PUSH
44997: LD_INT 1
44999: MINUS
45000: ARRAY
45001: PPUSH
45002: LD_VAR 0 7
45006: PUSH
45007: LD_VAR 0 5
45011: ARRAY
45012: PPUSH
45013: CALL_OW 1
45017: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45018: LD_ADDR_VAR 0 7
45022: PUSH
45023: LD_VAR 0 7
45027: PPUSH
45028: LD_VAR 0 5
45032: PUSH
45033: LD_INT 1
45035: MINUS
45036: PPUSH
45037: LD_VAR 0 6
45041: PPUSH
45042: CALL_OW 1
45046: ST_TO_ADDR
// end ;
45047: GO 44964
45049: POP
45050: POP
// result := s_arr [ 1 ] ;
45051: LD_ADDR_VAR 0 4
45055: PUSH
45056: LD_VAR 0 7
45060: PUSH
45061: LD_INT 1
45063: ARRAY
45064: ST_TO_ADDR
// end ; end ;
45065: LD_VAR 0 4
45069: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45070: LD_INT 0
45072: PPUSH
45073: PPUSH
// if not list then
45074: LD_VAR 0 1
45078: NOT
45079: IFFALSE 45083
// exit ;
45081: GO 45174
// i := list [ pos1 ] ;
45083: LD_ADDR_VAR 0 5
45087: PUSH
45088: LD_VAR 0 1
45092: PUSH
45093: LD_VAR 0 2
45097: ARRAY
45098: ST_TO_ADDR
// if not i then
45099: LD_VAR 0 5
45103: NOT
45104: IFFALSE 45108
// exit ;
45106: GO 45174
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45108: LD_ADDR_VAR 0 1
45112: PUSH
45113: LD_VAR 0 1
45117: PPUSH
45118: LD_VAR 0 2
45122: PPUSH
45123: LD_VAR 0 1
45127: PUSH
45128: LD_VAR 0 3
45132: ARRAY
45133: PPUSH
45134: CALL_OW 1
45138: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45139: LD_ADDR_VAR 0 1
45143: PUSH
45144: LD_VAR 0 1
45148: PPUSH
45149: LD_VAR 0 3
45153: PPUSH
45154: LD_VAR 0 5
45158: PPUSH
45159: CALL_OW 1
45163: ST_TO_ADDR
// result := list ;
45164: LD_ADDR_VAR 0 4
45168: PUSH
45169: LD_VAR 0 1
45173: ST_TO_ADDR
// end ;
45174: LD_VAR 0 4
45178: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45179: LD_INT 0
45181: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45182: LD_ADDR_VAR 0 5
45186: PUSH
45187: LD_VAR 0 1
45191: PPUSH
45192: CALL_OW 250
45196: PPUSH
45197: LD_VAR 0 1
45201: PPUSH
45202: CALL_OW 251
45206: PPUSH
45207: LD_VAR 0 2
45211: PPUSH
45212: LD_VAR 0 3
45216: PPUSH
45217: LD_VAR 0 4
45221: PPUSH
45222: CALL 45232 0 5
45226: ST_TO_ADDR
// end ;
45227: LD_VAR 0 5
45231: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45232: LD_INT 0
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
// if not list then
45238: LD_VAR 0 3
45242: NOT
45243: IFFALSE 45247
// exit ;
45245: GO 45635
// result := [ ] ;
45247: LD_ADDR_VAR 0 6
45251: PUSH
45252: EMPTY
45253: ST_TO_ADDR
// for i in list do
45254: LD_ADDR_VAR 0 7
45258: PUSH
45259: LD_VAR 0 3
45263: PUSH
45264: FOR_IN
45265: IFFALSE 45467
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45267: LD_ADDR_VAR 0 9
45271: PUSH
45272: LD_VAR 0 7
45276: PPUSH
45277: LD_VAR 0 1
45281: PPUSH
45282: LD_VAR 0 2
45286: PPUSH
45287: CALL_OW 297
45291: ST_TO_ADDR
// if not result then
45292: LD_VAR 0 6
45296: NOT
45297: IFFALSE 45323
// result := [ [ i , tmp ] ] else
45299: LD_ADDR_VAR 0 6
45303: PUSH
45304: LD_VAR 0 7
45308: PUSH
45309: LD_VAR 0 9
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: ST_TO_ADDR
45321: GO 45465
// begin if result [ result ] [ 2 ] < tmp then
45323: LD_VAR 0 6
45327: PUSH
45328: LD_VAR 0 6
45332: ARRAY
45333: PUSH
45334: LD_INT 2
45336: ARRAY
45337: PUSH
45338: LD_VAR 0 9
45342: LESS
45343: IFFALSE 45385
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45345: LD_ADDR_VAR 0 6
45349: PUSH
45350: LD_VAR 0 6
45354: PPUSH
45355: LD_VAR 0 6
45359: PUSH
45360: LD_INT 1
45362: PLUS
45363: PPUSH
45364: LD_VAR 0 7
45368: PUSH
45369: LD_VAR 0 9
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PPUSH
45378: CALL_OW 2
45382: ST_TO_ADDR
45383: GO 45465
// for j = 1 to result do
45385: LD_ADDR_VAR 0 8
45389: PUSH
45390: DOUBLE
45391: LD_INT 1
45393: DEC
45394: ST_TO_ADDR
45395: LD_VAR 0 6
45399: PUSH
45400: FOR_TO
45401: IFFALSE 45463
// begin if tmp < result [ j ] [ 2 ] then
45403: LD_VAR 0 9
45407: PUSH
45408: LD_VAR 0 6
45412: PUSH
45413: LD_VAR 0 8
45417: ARRAY
45418: PUSH
45419: LD_INT 2
45421: ARRAY
45422: LESS
45423: IFFALSE 45461
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45425: LD_ADDR_VAR 0 6
45429: PUSH
45430: LD_VAR 0 6
45434: PPUSH
45435: LD_VAR 0 8
45439: PPUSH
45440: LD_VAR 0 7
45444: PUSH
45445: LD_VAR 0 9
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PPUSH
45454: CALL_OW 2
45458: ST_TO_ADDR
// break ;
45459: GO 45463
// end ; end ;
45461: GO 45400
45463: POP
45464: POP
// end ; end ;
45465: GO 45264
45467: POP
45468: POP
// if result and not asc then
45469: LD_VAR 0 6
45473: PUSH
45474: LD_VAR 0 4
45478: NOT
45479: AND
45480: IFFALSE 45555
// begin tmp := result ;
45482: LD_ADDR_VAR 0 9
45486: PUSH
45487: LD_VAR 0 6
45491: ST_TO_ADDR
// for i = tmp downto 1 do
45492: LD_ADDR_VAR 0 7
45496: PUSH
45497: DOUBLE
45498: LD_VAR 0 9
45502: INC
45503: ST_TO_ADDR
45504: LD_INT 1
45506: PUSH
45507: FOR_DOWNTO
45508: IFFALSE 45553
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45510: LD_ADDR_VAR 0 6
45514: PUSH
45515: LD_VAR 0 6
45519: PPUSH
45520: LD_VAR 0 9
45524: PUSH
45525: LD_VAR 0 7
45529: MINUS
45530: PUSH
45531: LD_INT 1
45533: PLUS
45534: PPUSH
45535: LD_VAR 0 9
45539: PUSH
45540: LD_VAR 0 7
45544: ARRAY
45545: PPUSH
45546: CALL_OW 1
45550: ST_TO_ADDR
45551: GO 45507
45553: POP
45554: POP
// end ; tmp := [ ] ;
45555: LD_ADDR_VAR 0 9
45559: PUSH
45560: EMPTY
45561: ST_TO_ADDR
// if mode then
45562: LD_VAR 0 5
45566: IFFALSE 45635
// begin for i = 1 to result do
45568: LD_ADDR_VAR 0 7
45572: PUSH
45573: DOUBLE
45574: LD_INT 1
45576: DEC
45577: ST_TO_ADDR
45578: LD_VAR 0 6
45582: PUSH
45583: FOR_TO
45584: IFFALSE 45623
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45586: LD_ADDR_VAR 0 9
45590: PUSH
45591: LD_VAR 0 9
45595: PPUSH
45596: LD_VAR 0 7
45600: PPUSH
45601: LD_VAR 0 6
45605: PUSH
45606: LD_VAR 0 7
45610: ARRAY
45611: PUSH
45612: LD_INT 1
45614: ARRAY
45615: PPUSH
45616: CALL_OW 1
45620: ST_TO_ADDR
45621: GO 45583
45623: POP
45624: POP
// result := tmp ;
45625: LD_ADDR_VAR 0 6
45629: PUSH
45630: LD_VAR 0 9
45634: ST_TO_ADDR
// end ; end ;
45635: LD_VAR 0 6
45639: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45640: LD_INT 0
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45648: LD_ADDR_VAR 0 5
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: ST_TO_ADDR
// if not x or not y then
45670: LD_VAR 0 2
45674: NOT
45675: PUSH
45676: LD_VAR 0 3
45680: NOT
45681: OR
45682: IFFALSE 45686
// exit ;
45684: GO 47336
// if not range then
45686: LD_VAR 0 4
45690: NOT
45691: IFFALSE 45701
// range := 10 ;
45693: LD_ADDR_VAR 0 4
45697: PUSH
45698: LD_INT 10
45700: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45701: LD_ADDR_VAR 0 8
45705: PUSH
45706: LD_INT 81
45708: PUSH
45709: LD_VAR 0 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 92
45720: PUSH
45721: LD_VAR 0 2
45725: PUSH
45726: LD_VAR 0 3
45730: PUSH
45731: LD_VAR 0 4
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: LD_INT 21
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: PPUSH
45764: CALL_OW 69
45768: ST_TO_ADDR
// if not tmp then
45769: LD_VAR 0 8
45773: NOT
45774: IFFALSE 45778
// exit ;
45776: GO 47336
// for i in tmp do
45778: LD_ADDR_VAR 0 6
45782: PUSH
45783: LD_VAR 0 8
45787: PUSH
45788: FOR_IN
45789: IFFALSE 47311
// begin points := [ 0 , 0 , 0 ] ;
45791: LD_ADDR_VAR 0 9
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: ST_TO_ADDR
// bpoints := 1 ;
45810: LD_ADDR_VAR 0 10
45814: PUSH
45815: LD_INT 1
45817: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45818: LD_VAR 0 6
45822: PPUSH
45823: CALL_OW 247
45827: PUSH
45828: LD_INT 1
45830: DOUBLE
45831: EQUAL
45832: IFTRUE 45836
45834: GO 46414
45836: POP
// begin if GetClass ( i ) = 1 then
45837: LD_VAR 0 6
45841: PPUSH
45842: CALL_OW 257
45846: PUSH
45847: LD_INT 1
45849: EQUAL
45850: IFFALSE 45871
// points := [ 10 , 5 , 3 ] ;
45852: LD_ADDR_VAR 0 9
45856: PUSH
45857: LD_INT 10
45859: PUSH
45860: LD_INT 5
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45871: LD_VAR 0 6
45875: PPUSH
45876: CALL_OW 257
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 3
45886: PUSH
45887: LD_INT 4
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: IN
45895: IFFALSE 45916
// points := [ 3 , 2 , 1 ] ;
45897: LD_ADDR_VAR 0 9
45901: PUSH
45902: LD_INT 3
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45916: LD_VAR 0 6
45920: PPUSH
45921: CALL_OW 257
45925: PUSH
45926: LD_INT 5
45928: EQUAL
45929: IFFALSE 45950
// points := [ 130 , 5 , 2 ] ;
45931: LD_ADDR_VAR 0 9
45935: PUSH
45936: LD_INT 130
45938: PUSH
45939: LD_INT 5
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45950: LD_VAR 0 6
45954: PPUSH
45955: CALL_OW 257
45959: PUSH
45960: LD_INT 8
45962: EQUAL
45963: IFFALSE 45984
// points := [ 35 , 35 , 30 ] ;
45965: LD_ADDR_VAR 0 9
45969: PUSH
45970: LD_INT 35
45972: PUSH
45973: LD_INT 35
45975: PUSH
45976: LD_INT 30
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: LIST
45983: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45984: LD_VAR 0 6
45988: PPUSH
45989: CALL_OW 257
45993: PUSH
45994: LD_INT 9
45996: EQUAL
45997: IFFALSE 46018
// points := [ 20 , 55 , 40 ] ;
45999: LD_ADDR_VAR 0 9
46003: PUSH
46004: LD_INT 20
46006: PUSH
46007: LD_INT 55
46009: PUSH
46010: LD_INT 40
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46018: LD_VAR 0 6
46022: PPUSH
46023: CALL_OW 257
46027: PUSH
46028: LD_INT 12
46030: PUSH
46031: LD_INT 16
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: IN
46038: IFFALSE 46059
// points := [ 5 , 3 , 2 ] ;
46040: LD_ADDR_VAR 0 9
46044: PUSH
46045: LD_INT 5
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46059: LD_VAR 0 6
46063: PPUSH
46064: CALL_OW 257
46068: PUSH
46069: LD_INT 17
46071: EQUAL
46072: IFFALSE 46093
// points := [ 100 , 50 , 75 ] ;
46074: LD_ADDR_VAR 0 9
46078: PUSH
46079: LD_INT 100
46081: PUSH
46082: LD_INT 50
46084: PUSH
46085: LD_INT 75
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46093: LD_VAR 0 6
46097: PPUSH
46098: CALL_OW 257
46102: PUSH
46103: LD_INT 15
46105: EQUAL
46106: IFFALSE 46127
// points := [ 10 , 5 , 3 ] ;
46108: LD_ADDR_VAR 0 9
46112: PUSH
46113: LD_INT 10
46115: PUSH
46116: LD_INT 5
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46127: LD_VAR 0 6
46131: PPUSH
46132: CALL_OW 257
46136: PUSH
46137: LD_INT 14
46139: EQUAL
46140: IFFALSE 46161
// points := [ 10 , 0 , 0 ] ;
46142: LD_ADDR_VAR 0 9
46146: PUSH
46147: LD_INT 10
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46161: LD_VAR 0 6
46165: PPUSH
46166: CALL_OW 257
46170: PUSH
46171: LD_INT 11
46173: EQUAL
46174: IFFALSE 46195
// points := [ 30 , 10 , 5 ] ;
46176: LD_ADDR_VAR 0 9
46180: PUSH
46181: LD_INT 30
46183: PUSH
46184: LD_INT 10
46186: PUSH
46187: LD_INT 5
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46195: LD_VAR 0 1
46199: PPUSH
46200: LD_INT 5
46202: PPUSH
46203: CALL_OW 321
46207: PUSH
46208: LD_INT 2
46210: EQUAL
46211: IFFALSE 46228
// bpoints := bpoints * 1.8 ;
46213: LD_ADDR_VAR 0 10
46217: PUSH
46218: LD_VAR 0 10
46222: PUSH
46223: LD_REAL  1.80000000000000E+0000
46226: MUL
46227: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46228: LD_VAR 0 6
46232: PPUSH
46233: CALL_OW 257
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: LD_INT 3
46246: PUSH
46247: LD_INT 4
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: IN
46256: PUSH
46257: LD_VAR 0 1
46261: PPUSH
46262: LD_INT 51
46264: PPUSH
46265: CALL_OW 321
46269: PUSH
46270: LD_INT 2
46272: EQUAL
46273: AND
46274: IFFALSE 46291
// bpoints := bpoints * 1.2 ;
46276: LD_ADDR_VAR 0 10
46280: PUSH
46281: LD_VAR 0 10
46285: PUSH
46286: LD_REAL  1.20000000000000E+0000
46289: MUL
46290: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46291: LD_VAR 0 6
46295: PPUSH
46296: CALL_OW 257
46300: PUSH
46301: LD_INT 5
46303: PUSH
46304: LD_INT 7
46306: PUSH
46307: LD_INT 9
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: IN
46315: PUSH
46316: LD_VAR 0 1
46320: PPUSH
46321: LD_INT 52
46323: PPUSH
46324: CALL_OW 321
46328: PUSH
46329: LD_INT 2
46331: EQUAL
46332: AND
46333: IFFALSE 46350
// bpoints := bpoints * 1.5 ;
46335: LD_ADDR_VAR 0 10
46339: PUSH
46340: LD_VAR 0 10
46344: PUSH
46345: LD_REAL  1.50000000000000E+0000
46348: MUL
46349: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46350: LD_VAR 0 1
46354: PPUSH
46355: LD_INT 66
46357: PPUSH
46358: CALL_OW 321
46362: PUSH
46363: LD_INT 2
46365: EQUAL
46366: IFFALSE 46383
// bpoints := bpoints * 1.1 ;
46368: LD_ADDR_VAR 0 10
46372: PUSH
46373: LD_VAR 0 10
46377: PUSH
46378: LD_REAL  1.10000000000000E+0000
46381: MUL
46382: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46383: LD_ADDR_VAR 0 10
46387: PUSH
46388: LD_VAR 0 10
46392: PUSH
46393: LD_VAR 0 6
46397: PPUSH
46398: LD_INT 1
46400: PPUSH
46401: CALL_OW 259
46405: PUSH
46406: LD_REAL  1.15000000000000E+0000
46409: MUL
46410: MUL
46411: ST_TO_ADDR
// end ; unit_vehicle :
46412: GO 47240
46414: LD_INT 2
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46422
46420: GO 47228
46422: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46423: LD_VAR 0 6
46427: PPUSH
46428: CALL_OW 264
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 42
46438: PUSH
46439: LD_INT 24
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: IN
46447: IFFALSE 46468
// points := [ 25 , 5 , 3 ] ;
46449: LD_ADDR_VAR 0 9
46453: PUSH
46454: LD_INT 25
46456: PUSH
46457: LD_INT 5
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46468: LD_VAR 0 6
46472: PPUSH
46473: CALL_OW 264
46477: PUSH
46478: LD_INT 4
46480: PUSH
46481: LD_INT 43
46483: PUSH
46484: LD_INT 25
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: IN
46492: IFFALSE 46513
// points := [ 40 , 15 , 5 ] ;
46494: LD_ADDR_VAR 0 9
46498: PUSH
46499: LD_INT 40
46501: PUSH
46502: LD_INT 15
46504: PUSH
46505: LD_INT 5
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46513: LD_VAR 0 6
46517: PPUSH
46518: CALL_OW 264
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: LD_INT 23
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: IN
46533: IFFALSE 46554
// points := [ 7 , 25 , 8 ] ;
46535: LD_ADDR_VAR 0 9
46539: PUSH
46540: LD_INT 7
46542: PUSH
46543: LD_INT 25
46545: PUSH
46546: LD_INT 8
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46554: LD_VAR 0 6
46558: PPUSH
46559: CALL_OW 264
46563: PUSH
46564: LD_INT 5
46566: PUSH
46567: LD_INT 27
46569: PUSH
46570: LD_INT 44
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: IN
46578: IFFALSE 46599
// points := [ 14 , 50 , 16 ] ;
46580: LD_ADDR_VAR 0 9
46584: PUSH
46585: LD_INT 14
46587: PUSH
46588: LD_INT 50
46590: PUSH
46591: LD_INT 16
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46599: LD_VAR 0 6
46603: PPUSH
46604: CALL_OW 264
46608: PUSH
46609: LD_INT 6
46611: PUSH
46612: LD_INT 46
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: IN
46619: IFFALSE 46640
// points := [ 32 , 120 , 70 ] ;
46621: LD_ADDR_VAR 0 9
46625: PUSH
46626: LD_INT 32
46628: PUSH
46629: LD_INT 120
46631: PUSH
46632: LD_INT 70
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46640: LD_VAR 0 6
46644: PPUSH
46645: CALL_OW 264
46649: PUSH
46650: LD_INT 7
46652: PUSH
46653: LD_INT 28
46655: PUSH
46656: LD_INT 45
46658: PUSH
46659: LD_INT 92
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: IN
46668: IFFALSE 46689
// points := [ 35 , 20 , 45 ] ;
46670: LD_ADDR_VAR 0 9
46674: PUSH
46675: LD_INT 35
46677: PUSH
46678: LD_INT 20
46680: PUSH
46681: LD_INT 45
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46689: LD_VAR 0 6
46693: PPUSH
46694: CALL_OW 264
46698: PUSH
46699: LD_INT 47
46701: PUSH
46702: EMPTY
46703: LIST
46704: IN
46705: IFFALSE 46726
// points := [ 67 , 45 , 75 ] ;
46707: LD_ADDR_VAR 0 9
46711: PUSH
46712: LD_INT 67
46714: PUSH
46715: LD_INT 45
46717: PUSH
46718: LD_INT 75
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46726: LD_VAR 0 6
46730: PPUSH
46731: CALL_OW 264
46735: PUSH
46736: LD_INT 26
46738: PUSH
46739: EMPTY
46740: LIST
46741: IN
46742: IFFALSE 46763
// points := [ 120 , 30 , 80 ] ;
46744: LD_ADDR_VAR 0 9
46748: PUSH
46749: LD_INT 120
46751: PUSH
46752: LD_INT 30
46754: PUSH
46755: LD_INT 80
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46763: LD_VAR 0 6
46767: PPUSH
46768: CALL_OW 264
46772: PUSH
46773: LD_INT 22
46775: PUSH
46776: EMPTY
46777: LIST
46778: IN
46779: IFFALSE 46800
// points := [ 40 , 1 , 1 ] ;
46781: LD_ADDR_VAR 0 9
46785: PUSH
46786: LD_INT 40
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46800: LD_VAR 0 6
46804: PPUSH
46805: CALL_OW 264
46809: PUSH
46810: LD_INT 29
46812: PUSH
46813: EMPTY
46814: LIST
46815: IN
46816: IFFALSE 46837
// points := [ 70 , 200 , 400 ] ;
46818: LD_ADDR_VAR 0 9
46822: PUSH
46823: LD_INT 70
46825: PUSH
46826: LD_INT 200
46828: PUSH
46829: LD_INT 400
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46837: LD_VAR 0 6
46841: PPUSH
46842: CALL_OW 264
46846: PUSH
46847: LD_INT 14
46849: PUSH
46850: LD_INT 53
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: IN
46857: IFFALSE 46878
// points := [ 40 , 10 , 20 ] ;
46859: LD_ADDR_VAR 0 9
46863: PUSH
46864: LD_INT 40
46866: PUSH
46867: LD_INT 10
46869: PUSH
46870: LD_INT 20
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46878: LD_VAR 0 6
46882: PPUSH
46883: CALL_OW 264
46887: PUSH
46888: LD_INT 9
46890: PUSH
46891: EMPTY
46892: LIST
46893: IN
46894: IFFALSE 46915
// points := [ 5 , 70 , 20 ] ;
46896: LD_ADDR_VAR 0 9
46900: PUSH
46901: LD_INT 5
46903: PUSH
46904: LD_INT 70
46906: PUSH
46907: LD_INT 20
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46915: LD_VAR 0 6
46919: PPUSH
46920: CALL_OW 264
46924: PUSH
46925: LD_INT 10
46927: PUSH
46928: EMPTY
46929: LIST
46930: IN
46931: IFFALSE 46952
// points := [ 35 , 110 , 70 ] ;
46933: LD_ADDR_VAR 0 9
46937: PUSH
46938: LD_INT 35
46940: PUSH
46941: LD_INT 110
46943: PUSH
46944: LD_INT 70
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46952: LD_VAR 0 6
46956: PPUSH
46957: CALL_OW 265
46961: PUSH
46962: LD_INT 25
46964: EQUAL
46965: IFFALSE 46986
// points := [ 80 , 65 , 100 ] ;
46967: LD_ADDR_VAR 0 9
46971: PUSH
46972: LD_INT 80
46974: PUSH
46975: LD_INT 65
46977: PUSH
46978: LD_INT 100
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46986: LD_VAR 0 6
46990: PPUSH
46991: CALL_OW 263
46995: PUSH
46996: LD_INT 1
46998: EQUAL
46999: IFFALSE 47034
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47001: LD_ADDR_VAR 0 10
47005: PUSH
47006: LD_VAR 0 10
47010: PUSH
47011: LD_VAR 0 6
47015: PPUSH
47016: CALL_OW 311
47020: PPUSH
47021: LD_INT 3
47023: PPUSH
47024: CALL_OW 259
47028: PUSH
47029: LD_INT 4
47031: MUL
47032: MUL
47033: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47034: LD_VAR 0 6
47038: PPUSH
47039: CALL_OW 263
47043: PUSH
47044: LD_INT 2
47046: EQUAL
47047: IFFALSE 47098
// begin j := IsControledBy ( i ) ;
47049: LD_ADDR_VAR 0 7
47053: PUSH
47054: LD_VAR 0 6
47058: PPUSH
47059: CALL_OW 312
47063: ST_TO_ADDR
// if j then
47064: LD_VAR 0 7
47068: IFFALSE 47098
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47070: LD_ADDR_VAR 0 10
47074: PUSH
47075: LD_VAR 0 10
47079: PUSH
47080: LD_VAR 0 7
47084: PPUSH
47085: LD_INT 3
47087: PPUSH
47088: CALL_OW 259
47092: PUSH
47093: LD_INT 3
47095: MUL
47096: MUL
47097: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47098: LD_VAR 0 6
47102: PPUSH
47103: CALL_OW 264
47107: PUSH
47108: LD_INT 5
47110: PUSH
47111: LD_INT 6
47113: PUSH
47114: LD_INT 46
47116: PUSH
47117: LD_INT 44
47119: PUSH
47120: LD_INT 47
47122: PUSH
47123: LD_INT 45
47125: PUSH
47126: LD_INT 28
47128: PUSH
47129: LD_INT 7
47131: PUSH
47132: LD_INT 27
47134: PUSH
47135: LD_INT 29
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: IN
47150: PUSH
47151: LD_VAR 0 1
47155: PPUSH
47156: LD_INT 52
47158: PPUSH
47159: CALL_OW 321
47163: PUSH
47164: LD_INT 2
47166: EQUAL
47167: AND
47168: IFFALSE 47185
// bpoints := bpoints * 1.2 ;
47170: LD_ADDR_VAR 0 10
47174: PUSH
47175: LD_VAR 0 10
47179: PUSH
47180: LD_REAL  1.20000000000000E+0000
47183: MUL
47184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47185: LD_VAR 0 6
47189: PPUSH
47190: CALL_OW 264
47194: PUSH
47195: LD_INT 6
47197: PUSH
47198: LD_INT 46
47200: PUSH
47201: LD_INT 47
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: LIST
47208: IN
47209: IFFALSE 47226
// bpoints := bpoints * 1.2 ;
47211: LD_ADDR_VAR 0 10
47215: PUSH
47216: LD_VAR 0 10
47220: PUSH
47221: LD_REAL  1.20000000000000E+0000
47224: MUL
47225: ST_TO_ADDR
// end ; unit_building :
47226: GO 47240
47228: LD_INT 3
47230: DOUBLE
47231: EQUAL
47232: IFTRUE 47236
47234: GO 47239
47236: POP
// ; end ;
47237: GO 47240
47239: POP
// for j = 1 to 3 do
47240: LD_ADDR_VAR 0 7
47244: PUSH
47245: DOUBLE
47246: LD_INT 1
47248: DEC
47249: ST_TO_ADDR
47250: LD_INT 3
47252: PUSH
47253: FOR_TO
47254: IFFALSE 47307
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47256: LD_ADDR_VAR 0 5
47260: PUSH
47261: LD_VAR 0 5
47265: PPUSH
47266: LD_VAR 0 7
47270: PPUSH
47271: LD_VAR 0 5
47275: PUSH
47276: LD_VAR 0 7
47280: ARRAY
47281: PUSH
47282: LD_VAR 0 9
47286: PUSH
47287: LD_VAR 0 7
47291: ARRAY
47292: PUSH
47293: LD_VAR 0 10
47297: MUL
47298: PLUS
47299: PPUSH
47300: CALL_OW 1
47304: ST_TO_ADDR
47305: GO 47253
47307: POP
47308: POP
// end ;
47309: GO 45788
47311: POP
47312: POP
// result := Replace ( result , 4 , tmp ) ;
47313: LD_ADDR_VAR 0 5
47317: PUSH
47318: LD_VAR 0 5
47322: PPUSH
47323: LD_INT 4
47325: PPUSH
47326: LD_VAR 0 8
47330: PPUSH
47331: CALL_OW 1
47335: ST_TO_ADDR
// end ;
47336: LD_VAR 0 5
47340: RET
// export function DangerAtRange ( unit , range ) ; begin
47341: LD_INT 0
47343: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47344: LD_ADDR_VAR 0 3
47348: PUSH
47349: LD_VAR 0 1
47353: PPUSH
47354: CALL_OW 255
47358: PPUSH
47359: LD_VAR 0 1
47363: PPUSH
47364: CALL_OW 250
47368: PPUSH
47369: LD_VAR 0 1
47373: PPUSH
47374: CALL_OW 251
47378: PPUSH
47379: LD_VAR 0 2
47383: PPUSH
47384: CALL 45640 0 4
47388: ST_TO_ADDR
// end ;
47389: LD_VAR 0 3
47393: RET
// export function DangerInArea ( side , area ) ; begin
47394: LD_INT 0
47396: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47397: LD_ADDR_VAR 0 3
47401: PUSH
47402: LD_VAR 0 2
47406: PPUSH
47407: LD_INT 81
47409: PUSH
47410: LD_VAR 0 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PPUSH
47419: CALL_OW 70
47423: ST_TO_ADDR
// end ;
47424: LD_VAR 0 3
47428: RET
// export function IsExtension ( b ) ; begin
47429: LD_INT 0
47431: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47432: LD_ADDR_VAR 0 2
47436: PUSH
47437: LD_VAR 0 1
47441: PUSH
47442: LD_INT 23
47444: PUSH
47445: LD_INT 20
47447: PUSH
47448: LD_INT 22
47450: PUSH
47451: LD_INT 17
47453: PUSH
47454: LD_INT 24
47456: PUSH
47457: LD_INT 21
47459: PUSH
47460: LD_INT 19
47462: PUSH
47463: LD_INT 16
47465: PUSH
47466: LD_INT 25
47468: PUSH
47469: LD_INT 18
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: IN
47484: ST_TO_ADDR
// end ;
47485: LD_VAR 0 2
47489: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47490: LD_INT 0
47492: PPUSH
47493: PPUSH
47494: PPUSH
// result := [ ] ;
47495: LD_ADDR_VAR 0 4
47499: PUSH
47500: EMPTY
47501: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47502: LD_ADDR_VAR 0 5
47506: PUSH
47507: LD_VAR 0 2
47511: PPUSH
47512: LD_INT 21
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PPUSH
47522: CALL_OW 70
47526: ST_TO_ADDR
// if not tmp then
47527: LD_VAR 0 5
47531: NOT
47532: IFFALSE 47536
// exit ;
47534: GO 47600
// if checkLink then
47536: LD_VAR 0 3
47540: IFFALSE 47590
// begin for i in tmp do
47542: LD_ADDR_VAR 0 6
47546: PUSH
47547: LD_VAR 0 5
47551: PUSH
47552: FOR_IN
47553: IFFALSE 47588
// if GetBase ( i ) <> base then
47555: LD_VAR 0 6
47559: PPUSH
47560: CALL_OW 274
47564: PUSH
47565: LD_VAR 0 1
47569: NONEQUAL
47570: IFFALSE 47586
// ComLinkToBase ( base , i ) ;
47572: LD_VAR 0 1
47576: PPUSH
47577: LD_VAR 0 6
47581: PPUSH
47582: CALL_OW 169
47586: GO 47552
47588: POP
47589: POP
// end ; result := tmp ;
47590: LD_ADDR_VAR 0 4
47594: PUSH
47595: LD_VAR 0 5
47599: ST_TO_ADDR
// end ;
47600: LD_VAR 0 4
47604: RET
// export function ComComplete ( units , b ) ; var i ; begin
47605: LD_INT 0
47607: PPUSH
47608: PPUSH
// if not units then
47609: LD_VAR 0 1
47613: NOT
47614: IFFALSE 47618
// exit ;
47616: GO 47708
// for i in units do
47618: LD_ADDR_VAR 0 4
47622: PUSH
47623: LD_VAR 0 1
47627: PUSH
47628: FOR_IN
47629: IFFALSE 47706
// if BuildingStatus ( b ) = bs_build then
47631: LD_VAR 0 2
47635: PPUSH
47636: CALL_OW 461
47640: PUSH
47641: LD_INT 1
47643: EQUAL
47644: IFFALSE 47704
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47646: LD_VAR 0 4
47650: PPUSH
47651: LD_STRING h
47653: PUSH
47654: LD_VAR 0 2
47658: PPUSH
47659: CALL_OW 250
47663: PUSH
47664: LD_VAR 0 2
47668: PPUSH
47669: CALL_OW 251
47673: PUSH
47674: LD_VAR 0 2
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: PUSH
47697: EMPTY
47698: LIST
47699: PPUSH
47700: CALL_OW 446
47704: GO 47628
47706: POP
47707: POP
// end ;
47708: LD_VAR 0 3
47712: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47713: LD_INT 0
47715: PPUSH
47716: PPUSH
47717: PPUSH
47718: PPUSH
47719: PPUSH
47720: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47721: LD_VAR 0 1
47725: NOT
47726: PUSH
47727: LD_VAR 0 1
47731: PPUSH
47732: CALL_OW 263
47736: PUSH
47737: LD_INT 2
47739: NONEQUAL
47740: OR
47741: IFFALSE 47745
// exit ;
47743: GO 48061
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47745: LD_ADDR_VAR 0 6
47749: PUSH
47750: LD_INT 22
47752: PUSH
47753: LD_VAR 0 1
47757: PPUSH
47758: CALL_OW 255
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 30
47772: PUSH
47773: LD_INT 36
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 34
47782: PUSH
47783: LD_INT 31
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PPUSH
47799: CALL_OW 69
47803: ST_TO_ADDR
// if not tmp then
47804: LD_VAR 0 6
47808: NOT
47809: IFFALSE 47813
// exit ;
47811: GO 48061
// result := [ ] ;
47813: LD_ADDR_VAR 0 2
47817: PUSH
47818: EMPTY
47819: ST_TO_ADDR
// for i in tmp do
47820: LD_ADDR_VAR 0 3
47824: PUSH
47825: LD_VAR 0 6
47829: PUSH
47830: FOR_IN
47831: IFFALSE 47902
// begin t := UnitsInside ( i ) ;
47833: LD_ADDR_VAR 0 4
47837: PUSH
47838: LD_VAR 0 3
47842: PPUSH
47843: CALL_OW 313
47847: ST_TO_ADDR
// if t then
47848: LD_VAR 0 4
47852: IFFALSE 47900
// for j in t do
47854: LD_ADDR_VAR 0 7
47858: PUSH
47859: LD_VAR 0 4
47863: PUSH
47864: FOR_IN
47865: IFFALSE 47898
// result := Replace ( result , result + 1 , j ) ;
47867: LD_ADDR_VAR 0 2
47871: PUSH
47872: LD_VAR 0 2
47876: PPUSH
47877: LD_VAR 0 2
47881: PUSH
47882: LD_INT 1
47884: PLUS
47885: PPUSH
47886: LD_VAR 0 7
47890: PPUSH
47891: CALL_OW 1
47895: ST_TO_ADDR
47896: GO 47864
47898: POP
47899: POP
// end ;
47900: GO 47830
47902: POP
47903: POP
// if not result then
47904: LD_VAR 0 2
47908: NOT
47909: IFFALSE 47913
// exit ;
47911: GO 48061
// mech := result [ 1 ] ;
47913: LD_ADDR_VAR 0 5
47917: PUSH
47918: LD_VAR 0 2
47922: PUSH
47923: LD_INT 1
47925: ARRAY
47926: ST_TO_ADDR
// if result > 1 then
47927: LD_VAR 0 2
47931: PUSH
47932: LD_INT 1
47934: GREATER
47935: IFFALSE 48047
// begin for i = 2 to result do
47937: LD_ADDR_VAR 0 3
47941: PUSH
47942: DOUBLE
47943: LD_INT 2
47945: DEC
47946: ST_TO_ADDR
47947: LD_VAR 0 2
47951: PUSH
47952: FOR_TO
47953: IFFALSE 48045
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47955: LD_ADDR_VAR 0 4
47959: PUSH
47960: LD_VAR 0 2
47964: PUSH
47965: LD_VAR 0 3
47969: ARRAY
47970: PPUSH
47971: LD_INT 3
47973: PPUSH
47974: CALL_OW 259
47978: PUSH
47979: LD_VAR 0 2
47983: PUSH
47984: LD_VAR 0 3
47988: ARRAY
47989: PPUSH
47990: CALL_OW 432
47994: MINUS
47995: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47996: LD_VAR 0 4
48000: PUSH
48001: LD_VAR 0 5
48005: PPUSH
48006: LD_INT 3
48008: PPUSH
48009: CALL_OW 259
48013: PUSH
48014: LD_VAR 0 5
48018: PPUSH
48019: CALL_OW 432
48023: MINUS
48024: GREATEREQUAL
48025: IFFALSE 48043
// mech := result [ i ] ;
48027: LD_ADDR_VAR 0 5
48031: PUSH
48032: LD_VAR 0 2
48036: PUSH
48037: LD_VAR 0 3
48041: ARRAY
48042: ST_TO_ADDR
// end ;
48043: GO 47952
48045: POP
48046: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48047: LD_VAR 0 1
48051: PPUSH
48052: LD_VAR 0 5
48056: PPUSH
48057: CALL_OW 135
// end ;
48061: LD_VAR 0 2
48065: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48066: LD_INT 0
48068: PPUSH
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
// result := [ ] ;
48081: LD_ADDR_VAR 0 7
48085: PUSH
48086: EMPTY
48087: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48088: LD_VAR 0 1
48092: PPUSH
48093: CALL_OW 266
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: IN
48108: NOT
48109: IFFALSE 48113
// exit ;
48111: GO 49747
// if name then
48113: LD_VAR 0 3
48117: IFFALSE 48133
// SetBName ( base_dep , name ) ;
48119: LD_VAR 0 1
48123: PPUSH
48124: LD_VAR 0 3
48128: PPUSH
48129: CALL_OW 500
// base := GetBase ( base_dep ) ;
48133: LD_ADDR_VAR 0 15
48137: PUSH
48138: LD_VAR 0 1
48142: PPUSH
48143: CALL_OW 274
48147: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48148: LD_ADDR_VAR 0 16
48152: PUSH
48153: LD_VAR 0 1
48157: PPUSH
48158: CALL_OW 255
48162: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48163: LD_ADDR_VAR 0 17
48167: PUSH
48168: LD_VAR 0 1
48172: PPUSH
48173: CALL_OW 248
48177: ST_TO_ADDR
// if sources then
48178: LD_VAR 0 5
48182: IFFALSE 48229
// for i = 1 to 3 do
48184: LD_ADDR_VAR 0 8
48188: PUSH
48189: DOUBLE
48190: LD_INT 1
48192: DEC
48193: ST_TO_ADDR
48194: LD_INT 3
48196: PUSH
48197: FOR_TO
48198: IFFALSE 48227
// AddResourceType ( base , i , sources [ i ] ) ;
48200: LD_VAR 0 15
48204: PPUSH
48205: LD_VAR 0 8
48209: PPUSH
48210: LD_VAR 0 5
48214: PUSH
48215: LD_VAR 0 8
48219: ARRAY
48220: PPUSH
48221: CALL_OW 276
48225: GO 48197
48227: POP
48228: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48229: LD_ADDR_VAR 0 18
48233: PUSH
48234: LD_VAR 0 15
48238: PPUSH
48239: LD_VAR 0 2
48243: PPUSH
48244: LD_INT 1
48246: PPUSH
48247: CALL 47490 0 3
48251: ST_TO_ADDR
// InitHc ;
48252: CALL_OW 19
// InitUc ;
48256: CALL_OW 18
// uc_side := side ;
48260: LD_ADDR_OWVAR 20
48264: PUSH
48265: LD_VAR 0 16
48269: ST_TO_ADDR
// uc_nation := nation ;
48270: LD_ADDR_OWVAR 21
48274: PUSH
48275: LD_VAR 0 17
48279: ST_TO_ADDR
// if buildings then
48280: LD_VAR 0 18
48284: IFFALSE 49606
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48286: LD_ADDR_VAR 0 19
48290: PUSH
48291: LD_VAR 0 18
48295: PPUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 30
48301: PUSH
48302: LD_INT 29
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 30
48311: PUSH
48312: LD_INT 30
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: PPUSH
48324: CALL_OW 72
48328: ST_TO_ADDR
// if tmp then
48329: LD_VAR 0 19
48333: IFFALSE 48381
// for i in tmp do
48335: LD_ADDR_VAR 0 8
48339: PUSH
48340: LD_VAR 0 19
48344: PUSH
48345: FOR_IN
48346: IFFALSE 48379
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48348: LD_VAR 0 8
48352: PPUSH
48353: CALL_OW 250
48357: PPUSH
48358: LD_VAR 0 8
48362: PPUSH
48363: CALL_OW 251
48367: PPUSH
48368: LD_VAR 0 16
48372: PPUSH
48373: CALL_OW 441
48377: GO 48345
48379: POP
48380: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48381: LD_VAR 0 18
48385: PPUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 30
48391: PUSH
48392: LD_INT 32
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 30
48401: PUSH
48402: LD_INT 33
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: PPUSH
48414: CALL_OW 72
48418: IFFALSE 48506
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48420: LD_ADDR_VAR 0 8
48424: PUSH
48425: LD_VAR 0 18
48429: PPUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 30
48435: PUSH
48436: LD_INT 32
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 30
48445: PUSH
48446: LD_INT 33
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: PPUSH
48458: CALL_OW 72
48462: PUSH
48463: FOR_IN
48464: IFFALSE 48504
// begin if not GetBWeapon ( i ) then
48466: LD_VAR 0 8
48470: PPUSH
48471: CALL_OW 269
48475: NOT
48476: IFFALSE 48502
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48478: LD_VAR 0 8
48482: PPUSH
48483: LD_VAR 0 8
48487: PPUSH
48488: LD_VAR 0 2
48492: PPUSH
48493: CALL 49752 0 2
48497: PPUSH
48498: CALL_OW 431
// end ;
48502: GO 48463
48504: POP
48505: POP
// end ; for i = 1 to personel do
48506: LD_ADDR_VAR 0 8
48510: PUSH
48511: DOUBLE
48512: LD_INT 1
48514: DEC
48515: ST_TO_ADDR
48516: LD_VAR 0 6
48520: PUSH
48521: FOR_TO
48522: IFFALSE 49586
// begin if i > 4 then
48524: LD_VAR 0 8
48528: PUSH
48529: LD_INT 4
48531: GREATER
48532: IFFALSE 48536
// break ;
48534: GO 49586
// case i of 1 :
48536: LD_VAR 0 8
48540: PUSH
48541: LD_INT 1
48543: DOUBLE
48544: EQUAL
48545: IFTRUE 48549
48547: GO 48629
48549: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48550: LD_ADDR_VAR 0 12
48554: PUSH
48555: LD_VAR 0 18
48559: PPUSH
48560: LD_INT 22
48562: PUSH
48563: LD_VAR 0 16
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 58
48574: PUSH
48575: EMPTY
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 30
48583: PUSH
48584: LD_INT 32
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 30
48593: PUSH
48594: LD_INT 4
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 30
48603: PUSH
48604: LD_INT 5
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: PPUSH
48622: CALL_OW 72
48626: ST_TO_ADDR
48627: GO 48851
48629: LD_INT 2
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48637
48635: GO 48699
48637: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48638: LD_ADDR_VAR 0 12
48642: PUSH
48643: LD_VAR 0 18
48647: PPUSH
48648: LD_INT 22
48650: PUSH
48651: LD_VAR 0 16
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 30
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 30
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PPUSH
48692: CALL_OW 72
48696: ST_TO_ADDR
48697: GO 48851
48699: LD_INT 3
48701: DOUBLE
48702: EQUAL
48703: IFTRUE 48707
48705: GO 48769
48707: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48708: LD_ADDR_VAR 0 12
48712: PUSH
48713: LD_VAR 0 18
48717: PPUSH
48718: LD_INT 22
48720: PUSH
48721: LD_VAR 0 16
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 30
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 30
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PPUSH
48762: CALL_OW 72
48766: ST_TO_ADDR
48767: GO 48851
48769: LD_INT 4
48771: DOUBLE
48772: EQUAL
48773: IFTRUE 48777
48775: GO 48850
48777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48778: LD_ADDR_VAR 0 12
48782: PUSH
48783: LD_VAR 0 18
48787: PPUSH
48788: LD_INT 22
48790: PUSH
48791: LD_VAR 0 16
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 30
48805: PUSH
48806: LD_INT 6
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 30
48815: PUSH
48816: LD_INT 7
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 30
48825: PUSH
48826: LD_INT 8
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PPUSH
48843: CALL_OW 72
48847: ST_TO_ADDR
48848: GO 48851
48850: POP
// if i = 1 then
48851: LD_VAR 0 8
48855: PUSH
48856: LD_INT 1
48858: EQUAL
48859: IFFALSE 48970
// begin tmp := [ ] ;
48861: LD_ADDR_VAR 0 19
48865: PUSH
48866: EMPTY
48867: ST_TO_ADDR
// for j in f do
48868: LD_ADDR_VAR 0 9
48872: PUSH
48873: LD_VAR 0 12
48877: PUSH
48878: FOR_IN
48879: IFFALSE 48952
// if GetBType ( j ) = b_bunker then
48881: LD_VAR 0 9
48885: PPUSH
48886: CALL_OW 266
48890: PUSH
48891: LD_INT 32
48893: EQUAL
48894: IFFALSE 48921
// tmp := Insert ( tmp , 1 , j ) else
48896: LD_ADDR_VAR 0 19
48900: PUSH
48901: LD_VAR 0 19
48905: PPUSH
48906: LD_INT 1
48908: PPUSH
48909: LD_VAR 0 9
48913: PPUSH
48914: CALL_OW 2
48918: ST_TO_ADDR
48919: GO 48950
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48921: LD_ADDR_VAR 0 19
48925: PUSH
48926: LD_VAR 0 19
48930: PPUSH
48931: LD_VAR 0 19
48935: PUSH
48936: LD_INT 1
48938: PLUS
48939: PPUSH
48940: LD_VAR 0 9
48944: PPUSH
48945: CALL_OW 2
48949: ST_TO_ADDR
48950: GO 48878
48952: POP
48953: POP
// if tmp then
48954: LD_VAR 0 19
48958: IFFALSE 48970
// f := tmp ;
48960: LD_ADDR_VAR 0 12
48964: PUSH
48965: LD_VAR 0 19
48969: ST_TO_ADDR
// end ; x := personel [ i ] ;
48970: LD_ADDR_VAR 0 13
48974: PUSH
48975: LD_VAR 0 6
48979: PUSH
48980: LD_VAR 0 8
48984: ARRAY
48985: ST_TO_ADDR
// if x = - 1 then
48986: LD_VAR 0 13
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: EQUAL
48995: IFFALSE 49204
// begin for j in f do
48997: LD_ADDR_VAR 0 9
49001: PUSH
49002: LD_VAR 0 12
49006: PUSH
49007: FOR_IN
49008: IFFALSE 49200
// repeat InitHc ;
49010: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49014: LD_VAR 0 9
49018: PPUSH
49019: CALL_OW 266
49023: PUSH
49024: LD_INT 5
49026: EQUAL
49027: IFFALSE 49097
// begin if UnitsInside ( j ) < 3 then
49029: LD_VAR 0 9
49033: PPUSH
49034: CALL_OW 313
49038: PUSH
49039: LD_INT 3
49041: LESS
49042: IFFALSE 49078
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49044: LD_INT 0
49046: PPUSH
49047: LD_INT 5
49049: PUSH
49050: LD_INT 8
49052: PUSH
49053: LD_INT 9
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: PUSH
49061: LD_VAR 0 17
49065: ARRAY
49066: PPUSH
49067: LD_VAR 0 4
49071: PPUSH
49072: CALL_OW 380
49076: GO 49095
// PrepareHuman ( false , i , skill ) ;
49078: LD_INT 0
49080: PPUSH
49081: LD_VAR 0 8
49085: PPUSH
49086: LD_VAR 0 4
49090: PPUSH
49091: CALL_OW 380
// end else
49095: GO 49114
// PrepareHuman ( false , i , skill ) ;
49097: LD_INT 0
49099: PPUSH
49100: LD_VAR 0 8
49104: PPUSH
49105: LD_VAR 0 4
49109: PPUSH
49110: CALL_OW 380
// un := CreateHuman ;
49114: LD_ADDR_VAR 0 14
49118: PUSH
49119: CALL_OW 44
49123: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49124: LD_ADDR_VAR 0 7
49128: PUSH
49129: LD_VAR 0 7
49133: PPUSH
49134: LD_INT 1
49136: PPUSH
49137: LD_VAR 0 14
49141: PPUSH
49142: CALL_OW 2
49146: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49147: LD_VAR 0 14
49151: PPUSH
49152: LD_VAR 0 9
49156: PPUSH
49157: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49161: LD_VAR 0 9
49165: PPUSH
49166: CALL_OW 313
49170: PUSH
49171: LD_INT 6
49173: EQUAL
49174: PUSH
49175: LD_VAR 0 9
49179: PPUSH
49180: CALL_OW 266
49184: PUSH
49185: LD_INT 32
49187: PUSH
49188: LD_INT 31
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: IN
49195: OR
49196: IFFALSE 49010
49198: GO 49007
49200: POP
49201: POP
// end else
49202: GO 49584
// for j = 1 to x do
49204: LD_ADDR_VAR 0 9
49208: PUSH
49209: DOUBLE
49210: LD_INT 1
49212: DEC
49213: ST_TO_ADDR
49214: LD_VAR 0 13
49218: PUSH
49219: FOR_TO
49220: IFFALSE 49582
// begin InitHc ;
49222: CALL_OW 19
// if not f then
49226: LD_VAR 0 12
49230: NOT
49231: IFFALSE 49320
// begin PrepareHuman ( false , i , skill ) ;
49233: LD_INT 0
49235: PPUSH
49236: LD_VAR 0 8
49240: PPUSH
49241: LD_VAR 0 4
49245: PPUSH
49246: CALL_OW 380
// un := CreateHuman ;
49250: LD_ADDR_VAR 0 14
49254: PUSH
49255: CALL_OW 44
49259: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49260: LD_ADDR_VAR 0 7
49264: PUSH
49265: LD_VAR 0 7
49269: PPUSH
49270: LD_INT 1
49272: PPUSH
49273: LD_VAR 0 14
49277: PPUSH
49278: CALL_OW 2
49282: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49283: LD_VAR 0 14
49287: PPUSH
49288: LD_VAR 0 1
49292: PPUSH
49293: CALL_OW 250
49297: PPUSH
49298: LD_VAR 0 1
49302: PPUSH
49303: CALL_OW 251
49307: PPUSH
49308: LD_INT 10
49310: PPUSH
49311: LD_INT 0
49313: PPUSH
49314: CALL_OW 50
// continue ;
49318: GO 49219
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49320: LD_VAR 0 12
49324: PUSH
49325: LD_INT 1
49327: ARRAY
49328: PPUSH
49329: CALL_OW 313
49333: PUSH
49334: LD_VAR 0 12
49338: PUSH
49339: LD_INT 1
49341: ARRAY
49342: PPUSH
49343: CALL_OW 266
49347: PUSH
49348: LD_INT 32
49350: PUSH
49351: LD_INT 31
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: IN
49358: AND
49359: PUSH
49360: LD_VAR 0 12
49364: PUSH
49365: LD_INT 1
49367: ARRAY
49368: PPUSH
49369: CALL_OW 313
49373: PUSH
49374: LD_INT 6
49376: EQUAL
49377: OR
49378: IFFALSE 49398
// f := Delete ( f , 1 ) ;
49380: LD_ADDR_VAR 0 12
49384: PUSH
49385: LD_VAR 0 12
49389: PPUSH
49390: LD_INT 1
49392: PPUSH
49393: CALL_OW 3
49397: ST_TO_ADDR
// if not f then
49398: LD_VAR 0 12
49402: NOT
49403: IFFALSE 49421
// begin x := x + 2 ;
49405: LD_ADDR_VAR 0 13
49409: PUSH
49410: LD_VAR 0 13
49414: PUSH
49415: LD_INT 2
49417: PLUS
49418: ST_TO_ADDR
// continue ;
49419: GO 49219
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49421: LD_VAR 0 12
49425: PUSH
49426: LD_INT 1
49428: ARRAY
49429: PPUSH
49430: CALL_OW 266
49434: PUSH
49435: LD_INT 5
49437: EQUAL
49438: IFFALSE 49512
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49440: LD_VAR 0 12
49444: PUSH
49445: LD_INT 1
49447: ARRAY
49448: PPUSH
49449: CALL_OW 313
49453: PUSH
49454: LD_INT 3
49456: LESS
49457: IFFALSE 49493
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49459: LD_INT 0
49461: PPUSH
49462: LD_INT 5
49464: PUSH
49465: LD_INT 8
49467: PUSH
49468: LD_INT 9
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: LIST
49475: PUSH
49476: LD_VAR 0 17
49480: ARRAY
49481: PPUSH
49482: LD_VAR 0 4
49486: PPUSH
49487: CALL_OW 380
49491: GO 49510
// PrepareHuman ( false , i , skill ) ;
49493: LD_INT 0
49495: PPUSH
49496: LD_VAR 0 8
49500: PPUSH
49501: LD_VAR 0 4
49505: PPUSH
49506: CALL_OW 380
// end else
49510: GO 49529
// PrepareHuman ( false , i , skill ) ;
49512: LD_INT 0
49514: PPUSH
49515: LD_VAR 0 8
49519: PPUSH
49520: LD_VAR 0 4
49524: PPUSH
49525: CALL_OW 380
// un := CreateHuman ;
49529: LD_ADDR_VAR 0 14
49533: PUSH
49534: CALL_OW 44
49538: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49539: LD_ADDR_VAR 0 7
49543: PUSH
49544: LD_VAR 0 7
49548: PPUSH
49549: LD_INT 1
49551: PPUSH
49552: LD_VAR 0 14
49556: PPUSH
49557: CALL_OW 2
49561: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49562: LD_VAR 0 14
49566: PPUSH
49567: LD_VAR 0 12
49571: PUSH
49572: LD_INT 1
49574: ARRAY
49575: PPUSH
49576: CALL_OW 52
// end ;
49580: GO 49219
49582: POP
49583: POP
// end ;
49584: GO 48521
49586: POP
49587: POP
// result := result ^ buildings ;
49588: LD_ADDR_VAR 0 7
49592: PUSH
49593: LD_VAR 0 7
49597: PUSH
49598: LD_VAR 0 18
49602: ADD
49603: ST_TO_ADDR
// end else
49604: GO 49747
// begin for i = 1 to personel do
49606: LD_ADDR_VAR 0 8
49610: PUSH
49611: DOUBLE
49612: LD_INT 1
49614: DEC
49615: ST_TO_ADDR
49616: LD_VAR 0 6
49620: PUSH
49621: FOR_TO
49622: IFFALSE 49745
// begin if i > 4 then
49624: LD_VAR 0 8
49628: PUSH
49629: LD_INT 4
49631: GREATER
49632: IFFALSE 49636
// break ;
49634: GO 49745
// x := personel [ i ] ;
49636: LD_ADDR_VAR 0 13
49640: PUSH
49641: LD_VAR 0 6
49645: PUSH
49646: LD_VAR 0 8
49650: ARRAY
49651: ST_TO_ADDR
// if x = - 1 then
49652: LD_VAR 0 13
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: EQUAL
49661: IFFALSE 49665
// continue ;
49663: GO 49621
// PrepareHuman ( false , i , skill ) ;
49665: LD_INT 0
49667: PPUSH
49668: LD_VAR 0 8
49672: PPUSH
49673: LD_VAR 0 4
49677: PPUSH
49678: CALL_OW 380
// un := CreateHuman ;
49682: LD_ADDR_VAR 0 14
49686: PUSH
49687: CALL_OW 44
49691: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49692: LD_VAR 0 14
49696: PPUSH
49697: LD_VAR 0 1
49701: PPUSH
49702: CALL_OW 250
49706: PPUSH
49707: LD_VAR 0 1
49711: PPUSH
49712: CALL_OW 251
49716: PPUSH
49717: LD_INT 10
49719: PPUSH
49720: LD_INT 0
49722: PPUSH
49723: CALL_OW 50
// result := result ^ un ;
49727: LD_ADDR_VAR 0 7
49731: PUSH
49732: LD_VAR 0 7
49736: PUSH
49737: LD_VAR 0 14
49741: ADD
49742: ST_TO_ADDR
// end ;
49743: GO 49621
49745: POP
49746: POP
// end ; end ;
49747: LD_VAR 0 7
49751: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49752: LD_INT 0
49754: PPUSH
49755: PPUSH
49756: PPUSH
49757: PPUSH
49758: PPUSH
49759: PPUSH
49760: PPUSH
49761: PPUSH
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
// result := false ;
49770: LD_ADDR_VAR 0 3
49774: PUSH
49775: LD_INT 0
49777: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49778: LD_VAR 0 1
49782: NOT
49783: PUSH
49784: LD_VAR 0 1
49788: PPUSH
49789: CALL_OW 266
49793: PUSH
49794: LD_INT 32
49796: PUSH
49797: LD_INT 33
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: IN
49804: NOT
49805: OR
49806: IFFALSE 49810
// exit ;
49808: GO 50919
// nat := GetNation ( tower ) ;
49810: LD_ADDR_VAR 0 12
49814: PUSH
49815: LD_VAR 0 1
49819: PPUSH
49820: CALL_OW 248
49824: ST_TO_ADDR
// side := GetSide ( tower ) ;
49825: LD_ADDR_VAR 0 16
49829: PUSH
49830: LD_VAR 0 1
49834: PPUSH
49835: CALL_OW 255
49839: ST_TO_ADDR
// x := GetX ( tower ) ;
49840: LD_ADDR_VAR 0 10
49844: PUSH
49845: LD_VAR 0 1
49849: PPUSH
49850: CALL_OW 250
49854: ST_TO_ADDR
// y := GetY ( tower ) ;
49855: LD_ADDR_VAR 0 11
49859: PUSH
49860: LD_VAR 0 1
49864: PPUSH
49865: CALL_OW 251
49869: ST_TO_ADDR
// if not x or not y then
49870: LD_VAR 0 10
49874: NOT
49875: PUSH
49876: LD_VAR 0 11
49880: NOT
49881: OR
49882: IFFALSE 49886
// exit ;
49884: GO 50919
// weapon := 0 ;
49886: LD_ADDR_VAR 0 18
49890: PUSH
49891: LD_INT 0
49893: ST_TO_ADDR
// fac_list := [ ] ;
49894: LD_ADDR_VAR 0 17
49898: PUSH
49899: EMPTY
49900: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49901: LD_ADDR_VAR 0 6
49905: PUSH
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 274
49915: PPUSH
49916: LD_VAR 0 2
49920: PPUSH
49921: LD_INT 0
49923: PPUSH
49924: CALL 47490 0 3
49928: PPUSH
49929: LD_INT 30
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PPUSH
49939: CALL_OW 72
49943: ST_TO_ADDR
// if not factories then
49944: LD_VAR 0 6
49948: NOT
49949: IFFALSE 49953
// exit ;
49951: GO 50919
// for i in factories do
49953: LD_ADDR_VAR 0 8
49957: PUSH
49958: LD_VAR 0 6
49962: PUSH
49963: FOR_IN
49964: IFFALSE 49989
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49966: LD_ADDR_VAR 0 17
49970: PUSH
49971: LD_VAR 0 17
49975: PUSH
49976: LD_VAR 0 8
49980: PPUSH
49981: CALL_OW 478
49985: UNION
49986: ST_TO_ADDR
49987: GO 49963
49989: POP
49990: POP
// if not fac_list then
49991: LD_VAR 0 17
49995: NOT
49996: IFFALSE 50000
// exit ;
49998: GO 50919
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50000: LD_ADDR_VAR 0 5
50004: PUSH
50005: LD_INT 4
50007: PUSH
50008: LD_INT 5
50010: PUSH
50011: LD_INT 9
50013: PUSH
50014: LD_INT 10
50016: PUSH
50017: LD_INT 6
50019: PUSH
50020: LD_INT 7
50022: PUSH
50023: LD_INT 11
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 27
50037: PUSH
50038: LD_INT 28
50040: PUSH
50041: LD_INT 26
50043: PUSH
50044: LD_INT 30
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 43
50055: PUSH
50056: LD_INT 44
50058: PUSH
50059: LD_INT 46
50061: PUSH
50062: LD_INT 45
50064: PUSH
50065: LD_INT 47
50067: PUSH
50068: LD_INT 49
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: PUSH
50084: LD_VAR 0 12
50088: ARRAY
50089: ST_TO_ADDR
// list := list isect fac_list ;
50090: LD_ADDR_VAR 0 5
50094: PUSH
50095: LD_VAR 0 5
50099: PUSH
50100: LD_VAR 0 17
50104: ISECT
50105: ST_TO_ADDR
// if not list then
50106: LD_VAR 0 5
50110: NOT
50111: IFFALSE 50115
// exit ;
50113: GO 50919
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50115: LD_VAR 0 12
50119: PUSH
50120: LD_INT 3
50122: EQUAL
50123: PUSH
50124: LD_INT 49
50126: PUSH
50127: LD_VAR 0 5
50131: IN
50132: AND
50133: PUSH
50134: LD_INT 31
50136: PPUSH
50137: LD_VAR 0 16
50141: PPUSH
50142: CALL_OW 321
50146: PUSH
50147: LD_INT 2
50149: EQUAL
50150: AND
50151: IFFALSE 50211
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50153: LD_INT 22
50155: PUSH
50156: LD_VAR 0 16
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 35
50167: PUSH
50168: LD_INT 49
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 91
50177: PUSH
50178: LD_VAR 0 1
50182: PUSH
50183: LD_INT 10
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: PPUSH
50196: CALL_OW 69
50200: NOT
50201: IFFALSE 50211
// weapon := ru_time_lapser ;
50203: LD_ADDR_VAR 0 18
50207: PUSH
50208: LD_INT 49
50210: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50211: LD_VAR 0 12
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: IN
50226: PUSH
50227: LD_INT 11
50229: PUSH
50230: LD_VAR 0 5
50234: IN
50235: PUSH
50236: LD_INT 30
50238: PUSH
50239: LD_VAR 0 5
50243: IN
50244: OR
50245: AND
50246: PUSH
50247: LD_INT 6
50249: PPUSH
50250: LD_VAR 0 16
50254: PPUSH
50255: CALL_OW 321
50259: PUSH
50260: LD_INT 2
50262: EQUAL
50263: AND
50264: IFFALSE 50429
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50266: LD_INT 22
50268: PUSH
50269: LD_VAR 0 16
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: LD_INT 35
50283: PUSH
50284: LD_INT 11
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 35
50293: PUSH
50294: LD_INT 30
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 91
50308: PUSH
50309: LD_VAR 0 1
50313: PUSH
50314: LD_INT 18
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: LIST
50326: PPUSH
50327: CALL_OW 69
50331: NOT
50332: PUSH
50333: LD_INT 22
50335: PUSH
50336: LD_VAR 0 16
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 30
50350: PUSH
50351: LD_INT 32
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 30
50360: PUSH
50361: LD_INT 33
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 91
50375: PUSH
50376: LD_VAR 0 1
50380: PUSH
50381: LD_INT 12
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: PUSH
50394: EMPTY
50395: LIST
50396: PPUSH
50397: CALL_OW 69
50401: PUSH
50402: LD_INT 2
50404: GREATER
50405: AND
50406: IFFALSE 50429
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50408: LD_ADDR_VAR 0 18
50412: PUSH
50413: LD_INT 11
50415: PUSH
50416: LD_INT 30
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_VAR 0 12
50427: ARRAY
50428: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50429: LD_VAR 0 18
50433: NOT
50434: PUSH
50435: LD_INT 40
50437: PPUSH
50438: LD_VAR 0 16
50442: PPUSH
50443: CALL_OW 321
50447: PUSH
50448: LD_INT 2
50450: EQUAL
50451: AND
50452: PUSH
50453: LD_INT 7
50455: PUSH
50456: LD_VAR 0 5
50460: IN
50461: PUSH
50462: LD_INT 28
50464: PUSH
50465: LD_VAR 0 5
50469: IN
50470: OR
50471: PUSH
50472: LD_INT 45
50474: PUSH
50475: LD_VAR 0 5
50479: IN
50480: OR
50481: AND
50482: IFFALSE 50736
// begin hex := GetHexInfo ( x , y ) ;
50484: LD_ADDR_VAR 0 4
50488: PUSH
50489: LD_VAR 0 10
50493: PPUSH
50494: LD_VAR 0 11
50498: PPUSH
50499: CALL_OW 546
50503: ST_TO_ADDR
// if hex [ 1 ] then
50504: LD_VAR 0 4
50508: PUSH
50509: LD_INT 1
50511: ARRAY
50512: IFFALSE 50516
// exit ;
50514: GO 50919
// height := hex [ 2 ] ;
50516: LD_ADDR_VAR 0 15
50520: PUSH
50521: LD_VAR 0 4
50525: PUSH
50526: LD_INT 2
50528: ARRAY
50529: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50530: LD_ADDR_VAR 0 14
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: LD_INT 5
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: ST_TO_ADDR
// for i in tmp do
50553: LD_ADDR_VAR 0 8
50557: PUSH
50558: LD_VAR 0 14
50562: PUSH
50563: FOR_IN
50564: IFFALSE 50734
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50566: LD_ADDR_VAR 0 9
50570: PUSH
50571: LD_VAR 0 10
50575: PPUSH
50576: LD_VAR 0 8
50580: PPUSH
50581: LD_INT 5
50583: PPUSH
50584: CALL_OW 272
50588: PUSH
50589: LD_VAR 0 11
50593: PPUSH
50594: LD_VAR 0 8
50598: PPUSH
50599: LD_INT 5
50601: PPUSH
50602: CALL_OW 273
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50611: LD_VAR 0 9
50615: PUSH
50616: LD_INT 1
50618: ARRAY
50619: PPUSH
50620: LD_VAR 0 9
50624: PUSH
50625: LD_INT 2
50627: ARRAY
50628: PPUSH
50629: CALL_OW 488
50633: IFFALSE 50732
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50635: LD_ADDR_VAR 0 4
50639: PUSH
50640: LD_VAR 0 9
50644: PUSH
50645: LD_INT 1
50647: ARRAY
50648: PPUSH
50649: LD_VAR 0 9
50653: PUSH
50654: LD_INT 2
50656: ARRAY
50657: PPUSH
50658: CALL_OW 546
50662: ST_TO_ADDR
// if hex [ 1 ] then
50663: LD_VAR 0 4
50667: PUSH
50668: LD_INT 1
50670: ARRAY
50671: IFFALSE 50675
// continue ;
50673: GO 50563
// h := hex [ 2 ] ;
50675: LD_ADDR_VAR 0 13
50679: PUSH
50680: LD_VAR 0 4
50684: PUSH
50685: LD_INT 2
50687: ARRAY
50688: ST_TO_ADDR
// if h + 7 < height then
50689: LD_VAR 0 13
50693: PUSH
50694: LD_INT 7
50696: PLUS
50697: PUSH
50698: LD_VAR 0 15
50702: LESS
50703: IFFALSE 50732
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50705: LD_ADDR_VAR 0 18
50709: PUSH
50710: LD_INT 7
50712: PUSH
50713: LD_INT 28
50715: PUSH
50716: LD_INT 45
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: PUSH
50724: LD_VAR 0 12
50728: ARRAY
50729: ST_TO_ADDR
// break ;
50730: GO 50734
// end ; end ; end ;
50732: GO 50563
50734: POP
50735: POP
// end ; if not weapon then
50736: LD_VAR 0 18
50740: NOT
50741: IFFALSE 50801
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50743: LD_ADDR_VAR 0 5
50747: PUSH
50748: LD_VAR 0 5
50752: PUSH
50753: LD_INT 11
50755: PUSH
50756: LD_INT 30
50758: PUSH
50759: LD_INT 49
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: DIFF
50767: ST_TO_ADDR
// if not list then
50768: LD_VAR 0 5
50772: NOT
50773: IFFALSE 50777
// exit ;
50775: GO 50919
// weapon := list [ rand ( 1 , list ) ] ;
50777: LD_ADDR_VAR 0 18
50781: PUSH
50782: LD_VAR 0 5
50786: PUSH
50787: LD_INT 1
50789: PPUSH
50790: LD_VAR 0 5
50794: PPUSH
50795: CALL_OW 12
50799: ARRAY
50800: ST_TO_ADDR
// end ; if weapon then
50801: LD_VAR 0 18
50805: IFFALSE 50919
// begin tmp := CostOfWeapon ( weapon ) ;
50807: LD_ADDR_VAR 0 14
50811: PUSH
50812: LD_VAR 0 18
50816: PPUSH
50817: CALL_OW 451
50821: ST_TO_ADDR
// j := GetBase ( tower ) ;
50822: LD_ADDR_VAR 0 9
50826: PUSH
50827: LD_VAR 0 1
50831: PPUSH
50832: CALL_OW 274
50836: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50837: LD_VAR 0 9
50841: PPUSH
50842: LD_INT 1
50844: PPUSH
50845: CALL_OW 275
50849: PUSH
50850: LD_VAR 0 14
50854: PUSH
50855: LD_INT 1
50857: ARRAY
50858: GREATEREQUAL
50859: PUSH
50860: LD_VAR 0 9
50864: PPUSH
50865: LD_INT 2
50867: PPUSH
50868: CALL_OW 275
50872: PUSH
50873: LD_VAR 0 14
50877: PUSH
50878: LD_INT 2
50880: ARRAY
50881: GREATEREQUAL
50882: AND
50883: PUSH
50884: LD_VAR 0 9
50888: PPUSH
50889: LD_INT 3
50891: PPUSH
50892: CALL_OW 275
50896: PUSH
50897: LD_VAR 0 14
50901: PUSH
50902: LD_INT 3
50904: ARRAY
50905: GREATEREQUAL
50906: AND
50907: IFFALSE 50919
// result := weapon ;
50909: LD_ADDR_VAR 0 3
50913: PUSH
50914: LD_VAR 0 18
50918: ST_TO_ADDR
// end ; end ;
50919: LD_VAR 0 3
50923: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50924: LD_INT 0
50926: PPUSH
50927: PPUSH
// result := true ;
50928: LD_ADDR_VAR 0 3
50932: PUSH
50933: LD_INT 1
50935: ST_TO_ADDR
// if array1 = array2 then
50936: LD_VAR 0 1
50940: PUSH
50941: LD_VAR 0 2
50945: EQUAL
50946: IFFALSE 51006
// begin for i = 1 to array1 do
50948: LD_ADDR_VAR 0 4
50952: PUSH
50953: DOUBLE
50954: LD_INT 1
50956: DEC
50957: ST_TO_ADDR
50958: LD_VAR 0 1
50962: PUSH
50963: FOR_TO
50964: IFFALSE 51002
// if array1 [ i ] <> array2 [ i ] then
50966: LD_VAR 0 1
50970: PUSH
50971: LD_VAR 0 4
50975: ARRAY
50976: PUSH
50977: LD_VAR 0 2
50981: PUSH
50982: LD_VAR 0 4
50986: ARRAY
50987: NONEQUAL
50988: IFFALSE 51000
// begin result := false ;
50990: LD_ADDR_VAR 0 3
50994: PUSH
50995: LD_INT 0
50997: ST_TO_ADDR
// break ;
50998: GO 51002
// end ;
51000: GO 50963
51002: POP
51003: POP
// end else
51004: GO 51014
// result := false ;
51006: LD_ADDR_VAR 0 3
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// end ;
51014: LD_VAR 0 3
51018: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51019: LD_INT 0
51021: PPUSH
51022: PPUSH
// if not array1 or not array2 then
51023: LD_VAR 0 1
51027: NOT
51028: PUSH
51029: LD_VAR 0 2
51033: NOT
51034: OR
51035: IFFALSE 51039
// exit ;
51037: GO 51103
// result := true ;
51039: LD_ADDR_VAR 0 3
51043: PUSH
51044: LD_INT 1
51046: ST_TO_ADDR
// for i = 1 to array1 do
51047: LD_ADDR_VAR 0 4
51051: PUSH
51052: DOUBLE
51053: LD_INT 1
51055: DEC
51056: ST_TO_ADDR
51057: LD_VAR 0 1
51061: PUSH
51062: FOR_TO
51063: IFFALSE 51101
// if array1 [ i ] <> array2 [ i ] then
51065: LD_VAR 0 1
51069: PUSH
51070: LD_VAR 0 4
51074: ARRAY
51075: PUSH
51076: LD_VAR 0 2
51080: PUSH
51081: LD_VAR 0 4
51085: ARRAY
51086: NONEQUAL
51087: IFFALSE 51099
// begin result := false ;
51089: LD_ADDR_VAR 0 3
51093: PUSH
51094: LD_INT 0
51096: ST_TO_ADDR
// break ;
51097: GO 51101
// end ;
51099: GO 51062
51101: POP
51102: POP
// end ;
51103: LD_VAR 0 3
51107: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51108: LD_INT 0
51110: PPUSH
51111: PPUSH
51112: PPUSH
// pom := GetBase ( fac ) ;
51113: LD_ADDR_VAR 0 5
51117: PUSH
51118: LD_VAR 0 1
51122: PPUSH
51123: CALL_OW 274
51127: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51128: LD_ADDR_VAR 0 4
51132: PUSH
51133: LD_VAR 0 2
51137: PUSH
51138: LD_INT 1
51140: ARRAY
51141: PPUSH
51142: LD_VAR 0 2
51146: PUSH
51147: LD_INT 2
51149: ARRAY
51150: PPUSH
51151: LD_VAR 0 2
51155: PUSH
51156: LD_INT 3
51158: ARRAY
51159: PPUSH
51160: LD_VAR 0 2
51164: PUSH
51165: LD_INT 4
51167: ARRAY
51168: PPUSH
51169: CALL_OW 449
51173: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51174: LD_ADDR_VAR 0 3
51178: PUSH
51179: LD_VAR 0 5
51183: PPUSH
51184: LD_INT 1
51186: PPUSH
51187: CALL_OW 275
51191: PUSH
51192: LD_VAR 0 4
51196: PUSH
51197: LD_INT 1
51199: ARRAY
51200: GREATEREQUAL
51201: PUSH
51202: LD_VAR 0 5
51206: PPUSH
51207: LD_INT 2
51209: PPUSH
51210: CALL_OW 275
51214: PUSH
51215: LD_VAR 0 4
51219: PUSH
51220: LD_INT 2
51222: ARRAY
51223: GREATEREQUAL
51224: AND
51225: PUSH
51226: LD_VAR 0 5
51230: PPUSH
51231: LD_INT 3
51233: PPUSH
51234: CALL_OW 275
51238: PUSH
51239: LD_VAR 0 4
51243: PUSH
51244: LD_INT 3
51246: ARRAY
51247: GREATEREQUAL
51248: AND
51249: ST_TO_ADDR
// end ;
51250: LD_VAR 0 3
51254: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51255: LD_INT 0
51257: PPUSH
51258: PPUSH
51259: PPUSH
51260: PPUSH
// pom := GetBase ( building ) ;
51261: LD_ADDR_VAR 0 3
51265: PUSH
51266: LD_VAR 0 1
51270: PPUSH
51271: CALL_OW 274
51275: ST_TO_ADDR
// if not pom then
51276: LD_VAR 0 3
51280: NOT
51281: IFFALSE 51285
// exit ;
51283: GO 51455
// btype := GetBType ( building ) ;
51285: LD_ADDR_VAR 0 5
51289: PUSH
51290: LD_VAR 0 1
51294: PPUSH
51295: CALL_OW 266
51299: ST_TO_ADDR
// if btype = b_armoury then
51300: LD_VAR 0 5
51304: PUSH
51305: LD_INT 4
51307: EQUAL
51308: IFFALSE 51318
// btype := b_barracks ;
51310: LD_ADDR_VAR 0 5
51314: PUSH
51315: LD_INT 5
51317: ST_TO_ADDR
// if btype = b_depot then
51318: LD_VAR 0 5
51322: PUSH
51323: LD_INT 0
51325: EQUAL
51326: IFFALSE 51336
// btype := b_warehouse ;
51328: LD_ADDR_VAR 0 5
51332: PUSH
51333: LD_INT 1
51335: ST_TO_ADDR
// if btype = b_workshop then
51336: LD_VAR 0 5
51340: PUSH
51341: LD_INT 2
51343: EQUAL
51344: IFFALSE 51354
// btype := b_factory ;
51346: LD_ADDR_VAR 0 5
51350: PUSH
51351: LD_INT 3
51353: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51354: LD_ADDR_VAR 0 4
51358: PUSH
51359: LD_VAR 0 5
51363: PPUSH
51364: LD_VAR 0 1
51368: PPUSH
51369: CALL_OW 248
51373: PPUSH
51374: CALL_OW 450
51378: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51379: LD_ADDR_VAR 0 2
51383: PUSH
51384: LD_VAR 0 3
51388: PPUSH
51389: LD_INT 1
51391: PPUSH
51392: CALL_OW 275
51396: PUSH
51397: LD_VAR 0 4
51401: PUSH
51402: LD_INT 1
51404: ARRAY
51405: GREATEREQUAL
51406: PUSH
51407: LD_VAR 0 3
51411: PPUSH
51412: LD_INT 2
51414: PPUSH
51415: CALL_OW 275
51419: PUSH
51420: LD_VAR 0 4
51424: PUSH
51425: LD_INT 2
51427: ARRAY
51428: GREATEREQUAL
51429: AND
51430: PUSH
51431: LD_VAR 0 3
51435: PPUSH
51436: LD_INT 3
51438: PPUSH
51439: CALL_OW 275
51443: PUSH
51444: LD_VAR 0 4
51448: PUSH
51449: LD_INT 3
51451: ARRAY
51452: GREATEREQUAL
51453: AND
51454: ST_TO_ADDR
// end ;
51455: LD_VAR 0 2
51459: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51460: LD_INT 0
51462: PPUSH
51463: PPUSH
51464: PPUSH
// pom := GetBase ( building ) ;
51465: LD_ADDR_VAR 0 4
51469: PUSH
51470: LD_VAR 0 1
51474: PPUSH
51475: CALL_OW 274
51479: ST_TO_ADDR
// if not pom then
51480: LD_VAR 0 4
51484: NOT
51485: IFFALSE 51489
// exit ;
51487: GO 51590
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51489: LD_ADDR_VAR 0 5
51493: PUSH
51494: LD_VAR 0 2
51498: PPUSH
51499: LD_VAR 0 1
51503: PPUSH
51504: CALL_OW 248
51508: PPUSH
51509: CALL_OW 450
51513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51514: LD_ADDR_VAR 0 3
51518: PUSH
51519: LD_VAR 0 4
51523: PPUSH
51524: LD_INT 1
51526: PPUSH
51527: CALL_OW 275
51531: PUSH
51532: LD_VAR 0 5
51536: PUSH
51537: LD_INT 1
51539: ARRAY
51540: GREATEREQUAL
51541: PUSH
51542: LD_VAR 0 4
51546: PPUSH
51547: LD_INT 2
51549: PPUSH
51550: CALL_OW 275
51554: PUSH
51555: LD_VAR 0 5
51559: PUSH
51560: LD_INT 2
51562: ARRAY
51563: GREATEREQUAL
51564: AND
51565: PUSH
51566: LD_VAR 0 4
51570: PPUSH
51571: LD_INT 3
51573: PPUSH
51574: CALL_OW 275
51578: PUSH
51579: LD_VAR 0 5
51583: PUSH
51584: LD_INT 3
51586: ARRAY
51587: GREATEREQUAL
51588: AND
51589: ST_TO_ADDR
// end ;
51590: LD_VAR 0 3
51594: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51595: LD_INT 0
51597: PPUSH
51598: PPUSH
51599: PPUSH
51600: PPUSH
51601: PPUSH
51602: PPUSH
51603: PPUSH
51604: PPUSH
51605: PPUSH
51606: PPUSH
51607: PPUSH
// result := false ;
51608: LD_ADDR_VAR 0 8
51612: PUSH
51613: LD_INT 0
51615: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51616: LD_VAR 0 5
51620: NOT
51621: PUSH
51622: LD_VAR 0 1
51626: NOT
51627: OR
51628: PUSH
51629: LD_VAR 0 2
51633: NOT
51634: OR
51635: PUSH
51636: LD_VAR 0 3
51640: NOT
51641: OR
51642: IFFALSE 51646
// exit ;
51644: GO 52460
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51646: LD_ADDR_VAR 0 14
51650: PUSH
51651: LD_VAR 0 1
51655: PPUSH
51656: LD_VAR 0 2
51660: PPUSH
51661: LD_VAR 0 3
51665: PPUSH
51666: LD_VAR 0 4
51670: PPUSH
51671: LD_VAR 0 5
51675: PUSH
51676: LD_INT 1
51678: ARRAY
51679: PPUSH
51680: CALL_OW 248
51684: PPUSH
51685: LD_INT 0
51687: PPUSH
51688: CALL 53693 0 6
51692: ST_TO_ADDR
// if not hexes then
51693: LD_VAR 0 14
51697: NOT
51698: IFFALSE 51702
// exit ;
51700: GO 52460
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51702: LD_ADDR_VAR 0 17
51706: PUSH
51707: LD_VAR 0 5
51711: PPUSH
51712: LD_INT 22
51714: PUSH
51715: LD_VAR 0 13
51719: PPUSH
51720: CALL_OW 255
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 30
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 30
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PPUSH
51761: CALL_OW 72
51765: ST_TO_ADDR
// for i = 1 to hexes do
51766: LD_ADDR_VAR 0 9
51770: PUSH
51771: DOUBLE
51772: LD_INT 1
51774: DEC
51775: ST_TO_ADDR
51776: LD_VAR 0 14
51780: PUSH
51781: FOR_TO
51782: IFFALSE 52458
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51784: LD_ADDR_VAR 0 13
51788: PUSH
51789: LD_VAR 0 14
51793: PUSH
51794: LD_VAR 0 9
51798: ARRAY
51799: PUSH
51800: LD_INT 1
51802: ARRAY
51803: PPUSH
51804: LD_VAR 0 14
51808: PUSH
51809: LD_VAR 0 9
51813: ARRAY
51814: PUSH
51815: LD_INT 2
51817: ARRAY
51818: PPUSH
51819: CALL_OW 428
51823: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51824: LD_VAR 0 14
51828: PUSH
51829: LD_VAR 0 9
51833: ARRAY
51834: PUSH
51835: LD_INT 1
51837: ARRAY
51838: PPUSH
51839: LD_VAR 0 14
51843: PUSH
51844: LD_VAR 0 9
51848: ARRAY
51849: PUSH
51850: LD_INT 2
51852: ARRAY
51853: PPUSH
51854: CALL_OW 351
51858: PUSH
51859: LD_VAR 0 14
51863: PUSH
51864: LD_VAR 0 9
51868: ARRAY
51869: PUSH
51870: LD_INT 1
51872: ARRAY
51873: PPUSH
51874: LD_VAR 0 14
51878: PUSH
51879: LD_VAR 0 9
51883: ARRAY
51884: PUSH
51885: LD_INT 2
51887: ARRAY
51888: PPUSH
51889: CALL_OW 488
51893: NOT
51894: OR
51895: PUSH
51896: LD_VAR 0 13
51900: PPUSH
51901: CALL_OW 247
51905: PUSH
51906: LD_INT 3
51908: EQUAL
51909: OR
51910: IFFALSE 51916
// exit ;
51912: POP
51913: POP
51914: GO 52460
// if not tmp then
51916: LD_VAR 0 13
51920: NOT
51921: IFFALSE 51925
// continue ;
51923: GO 51781
// result := true ;
51925: LD_ADDR_VAR 0 8
51929: PUSH
51930: LD_INT 1
51932: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51933: LD_VAR 0 6
51937: PUSH
51938: LD_VAR 0 13
51942: PPUSH
51943: CALL_OW 247
51947: PUSH
51948: LD_INT 2
51950: EQUAL
51951: AND
51952: PUSH
51953: LD_VAR 0 13
51957: PPUSH
51958: CALL_OW 263
51962: PUSH
51963: LD_INT 1
51965: EQUAL
51966: AND
51967: IFFALSE 52131
// begin if IsDrivenBy ( tmp ) then
51969: LD_VAR 0 13
51973: PPUSH
51974: CALL_OW 311
51978: IFFALSE 51982
// continue ;
51980: GO 51781
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51982: LD_VAR 0 6
51986: PPUSH
51987: LD_INT 3
51989: PUSH
51990: LD_INT 60
51992: PUSH
51993: EMPTY
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: LD_INT 55
52005: PUSH
52006: EMPTY
52007: LIST
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PPUSH
52017: CALL_OW 72
52021: IFFALSE 52129
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52023: LD_ADDR_VAR 0 18
52027: PUSH
52028: LD_VAR 0 6
52032: PPUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 60
52038: PUSH
52039: EMPTY
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 55
52051: PUSH
52052: EMPTY
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PPUSH
52063: CALL_OW 72
52067: PUSH
52068: LD_INT 1
52070: ARRAY
52071: ST_TO_ADDR
// if IsInUnit ( driver ) then
52072: LD_VAR 0 18
52076: PPUSH
52077: CALL_OW 310
52081: IFFALSE 52092
// ComExit ( driver ) ;
52083: LD_VAR 0 18
52087: PPUSH
52088: CALL 77472 0 1
// AddComEnterUnit ( driver , tmp ) ;
52092: LD_VAR 0 18
52096: PPUSH
52097: LD_VAR 0 13
52101: PPUSH
52102: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52106: LD_VAR 0 18
52110: PPUSH
52111: LD_VAR 0 7
52115: PPUSH
52116: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52120: LD_VAR 0 18
52124: PPUSH
52125: CALL_OW 181
// end ; continue ;
52129: GO 51781
// end ; if not cleaners or not tmp in cleaners then
52131: LD_VAR 0 6
52135: NOT
52136: PUSH
52137: LD_VAR 0 13
52141: PUSH
52142: LD_VAR 0 6
52146: IN
52147: NOT
52148: OR
52149: IFFALSE 52456
// begin if dep then
52151: LD_VAR 0 17
52155: IFFALSE 52291
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52157: LD_ADDR_VAR 0 16
52161: PUSH
52162: LD_VAR 0 17
52166: PUSH
52167: LD_INT 1
52169: ARRAY
52170: PPUSH
52171: CALL_OW 250
52175: PPUSH
52176: LD_VAR 0 17
52180: PUSH
52181: LD_INT 1
52183: ARRAY
52184: PPUSH
52185: CALL_OW 254
52189: PPUSH
52190: LD_INT 5
52192: PPUSH
52193: CALL_OW 272
52197: PUSH
52198: LD_VAR 0 17
52202: PUSH
52203: LD_INT 1
52205: ARRAY
52206: PPUSH
52207: CALL_OW 251
52211: PPUSH
52212: LD_VAR 0 17
52216: PUSH
52217: LD_INT 1
52219: ARRAY
52220: PPUSH
52221: CALL_OW 254
52225: PPUSH
52226: LD_INT 5
52228: PPUSH
52229: CALL_OW 273
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52238: LD_VAR 0 16
52242: PUSH
52243: LD_INT 1
52245: ARRAY
52246: PPUSH
52247: LD_VAR 0 16
52251: PUSH
52252: LD_INT 2
52254: ARRAY
52255: PPUSH
52256: CALL_OW 488
52260: IFFALSE 52291
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52262: LD_VAR 0 13
52266: PPUSH
52267: LD_VAR 0 16
52271: PUSH
52272: LD_INT 1
52274: ARRAY
52275: PPUSH
52276: LD_VAR 0 16
52280: PUSH
52281: LD_INT 2
52283: ARRAY
52284: PPUSH
52285: CALL_OW 111
// continue ;
52289: GO 51781
// end ; end ; r := GetDir ( tmp ) ;
52291: LD_ADDR_VAR 0 15
52295: PUSH
52296: LD_VAR 0 13
52300: PPUSH
52301: CALL_OW 254
52305: ST_TO_ADDR
// if r = 5 then
52306: LD_VAR 0 15
52310: PUSH
52311: LD_INT 5
52313: EQUAL
52314: IFFALSE 52324
// r := 0 ;
52316: LD_ADDR_VAR 0 15
52320: PUSH
52321: LD_INT 0
52323: ST_TO_ADDR
// for j = r to 5 do
52324: LD_ADDR_VAR 0 10
52328: PUSH
52329: DOUBLE
52330: LD_VAR 0 15
52334: DEC
52335: ST_TO_ADDR
52336: LD_INT 5
52338: PUSH
52339: FOR_TO
52340: IFFALSE 52454
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52342: LD_ADDR_VAR 0 11
52346: PUSH
52347: LD_VAR 0 13
52351: PPUSH
52352: CALL_OW 250
52356: PPUSH
52357: LD_VAR 0 10
52361: PPUSH
52362: LD_INT 2
52364: PPUSH
52365: CALL_OW 272
52369: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52370: LD_ADDR_VAR 0 12
52374: PUSH
52375: LD_VAR 0 13
52379: PPUSH
52380: CALL_OW 251
52384: PPUSH
52385: LD_VAR 0 10
52389: PPUSH
52390: LD_INT 2
52392: PPUSH
52393: CALL_OW 273
52397: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52398: LD_VAR 0 11
52402: PPUSH
52403: LD_VAR 0 12
52407: PPUSH
52408: CALL_OW 488
52412: PUSH
52413: LD_VAR 0 11
52417: PPUSH
52418: LD_VAR 0 12
52422: PPUSH
52423: CALL_OW 428
52427: NOT
52428: AND
52429: IFFALSE 52452
// begin ComMoveXY ( tmp , _x , _y ) ;
52431: LD_VAR 0 13
52435: PPUSH
52436: LD_VAR 0 11
52440: PPUSH
52441: LD_VAR 0 12
52445: PPUSH
52446: CALL_OW 111
// break ;
52450: GO 52454
// end ; end ;
52452: GO 52339
52454: POP
52455: POP
// end ; end ;
52456: GO 51781
52458: POP
52459: POP
// end ;
52460: LD_VAR 0 8
52464: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52465: LD_INT 0
52467: PPUSH
// result := true ;
52468: LD_ADDR_VAR 0 3
52472: PUSH
52473: LD_INT 1
52475: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52476: LD_VAR 0 2
52480: PUSH
52481: LD_INT 24
52483: DOUBLE
52484: EQUAL
52485: IFTRUE 52495
52487: LD_INT 33
52489: DOUBLE
52490: EQUAL
52491: IFTRUE 52495
52493: GO 52520
52495: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52496: LD_ADDR_VAR 0 3
52500: PUSH
52501: LD_INT 32
52503: PPUSH
52504: LD_VAR 0 1
52508: PPUSH
52509: CALL_OW 321
52513: PUSH
52514: LD_INT 2
52516: EQUAL
52517: ST_TO_ADDR
52518: GO 52836
52520: LD_INT 20
52522: DOUBLE
52523: EQUAL
52524: IFTRUE 52528
52526: GO 52553
52528: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52529: LD_ADDR_VAR 0 3
52533: PUSH
52534: LD_INT 6
52536: PPUSH
52537: LD_VAR 0 1
52541: PPUSH
52542: CALL_OW 321
52546: PUSH
52547: LD_INT 2
52549: EQUAL
52550: ST_TO_ADDR
52551: GO 52836
52553: LD_INT 22
52555: DOUBLE
52556: EQUAL
52557: IFTRUE 52567
52559: LD_INT 36
52561: DOUBLE
52562: EQUAL
52563: IFTRUE 52567
52565: GO 52592
52567: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52568: LD_ADDR_VAR 0 3
52572: PUSH
52573: LD_INT 15
52575: PPUSH
52576: LD_VAR 0 1
52580: PPUSH
52581: CALL_OW 321
52585: PUSH
52586: LD_INT 2
52588: EQUAL
52589: ST_TO_ADDR
52590: GO 52836
52592: LD_INT 30
52594: DOUBLE
52595: EQUAL
52596: IFTRUE 52600
52598: GO 52625
52600: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52601: LD_ADDR_VAR 0 3
52605: PUSH
52606: LD_INT 20
52608: PPUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: CALL_OW 321
52618: PUSH
52619: LD_INT 2
52621: EQUAL
52622: ST_TO_ADDR
52623: GO 52836
52625: LD_INT 28
52627: DOUBLE
52628: EQUAL
52629: IFTRUE 52639
52631: LD_INT 21
52633: DOUBLE
52634: EQUAL
52635: IFTRUE 52639
52637: GO 52664
52639: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_INT 21
52647: PPUSH
52648: LD_VAR 0 1
52652: PPUSH
52653: CALL_OW 321
52657: PUSH
52658: LD_INT 2
52660: EQUAL
52661: ST_TO_ADDR
52662: GO 52836
52664: LD_INT 16
52666: DOUBLE
52667: EQUAL
52668: IFTRUE 52672
52670: GO 52697
52672: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52673: LD_ADDR_VAR 0 3
52677: PUSH
52678: LD_INT 84
52680: PPUSH
52681: LD_VAR 0 1
52685: PPUSH
52686: CALL_OW 321
52690: PUSH
52691: LD_INT 2
52693: EQUAL
52694: ST_TO_ADDR
52695: GO 52836
52697: LD_INT 19
52699: DOUBLE
52700: EQUAL
52701: IFTRUE 52711
52703: LD_INT 23
52705: DOUBLE
52706: EQUAL
52707: IFTRUE 52711
52709: GO 52736
52711: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52712: LD_ADDR_VAR 0 3
52716: PUSH
52717: LD_INT 83
52719: PPUSH
52720: LD_VAR 0 1
52724: PPUSH
52725: CALL_OW 321
52729: PUSH
52730: LD_INT 2
52732: EQUAL
52733: ST_TO_ADDR
52734: GO 52836
52736: LD_INT 17
52738: DOUBLE
52739: EQUAL
52740: IFTRUE 52744
52742: GO 52769
52744: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52745: LD_ADDR_VAR 0 3
52749: PUSH
52750: LD_INT 39
52752: PPUSH
52753: LD_VAR 0 1
52757: PPUSH
52758: CALL_OW 321
52762: PUSH
52763: LD_INT 2
52765: EQUAL
52766: ST_TO_ADDR
52767: GO 52836
52769: LD_INT 18
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52777
52775: GO 52802
52777: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52778: LD_ADDR_VAR 0 3
52782: PUSH
52783: LD_INT 40
52785: PPUSH
52786: LD_VAR 0 1
52790: PPUSH
52791: CALL_OW 321
52795: PUSH
52796: LD_INT 2
52798: EQUAL
52799: ST_TO_ADDR
52800: GO 52836
52802: LD_INT 27
52804: DOUBLE
52805: EQUAL
52806: IFTRUE 52810
52808: GO 52835
52810: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52811: LD_ADDR_VAR 0 3
52815: PUSH
52816: LD_INT 35
52818: PPUSH
52819: LD_VAR 0 1
52823: PPUSH
52824: CALL_OW 321
52828: PUSH
52829: LD_INT 2
52831: EQUAL
52832: ST_TO_ADDR
52833: GO 52836
52835: POP
// end ;
52836: LD_VAR 0 3
52840: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52841: LD_INT 0
52843: PPUSH
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
52853: PPUSH
// result := false ;
52854: LD_ADDR_VAR 0 6
52858: PUSH
52859: LD_INT 0
52861: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52862: LD_VAR 0 1
52866: NOT
52867: PUSH
52868: LD_VAR 0 1
52872: PPUSH
52873: CALL_OW 266
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: IN
52888: NOT
52889: OR
52890: PUSH
52891: LD_VAR 0 2
52895: NOT
52896: OR
52897: PUSH
52898: LD_VAR 0 5
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: LD_INT 4
52917: PUSH
52918: LD_INT 5
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: IN
52929: NOT
52930: OR
52931: PUSH
52932: LD_VAR 0 3
52936: PPUSH
52937: LD_VAR 0 4
52941: PPUSH
52942: CALL_OW 488
52946: NOT
52947: OR
52948: IFFALSE 52952
// exit ;
52950: GO 53688
// side := GetSide ( depot ) ;
52952: LD_ADDR_VAR 0 9
52956: PUSH
52957: LD_VAR 0 1
52961: PPUSH
52962: CALL_OW 255
52966: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52967: LD_VAR 0 9
52971: PPUSH
52972: LD_VAR 0 2
52976: PPUSH
52977: CALL 52465 0 2
52981: NOT
52982: IFFALSE 52986
// exit ;
52984: GO 53688
// pom := GetBase ( depot ) ;
52986: LD_ADDR_VAR 0 10
52990: PUSH
52991: LD_VAR 0 1
52995: PPUSH
52996: CALL_OW 274
53000: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53001: LD_ADDR_VAR 0 11
53005: PUSH
53006: LD_VAR 0 2
53010: PPUSH
53011: LD_VAR 0 1
53015: PPUSH
53016: CALL_OW 248
53020: PPUSH
53021: CALL_OW 450
53025: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53026: LD_VAR 0 10
53030: PPUSH
53031: LD_INT 1
53033: PPUSH
53034: CALL_OW 275
53038: PUSH
53039: LD_VAR 0 11
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: GREATEREQUAL
53048: PUSH
53049: LD_VAR 0 10
53053: PPUSH
53054: LD_INT 2
53056: PPUSH
53057: CALL_OW 275
53061: PUSH
53062: LD_VAR 0 11
53066: PUSH
53067: LD_INT 2
53069: ARRAY
53070: GREATEREQUAL
53071: AND
53072: PUSH
53073: LD_VAR 0 10
53077: PPUSH
53078: LD_INT 3
53080: PPUSH
53081: CALL_OW 275
53085: PUSH
53086: LD_VAR 0 11
53090: PUSH
53091: LD_INT 3
53093: ARRAY
53094: GREATEREQUAL
53095: AND
53096: NOT
53097: IFFALSE 53101
// exit ;
53099: GO 53688
// if GetBType ( depot ) = b_depot then
53101: LD_VAR 0 1
53105: PPUSH
53106: CALL_OW 266
53110: PUSH
53111: LD_INT 0
53113: EQUAL
53114: IFFALSE 53126
// dist := 28 else
53116: LD_ADDR_VAR 0 14
53120: PUSH
53121: LD_INT 28
53123: ST_TO_ADDR
53124: GO 53134
// dist := 36 ;
53126: LD_ADDR_VAR 0 14
53130: PUSH
53131: LD_INT 36
53133: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53134: LD_VAR 0 1
53138: PPUSH
53139: LD_VAR 0 3
53143: PPUSH
53144: LD_VAR 0 4
53148: PPUSH
53149: CALL_OW 297
53153: PUSH
53154: LD_VAR 0 14
53158: GREATER
53159: IFFALSE 53163
// exit ;
53161: GO 53688
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53163: LD_ADDR_VAR 0 12
53167: PUSH
53168: LD_VAR 0 2
53172: PPUSH
53173: LD_VAR 0 3
53177: PPUSH
53178: LD_VAR 0 4
53182: PPUSH
53183: LD_VAR 0 5
53187: PPUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 248
53197: PPUSH
53198: LD_INT 0
53200: PPUSH
53201: CALL 53693 0 6
53205: ST_TO_ADDR
// if not hexes then
53206: LD_VAR 0 12
53210: NOT
53211: IFFALSE 53215
// exit ;
53213: GO 53688
// hex := GetHexInfo ( x , y ) ;
53215: LD_ADDR_VAR 0 15
53219: PUSH
53220: LD_VAR 0 3
53224: PPUSH
53225: LD_VAR 0 4
53229: PPUSH
53230: CALL_OW 546
53234: ST_TO_ADDR
// if hex [ 1 ] then
53235: LD_VAR 0 15
53239: PUSH
53240: LD_INT 1
53242: ARRAY
53243: IFFALSE 53247
// exit ;
53245: GO 53688
// height := hex [ 2 ] ;
53247: LD_ADDR_VAR 0 13
53251: PUSH
53252: LD_VAR 0 15
53256: PUSH
53257: LD_INT 2
53259: ARRAY
53260: ST_TO_ADDR
// for i = 1 to hexes do
53261: LD_ADDR_VAR 0 7
53265: PUSH
53266: DOUBLE
53267: LD_INT 1
53269: DEC
53270: ST_TO_ADDR
53271: LD_VAR 0 12
53275: PUSH
53276: FOR_TO
53277: IFFALSE 53607
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53279: LD_VAR 0 12
53283: PUSH
53284: LD_VAR 0 7
53288: ARRAY
53289: PUSH
53290: LD_INT 1
53292: ARRAY
53293: PPUSH
53294: LD_VAR 0 12
53298: PUSH
53299: LD_VAR 0 7
53303: ARRAY
53304: PUSH
53305: LD_INT 2
53307: ARRAY
53308: PPUSH
53309: CALL_OW 488
53313: NOT
53314: PUSH
53315: LD_VAR 0 12
53319: PUSH
53320: LD_VAR 0 7
53324: ARRAY
53325: PUSH
53326: LD_INT 1
53328: ARRAY
53329: PPUSH
53330: LD_VAR 0 12
53334: PUSH
53335: LD_VAR 0 7
53339: ARRAY
53340: PUSH
53341: LD_INT 2
53343: ARRAY
53344: PPUSH
53345: CALL_OW 428
53349: PUSH
53350: LD_INT 0
53352: GREATER
53353: OR
53354: PUSH
53355: LD_VAR 0 12
53359: PUSH
53360: LD_VAR 0 7
53364: ARRAY
53365: PUSH
53366: LD_INT 1
53368: ARRAY
53369: PPUSH
53370: LD_VAR 0 12
53374: PUSH
53375: LD_VAR 0 7
53379: ARRAY
53380: PUSH
53381: LD_INT 2
53383: ARRAY
53384: PPUSH
53385: CALL_OW 351
53389: OR
53390: IFFALSE 53396
// exit ;
53392: POP
53393: POP
53394: GO 53688
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53396: LD_ADDR_VAR 0 8
53400: PUSH
53401: LD_VAR 0 12
53405: PUSH
53406: LD_VAR 0 7
53410: ARRAY
53411: PUSH
53412: LD_INT 1
53414: ARRAY
53415: PPUSH
53416: LD_VAR 0 12
53420: PUSH
53421: LD_VAR 0 7
53425: ARRAY
53426: PUSH
53427: LD_INT 2
53429: ARRAY
53430: PPUSH
53431: CALL_OW 546
53435: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53436: LD_VAR 0 8
53440: PUSH
53441: LD_INT 1
53443: ARRAY
53444: PUSH
53445: LD_VAR 0 8
53449: PUSH
53450: LD_INT 2
53452: ARRAY
53453: PUSH
53454: LD_VAR 0 13
53458: PUSH
53459: LD_INT 2
53461: PLUS
53462: GREATER
53463: OR
53464: PUSH
53465: LD_VAR 0 8
53469: PUSH
53470: LD_INT 2
53472: ARRAY
53473: PUSH
53474: LD_VAR 0 13
53478: PUSH
53479: LD_INT 2
53481: MINUS
53482: LESS
53483: OR
53484: PUSH
53485: LD_VAR 0 8
53489: PUSH
53490: LD_INT 3
53492: ARRAY
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 8
53499: PUSH
53500: LD_INT 9
53502: PUSH
53503: LD_INT 10
53505: PUSH
53506: LD_INT 11
53508: PUSH
53509: LD_INT 12
53511: PUSH
53512: LD_INT 13
53514: PUSH
53515: LD_INT 16
53517: PUSH
53518: LD_INT 17
53520: PUSH
53521: LD_INT 18
53523: PUSH
53524: LD_INT 19
53526: PUSH
53527: LD_INT 20
53529: PUSH
53530: LD_INT 21
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: IN
53548: NOT
53549: OR
53550: PUSH
53551: LD_VAR 0 8
53555: PUSH
53556: LD_INT 5
53558: ARRAY
53559: NOT
53560: OR
53561: PUSH
53562: LD_VAR 0 8
53566: PUSH
53567: LD_INT 6
53569: ARRAY
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 7
53579: PUSH
53580: LD_INT 9
53582: PUSH
53583: LD_INT 10
53585: PUSH
53586: LD_INT 11
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: IN
53597: NOT
53598: OR
53599: IFFALSE 53605
// exit ;
53601: POP
53602: POP
53603: GO 53688
// end ;
53605: GO 53276
53607: POP
53608: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53609: LD_VAR 0 9
53613: PPUSH
53614: LD_VAR 0 3
53618: PPUSH
53619: LD_VAR 0 4
53623: PPUSH
53624: LD_INT 20
53626: PPUSH
53627: CALL 45640 0 4
53631: PUSH
53632: LD_INT 4
53634: ARRAY
53635: IFFALSE 53639
// exit ;
53637: GO 53688
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53639: LD_VAR 0 2
53643: PUSH
53644: LD_INT 29
53646: PUSH
53647: LD_INT 30
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: IN
53654: PUSH
53655: LD_VAR 0 3
53659: PPUSH
53660: LD_VAR 0 4
53664: PPUSH
53665: LD_VAR 0 9
53669: PPUSH
53670: CALL_OW 440
53674: NOT
53675: AND
53676: IFFALSE 53680
// exit ;
53678: GO 53688
// result := true ;
53680: LD_ADDR_VAR 0 6
53684: PUSH
53685: LD_INT 1
53687: ST_TO_ADDR
// end ;
53688: LD_VAR 0 6
53692: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53693: LD_INT 0
53695: PPUSH
53696: PPUSH
53697: PPUSH
53698: PPUSH
53699: PPUSH
53700: PPUSH
53701: PPUSH
53702: PPUSH
53703: PPUSH
53704: PPUSH
53705: PPUSH
53706: PPUSH
53707: PPUSH
53708: PPUSH
53709: PPUSH
53710: PPUSH
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
53735: PPUSH
53736: PPUSH
53737: PPUSH
53738: PPUSH
53739: PPUSH
53740: PPUSH
53741: PPUSH
53742: PPUSH
53743: PPUSH
53744: PPUSH
53745: PPUSH
53746: PPUSH
53747: PPUSH
53748: PPUSH
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
// result = [ ] ;
53753: LD_ADDR_VAR 0 7
53757: PUSH
53758: EMPTY
53759: ST_TO_ADDR
// temp_list = [ ] ;
53760: LD_ADDR_VAR 0 9
53764: PUSH
53765: EMPTY
53766: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53767: LD_VAR 0 4
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: LD_INT 4
53786: PUSH
53787: LD_INT 5
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: IN
53798: NOT
53799: PUSH
53800: LD_VAR 0 1
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: IN
53815: PUSH
53816: LD_VAR 0 5
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: IN
53835: NOT
53836: AND
53837: OR
53838: IFFALSE 53842
// exit ;
53840: GO 72233
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53842: LD_VAR 0 1
53846: PUSH
53847: LD_INT 6
53849: PUSH
53850: LD_INT 7
53852: PUSH
53853: LD_INT 8
53855: PUSH
53856: LD_INT 13
53858: PUSH
53859: LD_INT 12
53861: PUSH
53862: LD_INT 15
53864: PUSH
53865: LD_INT 11
53867: PUSH
53868: LD_INT 14
53870: PUSH
53871: LD_INT 10
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: IN
53885: IFFALSE 53895
// btype = b_lab ;
53887: LD_ADDR_VAR 0 1
53891: PUSH
53892: LD_INT 6
53894: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53895: LD_VAR 0 6
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: IN
53914: NOT
53915: PUSH
53916: LD_VAR 0 1
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: LD_INT 6
53935: PUSH
53936: LD_INT 36
53938: PUSH
53939: LD_INT 4
53941: PUSH
53942: LD_INT 5
53944: PUSH
53945: LD_INT 31
53947: PUSH
53948: LD_INT 32
53950: PUSH
53951: LD_INT 33
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: IN
53967: NOT
53968: PUSH
53969: LD_VAR 0 6
53973: PUSH
53974: LD_INT 1
53976: EQUAL
53977: AND
53978: OR
53979: PUSH
53980: LD_VAR 0 1
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: IN
53995: NOT
53996: PUSH
53997: LD_VAR 0 6
54001: PUSH
54002: LD_INT 2
54004: EQUAL
54005: AND
54006: OR
54007: IFFALSE 54017
// mode = 0 ;
54009: LD_ADDR_VAR 0 6
54013: PUSH
54014: LD_INT 0
54016: ST_TO_ADDR
// case mode of 0 :
54017: LD_VAR 0 6
54021: PUSH
54022: LD_INT 0
54024: DOUBLE
54025: EQUAL
54026: IFTRUE 54030
54028: GO 65483
54030: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54031: LD_ADDR_VAR 0 11
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54224: LD_ADDR_VAR 0 12
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: NEG
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 3
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54420: LD_ADDR_VAR 0 13
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: LD_INT 3
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54619: LD_ADDR_VAR 0 14
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 3
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54815: LD_ADDR_VAR 0 15
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55008: LD_ADDR_VAR 0 16
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55201: LD_ADDR_VAR 0 17
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55431: LD_ADDR_VAR 0 18
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55661: LD_ADDR_VAR 0 19
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55891: LD_ADDR_VAR 0 20
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56121: LD_ADDR_VAR 0 21
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 1
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56351: LD_ADDR_VAR 0 22
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56581: LD_ADDR_VAR 0 23
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56861: LD_ADDR_VAR 0 24
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 2
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57137: LD_ADDR_VAR 0 25
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57411: LD_ADDR_VAR 0 26
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57687: LD_ADDR_VAR 0 27
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57967: LD_ADDR_VAR 0 28
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 3
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58249: LD_ADDR_VAR 0 29
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: LD_INT 3
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58528: LD_ADDR_VAR 0 30
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58806: LD_ADDR_VAR 0 31
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: NEG
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 3
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 3
59049: NEG
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59084: LD_ADDR_VAR 0 32
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 3
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: LD_INT 2
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 3
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59362: LD_ADDR_VAR 0 33
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59641: LD_ADDR_VAR 0 34
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: NEG
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59921: LD_ADDR_VAR 0 35
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60033: LD_ADDR_VAR 0 36
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60145: LD_ADDR_VAR 0 37
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60257: LD_ADDR_VAR 0 38
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 0
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60369: LD_ADDR_VAR 0 39
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60481: LD_ADDR_VAR 0 40
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60593: LD_ADDR_VAR 0 41
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 3
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60943: LD_ADDR_VAR 0 42
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 2
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61293: LD_ADDR_VAR 0 43
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 2
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: LD_INT 1
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: NEG
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 3
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61641: LD_ADDR_VAR 0 44
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: LD_INT 2
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: NEG
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 3
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 3
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 3
61915: NEG
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 3
61926: NEG
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 3
61938: NEG
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: NEG
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61991: LD_ADDR_VAR 0 45
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 2
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 2
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 3
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 3
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 3
62237: PUSH
62238: LD_INT 3
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 2
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 3
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 3
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62341: LD_ADDR_VAR 0 46
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: LD_INT 2
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: NEG
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: LD_INT 1
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 3
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 3
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 3
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62689: LD_ADDR_VAR 0 47
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 1
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62840: LD_ADDR_VAR 0 48
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62987: LD_ADDR_VAR 0 49
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63131: LD_ADDR_VAR 0 50
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 2
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63275: LD_ADDR_VAR 0 51
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63422: LD_ADDR_VAR 0 52
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: LD_INT 2
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63573: LD_ADDR_VAR 0 53
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: LD_INT 2
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63803: LD_ADDR_VAR 0 54
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: NEG
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: LD_INT 2
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 2
63938: PUSH
63939: LD_INT 2
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 2
63979: NEG
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 2
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 2
64002: NEG
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64033: LD_ADDR_VAR 0 55
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 1
64091: NEG
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: LD_INT 2
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 1
64178: PUSH
64179: LD_INT 2
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 2
64220: NEG
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 2
64232: NEG
64233: PUSH
64234: LD_INT 2
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64263: LD_ADDR_VAR 0 56
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 2
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 2
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64493: LD_ADDR_VAR 0 57
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: LD_INT 2
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: NEG
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 2
64680: NEG
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 2
64692: NEG
64693: PUSH
64694: LD_INT 2
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64723: LD_ADDR_VAR 0 58
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: NEG
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: LD_INT 2
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: NEG
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 2
64922: NEG
64923: PUSH
64924: LD_INT 2
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64953: LD_ADDR_VAR 0 59
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65041: LD_ADDR_VAR 0 60
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 1
65099: NEG
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65129: LD_ADDR_VAR 0 61
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65217: LD_ADDR_VAR 0 62
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65305: LD_ADDR_VAR 0 63
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 1
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65393: LD_ADDR_VAR 0 64
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: ST_TO_ADDR
// end ; 1 :
65481: GO 71378
65483: LD_INT 1
65485: DOUBLE
65486: EQUAL
65487: IFTRUE 65491
65489: GO 68114
65491: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65492: LD_ADDR_VAR 0 11
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 3
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65536: LD_ADDR_VAR 0 12
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 3
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: LD_INT 1
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: LIST
65576: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65577: LD_ADDR_VAR 0 13
65581: PUSH
65582: LD_INT 3
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 3
65594: PUSH
65595: LD_INT 3
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: LD_INT 3
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65617: LD_ADDR_VAR 0 14
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 3
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: LD_INT 2
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: LIST
65657: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65658: LD_ADDR_VAR 0 15
65662: PUSH
65663: LD_INT 2
65665: NEG
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 3
65676: NEG
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 3
65687: NEG
65688: PUSH
65689: LD_INT 1
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65702: LD_ADDR_VAR 0 16
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: LD_INT 3
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: LD_INT 3
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: LIST
65747: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65748: LD_ADDR_VAR 0 17
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: LD_INT 3
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: LD_INT 2
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: LIST
65791: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65792: LD_ADDR_VAR 0 18
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65833: LD_ADDR_VAR 0 19
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: LD_INT 3
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 2
65860: PUSH
65861: LD_INT 3
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65873: LD_ADDR_VAR 0 20
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 3
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65914: LD_ADDR_VAR 0 21
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 3
65932: NEG
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 3
65943: NEG
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65958: LD_ADDR_VAR 0 22
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: LD_INT 3
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 3
65977: NEG
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 3
65989: NEG
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: LIST
66003: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66004: LD_ADDR_VAR 0 23
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 3
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: LD_INT 4
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 3
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66048: LD_ADDR_VAR 0 24
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 4
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66089: LD_ADDR_VAR 0 25
66093: PUSH
66094: LD_INT 3
66096: PUSH
66097: LD_INT 3
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 4
66106: PUSH
66107: LD_INT 3
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 4
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66129: LD_ADDR_VAR 0 26
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: LD_INT 3
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66170: LD_ADDR_VAR 0 27
66174: PUSH
66175: LD_INT 3
66177: NEG
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 3
66188: NEG
66189: PUSH
66190: LD_INT 1
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 4
66199: NEG
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: LIST
66213: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66214: LD_ADDR_VAR 0 28
66218: PUSH
66219: LD_INT 3
66221: NEG
66222: PUSH
66223: LD_INT 3
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 3
66233: NEG
66234: PUSH
66235: LD_INT 4
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 4
66245: NEG
66246: PUSH
66247: LD_INT 3
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: LIST
66259: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66260: LD_ADDR_VAR 0 29
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: LD_INT 2
66293: NEG
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: LD_INT 4
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 4
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: PUSH
66325: LD_INT 3
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 5
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: LD_INT 5
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: PUSH
66359: LD_INT 4
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: LD_INT 6
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: LD_INT 6
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: LD_INT 5
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66415: LD_ADDR_VAR 0 30
66419: PUSH
66420: LD_INT 2
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 4
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 4
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 4
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 5
66495: PUSH
66496: LD_INT 0
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 5
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 5
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 6
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 6
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66558: LD_ADDR_VAR 0 31
66562: PUSH
66563: LD_INT 3
66565: PUSH
66566: LD_INT 2
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: LD_INT 3
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 2
66585: PUSH
66586: LD_INT 3
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 4
66595: PUSH
66596: LD_INT 3
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 4
66605: PUSH
66606: LD_INT 4
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 3
66615: PUSH
66616: LD_INT 4
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 5
66625: PUSH
66626: LD_INT 4
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 5
66635: PUSH
66636: LD_INT 5
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 4
66645: PUSH
66646: LD_INT 5
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 6
66655: PUSH
66656: LD_INT 5
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 6
66665: PUSH
66666: LD_INT 6
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 5
66675: PUSH
66676: LD_INT 6
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66697: LD_ADDR_VAR 0 32
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 3
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 4
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 3
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: LD_INT 5
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 5
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: LD_INT 4
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: LD_INT 6
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: LD_INT 6
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: LD_INT 5
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66840: LD_ADDR_VAR 0 33
66844: PUSH
66845: LD_INT 2
66847: NEG
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 3
66858: NEG
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: NEG
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 3
66881: NEG
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 4
66892: NEG
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 4
66903: NEG
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 4
66915: NEG
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 5
66926: NEG
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 5
66937: NEG
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 5
66949: NEG
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 6
66960: NEG
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 6
66971: NEG
66972: PUSH
66973: LD_INT 1
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66995: LD_ADDR_VAR 0 34
66999: PUSH
67000: LD_INT 2
67002: NEG
67003: PUSH
67004: LD_INT 3
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: NEG
67015: PUSH
67016: LD_INT 2
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 3
67026: NEG
67027: PUSH
67028: LD_INT 3
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 3
67038: NEG
67039: PUSH
67040: LD_INT 4
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 4
67050: NEG
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 4
67062: NEG
67063: PUSH
67064: LD_INT 4
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 4
67074: NEG
67075: PUSH
67076: LD_INT 5
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 5
67086: NEG
67087: PUSH
67088: LD_INT 4
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 5
67098: NEG
67099: PUSH
67100: LD_INT 5
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 5
67110: NEG
67111: PUSH
67112: LD_INT 6
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 6
67122: NEG
67123: PUSH
67124: LD_INT 5
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 6
67134: NEG
67135: PUSH
67136: LD_INT 6
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67158: LD_ADDR_VAR 0 41
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: LD_INT 2
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: LD_INT 2
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67202: LD_ADDR_VAR 0 42
67206: PUSH
67207: LD_INT 2
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: LD_INT 1
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 3
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67243: LD_ADDR_VAR 0 43
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: LD_INT 2
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 2
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67283: LD_ADDR_VAR 0 44
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: LD_INT 2
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: PUSH
67301: LD_INT 3
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: LIST
67323: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67324: LD_ADDR_VAR 0 45
67328: PUSH
67329: LD_INT 2
67331: NEG
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 3
67353: NEG
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: LIST
67367: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67368: LD_ADDR_VAR 0 46
67372: PUSH
67373: LD_INT 2
67375: NEG
67376: PUSH
67377: LD_INT 2
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: LD_INT 3
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 3
67399: NEG
67400: PUSH
67401: LD_INT 2
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: LIST
67413: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67414: LD_ADDR_VAR 0 47
67418: PUSH
67419: LD_INT 2
67421: NEG
67422: PUSH
67423: LD_INT 3
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: LD_INT 3
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67447: LD_ADDR_VAR 0 48
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: LD_INT 2
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67478: LD_ADDR_VAR 0 49
67482: PUSH
67483: LD_INT 3
67485: PUSH
67486: LD_INT 1
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 3
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67507: LD_ADDR_VAR 0 50
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67536: LD_ADDR_VAR 0 51
67540: PUSH
67541: LD_INT 1
67543: NEG
67544: PUSH
67545: LD_INT 2
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 2
67554: NEG
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67567: LD_ADDR_VAR 0 52
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: LD_INT 1
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: LD_INT 2
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67600: LD_ADDR_VAR 0 53
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: LD_INT 3
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: LD_INT 3
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 1
67630: PUSH
67631: LD_INT 2
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67644: LD_ADDR_VAR 0 54
67648: PUSH
67649: LD_INT 2
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 3
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 3
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67685: LD_ADDR_VAR 0 55
67689: PUSH
67690: LD_INT 3
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 3
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: LIST
67724: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67725: LD_ADDR_VAR 0 56
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67766: LD_ADDR_VAR 0 57
67770: PUSH
67771: LD_INT 2
67773: NEG
67774: PUSH
67775: LD_INT 1
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 3
67784: NEG
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 3
67795: NEG
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67810: LD_ADDR_VAR 0 58
67814: PUSH
67815: LD_INT 2
67817: NEG
67818: PUSH
67819: LD_INT 3
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: LD_INT 2
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 3
67841: NEG
67842: PUSH
67843: LD_INT 3
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67856: LD_ADDR_VAR 0 59
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: LD_INT 2
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: LD_INT 2
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67900: LD_ADDR_VAR 0 60
67904: PUSH
67905: LD_INT 1
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 2
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 2
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67941: LD_ADDR_VAR 0 61
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: LD_INT 1
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67981: LD_ADDR_VAR 0 62
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 0
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: NEG
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: LIST
68021: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68022: LD_ADDR_VAR 0 63
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 2
68040: NEG
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 2
68051: NEG
68052: PUSH
68053: LD_INT 1
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: LIST
68065: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68066: LD_ADDR_VAR 0 64
68070: PUSH
68071: LD_INT 1
68073: NEG
68074: PUSH
68075: LD_INT 2
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: LD_INT 1
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 2
68097: NEG
68098: PUSH
68099: LD_INT 2
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: ST_TO_ADDR
// end ; 2 :
68112: GO 71378
68114: LD_INT 2
68116: DOUBLE
68117: EQUAL
68118: IFTRUE 68122
68120: GO 71377
68122: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68123: LD_ADDR_VAR 0 29
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 4
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 5
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 5
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 3
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 3
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 5
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 3
68223: PUSH
68224: LD_INT 3
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 3
68233: PUSH
68234: LD_INT 2
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 4
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 4
68253: PUSH
68254: LD_INT 4
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 3
68263: PUSH
68264: LD_INT 4
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: LD_INT 3
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 2
68283: PUSH
68284: LD_INT 2
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 4
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: LD_INT 4
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: LD_INT 4
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: LD_INT 4
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 1
68343: PUSH
68344: LD_INT 5
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: LD_INT 5
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 1
68363: NEG
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 1
68374: NEG
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: LD_INT 5
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 2
68395: NEG
68396: PUSH
68397: LD_INT 3
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 3
68406: NEG
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 3
68417: NEG
68418: PUSH
68419: LD_INT 1
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 2
68429: NEG
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 2
68440: NEG
68441: PUSH
68442: LD_INT 1
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 3
68451: NEG
68452: PUSH
68453: LD_INT 1
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 4
68473: NEG
68474: PUSH
68475: LD_INT 1
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 4
68485: NEG
68486: PUSH
68487: LD_INT 2
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 2
68497: NEG
68498: PUSH
68499: LD_INT 2
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 4
68508: NEG
68509: PUSH
68510: LD_INT 4
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 4
68520: NEG
68521: PUSH
68522: LD_INT 5
68524: NEG
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 3
68532: NEG
68533: PUSH
68534: LD_INT 4
68536: NEG
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 3
68544: NEG
68545: PUSH
68546: LD_INT 3
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 4
68556: NEG
68557: PUSH
68558: LD_INT 3
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 5
68568: NEG
68569: PUSH
68570: LD_INT 4
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 5
68580: NEG
68581: PUSH
68582: LD_INT 5
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 3
68592: NEG
68593: PUSH
68594: LD_INT 5
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 5
68604: NEG
68605: PUSH
68606: LD_INT 3
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68661: LD_ADDR_VAR 0 30
68665: PUSH
68666: LD_INT 4
68668: PUSH
68669: LD_INT 4
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 4
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 5
68688: PUSH
68689: LD_INT 4
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 5
68698: PUSH
68699: LD_INT 5
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 4
68708: PUSH
68709: LD_INT 5
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 3
68718: PUSH
68719: LD_INT 4
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 3
68728: PUSH
68729: LD_INT 3
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 5
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 3
68748: PUSH
68749: LD_INT 5
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: LD_INT 3
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: LD_INT 2
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 1
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: PUSH
68789: LD_INT 4
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: LD_INT 4
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: LD_INT 3
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 1
68819: NEG
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: LD_INT 4
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 2
68840: NEG
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 4
68851: NEG
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 4
68862: NEG
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: NEG
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 3
68885: NEG
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 4
68896: NEG
68897: PUSH
68898: LD_INT 1
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 5
68907: NEG
68908: PUSH
68909: LD_INT 0
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 5
68918: NEG
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 5
68930: NEG
68931: PUSH
68932: LD_INT 2
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 3
68942: NEG
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: LD_INT 3
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 3
68965: NEG
68966: PUSH
68967: LD_INT 4
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 2
68977: NEG
68978: PUSH
68979: LD_INT 3
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 2
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 3
69001: NEG
69002: PUSH
69003: LD_INT 2
69005: NEG
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 4
69013: NEG
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 4
69025: NEG
69026: PUSH
69027: LD_INT 4
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 2
69037: NEG
69038: PUSH
69039: LD_INT 4
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 4
69049: NEG
69050: PUSH
69051: LD_INT 2
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: LD_INT 4
69064: NEG
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: LD_INT 5
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: PUSH
69084: LD_INT 4
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 1
69094: PUSH
69095: LD_INT 3
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: LD_INT 3
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 1
69116: NEG
69117: PUSH
69118: LD_INT 4
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: LD_INT 5
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 2
69151: NEG
69152: PUSH
69153: LD_INT 5
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69208: LD_ADDR_VAR 0 31
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: LD_INT 4
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: LD_INT 3
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: LD_INT 4
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 1
69245: PUSH
69246: LD_INT 5
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: LD_INT 5
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: NEG
69277: PUSH
69278: LD_INT 3
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 2
69287: PUSH
69288: LD_INT 5
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 2
69297: NEG
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: NEG
69309: PUSH
69310: LD_INT 0
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 3
69319: NEG
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 2
69331: NEG
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 2
69342: NEG
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 3
69353: NEG
69354: PUSH
69355: LD_INT 1
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: LD_INT 0
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 4
69375: NEG
69376: PUSH
69377: LD_INT 1
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 4
69387: NEG
69388: PUSH
69389: LD_INT 2
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 2
69399: NEG
69400: PUSH
69401: LD_INT 2
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 4
69410: NEG
69411: PUSH
69412: LD_INT 4
69414: NEG
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 4
69422: NEG
69423: PUSH
69424: LD_INT 5
69426: NEG
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 3
69434: NEG
69435: PUSH
69436: LD_INT 4
69438: NEG
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 3
69446: NEG
69447: PUSH
69448: LD_INT 3
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: LD_INT 3
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 5
69470: NEG
69471: PUSH
69472: LD_INT 4
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 5
69482: NEG
69483: PUSH
69484: LD_INT 5
69486: NEG
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 3
69494: NEG
69495: PUSH
69496: LD_INT 5
69498: NEG
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 5
69506: NEG
69507: PUSH
69508: LD_INT 3
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: LD_INT 3
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: LD_INT 4
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: PUSH
69541: LD_INT 3
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: LD_INT 2
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: LD_INT 2
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 3
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 1
69585: NEG
69586: PUSH
69587: LD_INT 4
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 2
69597: PUSH
69598: LD_INT 2
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 2
69608: NEG
69609: PUSH
69610: LD_INT 4
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 4
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 4
69630: PUSH
69631: LD_INT 1
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 5
69641: PUSH
69642: LD_INT 0
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 5
69651: PUSH
69652: LD_INT 1
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 4
69661: PUSH
69662: LD_INT 1
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 3
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 3
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 3
69692: PUSH
69693: LD_INT 2
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 5
69703: PUSH
69704: LD_INT 2
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69758: LD_ADDR_VAR 0 32
69762: PUSH
69763: LD_INT 4
69765: NEG
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 4
69776: NEG
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 3
69788: NEG
69789: PUSH
69790: LD_INT 0
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 3
69799: NEG
69800: PUSH
69801: LD_INT 1
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 4
69810: NEG
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 5
69821: NEG
69822: PUSH
69823: LD_INT 0
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 5
69832: NEG
69833: PUSH
69834: LD_INT 1
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 5
69844: NEG
69845: PUSH
69846: LD_INT 2
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 3
69856: NEG
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: NEG
69868: PUSH
69869: LD_INT 3
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: LD_INT 4
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 2
69891: NEG
69892: PUSH
69893: LD_INT 3
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 2
69903: NEG
69904: PUSH
69905: LD_INT 2
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: NEG
69916: PUSH
69917: LD_INT 2
69919: NEG
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 4
69927: NEG
69928: PUSH
69929: LD_INT 3
69931: NEG
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 4
69939: NEG
69940: PUSH
69941: LD_INT 4
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 2
69951: NEG
69952: PUSH
69953: LD_INT 4
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 4
69963: NEG
69964: PUSH
69965: LD_INT 2
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: LD_INT 4
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 0
69986: PUSH
69987: LD_INT 5
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 1
69997: PUSH
69998: LD_INT 4
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: LD_INT 3
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: LD_INT 3
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: LD_INT 4
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 1
70042: NEG
70043: PUSH
70044: LD_INT 5
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: LD_INT 3
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 2
70065: NEG
70066: PUSH
70067: LD_INT 5
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 3
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: LD_INT 1
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 4
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 4
70108: PUSH
70109: LD_INT 1
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: LD_INT 1
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 2
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 2
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 2
70149: PUSH
70150: LD_INT 2
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 4
70160: PUSH
70161: LD_INT 2
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 4
70170: PUSH
70171: LD_INT 4
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 4
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 5
70190: PUSH
70191: LD_INT 4
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 5
70200: PUSH
70201: LD_INT 5
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 4
70210: PUSH
70211: LD_INT 5
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 3
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: LD_INT 3
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 5
70240: PUSH
70241: LD_INT 3
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: LD_INT 5
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70305: LD_ADDR_VAR 0 33
70309: PUSH
70310: LD_INT 4
70312: NEG
70313: PUSH
70314: LD_INT 4
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 4
70324: NEG
70325: PUSH
70326: LD_INT 5
70328: NEG
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: LD_INT 4
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: LD_INT 3
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 4
70360: NEG
70361: PUSH
70362: LD_INT 3
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 5
70372: NEG
70373: PUSH
70374: LD_INT 4
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 5
70384: NEG
70385: PUSH
70386: LD_INT 5
70388: NEG
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 3
70396: NEG
70397: PUSH
70398: LD_INT 5
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 5
70408: NEG
70409: PUSH
70410: LD_INT 3
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 3
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 4
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 1
70442: PUSH
70443: LD_INT 3
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 1
70453: PUSH
70454: LD_INT 2
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 1
70475: NEG
70476: PUSH
70477: LD_INT 3
70479: NEG
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 1
70487: NEG
70488: PUSH
70489: LD_INT 4
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 2
70510: NEG
70511: PUSH
70512: LD_INT 4
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 4
70522: PUSH
70523: LD_INT 0
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 4
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 5
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 5
70553: PUSH
70554: LD_INT 1
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 4
70563: PUSH
70564: LD_INT 1
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 3
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 3
70594: PUSH
70595: LD_INT 2
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 5
70605: PUSH
70606: LD_INT 2
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 3
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 3
70625: PUSH
70626: LD_INT 2
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 4
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 4
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 3
70655: PUSH
70656: LD_INT 4
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 2
70665: PUSH
70666: LD_INT 3
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 2
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 4
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 2
70695: PUSH
70696: LD_INT 4
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: LD_INT 4
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 0
70715: PUSH
70716: LD_INT 3
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 1
70725: PUSH
70726: LD_INT 4
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 1
70735: PUSH
70736: LD_INT 5
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 0
70745: PUSH
70746: LD_INT 5
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: LD_INT 4
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 1
70766: NEG
70767: PUSH
70768: LD_INT 3
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 2
70777: PUSH
70778: LD_INT 5
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 2
70787: NEG
70788: PUSH
70789: LD_INT 3
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70843: LD_ADDR_VAR 0 34
70847: PUSH
70848: LD_INT 0
70850: PUSH
70851: LD_INT 4
70853: NEG
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: LD_INT 5
70864: NEG
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: LD_INT 4
70875: NEG
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 1
70883: PUSH
70884: LD_INT 3
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: LD_INT 3
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 1
70905: NEG
70906: PUSH
70907: LD_INT 4
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 1
70917: NEG
70918: PUSH
70919: LD_INT 5
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 2
70929: PUSH
70930: LD_INT 3
70932: NEG
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 2
70940: NEG
70941: PUSH
70942: LD_INT 5
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 3
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 3
70962: PUSH
70963: LD_INT 1
70965: NEG
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 4
70973: PUSH
70974: LD_INT 0
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 4
70983: PUSH
70984: LD_INT 1
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 3
70993: PUSH
70994: LD_INT 1
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 2
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 2
71024: PUSH
71025: LD_INT 2
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 4
71035: PUSH
71036: LD_INT 2
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 4
71045: PUSH
71046: LD_INT 4
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 4
71055: PUSH
71056: LD_INT 3
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 5
71065: PUSH
71066: LD_INT 4
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 5
71075: PUSH
71076: LD_INT 5
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 4
71085: PUSH
71086: LD_INT 5
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 3
71095: PUSH
71096: LD_INT 4
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 3
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 5
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 3
71125: PUSH
71126: LD_INT 5
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 0
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 1
71155: PUSH
71156: LD_INT 3
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: LD_INT 1
71165: PUSH
71166: LD_INT 4
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 0
71175: PUSH
71176: LD_INT 4
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 1
71185: NEG
71186: PUSH
71187: LD_INT 3
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 1
71196: NEG
71197: PUSH
71198: LD_INT 2
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 2
71207: PUSH
71208: LD_INT 4
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: NEG
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 4
71228: NEG
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 4
71239: NEG
71240: PUSH
71241: LD_INT 1
71243: NEG
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 3
71251: NEG
71252: PUSH
71253: LD_INT 0
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 3
71262: NEG
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 4
71273: NEG
71274: PUSH
71275: LD_INT 1
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 5
71284: NEG
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 5
71295: NEG
71296: PUSH
71297: LD_INT 1
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 5
71307: NEG
71308: PUSH
71309: LD_INT 2
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: LD_INT 2
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: ST_TO_ADDR
// end ; end ;
71375: GO 71378
71377: POP
// case btype of b_depot , b_warehouse :
71378: LD_VAR 0 1
71382: PUSH
71383: LD_INT 0
71385: DOUBLE
71386: EQUAL
71387: IFTRUE 71397
71389: LD_INT 1
71391: DOUBLE
71392: EQUAL
71393: IFTRUE 71397
71395: GO 71598
71397: POP
// case nation of nation_american :
71398: LD_VAR 0 5
71402: PUSH
71403: LD_INT 1
71405: DOUBLE
71406: EQUAL
71407: IFTRUE 71411
71409: GO 71467
71411: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71412: LD_ADDR_VAR 0 9
71416: PUSH
71417: LD_VAR 0 11
71421: PUSH
71422: LD_VAR 0 12
71426: PUSH
71427: LD_VAR 0 13
71431: PUSH
71432: LD_VAR 0 14
71436: PUSH
71437: LD_VAR 0 15
71441: PUSH
71442: LD_VAR 0 16
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: PUSH
71455: LD_VAR 0 4
71459: PUSH
71460: LD_INT 1
71462: PLUS
71463: ARRAY
71464: ST_TO_ADDR
71465: GO 71596
71467: LD_INT 2
71469: DOUBLE
71470: EQUAL
71471: IFTRUE 71475
71473: GO 71531
71475: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71476: LD_ADDR_VAR 0 9
71480: PUSH
71481: LD_VAR 0 17
71485: PUSH
71486: LD_VAR 0 18
71490: PUSH
71491: LD_VAR 0 19
71495: PUSH
71496: LD_VAR 0 20
71500: PUSH
71501: LD_VAR 0 21
71505: PUSH
71506: LD_VAR 0 22
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: PUSH
71519: LD_VAR 0 4
71523: PUSH
71524: LD_INT 1
71526: PLUS
71527: ARRAY
71528: ST_TO_ADDR
71529: GO 71596
71531: LD_INT 3
71533: DOUBLE
71534: EQUAL
71535: IFTRUE 71539
71537: GO 71595
71539: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71540: LD_ADDR_VAR 0 9
71544: PUSH
71545: LD_VAR 0 23
71549: PUSH
71550: LD_VAR 0 24
71554: PUSH
71555: LD_VAR 0 25
71559: PUSH
71560: LD_VAR 0 26
71564: PUSH
71565: LD_VAR 0 27
71569: PUSH
71570: LD_VAR 0 28
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: PUSH
71583: LD_VAR 0 4
71587: PUSH
71588: LD_INT 1
71590: PLUS
71591: ARRAY
71592: ST_TO_ADDR
71593: GO 71596
71595: POP
71596: GO 72151
71598: LD_INT 2
71600: DOUBLE
71601: EQUAL
71602: IFTRUE 71612
71604: LD_INT 3
71606: DOUBLE
71607: EQUAL
71608: IFTRUE 71612
71610: GO 71668
71612: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71613: LD_ADDR_VAR 0 9
71617: PUSH
71618: LD_VAR 0 29
71622: PUSH
71623: LD_VAR 0 30
71627: PUSH
71628: LD_VAR 0 31
71632: PUSH
71633: LD_VAR 0 32
71637: PUSH
71638: LD_VAR 0 33
71642: PUSH
71643: LD_VAR 0 34
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: PUSH
71656: LD_VAR 0 4
71660: PUSH
71661: LD_INT 1
71663: PLUS
71664: ARRAY
71665: ST_TO_ADDR
71666: GO 72151
71668: LD_INT 16
71670: DOUBLE
71671: EQUAL
71672: IFTRUE 71730
71674: LD_INT 17
71676: DOUBLE
71677: EQUAL
71678: IFTRUE 71730
71680: LD_INT 18
71682: DOUBLE
71683: EQUAL
71684: IFTRUE 71730
71686: LD_INT 19
71688: DOUBLE
71689: EQUAL
71690: IFTRUE 71730
71692: LD_INT 22
71694: DOUBLE
71695: EQUAL
71696: IFTRUE 71730
71698: LD_INT 20
71700: DOUBLE
71701: EQUAL
71702: IFTRUE 71730
71704: LD_INT 21
71706: DOUBLE
71707: EQUAL
71708: IFTRUE 71730
71710: LD_INT 23
71712: DOUBLE
71713: EQUAL
71714: IFTRUE 71730
71716: LD_INT 24
71718: DOUBLE
71719: EQUAL
71720: IFTRUE 71730
71722: LD_INT 25
71724: DOUBLE
71725: EQUAL
71726: IFTRUE 71730
71728: GO 71786
71730: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71731: LD_ADDR_VAR 0 9
71735: PUSH
71736: LD_VAR 0 35
71740: PUSH
71741: LD_VAR 0 36
71745: PUSH
71746: LD_VAR 0 37
71750: PUSH
71751: LD_VAR 0 38
71755: PUSH
71756: LD_VAR 0 39
71760: PUSH
71761: LD_VAR 0 40
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: PUSH
71774: LD_VAR 0 4
71778: PUSH
71779: LD_INT 1
71781: PLUS
71782: ARRAY
71783: ST_TO_ADDR
71784: GO 72151
71786: LD_INT 6
71788: DOUBLE
71789: EQUAL
71790: IFTRUE 71842
71792: LD_INT 7
71794: DOUBLE
71795: EQUAL
71796: IFTRUE 71842
71798: LD_INT 8
71800: DOUBLE
71801: EQUAL
71802: IFTRUE 71842
71804: LD_INT 13
71806: DOUBLE
71807: EQUAL
71808: IFTRUE 71842
71810: LD_INT 12
71812: DOUBLE
71813: EQUAL
71814: IFTRUE 71842
71816: LD_INT 15
71818: DOUBLE
71819: EQUAL
71820: IFTRUE 71842
71822: LD_INT 11
71824: DOUBLE
71825: EQUAL
71826: IFTRUE 71842
71828: LD_INT 14
71830: DOUBLE
71831: EQUAL
71832: IFTRUE 71842
71834: LD_INT 10
71836: DOUBLE
71837: EQUAL
71838: IFTRUE 71842
71840: GO 71898
71842: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71843: LD_ADDR_VAR 0 9
71847: PUSH
71848: LD_VAR 0 41
71852: PUSH
71853: LD_VAR 0 42
71857: PUSH
71858: LD_VAR 0 43
71862: PUSH
71863: LD_VAR 0 44
71867: PUSH
71868: LD_VAR 0 45
71872: PUSH
71873: LD_VAR 0 46
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: PUSH
71886: LD_VAR 0 4
71890: PUSH
71891: LD_INT 1
71893: PLUS
71894: ARRAY
71895: ST_TO_ADDR
71896: GO 72151
71898: LD_INT 36
71900: DOUBLE
71901: EQUAL
71902: IFTRUE 71906
71904: GO 71962
71906: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71907: LD_ADDR_VAR 0 9
71911: PUSH
71912: LD_VAR 0 47
71916: PUSH
71917: LD_VAR 0 48
71921: PUSH
71922: LD_VAR 0 49
71926: PUSH
71927: LD_VAR 0 50
71931: PUSH
71932: LD_VAR 0 51
71936: PUSH
71937: LD_VAR 0 52
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: PUSH
71950: LD_VAR 0 4
71954: PUSH
71955: LD_INT 1
71957: PLUS
71958: ARRAY
71959: ST_TO_ADDR
71960: GO 72151
71962: LD_INT 4
71964: DOUBLE
71965: EQUAL
71966: IFTRUE 71988
71968: LD_INT 5
71970: DOUBLE
71971: EQUAL
71972: IFTRUE 71988
71974: LD_INT 34
71976: DOUBLE
71977: EQUAL
71978: IFTRUE 71988
71980: LD_INT 37
71982: DOUBLE
71983: EQUAL
71984: IFTRUE 71988
71986: GO 72044
71988: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71989: LD_ADDR_VAR 0 9
71993: PUSH
71994: LD_VAR 0 53
71998: PUSH
71999: LD_VAR 0 54
72003: PUSH
72004: LD_VAR 0 55
72008: PUSH
72009: LD_VAR 0 56
72013: PUSH
72014: LD_VAR 0 57
72018: PUSH
72019: LD_VAR 0 58
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: PUSH
72032: LD_VAR 0 4
72036: PUSH
72037: LD_INT 1
72039: PLUS
72040: ARRAY
72041: ST_TO_ADDR
72042: GO 72151
72044: LD_INT 31
72046: DOUBLE
72047: EQUAL
72048: IFTRUE 72094
72050: LD_INT 32
72052: DOUBLE
72053: EQUAL
72054: IFTRUE 72094
72056: LD_INT 33
72058: DOUBLE
72059: EQUAL
72060: IFTRUE 72094
72062: LD_INT 27
72064: DOUBLE
72065: EQUAL
72066: IFTRUE 72094
72068: LD_INT 26
72070: DOUBLE
72071: EQUAL
72072: IFTRUE 72094
72074: LD_INT 28
72076: DOUBLE
72077: EQUAL
72078: IFTRUE 72094
72080: LD_INT 29
72082: DOUBLE
72083: EQUAL
72084: IFTRUE 72094
72086: LD_INT 30
72088: DOUBLE
72089: EQUAL
72090: IFTRUE 72094
72092: GO 72150
72094: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72095: LD_ADDR_VAR 0 9
72099: PUSH
72100: LD_VAR 0 59
72104: PUSH
72105: LD_VAR 0 60
72109: PUSH
72110: LD_VAR 0 61
72114: PUSH
72115: LD_VAR 0 62
72119: PUSH
72120: LD_VAR 0 63
72124: PUSH
72125: LD_VAR 0 64
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: PUSH
72138: LD_VAR 0 4
72142: PUSH
72143: LD_INT 1
72145: PLUS
72146: ARRAY
72147: ST_TO_ADDR
72148: GO 72151
72150: POP
// temp_list2 = [ ] ;
72151: LD_ADDR_VAR 0 10
72155: PUSH
72156: EMPTY
72157: ST_TO_ADDR
// for i in temp_list do
72158: LD_ADDR_VAR 0 8
72162: PUSH
72163: LD_VAR 0 9
72167: PUSH
72168: FOR_IN
72169: IFFALSE 72221
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72171: LD_ADDR_VAR 0 10
72175: PUSH
72176: LD_VAR 0 10
72180: PUSH
72181: LD_VAR 0 8
72185: PUSH
72186: LD_INT 1
72188: ARRAY
72189: PUSH
72190: LD_VAR 0 2
72194: PLUS
72195: PUSH
72196: LD_VAR 0 8
72200: PUSH
72201: LD_INT 2
72203: ARRAY
72204: PUSH
72205: LD_VAR 0 3
72209: PLUS
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: EMPTY
72216: LIST
72217: ADD
72218: ST_TO_ADDR
72219: GO 72168
72221: POP
72222: POP
// result = temp_list2 ;
72223: LD_ADDR_VAR 0 7
72227: PUSH
72228: LD_VAR 0 10
72232: ST_TO_ADDR
// end ;
72233: LD_VAR 0 7
72237: RET
// export function EnemyInRange ( unit , dist ) ; begin
72238: LD_INT 0
72240: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72241: LD_ADDR_VAR 0 3
72245: PUSH
72246: LD_VAR 0 1
72250: PPUSH
72251: CALL_OW 255
72255: PPUSH
72256: LD_VAR 0 1
72260: PPUSH
72261: CALL_OW 250
72265: PPUSH
72266: LD_VAR 0 1
72270: PPUSH
72271: CALL_OW 251
72275: PPUSH
72276: LD_VAR 0 2
72280: PPUSH
72281: CALL 45640 0 4
72285: PUSH
72286: LD_INT 4
72288: ARRAY
72289: ST_TO_ADDR
// end ;
72290: LD_VAR 0 3
72294: RET
// export function PlayerSeeMe ( unit ) ; begin
72295: LD_INT 0
72297: PPUSH
// result := See ( your_side , unit ) ;
72298: LD_ADDR_VAR 0 2
72302: PUSH
72303: LD_OWVAR 2
72307: PPUSH
72308: LD_VAR 0 1
72312: PPUSH
72313: CALL_OW 292
72317: ST_TO_ADDR
// end ;
72318: LD_VAR 0 2
72322: RET
// export function ReverseDir ( unit ) ; begin
72323: LD_INT 0
72325: PPUSH
// if not unit then
72326: LD_VAR 0 1
72330: NOT
72331: IFFALSE 72335
// exit ;
72333: GO 72358
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72335: LD_ADDR_VAR 0 2
72339: PUSH
72340: LD_VAR 0 1
72344: PPUSH
72345: CALL_OW 254
72349: PUSH
72350: LD_INT 3
72352: PLUS
72353: PUSH
72354: LD_INT 6
72356: MOD
72357: ST_TO_ADDR
// end ;
72358: LD_VAR 0 2
72362: RET
// export function ReverseArray ( array ) ; var i ; begin
72363: LD_INT 0
72365: PPUSH
72366: PPUSH
// if not array then
72367: LD_VAR 0 1
72371: NOT
72372: IFFALSE 72376
// exit ;
72374: GO 72431
// result := [ ] ;
72376: LD_ADDR_VAR 0 2
72380: PUSH
72381: EMPTY
72382: ST_TO_ADDR
// for i := array downto 1 do
72383: LD_ADDR_VAR 0 3
72387: PUSH
72388: DOUBLE
72389: LD_VAR 0 1
72393: INC
72394: ST_TO_ADDR
72395: LD_INT 1
72397: PUSH
72398: FOR_DOWNTO
72399: IFFALSE 72429
// result := Join ( result , array [ i ] ) ;
72401: LD_ADDR_VAR 0 2
72405: PUSH
72406: LD_VAR 0 2
72410: PPUSH
72411: LD_VAR 0 1
72415: PUSH
72416: LD_VAR 0 3
72420: ARRAY
72421: PPUSH
72422: CALL 77074 0 2
72426: ST_TO_ADDR
72427: GO 72398
72429: POP
72430: POP
// end ;
72431: LD_VAR 0 2
72435: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72436: LD_INT 0
72438: PPUSH
72439: PPUSH
72440: PPUSH
72441: PPUSH
72442: PPUSH
72443: PPUSH
// if not unit or not hexes then
72444: LD_VAR 0 1
72448: NOT
72449: PUSH
72450: LD_VAR 0 2
72454: NOT
72455: OR
72456: IFFALSE 72460
// exit ;
72458: GO 72583
// dist := 9999 ;
72460: LD_ADDR_VAR 0 5
72464: PUSH
72465: LD_INT 9999
72467: ST_TO_ADDR
// for i = 1 to hexes do
72468: LD_ADDR_VAR 0 4
72472: PUSH
72473: DOUBLE
72474: LD_INT 1
72476: DEC
72477: ST_TO_ADDR
72478: LD_VAR 0 2
72482: PUSH
72483: FOR_TO
72484: IFFALSE 72571
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72486: LD_ADDR_VAR 0 6
72490: PUSH
72491: LD_VAR 0 1
72495: PPUSH
72496: LD_VAR 0 2
72500: PUSH
72501: LD_VAR 0 4
72505: ARRAY
72506: PUSH
72507: LD_INT 1
72509: ARRAY
72510: PPUSH
72511: LD_VAR 0 2
72515: PUSH
72516: LD_VAR 0 4
72520: ARRAY
72521: PUSH
72522: LD_INT 2
72524: ARRAY
72525: PPUSH
72526: CALL_OW 297
72530: ST_TO_ADDR
// if tdist < dist then
72531: LD_VAR 0 6
72535: PUSH
72536: LD_VAR 0 5
72540: LESS
72541: IFFALSE 72569
// begin hex := hexes [ i ] ;
72543: LD_ADDR_VAR 0 8
72547: PUSH
72548: LD_VAR 0 2
72552: PUSH
72553: LD_VAR 0 4
72557: ARRAY
72558: ST_TO_ADDR
// dist := tdist ;
72559: LD_ADDR_VAR 0 5
72563: PUSH
72564: LD_VAR 0 6
72568: ST_TO_ADDR
// end ; end ;
72569: GO 72483
72571: POP
72572: POP
// result := hex ;
72573: LD_ADDR_VAR 0 3
72577: PUSH
72578: LD_VAR 0 8
72582: ST_TO_ADDR
// end ;
72583: LD_VAR 0 3
72587: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72588: LD_INT 0
72590: PPUSH
72591: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72592: LD_VAR 0 1
72596: NOT
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_INT 21
72605: PUSH
72606: LD_INT 2
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 23
72615: PUSH
72616: LD_INT 2
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PPUSH
72627: CALL_OW 69
72631: IN
72632: NOT
72633: OR
72634: IFFALSE 72638
// exit ;
72636: GO 72685
// for i = 1 to 3 do
72638: LD_ADDR_VAR 0 3
72642: PUSH
72643: DOUBLE
72644: LD_INT 1
72646: DEC
72647: ST_TO_ADDR
72648: LD_INT 3
72650: PUSH
72651: FOR_TO
72652: IFFALSE 72683
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72654: LD_VAR 0 1
72658: PPUSH
72659: CALL_OW 250
72663: PPUSH
72664: LD_VAR 0 1
72668: PPUSH
72669: CALL_OW 251
72673: PPUSH
72674: LD_INT 1
72676: PPUSH
72677: CALL_OW 453
72681: GO 72651
72683: POP
72684: POP
// end ;
72685: LD_VAR 0 2
72689: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72690: LD_INT 0
72692: PPUSH
72693: PPUSH
72694: PPUSH
72695: PPUSH
72696: PPUSH
72697: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72698: LD_VAR 0 1
72702: NOT
72703: PUSH
72704: LD_VAR 0 2
72708: NOT
72709: OR
72710: PUSH
72711: LD_VAR 0 1
72715: PPUSH
72716: CALL_OW 314
72720: OR
72721: IFFALSE 72725
// exit ;
72723: GO 73192
// if GetLives ( i ) < 250 then
72725: LD_VAR 0 4
72729: PPUSH
72730: CALL_OW 256
72734: PUSH
72735: LD_INT 250
72737: LESS
72738: IFFALSE 72751
// begin ComAutodestruct ( i ) ;
72740: LD_VAR 0 4
72744: PPUSH
72745: CALL 72588 0 1
// exit ;
72749: GO 73192
// end ; x := GetX ( enemy_unit ) ;
72751: LD_ADDR_VAR 0 7
72755: PUSH
72756: LD_VAR 0 2
72760: PPUSH
72761: CALL_OW 250
72765: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72766: LD_ADDR_VAR 0 8
72770: PUSH
72771: LD_VAR 0 2
72775: PPUSH
72776: CALL_OW 251
72780: ST_TO_ADDR
// if not x or not y then
72781: LD_VAR 0 7
72785: NOT
72786: PUSH
72787: LD_VAR 0 8
72791: NOT
72792: OR
72793: IFFALSE 72797
// exit ;
72795: GO 73192
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72797: LD_ADDR_VAR 0 6
72801: PUSH
72802: LD_VAR 0 7
72806: PPUSH
72807: LD_INT 0
72809: PPUSH
72810: LD_INT 4
72812: PPUSH
72813: CALL_OW 272
72817: PUSH
72818: LD_VAR 0 8
72822: PPUSH
72823: LD_INT 0
72825: PPUSH
72826: LD_INT 4
72828: PPUSH
72829: CALL_OW 273
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_VAR 0 7
72842: PPUSH
72843: LD_INT 1
72845: PPUSH
72846: LD_INT 4
72848: PPUSH
72849: CALL_OW 272
72853: PUSH
72854: LD_VAR 0 8
72858: PPUSH
72859: LD_INT 1
72861: PPUSH
72862: LD_INT 4
72864: PPUSH
72865: CALL_OW 273
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_VAR 0 7
72878: PPUSH
72879: LD_INT 2
72881: PPUSH
72882: LD_INT 4
72884: PPUSH
72885: CALL_OW 272
72889: PUSH
72890: LD_VAR 0 8
72894: PPUSH
72895: LD_INT 2
72897: PPUSH
72898: LD_INT 4
72900: PPUSH
72901: CALL_OW 273
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_VAR 0 7
72914: PPUSH
72915: LD_INT 3
72917: PPUSH
72918: LD_INT 4
72920: PPUSH
72921: CALL_OW 272
72925: PUSH
72926: LD_VAR 0 8
72930: PPUSH
72931: LD_INT 3
72933: PPUSH
72934: LD_INT 4
72936: PPUSH
72937: CALL_OW 273
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_VAR 0 7
72950: PPUSH
72951: LD_INT 4
72953: PPUSH
72954: LD_INT 4
72956: PPUSH
72957: CALL_OW 272
72961: PUSH
72962: LD_VAR 0 8
72966: PPUSH
72967: LD_INT 4
72969: PPUSH
72970: LD_INT 4
72972: PPUSH
72973: CALL_OW 273
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_VAR 0 7
72986: PPUSH
72987: LD_INT 5
72989: PPUSH
72990: LD_INT 4
72992: PPUSH
72993: CALL_OW 272
72997: PUSH
72998: LD_VAR 0 8
73002: PPUSH
73003: LD_INT 5
73005: PPUSH
73006: LD_INT 4
73008: PPUSH
73009: CALL_OW 273
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: ST_TO_ADDR
// for i = tmp downto 1 do
73026: LD_ADDR_VAR 0 4
73030: PUSH
73031: DOUBLE
73032: LD_VAR 0 6
73036: INC
73037: ST_TO_ADDR
73038: LD_INT 1
73040: PUSH
73041: FOR_DOWNTO
73042: IFFALSE 73143
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73044: LD_VAR 0 6
73048: PUSH
73049: LD_VAR 0 4
73053: ARRAY
73054: PUSH
73055: LD_INT 1
73057: ARRAY
73058: PPUSH
73059: LD_VAR 0 6
73063: PUSH
73064: LD_VAR 0 4
73068: ARRAY
73069: PUSH
73070: LD_INT 2
73072: ARRAY
73073: PPUSH
73074: CALL_OW 488
73078: NOT
73079: PUSH
73080: LD_VAR 0 6
73084: PUSH
73085: LD_VAR 0 4
73089: ARRAY
73090: PUSH
73091: LD_INT 1
73093: ARRAY
73094: PPUSH
73095: LD_VAR 0 6
73099: PUSH
73100: LD_VAR 0 4
73104: ARRAY
73105: PUSH
73106: LD_INT 2
73108: ARRAY
73109: PPUSH
73110: CALL_OW 428
73114: PUSH
73115: LD_INT 0
73117: NONEQUAL
73118: OR
73119: IFFALSE 73141
// tmp := Delete ( tmp , i ) ;
73121: LD_ADDR_VAR 0 6
73125: PUSH
73126: LD_VAR 0 6
73130: PPUSH
73131: LD_VAR 0 4
73135: PPUSH
73136: CALL_OW 3
73140: ST_TO_ADDR
73141: GO 73041
73143: POP
73144: POP
// j := GetClosestHex ( unit , tmp ) ;
73145: LD_ADDR_VAR 0 5
73149: PUSH
73150: LD_VAR 0 1
73154: PPUSH
73155: LD_VAR 0 6
73159: PPUSH
73160: CALL 72436 0 2
73164: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73165: LD_VAR 0 1
73169: PPUSH
73170: LD_VAR 0 5
73174: PUSH
73175: LD_INT 1
73177: ARRAY
73178: PPUSH
73179: LD_VAR 0 5
73183: PUSH
73184: LD_INT 2
73186: ARRAY
73187: PPUSH
73188: CALL_OW 111
// end ;
73192: LD_VAR 0 3
73196: RET
// export function PrepareApemanSoldier ( ) ; begin
73197: LD_INT 0
73199: PPUSH
// uc_nation := 0 ;
73200: LD_ADDR_OWVAR 21
73204: PUSH
73205: LD_INT 0
73207: ST_TO_ADDR
// hc_sex := sex_male ;
73208: LD_ADDR_OWVAR 27
73212: PUSH
73213: LD_INT 1
73215: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73216: LD_ADDR_OWVAR 28
73220: PUSH
73221: LD_INT 15
73223: ST_TO_ADDR
// hc_gallery :=  ;
73224: LD_ADDR_OWVAR 33
73228: PUSH
73229: LD_STRING 
73231: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73232: LD_ADDR_OWVAR 31
73236: PUSH
73237: LD_INT 0
73239: PPUSH
73240: LD_INT 3
73242: PPUSH
73243: CALL_OW 12
73247: PUSH
73248: LD_INT 0
73250: PPUSH
73251: LD_INT 3
73253: PPUSH
73254: CALL_OW 12
73258: PUSH
73259: LD_INT 0
73261: PUSH
73262: LD_INT 0
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: ST_TO_ADDR
// end ;
73271: LD_VAR 0 1
73275: RET
// export function PrepareApemanEngineer ( ) ; begin
73276: LD_INT 0
73278: PPUSH
// uc_nation := 0 ;
73279: LD_ADDR_OWVAR 21
73283: PUSH
73284: LD_INT 0
73286: ST_TO_ADDR
// hc_sex := sex_male ;
73287: LD_ADDR_OWVAR 27
73291: PUSH
73292: LD_INT 1
73294: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73295: LD_ADDR_OWVAR 28
73299: PUSH
73300: LD_INT 16
73302: ST_TO_ADDR
// hc_gallery :=  ;
73303: LD_ADDR_OWVAR 33
73307: PUSH
73308: LD_STRING 
73310: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73311: LD_ADDR_OWVAR 31
73315: PUSH
73316: LD_INT 0
73318: PPUSH
73319: LD_INT 3
73321: PPUSH
73322: CALL_OW 12
73326: PUSH
73327: LD_INT 0
73329: PPUSH
73330: LD_INT 3
73332: PPUSH
73333: CALL_OW 12
73337: PUSH
73338: LD_INT 0
73340: PUSH
73341: LD_INT 0
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: ST_TO_ADDR
// end ;
73350: LD_VAR 0 1
73354: RET
// export function PrepareApeman ( agressivity ) ; begin
73355: LD_INT 0
73357: PPUSH
// uc_side := 0 ;
73358: LD_ADDR_OWVAR 20
73362: PUSH
73363: LD_INT 0
73365: ST_TO_ADDR
// uc_nation := 0 ;
73366: LD_ADDR_OWVAR 21
73370: PUSH
73371: LD_INT 0
73373: ST_TO_ADDR
// hc_sex := sex_male ;
73374: LD_ADDR_OWVAR 27
73378: PUSH
73379: LD_INT 1
73381: ST_TO_ADDR
// hc_class := class_apeman ;
73382: LD_ADDR_OWVAR 28
73386: PUSH
73387: LD_INT 12
73389: ST_TO_ADDR
// hc_gallery :=  ;
73390: LD_ADDR_OWVAR 33
73394: PUSH
73395: LD_STRING 
73397: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73398: LD_ADDR_OWVAR 35
73402: PUSH
73403: LD_VAR 0 1
73407: NEG
73408: PPUSH
73409: LD_VAR 0 1
73413: PPUSH
73414: CALL_OW 12
73418: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73419: LD_ADDR_OWVAR 31
73423: PUSH
73424: LD_INT 0
73426: PPUSH
73427: LD_INT 3
73429: PPUSH
73430: CALL_OW 12
73434: PUSH
73435: LD_INT 0
73437: PPUSH
73438: LD_INT 3
73440: PPUSH
73441: CALL_OW 12
73445: PUSH
73446: LD_INT 0
73448: PUSH
73449: LD_INT 0
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: ST_TO_ADDR
// end ;
73458: LD_VAR 0 2
73462: RET
// export function PrepareTiger ( agressivity ) ; begin
73463: LD_INT 0
73465: PPUSH
// uc_side := 0 ;
73466: LD_ADDR_OWVAR 20
73470: PUSH
73471: LD_INT 0
73473: ST_TO_ADDR
// uc_nation := 0 ;
73474: LD_ADDR_OWVAR 21
73478: PUSH
73479: LD_INT 0
73481: ST_TO_ADDR
// hc_class := class_tiger ;
73482: LD_ADDR_OWVAR 28
73486: PUSH
73487: LD_INT 14
73489: ST_TO_ADDR
// hc_gallery :=  ;
73490: LD_ADDR_OWVAR 33
73494: PUSH
73495: LD_STRING 
73497: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73498: LD_ADDR_OWVAR 35
73502: PUSH
73503: LD_VAR 0 1
73507: NEG
73508: PPUSH
73509: LD_VAR 0 1
73513: PPUSH
73514: CALL_OW 12
73518: ST_TO_ADDR
// end ;
73519: LD_VAR 0 2
73523: RET
// export function PrepareEnchidna ( ) ; begin
73524: LD_INT 0
73526: PPUSH
// uc_side := 0 ;
73527: LD_ADDR_OWVAR 20
73531: PUSH
73532: LD_INT 0
73534: ST_TO_ADDR
// uc_nation := 0 ;
73535: LD_ADDR_OWVAR 21
73539: PUSH
73540: LD_INT 0
73542: ST_TO_ADDR
// hc_class := class_baggie ;
73543: LD_ADDR_OWVAR 28
73547: PUSH
73548: LD_INT 13
73550: ST_TO_ADDR
// hc_gallery :=  ;
73551: LD_ADDR_OWVAR 33
73555: PUSH
73556: LD_STRING 
73558: ST_TO_ADDR
// end ;
73559: LD_VAR 0 1
73563: RET
// export function PrepareFrog ( ) ; begin
73564: LD_INT 0
73566: PPUSH
// uc_side := 0 ;
73567: LD_ADDR_OWVAR 20
73571: PUSH
73572: LD_INT 0
73574: ST_TO_ADDR
// uc_nation := 0 ;
73575: LD_ADDR_OWVAR 21
73579: PUSH
73580: LD_INT 0
73582: ST_TO_ADDR
// hc_class := class_frog ;
73583: LD_ADDR_OWVAR 28
73587: PUSH
73588: LD_INT 19
73590: ST_TO_ADDR
// hc_gallery :=  ;
73591: LD_ADDR_OWVAR 33
73595: PUSH
73596: LD_STRING 
73598: ST_TO_ADDR
// end ;
73599: LD_VAR 0 1
73603: RET
// export function PrepareFish ( ) ; begin
73604: LD_INT 0
73606: PPUSH
// uc_side := 0 ;
73607: LD_ADDR_OWVAR 20
73611: PUSH
73612: LD_INT 0
73614: ST_TO_ADDR
// uc_nation := 0 ;
73615: LD_ADDR_OWVAR 21
73619: PUSH
73620: LD_INT 0
73622: ST_TO_ADDR
// hc_class := class_fish ;
73623: LD_ADDR_OWVAR 28
73627: PUSH
73628: LD_INT 20
73630: ST_TO_ADDR
// hc_gallery :=  ;
73631: LD_ADDR_OWVAR 33
73635: PUSH
73636: LD_STRING 
73638: ST_TO_ADDR
// end ;
73639: LD_VAR 0 1
73643: RET
// export function PrepareBird ( ) ; begin
73644: LD_INT 0
73646: PPUSH
// uc_side := 0 ;
73647: LD_ADDR_OWVAR 20
73651: PUSH
73652: LD_INT 0
73654: ST_TO_ADDR
// uc_nation := 0 ;
73655: LD_ADDR_OWVAR 21
73659: PUSH
73660: LD_INT 0
73662: ST_TO_ADDR
// hc_class := class_phororhacos ;
73663: LD_ADDR_OWVAR 28
73667: PUSH
73668: LD_INT 18
73670: ST_TO_ADDR
// hc_gallery :=  ;
73671: LD_ADDR_OWVAR 33
73675: PUSH
73676: LD_STRING 
73678: ST_TO_ADDR
// end ;
73679: LD_VAR 0 1
73683: RET
// export function PrepareHorse ( ) ; begin
73684: LD_INT 0
73686: PPUSH
// uc_side := 0 ;
73687: LD_ADDR_OWVAR 20
73691: PUSH
73692: LD_INT 0
73694: ST_TO_ADDR
// uc_nation := 0 ;
73695: LD_ADDR_OWVAR 21
73699: PUSH
73700: LD_INT 0
73702: ST_TO_ADDR
// hc_class := class_horse ;
73703: LD_ADDR_OWVAR 28
73707: PUSH
73708: LD_INT 21
73710: ST_TO_ADDR
// hc_gallery :=  ;
73711: LD_ADDR_OWVAR 33
73715: PUSH
73716: LD_STRING 
73718: ST_TO_ADDR
// end ;
73719: LD_VAR 0 1
73723: RET
// export function PrepareMastodont ( ) ; begin
73724: LD_INT 0
73726: PPUSH
// uc_side := 0 ;
73727: LD_ADDR_OWVAR 20
73731: PUSH
73732: LD_INT 0
73734: ST_TO_ADDR
// uc_nation := 0 ;
73735: LD_ADDR_OWVAR 21
73739: PUSH
73740: LD_INT 0
73742: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73743: LD_ADDR_OWVAR 37
73747: PUSH
73748: LD_INT 31
73750: ST_TO_ADDR
// vc_control := control_rider ;
73751: LD_ADDR_OWVAR 38
73755: PUSH
73756: LD_INT 4
73758: ST_TO_ADDR
// end ;
73759: LD_VAR 0 1
73763: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73764: LD_INT 0
73766: PPUSH
73767: PPUSH
73768: PPUSH
// uc_side = 0 ;
73769: LD_ADDR_OWVAR 20
73773: PUSH
73774: LD_INT 0
73776: ST_TO_ADDR
// uc_nation = 0 ;
73777: LD_ADDR_OWVAR 21
73781: PUSH
73782: LD_INT 0
73784: ST_TO_ADDR
// InitHc_All ( ) ;
73785: CALL_OW 584
// InitVc ;
73789: CALL_OW 20
// if mastodonts then
73793: LD_VAR 0 6
73797: IFFALSE 73864
// for i = 1 to mastodonts do
73799: LD_ADDR_VAR 0 11
73803: PUSH
73804: DOUBLE
73805: LD_INT 1
73807: DEC
73808: ST_TO_ADDR
73809: LD_VAR 0 6
73813: PUSH
73814: FOR_TO
73815: IFFALSE 73862
// begin vc_chassis := 31 ;
73817: LD_ADDR_OWVAR 37
73821: PUSH
73822: LD_INT 31
73824: ST_TO_ADDR
// vc_control := control_rider ;
73825: LD_ADDR_OWVAR 38
73829: PUSH
73830: LD_INT 4
73832: ST_TO_ADDR
// animal := CreateVehicle ;
73833: LD_ADDR_VAR 0 12
73837: PUSH
73838: CALL_OW 45
73842: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73843: LD_VAR 0 12
73847: PPUSH
73848: LD_VAR 0 8
73852: PPUSH
73853: LD_INT 0
73855: PPUSH
73856: CALL 75992 0 3
// end ;
73860: GO 73814
73862: POP
73863: POP
// if horses then
73864: LD_VAR 0 5
73868: IFFALSE 73935
// for i = 1 to horses do
73870: LD_ADDR_VAR 0 11
73874: PUSH
73875: DOUBLE
73876: LD_INT 1
73878: DEC
73879: ST_TO_ADDR
73880: LD_VAR 0 5
73884: PUSH
73885: FOR_TO
73886: IFFALSE 73933
// begin hc_class := 21 ;
73888: LD_ADDR_OWVAR 28
73892: PUSH
73893: LD_INT 21
73895: ST_TO_ADDR
// hc_gallery :=  ;
73896: LD_ADDR_OWVAR 33
73900: PUSH
73901: LD_STRING 
73903: ST_TO_ADDR
// animal := CreateHuman ;
73904: LD_ADDR_VAR 0 12
73908: PUSH
73909: CALL_OW 44
73913: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73914: LD_VAR 0 12
73918: PPUSH
73919: LD_VAR 0 8
73923: PPUSH
73924: LD_INT 0
73926: PPUSH
73927: CALL 75992 0 3
// end ;
73931: GO 73885
73933: POP
73934: POP
// if birds then
73935: LD_VAR 0 1
73939: IFFALSE 74006
// for i = 1 to birds do
73941: LD_ADDR_VAR 0 11
73945: PUSH
73946: DOUBLE
73947: LD_INT 1
73949: DEC
73950: ST_TO_ADDR
73951: LD_VAR 0 1
73955: PUSH
73956: FOR_TO
73957: IFFALSE 74004
// begin hc_class = 18 ;
73959: LD_ADDR_OWVAR 28
73963: PUSH
73964: LD_INT 18
73966: ST_TO_ADDR
// hc_gallery =  ;
73967: LD_ADDR_OWVAR 33
73971: PUSH
73972: LD_STRING 
73974: ST_TO_ADDR
// animal := CreateHuman ;
73975: LD_ADDR_VAR 0 12
73979: PUSH
73980: CALL_OW 44
73984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73985: LD_VAR 0 12
73989: PPUSH
73990: LD_VAR 0 8
73994: PPUSH
73995: LD_INT 0
73997: PPUSH
73998: CALL 75992 0 3
// end ;
74002: GO 73956
74004: POP
74005: POP
// if tigers then
74006: LD_VAR 0 2
74010: IFFALSE 74094
// for i = 1 to tigers do
74012: LD_ADDR_VAR 0 11
74016: PUSH
74017: DOUBLE
74018: LD_INT 1
74020: DEC
74021: ST_TO_ADDR
74022: LD_VAR 0 2
74026: PUSH
74027: FOR_TO
74028: IFFALSE 74092
// begin hc_class = class_tiger ;
74030: LD_ADDR_OWVAR 28
74034: PUSH
74035: LD_INT 14
74037: ST_TO_ADDR
// hc_gallery =  ;
74038: LD_ADDR_OWVAR 33
74042: PUSH
74043: LD_STRING 
74045: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74046: LD_ADDR_OWVAR 35
74050: PUSH
74051: LD_INT 7
74053: NEG
74054: PPUSH
74055: LD_INT 7
74057: PPUSH
74058: CALL_OW 12
74062: ST_TO_ADDR
// animal := CreateHuman ;
74063: LD_ADDR_VAR 0 12
74067: PUSH
74068: CALL_OW 44
74072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74073: LD_VAR 0 12
74077: PPUSH
74078: LD_VAR 0 8
74082: PPUSH
74083: LD_INT 0
74085: PPUSH
74086: CALL 75992 0 3
// end ;
74090: GO 74027
74092: POP
74093: POP
// if apemans then
74094: LD_VAR 0 3
74098: IFFALSE 74221
// for i = 1 to apemans do
74100: LD_ADDR_VAR 0 11
74104: PUSH
74105: DOUBLE
74106: LD_INT 1
74108: DEC
74109: ST_TO_ADDR
74110: LD_VAR 0 3
74114: PUSH
74115: FOR_TO
74116: IFFALSE 74219
// begin hc_class = class_apeman ;
74118: LD_ADDR_OWVAR 28
74122: PUSH
74123: LD_INT 12
74125: ST_TO_ADDR
// hc_gallery =  ;
74126: LD_ADDR_OWVAR 33
74130: PUSH
74131: LD_STRING 
74133: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74134: LD_ADDR_OWVAR 35
74138: PUSH
74139: LD_INT 2
74141: NEG
74142: PPUSH
74143: LD_INT 2
74145: PPUSH
74146: CALL_OW 12
74150: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74151: LD_ADDR_OWVAR 31
74155: PUSH
74156: LD_INT 1
74158: PPUSH
74159: LD_INT 3
74161: PPUSH
74162: CALL_OW 12
74166: PUSH
74167: LD_INT 1
74169: PPUSH
74170: LD_INT 3
74172: PPUSH
74173: CALL_OW 12
74177: PUSH
74178: LD_INT 0
74180: PUSH
74181: LD_INT 0
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: ST_TO_ADDR
// animal := CreateHuman ;
74190: LD_ADDR_VAR 0 12
74194: PUSH
74195: CALL_OW 44
74199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74200: LD_VAR 0 12
74204: PPUSH
74205: LD_VAR 0 8
74209: PPUSH
74210: LD_INT 0
74212: PPUSH
74213: CALL 75992 0 3
// end ;
74217: GO 74115
74219: POP
74220: POP
// if enchidnas then
74221: LD_VAR 0 4
74225: IFFALSE 74292
// for i = 1 to enchidnas do
74227: LD_ADDR_VAR 0 11
74231: PUSH
74232: DOUBLE
74233: LD_INT 1
74235: DEC
74236: ST_TO_ADDR
74237: LD_VAR 0 4
74241: PUSH
74242: FOR_TO
74243: IFFALSE 74290
// begin hc_class = 13 ;
74245: LD_ADDR_OWVAR 28
74249: PUSH
74250: LD_INT 13
74252: ST_TO_ADDR
// hc_gallery =  ;
74253: LD_ADDR_OWVAR 33
74257: PUSH
74258: LD_STRING 
74260: ST_TO_ADDR
// animal := CreateHuman ;
74261: LD_ADDR_VAR 0 12
74265: PUSH
74266: CALL_OW 44
74270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74271: LD_VAR 0 12
74275: PPUSH
74276: LD_VAR 0 8
74280: PPUSH
74281: LD_INT 0
74283: PPUSH
74284: CALL 75992 0 3
// end ;
74288: GO 74242
74290: POP
74291: POP
// if fishes then
74292: LD_VAR 0 7
74296: IFFALSE 74363
// for i = 1 to fishes do
74298: LD_ADDR_VAR 0 11
74302: PUSH
74303: DOUBLE
74304: LD_INT 1
74306: DEC
74307: ST_TO_ADDR
74308: LD_VAR 0 7
74312: PUSH
74313: FOR_TO
74314: IFFALSE 74361
// begin hc_class = 20 ;
74316: LD_ADDR_OWVAR 28
74320: PUSH
74321: LD_INT 20
74323: ST_TO_ADDR
// hc_gallery =  ;
74324: LD_ADDR_OWVAR 33
74328: PUSH
74329: LD_STRING 
74331: ST_TO_ADDR
// animal := CreateHuman ;
74332: LD_ADDR_VAR 0 12
74336: PUSH
74337: CALL_OW 44
74341: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74342: LD_VAR 0 12
74346: PPUSH
74347: LD_VAR 0 9
74351: PPUSH
74352: LD_INT 0
74354: PPUSH
74355: CALL 75992 0 3
// end ;
74359: GO 74313
74361: POP
74362: POP
// end ;
74363: LD_VAR 0 10
74367: RET
// export function WantHeal ( sci , unit ) ; begin
74368: LD_INT 0
74370: PPUSH
// if GetTaskList ( sci ) > 0 then
74371: LD_VAR 0 1
74375: PPUSH
74376: CALL_OW 437
74380: PUSH
74381: LD_INT 0
74383: GREATER
74384: IFFALSE 74454
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74386: LD_VAR 0 1
74390: PPUSH
74391: CALL_OW 437
74395: PUSH
74396: LD_INT 1
74398: ARRAY
74399: PUSH
74400: LD_INT 1
74402: ARRAY
74403: PUSH
74404: LD_STRING l
74406: EQUAL
74407: PUSH
74408: LD_VAR 0 1
74412: PPUSH
74413: CALL_OW 437
74417: PUSH
74418: LD_INT 1
74420: ARRAY
74421: PUSH
74422: LD_INT 4
74424: ARRAY
74425: PUSH
74426: LD_VAR 0 2
74430: EQUAL
74431: AND
74432: IFFALSE 74444
// result := true else
74434: LD_ADDR_VAR 0 3
74438: PUSH
74439: LD_INT 1
74441: ST_TO_ADDR
74442: GO 74452
// result := false ;
74444: LD_ADDR_VAR 0 3
74448: PUSH
74449: LD_INT 0
74451: ST_TO_ADDR
// end else
74452: GO 74462
// result := false ;
74454: LD_ADDR_VAR 0 3
74458: PUSH
74459: LD_INT 0
74461: ST_TO_ADDR
// end ;
74462: LD_VAR 0 3
74466: RET
// export function HealTarget ( sci ) ; begin
74467: LD_INT 0
74469: PPUSH
// if not sci then
74470: LD_VAR 0 1
74474: NOT
74475: IFFALSE 74479
// exit ;
74477: GO 74544
// result := 0 ;
74479: LD_ADDR_VAR 0 2
74483: PUSH
74484: LD_INT 0
74486: ST_TO_ADDR
// if GetTaskList ( sci ) then
74487: LD_VAR 0 1
74491: PPUSH
74492: CALL_OW 437
74496: IFFALSE 74544
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74498: LD_VAR 0 1
74502: PPUSH
74503: CALL_OW 437
74507: PUSH
74508: LD_INT 1
74510: ARRAY
74511: PUSH
74512: LD_INT 1
74514: ARRAY
74515: PUSH
74516: LD_STRING l
74518: EQUAL
74519: IFFALSE 74544
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74521: LD_ADDR_VAR 0 2
74525: PUSH
74526: LD_VAR 0 1
74530: PPUSH
74531: CALL_OW 437
74535: PUSH
74536: LD_INT 1
74538: ARRAY
74539: PUSH
74540: LD_INT 4
74542: ARRAY
74543: ST_TO_ADDR
// end ;
74544: LD_VAR 0 2
74548: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74549: LD_INT 0
74551: PPUSH
74552: PPUSH
74553: PPUSH
74554: PPUSH
// if not base_units then
74555: LD_VAR 0 1
74559: NOT
74560: IFFALSE 74564
// exit ;
74562: GO 74651
// result := false ;
74564: LD_ADDR_VAR 0 2
74568: PUSH
74569: LD_INT 0
74571: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74572: LD_ADDR_VAR 0 5
74576: PUSH
74577: LD_VAR 0 1
74581: PPUSH
74582: LD_INT 21
74584: PUSH
74585: LD_INT 3
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PPUSH
74592: CALL_OW 72
74596: ST_TO_ADDR
// if not tmp then
74597: LD_VAR 0 5
74601: NOT
74602: IFFALSE 74606
// exit ;
74604: GO 74651
// for i in tmp do
74606: LD_ADDR_VAR 0 3
74610: PUSH
74611: LD_VAR 0 5
74615: PUSH
74616: FOR_IN
74617: IFFALSE 74649
// begin result := EnemyInRange ( i , 22 ) ;
74619: LD_ADDR_VAR 0 2
74623: PUSH
74624: LD_VAR 0 3
74628: PPUSH
74629: LD_INT 22
74631: PPUSH
74632: CALL 72238 0 2
74636: ST_TO_ADDR
// if result then
74637: LD_VAR 0 2
74641: IFFALSE 74647
// exit ;
74643: POP
74644: POP
74645: GO 74651
// end ;
74647: GO 74616
74649: POP
74650: POP
// end ;
74651: LD_VAR 0 2
74655: RET
// export function FilterByTag ( units , tag ) ; begin
74656: LD_INT 0
74658: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74659: LD_ADDR_VAR 0 3
74663: PUSH
74664: LD_VAR 0 1
74668: PPUSH
74669: LD_INT 120
74671: PUSH
74672: LD_VAR 0 2
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PPUSH
74681: CALL_OW 72
74685: ST_TO_ADDR
// end ;
74686: LD_VAR 0 3
74690: RET
// export function IsDriver ( un ) ; begin
74691: LD_INT 0
74693: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74694: LD_ADDR_VAR 0 2
74698: PUSH
74699: LD_VAR 0 1
74703: PUSH
74704: LD_INT 55
74706: PUSH
74707: EMPTY
74708: LIST
74709: PPUSH
74710: CALL_OW 69
74714: IN
74715: ST_TO_ADDR
// end ;
74716: LD_VAR 0 2
74720: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74721: LD_INT 0
74723: PPUSH
74724: PPUSH
// list := [ ] ;
74725: LD_ADDR_VAR 0 5
74729: PUSH
74730: EMPTY
74731: ST_TO_ADDR
// case d of 0 :
74732: LD_VAR 0 3
74736: PUSH
74737: LD_INT 0
74739: DOUBLE
74740: EQUAL
74741: IFTRUE 74745
74743: GO 74878
74745: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74746: LD_ADDR_VAR 0 5
74750: PUSH
74751: LD_VAR 0 1
74755: PUSH
74756: LD_INT 4
74758: MINUS
74759: PUSH
74760: LD_VAR 0 2
74764: PUSH
74765: LD_INT 4
74767: MINUS
74768: PUSH
74769: LD_INT 2
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: PUSH
74777: LD_VAR 0 1
74781: PUSH
74782: LD_INT 3
74784: MINUS
74785: PUSH
74786: LD_VAR 0 2
74790: PUSH
74791: LD_INT 1
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: PUSH
74799: LD_VAR 0 1
74803: PUSH
74804: LD_INT 4
74806: PLUS
74807: PUSH
74808: LD_VAR 0 2
74812: PUSH
74813: LD_INT 4
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: LIST
74820: PUSH
74821: LD_VAR 0 1
74825: PUSH
74826: LD_INT 3
74828: PLUS
74829: PUSH
74830: LD_VAR 0 2
74834: PUSH
74835: LD_INT 3
74837: PLUS
74838: PUSH
74839: LD_INT 5
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: LIST
74846: PUSH
74847: LD_VAR 0 1
74851: PUSH
74852: LD_VAR 0 2
74856: PUSH
74857: LD_INT 4
74859: PLUS
74860: PUSH
74861: LD_INT 0
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: LIST
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: ST_TO_ADDR
// end ; 1 :
74876: GO 75576
74878: LD_INT 1
74880: DOUBLE
74881: EQUAL
74882: IFTRUE 74886
74884: GO 75019
74886: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74887: LD_ADDR_VAR 0 5
74891: PUSH
74892: LD_VAR 0 1
74896: PUSH
74897: LD_VAR 0 2
74901: PUSH
74902: LD_INT 4
74904: MINUS
74905: PUSH
74906: LD_INT 3
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: PUSH
74914: LD_VAR 0 1
74918: PUSH
74919: LD_INT 3
74921: MINUS
74922: PUSH
74923: LD_VAR 0 2
74927: PUSH
74928: LD_INT 3
74930: MINUS
74931: PUSH
74932: LD_INT 2
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: LIST
74939: PUSH
74940: LD_VAR 0 1
74944: PUSH
74945: LD_INT 4
74947: MINUS
74948: PUSH
74949: LD_VAR 0 2
74953: PUSH
74954: LD_INT 1
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: LIST
74961: PUSH
74962: LD_VAR 0 1
74966: PUSH
74967: LD_VAR 0 2
74971: PUSH
74972: LD_INT 3
74974: PLUS
74975: PUSH
74976: LD_INT 0
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: LIST
74983: PUSH
74984: LD_VAR 0 1
74988: PUSH
74989: LD_INT 4
74991: PLUS
74992: PUSH
74993: LD_VAR 0 2
74997: PUSH
74998: LD_INT 4
75000: PLUS
75001: PUSH
75002: LD_INT 5
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: ST_TO_ADDR
// end ; 2 :
75017: GO 75576
75019: LD_INT 2
75021: DOUBLE
75022: EQUAL
75023: IFTRUE 75027
75025: GO 75156
75027: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75028: LD_ADDR_VAR 0 5
75032: PUSH
75033: LD_VAR 0 1
75037: PUSH
75038: LD_VAR 0 2
75042: PUSH
75043: LD_INT 3
75045: MINUS
75046: PUSH
75047: LD_INT 3
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: LIST
75054: PUSH
75055: LD_VAR 0 1
75059: PUSH
75060: LD_INT 4
75062: PLUS
75063: PUSH
75064: LD_VAR 0 2
75068: PUSH
75069: LD_INT 4
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: PUSH
75077: LD_VAR 0 1
75081: PUSH
75082: LD_VAR 0 2
75086: PUSH
75087: LD_INT 4
75089: PLUS
75090: PUSH
75091: LD_INT 0
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: LIST
75098: PUSH
75099: LD_VAR 0 1
75103: PUSH
75104: LD_INT 3
75106: MINUS
75107: PUSH
75108: LD_VAR 0 2
75112: PUSH
75113: LD_INT 1
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: LIST
75120: PUSH
75121: LD_VAR 0 1
75125: PUSH
75126: LD_INT 4
75128: MINUS
75129: PUSH
75130: LD_VAR 0 2
75134: PUSH
75135: LD_INT 4
75137: MINUS
75138: PUSH
75139: LD_INT 2
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: LIST
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: ST_TO_ADDR
// end ; 3 :
75154: GO 75576
75156: LD_INT 3
75158: DOUBLE
75159: EQUAL
75160: IFTRUE 75164
75162: GO 75297
75164: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75165: LD_ADDR_VAR 0 5
75169: PUSH
75170: LD_VAR 0 1
75174: PUSH
75175: LD_INT 3
75177: PLUS
75178: PUSH
75179: LD_VAR 0 2
75183: PUSH
75184: LD_INT 4
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: LIST
75191: PUSH
75192: LD_VAR 0 1
75196: PUSH
75197: LD_INT 4
75199: PLUS
75200: PUSH
75201: LD_VAR 0 2
75205: PUSH
75206: LD_INT 4
75208: PLUS
75209: PUSH
75210: LD_INT 5
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: LIST
75217: PUSH
75218: LD_VAR 0 1
75222: PUSH
75223: LD_INT 4
75225: MINUS
75226: PUSH
75227: LD_VAR 0 2
75231: PUSH
75232: LD_INT 1
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: LIST
75239: PUSH
75240: LD_VAR 0 1
75244: PUSH
75245: LD_VAR 0 2
75249: PUSH
75250: LD_INT 4
75252: MINUS
75253: PUSH
75254: LD_INT 3
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: LIST
75261: PUSH
75262: LD_VAR 0 1
75266: PUSH
75267: LD_INT 3
75269: MINUS
75270: PUSH
75271: LD_VAR 0 2
75275: PUSH
75276: LD_INT 3
75278: MINUS
75279: PUSH
75280: LD_INT 2
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: LIST
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: LIST
75292: LIST
75293: LIST
75294: ST_TO_ADDR
// end ; 4 :
75295: GO 75576
75297: LD_INT 4
75299: DOUBLE
75300: EQUAL
75301: IFTRUE 75305
75303: GO 75438
75305: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75306: LD_ADDR_VAR 0 5
75310: PUSH
75311: LD_VAR 0 1
75315: PUSH
75316: LD_VAR 0 2
75320: PUSH
75321: LD_INT 4
75323: PLUS
75324: PUSH
75325: LD_INT 0
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: LIST
75332: PUSH
75333: LD_VAR 0 1
75337: PUSH
75338: LD_INT 3
75340: PLUS
75341: PUSH
75342: LD_VAR 0 2
75346: PUSH
75347: LD_INT 3
75349: PLUS
75350: PUSH
75351: LD_INT 5
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: LIST
75358: PUSH
75359: LD_VAR 0 1
75363: PUSH
75364: LD_INT 4
75366: PLUS
75367: PUSH
75368: LD_VAR 0 2
75372: PUSH
75373: LD_INT 4
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: LIST
75380: PUSH
75381: LD_VAR 0 1
75385: PUSH
75386: LD_VAR 0 2
75390: PUSH
75391: LD_INT 3
75393: MINUS
75394: PUSH
75395: LD_INT 3
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: LIST
75402: PUSH
75403: LD_VAR 0 1
75407: PUSH
75408: LD_INT 4
75410: MINUS
75411: PUSH
75412: LD_VAR 0 2
75416: PUSH
75417: LD_INT 4
75419: MINUS
75420: PUSH
75421: LD_INT 2
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: LIST
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: ST_TO_ADDR
// end ; 5 :
75436: GO 75576
75438: LD_INT 5
75440: DOUBLE
75441: EQUAL
75442: IFTRUE 75446
75444: GO 75575
75446: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75447: LD_ADDR_VAR 0 5
75451: PUSH
75452: LD_VAR 0 1
75456: PUSH
75457: LD_INT 4
75459: MINUS
75460: PUSH
75461: LD_VAR 0 2
75465: PUSH
75466: LD_INT 1
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: LIST
75473: PUSH
75474: LD_VAR 0 1
75478: PUSH
75479: LD_VAR 0 2
75483: PUSH
75484: LD_INT 4
75486: MINUS
75487: PUSH
75488: LD_INT 3
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: LIST
75495: PUSH
75496: LD_VAR 0 1
75500: PUSH
75501: LD_INT 4
75503: PLUS
75504: PUSH
75505: LD_VAR 0 2
75509: PUSH
75510: LD_INT 4
75512: PLUS
75513: PUSH
75514: LD_INT 5
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: LIST
75521: PUSH
75522: LD_VAR 0 1
75526: PUSH
75527: LD_INT 3
75529: PLUS
75530: PUSH
75531: LD_VAR 0 2
75535: PUSH
75536: LD_INT 4
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: LIST
75543: PUSH
75544: LD_VAR 0 1
75548: PUSH
75549: LD_VAR 0 2
75553: PUSH
75554: LD_INT 3
75556: PLUS
75557: PUSH
75558: LD_INT 0
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: LIST
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: ST_TO_ADDR
// end ; end ;
75573: GO 75576
75575: POP
// result := list ;
75576: LD_ADDR_VAR 0 4
75580: PUSH
75581: LD_VAR 0 5
75585: ST_TO_ADDR
// end ;
75586: LD_VAR 0 4
75590: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75591: LD_INT 0
75593: PPUSH
75594: PPUSH
75595: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75596: LD_VAR 0 1
75600: NOT
75601: PUSH
75602: LD_VAR 0 2
75606: PUSH
75607: LD_INT 1
75609: PUSH
75610: LD_INT 2
75612: PUSH
75613: LD_INT 3
75615: PUSH
75616: LD_INT 4
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: IN
75625: NOT
75626: OR
75627: IFFALSE 75631
// exit ;
75629: GO 75714
// tmp := [ ] ;
75631: LD_ADDR_VAR 0 5
75635: PUSH
75636: EMPTY
75637: ST_TO_ADDR
// for i in units do
75638: LD_ADDR_VAR 0 4
75642: PUSH
75643: LD_VAR 0 1
75647: PUSH
75648: FOR_IN
75649: IFFALSE 75683
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75651: LD_ADDR_VAR 0 5
75655: PUSH
75656: LD_VAR 0 5
75660: PPUSH
75661: LD_VAR 0 4
75665: PPUSH
75666: LD_VAR 0 2
75670: PPUSH
75671: CALL_OW 259
75675: PPUSH
75676: CALL 77074 0 2
75680: ST_TO_ADDR
75681: GO 75648
75683: POP
75684: POP
// if not tmp then
75685: LD_VAR 0 5
75689: NOT
75690: IFFALSE 75694
// exit ;
75692: GO 75714
// result := SortListByListDesc ( units , tmp ) ;
75694: LD_ADDR_VAR 0 3
75698: PUSH
75699: LD_VAR 0 1
75703: PPUSH
75704: LD_VAR 0 5
75708: PPUSH
75709: CALL_OW 77
75713: ST_TO_ADDR
// end ;
75714: LD_VAR 0 3
75718: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75719: LD_INT 0
75721: PPUSH
75722: PPUSH
75723: PPUSH
// result := false ;
75724: LD_ADDR_VAR 0 3
75728: PUSH
75729: LD_INT 0
75731: ST_TO_ADDR
// if not building then
75732: LD_VAR 0 2
75736: NOT
75737: IFFALSE 75741
// exit ;
75739: GO 75879
// x := GetX ( building ) ;
75741: LD_ADDR_VAR 0 4
75745: PUSH
75746: LD_VAR 0 2
75750: PPUSH
75751: CALL_OW 250
75755: ST_TO_ADDR
// y := GetY ( building ) ;
75756: LD_ADDR_VAR 0 5
75760: PUSH
75761: LD_VAR 0 2
75765: PPUSH
75766: CALL_OW 251
75770: ST_TO_ADDR
// if not x or not y then
75771: LD_VAR 0 4
75775: NOT
75776: PUSH
75777: LD_VAR 0 5
75781: NOT
75782: OR
75783: IFFALSE 75787
// exit ;
75785: GO 75879
// if GetTaskList ( unit ) then
75787: LD_VAR 0 1
75791: PPUSH
75792: CALL_OW 437
75796: IFFALSE 75879
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75798: LD_STRING e
75800: PUSH
75801: LD_VAR 0 1
75805: PPUSH
75806: CALL_OW 437
75810: PUSH
75811: LD_INT 1
75813: ARRAY
75814: PUSH
75815: LD_INT 1
75817: ARRAY
75818: EQUAL
75819: PUSH
75820: LD_VAR 0 4
75824: PUSH
75825: LD_VAR 0 1
75829: PPUSH
75830: CALL_OW 437
75834: PUSH
75835: LD_INT 1
75837: ARRAY
75838: PUSH
75839: LD_INT 2
75841: ARRAY
75842: EQUAL
75843: AND
75844: PUSH
75845: LD_VAR 0 5
75849: PUSH
75850: LD_VAR 0 1
75854: PPUSH
75855: CALL_OW 437
75859: PUSH
75860: LD_INT 1
75862: ARRAY
75863: PUSH
75864: LD_INT 3
75866: ARRAY
75867: EQUAL
75868: AND
75869: IFFALSE 75879
// result := true end ;
75871: LD_ADDR_VAR 0 3
75875: PUSH
75876: LD_INT 1
75878: ST_TO_ADDR
// end ;
75879: LD_VAR 0 3
75883: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75884: LD_INT 0
75886: PPUSH
// result := false ;
75887: LD_ADDR_VAR 0 4
75891: PUSH
75892: LD_INT 0
75894: ST_TO_ADDR
// if GetTaskList ( unit ) then
75895: LD_VAR 0 1
75899: PPUSH
75900: CALL_OW 437
75904: IFFALSE 75987
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75906: LD_STRING M
75908: PUSH
75909: LD_VAR 0 1
75913: PPUSH
75914: CALL_OW 437
75918: PUSH
75919: LD_INT 1
75921: ARRAY
75922: PUSH
75923: LD_INT 1
75925: ARRAY
75926: EQUAL
75927: PUSH
75928: LD_VAR 0 2
75932: PUSH
75933: LD_VAR 0 1
75937: PPUSH
75938: CALL_OW 437
75942: PUSH
75943: LD_INT 1
75945: ARRAY
75946: PUSH
75947: LD_INT 2
75949: ARRAY
75950: EQUAL
75951: AND
75952: PUSH
75953: LD_VAR 0 3
75957: PUSH
75958: LD_VAR 0 1
75962: PPUSH
75963: CALL_OW 437
75967: PUSH
75968: LD_INT 1
75970: ARRAY
75971: PUSH
75972: LD_INT 3
75974: ARRAY
75975: EQUAL
75976: AND
75977: IFFALSE 75987
// result := true ;
75979: LD_ADDR_VAR 0 4
75983: PUSH
75984: LD_INT 1
75986: ST_TO_ADDR
// end ; end ;
75987: LD_VAR 0 4
75991: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75992: LD_INT 0
75994: PPUSH
75995: PPUSH
75996: PPUSH
75997: PPUSH
// if not unit or not area then
75998: LD_VAR 0 1
76002: NOT
76003: PUSH
76004: LD_VAR 0 2
76008: NOT
76009: OR
76010: IFFALSE 76014
// exit ;
76012: GO 76177
// tmp := AreaToList ( area , i ) ;
76014: LD_ADDR_VAR 0 6
76018: PUSH
76019: LD_VAR 0 2
76023: PPUSH
76024: LD_VAR 0 5
76028: PPUSH
76029: CALL_OW 517
76033: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76034: LD_ADDR_VAR 0 5
76038: PUSH
76039: DOUBLE
76040: LD_INT 1
76042: DEC
76043: ST_TO_ADDR
76044: LD_VAR 0 6
76048: PUSH
76049: LD_INT 1
76051: ARRAY
76052: PUSH
76053: FOR_TO
76054: IFFALSE 76175
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76056: LD_ADDR_VAR 0 7
76060: PUSH
76061: LD_VAR 0 6
76065: PUSH
76066: LD_INT 1
76068: ARRAY
76069: PUSH
76070: LD_VAR 0 5
76074: ARRAY
76075: PUSH
76076: LD_VAR 0 6
76080: PUSH
76081: LD_INT 2
76083: ARRAY
76084: PUSH
76085: LD_VAR 0 5
76089: ARRAY
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76095: LD_INT 92
76097: PUSH
76098: LD_VAR 0 7
76102: PUSH
76103: LD_INT 1
76105: ARRAY
76106: PUSH
76107: LD_VAR 0 7
76111: PUSH
76112: LD_INT 2
76114: ARRAY
76115: PUSH
76116: LD_INT 3
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: LIST
76123: LIST
76124: PPUSH
76125: CALL_OW 69
76129: PUSH
76130: LD_INT 0
76132: EQUAL
76133: IFFALSE 76173
// begin PlaceUnitArea ( unit , area , mode ) ;
76135: LD_VAR 0 1
76139: PPUSH
76140: LD_VAR 0 2
76144: PPUSH
76145: LD_VAR 0 3
76149: PPUSH
76150: CALL_OW 49
// result := IsPlaced ( unit ) ;
76154: LD_ADDR_VAR 0 4
76158: PUSH
76159: LD_VAR 0 1
76163: PPUSH
76164: CALL_OW 305
76168: ST_TO_ADDR
// exit ;
76169: POP
76170: POP
76171: GO 76177
// end ; end ;
76173: GO 76053
76175: POP
76176: POP
// end ;
76177: LD_VAR 0 4
76181: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76182: LD_INT 0
76184: PPUSH
76185: PPUSH
76186: PPUSH
// if not side or side > 8 then
76187: LD_VAR 0 1
76191: NOT
76192: PUSH
76193: LD_VAR 0 1
76197: PUSH
76198: LD_INT 8
76200: GREATER
76201: OR
76202: IFFALSE 76206
// exit ;
76204: GO 76393
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76206: LD_ADDR_VAR 0 4
76210: PUSH
76211: LD_INT 22
76213: PUSH
76214: LD_VAR 0 1
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: LD_INT 21
76225: PUSH
76226: LD_INT 3
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: PPUSH
76237: CALL_OW 69
76241: ST_TO_ADDR
// if not tmp then
76242: LD_VAR 0 4
76246: NOT
76247: IFFALSE 76251
// exit ;
76249: GO 76393
// enable_addtolog := true ;
76251: LD_ADDR_OWVAR 81
76255: PUSH
76256: LD_INT 1
76258: ST_TO_ADDR
// AddToLog ( [ ) ;
76259: LD_STRING [
76261: PPUSH
76262: CALL_OW 561
// for i in tmp do
76266: LD_ADDR_VAR 0 3
76270: PUSH
76271: LD_VAR 0 4
76275: PUSH
76276: FOR_IN
76277: IFFALSE 76384
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76279: LD_STRING [
76281: PUSH
76282: LD_VAR 0 3
76286: PPUSH
76287: CALL_OW 266
76291: STR
76292: PUSH
76293: LD_STRING , 
76295: STR
76296: PUSH
76297: LD_VAR 0 3
76301: PPUSH
76302: CALL_OW 250
76306: STR
76307: PUSH
76308: LD_STRING , 
76310: STR
76311: PUSH
76312: LD_VAR 0 3
76316: PPUSH
76317: CALL_OW 251
76321: STR
76322: PUSH
76323: LD_STRING , 
76325: STR
76326: PUSH
76327: LD_VAR 0 3
76331: PPUSH
76332: CALL_OW 254
76336: STR
76337: PUSH
76338: LD_STRING , 
76340: STR
76341: PUSH
76342: LD_VAR 0 3
76346: PPUSH
76347: LD_INT 1
76349: PPUSH
76350: CALL_OW 268
76354: STR
76355: PUSH
76356: LD_STRING , 
76358: STR
76359: PUSH
76360: LD_VAR 0 3
76364: PPUSH
76365: LD_INT 2
76367: PPUSH
76368: CALL_OW 268
76372: STR
76373: PUSH
76374: LD_STRING ],
76376: STR
76377: PPUSH
76378: CALL_OW 561
// end ;
76382: GO 76276
76384: POP
76385: POP
// AddToLog ( ]; ) ;
76386: LD_STRING ];
76388: PPUSH
76389: CALL_OW 561
// end ;
76393: LD_VAR 0 2
76397: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76398: LD_INT 0
76400: PPUSH
76401: PPUSH
76402: PPUSH
76403: PPUSH
76404: PPUSH
// if not area or not rate or not max then
76405: LD_VAR 0 1
76409: NOT
76410: PUSH
76411: LD_VAR 0 2
76415: NOT
76416: OR
76417: PUSH
76418: LD_VAR 0 4
76422: NOT
76423: OR
76424: IFFALSE 76428
// exit ;
76426: GO 76617
// while 1 do
76428: LD_INT 1
76430: IFFALSE 76617
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76432: LD_ADDR_VAR 0 9
76436: PUSH
76437: LD_VAR 0 1
76441: PPUSH
76442: LD_INT 1
76444: PPUSH
76445: CALL_OW 287
76449: PUSH
76450: LD_INT 10
76452: MUL
76453: ST_TO_ADDR
// r := rate / 10 ;
76454: LD_ADDR_VAR 0 7
76458: PUSH
76459: LD_VAR 0 2
76463: PUSH
76464: LD_INT 10
76466: DIVREAL
76467: ST_TO_ADDR
// time := 1 1$00 ;
76468: LD_ADDR_VAR 0 8
76472: PUSH
76473: LD_INT 2100
76475: ST_TO_ADDR
// if amount < min then
76476: LD_VAR 0 9
76480: PUSH
76481: LD_VAR 0 3
76485: LESS
76486: IFFALSE 76504
// r := r * 2 else
76488: LD_ADDR_VAR 0 7
76492: PUSH
76493: LD_VAR 0 7
76497: PUSH
76498: LD_INT 2
76500: MUL
76501: ST_TO_ADDR
76502: GO 76530
// if amount > max then
76504: LD_VAR 0 9
76508: PUSH
76509: LD_VAR 0 4
76513: GREATER
76514: IFFALSE 76530
// r := r / 2 ;
76516: LD_ADDR_VAR 0 7
76520: PUSH
76521: LD_VAR 0 7
76525: PUSH
76526: LD_INT 2
76528: DIVREAL
76529: ST_TO_ADDR
// time := time / r ;
76530: LD_ADDR_VAR 0 8
76534: PUSH
76535: LD_VAR 0 8
76539: PUSH
76540: LD_VAR 0 7
76544: DIVREAL
76545: ST_TO_ADDR
// if time < 0 then
76546: LD_VAR 0 8
76550: PUSH
76551: LD_INT 0
76553: LESS
76554: IFFALSE 76571
// time := time * - 1 ;
76556: LD_ADDR_VAR 0 8
76560: PUSH
76561: LD_VAR 0 8
76565: PUSH
76566: LD_INT 1
76568: NEG
76569: MUL
76570: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76571: LD_VAR 0 8
76575: PUSH
76576: LD_INT 35
76578: PPUSH
76579: LD_INT 875
76581: PPUSH
76582: CALL_OW 12
76586: PLUS
76587: PPUSH
76588: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76592: LD_INT 1
76594: PPUSH
76595: LD_INT 5
76597: PPUSH
76598: CALL_OW 12
76602: PPUSH
76603: LD_VAR 0 1
76607: PPUSH
76608: LD_INT 1
76610: PPUSH
76611: CALL_OW 55
// end ;
76615: GO 76428
// end ;
76617: LD_VAR 0 5
76621: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76622: LD_INT 0
76624: PPUSH
76625: PPUSH
76626: PPUSH
76627: PPUSH
76628: PPUSH
76629: PPUSH
76630: PPUSH
76631: PPUSH
// if not turrets or not factories then
76632: LD_VAR 0 1
76636: NOT
76637: PUSH
76638: LD_VAR 0 2
76642: NOT
76643: OR
76644: IFFALSE 76648
// exit ;
76646: GO 76955
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76648: LD_ADDR_VAR 0 10
76652: PUSH
76653: LD_INT 5
76655: PUSH
76656: LD_INT 6
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: LD_INT 2
76665: PUSH
76666: LD_INT 4
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 3
76675: PUSH
76676: LD_INT 5
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: LIST
76687: PUSH
76688: LD_INT 24
76690: PUSH
76691: LD_INT 25
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 23
76700: PUSH
76701: LD_INT 27
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: PUSH
76712: LD_INT 42
76714: PUSH
76715: LD_INT 43
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: LD_INT 44
76724: PUSH
76725: LD_INT 46
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: LD_INT 45
76734: PUSH
76735: LD_INT 47
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: LIST
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: LIST
76751: ST_TO_ADDR
// result := [ ] ;
76752: LD_ADDR_VAR 0 3
76756: PUSH
76757: EMPTY
76758: ST_TO_ADDR
// for i in turrets do
76759: LD_ADDR_VAR 0 4
76763: PUSH
76764: LD_VAR 0 1
76768: PUSH
76769: FOR_IN
76770: IFFALSE 76953
// begin nat := GetNation ( i ) ;
76772: LD_ADDR_VAR 0 7
76776: PUSH
76777: LD_VAR 0 4
76781: PPUSH
76782: CALL_OW 248
76786: ST_TO_ADDR
// weapon := 0 ;
76787: LD_ADDR_VAR 0 8
76791: PUSH
76792: LD_INT 0
76794: ST_TO_ADDR
// if not nat then
76795: LD_VAR 0 7
76799: NOT
76800: IFFALSE 76804
// continue ;
76802: GO 76769
// for j in list [ nat ] do
76804: LD_ADDR_VAR 0 5
76808: PUSH
76809: LD_VAR 0 10
76813: PUSH
76814: LD_VAR 0 7
76818: ARRAY
76819: PUSH
76820: FOR_IN
76821: IFFALSE 76862
// if GetBWeapon ( i ) = j [ 1 ] then
76823: LD_VAR 0 4
76827: PPUSH
76828: CALL_OW 269
76832: PUSH
76833: LD_VAR 0 5
76837: PUSH
76838: LD_INT 1
76840: ARRAY
76841: EQUAL
76842: IFFALSE 76860
// begin weapon := j [ 2 ] ;
76844: LD_ADDR_VAR 0 8
76848: PUSH
76849: LD_VAR 0 5
76853: PUSH
76854: LD_INT 2
76856: ARRAY
76857: ST_TO_ADDR
// break ;
76858: GO 76862
// end ;
76860: GO 76820
76862: POP
76863: POP
// if not weapon then
76864: LD_VAR 0 8
76868: NOT
76869: IFFALSE 76873
// continue ;
76871: GO 76769
// for k in factories do
76873: LD_ADDR_VAR 0 6
76877: PUSH
76878: LD_VAR 0 2
76882: PUSH
76883: FOR_IN
76884: IFFALSE 76949
// begin weapons := AvailableWeaponList ( k ) ;
76886: LD_ADDR_VAR 0 9
76890: PUSH
76891: LD_VAR 0 6
76895: PPUSH
76896: CALL_OW 478
76900: ST_TO_ADDR
// if not weapons then
76901: LD_VAR 0 9
76905: NOT
76906: IFFALSE 76910
// continue ;
76908: GO 76883
// if weapon in weapons then
76910: LD_VAR 0 8
76914: PUSH
76915: LD_VAR 0 9
76919: IN
76920: IFFALSE 76947
// begin result := [ i , weapon ] ;
76922: LD_ADDR_VAR 0 3
76926: PUSH
76927: LD_VAR 0 4
76931: PUSH
76932: LD_VAR 0 8
76936: PUSH
76937: EMPTY
76938: LIST
76939: LIST
76940: ST_TO_ADDR
// exit ;
76941: POP
76942: POP
76943: POP
76944: POP
76945: GO 76955
// end ; end ;
76947: GO 76883
76949: POP
76950: POP
// end ;
76951: GO 76769
76953: POP
76954: POP
// end ;
76955: LD_VAR 0 3
76959: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76960: LD_INT 0
76962: PPUSH
// if not side or side > 8 then
76963: LD_VAR 0 3
76967: NOT
76968: PUSH
76969: LD_VAR 0 3
76973: PUSH
76974: LD_INT 8
76976: GREATER
76977: OR
76978: IFFALSE 76982
// exit ;
76980: GO 77041
// if not range then
76982: LD_VAR 0 4
76986: NOT
76987: IFFALSE 76998
// range := - 12 ;
76989: LD_ADDR_VAR 0 4
76993: PUSH
76994: LD_INT 12
76996: NEG
76997: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76998: LD_VAR 0 1
77002: PPUSH
77003: LD_VAR 0 2
77007: PPUSH
77008: LD_VAR 0 3
77012: PPUSH
77013: LD_VAR 0 4
77017: PPUSH
77018: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77022: LD_VAR 0 1
77026: PPUSH
77027: LD_VAR 0 2
77031: PPUSH
77032: LD_VAR 0 3
77036: PPUSH
77037: CALL_OW 331
// end ;
77041: LD_VAR 0 5
77045: RET
// export function Video ( mode ) ; begin
77046: LD_INT 0
77048: PPUSH
// ingame_video = mode ;
77049: LD_ADDR_OWVAR 52
77053: PUSH
77054: LD_VAR 0 1
77058: ST_TO_ADDR
// interface_hidden = mode ;
77059: LD_ADDR_OWVAR 54
77063: PUSH
77064: LD_VAR 0 1
77068: ST_TO_ADDR
// end ;
77069: LD_VAR 0 2
77073: RET
// export function Join ( array , element ) ; begin
77074: LD_INT 0
77076: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77077: LD_ADDR_VAR 0 3
77081: PUSH
77082: LD_VAR 0 1
77086: PPUSH
77087: LD_VAR 0 1
77091: PUSH
77092: LD_INT 1
77094: PLUS
77095: PPUSH
77096: LD_VAR 0 2
77100: PPUSH
77101: CALL_OW 1
77105: ST_TO_ADDR
// end ;
77106: LD_VAR 0 3
77110: RET
// export function JoinUnion ( array , element ) ; begin
77111: LD_INT 0
77113: PPUSH
// result := array union element ;
77114: LD_ADDR_VAR 0 3
77118: PUSH
77119: LD_VAR 0 1
77123: PUSH
77124: LD_VAR 0 2
77128: UNION
77129: ST_TO_ADDR
// end ;
77130: LD_VAR 0 3
77134: RET
// export function GetBehemoths ( side ) ; begin
77135: LD_INT 0
77137: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77138: LD_ADDR_VAR 0 2
77142: PUSH
77143: LD_INT 22
77145: PUSH
77146: LD_VAR 0 1
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 31
77157: PUSH
77158: LD_INT 25
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PPUSH
77169: CALL_OW 69
77173: ST_TO_ADDR
// end ;
77174: LD_VAR 0 2
77178: RET
// export function Shuffle ( array ) ; var i , index ; begin
77179: LD_INT 0
77181: PPUSH
77182: PPUSH
77183: PPUSH
// result := [ ] ;
77184: LD_ADDR_VAR 0 2
77188: PUSH
77189: EMPTY
77190: ST_TO_ADDR
// if not array then
77191: LD_VAR 0 1
77195: NOT
77196: IFFALSE 77200
// exit ;
77198: GO 77299
// Randomize ;
77200: CALL_OW 10
// for i = array downto 1 do
77204: LD_ADDR_VAR 0 3
77208: PUSH
77209: DOUBLE
77210: LD_VAR 0 1
77214: INC
77215: ST_TO_ADDR
77216: LD_INT 1
77218: PUSH
77219: FOR_DOWNTO
77220: IFFALSE 77297
// begin index := rand ( 1 , array ) ;
77222: LD_ADDR_VAR 0 4
77226: PUSH
77227: LD_INT 1
77229: PPUSH
77230: LD_VAR 0 1
77234: PPUSH
77235: CALL_OW 12
77239: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77240: LD_ADDR_VAR 0 2
77244: PUSH
77245: LD_VAR 0 2
77249: PPUSH
77250: LD_VAR 0 2
77254: PUSH
77255: LD_INT 1
77257: PLUS
77258: PPUSH
77259: LD_VAR 0 1
77263: PUSH
77264: LD_VAR 0 4
77268: ARRAY
77269: PPUSH
77270: CALL_OW 2
77274: ST_TO_ADDR
// array := Delete ( array , index ) ;
77275: LD_ADDR_VAR 0 1
77279: PUSH
77280: LD_VAR 0 1
77284: PPUSH
77285: LD_VAR 0 4
77289: PPUSH
77290: CALL_OW 3
77294: ST_TO_ADDR
// end ;
77295: GO 77219
77297: POP
77298: POP
// end ;
77299: LD_VAR 0 2
77303: RET
// export function GetBaseMaterials ( base ) ; begin
77304: LD_INT 0
77306: PPUSH
// result := [ 0 , 0 , 0 ] ;
77307: LD_ADDR_VAR 0 2
77311: PUSH
77312: LD_INT 0
77314: PUSH
77315: LD_INT 0
77317: PUSH
77318: LD_INT 0
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: LIST
77325: ST_TO_ADDR
// if not base then
77326: LD_VAR 0 1
77330: NOT
77331: IFFALSE 77335
// exit ;
77333: GO 77384
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77335: LD_ADDR_VAR 0 2
77339: PUSH
77340: LD_VAR 0 1
77344: PPUSH
77345: LD_INT 1
77347: PPUSH
77348: CALL_OW 275
77352: PUSH
77353: LD_VAR 0 1
77357: PPUSH
77358: LD_INT 2
77360: PPUSH
77361: CALL_OW 275
77365: PUSH
77366: LD_VAR 0 1
77370: PPUSH
77371: LD_INT 3
77373: PPUSH
77374: CALL_OW 275
77378: PUSH
77379: EMPTY
77380: LIST
77381: LIST
77382: LIST
77383: ST_TO_ADDR
// end ;
77384: LD_VAR 0 2
77388: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77389: LD_INT 0
77391: PPUSH
77392: PPUSH
// result := array ;
77393: LD_ADDR_VAR 0 3
77397: PUSH
77398: LD_VAR 0 1
77402: ST_TO_ADDR
// if size >= result then
77403: LD_VAR 0 2
77407: PUSH
77408: LD_VAR 0 3
77412: GREATEREQUAL
77413: IFFALSE 77417
// exit ;
77415: GO 77467
// if size then
77417: LD_VAR 0 2
77421: IFFALSE 77467
// for i := array downto size do
77423: LD_ADDR_VAR 0 4
77427: PUSH
77428: DOUBLE
77429: LD_VAR 0 1
77433: INC
77434: ST_TO_ADDR
77435: LD_VAR 0 2
77439: PUSH
77440: FOR_DOWNTO
77441: IFFALSE 77465
// result := Delete ( result , result ) ;
77443: LD_ADDR_VAR 0 3
77447: PUSH
77448: LD_VAR 0 3
77452: PPUSH
77453: LD_VAR 0 3
77457: PPUSH
77458: CALL_OW 3
77462: ST_TO_ADDR
77463: GO 77440
77465: POP
77466: POP
// end ;
77467: LD_VAR 0 3
77471: RET
// export function ComExit ( unit ) ; var tmp ; begin
77472: LD_INT 0
77474: PPUSH
77475: PPUSH
// if not IsInUnit ( unit ) then
77476: LD_VAR 0 1
77480: PPUSH
77481: CALL_OW 310
77485: NOT
77486: IFFALSE 77490
// exit ;
77488: GO 77550
// tmp := IsInUnit ( unit ) ;
77490: LD_ADDR_VAR 0 3
77494: PUSH
77495: LD_VAR 0 1
77499: PPUSH
77500: CALL_OW 310
77504: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77505: LD_VAR 0 3
77509: PPUSH
77510: CALL_OW 247
77514: PUSH
77515: LD_INT 2
77517: EQUAL
77518: IFFALSE 77531
// ComExitVehicle ( unit ) else
77520: LD_VAR 0 1
77524: PPUSH
77525: CALL_OW 121
77529: GO 77540
// ComExitBuilding ( unit ) ;
77531: LD_VAR 0 1
77535: PPUSH
77536: CALL_OW 122
// result := tmp ;
77540: LD_ADDR_VAR 0 2
77544: PUSH
77545: LD_VAR 0 3
77549: ST_TO_ADDR
// end ;
77550: LD_VAR 0 2
77554: RET
// export function ComExitAll ( units ) ; var i ; begin
77555: LD_INT 0
77557: PPUSH
77558: PPUSH
// if not units then
77559: LD_VAR 0 1
77563: NOT
77564: IFFALSE 77568
// exit ;
77566: GO 77594
// for i in units do
77568: LD_ADDR_VAR 0 3
77572: PUSH
77573: LD_VAR 0 1
77577: PUSH
77578: FOR_IN
77579: IFFALSE 77592
// ComExit ( i ) ;
77581: LD_VAR 0 3
77585: PPUSH
77586: CALL 77472 0 1
77590: GO 77578
77592: POP
77593: POP
// end ;
77594: LD_VAR 0 2
77598: RET
// export function ResetHc ; begin
77599: LD_INT 0
77601: PPUSH
// InitHc ;
77602: CALL_OW 19
// hc_importance := 0 ;
77606: LD_ADDR_OWVAR 32
77610: PUSH
77611: LD_INT 0
77613: ST_TO_ADDR
// end ;
77614: LD_VAR 0 1
77618: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
77623: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77624: LD_ADDR_VAR 0 6
77628: PUSH
77629: LD_VAR 0 1
77633: PUSH
77634: LD_VAR 0 3
77638: PLUS
77639: PUSH
77640: LD_INT 2
77642: DIV
77643: ST_TO_ADDR
// if _x < 0 then
77644: LD_VAR 0 6
77648: PUSH
77649: LD_INT 0
77651: LESS
77652: IFFALSE 77669
// _x := _x * - 1 ;
77654: LD_ADDR_VAR 0 6
77658: PUSH
77659: LD_VAR 0 6
77663: PUSH
77664: LD_INT 1
77666: NEG
77667: MUL
77668: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77669: LD_ADDR_VAR 0 7
77673: PUSH
77674: LD_VAR 0 2
77678: PUSH
77679: LD_VAR 0 4
77683: PLUS
77684: PUSH
77685: LD_INT 2
77687: DIV
77688: ST_TO_ADDR
// if _y < 0 then
77689: LD_VAR 0 7
77693: PUSH
77694: LD_INT 0
77696: LESS
77697: IFFALSE 77714
// _y := _y * - 1 ;
77699: LD_ADDR_VAR 0 7
77703: PUSH
77704: LD_VAR 0 7
77708: PUSH
77709: LD_INT 1
77711: NEG
77712: MUL
77713: ST_TO_ADDR
// result := [ _x , _y ] ;
77714: LD_ADDR_VAR 0 5
77718: PUSH
77719: LD_VAR 0 6
77723: PUSH
77724: LD_VAR 0 7
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: ST_TO_ADDR
// end ;
77733: LD_VAR 0 5
77737: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77738: LD_INT 0
77740: PPUSH
77741: PPUSH
77742: PPUSH
77743: PPUSH
// task := GetTaskList ( unit ) ;
77744: LD_ADDR_VAR 0 7
77748: PUSH
77749: LD_VAR 0 1
77753: PPUSH
77754: CALL_OW 437
77758: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77759: LD_VAR 0 7
77763: NOT
77764: PUSH
77765: LD_VAR 0 1
77769: PPUSH
77770: LD_VAR 0 2
77774: PPUSH
77775: CALL_OW 308
77779: NOT
77780: AND
77781: IFFALSE 77785
// exit ;
77783: GO 77903
// if IsInArea ( unit , area ) then
77785: LD_VAR 0 1
77789: PPUSH
77790: LD_VAR 0 2
77794: PPUSH
77795: CALL_OW 308
77799: IFFALSE 77817
// begin ComMoveToArea ( unit , goAway ) ;
77801: LD_VAR 0 1
77805: PPUSH
77806: LD_VAR 0 3
77810: PPUSH
77811: CALL_OW 113
// exit ;
77815: GO 77903
// end ; if task [ 1 ] [ 1 ] <> M then
77817: LD_VAR 0 7
77821: PUSH
77822: LD_INT 1
77824: ARRAY
77825: PUSH
77826: LD_INT 1
77828: ARRAY
77829: PUSH
77830: LD_STRING M
77832: NONEQUAL
77833: IFFALSE 77837
// exit ;
77835: GO 77903
// x := task [ 1 ] [ 2 ] ;
77837: LD_ADDR_VAR 0 5
77841: PUSH
77842: LD_VAR 0 7
77846: PUSH
77847: LD_INT 1
77849: ARRAY
77850: PUSH
77851: LD_INT 2
77853: ARRAY
77854: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77855: LD_ADDR_VAR 0 6
77859: PUSH
77860: LD_VAR 0 7
77864: PUSH
77865: LD_INT 1
77867: ARRAY
77868: PUSH
77869: LD_INT 3
77871: ARRAY
77872: ST_TO_ADDR
// if InArea ( x , y , area ) then
77873: LD_VAR 0 5
77877: PPUSH
77878: LD_VAR 0 6
77882: PPUSH
77883: LD_VAR 0 2
77887: PPUSH
77888: CALL_OW 309
77892: IFFALSE 77903
// ComStop ( unit ) ;
77894: LD_VAR 0 1
77898: PPUSH
77899: CALL_OW 141
// end ;
77903: LD_VAR 0 4
77907: RET
// export function Abs ( value ) ; begin
77908: LD_INT 0
77910: PPUSH
// result := value ;
77911: LD_ADDR_VAR 0 2
77915: PUSH
77916: LD_VAR 0 1
77920: ST_TO_ADDR
// if value < 0 then
77921: LD_VAR 0 1
77925: PUSH
77926: LD_INT 0
77928: LESS
77929: IFFALSE 77946
// result := value * - 1 ;
77931: LD_ADDR_VAR 0 2
77935: PUSH
77936: LD_VAR 0 1
77940: PUSH
77941: LD_INT 1
77943: NEG
77944: MUL
77945: ST_TO_ADDR
// end ;
77946: LD_VAR 0 2
77950: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77951: LD_INT 0
77953: PPUSH
77954: PPUSH
77955: PPUSH
77956: PPUSH
77957: PPUSH
77958: PPUSH
77959: PPUSH
77960: PPUSH
// if not unit or not building then
77961: LD_VAR 0 1
77965: NOT
77966: PUSH
77967: LD_VAR 0 2
77971: NOT
77972: OR
77973: IFFALSE 77977
// exit ;
77975: GO 78203
// x := GetX ( building ) ;
77977: LD_ADDR_VAR 0 4
77981: PUSH
77982: LD_VAR 0 2
77986: PPUSH
77987: CALL_OW 250
77991: ST_TO_ADDR
// y := GetY ( building ) ;
77992: LD_ADDR_VAR 0 6
77996: PUSH
77997: LD_VAR 0 2
78001: PPUSH
78002: CALL_OW 251
78006: ST_TO_ADDR
// d := GetDir ( building ) ;
78007: LD_ADDR_VAR 0 8
78011: PUSH
78012: LD_VAR 0 2
78016: PPUSH
78017: CALL_OW 254
78021: ST_TO_ADDR
// r := 4 ;
78022: LD_ADDR_VAR 0 9
78026: PUSH
78027: LD_INT 4
78029: ST_TO_ADDR
// for i := 1 to 5 do
78030: LD_ADDR_VAR 0 10
78034: PUSH
78035: DOUBLE
78036: LD_INT 1
78038: DEC
78039: ST_TO_ADDR
78040: LD_INT 5
78042: PUSH
78043: FOR_TO
78044: IFFALSE 78201
// begin _x := ShiftX ( x , d , r + i ) ;
78046: LD_ADDR_VAR 0 5
78050: PUSH
78051: LD_VAR 0 4
78055: PPUSH
78056: LD_VAR 0 8
78060: PPUSH
78061: LD_VAR 0 9
78065: PUSH
78066: LD_VAR 0 10
78070: PLUS
78071: PPUSH
78072: CALL_OW 272
78076: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78077: LD_ADDR_VAR 0 7
78081: PUSH
78082: LD_VAR 0 6
78086: PPUSH
78087: LD_VAR 0 8
78091: PPUSH
78092: LD_VAR 0 9
78096: PUSH
78097: LD_VAR 0 10
78101: PLUS
78102: PPUSH
78103: CALL_OW 273
78107: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78108: LD_VAR 0 5
78112: PPUSH
78113: LD_VAR 0 7
78117: PPUSH
78118: CALL_OW 488
78122: PUSH
78123: LD_VAR 0 5
78127: PPUSH
78128: LD_VAR 0 7
78132: PPUSH
78133: CALL_OW 428
78137: PPUSH
78138: CALL_OW 247
78142: PUSH
78143: LD_INT 3
78145: PUSH
78146: LD_INT 2
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: IN
78153: NOT
78154: AND
78155: IFFALSE 78199
// begin ComMoveXY ( unit , _x , _y ) ;
78157: LD_VAR 0 1
78161: PPUSH
78162: LD_VAR 0 5
78166: PPUSH
78167: LD_VAR 0 7
78171: PPUSH
78172: CALL_OW 111
// result := [ _x , _y ] ;
78176: LD_ADDR_VAR 0 3
78180: PUSH
78181: LD_VAR 0 5
78185: PUSH
78186: LD_VAR 0 7
78190: PUSH
78191: EMPTY
78192: LIST
78193: LIST
78194: ST_TO_ADDR
// exit ;
78195: POP
78196: POP
78197: GO 78203
// end ; end ;
78199: GO 78043
78201: POP
78202: POP
// end ;
78203: LD_VAR 0 3
78207: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78208: LD_INT 0
78210: PPUSH
78211: PPUSH
78212: PPUSH
// result := 0 ;
78213: LD_ADDR_VAR 0 3
78217: PUSH
78218: LD_INT 0
78220: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78221: LD_VAR 0 1
78225: PUSH
78226: LD_INT 0
78228: LESS
78229: PUSH
78230: LD_VAR 0 1
78234: PUSH
78235: LD_INT 8
78237: GREATER
78238: OR
78239: PUSH
78240: LD_VAR 0 2
78244: PUSH
78245: LD_INT 0
78247: LESS
78248: OR
78249: PUSH
78250: LD_VAR 0 2
78254: PUSH
78255: LD_INT 8
78257: GREATER
78258: OR
78259: IFFALSE 78263
// exit ;
78261: GO 78338
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78263: LD_ADDR_VAR 0 4
78267: PUSH
78268: LD_INT 22
78270: PUSH
78271: LD_VAR 0 2
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: PPUSH
78280: CALL_OW 69
78284: PUSH
78285: FOR_IN
78286: IFFALSE 78336
// begin un := UnitShoot ( i ) ;
78288: LD_ADDR_VAR 0 5
78292: PUSH
78293: LD_VAR 0 4
78297: PPUSH
78298: CALL_OW 504
78302: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78303: LD_VAR 0 5
78307: PPUSH
78308: CALL_OW 255
78312: PUSH
78313: LD_VAR 0 1
78317: EQUAL
78318: IFFALSE 78334
// begin result := un ;
78320: LD_ADDR_VAR 0 3
78324: PUSH
78325: LD_VAR 0 5
78329: ST_TO_ADDR
// exit ;
78330: POP
78331: POP
78332: GO 78338
// end ; end ;
78334: GO 78285
78336: POP
78337: POP
// end ;
78338: LD_VAR 0 3
78342: RET
// export function GetCargoBay ( units ) ; begin
78343: LD_INT 0
78345: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78346: LD_ADDR_VAR 0 2
78350: PUSH
78351: LD_VAR 0 1
78355: PPUSH
78356: LD_INT 2
78358: PUSH
78359: LD_INT 34
78361: PUSH
78362: LD_INT 12
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PUSH
78369: LD_INT 34
78371: PUSH
78372: LD_INT 51
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: LD_INT 34
78381: PUSH
78382: LD_INT 32
78384: PUSH
78385: EMPTY
78386: LIST
78387: LIST
78388: PUSH
78389: LD_INT 34
78391: PUSH
78392: LD_INT 89
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: PPUSH
78406: CALL_OW 72
78410: ST_TO_ADDR
// end ;
78411: LD_VAR 0 2
78415: RET
// export function Negate ( value ) ; begin
78416: LD_INT 0
78418: PPUSH
// result := not value ;
78419: LD_ADDR_VAR 0 2
78423: PUSH
78424: LD_VAR 0 1
78428: NOT
78429: ST_TO_ADDR
// end ;
78430: LD_VAR 0 2
78434: RET
// export function Inc ( value ) ; begin
78435: LD_INT 0
78437: PPUSH
// result := value + 1 ;
78438: LD_ADDR_VAR 0 2
78442: PUSH
78443: LD_VAR 0 1
78447: PUSH
78448: LD_INT 1
78450: PLUS
78451: ST_TO_ADDR
// end ;
78452: LD_VAR 0 2
78456: RET
// export function Dec ( value ) ; begin
78457: LD_INT 0
78459: PPUSH
// result := value - 1 ;
78460: LD_ADDR_VAR 0 2
78464: PUSH
78465: LD_VAR 0 1
78469: PUSH
78470: LD_INT 1
78472: MINUS
78473: ST_TO_ADDR
// end ;
78474: LD_VAR 0 2
78478: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78479: LD_INT 0
78481: PPUSH
78482: PPUSH
78483: PPUSH
78484: PPUSH
78485: PPUSH
78486: PPUSH
78487: PPUSH
78488: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78489: LD_VAR 0 1
78493: PPUSH
78494: LD_VAR 0 2
78498: PPUSH
78499: CALL_OW 488
78503: NOT
78504: PUSH
78505: LD_VAR 0 3
78509: PPUSH
78510: LD_VAR 0 4
78514: PPUSH
78515: CALL_OW 488
78519: NOT
78520: OR
78521: IFFALSE 78534
// begin result := - 1 ;
78523: LD_ADDR_VAR 0 5
78527: PUSH
78528: LD_INT 1
78530: NEG
78531: ST_TO_ADDR
// exit ;
78532: GO 78769
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78534: LD_ADDR_VAR 0 12
78538: PUSH
78539: LD_VAR 0 1
78543: PPUSH
78544: LD_VAR 0 2
78548: PPUSH
78549: LD_VAR 0 3
78553: PPUSH
78554: LD_VAR 0 4
78558: PPUSH
78559: CALL 77619 0 4
78563: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78564: LD_ADDR_VAR 0 11
78568: PUSH
78569: LD_VAR 0 1
78573: PPUSH
78574: LD_VAR 0 2
78578: PPUSH
78579: LD_VAR 0 12
78583: PUSH
78584: LD_INT 1
78586: ARRAY
78587: PPUSH
78588: LD_VAR 0 12
78592: PUSH
78593: LD_INT 2
78595: ARRAY
78596: PPUSH
78597: CALL_OW 298
78601: ST_TO_ADDR
// distance := 9999 ;
78602: LD_ADDR_VAR 0 10
78606: PUSH
78607: LD_INT 9999
78609: ST_TO_ADDR
// for i := 0 to 5 do
78610: LD_ADDR_VAR 0 6
78614: PUSH
78615: DOUBLE
78616: LD_INT 0
78618: DEC
78619: ST_TO_ADDR
78620: LD_INT 5
78622: PUSH
78623: FOR_TO
78624: IFFALSE 78767
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78626: LD_ADDR_VAR 0 7
78630: PUSH
78631: LD_VAR 0 1
78635: PPUSH
78636: LD_VAR 0 6
78640: PPUSH
78641: LD_VAR 0 11
78645: PPUSH
78646: CALL_OW 272
78650: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78651: LD_ADDR_VAR 0 8
78655: PUSH
78656: LD_VAR 0 2
78660: PPUSH
78661: LD_VAR 0 6
78665: PPUSH
78666: LD_VAR 0 11
78670: PPUSH
78671: CALL_OW 273
78675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78676: LD_VAR 0 7
78680: PPUSH
78681: LD_VAR 0 8
78685: PPUSH
78686: CALL_OW 488
78690: NOT
78691: IFFALSE 78695
// continue ;
78693: GO 78623
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78695: LD_ADDR_VAR 0 9
78699: PUSH
78700: LD_VAR 0 12
78704: PUSH
78705: LD_INT 1
78707: ARRAY
78708: PPUSH
78709: LD_VAR 0 12
78713: PUSH
78714: LD_INT 2
78716: ARRAY
78717: PPUSH
78718: LD_VAR 0 7
78722: PPUSH
78723: LD_VAR 0 8
78727: PPUSH
78728: CALL_OW 298
78732: ST_TO_ADDR
// if tmp < distance then
78733: LD_VAR 0 9
78737: PUSH
78738: LD_VAR 0 10
78742: LESS
78743: IFFALSE 78765
// begin result := i ;
78745: LD_ADDR_VAR 0 5
78749: PUSH
78750: LD_VAR 0 6
78754: ST_TO_ADDR
// distance := tmp ;
78755: LD_ADDR_VAR 0 10
78759: PUSH
78760: LD_VAR 0 9
78764: ST_TO_ADDR
// end ; end ;
78765: GO 78623
78767: POP
78768: POP
// end ;
78769: LD_VAR 0 5
78773: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78774: LD_INT 0
78776: PPUSH
78777: PPUSH
// if not driver or not IsInUnit ( driver ) then
78778: LD_VAR 0 1
78782: NOT
78783: PUSH
78784: LD_VAR 0 1
78788: PPUSH
78789: CALL_OW 310
78793: NOT
78794: OR
78795: IFFALSE 78799
// exit ;
78797: GO 78889
// vehicle := IsInUnit ( driver ) ;
78799: LD_ADDR_VAR 0 3
78803: PUSH
78804: LD_VAR 0 1
78808: PPUSH
78809: CALL_OW 310
78813: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78814: LD_VAR 0 1
78818: PPUSH
78819: LD_STRING \
78821: PUSH
78822: LD_INT 0
78824: PUSH
78825: LD_INT 0
78827: PUSH
78828: LD_INT 0
78830: PUSH
78831: LD_INT 0
78833: PUSH
78834: LD_INT 0
78836: PUSH
78837: LD_INT 0
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: PUSH
78849: LD_STRING E
78851: PUSH
78852: LD_INT 0
78854: PUSH
78855: LD_INT 0
78857: PUSH
78858: LD_VAR 0 3
78862: PUSH
78863: LD_INT 0
78865: PUSH
78866: LD_INT 0
78868: PUSH
78869: LD_INT 0
78871: PUSH
78872: EMPTY
78873: LIST
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: PUSH
78881: EMPTY
78882: LIST
78883: LIST
78884: PPUSH
78885: CALL_OW 446
// end ;
78889: LD_VAR 0 2
78893: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78894: LD_INT 0
78896: PPUSH
78897: PPUSH
// if not driver or not IsInUnit ( driver ) then
78898: LD_VAR 0 1
78902: NOT
78903: PUSH
78904: LD_VAR 0 1
78908: PPUSH
78909: CALL_OW 310
78913: NOT
78914: OR
78915: IFFALSE 78919
// exit ;
78917: GO 79009
// vehicle := IsInUnit ( driver ) ;
78919: LD_ADDR_VAR 0 3
78923: PUSH
78924: LD_VAR 0 1
78928: PPUSH
78929: CALL_OW 310
78933: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78934: LD_VAR 0 1
78938: PPUSH
78939: LD_STRING \
78941: PUSH
78942: LD_INT 0
78944: PUSH
78945: LD_INT 0
78947: PUSH
78948: LD_INT 0
78950: PUSH
78951: LD_INT 0
78953: PUSH
78954: LD_INT 0
78956: PUSH
78957: LD_INT 0
78959: PUSH
78960: EMPTY
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: PUSH
78969: LD_STRING E
78971: PUSH
78972: LD_INT 0
78974: PUSH
78975: LD_INT 0
78977: PUSH
78978: LD_VAR 0 3
78982: PUSH
78983: LD_INT 0
78985: PUSH
78986: LD_INT 0
78988: PUSH
78989: LD_INT 0
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: LIST
78998: LIST
78999: LIST
79000: PUSH
79001: EMPTY
79002: LIST
79003: LIST
79004: PPUSH
79005: CALL_OW 447
// end ;
79009: LD_VAR 0 2
79013: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79014: LD_INT 0
79016: PPUSH
79017: PPUSH
79018: PPUSH
// tmp := [ ] ;
79019: LD_ADDR_VAR 0 5
79023: PUSH
79024: EMPTY
79025: ST_TO_ADDR
// for i in units do
79026: LD_ADDR_VAR 0 4
79030: PUSH
79031: LD_VAR 0 1
79035: PUSH
79036: FOR_IN
79037: IFFALSE 79075
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79039: LD_ADDR_VAR 0 5
79043: PUSH
79044: LD_VAR 0 5
79048: PPUSH
79049: LD_VAR 0 5
79053: PUSH
79054: LD_INT 1
79056: PLUS
79057: PPUSH
79058: LD_VAR 0 4
79062: PPUSH
79063: CALL_OW 256
79067: PPUSH
79068: CALL_OW 2
79072: ST_TO_ADDR
79073: GO 79036
79075: POP
79076: POP
// if not tmp then
79077: LD_VAR 0 5
79081: NOT
79082: IFFALSE 79086
// exit ;
79084: GO 79134
// if asc then
79086: LD_VAR 0 2
79090: IFFALSE 79114
// result := SortListByListAsc ( units , tmp ) else
79092: LD_ADDR_VAR 0 3
79096: PUSH
79097: LD_VAR 0 1
79101: PPUSH
79102: LD_VAR 0 5
79106: PPUSH
79107: CALL_OW 76
79111: ST_TO_ADDR
79112: GO 79134
// result := SortListByListDesc ( units , tmp ) ;
79114: LD_ADDR_VAR 0 3
79118: PUSH
79119: LD_VAR 0 1
79123: PPUSH
79124: LD_VAR 0 5
79128: PPUSH
79129: CALL_OW 77
79133: ST_TO_ADDR
// end ;
79134: LD_VAR 0 3
79138: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79139: LD_INT 0
79141: PPUSH
79142: PPUSH
// task := GetTaskList ( mech ) ;
79143: LD_ADDR_VAR 0 4
79147: PUSH
79148: LD_VAR 0 1
79152: PPUSH
79153: CALL_OW 437
79157: ST_TO_ADDR
// if not task then
79158: LD_VAR 0 4
79162: NOT
79163: IFFALSE 79167
// exit ;
79165: GO 79209
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79167: LD_ADDR_VAR 0 3
79171: PUSH
79172: LD_VAR 0 4
79176: PUSH
79177: LD_INT 1
79179: ARRAY
79180: PUSH
79181: LD_INT 1
79183: ARRAY
79184: PUSH
79185: LD_STRING r
79187: EQUAL
79188: PUSH
79189: LD_VAR 0 4
79193: PUSH
79194: LD_INT 1
79196: ARRAY
79197: PUSH
79198: LD_INT 4
79200: ARRAY
79201: PUSH
79202: LD_VAR 0 2
79206: EQUAL
79207: AND
79208: ST_TO_ADDR
// end ;
79209: LD_VAR 0 3
79213: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79214: LD_INT 0
79216: PPUSH
// SetDir ( unit , d ) ;
79217: LD_VAR 0 1
79221: PPUSH
79222: LD_VAR 0 4
79226: PPUSH
79227: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79231: LD_VAR 0 1
79235: PPUSH
79236: LD_VAR 0 2
79240: PPUSH
79241: LD_VAR 0 3
79245: PPUSH
79246: LD_VAR 0 5
79250: PPUSH
79251: CALL_OW 48
// end ;
79255: LD_VAR 0 6
79259: RET
// export function ToNaturalNumber ( number ) ; begin
79260: LD_INT 0
79262: PPUSH
// result := number div 1 ;
79263: LD_ADDR_VAR 0 2
79267: PUSH
79268: LD_VAR 0 1
79272: PUSH
79273: LD_INT 1
79275: DIV
79276: ST_TO_ADDR
// if number < 0 then
79277: LD_VAR 0 1
79281: PUSH
79282: LD_INT 0
79284: LESS
79285: IFFALSE 79295
// result := 0 ;
79287: LD_ADDR_VAR 0 2
79291: PUSH
79292: LD_INT 0
79294: ST_TO_ADDR
// end ;
79295: LD_VAR 0 2
79299: RET
// export function SortByClass ( units , class ) ; var un ; begin
79300: LD_INT 0
79302: PPUSH
79303: PPUSH
// if not units or not class then
79304: LD_VAR 0 1
79308: NOT
79309: PUSH
79310: LD_VAR 0 2
79314: NOT
79315: OR
79316: IFFALSE 79320
// exit ;
79318: GO 79415
// result := [ ] ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: EMPTY
79326: ST_TO_ADDR
// for un in units do
79327: LD_ADDR_VAR 0 4
79331: PUSH
79332: LD_VAR 0 1
79336: PUSH
79337: FOR_IN
79338: IFFALSE 79413
// if GetClass ( un ) = class then
79340: LD_VAR 0 4
79344: PPUSH
79345: CALL_OW 257
79349: PUSH
79350: LD_VAR 0 2
79354: EQUAL
79355: IFFALSE 79382
// result := Insert ( result , 1 , un ) else
79357: LD_ADDR_VAR 0 3
79361: PUSH
79362: LD_VAR 0 3
79366: PPUSH
79367: LD_INT 1
79369: PPUSH
79370: LD_VAR 0 4
79374: PPUSH
79375: CALL_OW 2
79379: ST_TO_ADDR
79380: GO 79411
// result := Replace ( result , result + 1 , un ) ;
79382: LD_ADDR_VAR 0 3
79386: PUSH
79387: LD_VAR 0 3
79391: PPUSH
79392: LD_VAR 0 3
79396: PUSH
79397: LD_INT 1
79399: PLUS
79400: PPUSH
79401: LD_VAR 0 4
79405: PPUSH
79406: CALL_OW 1
79410: ST_TO_ADDR
79411: GO 79337
79413: POP
79414: POP
// end ;
79415: LD_VAR 0 3
79419: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79420: LD_INT 0
79422: PPUSH
79423: PPUSH
79424: PPUSH
79425: PPUSH
79426: PPUSH
79427: PPUSH
79428: PPUSH
// result := [ ] ;
79429: LD_ADDR_VAR 0 4
79433: PUSH
79434: EMPTY
79435: ST_TO_ADDR
// if x - r < 0 then
79436: LD_VAR 0 1
79440: PUSH
79441: LD_VAR 0 3
79445: MINUS
79446: PUSH
79447: LD_INT 0
79449: LESS
79450: IFFALSE 79462
// min_x := 0 else
79452: LD_ADDR_VAR 0 8
79456: PUSH
79457: LD_INT 0
79459: ST_TO_ADDR
79460: GO 79478
// min_x := x - r ;
79462: LD_ADDR_VAR 0 8
79466: PUSH
79467: LD_VAR 0 1
79471: PUSH
79472: LD_VAR 0 3
79476: MINUS
79477: ST_TO_ADDR
// if y - r < 0 then
79478: LD_VAR 0 2
79482: PUSH
79483: LD_VAR 0 3
79487: MINUS
79488: PUSH
79489: LD_INT 0
79491: LESS
79492: IFFALSE 79504
// min_y := 0 else
79494: LD_ADDR_VAR 0 7
79498: PUSH
79499: LD_INT 0
79501: ST_TO_ADDR
79502: GO 79520
// min_y := y - r ;
79504: LD_ADDR_VAR 0 7
79508: PUSH
79509: LD_VAR 0 2
79513: PUSH
79514: LD_VAR 0 3
79518: MINUS
79519: ST_TO_ADDR
// max_x := x + r ;
79520: LD_ADDR_VAR 0 9
79524: PUSH
79525: LD_VAR 0 1
79529: PUSH
79530: LD_VAR 0 3
79534: PLUS
79535: ST_TO_ADDR
// max_y := y + r ;
79536: LD_ADDR_VAR 0 10
79540: PUSH
79541: LD_VAR 0 2
79545: PUSH
79546: LD_VAR 0 3
79550: PLUS
79551: ST_TO_ADDR
// for _x = min_x to max_x do
79552: LD_ADDR_VAR 0 5
79556: PUSH
79557: DOUBLE
79558: LD_VAR 0 8
79562: DEC
79563: ST_TO_ADDR
79564: LD_VAR 0 9
79568: PUSH
79569: FOR_TO
79570: IFFALSE 79671
// for _y = min_y to max_y do
79572: LD_ADDR_VAR 0 6
79576: PUSH
79577: DOUBLE
79578: LD_VAR 0 7
79582: DEC
79583: ST_TO_ADDR
79584: LD_VAR 0 10
79588: PUSH
79589: FOR_TO
79590: IFFALSE 79667
// begin if not ValidHex ( _x , _y ) then
79592: LD_VAR 0 5
79596: PPUSH
79597: LD_VAR 0 6
79601: PPUSH
79602: CALL_OW 488
79606: NOT
79607: IFFALSE 79611
// continue ;
79609: GO 79589
// if GetResourceTypeXY ( _x , _y ) then
79611: LD_VAR 0 5
79615: PPUSH
79616: LD_VAR 0 6
79620: PPUSH
79621: CALL_OW 283
79625: IFFALSE 79665
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79627: LD_ADDR_VAR 0 4
79631: PUSH
79632: LD_VAR 0 4
79636: PPUSH
79637: LD_VAR 0 4
79641: PUSH
79642: LD_INT 1
79644: PLUS
79645: PPUSH
79646: LD_VAR 0 5
79650: PUSH
79651: LD_VAR 0 6
79655: PUSH
79656: EMPTY
79657: LIST
79658: LIST
79659: PPUSH
79660: CALL_OW 1
79664: ST_TO_ADDR
// end ;
79665: GO 79589
79667: POP
79668: POP
79669: GO 79569
79671: POP
79672: POP
// end ;
79673: LD_VAR 0 4
79677: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79678: LD_INT 0
79680: PPUSH
79681: PPUSH
79682: PPUSH
79683: PPUSH
79684: PPUSH
79685: PPUSH
79686: PPUSH
79687: PPUSH
// if not units then
79688: LD_VAR 0 1
79692: NOT
79693: IFFALSE 79697
// exit ;
79695: GO 80221
// result := UnitFilter ( units , [ f_ok ] ) ;
79697: LD_ADDR_VAR 0 3
79701: PUSH
79702: LD_VAR 0 1
79706: PPUSH
79707: LD_INT 50
79709: PUSH
79710: EMPTY
79711: LIST
79712: PPUSH
79713: CALL_OW 72
79717: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79718: LD_ADDR_VAR 0 8
79722: PUSH
79723: LD_VAR 0 1
79727: PUSH
79728: LD_INT 1
79730: ARRAY
79731: PPUSH
79732: CALL_OW 255
79736: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79737: LD_ADDR_VAR 0 10
79741: PUSH
79742: LD_INT 29
79744: PUSH
79745: LD_INT 91
79747: PUSH
79748: LD_INT 49
79750: PUSH
79751: EMPTY
79752: LIST
79753: LIST
79754: LIST
79755: ST_TO_ADDR
// if not result then
79756: LD_VAR 0 3
79760: NOT
79761: IFFALSE 79765
// exit ;
79763: GO 80221
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79765: LD_ADDR_VAR 0 5
79769: PUSH
79770: LD_INT 81
79772: PUSH
79773: LD_VAR 0 8
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PPUSH
79782: CALL_OW 69
79786: ST_TO_ADDR
// for i in result do
79787: LD_ADDR_VAR 0 4
79791: PUSH
79792: LD_VAR 0 3
79796: PUSH
79797: FOR_IN
79798: IFFALSE 80219
// begin tag := GetTag ( i ) + 1 ;
79800: LD_ADDR_VAR 0 9
79804: PUSH
79805: LD_VAR 0 4
79809: PPUSH
79810: CALL_OW 110
79814: PUSH
79815: LD_INT 1
79817: PLUS
79818: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79819: LD_ADDR_VAR 0 7
79823: PUSH
79824: LD_VAR 0 4
79828: PPUSH
79829: CALL_OW 250
79833: PPUSH
79834: LD_VAR 0 4
79838: PPUSH
79839: CALL_OW 251
79843: PPUSH
79844: LD_INT 6
79846: PPUSH
79847: CALL 79420 0 3
79851: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79852: LD_VAR 0 4
79856: PPUSH
79857: CALL_OW 247
79861: PUSH
79862: LD_INT 2
79864: EQUAL
79865: PUSH
79866: LD_VAR 0 7
79870: AND
79871: PUSH
79872: LD_VAR 0 4
79876: PPUSH
79877: CALL_OW 264
79881: PUSH
79882: LD_VAR 0 10
79886: IN
79887: NOT
79888: AND
79889: IFFALSE 79928
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79891: LD_VAR 0 4
79895: PPUSH
79896: LD_VAR 0 7
79900: PUSH
79901: LD_INT 1
79903: ARRAY
79904: PUSH
79905: LD_INT 1
79907: ARRAY
79908: PPUSH
79909: LD_VAR 0 7
79913: PUSH
79914: LD_INT 1
79916: ARRAY
79917: PUSH
79918: LD_INT 2
79920: ARRAY
79921: PPUSH
79922: CALL_OW 116
79926: GO 80217
// if path > tag then
79928: LD_VAR 0 2
79932: PUSH
79933: LD_VAR 0 9
79937: GREATER
79938: IFFALSE 80146
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79940: LD_ADDR_VAR 0 6
79944: PUSH
79945: LD_VAR 0 5
79949: PPUSH
79950: LD_INT 91
79952: PUSH
79953: LD_VAR 0 4
79957: PUSH
79958: LD_INT 8
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: LIST
79965: PPUSH
79966: CALL_OW 72
79970: ST_TO_ADDR
// if nearEnemy then
79971: LD_VAR 0 6
79975: IFFALSE 80044
// begin if GetWeapon ( i ) = ru_time_lapser then
79977: LD_VAR 0 4
79981: PPUSH
79982: CALL_OW 264
79986: PUSH
79987: LD_INT 49
79989: EQUAL
79990: IFFALSE 80018
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79992: LD_VAR 0 4
79996: PPUSH
79997: LD_VAR 0 6
80001: PPUSH
80002: LD_VAR 0 4
80006: PPUSH
80007: CALL_OW 74
80011: PPUSH
80012: CALL_OW 112
80016: GO 80042
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80018: LD_VAR 0 4
80022: PPUSH
80023: LD_VAR 0 6
80027: PPUSH
80028: LD_VAR 0 4
80032: PPUSH
80033: CALL_OW 74
80037: PPUSH
80038: CALL_OW 115
// end else
80042: GO 80144
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80044: LD_VAR 0 4
80048: PPUSH
80049: LD_VAR 0 2
80053: PUSH
80054: LD_VAR 0 9
80058: ARRAY
80059: PUSH
80060: LD_INT 1
80062: ARRAY
80063: PPUSH
80064: LD_VAR 0 2
80068: PUSH
80069: LD_VAR 0 9
80073: ARRAY
80074: PUSH
80075: LD_INT 2
80077: ARRAY
80078: PPUSH
80079: CALL_OW 297
80083: PUSH
80084: LD_INT 6
80086: GREATER
80087: IFFALSE 80130
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80089: LD_VAR 0 4
80093: PPUSH
80094: LD_VAR 0 2
80098: PUSH
80099: LD_VAR 0 9
80103: ARRAY
80104: PUSH
80105: LD_INT 1
80107: ARRAY
80108: PPUSH
80109: LD_VAR 0 2
80113: PUSH
80114: LD_VAR 0 9
80118: ARRAY
80119: PUSH
80120: LD_INT 2
80122: ARRAY
80123: PPUSH
80124: CALL_OW 114
80128: GO 80144
// SetTag ( i , tag ) ;
80130: LD_VAR 0 4
80134: PPUSH
80135: LD_VAR 0 9
80139: PPUSH
80140: CALL_OW 109
// end else
80144: GO 80217
// if enemy then
80146: LD_VAR 0 5
80150: IFFALSE 80217
// begin if GetWeapon ( i ) = ru_time_lapser then
80152: LD_VAR 0 4
80156: PPUSH
80157: CALL_OW 264
80161: PUSH
80162: LD_INT 49
80164: EQUAL
80165: IFFALSE 80193
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80167: LD_VAR 0 4
80171: PPUSH
80172: LD_VAR 0 5
80176: PPUSH
80177: LD_VAR 0 4
80181: PPUSH
80182: CALL_OW 74
80186: PPUSH
80187: CALL_OW 112
80191: GO 80217
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80193: LD_VAR 0 4
80197: PPUSH
80198: LD_VAR 0 5
80202: PPUSH
80203: LD_VAR 0 4
80207: PPUSH
80208: CALL_OW 74
80212: PPUSH
80213: CALL_OW 115
// end ; end ;
80217: GO 79797
80219: POP
80220: POP
// end ;
80221: LD_VAR 0 3
80225: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80226: LD_INT 0
80228: PPUSH
80229: PPUSH
80230: PPUSH
// if not unit or IsInUnit ( unit ) then
80231: LD_VAR 0 1
80235: NOT
80236: PUSH
80237: LD_VAR 0 1
80241: PPUSH
80242: CALL_OW 310
80246: OR
80247: IFFALSE 80251
// exit ;
80249: GO 80342
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80251: LD_ADDR_VAR 0 4
80255: PUSH
80256: LD_VAR 0 1
80260: PPUSH
80261: CALL_OW 250
80265: PPUSH
80266: LD_VAR 0 2
80270: PPUSH
80271: LD_INT 1
80273: PPUSH
80274: CALL_OW 272
80278: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80279: LD_ADDR_VAR 0 5
80283: PUSH
80284: LD_VAR 0 1
80288: PPUSH
80289: CALL_OW 251
80293: PPUSH
80294: LD_VAR 0 2
80298: PPUSH
80299: LD_INT 1
80301: PPUSH
80302: CALL_OW 273
80306: ST_TO_ADDR
// if ValidHex ( x , y ) then
80307: LD_VAR 0 4
80311: PPUSH
80312: LD_VAR 0 5
80316: PPUSH
80317: CALL_OW 488
80321: IFFALSE 80342
// ComTurnXY ( unit , x , y ) ;
80323: LD_VAR 0 1
80327: PPUSH
80328: LD_VAR 0 4
80332: PPUSH
80333: LD_VAR 0 5
80337: PPUSH
80338: CALL_OW 118
// end ;
80342: LD_VAR 0 3
80346: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80347: LD_INT 0
80349: PPUSH
80350: PPUSH
// result := false ;
80351: LD_ADDR_VAR 0 3
80355: PUSH
80356: LD_INT 0
80358: ST_TO_ADDR
// if not units then
80359: LD_VAR 0 2
80363: NOT
80364: IFFALSE 80368
// exit ;
80366: GO 80413
// for i in units do
80368: LD_ADDR_VAR 0 4
80372: PUSH
80373: LD_VAR 0 2
80377: PUSH
80378: FOR_IN
80379: IFFALSE 80411
// if See ( side , i ) then
80381: LD_VAR 0 1
80385: PPUSH
80386: LD_VAR 0 4
80390: PPUSH
80391: CALL_OW 292
80395: IFFALSE 80409
// begin result := true ;
80397: LD_ADDR_VAR 0 3
80401: PUSH
80402: LD_INT 1
80404: ST_TO_ADDR
// exit ;
80405: POP
80406: POP
80407: GO 80413
// end ;
80409: GO 80378
80411: POP
80412: POP
// end ;
80413: LD_VAR 0 3
80417: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80418: LD_INT 0
80420: PPUSH
80421: PPUSH
80422: PPUSH
80423: PPUSH
// if not unit or not points then
80424: LD_VAR 0 1
80428: NOT
80429: PUSH
80430: LD_VAR 0 2
80434: NOT
80435: OR
80436: IFFALSE 80440
// exit ;
80438: GO 80530
// dist := 99999 ;
80440: LD_ADDR_VAR 0 5
80444: PUSH
80445: LD_INT 99999
80447: ST_TO_ADDR
// for i in points do
80448: LD_ADDR_VAR 0 4
80452: PUSH
80453: LD_VAR 0 2
80457: PUSH
80458: FOR_IN
80459: IFFALSE 80528
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80461: LD_ADDR_VAR 0 6
80465: PUSH
80466: LD_VAR 0 1
80470: PPUSH
80471: LD_VAR 0 4
80475: PUSH
80476: LD_INT 1
80478: ARRAY
80479: PPUSH
80480: LD_VAR 0 4
80484: PUSH
80485: LD_INT 2
80487: ARRAY
80488: PPUSH
80489: CALL_OW 297
80493: ST_TO_ADDR
// if tmpDist < dist then
80494: LD_VAR 0 6
80498: PUSH
80499: LD_VAR 0 5
80503: LESS
80504: IFFALSE 80526
// begin result := i ;
80506: LD_ADDR_VAR 0 3
80510: PUSH
80511: LD_VAR 0 4
80515: ST_TO_ADDR
// dist := tmpDist ;
80516: LD_ADDR_VAR 0 5
80520: PUSH
80521: LD_VAR 0 6
80525: ST_TO_ADDR
// end ; end ;
80526: GO 80458
80528: POP
80529: POP
// end ;
80530: LD_VAR 0 3
80534: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80535: LD_INT 0
80537: PPUSH
// uc_side := side ;
80538: LD_ADDR_OWVAR 20
80542: PUSH
80543: LD_VAR 0 1
80547: ST_TO_ADDR
// uc_nation := 3 ;
80548: LD_ADDR_OWVAR 21
80552: PUSH
80553: LD_INT 3
80555: ST_TO_ADDR
// vc_chassis := 25 ;
80556: LD_ADDR_OWVAR 37
80560: PUSH
80561: LD_INT 25
80563: ST_TO_ADDR
// vc_engine := engine_siberite ;
80564: LD_ADDR_OWVAR 39
80568: PUSH
80569: LD_INT 3
80571: ST_TO_ADDR
// vc_control := control_computer ;
80572: LD_ADDR_OWVAR 38
80576: PUSH
80577: LD_INT 3
80579: ST_TO_ADDR
// vc_weapon := 59 ;
80580: LD_ADDR_OWVAR 40
80584: PUSH
80585: LD_INT 59
80587: ST_TO_ADDR
// result := CreateVehicle ;
80588: LD_ADDR_VAR 0 5
80592: PUSH
80593: CALL_OW 45
80597: ST_TO_ADDR
// SetDir ( result , d ) ;
80598: LD_VAR 0 5
80602: PPUSH
80603: LD_VAR 0 4
80607: PPUSH
80608: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80612: LD_VAR 0 5
80616: PPUSH
80617: LD_VAR 0 2
80621: PPUSH
80622: LD_VAR 0 3
80626: PPUSH
80627: LD_INT 0
80629: PPUSH
80630: CALL_OW 48
// end ;
80634: LD_VAR 0 5
80638: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80639: LD_INT 0
80641: PPUSH
80642: PPUSH
80643: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80644: LD_ADDR_VAR 0 2
80648: PUSH
80649: LD_INT 0
80651: PUSH
80652: LD_INT 0
80654: PUSH
80655: LD_INT 0
80657: PUSH
80658: LD_INT 0
80660: PUSH
80661: EMPTY
80662: LIST
80663: LIST
80664: LIST
80665: LIST
80666: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80667: LD_VAR 0 1
80671: NOT
80672: PUSH
80673: LD_VAR 0 1
80677: PPUSH
80678: CALL_OW 264
80682: PUSH
80683: LD_INT 12
80685: PUSH
80686: LD_INT 51
80688: PUSH
80689: LD_INT 32
80691: PUSH
80692: LD_INT 89
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: LIST
80699: LIST
80700: IN
80701: NOT
80702: OR
80703: IFFALSE 80707
// exit ;
80705: GO 80805
// for i := 1 to 3 do
80707: LD_ADDR_VAR 0 3
80711: PUSH
80712: DOUBLE
80713: LD_INT 1
80715: DEC
80716: ST_TO_ADDR
80717: LD_INT 3
80719: PUSH
80720: FOR_TO
80721: IFFALSE 80803
// begin tmp := GetCargo ( cargo , i ) ;
80723: LD_ADDR_VAR 0 4
80727: PUSH
80728: LD_VAR 0 1
80732: PPUSH
80733: LD_VAR 0 3
80737: PPUSH
80738: CALL_OW 289
80742: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80743: LD_ADDR_VAR 0 2
80747: PUSH
80748: LD_VAR 0 2
80752: PPUSH
80753: LD_VAR 0 3
80757: PPUSH
80758: LD_VAR 0 4
80762: PPUSH
80763: CALL_OW 1
80767: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80768: LD_ADDR_VAR 0 2
80772: PUSH
80773: LD_VAR 0 2
80777: PPUSH
80778: LD_INT 4
80780: PPUSH
80781: LD_VAR 0 2
80785: PUSH
80786: LD_INT 4
80788: ARRAY
80789: PUSH
80790: LD_VAR 0 4
80794: PLUS
80795: PPUSH
80796: CALL_OW 1
80800: ST_TO_ADDR
// end ;
80801: GO 80720
80803: POP
80804: POP
// end ;
80805: LD_VAR 0 2
80809: RET
// export function Length ( array ) ; begin
80810: LD_INT 0
80812: PPUSH
// result := array + 0 ;
80813: LD_ADDR_VAR 0 2
80817: PUSH
80818: LD_VAR 0 1
80822: PUSH
80823: LD_INT 0
80825: PLUS
80826: ST_TO_ADDR
// end ;
80827: LD_VAR 0 2
80831: RET
// export function PrepareArray ( array ) ; begin
80832: LD_INT 0
80834: PPUSH
// result := array diff 0 ;
80835: LD_ADDR_VAR 0 2
80839: PUSH
80840: LD_VAR 0 1
80844: PUSH
80845: LD_INT 0
80847: DIFF
80848: ST_TO_ADDR
// if not result [ 1 ] then
80849: LD_VAR 0 2
80853: PUSH
80854: LD_INT 1
80856: ARRAY
80857: NOT
80858: IFFALSE 80878
// result := Delete ( result , 1 ) ;
80860: LD_ADDR_VAR 0 2
80864: PUSH
80865: LD_VAR 0 2
80869: PPUSH
80870: LD_INT 1
80872: PPUSH
80873: CALL_OW 3
80877: ST_TO_ADDR
// end ;
80878: LD_VAR 0 2
80882: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80883: LD_INT 0
80885: PPUSH
80886: PPUSH
80887: PPUSH
80888: PPUSH
// sibRocketRange := 25 ;
80889: LD_ADDR_VAR 0 6
80893: PUSH
80894: LD_INT 25
80896: ST_TO_ADDR
// result := false ;
80897: LD_ADDR_VAR 0 4
80901: PUSH
80902: LD_INT 0
80904: ST_TO_ADDR
// for i := 0 to 5 do
80905: LD_ADDR_VAR 0 5
80909: PUSH
80910: DOUBLE
80911: LD_INT 0
80913: DEC
80914: ST_TO_ADDR
80915: LD_INT 5
80917: PUSH
80918: FOR_TO
80919: IFFALSE 80986
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80921: LD_VAR 0 1
80925: PPUSH
80926: LD_VAR 0 5
80930: PPUSH
80931: LD_VAR 0 6
80935: PPUSH
80936: CALL_OW 272
80940: PPUSH
80941: LD_VAR 0 2
80945: PPUSH
80946: LD_VAR 0 5
80950: PPUSH
80951: LD_VAR 0 6
80955: PPUSH
80956: CALL_OW 273
80960: PPUSH
80961: LD_VAR 0 3
80965: PPUSH
80966: CALL_OW 309
80970: IFFALSE 80984
// begin result := true ;
80972: LD_ADDR_VAR 0 4
80976: PUSH
80977: LD_INT 1
80979: ST_TO_ADDR
// exit ;
80980: POP
80981: POP
80982: GO 80988
// end ;
80984: GO 80918
80986: POP
80987: POP
// end ;
80988: LD_VAR 0 4
80992: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80993: LD_INT 0
80995: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80996: LD_VAR 0 1
81000: PPUSH
81001: LD_VAR 0 2
81005: PPUSH
81006: LD_INT 0
81008: PPUSH
81009: LD_INT 0
81011: PPUSH
81012: LD_INT 1
81014: PPUSH
81015: LD_INT 0
81017: PPUSH
81018: CALL_OW 587
// end ;
81022: LD_VAR 0 3
81026: RET
// export function CenterOnNow ( unit ) ; begin
81027: LD_INT 0
81029: PPUSH
// result := IsInUnit ( unit ) ;
81030: LD_ADDR_VAR 0 2
81034: PUSH
81035: LD_VAR 0 1
81039: PPUSH
81040: CALL_OW 310
81044: ST_TO_ADDR
// if not result then
81045: LD_VAR 0 2
81049: NOT
81050: IFFALSE 81062
// result := unit ;
81052: LD_ADDR_VAR 0 2
81056: PUSH
81057: LD_VAR 0 1
81061: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81062: LD_VAR 0 1
81066: PPUSH
81067: CALL_OW 87
// end ; end_of_file
81071: LD_VAR 0 2
81075: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81076: LD_VAR 0 1
81080: PUSH
81081: LD_INT 200
81083: DOUBLE
81084: GREATEREQUAL
81085: IFFALSE 81093
81087: LD_INT 299
81089: DOUBLE
81090: LESSEQUAL
81091: IFTRUE 81095
81093: GO 81127
81095: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81096: LD_VAR 0 1
81100: PPUSH
81101: LD_VAR 0 2
81105: PPUSH
81106: LD_VAR 0 3
81110: PPUSH
81111: LD_VAR 0 4
81115: PPUSH
81116: LD_VAR 0 5
81120: PPUSH
81121: CALL 35869 0 5
81125: GO 81204
81127: LD_INT 300
81129: DOUBLE
81130: GREATEREQUAL
81131: IFFALSE 81139
81133: LD_INT 399
81135: DOUBLE
81136: LESSEQUAL
81137: IFTRUE 81141
81139: GO 81203
81141: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81142: LD_VAR 0 1
81146: PPUSH
81147: LD_VAR 0 2
81151: PPUSH
81152: LD_VAR 0 3
81156: PPUSH
81157: LD_VAR 0 4
81161: PPUSH
81162: LD_VAR 0 5
81166: PPUSH
81167: LD_VAR 0 6
81171: PPUSH
81172: LD_VAR 0 7
81176: PPUSH
81177: LD_VAR 0 8
81181: PPUSH
81182: LD_VAR 0 9
81186: PPUSH
81187: LD_VAR 0 10
81191: PPUSH
81192: LD_VAR 0 11
81196: PPUSH
81197: CALL 32202 0 11
81201: GO 81204
81203: POP
// end ;
81204: PPOPN 11
81206: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81207: LD_VAR 0 1
81211: PPUSH
81212: LD_VAR 0 2
81216: PPUSH
81217: LD_VAR 0 3
81221: PPUSH
81222: LD_VAR 0 4
81226: PPUSH
81227: LD_VAR 0 5
81231: PPUSH
81232: CALL 35605 0 5
// end ; end_of_file
81236: PPOPN 5
81238: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81239: LD_VAR 0 1
81243: PPUSH
81244: LD_VAR 0 2
81248: PPUSH
81249: LD_VAR 0 3
81253: PPUSH
81254: LD_VAR 0 4
81258: PPUSH
81259: LD_VAR 0 5
81263: PPUSH
81264: LD_VAR 0 6
81268: PPUSH
81269: CALL 19854 0 6
// end ;
81273: PPOPN 6
81275: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81276: LD_INT 0
81278: PPUSH
// begin if not units then
81279: LD_VAR 0 1
81283: NOT
81284: IFFALSE 81288
// exit ;
81286: GO 81288
// end ;
81288: PPOPN 7
81290: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81291: CALL 19758 0 0
// end ;
81295: PPOPN 1
81297: END
