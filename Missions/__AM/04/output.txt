// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4695 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8338 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 37677 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 37677 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 37677 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 37677 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 37677 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 37677 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 37677 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 37677 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 37677 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 37677 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 37677 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 37677 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 37677 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc ;
3008: CALL_OW 19
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4361 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4361 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4470 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 1
3438: PUSH
3439: LD_INT 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 3
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: LD_OWVAR 67
3458: ARRAY
3459: PUSH
3460: FOR_TO
3461: IFFALSE 3629
// begin vc_engine = 1 ;
3463: LD_ADDR_OWVAR 39
3467: PUSH
3468: LD_INT 1
3470: ST_TO_ADDR
// vc_control = 1 ;
3471: LD_ADDR_OWVAR 38
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3479: LD_ADDR_OWVAR 40
3483: PUSH
3484: LD_INT 42
3486: PUSH
3487: LD_INT 42
3489: PUSH
3490: LD_INT 43
3492: PUSH
3493: LD_INT 43
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: LD_OWVAR 67
3506: ARRAY
3507: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3508: LD_ADDR_OWVAR 37
3512: PUSH
3513: LD_INT 21
3515: PUSH
3516: LD_INT 22
3518: PUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 22
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_OWVAR 67
3535: ARRAY
3536: ST_TO_ADDR
// veh = CreateVehicle ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 45
3546: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 3
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL_OW 49
// hc_gallery =  ;
3562: LD_ADDR_OWVAR 33
3566: PUSH
3567: LD_STRING 
3569: ST_TO_ADDR
// hc_name =  ;
3570: LD_ADDR_OWVAR 26
3574: PUSH
3575: LD_STRING 
3577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3578: LD_INT 0
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: LD_EXP 16
3588: PPUSH
3589: LD_EXP 17
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: CALL_OW 380
// un = CreateHuman ;
3603: LD_ADDR_VAR 0 4
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3613: LD_VAR 0 4
3617: PPUSH
3618: LD_VAR 0 3
3622: PPUSH
3623: CALL_OW 52
// end ;
3627: GO 3460
3629: POP
3630: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: LD_EXP 17
3646: PPUSH
3647: CALL_OW 12
3651: PUSH
3652: LD_INT 2
3654: PLUS
3655: PPUSH
3656: CALL_OW 380
// un = CreateHuman ;
3660: LD_ADDR_VAR 0 4
3664: PUSH
3665: CALL_OW 44
3669: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3670: LD_VAR 0 4
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3685: LD_INT 0
3687: PPUSH
3688: LD_INT 4
3690: PPUSH
3691: LD_EXP 16
3695: PPUSH
3696: LD_EXP 17
3700: PPUSH
3701: CALL_OW 12
3705: PUSH
3706: LD_INT 2
3708: PLUS
3709: PPUSH
3710: CALL_OW 380
// un = CreateHuman ;
3714: LD_ADDR_VAR 0 4
3718: PUSH
3719: CALL_OW 44
3723: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3724: LD_VAR 0 4
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 0
3734: PPUSH
3735: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 2
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_OWVAR 67
3771: ARRAY
3772: PUSH
3773: LD_INT 1
3775: PPUSH
3776: LD_INT 3
3778: PPUSH
3779: CALL_OW 12
3783: PLUS
3784: PUSH
3785: FOR_TO
3786: IFFALSE 3856
// begin hc_gallery =  ;
3788: LD_ADDR_OWVAR 33
3792: PUSH
3793: LD_STRING 
3795: ST_TO_ADDR
// hc_name =  ;
3796: LD_ADDR_OWVAR 26
3800: PUSH
3801: LD_STRING 
3803: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_EXP 16
3814: PPUSH
3815: LD_EXP 17
3819: PPUSH
3820: CALL_OW 12
3824: PPUSH
3825: CALL_OW 380
// un = CreateHuman ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3839: LD_VAR 0 4
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 0
3849: PPUSH
3850: CALL_OW 49
// end ;
3854: GO 3785
3856: POP
3857: POP
// vc_engine = 1 ;
3858: LD_ADDR_OWVAR 39
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// vc_control = 1 ;
3866: LD_ADDR_OWVAR 38
3870: PUSH
3871: LD_INT 1
3873: ST_TO_ADDR
// vc_weapon = 51 ;
3874: LD_ADDR_OWVAR 40
3878: PUSH
3879: LD_INT 51
3881: ST_TO_ADDR
// vc_chassis = 22 ;
3882: LD_ADDR_OWVAR 37
3886: PUSH
3887: LD_INT 22
3889: ST_TO_ADDR
// veh = CreateVehicle ;
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: CALL_OW 45
3899: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 100
3925: PPUSH
3926: CALL_OW 290
// hc_gallery =  ;
3930: LD_ADDR_OWVAR 33
3934: PUSH
3935: LD_STRING 
3937: ST_TO_ADDR
// hc_name =  ;
3938: LD_ADDR_OWVAR 26
3942: PUSH
3943: LD_STRING 
3945: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3946: LD_INT 0
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_EXP 16
3956: PPUSH
3957: LD_EXP 17
3961: PPUSH
3962: CALL_OW 12
3966: PPUSH
3967: CALL_OW 380
// un = CreateHuman ;
3971: LD_ADDR_VAR 0 4
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3981: LD_VAR 0 4
3985: PPUSH
3986: LD_VAR 0 3
3990: PPUSH
3991: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 6
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 25
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 3
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 4
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PPUSH
4056: CALL_OW 69
4060: PUSH
4061: FOR_IN
4062: IFFALSE 4081
// ComAgressiveMove ( i , 45 , 46 ) ;
4064: LD_VAR 0 2
4068: PPUSH
4069: LD_INT 45
4071: PPUSH
4072: LD_INT 46
4074: PPUSH
4075: CALL_OW 114
4079: GO 4061
4081: POP
4082: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: LD_INT 22
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 25
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PPUSH
4112: CALL_OW 69
4116: PUSH
4117: FOR_IN
4118: IFFALSE 4149
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4120: LD_ADDR_EXP 21
4124: PUSH
4125: LD_VAR 0 2
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: LD_INT 48
4135: PPUSH
4136: LD_INT 55
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: CALL_OW 145
4146: ST_TO_ADDR
4147: GO 4117
4149: POP
4150: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4151: LD_ADDR_VAR 0 2
4155: PUSH
4156: LD_INT 22
4158: PUSH
4159: LD_INT 6
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 25
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 69
4184: PUSH
4185: FOR_IN
4186: IFFALSE 4205
// ComMoveXY ( i , 39 , 55 ) ;
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_INT 39
4195: PPUSH
4196: LD_INT 55
4198: PPUSH
4199: CALL_OW 111
4203: GO 4185
4205: POP
4206: POP
// end ;
4207: LD_VAR 0 1
4211: RET
// export function PrepareFirstAttack ; var i , un ; begin
4212: LD_INT 0
4214: PPUSH
4215: PPUSH
4216: PPUSH
// uc_side = 5 ;
4217: LD_ADDR_OWVAR 20
4221: PUSH
4222: LD_INT 5
4224: ST_TO_ADDR
// uc_nation = 3 ;
4225: LD_ADDR_OWVAR 21
4229: PUSH
4230: LD_INT 3
4232: ST_TO_ADDR
// for i := 1 to 4 do
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: DOUBLE
4239: LD_INT 1
4241: DEC
4242: ST_TO_ADDR
4243: LD_INT 4
4245: PUSH
4246: FOR_TO
4247: IFFALSE 4346
// begin hc_gallery =  ;
4249: LD_ADDR_OWVAR 33
4253: PUSH
4254: LD_STRING 
4256: ST_TO_ADDR
// hc_name =  ;
4257: LD_ADDR_OWVAR 26
4261: PUSH
4262: LD_STRING 
4264: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4265: LD_INT 0
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_EXP 16
4275: PPUSH
4276: LD_EXP 17
4280: PPUSH
4281: CALL_OW 12
4285: PPUSH
4286: CALL_OW 380
// un = CreateHuman ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: CALL_OW 44
4299: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4300: LD_VAR 0 3
4304: PPUSH
4305: LD_INT 4
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_EXP 1
4324: PPUSH
4325: CALL_OW 250
4329: PPUSH
4330: LD_EXP 1
4334: PPUSH
4335: CALL_OW 251
4339: PPUSH
4340: CALL_OW 114
// end ;
4344: GO 4246
4346: POP
4347: POP
// firstRussianAttack = 1 ;
4348: LD_ADDR_EXP 23
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// end ; end_of_file
4356: LD_VAR 0 1
4360: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
// for i = 1 to count do
4366: LD_ADDR_VAR 0 8
4370: PUSH
4371: DOUBLE
4372: LD_INT 1
4374: DEC
4375: ST_TO_ADDR
4376: LD_VAR 0 6
4380: PUSH
4381: FOR_TO
4382: IFFALSE 4463
// begin uc_side = side ;
4384: LD_ADDR_OWVAR 20
4388: PUSH
4389: LD_VAR 0 1
4393: ST_TO_ADDR
// uc_nation = nation ;
4394: LD_ADDR_OWVAR 21
4398: PUSH
4399: LD_VAR 0 2
4403: ST_TO_ADDR
// hc_gallery =  ;
4404: LD_ADDR_OWVAR 33
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// hc_name =  ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING 
4419: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4420: LD_INT 0
4422: PPUSH
4423: LD_VAR 0 5
4427: PPUSH
4428: LD_VAR 0 4
4432: PPUSH
4433: CALL_OW 380
// un = CreateHuman ;
4437: LD_ADDR_VAR 0 9
4441: PUSH
4442: CALL_OW 44
4446: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4447: LD_VAR 0 9
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 52
// end ;
4461: GO 4381
4463: POP
4464: POP
// end ;
4465: LD_VAR 0 7
4469: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
4474: PPUSH
// uc_side := GetSide ( b ) ;
4475: LD_ADDR_OWVAR 20
4479: PUSH
4480: LD_VAR 0 2
4484: PPUSH
4485: CALL_OW 255
4489: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4490: LD_ADDR_OWVAR 21
4494: PUSH
4495: LD_VAR 0 2
4499: PPUSH
4500: CALL_OW 248
4504: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 380
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 4
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4530: LD_ADDR_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL_OW 254
4544: PUSH
4545: LD_INT 3
4547: MINUS
4548: ST_TO_ADDR
// if dir < 0 then
4549: LD_VAR 0 5
4553: PUSH
4554: LD_INT 0
4556: LESS
4557: IFFALSE 4573
// dir := 6 + dir ;
4559: LD_ADDR_VAR 0 5
4563: PUSH
4564: LD_INT 6
4566: PUSH
4567: LD_VAR 0 5
4571: PLUS
4572: ST_TO_ADDR
// SetDir ( un , dir ) ;
4573: LD_VAR 0 4
4577: PPUSH
4578: LD_VAR 0 5
4582: PPUSH
4583: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4587: LD_VAR 0 4
4591: PPUSH
4592: LD_VAR 0 2
4596: PPUSH
4597: CALL_OW 52
// end ;
4601: LD_VAR 0 3
4605: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
4610: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4611: LD_ADDR_VAR 0 6
4615: PUSH
4616: LD_VAR 0 1
4620: PUSH
4621: LD_INT 1
4623: PPUSH
4624: LD_VAR 0 1
4628: PPUSH
4629: CALL_OW 12
4633: ARRAY
4634: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4635: LD_VAR 0 6
4639: PPUSH
4640: CALL_OW 258
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: IFFALSE 4666
// Say ( speaker , dialogMID ) else
4650: LD_VAR 0 6
4654: PPUSH
4655: LD_VAR 0 2
4659: PPUSH
4660: CALL_OW 88
4664: GO 4680
// Say ( speaker , dialogFID ) ;
4666: LD_VAR 0 6
4670: PPUSH
4671: LD_VAR 0 3
4675: PPUSH
4676: CALL_OW 88
// result := speaker ;
4680: LD_ADDR_VAR 0 4
4684: PUSH
4685: LD_VAR 0 6
4689: ST_TO_ADDR
// end ;
4690: LD_VAR 0 4
4694: RET
// export function PrepareDifficulty ; var tmp ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if Difficulty = 1 then
4699: LD_OWVAR 67
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: IFFALSE 4725
// begin RuSoldMinLevel = 1 ;
4709: LD_ADDR_EXP 16
4713: PUSH
4714: LD_INT 1
4716: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4717: LD_ADDR_EXP 17
4721: PUSH
4722: LD_INT 2
4724: ST_TO_ADDR
// end ; if Difficulty = 2 then
4725: LD_OWVAR 67
4729: PUSH
4730: LD_INT 2
4732: EQUAL
4733: IFFALSE 4834
// begin RuSoldMinLevel = 2 ;
4735: LD_ADDR_EXP 16
4739: PUSH
4740: LD_INT 2
4742: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4743: LD_ADDR_EXP 17
4747: PUSH
4748: LD_INT 3
4750: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4751: LD_INT 23
4753: PPUSH
4754: CALL_OW 64
// uc_nation = 3 ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// uc_side = 3 ;
4766: LD_ADDR_OWVAR 20
4770: PUSH
4771: LD_INT 3
4773: ST_TO_ADDR
// bc_level = 5 ;
4774: LD_ADDR_OWVAR 43
4778: PUSH
4779: LD_INT 5
4781: ST_TO_ADDR
// bc_type = 32 ;
4782: LD_ADDR_OWVAR 42
4786: PUSH
4787: LD_INT 32
4789: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 76
4797: PPUSH
4798: LD_INT 91
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: CALL_OW 47
4808: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4809: LD_VAR 0 2
4813: PPUSH
4814: LD_INT 43
4816: PPUSH
4817: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4821: LD_INT 51
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: CALL_OW 322
// end ; if Difficulty >= 3 then
4834: LD_OWVAR 67
4838: PUSH
4839: LD_INT 3
4841: GREATEREQUAL
4842: IFFALSE 5006
// begin RuSoldMinLevel = Difficulty ;
4844: LD_ADDR_EXP 16
4848: PUSH
4849: LD_OWVAR 67
4853: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4854: LD_ADDR_EXP 17
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4862: LD_INT 26
4864: PPUSH
4865: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4869: LD_INT 23
4871: PPUSH
4872: CALL_OW 64
// uc_nation = 3 ;
4876: LD_ADDR_OWVAR 21
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// uc_side = 3 ;
4884: LD_ADDR_OWVAR 20
4888: PUSH
4889: LD_INT 3
4891: ST_TO_ADDR
// bc_level = 5 ;
4892: LD_ADDR_OWVAR 43
4896: PUSH
4897: LD_INT 5
4899: ST_TO_ADDR
// bc_type = 32 ;
4900: LD_ADDR_OWVAR 42
4904: PUSH
4905: LD_INT 32
4907: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_INT 76
4915: PPUSH
4916: LD_INT 91
4918: PPUSH
4919: LD_INT 2
4921: PPUSH
4922: CALL_OW 47
4926: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4927: LD_VAR 0 2
4931: PPUSH
4932: LD_INT 44
4934: PPUSH
4935: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: LD_INT 83
4946: PPUSH
4947: LD_INT 84
4949: PPUSH
4950: LD_INT 2
4952: PPUSH
4953: CALL_OW 47
4957: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4958: LD_VAR 0 2
4962: PPUSH
4963: LD_INT 43
4965: PPUSH
4966: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4970: LD_INT 51
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4983: LD_INT 52
4985: PPUSH
4986: LD_INT 3
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4996: LD_INT 25
4998: PPUSH
4999: LD_INT 44
5001: PPUSH
5002: CALL_OW 431
// end ; end ;
5006: LD_VAR 0 1
5010: RET
// export function EnergyDialog ; begin
5011: LD_INT 0
5013: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5014: LD_INT 46
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 321
5024: PUSH
5025: LD_INT 1
5027: EQUAL
5028: PUSH
5029: LD_INT 35
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: CALL_OW 321
5039: PUSH
5040: LD_INT 1
5042: EQUAL
5043: AND
5044: IFFALSE 5068
// begin Say ( JMM , D9c-JMM-1 ) ;
5046: LD_EXP 1
5050: PPUSH
5051: LD_STRING D9c-JMM-1
5053: PPUSH
5054: CALL_OW 88
// energyVDialog = 1 ;
5058: LD_ADDR_EXP 33
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// end else
5066: GO 5222
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5068: LD_INT 35
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: CALL_OW 321
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: PUSH
5083: LD_EXP 33
5087: PUSH
5088: LD_INT 0
5090: EQUAL
5091: AND
5092: IFFALSE 5114
// begin Say ( JMM , D9c-JMM-1a ) ;
5094: LD_EXP 1
5098: PPUSH
5099: LD_STRING D9c-JMM-1a
5101: PPUSH
5102: CALL_OW 88
// energyVDialog = 1 ;
5106: LD_ADDR_EXP 33
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5114: LD_INT 46
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 321
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: PUSH
5129: LD_EXP 33
5133: PUSH
5134: LD_INT 0
5136: EQUAL
5137: AND
5138: IFFALSE 5160
// begin Say ( JMM , D9c-JMM-1b ) ;
5140: LD_EXP 1
5144: PPUSH
5145: LD_STRING D9c-JMM-1b
5147: PPUSH
5148: CALL_OW 88
// energyVDialog = 1 ;
5152: LD_ADDR_EXP 33
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5160: LD_INT 46
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 321
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: PUSH
5175: LD_INT 21
5177: PPUSH
5178: LD_INT 1
5180: PPUSH
5181: CALL_OW 321
5185: PUSH
5186: LD_INT 2
5188: EQUAL
5189: AND
5190: PUSH
5191: LD_EXP 33
5195: PUSH
5196: LD_INT 0
5198: EQUAL
5199: AND
5200: IFFALSE 5222
// begin Say ( JMM , D9c-JMM-1c ) ;
5202: LD_EXP 1
5206: PPUSH
5207: LD_STRING D9c-JMM-1c
5209: PPUSH
5210: CALL_OW 88
// energyVDialog = 1 ;
5214: LD_ADDR_EXP 33
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// end ; end ; end ;
5222: LD_VAR 0 1
5226: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5227: LD_INT 0
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
5233: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5234: LD_VAR 0 1
5238: NOT
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 256
5249: PUSH
5250: LD_INT 250
5252: LESS
5253: OR
5254: PUSH
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 314
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 261
5274: PUSH
5275: LD_INT 20
5277: GREATER
5278: AND
5279: OR
5280: IFFALSE 5284
// exit ;
5282: GO 5649
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5284: LD_VAR 0 1
5288: PPUSH
5289: CALL_OW 261
5293: PUSH
5294: LD_INT 20
5296: LESS
5297: PUSH
5298: LD_VAR 0 1
5302: PPUSH
5303: CALL_OW 110
5307: PUSH
5308: LD_INT 21
5310: EQUAL
5311: NOT
5312: AND
5313: IFFALSE 5340
// begin ComStop ( bulldozer ) ;
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5324: LD_VAR 0 1
5328: PPUSH
5329: LD_INT 21
5331: PPUSH
5332: CALL_OW 109
// exit ;
5336: GO 5649
// end else
5338: GO 5367
// if GetFuel ( bulldozer ) > 20 then
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL_OW 261
5349: PUSH
5350: LD_INT 20
5352: GREATER
5353: IFFALSE 5367
// SetTag ( bulldozer , 0 ) ;
5355: LD_VAR 0 1
5359: PPUSH
5360: LD_INT 0
5362: PPUSH
5363: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: LD_VAR 0 2
5376: PPUSH
5377: CALL_OW 353
5381: ST_TO_ADDR
// tmp := [ ] ;
5382: LD_ADDR_VAR 0 6
5386: PUSH
5387: EMPTY
5388: ST_TO_ADDR
// for i = 1 to list do
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: DOUBLE
5395: LD_INT 1
5397: DEC
5398: ST_TO_ADDR
5399: LD_VAR 0 5
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5503
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5407: LD_VAR 0 5
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PPUSH
5422: LD_VAR 0 5
5426: PUSH
5427: LD_VAR 0 4
5431: ARRAY
5432: PUSH
5433: LD_INT 2
5435: ARRAY
5436: PPUSH
5437: CALL_OW 554
5441: IFFALSE 5501
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_VAR 0 6
5452: PPUSH
5453: LD_VAR 0 6
5457: PUSH
5458: LD_INT 1
5460: PLUS
5461: PPUSH
5462: LD_VAR 0 5
5466: PUSH
5467: LD_VAR 0 4
5471: ARRAY
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: LD_VAR 0 4
5486: ARRAY
5487: PUSH
5488: LD_INT 2
5490: ARRAY
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PPUSH
5496: CALL_OW 1
5500: ST_TO_ADDR
// end ;
5501: GO 5404
5503: POP
5504: POP
// ComStop ( bulldozer ) ;
5505: LD_VAR 0 1
5509: PPUSH
5510: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5514: LD_ADDR_VAR 0 7
5518: PUSH
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 250
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 251
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: ST_TO_ADDR
// for i = tmp downto 1 do
5543: LD_ADDR_VAR 0 4
5547: PUSH
5548: DOUBLE
5549: LD_VAR 0 6
5553: INC
5554: ST_TO_ADDR
5555: LD_INT 1
5557: PUSH
5558: FOR_DOWNTO
5559: IFFALSE 5647
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5561: LD_ADDR_VAR 0 7
5565: PUSH
5566: LD_VAR 0 7
5570: PUSH
5571: LD_INT 1
5573: ARRAY
5574: PPUSH
5575: LD_VAR 0 7
5579: PUSH
5580: LD_INT 2
5582: ARRAY
5583: PPUSH
5584: LD_VAR 0 6
5588: PPUSH
5589: CALL 5750 0 3
5593: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_VAR 0 7
5612: PUSH
5613: LD_INT 2
5615: ARRAY
5616: PPUSH
5617: CALL 5654 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5621: LD_ADDR_VAR 0 6
5625: PUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: LD_VAR 0 7
5635: PUSH
5636: LD_INT 3
5638: ARRAY
5639: PPUSH
5640: CALL_OW 3
5644: ST_TO_ADDR
// end ;
5645: GO 5558
5647: POP
5648: POP
// end ;
5649: LD_VAR 0 3
5653: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5654: LD_INT 0
5656: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_VAR 0 3
5666: PPUSH
5667: CALL_OW 351
5671: PUSH
5672: LD_VAR 0 2
5676: PPUSH
5677: LD_VAR 0 3
5681: PPUSH
5682: CALL_OW 554
5686: AND
5687: PUSH
5688: LD_VAR 0 2
5692: PPUSH
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 488
5702: AND
5703: PUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 428
5718: PUSH
5719: LD_INT 1
5721: NEG
5722: EQUAL
5723: AND
5724: IFFALSE 5745
// AddComMoveXY ( bulldozer , x , y ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: CALL_OW 171
// end ;
5745: LD_VAR 0 4
5749: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5750: LD_INT 0
5752: PPUSH
5753: PPUSH
5754: PPUSH
5755: PPUSH
5756: PPUSH
5757: PPUSH
5758: PPUSH
// dist := 99999 ;
5759: LD_ADDR_VAR 0 6
5763: PUSH
5764: LD_INT 99999
5766: ST_TO_ADDR
// for i = 1 to list do
5767: LD_ADDR_VAR 0 5
5771: PUSH
5772: DOUBLE
5773: LD_INT 1
5775: DEC
5776: ST_TO_ADDR
5777: LD_VAR 0 3
5781: PUSH
5782: FOR_TO
5783: IFFALSE 5921
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5785: LD_ADDR_VAR 0 7
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 2
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 5
5809: ARRAY
5810: PUSH
5811: LD_INT 1
5813: ARRAY
5814: PPUSH
5815: LD_VAR 0 3
5819: PUSH
5820: LD_VAR 0 5
5824: ARRAY
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 298
5834: ST_TO_ADDR
// if d = 0 then
5835: LD_VAR 0 7
5839: PUSH
5840: LD_INT 0
5842: EQUAL
5843: IFFALSE 5847
// continue ;
5845: GO 5782
// if d < dist then
5847: LD_VAR 0 7
5851: PUSH
5852: LD_VAR 0 6
5856: LESS
5857: IFFALSE 5919
// begin _x := list [ i ] [ 1 ] ;
5859: LD_ADDR_VAR 0 8
5863: PUSH
5864: LD_VAR 0 3
5868: PUSH
5869: LD_VAR 0 5
5873: ARRAY
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5879: LD_ADDR_VAR 0 9
5883: PUSH
5884: LD_VAR 0 3
5888: PUSH
5889: LD_VAR 0 5
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: ST_TO_ADDR
// _i := i ;
5899: LD_ADDR_VAR 0 10
5903: PUSH
5904: LD_VAR 0 5
5908: ST_TO_ADDR
// dist := d ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: LD_VAR 0 7
5918: ST_TO_ADDR
// end ; end ;
5919: GO 5782
5921: POP
5922: POP
// result := [ _x , _y , _i , dist ] ;
5923: LD_ADDR_VAR 0 4
5927: PUSH
5928: LD_VAR 0 8
5932: PUSH
5933: LD_VAR 0 9
5937: PUSH
5938: LD_VAR 0 10
5942: PUSH
5943: LD_VAR 0 6
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: ST_TO_ADDR
// end ;
5954: LD_VAR 0 4
5958: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5959: LD_INT 0
5961: PPUSH
5962: PPUSH
// for i = 1 to 72 do
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_INT 72
5975: PUSH
5976: FOR_TO
5977: IFFALSE 6031
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5979: LD_VAR 0 5
5983: PPUSH
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 321
5993: PUSH
5994: LD_INT 1
5996: EQUAL
5997: PUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_VAR 0 3
6007: PPUSH
6008: CALL_OW 482
6012: AND
6013: IFFALSE 6029
// AddComResearch ( lab , i ) ;
6015: LD_VAR 0 2
6019: PPUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: CALL_OW 184
6029: GO 5976
6031: POP
6032: POP
// end ;
6033: LD_VAR 0 4
6037: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6038: LD_INT 0
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: LD_VAR 0 2
6054: PPUSH
6055: CALL_OW 313
6059: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6060: LD_ADDR_VAR 0 8
6064: PUSH
6065: LD_VAR 0 3
6069: PPUSH
6070: LD_INT 22
6072: PUSH
6073: LD_VAR 0 1
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 25
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: LD_INT 750
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: LD_INT 54
6107: PUSH
6108: EMPTY
6109: LIST
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 70
6125: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6126: LD_ADDR_VAR 0 5
6130: PUSH
6131: LD_VAR 0 3
6135: PPUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 3
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 24
6163: PUSH
6164: LD_INT 1000
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: EMPTY
6181: LIST
6182: PPUSH
6183: CALL_OW 70
6187: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6188: LD_VAR 0 5
6192: NOT
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_VAR 0 1
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 24
6218: PUSH
6219: LD_INT 250
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 69
6235: NOT
6236: AND
6237: IFFALSE 6241
// exit ;
6239: GO 6337
// if buildingsList and engineerOkInside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 7
6250: AND
6251: IFFALSE 6277
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6253: LD_VAR 0 7
6257: PPUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 72
6272: PPUSH
6273: CALL_OW 122
// if buildingsList and engineerOkOutside then
6277: LD_VAR 0 5
6281: PUSH
6282: LD_VAR 0 8
6286: AND
6287: IFFALSE 6307
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6289: LD_VAR 0 8
6293: PPUSH
6294: LD_VAR 0 5
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6307: LD_VAR 0 5
6311: PUSH
6312: LD_INT 0
6314: EQUAL
6315: PUSH
6316: LD_VAR 0 8
6320: AND
6321: IFFALSE 6337
// ComEnterUnit ( engineerOkOutside , building ) ;
6323: LD_VAR 0 8
6327: PPUSH
6328: LD_VAR 0 2
6332: PPUSH
6333: CALL_OW 120
// end ;
6337: LD_VAR 0 4
6341: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6342: LD_INT 0
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
6349: PPUSH
6350: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6351: LD_ADDR_VAR 0 6
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_VAR 0 1
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 25
6370: PUSH
6371: LD_INT 4
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 23
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 24
6390: PUSH
6391: LD_INT 251
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 69
6408: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 3
6418: PPUSH
6419: LD_INT 22
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 23
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 50
6453: PUSH
6454: EMPTY
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 70
6467: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6468: LD_ADDR_VAR 0 8
6472: PUSH
6473: LD_VAR 0 3
6477: PPUSH
6478: LD_INT 22
6480: PUSH
6481: LD_VAR 0 1
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 21
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: LD_INT 25
6505: PUSH
6506: LD_INT 3
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 3
6519: PUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 750
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 70
6544: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6545: LD_ADDR_VAR 0 9
6549: PUSH
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_INT 22
6557: PUSH
6558: LD_VAR 0 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 25
6582: PUSH
6583: LD_INT 3
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 3
6596: PUSH
6597: LD_INT 24
6599: PUSH
6600: LD_INT 1000
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 70
6621: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6622: LD_VAR 0 8
6626: NOT
6627: PUSH
6628: LD_VAR 0 9
6632: NOT
6633: AND
6634: PUSH
6635: LD_VAR 0 6
6639: NOT
6640: AND
6641: IFFALSE 6645
// exit ;
6643: GO 6851
// if damageUnits and sciList then
6645: LD_VAR 0 8
6649: PUSH
6650: LD_VAR 0 6
6654: AND
6655: IFFALSE 6671
// ComMoveToArea ( damageUnits , healArea ) ;
6657: LD_VAR 0 8
6661: PPUSH
6662: LD_VAR 0 2
6666: PPUSH
6667: CALL_OW 113
// if unitsToHeal and sciList then
6671: LD_VAR 0 9
6675: PUSH
6676: LD_VAR 0 6
6680: AND
6681: IFFALSE 6692
// ComExitBuilding ( sciList ) ;
6683: LD_VAR 0 6
6687: PPUSH
6688: CALL_OW 122
// if unitsToHeal and sciListOutside then
6692: LD_VAR 0 9
6696: PUSH
6697: LD_VAR 0 7
6701: AND
6702: IFFALSE 6722
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6704: LD_VAR 0 7
6708: PPUSH
6709: LD_VAR 0 9
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6722: LD_VAR 0 8
6726: PUSH
6727: LD_INT 0
6729: EQUAL
6730: PUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 0
6738: EQUAL
6739: AND
6740: PUSH
6741: LD_VAR 0 7
6745: AND
6746: IFFALSE 6851
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6748: LD_ADDR_VAR 0 10
6752: PUSH
6753: LD_INT 22
6755: PUSH
6756: LD_VAR 0 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 21
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 30
6777: PUSH
6778: LD_INT 8
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: PPUSH
6790: CALL_OW 69
6794: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6795: LD_ADDR_VAR 0 11
6799: PUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 10
6807: PPUSH
6808: CALL_OW 12
6812: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6813: LD_VAR 0 7
6817: PPUSH
6818: LD_INT 3
6820: PUSH
6821: LD_INT 60
6823: PUSH
6824: EMPTY
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 72
6835: PPUSH
6836: LD_VAR 0 10
6840: PUSH
6841: LD_VAR 0 11
6845: ARRAY
6846: PPUSH
6847: CALL_OW 120
// end ; end ;
6851: LD_VAR 0 5
6855: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6856: LD_INT 0
6858: PPUSH
6859: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6860: LD_INT 22
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: LD_VAR 0 3
6895: LESSEQUAL
6896: IFFALSE 6963
// for i = 1 to vehCount do
6898: LD_ADDR_VAR 0 9
6902: PUSH
6903: DOUBLE
6904: LD_INT 1
6906: DEC
6907: ST_TO_ADDR
6908: LD_VAR 0 3
6912: PUSH
6913: FOR_TO
6914: IFFALSE 6961
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6916: LD_VAR 0 2
6920: PPUSH
6921: LD_VAR 0 7
6925: PPUSH
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_VAR 0 6
6935: PPUSH
6936: LD_VAR 0 4
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: LD_VAR 0 4
6948: PPUSH
6949: CALL_OW 12
6953: ARRAY
6954: PPUSH
6955: CALL_OW 185
6959: GO 6913
6961: POP
6962: POP
// end ;
6963: LD_VAR 0 8
6967: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6968: LD_INT 0
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
// for i = 1 to medicCount do
6981: LD_ADDR_VAR 0 11
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_VAR 0 4
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7079
// begin uc_side = side ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_VAR 0 1
7008: ST_TO_ADDR
// uc_nation = nation ;
7009: LD_ADDR_OWVAR 21
7013: PUSH
7014: LD_VAR 0 2
7018: ST_TO_ADDR
// hc_name =  ;
7019: LD_ADDR_OWVAR 26
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_gallery =  ;
7027: LD_ADDR_OWVAR 33
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7035: LD_INT 0
7037: PPUSH
7038: LD_INT 4
7040: PPUSH
7041: LD_VAR 0 5
7045: PPUSH
7046: CALL_OW 380
// un = CreateHuman ;
7050: LD_ADDR_VAR 0 13
7054: PUSH
7055: CALL_OW 44
7059: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7060: LD_VAR 0 13
7064: PPUSH
7065: LD_VAR 0 6
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 49
// end ;
7077: GO 6996
7079: POP
7080: POP
// for i = 1 to soldierCount do
7081: LD_ADDR_VAR 0 11
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_VAR 0 3
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7179
// begin uc_side = side ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_VAR 0 1
7108: ST_TO_ADDR
// uc_nation = nation ;
7109: LD_ADDR_OWVAR 21
7113: PUSH
7114: LD_VAR 0 2
7118: ST_TO_ADDR
// hc_name =  ;
7119: LD_ADDR_OWVAR 26
7123: PUSH
7124: LD_STRING 
7126: ST_TO_ADDR
// hc_gallery =  ;
7127: LD_ADDR_OWVAR 33
7131: PUSH
7132: LD_STRING 
7134: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7135: LD_INT 0
7137: PPUSH
7138: LD_INT 1
7140: PPUSH
7141: LD_VAR 0 5
7145: PPUSH
7146: CALL_OW 380
// un = CreateHuman ;
7150: LD_ADDR_VAR 0 13
7154: PUSH
7155: CALL_OW 44
7159: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7160: LD_VAR 0 13
7164: PPUSH
7165: LD_VAR 0 6
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 49
// end ;
7177: GO 7096
7179: POP
7180: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7181: LD_ADDR_VAR 0 16
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 25
7203: PUSH
7204: LD_INT 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 25
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 25
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 25
7233: PUSH
7234: LD_INT 9
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7257: LD_ADDR_VAR 0 15
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_VAR 0 1
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 25
7276: PUSH
7277: LD_INT 4
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 69
7292: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 7
7302: PPUSH
7303: CALL_OW 113
// if strategy = 1 then
7307: LD_VAR 0 9
7311: PUSH
7312: LD_INT 1
7314: EQUAL
7315: IFFALSE 7763
// begin for i in soldiersOK_list do
7317: LD_ADDR_VAR 0 11
7321: PUSH
7322: LD_VAR 0 16
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7392
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7330: LD_VAR 0 11
7334: PPUSH
7335: LD_INT 91
7337: PPUSH
7338: LD_INT 63
7340: PPUSH
7341: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7345: LD_VAR 0 11
7349: PPUSH
7350: LD_INT 101
7352: PPUSH
7353: LD_INT 53
7355: PPUSH
7356: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7360: LD_VAR 0 11
7364: PPUSH
7365: LD_INT 75
7367: PPUSH
7368: LD_INT 23
7370: PPUSH
7371: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7375: LD_VAR 0 11
7379: PPUSH
7380: LD_INT 78
7382: PPUSH
7383: LD_INT 8
7385: PPUSH
7386: CALL_OW 174
// end ;
7390: GO 7327
7392: POP
7393: POP
// wait ( 0 0$30 ) ;
7394: LD_INT 1050
7396: PPUSH
7397: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7408: LD_ADDR_VAR 0 14
7412: PUSH
7413: LD_INT 22
7415: PUSH
7416: LD_VAR 0 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 24
7433: PUSH
7434: LD_INT 550
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 24
7447: PUSH
7448: LD_INT 250
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7469: LD_ADDR_VAR 0 16
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_VAR 0 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 1000
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 69
7515: ST_TO_ADDR
// if medicCount then
7516: LD_VAR 0 4
7520: IFFALSE 7560
// begin if damageUnit_list then
7522: LD_VAR 0 14
7526: IFFALSE 7560
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7528: LD_VAR 0 14
7532: PPUSH
7533: LD_VAR 0 7
7537: PPUSH
7538: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7542: LD_VAR 0 4
7546: PPUSH
7547: LD_VAR 0 14
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: PPUSH
7556: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7560: LD_ADDR_VAR 0 11
7564: PUSH
7565: LD_VAR 0 16
7569: PUSH
7570: FOR_IN
7571: IFFALSE 7747
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7573: LD_ADDR_VAR 0 19
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 69
7594: PPUSH
7595: LD_VAR 0 11
7599: PPUSH
7600: CALL_OW 74
7604: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7605: LD_ADDR_VAR 0 20
7609: PUSH
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 8
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 59
7627: PUSH
7628: EMPTY
7629: LIST
7630: PUSH
7631: LD_INT 21
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 21
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: PPUSH
7664: CALL_OW 69
7668: PPUSH
7669: LD_VAR 0 11
7673: PPUSH
7674: CALL_OW 74
7678: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7679: LD_VAR 0 11
7683: PPUSH
7684: LD_VAR 0 19
7688: PPUSH
7689: CALL_OW 296
7693: PUSH
7694: LD_INT 8
7696: PLUS
7697: PUSH
7698: LD_VAR 0 11
7702: PPUSH
7703: LD_VAR 0 20
7707: PPUSH
7708: CALL_OW 296
7712: LESS
7713: IFFALSE 7731
// ComAttackUnit ( i , target1 ) else
7715: LD_VAR 0 11
7719: PPUSH
7720: LD_VAR 0 19
7724: PPUSH
7725: CALL_OW 115
7729: GO 7745
// ComAttackUnit ( i , target2 ) ;
7731: LD_VAR 0 11
7735: PPUSH
7736: LD_VAR 0 20
7740: PPUSH
7741: CALL_OW 115
// end ;
7745: GO 7570
7747: POP
7748: POP
// until not soldiersOK_list and not damageUnit_list ;
7749: LD_VAR 0 16
7753: NOT
7754: PUSH
7755: LD_VAR 0 14
7759: NOT
7760: AND
7761: IFFALSE 7401
// end ; if strategy = 2 then
7763: LD_VAR 0 9
7767: PUSH
7768: LD_INT 2
7770: EQUAL
7771: IFFALSE 8189
// begin for i in soldiersOK_list do
7773: LD_ADDR_VAR 0 11
7777: PUSH
7778: LD_VAR 0 16
7782: PUSH
7783: FOR_IN
7784: IFFALSE 7818
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7786: LD_VAR 0 11
7790: PPUSH
7791: LD_INT 91
7793: PPUSH
7794: LD_INT 63
7796: PPUSH
7797: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7801: LD_VAR 0 11
7805: PPUSH
7806: LD_INT 75
7808: PPUSH
7809: LD_INT 33
7811: PPUSH
7812: CALL_OW 174
// end ;
7816: GO 7783
7818: POP
7819: POP
// wait ( 0 0$10 ) ;
7820: LD_INT 350
7822: PPUSH
7823: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7827: LD_INT 105
7829: PPUSH
7830: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7834: LD_ADDR_VAR 0 14
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_VAR 0 1
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 1
7853: PUSH
7854: LD_INT 3
7856: PUSH
7857: LD_INT 24
7859: PUSH
7860: LD_INT 550
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 24
7873: PUSH
7874: LD_INT 250
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 69
7894: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7895: LD_ADDR_VAR 0 16
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 24
7924: PUSH
7925: LD_INT 1000
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// if medicCount then
7942: LD_VAR 0 4
7946: IFFALSE 7986
// begin if damageUnit_list then
7948: LD_VAR 0 14
7952: IFFALSE 7986
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7954: LD_VAR 0 14
7958: PPUSH
7959: LD_VAR 0 7
7963: PPUSH
7964: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7968: LD_VAR 0 4
7972: PPUSH
7973: LD_VAR 0 14
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PPUSH
7982: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7986: LD_ADDR_VAR 0 11
7990: PUSH
7991: LD_VAR 0 16
7995: PUSH
7996: FOR_IN
7997: IFFALSE 8173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7999: LD_ADDR_VAR 0 19
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PPUSH
8016: CALL_OW 69
8020: PPUSH
8021: LD_VAR 0 11
8025: PPUSH
8026: CALL_OW 74
8030: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8031: LD_ADDR_VAR 0 20
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 8
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: LD_INT 59
8053: PUSH
8054: EMPTY
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 11
8099: PPUSH
8100: CALL_OW 74
8104: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8105: LD_VAR 0 11
8109: PPUSH
8110: LD_VAR 0 19
8114: PPUSH
8115: CALL_OW 296
8119: PUSH
8120: LD_INT 8
8122: PLUS
8123: PUSH
8124: LD_VAR 0 11
8128: PPUSH
8129: LD_VAR 0 20
8133: PPUSH
8134: CALL_OW 296
8138: LESS
8139: IFFALSE 8157
// ComAttackUnit ( i , target1 ) else
8141: LD_VAR 0 11
8145: PPUSH
8146: LD_VAR 0 19
8150: PPUSH
8151: CALL_OW 115
8155: GO 8171
// ComAttackUnit ( i , target2 ) ;
8157: LD_VAR 0 11
8161: PPUSH
8162: LD_VAR 0 20
8166: PPUSH
8167: CALL_OW 115
// end ;
8171: GO 7996
8173: POP
8174: POP
// until not soldiersOK_list and not damageUnit_list ;
8175: LD_VAR 0 16
8179: NOT
8180: PUSH
8181: LD_VAR 0 14
8185: NOT
8186: AND
8187: IFFALSE 7827
// end ; if medic_list then
8189: LD_VAR 0 15
8193: IFFALSE 8333
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 15
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_VAR 0 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 50
8224: PUSH
8225: EMPTY
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 69
8237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// for i in medic_list do
8245: LD_ADDR_VAR 0 11
8249: PUSH
8250: LD_VAR 0 15
8254: PUSH
8255: FOR_IN
8256: IFFALSE 8324
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8258: LD_VAR 0 11
8262: PPUSH
8263: CALL_OW 314
8267: NOT
8268: PUSH
8269: LD_VAR 0 11
8273: PPUSH
8274: LD_INT 4
8276: PPUSH
8277: CALL_OW 308
8281: NOT
8282: AND
8283: IFFALSE 8299
// ComMoveToArea ( i , RussianAttack ) else
8285: LD_VAR 0 11
8289: PPUSH
8290: LD_INT 4
8292: PPUSH
8293: CALL_OW 113
8297: GO 8322
// if IsInArea ( i , RussianAttack ) then
8299: LD_VAR 0 11
8303: PPUSH
8304: LD_INT 4
8306: PPUSH
8307: CALL_OW 308
8311: IFFALSE 8322
// RemoveUnit ( i ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 64
8322: GO 8255
8324: POP
8325: POP
// until not medic_list ;
8326: LD_VAR 0 15
8330: NOT
8331: IFFALSE 8195
// end ; end ; end_of_file
8333: LD_VAR 0 10
8337: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8338: LD_INT 0
8340: PPUSH
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
// InGameOn ;
8345: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8349: LD_ADDR_VAR 0 3
8353: PUSH
8354: LD_EXP 8
8358: PUSH
8359: LD_EXP 9
8363: PUSH
8364: LD_EXP 10
8368: PUSH
8369: LD_EXP 11
8373: PUSH
8374: LD_EXP 12
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8386: LD_ADDR_VAR 0 4
8390: PUSH
8391: LD_INT 46
8393: PUSH
8394: LD_INT 45
8396: PUSH
8397: LD_INT 44
8399: PUSH
8400: LD_INT 43
8402: PUSH
8403: LD_INT 42
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 14
8420: PUSH
8421: LD_INT 12
8423: PUSH
8424: LD_INT 10
8426: PUSH
8427: LD_INT 8
8429: PUSH
8430: LD_INT 6
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8440: LD_EXP 11
8444: PPUSH
8445: LD_INT 31
8447: PPUSH
8448: LD_INT 59
8450: PPUSH
8451: LD_INT 19
8453: PPUSH
8454: LD_INT 5
8456: PPUSH
8457: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8468: LD_INT 32
8470: PPUSH
8471: LD_INT 51
8473: PPUSH
8474: LD_INT 26
8476: PPUSH
8477: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8481: LD_INT 32
8483: PPUSH
8484: LD_INT 53
8486: PPUSH
8487: LD_INT 23
8489: PPUSH
8490: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8494: LD_INT 32
8496: PPUSH
8497: LD_INT 52
8499: PPUSH
8500: LD_INT 19
8502: PPUSH
8503: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8514: LD_INT 32
8516: PPUSH
8517: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8521: LD_INT 32
8523: PPUSH
8524: CALL_OW 250
8528: PUSH
8529: LD_INT 52
8531: EQUAL
8532: PUSH
8533: LD_INT 32
8535: PPUSH
8536: CALL_OW 251
8540: PUSH
8541: LD_INT 19
8543: EQUAL
8544: AND
8545: IFFALSE 8507
// ComExitVehicle ( JMM ) ;
8547: LD_EXP 1
8551: PPUSH
8552: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8556: LD_EXP 7
8560: PPUSH
8561: LD_EXP 1
8565: PPUSH
8566: CALL_OW 119
// wait ( 0 0$01 ) ;
8570: LD_INT 35
8572: PPUSH
8573: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8577: LD_EXP 1
8581: PPUSH
8582: LD_INT 46
8584: PPUSH
8585: LD_INT 10
8587: PPUSH
8588: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8592: LD_EXP 1
8596: PPUSH
8597: LD_EXP 7
8601: PPUSH
8602: CALL_OW 179
// wait ( 0 0$4 ) ;
8606: LD_INT 140
8608: PPUSH
8609: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8613: LD_EXP 1
8617: PPUSH
8618: LD_STRING D1-JMM-1
8620: PPUSH
8621: CALL_OW 88
// if not dialogue_skipped then
8625: LD_OWVAR 59
8629: NOT
8630: IFFALSE 9287
// begin for i := 1 to gammaSquad do
8632: LD_ADDR_VAR 0 2
8636: PUSH
8637: DOUBLE
8638: LD_INT 1
8640: DEC
8641: ST_TO_ADDR
8642: LD_VAR 0 3
8646: PUSH
8647: FOR_TO
8648: IFFALSE 8709
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8650: LD_VAR 0 3
8654: PUSH
8655: LD_VAR 0 2
8659: ARRAY
8660: PPUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_VAR 0 2
8670: ARRAY
8671: PPUSH
8672: LD_VAR 0 5
8676: PUSH
8677: LD_VAR 0 2
8681: ARRAY
8682: PPUSH
8683: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8687: LD_VAR 0 3
8691: PUSH
8692: LD_VAR 0 2
8696: ARRAY
8697: PPUSH
8698: LD_EXP 1
8702: PPUSH
8703: CALL_OW 179
// end ;
8707: GO 8647
8709: POP
8710: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8711: LD_EXP 4
8715: PPUSH
8716: LD_INT 41
8718: PPUSH
8719: LD_INT 4
8721: PPUSH
8722: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8726: LD_EXP 4
8730: PPUSH
8731: LD_EXP 1
8735: PPUSH
8736: CALL_OW 179
// if Lisa = false and Bobby then
8740: LD_EXP 4
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: PUSH
8749: LD_EXP 2
8753: AND
8754: IFFALSE 8785
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8756: LD_EXP 2
8760: PPUSH
8761: LD_INT 41
8763: PPUSH
8764: LD_INT 4
8766: PPUSH
8767: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8771: LD_EXP 2
8775: PPUSH
8776: LD_EXP 1
8780: PPUSH
8781: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8785: LD_EXP 4
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: PUSH
8794: LD_EXP 2
8798: PUSH
8799: LD_INT 0
8801: EQUAL
8802: AND
8803: PUSH
8804: LD_EXP 3
8808: AND
8809: IFFALSE 8840
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8811: LD_EXP 3
8815: PPUSH
8816: LD_INT 41
8818: PPUSH
8819: LD_INT 4
8821: PPUSH
8822: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8826: LD_EXP 3
8830: PPUSH
8831: LD_EXP 1
8835: PPUSH
8836: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8840: LD_EXP 4
8844: PUSH
8845: LD_INT 0
8847: EQUAL
8848: PUSH
8849: LD_EXP 2
8853: PUSH
8854: LD_INT 0
8856: EQUAL
8857: AND
8858: PUSH
8859: LD_EXP 3
8863: PUSH
8864: LD_INT 0
8866: EQUAL
8867: AND
8868: IFFALSE 8899
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8870: LD_EXP 6
8874: PPUSH
8875: LD_INT 41
8877: PPUSH
8878: LD_INT 4
8880: PPUSH
8881: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8885: LD_EXP 6
8889: PPUSH
8890: LD_EXP 1
8894: PPUSH
8895: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8899: LD_EXP 7
8903: PPUSH
8904: LD_STRING D1-Brown-1
8906: PPUSH
8907: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8911: LD_EXP 1
8915: PPUSH
8916: LD_STRING D1-JMM-2
8918: PPUSH
8919: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8923: LD_EXP 7
8927: PPUSH
8928: LD_STRING D1-Brown-2
8930: PPUSH
8931: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8935: LD_EXP 1
8939: PPUSH
8940: LD_EXP 9
8944: PPUSH
8945: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8949: LD_EXP 9
8953: PPUSH
8954: LD_STRING D1-FSol1-2
8956: PPUSH
8957: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 8
8970: PPUSH
8971: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8975: LD_EXP 8
8979: PPUSH
8980: LD_STRING D1-Sol2-2
8982: PPUSH
8983: CALL_OW 88
// if Lisa then
8987: LD_EXP 4
8991: IFFALSE 9031
// begin ComTurnUnit ( JMM , Lisa ) ;
8993: LD_EXP 1
8997: PPUSH
8998: LD_EXP 4
9002: PPUSH
9003: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
9007: LD_EXP 4
9011: PPUSH
9012: LD_STRING D1-Lisa-2
9014: PPUSH
9015: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9019: LD_EXP 1
9023: PPUSH
9024: LD_STRING D1-JMM-3
9026: PPUSH
9027: CALL_OW 88
// end ; if Bobby then
9031: LD_EXP 2
9035: IFFALSE 9075
// begin ComTurnUnit ( JMM , Bobby ) ;
9037: LD_EXP 1
9041: PPUSH
9042: LD_EXP 2
9046: PPUSH
9047: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9051: LD_EXP 2
9055: PPUSH
9056: LD_STRING D1-Bobby-2
9058: PPUSH
9059: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9063: LD_EXP 1
9067: PPUSH
9068: LD_STRING D1-JMM-3
9070: PPUSH
9071: CALL_OW 88
// end ; if Cyrus then
9075: LD_EXP 3
9079: IFFALSE 9119
// begin ComTurnUnit ( JMM , Cyrus ) ;
9081: LD_EXP 1
9085: PPUSH
9086: LD_EXP 3
9090: PPUSH
9091: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9095: LD_EXP 3
9099: PPUSH
9100: LD_STRING D1-Cyrus-2
9102: PPUSH
9103: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9107: LD_EXP 1
9111: PPUSH
9112: LD_STRING D1-JMM-3
9114: PPUSH
9115: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9119: LD_EXP 1
9123: PPUSH
9124: LD_EXP 7
9128: PPUSH
9129: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9133: LD_EXP 1
9137: PPUSH
9138: LD_STRING D1-JMM-3a
9140: PPUSH
9141: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9145: LD_EXP 7
9149: PPUSH
9150: LD_INT 38
9152: PPUSH
9153: LD_INT 5
9155: PPUSH
9156: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9160: LD_EXP 7
9164: PPUSH
9165: LD_EXP 1
9169: PPUSH
9170: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9174: LD_EXP 1
9178: PPUSH
9179: LD_INT 40
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9189: LD_EXP 1
9193: PPUSH
9194: LD_EXP 7
9198: PPUSH
9199: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9203: LD_EXP 7
9207: PPUSH
9208: LD_STRING D1-Brown-3
9210: PPUSH
9211: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D1-Har-3
9222: PPUSH
9223: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9227: LD_EXP 1
9231: PPUSH
9232: LD_STRING D1-JMM-4
9234: PPUSH
9235: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9239: LD_EXP 14
9243: PPUSH
9244: LD_STRING D1-Har-4
9246: PPUSH
9247: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9251: LD_EXP 1
9255: PPUSH
9256: LD_STRING D1-JMM-5
9258: PPUSH
9259: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9263: LD_EXP 14
9267: PPUSH
9268: LD_STRING D1-Har-5
9270: PPUSH
9271: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9275: LD_EXP 1
9279: PPUSH
9280: LD_STRING D1-JMM-6
9282: PPUSH
9283: CALL_OW 88
// end ; InGameOff ;
9287: CALL_OW 9
// PrepareRussianConvoy ;
9291: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9295: LD_STRING M1
9297: PPUSH
9298: CALL_OW 337
// SaveForQuickRestart ;
9302: CALL_OW 22
// timerStatus = 1 ;
9306: LD_ADDR_EXP 29
9310: PUSH
9311: LD_INT 1
9313: ST_TO_ADDR
// startTimer = 1 ;
9314: LD_ADDR_EXP 30
9318: PUSH
9319: LD_INT 1
9321: ST_TO_ADDR
// bonusAvalaible = 1 ;
9322: LD_ADDR_EXP 44
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9330: LD_INT 105
9332: PPUSH
9333: CALL_OW 67
// DialogueOn ;
9337: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9341: LD_EXP 12
9345: PPUSH
9346: LD_STRING D9-Mech1-1
9348: PPUSH
9349: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9353: LD_EXP 1
9357: PPUSH
9358: LD_STRING D9-JMM-1
9360: PPUSH
9361: CALL_OW 88
// DialogueOff ;
9365: CALL_OW 7
// end ;
9369: LD_VAR 0 1
9373: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9374: LD_INT 47
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 321
9384: PUSH
9385: LD_INT 2
9387: EQUAL
9388: PUSH
9389: LD_EXP 31
9393: NOT
9394: AND
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 30
9418: PUSH
9419: LD_INT 3
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 57
9428: PUSH
9429: EMPTY
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: AND
9443: IFFALSE 9677
9445: GO 9447
9447: DISABLE
// begin factoryDialog := true ;
9448: LD_ADDR_EXP 31
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// if IsOk ( Campell ) then
9456: LD_EXP 12
9460: PPUSH
9461: CALL_OW 302
9465: IFFALSE 9481
// Say ( Campell , D10-Mech1-1 ) else
9467: LD_EXP 12
9471: PPUSH
9472: LD_STRING D10-Mech1-1
9474: PPUSH
9475: CALL_OW 88
9479: GO 9677
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9481: LD_INT 22
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: PUSH
9532: LD_EXP 1
9536: PUSH
9537: EMPTY
9538: LIST
9539: DIFF
9540: IFFALSE 9614
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9542: LD_INT 22
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 21
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 25
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PPUSH
9588: CALL_OW 69
9592: PUSH
9593: LD_EXP 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: DIFF
9601: PPUSH
9602: LD_STRING D10-Mech1-1
9604: PPUSH
9605: LD_STRING D10-Mech1-1
9607: PPUSH
9608: CALL 4606 0 3
9612: GO 9677
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9614: LD_INT 22
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 26
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 1
9651: ARRAY
9652: PPUSH
9653: CALL_OW 69
9657: PUSH
9658: LD_EXP 1
9662: PUSH
9663: EMPTY
9664: LIST
9665: DIFF
9666: PPUSH
9667: LD_STRING D10-Mech1-1
9669: PPUSH
9670: LD_STRING D10-Mech1-1
9672: PPUSH
9673: CALL 4606 0 3
// end ; end ;
9677: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9678: LD_INT 22
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 32
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PPUSH
9702: CALL_OW 69
9706: PUSH
9707: LD_EXP 32
9711: PUSH
9712: LD_INT 0
9714: EQUAL
9715: AND
9716: IFFALSE 9952
9718: GO 9720
9720: DISABLE
// begin if IsOk ( Claptopn ) then
9721: LD_EXP 11
9725: PPUSH
9726: CALL_OW 302
9730: IFFALSE 9746
// Say ( Claptopn , D9b-Eng1-1 ) else
9732: LD_EXP 11
9736: PPUSH
9737: LD_STRING D9b-Eng1-1
9739: PPUSH
9740: CALL_OW 88
9744: GO 9938
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9746: LD_INT 22
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 3
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 26
9778: PUSH
9779: LD_INT 1
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 69
9796: PUSH
9797: LD_EXP 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: DIFF
9805: IFFALSE 9879
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9807: LD_INT 22
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 21
9819: PUSH
9820: LD_INT 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 26
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PUSH
9858: LD_EXP 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: DIFF
9866: PPUSH
9867: LD_STRING D9b-Eng1-1
9869: PPUSH
9870: LD_STRING D9b-Eng1-11
9872: PPUSH
9873: CALL 4606 0 3
9877: GO 9938
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9879: LD_INT 22
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 69
9918: PUSH
9919: LD_EXP 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: DIFF
9927: PPUSH
9928: LD_STRING D9b-Eng1-1
9930: PPUSH
9931: LD_STRING D9b-Eng1-1
9933: PPUSH
9934: CALL 4606 0 3
// end ; if energyVDialog = 0 then
9938: LD_EXP 33
9942: PUSH
9943: LD_INT 0
9945: EQUAL
9946: IFFALSE 9952
// EnergyDialog ;
9948: CALL 5011 0 0
// end ;
9952: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9953: LD_EXP 34
9957: PUSH
9958: LD_INT 1
9960: EQUAL
9961: PUSH
9962: LD_EXP 35
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: AND
9971: IFFALSE 9983
9973: GO 9975
9975: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9976: LD_STRING M1a
9978: PPUSH
9979: CALL_OW 337
9983: END
// every 3 3$0 do
9984: GO 9986
9986: DISABLE
// PrepareFirstAttack ;
9987: CALL 4212 0 0
9991: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9992: LD_INT 22
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: LD_INT 250
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 69
10038: PUSH
10039: LD_INT 0
10041: GREATER
10042: PUSH
10043: LD_EXP 23
10047: PUSH
10048: LD_INT 1
10050: EQUAL
10051: AND
10052: IFFALSE 10353
10054: GO 10056
10056: DISABLE
10057: LD_INT 0
10059: PPUSH
// begin firstRussianAttack = 2 ;
10060: LD_ADDR_EXP 23
10064: PUSH
10065: LD_INT 2
10067: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10068: LD_INT 22
10070: PUSH
10071: LD_INT 5
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 21
10080: PUSH
10081: LD_INT 1
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: PPUSH
10097: LD_INT 125
10099: PPUSH
10100: LD_INT 98
10102: PPUSH
10103: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10107: LD_INT 22
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 21
10119: PUSH
10120: LD_INT 1
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: PUSH
10136: LD_EXP 1
10140: PUSH
10141: LD_EXP 7
10145: PUSH
10146: LD_EXP 4
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: DIFF
10156: PPUSH
10157: LD_STRING DAtt1-Sol1-1
10159: PPUSH
10160: LD_STRING DAtt1-FSol1-1
10162: PPUSH
10163: CALL 4606 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10167: LD_EXP 1
10171: PPUSH
10172: LD_STRING DAtt1-JMM-1
10174: PPUSH
10175: CALL_OW 88
// if Lisa then
10179: LD_EXP 4
10183: IFFALSE 10199
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10185: LD_EXP 4
10189: PPUSH
10190: LD_STRING DAtt1a-Lisa-1
10192: PPUSH
10193: CALL_OW 88
10197: GO 10270
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10199: LD_INT 22
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 21
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 26
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: PUSH
10239: LD_EXP 1
10243: PUSH
10244: LD_EXP 7
10248: PUSH
10249: LD_EXP 4
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: DIFF
10259: PPUSH
10260: LD_STRING DAtt1a-Sol1-1
10262: PPUSH
10263: LD_STRING DAtt1-FSol1-1
10265: PPUSH
10266: CALL 4606 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10270: LD_EXP 1
10274: PPUSH
10275: LD_STRING DAtt1a-JMM-1
10277: PPUSH
10278: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10282: LD_INT 22
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 21
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 26
10304: PUSH
10305: LD_INT 1
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 69
10321: PUSH
10322: LD_EXP 1
10326: PUSH
10327: LD_EXP 7
10331: PUSH
10332: LD_EXP 4
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: DIFF
10342: PPUSH
10343: LD_STRING DAtt1b-Sol1-1
10345: PPUSH
10346: LD_STRING DAtt1a-Sol1-1
10348: PPUSH
10349: CALL 4606 0 3
// end ;
10353: PPOPN 1
10355: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10356: LD_EXP 23
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: PUSH
10365: LD_INT 5
10367: PPUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 70
10396: AND
10397: IFFALSE 10455
10399: GO 10401
10401: DISABLE
10402: LD_INT 0
10404: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 5
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 21
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: FOR_IN
10440: IFFALSE 10453
// RemoveUnit ( i ) ;
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 64
10451: GO 10439
10453: POP
10454: POP
// end ;
10455: PPOPN 1
10457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10458: LD_INT 22
10460: PUSH
10461: LD_INT 5
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: PUSH
10480: LD_EXP 23
10484: PUSH
10485: LD_INT 2
10487: EQUAL
10488: AND
10489: IFFALSE 10502
10491: GO 10493
10493: DISABLE
// firstRussianAttack = 3 ;
10494: LD_ADDR_EXP 23
10498: PUSH
10499: LD_INT 3
10501: ST_TO_ADDR
10502: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10503: LD_EXP 28
10507: PUSH
10508: LD_INT 0
10510: EQUAL
10511: IFFALSE 10592
10513: GO 10515
10515: DISABLE
// begin timerStatus = 4 ;
10516: LD_ADDR_EXP 29
10520: PUSH
10521: LD_INT 4
10523: ST_TO_ADDR
// DialogueOn ;
10524: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10528: LD_EXP 13
10532: PPUSH
10533: LD_STRING D2-Don-1
10535: PPUSH
10536: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D2-JMM-1
10547: PPUSH
10548: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10552: LD_EXP 13
10556: PPUSH
10557: LD_STRING D2-Don-2
10559: PPUSH
10560: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10564: LD_EXP 1
10568: PPUSH
10569: LD_STRING D2-JMM-2
10571: PPUSH
10572: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10576: LD_EXP 13
10580: PPUSH
10581: LD_STRING D2-Don-3
10583: PPUSH
10584: CALL_OW 94
// DialogueOff ;
10588: CALL_OW 7
// end ;
10592: END
// every 12 12$0 do var tmp ;
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
// begin PrepareDonaldsonArmy ;
10599: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10603: LD_EXP 13
10607: PPUSH
10608: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10612: LD_INT 22
10614: PUSH
10615: LD_INT 6
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: NOT
10627: IFFALSE 10643
// begin wait ( 3 ) ;
10629: LD_INT 3
10631: PPUSH
10632: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10636: LD_STRING ACH_BASE
10638: PPUSH
10639: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10643: LD_ADDR_VAR 0 1
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 1
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 25
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: PUSH
10699: LD_EXP 5
10703: PUSH
10704: EMPTY
10705: LIST
10706: DIFF
10707: ST_TO_ADDR
// DialogueOn ;
10708: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10712: LD_VAR 0 1
10716: PPUSH
10717: LD_STRING D3-Sol1-1
10719: PPUSH
10720: LD_STRING D3-Sol1-1
10722: PPUSH
10723: CALL 4606 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10727: LD_INT 22
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 21
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: PPUSH
10778: LD_STRING D3-Sol2-1
10780: PPUSH
10781: LD_STRING D3-Sol2-1
10783: PPUSH
10784: CALL 4606 0 3
// if Frank then
10788: LD_EXP 5
10792: IFFALSE 10806
// Say ( Frank , D3-Frank-1 ) ;
10794: LD_EXP 5
10798: PPUSH
10799: LD_STRING D3-Frank-1
10801: PPUSH
10802: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10806: LD_EXP 13
10810: PPUSH
10811: LD_STRING D3-Don-1
10813: PPUSH
10814: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10818: LD_EXP 13
10822: PPUSH
10823: LD_STRING D3-Don-1a
10825: PPUSH
10826: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10830: LD_EXP 1
10834: PPUSH
10835: LD_STRING D3-JMM-1
10837: PPUSH
10838: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10842: LD_EXP 13
10846: PPUSH
10847: LD_STRING D3-Don-2
10849: PPUSH
10850: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10854: LD_INT 22
10856: PUSH
10857: LD_INT 6
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 21
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 69
10882: IFFALSE 11020
// begin Say ( JMM , D3-JMM-2 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING D3-JMM-2
10891: PPUSH
10892: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10896: LD_EXP 13
10900: PPUSH
10901: LD_STRING D3-Don-3
10903: PPUSH
10904: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10908: LD_EXP 1
10912: PPUSH
10913: LD_STRING D3-JMM-3
10915: PPUSH
10916: CALL_OW 88
// if IsOK ( Frank ) then
10920: LD_EXP 5
10924: PPUSH
10925: CALL_OW 302
10929: IFFALSE 10943
// Say ( Frank , D3-Frank-3 ) ;
10931: LD_EXP 5
10935: PPUSH
10936: LD_STRING D3-Frank-3
10938: PPUSH
10939: CALL_OW 88
// DialogueOff ;
10943: CALL_OW 7
// if IsOk ( Frank ) then
10947: LD_EXP 5
10951: PPUSH
10952: CALL_OW 302
10956: IFFALSE 11018
// begin SetSide ( Frank , 0 ) ;
10958: LD_EXP 5
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 12
10977: PPUSH
10978: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_STRING 04t_Frank
10989: PPUSH
10990: CALL_OW 38
// wait ( 0 0$3 ) ;
10994: LD_INT 105
10996: PPUSH
10997: CALL_OW 67
// frankScoutBase = 1 ;
11001: LD_ADDR_EXP 25
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11009: LD_EXP 5
11013: PPUSH
11014: CALL_OW 64
// end ; end else
11018: GO 11107
// begin Say ( JMM , D3-JMM-4 ) ;
11020: LD_EXP 1
11024: PPUSH
11025: LD_STRING D3-JMM-4
11027: PPUSH
11028: CALL_OW 88
// DialogueOff ;
11032: CALL_OW 7
// if IsOk ( Frank ) then
11036: LD_EXP 5
11040: PPUSH
11041: CALL_OW 302
11045: IFFALSE 11107
// begin SetSide ( Frank , 0 ) ;
11047: LD_EXP 5
11051: PPUSH
11052: LD_INT 0
11054: PPUSH
11055: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11059: LD_EXP 5
11063: PPUSH
11064: LD_INT 12
11066: PPUSH
11067: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11071: LD_EXP 5
11075: PPUSH
11076: LD_STRING 04t_Frank
11078: PPUSH
11079: CALL_OW 38
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// frankScoutBase = 1 ;
11090: LD_ADDR_EXP 25
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11098: LD_EXP 5
11102: PPUSH
11103: CALL_OW 64
// end ; end ; end ;
11107: PPOPN 1
11109: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11110: LD_EXP 13
11114: PPUSH
11115: CALL_OW 255
11119: PUSH
11120: LD_INT 4
11122: EQUAL
11123: PUSH
11124: LD_EXP 13
11128: PPUSH
11129: CALL_OW 302
11133: AND
11134: IFFALSE 11374
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin wait ( 5 5$00 ) ;
11143: LD_INT 10500
11145: PPUSH
11146: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11150: LD_EXP 13
11154: PPUSH
11155: CALL_OW 255
11159: PUSH
11160: LD_INT 1
11162: EQUAL
11163: PUSH
11164: LD_EXP 13
11168: PPUSH
11169: CALL_OW 301
11173: OR
11174: IFFALSE 11178
// exit ;
11176: GO 11374
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11178: LD_EXP 13
11182: PPUSH
11183: LD_STRING D3b-Don-1
11185: PPUSH
11186: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11190: LD_ADDR_EXP 41
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_INT 22
11205: PUSH
11206: LD_INT 4
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11218: LD_INT 35
11220: PPUSH
11221: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11225: LD_VAR 0 2
11229: NOT
11230: PUSH
11231: LD_INT 22
11233: PUSH
11234: LD_INT 6
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: OR
11260: IFFALSE 11218
// if not tmp then
11262: LD_VAR 0 2
11266: NOT
11267: IFFALSE 11271
// exit ;
11269: GO 11374
// for i in tmp do
11271: LD_ADDR_VAR 0 1
11275: PUSH
11276: LD_VAR 0 2
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11301
// ComAgressiveMove ( i , 52 , 64 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 52
11291: PPUSH
11292: LD_INT 64
11294: PPUSH
11295: CALL_OW 114
11299: GO 11281
11301: POP
11302: POP
// wait ( 0 0$10 ) ;
11303: LD_INT 350
11305: PPUSH
11306: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11310: LD_ADDR_VAR 0 1
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_INT 4
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 69
11329: PUSH
11330: LD_EXP 5
11334: DIFF
11335: PUSH
11336: FOR_IN
11337: IFFALSE 11353
// SetSide ( i , 1 ) ;
11339: LD_VAR 0 1
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 235
11351: GO 11336
11353: POP
11354: POP
// if IsLive ( Donaldson ) then
11355: LD_EXP 13
11359: PPUSH
11360: CALL_OW 300
11364: IFFALSE 11374
// saveDonaldson := 1 ;
11366: LD_ADDR_EXP 24
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// end ;
11374: PPOPN 2
11376: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11377: LD_EXP 24
11381: NOT
11382: PUSH
11383: LD_EXP 41
11387: NOT
11388: AND
11389: PUSH
11390: LD_INT 26
11392: PPUSH
11393: LD_INT 22
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PPUSH
11403: CALL_OW 70
11407: PUSH
11408: LD_EXP 13
11412: PPUSH
11413: LD_EXP 1
11417: PPUSH
11418: CALL_OW 296
11422: PUSH
11423: LD_INT 6
11425: LESS
11426: OR
11427: AND
11428: IFFALSE 11483
11430: GO 11432
11432: DISABLE
11433: LD_INT 0
11435: PPUSH
// begin saveDonaldson := 1 ;
11436: LD_ADDR_EXP 24
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11444: LD_ADDR_VAR 0 1
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 4
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: PUSH
11464: FOR_IN
11465: IFFALSE 11481
// SetSide ( i , 1 ) ;
11467: LD_VAR 0 1
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 235
11479: GO 11464
11481: POP
11482: POP
// end ;
11483: PPOPN 1
11485: END
// every 0 0$1 trigger frankScoutBase do
11486: LD_EXP 25
11490: IFFALSE 11855
11492: GO 11494
11494: DISABLE
// begin wait ( 2 2$30 ) ;
11495: LD_INT 5250
11497: PPUSH
11498: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11502: LD_INT 35
11504: PPUSH
11505: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11509: LD_INT 81
11511: PUSH
11512: LD_INT 4
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 92
11521: PUSH
11522: LD_INT 84
11524: PUSH
11525: LD_INT 28
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 69
11545: NOT
11546: IFFALSE 11502
// uc_side = 4 ;
11548: LD_ADDR_OWVAR 20
11552: PUSH
11553: LD_INT 4
11555: ST_TO_ADDR
// uc_nation = 1 ;
11556: LD_ADDR_OWVAR 21
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11564: LD_ADDR_EXP 5
11568: PUSH
11569: LD_STRING 04t_Frank
11571: PPUSH
11572: CALL_OW 34
11576: ST_TO_ADDR
// if not Frank then
11577: LD_EXP 5
11581: NOT
11582: IFFALSE 11586
// exit ;
11584: GO 11855
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11586: LD_EXP 5
11590: PPUSH
11591: LD_INT 13
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11601: LD_INT 35
11603: PPUSH
11604: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11608: LD_EXP 1
11612: PPUSH
11613: CALL_OW 310
11617: NOT
11618: PUSH
11619: LD_EXP 1
11623: PPUSH
11624: LD_INT 4
11626: PPUSH
11627: CALL_OW 296
11631: PUSH
11632: LD_INT 20
11634: LESS
11635: AND
11636: IFFALSE 11669
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11638: LD_EXP 5
11642: PPUSH
11643: LD_EXP 1
11647: PPUSH
11648: CALL_OW 250
11652: PPUSH
11653: LD_EXP 1
11657: PPUSH
11658: CALL_OW 251
11662: PPUSH
11663: CALL_OW 111
11667: GO 11684
// ComMoveXY ( Frank , 51 , 15 ) ;
11669: LD_EXP 5
11673: PPUSH
11674: LD_INT 51
11676: PPUSH
11677: LD_INT 15
11679: PPUSH
11680: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11684: LD_EXP 5
11688: PPUSH
11689: LD_EXP 1
11693: PPUSH
11694: CALL_OW 296
11698: PUSH
11699: LD_INT 10
11701: LESS
11702: IFFALSE 11601
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11704: LD_EXP 1
11708: PUSH
11709: LD_EXP 5
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 87
// DialogueOn ;
11722: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11726: LD_EXP 5
11730: PPUSH
11731: LD_STRING D3a-Frank-1
11733: PPUSH
11734: CALL_OW 88
// if Lisa then
11738: LD_EXP 4
11742: IFFALSE 11792
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11744: LD_EXP 4
11748: PPUSH
11749: LD_STRING D3a-Lisa-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11756: LD_EXP 5
11760: PPUSH
11761: LD_STRING D3a-Frank-2
11763: PPUSH
11764: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11768: LD_EXP 4
11772: PPUSH
11773: LD_STRING D3a-Lisa-2
11775: PPUSH
11776: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11780: LD_EXP 5
11784: PPUSH
11785: LD_STRING D3a-Frank-3
11787: PPUSH
11788: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11792: LD_EXP 1
11796: PPUSH
11797: LD_STRING D3a-JMM-3
11799: PPUSH
11800: CALL_OW 88
// DialogueOff ;
11804: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11808: LD_EXP 5
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 235
// InGameOn ;
11820: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11824: LD_INT 1
11826: PPUSH
11827: LD_INT 7
11829: PPUSH
11830: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11834: LD_INT 93
11836: PPUSH
11837: LD_INT 91
11839: PPUSH
11840: CALL_OW 84
// wait ( 0 0$5 ) ;
11844: LD_INT 175
11846: PPUSH
11847: CALL_OW 67
// InGameOff ;
11851: CALL_OW 9
// end ;
11855: END
// every 12 12$0 trigger Difficulty > 1 do
11856: LD_OWVAR 67
11860: PUSH
11861: LD_INT 1
11863: GREATER
11864: IFFALSE 11888
11866: GO 11868
11868: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11869: LD_INT 24
11871: PPUSH
11872: LD_INT 24
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 53
11883: PPUSH
11884: CALL_OW 185
11888: END
// every 18 18$0 do
11889: GO 11891
11891: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11892: LD_EXP 14
11896: PPUSH
11897: LD_STRING D4-Har-1
11899: PPUSH
11900: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11904: LD_EXP 1
11908: PPUSH
11909: LD_STRING D4-JMM-1
11911: PPUSH
11912: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11916: LD_EXP 14
11920: PPUSH
11921: LD_STRING D4-Har-2
11923: PPUSH
11924: CALL_OW 94
// case Query ( Q1 ) of 1 :
11928: LD_STRING Q1
11930: PPUSH
11931: CALL_OW 97
11935: PUSH
11936: LD_INT 1
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12003
11944: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11945: LD_EXP 1
11949: PPUSH
11950: LD_STRING D5-JMM-1
11952: PPUSH
11953: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11957: LD_EXP 14
11961: PPUSH
11962: LD_STRING D5-Har-1
11964: PPUSH
11965: CALL_OW 94
// timeToSupport = 10 10$0 ;
11969: LD_ADDR_EXP 28
11973: PUSH
11974: LD_INT 21000
11976: ST_TO_ADDR
// timerStatus = 2 ;
11977: LD_ADDR_EXP 29
11981: PUSH
11982: LD_INT 2
11984: ST_TO_ADDR
// startTimer = 1 ;
11985: LD_ADDR_EXP 30
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// harrAnswer = 1 ;
11993: LD_ADDR_EXP 26
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// end ; 2 :
12001: GO 12138
12003: LD_INT 2
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12070
12011: POP
// begin Say ( JMM , D5-JMM-2 ) ;
12012: LD_EXP 1
12016: PPUSH
12017: LD_STRING D5-JMM-2
12019: PPUSH
12020: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12024: LD_EXP 14
12028: PPUSH
12029: LD_STRING D5-Har-2
12031: PPUSH
12032: CALL_OW 94
// timeToSupport = 5 5$0 ;
12036: LD_ADDR_EXP 28
12040: PUSH
12041: LD_INT 10500
12043: ST_TO_ADDR
// timerStatus = 2 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 2
12051: ST_TO_ADDR
// startTimer = 1 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// harrAnswer = 2 ;
12060: LD_ADDR_EXP 26
12064: PUSH
12065: LD_INT 2
12067: ST_TO_ADDR
// end ; 3 :
12068: GO 12138
12070: LD_INT 3
12072: DOUBLE
12073: EQUAL
12074: IFTRUE 12078
12076: GO 12137
12078: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12079: LD_EXP 1
12083: PPUSH
12084: LD_STRING D5-JMM-3
12086: PPUSH
12087: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12091: LD_EXP 14
12095: PPUSH
12096: LD_STRING D5-Har-3
12098: PPUSH
12099: CALL_OW 94
// timeToSupport = 5 5$0 ;
12103: LD_ADDR_EXP 28
12107: PUSH
12108: LD_INT 10500
12110: ST_TO_ADDR
// timerStatus = 2 ;
12111: LD_ADDR_EXP 29
12115: PUSH
12116: LD_INT 2
12118: ST_TO_ADDR
// startTimer = 1 ;
12119: LD_ADDR_EXP 30
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// harrAnswer = 3 ;
12127: LD_ADDR_EXP 26
12131: PUSH
12132: LD_INT 3
12134: ST_TO_ADDR
// end ; end ;
12135: GO 12138
12137: POP
// end ;
12138: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12139: LD_EXP 29
12143: PUSH
12144: LD_INT 2
12146: EQUAL
12147: PUSH
12148: LD_EXP 28
12152: PUSH
12153: LD_INT 0
12155: EQUAL
12156: AND
12157: IFFALSE 12446
12159: GO 12161
12161: DISABLE
// begin timerStatus = 4 ;
12162: LD_ADDR_EXP 29
12166: PUSH
12167: LD_INT 4
12169: ST_TO_ADDR
// if harrAnswer = 1 then
12170: LD_EXP 26
12174: PUSH
12175: LD_INT 1
12177: EQUAL
12178: IFFALSE 12262
// begin PrepareHarrisonSupport ( 3 ) ;
12180: LD_INT 3
12182: PPUSH
12183: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12187: LD_INT 2100
12189: PPUSH
12190: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12194: LD_EXP 14
12198: PPUSH
12199: LD_STRING D7-Har-1
12201: PPUSH
12202: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12206: LD_STRING M2
12208: PPUSH
12209: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12213: LD_ADDR_EXP 27
12217: PUSH
12218: LD_INT 31500
12220: PUSH
12221: LD_INT 10500
12223: PUSH
12224: LD_INT 8400
12226: PUSH
12227: LD_INT 6300
12229: PUSH
12230: LD_INT 6300
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: LD_OWVAR 67
12243: ARRAY
12244: PLUS
12245: ST_TO_ADDR
// startTimer = 1 ;
12246: LD_ADDR_EXP 30
12250: PUSH
12251: LD_INT 1
12253: ST_TO_ADDR
// timerStatus = 3 ;
12254: LD_ADDR_EXP 29
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12262: LD_EXP 26
12266: PUSH
12267: LD_INT 2
12269: EQUAL
12270: IFFALSE 12354
// begin PrepareHarrisonSupport ( 4 ) ;
12272: LD_INT 4
12274: PPUSH
12275: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12279: LD_INT 2100
12281: PPUSH
12282: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12286: LD_EXP 14
12290: PPUSH
12291: LD_STRING D7-Har-1
12293: PPUSH
12294: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12298: LD_STRING M2
12300: PPUSH
12301: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12305: LD_ADDR_EXP 27
12309: PUSH
12310: LD_INT 33600
12312: PUSH
12313: LD_INT 10500
12315: PUSH
12316: LD_INT 8400
12318: PUSH
12319: LD_INT 6300
12321: PUSH
12322: LD_INT 5250
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PLUS
12337: ST_TO_ADDR
// startTimer = 1 ;
12338: LD_ADDR_EXP 30
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
// timerStatus = 3 ;
12346: LD_ADDR_EXP 29
12350: PUSH
12351: LD_INT 3
12353: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12354: LD_EXP 26
12358: PUSH
12359: LD_INT 3
12361: EQUAL
12362: IFFALSE 12446
// begin PrepareHarrisonSupport ( 5 ) ;
12364: LD_INT 5
12366: PPUSH
12367: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12371: LD_INT 2100
12373: PPUSH
12374: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12378: LD_EXP 14
12382: PPUSH
12383: LD_STRING D7-Har-1
12385: PPUSH
12386: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12390: LD_STRING M2
12392: PPUSH
12393: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12397: LD_ADDR_EXP 27
12401: PUSH
12402: LD_INT 35700
12404: PUSH
12405: LD_INT 10500
12407: PUSH
12408: LD_INT 6300
12410: PUSH
12411: LD_INT 4200
12413: PUSH
12414: LD_INT 3150
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: LD_OWVAR 67
12427: ARRAY
12428: PLUS
12429: ST_TO_ADDR
// startTimer = 1 ;
12430: LD_ADDR_EXP 30
12434: PUSH
12435: LD_INT 1
12437: ST_TO_ADDR
// timerStatus = 3 ;
12438: LD_ADDR_EXP 29
12442: PUSH
12443: LD_INT 3
12445: ST_TO_ADDR
// end ; end ;
12446: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12447: LD_EXP 27
12451: PUSH
12452: LD_INT 8400
12454: LESSEQUAL
12455: PUSH
12456: LD_EXP 29
12460: PUSH
12461: LD_INT 3
12463: EQUAL
12464: AND
12465: IFFALSE 12497
12467: GO 12469
12469: DISABLE
// begin DialogueOn ;
12470: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12474: LD_EXP 14
12478: PPUSH
12479: LD_STRING D7a-Har-1
12481: PPUSH
12482: CALL_OW 94
// DialogueOff ;
12486: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12490: LD_STRING M2a
12492: PPUSH
12493: CALL_OW 337
// end ;
12497: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12498: LD_EXP 27
12502: PUSH
12503: LD_INT 0
12505: LESSEQUAL
12506: PUSH
12507: LD_EXP 29
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: AND
12516: PUSH
12517: LD_EXP 40
12521: NOT
12522: AND
12523: IFFALSE 12662
12525: GO 12527
12527: DISABLE
12528: LD_INT 0
12530: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_INT 22
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: PUSH
12551: LD_EXP 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: DIFF
12559: ST_TO_ADDR
// saveDonaldson = 2 ;
12560: LD_ADDR_EXP 24
12564: PUSH
12565: LD_INT 2
12567: ST_TO_ADDR
// DialogueOn ;
12568: CALL_OW 6
// if IsOk ( Donaldson ) then
12572: LD_EXP 13
12576: PPUSH
12577: CALL_OW 302
12581: IFFALSE 12597
// SayRadio ( Harisson , D8-Har-1 ) else
12583: LD_EXP 14
12587: PPUSH
12588: LD_STRING D8-Har-1
12590: PPUSH
12591: CALL_OW 94
12595: GO 12609
// SayRadio ( Harisson , D8-Har-1a ) ;
12597: LD_EXP 14
12601: PPUSH
12602: LD_STRING D8-Har-1a
12604: PPUSH
12605: CALL_OW 94
// DialogueOff ;
12609: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 4
12620: PPUSH
12621: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_INT 88
12632: PPUSH
12633: LD_INT 89
12635: PPUSH
12636: CALL_OW 114
// honor = 0 ;
12640: LD_ADDR_EXP 39
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12648: LD_INT 350
12650: PPUSH
12651: CALL_OW 67
// YouLost ( LostCommand ) ;
12655: LD_STRING LostCommand
12657: PPUSH
12658: CALL_OW 104
// end ;
12662: PPOPN 1
12664: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12665: LD_INT 22
12667: PUSH
12668: LD_INT 6
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: PUSH
12694: LD_INT 0
12696: EQUAL
12697: PUSH
12698: LD_EXP 20
12702: PUSH
12703: LD_INT 0
12705: EQUAL
12706: AND
12707: PUSH
12708: LD_EXP 44
12712: PUSH
12713: LD_INT 1
12715: EQUAL
12716: AND
12717: IFFALSE 12811
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
12725: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 22
12733: PUSH
12734: LD_INT 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 23
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// for i in tmp do
12771: LD_ADDR_VAR 0 1
12775: PUSH
12776: LD_VAR 0 2
12780: PUSH
12781: FOR_IN
12782: IFFALSE 12809
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12784: LD_VAR 0 1
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 4
12794: PPUSH
12795: CALL_OW 12
12799: PPUSH
12800: LD_INT 500
12802: PPUSH
12803: CALL_OW 492
12807: GO 12781
12809: POP
12810: POP
// end ; end_of_file
12811: PPOPN 2
12813: END
// every 0 0$1 trigger AIEnable do
12814: LD_EXP 37
12818: IFFALSE 12912
12820: GO 12822
12822: DISABLE
// begin enable ;
12823: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 21
12829: PPUSH
12830: LD_INT 7
12832: PPUSH
12833: CALL 6038 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12837: LD_INT 3
12839: PPUSH
12840: LD_INT 8
12842: PPUSH
12843: LD_INT 7
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL 6342 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12853: LD_EXP 20
12857: PUSH
12858: LD_INT 2
12860: EQUAL
12861: PUSH
12862: LD_INT 22
12864: PUSH
12865: LD_INT 6
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 69
12876: AND
12877: IFFALSE 12912
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12879: LD_INT 6
12881: PPUSH
12882: LD_EXP 21
12886: PPUSH
12887: LD_INT 6
12889: PPUSH
12890: CALL 6038 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12894: LD_INT 6
12896: PPUSH
12897: LD_INT 9
12899: PPUSH
12900: LD_INT 6
12902: PPUSH
12903: LD_EXP 22
12907: PPUSH
12908: CALL 6342 0 4
// end ; end ;
12912: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12913: LD_EXP 15
12917: PPUSH
12918: CALL_OW 310
12922: NOT
12923: PUSH
12924: LD_INT 21
12926: PPUSH
12927: CALL_OW 302
12931: AND
12932: PUSH
12933: LD_INT 21
12935: PPUSH
12936: CALL_OW 255
12940: PUSH
12941: LD_INT 3
12943: EQUAL
12944: AND
12945: IFFALSE 12962
12947: GO 12949
12949: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12950: LD_EXP 15
12954: PPUSH
12955: LD_INT 21
12957: PPUSH
12958: CALL_OW 120
12962: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12963: LD_INT 22
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 21
12975: PUSH
12976: LD_INT 2
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 55
12985: PUSH
12986: EMPTY
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: PUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 255
13010: PUSH
13011: LD_INT 3
13013: EQUAL
13014: AND
13015: PUSH
13016: LD_INT 21
13018: PPUSH
13019: CALL_OW 302
13023: AND
13024: PUSH
13025: LD_INT 21
13027: PPUSH
13028: CALL_OW 255
13032: PUSH
13033: LD_INT 3
13035: EQUAL
13036: AND
13037: PUSH
13038: LD_INT 21
13040: PPUSH
13041: CALL_OW 302
13045: AND
13046: IFFALSE 13258
13048: GO 13050
13050: DISABLE
// begin enable ;
13051: ENABLE
// if Difficulty = 1 then
13052: LD_OWVAR 67
13056: PUSH
13057: LD_INT 1
13059: EQUAL
13060: IFFALSE 13104
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13062: LD_INT 3
13064: PPUSH
13065: LD_INT 24
13067: PPUSH
13068: LD_OWVAR 67
13072: PUSH
13073: LD_INT 2
13075: PLUS
13076: PPUSH
13077: LD_INT 42
13079: PUSH
13080: LD_INT 44
13082: PUSH
13083: LD_INT 43
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: LD_INT 21
13099: PPUSH
13100: CALL 6856 0 7
// if Difficulty = 2 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 2
13111: EQUAL
13112: IFFALSE 13179
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13114: LD_INT 3
13116: PPUSH
13117: LD_INT 24
13119: PPUSH
13120: LD_OWVAR 67
13124: PUSH
13125: LD_INT 2
13127: PLUS
13128: PPUSH
13129: LD_INT 44
13131: PUSH
13132: LD_INT 44
13134: PUSH
13135: LD_INT 43
13137: PUSH
13138: LD_INT 43
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: LD_INT 21
13155: PUSH
13156: LD_INT 22
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 2
13168: PPUSH
13169: CALL_OW 12
13173: ARRAY
13174: PPUSH
13175: CALL 6856 0 7
// if Difficulty >= 3 then
13179: LD_OWVAR 67
13183: PUSH
13184: LD_INT 3
13186: GREATEREQUAL
13187: IFFALSE 13258
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13189: LD_INT 3
13191: PPUSH
13192: LD_INT 24
13194: PPUSH
13195: LD_OWVAR 67
13199: PUSH
13200: LD_INT 2
13202: PPUSH
13203: LD_INT 3
13205: PPUSH
13206: CALL_OW 12
13210: PLUS
13211: PPUSH
13212: LD_INT 44
13214: PUSH
13215: LD_INT 44
13217: PUSH
13218: LD_INT 43
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 23
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 1
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: CALL_OW 12
13252: ARRAY
13253: PPUSH
13254: CALL 6856 0 7
// end ;
13258: END
// every 0 0$1 do
13259: GO 13261
13261: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13262: LD_INT 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: CALL 5959 0 3
13275: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13276: LD_EXP 20
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13431
13286: GO 13288
13288: DISABLE
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_INT 6
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 34
13320: PUSH
13321: LD_INT 51
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 69
13337: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13338: LD_VAR 0 2
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: LD_EXP 21
13351: PPUSH
13352: CALL_OW 250
13356: PUSH
13357: LD_INT 5
13359: MINUS
13360: PPUSH
13361: LD_EXP 21
13365: PPUSH
13366: CALL_OW 251
13370: PUSH
13371: LD_INT 5
13373: MINUS
13374: PPUSH
13375: CALL_OW 111
// wait ( 0 0$5 ) ;
13379: LD_INT 175
13381: PPUSH
13382: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13386: LD_VAR 0 2
13390: PUSH
13391: LD_INT 1
13393: ARRAY
13394: PPUSH
13395: LD_INT 41
13397: PPUSH
13398: LD_INT 52
13400: PPUSH
13401: CALL_OW 177
// wait ( 0 0$40 ) ;
13405: LD_INT 1400
13407: PPUSH
13408: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13412: LD_VAR 0 2
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: PPUSH
13421: LD_INT 41
13423: PPUSH
13424: LD_INT 44
13426: PPUSH
13427: CALL_OW 111
// end ;
13431: PPOPN 2
13433: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13434: LD_EXP 21
13438: PPUSH
13439: CALL_OW 274
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 275
13451: PUSH
13452: LD_INT 100
13454: GREATEREQUAL
13455: IFFALSE 13683
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 6
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13508: LD_VAR 0 1
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: LD_INT 4
13519: PPUSH
13520: LD_INT 39
13522: PPUSH
13523: LD_INT 37
13525: PPUSH
13526: LD_INT 3
13528: PPUSH
13529: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13533: LD_VAR 0 1
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_INT 29
13544: PPUSH
13545: LD_INT 42
13547: PPUSH
13548: LD_INT 54
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13558: LD_VAR 0 1
13562: PUSH
13563: LD_INT 1
13565: ARRAY
13566: PPUSH
13567: LD_INT 6
13569: PPUSH
13570: LD_INT 38
13572: PPUSH
13573: LD_INT 48
13575: PPUSH
13576: LD_INT 0
13578: PPUSH
13579: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: LD_INT 2
13594: PPUSH
13595: LD_INT 32
13597: PPUSH
13598: LD_INT 38
13600: PPUSH
13601: LD_INT 2
13603: PPUSH
13604: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: LD_INT 26
13619: PPUSH
13620: LD_INT 39
13622: PPUSH
13623: LD_INT 55
13625: PPUSH
13626: LD_INT 3
13628: PPUSH
13629: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: PPUSH
13642: LD_INT 32
13644: PPUSH
13645: LD_INT 31
13647: PPUSH
13648: LD_INT 31
13650: PPUSH
13651: LD_INT 3
13653: PPUSH
13654: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13658: LD_VAR 0 1
13662: PUSH
13663: LD_INT 1
13665: ARRAY
13666: PPUSH
13667: LD_INT 31
13669: PPUSH
13670: LD_INT 50
13672: PPUSH
13673: LD_INT 51
13675: PPUSH
13676: LD_INT 4
13678: PPUSH
13679: CALL_OW 205
// end ;
13683: PPOPN 1
13685: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13686: LD_EXP 46
13690: IFFALSE 14247
13692: GO 13694
13694: DISABLE
13695: LD_INT 0
13697: PPUSH
13698: PPUSH
13699: PPUSH
// begin enable ;
13700: ENABLE
// if not ruMobile then
13701: LD_EXP 46
13705: NOT
13706: IFFALSE 13710
// exit ;
13708: GO 14247
// for i in ruMobile do
13710: LD_ADDR_VAR 0 1
13714: PUSH
13715: LD_EXP 46
13719: PUSH
13720: FOR_IN
13721: IFFALSE 14245
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13723: LD_VAR 0 1
13727: PPUSH
13728: CALL_OW 302
13732: NOT
13733: PUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 255
13743: PUSH
13744: LD_INT 3
13746: NONEQUAL
13747: OR
13748: IFFALSE 13768
// begin ruMobile := ruMobile diff i ;
13750: LD_ADDR_EXP 46
13754: PUSH
13755: LD_EXP 46
13759: PUSH
13760: LD_VAR 0 1
13764: DIFF
13765: ST_TO_ADDR
// continue ;
13766: GO 13720
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13768: LD_VAR 0 1
13772: PPUSH
13773: CALL_OW 110
13777: NOT
13778: PUSH
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 110
13788: PUSH
13789: LD_INT 0
13791: EQUAL
13792: OR
13793: IFFALSE 13908
// begin if GetFuel ( i ) < 50 then
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 261
13804: PUSH
13805: LD_INT 50
13807: LESS
13808: IFFALSE 13867
// begin ComMoveXY ( i , 106 , 88 ) ;
13810: LD_VAR 0 1
13814: PPUSH
13815: LD_INT 106
13817: PPUSH
13818: LD_INT 88
13820: PPUSH
13821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13825: LD_INT 35
13827: PPUSH
13828: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13832: LD_VAR 0 1
13836: PPUSH
13837: LD_INT 106
13839: PPUSH
13840: LD_INT 88
13842: PPUSH
13843: CALL_OW 297
13847: PUSH
13848: LD_INT 4
13850: LESS
13851: IFFALSE 13825
// SetFuel ( i , 100 ) ;
13853: LD_VAR 0 1
13857: PPUSH
13858: LD_INT 100
13860: PPUSH
13861: CALL_OW 240
// end else
13865: GO 13908
// if not IsInArea ( i , ruParking ) then
13867: LD_VAR 0 1
13871: PPUSH
13872: LD_INT 25
13874: PPUSH
13875: CALL_OW 308
13879: NOT
13880: IFFALSE 13896
// ComMoveToArea ( i , ruParking ) else
13882: LD_VAR 0 1
13886: PPUSH
13887: LD_INT 25
13889: PPUSH
13890: CALL_OW 113
13894: GO 13908
// SetTag ( i , 1 ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 110
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: IFFALSE 14051
// begin if GetLives ( i ) < 1000 then
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 256
13932: PUSH
13933: LD_INT 1000
13935: LESS
13936: IFFALSE 14028
// begin if not IsDrivenBy ( i ) then
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 311
13947: NOT
13948: IFFALSE 13952
// continue ;
13950: GO 13720
// mech := IsDrivenBy ( i ) ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 311
13966: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13967: LD_VAR 0 2
13971: PPUSH
13972: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 256
14006: PUSH
14007: LD_INT 1000
14009: EQUAL
14010: IFFALSE 13990
// ComEnterUnit ( mech , i ) ;
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 120
// end else
14026: GO 14051
// if IsDrivenBy ( i ) then
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 311
14037: IFFALSE 14051
// SetTag ( i , 2 ) ;
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_INT 2
14046: PPUSH
14047: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 110
14060: PUSH
14061: LD_INT 2
14063: EQUAL
14064: IFFALSE 14243
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14066: LD_ADDR_VAR 0 3
14070: PUSH
14071: LD_INT 24
14073: PPUSH
14074: LD_INT 81
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PPUSH
14084: CALL_OW 70
14088: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 256
14098: PUSH
14099: LD_INT 650
14101: LESS
14102: IFFALSE 14127
// begin ComStop ( i ) ;
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 141
// SetTag ( i , 0 ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 0
14120: PPUSH
14121: CALL_OW 109
// continue ;
14125: GO 13720
// end ; if enemy then
14127: LD_VAR 0 3
14131: IFFALSE 14171
// begin if not HasTask ( i ) then
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 314
14142: NOT
14143: IFFALSE 14169
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14145: LD_VAR 0 1
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 74
14164: PPUSH
14165: CALL_OW 115
// end else
14169: GO 14243
// if ruMobile > 2 then
14171: LD_EXP 46
14175: PUSH
14176: LD_INT 2
14178: GREATER
14179: IFFALSE 14243
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 81
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: ST_TO_ADDR
// if enemy then
14201: LD_VAR 0 3
14205: IFFALSE 14243
// if not HasTask ( i ) then
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 314
14216: NOT
14217: IFFALSE 14243
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_VAR 0 3
14228: PPUSH
14229: LD_VAR 0 1
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: CALL_OW 115
// end ; end ; end ;
14243: GO 13720
14245: POP
14246: POP
// end ; end_of_file
14247: PPOPN 3
14249: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14250: LD_INT 0
14252: PPUSH
14253: PPUSH
14254: PPUSH
14255: PPUSH
14256: PPUSH
14257: PPUSH
14258: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14259: LD_ADDR_VAR 0 3
14263: PUSH
14264: LD_INT 22
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 25
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 3
14296: PUSH
14297: LD_INT 54
14299: PUSH
14300: EMPTY
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 69
14317: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14318: LD_ADDR_VAR 0 7
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 6
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 54
14355: PUSH
14356: EMPTY
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14370: LD_ADDR_VAR 0 4
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_INT 6
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 21
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 25
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14415: LD_ADDR_VAR 0 6
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 6
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 21
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 25
14442: PUSH
14443: LD_INT 4
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14460: LD_ADDR_VAR 0 8
14464: PUSH
14465: LD_INT 22
14467: PUSH
14468: LD_INT 6
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 34
14487: PUSH
14488: LD_INT 51
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 255
14514: PUSH
14515: LD_INT 6
14517: EQUAL
14518: PUSH
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 266
14528: PUSH
14529: LD_INT 0
14531: EQUAL
14532: AND
14533: IFFALSE 14553
// begin ruPDepot = building ;
14535: LD_ADDR_EXP 21
14539: PUSH
14540: LD_VAR 0 1
14544: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14545: LD_ADDR_EXP 20
14549: PUSH
14550: LD_INT 1
14552: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 266
14562: PUSH
14563: LD_INT 4
14565: EQUAL
14566: PUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 255
14576: PUSH
14577: LD_INT 6
14579: EQUAL
14580: AND
14581: IFFALSE 14614
// for i in tmpSold do
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_VAR 0 3
14592: PUSH
14593: FOR_IN
14594: IFFALSE 14612
// ComEnterUnit ( i , building ) ;
14596: LD_VAR 0 2
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 120
14610: GO 14593
14612: POP
14613: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 266
14623: PUSH
14624: LD_INT 6
14626: EQUAL
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: PUSH
14638: LD_INT 6
14640: EQUAL
14641: AND
14642: IFFALSE 14700
// begin for i in tmpSci do
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_VAR 0 6
14653: PUSH
14654: FOR_IN
14655: IFFALSE 14673
// ComEnterUnit ( i , building ) ;
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 120
14671: GO 14654
14673: POP
14674: POP
// ResAllTechs ( 6 , building , 3 ) ;
14675: LD_INT 6
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 3
14685: PPUSH
14686: CALL 5959 0 3
// ruPLab = building ;
14690: LD_ADDR_EXP 22
14694: PUSH
14695: LD_VAR 0 1
14699: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 266
14709: PUSH
14710: LD_INT 2
14712: EQUAL
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 255
14723: PUSH
14724: LD_INT 6
14726: EQUAL
14727: AND
14728: IFFALSE 14779
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14730: LD_ADDR_VAR 0 5
14734: PUSH
14735: LD_VAR 0 8
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PPUSH
14744: CALL_OW 313
14748: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14749: LD_VAR 0 5
14753: PPUSH
14754: CALL_OW 121
// wait ( 0 0$1 ) ;
14758: LD_INT 35
14760: PPUSH
14761: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14765: LD_VAR 0 5
14769: PPUSH
14770: LD_VAR 0 1
14774: PPUSH
14775: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14779: LD_VAR 0 1
14783: PPUSH
14784: CALL_OW 266
14788: PUSH
14789: LD_INT 32
14791: EQUAL
14792: PUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 6
14805: EQUAL
14806: AND
14807: IFFALSE 14859
// begin ComPlaceWeapon ( building , 42 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 42
14816: PPUSH
14817: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14821: LD_VAR 0 7
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: CALL_OW 122
// wait ( 0 0$1 ) ;
14834: LD_INT 35
14836: PPUSH
14837: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14841: LD_VAR 0 7
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 266
14868: PUSH
14869: LD_INT 31
14871: EQUAL
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 255
14882: PUSH
14883: LD_INT 6
14885: EQUAL
14886: AND
14887: IFFALSE 14953
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14889: LD_VAR 0 7
14893: PUSH
14894: LD_INT 2
14896: ARRAY
14897: PPUSH
14898: CALL_OW 122
// wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14909: LD_VAR 0 7
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: PPUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14927: LD_VAR 0 4
14931: PUSH
14932: LD_INT 1
14934: ARRAY
14935: PPUSH
14936: LD_EXP 21
14940: PPUSH
14941: CALL_OW 120
// baseReadyToBuild = 2 ;
14945: LD_ADDR_EXP 20
14949: PUSH
14950: LD_INT 2
14952: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 266
14962: PUSH
14963: LD_INT 32
14965: EQUAL
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 1
14979: EQUAL
14980: AND
14981: PUSH
14982: LD_EXP 32
14986: PUSH
14987: LD_INT 0
14989: EQUAL
14990: AND
14991: IFFALSE 15236
// begin bunkerDialog = 1 ;
14993: LD_ADDR_EXP 32
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15001: LD_EXP 11
15005: PPUSH
15006: CALL_OW 302
15010: IFFALSE 15026
// Say ( Claptopn , D11-Eng1-1 ) else
15012: LD_EXP 11
15016: PPUSH
15017: LD_STRING D11-Eng1-1
15019: PPUSH
15020: CALL_OW 88
15024: GO 15222
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15026: LD_INT 22
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 21
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 26
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: PUSH
15077: LD_EXP 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: PUSH
15085: LD_INT 0
15087: GREATER
15088: DIFF
15089: IFFALSE 15163
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15091: LD_INT 22
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 25
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 26
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PPUSH
15137: CALL_OW 69
15141: PUSH
15142: LD_EXP 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: DIFF
15150: PPUSH
15151: LD_STRING D11-Eng1-1
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: CALL 4606 0 3
15161: GO 15222
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15163: LD_INT 22
15165: PUSH
15166: LD_INT 1
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 26
15185: PUSH
15186: LD_INT 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 69
15202: PUSH
15203: LD_EXP 1
15207: PUSH
15208: EMPTY
15209: LIST
15210: DIFF
15211: PPUSH
15212: LD_STRING D11-Eng1-1
15214: PPUSH
15215: LD_STRING D11-Eng1-1
15217: PPUSH
15218: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15222: LD_EXP 33
15226: PUSH
15227: LD_INT 0
15229: EQUAL
15230: IFFALSE 15236
// EnergyDialog ;
15232: CALL 5011 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 266
15245: PUSH
15246: LD_INT 29
15248: EQUAL
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 255
15259: PUSH
15260: LD_INT 1
15262: EQUAL
15263: AND
15264: IFFALSE 15274
// buildOil = 1 ;
15266: LD_ADDR_EXP 34
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 266
15283: PUSH
15284: LD_INT 26
15286: EQUAL
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 255
15297: PUSH
15298: LD_INT 1
15300: EQUAL
15301: AND
15302: IFFALSE 15312
// buildPower = 1 ;
15304: LD_ADDR_EXP 35
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// end ;
15312: PPOPN 8
15314: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 266
15324: PUSH
15325: LD_INT 3
15327: EQUAL
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 255
15338: PUSH
15339: LD_INT 1
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_EXP 31
15348: PUSH
15349: LD_INT 0
15351: EQUAL
15352: AND
15353: IFFALSE 15701
// begin factoryDialog = 1 ;
15355: LD_ADDR_EXP 31
15359: PUSH
15360: LD_INT 1
15362: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15363: LD_INT 47
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 321
15373: PUSH
15374: LD_INT 1
15376: EQUAL
15377: PUSH
15378: LD_INT 45
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 321
15388: PUSH
15389: LD_INT 1
15391: EQUAL
15392: AND
15393: IFFALSE 15701
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15395: LD_INT 22
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 24
15427: PUSH
15428: LD_INT 1000
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: PUSH
15446: LD_INT 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15454: LD_EXP 1
15458: PPUSH
15459: LD_STRING D9a-JMM-1
15461: PPUSH
15462: CALL_OW 88
// if IsOK ( Campell ) then
15466: LD_EXP 12
15470: PPUSH
15471: CALL_OW 302
15475: IFFALSE 15491
// Say ( Campell , D9a-Mech1-1 ) else
15477: LD_EXP 12
15481: PPUSH
15482: LD_STRING D9a-Mech1-1
15484: PPUSH
15485: CALL_OW 88
15489: GO 15687
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15491: LD_INT 22
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 21
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 26
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PUSH
15542: LD_EXP 1
15546: PUSH
15547: EMPTY
15548: LIST
15549: PUSH
15550: LD_INT 0
15552: GREATER
15553: DIFF
15554: IFFALSE 15628
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15556: LD_INT 22
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 25
15578: PUSH
15579: LD_INT 3
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 26
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 69
15606: PUSH
15607: LD_EXP 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: DIFF
15615: PPUSH
15616: LD_STRING D9a-Mech1-1
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: CALL 4606 0 3
15626: GO 15687
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15628: LD_INT 22
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 26
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 69
15667: PUSH
15668: LD_EXP 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: DIFF
15676: PPUSH
15677: LD_STRING D9a-Mech1-1
15679: PPUSH
15680: LD_STRING D9a-Mech1-1
15682: PPUSH
15683: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15687: LD_EXP 33
15691: PUSH
15692: LD_INT 0
15694: EQUAL
15695: IFFALSE 15701
// EnergyDialog ;
15697: CALL 5011 0 0
// end ; end ; end ;
15701: PPOPN 1
15703: END
// on UnitDestroyed ( unit ) do var mech ;
15704: LD_INT 0
15706: PPUSH
// begin if unit = JMM then
15707: LD_VAR 0 1
15711: PUSH
15712: LD_EXP 1
15716: EQUAL
15717: IFFALSE 15726
// YouLost ( JMM ) ;
15719: LD_STRING JMM
15721: PPUSH
15722: CALL_OW 104
// if unit = ambdept0 then
15726: LD_VAR 0 1
15730: PUSH
15731: LD_INT 4
15733: EQUAL
15734: IFFALSE 15743
// YouLost ( Base ) ;
15736: LD_STRING Base
15738: PPUSH
15739: CALL_OW 104
// if unit in ruMobile then
15743: LD_VAR 0 1
15747: PUSH
15748: LD_EXP 46
15752: IN
15753: IFFALSE 15771
// ruMobile = ruMobile diff ruMobile ;
15755: LD_ADDR_EXP 46
15759: PUSH
15760: LD_EXP 46
15764: PUSH
15765: LD_EXP 46
15769: DIFF
15770: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 247
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: PUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 255
15794: PUSH
15795: LD_INT 1
15797: EQUAL
15798: AND
15799: IFFALSE 15815
// lostCounter = lostCounter + 1 ;
15801: LD_ADDR_EXP 38
15805: PUSH
15806: LD_EXP 38
15810: PUSH
15811: LD_INT 1
15813: PLUS
15814: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15815: LD_EXP 43
15819: PUSH
15820: LD_INT 24
15822: PPUSH
15823: CALL_OW 313
15827: PUSH
15828: LD_INT 6
15830: LESS
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 255
15857: PUSH
15858: LD_INT 3
15860: EQUAL
15861: AND
15862: PUSH
15863: LD_INT 24
15865: PPUSH
15866: CALL_OW 302
15870: AND
15871: PUSH
15872: LD_INT 24
15874: PPUSH
15875: CALL_OW 255
15879: PUSH
15880: LD_INT 3
15882: EQUAL
15883: AND
15884: IFFALSE 16013
// begin ruMech := ruMech - 1 ;
15886: LD_ADDR_EXP 43
15890: PUSH
15891: LD_EXP 43
15895: PUSH
15896: LD_INT 1
15898: MINUS
15899: ST_TO_ADDR
// if ruMech = 0 then
15900: LD_EXP 43
15904: PUSH
15905: LD_INT 0
15907: EQUAL
15908: IFFALSE 15912
// exit ;
15910: GO 16013
// wait ( 0 0$40 ) ;
15912: LD_INT 1400
15914: PPUSH
15915: CALL_OW 67
// uc_side = 3 ;
15919: LD_ADDR_OWVAR 20
15923: PUSH
15924: LD_INT 3
15926: ST_TO_ADDR
// uc_nation = 3 ;
15927: LD_ADDR_OWVAR 21
15931: PUSH
15932: LD_INT 3
15934: ST_TO_ADDR
// hc_gallery :=  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_name :=  ;
15943: LD_ADDR_OWVAR 26
15947: PUSH
15948: LD_STRING 
15950: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15951: LD_INT 0
15953: PPUSH
15954: LD_EXP 16
15958: PPUSH
15959: LD_EXP 17
15963: PPUSH
15964: CALL_OW 12
15968: PPUSH
15969: CALL_OW 383
// mech := CreateHuman ;
15973: LD_ADDR_VAR 0 2
15977: PUSH
15978: CALL_OW 44
15982: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15983: LD_VAR 0 2
15987: PPUSH
15988: LD_INT 124
15990: PPUSH
15991: LD_INT 97
15993: PPUSH
15994: LD_INT 0
15996: PPUSH
15997: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16001: LD_VAR 0 2
16005: PPUSH
16006: LD_INT 24
16008: PPUSH
16009: CALL_OW 120
// end ; end ;
16013: PPOPN 2
16015: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16016: LD_INT 0
16018: PPUSH
// begin if GetSide ( vehicle ) = 1 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PUSH
16029: LD_INT 1
16031: EQUAL
16032: IFFALSE 16048
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16034: LD_ADDR_EXP 42
16038: PUSH
16039: LD_EXP 42
16043: PUSH
16044: LD_INT 1
16046: PLUS
16047: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 3
16060: EQUAL
16061: PUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 264
16071: PUSH
16072: LD_INT 42
16074: PUSH
16075: LD_INT 43
16077: PUSH
16078: LD_INT 44
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: IN
16086: AND
16087: IFFALSE 16105
// ruMobile := ruMobile union vehicle ;
16089: LD_ADDR_EXP 46
16093: PUSH
16094: LD_EXP 46
16098: PUSH
16099: LD_VAR 0 1
16103: UNION
16104: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 264
16114: PUSH
16115: LD_INT 53
16117: EQUAL
16118: IFFALSE 16254
// begin uc_side = 3 ;
16120: LD_ADDR_OWVAR 20
16124: PUSH
16125: LD_INT 3
16127: ST_TO_ADDR
// uc_nation = 3 ;
16128: LD_ADDR_OWVAR 21
16132: PUSH
16133: LD_INT 3
16135: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16136: LD_INT 0
16138: PPUSH
16139: LD_EXP 17
16143: PPUSH
16144: CALL_OW 383
// driver := CreateHuman ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: CALL_OW 44
16157: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16172: LD_VAR 0 1
16176: PPUSH
16177: LD_INT 21
16179: PPUSH
16180: CALL 5227 0 2
// repeat wait ( 0 0$1 ) ;
16184: LD_INT 35
16186: PPUSH
16187: CALL_OW 67
// until not HasTask ( vehicle ) ;
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 314
16200: NOT
16201: IFFALSE 16184
// driver := IsDrivenBy ( vehicle ) ;
16203: LD_ADDR_VAR 0 3
16207: PUSH
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 311
16217: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16218: LD_VAR 0 3
16222: PPUSH
16223: LD_INT 104
16225: PPUSH
16226: LD_INT 73
16228: PPUSH
16229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16233: LD_VAR 0 3
16237: PPUSH
16238: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16242: LD_VAR 0 3
16246: PPUSH
16247: LD_INT 24
16249: PPUSH
16250: CALL_OW 180
// end ; end ;
16254: PPOPN 3
16256: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 255
16266: PUSH
16267: LD_INT 3
16269: EQUAL
16270: PUSH
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 247
16280: PUSH
16281: LD_INT 2
16283: EQUAL
16284: AND
16285: PUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 264
16295: PUSH
16296: LD_INT 42
16298: PUSH
16299: LD_INT 43
16301: PUSH
16302: LD_INT 44
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: IN
16310: AND
16311: IFFALSE 16360
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16313: LD_INT 24
16315: PPUSH
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 265
16325: PPUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 262
16335: PPUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 263
16345: PPUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 264
16355: PPUSH
16356: CALL_OW 185
// end ;
16360: PPOPN 1
16362: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 255
16372: PUSH
16373: LD_INT 3
16375: EQUAL
16376: PUSH
16377: LD_VAR 0 2
16381: PPUSH
16382: CALL_OW 255
16386: PUSH
16387: LD_INT 3
16389: EQUAL
16390: AND
16391: PUSH
16392: LD_INT 24
16394: PPUSH
16395: CALL_OW 302
16399: AND
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 302
16410: NOT
16411: AND
16412: IFFALSE 16426
// ComEnterUnit ( human , rubfact0 ) ;
16414: LD_VAR 0 2
16418: PPUSH
16419: LD_INT 24
16421: PPUSH
16422: CALL_OW 120
// end ;
16426: PPOPN 2
16428: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 24
16436: EQUAL
16437: PUSH
16438: LD_VAR 0 2
16442: PPUSH
16443: CALL_OW 256
16447: PUSH
16448: LD_INT 1000
16450: LESS
16451: AND
16452: IFFALSE 16466
// SetLives ( un , 1000 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 1000
16461: PPUSH
16462: CALL_OW 234
// end ;
16466: PPOPN 2
16468: END
// on Command ( comandid ) do var i , j , tmp ;
16469: LD_INT 0
16471: PPUSH
16472: PPUSH
16473: PPUSH
// begin SOS_Command ( comandid ) ;
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL 33778 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16483: LD_INT 22
16485: PUSH
16486: LD_INT 4
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: NOT
16498: IFFALSE 16502
// exit ;
16500: GO 16667
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_INT 22
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 21
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: PUSH
16554: FOR_IN
16555: IFFALSE 16665
// begin if GetTaskList ( i ) > 0 then
16557: LD_VAR 0 2
16561: PPUSH
16562: CALL_OW 437
16566: PUSH
16567: LD_INT 0
16569: GREATER
16570: IFFALSE 16663
// begin for j = 1 to GetTaskList ( i ) do
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: DOUBLE
16578: LD_INT 1
16580: DEC
16581: ST_TO_ADDR
16582: LD_VAR 0 2
16586: PPUSH
16587: CALL_OW 437
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16661
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16595: LD_ADDR_VAR 0 4
16599: PUSH
16600: LD_VAR 0 2
16604: PPUSH
16605: CALL_OW 437
16609: PUSH
16610: LD_VAR 0 3
16614: ARRAY
16615: PUSH
16616: LD_INT 4
16618: ARRAY
16619: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16620: LD_VAR 0 4
16624: PPUSH
16625: CALL_OW 255
16629: PUSH
16630: LD_INT 4
16632: EQUAL
16633: PUSH
16634: LD_VAR 0 4
16638: PPUSH
16639: CALL_OW 255
16643: PUSH
16644: LD_INT 0
16646: EQUAL
16647: OR
16648: IFFALSE 16659
// ComStop ( i ) ;
16650: LD_VAR 0 2
16654: PPUSH
16655: CALL_OW 141
// end ;
16659: GO 16592
16661: POP
16662: POP
// end ; end ;
16663: GO 16554
16665: POP
16666: POP
// end ; end_of_file
16667: PPOPN 4
16669: END
// every 10 10$0 do
16670: GO 16672
16672: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16673: LD_INT 5
16675: PPUSH
16676: LD_INT 3
16678: PPUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: LD_INT 3
16687: PUSH
16688: LD_INT 4
16690: PUSH
16691: LD_INT 4
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_OWVAR 67
16704: ARRAY
16705: PLUS
16706: PPUSH
16707: LD_INT 0
16709: PPUSH
16710: LD_EXP 16
16714: PPUSH
16715: LD_EXP 17
16719: PPUSH
16720: CALL_OW 12
16724: PPUSH
16725: LD_INT 4
16727: PPUSH
16728: LD_INT 14
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: LD_INT 2
16736: PPUSH
16737: CALL 6968 0 9
16741: END
// every 20 20$0 do
16742: GO 16744
16744: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16745: LD_INT 5
16747: PPUSH
16748: LD_INT 3
16750: PPUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 3
16759: PUSH
16760: LD_INT 4
16762: PUSH
16763: LD_INT 5
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_OWVAR 67
16776: ARRAY
16777: PLUS
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: LD_EXP 16
16786: PPUSH
16787: LD_EXP 17
16791: PPUSH
16792: CALL_OW 12
16796: PPUSH
16797: LD_INT 4
16799: PPUSH
16800: LD_INT 14
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL 6968 0 9
16813: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16814: GO 16816
16816: DISABLE
16817: LD_INT 0
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin hex := [ 123 , 95 ] ;
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_INT 123
16831: PUSH
16832: LD_INT 95
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: ST_TO_ADDR
// tmp := [ ] ;
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: EMPTY
16845: ST_TO_ADDR
// if Difficulty > 1 then
16846: LD_OWVAR 67
16850: PUSH
16851: LD_INT 1
16853: GREATER
16854: IFFALSE 16864
// specAttack := true ;
16856: LD_ADDR_EXP 47
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: DOUBLE
16870: LD_INT 1
16872: DEC
16873: ST_TO_ADDR
16874: LD_INT 4
16876: PUSH
16877: LD_INT 5
16879: PUSH
16880: LD_INT 6
16882: PUSH
16883: LD_INT 7
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: LD_OWVAR 67
16896: ARRAY
16897: PUSH
16898: FOR_TO
16899: IFFALSE 17197
// begin uc_side := 5 ;
16901: LD_ADDR_OWVAR 20
16905: PUSH
16906: LD_INT 5
16908: ST_TO_ADDR
// uc_nation := 3 ;
16909: LD_ADDR_OWVAR 21
16913: PUSH
16914: LD_INT 3
16916: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16917: LD_ADDR_OWVAR 37
16921: PUSH
16922: LD_INT 21
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_INT 23
16930: PUSH
16931: LD_INT 24
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: LD_VAR 0 1
16944: PUSH
16945: LD_OWVAR 67
16949: MOD
16950: PUSH
16951: LD_INT 1
16953: PLUS
16954: ARRAY
16955: ST_TO_ADDR
// vc_engine := engine_combustion ;
16956: LD_ADDR_OWVAR 39
16960: PUSH
16961: LD_INT 1
16963: ST_TO_ADDR
// vc_control := control_manual ;
16964: LD_ADDR_OWVAR 38
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16972: LD_ADDR_OWVAR 40
16976: PUSH
16977: LD_INT 42
16979: PUSH
16980: LD_INT 43
16982: PUSH
16983: LD_INT 44
16985: PUSH
16986: LD_INT 44
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: LD_VAR 0 1
16999: PUSH
17000: LD_OWVAR 67
17004: MOD
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: ARRAY
17010: ST_TO_ADDR
// veh := CreateVehicle ;
17011: LD_ADDR_VAR 0 3
17015: PUSH
17016: CALL_OW 45
17020: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 5
17028: PPUSH
17029: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17033: LD_INT 35
17035: PPUSH
17036: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17040: LD_VAR 0 4
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 4
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 428
17062: PUSH
17063: LD_INT 0
17065: EQUAL
17066: IFFALSE 17033
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17068: LD_VAR 0 3
17072: PPUSH
17073: LD_VAR 0 4
17077: PUSH
17078: LD_INT 1
17080: ARRAY
17081: PPUSH
17082: LD_VAR 0 4
17086: PUSH
17087: LD_INT 2
17089: ARRAY
17090: PPUSH
17091: LD_INT 0
17093: PPUSH
17094: CALL_OW 48
// uc_side := 5 ;
17098: LD_ADDR_OWVAR 20
17102: PUSH
17103: LD_INT 5
17105: ST_TO_ADDR
// uc_nation := 3 ;
17106: LD_ADDR_OWVAR 21
17110: PUSH
17111: LD_INT 3
17113: ST_TO_ADDR
// PrepareMechanic ( false , 2 + Difficulty ) ;
17114: LD_INT 0
17116: PPUSH
17117: LD_INT 2
17119: PUSH
17120: LD_OWVAR 67
17124: PLUS
17125: PPUSH
17126: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17130: CALL_OW 44
17134: PPUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17144: LD_VAR 0 3
17148: PPUSH
17149: LD_INT 101
17151: PPUSH
17152: LD_INT 77
17154: PPUSH
17155: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17159: LD_ADDR_VAR 0 5
17163: PUSH
17164: LD_VAR 0 5
17168: PPUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_INT 1
17176: PLUS
17177: PPUSH
17178: LD_VAR 0 3
17182: PPUSH
17183: CALL_OW 1
17187: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17188: LD_INT 105
17190: PPUSH
17191: CALL_OW 67
// end ;
17195: GO 16898
17197: POP
17198: POP
// repeat wait ( 0 0$1 ) ;
17199: LD_INT 35
17201: PPUSH
17202: CALL_OW 67
// for i in tmp do
17206: LD_ADDR_VAR 0 1
17210: PUSH
17211: LD_VAR 0 5
17215: PUSH
17216: FOR_IN
17217: IFFALSE 17285
// if not IsOk ( i ) then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 302
17228: NOT
17229: IFFALSE 17249
// tmp := tmp diff i else
17231: LD_ADDR_VAR 0 5
17235: PUSH
17236: LD_VAR 0 5
17240: PUSH
17241: LD_VAR 0 1
17245: DIFF
17246: ST_TO_ADDR
17247: GO 17283
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 22
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: PPUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 74
17278: PPUSH
17279: CALL_OW 115
17283: GO 17216
17285: POP
17286: POP
// until not tmp ;
17287: LD_VAR 0 5
17291: NOT
17292: IFFALSE 17199
// end ;
17294: PPOPN 5
17296: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17297: LD_EXP 47
17301: IFFALSE 17668
17303: GO 17305
17305: DISABLE
17306: LD_INT 0
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
// begin wait ( 0 0$20 ) ;
17312: LD_INT 700
17314: PPUSH
17315: CALL_OW 67
// uc_side := 5 ;
17319: LD_ADDR_OWVAR 20
17323: PUSH
17324: LD_INT 5
17326: ST_TO_ADDR
// uc_nation := 3 ;
17327: LD_ADDR_OWVAR 21
17331: PUSH
17332: LD_INT 3
17334: ST_TO_ADDR
// InitHc ;
17335: CALL_OW 19
// hc_importance := 0 ;
17339: LD_ADDR_OWVAR 32
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// tmp := [ ] ;
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: EMPTY
17353: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: LD_INT 6
17362: PPUSH
17363: CALL_OW 380
// eng := CreateHuman ;
17367: LD_ADDR_VAR 0 4
17371: PUSH
17372: CALL_OW 44
17376: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17377: LD_VAR 0 4
17381: PPUSH
17382: LD_INT 78
17384: PPUSH
17385: LD_INT 2
17387: PPUSH
17388: LD_INT 4
17390: PPUSH
17391: LD_INT 0
17393: PPUSH
17394: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17398: LD_ADDR_VAR 0 3
17402: PUSH
17403: DOUBLE
17404: LD_INT 1
17406: DEC
17407: ST_TO_ADDR
17408: LD_INT 2
17410: PUSH
17411: LD_OWVAR 67
17415: PLUS
17416: PUSH
17417: FOR_TO
17418: IFFALSE 17503
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17420: LD_INT 0
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_INT 4
17428: PUSH
17429: LD_INT 5
17431: PUSH
17432: LD_INT 6
17434: PUSH
17435: LD_INT 6
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: LD_OWVAR 67
17448: ARRAY
17449: PPUSH
17450: CALL_OW 380
// un := CreateHuman ;
17454: LD_ADDR_VAR 0 1
17458: PUSH
17459: CALL_OW 44
17463: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 78
17471: PPUSH
17472: LD_INT 2
17474: PPUSH
17475: LD_INT 4
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 50
// tmp := tmp ^ un ;
17485: LD_ADDR_VAR 0 2
17489: PUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 1
17499: ADD
17500: ST_TO_ADDR
// end ;
17501: GO 17417
17503: POP
17504: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17505: LD_VAR 0 2
17509: PPUSH
17510: LD_INT 49
17512: PPUSH
17513: LD_INT 3
17515: PPUSH
17516: CALL_OW 111
// wait ( 0 0$2 ) ;
17520: LD_INT 70
17522: PPUSH
17523: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17527: LD_VAR 0 4
17531: PPUSH
17532: LD_INT 49
17534: PPUSH
17535: LD_INT 3
17537: PPUSH
17538: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17542: LD_VAR 0 4
17546: PPUSH
17547: LD_INT 4
17549: PPUSH
17550: CALL_OW 227
// wait ( 0 0$10 ) ;
17554: LD_INT 350
17556: PPUSH
17557: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17561: LD_INT 35
17563: PPUSH
17564: CALL_OW 67
// for i in tmp do
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17659
// if not IsOk ( i ) then
17581: LD_VAR 0 3
17585: PPUSH
17586: CALL_OW 302
17590: NOT
17591: IFFALSE 17611
// tmp := tmp diff i else
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_VAR 0 2
17602: PUSH
17603: LD_VAR 0 3
17607: DIFF
17608: ST_TO_ADDR
17609: GO 17657
// if not HasTask ( i ) then
17611: LD_VAR 0 3
17615: PPUSH
17616: CALL_OW 314
17620: NOT
17621: IFFALSE 17657
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: CALL_OW 74
17652: PPUSH
17653: CALL_OW 115
17657: GO 17578
17659: POP
17660: POP
// until not tmp ;
17661: LD_VAR 0 2
17665: NOT
17666: IFFALSE 17561
// end ; end_of_file
17668: PPOPN 4
17670: END
// every 0 0$1 trigger startTimer = 1 do
17671: LD_EXP 30
17675: PUSH
17676: LD_INT 1
17678: EQUAL
17679: IFFALSE 17809
17681: GO 17683
17683: DISABLE
// begin enable ;
17684: ENABLE
// if timerStatus = 1 then
17685: LD_EXP 29
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: IFFALSE 17726
// begin timeToSupport = timeToSupport - 0 0$01 ;
17695: LD_ADDR_EXP 28
17699: PUSH
17700: LD_EXP 28
17704: PUSH
17705: LD_INT 35
17707: MINUS
17708: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17709: LD_ADDR_OWVAR 47
17713: PUSH
17714: LD_STRING #Am04-1
17716: PUSH
17717: LD_EXP 28
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: ST_TO_ADDR
// end ; if timerStatus = 2 then
17726: LD_EXP 29
17730: PUSH
17731: LD_INT 2
17733: EQUAL
17734: IFFALSE 17767
// begin timeToSupport = timeToSupport - 0 0$01 ;
17736: LD_ADDR_EXP 28
17740: PUSH
17741: LD_EXP 28
17745: PUSH
17746: LD_INT 35
17748: MINUS
17749: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17750: LD_ADDR_OWVAR 47
17754: PUSH
17755: LD_STRING #Am04-2
17757: PUSH
17758: LD_EXP 28
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: ST_TO_ADDR
// end ; if timerStatus = 3 then
17767: LD_EXP 29
17771: PUSH
17772: LD_INT 3
17774: EQUAL
17775: IFFALSE 17791
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17777: LD_ADDR_EXP 27
17781: PUSH
17782: LD_EXP 27
17786: PUSH
17787: LD_INT 35
17789: MINUS
17790: ST_TO_ADDR
// if timerStatus = 4 then
17791: LD_EXP 29
17795: PUSH
17796: LD_INT 4
17798: EQUAL
17799: IFFALSE 17809
// display_strings =  ;
17801: LD_ADDR_OWVAR 47
17805: PUSH
17806: LD_STRING 
17808: ST_TO_ADDR
// end ; end_of_file
17809: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17810: LD_EXP 15
17814: PPUSH
17815: CALL_OW 301
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 21
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 69
17848: PUSH
17849: LD_INT 14
17851: PUSH
17852: LD_INT 13
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 11
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: LD_OWVAR 67
17871: ARRAY
17872: LESS
17873: AND
17874: IFFALSE 18460
17876: GO 17878
17878: DISABLE
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
// begin AIEnable = 0 ;
17884: LD_ADDR_EXP 37
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// escapeAvalaible = 1 ;
17892: LD_ADDR_EXP 40
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// Video ( true ) ;
17900: LD_INT 1
17902: PPUSH
17903: CALL 74386 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17907: LD_INT 3
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: LD_INT 0
17918: PPUSH
17919: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17923: LD_INT 6
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: LD_INT 1
17931: PPUSH
17932: LD_INT 0
17934: PPUSH
17935: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17939: LD_INT 5
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: LD_INT 0
17950: PPUSH
17951: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17955: LD_INT 3
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17965: LD_INT 97
17967: PPUSH
17968: LD_INT 91
17970: PPUSH
17971: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17975: LD_INT 22
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 21
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: PPUSH
18004: CALL_OW 121
// wait ( 0 0$01 ) ;
18008: LD_INT 35
18010: PPUSH
18011: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 21
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PPUSH
18039: CALL_OW 69
18043: PPUSH
18044: LD_INT 124
18046: PPUSH
18047: LD_INT 98
18049: PPUSH
18050: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18054: LD_INT 22
18056: PUSH
18057: LD_INT 5
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 21
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 69
18082: PPUSH
18083: CALL_OW 121
// wait ( 0 0$01 ) ;
18087: LD_INT 35
18089: PPUSH
18090: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18094: LD_INT 22
18096: PUSH
18097: LD_INT 5
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 21
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PPUSH
18123: LD_INT 124
18125: PPUSH
18126: LD_INT 98
18128: PPUSH
18129: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 6
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 21
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PPUSH
18157: CALL_OW 69
18161: PPUSH
18162: CALL_OW 121
// wait ( 0 0$01 ) ;
18166: LD_INT 35
18168: PPUSH
18169: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18173: LD_INT 22
18175: PUSH
18176: LD_INT 6
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 21
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: PPUSH
18202: LD_INT 124
18204: PPUSH
18205: LD_INT 98
18207: PPUSH
18208: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18212: LD_INT 22
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 21
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: PPUSH
18241: LD_INT 124
18243: PPUSH
18244: LD_INT 96
18246: PPUSH
18247: CALL_OW 114
// wait ( 0 0$1 ) ;
18251: LD_INT 35
18253: PPUSH
18254: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18258: LD_INT 124
18260: PPUSH
18261: LD_INT 96
18263: PPUSH
18264: CALL_OW 84
// p := 0 0$0 ;
18268: LD_ADDR_VAR 0 3
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18276: LD_ADDR_VAR 0 2
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 22
18296: PUSH
18297: LD_INT 6
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18328: LD_INT 35
18330: PPUSH
18331: CALL_OW 67
// p := p + 0 0$1 ;
18335: LD_ADDR_VAR 0 3
18339: PUSH
18340: LD_VAR 0 3
18344: PUSH
18345: LD_INT 35
18347: PLUS
18348: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_INT 5
18356: PPUSH
18357: CALL_OW 113
// for i in tmp do
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: LD_VAR 0 2
18370: PUSH
18371: FOR_IN
18372: IFFALSE 18399
// if IsInArea ( tmp , RussianEscape ) then
18374: LD_VAR 0 2
18378: PPUSH
18379: LD_INT 5
18381: PPUSH
18382: CALL_OW 308
18386: IFFALSE 18397
// RemoveUnit ( i ) ;
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 64
18397: GO 18371
18399: POP
18400: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18401: LD_INT 23
18403: PUSH
18404: LD_INT 3
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 21
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 24
18423: PUSH
18424: LD_INT 250
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: PUSH
18441: LD_INT 0
18443: EQUAL
18444: PUSH
18445: LD_VAR 0 3
18449: PUSH
18450: LD_INT 245
18452: GREATEREQUAL
18453: OR
18454: IFFALSE 18328
// FinishMission ;
18456: CALL 18463 0 0
// end ;
18460: PPOPN 3
18462: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18463: LD_INT 0
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
// if not vehicleProduceCounter then
18470: LD_EXP 42
18474: NOT
18475: IFFALSE 18484
// SetAchievement ( ACH_INFANTRY ) ;
18477: LD_STRING ACH_INFANTRY
18479: PPUSH
18480: CALL_OW 543
// if tick <= 20 20$00 then
18484: LD_OWVAR 1
18488: PUSH
18489: LD_INT 42000
18491: LESSEQUAL
18492: IFFALSE 18508
// begin wait ( 3 ) ;
18494: LD_INT 3
18496: PPUSH
18497: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18501: LD_STRING ACH_ASPEED_4
18503: PPUSH
18504: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18508: LD_INT 22
18510: PPUSH
18511: CALL 19152 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18515: LD_INT 69
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 321
18525: PPUSH
18526: LD_STRING GatlingInGamma
18528: PPUSH
18529: CALL_OW 39
// m1 := false ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
// m2 := false ;
18541: LD_ADDR_VAR 0 4
18545: PUSH
18546: LD_INT 0
18548: ST_TO_ADDR
// m3 := false ;
18549: LD_ADDR_VAR 0 5
18553: PUSH
18554: LD_INT 0
18556: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18557: LD_EXP 34
18561: PUSH
18562: LD_INT 1
18564: EQUAL
18565: PUSH
18566: LD_EXP 35
18570: PUSH
18571: LD_INT 1
18573: EQUAL
18574: AND
18575: IFFALSE 18597
// begin AddMedal ( oil , 1 ) ;
18577: LD_STRING oil
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 101
// m1 := true ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 1
18594: ST_TO_ADDR
// end else
18595: GO 18690
// begin if buildOil = 1 and buildPower = 0 then
18597: LD_EXP 34
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: PUSH
18606: LD_EXP 35
18610: PUSH
18611: LD_INT 0
18613: EQUAL
18614: AND
18615: IFFALSE 18628
// AddMedal ( oil , - 1 ) ;
18617: LD_STRING oil
18619: PPUSH
18620: LD_INT 1
18622: NEG
18623: PPUSH
18624: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18628: LD_EXP 34
18632: PUSH
18633: LD_INT 0
18635: EQUAL
18636: PUSH
18637: LD_EXP 35
18641: PUSH
18642: LD_INT 1
18644: EQUAL
18645: AND
18646: IFFALSE 18659
// AddMedal ( oil , - 2 ) ;
18648: LD_STRING oil
18650: PPUSH
18651: LD_INT 2
18653: NEG
18654: PPUSH
18655: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18659: LD_EXP 34
18663: PUSH
18664: LD_INT 0
18666: EQUAL
18667: PUSH
18668: LD_EXP 35
18672: PUSH
18673: LD_INT 0
18675: EQUAL
18676: AND
18677: IFFALSE 18690
// AddMedal ( oil , - 3 ) ;
18679: LD_STRING oil
18681: PPUSH
18682: LD_INT 3
18684: NEG
18685: PPUSH
18686: CALL_OW 101
// end ; if lostCounter > 3 then
18690: LD_EXP 38
18694: PUSH
18695: LD_INT 3
18697: GREATER
18698: IFFALSE 18713
// AddMedal ( deaths , - 1 ) else
18700: LD_STRING deaths
18702: PPUSH
18703: LD_INT 1
18705: NEG
18706: PPUSH
18707: CALL_OW 101
18711: GO 18731
// begin AddMedal ( deaths , 1 ) ;
18713: LD_STRING deaths
18715: PPUSH
18716: LD_INT 1
18718: PPUSH
18719: CALL_OW 101
// m2 := true ;
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: LD_INT 1
18730: ST_TO_ADDR
// end ; if honor = 1 then
18731: LD_EXP 39
18735: PUSH
18736: LD_INT 1
18738: EQUAL
18739: IFFALSE 18761
// begin AddMedal ( honour , 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 101
// m3 := true ;
18751: LD_ADDR_VAR 0 5
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// end else
18759: GO 18772
// AddMedal ( honour , - 1 ) ;
18761: LD_STRING honour
18763: PPUSH
18764: LD_INT 1
18766: NEG
18767: PPUSH
18768: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 4
18781: AND
18782: PUSH
18783: LD_VAR 0 5
18787: AND
18788: PUSH
18789: LD_OWVAR 67
18793: PUSH
18794: LD_INT 3
18796: GREATEREQUAL
18797: AND
18798: IFFALSE 18810
// SetAchievementEX ( ACH_AMER , 4 ) ;
18800: LD_STRING ACH_AMER
18802: PPUSH
18803: LD_INT 4
18805: PPUSH
18806: CALL_OW 564
// GiveMedals ( Main ) ;
18810: LD_STRING Main
18812: PPUSH
18813: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18817: LD_INT 22
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 23
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: PPUSH
18857: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18861: LD_EXP 1
18865: PPUSH
18866: LD_EXP 48
18870: PUSH
18871: LD_STRING JMM
18873: STR
18874: PPUSH
18875: CALL_OW 38
// if IsOK ( Bobby ) then
18879: LD_EXP 2
18883: PPUSH
18884: CALL_OW 302
18888: IFFALSE 18908
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18890: LD_EXP 2
18894: PPUSH
18895: LD_EXP 48
18899: PUSH
18900: LD_STRING Bobby
18902: STR
18903: PPUSH
18904: CALL_OW 38
// if IsOK ( Cyrus ) then
18908: LD_EXP 3
18912: PPUSH
18913: CALL_OW 302
18917: IFFALSE 18937
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18919: LD_EXP 3
18923: PPUSH
18924: LD_EXP 48
18928: PUSH
18929: LD_STRING Cyrus
18931: STR
18932: PPUSH
18933: CALL_OW 38
// if IsOK ( Lisa ) then
18937: LD_EXP 4
18941: PPUSH
18942: CALL_OW 302
18946: IFFALSE 18966
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18948: LD_EXP 4
18952: PPUSH
18953: LD_EXP 48
18957: PUSH
18958: LD_STRING Lisa
18960: STR
18961: PPUSH
18962: CALL_OW 38
// if IsOK ( Brown ) then
18966: LD_EXP 7
18970: PPUSH
18971: CALL_OW 302
18975: IFFALSE 18995
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18977: LD_EXP 7
18981: PPUSH
18982: LD_EXP 48
18986: PUSH
18987: LD_STRING Brown
18989: STR
18990: PPUSH
18991: CALL_OW 38
// if not IsDead ( Donaldson ) then
18995: LD_EXP 13
18999: PPUSH
19000: CALL_OW 301
19004: NOT
19005: IFFALSE 19025
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19007: LD_EXP 13
19011: PPUSH
19012: LD_EXP 48
19016: PUSH
19017: LD_STRING Donaldson
19019: STR
19020: PPUSH
19021: CALL_OW 38
// if not IsDead ( Frank ) then
19025: LD_EXP 5
19029: PPUSH
19030: CALL_OW 301
19034: NOT
19035: IFFALSE 19055
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19037: LD_EXP 5
19041: PPUSH
19042: LD_EXP 48
19046: PUSH
19047: LD_STRING Frank
19049: STR
19050: PPUSH
19051: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19055: LD_INT 50
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 21
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: PUSH
19091: LD_EXP 1
19095: PUSH
19096: LD_EXP 2
19100: PUSH
19101: LD_EXP 3
19105: PUSH
19106: LD_EXP 4
19110: PUSH
19111: LD_EXP 7
19115: PUSH
19116: LD_EXP 13
19120: PUSH
19121: LD_EXP 5
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: DIFF
19135: PPUSH
19136: LD_STRING 04_other_survivors
19138: PPUSH
19139: CALL_OW 38
// YouWin ;
19143: CALL_OW 103
// end ;
19147: LD_VAR 0 1
19151: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19152: LD_INT 0
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
// gammaBase = [ ] ;
19158: LD_ADDR_VAR 0 4
19162: PUSH
19163: EMPTY
19164: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19165: LD_ADDR_VAR 0 5
19169: PUSH
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_INT 22
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 21
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PPUSH
19199: CALL_OW 70
19203: ST_TO_ADDR
// for i in buildings do
19204: LD_ADDR_VAR 0 3
19208: PUSH
19209: LD_VAR 0 5
19213: PUSH
19214: FOR_IN
19215: IFFALSE 19552
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19217: LD_VAR 0 3
19221: PPUSH
19222: CALL_OW 266
19226: PUSH
19227: LD_INT 6
19229: PUSH
19230: LD_INT 7
19232: PUSH
19233: LD_INT 8
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: IN
19241: IFFALSE 19355
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19243: LD_ADDR_VAR 0 4
19247: PUSH
19248: LD_VAR 0 4
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 266
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 250
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 251
19282: PUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 254
19292: PUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: CALL_OW 267
19302: PUSH
19303: LD_VAR 0 3
19307: PPUSH
19308: CALL_OW 248
19312: PUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 268
19325: PUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: LD_INT 2
19333: PPUSH
19334: CALL_OW 268
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: ADD
19352: ST_TO_ADDR
19353: GO 19550
// if GetBType ( i ) in [ b_bunker ] then
19355: LD_VAR 0 3
19359: PPUSH
19360: CALL_OW 266
19364: PUSH
19365: LD_INT 32
19367: PUSH
19368: EMPTY
19369: LIST
19370: IN
19371: IFFALSE 19468
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19373: LD_ADDR_VAR 0 4
19377: PUSH
19378: LD_VAR 0 4
19382: PUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: CALL_OW 266
19392: PUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: CALL_OW 250
19402: PUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: CALL_OW 251
19412: PUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: CALL_OW 254
19422: PUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 267
19432: PUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: CALL_OW 248
19442: PUSH
19443: LD_VAR 0 3
19447: PPUSH
19448: CALL_OW 269
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: ADD
19465: ST_TO_ADDR
19466: GO 19550
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_VAR 0 4
19477: PUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: CALL_OW 266
19487: PUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: CALL_OW 250
19497: PUSH
19498: LD_VAR 0 3
19502: PPUSH
19503: CALL_OW 251
19507: PUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 254
19517: PUSH
19518: LD_VAR 0 3
19522: PPUSH
19523: CALL_OW 267
19527: PUSH
19528: LD_VAR 0 3
19532: PPUSH
19533: CALL_OW 248
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: ADD
19549: ST_TO_ADDR
// end ;
19550: GO 19214
19552: POP
19553: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19554: LD_VAR 0 4
19558: PPUSH
19559: LD_STRING GammaBase
19561: PPUSH
19562: CALL_OW 39
// end ; end_of_file
19566: LD_VAR 0 2
19570: RET
// every 1 1$15 do
19571: GO 19573
19573: DISABLE
// begin if supply <= 13 and supply > 7 then
19574: LD_EXP 36
19578: PUSH
19579: LD_INT 13
19581: LESSEQUAL
19582: PUSH
19583: LD_EXP 36
19587: PUSH
19588: LD_INT 7
19590: GREATER
19591: AND
19592: IFFALSE 19615
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19594: LD_INT 3
19596: PPUSH
19597: LD_INT 5
19599: PPUSH
19600: CALL_OW 12
19604: PPUSH
19605: LD_INT 18
19607: PPUSH
19608: LD_INT 1
19610: PPUSH
19611: CALL_OW 55
// if supply <= 7 and supply > 4 then
19615: LD_EXP 36
19619: PUSH
19620: LD_INT 7
19622: LESSEQUAL
19623: PUSH
19624: LD_EXP 36
19628: PUSH
19629: LD_INT 4
19631: GREATER
19632: AND
19633: IFFALSE 19656
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19635: LD_INT 3
19637: PPUSH
19638: LD_INT 5
19640: PPUSH
19641: CALL_OW 12
19645: PPUSH
19646: LD_INT 19
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 55
// if supply <= 4 and supply > 0 then
19656: LD_EXP 36
19660: PUSH
19661: LD_INT 4
19663: LESSEQUAL
19664: PUSH
19665: LD_EXP 36
19669: PUSH
19670: LD_INT 0
19672: GREATER
19673: AND
19674: IFFALSE 19697
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19676: LD_INT 3
19678: PPUSH
19679: LD_INT 5
19681: PPUSH
19682: CALL_OW 12
19686: PPUSH
19687: LD_INT 20
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 55
// if supply then
19697: LD_EXP 36
19701: IFFALSE 19718
// begin supply = supply - 1 ;
19703: LD_ADDR_EXP 36
19707: PUSH
19708: LD_EXP 36
19712: PUSH
19713: LD_INT 1
19715: MINUS
19716: ST_TO_ADDR
// enable ;
19717: ENABLE
// end ; end ; end_of_file
19718: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19719: LD_INT 0
19721: PPUSH
// ar_miner := 81 ;
19722: LD_ADDR_EXP 57
19726: PUSH
19727: LD_INT 81
19729: ST_TO_ADDR
// ar_crane := 88 ;
19730: LD_ADDR_EXP 56
19734: PUSH
19735: LD_INT 88
19737: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19738: LD_ADDR_EXP 51
19742: PUSH
19743: LD_INT 89
19745: ST_TO_ADDR
// us_hack := 99 ;
19746: LD_ADDR_EXP 52
19750: PUSH
19751: LD_INT 99
19753: ST_TO_ADDR
// us_artillery := 97 ;
19754: LD_ADDR_EXP 53
19758: PUSH
19759: LD_INT 97
19761: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19762: LD_ADDR_EXP 54
19766: PUSH
19767: LD_INT 91
19769: ST_TO_ADDR
// ar_mortar := 92 ;
19770: LD_ADDR_EXP 55
19774: PUSH
19775: LD_INT 92
19777: ST_TO_ADDR
// ru_radar := 98 ;
19778: LD_ADDR_EXP 50
19782: PUSH
19783: LD_INT 98
19785: ST_TO_ADDR
// tech_Artillery := 80 ;
19786: LD_ADDR_EXP 58
19790: PUSH
19791: LD_INT 80
19793: ST_TO_ADDR
// tech_RadMat := 81 ;
19794: LD_ADDR_EXP 59
19798: PUSH
19799: LD_INT 81
19801: ST_TO_ADDR
// tech_BasicTools := 82 ;
19802: LD_ADDR_EXP 60
19806: PUSH
19807: LD_INT 82
19809: ST_TO_ADDR
// tech_Cargo := 83 ;
19810: LD_ADDR_EXP 61
19814: PUSH
19815: LD_INT 83
19817: ST_TO_ADDR
// tech_Track := 84 ;
19818: LD_ADDR_EXP 62
19822: PUSH
19823: LD_INT 84
19825: ST_TO_ADDR
// tech_Crane := 85 ;
19826: LD_ADDR_EXP 63
19830: PUSH
19831: LD_INT 85
19833: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19834: LD_ADDR_EXP 64
19838: PUSH
19839: LD_INT 86
19841: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19842: LD_ADDR_EXP 65
19846: PUSH
19847: LD_INT 87
19849: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19850: LD_ADDR_EXP 66
19854: PUSH
19855: LD_INT 88
19857: ST_TO_ADDR
// class_mastodont := 31 ;
19858: LD_ADDR_EXP 67
19862: PUSH
19863: LD_INT 31
19865: ST_TO_ADDR
// class_horse := 21 ;
19866: LD_ADDR_EXP 68
19870: PUSH
19871: LD_INT 21
19873: ST_TO_ADDR
// end ;
19874: LD_VAR 0 1
19878: RET
// every 1 do
19879: GO 19881
19881: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19882: CALL 19719 0 0
19886: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19887: LD_INT 0
19889: PPUSH
// if p2 = 100 then
19890: LD_VAR 0 2
19894: PUSH
19895: LD_INT 100
19897: EQUAL
19898: IFFALSE 20901
// begin if not StreamModeActive then
19900: LD_EXP 69
19904: NOT
19905: IFFALSE 19915
// StreamModeActive := true ;
19907: LD_ADDR_EXP 69
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 0 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 0
19922: EQUAL
19923: IFFALSE 19929
// InitStreamMode ;
19925: CALL 21061 0 0
// if p3 = 1 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 1
19936: EQUAL
19937: IFFALSE 19947
// sRocket := true ;
19939: LD_ADDR_EXP 74
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 2 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 2
19954: EQUAL
19955: IFFALSE 19965
// sSpeed := true ;
19957: LD_ADDR_EXP 73
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 3 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 3
19972: EQUAL
19973: IFFALSE 19983
// sEngine := true ;
19975: LD_ADDR_EXP 75
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 4 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 4
19990: EQUAL
19991: IFFALSE 20001
// sSpec := true ;
19993: LD_ADDR_EXP 72
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 5 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 5
20008: EQUAL
20009: IFFALSE 20019
// sLevel := true ;
20011: LD_ADDR_EXP 76
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 6 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 6
20026: EQUAL
20027: IFFALSE 20037
// sArmoury := true ;
20029: LD_ADDR_EXP 77
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 7 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 7
20044: EQUAL
20045: IFFALSE 20055
// sRadar := true ;
20047: LD_ADDR_EXP 78
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 8 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 8
20062: EQUAL
20063: IFFALSE 20073
// sBunker := true ;
20065: LD_ADDR_EXP 79
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 9 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 9
20080: EQUAL
20081: IFFALSE 20091
// sHack := true ;
20083: LD_ADDR_EXP 80
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 10 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 10
20098: EQUAL
20099: IFFALSE 20109
// sFire := true ;
20101: LD_ADDR_EXP 81
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 11 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 11
20116: EQUAL
20117: IFFALSE 20127
// sRefresh := true ;
20119: LD_ADDR_EXP 82
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// if p3 = 12 then
20127: LD_VAR 0 3
20131: PUSH
20132: LD_INT 12
20134: EQUAL
20135: IFFALSE 20145
// sExp := true ;
20137: LD_ADDR_EXP 83
20141: PUSH
20142: LD_INT 1
20144: ST_TO_ADDR
// if p3 = 13 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 13
20152: EQUAL
20153: IFFALSE 20163
// sDepot := true ;
20155: LD_ADDR_EXP 84
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// if p3 = 14 then
20163: LD_VAR 0 3
20167: PUSH
20168: LD_INT 14
20170: EQUAL
20171: IFFALSE 20181
// sFlag := true ;
20173: LD_ADDR_EXP 85
20177: PUSH
20178: LD_INT 1
20180: ST_TO_ADDR
// if p3 = 15 then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 15
20188: EQUAL
20189: IFFALSE 20199
// sKamikadze := true ;
20191: LD_ADDR_EXP 93
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// if p3 = 16 then
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 16
20206: EQUAL
20207: IFFALSE 20217
// sTroll := true ;
20209: LD_ADDR_EXP 94
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// if p3 = 17 then
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 17
20224: EQUAL
20225: IFFALSE 20235
// sSlow := true ;
20227: LD_ADDR_EXP 95
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// if p3 = 18 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 18
20242: EQUAL
20243: IFFALSE 20253
// sLack := true ;
20245: LD_ADDR_EXP 96
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 19 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 19
20260: EQUAL
20261: IFFALSE 20271
// sTank := true ;
20263: LD_ADDR_EXP 98
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 20 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 20
20278: EQUAL
20279: IFFALSE 20289
// sRemote := true ;
20281: LD_ADDR_EXP 99
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 21 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 21
20296: EQUAL
20297: IFFALSE 20307
// sPowell := true ;
20299: LD_ADDR_EXP 100
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 22 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 22
20314: EQUAL
20315: IFFALSE 20325
// sTeleport := true ;
20317: LD_ADDR_EXP 103
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 23 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 23
20332: EQUAL
20333: IFFALSE 20343
// sOilTower := true ;
20335: LD_ADDR_EXP 105
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 24 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 24
20350: EQUAL
20351: IFFALSE 20361
// sShovel := true ;
20353: LD_ADDR_EXP 106
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 25 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 25
20368: EQUAL
20369: IFFALSE 20379
// sSheik := true ;
20371: LD_ADDR_EXP 107
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 26 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 26
20386: EQUAL
20387: IFFALSE 20397
// sEarthquake := true ;
20389: LD_ADDR_EXP 109
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 27 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 27
20404: EQUAL
20405: IFFALSE 20415
// sAI := true ;
20407: LD_ADDR_EXP 110
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 28 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 28
20422: EQUAL
20423: IFFALSE 20433
// sCargo := true ;
20425: LD_ADDR_EXP 113
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 29 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 29
20440: EQUAL
20441: IFFALSE 20451
// sDLaser := true ;
20443: LD_ADDR_EXP 114
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 30 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 30
20458: EQUAL
20459: IFFALSE 20469
// sExchange := true ;
20461: LD_ADDR_EXP 115
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 31 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 31
20476: EQUAL
20477: IFFALSE 20487
// sFac := true ;
20479: LD_ADDR_EXP 116
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 32 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 32
20494: EQUAL
20495: IFFALSE 20505
// sPower := true ;
20497: LD_ADDR_EXP 117
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 33 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 33
20512: EQUAL
20513: IFFALSE 20523
// sRandom := true ;
20515: LD_ADDR_EXP 118
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 34 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 34
20530: EQUAL
20531: IFFALSE 20541
// sShield := true ;
20533: LD_ADDR_EXP 119
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 35 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 35
20548: EQUAL
20549: IFFALSE 20559
// sTime := true ;
20551: LD_ADDR_EXP 120
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 36 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 36
20566: EQUAL
20567: IFFALSE 20577
// sTools := true ;
20569: LD_ADDR_EXP 121
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 101 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 101
20584: EQUAL
20585: IFFALSE 20595
// sSold := true ;
20587: LD_ADDR_EXP 86
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 102 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 102
20602: EQUAL
20603: IFFALSE 20613
// sDiff := true ;
20605: LD_ADDR_EXP 87
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 103 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 103
20620: EQUAL
20621: IFFALSE 20631
// sFog := true ;
20623: LD_ADDR_EXP 90
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 104 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 104
20638: EQUAL
20639: IFFALSE 20649
// sReset := true ;
20641: LD_ADDR_EXP 91
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 105 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 105
20656: EQUAL
20657: IFFALSE 20667
// sSun := true ;
20659: LD_ADDR_EXP 92
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 106 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 106
20674: EQUAL
20675: IFFALSE 20685
// sTiger := true ;
20677: LD_ADDR_EXP 88
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 107 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 107
20692: EQUAL
20693: IFFALSE 20703
// sBomb := true ;
20695: LD_ADDR_EXP 89
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 108 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 108
20710: EQUAL
20711: IFFALSE 20721
// sWound := true ;
20713: LD_ADDR_EXP 97
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 109 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 109
20728: EQUAL
20729: IFFALSE 20739
// sBetray := true ;
20731: LD_ADDR_EXP 101
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 110 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 110
20746: EQUAL
20747: IFFALSE 20757
// sContamin := true ;
20749: LD_ADDR_EXP 102
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 111 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 111
20764: EQUAL
20765: IFFALSE 20775
// sOil := true ;
20767: LD_ADDR_EXP 104
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 112 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 112
20782: EQUAL
20783: IFFALSE 20793
// sStu := true ;
20785: LD_ADDR_EXP 108
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 113 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 113
20800: EQUAL
20801: IFFALSE 20811
// sBazooka := true ;
20803: LD_ADDR_EXP 111
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 114 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 114
20818: EQUAL
20819: IFFALSE 20829
// sMortar := true ;
20821: LD_ADDR_EXP 112
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 115 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 115
20836: EQUAL
20837: IFFALSE 20847
// sRanger := true ;
20839: LD_ADDR_EXP 122
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// if p3 = 116 then
20847: LD_VAR 0 3
20851: PUSH
20852: LD_INT 116
20854: EQUAL
20855: IFFALSE 20865
// sComputer := true ;
20857: LD_ADDR_EXP 123
20861: PUSH
20862: LD_INT 1
20864: ST_TO_ADDR
// if p3 = 117 then
20865: LD_VAR 0 3
20869: PUSH
20870: LD_INT 117
20872: EQUAL
20873: IFFALSE 20883
// s30 := true ;
20875: LD_ADDR_EXP 124
20879: PUSH
20880: LD_INT 1
20882: ST_TO_ADDR
// if p3 = 118 then
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 118
20890: EQUAL
20891: IFFALSE 20901
// s60 := true ;
20893: LD_ADDR_EXP 125
20897: PUSH
20898: LD_INT 1
20900: ST_TO_ADDR
// end ; if p2 = 101 then
20901: LD_VAR 0 2
20905: PUSH
20906: LD_INT 101
20908: EQUAL
20909: IFFALSE 21037
// begin case p3 of 1 :
20911: LD_VAR 0 3
20915: PUSH
20916: LD_INT 1
20918: DOUBLE
20919: EQUAL
20920: IFTRUE 20924
20922: GO 20931
20924: POP
// hHackUnlimitedResources ; 2 :
20925: CALL 32633 0 0
20929: GO 21037
20931: LD_INT 2
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20946
20939: POP
// hHackSetLevel10 ; 3 :
20940: CALL 32766 0 0
20944: GO 21037
20946: LD_INT 3
20948: DOUBLE
20949: EQUAL
20950: IFTRUE 20954
20952: GO 20961
20954: POP
// hHackSetLevel10YourUnits ; 4 :
20955: CALL 32851 0 0
20959: GO 21037
20961: LD_INT 4
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 20976
20969: POP
// hHackInvincible ; 5 :
20970: CALL 33299 0 0
20974: GO 21037
20976: LD_INT 5
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20984
20982: GO 20991
20984: POP
// hHackInvisible ; 6 :
20985: CALL 33410 0 0
20989: GO 21037
20991: LD_INT 6
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21006
20999: POP
// hHackChangeYourSide ; 7 :
21000: CALL 33467 0 0
21004: GO 21037
21006: LD_INT 7
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21021
21014: POP
// hHackChangeUnitSide ; 8 :
21015: CALL 33509 0 0
21019: GO 21037
21021: LD_INT 8
21023: DOUBLE
21024: EQUAL
21025: IFTRUE 21029
21027: GO 21036
21029: POP
// hHackFog ; end ;
21030: CALL 33610 0 0
21034: GO 21037
21036: POP
// end ; end ;
21037: LD_VAR 0 7
21041: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21042: GO 21044
21044: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21045: LD_STRING initStreamRollete();
21047: PPUSH
21048: CALL_OW 559
// InitStreamMode ;
21052: CALL 21061 0 0
// DefineStreamItems ( ) ;
21056: CALL 21525 0 0
// end ;
21060: END
// function InitStreamMode ; begin
21061: LD_INT 0
21063: PPUSH
// streamModeActive := false ;
21064: LD_ADDR_EXP 69
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// normalCounter := 36 ;
21072: LD_ADDR_EXP 70
21076: PUSH
21077: LD_INT 36
21079: ST_TO_ADDR
// hardcoreCounter := 16 ;
21080: LD_ADDR_EXP 71
21084: PUSH
21085: LD_INT 16
21087: ST_TO_ADDR
// sRocket := false ;
21088: LD_ADDR_EXP 74
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sSpeed := false ;
21096: LD_ADDR_EXP 73
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sEngine := false ;
21104: LD_ADDR_EXP 75
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sSpec := false ;
21112: LD_ADDR_EXP 72
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sLevel := false ;
21120: LD_ADDR_EXP 76
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sArmoury := false ;
21128: LD_ADDR_EXP 77
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sRadar := false ;
21136: LD_ADDR_EXP 78
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sBunker := false ;
21144: LD_ADDR_EXP 79
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sHack := false ;
21152: LD_ADDR_EXP 80
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sFire := false ;
21160: LD_ADDR_EXP 81
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sRefresh := false ;
21168: LD_ADDR_EXP 82
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sExp := false ;
21176: LD_ADDR_EXP 83
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sDepot := false ;
21184: LD_ADDR_EXP 84
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sFlag := false ;
21192: LD_ADDR_EXP 85
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sKamikadze := false ;
21200: LD_ADDR_EXP 93
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sTroll := false ;
21208: LD_ADDR_EXP 94
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sSlow := false ;
21216: LD_ADDR_EXP 95
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sLack := false ;
21224: LD_ADDR_EXP 96
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sTank := false ;
21232: LD_ADDR_EXP 98
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sRemote := false ;
21240: LD_ADDR_EXP 99
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sPowell := false ;
21248: LD_ADDR_EXP 100
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sTeleport := false ;
21256: LD_ADDR_EXP 103
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sOilTower := false ;
21264: LD_ADDR_EXP 105
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sShovel := false ;
21272: LD_ADDR_EXP 106
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sSheik := false ;
21280: LD_ADDR_EXP 107
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sEarthquake := false ;
21288: LD_ADDR_EXP 109
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sAI := false ;
21296: LD_ADDR_EXP 110
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sCargo := false ;
21304: LD_ADDR_EXP 113
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sDLaser := false ;
21312: LD_ADDR_EXP 114
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sExchange := false ;
21320: LD_ADDR_EXP 115
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sFac := false ;
21328: LD_ADDR_EXP 116
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sPower := false ;
21336: LD_ADDR_EXP 117
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sRandom := false ;
21344: LD_ADDR_EXP 118
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sShield := false ;
21352: LD_ADDR_EXP 119
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sTime := false ;
21360: LD_ADDR_EXP 120
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sTools := false ;
21368: LD_ADDR_EXP 121
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sSold := false ;
21376: LD_ADDR_EXP 86
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sDiff := false ;
21384: LD_ADDR_EXP 87
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sFog := false ;
21392: LD_ADDR_EXP 90
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sReset := false ;
21400: LD_ADDR_EXP 91
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sSun := false ;
21408: LD_ADDR_EXP 92
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sTiger := false ;
21416: LD_ADDR_EXP 88
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sBomb := false ;
21424: LD_ADDR_EXP 89
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sWound := false ;
21432: LD_ADDR_EXP 97
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sBetray := false ;
21440: LD_ADDR_EXP 101
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sContamin := false ;
21448: LD_ADDR_EXP 102
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// sOil := false ;
21456: LD_ADDR_EXP 104
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// sStu := false ;
21464: LD_ADDR_EXP 108
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sBazooka := false ;
21472: LD_ADDR_EXP 111
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sMortar := false ;
21480: LD_ADDR_EXP 112
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sRanger := false ;
21488: LD_ADDR_EXP 122
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sComputer := false ;
21496: LD_ADDR_EXP 123
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// s30 := false ;
21504: LD_ADDR_EXP 124
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// s60 := false ;
21512: LD_ADDR_EXP 125
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// end ;
21520: LD_VAR 0 1
21524: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21525: LD_INT 0
21527: PPUSH
21528: PPUSH
21529: PPUSH
21530: PPUSH
21531: PPUSH
// result := [ ] ;
21532: LD_ADDR_VAR 0 1
21536: PUSH
21537: EMPTY
21538: ST_TO_ADDR
// if campaign_id = 1 then
21539: LD_OWVAR 69
21543: PUSH
21544: LD_INT 1
21546: EQUAL
21547: IFFALSE 24713
// begin case mission_number of 1 :
21549: LD_OWVAR 70
21553: PUSH
21554: LD_INT 1
21556: DOUBLE
21557: EQUAL
21558: IFTRUE 21562
21560: GO 21638
21562: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21563: LD_ADDR_VAR 0 1
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: LD_INT 4
21573: PUSH
21574: LD_INT 11
21576: PUSH
21577: LD_INT 12
21579: PUSH
21580: LD_INT 15
21582: PUSH
21583: LD_INT 16
21585: PUSH
21586: LD_INT 22
21588: PUSH
21589: LD_INT 23
21591: PUSH
21592: LD_INT 26
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 101
21608: PUSH
21609: LD_INT 102
21611: PUSH
21612: LD_INT 106
21614: PUSH
21615: LD_INT 116
21617: PUSH
21618: LD_INT 117
21620: PUSH
21621: LD_INT 118
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: ST_TO_ADDR
21636: GO 24711
21638: LD_INT 2
21640: DOUBLE
21641: EQUAL
21642: IFTRUE 21646
21644: GO 21730
21646: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21647: LD_ADDR_VAR 0 1
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 4
21657: PUSH
21658: LD_INT 11
21660: PUSH
21661: LD_INT 12
21663: PUSH
21664: LD_INT 15
21666: PUSH
21667: LD_INT 16
21669: PUSH
21670: LD_INT 22
21672: PUSH
21673: LD_INT 23
21675: PUSH
21676: LD_INT 26
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 101
21692: PUSH
21693: LD_INT 102
21695: PUSH
21696: LD_INT 105
21698: PUSH
21699: LD_INT 106
21701: PUSH
21702: LD_INT 108
21704: PUSH
21705: LD_INT 116
21707: PUSH
21708: LD_INT 117
21710: PUSH
21711: LD_INT 118
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: ST_TO_ADDR
21728: GO 24711
21730: LD_INT 3
21732: DOUBLE
21733: EQUAL
21734: IFTRUE 21738
21736: GO 21826
21738: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21739: LD_ADDR_VAR 0 1
21743: PUSH
21744: LD_INT 2
21746: PUSH
21747: LD_INT 4
21749: PUSH
21750: LD_INT 5
21752: PUSH
21753: LD_INT 11
21755: PUSH
21756: LD_INT 12
21758: PUSH
21759: LD_INT 15
21761: PUSH
21762: LD_INT 16
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 26
21770: PUSH
21771: LD_INT 36
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 101
21788: PUSH
21789: LD_INT 102
21791: PUSH
21792: LD_INT 105
21794: PUSH
21795: LD_INT 106
21797: PUSH
21798: LD_INT 108
21800: PUSH
21801: LD_INT 116
21803: PUSH
21804: LD_INT 117
21806: PUSH
21807: LD_INT 118
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: ST_TO_ADDR
21824: GO 24711
21826: LD_INT 4
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21930
21834: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21835: LD_ADDR_VAR 0 1
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: LD_INT 4
21845: PUSH
21846: LD_INT 5
21848: PUSH
21849: LD_INT 8
21851: PUSH
21852: LD_INT 11
21854: PUSH
21855: LD_INT 12
21857: PUSH
21858: LD_INT 15
21860: PUSH
21861: LD_INT 16
21863: PUSH
21864: LD_INT 22
21866: PUSH
21867: LD_INT 23
21869: PUSH
21870: LD_INT 26
21872: PUSH
21873: LD_INT 36
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 101
21892: PUSH
21893: LD_INT 102
21895: PUSH
21896: LD_INT 105
21898: PUSH
21899: LD_INT 106
21901: PUSH
21902: LD_INT 108
21904: PUSH
21905: LD_INT 116
21907: PUSH
21908: LD_INT 117
21910: PUSH
21911: LD_INT 118
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: ST_TO_ADDR
21928: GO 24711
21930: LD_INT 5
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 22050
21938: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21939: LD_ADDR_VAR 0 1
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: LD_INT 4
21949: PUSH
21950: LD_INT 5
21952: PUSH
21953: LD_INT 6
21955: PUSH
21956: LD_INT 8
21958: PUSH
21959: LD_INT 11
21961: PUSH
21962: LD_INT 12
21964: PUSH
21965: LD_INT 15
21967: PUSH
21968: LD_INT 16
21970: PUSH
21971: LD_INT 22
21973: PUSH
21974: LD_INT 23
21976: PUSH
21977: LD_INT 25
21979: PUSH
21980: LD_INT 26
21982: PUSH
21983: LD_INT 36
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 101
22004: PUSH
22005: LD_INT 102
22007: PUSH
22008: LD_INT 105
22010: PUSH
22011: LD_INT 106
22013: PUSH
22014: LD_INT 108
22016: PUSH
22017: LD_INT 109
22019: PUSH
22020: LD_INT 112
22022: PUSH
22023: LD_INT 116
22025: PUSH
22026: LD_INT 117
22028: PUSH
22029: LD_INT 118
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: ST_TO_ADDR
22048: GO 24711
22050: LD_INT 6
22052: DOUBLE
22053: EQUAL
22054: IFTRUE 22058
22056: GO 22190
22058: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22059: LD_ADDR_VAR 0 1
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: LD_INT 4
22069: PUSH
22070: LD_INT 5
22072: PUSH
22073: LD_INT 6
22075: PUSH
22076: LD_INT 8
22078: PUSH
22079: LD_INT 11
22081: PUSH
22082: LD_INT 12
22084: PUSH
22085: LD_INT 15
22087: PUSH
22088: LD_INT 16
22090: PUSH
22091: LD_INT 20
22093: PUSH
22094: LD_INT 21
22096: PUSH
22097: LD_INT 22
22099: PUSH
22100: LD_INT 23
22102: PUSH
22103: LD_INT 25
22105: PUSH
22106: LD_INT 26
22108: PUSH
22109: LD_INT 30
22111: PUSH
22112: LD_INT 31
22114: PUSH
22115: LD_INT 32
22117: PUSH
22118: LD_INT 36
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 101
22144: PUSH
22145: LD_INT 102
22147: PUSH
22148: LD_INT 105
22150: PUSH
22151: LD_INT 106
22153: PUSH
22154: LD_INT 108
22156: PUSH
22157: LD_INT 109
22159: PUSH
22160: LD_INT 112
22162: PUSH
22163: LD_INT 116
22165: PUSH
22166: LD_INT 117
22168: PUSH
22169: LD_INT 118
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: ST_TO_ADDR
22188: GO 24711
22190: LD_INT 7
22192: DOUBLE
22193: EQUAL
22194: IFTRUE 22198
22196: GO 22310
22198: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22199: LD_ADDR_VAR 0 1
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: LD_INT 4
22209: PUSH
22210: LD_INT 5
22212: PUSH
22213: LD_INT 7
22215: PUSH
22216: LD_INT 11
22218: PUSH
22219: LD_INT 12
22221: PUSH
22222: LD_INT 15
22224: PUSH
22225: LD_INT 16
22227: PUSH
22228: LD_INT 20
22230: PUSH
22231: LD_INT 21
22233: PUSH
22234: LD_INT 22
22236: PUSH
22237: LD_INT 23
22239: PUSH
22240: LD_INT 25
22242: PUSH
22243: LD_INT 26
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 101
22264: PUSH
22265: LD_INT 102
22267: PUSH
22268: LD_INT 103
22270: PUSH
22271: LD_INT 105
22273: PUSH
22274: LD_INT 106
22276: PUSH
22277: LD_INT 108
22279: PUSH
22280: LD_INT 112
22282: PUSH
22283: LD_INT 116
22285: PUSH
22286: LD_INT 117
22288: PUSH
22289: LD_INT 118
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: ST_TO_ADDR
22308: GO 24711
22310: LD_INT 8
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22458
22318: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22319: LD_ADDR_VAR 0 1
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: LD_INT 4
22329: PUSH
22330: LD_INT 5
22332: PUSH
22333: LD_INT 6
22335: PUSH
22336: LD_INT 7
22338: PUSH
22339: LD_INT 8
22341: PUSH
22342: LD_INT 11
22344: PUSH
22345: LD_INT 12
22347: PUSH
22348: LD_INT 15
22350: PUSH
22351: LD_INT 16
22353: PUSH
22354: LD_INT 20
22356: PUSH
22357: LD_INT 21
22359: PUSH
22360: LD_INT 22
22362: PUSH
22363: LD_INT 23
22365: PUSH
22366: LD_INT 25
22368: PUSH
22369: LD_INT 26
22371: PUSH
22372: LD_INT 30
22374: PUSH
22375: LD_INT 31
22377: PUSH
22378: LD_INT 32
22380: PUSH
22381: LD_INT 36
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 101
22408: PUSH
22409: LD_INT 102
22411: PUSH
22412: LD_INT 103
22414: PUSH
22415: LD_INT 105
22417: PUSH
22418: LD_INT 106
22420: PUSH
22421: LD_INT 108
22423: PUSH
22424: LD_INT 109
22426: PUSH
22427: LD_INT 112
22429: PUSH
22430: LD_INT 116
22432: PUSH
22433: LD_INT 117
22435: PUSH
22436: LD_INT 118
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: ST_TO_ADDR
22456: GO 24711
22458: LD_INT 9
22460: DOUBLE
22461: EQUAL
22462: IFTRUE 22466
22464: GO 22614
22466: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22467: LD_ADDR_VAR 0 1
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: LD_INT 4
22477: PUSH
22478: LD_INT 5
22480: PUSH
22481: LD_INT 6
22483: PUSH
22484: LD_INT 7
22486: PUSH
22487: LD_INT 8
22489: PUSH
22490: LD_INT 11
22492: PUSH
22493: LD_INT 12
22495: PUSH
22496: LD_INT 15
22498: PUSH
22499: LD_INT 16
22501: PUSH
22502: LD_INT 20
22504: PUSH
22505: LD_INT 21
22507: PUSH
22508: LD_INT 22
22510: PUSH
22511: LD_INT 23
22513: PUSH
22514: LD_INT 25
22516: PUSH
22517: LD_INT 26
22519: PUSH
22520: LD_INT 28
22522: PUSH
22523: LD_INT 30
22525: PUSH
22526: LD_INT 31
22528: PUSH
22529: LD_INT 32
22531: PUSH
22532: LD_INT 36
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 101
22560: PUSH
22561: LD_INT 102
22563: PUSH
22564: LD_INT 103
22566: PUSH
22567: LD_INT 105
22569: PUSH
22570: LD_INT 106
22572: PUSH
22573: LD_INT 108
22575: PUSH
22576: LD_INT 109
22578: PUSH
22579: LD_INT 112
22581: PUSH
22582: LD_INT 114
22584: PUSH
22585: LD_INT 116
22587: PUSH
22588: LD_INT 117
22590: PUSH
22591: LD_INT 118
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: ST_TO_ADDR
22612: GO 24711
22614: LD_INT 10
22616: DOUBLE
22617: EQUAL
22618: IFTRUE 22622
22620: GO 22818
22622: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22623: LD_ADDR_VAR 0 1
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: LD_INT 4
22633: PUSH
22634: LD_INT 5
22636: PUSH
22637: LD_INT 6
22639: PUSH
22640: LD_INT 7
22642: PUSH
22643: LD_INT 8
22645: PUSH
22646: LD_INT 9
22648: PUSH
22649: LD_INT 10
22651: PUSH
22652: LD_INT 11
22654: PUSH
22655: LD_INT 12
22657: PUSH
22658: LD_INT 13
22660: PUSH
22661: LD_INT 14
22663: PUSH
22664: LD_INT 15
22666: PUSH
22667: LD_INT 16
22669: PUSH
22670: LD_INT 17
22672: PUSH
22673: LD_INT 18
22675: PUSH
22676: LD_INT 19
22678: PUSH
22679: LD_INT 20
22681: PUSH
22682: LD_INT 21
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_INT 23
22690: PUSH
22691: LD_INT 24
22693: PUSH
22694: LD_INT 25
22696: PUSH
22697: LD_INT 26
22699: PUSH
22700: LD_INT 28
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 31
22708: PUSH
22709: LD_INT 32
22711: PUSH
22712: LD_INT 36
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 101
22748: PUSH
22749: LD_INT 102
22751: PUSH
22752: LD_INT 103
22754: PUSH
22755: LD_INT 104
22757: PUSH
22758: LD_INT 105
22760: PUSH
22761: LD_INT 106
22763: PUSH
22764: LD_INT 107
22766: PUSH
22767: LD_INT 108
22769: PUSH
22770: LD_INT 109
22772: PUSH
22773: LD_INT 110
22775: PUSH
22776: LD_INT 111
22778: PUSH
22779: LD_INT 112
22781: PUSH
22782: LD_INT 114
22784: PUSH
22785: LD_INT 116
22787: PUSH
22788: LD_INT 117
22790: PUSH
22791: LD_INT 118
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: ST_TO_ADDR
22816: GO 24711
22818: LD_INT 11
22820: DOUBLE
22821: EQUAL
22822: IFTRUE 22826
22824: GO 23030
22826: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22827: LD_ADDR_VAR 0 1
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: LD_INT 4
22840: PUSH
22841: LD_INT 5
22843: PUSH
22844: LD_INT 6
22846: PUSH
22847: LD_INT 7
22849: PUSH
22850: LD_INT 8
22852: PUSH
22853: LD_INT 9
22855: PUSH
22856: LD_INT 10
22858: PUSH
22859: LD_INT 11
22861: PUSH
22862: LD_INT 12
22864: PUSH
22865: LD_INT 13
22867: PUSH
22868: LD_INT 14
22870: PUSH
22871: LD_INT 15
22873: PUSH
22874: LD_INT 16
22876: PUSH
22877: LD_INT 17
22879: PUSH
22880: LD_INT 18
22882: PUSH
22883: LD_INT 19
22885: PUSH
22886: LD_INT 20
22888: PUSH
22889: LD_INT 21
22891: PUSH
22892: LD_INT 22
22894: PUSH
22895: LD_INT 23
22897: PUSH
22898: LD_INT 24
22900: PUSH
22901: LD_INT 25
22903: PUSH
22904: LD_INT 26
22906: PUSH
22907: LD_INT 28
22909: PUSH
22910: LD_INT 30
22912: PUSH
22913: LD_INT 31
22915: PUSH
22916: LD_INT 32
22918: PUSH
22919: LD_INT 34
22921: PUSH
22922: LD_INT 36
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 101
22960: PUSH
22961: LD_INT 102
22963: PUSH
22964: LD_INT 103
22966: PUSH
22967: LD_INT 104
22969: PUSH
22970: LD_INT 105
22972: PUSH
22973: LD_INT 106
22975: PUSH
22976: LD_INT 107
22978: PUSH
22979: LD_INT 108
22981: PUSH
22982: LD_INT 109
22984: PUSH
22985: LD_INT 110
22987: PUSH
22988: LD_INT 111
22990: PUSH
22991: LD_INT 112
22993: PUSH
22994: LD_INT 114
22996: PUSH
22997: LD_INT 116
22999: PUSH
23000: LD_INT 117
23002: PUSH
23003: LD_INT 118
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: ST_TO_ADDR
23028: GO 24711
23030: LD_INT 12
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23258
23038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23039: LD_ADDR_VAR 0 1
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: LD_INT 4
23055: PUSH
23056: LD_INT 5
23058: PUSH
23059: LD_INT 6
23061: PUSH
23062: LD_INT 7
23064: PUSH
23065: LD_INT 8
23067: PUSH
23068: LD_INT 9
23070: PUSH
23071: LD_INT 10
23073: PUSH
23074: LD_INT 11
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: LD_INT 13
23082: PUSH
23083: LD_INT 14
23085: PUSH
23086: LD_INT 15
23088: PUSH
23089: LD_INT 16
23091: PUSH
23092: LD_INT 17
23094: PUSH
23095: LD_INT 18
23097: PUSH
23098: LD_INT 19
23100: PUSH
23101: LD_INT 20
23103: PUSH
23104: LD_INT 21
23106: PUSH
23107: LD_INT 22
23109: PUSH
23110: LD_INT 23
23112: PUSH
23113: LD_INT 24
23115: PUSH
23116: LD_INT 25
23118: PUSH
23119: LD_INT 26
23121: PUSH
23122: LD_INT 27
23124: PUSH
23125: LD_INT 28
23127: PUSH
23128: LD_INT 30
23130: PUSH
23131: LD_INT 31
23133: PUSH
23134: LD_INT 32
23136: PUSH
23137: LD_INT 33
23139: PUSH
23140: LD_INT 34
23142: PUSH
23143: LD_INT 36
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 101
23184: PUSH
23185: LD_INT 102
23187: PUSH
23188: LD_INT 103
23190: PUSH
23191: LD_INT 104
23193: PUSH
23194: LD_INT 105
23196: PUSH
23197: LD_INT 106
23199: PUSH
23200: LD_INT 107
23202: PUSH
23203: LD_INT 108
23205: PUSH
23206: LD_INT 109
23208: PUSH
23209: LD_INT 110
23211: PUSH
23212: LD_INT 111
23214: PUSH
23215: LD_INT 112
23217: PUSH
23218: LD_INT 113
23220: PUSH
23221: LD_INT 114
23223: PUSH
23224: LD_INT 116
23226: PUSH
23227: LD_INT 117
23229: PUSH
23230: LD_INT 118
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: ST_TO_ADDR
23256: GO 24711
23258: LD_INT 13
23260: DOUBLE
23261: EQUAL
23262: IFTRUE 23266
23264: GO 23474
23266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23267: LD_ADDR_VAR 0 1
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: LD_INT 4
23283: PUSH
23284: LD_INT 5
23286: PUSH
23287: LD_INT 8
23289: PUSH
23290: LD_INT 9
23292: PUSH
23293: LD_INT 10
23295: PUSH
23296: LD_INT 11
23298: PUSH
23299: LD_INT 12
23301: PUSH
23302: LD_INT 14
23304: PUSH
23305: LD_INT 15
23307: PUSH
23308: LD_INT 16
23310: PUSH
23311: LD_INT 17
23313: PUSH
23314: LD_INT 18
23316: PUSH
23317: LD_INT 19
23319: PUSH
23320: LD_INT 20
23322: PUSH
23323: LD_INT 21
23325: PUSH
23326: LD_INT 22
23328: PUSH
23329: LD_INT 23
23331: PUSH
23332: LD_INT 24
23334: PUSH
23335: LD_INT 25
23337: PUSH
23338: LD_INT 26
23340: PUSH
23341: LD_INT 27
23343: PUSH
23344: LD_INT 28
23346: PUSH
23347: LD_INT 30
23349: PUSH
23350: LD_INT 31
23352: PUSH
23353: LD_INT 32
23355: PUSH
23356: LD_INT 33
23358: PUSH
23359: LD_INT 34
23361: PUSH
23362: LD_INT 36
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 101
23400: PUSH
23401: LD_INT 102
23403: PUSH
23404: LD_INT 103
23406: PUSH
23407: LD_INT 104
23409: PUSH
23410: LD_INT 105
23412: PUSH
23413: LD_INT 106
23415: PUSH
23416: LD_INT 107
23418: PUSH
23419: LD_INT 108
23421: PUSH
23422: LD_INT 109
23424: PUSH
23425: LD_INT 110
23427: PUSH
23428: LD_INT 111
23430: PUSH
23431: LD_INT 112
23433: PUSH
23434: LD_INT 113
23436: PUSH
23437: LD_INT 114
23439: PUSH
23440: LD_INT 116
23442: PUSH
23443: LD_INT 117
23445: PUSH
23446: LD_INT 118
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: ST_TO_ADDR
23472: GO 24711
23474: LD_INT 14
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23482
23480: GO 23706
23482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23483: LD_ADDR_VAR 0 1
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: LD_INT 4
23499: PUSH
23500: LD_INT 5
23502: PUSH
23503: LD_INT 6
23505: PUSH
23506: LD_INT 7
23508: PUSH
23509: LD_INT 8
23511: PUSH
23512: LD_INT 9
23514: PUSH
23515: LD_INT 10
23517: PUSH
23518: LD_INT 11
23520: PUSH
23521: LD_INT 12
23523: PUSH
23524: LD_INT 13
23526: PUSH
23527: LD_INT 14
23529: PUSH
23530: LD_INT 15
23532: PUSH
23533: LD_INT 16
23535: PUSH
23536: LD_INT 17
23538: PUSH
23539: LD_INT 18
23541: PUSH
23542: LD_INT 19
23544: PUSH
23545: LD_INT 20
23547: PUSH
23548: LD_INT 21
23550: PUSH
23551: LD_INT 22
23553: PUSH
23554: LD_INT 23
23556: PUSH
23557: LD_INT 24
23559: PUSH
23560: LD_INT 25
23562: PUSH
23563: LD_INT 26
23565: PUSH
23566: LD_INT 27
23568: PUSH
23569: LD_INT 28
23571: PUSH
23572: LD_INT 29
23574: PUSH
23575: LD_INT 30
23577: PUSH
23578: LD_INT 31
23580: PUSH
23581: LD_INT 32
23583: PUSH
23584: LD_INT 33
23586: PUSH
23587: LD_INT 34
23589: PUSH
23590: LD_INT 36
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 101
23632: PUSH
23633: LD_INT 102
23635: PUSH
23636: LD_INT 103
23638: PUSH
23639: LD_INT 104
23641: PUSH
23642: LD_INT 105
23644: PUSH
23645: LD_INT 106
23647: PUSH
23648: LD_INT 107
23650: PUSH
23651: LD_INT 108
23653: PUSH
23654: LD_INT 109
23656: PUSH
23657: LD_INT 110
23659: PUSH
23660: LD_INT 111
23662: PUSH
23663: LD_INT 112
23665: PUSH
23666: LD_INT 113
23668: PUSH
23669: LD_INT 114
23671: PUSH
23672: LD_INT 116
23674: PUSH
23675: LD_INT 117
23677: PUSH
23678: LD_INT 118
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: ST_TO_ADDR
23704: GO 24711
23706: LD_INT 15
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23938
23714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23715: LD_ADDR_VAR 0 1
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 3
23728: PUSH
23729: LD_INT 4
23731: PUSH
23732: LD_INT 5
23734: PUSH
23735: LD_INT 6
23737: PUSH
23738: LD_INT 7
23740: PUSH
23741: LD_INT 8
23743: PUSH
23744: LD_INT 9
23746: PUSH
23747: LD_INT 10
23749: PUSH
23750: LD_INT 11
23752: PUSH
23753: LD_INT 12
23755: PUSH
23756: LD_INT 13
23758: PUSH
23759: LD_INT 14
23761: PUSH
23762: LD_INT 15
23764: PUSH
23765: LD_INT 16
23767: PUSH
23768: LD_INT 17
23770: PUSH
23771: LD_INT 18
23773: PUSH
23774: LD_INT 19
23776: PUSH
23777: LD_INT 20
23779: PUSH
23780: LD_INT 21
23782: PUSH
23783: LD_INT 22
23785: PUSH
23786: LD_INT 23
23788: PUSH
23789: LD_INT 24
23791: PUSH
23792: LD_INT 25
23794: PUSH
23795: LD_INT 26
23797: PUSH
23798: LD_INT 27
23800: PUSH
23801: LD_INT 28
23803: PUSH
23804: LD_INT 29
23806: PUSH
23807: LD_INT 30
23809: PUSH
23810: LD_INT 31
23812: PUSH
23813: LD_INT 32
23815: PUSH
23816: LD_INT 33
23818: PUSH
23819: LD_INT 34
23821: PUSH
23822: LD_INT 36
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 101
23864: PUSH
23865: LD_INT 102
23867: PUSH
23868: LD_INT 103
23870: PUSH
23871: LD_INT 104
23873: PUSH
23874: LD_INT 105
23876: PUSH
23877: LD_INT 106
23879: PUSH
23880: LD_INT 107
23882: PUSH
23883: LD_INT 108
23885: PUSH
23886: LD_INT 109
23888: PUSH
23889: LD_INT 110
23891: PUSH
23892: LD_INT 111
23894: PUSH
23895: LD_INT 112
23897: PUSH
23898: LD_INT 113
23900: PUSH
23901: LD_INT 114
23903: PUSH
23904: LD_INT 116
23906: PUSH
23907: LD_INT 117
23909: PUSH
23910: LD_INT 118
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: ST_TO_ADDR
23936: GO 24711
23938: LD_INT 16
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 24082
23946: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23947: LD_ADDR_VAR 0 1
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: LD_INT 4
23957: PUSH
23958: LD_INT 5
23960: PUSH
23961: LD_INT 7
23963: PUSH
23964: LD_INT 11
23966: PUSH
23967: LD_INT 12
23969: PUSH
23970: LD_INT 15
23972: PUSH
23973: LD_INT 16
23975: PUSH
23976: LD_INT 20
23978: PUSH
23979: LD_INT 21
23981: PUSH
23982: LD_INT 22
23984: PUSH
23985: LD_INT 23
23987: PUSH
23988: LD_INT 25
23990: PUSH
23991: LD_INT 26
23993: PUSH
23994: LD_INT 30
23996: PUSH
23997: LD_INT 31
23999: PUSH
24000: LD_INT 32
24002: PUSH
24003: LD_INT 33
24005: PUSH
24006: LD_INT 34
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 101
24032: PUSH
24033: LD_INT 102
24035: PUSH
24036: LD_INT 103
24038: PUSH
24039: LD_INT 106
24041: PUSH
24042: LD_INT 108
24044: PUSH
24045: LD_INT 112
24047: PUSH
24048: LD_INT 113
24050: PUSH
24051: LD_INT 114
24053: PUSH
24054: LD_INT 116
24056: PUSH
24057: LD_INT 117
24059: PUSH
24060: LD_INT 118
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: ST_TO_ADDR
24080: GO 24711
24082: LD_INT 17
24084: DOUBLE
24085: EQUAL
24086: IFTRUE 24090
24088: GO 24314
24090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24091: LD_ADDR_VAR 0 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: LD_INT 4
24107: PUSH
24108: LD_INT 5
24110: PUSH
24111: LD_INT 6
24113: PUSH
24114: LD_INT 7
24116: PUSH
24117: LD_INT 8
24119: PUSH
24120: LD_INT 9
24122: PUSH
24123: LD_INT 10
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 13
24134: PUSH
24135: LD_INT 14
24137: PUSH
24138: LD_INT 15
24140: PUSH
24141: LD_INT 16
24143: PUSH
24144: LD_INT 17
24146: PUSH
24147: LD_INT 18
24149: PUSH
24150: LD_INT 19
24152: PUSH
24153: LD_INT 20
24155: PUSH
24156: LD_INT 21
24158: PUSH
24159: LD_INT 22
24161: PUSH
24162: LD_INT 23
24164: PUSH
24165: LD_INT 24
24167: PUSH
24168: LD_INT 25
24170: PUSH
24171: LD_INT 26
24173: PUSH
24174: LD_INT 27
24176: PUSH
24177: LD_INT 28
24179: PUSH
24180: LD_INT 29
24182: PUSH
24183: LD_INT 30
24185: PUSH
24186: LD_INT 31
24188: PUSH
24189: LD_INT 32
24191: PUSH
24192: LD_INT 33
24194: PUSH
24195: LD_INT 34
24197: PUSH
24198: LD_INT 36
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 101
24240: PUSH
24241: LD_INT 102
24243: PUSH
24244: LD_INT 103
24246: PUSH
24247: LD_INT 104
24249: PUSH
24250: LD_INT 105
24252: PUSH
24253: LD_INT 106
24255: PUSH
24256: LD_INT 107
24258: PUSH
24259: LD_INT 108
24261: PUSH
24262: LD_INT 109
24264: PUSH
24265: LD_INT 110
24267: PUSH
24268: LD_INT 111
24270: PUSH
24271: LD_INT 112
24273: PUSH
24274: LD_INT 113
24276: PUSH
24277: LD_INT 114
24279: PUSH
24280: LD_INT 116
24282: PUSH
24283: LD_INT 117
24285: PUSH
24286: LD_INT 118
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 24711
24314: LD_INT 18
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24470
24322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24323: LD_ADDR_VAR 0 1
24327: PUSH
24328: LD_INT 2
24330: PUSH
24331: LD_INT 4
24333: PUSH
24334: LD_INT 5
24336: PUSH
24337: LD_INT 7
24339: PUSH
24340: LD_INT 11
24342: PUSH
24343: LD_INT 12
24345: PUSH
24346: LD_INT 15
24348: PUSH
24349: LD_INT 16
24351: PUSH
24352: LD_INT 20
24354: PUSH
24355: LD_INT 21
24357: PUSH
24358: LD_INT 22
24360: PUSH
24361: LD_INT 23
24363: PUSH
24364: LD_INT 25
24366: PUSH
24367: LD_INT 26
24369: PUSH
24370: LD_INT 30
24372: PUSH
24373: LD_INT 31
24375: PUSH
24376: LD_INT 32
24378: PUSH
24379: LD_INT 33
24381: PUSH
24382: LD_INT 34
24384: PUSH
24385: LD_INT 35
24387: PUSH
24388: LD_INT 36
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 101
24416: PUSH
24417: LD_INT 102
24419: PUSH
24420: LD_INT 103
24422: PUSH
24423: LD_INT 106
24425: PUSH
24426: LD_INT 108
24428: PUSH
24429: LD_INT 112
24431: PUSH
24432: LD_INT 113
24434: PUSH
24435: LD_INT 114
24437: PUSH
24438: LD_INT 115
24440: PUSH
24441: LD_INT 116
24443: PUSH
24444: LD_INT 117
24446: PUSH
24447: LD_INT 118
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: ST_TO_ADDR
24468: GO 24711
24470: LD_INT 19
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24710
24478: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24479: LD_ADDR_VAR 0 1
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: LD_INT 3
24492: PUSH
24493: LD_INT 4
24495: PUSH
24496: LD_INT 5
24498: PUSH
24499: LD_INT 6
24501: PUSH
24502: LD_INT 7
24504: PUSH
24505: LD_INT 8
24507: PUSH
24508: LD_INT 9
24510: PUSH
24511: LD_INT 10
24513: PUSH
24514: LD_INT 11
24516: PUSH
24517: LD_INT 12
24519: PUSH
24520: LD_INT 13
24522: PUSH
24523: LD_INT 14
24525: PUSH
24526: LD_INT 15
24528: PUSH
24529: LD_INT 16
24531: PUSH
24532: LD_INT 17
24534: PUSH
24535: LD_INT 18
24537: PUSH
24538: LD_INT 19
24540: PUSH
24541: LD_INT 20
24543: PUSH
24544: LD_INT 21
24546: PUSH
24547: LD_INT 22
24549: PUSH
24550: LD_INT 23
24552: PUSH
24553: LD_INT 24
24555: PUSH
24556: LD_INT 25
24558: PUSH
24559: LD_INT 26
24561: PUSH
24562: LD_INT 27
24564: PUSH
24565: LD_INT 28
24567: PUSH
24568: LD_INT 29
24570: PUSH
24571: LD_INT 30
24573: PUSH
24574: LD_INT 31
24576: PUSH
24577: LD_INT 32
24579: PUSH
24580: LD_INT 33
24582: PUSH
24583: LD_INT 34
24585: PUSH
24586: LD_INT 35
24588: PUSH
24589: LD_INT 36
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 101
24632: PUSH
24633: LD_INT 102
24635: PUSH
24636: LD_INT 103
24638: PUSH
24639: LD_INT 104
24641: PUSH
24642: LD_INT 105
24644: PUSH
24645: LD_INT 106
24647: PUSH
24648: LD_INT 107
24650: PUSH
24651: LD_INT 108
24653: PUSH
24654: LD_INT 109
24656: PUSH
24657: LD_INT 110
24659: PUSH
24660: LD_INT 111
24662: PUSH
24663: LD_INT 112
24665: PUSH
24666: LD_INT 113
24668: PUSH
24669: LD_INT 114
24671: PUSH
24672: LD_INT 115
24674: PUSH
24675: LD_INT 116
24677: PUSH
24678: LD_INT 117
24680: PUSH
24681: LD_INT 118
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: ST_TO_ADDR
24708: GO 24711
24710: POP
// end else
24711: GO 24942
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24713: LD_ADDR_VAR 0 1
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 3
24726: PUSH
24727: LD_INT 4
24729: PUSH
24730: LD_INT 5
24732: PUSH
24733: LD_INT 6
24735: PUSH
24736: LD_INT 7
24738: PUSH
24739: LD_INT 8
24741: PUSH
24742: LD_INT 9
24744: PUSH
24745: LD_INT 10
24747: PUSH
24748: LD_INT 11
24750: PUSH
24751: LD_INT 12
24753: PUSH
24754: LD_INT 13
24756: PUSH
24757: LD_INT 14
24759: PUSH
24760: LD_INT 15
24762: PUSH
24763: LD_INT 16
24765: PUSH
24766: LD_INT 17
24768: PUSH
24769: LD_INT 18
24771: PUSH
24772: LD_INT 19
24774: PUSH
24775: LD_INT 20
24777: PUSH
24778: LD_INT 21
24780: PUSH
24781: LD_INT 22
24783: PUSH
24784: LD_INT 23
24786: PUSH
24787: LD_INT 24
24789: PUSH
24790: LD_INT 25
24792: PUSH
24793: LD_INT 26
24795: PUSH
24796: LD_INT 27
24798: PUSH
24799: LD_INT 28
24801: PUSH
24802: LD_INT 29
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 31
24810: PUSH
24811: LD_INT 32
24813: PUSH
24814: LD_INT 33
24816: PUSH
24817: LD_INT 34
24819: PUSH
24820: LD_INT 35
24822: PUSH
24823: LD_INT 36
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 101
24866: PUSH
24867: LD_INT 102
24869: PUSH
24870: LD_INT 103
24872: PUSH
24873: LD_INT 104
24875: PUSH
24876: LD_INT 105
24878: PUSH
24879: LD_INT 106
24881: PUSH
24882: LD_INT 107
24884: PUSH
24885: LD_INT 108
24887: PUSH
24888: LD_INT 109
24890: PUSH
24891: LD_INT 110
24893: PUSH
24894: LD_INT 111
24896: PUSH
24897: LD_INT 112
24899: PUSH
24900: LD_INT 113
24902: PUSH
24903: LD_INT 114
24905: PUSH
24906: LD_INT 115
24908: PUSH
24909: LD_INT 116
24911: PUSH
24912: LD_INT 117
24914: PUSH
24915: LD_INT 118
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: ST_TO_ADDR
// if result then
24942: LD_VAR 0 1
24946: IFFALSE 25235
// begin normal :=  ;
24948: LD_ADDR_VAR 0 3
24952: PUSH
24953: LD_STRING 
24955: ST_TO_ADDR
// hardcore :=  ;
24956: LD_ADDR_VAR 0 4
24960: PUSH
24961: LD_STRING 
24963: ST_TO_ADDR
// for i = 1 to normalCounter do
24964: LD_ADDR_VAR 0 5
24968: PUSH
24969: DOUBLE
24970: LD_INT 1
24972: DEC
24973: ST_TO_ADDR
24974: LD_EXP 70
24978: PUSH
24979: FOR_TO
24980: IFFALSE 25081
// begin tmp := 0 ;
24982: LD_ADDR_VAR 0 2
24986: PUSH
24987: LD_STRING 0
24989: ST_TO_ADDR
// if result [ 1 ] then
24990: LD_VAR 0 1
24994: PUSH
24995: LD_INT 1
24997: ARRAY
24998: IFFALSE 25063
// if result [ 1 ] [ 1 ] = i then
25000: LD_VAR 0 1
25004: PUSH
25005: LD_INT 1
25007: ARRAY
25008: PUSH
25009: LD_INT 1
25011: ARRAY
25012: PUSH
25013: LD_VAR 0 5
25017: EQUAL
25018: IFFALSE 25063
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25020: LD_ADDR_VAR 0 1
25024: PUSH
25025: LD_VAR 0 1
25029: PPUSH
25030: LD_INT 1
25032: PPUSH
25033: LD_VAR 0 1
25037: PUSH
25038: LD_INT 1
25040: ARRAY
25041: PPUSH
25042: LD_INT 1
25044: PPUSH
25045: CALL_OW 3
25049: PPUSH
25050: CALL_OW 1
25054: ST_TO_ADDR
// tmp := 1 ;
25055: LD_ADDR_VAR 0 2
25059: PUSH
25060: LD_STRING 1
25062: ST_TO_ADDR
// end ; normal := normal & tmp ;
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: LD_VAR 0 3
25072: PUSH
25073: LD_VAR 0 2
25077: STR
25078: ST_TO_ADDR
// end ;
25079: GO 24979
25081: POP
25082: POP
// for i = 1 to hardcoreCounter do
25083: LD_ADDR_VAR 0 5
25087: PUSH
25088: DOUBLE
25089: LD_INT 1
25091: DEC
25092: ST_TO_ADDR
25093: LD_EXP 71
25097: PUSH
25098: FOR_TO
25099: IFFALSE 25204
// begin tmp := 0 ;
25101: LD_ADDR_VAR 0 2
25105: PUSH
25106: LD_STRING 0
25108: ST_TO_ADDR
// if result [ 2 ] then
25109: LD_VAR 0 1
25113: PUSH
25114: LD_INT 2
25116: ARRAY
25117: IFFALSE 25186
// if result [ 2 ] [ 1 ] = 100 + i then
25119: LD_VAR 0 1
25123: PUSH
25124: LD_INT 2
25126: ARRAY
25127: PUSH
25128: LD_INT 1
25130: ARRAY
25131: PUSH
25132: LD_INT 100
25134: PUSH
25135: LD_VAR 0 5
25139: PLUS
25140: EQUAL
25141: IFFALSE 25186
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25143: LD_ADDR_VAR 0 1
25147: PUSH
25148: LD_VAR 0 1
25152: PPUSH
25153: LD_INT 2
25155: PPUSH
25156: LD_VAR 0 1
25160: PUSH
25161: LD_INT 2
25163: ARRAY
25164: PPUSH
25165: LD_INT 1
25167: PPUSH
25168: CALL_OW 3
25172: PPUSH
25173: CALL_OW 1
25177: ST_TO_ADDR
// tmp := 1 ;
25178: LD_ADDR_VAR 0 2
25182: PUSH
25183: LD_STRING 1
25185: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25186: LD_ADDR_VAR 0 4
25190: PUSH
25191: LD_VAR 0 4
25195: PUSH
25196: LD_VAR 0 2
25200: STR
25201: ST_TO_ADDR
// end ;
25202: GO 25098
25204: POP
25205: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25206: LD_STRING getStreamItemsFromMission("
25208: PUSH
25209: LD_VAR 0 3
25213: STR
25214: PUSH
25215: LD_STRING ","
25217: STR
25218: PUSH
25219: LD_VAR 0 4
25223: STR
25224: PUSH
25225: LD_STRING ")
25227: STR
25228: PPUSH
25229: CALL_OW 559
// end else
25233: GO 25242
// ToLua ( getStreamItemsFromMission("","") ) ;
25235: LD_STRING getStreamItemsFromMission("","")
25237: PPUSH
25238: CALL_OW 559
// end ;
25242: LD_VAR 0 1
25246: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25247: LD_EXP 69
25251: PUSH
25252: LD_EXP 74
25256: AND
25257: IFFALSE 25381
25259: GO 25261
25261: DISABLE
25262: LD_INT 0
25264: PPUSH
25265: PPUSH
// begin enable ;
25266: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25267: LD_ADDR_VAR 0 2
25271: PUSH
25272: LD_INT 22
25274: PUSH
25275: LD_OWVAR 2
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 34
25289: PUSH
25290: LD_INT 7
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 34
25299: PUSH
25300: LD_INT 45
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 34
25309: PUSH
25310: LD_INT 28
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 34
25319: PUSH
25320: LD_INT 47
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PPUSH
25338: CALL_OW 69
25342: ST_TO_ADDR
// if not tmp then
25343: LD_VAR 0 2
25347: NOT
25348: IFFALSE 25352
// exit ;
25350: GO 25381
// for i in tmp do
25352: LD_ADDR_VAR 0 1
25356: PUSH
25357: LD_VAR 0 2
25361: PUSH
25362: FOR_IN
25363: IFFALSE 25379
// begin SetLives ( i , 0 ) ;
25365: LD_VAR 0 1
25369: PPUSH
25370: LD_INT 0
25372: PPUSH
25373: CALL_OW 234
// end ;
25377: GO 25362
25379: POP
25380: POP
// end ;
25381: PPOPN 2
25383: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25384: LD_EXP 69
25388: PUSH
25389: LD_EXP 75
25393: AND
25394: IFFALSE 25478
25396: GO 25398
25398: DISABLE
25399: LD_INT 0
25401: PPUSH
25402: PPUSH
// begin enable ;
25403: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25404: LD_ADDR_VAR 0 2
25408: PUSH
25409: LD_INT 22
25411: PUSH
25412: LD_OWVAR 2
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 32
25423: PUSH
25424: LD_INT 3
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PPUSH
25435: CALL_OW 69
25439: ST_TO_ADDR
// if not tmp then
25440: LD_VAR 0 2
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25478
// for i in tmp do
25449: LD_ADDR_VAR 0 1
25453: PUSH
25454: LD_VAR 0 2
25458: PUSH
25459: FOR_IN
25460: IFFALSE 25476
// begin SetLives ( i , 0 ) ;
25462: LD_VAR 0 1
25466: PPUSH
25467: LD_INT 0
25469: PPUSH
25470: CALL_OW 234
// end ;
25474: GO 25459
25476: POP
25477: POP
// end ;
25478: PPOPN 2
25480: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25481: LD_EXP 69
25485: PUSH
25486: LD_EXP 72
25490: AND
25491: IFFALSE 25584
25493: GO 25495
25495: DISABLE
25496: LD_INT 0
25498: PPUSH
// begin enable ;
25499: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25500: LD_ADDR_VAR 0 1
25504: PUSH
25505: LD_INT 22
25507: PUSH
25508: LD_OWVAR 2
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 25
25522: PUSH
25523: LD_INT 5
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 25
25532: PUSH
25533: LD_INT 9
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 25
25542: PUSH
25543: LD_INT 8
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PPUSH
25560: CALL_OW 69
25564: PUSH
25565: FOR_IN
25566: IFFALSE 25582
// begin SetClass ( i , 1 ) ;
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_INT 1
25575: PPUSH
25576: CALL_OW 336
// end ;
25580: GO 25565
25582: POP
25583: POP
// end ;
25584: PPOPN 1
25586: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25587: LD_EXP 69
25591: PUSH
25592: LD_EXP 73
25596: AND
25597: PUSH
25598: LD_OWVAR 65
25602: PUSH
25603: LD_INT 7
25605: LESS
25606: AND
25607: IFFALSE 25621
25609: GO 25611
25611: DISABLE
// begin enable ;
25612: ENABLE
// game_speed := 7 ;
25613: LD_ADDR_OWVAR 65
25617: PUSH
25618: LD_INT 7
25620: ST_TO_ADDR
// end ;
25621: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25622: LD_EXP 69
25626: PUSH
25627: LD_EXP 76
25631: AND
25632: IFFALSE 25834
25634: GO 25636
25636: DISABLE
25637: LD_INT 0
25639: PPUSH
25640: PPUSH
25641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25642: LD_ADDR_VAR 0 3
25646: PUSH
25647: LD_INT 81
25649: PUSH
25650: LD_OWVAR 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 21
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PPUSH
25673: CALL_OW 69
25677: ST_TO_ADDR
// if not tmp then
25678: LD_VAR 0 3
25682: NOT
25683: IFFALSE 25687
// exit ;
25685: GO 25834
// if tmp > 5 then
25687: LD_VAR 0 3
25691: PUSH
25692: LD_INT 5
25694: GREATER
25695: IFFALSE 25707
// k := 5 else
25697: LD_ADDR_VAR 0 2
25701: PUSH
25702: LD_INT 5
25704: ST_TO_ADDR
25705: GO 25717
// k := tmp ;
25707: LD_ADDR_VAR 0 2
25711: PUSH
25712: LD_VAR 0 3
25716: ST_TO_ADDR
// for i := 1 to k do
25717: LD_ADDR_VAR 0 1
25721: PUSH
25722: DOUBLE
25723: LD_INT 1
25725: DEC
25726: ST_TO_ADDR
25727: LD_VAR 0 2
25731: PUSH
25732: FOR_TO
25733: IFFALSE 25832
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25735: LD_VAR 0 3
25739: PUSH
25740: LD_VAR 0 1
25744: ARRAY
25745: PPUSH
25746: LD_VAR 0 1
25750: PUSH
25751: LD_INT 4
25753: MOD
25754: PUSH
25755: LD_INT 1
25757: PLUS
25758: PPUSH
25759: CALL_OW 259
25763: PUSH
25764: LD_INT 10
25766: LESS
25767: IFFALSE 25830
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25769: LD_VAR 0 3
25773: PUSH
25774: LD_VAR 0 1
25778: ARRAY
25779: PPUSH
25780: LD_VAR 0 1
25784: PUSH
25785: LD_INT 4
25787: MOD
25788: PUSH
25789: LD_INT 1
25791: PLUS
25792: PPUSH
25793: LD_VAR 0 3
25797: PUSH
25798: LD_VAR 0 1
25802: ARRAY
25803: PPUSH
25804: LD_VAR 0 1
25808: PUSH
25809: LD_INT 4
25811: MOD
25812: PUSH
25813: LD_INT 1
25815: PLUS
25816: PPUSH
25817: CALL_OW 259
25821: PUSH
25822: LD_INT 1
25824: PLUS
25825: PPUSH
25826: CALL_OW 237
25830: GO 25732
25832: POP
25833: POP
// end ;
25834: PPOPN 3
25836: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25837: LD_EXP 69
25841: PUSH
25842: LD_EXP 77
25846: AND
25847: IFFALSE 25867
25849: GO 25851
25851: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25852: LD_INT 4
25854: PPUSH
25855: LD_OWVAR 2
25859: PPUSH
25860: LD_INT 0
25862: PPUSH
25863: CALL_OW 324
25867: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25868: LD_EXP 69
25872: PUSH
25873: LD_EXP 106
25877: AND
25878: IFFALSE 25898
25880: GO 25882
25882: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25883: LD_INT 19
25885: PPUSH
25886: LD_OWVAR 2
25890: PPUSH
25891: LD_INT 0
25893: PPUSH
25894: CALL_OW 324
25898: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25899: LD_EXP 69
25903: PUSH
25904: LD_EXP 78
25908: AND
25909: IFFALSE 26011
25911: GO 25913
25913: DISABLE
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// begin enable ;
25918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25919: LD_ADDR_VAR 0 2
25923: PUSH
25924: LD_INT 22
25926: PUSH
25927: LD_OWVAR 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: LD_INT 34
25941: PUSH
25942: LD_INT 11
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 34
25951: PUSH
25952: LD_INT 30
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: LIST
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PPUSH
25968: CALL_OW 69
25972: ST_TO_ADDR
// if not tmp then
25973: LD_VAR 0 2
25977: NOT
25978: IFFALSE 25982
// exit ;
25980: GO 26011
// for i in tmp do
25982: LD_ADDR_VAR 0 1
25986: PUSH
25987: LD_VAR 0 2
25991: PUSH
25992: FOR_IN
25993: IFFALSE 26009
// begin SetLives ( i , 0 ) ;
25995: LD_VAR 0 1
25999: PPUSH
26000: LD_INT 0
26002: PPUSH
26003: CALL_OW 234
// end ;
26007: GO 25992
26009: POP
26010: POP
// end ;
26011: PPOPN 2
26013: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26014: LD_EXP 69
26018: PUSH
26019: LD_EXP 79
26023: AND
26024: IFFALSE 26044
26026: GO 26028
26028: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26029: LD_INT 32
26031: PPUSH
26032: LD_OWVAR 2
26036: PPUSH
26037: LD_INT 0
26039: PPUSH
26040: CALL_OW 324
26044: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26045: LD_EXP 69
26049: PUSH
26050: LD_EXP 80
26054: AND
26055: IFFALSE 26236
26057: GO 26059
26059: DISABLE
26060: LD_INT 0
26062: PPUSH
26063: PPUSH
26064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26065: LD_ADDR_VAR 0 2
26069: PUSH
26070: LD_INT 22
26072: PUSH
26073: LD_OWVAR 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 33
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PPUSH
26096: CALL_OW 69
26100: ST_TO_ADDR
// if not tmp then
26101: LD_VAR 0 2
26105: NOT
26106: IFFALSE 26110
// exit ;
26108: GO 26236
// side := 0 ;
26110: LD_ADDR_VAR 0 3
26114: PUSH
26115: LD_INT 0
26117: ST_TO_ADDR
// for i := 1 to 8 do
26118: LD_ADDR_VAR 0 1
26122: PUSH
26123: DOUBLE
26124: LD_INT 1
26126: DEC
26127: ST_TO_ADDR
26128: LD_INT 8
26130: PUSH
26131: FOR_TO
26132: IFFALSE 26180
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26134: LD_OWVAR 2
26138: PUSH
26139: LD_VAR 0 1
26143: NONEQUAL
26144: PUSH
26145: LD_OWVAR 2
26149: PPUSH
26150: LD_VAR 0 1
26154: PPUSH
26155: CALL_OW 81
26159: PUSH
26160: LD_INT 2
26162: EQUAL
26163: AND
26164: IFFALSE 26178
// begin side := i ;
26166: LD_ADDR_VAR 0 3
26170: PUSH
26171: LD_VAR 0 1
26175: ST_TO_ADDR
// break ;
26176: GO 26180
// end ;
26178: GO 26131
26180: POP
26181: POP
// if not side then
26182: LD_VAR 0 3
26186: NOT
26187: IFFALSE 26191
// exit ;
26189: GO 26236
// for i := 1 to tmp do
26191: LD_ADDR_VAR 0 1
26195: PUSH
26196: DOUBLE
26197: LD_INT 1
26199: DEC
26200: ST_TO_ADDR
26201: LD_VAR 0 2
26205: PUSH
26206: FOR_TO
26207: IFFALSE 26234
// if Prob ( 60 ) then
26209: LD_INT 60
26211: PPUSH
26212: CALL_OW 13
26216: IFFALSE 26232
// SetSide ( i , side ) ;
26218: LD_VAR 0 1
26222: PPUSH
26223: LD_VAR 0 3
26227: PPUSH
26228: CALL_OW 235
26232: GO 26206
26234: POP
26235: POP
// end ;
26236: PPOPN 3
26238: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26239: LD_EXP 69
26243: PUSH
26244: LD_EXP 82
26248: AND
26249: IFFALSE 26368
26251: GO 26253
26253: DISABLE
26254: LD_INT 0
26256: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26257: LD_ADDR_VAR 0 1
26261: PUSH
26262: LD_INT 22
26264: PUSH
26265: LD_OWVAR 2
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 21
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: LD_INT 23
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: PPUSH
26306: CALL_OW 69
26310: PUSH
26311: FOR_IN
26312: IFFALSE 26366
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26314: LD_VAR 0 1
26318: PPUSH
26319: CALL_OW 257
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: LD_INT 3
26332: PUSH
26333: LD_INT 4
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: IN
26342: IFFALSE 26364
// SetClass ( un , rand ( 1 , 4 ) ) ;
26344: LD_VAR 0 1
26348: PPUSH
26349: LD_INT 1
26351: PPUSH
26352: LD_INT 4
26354: PPUSH
26355: CALL_OW 12
26359: PPUSH
26360: CALL_OW 336
26364: GO 26311
26366: POP
26367: POP
// end ;
26368: PPOPN 1
26370: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26371: LD_EXP 69
26375: PUSH
26376: LD_EXP 81
26380: AND
26381: IFFALSE 26460
26383: GO 26385
26385: DISABLE
26386: LD_INT 0
26388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26389: LD_ADDR_VAR 0 1
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_OWVAR 2
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 21
26408: PUSH
26409: LD_INT 3
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PPUSH
26420: CALL_OW 69
26424: ST_TO_ADDR
// if not tmp then
26425: LD_VAR 0 1
26429: NOT
26430: IFFALSE 26434
// exit ;
26432: GO 26460
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26434: LD_VAR 0 1
26438: PUSH
26439: LD_INT 1
26441: PPUSH
26442: LD_VAR 0 1
26446: PPUSH
26447: CALL_OW 12
26451: ARRAY
26452: PPUSH
26453: LD_INT 100
26455: PPUSH
26456: CALL_OW 234
// end ;
26460: PPOPN 1
26462: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26463: LD_EXP 69
26467: PUSH
26468: LD_EXP 83
26472: AND
26473: IFFALSE 26571
26475: GO 26477
26477: DISABLE
26478: LD_INT 0
26480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: LD_INT 22
26488: PUSH
26489: LD_OWVAR 2
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 21
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PPUSH
26512: CALL_OW 69
26516: ST_TO_ADDR
// if not tmp then
26517: LD_VAR 0 1
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26571
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26526: LD_VAR 0 1
26530: PUSH
26531: LD_INT 1
26533: PPUSH
26534: LD_VAR 0 1
26538: PPUSH
26539: CALL_OW 12
26543: ARRAY
26544: PPUSH
26545: LD_INT 1
26547: PPUSH
26548: LD_INT 4
26550: PPUSH
26551: CALL_OW 12
26555: PPUSH
26556: LD_INT 3000
26558: PPUSH
26559: LD_INT 9000
26561: PPUSH
26562: CALL_OW 12
26566: PPUSH
26567: CALL_OW 492
// end ;
26571: PPOPN 1
26573: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26574: LD_EXP 69
26578: PUSH
26579: LD_EXP 84
26583: AND
26584: IFFALSE 26604
26586: GO 26588
26588: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26589: LD_INT 1
26591: PPUSH
26592: LD_OWVAR 2
26596: PPUSH
26597: LD_INT 0
26599: PPUSH
26600: CALL_OW 324
26604: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26605: LD_EXP 69
26609: PUSH
26610: LD_EXP 85
26614: AND
26615: IFFALSE 26698
26617: GO 26619
26619: DISABLE
26620: LD_INT 0
26622: PPUSH
26623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26624: LD_ADDR_VAR 0 2
26628: PUSH
26629: LD_INT 22
26631: PUSH
26632: LD_OWVAR 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 21
26643: PUSH
26644: LD_INT 3
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PPUSH
26655: CALL_OW 69
26659: ST_TO_ADDR
// if not tmp then
26660: LD_VAR 0 2
26664: NOT
26665: IFFALSE 26669
// exit ;
26667: GO 26698
// for i in tmp do
26669: LD_ADDR_VAR 0 1
26673: PUSH
26674: LD_VAR 0 2
26678: PUSH
26679: FOR_IN
26680: IFFALSE 26696
// SetBLevel ( i , 10 ) ;
26682: LD_VAR 0 1
26686: PPUSH
26687: LD_INT 10
26689: PPUSH
26690: CALL_OW 241
26694: GO 26679
26696: POP
26697: POP
// end ;
26698: PPOPN 2
26700: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26701: LD_EXP 69
26705: PUSH
26706: LD_EXP 86
26710: AND
26711: IFFALSE 26822
26713: GO 26715
26715: DISABLE
26716: LD_INT 0
26718: PPUSH
26719: PPUSH
26720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26721: LD_ADDR_VAR 0 3
26725: PUSH
26726: LD_INT 22
26728: PUSH
26729: LD_OWVAR 2
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 25
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 69
26756: ST_TO_ADDR
// if not tmp then
26757: LD_VAR 0 3
26761: NOT
26762: IFFALSE 26766
// exit ;
26764: GO 26822
// un := tmp [ rand ( 1 , tmp ) ] ;
26766: LD_ADDR_VAR 0 2
26770: PUSH
26771: LD_VAR 0 3
26775: PUSH
26776: LD_INT 1
26778: PPUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 12
26788: ARRAY
26789: ST_TO_ADDR
// if Crawls ( un ) then
26790: LD_VAR 0 2
26794: PPUSH
26795: CALL_OW 318
26799: IFFALSE 26810
// ComWalk ( un ) ;
26801: LD_VAR 0 2
26805: PPUSH
26806: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26810: LD_VAR 0 2
26814: PPUSH
26815: LD_INT 5
26817: PPUSH
26818: CALL_OW 336
// end ;
26822: PPOPN 3
26824: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26825: LD_EXP 69
26829: PUSH
26830: LD_EXP 87
26834: AND
26835: PUSH
26836: LD_OWVAR 67
26840: PUSH
26841: LD_INT 4
26843: LESS
26844: AND
26845: IFFALSE 26864
26847: GO 26849
26849: DISABLE
// begin Difficulty := Difficulty + 1 ;
26850: LD_ADDR_OWVAR 67
26854: PUSH
26855: LD_OWVAR 67
26859: PUSH
26860: LD_INT 1
26862: PLUS
26863: ST_TO_ADDR
// end ;
26864: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26865: LD_EXP 69
26869: PUSH
26870: LD_EXP 88
26874: AND
26875: IFFALSE 26978
26877: GO 26879
26879: DISABLE
26880: LD_INT 0
26882: PPUSH
// begin for i := 1 to 5 do
26883: LD_ADDR_VAR 0 1
26887: PUSH
26888: DOUBLE
26889: LD_INT 1
26891: DEC
26892: ST_TO_ADDR
26893: LD_INT 5
26895: PUSH
26896: FOR_TO
26897: IFFALSE 26976
// begin uc_nation := nation_nature ;
26899: LD_ADDR_OWVAR 21
26903: PUSH
26904: LD_INT 0
26906: ST_TO_ADDR
// uc_side := 0 ;
26907: LD_ADDR_OWVAR 20
26911: PUSH
26912: LD_INT 0
26914: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26915: LD_ADDR_OWVAR 29
26919: PUSH
26920: LD_INT 12
26922: PUSH
26923: LD_INT 12
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: ST_TO_ADDR
// hc_agressivity := 20 ;
26930: LD_ADDR_OWVAR 35
26934: PUSH
26935: LD_INT 20
26937: ST_TO_ADDR
// hc_class := class_tiger ;
26938: LD_ADDR_OWVAR 28
26942: PUSH
26943: LD_INT 14
26945: ST_TO_ADDR
// hc_gallery :=  ;
26946: LD_ADDR_OWVAR 33
26950: PUSH
26951: LD_STRING 
26953: ST_TO_ADDR
// hc_name :=  ;
26954: LD_ADDR_OWVAR 26
26958: PUSH
26959: LD_STRING 
26961: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26962: CALL_OW 44
26966: PPUSH
26967: LD_INT 0
26969: PPUSH
26970: CALL_OW 51
// end ;
26974: GO 26896
26976: POP
26977: POP
// end ;
26978: PPOPN 1
26980: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26981: LD_EXP 69
26985: PUSH
26986: LD_EXP 89
26990: AND
26991: IFFALSE 27000
26993: GO 26995
26995: DISABLE
// StreamSibBomb ;
26996: CALL 27001 0 0
27000: END
// export function StreamSibBomb ; var i , x , y ; begin
27001: LD_INT 0
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
// result := false ;
27007: LD_ADDR_VAR 0 1
27011: PUSH
27012: LD_INT 0
27014: ST_TO_ADDR
// for i := 1 to 16 do
27015: LD_ADDR_VAR 0 2
27019: PUSH
27020: DOUBLE
27021: LD_INT 1
27023: DEC
27024: ST_TO_ADDR
27025: LD_INT 16
27027: PUSH
27028: FOR_TO
27029: IFFALSE 27228
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27031: LD_ADDR_VAR 0 3
27035: PUSH
27036: LD_INT 10
27038: PUSH
27039: LD_INT 20
27041: PUSH
27042: LD_INT 30
27044: PUSH
27045: LD_INT 40
27047: PUSH
27048: LD_INT 50
27050: PUSH
27051: LD_INT 60
27053: PUSH
27054: LD_INT 70
27056: PUSH
27057: LD_INT 80
27059: PUSH
27060: LD_INT 90
27062: PUSH
27063: LD_INT 100
27065: PUSH
27066: LD_INT 110
27068: PUSH
27069: LD_INT 120
27071: PUSH
27072: LD_INT 130
27074: PUSH
27075: LD_INT 140
27077: PUSH
27078: LD_INT 150
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: PPUSH
27101: LD_INT 15
27103: PPUSH
27104: CALL_OW 12
27108: ARRAY
27109: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27110: LD_ADDR_VAR 0 4
27114: PUSH
27115: LD_INT 10
27117: PUSH
27118: LD_INT 20
27120: PUSH
27121: LD_INT 30
27123: PUSH
27124: LD_INT 40
27126: PUSH
27127: LD_INT 50
27129: PUSH
27130: LD_INT 60
27132: PUSH
27133: LD_INT 70
27135: PUSH
27136: LD_INT 80
27138: PUSH
27139: LD_INT 90
27141: PUSH
27142: LD_INT 100
27144: PUSH
27145: LD_INT 110
27147: PUSH
27148: LD_INT 120
27150: PUSH
27151: LD_INT 130
27153: PUSH
27154: LD_INT 140
27156: PUSH
27157: LD_INT 150
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PPUSH
27180: LD_INT 15
27182: PPUSH
27183: CALL_OW 12
27187: ARRAY
27188: ST_TO_ADDR
// if ValidHex ( x , y ) then
27189: LD_VAR 0 3
27193: PPUSH
27194: LD_VAR 0 4
27198: PPUSH
27199: CALL_OW 488
27203: IFFALSE 27226
// begin result := [ x , y ] ;
27205: LD_ADDR_VAR 0 1
27209: PUSH
27210: LD_VAR 0 3
27214: PUSH
27215: LD_VAR 0 4
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: ST_TO_ADDR
// break ;
27224: GO 27228
// end ; end ;
27226: GO 27028
27228: POP
27229: POP
// if result then
27230: LD_VAR 0 1
27234: IFFALSE 27294
// begin ToLua ( playSibBomb() ) ;
27236: LD_STRING playSibBomb()
27238: PPUSH
27239: CALL_OW 559
// wait ( 0 0$14 ) ;
27243: LD_INT 490
27245: PPUSH
27246: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27250: LD_VAR 0 1
27254: PUSH
27255: LD_INT 1
27257: ARRAY
27258: PPUSH
27259: LD_VAR 0 1
27263: PUSH
27264: LD_INT 2
27266: ARRAY
27267: PPUSH
27268: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27272: LD_VAR 0 1
27276: PUSH
27277: LD_INT 1
27279: ARRAY
27280: PPUSH
27281: LD_VAR 0 1
27285: PUSH
27286: LD_INT 2
27288: ARRAY
27289: PPUSH
27290: CALL_OW 429
// end ; end ;
27294: LD_VAR 0 1
27298: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27299: LD_EXP 69
27303: PUSH
27304: LD_EXP 91
27308: AND
27309: IFFALSE 27321
27311: GO 27313
27313: DISABLE
// YouLost (  ) ;
27314: LD_STRING 
27316: PPUSH
27317: CALL_OW 104
27321: END
// every 0 0$1 trigger StreamModeActive and sFog do
27322: LD_EXP 69
27326: PUSH
27327: LD_EXP 90
27331: AND
27332: IFFALSE 27346
27334: GO 27336
27336: DISABLE
// FogOff ( your_side ) ;
27337: LD_OWVAR 2
27341: PPUSH
27342: CALL_OW 344
27346: END
// every 0 0$1 trigger StreamModeActive and sSun do
27347: LD_EXP 69
27351: PUSH
27352: LD_EXP 92
27356: AND
27357: IFFALSE 27385
27359: GO 27361
27361: DISABLE
// begin solar_recharge_percent := 0 ;
27362: LD_ADDR_OWVAR 79
27366: PUSH
27367: LD_INT 0
27369: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27370: LD_INT 10500
27372: PPUSH
27373: CALL_OW 67
// solar_recharge_percent := 100 ;
27377: LD_ADDR_OWVAR 79
27381: PUSH
27382: LD_INT 100
27384: ST_TO_ADDR
// end ;
27385: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27386: LD_EXP 69
27390: PUSH
27391: LD_EXP 93
27395: AND
27396: IFFALSE 27635
27398: GO 27400
27400: DISABLE
27401: LD_INT 0
27403: PPUSH
27404: PPUSH
27405: PPUSH
// begin tmp := [ ] ;
27406: LD_ADDR_VAR 0 3
27410: PUSH
27411: EMPTY
27412: ST_TO_ADDR
// for i := 1 to 6 do
27413: LD_ADDR_VAR 0 1
27417: PUSH
27418: DOUBLE
27419: LD_INT 1
27421: DEC
27422: ST_TO_ADDR
27423: LD_INT 6
27425: PUSH
27426: FOR_TO
27427: IFFALSE 27532
// begin uc_nation := nation_nature ;
27429: LD_ADDR_OWVAR 21
27433: PUSH
27434: LD_INT 0
27436: ST_TO_ADDR
// uc_side := 0 ;
27437: LD_ADDR_OWVAR 20
27441: PUSH
27442: LD_INT 0
27444: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27445: LD_ADDR_OWVAR 29
27449: PUSH
27450: LD_INT 12
27452: PUSH
27453: LD_INT 12
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: ST_TO_ADDR
// hc_agressivity := 20 ;
27460: LD_ADDR_OWVAR 35
27464: PUSH
27465: LD_INT 20
27467: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27468: LD_ADDR_OWVAR 28
27472: PUSH
27473: LD_INT 17
27475: ST_TO_ADDR
// hc_gallery :=  ;
27476: LD_ADDR_OWVAR 33
27480: PUSH
27481: LD_STRING 
27483: ST_TO_ADDR
// hc_name :=  ;
27484: LD_ADDR_OWVAR 26
27488: PUSH
27489: LD_STRING 
27491: ST_TO_ADDR
// un := CreateHuman ;
27492: LD_ADDR_VAR 0 2
27496: PUSH
27497: CALL_OW 44
27501: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27502: LD_VAR 0 2
27506: PPUSH
27507: LD_INT 1
27509: PPUSH
27510: CALL_OW 51
// tmp := tmp ^ un ;
27514: LD_ADDR_VAR 0 3
27518: PUSH
27519: LD_VAR 0 3
27523: PUSH
27524: LD_VAR 0 2
27528: ADD
27529: ST_TO_ADDR
// end ;
27530: GO 27426
27532: POP
27533: POP
// repeat wait ( 0 0$1 ) ;
27534: LD_INT 35
27536: PPUSH
27537: CALL_OW 67
// for un in tmp do
27541: LD_ADDR_VAR 0 2
27545: PUSH
27546: LD_VAR 0 3
27550: PUSH
27551: FOR_IN
27552: IFFALSE 27626
// begin if IsDead ( un ) then
27554: LD_VAR 0 2
27558: PPUSH
27559: CALL_OW 301
27563: IFFALSE 27583
// begin tmp := tmp diff un ;
27565: LD_ADDR_VAR 0 3
27569: PUSH
27570: LD_VAR 0 3
27574: PUSH
27575: LD_VAR 0 2
27579: DIFF
27580: ST_TO_ADDR
// continue ;
27581: GO 27551
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27583: LD_VAR 0 2
27587: PPUSH
27588: LD_INT 3
27590: PUSH
27591: LD_INT 22
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: PPUSH
27610: LD_VAR 0 2
27614: PPUSH
27615: CALL_OW 74
27619: PPUSH
27620: CALL_OW 115
// end ;
27624: GO 27551
27626: POP
27627: POP
// until not tmp ;
27628: LD_VAR 0 3
27632: NOT
27633: IFFALSE 27534
// end ;
27635: PPOPN 3
27637: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27638: LD_EXP 69
27642: PUSH
27643: LD_EXP 94
27647: AND
27648: IFFALSE 27702
27650: GO 27652
27652: DISABLE
// begin ToLua ( displayTroll(); ) ;
27653: LD_STRING displayTroll();
27655: PPUSH
27656: CALL_OW 559
// wait ( 3 3$00 ) ;
27660: LD_INT 6300
27662: PPUSH
27663: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27667: LD_STRING hideTroll();
27669: PPUSH
27670: CALL_OW 559
// wait ( 1 1$00 ) ;
27674: LD_INT 2100
27676: PPUSH
27677: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27681: LD_STRING displayTroll();
27683: PPUSH
27684: CALL_OW 559
// wait ( 1 1$00 ) ;
27688: LD_INT 2100
27690: PPUSH
27691: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27695: LD_STRING hideTroll();
27697: PPUSH
27698: CALL_OW 559
// end ;
27702: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27703: LD_EXP 69
27707: PUSH
27708: LD_EXP 95
27712: AND
27713: IFFALSE 27776
27715: GO 27717
27717: DISABLE
27718: LD_INT 0
27720: PPUSH
// begin p := 0 ;
27721: LD_ADDR_VAR 0 1
27725: PUSH
27726: LD_INT 0
27728: ST_TO_ADDR
// repeat game_speed := 1 ;
27729: LD_ADDR_OWVAR 65
27733: PUSH
27734: LD_INT 1
27736: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27737: LD_INT 35
27739: PPUSH
27740: CALL_OW 67
// p := p + 1 ;
27744: LD_ADDR_VAR 0 1
27748: PUSH
27749: LD_VAR 0 1
27753: PUSH
27754: LD_INT 1
27756: PLUS
27757: ST_TO_ADDR
// until p >= 60 ;
27758: LD_VAR 0 1
27762: PUSH
27763: LD_INT 60
27765: GREATEREQUAL
27766: IFFALSE 27729
// game_speed := 4 ;
27768: LD_ADDR_OWVAR 65
27772: PUSH
27773: LD_INT 4
27775: ST_TO_ADDR
// end ;
27776: PPOPN 1
27778: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27779: LD_EXP 69
27783: PUSH
27784: LD_EXP 96
27788: AND
27789: IFFALSE 27935
27791: GO 27793
27793: DISABLE
27794: LD_INT 0
27796: PPUSH
27797: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27798: LD_ADDR_VAR 0 1
27802: PUSH
27803: LD_INT 22
27805: PUSH
27806: LD_OWVAR 2
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 30
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PPUSH
27847: CALL_OW 69
27851: ST_TO_ADDR
// if not depot then
27852: LD_VAR 0 1
27856: NOT
27857: IFFALSE 27861
// exit ;
27859: GO 27935
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27861: LD_ADDR_VAR 0 2
27865: PUSH
27866: LD_VAR 0 1
27870: PUSH
27871: LD_INT 1
27873: PPUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 12
27883: ARRAY
27884: PPUSH
27885: CALL_OW 274
27889: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27890: LD_VAR 0 2
27894: PPUSH
27895: LD_INT 1
27897: PPUSH
27898: LD_INT 0
27900: PPUSH
27901: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27905: LD_VAR 0 2
27909: PPUSH
27910: LD_INT 2
27912: PPUSH
27913: LD_INT 0
27915: PPUSH
27916: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27920: LD_VAR 0 2
27924: PPUSH
27925: LD_INT 3
27927: PPUSH
27928: LD_INT 0
27930: PPUSH
27931: CALL_OW 277
// end ;
27935: PPOPN 2
27937: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27938: LD_EXP 69
27942: PUSH
27943: LD_EXP 97
27947: AND
27948: IFFALSE 28045
27950: GO 27952
27952: DISABLE
27953: LD_INT 0
27955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27956: LD_ADDR_VAR 0 1
27960: PUSH
27961: LD_INT 22
27963: PUSH
27964: LD_OWVAR 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 21
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 23
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: LIST
28004: PPUSH
28005: CALL_OW 69
28009: ST_TO_ADDR
// if not tmp then
28010: LD_VAR 0 1
28014: NOT
28015: IFFALSE 28019
// exit ;
28017: GO 28045
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28019: LD_VAR 0 1
28023: PUSH
28024: LD_INT 1
28026: PPUSH
28027: LD_VAR 0 1
28031: PPUSH
28032: CALL_OW 12
28036: ARRAY
28037: PPUSH
28038: LD_INT 200
28040: PPUSH
28041: CALL_OW 234
// end ;
28045: PPOPN 1
28047: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28048: LD_EXP 69
28052: PUSH
28053: LD_EXP 98
28057: AND
28058: IFFALSE 28137
28060: GO 28062
28062: DISABLE
28063: LD_INT 0
28065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28066: LD_ADDR_VAR 0 1
28070: PUSH
28071: LD_INT 22
28073: PUSH
28074: LD_OWVAR 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 21
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PPUSH
28097: CALL_OW 69
28101: ST_TO_ADDR
// if not tmp then
28102: LD_VAR 0 1
28106: NOT
28107: IFFALSE 28111
// exit ;
28109: GO 28137
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28111: LD_VAR 0 1
28115: PUSH
28116: LD_INT 1
28118: PPUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 12
28128: ARRAY
28129: PPUSH
28130: LD_INT 60
28132: PPUSH
28133: CALL_OW 234
// end ;
28137: PPOPN 1
28139: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28140: LD_EXP 69
28144: PUSH
28145: LD_EXP 99
28149: AND
28150: IFFALSE 28249
28152: GO 28154
28154: DISABLE
28155: LD_INT 0
28157: PPUSH
28158: PPUSH
// begin enable ;
28159: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28160: LD_ADDR_VAR 0 1
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 61
28179: PUSH
28180: EMPTY
28181: LIST
28182: PUSH
28183: LD_INT 33
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: PPUSH
28198: CALL_OW 69
28202: ST_TO_ADDR
// if not tmp then
28203: LD_VAR 0 1
28207: NOT
28208: IFFALSE 28212
// exit ;
28210: GO 28249
// for i in tmp do
28212: LD_ADDR_VAR 0 2
28216: PUSH
28217: LD_VAR 0 1
28221: PUSH
28222: FOR_IN
28223: IFFALSE 28247
// if IsControledBy ( i ) then
28225: LD_VAR 0 2
28229: PPUSH
28230: CALL_OW 312
28234: IFFALSE 28245
// ComUnlink ( i ) ;
28236: LD_VAR 0 2
28240: PPUSH
28241: CALL_OW 136
28245: GO 28222
28247: POP
28248: POP
// end ;
28249: PPOPN 2
28251: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28252: LD_EXP 69
28256: PUSH
28257: LD_EXP 100
28261: AND
28262: IFFALSE 28402
28264: GO 28266
28266: DISABLE
28267: LD_INT 0
28269: PPUSH
28270: PPUSH
// begin ToLua ( displayPowell(); ) ;
28271: LD_STRING displayPowell();
28273: PPUSH
28274: CALL_OW 559
// uc_side := 0 ;
28278: LD_ADDR_OWVAR 20
28282: PUSH
28283: LD_INT 0
28285: ST_TO_ADDR
// uc_nation := 2 ;
28286: LD_ADDR_OWVAR 21
28290: PUSH
28291: LD_INT 2
28293: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28294: LD_ADDR_OWVAR 37
28298: PUSH
28299: LD_INT 14
28301: ST_TO_ADDR
// vc_engine := engine_siberite ;
28302: LD_ADDR_OWVAR 39
28306: PUSH
28307: LD_INT 3
28309: ST_TO_ADDR
// vc_control := control_apeman ;
28310: LD_ADDR_OWVAR 38
28314: PUSH
28315: LD_INT 5
28317: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28318: LD_ADDR_OWVAR 40
28322: PUSH
28323: LD_INT 29
28325: ST_TO_ADDR
// un := CreateVehicle ;
28326: LD_ADDR_VAR 0 2
28330: PUSH
28331: CALL_OW 45
28335: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28336: LD_VAR 0 2
28340: PPUSH
28341: LD_INT 1
28343: PPUSH
28344: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28348: LD_INT 35
28350: PPUSH
28351: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28355: LD_VAR 0 2
28359: PPUSH
28360: LD_INT 22
28362: PUSH
28363: LD_OWVAR 2
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PPUSH
28372: CALL_OW 69
28376: PPUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: CALL_OW 74
28386: PPUSH
28387: CALL_OW 115
// until IsDead ( un ) ;
28391: LD_VAR 0 2
28395: PPUSH
28396: CALL_OW 301
28400: IFFALSE 28348
// end ;
28402: PPOPN 2
28404: END
// every 0 0$1 trigger StreamModeActive and sStu do
28405: LD_EXP 69
28409: PUSH
28410: LD_EXP 108
28414: AND
28415: IFFALSE 28431
28417: GO 28419
28419: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28420: LD_STRING displayStucuk();
28422: PPUSH
28423: CALL_OW 559
// ResetFog ;
28427: CALL_OW 335
// end ;
28431: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28432: LD_EXP 69
28436: PUSH
28437: LD_EXP 101
28441: AND
28442: IFFALSE 28583
28444: GO 28446
28446: DISABLE
28447: LD_INT 0
28449: PPUSH
28450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28451: LD_ADDR_VAR 0 2
28455: PUSH
28456: LD_INT 22
28458: PUSH
28459: LD_OWVAR 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 21
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PPUSH
28482: CALL_OW 69
28486: ST_TO_ADDR
// if not tmp then
28487: LD_VAR 0 2
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 28583
// un := tmp [ rand ( 1 , tmp ) ] ;
28496: LD_ADDR_VAR 0 1
28500: PUSH
28501: LD_VAR 0 2
28505: PUSH
28506: LD_INT 1
28508: PPUSH
28509: LD_VAR 0 2
28513: PPUSH
28514: CALL_OW 12
28518: ARRAY
28519: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28520: LD_VAR 0 1
28524: PPUSH
28525: LD_INT 0
28527: PPUSH
28528: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28532: LD_VAR 0 1
28536: PPUSH
28537: LD_OWVAR 3
28541: PUSH
28542: LD_VAR 0 1
28546: DIFF
28547: PPUSH
28548: LD_VAR 0 1
28552: PPUSH
28553: CALL_OW 74
28557: PPUSH
28558: CALL_OW 115
// wait ( 0 0$20 ) ;
28562: LD_INT 700
28564: PPUSH
28565: CALL_OW 67
// SetSide ( un , your_side ) ;
28569: LD_VAR 0 1
28573: PPUSH
28574: LD_OWVAR 2
28578: PPUSH
28579: CALL_OW 235
// end ;
28583: PPOPN 2
28585: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28586: LD_EXP 69
28590: PUSH
28591: LD_EXP 102
28595: AND
28596: IFFALSE 28702
28598: GO 28600
28600: DISABLE
28601: LD_INT 0
28603: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28604: LD_ADDR_VAR 0 1
28608: PUSH
28609: LD_INT 22
28611: PUSH
28612: LD_OWVAR 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: LD_INT 30
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 30
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PPUSH
28653: CALL_OW 69
28657: ST_TO_ADDR
// if not depot then
28658: LD_VAR 0 1
28662: NOT
28663: IFFALSE 28667
// exit ;
28665: GO 28702
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28667: LD_VAR 0 1
28671: PUSH
28672: LD_INT 1
28674: ARRAY
28675: PPUSH
28676: CALL_OW 250
28680: PPUSH
28681: LD_VAR 0 1
28685: PUSH
28686: LD_INT 1
28688: ARRAY
28689: PPUSH
28690: CALL_OW 251
28694: PPUSH
28695: LD_INT 70
28697: PPUSH
28698: CALL_OW 495
// end ;
28702: PPOPN 1
28704: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28705: LD_EXP 69
28709: PUSH
28710: LD_EXP 103
28714: AND
28715: IFFALSE 28926
28717: GO 28719
28719: DISABLE
28720: LD_INT 0
28722: PPUSH
28723: PPUSH
28724: PPUSH
28725: PPUSH
28726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28727: LD_ADDR_VAR 0 5
28731: PUSH
28732: LD_INT 22
28734: PUSH
28735: LD_OWVAR 2
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 21
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PPUSH
28758: CALL_OW 69
28762: ST_TO_ADDR
// if not tmp then
28763: LD_VAR 0 5
28767: NOT
28768: IFFALSE 28772
// exit ;
28770: GO 28926
// for i in tmp do
28772: LD_ADDR_VAR 0 1
28776: PUSH
28777: LD_VAR 0 5
28781: PUSH
28782: FOR_IN
28783: IFFALSE 28924
// begin d := rand ( 0 , 5 ) ;
28785: LD_ADDR_VAR 0 4
28789: PUSH
28790: LD_INT 0
28792: PPUSH
28793: LD_INT 5
28795: PPUSH
28796: CALL_OW 12
28800: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28801: LD_ADDR_VAR 0 2
28805: PUSH
28806: LD_VAR 0 1
28810: PPUSH
28811: CALL_OW 250
28815: PPUSH
28816: LD_VAR 0 4
28820: PPUSH
28821: LD_INT 3
28823: PPUSH
28824: LD_INT 12
28826: PPUSH
28827: CALL_OW 12
28831: PPUSH
28832: CALL_OW 272
28836: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28837: LD_ADDR_VAR 0 3
28841: PUSH
28842: LD_VAR 0 1
28846: PPUSH
28847: CALL_OW 251
28851: PPUSH
28852: LD_VAR 0 4
28856: PPUSH
28857: LD_INT 3
28859: PPUSH
28860: LD_INT 12
28862: PPUSH
28863: CALL_OW 12
28867: PPUSH
28868: CALL_OW 273
28872: ST_TO_ADDR
// if ValidHex ( x , y ) then
28873: LD_VAR 0 2
28877: PPUSH
28878: LD_VAR 0 3
28882: PPUSH
28883: CALL_OW 488
28887: IFFALSE 28922
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28889: LD_VAR 0 1
28893: PPUSH
28894: LD_VAR 0 2
28898: PPUSH
28899: LD_VAR 0 3
28903: PPUSH
28904: LD_INT 3
28906: PPUSH
28907: LD_INT 6
28909: PPUSH
28910: CALL_OW 12
28914: PPUSH
28915: LD_INT 1
28917: PPUSH
28918: CALL_OW 483
// end ;
28922: GO 28782
28924: POP
28925: POP
// end ;
28926: PPOPN 5
28928: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28929: LD_EXP 69
28933: PUSH
28934: LD_EXP 104
28938: AND
28939: IFFALSE 29033
28941: GO 28943
28943: DISABLE
28944: LD_INT 0
28946: PPUSH
28947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28948: LD_ADDR_VAR 0 2
28952: PUSH
28953: LD_INT 22
28955: PUSH
28956: LD_OWVAR 2
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 32
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 21
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: PPUSH
28990: CALL_OW 69
28994: ST_TO_ADDR
// if not tmp then
28995: LD_VAR 0 2
28999: NOT
29000: IFFALSE 29004
// exit ;
29002: GO 29033
// for i in tmp do
29004: LD_ADDR_VAR 0 1
29008: PUSH
29009: LD_VAR 0 2
29013: PUSH
29014: FOR_IN
29015: IFFALSE 29031
// SetFuel ( i , 0 ) ;
29017: LD_VAR 0 1
29021: PPUSH
29022: LD_INT 0
29024: PPUSH
29025: CALL_OW 240
29029: GO 29014
29031: POP
29032: POP
// end ;
29033: PPOPN 2
29035: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29036: LD_EXP 69
29040: PUSH
29041: LD_EXP 105
29045: AND
29046: IFFALSE 29112
29048: GO 29050
29050: DISABLE
29051: LD_INT 0
29053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29054: LD_ADDR_VAR 0 1
29058: PUSH
29059: LD_INT 22
29061: PUSH
29062: LD_OWVAR 2
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 30
29073: PUSH
29074: LD_INT 29
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: ST_TO_ADDR
// if not tmp then
29090: LD_VAR 0 1
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29112
// DestroyUnit ( tmp [ 1 ] ) ;
29099: LD_VAR 0 1
29103: PUSH
29104: LD_INT 1
29106: ARRAY
29107: PPUSH
29108: CALL_OW 65
// end ;
29112: PPOPN 1
29114: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29115: LD_EXP 69
29119: PUSH
29120: LD_EXP 107
29124: AND
29125: IFFALSE 29254
29127: GO 29129
29129: DISABLE
29130: LD_INT 0
29132: PPUSH
// begin uc_side := 0 ;
29133: LD_ADDR_OWVAR 20
29137: PUSH
29138: LD_INT 0
29140: ST_TO_ADDR
// uc_nation := nation_arabian ;
29141: LD_ADDR_OWVAR 21
29145: PUSH
29146: LD_INT 2
29148: ST_TO_ADDR
// hc_gallery :=  ;
29149: LD_ADDR_OWVAR 33
29153: PUSH
29154: LD_STRING 
29156: ST_TO_ADDR
// hc_name :=  ;
29157: LD_ADDR_OWVAR 26
29161: PUSH
29162: LD_STRING 
29164: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29165: LD_INT 1
29167: PPUSH
29168: LD_INT 11
29170: PPUSH
29171: LD_INT 10
29173: PPUSH
29174: CALL_OW 380
// un := CreateHuman ;
29178: LD_ADDR_VAR 0 1
29182: PUSH
29183: CALL_OW 44
29187: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29188: LD_VAR 0 1
29192: PPUSH
29193: LD_INT 1
29195: PPUSH
29196: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29200: LD_INT 35
29202: PPUSH
29203: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29207: LD_VAR 0 1
29211: PPUSH
29212: LD_INT 22
29214: PUSH
29215: LD_OWVAR 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PPUSH
29224: CALL_OW 69
29228: PPUSH
29229: LD_VAR 0 1
29233: PPUSH
29234: CALL_OW 74
29238: PPUSH
29239: CALL_OW 115
// until IsDead ( un ) ;
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 301
29252: IFFALSE 29200
// end ;
29254: PPOPN 1
29256: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29257: LD_EXP 69
29261: PUSH
29262: LD_EXP 109
29266: AND
29267: IFFALSE 29279
29269: GO 29271
29271: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29272: LD_STRING earthquake(getX(game), 0, 32)
29274: PPUSH
29275: CALL_OW 559
29279: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29280: LD_EXP 69
29284: PUSH
29285: LD_EXP 110
29289: AND
29290: IFFALSE 29381
29292: GO 29294
29294: DISABLE
29295: LD_INT 0
29297: PPUSH
// begin enable ;
29298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29299: LD_ADDR_VAR 0 1
29303: PUSH
29304: LD_INT 22
29306: PUSH
29307: LD_OWVAR 2
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 21
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 33
29328: PUSH
29329: LD_INT 3
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: LIST
29340: PPUSH
29341: CALL_OW 69
29345: ST_TO_ADDR
// if not tmp then
29346: LD_VAR 0 1
29350: NOT
29351: IFFALSE 29355
// exit ;
29353: GO 29381
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29355: LD_VAR 0 1
29359: PUSH
29360: LD_INT 1
29362: PPUSH
29363: LD_VAR 0 1
29367: PPUSH
29368: CALL_OW 12
29372: ARRAY
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 234
// end ;
29381: PPOPN 1
29383: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29384: LD_EXP 69
29388: PUSH
29389: LD_EXP 111
29393: AND
29394: IFFALSE 29535
29396: GO 29398
29398: DISABLE
29399: LD_INT 0
29401: PPUSH
29402: PPUSH
29403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: LD_INT 22
29411: PUSH
29412: LD_OWVAR 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 25
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: CALL_OW 69
29439: ST_TO_ADDR
// if not tmp then
29440: LD_VAR 0 3
29444: NOT
29445: IFFALSE 29449
// exit ;
29447: GO 29535
// un := tmp [ rand ( 1 , tmp ) ] ;
29449: LD_ADDR_VAR 0 2
29453: PUSH
29454: LD_VAR 0 3
29458: PUSH
29459: LD_INT 1
29461: PPUSH
29462: LD_VAR 0 3
29466: PPUSH
29467: CALL_OW 12
29471: ARRAY
29472: ST_TO_ADDR
// if Crawls ( un ) then
29473: LD_VAR 0 2
29477: PPUSH
29478: CALL_OW 318
29482: IFFALSE 29493
// ComWalk ( un ) ;
29484: LD_VAR 0 2
29488: PPUSH
29489: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29493: LD_VAR 0 2
29497: PPUSH
29498: LD_INT 9
29500: PPUSH
29501: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29505: LD_INT 28
29507: PPUSH
29508: LD_OWVAR 2
29512: PPUSH
29513: LD_INT 2
29515: PPUSH
29516: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29520: LD_INT 29
29522: PPUSH
29523: LD_OWVAR 2
29527: PPUSH
29528: LD_INT 2
29530: PPUSH
29531: CALL_OW 322
// end ;
29535: PPOPN 3
29537: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29538: LD_EXP 69
29542: PUSH
29543: LD_EXP 112
29547: AND
29548: IFFALSE 29659
29550: GO 29552
29552: DISABLE
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
29557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29558: LD_ADDR_VAR 0 3
29562: PUSH
29563: LD_INT 22
29565: PUSH
29566: LD_OWVAR 2
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 25
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PPUSH
29589: CALL_OW 69
29593: ST_TO_ADDR
// if not tmp then
29594: LD_VAR 0 3
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29659
// un := tmp [ rand ( 1 , tmp ) ] ;
29603: LD_ADDR_VAR 0 2
29607: PUSH
29608: LD_VAR 0 3
29612: PUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_VAR 0 3
29620: PPUSH
29621: CALL_OW 12
29625: ARRAY
29626: ST_TO_ADDR
// if Crawls ( un ) then
29627: LD_VAR 0 2
29631: PPUSH
29632: CALL_OW 318
29636: IFFALSE 29647
// ComWalk ( un ) ;
29638: LD_VAR 0 2
29642: PPUSH
29643: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29647: LD_VAR 0 2
29651: PPUSH
29652: LD_INT 8
29654: PPUSH
29655: CALL_OW 336
// end ;
29659: PPOPN 3
29661: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29662: LD_EXP 69
29666: PUSH
29667: LD_EXP 113
29671: AND
29672: IFFALSE 29816
29674: GO 29676
29676: DISABLE
29677: LD_INT 0
29679: PPUSH
29680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29681: LD_ADDR_VAR 0 2
29685: PUSH
29686: LD_INT 22
29688: PUSH
29689: LD_OWVAR 2
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 21
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: LD_INT 34
29713: PUSH
29714: LD_INT 12
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 34
29723: PUSH
29724: LD_INT 51
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 34
29733: PUSH
29734: LD_INT 32
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: ST_TO_ADDR
// if not tmp then
29757: LD_VAR 0 2
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29816
// for i in tmp do
29766: LD_ADDR_VAR 0 1
29770: PUSH
29771: LD_VAR 0 2
29775: PUSH
29776: FOR_IN
29777: IFFALSE 29814
// if GetCargo ( i , mat_artifact ) = 0 then
29779: LD_VAR 0 1
29783: PPUSH
29784: LD_INT 4
29786: PPUSH
29787: CALL_OW 289
29791: PUSH
29792: LD_INT 0
29794: EQUAL
29795: IFFALSE 29812
// SetCargo ( i , mat_siberit , 100 ) ;
29797: LD_VAR 0 1
29801: PPUSH
29802: LD_INT 3
29804: PPUSH
29805: LD_INT 100
29807: PPUSH
29808: CALL_OW 290
29812: GO 29776
29814: POP
29815: POP
// end ;
29816: PPOPN 2
29818: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29819: LD_EXP 69
29823: PUSH
29824: LD_EXP 114
29828: AND
29829: IFFALSE 30012
29831: GO 29833
29833: DISABLE
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29838: LD_ADDR_VAR 0 2
29842: PUSH
29843: LD_INT 22
29845: PUSH
29846: LD_OWVAR 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 2
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 30012
// for i := 1 to 2 do
29869: LD_ADDR_VAR 0 1
29873: PUSH
29874: DOUBLE
29875: LD_INT 1
29877: DEC
29878: ST_TO_ADDR
29879: LD_INT 2
29881: PUSH
29882: FOR_TO
29883: IFFALSE 30010
// begin uc_side := your_side ;
29885: LD_ADDR_OWVAR 20
29889: PUSH
29890: LD_OWVAR 2
29894: ST_TO_ADDR
// uc_nation := nation_american ;
29895: LD_ADDR_OWVAR 21
29899: PUSH
29900: LD_INT 1
29902: ST_TO_ADDR
// vc_chassis := us_morphling ;
29903: LD_ADDR_OWVAR 37
29907: PUSH
29908: LD_INT 5
29910: ST_TO_ADDR
// vc_engine := engine_siberite ;
29911: LD_ADDR_OWVAR 39
29915: PUSH
29916: LD_INT 3
29918: ST_TO_ADDR
// vc_control := control_computer ;
29919: LD_ADDR_OWVAR 38
29923: PUSH
29924: LD_INT 3
29926: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29927: LD_ADDR_OWVAR 40
29931: PUSH
29932: LD_INT 10
29934: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29935: LD_VAR 0 2
29939: PUSH
29940: LD_INT 1
29942: ARRAY
29943: PPUSH
29944: CALL_OW 310
29948: NOT
29949: IFFALSE 29996
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29951: CALL_OW 45
29955: PPUSH
29956: LD_VAR 0 2
29960: PUSH
29961: LD_INT 1
29963: ARRAY
29964: PPUSH
29965: CALL_OW 250
29969: PPUSH
29970: LD_VAR 0 2
29974: PUSH
29975: LD_INT 1
29977: ARRAY
29978: PPUSH
29979: CALL_OW 251
29983: PPUSH
29984: LD_INT 12
29986: PPUSH
29987: LD_INT 1
29989: PPUSH
29990: CALL_OW 50
29994: GO 30008
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29996: CALL_OW 45
30000: PPUSH
30001: LD_INT 1
30003: PPUSH
30004: CALL_OW 51
// end ;
30008: GO 29882
30010: POP
30011: POP
// end ;
30012: PPOPN 2
30014: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30015: LD_EXP 69
30019: PUSH
30020: LD_EXP 115
30024: AND
30025: IFFALSE 30247
30027: GO 30029
30029: DISABLE
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30038: LD_ADDR_VAR 0 6
30042: PUSH
30043: LD_INT 22
30045: PUSH
30046: LD_OWVAR 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 21
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 3
30067: PUSH
30068: LD_INT 23
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: PPUSH
30087: CALL_OW 69
30091: ST_TO_ADDR
// if not tmp then
30092: LD_VAR 0 6
30096: NOT
30097: IFFALSE 30101
// exit ;
30099: GO 30247
// s1 := rand ( 1 , 4 ) ;
30101: LD_ADDR_VAR 0 2
30105: PUSH
30106: LD_INT 1
30108: PPUSH
30109: LD_INT 4
30111: PPUSH
30112: CALL_OW 12
30116: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30117: LD_ADDR_VAR 0 4
30121: PUSH
30122: LD_VAR 0 6
30126: PUSH
30127: LD_INT 1
30129: ARRAY
30130: PPUSH
30131: LD_VAR 0 2
30135: PPUSH
30136: CALL_OW 259
30140: ST_TO_ADDR
// if s1 = 1 then
30141: LD_VAR 0 2
30145: PUSH
30146: LD_INT 1
30148: EQUAL
30149: IFFALSE 30169
// s2 := rand ( 2 , 4 ) else
30151: LD_ADDR_VAR 0 3
30155: PUSH
30156: LD_INT 2
30158: PPUSH
30159: LD_INT 4
30161: PPUSH
30162: CALL_OW 12
30166: ST_TO_ADDR
30167: GO 30177
// s2 := 1 ;
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_INT 1
30176: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30177: LD_ADDR_VAR 0 5
30181: PUSH
30182: LD_VAR 0 6
30186: PUSH
30187: LD_INT 1
30189: ARRAY
30190: PPUSH
30191: LD_VAR 0 3
30195: PPUSH
30196: CALL_OW 259
30200: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30201: LD_VAR 0 6
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: PPUSH
30210: LD_VAR 0 2
30214: PPUSH
30215: LD_VAR 0 5
30219: PPUSH
30220: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30224: LD_VAR 0 6
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: PPUSH
30233: LD_VAR 0 3
30237: PPUSH
30238: LD_VAR 0 4
30242: PPUSH
30243: CALL_OW 237
// end ;
30247: PPOPN 6
30249: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30250: LD_EXP 69
30254: PUSH
30255: LD_EXP 116
30259: AND
30260: IFFALSE 30339
30262: GO 30264
30264: DISABLE
30265: LD_INT 0
30267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30268: LD_ADDR_VAR 0 1
30272: PUSH
30273: LD_INT 22
30275: PUSH
30276: LD_OWVAR 2
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 30
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PPUSH
30299: CALL_OW 69
30303: ST_TO_ADDR
// if not tmp then
30304: LD_VAR 0 1
30308: NOT
30309: IFFALSE 30313
// exit ;
30311: GO 30339
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30313: LD_VAR 0 1
30317: PUSH
30318: LD_INT 1
30320: PPUSH
30321: LD_VAR 0 1
30325: PPUSH
30326: CALL_OW 12
30330: ARRAY
30331: PPUSH
30332: LD_INT 1
30334: PPUSH
30335: CALL_OW 234
// end ;
30339: PPOPN 1
30341: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30342: LD_EXP 69
30346: PUSH
30347: LD_EXP 117
30351: AND
30352: IFFALSE 30464
30354: GO 30356
30356: DISABLE
30357: LD_INT 0
30359: PPUSH
30360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30361: LD_ADDR_VAR 0 2
30365: PUSH
30366: LD_INT 22
30368: PUSH
30369: LD_OWVAR 2
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: LD_INT 30
30383: PUSH
30384: LD_INT 27
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 30
30393: PUSH
30394: LD_INT 26
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 30
30403: PUSH
30404: LD_INT 28
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PPUSH
30421: CALL_OW 69
30425: ST_TO_ADDR
// if not tmp then
30426: LD_VAR 0 2
30430: NOT
30431: IFFALSE 30435
// exit ;
30433: GO 30464
// for i in tmp do
30435: LD_ADDR_VAR 0 1
30439: PUSH
30440: LD_VAR 0 2
30444: PUSH
30445: FOR_IN
30446: IFFALSE 30462
// SetLives ( i , 1 ) ;
30448: LD_VAR 0 1
30452: PPUSH
30453: LD_INT 1
30455: PPUSH
30456: CALL_OW 234
30460: GO 30445
30462: POP
30463: POP
// end ;
30464: PPOPN 2
30466: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30467: LD_EXP 69
30471: PUSH
30472: LD_EXP 118
30476: AND
30477: IFFALSE 30764
30479: GO 30481
30481: DISABLE
30482: LD_INT 0
30484: PPUSH
30485: PPUSH
30486: PPUSH
// begin i := rand ( 1 , 7 ) ;
30487: LD_ADDR_VAR 0 1
30491: PUSH
30492: LD_INT 1
30494: PPUSH
30495: LD_INT 7
30497: PPUSH
30498: CALL_OW 12
30502: ST_TO_ADDR
// case i of 1 :
30503: LD_VAR 0 1
30507: PUSH
30508: LD_INT 1
30510: DOUBLE
30511: EQUAL
30512: IFTRUE 30516
30514: GO 30526
30516: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30517: LD_STRING earthquake(getX(game), 0, 32)
30519: PPUSH
30520: CALL_OW 559
30524: GO 30764
30526: LD_INT 2
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30548
30534: POP
// begin ToLua ( displayStucuk(); ) ;
30535: LD_STRING displayStucuk();
30537: PPUSH
30538: CALL_OW 559
// ResetFog ;
30542: CALL_OW 335
// end ; 3 :
30546: GO 30764
30548: LD_INT 3
30550: DOUBLE
30551: EQUAL
30552: IFTRUE 30556
30554: GO 30660
30556: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30557: LD_ADDR_VAR 0 2
30561: PUSH
30562: LD_INT 22
30564: PUSH
30565: LD_OWVAR 2
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 25
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PPUSH
30588: CALL_OW 69
30592: ST_TO_ADDR
// if not tmp then
30593: LD_VAR 0 2
30597: NOT
30598: IFFALSE 30602
// exit ;
30600: GO 30764
// un := tmp [ rand ( 1 , tmp ) ] ;
30602: LD_ADDR_VAR 0 3
30606: PUSH
30607: LD_VAR 0 2
30611: PUSH
30612: LD_INT 1
30614: PPUSH
30615: LD_VAR 0 2
30619: PPUSH
30620: CALL_OW 12
30624: ARRAY
30625: ST_TO_ADDR
// if Crawls ( un ) then
30626: LD_VAR 0 3
30630: PPUSH
30631: CALL_OW 318
30635: IFFALSE 30646
// ComWalk ( un ) ;
30637: LD_VAR 0 3
30641: PPUSH
30642: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30646: LD_VAR 0 3
30650: PPUSH
30651: LD_INT 8
30653: PPUSH
30654: CALL_OW 336
// end ; 4 :
30658: GO 30764
30660: LD_INT 4
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30742
30668: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30669: LD_ADDR_VAR 0 2
30673: PUSH
30674: LD_INT 22
30676: PUSH
30677: LD_OWVAR 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 30
30688: PUSH
30689: LD_INT 29
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PPUSH
30700: CALL_OW 69
30704: ST_TO_ADDR
// if not tmp then
30705: LD_VAR 0 2
30709: NOT
30710: IFFALSE 30714
// exit ;
30712: GO 30764
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30714: LD_VAR 0 2
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: PPUSH
30723: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30727: LD_VAR 0 2
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: CALL_OW 65
// end ; 5 .. 7 :
30740: GO 30764
30742: LD_INT 5
30744: DOUBLE
30745: GREATEREQUAL
30746: IFFALSE 30754
30748: LD_INT 7
30750: DOUBLE
30751: LESSEQUAL
30752: IFTRUE 30756
30754: GO 30763
30756: POP
// StreamSibBomb ; end ;
30757: CALL 27001 0 0
30761: GO 30764
30763: POP
// end ;
30764: PPOPN 3
30766: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30767: LD_EXP 69
30771: PUSH
30772: LD_EXP 119
30776: AND
30777: IFFALSE 30933
30779: GO 30781
30781: DISABLE
30782: LD_INT 0
30784: PPUSH
30785: PPUSH
30786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30787: LD_ADDR_VAR 0 2
30791: PUSH
30792: LD_INT 81
30794: PUSH
30795: LD_OWVAR 2
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 21
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 21
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PPUSH
30836: CALL_OW 69
30840: ST_TO_ADDR
// if not tmp then
30841: LD_VAR 0 2
30845: NOT
30846: IFFALSE 30850
// exit ;
30848: GO 30933
// p := 0 ;
30850: LD_ADDR_VAR 0 3
30854: PUSH
30855: LD_INT 0
30857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30858: LD_INT 35
30860: PPUSH
30861: CALL_OW 67
// p := p + 1 ;
30865: LD_ADDR_VAR 0 3
30869: PUSH
30870: LD_VAR 0 3
30874: PUSH
30875: LD_INT 1
30877: PLUS
30878: ST_TO_ADDR
// for i in tmp do
30879: LD_ADDR_VAR 0 1
30883: PUSH
30884: LD_VAR 0 2
30888: PUSH
30889: FOR_IN
30890: IFFALSE 30921
// if GetLives ( i ) < 1000 then
30892: LD_VAR 0 1
30896: PPUSH
30897: CALL_OW 256
30901: PUSH
30902: LD_INT 1000
30904: LESS
30905: IFFALSE 30919
// SetLives ( i , 1000 ) ;
30907: LD_VAR 0 1
30911: PPUSH
30912: LD_INT 1000
30914: PPUSH
30915: CALL_OW 234
30919: GO 30889
30921: POP
30922: POP
// until p > 20 ;
30923: LD_VAR 0 3
30927: PUSH
30928: LD_INT 20
30930: GREATER
30931: IFFALSE 30858
// end ;
30933: PPOPN 3
30935: END
// every 0 0$1 trigger StreamModeActive and sTime do
30936: LD_EXP 69
30940: PUSH
30941: LD_EXP 120
30945: AND
30946: IFFALSE 30981
30948: GO 30950
30950: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30951: LD_INT 28
30953: PPUSH
30954: LD_OWVAR 2
30958: PPUSH
30959: LD_INT 2
30961: PPUSH
30962: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30966: LD_INT 30
30968: PPUSH
30969: LD_OWVAR 2
30973: PPUSH
30974: LD_INT 2
30976: PPUSH
30977: CALL_OW 322
// end ;
30981: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30982: LD_EXP 69
30986: PUSH
30987: LD_EXP 121
30991: AND
30992: IFFALSE 31113
30994: GO 30996
30996: DISABLE
30997: LD_INT 0
30999: PPUSH
31000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31001: LD_ADDR_VAR 0 2
31005: PUSH
31006: LD_INT 22
31008: PUSH
31009: LD_OWVAR 2
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 21
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 3
31030: PUSH
31031: LD_INT 23
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: PPUSH
31050: CALL_OW 69
31054: ST_TO_ADDR
// if not tmp then
31055: LD_VAR 0 2
31059: NOT
31060: IFFALSE 31064
// exit ;
31062: GO 31113
// for i in tmp do
31064: LD_ADDR_VAR 0 1
31068: PUSH
31069: LD_VAR 0 2
31073: PUSH
31074: FOR_IN
31075: IFFALSE 31111
// begin if Crawls ( i ) then
31077: LD_VAR 0 1
31081: PPUSH
31082: CALL_OW 318
31086: IFFALSE 31097
// ComWalk ( i ) ;
31088: LD_VAR 0 1
31092: PPUSH
31093: CALL_OW 138
// SetClass ( i , 2 ) ;
31097: LD_VAR 0 1
31101: PPUSH
31102: LD_INT 2
31104: PPUSH
31105: CALL_OW 336
// end ;
31109: GO 31074
31111: POP
31112: POP
// end ;
31113: PPOPN 2
31115: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31116: LD_EXP 69
31120: PUSH
31121: LD_EXP 122
31125: AND
31126: IFFALSE 31414
31128: GO 31130
31130: DISABLE
31131: LD_INT 0
31133: PPUSH
31134: PPUSH
31135: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31136: LD_OWVAR 2
31140: PPUSH
31141: LD_INT 9
31143: PPUSH
31144: LD_INT 1
31146: PPUSH
31147: LD_INT 1
31149: PPUSH
31150: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31154: LD_INT 9
31156: PPUSH
31157: LD_OWVAR 2
31161: PPUSH
31162: CALL_OW 343
// uc_side := 9 ;
31166: LD_ADDR_OWVAR 20
31170: PUSH
31171: LD_INT 9
31173: ST_TO_ADDR
// uc_nation := 2 ;
31174: LD_ADDR_OWVAR 21
31178: PUSH
31179: LD_INT 2
31181: ST_TO_ADDR
// hc_name := Dark Warrior ;
31182: LD_ADDR_OWVAR 26
31186: PUSH
31187: LD_STRING Dark Warrior
31189: ST_TO_ADDR
// hc_gallery :=  ;
31190: LD_ADDR_OWVAR 33
31194: PUSH
31195: LD_STRING 
31197: ST_TO_ADDR
// hc_noskilllimit := true ;
31198: LD_ADDR_OWVAR 76
31202: PUSH
31203: LD_INT 1
31205: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31206: LD_ADDR_OWVAR 31
31210: PUSH
31211: LD_INT 30
31213: PUSH
31214: LD_INT 30
31216: PUSH
31217: LD_INT 30
31219: PUSH
31220: LD_INT 30
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// un := CreateHuman ;
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: CALL_OW 44
31238: ST_TO_ADDR
// hc_noskilllimit := false ;
31239: LD_ADDR_OWVAR 76
31243: PUSH
31244: LD_INT 0
31246: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31247: LD_VAR 0 3
31251: PPUSH
31252: LD_INT 1
31254: PPUSH
31255: CALL_OW 51
// ToLua ( playRanger() ) ;
31259: LD_STRING playRanger()
31261: PPUSH
31262: CALL_OW 559
// p := 0 ;
31266: LD_ADDR_VAR 0 2
31270: PUSH
31271: LD_INT 0
31273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31274: LD_INT 35
31276: PPUSH
31277: CALL_OW 67
// p := p + 1 ;
31281: LD_ADDR_VAR 0 2
31285: PUSH
31286: LD_VAR 0 2
31290: PUSH
31291: LD_INT 1
31293: PLUS
31294: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31295: LD_VAR 0 3
31299: PPUSH
31300: CALL_OW 256
31304: PUSH
31305: LD_INT 1000
31307: LESS
31308: IFFALSE 31322
// SetLives ( un , 1000 ) ;
31310: LD_VAR 0 3
31314: PPUSH
31315: LD_INT 1000
31317: PPUSH
31318: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31322: LD_VAR 0 3
31326: PPUSH
31327: LD_INT 81
31329: PUSH
31330: LD_OWVAR 2
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 91
31341: PUSH
31342: LD_VAR 0 3
31346: PUSH
31347: LD_INT 30
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PPUSH
31359: CALL_OW 69
31363: PPUSH
31364: LD_VAR 0 3
31368: PPUSH
31369: CALL_OW 74
31373: PPUSH
31374: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31378: LD_VAR 0 2
31382: PUSH
31383: LD_INT 80
31385: GREATER
31386: PUSH
31387: LD_VAR 0 3
31391: PPUSH
31392: CALL_OW 301
31396: OR
31397: IFFALSE 31274
// if un then
31399: LD_VAR 0 3
31403: IFFALSE 31414
// RemoveUnit ( un ) ;
31405: LD_VAR 0 3
31409: PPUSH
31410: CALL_OW 64
// end ;
31414: PPOPN 3
31416: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31417: LD_EXP 123
31421: IFFALSE 31537
31423: GO 31425
31425: DISABLE
31426: LD_INT 0
31428: PPUSH
31429: PPUSH
31430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31431: LD_ADDR_VAR 0 2
31435: PUSH
31436: LD_INT 81
31438: PUSH
31439: LD_OWVAR 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 21
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PPUSH
31462: CALL_OW 69
31466: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31467: LD_STRING playComputer()
31469: PPUSH
31470: CALL_OW 559
// if not tmp then
31474: LD_VAR 0 2
31478: NOT
31479: IFFALSE 31483
// exit ;
31481: GO 31537
// for i in tmp do
31483: LD_ADDR_VAR 0 1
31487: PUSH
31488: LD_VAR 0 2
31492: PUSH
31493: FOR_IN
31494: IFFALSE 31535
// for j := 1 to 4 do
31496: LD_ADDR_VAR 0 3
31500: PUSH
31501: DOUBLE
31502: LD_INT 1
31504: DEC
31505: ST_TO_ADDR
31506: LD_INT 4
31508: PUSH
31509: FOR_TO
31510: IFFALSE 31531
// SetSkill ( i , j , 10 ) ;
31512: LD_VAR 0 1
31516: PPUSH
31517: LD_VAR 0 3
31521: PPUSH
31522: LD_INT 10
31524: PPUSH
31525: CALL_OW 237
31529: GO 31509
31531: POP
31532: POP
31533: GO 31493
31535: POP
31536: POP
// end ;
31537: PPOPN 3
31539: END
// every 0 0$1 trigger s30 do var i , tmp ;
31540: LD_EXP 124
31544: IFFALSE 31613
31546: GO 31548
31548: DISABLE
31549: LD_INT 0
31551: PPUSH
31552: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31553: LD_ADDR_VAR 0 2
31557: PUSH
31558: LD_INT 22
31560: PUSH
31561: LD_OWVAR 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PPUSH
31570: CALL_OW 69
31574: ST_TO_ADDR
// if not tmp then
31575: LD_VAR 0 2
31579: NOT
31580: IFFALSE 31584
// exit ;
31582: GO 31613
// for i in tmp do
31584: LD_ADDR_VAR 0 1
31588: PUSH
31589: LD_VAR 0 2
31593: PUSH
31594: FOR_IN
31595: IFFALSE 31611
// SetLives ( i , 300 ) ;
31597: LD_VAR 0 1
31601: PPUSH
31602: LD_INT 300
31604: PPUSH
31605: CALL_OW 234
31609: GO 31594
31611: POP
31612: POP
// end ;
31613: PPOPN 2
31615: END
// every 0 0$1 trigger s60 do var i , tmp ;
31616: LD_EXP 125
31620: IFFALSE 31689
31622: GO 31624
31624: DISABLE
31625: LD_INT 0
31627: PPUSH
31628: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31629: LD_ADDR_VAR 0 2
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_OWVAR 2
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PPUSH
31646: CALL_OW 69
31650: ST_TO_ADDR
// if not tmp then
31651: LD_VAR 0 2
31655: NOT
31656: IFFALSE 31660
// exit ;
31658: GO 31689
// for i in tmp do
31660: LD_ADDR_VAR 0 1
31664: PUSH
31665: LD_VAR 0 2
31669: PUSH
31670: FOR_IN
31671: IFFALSE 31687
// SetLives ( i , 600 ) ;
31673: LD_VAR 0 1
31677: PPUSH
31678: LD_INT 600
31680: PPUSH
31681: CALL_OW 234
31685: GO 31670
31687: POP
31688: POP
// end ;
31689: PPOPN 2
31691: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31692: LD_INT 0
31694: PPUSH
// case cmd of 301 :
31695: LD_VAR 0 1
31699: PUSH
31700: LD_INT 301
31702: DOUBLE
31703: EQUAL
31704: IFTRUE 31708
31706: GO 31740
31708: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31709: LD_VAR 0 6
31713: PPUSH
31714: LD_VAR 0 7
31718: PPUSH
31719: LD_VAR 0 8
31723: PPUSH
31724: LD_VAR 0 4
31728: PPUSH
31729: LD_VAR 0 5
31733: PPUSH
31734: CALL 32941 0 5
31738: GO 31861
31740: LD_INT 302
31742: DOUBLE
31743: EQUAL
31744: IFTRUE 31748
31746: GO 31785
31748: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31749: LD_VAR 0 6
31753: PPUSH
31754: LD_VAR 0 7
31758: PPUSH
31759: LD_VAR 0 8
31763: PPUSH
31764: LD_VAR 0 9
31768: PPUSH
31769: LD_VAR 0 4
31773: PPUSH
31774: LD_VAR 0 5
31778: PPUSH
31779: CALL 33032 0 6
31783: GO 31861
31785: LD_INT 303
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 31830
31793: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31794: LD_VAR 0 6
31798: PPUSH
31799: LD_VAR 0 7
31803: PPUSH
31804: LD_VAR 0 8
31808: PPUSH
31809: LD_VAR 0 9
31813: PPUSH
31814: LD_VAR 0 4
31818: PPUSH
31819: LD_VAR 0 5
31823: PPUSH
31824: CALL 31866 0 6
31828: GO 31861
31830: LD_INT 304
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31860
31838: POP
// hHackTeleport ( unit , x , y ) ; end ;
31839: LD_VAR 0 2
31843: PPUSH
31844: LD_VAR 0 4
31848: PPUSH
31849: LD_VAR 0 5
31853: PPUSH
31854: CALL 33625 0 3
31858: GO 31861
31860: POP
// end ;
31861: LD_VAR 0 12
31865: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31866: LD_INT 0
31868: PPUSH
31869: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31870: LD_VAR 0 1
31874: PUSH
31875: LD_INT 1
31877: LESS
31878: PUSH
31879: LD_VAR 0 1
31883: PUSH
31884: LD_INT 3
31886: GREATER
31887: OR
31888: PUSH
31889: LD_VAR 0 5
31893: PPUSH
31894: LD_VAR 0 6
31898: PPUSH
31899: CALL_OW 428
31903: OR
31904: IFFALSE 31908
// exit ;
31906: GO 32628
// uc_side := your_side ;
31908: LD_ADDR_OWVAR 20
31912: PUSH
31913: LD_OWVAR 2
31917: ST_TO_ADDR
// uc_nation := nation ;
31918: LD_ADDR_OWVAR 21
31922: PUSH
31923: LD_VAR 0 1
31927: ST_TO_ADDR
// bc_level = 1 ;
31928: LD_ADDR_OWVAR 43
31932: PUSH
31933: LD_INT 1
31935: ST_TO_ADDR
// case btype of 1 :
31936: LD_VAR 0 2
31940: PUSH
31941: LD_INT 1
31943: DOUBLE
31944: EQUAL
31945: IFTRUE 31949
31947: GO 31960
31949: POP
// bc_type := b_depot ; 2 :
31950: LD_ADDR_OWVAR 42
31954: PUSH
31955: LD_INT 0
31957: ST_TO_ADDR
31958: GO 32572
31960: LD_INT 2
31962: DOUBLE
31963: EQUAL
31964: IFTRUE 31968
31966: GO 31979
31968: POP
// bc_type := b_warehouse ; 3 :
31969: LD_ADDR_OWVAR 42
31973: PUSH
31974: LD_INT 1
31976: ST_TO_ADDR
31977: GO 32572
31979: LD_INT 3
31981: DOUBLE
31982: EQUAL
31983: IFTRUE 31987
31985: GO 31998
31987: POP
// bc_type := b_lab ; 4 .. 9 :
31988: LD_ADDR_OWVAR 42
31992: PUSH
31993: LD_INT 6
31995: ST_TO_ADDR
31996: GO 32572
31998: LD_INT 4
32000: DOUBLE
32001: GREATEREQUAL
32002: IFFALSE 32010
32004: LD_INT 9
32006: DOUBLE
32007: LESSEQUAL
32008: IFTRUE 32012
32010: GO 32064
32012: POP
// begin bc_type := b_lab_half ;
32013: LD_ADDR_OWVAR 42
32017: PUSH
32018: LD_INT 7
32020: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32021: LD_ADDR_OWVAR 44
32025: PUSH
32026: LD_INT 10
32028: PUSH
32029: LD_INT 11
32031: PUSH
32032: LD_INT 12
32034: PUSH
32035: LD_INT 15
32037: PUSH
32038: LD_INT 14
32040: PUSH
32041: LD_INT 13
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: PUSH
32052: LD_VAR 0 2
32056: PUSH
32057: LD_INT 3
32059: MINUS
32060: ARRAY
32061: ST_TO_ADDR
// end ; 10 .. 13 :
32062: GO 32572
32064: LD_INT 10
32066: DOUBLE
32067: GREATEREQUAL
32068: IFFALSE 32076
32070: LD_INT 13
32072: DOUBLE
32073: LESSEQUAL
32074: IFTRUE 32078
32076: GO 32155
32078: POP
// begin bc_type := b_lab_full ;
32079: LD_ADDR_OWVAR 42
32083: PUSH
32084: LD_INT 8
32086: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32087: LD_ADDR_OWVAR 44
32091: PUSH
32092: LD_INT 10
32094: PUSH
32095: LD_INT 12
32097: PUSH
32098: LD_INT 14
32100: PUSH
32101: LD_INT 13
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: PUSH
32110: LD_VAR 0 2
32114: PUSH
32115: LD_INT 9
32117: MINUS
32118: ARRAY
32119: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32120: LD_ADDR_OWVAR 45
32124: PUSH
32125: LD_INT 11
32127: PUSH
32128: LD_INT 15
32130: PUSH
32131: LD_INT 12
32133: PUSH
32134: LD_INT 15
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: PUSH
32143: LD_VAR 0 2
32147: PUSH
32148: LD_INT 9
32150: MINUS
32151: ARRAY
32152: ST_TO_ADDR
// end ; 14 :
32153: GO 32572
32155: LD_INT 14
32157: DOUBLE
32158: EQUAL
32159: IFTRUE 32163
32161: GO 32174
32163: POP
// bc_type := b_workshop ; 15 :
32164: LD_ADDR_OWVAR 42
32168: PUSH
32169: LD_INT 2
32171: ST_TO_ADDR
32172: GO 32572
32174: LD_INT 15
32176: DOUBLE
32177: EQUAL
32178: IFTRUE 32182
32180: GO 32193
32182: POP
// bc_type := b_factory ; 16 :
32183: LD_ADDR_OWVAR 42
32187: PUSH
32188: LD_INT 3
32190: ST_TO_ADDR
32191: GO 32572
32193: LD_INT 16
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32201
32199: GO 32212
32201: POP
// bc_type := b_ext_gun ; 17 :
32202: LD_ADDR_OWVAR 42
32206: PUSH
32207: LD_INT 17
32209: ST_TO_ADDR
32210: GO 32572
32212: LD_INT 17
32214: DOUBLE
32215: EQUAL
32216: IFTRUE 32220
32218: GO 32248
32220: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32221: LD_ADDR_OWVAR 42
32225: PUSH
32226: LD_INT 19
32228: PUSH
32229: LD_INT 23
32231: PUSH
32232: LD_INT 19
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: PUSH
32240: LD_VAR 0 1
32244: ARRAY
32245: ST_TO_ADDR
32246: GO 32572
32248: LD_INT 18
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32267
32256: POP
// bc_type := b_ext_radar ; 19 :
32257: LD_ADDR_OWVAR 42
32261: PUSH
32262: LD_INT 20
32264: ST_TO_ADDR
32265: GO 32572
32267: LD_INT 19
32269: DOUBLE
32270: EQUAL
32271: IFTRUE 32275
32273: GO 32286
32275: POP
// bc_type := b_ext_radio ; 20 :
32276: LD_ADDR_OWVAR 42
32280: PUSH
32281: LD_INT 22
32283: ST_TO_ADDR
32284: GO 32572
32286: LD_INT 20
32288: DOUBLE
32289: EQUAL
32290: IFTRUE 32294
32292: GO 32305
32294: POP
// bc_type := b_ext_siberium ; 21 :
32295: LD_ADDR_OWVAR 42
32299: PUSH
32300: LD_INT 21
32302: ST_TO_ADDR
32303: GO 32572
32305: LD_INT 21
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 32324
32313: POP
// bc_type := b_ext_computer ; 22 :
32314: LD_ADDR_OWVAR 42
32318: PUSH
32319: LD_INT 24
32321: ST_TO_ADDR
32322: GO 32572
32324: LD_INT 22
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32343
32332: POP
// bc_type := b_ext_track ; 23 :
32333: LD_ADDR_OWVAR 42
32337: PUSH
32338: LD_INT 16
32340: ST_TO_ADDR
32341: GO 32572
32343: LD_INT 23
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32362
32351: POP
// bc_type := b_ext_laser ; 24 :
32352: LD_ADDR_OWVAR 42
32356: PUSH
32357: LD_INT 25
32359: ST_TO_ADDR
32360: GO 32572
32362: LD_INT 24
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32370
32368: GO 32381
32370: POP
// bc_type := b_control_tower ; 25 :
32371: LD_ADDR_OWVAR 42
32375: PUSH
32376: LD_INT 36
32378: ST_TO_ADDR
32379: GO 32572
32381: LD_INT 25
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32400
32389: POP
// bc_type := b_breastwork ; 26 :
32390: LD_ADDR_OWVAR 42
32394: PUSH
32395: LD_INT 31
32397: ST_TO_ADDR
32398: GO 32572
32400: LD_INT 26
32402: DOUBLE
32403: EQUAL
32404: IFTRUE 32408
32406: GO 32419
32408: POP
// bc_type := b_bunker ; 27 :
32409: LD_ADDR_OWVAR 42
32413: PUSH
32414: LD_INT 32
32416: ST_TO_ADDR
32417: GO 32572
32419: LD_INT 27
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32427
32425: GO 32438
32427: POP
// bc_type := b_turret ; 28 :
32428: LD_ADDR_OWVAR 42
32432: PUSH
32433: LD_INT 33
32435: ST_TO_ADDR
32436: GO 32572
32438: LD_INT 28
32440: DOUBLE
32441: EQUAL
32442: IFTRUE 32446
32444: GO 32457
32446: POP
// bc_type := b_armoury ; 29 :
32447: LD_ADDR_OWVAR 42
32451: PUSH
32452: LD_INT 4
32454: ST_TO_ADDR
32455: GO 32572
32457: LD_INT 29
32459: DOUBLE
32460: EQUAL
32461: IFTRUE 32465
32463: GO 32476
32465: POP
// bc_type := b_barracks ; 30 :
32466: LD_ADDR_OWVAR 42
32470: PUSH
32471: LD_INT 5
32473: ST_TO_ADDR
32474: GO 32572
32476: LD_INT 30
32478: DOUBLE
32479: EQUAL
32480: IFTRUE 32484
32482: GO 32495
32484: POP
// bc_type := b_solar_power ; 31 :
32485: LD_ADDR_OWVAR 42
32489: PUSH
32490: LD_INT 27
32492: ST_TO_ADDR
32493: GO 32572
32495: LD_INT 31
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32514
32503: POP
// bc_type := b_oil_power ; 32 :
32504: LD_ADDR_OWVAR 42
32508: PUSH
32509: LD_INT 26
32511: ST_TO_ADDR
32512: GO 32572
32514: LD_INT 32
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32533
32522: POP
// bc_type := b_siberite_power ; 33 :
32523: LD_ADDR_OWVAR 42
32527: PUSH
32528: LD_INT 28
32530: ST_TO_ADDR
32531: GO 32572
32533: LD_INT 33
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32552
32541: POP
// bc_type := b_oil_mine ; 34 :
32542: LD_ADDR_OWVAR 42
32546: PUSH
32547: LD_INT 29
32549: ST_TO_ADDR
32550: GO 32572
32552: LD_INT 34
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// bc_type := b_siberite_mine ; end ;
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 30
32568: ST_TO_ADDR
32569: GO 32572
32571: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32572: LD_ADDR_VAR 0 8
32576: PUSH
32577: LD_VAR 0 5
32581: PPUSH
32582: LD_VAR 0 6
32586: PPUSH
32587: LD_VAR 0 3
32591: PPUSH
32592: CALL_OW 47
32596: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32597: LD_OWVAR 42
32601: PUSH
32602: LD_INT 32
32604: PUSH
32605: LD_INT 33
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: IN
32612: IFFALSE 32628
// PlaceWeaponTurret ( b , weapon ) ;
32614: LD_VAR 0 8
32618: PPUSH
32619: LD_VAR 0 4
32623: PPUSH
32624: CALL_OW 431
// end ;
32628: LD_VAR 0 7
32632: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32633: LD_INT 0
32635: PPUSH
32636: PPUSH
32637: PPUSH
32638: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32639: LD_ADDR_VAR 0 4
32643: PUSH
32644: LD_INT 22
32646: PUSH
32647: LD_OWVAR 2
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: LD_INT 30
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 30
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PPUSH
32688: CALL_OW 69
32692: ST_TO_ADDR
// if not tmp then
32693: LD_VAR 0 4
32697: NOT
32698: IFFALSE 32702
// exit ;
32700: GO 32761
// for i in tmp do
32702: LD_ADDR_VAR 0 2
32706: PUSH
32707: LD_VAR 0 4
32711: PUSH
32712: FOR_IN
32713: IFFALSE 32759
// for j = 1 to 3 do
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: DOUBLE
32721: LD_INT 1
32723: DEC
32724: ST_TO_ADDR
32725: LD_INT 3
32727: PUSH
32728: FOR_TO
32729: IFFALSE 32755
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32731: LD_VAR 0 2
32735: PPUSH
32736: CALL_OW 274
32740: PPUSH
32741: LD_VAR 0 3
32745: PPUSH
32746: LD_INT 99999
32748: PPUSH
32749: CALL_OW 277
32753: GO 32728
32755: POP
32756: POP
32757: GO 32712
32759: POP
32760: POP
// end ;
32761: LD_VAR 0 1
32765: RET
// export function hHackSetLevel10 ; var i , j ; begin
32766: LD_INT 0
32768: PPUSH
32769: PPUSH
32770: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32771: LD_ADDR_VAR 0 2
32775: PUSH
32776: LD_INT 21
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PPUSH
32786: CALL_OW 69
32790: PUSH
32791: FOR_IN
32792: IFFALSE 32844
// if IsSelected ( i ) then
32794: LD_VAR 0 2
32798: PPUSH
32799: CALL_OW 306
32803: IFFALSE 32842
// begin for j := 1 to 4 do
32805: LD_ADDR_VAR 0 3
32809: PUSH
32810: DOUBLE
32811: LD_INT 1
32813: DEC
32814: ST_TO_ADDR
32815: LD_INT 4
32817: PUSH
32818: FOR_TO
32819: IFFALSE 32840
// SetSkill ( i , j , 10 ) ;
32821: LD_VAR 0 2
32825: PPUSH
32826: LD_VAR 0 3
32830: PPUSH
32831: LD_INT 10
32833: PPUSH
32834: CALL_OW 237
32838: GO 32818
32840: POP
32841: POP
// end ;
32842: GO 32791
32844: POP
32845: POP
// end ;
32846: LD_VAR 0 1
32850: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32851: LD_INT 0
32853: PPUSH
32854: PPUSH
32855: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32856: LD_ADDR_VAR 0 2
32860: PUSH
32861: LD_INT 22
32863: PUSH
32864: LD_OWVAR 2
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 21
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PPUSH
32887: CALL_OW 69
32891: PUSH
32892: FOR_IN
32893: IFFALSE 32934
// begin for j := 1 to 4 do
32895: LD_ADDR_VAR 0 3
32899: PUSH
32900: DOUBLE
32901: LD_INT 1
32903: DEC
32904: ST_TO_ADDR
32905: LD_INT 4
32907: PUSH
32908: FOR_TO
32909: IFFALSE 32930
// SetSkill ( i , j , 10 ) ;
32911: LD_VAR 0 2
32915: PPUSH
32916: LD_VAR 0 3
32920: PPUSH
32921: LD_INT 10
32923: PPUSH
32924: CALL_OW 237
32928: GO 32908
32930: POP
32931: POP
// end ;
32932: GO 32892
32934: POP
32935: POP
// end ;
32936: LD_VAR 0 1
32940: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32941: LD_INT 0
32943: PPUSH
// uc_side := your_side ;
32944: LD_ADDR_OWVAR 20
32948: PUSH
32949: LD_OWVAR 2
32953: ST_TO_ADDR
// uc_nation := nation ;
32954: LD_ADDR_OWVAR 21
32958: PUSH
32959: LD_VAR 0 1
32963: ST_TO_ADDR
// InitHc ;
32964: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32968: LD_INT 0
32970: PPUSH
32971: LD_VAR 0 2
32975: PPUSH
32976: LD_VAR 0 3
32980: PPUSH
32981: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32985: LD_VAR 0 4
32989: PPUSH
32990: LD_VAR 0 5
32994: PPUSH
32995: CALL_OW 428
32999: PUSH
33000: LD_INT 0
33002: EQUAL
33003: IFFALSE 33027
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33005: CALL_OW 44
33009: PPUSH
33010: LD_VAR 0 4
33014: PPUSH
33015: LD_VAR 0 5
33019: PPUSH
33020: LD_INT 1
33022: PPUSH
33023: CALL_OW 48
// end ;
33027: LD_VAR 0 6
33031: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33032: LD_INT 0
33034: PPUSH
33035: PPUSH
// uc_side := your_side ;
33036: LD_ADDR_OWVAR 20
33040: PUSH
33041: LD_OWVAR 2
33045: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33046: LD_VAR 0 1
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: LD_INT 4
33062: PUSH
33063: LD_INT 5
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: IN
33073: IFFALSE 33085
// uc_nation := nation_american else
33075: LD_ADDR_OWVAR 21
33079: PUSH
33080: LD_INT 1
33082: ST_TO_ADDR
33083: GO 33128
// if chassis in [ 11 , 12 , 13 , 14 ] then
33085: LD_VAR 0 1
33089: PUSH
33090: LD_INT 11
33092: PUSH
33093: LD_INT 12
33095: PUSH
33096: LD_INT 13
33098: PUSH
33099: LD_INT 14
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: IN
33108: IFFALSE 33120
// uc_nation := nation_arabian else
33110: LD_ADDR_OWVAR 21
33114: PUSH
33115: LD_INT 2
33117: ST_TO_ADDR
33118: GO 33128
// uc_nation := nation_russian ;
33120: LD_ADDR_OWVAR 21
33124: PUSH
33125: LD_INT 3
33127: ST_TO_ADDR
// vc_chassis := chassis ;
33128: LD_ADDR_OWVAR 37
33132: PUSH
33133: LD_VAR 0 1
33137: ST_TO_ADDR
// vc_engine := engine ;
33138: LD_ADDR_OWVAR 39
33142: PUSH
33143: LD_VAR 0 2
33147: ST_TO_ADDR
// vc_control := control ;
33148: LD_ADDR_OWVAR 38
33152: PUSH
33153: LD_VAR 0 3
33157: ST_TO_ADDR
// vc_weapon := weapon ;
33158: LD_ADDR_OWVAR 40
33162: PUSH
33163: LD_VAR 0 4
33167: ST_TO_ADDR
// un := CreateVehicle ;
33168: LD_ADDR_VAR 0 8
33172: PUSH
33173: CALL_OW 45
33177: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33178: LD_VAR 0 8
33182: PPUSH
33183: LD_INT 0
33185: PPUSH
33186: LD_INT 5
33188: PPUSH
33189: CALL_OW 12
33193: PPUSH
33194: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33198: LD_VAR 0 8
33202: PPUSH
33203: LD_VAR 0 5
33207: PPUSH
33208: LD_VAR 0 6
33212: PPUSH
33213: LD_INT 1
33215: PPUSH
33216: CALL_OW 48
// end ;
33220: LD_VAR 0 7
33224: RET
// export hInvincible ; every 1 do
33225: GO 33227
33227: DISABLE
// hInvincible := [ ] ;
33228: LD_ADDR_EXP 126
33232: PUSH
33233: EMPTY
33234: ST_TO_ADDR
33235: END
// every 10 do var i ;
33236: GO 33238
33238: DISABLE
33239: LD_INT 0
33241: PPUSH
// begin enable ;
33242: ENABLE
// if not hInvincible then
33243: LD_EXP 126
33247: NOT
33248: IFFALSE 33252
// exit ;
33250: GO 33296
// for i in hInvincible do
33252: LD_ADDR_VAR 0 1
33256: PUSH
33257: LD_EXP 126
33261: PUSH
33262: FOR_IN
33263: IFFALSE 33294
// if GetLives ( i ) < 1000 then
33265: LD_VAR 0 1
33269: PPUSH
33270: CALL_OW 256
33274: PUSH
33275: LD_INT 1000
33277: LESS
33278: IFFALSE 33292
// SetLives ( i , 1000 ) ;
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_INT 1000
33287: PPUSH
33288: CALL_OW 234
33292: GO 33262
33294: POP
33295: POP
// end ;
33296: PPOPN 1
33298: END
// export function hHackInvincible ; var i ; begin
33299: LD_INT 0
33301: PPUSH
33302: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33303: LD_ADDR_VAR 0 2
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 21
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 21
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: PPUSH
33336: CALL_OW 69
33340: PUSH
33341: FOR_IN
33342: IFFALSE 33403
// if IsSelected ( i ) then
33344: LD_VAR 0 2
33348: PPUSH
33349: CALL_OW 306
33353: IFFALSE 33401
// begin if i in hInvincible then
33355: LD_VAR 0 2
33359: PUSH
33360: LD_EXP 126
33364: IN
33365: IFFALSE 33385
// hInvincible := hInvincible diff i else
33367: LD_ADDR_EXP 126
33371: PUSH
33372: LD_EXP 126
33376: PUSH
33377: LD_VAR 0 2
33381: DIFF
33382: ST_TO_ADDR
33383: GO 33401
// hInvincible := hInvincible union i ;
33385: LD_ADDR_EXP 126
33389: PUSH
33390: LD_EXP 126
33394: PUSH
33395: LD_VAR 0 2
33399: UNION
33400: ST_TO_ADDR
// end ;
33401: GO 33341
33403: POP
33404: POP
// end ;
33405: LD_VAR 0 1
33409: RET
// export function hHackInvisible ; var i , j ; begin
33410: LD_INT 0
33412: PPUSH
33413: PPUSH
33414: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33415: LD_ADDR_VAR 0 2
33419: PUSH
33420: LD_INT 21
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PPUSH
33430: CALL_OW 69
33434: PUSH
33435: FOR_IN
33436: IFFALSE 33460
// if IsSelected ( i ) then
33438: LD_VAR 0 2
33442: PPUSH
33443: CALL_OW 306
33447: IFFALSE 33458
// ComForceInvisible ( i ) ;
33449: LD_VAR 0 2
33453: PPUSH
33454: CALL_OW 496
33458: GO 33435
33460: POP
33461: POP
// end ;
33462: LD_VAR 0 1
33466: RET
// export function hHackChangeYourSide ; begin
33467: LD_INT 0
33469: PPUSH
// if your_side = 8 then
33470: LD_OWVAR 2
33474: PUSH
33475: LD_INT 8
33477: EQUAL
33478: IFFALSE 33490
// your_side := 0 else
33480: LD_ADDR_OWVAR 2
33484: PUSH
33485: LD_INT 0
33487: ST_TO_ADDR
33488: GO 33504
// your_side := your_side + 1 ;
33490: LD_ADDR_OWVAR 2
33494: PUSH
33495: LD_OWVAR 2
33499: PUSH
33500: LD_INT 1
33502: PLUS
33503: ST_TO_ADDR
// end ;
33504: LD_VAR 0 1
33508: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33509: LD_INT 0
33511: PPUSH
33512: PPUSH
33513: PPUSH
// for i in all_units do
33514: LD_ADDR_VAR 0 2
33518: PUSH
33519: LD_OWVAR 3
33523: PUSH
33524: FOR_IN
33525: IFFALSE 33603
// if IsSelected ( i ) then
33527: LD_VAR 0 2
33531: PPUSH
33532: CALL_OW 306
33536: IFFALSE 33601
// begin j := GetSide ( i ) ;
33538: LD_ADDR_VAR 0 3
33542: PUSH
33543: LD_VAR 0 2
33547: PPUSH
33548: CALL_OW 255
33552: ST_TO_ADDR
// if j = 8 then
33553: LD_VAR 0 3
33557: PUSH
33558: LD_INT 8
33560: EQUAL
33561: IFFALSE 33573
// j := 0 else
33563: LD_ADDR_VAR 0 3
33567: PUSH
33568: LD_INT 0
33570: ST_TO_ADDR
33571: GO 33587
// j := j + 1 ;
33573: LD_ADDR_VAR 0 3
33577: PUSH
33578: LD_VAR 0 3
33582: PUSH
33583: LD_INT 1
33585: PLUS
33586: ST_TO_ADDR
// SetSide ( i , j ) ;
33587: LD_VAR 0 2
33591: PPUSH
33592: LD_VAR 0 3
33596: PPUSH
33597: CALL_OW 235
// end ;
33601: GO 33524
33603: POP
33604: POP
// end ;
33605: LD_VAR 0 1
33609: RET
// export function hHackFog ; begin
33610: LD_INT 0
33612: PPUSH
// FogOff ( true ) ;
33613: LD_INT 1
33615: PPUSH
33616: CALL_OW 344
// end ;
33620: LD_VAR 0 1
33624: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33625: LD_INT 0
33627: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33628: LD_VAR 0 1
33632: PPUSH
33633: LD_VAR 0 2
33637: PPUSH
33638: LD_VAR 0 3
33642: PPUSH
33643: LD_INT 1
33645: PPUSH
33646: LD_INT 1
33648: PPUSH
33649: CALL_OW 483
// CenterOnXY ( x , y ) ;
33653: LD_VAR 0 2
33657: PPUSH
33658: LD_VAR 0 3
33662: PPUSH
33663: CALL_OW 84
// end ; end_of_file
33667: LD_VAR 0 4
33671: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33672: LD_INT 0
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 264
33687: PUSH
33688: LD_EXP 54
33692: EQUAL
33693: IFFALSE 33765
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33695: LD_INT 68
33697: PPUSH
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 255
33707: PPUSH
33708: CALL_OW 321
33712: PUSH
33713: LD_INT 2
33715: EQUAL
33716: IFFALSE 33728
// eff := 70 else
33718: LD_ADDR_VAR 0 4
33722: PUSH
33723: LD_INT 70
33725: ST_TO_ADDR
33726: GO 33736
// eff := 30 ;
33728: LD_ADDR_VAR 0 4
33732: PUSH
33733: LD_INT 30
33735: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33736: LD_VAR 0 1
33740: PPUSH
33741: CALL_OW 250
33745: PPUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: CALL_OW 251
33755: PPUSH
33756: LD_VAR 0 4
33760: PPUSH
33761: CALL_OW 495
// end ; end ;
33765: LD_VAR 0 2
33769: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33770: LD_INT 0
33772: PPUSH
// end ;
33773: LD_VAR 0 4
33777: RET
// export function SOS_Command ( cmd ) ; begin
33778: LD_INT 0
33780: PPUSH
// end ;
33781: LD_VAR 0 2
33785: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33786: LD_INT 0
33788: PPUSH
// end ;
33789: LD_VAR 0 6
33793: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33794: LD_INT 0
33796: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33797: LD_VAR 0 1
33801: PUSH
33802: LD_INT 250
33804: EQUAL
33805: PUSH
33806: LD_VAR 0 2
33810: PPUSH
33811: CALL_OW 264
33815: PUSH
33816: LD_EXP 57
33820: EQUAL
33821: AND
33822: IFFALSE 33843
// MinerPlaceMine ( unit , x , y ) ;
33824: LD_VAR 0 2
33828: PPUSH
33829: LD_VAR 0 4
33833: PPUSH
33834: LD_VAR 0 5
33838: PPUSH
33839: CALL 36192 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33843: LD_VAR 0 1
33847: PUSH
33848: LD_INT 251
33850: EQUAL
33851: PUSH
33852: LD_VAR 0 2
33856: PPUSH
33857: CALL_OW 264
33861: PUSH
33862: LD_EXP 57
33866: EQUAL
33867: AND
33868: IFFALSE 33889
// MinerDetonateMine ( unit , x , y ) ;
33870: LD_VAR 0 2
33874: PPUSH
33875: LD_VAR 0 4
33879: PPUSH
33880: LD_VAR 0 5
33884: PPUSH
33885: CALL 36469 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33889: LD_VAR 0 1
33893: PUSH
33894: LD_INT 252
33896: EQUAL
33897: PUSH
33898: LD_VAR 0 2
33902: PPUSH
33903: CALL_OW 264
33907: PUSH
33908: LD_EXP 57
33912: EQUAL
33913: AND
33914: IFFALSE 33935
// MinerCreateMinefield ( unit , x , y ) ;
33916: LD_VAR 0 2
33920: PPUSH
33921: LD_VAR 0 4
33925: PPUSH
33926: LD_VAR 0 5
33930: PPUSH
33931: CALL 36886 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33935: LD_VAR 0 1
33939: PUSH
33940: LD_INT 253
33942: EQUAL
33943: PUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: CALL_OW 257
33953: PUSH
33954: LD_INT 5
33956: EQUAL
33957: AND
33958: IFFALSE 33979
// ComBinocular ( unit , x , y ) ;
33960: LD_VAR 0 2
33964: PPUSH
33965: LD_VAR 0 4
33969: PPUSH
33970: LD_VAR 0 5
33974: PPUSH
33975: CALL 37257 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33979: LD_VAR 0 1
33983: PUSH
33984: LD_INT 254
33986: EQUAL
33987: PUSH
33988: LD_VAR 0 2
33992: PPUSH
33993: CALL_OW 264
33997: PUSH
33998: LD_EXP 52
34002: EQUAL
34003: AND
34004: PUSH
34005: LD_VAR 0 3
34009: PPUSH
34010: CALL_OW 263
34014: PUSH
34015: LD_INT 3
34017: EQUAL
34018: AND
34019: IFFALSE 34035
// HackDestroyVehicle ( unit , selectedUnit ) ;
34021: LD_VAR 0 2
34025: PPUSH
34026: LD_VAR 0 3
34030: PPUSH
34031: CALL 35552 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34035: LD_VAR 0 1
34039: PUSH
34040: LD_INT 255
34042: EQUAL
34043: PUSH
34044: LD_VAR 0 2
34048: PPUSH
34049: CALL_OW 264
34053: PUSH
34054: LD_INT 14
34056: PUSH
34057: LD_INT 53
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: IN
34064: AND
34065: PUSH
34066: LD_VAR 0 4
34070: PPUSH
34071: LD_VAR 0 5
34075: PPUSH
34076: CALL_OW 488
34080: AND
34081: IFFALSE 34105
// CutTreeXYR ( unit , x , y , 12 ) ;
34083: LD_VAR 0 2
34087: PPUSH
34088: LD_VAR 0 4
34092: PPUSH
34093: LD_VAR 0 5
34097: PPUSH
34098: LD_INT 12
34100: PPUSH
34101: CALL 34118 0 4
// end ;
34105: LD_VAR 0 6
34109: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
34110: LD_INT 0
34112: PPUSH
// end ;
34113: LD_VAR 0 4
34117: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34118: LD_INT 0
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
34124: PPUSH
34125: PPUSH
34126: PPUSH
34127: PPUSH
34128: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34129: LD_VAR 0 1
34133: NOT
34134: PUSH
34135: LD_VAR 0 2
34139: PPUSH
34140: LD_VAR 0 3
34144: PPUSH
34145: CALL_OW 488
34149: NOT
34150: OR
34151: PUSH
34152: LD_VAR 0 4
34156: NOT
34157: OR
34158: IFFALSE 34162
// exit ;
34160: GO 34502
// list := [ ] ;
34162: LD_ADDR_VAR 0 13
34166: PUSH
34167: EMPTY
34168: ST_TO_ADDR
// if x - r < 0 then
34169: LD_VAR 0 2
34173: PUSH
34174: LD_VAR 0 4
34178: MINUS
34179: PUSH
34180: LD_INT 0
34182: LESS
34183: IFFALSE 34195
// min_x := 0 else
34185: LD_ADDR_VAR 0 7
34189: PUSH
34190: LD_INT 0
34192: ST_TO_ADDR
34193: GO 34211
// min_x := x - r ;
34195: LD_ADDR_VAR 0 7
34199: PUSH
34200: LD_VAR 0 2
34204: PUSH
34205: LD_VAR 0 4
34209: MINUS
34210: ST_TO_ADDR
// if y - r < 0 then
34211: LD_VAR 0 3
34215: PUSH
34216: LD_VAR 0 4
34220: MINUS
34221: PUSH
34222: LD_INT 0
34224: LESS
34225: IFFALSE 34237
// min_y := 0 else
34227: LD_ADDR_VAR 0 8
34231: PUSH
34232: LD_INT 0
34234: ST_TO_ADDR
34235: GO 34253
// min_y := y - r ;
34237: LD_ADDR_VAR 0 8
34241: PUSH
34242: LD_VAR 0 3
34246: PUSH
34247: LD_VAR 0 4
34251: MINUS
34252: ST_TO_ADDR
// max_x := x + r ;
34253: LD_ADDR_VAR 0 9
34257: PUSH
34258: LD_VAR 0 2
34262: PUSH
34263: LD_VAR 0 4
34267: PLUS
34268: ST_TO_ADDR
// max_y := y + r ;
34269: LD_ADDR_VAR 0 10
34273: PUSH
34274: LD_VAR 0 3
34278: PUSH
34279: LD_VAR 0 4
34283: PLUS
34284: ST_TO_ADDR
// for _x = min_x to max_x do
34285: LD_ADDR_VAR 0 11
34289: PUSH
34290: DOUBLE
34291: LD_VAR 0 7
34295: DEC
34296: ST_TO_ADDR
34297: LD_VAR 0 9
34301: PUSH
34302: FOR_TO
34303: IFFALSE 34420
// for _y = min_y to max_y do
34305: LD_ADDR_VAR 0 12
34309: PUSH
34310: DOUBLE
34311: LD_VAR 0 8
34315: DEC
34316: ST_TO_ADDR
34317: LD_VAR 0 10
34321: PUSH
34322: FOR_TO
34323: IFFALSE 34416
// begin if not ValidHex ( _x , _y ) then
34325: LD_VAR 0 11
34329: PPUSH
34330: LD_VAR 0 12
34334: PPUSH
34335: CALL_OW 488
34339: NOT
34340: IFFALSE 34344
// continue ;
34342: GO 34322
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34344: LD_VAR 0 11
34348: PPUSH
34349: LD_VAR 0 12
34353: PPUSH
34354: CALL_OW 351
34358: PUSH
34359: LD_VAR 0 11
34363: PPUSH
34364: LD_VAR 0 12
34368: PPUSH
34369: CALL_OW 554
34373: AND
34374: IFFALSE 34414
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34376: LD_ADDR_VAR 0 13
34380: PUSH
34381: LD_VAR 0 13
34385: PPUSH
34386: LD_VAR 0 13
34390: PUSH
34391: LD_INT 1
34393: PLUS
34394: PPUSH
34395: LD_VAR 0 11
34399: PUSH
34400: LD_VAR 0 12
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 2
34413: ST_TO_ADDR
// end ;
34414: GO 34322
34416: POP
34417: POP
34418: GO 34302
34420: POP
34421: POP
// if not list then
34422: LD_VAR 0 13
34426: NOT
34427: IFFALSE 34431
// exit ;
34429: GO 34502
// for i in list do
34431: LD_ADDR_VAR 0 6
34435: PUSH
34436: LD_VAR 0 13
34440: PUSH
34441: FOR_IN
34442: IFFALSE 34500
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34444: LD_VAR 0 1
34448: PPUSH
34449: LD_STRING M
34451: PUSH
34452: LD_VAR 0 6
34456: PUSH
34457: LD_INT 1
34459: ARRAY
34460: PUSH
34461: LD_VAR 0 6
34465: PUSH
34466: LD_INT 2
34468: ARRAY
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: PPUSH
34494: CALL_OW 447
34498: GO 34441
34500: POP
34501: POP
// end ;
34502: LD_VAR 0 5
34506: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34507: LD_EXP 129
34511: NOT
34512: IFFALSE 34562
34514: GO 34516
34516: DISABLE
// begin initHack := true ;
34517: LD_ADDR_EXP 129
34521: PUSH
34522: LD_INT 1
34524: ST_TO_ADDR
// hackTanks := [ ] ;
34525: LD_ADDR_EXP 130
34529: PUSH
34530: EMPTY
34531: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34532: LD_ADDR_EXP 131
34536: PUSH
34537: EMPTY
34538: ST_TO_ADDR
// hackLimit := 3 ;
34539: LD_ADDR_EXP 132
34543: PUSH
34544: LD_INT 3
34546: ST_TO_ADDR
// hackDist := 12 ;
34547: LD_ADDR_EXP 133
34551: PUSH
34552: LD_INT 12
34554: ST_TO_ADDR
// hackCounter := [ ] ;
34555: LD_ADDR_EXP 134
34559: PUSH
34560: EMPTY
34561: ST_TO_ADDR
// end ;
34562: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34563: LD_EXP 129
34567: PUSH
34568: LD_INT 34
34570: PUSH
34571: LD_EXP 52
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PPUSH
34580: CALL_OW 69
34584: AND
34585: IFFALSE 34840
34587: GO 34589
34589: DISABLE
34590: LD_INT 0
34592: PPUSH
34593: PPUSH
// begin enable ;
34594: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34595: LD_ADDR_VAR 0 1
34599: PUSH
34600: LD_INT 34
34602: PUSH
34603: LD_EXP 52
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PPUSH
34612: CALL_OW 69
34616: PUSH
34617: FOR_IN
34618: IFFALSE 34838
// begin if not i in hackTanks then
34620: LD_VAR 0 1
34624: PUSH
34625: LD_EXP 130
34629: IN
34630: NOT
34631: IFFALSE 34714
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34633: LD_ADDR_EXP 130
34637: PUSH
34638: LD_EXP 130
34642: PPUSH
34643: LD_EXP 130
34647: PUSH
34648: LD_INT 1
34650: PLUS
34651: PPUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 1
34661: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34662: LD_ADDR_EXP 131
34666: PUSH
34667: LD_EXP 131
34671: PPUSH
34672: LD_EXP 131
34676: PUSH
34677: LD_INT 1
34679: PLUS
34680: PPUSH
34681: EMPTY
34682: PPUSH
34683: CALL_OW 1
34687: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34688: LD_ADDR_EXP 134
34692: PUSH
34693: LD_EXP 134
34697: PPUSH
34698: LD_EXP 134
34702: PUSH
34703: LD_INT 1
34705: PLUS
34706: PPUSH
34707: EMPTY
34708: PPUSH
34709: CALL_OW 1
34713: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34714: LD_VAR 0 1
34718: PPUSH
34719: CALL_OW 302
34723: NOT
34724: IFFALSE 34737
// begin HackUnlinkAll ( i ) ;
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL 34843 0 1
// continue ;
34735: GO 34617
// end ; HackCheckCapturedStatus ( i ) ;
34737: LD_VAR 0 1
34741: PPUSH
34742: CALL 35286 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34746: LD_ADDR_VAR 0 2
34750: PUSH
34751: LD_INT 81
34753: PUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 255
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 33
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 91
34780: PUSH
34781: LD_VAR 0 1
34785: PUSH
34786: LD_EXP 133
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 50
34798: PUSH
34799: EMPTY
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: PPUSH
34808: CALL_OW 69
34812: ST_TO_ADDR
// if not tmp then
34813: LD_VAR 0 2
34817: NOT
34818: IFFALSE 34822
// continue ;
34820: GO 34617
// HackLink ( i , tmp ) ;
34822: LD_VAR 0 1
34826: PPUSH
34827: LD_VAR 0 2
34831: PPUSH
34832: CALL 34979 0 2
// end ;
34836: GO 34617
34838: POP
34839: POP
// end ;
34840: PPOPN 2
34842: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34843: LD_INT 0
34845: PPUSH
34846: PPUSH
34847: PPUSH
// if not hack in hackTanks then
34848: LD_VAR 0 1
34852: PUSH
34853: LD_EXP 130
34857: IN
34858: NOT
34859: IFFALSE 34863
// exit ;
34861: GO 34974
// index := GetElementIndex ( hackTanks , hack ) ;
34863: LD_ADDR_VAR 0 4
34867: PUSH
34868: LD_EXP 130
34872: PPUSH
34873: LD_VAR 0 1
34877: PPUSH
34878: CALL 42448 0 2
34882: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34883: LD_EXP 131
34887: PUSH
34888: LD_VAR 0 4
34892: ARRAY
34893: IFFALSE 34974
// begin for i in hackTanksCaptured [ index ] do
34895: LD_ADDR_VAR 0 3
34899: PUSH
34900: LD_EXP 131
34904: PUSH
34905: LD_VAR 0 4
34909: ARRAY
34910: PUSH
34911: FOR_IN
34912: IFFALSE 34938
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34914: LD_VAR 0 3
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PPUSH
34923: LD_VAR 0 3
34927: PUSH
34928: LD_INT 2
34930: ARRAY
34931: PPUSH
34932: CALL_OW 235
34936: GO 34911
34938: POP
34939: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34940: LD_ADDR_EXP 131
34944: PUSH
34945: LD_EXP 131
34949: PPUSH
34950: LD_VAR 0 4
34954: PPUSH
34955: EMPTY
34956: PPUSH
34957: CALL_OW 1
34961: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34962: LD_VAR 0 1
34966: PPUSH
34967: LD_INT 0
34969: PPUSH
34970: CALL_OW 505
// end ; end ;
34974: LD_VAR 0 2
34978: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
34983: PPUSH
// if not hack in hackTanks or not vehicles then
34984: LD_VAR 0 1
34988: PUSH
34989: LD_EXP 130
34993: IN
34994: NOT
34995: PUSH
34996: LD_VAR 0 2
35000: NOT
35001: OR
35002: IFFALSE 35006
// exit ;
35004: GO 35281
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35006: LD_ADDR_VAR 0 2
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: LD_VAR 0 2
35020: PPUSH
35021: LD_INT 1
35023: PPUSH
35024: LD_INT 1
35026: PPUSH
35027: CALL 43098 0 4
35031: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35032: LD_ADDR_VAR 0 5
35036: PUSH
35037: LD_EXP 130
35041: PPUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL 42448 0 2
35051: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35052: LD_EXP 131
35056: PUSH
35057: LD_VAR 0 5
35061: ARRAY
35062: PUSH
35063: LD_EXP 132
35067: LESS
35068: IFFALSE 35257
// begin for i := 1 to vehicles do
35070: LD_ADDR_VAR 0 4
35074: PUSH
35075: DOUBLE
35076: LD_INT 1
35078: DEC
35079: ST_TO_ADDR
35080: LD_VAR 0 2
35084: PUSH
35085: FOR_TO
35086: IFFALSE 35255
// begin if hackTanksCaptured [ index ] = hackLimit then
35088: LD_EXP 131
35092: PUSH
35093: LD_VAR 0 5
35097: ARRAY
35098: PUSH
35099: LD_EXP 132
35103: EQUAL
35104: IFFALSE 35108
// break ;
35106: GO 35255
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35108: LD_ADDR_EXP 134
35112: PUSH
35113: LD_EXP 134
35117: PPUSH
35118: LD_VAR 0 5
35122: PPUSH
35123: LD_EXP 134
35127: PUSH
35128: LD_VAR 0 5
35132: ARRAY
35133: PUSH
35134: LD_INT 1
35136: PLUS
35137: PPUSH
35138: CALL_OW 1
35142: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35143: LD_ADDR_EXP 131
35147: PUSH
35148: LD_EXP 131
35152: PPUSH
35153: LD_VAR 0 5
35157: PUSH
35158: LD_EXP 131
35162: PUSH
35163: LD_VAR 0 5
35167: ARRAY
35168: PUSH
35169: LD_INT 1
35171: PLUS
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PPUSH
35177: LD_VAR 0 2
35181: PUSH
35182: LD_VAR 0 4
35186: ARRAY
35187: PUSH
35188: LD_VAR 0 2
35192: PUSH
35193: LD_VAR 0 4
35197: ARRAY
35198: PPUSH
35199: CALL_OW 255
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PPUSH
35208: CALL 42663 0 3
35212: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35213: LD_VAR 0 2
35217: PUSH
35218: LD_VAR 0 4
35222: ARRAY
35223: PPUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL_OW 255
35233: PPUSH
35234: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35238: LD_VAR 0 2
35242: PUSH
35243: LD_VAR 0 4
35247: ARRAY
35248: PPUSH
35249: CALL_OW 141
// end ;
35253: GO 35085
35255: POP
35256: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35257: LD_VAR 0 1
35261: PPUSH
35262: LD_EXP 131
35266: PUSH
35267: LD_VAR 0 5
35271: ARRAY
35272: PUSH
35273: LD_INT 0
35275: PLUS
35276: PPUSH
35277: CALL_OW 505
// end ;
35281: LD_VAR 0 3
35285: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35286: LD_INT 0
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
// if not hack in hackTanks then
35292: LD_VAR 0 1
35296: PUSH
35297: LD_EXP 130
35301: IN
35302: NOT
35303: IFFALSE 35307
// exit ;
35305: GO 35547
// index := GetElementIndex ( hackTanks , hack ) ;
35307: LD_ADDR_VAR 0 4
35311: PUSH
35312: LD_EXP 130
35316: PPUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL 42448 0 2
35326: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35327: LD_ADDR_VAR 0 3
35331: PUSH
35332: DOUBLE
35333: LD_EXP 131
35337: PUSH
35338: LD_VAR 0 4
35342: ARRAY
35343: INC
35344: ST_TO_ADDR
35345: LD_INT 1
35347: PUSH
35348: FOR_DOWNTO
35349: IFFALSE 35521
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35351: LD_ADDR_VAR 0 5
35355: PUSH
35356: LD_EXP 131
35360: PUSH
35361: LD_VAR 0 4
35365: ARRAY
35366: PUSH
35367: LD_VAR 0 3
35371: ARRAY
35372: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35373: LD_VAR 0 5
35377: PUSH
35378: LD_INT 1
35380: ARRAY
35381: PPUSH
35382: CALL_OW 302
35386: NOT
35387: PUSH
35388: LD_VAR 0 5
35392: PUSH
35393: LD_INT 1
35395: ARRAY
35396: PPUSH
35397: CALL_OW 255
35401: PUSH
35402: LD_VAR 0 1
35406: PPUSH
35407: CALL_OW 255
35411: NONEQUAL
35412: OR
35413: IFFALSE 35519
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35415: LD_VAR 0 5
35419: PUSH
35420: LD_INT 1
35422: ARRAY
35423: PPUSH
35424: CALL_OW 305
35428: PUSH
35429: LD_VAR 0 5
35433: PUSH
35434: LD_INT 1
35436: ARRAY
35437: PPUSH
35438: CALL_OW 255
35442: PUSH
35443: LD_VAR 0 1
35447: PPUSH
35448: CALL_OW 255
35452: EQUAL
35453: AND
35454: IFFALSE 35478
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35456: LD_VAR 0 5
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PPUSH
35465: LD_VAR 0 5
35469: PUSH
35470: LD_INT 2
35472: ARRAY
35473: PPUSH
35474: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35478: LD_ADDR_EXP 131
35482: PUSH
35483: LD_EXP 131
35487: PPUSH
35488: LD_VAR 0 4
35492: PPUSH
35493: LD_EXP 131
35497: PUSH
35498: LD_VAR 0 4
35502: ARRAY
35503: PPUSH
35504: LD_VAR 0 3
35508: PPUSH
35509: CALL_OW 3
35513: PPUSH
35514: CALL_OW 1
35518: ST_TO_ADDR
// end ; end ;
35519: GO 35348
35521: POP
35522: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35523: LD_VAR 0 1
35527: PPUSH
35528: LD_EXP 131
35532: PUSH
35533: LD_VAR 0 4
35537: ARRAY
35538: PUSH
35539: LD_INT 0
35541: PLUS
35542: PPUSH
35543: CALL_OW 505
// end ;
35547: LD_VAR 0 2
35551: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35552: LD_INT 0
35554: PPUSH
35555: PPUSH
35556: PPUSH
35557: PPUSH
// if not hack in hackTanks then
35558: LD_VAR 0 1
35562: PUSH
35563: LD_EXP 130
35567: IN
35568: NOT
35569: IFFALSE 35573
// exit ;
35571: GO 35658
// index := GetElementIndex ( hackTanks , hack ) ;
35573: LD_ADDR_VAR 0 5
35577: PUSH
35578: LD_EXP 130
35582: PPUSH
35583: LD_VAR 0 1
35587: PPUSH
35588: CALL 42448 0 2
35592: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35593: LD_ADDR_VAR 0 4
35597: PUSH
35598: DOUBLE
35599: LD_INT 1
35601: DEC
35602: ST_TO_ADDR
35603: LD_EXP 131
35607: PUSH
35608: LD_VAR 0 5
35612: ARRAY
35613: PUSH
35614: FOR_TO
35615: IFFALSE 35656
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35617: LD_EXP 131
35621: PUSH
35622: LD_VAR 0 5
35626: ARRAY
35627: PUSH
35628: LD_VAR 0 4
35632: ARRAY
35633: PUSH
35634: LD_INT 1
35636: ARRAY
35637: PUSH
35638: LD_VAR 0 2
35642: EQUAL
35643: IFFALSE 35654
// KillUnit ( vehicle ) ;
35645: LD_VAR 0 2
35649: PPUSH
35650: CALL_OW 66
35654: GO 35614
35656: POP
35657: POP
// end ;
35658: LD_VAR 0 3
35662: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35663: LD_EXP 135
35667: NOT
35668: IFFALSE 35703
35670: GO 35672
35672: DISABLE
// begin initMiner := true ;
35673: LD_ADDR_EXP 135
35677: PUSH
35678: LD_INT 1
35680: ST_TO_ADDR
// minersList := [ ] ;
35681: LD_ADDR_EXP 136
35685: PUSH
35686: EMPTY
35687: ST_TO_ADDR
// minerMinesList := [ ] ;
35688: LD_ADDR_EXP 137
35692: PUSH
35693: EMPTY
35694: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35695: LD_ADDR_EXP 138
35699: PUSH
35700: LD_INT 5
35702: ST_TO_ADDR
// end ;
35703: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35704: LD_EXP 135
35708: PUSH
35709: LD_INT 34
35711: PUSH
35712: LD_EXP 57
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PPUSH
35721: CALL_OW 69
35725: AND
35726: IFFALSE 36189
35728: GO 35730
35730: DISABLE
35731: LD_INT 0
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
// begin enable ;
35737: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35738: LD_ADDR_VAR 0 1
35742: PUSH
35743: LD_INT 34
35745: PUSH
35746: LD_EXP 57
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PPUSH
35755: CALL_OW 69
35759: PUSH
35760: FOR_IN
35761: IFFALSE 35833
// begin if not i in minersList then
35763: LD_VAR 0 1
35767: PUSH
35768: LD_EXP 136
35772: IN
35773: NOT
35774: IFFALSE 35831
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35776: LD_ADDR_EXP 136
35780: PUSH
35781: LD_EXP 136
35785: PPUSH
35786: LD_EXP 136
35790: PUSH
35791: LD_INT 1
35793: PLUS
35794: PPUSH
35795: LD_VAR 0 1
35799: PPUSH
35800: CALL_OW 1
35804: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35805: LD_ADDR_EXP 137
35809: PUSH
35810: LD_EXP 137
35814: PPUSH
35815: LD_EXP 137
35819: PUSH
35820: LD_INT 1
35822: PLUS
35823: PPUSH
35824: EMPTY
35825: PPUSH
35826: CALL_OW 1
35830: ST_TO_ADDR
// end end ;
35831: GO 35760
35833: POP
35834: POP
// for i := minerMinesList downto 1 do
35835: LD_ADDR_VAR 0 1
35839: PUSH
35840: DOUBLE
35841: LD_EXP 137
35845: INC
35846: ST_TO_ADDR
35847: LD_INT 1
35849: PUSH
35850: FOR_DOWNTO
35851: IFFALSE 36187
// begin if IsLive ( minersList [ i ] ) then
35853: LD_EXP 136
35857: PUSH
35858: LD_VAR 0 1
35862: ARRAY
35863: PPUSH
35864: CALL_OW 300
35868: IFFALSE 35896
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35870: LD_EXP 136
35874: PUSH
35875: LD_VAR 0 1
35879: ARRAY
35880: PPUSH
35881: LD_EXP 137
35885: PUSH
35886: LD_VAR 0 1
35890: ARRAY
35891: PPUSH
35892: CALL_OW 505
// if not minerMinesList [ i ] then
35896: LD_EXP 137
35900: PUSH
35901: LD_VAR 0 1
35905: ARRAY
35906: NOT
35907: IFFALSE 35911
// continue ;
35909: GO 35850
// for j := minerMinesList [ i ] downto 1 do
35911: LD_ADDR_VAR 0 2
35915: PUSH
35916: DOUBLE
35917: LD_EXP 137
35921: PUSH
35922: LD_VAR 0 1
35926: ARRAY
35927: INC
35928: ST_TO_ADDR
35929: LD_INT 1
35931: PUSH
35932: FOR_DOWNTO
35933: IFFALSE 36183
// begin side := GetSide ( minersList [ i ] ) ;
35935: LD_ADDR_VAR 0 3
35939: PUSH
35940: LD_EXP 136
35944: PUSH
35945: LD_VAR 0 1
35949: ARRAY
35950: PPUSH
35951: CALL_OW 255
35955: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35956: LD_ADDR_VAR 0 4
35960: PUSH
35961: LD_EXP 137
35965: PUSH
35966: LD_VAR 0 1
35970: ARRAY
35971: PUSH
35972: LD_VAR 0 2
35976: ARRAY
35977: PUSH
35978: LD_INT 1
35980: ARRAY
35981: PPUSH
35982: LD_EXP 137
35986: PUSH
35987: LD_VAR 0 1
35991: ARRAY
35992: PUSH
35993: LD_VAR 0 2
35997: ARRAY
35998: PUSH
35999: LD_INT 2
36001: ARRAY
36002: PPUSH
36003: CALL_OW 428
36007: ST_TO_ADDR
// if not tmp then
36008: LD_VAR 0 4
36012: NOT
36013: IFFALSE 36017
// continue ;
36015: GO 35932
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36017: LD_VAR 0 4
36021: PUSH
36022: LD_INT 81
36024: PUSH
36025: LD_VAR 0 3
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 69
36038: IN
36039: PUSH
36040: LD_EXP 137
36044: PUSH
36045: LD_VAR 0 1
36049: ARRAY
36050: PUSH
36051: LD_VAR 0 2
36055: ARRAY
36056: PUSH
36057: LD_INT 1
36059: ARRAY
36060: PPUSH
36061: LD_EXP 137
36065: PUSH
36066: LD_VAR 0 1
36070: ARRAY
36071: PUSH
36072: LD_VAR 0 2
36076: ARRAY
36077: PUSH
36078: LD_INT 2
36080: ARRAY
36081: PPUSH
36082: CALL_OW 458
36086: AND
36087: IFFALSE 36181
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36089: LD_EXP 137
36093: PUSH
36094: LD_VAR 0 1
36098: ARRAY
36099: PUSH
36100: LD_VAR 0 2
36104: ARRAY
36105: PUSH
36106: LD_INT 1
36108: ARRAY
36109: PPUSH
36110: LD_EXP 137
36114: PUSH
36115: LD_VAR 0 1
36119: ARRAY
36120: PUSH
36121: LD_VAR 0 2
36125: ARRAY
36126: PUSH
36127: LD_INT 2
36129: ARRAY
36130: PPUSH
36131: LD_VAR 0 3
36135: PPUSH
36136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36140: LD_ADDR_EXP 137
36144: PUSH
36145: LD_EXP 137
36149: PPUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_EXP 137
36159: PUSH
36160: LD_VAR 0 1
36164: ARRAY
36165: PPUSH
36166: LD_VAR 0 2
36170: PPUSH
36171: CALL_OW 3
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
// end ; end ;
36181: GO 35932
36183: POP
36184: POP
// end ;
36185: GO 35850
36187: POP
36188: POP
// end ;
36189: PPOPN 4
36191: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36192: LD_INT 0
36194: PPUSH
36195: PPUSH
// result := false ;
36196: LD_ADDR_VAR 0 4
36200: PUSH
36201: LD_INT 0
36203: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36204: LD_VAR 0 1
36208: PPUSH
36209: CALL_OW 264
36213: PUSH
36214: LD_EXP 57
36218: EQUAL
36219: NOT
36220: IFFALSE 36224
// exit ;
36222: GO 36464
// index := GetElementIndex ( minersList , unit ) ;
36224: LD_ADDR_VAR 0 5
36228: PUSH
36229: LD_EXP 136
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL 42448 0 2
36243: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36244: LD_EXP 137
36248: PUSH
36249: LD_VAR 0 5
36253: ARRAY
36254: PUSH
36255: LD_EXP 138
36259: GREATEREQUAL
36260: IFFALSE 36264
// exit ;
36262: GO 36464
// ComMoveXY ( unit , x , y ) ;
36264: LD_VAR 0 1
36268: PPUSH
36269: LD_VAR 0 2
36273: PPUSH
36274: LD_VAR 0 3
36278: PPUSH
36279: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36283: LD_INT 35
36285: PPUSH
36286: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36290: LD_VAR 0 1
36294: PPUSH
36295: LD_VAR 0 2
36299: PPUSH
36300: LD_VAR 0 3
36304: PPUSH
36305: CALL 73220 0 3
36309: NOT
36310: PUSH
36311: LD_VAR 0 1
36315: PPUSH
36316: CALL_OW 314
36320: AND
36321: IFFALSE 36325
// exit ;
36323: GO 36464
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36325: LD_VAR 0 2
36329: PPUSH
36330: LD_VAR 0 3
36334: PPUSH
36335: CALL_OW 428
36339: PUSH
36340: LD_VAR 0 1
36344: EQUAL
36345: PUSH
36346: LD_VAR 0 1
36350: PPUSH
36351: CALL_OW 314
36355: NOT
36356: AND
36357: IFFALSE 36283
// PlaySoundXY ( x , y , PlantMine ) ;
36359: LD_VAR 0 2
36363: PPUSH
36364: LD_VAR 0 3
36368: PPUSH
36369: LD_STRING PlantMine
36371: PPUSH
36372: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36376: LD_VAR 0 2
36380: PPUSH
36381: LD_VAR 0 3
36385: PPUSH
36386: LD_VAR 0 1
36390: PPUSH
36391: CALL_OW 255
36395: PPUSH
36396: LD_INT 0
36398: PPUSH
36399: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36403: LD_ADDR_EXP 137
36407: PUSH
36408: LD_EXP 137
36412: PPUSH
36413: LD_VAR 0 5
36417: PUSH
36418: LD_EXP 137
36422: PUSH
36423: LD_VAR 0 5
36427: ARRAY
36428: PUSH
36429: LD_INT 1
36431: PLUS
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PPUSH
36437: LD_VAR 0 2
36441: PUSH
36442: LD_VAR 0 3
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PPUSH
36451: CALL 42663 0 3
36455: ST_TO_ADDR
// result := true ;
36456: LD_ADDR_VAR 0 4
36460: PUSH
36461: LD_INT 1
36463: ST_TO_ADDR
// end ;
36464: LD_VAR 0 4
36468: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36469: LD_INT 0
36471: PPUSH
36472: PPUSH
36473: PPUSH
// if not unit in minersList then
36474: LD_VAR 0 1
36478: PUSH
36479: LD_EXP 136
36483: IN
36484: NOT
36485: IFFALSE 36489
// exit ;
36487: GO 36881
// index := GetElementIndex ( minersList , unit ) ;
36489: LD_ADDR_VAR 0 6
36493: PUSH
36494: LD_EXP 136
36498: PPUSH
36499: LD_VAR 0 1
36503: PPUSH
36504: CALL 42448 0 2
36508: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36509: LD_ADDR_VAR 0 5
36513: PUSH
36514: DOUBLE
36515: LD_EXP 137
36519: PUSH
36520: LD_VAR 0 6
36524: ARRAY
36525: INC
36526: ST_TO_ADDR
36527: LD_INT 1
36529: PUSH
36530: FOR_DOWNTO
36531: IFFALSE 36692
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36533: LD_EXP 137
36537: PUSH
36538: LD_VAR 0 6
36542: ARRAY
36543: PUSH
36544: LD_VAR 0 5
36548: ARRAY
36549: PUSH
36550: LD_INT 1
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 2
36558: EQUAL
36559: PUSH
36560: LD_EXP 137
36564: PUSH
36565: LD_VAR 0 6
36569: ARRAY
36570: PUSH
36571: LD_VAR 0 5
36575: ARRAY
36576: PUSH
36577: LD_INT 2
36579: ARRAY
36580: PUSH
36581: LD_VAR 0 3
36585: EQUAL
36586: AND
36587: IFFALSE 36690
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36589: LD_EXP 137
36593: PUSH
36594: LD_VAR 0 6
36598: ARRAY
36599: PUSH
36600: LD_VAR 0 5
36604: ARRAY
36605: PUSH
36606: LD_INT 1
36608: ARRAY
36609: PPUSH
36610: LD_EXP 137
36614: PUSH
36615: LD_VAR 0 6
36619: ARRAY
36620: PUSH
36621: LD_VAR 0 5
36625: ARRAY
36626: PUSH
36627: LD_INT 2
36629: ARRAY
36630: PPUSH
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 255
36640: PPUSH
36641: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36645: LD_ADDR_EXP 137
36649: PUSH
36650: LD_EXP 137
36654: PPUSH
36655: LD_VAR 0 6
36659: PPUSH
36660: LD_EXP 137
36664: PUSH
36665: LD_VAR 0 6
36669: ARRAY
36670: PPUSH
36671: LD_VAR 0 5
36675: PPUSH
36676: CALL_OW 3
36680: PPUSH
36681: CALL_OW 1
36685: ST_TO_ADDR
// exit ;
36686: POP
36687: POP
36688: GO 36881
// end ; end ;
36690: GO 36530
36692: POP
36693: POP
// for i := minerMinesList [ index ] downto 1 do
36694: LD_ADDR_VAR 0 5
36698: PUSH
36699: DOUBLE
36700: LD_EXP 137
36704: PUSH
36705: LD_VAR 0 6
36709: ARRAY
36710: INC
36711: ST_TO_ADDR
36712: LD_INT 1
36714: PUSH
36715: FOR_DOWNTO
36716: IFFALSE 36879
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36718: LD_EXP 137
36722: PUSH
36723: LD_VAR 0 6
36727: ARRAY
36728: PUSH
36729: LD_VAR 0 5
36733: ARRAY
36734: PUSH
36735: LD_INT 1
36737: ARRAY
36738: PPUSH
36739: LD_EXP 137
36743: PUSH
36744: LD_VAR 0 6
36748: ARRAY
36749: PUSH
36750: LD_VAR 0 5
36754: ARRAY
36755: PUSH
36756: LD_INT 2
36758: ARRAY
36759: PPUSH
36760: LD_VAR 0 2
36764: PPUSH
36765: LD_VAR 0 3
36769: PPUSH
36770: CALL_OW 298
36774: PUSH
36775: LD_INT 6
36777: LESS
36778: IFFALSE 36877
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36780: LD_EXP 137
36784: PUSH
36785: LD_VAR 0 6
36789: ARRAY
36790: PUSH
36791: LD_VAR 0 5
36795: ARRAY
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PPUSH
36801: LD_EXP 137
36805: PUSH
36806: LD_VAR 0 6
36810: ARRAY
36811: PUSH
36812: LD_VAR 0 5
36816: ARRAY
36817: PUSH
36818: LD_INT 2
36820: ARRAY
36821: PPUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 255
36831: PPUSH
36832: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36836: LD_ADDR_EXP 137
36840: PUSH
36841: LD_EXP 137
36845: PPUSH
36846: LD_VAR 0 6
36850: PPUSH
36851: LD_EXP 137
36855: PUSH
36856: LD_VAR 0 6
36860: ARRAY
36861: PPUSH
36862: LD_VAR 0 5
36866: PPUSH
36867: CALL_OW 3
36871: PPUSH
36872: CALL_OW 1
36876: ST_TO_ADDR
// end ; end ;
36877: GO 36715
36879: POP
36880: POP
// end ;
36881: LD_VAR 0 4
36885: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36886: LD_INT 0
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
36895: PPUSH
36896: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 264
36906: PUSH
36907: LD_EXP 57
36911: EQUAL
36912: NOT
36913: PUSH
36914: LD_VAR 0 1
36918: PUSH
36919: LD_EXP 136
36923: IN
36924: NOT
36925: OR
36926: IFFALSE 36930
// exit ;
36928: GO 37252
// index := GetElementIndex ( minersList , unit ) ;
36930: LD_ADDR_VAR 0 6
36934: PUSH
36935: LD_EXP 136
36939: PPUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL 42448 0 2
36949: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36950: LD_ADDR_VAR 0 8
36954: PUSH
36955: LD_EXP 138
36959: PUSH
36960: LD_EXP 137
36964: PUSH
36965: LD_VAR 0 6
36969: ARRAY
36970: MINUS
36971: ST_TO_ADDR
// if not minesFreeAmount then
36972: LD_VAR 0 8
36976: NOT
36977: IFFALSE 36981
// exit ;
36979: GO 37252
// tmp := [ ] ;
36981: LD_ADDR_VAR 0 7
36985: PUSH
36986: EMPTY
36987: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36988: LD_ADDR_VAR 0 5
36992: PUSH
36993: DOUBLE
36994: LD_INT 1
36996: DEC
36997: ST_TO_ADDR
36998: LD_VAR 0 8
37002: PUSH
37003: FOR_TO
37004: IFFALSE 37199
// begin _d := rand ( 0 , 5 ) ;
37006: LD_ADDR_VAR 0 11
37010: PUSH
37011: LD_INT 0
37013: PPUSH
37014: LD_INT 5
37016: PPUSH
37017: CALL_OW 12
37021: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37022: LD_ADDR_VAR 0 12
37026: PUSH
37027: LD_INT 2
37029: PPUSH
37030: LD_INT 6
37032: PPUSH
37033: CALL_OW 12
37037: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37038: LD_ADDR_VAR 0 9
37042: PUSH
37043: LD_VAR 0 2
37047: PPUSH
37048: LD_VAR 0 11
37052: PPUSH
37053: LD_VAR 0 12
37057: PPUSH
37058: CALL_OW 272
37062: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37063: LD_ADDR_VAR 0 10
37067: PUSH
37068: LD_VAR 0 3
37072: PPUSH
37073: LD_VAR 0 11
37077: PPUSH
37078: LD_VAR 0 12
37082: PPUSH
37083: CALL_OW 273
37087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37088: LD_VAR 0 9
37092: PPUSH
37093: LD_VAR 0 10
37097: PPUSH
37098: CALL_OW 488
37102: PUSH
37103: LD_VAR 0 9
37107: PUSH
37108: LD_VAR 0 10
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_VAR 0 7
37121: IN
37122: NOT
37123: AND
37124: PUSH
37125: LD_VAR 0 9
37129: PPUSH
37130: LD_VAR 0 10
37134: PPUSH
37135: CALL_OW 458
37139: NOT
37140: AND
37141: IFFALSE 37183
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37143: LD_ADDR_VAR 0 7
37147: PUSH
37148: LD_VAR 0 7
37152: PPUSH
37153: LD_VAR 0 7
37157: PUSH
37158: LD_INT 1
37160: PLUS
37161: PPUSH
37162: LD_VAR 0 9
37166: PUSH
37167: LD_VAR 0 10
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PPUSH
37176: CALL_OW 1
37180: ST_TO_ADDR
37181: GO 37197
// i := i - 1 ;
37183: LD_ADDR_VAR 0 5
37187: PUSH
37188: LD_VAR 0 5
37192: PUSH
37193: LD_INT 1
37195: MINUS
37196: ST_TO_ADDR
// end ;
37197: GO 37003
37199: POP
37200: POP
// for i in tmp do
37201: LD_ADDR_VAR 0 5
37205: PUSH
37206: LD_VAR 0 7
37210: PUSH
37211: FOR_IN
37212: IFFALSE 37250
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37214: LD_VAR 0 1
37218: PPUSH
37219: LD_VAR 0 5
37223: PUSH
37224: LD_INT 1
37226: ARRAY
37227: PPUSH
37228: LD_VAR 0 5
37232: PUSH
37233: LD_INT 2
37235: ARRAY
37236: PPUSH
37237: CALL 36192 0 3
37241: NOT
37242: IFFALSE 37248
// exit ;
37244: POP
37245: POP
37246: GO 37252
37248: GO 37211
37250: POP
37251: POP
// end ;
37252: LD_VAR 0 4
37256: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37257: LD_INT 0
37259: PPUSH
37260: PPUSH
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
// if not GetClass ( unit ) = class_sniper then
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 257
37275: PUSH
37276: LD_INT 5
37278: EQUAL
37279: NOT
37280: IFFALSE 37284
// exit ;
37282: GO 37672
// dist := 8 ;
37284: LD_ADDR_VAR 0 5
37288: PUSH
37289: LD_INT 8
37291: ST_TO_ADDR
// viewRange := 12 ;
37292: LD_ADDR_VAR 0 7
37296: PUSH
37297: LD_INT 12
37299: ST_TO_ADDR
// side := GetSide ( unit ) ;
37300: LD_ADDR_VAR 0 6
37304: PUSH
37305: LD_VAR 0 1
37309: PPUSH
37310: CALL_OW 255
37314: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37315: LD_INT 61
37317: PPUSH
37318: LD_VAR 0 6
37322: PPUSH
37323: CALL_OW 321
37327: PUSH
37328: LD_INT 2
37330: EQUAL
37331: IFFALSE 37341
// viewRange := 16 ;
37333: LD_ADDR_VAR 0 7
37337: PUSH
37338: LD_INT 16
37340: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37341: LD_VAR 0 1
37345: PPUSH
37346: LD_VAR 0 2
37350: PPUSH
37351: LD_VAR 0 3
37355: PPUSH
37356: CALL_OW 297
37360: PUSH
37361: LD_VAR 0 5
37365: GREATER
37366: IFFALSE 37445
// begin ComMoveXY ( unit , x , y ) ;
37368: LD_VAR 0 1
37372: PPUSH
37373: LD_VAR 0 2
37377: PPUSH
37378: LD_VAR 0 3
37382: PPUSH
37383: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37387: LD_INT 35
37389: PPUSH
37390: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37394: LD_VAR 0 1
37398: PPUSH
37399: LD_VAR 0 2
37403: PPUSH
37404: LD_VAR 0 3
37408: PPUSH
37409: CALL 73220 0 3
37413: NOT
37414: IFFALSE 37418
// exit ;
37416: GO 37672
// until GetDistUnitXY ( unit , x , y ) < dist ;
37418: LD_VAR 0 1
37422: PPUSH
37423: LD_VAR 0 2
37427: PPUSH
37428: LD_VAR 0 3
37432: PPUSH
37433: CALL_OW 297
37437: PUSH
37438: LD_VAR 0 5
37442: LESS
37443: IFFALSE 37387
// end ; ComTurnXY ( unit , x , y ) ;
37445: LD_VAR 0 1
37449: PPUSH
37450: LD_VAR 0 2
37454: PPUSH
37455: LD_VAR 0 3
37459: PPUSH
37460: CALL_OW 118
// wait ( 5 ) ;
37464: LD_INT 5
37466: PPUSH
37467: CALL_OW 67
// _d := GetDir ( unit ) ;
37471: LD_ADDR_VAR 0 10
37475: PUSH
37476: LD_VAR 0 1
37480: PPUSH
37481: CALL_OW 254
37485: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37486: LD_ADDR_VAR 0 8
37490: PUSH
37491: LD_VAR 0 1
37495: PPUSH
37496: CALL_OW 250
37500: PPUSH
37501: LD_VAR 0 10
37505: PPUSH
37506: LD_VAR 0 5
37510: PPUSH
37511: CALL_OW 272
37515: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37516: LD_ADDR_VAR 0 9
37520: PUSH
37521: LD_VAR 0 1
37525: PPUSH
37526: CALL_OW 251
37530: PPUSH
37531: LD_VAR 0 10
37535: PPUSH
37536: LD_VAR 0 5
37540: PPUSH
37541: CALL_OW 273
37545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37546: LD_VAR 0 8
37550: PPUSH
37551: LD_VAR 0 9
37555: PPUSH
37556: CALL_OW 488
37560: NOT
37561: IFFALSE 37565
// exit ;
37563: GO 37672
// ComAnimCustom ( unit , 1 ) ;
37565: LD_VAR 0 1
37569: PPUSH
37570: LD_INT 1
37572: PPUSH
37573: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37577: LD_VAR 0 8
37581: PPUSH
37582: LD_VAR 0 9
37586: PPUSH
37587: LD_VAR 0 6
37591: PPUSH
37592: LD_VAR 0 7
37596: PPUSH
37597: CALL_OW 330
// repeat wait ( 1 ) ;
37601: LD_INT 1
37603: PPUSH
37604: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37608: LD_VAR 0 1
37612: PPUSH
37613: CALL_OW 316
37617: PUSH
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 314
37627: OR
37628: PUSH
37629: LD_VAR 0 1
37633: PPUSH
37634: CALL_OW 302
37638: NOT
37639: OR
37640: PUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: CALL_OW 301
37650: OR
37651: IFFALSE 37601
// RemoveSeeing ( _x , _y , side ) ;
37653: LD_VAR 0 8
37657: PPUSH
37658: LD_VAR 0 9
37662: PPUSH
37663: LD_VAR 0 6
37667: PPUSH
37668: CALL_OW 331
// end ; end_of_file
37672: LD_VAR 0 4
37676: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37677: LD_INT 0
37679: PPUSH
37680: PPUSH
// if exist_mode then
37681: LD_VAR 0 2
37685: IFFALSE 37710
// unit := CreateCharacter ( prefix & ident ) else
37687: LD_ADDR_VAR 0 5
37691: PUSH
37692: LD_VAR 0 3
37696: PUSH
37697: LD_VAR 0 1
37701: STR
37702: PPUSH
37703: CALL_OW 34
37707: ST_TO_ADDR
37708: GO 37725
// unit := NewCharacter ( ident ) ;
37710: LD_ADDR_VAR 0 5
37714: PUSH
37715: LD_VAR 0 1
37719: PPUSH
37720: CALL_OW 25
37724: ST_TO_ADDR
// result := unit ;
37725: LD_ADDR_VAR 0 4
37729: PUSH
37730: LD_VAR 0 5
37734: ST_TO_ADDR
// end ;
37735: LD_VAR 0 4
37739: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37740: LD_INT 0
37742: PPUSH
37743: PPUSH
// if not side or not nation then
37744: LD_VAR 0 1
37748: NOT
37749: PUSH
37750: LD_VAR 0 2
37754: NOT
37755: OR
37756: IFFALSE 37760
// exit ;
37758: GO 38528
// case nation of nation_american :
37760: LD_VAR 0 2
37764: PUSH
37765: LD_INT 1
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 37987
37773: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37774: LD_ADDR_VAR 0 4
37778: PUSH
37779: LD_INT 35
37781: PUSH
37782: LD_INT 45
37784: PUSH
37785: LD_INT 46
37787: PUSH
37788: LD_INT 47
37790: PUSH
37791: LD_INT 82
37793: PUSH
37794: LD_INT 83
37796: PUSH
37797: LD_INT 84
37799: PUSH
37800: LD_INT 85
37802: PUSH
37803: LD_INT 86
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 6
37814: PUSH
37815: LD_INT 15
37817: PUSH
37818: LD_INT 16
37820: PUSH
37821: LD_INT 7
37823: PUSH
37824: LD_INT 12
37826: PUSH
37827: LD_INT 13
37829: PUSH
37830: LD_INT 10
37832: PUSH
37833: LD_INT 14
37835: PUSH
37836: LD_INT 20
37838: PUSH
37839: LD_INT 21
37841: PUSH
37842: LD_INT 22
37844: PUSH
37845: LD_INT 25
37847: PUSH
37848: LD_INT 32
37850: PUSH
37851: LD_INT 27
37853: PUSH
37854: LD_INT 36
37856: PUSH
37857: LD_INT 69
37859: PUSH
37860: LD_INT 39
37862: PUSH
37863: LD_INT 34
37865: PUSH
37866: LD_INT 40
37868: PUSH
37869: LD_INT 48
37871: PUSH
37872: LD_INT 49
37874: PUSH
37875: LD_INT 50
37877: PUSH
37878: LD_INT 51
37880: PUSH
37881: LD_INT 52
37883: PUSH
37884: LD_INT 53
37886: PUSH
37887: LD_INT 54
37889: PUSH
37890: LD_INT 55
37892: PUSH
37893: LD_INT 56
37895: PUSH
37896: LD_INT 57
37898: PUSH
37899: LD_INT 58
37901: PUSH
37902: LD_INT 59
37904: PUSH
37905: LD_INT 60
37907: PUSH
37908: LD_INT 61
37910: PUSH
37911: LD_INT 62
37913: PUSH
37914: LD_INT 80
37916: PUSH
37917: LD_INT 82
37919: PUSH
37920: LD_INT 83
37922: PUSH
37923: LD_INT 84
37925: PUSH
37926: LD_INT 85
37928: PUSH
37929: LD_INT 86
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
37985: GO 38452
37987: LD_INT 2
37989: DOUBLE
37990: EQUAL
37991: IFTRUE 37995
37993: GO 38221
37995: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37996: LD_ADDR_VAR 0 4
38000: PUSH
38001: LD_INT 35
38003: PUSH
38004: LD_INT 45
38006: PUSH
38007: LD_INT 46
38009: PUSH
38010: LD_INT 47
38012: PUSH
38013: LD_INT 82
38015: PUSH
38016: LD_INT 83
38018: PUSH
38019: LD_INT 84
38021: PUSH
38022: LD_INT 85
38024: PUSH
38025: LD_INT 87
38027: PUSH
38028: LD_INT 70
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 11
38036: PUSH
38037: LD_INT 3
38039: PUSH
38040: LD_INT 4
38042: PUSH
38043: LD_INT 5
38045: PUSH
38046: LD_INT 6
38048: PUSH
38049: LD_INT 15
38051: PUSH
38052: LD_INT 18
38054: PUSH
38055: LD_INT 7
38057: PUSH
38058: LD_INT 17
38060: PUSH
38061: LD_INT 8
38063: PUSH
38064: LD_INT 20
38066: PUSH
38067: LD_INT 21
38069: PUSH
38070: LD_INT 22
38072: PUSH
38073: LD_INT 72
38075: PUSH
38076: LD_INT 26
38078: PUSH
38079: LD_INT 69
38081: PUSH
38082: LD_INT 39
38084: PUSH
38085: LD_INT 40
38087: PUSH
38088: LD_INT 41
38090: PUSH
38091: LD_INT 42
38093: PUSH
38094: LD_INT 43
38096: PUSH
38097: LD_INT 48
38099: PUSH
38100: LD_INT 49
38102: PUSH
38103: LD_INT 50
38105: PUSH
38106: LD_INT 51
38108: PUSH
38109: LD_INT 52
38111: PUSH
38112: LD_INT 53
38114: PUSH
38115: LD_INT 54
38117: PUSH
38118: LD_INT 55
38120: PUSH
38121: LD_INT 56
38123: PUSH
38124: LD_INT 60
38126: PUSH
38127: LD_INT 61
38129: PUSH
38130: LD_INT 62
38132: PUSH
38133: LD_INT 66
38135: PUSH
38136: LD_INT 67
38138: PUSH
38139: LD_INT 68
38141: PUSH
38142: LD_INT 81
38144: PUSH
38145: LD_INT 82
38147: PUSH
38148: LD_INT 83
38150: PUSH
38151: LD_INT 84
38153: PUSH
38154: LD_INT 85
38156: PUSH
38157: LD_INT 87
38159: PUSH
38160: LD_INT 88
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
38219: GO 38452
38221: LD_INT 3
38223: DOUBLE
38224: EQUAL
38225: IFTRUE 38229
38227: GO 38451
38229: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38230: LD_ADDR_VAR 0 4
38234: PUSH
38235: LD_INT 46
38237: PUSH
38238: LD_INT 47
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 82
38249: PUSH
38250: LD_INT 83
38252: PUSH
38253: LD_INT 84
38255: PUSH
38256: LD_INT 85
38258: PUSH
38259: LD_INT 86
38261: PUSH
38262: LD_INT 11
38264: PUSH
38265: LD_INT 9
38267: PUSH
38268: LD_INT 20
38270: PUSH
38271: LD_INT 19
38273: PUSH
38274: LD_INT 21
38276: PUSH
38277: LD_INT 24
38279: PUSH
38280: LD_INT 22
38282: PUSH
38283: LD_INT 25
38285: PUSH
38286: LD_INT 28
38288: PUSH
38289: LD_INT 29
38291: PUSH
38292: LD_INT 30
38294: PUSH
38295: LD_INT 31
38297: PUSH
38298: LD_INT 37
38300: PUSH
38301: LD_INT 38
38303: PUSH
38304: LD_INT 32
38306: PUSH
38307: LD_INT 27
38309: PUSH
38310: LD_INT 33
38312: PUSH
38313: LD_INT 69
38315: PUSH
38316: LD_INT 39
38318: PUSH
38319: LD_INT 34
38321: PUSH
38322: LD_INT 40
38324: PUSH
38325: LD_INT 71
38327: PUSH
38328: LD_INT 23
38330: PUSH
38331: LD_INT 44
38333: PUSH
38334: LD_INT 48
38336: PUSH
38337: LD_INT 49
38339: PUSH
38340: LD_INT 50
38342: PUSH
38343: LD_INT 51
38345: PUSH
38346: LD_INT 52
38348: PUSH
38349: LD_INT 53
38351: PUSH
38352: LD_INT 54
38354: PUSH
38355: LD_INT 55
38357: PUSH
38358: LD_INT 56
38360: PUSH
38361: LD_INT 57
38363: PUSH
38364: LD_INT 58
38366: PUSH
38367: LD_INT 59
38369: PUSH
38370: LD_INT 63
38372: PUSH
38373: LD_INT 64
38375: PUSH
38376: LD_INT 65
38378: PUSH
38379: LD_INT 82
38381: PUSH
38382: LD_INT 83
38384: PUSH
38385: LD_INT 84
38387: PUSH
38388: LD_INT 85
38390: PUSH
38391: LD_INT 86
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: ST_TO_ADDR
38449: GO 38452
38451: POP
// if state > - 1 and state < 3 then
38452: LD_VAR 0 3
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: GREATER
38461: PUSH
38462: LD_VAR 0 3
38466: PUSH
38467: LD_INT 3
38469: LESS
38470: AND
38471: IFFALSE 38528
// for i in result do
38473: LD_ADDR_VAR 0 5
38477: PUSH
38478: LD_VAR 0 4
38482: PUSH
38483: FOR_IN
38484: IFFALSE 38526
// if GetTech ( i , side ) <> state then
38486: LD_VAR 0 5
38490: PPUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 321
38500: PUSH
38501: LD_VAR 0 3
38505: NONEQUAL
38506: IFFALSE 38524
// result := result diff i ;
38508: LD_ADDR_VAR 0 4
38512: PUSH
38513: LD_VAR 0 4
38517: PUSH
38518: LD_VAR 0 5
38522: DIFF
38523: ST_TO_ADDR
38524: GO 38483
38526: POP
38527: POP
// end ;
38528: LD_VAR 0 4
38532: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38533: LD_INT 0
38535: PPUSH
38536: PPUSH
38537: PPUSH
// result := true ;
38538: LD_ADDR_VAR 0 3
38542: PUSH
38543: LD_INT 1
38545: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38546: LD_ADDR_VAR 0 5
38550: PUSH
38551: LD_VAR 0 2
38555: PPUSH
38556: CALL_OW 480
38560: ST_TO_ADDR
// if not tmp then
38561: LD_VAR 0 5
38565: NOT
38566: IFFALSE 38570
// exit ;
38568: GO 38619
// for i in tmp do
38570: LD_ADDR_VAR 0 4
38574: PUSH
38575: LD_VAR 0 5
38579: PUSH
38580: FOR_IN
38581: IFFALSE 38617
// if GetTech ( i , side ) <> state_researched then
38583: LD_VAR 0 4
38587: PPUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL_OW 321
38597: PUSH
38598: LD_INT 2
38600: NONEQUAL
38601: IFFALSE 38615
// begin result := false ;
38603: LD_ADDR_VAR 0 3
38607: PUSH
38608: LD_INT 0
38610: ST_TO_ADDR
// exit ;
38611: POP
38612: POP
38613: GO 38619
// end ;
38615: GO 38580
38617: POP
38618: POP
// end ;
38619: LD_VAR 0 3
38623: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38624: LD_INT 0
38626: PPUSH
38627: PPUSH
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
38632: PPUSH
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
38637: PPUSH
38638: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38639: LD_VAR 0 1
38643: NOT
38644: PUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 257
38654: PUSH
38655: LD_INT 9
38657: NONEQUAL
38658: OR
38659: IFFALSE 38663
// exit ;
38661: GO 39236
// side := GetSide ( unit ) ;
38663: LD_ADDR_VAR 0 9
38667: PUSH
38668: LD_VAR 0 1
38672: PPUSH
38673: CALL_OW 255
38677: ST_TO_ADDR
// tech_space := tech_spacanom ;
38678: LD_ADDR_VAR 0 12
38682: PUSH
38683: LD_INT 29
38685: ST_TO_ADDR
// tech_time := tech_taurad ;
38686: LD_ADDR_VAR 0 13
38690: PUSH
38691: LD_INT 28
38693: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38694: LD_ADDR_VAR 0 11
38698: PUSH
38699: LD_VAR 0 1
38703: PPUSH
38704: CALL_OW 310
38708: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38709: LD_VAR 0 11
38713: PPUSH
38714: CALL_OW 247
38718: PUSH
38719: LD_INT 2
38721: EQUAL
38722: IFFALSE 38726
// exit ;
38724: GO 39236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38726: LD_ADDR_VAR 0 8
38730: PUSH
38731: LD_INT 81
38733: PUSH
38734: LD_VAR 0 9
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: LD_INT 21
38748: PUSH
38749: LD_INT 3
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PPUSH
38764: CALL_OW 69
38768: ST_TO_ADDR
// if not tmp then
38769: LD_VAR 0 8
38773: NOT
38774: IFFALSE 38778
// exit ;
38776: GO 39236
// if in_unit then
38778: LD_VAR 0 11
38782: IFFALSE 38806
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38784: LD_ADDR_VAR 0 10
38788: PUSH
38789: LD_VAR 0 8
38793: PPUSH
38794: LD_VAR 0 11
38798: PPUSH
38799: CALL_OW 74
38803: ST_TO_ADDR
38804: GO 38826
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38806: LD_ADDR_VAR 0 10
38810: PUSH
38811: LD_VAR 0 8
38815: PPUSH
38816: LD_VAR 0 1
38820: PPUSH
38821: CALL_OW 74
38825: ST_TO_ADDR
// if not enemy then
38826: LD_VAR 0 10
38830: NOT
38831: IFFALSE 38835
// exit ;
38833: GO 39236
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38835: LD_VAR 0 11
38839: PUSH
38840: LD_VAR 0 11
38844: PPUSH
38845: LD_VAR 0 10
38849: PPUSH
38850: CALL_OW 296
38854: PUSH
38855: LD_INT 13
38857: GREATER
38858: AND
38859: PUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: LD_VAR 0 10
38869: PPUSH
38870: CALL_OW 296
38874: PUSH
38875: LD_INT 12
38877: GREATER
38878: OR
38879: IFFALSE 38883
// exit ;
38881: GO 39236
// missile := [ 1 ] ;
38883: LD_ADDR_VAR 0 14
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38894: LD_VAR 0 9
38898: PPUSH
38899: LD_VAR 0 12
38903: PPUSH
38904: CALL_OW 325
38908: IFFALSE 38937
// missile := Insert ( missile , missile + 1 , 2 ) ;
38910: LD_ADDR_VAR 0 14
38914: PUSH
38915: LD_VAR 0 14
38919: PPUSH
38920: LD_VAR 0 14
38924: PUSH
38925: LD_INT 1
38927: PLUS
38928: PPUSH
38929: LD_INT 2
38931: PPUSH
38932: CALL_OW 2
38936: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38937: LD_VAR 0 9
38941: PPUSH
38942: LD_VAR 0 13
38946: PPUSH
38947: CALL_OW 325
38951: PUSH
38952: LD_VAR 0 10
38956: PPUSH
38957: CALL_OW 255
38961: PPUSH
38962: LD_VAR 0 13
38966: PPUSH
38967: CALL_OW 325
38971: NOT
38972: AND
38973: IFFALSE 39002
// missile := Insert ( missile , missile + 1 , 3 ) ;
38975: LD_ADDR_VAR 0 14
38979: PUSH
38980: LD_VAR 0 14
38984: PPUSH
38985: LD_VAR 0 14
38989: PUSH
38990: LD_INT 1
38992: PLUS
38993: PPUSH
38994: LD_INT 3
38996: PPUSH
38997: CALL_OW 2
39001: ST_TO_ADDR
// if missile < 2 then
39002: LD_VAR 0 14
39006: PUSH
39007: LD_INT 2
39009: LESS
39010: IFFALSE 39014
// exit ;
39012: GO 39236
// x := GetX ( enemy ) ;
39014: LD_ADDR_VAR 0 4
39018: PUSH
39019: LD_VAR 0 10
39023: PPUSH
39024: CALL_OW 250
39028: ST_TO_ADDR
// y := GetY ( enemy ) ;
39029: LD_ADDR_VAR 0 5
39033: PUSH
39034: LD_VAR 0 10
39038: PPUSH
39039: CALL_OW 251
39043: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39044: LD_ADDR_VAR 0 6
39048: PUSH
39049: LD_VAR 0 4
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PPUSH
39058: LD_INT 1
39060: PPUSH
39061: CALL_OW 12
39065: PLUS
39066: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39067: LD_ADDR_VAR 0 7
39071: PUSH
39072: LD_VAR 0 5
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PPUSH
39081: LD_INT 1
39083: PPUSH
39084: CALL_OW 12
39088: PLUS
39089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39090: LD_VAR 0 6
39094: PPUSH
39095: LD_VAR 0 7
39099: PPUSH
39100: CALL_OW 488
39104: NOT
39105: IFFALSE 39127
// begin _x := x ;
39107: LD_ADDR_VAR 0 6
39111: PUSH
39112: LD_VAR 0 4
39116: ST_TO_ADDR
// _y := y ;
39117: LD_ADDR_VAR 0 7
39121: PUSH
39122: LD_VAR 0 5
39126: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39127: LD_ADDR_VAR 0 3
39131: PUSH
39132: LD_INT 1
39134: PPUSH
39135: LD_VAR 0 14
39139: PPUSH
39140: CALL_OW 12
39144: ST_TO_ADDR
// case i of 1 :
39145: LD_VAR 0 3
39149: PUSH
39150: LD_INT 1
39152: DOUBLE
39153: EQUAL
39154: IFTRUE 39158
39156: GO 39175
39158: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39159: LD_VAR 0 1
39163: PPUSH
39164: LD_VAR 0 10
39168: PPUSH
39169: CALL_OW 115
39173: GO 39236
39175: LD_INT 2
39177: DOUBLE
39178: EQUAL
39179: IFTRUE 39183
39181: GO 39205
39183: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39184: LD_VAR 0 1
39188: PPUSH
39189: LD_VAR 0 6
39193: PPUSH
39194: LD_VAR 0 7
39198: PPUSH
39199: CALL_OW 153
39203: GO 39236
39205: LD_INT 3
39207: DOUBLE
39208: EQUAL
39209: IFTRUE 39213
39211: GO 39235
39213: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39214: LD_VAR 0 1
39218: PPUSH
39219: LD_VAR 0 6
39223: PPUSH
39224: LD_VAR 0 7
39228: PPUSH
39229: CALL_OW 154
39233: GO 39236
39235: POP
// end ;
39236: LD_VAR 0 2
39240: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39241: LD_INT 0
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
39248: PPUSH
// if not unit or not building then
39249: LD_VAR 0 1
39253: NOT
39254: PUSH
39255: LD_VAR 0 2
39259: NOT
39260: OR
39261: IFFALSE 39265
// exit ;
39263: GO 39423
// x := GetX ( building ) ;
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: LD_VAR 0 2
39274: PPUSH
39275: CALL_OW 250
39279: ST_TO_ADDR
// y := GetY ( building ) ;
39280: LD_ADDR_VAR 0 6
39284: PUSH
39285: LD_VAR 0 2
39289: PPUSH
39290: CALL_OW 251
39294: ST_TO_ADDR
// for i = 0 to 5 do
39295: LD_ADDR_VAR 0 4
39299: PUSH
39300: DOUBLE
39301: LD_INT 0
39303: DEC
39304: ST_TO_ADDR
39305: LD_INT 5
39307: PUSH
39308: FOR_TO
39309: IFFALSE 39421
// begin _x := ShiftX ( x , i , 3 ) ;
39311: LD_ADDR_VAR 0 7
39315: PUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: LD_VAR 0 4
39325: PPUSH
39326: LD_INT 3
39328: PPUSH
39329: CALL_OW 272
39333: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39334: LD_ADDR_VAR 0 8
39338: PUSH
39339: LD_VAR 0 6
39343: PPUSH
39344: LD_VAR 0 4
39348: PPUSH
39349: LD_INT 3
39351: PPUSH
39352: CALL_OW 273
39356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39357: LD_VAR 0 7
39361: PPUSH
39362: LD_VAR 0 8
39366: PPUSH
39367: CALL_OW 488
39371: NOT
39372: IFFALSE 39376
// continue ;
39374: GO 39308
// if HexInfo ( _x , _y ) = 0 then
39376: LD_VAR 0 7
39380: PPUSH
39381: LD_VAR 0 8
39385: PPUSH
39386: CALL_OW 428
39390: PUSH
39391: LD_INT 0
39393: EQUAL
39394: IFFALSE 39419
// begin ComMoveXY ( unit , _x , _y ) ;
39396: LD_VAR 0 1
39400: PPUSH
39401: LD_VAR 0 7
39405: PPUSH
39406: LD_VAR 0 8
39410: PPUSH
39411: CALL_OW 111
// exit ;
39415: POP
39416: POP
39417: GO 39423
// end ; end ;
39419: GO 39308
39421: POP
39422: POP
// end ;
39423: LD_VAR 0 3
39427: RET
// export function ScanBase ( side , base_area ) ; begin
39428: LD_INT 0
39430: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39431: LD_ADDR_VAR 0 3
39435: PUSH
39436: LD_VAR 0 2
39440: PPUSH
39441: LD_INT 81
39443: PUSH
39444: LD_VAR 0 1
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PPUSH
39453: CALL_OW 70
39457: ST_TO_ADDR
// end ;
39458: LD_VAR 0 3
39462: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39463: LD_INT 0
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
// result := false ;
39469: LD_ADDR_VAR 0 2
39473: PUSH
39474: LD_INT 0
39476: ST_TO_ADDR
// side := GetSide ( unit ) ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: CALL_OW 255
39491: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39492: LD_ADDR_VAR 0 4
39496: PUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 248
39506: ST_TO_ADDR
// case nat of 1 :
39507: LD_VAR 0 4
39511: PUSH
39512: LD_INT 1
39514: DOUBLE
39515: EQUAL
39516: IFTRUE 39520
39518: GO 39531
39520: POP
// tech := tech_lassight ; 2 :
39521: LD_ADDR_VAR 0 5
39525: PUSH
39526: LD_INT 12
39528: ST_TO_ADDR
39529: GO 39570
39531: LD_INT 2
39533: DOUBLE
39534: EQUAL
39535: IFTRUE 39539
39537: GO 39550
39539: POP
// tech := tech_mortar ; 3 :
39540: LD_ADDR_VAR 0 5
39544: PUSH
39545: LD_INT 41
39547: ST_TO_ADDR
39548: GO 39570
39550: LD_INT 3
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39569
39558: POP
// tech := tech_bazooka ; end ;
39559: LD_ADDR_VAR 0 5
39563: PUSH
39564: LD_INT 44
39566: ST_TO_ADDR
39567: GO 39570
39569: POP
// if Researched ( side , tech ) then
39570: LD_VAR 0 3
39574: PPUSH
39575: LD_VAR 0 5
39579: PPUSH
39580: CALL_OW 325
39584: IFFALSE 39611
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39586: LD_ADDR_VAR 0 2
39590: PUSH
39591: LD_INT 5
39593: PUSH
39594: LD_INT 8
39596: PUSH
39597: LD_INT 9
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: PUSH
39605: LD_VAR 0 4
39609: ARRAY
39610: ST_TO_ADDR
// end ;
39611: LD_VAR 0 2
39615: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39616: LD_INT 0
39618: PPUSH
39619: PPUSH
39620: PPUSH
// if not mines then
39621: LD_VAR 0 2
39625: NOT
39626: IFFALSE 39630
// exit ;
39628: GO 39774
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39630: LD_ADDR_VAR 0 5
39634: PUSH
39635: LD_INT 81
39637: PUSH
39638: LD_VAR 0 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: PUSH
39650: LD_INT 21
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PPUSH
39668: CALL_OW 69
39672: ST_TO_ADDR
// for i in mines do
39673: LD_ADDR_VAR 0 4
39677: PUSH
39678: LD_VAR 0 2
39682: PUSH
39683: FOR_IN
39684: IFFALSE 39772
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39686: LD_VAR 0 4
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: PPUSH
39695: LD_VAR 0 4
39699: PUSH
39700: LD_INT 2
39702: ARRAY
39703: PPUSH
39704: CALL_OW 458
39708: NOT
39709: IFFALSE 39713
// continue ;
39711: GO 39683
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39713: LD_VAR 0 4
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PPUSH
39722: LD_VAR 0 4
39726: PUSH
39727: LD_INT 2
39729: ARRAY
39730: PPUSH
39731: CALL_OW 428
39735: PUSH
39736: LD_VAR 0 5
39740: IN
39741: IFFALSE 39770
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39743: LD_VAR 0 4
39747: PUSH
39748: LD_INT 1
39750: ARRAY
39751: PPUSH
39752: LD_VAR 0 4
39756: PUSH
39757: LD_INT 2
39759: ARRAY
39760: PPUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 456
// end ;
39770: GO 39683
39772: POP
39773: POP
// end ;
39774: LD_VAR 0 3
39778: RET
// export function Count ( array ) ; var i ; begin
39779: LD_INT 0
39781: PPUSH
39782: PPUSH
// result := 0 ;
39783: LD_ADDR_VAR 0 2
39787: PUSH
39788: LD_INT 0
39790: ST_TO_ADDR
// for i in array do
39791: LD_ADDR_VAR 0 3
39795: PUSH
39796: LD_VAR 0 1
39800: PUSH
39801: FOR_IN
39802: IFFALSE 39826
// if i then
39804: LD_VAR 0 3
39808: IFFALSE 39824
// result := result + 1 ;
39810: LD_ADDR_VAR 0 2
39814: PUSH
39815: LD_VAR 0 2
39819: PUSH
39820: LD_INT 1
39822: PLUS
39823: ST_TO_ADDR
39824: GO 39801
39826: POP
39827: POP
// end ;
39828: LD_VAR 0 2
39832: RET
// export function IsEmpty ( building ) ; begin
39833: LD_INT 0
39835: PPUSH
// if not building then
39836: LD_VAR 0 1
39840: NOT
39841: IFFALSE 39845
// exit ;
39843: GO 39888
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39845: LD_ADDR_VAR 0 2
39849: PUSH
39850: LD_VAR 0 1
39854: PUSH
39855: LD_INT 22
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 255
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 58
39874: PUSH
39875: EMPTY
39876: LIST
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PPUSH
39882: CALL_OW 69
39886: IN
39887: ST_TO_ADDR
// end ;
39888: LD_VAR 0 2
39892: RET
// export function IsNotFull ( building ) ; begin
39893: LD_INT 0
39895: PPUSH
// if not building then
39896: LD_VAR 0 1
39900: NOT
39901: IFFALSE 39905
// exit ;
39903: GO 39924
// result := UnitsInside ( building ) < 6 ;
39905: LD_ADDR_VAR 0 2
39909: PUSH
39910: LD_VAR 0 1
39914: PPUSH
39915: CALL_OW 313
39919: PUSH
39920: LD_INT 6
39922: LESS
39923: ST_TO_ADDR
// end ;
39924: LD_VAR 0 2
39928: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39929: LD_INT 0
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
// tmp := [ ] ;
39935: LD_ADDR_VAR 0 3
39939: PUSH
39940: EMPTY
39941: ST_TO_ADDR
// list := [ ] ;
39942: LD_ADDR_VAR 0 5
39946: PUSH
39947: EMPTY
39948: ST_TO_ADDR
// for i = 16 to 25 do
39949: LD_ADDR_VAR 0 4
39953: PUSH
39954: DOUBLE
39955: LD_INT 16
39957: DEC
39958: ST_TO_ADDR
39959: LD_INT 25
39961: PUSH
39962: FOR_TO
39963: IFFALSE 40036
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39965: LD_ADDR_VAR 0 3
39969: PUSH
39970: LD_VAR 0 3
39974: PUSH
39975: LD_INT 22
39977: PUSH
39978: LD_VAR 0 1
39982: PPUSH
39983: CALL_OW 255
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 91
39994: PUSH
39995: LD_VAR 0 1
39999: PUSH
40000: LD_INT 6
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 30
40010: PUSH
40011: LD_VAR 0 4
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: PPUSH
40028: CALL_OW 69
40032: ADD
40033: ST_TO_ADDR
40034: GO 39962
40036: POP
40037: POP
// for i = 1 to tmp do
40038: LD_ADDR_VAR 0 4
40042: PUSH
40043: DOUBLE
40044: LD_INT 1
40046: DEC
40047: ST_TO_ADDR
40048: LD_VAR 0 3
40052: PUSH
40053: FOR_TO
40054: IFFALSE 40142
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40056: LD_ADDR_VAR 0 5
40060: PUSH
40061: LD_VAR 0 5
40065: PUSH
40066: LD_VAR 0 3
40070: PUSH
40071: LD_VAR 0 4
40075: ARRAY
40076: PPUSH
40077: CALL_OW 266
40081: PUSH
40082: LD_VAR 0 3
40086: PUSH
40087: LD_VAR 0 4
40091: ARRAY
40092: PPUSH
40093: CALL_OW 250
40097: PUSH
40098: LD_VAR 0 3
40102: PUSH
40103: LD_VAR 0 4
40107: ARRAY
40108: PPUSH
40109: CALL_OW 251
40113: PUSH
40114: LD_VAR 0 3
40118: PUSH
40119: LD_VAR 0 4
40123: ARRAY
40124: PPUSH
40125: CALL_OW 254
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: ADD
40139: ST_TO_ADDR
40140: GO 40053
40142: POP
40143: POP
// result := list ;
40144: LD_ADDR_VAR 0 2
40148: PUSH
40149: LD_VAR 0 5
40153: ST_TO_ADDR
// end ;
40154: LD_VAR 0 2
40158: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40159: LD_INT 0
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
// if not factory then
40168: LD_VAR 0 1
40172: NOT
40173: IFFALSE 40177
// exit ;
40175: GO 40770
// if control = control_apeman then
40177: LD_VAR 0 4
40181: PUSH
40182: LD_INT 5
40184: EQUAL
40185: IFFALSE 40294
// begin tmp := UnitsInside ( factory ) ;
40187: LD_ADDR_VAR 0 8
40191: PUSH
40192: LD_VAR 0 1
40196: PPUSH
40197: CALL_OW 313
40201: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40202: LD_VAR 0 8
40206: PPUSH
40207: LD_INT 25
40209: PUSH
40210: LD_INT 12
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PPUSH
40217: CALL_OW 72
40221: NOT
40222: IFFALSE 40232
// control := control_manual ;
40224: LD_ADDR_VAR 0 4
40228: PUSH
40229: LD_INT 1
40231: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40232: LD_ADDR_VAR 0 8
40236: PUSH
40237: LD_VAR 0 1
40241: PPUSH
40242: CALL 39929 0 1
40246: ST_TO_ADDR
// if tmp then
40247: LD_VAR 0 8
40251: IFFALSE 40294
// begin for i in tmp do
40253: LD_ADDR_VAR 0 7
40257: PUSH
40258: LD_VAR 0 8
40262: PUSH
40263: FOR_IN
40264: IFFALSE 40292
// if i [ 1 ] = b_ext_radio then
40266: LD_VAR 0 7
40270: PUSH
40271: LD_INT 1
40273: ARRAY
40274: PUSH
40275: LD_INT 22
40277: EQUAL
40278: IFFALSE 40290
// begin control := control_remote ;
40280: LD_ADDR_VAR 0 4
40284: PUSH
40285: LD_INT 2
40287: ST_TO_ADDR
// break ;
40288: GO 40292
// end ;
40290: GO 40263
40292: POP
40293: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40294: LD_VAR 0 1
40298: PPUSH
40299: LD_VAR 0 2
40303: PPUSH
40304: LD_VAR 0 3
40308: PPUSH
40309: LD_VAR 0 4
40313: PPUSH
40314: LD_VAR 0 5
40318: PPUSH
40319: CALL_OW 448
40323: IFFALSE 40358
// begin result := [ chassis , engine , control , weapon ] ;
40325: LD_ADDR_VAR 0 6
40329: PUSH
40330: LD_VAR 0 2
40334: PUSH
40335: LD_VAR 0 3
40339: PUSH
40340: LD_VAR 0 4
40344: PUSH
40345: LD_VAR 0 5
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: ST_TO_ADDR
// exit ;
40356: GO 40770
// end ; _chassis := AvailableChassisList ( factory ) ;
40358: LD_ADDR_VAR 0 9
40362: PUSH
40363: LD_VAR 0 1
40367: PPUSH
40368: CALL_OW 475
40372: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40373: LD_ADDR_VAR 0 11
40377: PUSH
40378: LD_VAR 0 1
40382: PPUSH
40383: CALL_OW 476
40387: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40388: LD_ADDR_VAR 0 12
40392: PUSH
40393: LD_VAR 0 1
40397: PPUSH
40398: CALL_OW 477
40402: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40403: LD_ADDR_VAR 0 10
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 478
40417: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40418: LD_VAR 0 9
40422: NOT
40423: PUSH
40424: LD_VAR 0 11
40428: NOT
40429: OR
40430: PUSH
40431: LD_VAR 0 12
40435: NOT
40436: OR
40437: PUSH
40438: LD_VAR 0 10
40442: NOT
40443: OR
40444: IFFALSE 40479
// begin result := [ chassis , engine , control , weapon ] ;
40446: LD_ADDR_VAR 0 6
40450: PUSH
40451: LD_VAR 0 2
40455: PUSH
40456: LD_VAR 0 3
40460: PUSH
40461: LD_VAR 0 4
40465: PUSH
40466: LD_VAR 0 5
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// exit ;
40477: GO 40770
// end ; if not chassis in _chassis then
40479: LD_VAR 0 2
40483: PUSH
40484: LD_VAR 0 9
40488: IN
40489: NOT
40490: IFFALSE 40516
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40492: LD_ADDR_VAR 0 2
40496: PUSH
40497: LD_VAR 0 9
40501: PUSH
40502: LD_INT 1
40504: PPUSH
40505: LD_VAR 0 9
40509: PPUSH
40510: CALL_OW 12
40514: ARRAY
40515: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40516: LD_VAR 0 2
40520: PPUSH
40521: LD_VAR 0 3
40525: PPUSH
40526: CALL 40775 0 2
40530: NOT
40531: IFFALSE 40590
// repeat engine := _engine [ 1 ] ;
40533: LD_ADDR_VAR 0 3
40537: PUSH
40538: LD_VAR 0 11
40542: PUSH
40543: LD_INT 1
40545: ARRAY
40546: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40547: LD_ADDR_VAR 0 11
40551: PUSH
40552: LD_VAR 0 11
40556: PPUSH
40557: LD_INT 1
40559: PPUSH
40560: CALL_OW 3
40564: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40565: LD_VAR 0 2
40569: PPUSH
40570: LD_VAR 0 3
40574: PPUSH
40575: CALL 40775 0 2
40579: PUSH
40580: LD_VAR 0 11
40584: PUSH
40585: EMPTY
40586: EQUAL
40587: OR
40588: IFFALSE 40533
// if not control in _control then
40590: LD_VAR 0 4
40594: PUSH
40595: LD_VAR 0 12
40599: IN
40600: NOT
40601: IFFALSE 40627
// control := _control [ rand ( 1 , _control ) ] ;
40603: LD_ADDR_VAR 0 4
40607: PUSH
40608: LD_VAR 0 12
40612: PUSH
40613: LD_INT 1
40615: PPUSH
40616: LD_VAR 0 12
40620: PPUSH
40621: CALL_OW 12
40625: ARRAY
40626: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40627: LD_VAR 0 2
40631: PPUSH
40632: LD_VAR 0 5
40636: PPUSH
40637: CALL 40995 0 2
40641: NOT
40642: IFFALSE 40701
// repeat weapon := _weapon [ 1 ] ;
40644: LD_ADDR_VAR 0 5
40648: PUSH
40649: LD_VAR 0 10
40653: PUSH
40654: LD_INT 1
40656: ARRAY
40657: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40658: LD_ADDR_VAR 0 10
40662: PUSH
40663: LD_VAR 0 10
40667: PPUSH
40668: LD_INT 1
40670: PPUSH
40671: CALL_OW 3
40675: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40676: LD_VAR 0 2
40680: PPUSH
40681: LD_VAR 0 5
40685: PPUSH
40686: CALL 40995 0 2
40690: PUSH
40691: LD_VAR 0 10
40695: PUSH
40696: EMPTY
40697: EQUAL
40698: OR
40699: IFFALSE 40644
// result := [ ] ;
40701: LD_ADDR_VAR 0 6
40705: PUSH
40706: EMPTY
40707: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40708: LD_VAR 0 1
40712: PPUSH
40713: LD_VAR 0 2
40717: PPUSH
40718: LD_VAR 0 3
40722: PPUSH
40723: LD_VAR 0 4
40727: PPUSH
40728: LD_VAR 0 5
40732: PPUSH
40733: CALL_OW 448
40737: IFFALSE 40770
// result := [ chassis , engine , control , weapon ] ;
40739: LD_ADDR_VAR 0 6
40743: PUSH
40744: LD_VAR 0 2
40748: PUSH
40749: LD_VAR 0 3
40753: PUSH
40754: LD_VAR 0 4
40758: PUSH
40759: LD_VAR 0 5
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// end ;
40770: LD_VAR 0 6
40774: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40775: LD_INT 0
40777: PPUSH
// if not chassis or not engine then
40778: LD_VAR 0 1
40782: NOT
40783: PUSH
40784: LD_VAR 0 2
40788: NOT
40789: OR
40790: IFFALSE 40794
// exit ;
40792: GO 40990
// case engine of engine_solar :
40794: LD_VAR 0 2
40798: PUSH
40799: LD_INT 2
40801: DOUBLE
40802: EQUAL
40803: IFTRUE 40807
40805: GO 40845
40807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40808: LD_ADDR_VAR 0 3
40812: PUSH
40813: LD_INT 11
40815: PUSH
40816: LD_INT 12
40818: PUSH
40819: LD_INT 13
40821: PUSH
40822: LD_INT 14
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 3
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
40843: GO 40974
40845: LD_INT 1
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40853
40851: GO 40915
40853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40854: LD_ADDR_VAR 0 3
40858: PUSH
40859: LD_INT 11
40861: PUSH
40862: LD_INT 12
40864: PUSH
40865: LD_INT 13
40867: PUSH
40868: LD_INT 14
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: LD_INT 3
40879: PUSH
40880: LD_INT 4
40882: PUSH
40883: LD_INT 5
40885: PUSH
40886: LD_INT 21
40888: PUSH
40889: LD_INT 23
40891: PUSH
40892: LD_INT 22
40894: PUSH
40895: LD_INT 24
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: ST_TO_ADDR
40913: GO 40974
40915: LD_INT 3
40917: DOUBLE
40918: EQUAL
40919: IFTRUE 40923
40921: GO 40973
40923: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40924: LD_ADDR_VAR 0 3
40928: PUSH
40929: LD_INT 13
40931: PUSH
40932: LD_INT 14
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: LD_INT 3
40940: PUSH
40941: LD_INT 4
40943: PUSH
40944: LD_INT 5
40946: PUSH
40947: LD_INT 21
40949: PUSH
40950: LD_INT 22
40952: PUSH
40953: LD_INT 23
40955: PUSH
40956: LD_INT 24
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: ST_TO_ADDR
40971: GO 40974
40973: POP
// result := ( chassis in result ) ;
40974: LD_ADDR_VAR 0 3
40978: PUSH
40979: LD_VAR 0 1
40983: PUSH
40984: LD_VAR 0 3
40988: IN
40989: ST_TO_ADDR
// end ;
40990: LD_VAR 0 3
40994: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40995: LD_INT 0
40997: PPUSH
// if not chassis or not weapon then
40998: LD_VAR 0 1
41002: NOT
41003: PUSH
41004: LD_VAR 0 2
41008: NOT
41009: OR
41010: IFFALSE 41014
// exit ;
41012: GO 42076
// case weapon of us_machine_gun :
41014: LD_VAR 0 2
41018: PUSH
41019: LD_INT 2
41021: DOUBLE
41022: EQUAL
41023: IFTRUE 41027
41025: GO 41057
41027: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: LD_INT 4
41044: PUSH
41045: LD_INT 5
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: ST_TO_ADDR
41055: GO 42060
41057: LD_INT 3
41059: DOUBLE
41060: EQUAL
41061: IFTRUE 41065
41063: GO 41095
41065: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41066: LD_ADDR_VAR 0 3
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: LD_INT 4
41082: PUSH
41083: LD_INT 5
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: ST_TO_ADDR
41093: GO 42060
41095: LD_INT 11
41097: DOUBLE
41098: EQUAL
41099: IFTRUE 41103
41101: GO 41133
41103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 3
41117: PUSH
41118: LD_INT 4
41120: PUSH
41121: LD_INT 5
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
41131: GO 42060
41133: LD_INT 4
41135: DOUBLE
41136: EQUAL
41137: IFTRUE 41141
41139: GO 41167
41141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41142: LD_ADDR_VAR 0 3
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: LD_INT 4
41155: PUSH
41156: LD_INT 5
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: ST_TO_ADDR
41165: GO 42060
41167: LD_INT 5
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41201
41175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41176: LD_ADDR_VAR 0 3
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: LD_INT 3
41186: PUSH
41187: LD_INT 4
41189: PUSH
41190: LD_INT 5
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: ST_TO_ADDR
41199: GO 42060
41201: LD_INT 9
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41235
41209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 3
41220: PUSH
41221: LD_INT 4
41223: PUSH
41224: LD_INT 5
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: ST_TO_ADDR
41233: GO 42060
41235: LD_INT 7
41237: DOUBLE
41238: EQUAL
41239: IFTRUE 41243
41241: GO 41269
41243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41244: LD_ADDR_VAR 0 3
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 3
41254: PUSH
41255: LD_INT 4
41257: PUSH
41258: LD_INT 5
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: ST_TO_ADDR
41267: GO 42060
41269: LD_INT 12
41271: DOUBLE
41272: EQUAL
41273: IFTRUE 41277
41275: GO 41303
41277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41278: LD_ADDR_VAR 0 3
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: LD_INT 3
41288: PUSH
41289: LD_INT 4
41291: PUSH
41292: LD_INT 5
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: ST_TO_ADDR
41301: GO 42060
41303: LD_INT 13
41305: DOUBLE
41306: EQUAL
41307: IFTRUE 41311
41309: GO 41337
41311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41312: LD_ADDR_VAR 0 3
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 4
41325: PUSH
41326: LD_INT 5
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
41335: GO 42060
41337: LD_INT 14
41339: DOUBLE
41340: EQUAL
41341: IFTRUE 41345
41343: GO 41363
41345: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41346: LD_ADDR_VAR 0 3
41350: PUSH
41351: LD_INT 4
41353: PUSH
41354: LD_INT 5
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: ST_TO_ADDR
41361: GO 42060
41363: LD_INT 6
41365: DOUBLE
41366: EQUAL
41367: IFTRUE 41371
41369: GO 41389
41371: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41372: LD_ADDR_VAR 0 3
41376: PUSH
41377: LD_INT 4
41379: PUSH
41380: LD_INT 5
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: ST_TO_ADDR
41387: GO 42060
41389: LD_INT 10
41391: DOUBLE
41392: EQUAL
41393: IFTRUE 41397
41395: GO 41415
41397: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41398: LD_ADDR_VAR 0 3
41402: PUSH
41403: LD_INT 4
41405: PUSH
41406: LD_INT 5
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: ST_TO_ADDR
41413: GO 42060
41415: LD_INT 22
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41423
41421: GO 41449
41423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41424: LD_ADDR_VAR 0 3
41428: PUSH
41429: LD_INT 11
41431: PUSH
41432: LD_INT 12
41434: PUSH
41435: LD_INT 13
41437: PUSH
41438: LD_INT 14
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: ST_TO_ADDR
41447: GO 42060
41449: LD_INT 23
41451: DOUBLE
41452: EQUAL
41453: IFTRUE 41457
41455: GO 41483
41457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41458: LD_ADDR_VAR 0 3
41462: PUSH
41463: LD_INT 11
41465: PUSH
41466: LD_INT 12
41468: PUSH
41469: LD_INT 13
41471: PUSH
41472: LD_INT 14
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: ST_TO_ADDR
41481: GO 42060
41483: LD_INT 24
41485: DOUBLE
41486: EQUAL
41487: IFTRUE 41491
41489: GO 41517
41491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: LD_INT 11
41499: PUSH
41500: LD_INT 12
41502: PUSH
41503: LD_INT 13
41505: PUSH
41506: LD_INT 14
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: ST_TO_ADDR
41515: GO 42060
41517: LD_INT 30
41519: DOUBLE
41520: EQUAL
41521: IFTRUE 41525
41523: GO 41551
41525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_INT 11
41533: PUSH
41534: LD_INT 12
41536: PUSH
41537: LD_INT 13
41539: PUSH
41540: LD_INT 14
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: ST_TO_ADDR
41549: GO 42060
41551: LD_INT 25
41553: DOUBLE
41554: EQUAL
41555: IFTRUE 41559
41557: GO 41577
41559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_INT 13
41567: PUSH
41568: LD_INT 14
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: ST_TO_ADDR
41575: GO 42060
41577: LD_INT 27
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41585
41583: GO 41603
41585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41586: LD_ADDR_VAR 0 3
41590: PUSH
41591: LD_INT 13
41593: PUSH
41594: LD_INT 14
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: ST_TO_ADDR
41601: GO 42060
41603: LD_EXP 55
41607: DOUBLE
41608: EQUAL
41609: IFTRUE 41613
41611: GO 41639
41613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41614: LD_ADDR_VAR 0 3
41618: PUSH
41619: LD_INT 11
41621: PUSH
41622: LD_INT 12
41624: PUSH
41625: LD_INT 13
41627: PUSH
41628: LD_INT 14
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: ST_TO_ADDR
41637: GO 42060
41639: LD_INT 28
41641: DOUBLE
41642: EQUAL
41643: IFTRUE 41647
41645: GO 41665
41647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: LD_INT 13
41655: PUSH
41656: LD_INT 14
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: ST_TO_ADDR
41663: GO 42060
41665: LD_INT 29
41667: DOUBLE
41668: EQUAL
41669: IFTRUE 41673
41671: GO 41691
41673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41674: LD_ADDR_VAR 0 3
41678: PUSH
41679: LD_INT 13
41681: PUSH
41682: LD_INT 14
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: ST_TO_ADDR
41689: GO 42060
41691: LD_INT 31
41693: DOUBLE
41694: EQUAL
41695: IFTRUE 41699
41697: GO 41717
41699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41700: LD_ADDR_VAR 0 3
41704: PUSH
41705: LD_INT 13
41707: PUSH
41708: LD_INT 14
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: ST_TO_ADDR
41715: GO 42060
41717: LD_INT 26
41719: DOUBLE
41720: EQUAL
41721: IFTRUE 41725
41723: GO 41743
41725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41726: LD_ADDR_VAR 0 3
41730: PUSH
41731: LD_INT 13
41733: PUSH
41734: LD_INT 14
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: ST_TO_ADDR
41741: GO 42060
41743: LD_INT 42
41745: DOUBLE
41746: EQUAL
41747: IFTRUE 41751
41749: GO 41777
41751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41752: LD_ADDR_VAR 0 3
41756: PUSH
41757: LD_INT 21
41759: PUSH
41760: LD_INT 22
41762: PUSH
41763: LD_INT 23
41765: PUSH
41766: LD_INT 24
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: ST_TO_ADDR
41775: GO 42060
41777: LD_INT 43
41779: DOUBLE
41780: EQUAL
41781: IFTRUE 41785
41783: GO 41811
41785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41786: LD_ADDR_VAR 0 3
41790: PUSH
41791: LD_INT 21
41793: PUSH
41794: LD_INT 22
41796: PUSH
41797: LD_INT 23
41799: PUSH
41800: LD_INT 24
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: ST_TO_ADDR
41809: GO 42060
41811: LD_INT 44
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 41845
41819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41820: LD_ADDR_VAR 0 3
41824: PUSH
41825: LD_INT 21
41827: PUSH
41828: LD_INT 22
41830: PUSH
41831: LD_INT 23
41833: PUSH
41834: LD_INT 24
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: ST_TO_ADDR
41843: GO 42060
41845: LD_INT 45
41847: DOUBLE
41848: EQUAL
41849: IFTRUE 41853
41851: GO 41879
41853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41854: LD_ADDR_VAR 0 3
41858: PUSH
41859: LD_INT 21
41861: PUSH
41862: LD_INT 22
41864: PUSH
41865: LD_INT 23
41867: PUSH
41868: LD_INT 24
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
41877: GO 42060
41879: LD_INT 49
41881: DOUBLE
41882: EQUAL
41883: IFTRUE 41887
41885: GO 41913
41887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41888: LD_ADDR_VAR 0 3
41892: PUSH
41893: LD_INT 21
41895: PUSH
41896: LD_INT 22
41898: PUSH
41899: LD_INT 23
41901: PUSH
41902: LD_INT 24
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: ST_TO_ADDR
41911: GO 42060
41913: LD_INT 51
41915: DOUBLE
41916: EQUAL
41917: IFTRUE 41921
41919: GO 41947
41921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41922: LD_ADDR_VAR 0 3
41926: PUSH
41927: LD_INT 21
41929: PUSH
41930: LD_INT 22
41932: PUSH
41933: LD_INT 23
41935: PUSH
41936: LD_INT 24
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: ST_TO_ADDR
41945: GO 42060
41947: LD_INT 52
41949: DOUBLE
41950: EQUAL
41951: IFTRUE 41955
41953: GO 41981
41955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41956: LD_ADDR_VAR 0 3
41960: PUSH
41961: LD_INT 21
41963: PUSH
41964: LD_INT 22
41966: PUSH
41967: LD_INT 23
41969: PUSH
41970: LD_INT 24
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
41979: GO 42060
41981: LD_INT 53
41983: DOUBLE
41984: EQUAL
41985: IFTRUE 41989
41987: GO 42007
41989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: LD_INT 23
41997: PUSH
41998: LD_INT 24
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: ST_TO_ADDR
42005: GO 42060
42007: LD_INT 46
42009: DOUBLE
42010: EQUAL
42011: IFTRUE 42015
42013: GO 42033
42015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42016: LD_ADDR_VAR 0 3
42020: PUSH
42021: LD_INT 23
42023: PUSH
42024: LD_INT 24
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: ST_TO_ADDR
42031: GO 42060
42033: LD_INT 47
42035: DOUBLE
42036: EQUAL
42037: IFTRUE 42041
42039: GO 42059
42041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42042: LD_ADDR_VAR 0 3
42046: PUSH
42047: LD_INT 23
42049: PUSH
42050: LD_INT 24
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: ST_TO_ADDR
42057: GO 42060
42059: POP
// result := ( chassis in result ) ;
42060: LD_ADDR_VAR 0 3
42064: PUSH
42065: LD_VAR 0 1
42069: PUSH
42070: LD_VAR 0 3
42074: IN
42075: ST_TO_ADDR
// end ;
42076: LD_VAR 0 3
42080: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42081: LD_INT 0
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
// result := array ;
42090: LD_ADDR_VAR 0 5
42094: PUSH
42095: LD_VAR 0 1
42099: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42100: LD_VAR 0 1
42104: NOT
42105: PUSH
42106: LD_VAR 0 2
42110: NOT
42111: OR
42112: PUSH
42113: LD_VAR 0 3
42117: NOT
42118: OR
42119: PUSH
42120: LD_VAR 0 2
42124: PUSH
42125: LD_VAR 0 1
42129: GREATER
42130: OR
42131: PUSH
42132: LD_VAR 0 3
42136: PUSH
42137: LD_VAR 0 1
42141: GREATER
42142: OR
42143: IFFALSE 42147
// exit ;
42145: GO 42443
// if direction then
42147: LD_VAR 0 4
42151: IFFALSE 42215
// begin d := 1 ;
42153: LD_ADDR_VAR 0 9
42157: PUSH
42158: LD_INT 1
42160: ST_TO_ADDR
// if i_from > i_to then
42161: LD_VAR 0 2
42165: PUSH
42166: LD_VAR 0 3
42170: GREATER
42171: IFFALSE 42197
// length := ( array - i_from ) + i_to else
42173: LD_ADDR_VAR 0 11
42177: PUSH
42178: LD_VAR 0 1
42182: PUSH
42183: LD_VAR 0 2
42187: MINUS
42188: PUSH
42189: LD_VAR 0 3
42193: PLUS
42194: ST_TO_ADDR
42195: GO 42213
// length := i_to - i_from ;
42197: LD_ADDR_VAR 0 11
42201: PUSH
42202: LD_VAR 0 3
42206: PUSH
42207: LD_VAR 0 2
42211: MINUS
42212: ST_TO_ADDR
// end else
42213: GO 42276
// begin d := - 1 ;
42215: LD_ADDR_VAR 0 9
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: ST_TO_ADDR
// if i_from > i_to then
42224: LD_VAR 0 2
42228: PUSH
42229: LD_VAR 0 3
42233: GREATER
42234: IFFALSE 42254
// length := i_from - i_to else
42236: LD_ADDR_VAR 0 11
42240: PUSH
42241: LD_VAR 0 2
42245: PUSH
42246: LD_VAR 0 3
42250: MINUS
42251: ST_TO_ADDR
42252: GO 42276
// length := ( array - i_to ) + i_from ;
42254: LD_ADDR_VAR 0 11
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: LD_VAR 0 3
42268: MINUS
42269: PUSH
42270: LD_VAR 0 2
42274: PLUS
42275: ST_TO_ADDR
// end ; if not length then
42276: LD_VAR 0 11
42280: NOT
42281: IFFALSE 42285
// exit ;
42283: GO 42443
// tmp := array ;
42285: LD_ADDR_VAR 0 10
42289: PUSH
42290: LD_VAR 0 1
42294: ST_TO_ADDR
// for i = 1 to length do
42295: LD_ADDR_VAR 0 6
42299: PUSH
42300: DOUBLE
42301: LD_INT 1
42303: DEC
42304: ST_TO_ADDR
42305: LD_VAR 0 11
42309: PUSH
42310: FOR_TO
42311: IFFALSE 42431
// begin for j = 1 to array do
42313: LD_ADDR_VAR 0 7
42317: PUSH
42318: DOUBLE
42319: LD_INT 1
42321: DEC
42322: ST_TO_ADDR
42323: LD_VAR 0 1
42327: PUSH
42328: FOR_TO
42329: IFFALSE 42417
// begin k := j + d ;
42331: LD_ADDR_VAR 0 8
42335: PUSH
42336: LD_VAR 0 7
42340: PUSH
42341: LD_VAR 0 9
42345: PLUS
42346: ST_TO_ADDR
// if k > array then
42347: LD_VAR 0 8
42351: PUSH
42352: LD_VAR 0 1
42356: GREATER
42357: IFFALSE 42367
// k := 1 ;
42359: LD_ADDR_VAR 0 8
42363: PUSH
42364: LD_INT 1
42366: ST_TO_ADDR
// if not k then
42367: LD_VAR 0 8
42371: NOT
42372: IFFALSE 42384
// k := array ;
42374: LD_ADDR_VAR 0 8
42378: PUSH
42379: LD_VAR 0 1
42383: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42384: LD_ADDR_VAR 0 10
42388: PUSH
42389: LD_VAR 0 10
42393: PPUSH
42394: LD_VAR 0 8
42398: PPUSH
42399: LD_VAR 0 1
42403: PUSH
42404: LD_VAR 0 7
42408: ARRAY
42409: PPUSH
42410: CALL_OW 1
42414: ST_TO_ADDR
// end ;
42415: GO 42328
42417: POP
42418: POP
// array := tmp ;
42419: LD_ADDR_VAR 0 1
42423: PUSH
42424: LD_VAR 0 10
42428: ST_TO_ADDR
// end ;
42429: GO 42310
42431: POP
42432: POP
// result := array ;
42433: LD_ADDR_VAR 0 5
42437: PUSH
42438: LD_VAR 0 1
42442: ST_TO_ADDR
// end ;
42443: LD_VAR 0 5
42447: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42448: LD_INT 0
42450: PPUSH
42451: PPUSH
// result := 0 ;
42452: LD_ADDR_VAR 0 3
42456: PUSH
42457: LD_INT 0
42459: ST_TO_ADDR
// if not array or not value in array then
42460: LD_VAR 0 1
42464: NOT
42465: PUSH
42466: LD_VAR 0 2
42470: PUSH
42471: LD_VAR 0 1
42475: IN
42476: NOT
42477: OR
42478: IFFALSE 42482
// exit ;
42480: GO 42536
// for i = 1 to array do
42482: LD_ADDR_VAR 0 4
42486: PUSH
42487: DOUBLE
42488: LD_INT 1
42490: DEC
42491: ST_TO_ADDR
42492: LD_VAR 0 1
42496: PUSH
42497: FOR_TO
42498: IFFALSE 42534
// if value = array [ i ] then
42500: LD_VAR 0 2
42504: PUSH
42505: LD_VAR 0 1
42509: PUSH
42510: LD_VAR 0 4
42514: ARRAY
42515: EQUAL
42516: IFFALSE 42532
// begin result := i ;
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_VAR 0 4
42527: ST_TO_ADDR
// exit ;
42528: POP
42529: POP
42530: GO 42536
// end ;
42532: GO 42497
42534: POP
42535: POP
// end ;
42536: LD_VAR 0 3
42540: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42541: LD_INT 0
42543: PPUSH
// vc_chassis := chassis ;
42544: LD_ADDR_OWVAR 37
42548: PUSH
42549: LD_VAR 0 1
42553: ST_TO_ADDR
// vc_engine := engine ;
42554: LD_ADDR_OWVAR 39
42558: PUSH
42559: LD_VAR 0 2
42563: ST_TO_ADDR
// vc_control := control ;
42564: LD_ADDR_OWVAR 38
42568: PUSH
42569: LD_VAR 0 3
42573: ST_TO_ADDR
// vc_weapon := weapon ;
42574: LD_ADDR_OWVAR 40
42578: PUSH
42579: LD_VAR 0 4
42583: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42584: LD_ADDR_OWVAR 41
42588: PUSH
42589: LD_VAR 0 5
42593: ST_TO_ADDR
// end ;
42594: LD_VAR 0 6
42598: RET
// export function WantPlant ( unit ) ; var task ; begin
42599: LD_INT 0
42601: PPUSH
42602: PPUSH
// result := false ;
42603: LD_ADDR_VAR 0 2
42607: PUSH
42608: LD_INT 0
42610: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_VAR 0 1
42620: PPUSH
42621: CALL_OW 437
42625: ST_TO_ADDR
// if task then
42626: LD_VAR 0 3
42630: IFFALSE 42658
// if task [ 1 ] [ 1 ] = p then
42632: LD_VAR 0 3
42636: PUSH
42637: LD_INT 1
42639: ARRAY
42640: PUSH
42641: LD_INT 1
42643: ARRAY
42644: PUSH
42645: LD_STRING p
42647: EQUAL
42648: IFFALSE 42658
// result := true ;
42650: LD_ADDR_VAR 0 2
42654: PUSH
42655: LD_INT 1
42657: ST_TO_ADDR
// end ;
42658: LD_VAR 0 2
42662: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42663: LD_INT 0
42665: PPUSH
42666: PPUSH
42667: PPUSH
42668: PPUSH
// if pos < 1 then
42669: LD_VAR 0 2
42673: PUSH
42674: LD_INT 1
42676: LESS
42677: IFFALSE 42681
// exit ;
42679: GO 42984
// if pos = 1 then
42681: LD_VAR 0 2
42685: PUSH
42686: LD_INT 1
42688: EQUAL
42689: IFFALSE 42722
// result := Replace ( arr , pos [ 1 ] , value ) else
42691: LD_ADDR_VAR 0 4
42695: PUSH
42696: LD_VAR 0 1
42700: PPUSH
42701: LD_VAR 0 2
42705: PUSH
42706: LD_INT 1
42708: ARRAY
42709: PPUSH
42710: LD_VAR 0 3
42714: PPUSH
42715: CALL_OW 1
42719: ST_TO_ADDR
42720: GO 42984
// begin tmp := arr ;
42722: LD_ADDR_VAR 0 6
42726: PUSH
42727: LD_VAR 0 1
42731: ST_TO_ADDR
// s_arr := [ tmp ] ;
42732: LD_ADDR_VAR 0 7
42736: PUSH
42737: LD_VAR 0 6
42741: PUSH
42742: EMPTY
42743: LIST
42744: ST_TO_ADDR
// for i = 1 to pos - 1 do
42745: LD_ADDR_VAR 0 5
42749: PUSH
42750: DOUBLE
42751: LD_INT 1
42753: DEC
42754: ST_TO_ADDR
42755: LD_VAR 0 2
42759: PUSH
42760: LD_INT 1
42762: MINUS
42763: PUSH
42764: FOR_TO
42765: IFFALSE 42810
// begin tmp := tmp [ pos [ i ] ] ;
42767: LD_ADDR_VAR 0 6
42771: PUSH
42772: LD_VAR 0 6
42776: PUSH
42777: LD_VAR 0 2
42781: PUSH
42782: LD_VAR 0 5
42786: ARRAY
42787: ARRAY
42788: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42789: LD_ADDR_VAR 0 7
42793: PUSH
42794: LD_VAR 0 7
42798: PUSH
42799: LD_VAR 0 6
42803: PUSH
42804: EMPTY
42805: LIST
42806: ADD
42807: ST_TO_ADDR
// end ;
42808: GO 42764
42810: POP
42811: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42812: LD_ADDR_VAR 0 6
42816: PUSH
42817: LD_VAR 0 6
42821: PPUSH
42822: LD_VAR 0 2
42826: PUSH
42827: LD_VAR 0 2
42831: ARRAY
42832: PPUSH
42833: LD_VAR 0 3
42837: PPUSH
42838: CALL_OW 1
42842: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42843: LD_ADDR_VAR 0 7
42847: PUSH
42848: LD_VAR 0 7
42852: PPUSH
42853: LD_VAR 0 7
42857: PPUSH
42858: LD_VAR 0 6
42862: PPUSH
42863: CALL_OW 1
42867: ST_TO_ADDR
// for i = s_arr downto 2 do
42868: LD_ADDR_VAR 0 5
42872: PUSH
42873: DOUBLE
42874: LD_VAR 0 7
42878: INC
42879: ST_TO_ADDR
42880: LD_INT 2
42882: PUSH
42883: FOR_DOWNTO
42884: IFFALSE 42968
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42886: LD_ADDR_VAR 0 6
42890: PUSH
42891: LD_VAR 0 7
42895: PUSH
42896: LD_VAR 0 5
42900: PUSH
42901: LD_INT 1
42903: MINUS
42904: ARRAY
42905: PPUSH
42906: LD_VAR 0 2
42910: PUSH
42911: LD_VAR 0 5
42915: PUSH
42916: LD_INT 1
42918: MINUS
42919: ARRAY
42920: PPUSH
42921: LD_VAR 0 7
42925: PUSH
42926: LD_VAR 0 5
42930: ARRAY
42931: PPUSH
42932: CALL_OW 1
42936: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42937: LD_ADDR_VAR 0 7
42941: PUSH
42942: LD_VAR 0 7
42946: PPUSH
42947: LD_VAR 0 5
42951: PUSH
42952: LD_INT 1
42954: MINUS
42955: PPUSH
42956: LD_VAR 0 6
42960: PPUSH
42961: CALL_OW 1
42965: ST_TO_ADDR
// end ;
42966: GO 42883
42968: POP
42969: POP
// result := s_arr [ 1 ] ;
42970: LD_ADDR_VAR 0 4
42974: PUSH
42975: LD_VAR 0 7
42979: PUSH
42980: LD_INT 1
42982: ARRAY
42983: ST_TO_ADDR
// end ; end ;
42984: LD_VAR 0 4
42988: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42989: LD_INT 0
42991: PPUSH
42992: PPUSH
// if not list then
42993: LD_VAR 0 1
42997: NOT
42998: IFFALSE 43002
// exit ;
43000: GO 43093
// i := list [ pos1 ] ;
43002: LD_ADDR_VAR 0 5
43006: PUSH
43007: LD_VAR 0 1
43011: PUSH
43012: LD_VAR 0 2
43016: ARRAY
43017: ST_TO_ADDR
// if not i then
43018: LD_VAR 0 5
43022: NOT
43023: IFFALSE 43027
// exit ;
43025: GO 43093
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43027: LD_ADDR_VAR 0 1
43031: PUSH
43032: LD_VAR 0 1
43036: PPUSH
43037: LD_VAR 0 2
43041: PPUSH
43042: LD_VAR 0 1
43046: PUSH
43047: LD_VAR 0 3
43051: ARRAY
43052: PPUSH
43053: CALL_OW 1
43057: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43058: LD_ADDR_VAR 0 1
43062: PUSH
43063: LD_VAR 0 1
43067: PPUSH
43068: LD_VAR 0 3
43072: PPUSH
43073: LD_VAR 0 5
43077: PPUSH
43078: CALL_OW 1
43082: ST_TO_ADDR
// result := list ;
43083: LD_ADDR_VAR 0 4
43087: PUSH
43088: LD_VAR 0 1
43092: ST_TO_ADDR
// end ;
43093: LD_VAR 0 4
43097: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43098: LD_INT 0
43100: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43101: LD_ADDR_VAR 0 5
43105: PUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL_OW 250
43115: PPUSH
43116: LD_VAR 0 1
43120: PPUSH
43121: CALL_OW 251
43125: PPUSH
43126: LD_VAR 0 2
43130: PPUSH
43131: LD_VAR 0 3
43135: PPUSH
43136: LD_VAR 0 4
43140: PPUSH
43141: CALL 43151 0 5
43145: ST_TO_ADDR
// end ;
43146: LD_VAR 0 5
43150: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43151: LD_INT 0
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
// if not list then
43157: LD_VAR 0 3
43161: NOT
43162: IFFALSE 43166
// exit ;
43164: GO 43554
// result := [ ] ;
43166: LD_ADDR_VAR 0 6
43170: PUSH
43171: EMPTY
43172: ST_TO_ADDR
// for i in list do
43173: LD_ADDR_VAR 0 7
43177: PUSH
43178: LD_VAR 0 3
43182: PUSH
43183: FOR_IN
43184: IFFALSE 43386
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43186: LD_ADDR_VAR 0 9
43190: PUSH
43191: LD_VAR 0 7
43195: PPUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: LD_VAR 0 2
43205: PPUSH
43206: CALL_OW 297
43210: ST_TO_ADDR
// if not result then
43211: LD_VAR 0 6
43215: NOT
43216: IFFALSE 43242
// result := [ [ i , tmp ] ] else
43218: LD_ADDR_VAR 0 6
43222: PUSH
43223: LD_VAR 0 7
43227: PUSH
43228: LD_VAR 0 9
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: ST_TO_ADDR
43240: GO 43384
// begin if result [ result ] [ 2 ] < tmp then
43242: LD_VAR 0 6
43246: PUSH
43247: LD_VAR 0 6
43251: ARRAY
43252: PUSH
43253: LD_INT 2
43255: ARRAY
43256: PUSH
43257: LD_VAR 0 9
43261: LESS
43262: IFFALSE 43304
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43264: LD_ADDR_VAR 0 6
43268: PUSH
43269: LD_VAR 0 6
43273: PPUSH
43274: LD_VAR 0 6
43278: PUSH
43279: LD_INT 1
43281: PLUS
43282: PPUSH
43283: LD_VAR 0 7
43287: PUSH
43288: LD_VAR 0 9
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PPUSH
43297: CALL_OW 2
43301: ST_TO_ADDR
43302: GO 43384
// for j = 1 to result do
43304: LD_ADDR_VAR 0 8
43308: PUSH
43309: DOUBLE
43310: LD_INT 1
43312: DEC
43313: ST_TO_ADDR
43314: LD_VAR 0 6
43318: PUSH
43319: FOR_TO
43320: IFFALSE 43382
// begin if tmp < result [ j ] [ 2 ] then
43322: LD_VAR 0 9
43326: PUSH
43327: LD_VAR 0 6
43331: PUSH
43332: LD_VAR 0 8
43336: ARRAY
43337: PUSH
43338: LD_INT 2
43340: ARRAY
43341: LESS
43342: IFFALSE 43380
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43344: LD_ADDR_VAR 0 6
43348: PUSH
43349: LD_VAR 0 6
43353: PPUSH
43354: LD_VAR 0 8
43358: PPUSH
43359: LD_VAR 0 7
43363: PUSH
43364: LD_VAR 0 9
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PPUSH
43373: CALL_OW 2
43377: ST_TO_ADDR
// break ;
43378: GO 43382
// end ; end ;
43380: GO 43319
43382: POP
43383: POP
// end ; end ;
43384: GO 43183
43386: POP
43387: POP
// if result and not asc then
43388: LD_VAR 0 6
43392: PUSH
43393: LD_VAR 0 4
43397: NOT
43398: AND
43399: IFFALSE 43474
// begin tmp := result ;
43401: LD_ADDR_VAR 0 9
43405: PUSH
43406: LD_VAR 0 6
43410: ST_TO_ADDR
// for i = tmp downto 1 do
43411: LD_ADDR_VAR 0 7
43415: PUSH
43416: DOUBLE
43417: LD_VAR 0 9
43421: INC
43422: ST_TO_ADDR
43423: LD_INT 1
43425: PUSH
43426: FOR_DOWNTO
43427: IFFALSE 43472
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43429: LD_ADDR_VAR 0 6
43433: PUSH
43434: LD_VAR 0 6
43438: PPUSH
43439: LD_VAR 0 9
43443: PUSH
43444: LD_VAR 0 7
43448: MINUS
43449: PUSH
43450: LD_INT 1
43452: PLUS
43453: PPUSH
43454: LD_VAR 0 9
43458: PUSH
43459: LD_VAR 0 7
43463: ARRAY
43464: PPUSH
43465: CALL_OW 1
43469: ST_TO_ADDR
43470: GO 43426
43472: POP
43473: POP
// end ; tmp := [ ] ;
43474: LD_ADDR_VAR 0 9
43478: PUSH
43479: EMPTY
43480: ST_TO_ADDR
// if mode then
43481: LD_VAR 0 5
43485: IFFALSE 43554
// begin for i = 1 to result do
43487: LD_ADDR_VAR 0 7
43491: PUSH
43492: DOUBLE
43493: LD_INT 1
43495: DEC
43496: ST_TO_ADDR
43497: LD_VAR 0 6
43501: PUSH
43502: FOR_TO
43503: IFFALSE 43542
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43505: LD_ADDR_VAR 0 9
43509: PUSH
43510: LD_VAR 0 9
43514: PPUSH
43515: LD_VAR 0 7
43519: PPUSH
43520: LD_VAR 0 6
43524: PUSH
43525: LD_VAR 0 7
43529: ARRAY
43530: PUSH
43531: LD_INT 1
43533: ARRAY
43534: PPUSH
43535: CALL_OW 1
43539: ST_TO_ADDR
43540: GO 43502
43542: POP
43543: POP
// result := tmp ;
43544: LD_ADDR_VAR 0 6
43548: PUSH
43549: LD_VAR 0 9
43553: ST_TO_ADDR
// end ; end ;
43554: LD_VAR 0 6
43558: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43559: LD_INT 0
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
43565: PPUSH
43566: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43567: LD_ADDR_VAR 0 5
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: ST_TO_ADDR
// if not x or not y then
43589: LD_VAR 0 2
43593: NOT
43594: PUSH
43595: LD_VAR 0 3
43599: NOT
43600: OR
43601: IFFALSE 43605
// exit ;
43603: GO 45257
// if not range then
43605: LD_VAR 0 4
43609: NOT
43610: IFFALSE 43620
// range := 10 ;
43612: LD_ADDR_VAR 0 4
43616: PUSH
43617: LD_INT 10
43619: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43620: LD_ADDR_VAR 0 8
43624: PUSH
43625: LD_INT 81
43627: PUSH
43628: LD_VAR 0 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 92
43639: PUSH
43640: LD_VAR 0 2
43644: PUSH
43645: LD_VAR 0 3
43649: PUSH
43650: LD_VAR 0 4
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 21
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: PPUSH
43683: CALL_OW 69
43687: ST_TO_ADDR
// if not tmp then
43688: LD_VAR 0 8
43692: NOT
43693: IFFALSE 43697
// exit ;
43695: GO 45257
// for i in tmp do
43697: LD_ADDR_VAR 0 6
43701: PUSH
43702: LD_VAR 0 8
43706: PUSH
43707: FOR_IN
43708: IFFALSE 45232
// begin points := [ 0 , 0 , 0 ] ;
43710: LD_ADDR_VAR 0 9
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: ST_TO_ADDR
// bpoints := 1 ;
43729: LD_ADDR_VAR 0 10
43733: PUSH
43734: LD_INT 1
43736: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43737: LD_VAR 0 6
43741: PPUSH
43742: CALL_OW 247
43746: PUSH
43747: LD_INT 1
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43755
43753: GO 44333
43755: POP
// begin if GetClass ( i ) = 1 then
43756: LD_VAR 0 6
43760: PPUSH
43761: CALL_OW 257
43765: PUSH
43766: LD_INT 1
43768: EQUAL
43769: IFFALSE 43790
// points := [ 10 , 5 , 3 ] ;
43771: LD_ADDR_VAR 0 9
43775: PUSH
43776: LD_INT 10
43778: PUSH
43779: LD_INT 5
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43790: LD_VAR 0 6
43794: PPUSH
43795: CALL_OW 257
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 3
43805: PUSH
43806: LD_INT 4
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: IN
43814: IFFALSE 43835
// points := [ 3 , 2 , 1 ] ;
43816: LD_ADDR_VAR 0 9
43820: PUSH
43821: LD_INT 3
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43835: LD_VAR 0 6
43839: PPUSH
43840: CALL_OW 257
43844: PUSH
43845: LD_INT 5
43847: EQUAL
43848: IFFALSE 43869
// points := [ 130 , 5 , 2 ] ;
43850: LD_ADDR_VAR 0 9
43854: PUSH
43855: LD_INT 130
43857: PUSH
43858: LD_INT 5
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43869: LD_VAR 0 6
43873: PPUSH
43874: CALL_OW 257
43878: PUSH
43879: LD_INT 8
43881: EQUAL
43882: IFFALSE 43903
// points := [ 35 , 35 , 30 ] ;
43884: LD_ADDR_VAR 0 9
43888: PUSH
43889: LD_INT 35
43891: PUSH
43892: LD_INT 35
43894: PUSH
43895: LD_INT 30
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43903: LD_VAR 0 6
43907: PPUSH
43908: CALL_OW 257
43912: PUSH
43913: LD_INT 9
43915: EQUAL
43916: IFFALSE 43937
// points := [ 20 , 55 , 40 ] ;
43918: LD_ADDR_VAR 0 9
43922: PUSH
43923: LD_INT 20
43925: PUSH
43926: LD_INT 55
43928: PUSH
43929: LD_INT 40
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43937: LD_VAR 0 6
43941: PPUSH
43942: CALL_OW 257
43946: PUSH
43947: LD_INT 12
43949: PUSH
43950: LD_INT 16
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: IN
43957: IFFALSE 43978
// points := [ 5 , 3 , 2 ] ;
43959: LD_ADDR_VAR 0 9
43963: PUSH
43964: LD_INT 5
43966: PUSH
43967: LD_INT 3
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43978: LD_VAR 0 6
43982: PPUSH
43983: CALL_OW 257
43987: PUSH
43988: LD_INT 17
43990: EQUAL
43991: IFFALSE 44012
// points := [ 100 , 50 , 75 ] ;
43993: LD_ADDR_VAR 0 9
43997: PUSH
43998: LD_INT 100
44000: PUSH
44001: LD_INT 50
44003: PUSH
44004: LD_INT 75
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: LIST
44011: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44012: LD_VAR 0 6
44016: PPUSH
44017: CALL_OW 257
44021: PUSH
44022: LD_INT 15
44024: EQUAL
44025: IFFALSE 44046
// points := [ 10 , 5 , 3 ] ;
44027: LD_ADDR_VAR 0 9
44031: PUSH
44032: LD_INT 10
44034: PUSH
44035: LD_INT 5
44037: PUSH
44038: LD_INT 3
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44046: LD_VAR 0 6
44050: PPUSH
44051: CALL_OW 257
44055: PUSH
44056: LD_INT 14
44058: EQUAL
44059: IFFALSE 44080
// points := [ 10 , 0 , 0 ] ;
44061: LD_ADDR_VAR 0 9
44065: PUSH
44066: LD_INT 10
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44080: LD_VAR 0 6
44084: PPUSH
44085: CALL_OW 257
44089: PUSH
44090: LD_INT 11
44092: EQUAL
44093: IFFALSE 44114
// points := [ 30 , 10 , 5 ] ;
44095: LD_ADDR_VAR 0 9
44099: PUSH
44100: LD_INT 30
44102: PUSH
44103: LD_INT 10
44105: PUSH
44106: LD_INT 5
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44114: LD_VAR 0 1
44118: PPUSH
44119: LD_INT 5
44121: PPUSH
44122: CALL_OW 321
44126: PUSH
44127: LD_INT 2
44129: EQUAL
44130: IFFALSE 44147
// bpoints := bpoints * 1.8 ;
44132: LD_ADDR_VAR 0 10
44136: PUSH
44137: LD_VAR 0 10
44141: PUSH
44142: LD_REAL  1.80000000000000E+0000
44145: MUL
44146: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44147: LD_VAR 0 6
44151: PPUSH
44152: CALL_OW 257
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: LD_INT 4
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: IN
44175: PUSH
44176: LD_VAR 0 1
44180: PPUSH
44181: LD_INT 51
44183: PPUSH
44184: CALL_OW 321
44188: PUSH
44189: LD_INT 2
44191: EQUAL
44192: AND
44193: IFFALSE 44210
// bpoints := bpoints * 1.2 ;
44195: LD_ADDR_VAR 0 10
44199: PUSH
44200: LD_VAR 0 10
44204: PUSH
44205: LD_REAL  1.20000000000000E+0000
44208: MUL
44209: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44210: LD_VAR 0 6
44214: PPUSH
44215: CALL_OW 257
44219: PUSH
44220: LD_INT 5
44222: PUSH
44223: LD_INT 7
44225: PUSH
44226: LD_INT 9
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: IN
44234: PUSH
44235: LD_VAR 0 1
44239: PPUSH
44240: LD_INT 52
44242: PPUSH
44243: CALL_OW 321
44247: PUSH
44248: LD_INT 2
44250: EQUAL
44251: AND
44252: IFFALSE 44269
// bpoints := bpoints * 1.5 ;
44254: LD_ADDR_VAR 0 10
44258: PUSH
44259: LD_VAR 0 10
44263: PUSH
44264: LD_REAL  1.50000000000000E+0000
44267: MUL
44268: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44269: LD_VAR 0 1
44273: PPUSH
44274: LD_INT 66
44276: PPUSH
44277: CALL_OW 321
44281: PUSH
44282: LD_INT 2
44284: EQUAL
44285: IFFALSE 44302
// bpoints := bpoints * 1.1 ;
44287: LD_ADDR_VAR 0 10
44291: PUSH
44292: LD_VAR 0 10
44296: PUSH
44297: LD_REAL  1.10000000000000E+0000
44300: MUL
44301: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44302: LD_ADDR_VAR 0 10
44306: PUSH
44307: LD_VAR 0 10
44311: PUSH
44312: LD_VAR 0 6
44316: PPUSH
44317: LD_INT 1
44319: PPUSH
44320: CALL_OW 259
44324: PUSH
44325: LD_REAL  1.15000000000000E+0000
44328: MUL
44329: MUL
44330: ST_TO_ADDR
// end ; unit_vehicle :
44331: GO 45161
44333: LD_INT 2
44335: DOUBLE
44336: EQUAL
44337: IFTRUE 44341
44339: GO 45149
44341: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44342: LD_VAR 0 6
44346: PPUSH
44347: CALL_OW 264
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 42
44357: PUSH
44358: LD_INT 24
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: IN
44366: IFFALSE 44387
// points := [ 25 , 5 , 3 ] ;
44368: LD_ADDR_VAR 0 9
44372: PUSH
44373: LD_INT 25
44375: PUSH
44376: LD_INT 5
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44387: LD_VAR 0 6
44391: PPUSH
44392: CALL_OW 264
44396: PUSH
44397: LD_INT 4
44399: PUSH
44400: LD_INT 43
44402: PUSH
44403: LD_INT 25
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: IN
44411: IFFALSE 44432
// points := [ 40 , 15 , 5 ] ;
44413: LD_ADDR_VAR 0 9
44417: PUSH
44418: LD_INT 40
44420: PUSH
44421: LD_INT 15
44423: PUSH
44424: LD_INT 5
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44432: LD_VAR 0 6
44436: PPUSH
44437: CALL_OW 264
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 23
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: IN
44452: IFFALSE 44473
// points := [ 7 , 25 , 8 ] ;
44454: LD_ADDR_VAR 0 9
44458: PUSH
44459: LD_INT 7
44461: PUSH
44462: LD_INT 25
44464: PUSH
44465: LD_INT 8
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44473: LD_VAR 0 6
44477: PPUSH
44478: CALL_OW 264
44482: PUSH
44483: LD_INT 5
44485: PUSH
44486: LD_INT 27
44488: PUSH
44489: LD_INT 44
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: IN
44497: IFFALSE 44518
// points := [ 14 , 50 , 16 ] ;
44499: LD_ADDR_VAR 0 9
44503: PUSH
44504: LD_INT 14
44506: PUSH
44507: LD_INT 50
44509: PUSH
44510: LD_INT 16
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44518: LD_VAR 0 6
44522: PPUSH
44523: CALL_OW 264
44527: PUSH
44528: LD_INT 6
44530: PUSH
44531: LD_INT 46
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: IN
44538: IFFALSE 44559
// points := [ 32 , 120 , 70 ] ;
44540: LD_ADDR_VAR 0 9
44544: PUSH
44545: LD_INT 32
44547: PUSH
44548: LD_INT 120
44550: PUSH
44551: LD_INT 70
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44559: LD_VAR 0 6
44563: PPUSH
44564: CALL_OW 264
44568: PUSH
44569: LD_INT 7
44571: PUSH
44572: LD_INT 28
44574: PUSH
44575: LD_INT 45
44577: PUSH
44578: LD_EXP 55
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: IN
44589: IFFALSE 44610
// points := [ 35 , 20 , 45 ] ;
44591: LD_ADDR_VAR 0 9
44595: PUSH
44596: LD_INT 35
44598: PUSH
44599: LD_INT 20
44601: PUSH
44602: LD_INT 45
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44610: LD_VAR 0 6
44614: PPUSH
44615: CALL_OW 264
44619: PUSH
44620: LD_INT 47
44622: PUSH
44623: EMPTY
44624: LIST
44625: IN
44626: IFFALSE 44647
// points := [ 67 , 45 , 75 ] ;
44628: LD_ADDR_VAR 0 9
44632: PUSH
44633: LD_INT 67
44635: PUSH
44636: LD_INT 45
44638: PUSH
44639: LD_INT 75
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44647: LD_VAR 0 6
44651: PPUSH
44652: CALL_OW 264
44656: PUSH
44657: LD_INT 26
44659: PUSH
44660: EMPTY
44661: LIST
44662: IN
44663: IFFALSE 44684
// points := [ 120 , 30 , 80 ] ;
44665: LD_ADDR_VAR 0 9
44669: PUSH
44670: LD_INT 120
44672: PUSH
44673: LD_INT 30
44675: PUSH
44676: LD_INT 80
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44684: LD_VAR 0 6
44688: PPUSH
44689: CALL_OW 264
44693: PUSH
44694: LD_INT 22
44696: PUSH
44697: EMPTY
44698: LIST
44699: IN
44700: IFFALSE 44721
// points := [ 40 , 1 , 1 ] ;
44702: LD_ADDR_VAR 0 9
44706: PUSH
44707: LD_INT 40
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44721: LD_VAR 0 6
44725: PPUSH
44726: CALL_OW 264
44730: PUSH
44731: LD_INT 29
44733: PUSH
44734: EMPTY
44735: LIST
44736: IN
44737: IFFALSE 44758
// points := [ 70 , 200 , 400 ] ;
44739: LD_ADDR_VAR 0 9
44743: PUSH
44744: LD_INT 70
44746: PUSH
44747: LD_INT 200
44749: PUSH
44750: LD_INT 400
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44758: LD_VAR 0 6
44762: PPUSH
44763: CALL_OW 264
44767: PUSH
44768: LD_INT 14
44770: PUSH
44771: LD_INT 53
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: IN
44778: IFFALSE 44799
// points := [ 40 , 10 , 20 ] ;
44780: LD_ADDR_VAR 0 9
44784: PUSH
44785: LD_INT 40
44787: PUSH
44788: LD_INT 10
44790: PUSH
44791: LD_INT 20
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44799: LD_VAR 0 6
44803: PPUSH
44804: CALL_OW 264
44808: PUSH
44809: LD_INT 9
44811: PUSH
44812: EMPTY
44813: LIST
44814: IN
44815: IFFALSE 44836
// points := [ 5 , 70 , 20 ] ;
44817: LD_ADDR_VAR 0 9
44821: PUSH
44822: LD_INT 5
44824: PUSH
44825: LD_INT 70
44827: PUSH
44828: LD_INT 20
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44836: LD_VAR 0 6
44840: PPUSH
44841: CALL_OW 264
44845: PUSH
44846: LD_INT 10
44848: PUSH
44849: EMPTY
44850: LIST
44851: IN
44852: IFFALSE 44873
// points := [ 35 , 110 , 70 ] ;
44854: LD_ADDR_VAR 0 9
44858: PUSH
44859: LD_INT 35
44861: PUSH
44862: LD_INT 110
44864: PUSH
44865: LD_INT 70
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44873: LD_VAR 0 6
44877: PPUSH
44878: CALL_OW 265
44882: PUSH
44883: LD_INT 25
44885: EQUAL
44886: IFFALSE 44907
// points := [ 80 , 65 , 100 ] ;
44888: LD_ADDR_VAR 0 9
44892: PUSH
44893: LD_INT 80
44895: PUSH
44896: LD_INT 65
44898: PUSH
44899: LD_INT 100
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44907: LD_VAR 0 6
44911: PPUSH
44912: CALL_OW 263
44916: PUSH
44917: LD_INT 1
44919: EQUAL
44920: IFFALSE 44955
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44922: LD_ADDR_VAR 0 10
44926: PUSH
44927: LD_VAR 0 10
44931: PUSH
44932: LD_VAR 0 6
44936: PPUSH
44937: CALL_OW 311
44941: PPUSH
44942: LD_INT 3
44944: PPUSH
44945: CALL_OW 259
44949: PUSH
44950: LD_INT 4
44952: MUL
44953: MUL
44954: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44955: LD_VAR 0 6
44959: PPUSH
44960: CALL_OW 263
44964: PUSH
44965: LD_INT 2
44967: EQUAL
44968: IFFALSE 45019
// begin j := IsControledBy ( i ) ;
44970: LD_ADDR_VAR 0 7
44974: PUSH
44975: LD_VAR 0 6
44979: PPUSH
44980: CALL_OW 312
44984: ST_TO_ADDR
// if j then
44985: LD_VAR 0 7
44989: IFFALSE 45019
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44991: LD_ADDR_VAR 0 10
44995: PUSH
44996: LD_VAR 0 10
45000: PUSH
45001: LD_VAR 0 7
45005: PPUSH
45006: LD_INT 3
45008: PPUSH
45009: CALL_OW 259
45013: PUSH
45014: LD_INT 3
45016: MUL
45017: MUL
45018: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45019: LD_VAR 0 6
45023: PPUSH
45024: CALL_OW 264
45028: PUSH
45029: LD_INT 5
45031: PUSH
45032: LD_INT 6
45034: PUSH
45035: LD_INT 46
45037: PUSH
45038: LD_INT 44
45040: PUSH
45041: LD_INT 47
45043: PUSH
45044: LD_INT 45
45046: PUSH
45047: LD_INT 28
45049: PUSH
45050: LD_INT 7
45052: PUSH
45053: LD_INT 27
45055: PUSH
45056: LD_INT 29
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: IN
45071: PUSH
45072: LD_VAR 0 1
45076: PPUSH
45077: LD_INT 52
45079: PPUSH
45080: CALL_OW 321
45084: PUSH
45085: LD_INT 2
45087: EQUAL
45088: AND
45089: IFFALSE 45106
// bpoints := bpoints * 1.2 ;
45091: LD_ADDR_VAR 0 10
45095: PUSH
45096: LD_VAR 0 10
45100: PUSH
45101: LD_REAL  1.20000000000000E+0000
45104: MUL
45105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45106: LD_VAR 0 6
45110: PPUSH
45111: CALL_OW 264
45115: PUSH
45116: LD_INT 6
45118: PUSH
45119: LD_INT 46
45121: PUSH
45122: LD_INT 47
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: IN
45130: IFFALSE 45147
// bpoints := bpoints * 1.2 ;
45132: LD_ADDR_VAR 0 10
45136: PUSH
45137: LD_VAR 0 10
45141: PUSH
45142: LD_REAL  1.20000000000000E+0000
45145: MUL
45146: ST_TO_ADDR
// end ; unit_building :
45147: GO 45161
45149: LD_INT 3
45151: DOUBLE
45152: EQUAL
45153: IFTRUE 45157
45155: GO 45160
45157: POP
// ; end ;
45158: GO 45161
45160: POP
// for j = 1 to 3 do
45161: LD_ADDR_VAR 0 7
45165: PUSH
45166: DOUBLE
45167: LD_INT 1
45169: DEC
45170: ST_TO_ADDR
45171: LD_INT 3
45173: PUSH
45174: FOR_TO
45175: IFFALSE 45228
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45177: LD_ADDR_VAR 0 5
45181: PUSH
45182: LD_VAR 0 5
45186: PPUSH
45187: LD_VAR 0 7
45191: PPUSH
45192: LD_VAR 0 5
45196: PUSH
45197: LD_VAR 0 7
45201: ARRAY
45202: PUSH
45203: LD_VAR 0 9
45207: PUSH
45208: LD_VAR 0 7
45212: ARRAY
45213: PUSH
45214: LD_VAR 0 10
45218: MUL
45219: PLUS
45220: PPUSH
45221: CALL_OW 1
45225: ST_TO_ADDR
45226: GO 45174
45228: POP
45229: POP
// end ;
45230: GO 43707
45232: POP
45233: POP
// result := Replace ( result , 4 , tmp ) ;
45234: LD_ADDR_VAR 0 5
45238: PUSH
45239: LD_VAR 0 5
45243: PPUSH
45244: LD_INT 4
45246: PPUSH
45247: LD_VAR 0 8
45251: PPUSH
45252: CALL_OW 1
45256: ST_TO_ADDR
// end ;
45257: LD_VAR 0 5
45261: RET
// export function DangerAtRange ( unit , range ) ; begin
45262: LD_INT 0
45264: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45265: LD_ADDR_VAR 0 3
45269: PUSH
45270: LD_VAR 0 1
45274: PPUSH
45275: CALL_OW 255
45279: PPUSH
45280: LD_VAR 0 1
45284: PPUSH
45285: CALL_OW 250
45289: PPUSH
45290: LD_VAR 0 1
45294: PPUSH
45295: CALL_OW 251
45299: PPUSH
45300: LD_VAR 0 2
45304: PPUSH
45305: CALL 43559 0 4
45309: ST_TO_ADDR
// end ;
45310: LD_VAR 0 3
45314: RET
// export function DangerInArea ( side , area ) ; begin
45315: LD_INT 0
45317: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45318: LD_ADDR_VAR 0 3
45322: PUSH
45323: LD_VAR 0 2
45327: PPUSH
45328: LD_INT 81
45330: PUSH
45331: LD_VAR 0 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PPUSH
45340: CALL_OW 70
45344: ST_TO_ADDR
// end ;
45345: LD_VAR 0 3
45349: RET
// export function IsExtension ( b ) ; begin
45350: LD_INT 0
45352: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45353: LD_ADDR_VAR 0 2
45357: PUSH
45358: LD_VAR 0 1
45362: PUSH
45363: LD_INT 23
45365: PUSH
45366: LD_INT 20
45368: PUSH
45369: LD_INT 22
45371: PUSH
45372: LD_INT 17
45374: PUSH
45375: LD_INT 24
45377: PUSH
45378: LD_INT 21
45380: PUSH
45381: LD_INT 19
45383: PUSH
45384: LD_INT 16
45386: PUSH
45387: LD_INT 25
45389: PUSH
45390: LD_INT 18
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: IN
45405: ST_TO_ADDR
// end ;
45406: LD_VAR 0 2
45410: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45411: LD_INT 0
45413: PPUSH
45414: PPUSH
45415: PPUSH
// result := [ ] ;
45416: LD_ADDR_VAR 0 4
45420: PUSH
45421: EMPTY
45422: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45423: LD_ADDR_VAR 0 5
45427: PUSH
45428: LD_VAR 0 2
45432: PPUSH
45433: LD_INT 21
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PPUSH
45443: CALL_OW 70
45447: ST_TO_ADDR
// if not tmp then
45448: LD_VAR 0 5
45452: NOT
45453: IFFALSE 45457
// exit ;
45455: GO 45521
// if checkLink then
45457: LD_VAR 0 3
45461: IFFALSE 45511
// begin for i in tmp do
45463: LD_ADDR_VAR 0 6
45467: PUSH
45468: LD_VAR 0 5
45472: PUSH
45473: FOR_IN
45474: IFFALSE 45509
// if GetBase ( i ) <> base then
45476: LD_VAR 0 6
45480: PPUSH
45481: CALL_OW 274
45485: PUSH
45486: LD_VAR 0 1
45490: NONEQUAL
45491: IFFALSE 45507
// ComLinkToBase ( base , i ) ;
45493: LD_VAR 0 1
45497: PPUSH
45498: LD_VAR 0 6
45502: PPUSH
45503: CALL_OW 169
45507: GO 45473
45509: POP
45510: POP
// end ; result := tmp ;
45511: LD_ADDR_VAR 0 4
45515: PUSH
45516: LD_VAR 0 5
45520: ST_TO_ADDR
// end ;
45521: LD_VAR 0 4
45525: RET
// export function ComComplete ( units , b ) ; var i ; begin
45526: LD_INT 0
45528: PPUSH
45529: PPUSH
// if not units then
45530: LD_VAR 0 1
45534: NOT
45535: IFFALSE 45539
// exit ;
45537: GO 45629
// for i in units do
45539: LD_ADDR_VAR 0 4
45543: PUSH
45544: LD_VAR 0 1
45548: PUSH
45549: FOR_IN
45550: IFFALSE 45627
// if BuildingStatus ( b ) = bs_build then
45552: LD_VAR 0 2
45556: PPUSH
45557: CALL_OW 461
45561: PUSH
45562: LD_INT 1
45564: EQUAL
45565: IFFALSE 45625
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45567: LD_VAR 0 4
45571: PPUSH
45572: LD_STRING h
45574: PUSH
45575: LD_VAR 0 2
45579: PPUSH
45580: CALL_OW 250
45584: PUSH
45585: LD_VAR 0 2
45589: PPUSH
45590: CALL_OW 251
45594: PUSH
45595: LD_VAR 0 2
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: PPUSH
45621: CALL_OW 446
45625: GO 45549
45627: POP
45628: POP
// end ;
45629: LD_VAR 0 3
45633: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45634: LD_INT 0
45636: PPUSH
45637: PPUSH
45638: PPUSH
45639: PPUSH
45640: PPUSH
45641: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45642: LD_VAR 0 1
45646: NOT
45647: PUSH
45648: LD_VAR 0 1
45652: PPUSH
45653: CALL_OW 263
45657: PUSH
45658: LD_INT 2
45660: NONEQUAL
45661: OR
45662: IFFALSE 45666
// exit ;
45664: GO 45982
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45666: LD_ADDR_VAR 0 6
45670: PUSH
45671: LD_INT 22
45673: PUSH
45674: LD_VAR 0 1
45678: PPUSH
45679: CALL_OW 255
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 30
45693: PUSH
45694: LD_INT 36
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 34
45703: PUSH
45704: LD_INT 31
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PPUSH
45720: CALL_OW 69
45724: ST_TO_ADDR
// if not tmp then
45725: LD_VAR 0 6
45729: NOT
45730: IFFALSE 45734
// exit ;
45732: GO 45982
// result := [ ] ;
45734: LD_ADDR_VAR 0 2
45738: PUSH
45739: EMPTY
45740: ST_TO_ADDR
// for i in tmp do
45741: LD_ADDR_VAR 0 3
45745: PUSH
45746: LD_VAR 0 6
45750: PUSH
45751: FOR_IN
45752: IFFALSE 45823
// begin t := UnitsInside ( i ) ;
45754: LD_ADDR_VAR 0 4
45758: PUSH
45759: LD_VAR 0 3
45763: PPUSH
45764: CALL_OW 313
45768: ST_TO_ADDR
// if t then
45769: LD_VAR 0 4
45773: IFFALSE 45821
// for j in t do
45775: LD_ADDR_VAR 0 7
45779: PUSH
45780: LD_VAR 0 4
45784: PUSH
45785: FOR_IN
45786: IFFALSE 45819
// result := Replace ( result , result + 1 , j ) ;
45788: LD_ADDR_VAR 0 2
45792: PUSH
45793: LD_VAR 0 2
45797: PPUSH
45798: LD_VAR 0 2
45802: PUSH
45803: LD_INT 1
45805: PLUS
45806: PPUSH
45807: LD_VAR 0 7
45811: PPUSH
45812: CALL_OW 1
45816: ST_TO_ADDR
45817: GO 45785
45819: POP
45820: POP
// end ;
45821: GO 45751
45823: POP
45824: POP
// if not result then
45825: LD_VAR 0 2
45829: NOT
45830: IFFALSE 45834
// exit ;
45832: GO 45982
// mech := result [ 1 ] ;
45834: LD_ADDR_VAR 0 5
45838: PUSH
45839: LD_VAR 0 2
45843: PUSH
45844: LD_INT 1
45846: ARRAY
45847: ST_TO_ADDR
// if result > 1 then
45848: LD_VAR 0 2
45852: PUSH
45853: LD_INT 1
45855: GREATER
45856: IFFALSE 45968
// begin for i = 2 to result do
45858: LD_ADDR_VAR 0 3
45862: PUSH
45863: DOUBLE
45864: LD_INT 2
45866: DEC
45867: ST_TO_ADDR
45868: LD_VAR 0 2
45872: PUSH
45873: FOR_TO
45874: IFFALSE 45966
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45876: LD_ADDR_VAR 0 4
45880: PUSH
45881: LD_VAR 0 2
45885: PUSH
45886: LD_VAR 0 3
45890: ARRAY
45891: PPUSH
45892: LD_INT 3
45894: PPUSH
45895: CALL_OW 259
45899: PUSH
45900: LD_VAR 0 2
45904: PUSH
45905: LD_VAR 0 3
45909: ARRAY
45910: PPUSH
45911: CALL_OW 432
45915: MINUS
45916: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45917: LD_VAR 0 4
45921: PUSH
45922: LD_VAR 0 5
45926: PPUSH
45927: LD_INT 3
45929: PPUSH
45930: CALL_OW 259
45934: PUSH
45935: LD_VAR 0 5
45939: PPUSH
45940: CALL_OW 432
45944: MINUS
45945: GREATEREQUAL
45946: IFFALSE 45964
// mech := result [ i ] ;
45948: LD_ADDR_VAR 0 5
45952: PUSH
45953: LD_VAR 0 2
45957: PUSH
45958: LD_VAR 0 3
45962: ARRAY
45963: ST_TO_ADDR
// end ;
45964: GO 45873
45966: POP
45967: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45968: LD_VAR 0 1
45972: PPUSH
45973: LD_VAR 0 5
45977: PPUSH
45978: CALL_OW 135
// end ;
45982: LD_VAR 0 2
45986: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45987: LD_INT 0
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
// result := [ ] ;
46002: LD_ADDR_VAR 0 7
46006: PUSH
46007: EMPTY
46008: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46009: LD_VAR 0 1
46013: PPUSH
46014: CALL_OW 266
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: IN
46029: NOT
46030: IFFALSE 46034
// exit ;
46032: GO 47668
// if name then
46034: LD_VAR 0 3
46038: IFFALSE 46054
// SetBName ( base_dep , name ) ;
46040: LD_VAR 0 1
46044: PPUSH
46045: LD_VAR 0 3
46049: PPUSH
46050: CALL_OW 500
// base := GetBase ( base_dep ) ;
46054: LD_ADDR_VAR 0 15
46058: PUSH
46059: LD_VAR 0 1
46063: PPUSH
46064: CALL_OW 274
46068: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46069: LD_ADDR_VAR 0 16
46073: PUSH
46074: LD_VAR 0 1
46078: PPUSH
46079: CALL_OW 255
46083: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46084: LD_ADDR_VAR 0 17
46088: PUSH
46089: LD_VAR 0 1
46093: PPUSH
46094: CALL_OW 248
46098: ST_TO_ADDR
// if sources then
46099: LD_VAR 0 5
46103: IFFALSE 46150
// for i = 1 to 3 do
46105: LD_ADDR_VAR 0 8
46109: PUSH
46110: DOUBLE
46111: LD_INT 1
46113: DEC
46114: ST_TO_ADDR
46115: LD_INT 3
46117: PUSH
46118: FOR_TO
46119: IFFALSE 46148
// AddResourceType ( base , i , sources [ i ] ) ;
46121: LD_VAR 0 15
46125: PPUSH
46126: LD_VAR 0 8
46130: PPUSH
46131: LD_VAR 0 5
46135: PUSH
46136: LD_VAR 0 8
46140: ARRAY
46141: PPUSH
46142: CALL_OW 276
46146: GO 46118
46148: POP
46149: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46150: LD_ADDR_VAR 0 18
46154: PUSH
46155: LD_VAR 0 15
46159: PPUSH
46160: LD_VAR 0 2
46164: PPUSH
46165: LD_INT 1
46167: PPUSH
46168: CALL 45411 0 3
46172: ST_TO_ADDR
// InitHc ;
46173: CALL_OW 19
// InitUc ;
46177: CALL_OW 18
// uc_side := side ;
46181: LD_ADDR_OWVAR 20
46185: PUSH
46186: LD_VAR 0 16
46190: ST_TO_ADDR
// uc_nation := nation ;
46191: LD_ADDR_OWVAR 21
46195: PUSH
46196: LD_VAR 0 17
46200: ST_TO_ADDR
// if buildings then
46201: LD_VAR 0 18
46205: IFFALSE 47527
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46207: LD_ADDR_VAR 0 19
46211: PUSH
46212: LD_VAR 0 18
46216: PPUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 30
46222: PUSH
46223: LD_INT 29
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 30
46232: PUSH
46233: LD_INT 30
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: PPUSH
46245: CALL_OW 72
46249: ST_TO_ADDR
// if tmp then
46250: LD_VAR 0 19
46254: IFFALSE 46302
// for i in tmp do
46256: LD_ADDR_VAR 0 8
46260: PUSH
46261: LD_VAR 0 19
46265: PUSH
46266: FOR_IN
46267: IFFALSE 46300
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46269: LD_VAR 0 8
46273: PPUSH
46274: CALL_OW 250
46278: PPUSH
46279: LD_VAR 0 8
46283: PPUSH
46284: CALL_OW 251
46288: PPUSH
46289: LD_VAR 0 16
46293: PPUSH
46294: CALL_OW 441
46298: GO 46266
46300: POP
46301: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46302: LD_VAR 0 18
46306: PPUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 30
46312: PUSH
46313: LD_INT 32
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 30
46322: PUSH
46323: LD_INT 33
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: PPUSH
46335: CALL_OW 72
46339: IFFALSE 46427
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46341: LD_ADDR_VAR 0 8
46345: PUSH
46346: LD_VAR 0 18
46350: PPUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 30
46356: PUSH
46357: LD_INT 32
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 30
46366: PUSH
46367: LD_INT 33
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: PPUSH
46379: CALL_OW 72
46383: PUSH
46384: FOR_IN
46385: IFFALSE 46425
// begin if not GetBWeapon ( i ) then
46387: LD_VAR 0 8
46391: PPUSH
46392: CALL_OW 269
46396: NOT
46397: IFFALSE 46423
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46399: LD_VAR 0 8
46403: PPUSH
46404: LD_VAR 0 8
46408: PPUSH
46409: LD_VAR 0 2
46413: PPUSH
46414: CALL 47673 0 2
46418: PPUSH
46419: CALL_OW 431
// end ;
46423: GO 46384
46425: POP
46426: POP
// end ; for i = 1 to personel do
46427: LD_ADDR_VAR 0 8
46431: PUSH
46432: DOUBLE
46433: LD_INT 1
46435: DEC
46436: ST_TO_ADDR
46437: LD_VAR 0 6
46441: PUSH
46442: FOR_TO
46443: IFFALSE 47507
// begin if i > 4 then
46445: LD_VAR 0 8
46449: PUSH
46450: LD_INT 4
46452: GREATER
46453: IFFALSE 46457
// break ;
46455: GO 47507
// case i of 1 :
46457: LD_VAR 0 8
46461: PUSH
46462: LD_INT 1
46464: DOUBLE
46465: EQUAL
46466: IFTRUE 46470
46468: GO 46550
46470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46471: LD_ADDR_VAR 0 12
46475: PUSH
46476: LD_VAR 0 18
46480: PPUSH
46481: LD_INT 22
46483: PUSH
46484: LD_VAR 0 16
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 58
46495: PUSH
46496: EMPTY
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 30
46504: PUSH
46505: LD_INT 32
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 30
46514: PUSH
46515: LD_INT 4
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 30
46524: PUSH
46525: LD_INT 5
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: PPUSH
46543: CALL_OW 72
46547: ST_TO_ADDR
46548: GO 46772
46550: LD_INT 2
46552: DOUBLE
46553: EQUAL
46554: IFTRUE 46558
46556: GO 46620
46558: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46559: LD_ADDR_VAR 0 12
46563: PUSH
46564: LD_VAR 0 18
46568: PPUSH
46569: LD_INT 22
46571: PUSH
46572: LD_VAR 0 16
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 30
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 30
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PPUSH
46613: CALL_OW 72
46617: ST_TO_ADDR
46618: GO 46772
46620: LD_INT 3
46622: DOUBLE
46623: EQUAL
46624: IFTRUE 46628
46626: GO 46690
46628: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46629: LD_ADDR_VAR 0 12
46633: PUSH
46634: LD_VAR 0 18
46638: PPUSH
46639: LD_INT 22
46641: PUSH
46642: LD_VAR 0 16
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 30
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 30
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PPUSH
46683: CALL_OW 72
46687: ST_TO_ADDR
46688: GO 46772
46690: LD_INT 4
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46771
46698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46699: LD_ADDR_VAR 0 12
46703: PUSH
46704: LD_VAR 0 18
46708: PPUSH
46709: LD_INT 22
46711: PUSH
46712: LD_VAR 0 16
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 30
46726: PUSH
46727: LD_INT 6
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 30
46736: PUSH
46737: LD_INT 7
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 30
46746: PUSH
46747: LD_INT 8
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PPUSH
46764: CALL_OW 72
46768: ST_TO_ADDR
46769: GO 46772
46771: POP
// if i = 1 then
46772: LD_VAR 0 8
46776: PUSH
46777: LD_INT 1
46779: EQUAL
46780: IFFALSE 46891
// begin tmp := [ ] ;
46782: LD_ADDR_VAR 0 19
46786: PUSH
46787: EMPTY
46788: ST_TO_ADDR
// for j in f do
46789: LD_ADDR_VAR 0 9
46793: PUSH
46794: LD_VAR 0 12
46798: PUSH
46799: FOR_IN
46800: IFFALSE 46873
// if GetBType ( j ) = b_bunker then
46802: LD_VAR 0 9
46806: PPUSH
46807: CALL_OW 266
46811: PUSH
46812: LD_INT 32
46814: EQUAL
46815: IFFALSE 46842
// tmp := Insert ( tmp , 1 , j ) else
46817: LD_ADDR_VAR 0 19
46821: PUSH
46822: LD_VAR 0 19
46826: PPUSH
46827: LD_INT 1
46829: PPUSH
46830: LD_VAR 0 9
46834: PPUSH
46835: CALL_OW 2
46839: ST_TO_ADDR
46840: GO 46871
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46842: LD_ADDR_VAR 0 19
46846: PUSH
46847: LD_VAR 0 19
46851: PPUSH
46852: LD_VAR 0 19
46856: PUSH
46857: LD_INT 1
46859: PLUS
46860: PPUSH
46861: LD_VAR 0 9
46865: PPUSH
46866: CALL_OW 2
46870: ST_TO_ADDR
46871: GO 46799
46873: POP
46874: POP
// if tmp then
46875: LD_VAR 0 19
46879: IFFALSE 46891
// f := tmp ;
46881: LD_ADDR_VAR 0 12
46885: PUSH
46886: LD_VAR 0 19
46890: ST_TO_ADDR
// end ; x := personel [ i ] ;
46891: LD_ADDR_VAR 0 13
46895: PUSH
46896: LD_VAR 0 6
46900: PUSH
46901: LD_VAR 0 8
46905: ARRAY
46906: ST_TO_ADDR
// if x = - 1 then
46907: LD_VAR 0 13
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: EQUAL
46916: IFFALSE 47125
// begin for j in f do
46918: LD_ADDR_VAR 0 9
46922: PUSH
46923: LD_VAR 0 12
46927: PUSH
46928: FOR_IN
46929: IFFALSE 47121
// repeat InitHc ;
46931: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46935: LD_VAR 0 9
46939: PPUSH
46940: CALL_OW 266
46944: PUSH
46945: LD_INT 5
46947: EQUAL
46948: IFFALSE 47018
// begin if UnitsInside ( j ) < 3 then
46950: LD_VAR 0 9
46954: PPUSH
46955: CALL_OW 313
46959: PUSH
46960: LD_INT 3
46962: LESS
46963: IFFALSE 46999
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46965: LD_INT 0
46967: PPUSH
46968: LD_INT 5
46970: PUSH
46971: LD_INT 8
46973: PUSH
46974: LD_INT 9
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: PUSH
46982: LD_VAR 0 17
46986: ARRAY
46987: PPUSH
46988: LD_VAR 0 4
46992: PPUSH
46993: CALL_OW 380
46997: GO 47016
// PrepareHuman ( false , i , skill ) ;
46999: LD_INT 0
47001: PPUSH
47002: LD_VAR 0 8
47006: PPUSH
47007: LD_VAR 0 4
47011: PPUSH
47012: CALL_OW 380
// end else
47016: GO 47035
// PrepareHuman ( false , i , skill ) ;
47018: LD_INT 0
47020: PPUSH
47021: LD_VAR 0 8
47025: PPUSH
47026: LD_VAR 0 4
47030: PPUSH
47031: CALL_OW 380
// un := CreateHuman ;
47035: LD_ADDR_VAR 0 14
47039: PUSH
47040: CALL_OW 44
47044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47045: LD_ADDR_VAR 0 7
47049: PUSH
47050: LD_VAR 0 7
47054: PPUSH
47055: LD_INT 1
47057: PPUSH
47058: LD_VAR 0 14
47062: PPUSH
47063: CALL_OW 2
47067: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47068: LD_VAR 0 14
47072: PPUSH
47073: LD_VAR 0 9
47077: PPUSH
47078: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47082: LD_VAR 0 9
47086: PPUSH
47087: CALL_OW 313
47091: PUSH
47092: LD_INT 6
47094: EQUAL
47095: PUSH
47096: LD_VAR 0 9
47100: PPUSH
47101: CALL_OW 266
47105: PUSH
47106: LD_INT 32
47108: PUSH
47109: LD_INT 31
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: IN
47116: OR
47117: IFFALSE 46931
47119: GO 46928
47121: POP
47122: POP
// end else
47123: GO 47505
// for j = 1 to x do
47125: LD_ADDR_VAR 0 9
47129: PUSH
47130: DOUBLE
47131: LD_INT 1
47133: DEC
47134: ST_TO_ADDR
47135: LD_VAR 0 13
47139: PUSH
47140: FOR_TO
47141: IFFALSE 47503
// begin InitHc ;
47143: CALL_OW 19
// if not f then
47147: LD_VAR 0 12
47151: NOT
47152: IFFALSE 47241
// begin PrepareHuman ( false , i , skill ) ;
47154: LD_INT 0
47156: PPUSH
47157: LD_VAR 0 8
47161: PPUSH
47162: LD_VAR 0 4
47166: PPUSH
47167: CALL_OW 380
// un := CreateHuman ;
47171: LD_ADDR_VAR 0 14
47175: PUSH
47176: CALL_OW 44
47180: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47181: LD_ADDR_VAR 0 7
47185: PUSH
47186: LD_VAR 0 7
47190: PPUSH
47191: LD_INT 1
47193: PPUSH
47194: LD_VAR 0 14
47198: PPUSH
47199: CALL_OW 2
47203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47204: LD_VAR 0 14
47208: PPUSH
47209: LD_VAR 0 1
47213: PPUSH
47214: CALL_OW 250
47218: PPUSH
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 251
47228: PPUSH
47229: LD_INT 10
47231: PPUSH
47232: LD_INT 0
47234: PPUSH
47235: CALL_OW 50
// continue ;
47239: GO 47140
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47241: LD_VAR 0 12
47245: PUSH
47246: LD_INT 1
47248: ARRAY
47249: PPUSH
47250: CALL_OW 313
47254: PUSH
47255: LD_VAR 0 12
47259: PUSH
47260: LD_INT 1
47262: ARRAY
47263: PPUSH
47264: CALL_OW 266
47268: PUSH
47269: LD_INT 32
47271: PUSH
47272: LD_INT 31
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: IN
47279: AND
47280: PUSH
47281: LD_VAR 0 12
47285: PUSH
47286: LD_INT 1
47288: ARRAY
47289: PPUSH
47290: CALL_OW 313
47294: PUSH
47295: LD_INT 6
47297: EQUAL
47298: OR
47299: IFFALSE 47319
// f := Delete ( f , 1 ) ;
47301: LD_ADDR_VAR 0 12
47305: PUSH
47306: LD_VAR 0 12
47310: PPUSH
47311: LD_INT 1
47313: PPUSH
47314: CALL_OW 3
47318: ST_TO_ADDR
// if not f then
47319: LD_VAR 0 12
47323: NOT
47324: IFFALSE 47342
// begin x := x + 2 ;
47326: LD_ADDR_VAR 0 13
47330: PUSH
47331: LD_VAR 0 13
47335: PUSH
47336: LD_INT 2
47338: PLUS
47339: ST_TO_ADDR
// continue ;
47340: GO 47140
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47342: LD_VAR 0 12
47346: PUSH
47347: LD_INT 1
47349: ARRAY
47350: PPUSH
47351: CALL_OW 266
47355: PUSH
47356: LD_INT 5
47358: EQUAL
47359: IFFALSE 47433
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47361: LD_VAR 0 12
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PPUSH
47370: CALL_OW 313
47374: PUSH
47375: LD_INT 3
47377: LESS
47378: IFFALSE 47414
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47380: LD_INT 0
47382: PPUSH
47383: LD_INT 5
47385: PUSH
47386: LD_INT 8
47388: PUSH
47389: LD_INT 9
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: PUSH
47397: LD_VAR 0 17
47401: ARRAY
47402: PPUSH
47403: LD_VAR 0 4
47407: PPUSH
47408: CALL_OW 380
47412: GO 47431
// PrepareHuman ( false , i , skill ) ;
47414: LD_INT 0
47416: PPUSH
47417: LD_VAR 0 8
47421: PPUSH
47422: LD_VAR 0 4
47426: PPUSH
47427: CALL_OW 380
// end else
47431: GO 47450
// PrepareHuman ( false , i , skill ) ;
47433: LD_INT 0
47435: PPUSH
47436: LD_VAR 0 8
47440: PPUSH
47441: LD_VAR 0 4
47445: PPUSH
47446: CALL_OW 380
// un := CreateHuman ;
47450: LD_ADDR_VAR 0 14
47454: PUSH
47455: CALL_OW 44
47459: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47460: LD_ADDR_VAR 0 7
47464: PUSH
47465: LD_VAR 0 7
47469: PPUSH
47470: LD_INT 1
47472: PPUSH
47473: LD_VAR 0 14
47477: PPUSH
47478: CALL_OW 2
47482: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47483: LD_VAR 0 14
47487: PPUSH
47488: LD_VAR 0 12
47492: PUSH
47493: LD_INT 1
47495: ARRAY
47496: PPUSH
47497: CALL_OW 52
// end ;
47501: GO 47140
47503: POP
47504: POP
// end ;
47505: GO 46442
47507: POP
47508: POP
// result := result ^ buildings ;
47509: LD_ADDR_VAR 0 7
47513: PUSH
47514: LD_VAR 0 7
47518: PUSH
47519: LD_VAR 0 18
47523: ADD
47524: ST_TO_ADDR
// end else
47525: GO 47668
// begin for i = 1 to personel do
47527: LD_ADDR_VAR 0 8
47531: PUSH
47532: DOUBLE
47533: LD_INT 1
47535: DEC
47536: ST_TO_ADDR
47537: LD_VAR 0 6
47541: PUSH
47542: FOR_TO
47543: IFFALSE 47666
// begin if i > 4 then
47545: LD_VAR 0 8
47549: PUSH
47550: LD_INT 4
47552: GREATER
47553: IFFALSE 47557
// break ;
47555: GO 47666
// x := personel [ i ] ;
47557: LD_ADDR_VAR 0 13
47561: PUSH
47562: LD_VAR 0 6
47566: PUSH
47567: LD_VAR 0 8
47571: ARRAY
47572: ST_TO_ADDR
// if x = - 1 then
47573: LD_VAR 0 13
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: EQUAL
47582: IFFALSE 47586
// continue ;
47584: GO 47542
// PrepareHuman ( false , i , skill ) ;
47586: LD_INT 0
47588: PPUSH
47589: LD_VAR 0 8
47593: PPUSH
47594: LD_VAR 0 4
47598: PPUSH
47599: CALL_OW 380
// un := CreateHuman ;
47603: LD_ADDR_VAR 0 14
47607: PUSH
47608: CALL_OW 44
47612: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47613: LD_VAR 0 14
47617: PPUSH
47618: LD_VAR 0 1
47622: PPUSH
47623: CALL_OW 250
47627: PPUSH
47628: LD_VAR 0 1
47632: PPUSH
47633: CALL_OW 251
47637: PPUSH
47638: LD_INT 10
47640: PPUSH
47641: LD_INT 0
47643: PPUSH
47644: CALL_OW 50
// result := result ^ un ;
47648: LD_ADDR_VAR 0 7
47652: PUSH
47653: LD_VAR 0 7
47657: PUSH
47658: LD_VAR 0 14
47662: ADD
47663: ST_TO_ADDR
// end ;
47664: GO 47542
47666: POP
47667: POP
// end ; end ;
47668: LD_VAR 0 7
47672: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47673: LD_INT 0
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
47684: PPUSH
47685: PPUSH
47686: PPUSH
47687: PPUSH
47688: PPUSH
47689: PPUSH
47690: PPUSH
// result := false ;
47691: LD_ADDR_VAR 0 3
47695: PUSH
47696: LD_INT 0
47698: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47699: LD_VAR 0 1
47703: NOT
47704: PUSH
47705: LD_VAR 0 1
47709: PPUSH
47710: CALL_OW 266
47714: PUSH
47715: LD_INT 32
47717: PUSH
47718: LD_INT 33
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: IN
47725: NOT
47726: OR
47727: IFFALSE 47731
// exit ;
47729: GO 48840
// nat := GetNation ( tower ) ;
47731: LD_ADDR_VAR 0 12
47735: PUSH
47736: LD_VAR 0 1
47740: PPUSH
47741: CALL_OW 248
47745: ST_TO_ADDR
// side := GetSide ( tower ) ;
47746: LD_ADDR_VAR 0 16
47750: PUSH
47751: LD_VAR 0 1
47755: PPUSH
47756: CALL_OW 255
47760: ST_TO_ADDR
// x := GetX ( tower ) ;
47761: LD_ADDR_VAR 0 10
47765: PUSH
47766: LD_VAR 0 1
47770: PPUSH
47771: CALL_OW 250
47775: ST_TO_ADDR
// y := GetY ( tower ) ;
47776: LD_ADDR_VAR 0 11
47780: PUSH
47781: LD_VAR 0 1
47785: PPUSH
47786: CALL_OW 251
47790: ST_TO_ADDR
// if not x or not y then
47791: LD_VAR 0 10
47795: NOT
47796: PUSH
47797: LD_VAR 0 11
47801: NOT
47802: OR
47803: IFFALSE 47807
// exit ;
47805: GO 48840
// weapon := 0 ;
47807: LD_ADDR_VAR 0 18
47811: PUSH
47812: LD_INT 0
47814: ST_TO_ADDR
// fac_list := [ ] ;
47815: LD_ADDR_VAR 0 17
47819: PUSH
47820: EMPTY
47821: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47822: LD_ADDR_VAR 0 6
47826: PUSH
47827: LD_VAR 0 1
47831: PPUSH
47832: CALL_OW 274
47836: PPUSH
47837: LD_VAR 0 2
47841: PPUSH
47842: LD_INT 0
47844: PPUSH
47845: CALL 45411 0 3
47849: PPUSH
47850: LD_INT 30
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PPUSH
47860: CALL_OW 72
47864: ST_TO_ADDR
// if not factories then
47865: LD_VAR 0 6
47869: NOT
47870: IFFALSE 47874
// exit ;
47872: GO 48840
// for i in factories do
47874: LD_ADDR_VAR 0 8
47878: PUSH
47879: LD_VAR 0 6
47883: PUSH
47884: FOR_IN
47885: IFFALSE 47910
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47887: LD_ADDR_VAR 0 17
47891: PUSH
47892: LD_VAR 0 17
47896: PUSH
47897: LD_VAR 0 8
47901: PPUSH
47902: CALL_OW 478
47906: UNION
47907: ST_TO_ADDR
47908: GO 47884
47910: POP
47911: POP
// if not fac_list then
47912: LD_VAR 0 17
47916: NOT
47917: IFFALSE 47921
// exit ;
47919: GO 48840
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47921: LD_ADDR_VAR 0 5
47925: PUSH
47926: LD_INT 4
47928: PUSH
47929: LD_INT 5
47931: PUSH
47932: LD_INT 9
47934: PUSH
47935: LD_INT 10
47937: PUSH
47938: LD_INT 6
47940: PUSH
47941: LD_INT 7
47943: PUSH
47944: LD_INT 11
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 27
47958: PUSH
47959: LD_INT 28
47961: PUSH
47962: LD_INT 26
47964: PUSH
47965: LD_INT 30
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 43
47976: PUSH
47977: LD_INT 44
47979: PUSH
47980: LD_INT 46
47982: PUSH
47983: LD_INT 45
47985: PUSH
47986: LD_INT 47
47988: PUSH
47989: LD_INT 49
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: PUSH
48005: LD_VAR 0 12
48009: ARRAY
48010: ST_TO_ADDR
// list := list isect fac_list ;
48011: LD_ADDR_VAR 0 5
48015: PUSH
48016: LD_VAR 0 5
48020: PUSH
48021: LD_VAR 0 17
48025: ISECT
48026: ST_TO_ADDR
// if not list then
48027: LD_VAR 0 5
48031: NOT
48032: IFFALSE 48036
// exit ;
48034: GO 48840
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48036: LD_VAR 0 12
48040: PUSH
48041: LD_INT 3
48043: EQUAL
48044: PUSH
48045: LD_INT 49
48047: PUSH
48048: LD_VAR 0 5
48052: IN
48053: AND
48054: PUSH
48055: LD_INT 31
48057: PPUSH
48058: LD_VAR 0 16
48062: PPUSH
48063: CALL_OW 321
48067: PUSH
48068: LD_INT 2
48070: EQUAL
48071: AND
48072: IFFALSE 48132
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48074: LD_INT 22
48076: PUSH
48077: LD_VAR 0 16
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 35
48088: PUSH
48089: LD_INT 49
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 91
48098: PUSH
48099: LD_VAR 0 1
48103: PUSH
48104: LD_INT 10
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: LIST
48116: PPUSH
48117: CALL_OW 69
48121: NOT
48122: IFFALSE 48132
// weapon := ru_time_lapser ;
48124: LD_ADDR_VAR 0 18
48128: PUSH
48129: LD_INT 49
48131: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48132: LD_VAR 0 12
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: IN
48147: PUSH
48148: LD_INT 11
48150: PUSH
48151: LD_VAR 0 5
48155: IN
48156: PUSH
48157: LD_INT 30
48159: PUSH
48160: LD_VAR 0 5
48164: IN
48165: OR
48166: AND
48167: PUSH
48168: LD_INT 6
48170: PPUSH
48171: LD_VAR 0 16
48175: PPUSH
48176: CALL_OW 321
48180: PUSH
48181: LD_INT 2
48183: EQUAL
48184: AND
48185: IFFALSE 48350
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48187: LD_INT 22
48189: PUSH
48190: LD_VAR 0 16
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 35
48204: PUSH
48205: LD_INT 11
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 35
48214: PUSH
48215: LD_INT 30
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 91
48229: PUSH
48230: LD_VAR 0 1
48234: PUSH
48235: LD_INT 18
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: PPUSH
48248: CALL_OW 69
48252: NOT
48253: PUSH
48254: LD_INT 22
48256: PUSH
48257: LD_VAR 0 16
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 30
48271: PUSH
48272: LD_INT 32
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 30
48281: PUSH
48282: LD_INT 33
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 91
48296: PUSH
48297: LD_VAR 0 1
48301: PUSH
48302: LD_INT 12
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: PPUSH
48318: CALL_OW 69
48322: PUSH
48323: LD_INT 2
48325: GREATER
48326: AND
48327: IFFALSE 48350
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48329: LD_ADDR_VAR 0 18
48333: PUSH
48334: LD_INT 11
48336: PUSH
48337: LD_INT 30
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_VAR 0 12
48348: ARRAY
48349: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48350: LD_VAR 0 18
48354: NOT
48355: PUSH
48356: LD_INT 40
48358: PPUSH
48359: LD_VAR 0 16
48363: PPUSH
48364: CALL_OW 321
48368: PUSH
48369: LD_INT 2
48371: EQUAL
48372: AND
48373: PUSH
48374: LD_INT 7
48376: PUSH
48377: LD_VAR 0 5
48381: IN
48382: PUSH
48383: LD_INT 28
48385: PUSH
48386: LD_VAR 0 5
48390: IN
48391: OR
48392: PUSH
48393: LD_INT 45
48395: PUSH
48396: LD_VAR 0 5
48400: IN
48401: OR
48402: AND
48403: IFFALSE 48657
// begin hex := GetHexInfo ( x , y ) ;
48405: LD_ADDR_VAR 0 4
48409: PUSH
48410: LD_VAR 0 10
48414: PPUSH
48415: LD_VAR 0 11
48419: PPUSH
48420: CALL_OW 546
48424: ST_TO_ADDR
// if hex [ 1 ] then
48425: LD_VAR 0 4
48429: PUSH
48430: LD_INT 1
48432: ARRAY
48433: IFFALSE 48437
// exit ;
48435: GO 48840
// height := hex [ 2 ] ;
48437: LD_ADDR_VAR 0 15
48441: PUSH
48442: LD_VAR 0 4
48446: PUSH
48447: LD_INT 2
48449: ARRAY
48450: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48451: LD_ADDR_VAR 0 14
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: LD_INT 5
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// for i in tmp do
48474: LD_ADDR_VAR 0 8
48478: PUSH
48479: LD_VAR 0 14
48483: PUSH
48484: FOR_IN
48485: IFFALSE 48655
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48487: LD_ADDR_VAR 0 9
48491: PUSH
48492: LD_VAR 0 10
48496: PPUSH
48497: LD_VAR 0 8
48501: PPUSH
48502: LD_INT 5
48504: PPUSH
48505: CALL_OW 272
48509: PUSH
48510: LD_VAR 0 11
48514: PPUSH
48515: LD_VAR 0 8
48519: PPUSH
48520: LD_INT 5
48522: PPUSH
48523: CALL_OW 273
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48532: LD_VAR 0 9
48536: PUSH
48537: LD_INT 1
48539: ARRAY
48540: PPUSH
48541: LD_VAR 0 9
48545: PUSH
48546: LD_INT 2
48548: ARRAY
48549: PPUSH
48550: CALL_OW 488
48554: IFFALSE 48653
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48556: LD_ADDR_VAR 0 4
48560: PUSH
48561: LD_VAR 0 9
48565: PUSH
48566: LD_INT 1
48568: ARRAY
48569: PPUSH
48570: LD_VAR 0 9
48574: PUSH
48575: LD_INT 2
48577: ARRAY
48578: PPUSH
48579: CALL_OW 546
48583: ST_TO_ADDR
// if hex [ 1 ] then
48584: LD_VAR 0 4
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: IFFALSE 48596
// continue ;
48594: GO 48484
// h := hex [ 2 ] ;
48596: LD_ADDR_VAR 0 13
48600: PUSH
48601: LD_VAR 0 4
48605: PUSH
48606: LD_INT 2
48608: ARRAY
48609: ST_TO_ADDR
// if h + 7 < height then
48610: LD_VAR 0 13
48614: PUSH
48615: LD_INT 7
48617: PLUS
48618: PUSH
48619: LD_VAR 0 15
48623: LESS
48624: IFFALSE 48653
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48626: LD_ADDR_VAR 0 18
48630: PUSH
48631: LD_INT 7
48633: PUSH
48634: LD_INT 28
48636: PUSH
48637: LD_INT 45
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: PUSH
48645: LD_VAR 0 12
48649: ARRAY
48650: ST_TO_ADDR
// break ;
48651: GO 48655
// end ; end ; end ;
48653: GO 48484
48655: POP
48656: POP
// end ; if not weapon then
48657: LD_VAR 0 18
48661: NOT
48662: IFFALSE 48722
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48664: LD_ADDR_VAR 0 5
48668: PUSH
48669: LD_VAR 0 5
48673: PUSH
48674: LD_INT 11
48676: PUSH
48677: LD_INT 30
48679: PUSH
48680: LD_INT 49
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: DIFF
48688: ST_TO_ADDR
// if not list then
48689: LD_VAR 0 5
48693: NOT
48694: IFFALSE 48698
// exit ;
48696: GO 48840
// weapon := list [ rand ( 1 , list ) ] ;
48698: LD_ADDR_VAR 0 18
48702: PUSH
48703: LD_VAR 0 5
48707: PUSH
48708: LD_INT 1
48710: PPUSH
48711: LD_VAR 0 5
48715: PPUSH
48716: CALL_OW 12
48720: ARRAY
48721: ST_TO_ADDR
// end ; if weapon then
48722: LD_VAR 0 18
48726: IFFALSE 48840
// begin tmp := CostOfWeapon ( weapon ) ;
48728: LD_ADDR_VAR 0 14
48732: PUSH
48733: LD_VAR 0 18
48737: PPUSH
48738: CALL_OW 451
48742: ST_TO_ADDR
// j := GetBase ( tower ) ;
48743: LD_ADDR_VAR 0 9
48747: PUSH
48748: LD_VAR 0 1
48752: PPUSH
48753: CALL_OW 274
48757: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48758: LD_VAR 0 9
48762: PPUSH
48763: LD_INT 1
48765: PPUSH
48766: CALL_OW 275
48770: PUSH
48771: LD_VAR 0 14
48775: PUSH
48776: LD_INT 1
48778: ARRAY
48779: GREATEREQUAL
48780: PUSH
48781: LD_VAR 0 9
48785: PPUSH
48786: LD_INT 2
48788: PPUSH
48789: CALL_OW 275
48793: PUSH
48794: LD_VAR 0 14
48798: PUSH
48799: LD_INT 2
48801: ARRAY
48802: GREATEREQUAL
48803: AND
48804: PUSH
48805: LD_VAR 0 9
48809: PPUSH
48810: LD_INT 3
48812: PPUSH
48813: CALL_OW 275
48817: PUSH
48818: LD_VAR 0 14
48822: PUSH
48823: LD_INT 3
48825: ARRAY
48826: GREATEREQUAL
48827: AND
48828: IFFALSE 48840
// result := weapon ;
48830: LD_ADDR_VAR 0 3
48834: PUSH
48835: LD_VAR 0 18
48839: ST_TO_ADDR
// end ; end ;
48840: LD_VAR 0 3
48844: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48845: LD_INT 0
48847: PPUSH
48848: PPUSH
// result := true ;
48849: LD_ADDR_VAR 0 3
48853: PUSH
48854: LD_INT 1
48856: ST_TO_ADDR
// if array1 = array2 then
48857: LD_VAR 0 1
48861: PUSH
48862: LD_VAR 0 2
48866: EQUAL
48867: IFFALSE 48927
// begin for i = 1 to array1 do
48869: LD_ADDR_VAR 0 4
48873: PUSH
48874: DOUBLE
48875: LD_INT 1
48877: DEC
48878: ST_TO_ADDR
48879: LD_VAR 0 1
48883: PUSH
48884: FOR_TO
48885: IFFALSE 48923
// if array1 [ i ] <> array2 [ i ] then
48887: LD_VAR 0 1
48891: PUSH
48892: LD_VAR 0 4
48896: ARRAY
48897: PUSH
48898: LD_VAR 0 2
48902: PUSH
48903: LD_VAR 0 4
48907: ARRAY
48908: NONEQUAL
48909: IFFALSE 48921
// begin result := false ;
48911: LD_ADDR_VAR 0 3
48915: PUSH
48916: LD_INT 0
48918: ST_TO_ADDR
// break ;
48919: GO 48923
// end ;
48921: GO 48884
48923: POP
48924: POP
// end else
48925: GO 48935
// result := false ;
48927: LD_ADDR_VAR 0 3
48931: PUSH
48932: LD_INT 0
48934: ST_TO_ADDR
// end ;
48935: LD_VAR 0 3
48939: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48940: LD_INT 0
48942: PPUSH
48943: PPUSH
// if not array1 or not array2 then
48944: LD_VAR 0 1
48948: NOT
48949: PUSH
48950: LD_VAR 0 2
48954: NOT
48955: OR
48956: IFFALSE 48960
// exit ;
48958: GO 49024
// result := true ;
48960: LD_ADDR_VAR 0 3
48964: PUSH
48965: LD_INT 1
48967: ST_TO_ADDR
// for i = 1 to array1 do
48968: LD_ADDR_VAR 0 4
48972: PUSH
48973: DOUBLE
48974: LD_INT 1
48976: DEC
48977: ST_TO_ADDR
48978: LD_VAR 0 1
48982: PUSH
48983: FOR_TO
48984: IFFALSE 49022
// if array1 [ i ] <> array2 [ i ] then
48986: LD_VAR 0 1
48990: PUSH
48991: LD_VAR 0 4
48995: ARRAY
48996: PUSH
48997: LD_VAR 0 2
49001: PUSH
49002: LD_VAR 0 4
49006: ARRAY
49007: NONEQUAL
49008: IFFALSE 49020
// begin result := false ;
49010: LD_ADDR_VAR 0 3
49014: PUSH
49015: LD_INT 0
49017: ST_TO_ADDR
// break ;
49018: GO 49022
// end ;
49020: GO 48983
49022: POP
49023: POP
// end ;
49024: LD_VAR 0 3
49028: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49029: LD_INT 0
49031: PPUSH
49032: PPUSH
49033: PPUSH
// pom := GetBase ( fac ) ;
49034: LD_ADDR_VAR 0 5
49038: PUSH
49039: LD_VAR 0 1
49043: PPUSH
49044: CALL_OW 274
49048: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49049: LD_ADDR_VAR 0 4
49053: PUSH
49054: LD_VAR 0 2
49058: PUSH
49059: LD_INT 1
49061: ARRAY
49062: PPUSH
49063: LD_VAR 0 2
49067: PUSH
49068: LD_INT 2
49070: ARRAY
49071: PPUSH
49072: LD_VAR 0 2
49076: PUSH
49077: LD_INT 3
49079: ARRAY
49080: PPUSH
49081: LD_VAR 0 2
49085: PUSH
49086: LD_INT 4
49088: ARRAY
49089: PPUSH
49090: CALL_OW 449
49094: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49095: LD_ADDR_VAR 0 3
49099: PUSH
49100: LD_VAR 0 5
49104: PPUSH
49105: LD_INT 1
49107: PPUSH
49108: CALL_OW 275
49112: PUSH
49113: LD_VAR 0 4
49117: PUSH
49118: LD_INT 1
49120: ARRAY
49121: GREATEREQUAL
49122: PUSH
49123: LD_VAR 0 5
49127: PPUSH
49128: LD_INT 2
49130: PPUSH
49131: CALL_OW 275
49135: PUSH
49136: LD_VAR 0 4
49140: PUSH
49141: LD_INT 2
49143: ARRAY
49144: GREATEREQUAL
49145: AND
49146: PUSH
49147: LD_VAR 0 5
49151: PPUSH
49152: LD_INT 3
49154: PPUSH
49155: CALL_OW 275
49159: PUSH
49160: LD_VAR 0 4
49164: PUSH
49165: LD_INT 3
49167: ARRAY
49168: GREATEREQUAL
49169: AND
49170: ST_TO_ADDR
// end ;
49171: LD_VAR 0 3
49175: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49176: LD_INT 0
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
// pom := GetBase ( building ) ;
49182: LD_ADDR_VAR 0 3
49186: PUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: CALL_OW 274
49196: ST_TO_ADDR
// if not pom then
49197: LD_VAR 0 3
49201: NOT
49202: IFFALSE 49206
// exit ;
49204: GO 49376
// btype := GetBType ( building ) ;
49206: LD_ADDR_VAR 0 5
49210: PUSH
49211: LD_VAR 0 1
49215: PPUSH
49216: CALL_OW 266
49220: ST_TO_ADDR
// if btype = b_armoury then
49221: LD_VAR 0 5
49225: PUSH
49226: LD_INT 4
49228: EQUAL
49229: IFFALSE 49239
// btype := b_barracks ;
49231: LD_ADDR_VAR 0 5
49235: PUSH
49236: LD_INT 5
49238: ST_TO_ADDR
// if btype = b_depot then
49239: LD_VAR 0 5
49243: PUSH
49244: LD_INT 0
49246: EQUAL
49247: IFFALSE 49257
// btype := b_warehouse ;
49249: LD_ADDR_VAR 0 5
49253: PUSH
49254: LD_INT 1
49256: ST_TO_ADDR
// if btype = b_workshop then
49257: LD_VAR 0 5
49261: PUSH
49262: LD_INT 2
49264: EQUAL
49265: IFFALSE 49275
// btype := b_factory ;
49267: LD_ADDR_VAR 0 5
49271: PUSH
49272: LD_INT 3
49274: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49275: LD_ADDR_VAR 0 4
49279: PUSH
49280: LD_VAR 0 5
49284: PPUSH
49285: LD_VAR 0 1
49289: PPUSH
49290: CALL_OW 248
49294: PPUSH
49295: CALL_OW 450
49299: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49300: LD_ADDR_VAR 0 2
49304: PUSH
49305: LD_VAR 0 3
49309: PPUSH
49310: LD_INT 1
49312: PPUSH
49313: CALL_OW 275
49317: PUSH
49318: LD_VAR 0 4
49322: PUSH
49323: LD_INT 1
49325: ARRAY
49326: GREATEREQUAL
49327: PUSH
49328: LD_VAR 0 3
49332: PPUSH
49333: LD_INT 2
49335: PPUSH
49336: CALL_OW 275
49340: PUSH
49341: LD_VAR 0 4
49345: PUSH
49346: LD_INT 2
49348: ARRAY
49349: GREATEREQUAL
49350: AND
49351: PUSH
49352: LD_VAR 0 3
49356: PPUSH
49357: LD_INT 3
49359: PPUSH
49360: CALL_OW 275
49364: PUSH
49365: LD_VAR 0 4
49369: PUSH
49370: LD_INT 3
49372: ARRAY
49373: GREATEREQUAL
49374: AND
49375: ST_TO_ADDR
// end ;
49376: LD_VAR 0 2
49380: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49381: LD_INT 0
49383: PPUSH
49384: PPUSH
49385: PPUSH
// pom := GetBase ( building ) ;
49386: LD_ADDR_VAR 0 4
49390: PUSH
49391: LD_VAR 0 1
49395: PPUSH
49396: CALL_OW 274
49400: ST_TO_ADDR
// if not pom then
49401: LD_VAR 0 4
49405: NOT
49406: IFFALSE 49410
// exit ;
49408: GO 49511
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49410: LD_ADDR_VAR 0 5
49414: PUSH
49415: LD_VAR 0 2
49419: PPUSH
49420: LD_VAR 0 1
49424: PPUSH
49425: CALL_OW 248
49429: PPUSH
49430: CALL_OW 450
49434: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49435: LD_ADDR_VAR 0 3
49439: PUSH
49440: LD_VAR 0 4
49444: PPUSH
49445: LD_INT 1
49447: PPUSH
49448: CALL_OW 275
49452: PUSH
49453: LD_VAR 0 5
49457: PUSH
49458: LD_INT 1
49460: ARRAY
49461: GREATEREQUAL
49462: PUSH
49463: LD_VAR 0 4
49467: PPUSH
49468: LD_INT 2
49470: PPUSH
49471: CALL_OW 275
49475: PUSH
49476: LD_VAR 0 5
49480: PUSH
49481: LD_INT 2
49483: ARRAY
49484: GREATEREQUAL
49485: AND
49486: PUSH
49487: LD_VAR 0 4
49491: PPUSH
49492: LD_INT 3
49494: PPUSH
49495: CALL_OW 275
49499: PUSH
49500: LD_VAR 0 5
49504: PUSH
49505: LD_INT 3
49507: ARRAY
49508: GREATEREQUAL
49509: AND
49510: ST_TO_ADDR
// end ;
49511: LD_VAR 0 3
49515: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49516: LD_INT 0
49518: PPUSH
49519: PPUSH
49520: PPUSH
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
// result := false ;
49529: LD_ADDR_VAR 0 8
49533: PUSH
49534: LD_INT 0
49536: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49537: LD_VAR 0 5
49541: NOT
49542: PUSH
49543: LD_VAR 0 1
49547: NOT
49548: OR
49549: PUSH
49550: LD_VAR 0 2
49554: NOT
49555: OR
49556: PUSH
49557: LD_VAR 0 3
49561: NOT
49562: OR
49563: IFFALSE 49567
// exit ;
49565: GO 50381
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49567: LD_ADDR_VAR 0 14
49571: PUSH
49572: LD_VAR 0 1
49576: PPUSH
49577: LD_VAR 0 2
49581: PPUSH
49582: LD_VAR 0 3
49586: PPUSH
49587: LD_VAR 0 4
49591: PPUSH
49592: LD_VAR 0 5
49596: PUSH
49597: LD_INT 1
49599: ARRAY
49600: PPUSH
49601: CALL_OW 248
49605: PPUSH
49606: LD_INT 0
49608: PPUSH
49609: CALL 51618 0 6
49613: ST_TO_ADDR
// if not hexes then
49614: LD_VAR 0 14
49618: NOT
49619: IFFALSE 49623
// exit ;
49621: GO 50381
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49623: LD_ADDR_VAR 0 17
49627: PUSH
49628: LD_VAR 0 5
49632: PPUSH
49633: LD_INT 22
49635: PUSH
49636: LD_VAR 0 13
49640: PPUSH
49641: CALL_OW 255
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 30
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 30
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PPUSH
49682: CALL_OW 72
49686: ST_TO_ADDR
// for i = 1 to hexes do
49687: LD_ADDR_VAR 0 9
49691: PUSH
49692: DOUBLE
49693: LD_INT 1
49695: DEC
49696: ST_TO_ADDR
49697: LD_VAR 0 14
49701: PUSH
49702: FOR_TO
49703: IFFALSE 50379
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49705: LD_ADDR_VAR 0 13
49709: PUSH
49710: LD_VAR 0 14
49714: PUSH
49715: LD_VAR 0 9
49719: ARRAY
49720: PUSH
49721: LD_INT 1
49723: ARRAY
49724: PPUSH
49725: LD_VAR 0 14
49729: PUSH
49730: LD_VAR 0 9
49734: ARRAY
49735: PUSH
49736: LD_INT 2
49738: ARRAY
49739: PPUSH
49740: CALL_OW 428
49744: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49745: LD_VAR 0 14
49749: PUSH
49750: LD_VAR 0 9
49754: ARRAY
49755: PUSH
49756: LD_INT 1
49758: ARRAY
49759: PPUSH
49760: LD_VAR 0 14
49764: PUSH
49765: LD_VAR 0 9
49769: ARRAY
49770: PUSH
49771: LD_INT 2
49773: ARRAY
49774: PPUSH
49775: CALL_OW 351
49779: PUSH
49780: LD_VAR 0 14
49784: PUSH
49785: LD_VAR 0 9
49789: ARRAY
49790: PUSH
49791: LD_INT 1
49793: ARRAY
49794: PPUSH
49795: LD_VAR 0 14
49799: PUSH
49800: LD_VAR 0 9
49804: ARRAY
49805: PUSH
49806: LD_INT 2
49808: ARRAY
49809: PPUSH
49810: CALL_OW 488
49814: NOT
49815: OR
49816: PUSH
49817: LD_VAR 0 13
49821: PPUSH
49822: CALL_OW 247
49826: PUSH
49827: LD_INT 3
49829: EQUAL
49830: OR
49831: IFFALSE 49837
// exit ;
49833: POP
49834: POP
49835: GO 50381
// if not tmp then
49837: LD_VAR 0 13
49841: NOT
49842: IFFALSE 49846
// continue ;
49844: GO 49702
// result := true ;
49846: LD_ADDR_VAR 0 8
49850: PUSH
49851: LD_INT 1
49853: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49854: LD_VAR 0 6
49858: PUSH
49859: LD_VAR 0 13
49863: PPUSH
49864: CALL_OW 247
49868: PUSH
49869: LD_INT 2
49871: EQUAL
49872: AND
49873: PUSH
49874: LD_VAR 0 13
49878: PPUSH
49879: CALL_OW 263
49883: PUSH
49884: LD_INT 1
49886: EQUAL
49887: AND
49888: IFFALSE 50052
// begin if IsDrivenBy ( tmp ) then
49890: LD_VAR 0 13
49894: PPUSH
49895: CALL_OW 311
49899: IFFALSE 49903
// continue ;
49901: GO 49702
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49903: LD_VAR 0 6
49907: PPUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 60
49913: PUSH
49914: EMPTY
49915: LIST
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: PUSH
49924: LD_INT 55
49926: PUSH
49927: EMPTY
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PPUSH
49938: CALL_OW 72
49942: IFFALSE 50050
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49944: LD_ADDR_VAR 0 18
49948: PUSH
49949: LD_VAR 0 6
49953: PPUSH
49954: LD_INT 3
49956: PUSH
49957: LD_INT 60
49959: PUSH
49960: EMPTY
49961: LIST
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: PUSH
49970: LD_INT 55
49972: PUSH
49973: EMPTY
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PPUSH
49984: CALL_OW 72
49988: PUSH
49989: LD_INT 1
49991: ARRAY
49992: ST_TO_ADDR
// if IsInUnit ( driver ) then
49993: LD_VAR 0 18
49997: PPUSH
49998: CALL_OW 310
50002: IFFALSE 50013
// ComExit ( driver ) ;
50004: LD_VAR 0 18
50008: PPUSH
50009: CALL 74802 0 1
// AddComEnterUnit ( driver , tmp ) ;
50013: LD_VAR 0 18
50017: PPUSH
50018: LD_VAR 0 13
50022: PPUSH
50023: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50027: LD_VAR 0 18
50031: PPUSH
50032: LD_VAR 0 7
50036: PPUSH
50037: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50041: LD_VAR 0 18
50045: PPUSH
50046: CALL_OW 181
// end ; continue ;
50050: GO 49702
// end ; if not cleaners or not tmp in cleaners then
50052: LD_VAR 0 6
50056: NOT
50057: PUSH
50058: LD_VAR 0 13
50062: PUSH
50063: LD_VAR 0 6
50067: IN
50068: NOT
50069: OR
50070: IFFALSE 50377
// begin if dep then
50072: LD_VAR 0 17
50076: IFFALSE 50212
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50078: LD_ADDR_VAR 0 16
50082: PUSH
50083: LD_VAR 0 17
50087: PUSH
50088: LD_INT 1
50090: ARRAY
50091: PPUSH
50092: CALL_OW 250
50096: PPUSH
50097: LD_VAR 0 17
50101: PUSH
50102: LD_INT 1
50104: ARRAY
50105: PPUSH
50106: CALL_OW 254
50110: PPUSH
50111: LD_INT 5
50113: PPUSH
50114: CALL_OW 272
50118: PUSH
50119: LD_VAR 0 17
50123: PUSH
50124: LD_INT 1
50126: ARRAY
50127: PPUSH
50128: CALL_OW 251
50132: PPUSH
50133: LD_VAR 0 17
50137: PUSH
50138: LD_INT 1
50140: ARRAY
50141: PPUSH
50142: CALL_OW 254
50146: PPUSH
50147: LD_INT 5
50149: PPUSH
50150: CALL_OW 273
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50159: LD_VAR 0 16
50163: PUSH
50164: LD_INT 1
50166: ARRAY
50167: PPUSH
50168: LD_VAR 0 16
50172: PUSH
50173: LD_INT 2
50175: ARRAY
50176: PPUSH
50177: CALL_OW 488
50181: IFFALSE 50212
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50183: LD_VAR 0 13
50187: PPUSH
50188: LD_VAR 0 16
50192: PUSH
50193: LD_INT 1
50195: ARRAY
50196: PPUSH
50197: LD_VAR 0 16
50201: PUSH
50202: LD_INT 2
50204: ARRAY
50205: PPUSH
50206: CALL_OW 111
// continue ;
50210: GO 49702
// end ; end ; r := GetDir ( tmp ) ;
50212: LD_ADDR_VAR 0 15
50216: PUSH
50217: LD_VAR 0 13
50221: PPUSH
50222: CALL_OW 254
50226: ST_TO_ADDR
// if r = 5 then
50227: LD_VAR 0 15
50231: PUSH
50232: LD_INT 5
50234: EQUAL
50235: IFFALSE 50245
// r := 0 ;
50237: LD_ADDR_VAR 0 15
50241: PUSH
50242: LD_INT 0
50244: ST_TO_ADDR
// for j = r to 5 do
50245: LD_ADDR_VAR 0 10
50249: PUSH
50250: DOUBLE
50251: LD_VAR 0 15
50255: DEC
50256: ST_TO_ADDR
50257: LD_INT 5
50259: PUSH
50260: FOR_TO
50261: IFFALSE 50375
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50263: LD_ADDR_VAR 0 11
50267: PUSH
50268: LD_VAR 0 13
50272: PPUSH
50273: CALL_OW 250
50277: PPUSH
50278: LD_VAR 0 10
50282: PPUSH
50283: LD_INT 2
50285: PPUSH
50286: CALL_OW 272
50290: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50291: LD_ADDR_VAR 0 12
50295: PUSH
50296: LD_VAR 0 13
50300: PPUSH
50301: CALL_OW 251
50305: PPUSH
50306: LD_VAR 0 10
50310: PPUSH
50311: LD_INT 2
50313: PPUSH
50314: CALL_OW 273
50318: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50319: LD_VAR 0 11
50323: PPUSH
50324: LD_VAR 0 12
50328: PPUSH
50329: CALL_OW 488
50333: PUSH
50334: LD_VAR 0 11
50338: PPUSH
50339: LD_VAR 0 12
50343: PPUSH
50344: CALL_OW 428
50348: NOT
50349: AND
50350: IFFALSE 50373
// begin ComMoveXY ( tmp , _x , _y ) ;
50352: LD_VAR 0 13
50356: PPUSH
50357: LD_VAR 0 11
50361: PPUSH
50362: LD_VAR 0 12
50366: PPUSH
50367: CALL_OW 111
// break ;
50371: GO 50375
// end ; end ;
50373: GO 50260
50375: POP
50376: POP
// end ; end ;
50377: GO 49702
50379: POP
50380: POP
// end ;
50381: LD_VAR 0 8
50385: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50386: LD_INT 0
50388: PPUSH
// result := true ;
50389: LD_ADDR_VAR 0 3
50393: PUSH
50394: LD_INT 1
50396: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50397: LD_VAR 0 2
50401: PUSH
50402: LD_INT 24
50404: DOUBLE
50405: EQUAL
50406: IFTRUE 50416
50408: LD_INT 33
50410: DOUBLE
50411: EQUAL
50412: IFTRUE 50416
50414: GO 50441
50416: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50417: LD_ADDR_VAR 0 3
50421: PUSH
50422: LD_INT 32
50424: PPUSH
50425: LD_VAR 0 1
50429: PPUSH
50430: CALL_OW 321
50434: PUSH
50435: LD_INT 2
50437: EQUAL
50438: ST_TO_ADDR
50439: GO 50761
50441: LD_INT 20
50443: DOUBLE
50444: EQUAL
50445: IFTRUE 50449
50447: GO 50474
50449: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50450: LD_ADDR_VAR 0 3
50454: PUSH
50455: LD_INT 6
50457: PPUSH
50458: LD_VAR 0 1
50462: PPUSH
50463: CALL_OW 321
50467: PUSH
50468: LD_INT 2
50470: EQUAL
50471: ST_TO_ADDR
50472: GO 50761
50474: LD_INT 22
50476: DOUBLE
50477: EQUAL
50478: IFTRUE 50488
50480: LD_INT 36
50482: DOUBLE
50483: EQUAL
50484: IFTRUE 50488
50486: GO 50513
50488: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50489: LD_ADDR_VAR 0 3
50493: PUSH
50494: LD_INT 15
50496: PPUSH
50497: LD_VAR 0 1
50501: PPUSH
50502: CALL_OW 321
50506: PUSH
50507: LD_INT 2
50509: EQUAL
50510: ST_TO_ADDR
50511: GO 50761
50513: LD_INT 30
50515: DOUBLE
50516: EQUAL
50517: IFTRUE 50521
50519: GO 50546
50521: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50522: LD_ADDR_VAR 0 3
50526: PUSH
50527: LD_INT 20
50529: PPUSH
50530: LD_VAR 0 1
50534: PPUSH
50535: CALL_OW 321
50539: PUSH
50540: LD_INT 2
50542: EQUAL
50543: ST_TO_ADDR
50544: GO 50761
50546: LD_INT 28
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50560
50552: LD_INT 21
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50560
50558: GO 50585
50560: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50561: LD_ADDR_VAR 0 3
50565: PUSH
50566: LD_INT 21
50568: PPUSH
50569: LD_VAR 0 1
50573: PPUSH
50574: CALL_OW 321
50578: PUSH
50579: LD_INT 2
50581: EQUAL
50582: ST_TO_ADDR
50583: GO 50761
50585: LD_INT 16
50587: DOUBLE
50588: EQUAL
50589: IFTRUE 50593
50591: GO 50620
50593: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50594: LD_ADDR_VAR 0 3
50598: PUSH
50599: LD_EXP 62
50603: PPUSH
50604: LD_VAR 0 1
50608: PPUSH
50609: CALL_OW 321
50613: PUSH
50614: LD_INT 2
50616: EQUAL
50617: ST_TO_ADDR
50618: GO 50761
50620: LD_INT 19
50622: DOUBLE
50623: EQUAL
50624: IFTRUE 50634
50626: LD_INT 23
50628: DOUBLE
50629: EQUAL
50630: IFTRUE 50634
50632: GO 50661
50634: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50635: LD_ADDR_VAR 0 3
50639: PUSH
50640: LD_EXP 61
50644: PPUSH
50645: LD_VAR 0 1
50649: PPUSH
50650: CALL_OW 321
50654: PUSH
50655: LD_INT 2
50657: EQUAL
50658: ST_TO_ADDR
50659: GO 50761
50661: LD_INT 17
50663: DOUBLE
50664: EQUAL
50665: IFTRUE 50669
50667: GO 50694
50669: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50670: LD_ADDR_VAR 0 3
50674: PUSH
50675: LD_INT 39
50677: PPUSH
50678: LD_VAR 0 1
50682: PPUSH
50683: CALL_OW 321
50687: PUSH
50688: LD_INT 2
50690: EQUAL
50691: ST_TO_ADDR
50692: GO 50761
50694: LD_INT 18
50696: DOUBLE
50697: EQUAL
50698: IFTRUE 50702
50700: GO 50727
50702: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50703: LD_ADDR_VAR 0 3
50707: PUSH
50708: LD_INT 40
50710: PPUSH
50711: LD_VAR 0 1
50715: PPUSH
50716: CALL_OW 321
50720: PUSH
50721: LD_INT 2
50723: EQUAL
50724: ST_TO_ADDR
50725: GO 50761
50727: LD_INT 27
50729: DOUBLE
50730: EQUAL
50731: IFTRUE 50735
50733: GO 50760
50735: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50736: LD_ADDR_VAR 0 3
50740: PUSH
50741: LD_INT 35
50743: PPUSH
50744: LD_VAR 0 1
50748: PPUSH
50749: CALL_OW 321
50753: PUSH
50754: LD_INT 2
50756: EQUAL
50757: ST_TO_ADDR
50758: GO 50761
50760: POP
// end ;
50761: LD_VAR 0 3
50765: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50766: LD_INT 0
50768: PPUSH
50769: PPUSH
50770: PPUSH
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
// result := false ;
50779: LD_ADDR_VAR 0 6
50783: PUSH
50784: LD_INT 0
50786: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50787: LD_VAR 0 1
50791: NOT
50792: PUSH
50793: LD_VAR 0 1
50797: PPUSH
50798: CALL_OW 266
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: IN
50813: NOT
50814: OR
50815: PUSH
50816: LD_VAR 0 2
50820: NOT
50821: OR
50822: PUSH
50823: LD_VAR 0 5
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: LD_INT 4
50842: PUSH
50843: LD_INT 5
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: IN
50854: NOT
50855: OR
50856: PUSH
50857: LD_VAR 0 3
50861: PPUSH
50862: LD_VAR 0 4
50866: PPUSH
50867: CALL_OW 488
50871: NOT
50872: OR
50873: IFFALSE 50877
// exit ;
50875: GO 51613
// side := GetSide ( depot ) ;
50877: LD_ADDR_VAR 0 9
50881: PUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: CALL_OW 255
50891: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50892: LD_VAR 0 9
50896: PPUSH
50897: LD_VAR 0 2
50901: PPUSH
50902: CALL 50386 0 2
50906: NOT
50907: IFFALSE 50911
// exit ;
50909: GO 51613
// pom := GetBase ( depot ) ;
50911: LD_ADDR_VAR 0 10
50915: PUSH
50916: LD_VAR 0 1
50920: PPUSH
50921: CALL_OW 274
50925: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50926: LD_ADDR_VAR 0 11
50930: PUSH
50931: LD_VAR 0 2
50935: PPUSH
50936: LD_VAR 0 1
50940: PPUSH
50941: CALL_OW 248
50945: PPUSH
50946: CALL_OW 450
50950: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50951: LD_VAR 0 10
50955: PPUSH
50956: LD_INT 1
50958: PPUSH
50959: CALL_OW 275
50963: PUSH
50964: LD_VAR 0 11
50968: PUSH
50969: LD_INT 1
50971: ARRAY
50972: GREATEREQUAL
50973: PUSH
50974: LD_VAR 0 10
50978: PPUSH
50979: LD_INT 2
50981: PPUSH
50982: CALL_OW 275
50986: PUSH
50987: LD_VAR 0 11
50991: PUSH
50992: LD_INT 2
50994: ARRAY
50995: GREATEREQUAL
50996: AND
50997: PUSH
50998: LD_VAR 0 10
51002: PPUSH
51003: LD_INT 3
51005: PPUSH
51006: CALL_OW 275
51010: PUSH
51011: LD_VAR 0 11
51015: PUSH
51016: LD_INT 3
51018: ARRAY
51019: GREATEREQUAL
51020: AND
51021: NOT
51022: IFFALSE 51026
// exit ;
51024: GO 51613
// if GetBType ( depot ) = b_depot then
51026: LD_VAR 0 1
51030: PPUSH
51031: CALL_OW 266
51035: PUSH
51036: LD_INT 0
51038: EQUAL
51039: IFFALSE 51051
// dist := 28 else
51041: LD_ADDR_VAR 0 14
51045: PUSH
51046: LD_INT 28
51048: ST_TO_ADDR
51049: GO 51059
// dist := 36 ;
51051: LD_ADDR_VAR 0 14
51055: PUSH
51056: LD_INT 36
51058: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51059: LD_VAR 0 1
51063: PPUSH
51064: LD_VAR 0 3
51068: PPUSH
51069: LD_VAR 0 4
51073: PPUSH
51074: CALL_OW 297
51078: PUSH
51079: LD_VAR 0 14
51083: GREATER
51084: IFFALSE 51088
// exit ;
51086: GO 51613
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51088: LD_ADDR_VAR 0 12
51092: PUSH
51093: LD_VAR 0 2
51097: PPUSH
51098: LD_VAR 0 3
51102: PPUSH
51103: LD_VAR 0 4
51107: PPUSH
51108: LD_VAR 0 5
51112: PPUSH
51113: LD_VAR 0 1
51117: PPUSH
51118: CALL_OW 248
51122: PPUSH
51123: LD_INT 0
51125: PPUSH
51126: CALL 51618 0 6
51130: ST_TO_ADDR
// if not hexes then
51131: LD_VAR 0 12
51135: NOT
51136: IFFALSE 51140
// exit ;
51138: GO 51613
// hex := GetHexInfo ( x , y ) ;
51140: LD_ADDR_VAR 0 15
51144: PUSH
51145: LD_VAR 0 3
51149: PPUSH
51150: LD_VAR 0 4
51154: PPUSH
51155: CALL_OW 546
51159: ST_TO_ADDR
// if hex [ 1 ] then
51160: LD_VAR 0 15
51164: PUSH
51165: LD_INT 1
51167: ARRAY
51168: IFFALSE 51172
// exit ;
51170: GO 51613
// height := hex [ 2 ] ;
51172: LD_ADDR_VAR 0 13
51176: PUSH
51177: LD_VAR 0 15
51181: PUSH
51182: LD_INT 2
51184: ARRAY
51185: ST_TO_ADDR
// for i = 1 to hexes do
51186: LD_ADDR_VAR 0 7
51190: PUSH
51191: DOUBLE
51192: LD_INT 1
51194: DEC
51195: ST_TO_ADDR
51196: LD_VAR 0 12
51200: PUSH
51201: FOR_TO
51202: IFFALSE 51532
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51204: LD_VAR 0 12
51208: PUSH
51209: LD_VAR 0 7
51213: ARRAY
51214: PUSH
51215: LD_INT 1
51217: ARRAY
51218: PPUSH
51219: LD_VAR 0 12
51223: PUSH
51224: LD_VAR 0 7
51228: ARRAY
51229: PUSH
51230: LD_INT 2
51232: ARRAY
51233: PPUSH
51234: CALL_OW 488
51238: NOT
51239: PUSH
51240: LD_VAR 0 12
51244: PUSH
51245: LD_VAR 0 7
51249: ARRAY
51250: PUSH
51251: LD_INT 1
51253: ARRAY
51254: PPUSH
51255: LD_VAR 0 12
51259: PUSH
51260: LD_VAR 0 7
51264: ARRAY
51265: PUSH
51266: LD_INT 2
51268: ARRAY
51269: PPUSH
51270: CALL_OW 428
51274: PUSH
51275: LD_INT 0
51277: GREATER
51278: OR
51279: PUSH
51280: LD_VAR 0 12
51284: PUSH
51285: LD_VAR 0 7
51289: ARRAY
51290: PUSH
51291: LD_INT 1
51293: ARRAY
51294: PPUSH
51295: LD_VAR 0 12
51299: PUSH
51300: LD_VAR 0 7
51304: ARRAY
51305: PUSH
51306: LD_INT 2
51308: ARRAY
51309: PPUSH
51310: CALL_OW 351
51314: OR
51315: IFFALSE 51321
// exit ;
51317: POP
51318: POP
51319: GO 51613
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51321: LD_ADDR_VAR 0 8
51325: PUSH
51326: LD_VAR 0 12
51330: PUSH
51331: LD_VAR 0 7
51335: ARRAY
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PPUSH
51341: LD_VAR 0 12
51345: PUSH
51346: LD_VAR 0 7
51350: ARRAY
51351: PUSH
51352: LD_INT 2
51354: ARRAY
51355: PPUSH
51356: CALL_OW 546
51360: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51361: LD_VAR 0 8
51365: PUSH
51366: LD_INT 1
51368: ARRAY
51369: PUSH
51370: LD_VAR 0 8
51374: PUSH
51375: LD_INT 2
51377: ARRAY
51378: PUSH
51379: LD_VAR 0 13
51383: PUSH
51384: LD_INT 2
51386: PLUS
51387: GREATER
51388: OR
51389: PUSH
51390: LD_VAR 0 8
51394: PUSH
51395: LD_INT 2
51397: ARRAY
51398: PUSH
51399: LD_VAR 0 13
51403: PUSH
51404: LD_INT 2
51406: MINUS
51407: LESS
51408: OR
51409: PUSH
51410: LD_VAR 0 8
51414: PUSH
51415: LD_INT 3
51417: ARRAY
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 8
51424: PUSH
51425: LD_INT 9
51427: PUSH
51428: LD_INT 10
51430: PUSH
51431: LD_INT 11
51433: PUSH
51434: LD_INT 12
51436: PUSH
51437: LD_INT 13
51439: PUSH
51440: LD_INT 16
51442: PUSH
51443: LD_INT 17
51445: PUSH
51446: LD_INT 18
51448: PUSH
51449: LD_INT 19
51451: PUSH
51452: LD_INT 20
51454: PUSH
51455: LD_INT 21
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: IN
51473: NOT
51474: OR
51475: PUSH
51476: LD_VAR 0 8
51480: PUSH
51481: LD_INT 5
51483: ARRAY
51484: NOT
51485: OR
51486: PUSH
51487: LD_VAR 0 8
51491: PUSH
51492: LD_INT 6
51494: ARRAY
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 7
51504: PUSH
51505: LD_INT 9
51507: PUSH
51508: LD_INT 10
51510: PUSH
51511: LD_INT 11
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: IN
51522: NOT
51523: OR
51524: IFFALSE 51530
// exit ;
51526: POP
51527: POP
51528: GO 51613
// end ;
51530: GO 51201
51532: POP
51533: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51534: LD_VAR 0 9
51538: PPUSH
51539: LD_VAR 0 3
51543: PPUSH
51544: LD_VAR 0 4
51548: PPUSH
51549: LD_INT 20
51551: PPUSH
51552: CALL 43559 0 4
51556: PUSH
51557: LD_INT 4
51559: ARRAY
51560: IFFALSE 51564
// exit ;
51562: GO 51613
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51564: LD_VAR 0 2
51568: PUSH
51569: LD_INT 29
51571: PUSH
51572: LD_INT 30
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: IN
51579: PUSH
51580: LD_VAR 0 3
51584: PPUSH
51585: LD_VAR 0 4
51589: PPUSH
51590: LD_VAR 0 9
51594: PPUSH
51595: CALL_OW 440
51599: NOT
51600: AND
51601: IFFALSE 51605
// exit ;
51603: GO 51613
// result := true ;
51605: LD_ADDR_VAR 0 6
51609: PUSH
51610: LD_INT 1
51612: ST_TO_ADDR
// end ;
51613: LD_VAR 0 6
51617: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51618: LD_INT 0
51620: PPUSH
51621: PPUSH
51622: PPUSH
51623: PPUSH
51624: PPUSH
51625: PPUSH
51626: PPUSH
51627: PPUSH
51628: PPUSH
51629: PPUSH
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
51636: PPUSH
51637: PPUSH
51638: PPUSH
51639: PPUSH
51640: PPUSH
51641: PPUSH
51642: PPUSH
51643: PPUSH
51644: PPUSH
51645: PPUSH
51646: PPUSH
51647: PPUSH
51648: PPUSH
51649: PPUSH
51650: PPUSH
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
51658: PPUSH
51659: PPUSH
51660: PPUSH
51661: PPUSH
51662: PPUSH
51663: PPUSH
51664: PPUSH
51665: PPUSH
51666: PPUSH
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
// result = [ ] ;
51678: LD_ADDR_VAR 0 7
51682: PUSH
51683: EMPTY
51684: ST_TO_ADDR
// temp_list = [ ] ;
51685: LD_ADDR_VAR 0 9
51689: PUSH
51690: EMPTY
51691: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51692: LD_VAR 0 4
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: LD_INT 4
51711: PUSH
51712: LD_INT 5
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: IN
51723: NOT
51724: PUSH
51725: LD_VAR 0 1
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: IN
51740: PUSH
51741: LD_VAR 0 5
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: IN
51760: NOT
51761: AND
51762: OR
51763: IFFALSE 51767
// exit ;
51765: GO 70158
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51767: LD_VAR 0 1
51771: PUSH
51772: LD_INT 6
51774: PUSH
51775: LD_INT 7
51777: PUSH
51778: LD_INT 8
51780: PUSH
51781: LD_INT 13
51783: PUSH
51784: LD_INT 12
51786: PUSH
51787: LD_INT 15
51789: PUSH
51790: LD_INT 11
51792: PUSH
51793: LD_INT 14
51795: PUSH
51796: LD_INT 10
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: IN
51810: IFFALSE 51820
// btype = b_lab ;
51812: LD_ADDR_VAR 0 1
51816: PUSH
51817: LD_INT 6
51819: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51820: LD_VAR 0 6
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: IN
51839: NOT
51840: PUSH
51841: LD_VAR 0 1
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: LD_INT 6
51860: PUSH
51861: LD_INT 36
51863: PUSH
51864: LD_INT 4
51866: PUSH
51867: LD_INT 5
51869: PUSH
51870: LD_INT 31
51872: PUSH
51873: LD_INT 32
51875: PUSH
51876: LD_INT 33
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: IN
51892: NOT
51893: PUSH
51894: LD_VAR 0 6
51898: PUSH
51899: LD_INT 1
51901: EQUAL
51902: AND
51903: OR
51904: PUSH
51905: LD_VAR 0 1
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: IN
51920: NOT
51921: PUSH
51922: LD_VAR 0 6
51926: PUSH
51927: LD_INT 2
51929: EQUAL
51930: AND
51931: OR
51932: IFFALSE 51942
// mode = 0 ;
51934: LD_ADDR_VAR 0 6
51938: PUSH
51939: LD_INT 0
51941: ST_TO_ADDR
// case mode of 0 :
51942: LD_VAR 0 6
51946: PUSH
51947: LD_INT 0
51949: DOUBLE
51950: EQUAL
51951: IFTRUE 51955
51953: GO 63408
51955: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51956: LD_ADDR_VAR 0 11
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52149: LD_ADDR_VAR 0 12
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52345: LD_ADDR_VAR 0 13
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 2
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52544: LD_ADDR_VAR 0 14
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 3
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52740: LD_ADDR_VAR 0 15
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52933: LD_ADDR_VAR 0 16
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 3
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53126: LD_ADDR_VAR 0 17
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53356: LD_ADDR_VAR 0 18
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53586: LD_ADDR_VAR 0 19
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 2
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53816: LD_ADDR_VAR 0 20
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 2
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54046: LD_ADDR_VAR 0 21
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54276: LD_ADDR_VAR 0 22
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54506: LD_ADDR_VAR 0 23
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: LD_INT 3
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54786: LD_ADDR_VAR 0 24
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55062: LD_ADDR_VAR 0 25
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55336: LD_ADDR_VAR 0 26
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55612: LD_ADDR_VAR 0 27
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55892: LD_ADDR_VAR 0 28
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56174: LD_ADDR_VAR 0 29
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: NEG
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56453: LD_ADDR_VAR 0 30
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56731: LD_ADDR_VAR 0 31
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 2
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57009: LD_ADDR_VAR 0 32
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57287: LD_ADDR_VAR 0 33
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 3
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57566: LD_ADDR_VAR 0 34
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 2
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57846: LD_ADDR_VAR 0 35
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57958: LD_ADDR_VAR 0 36
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58070: LD_ADDR_VAR 0 37
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58182: LD_ADDR_VAR 0 38
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58294: LD_ADDR_VAR 0 39
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58406: LD_ADDR_VAR 0 40
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58518: LD_ADDR_VAR 0 41
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: LD_INT 0
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: LD_INT 3
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58868: LD_ADDR_VAR 0 42
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: LD_INT 3
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 3
59165: NEG
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: LD_INT 3
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59218: LD_ADDR_VAR 0 43
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 3
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59566: LD_ADDR_VAR 0 44
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 3
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 3
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59916: LD_ADDR_VAR 0 45
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 1
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 2
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 3
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: PUSH
60163: LD_INT 3
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60266: LD_ADDR_VAR 0 46
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 3
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 3
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60614: LD_ADDR_VAR 0 47
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60765: LD_ADDR_VAR 0 48
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 2
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60912: LD_ADDR_VAR 0 49
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 2
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61056: LD_ADDR_VAR 0 50
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61200: LD_ADDR_VAR 0 51
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61347: LD_ADDR_VAR 0 52
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61498: LD_ADDR_VAR 0 53
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 2
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61728: LD_ADDR_VAR 0 54
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 2
61927: NEG
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61958: LD_ADDR_VAR 0 55
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 2
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: LD_INT 2
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62188: LD_ADDR_VAR 0 56
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: NEG
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62418: LD_ADDR_VAR 0 57
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 2
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 2
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62648: LD_ADDR_VAR 0 58
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: LD_INT 1
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 2
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: NEG
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: LD_INT 1
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62878: LD_ADDR_VAR 0 59
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 0
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62966: LD_ADDR_VAR 0 60
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63054: LD_ADDR_VAR 0 61
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63142: LD_ADDR_VAR 0 62
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63230: LD_ADDR_VAR 0 63
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: NEG
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: NEG
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63318: LD_ADDR_VAR 0 64
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: ST_TO_ADDR
// end ; 1 :
63406: GO 69303
63408: LD_INT 1
63410: DOUBLE
63411: EQUAL
63412: IFTRUE 63416
63414: GO 66039
63416: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63417: LD_ADDR_VAR 0 11
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 3
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 2
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63461: LD_ADDR_VAR 0 12
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 3
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 3
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63502: LD_ADDR_VAR 0 13
63506: PUSH
63507: LD_INT 3
63509: PUSH
63510: LD_INT 2
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: LD_INT 3
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63542: LD_ADDR_VAR 0 14
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63583: LD_ADDR_VAR 0 15
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 3
63601: NEG
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63627: LD_ADDR_VAR 0 16
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: LD_INT 3
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 3
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 3
63658: NEG
63659: PUSH
63660: LD_INT 3
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63673: LD_ADDR_VAR 0 17
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63717: LD_ADDR_VAR 0 18
63721: PUSH
63722: LD_INT 2
63724: PUSH
63725: LD_INT 1
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 3
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63758: LD_ADDR_VAR 0 19
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 3
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63798: LD_ADDR_VAR 0 20
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 3
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 2
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63839: LD_ADDR_VAR 0 21
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: LD_INT 1
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63883: LD_ADDR_VAR 0 22
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: NEG
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 3
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: LIST
63928: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63929: LD_ADDR_VAR 0 23
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: LD_INT 4
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 3
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63973: LD_ADDR_VAR 0 24
63977: PUSH
63978: LD_INT 3
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 4
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: LIST
64013: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64014: LD_ADDR_VAR 0 25
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: LD_INT 3
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 4
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64054: LD_ADDR_VAR 0 26
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 3
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 4
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 3
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64095: LD_ADDR_VAR 0 27
64099: PUSH
64100: LD_INT 3
64102: NEG
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 3
64113: NEG
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 4
64124: NEG
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64139: LD_ADDR_VAR 0 28
64143: PUSH
64144: LD_INT 3
64146: NEG
64147: PUSH
64148: LD_INT 3
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 3
64158: NEG
64159: PUSH
64160: LD_INT 4
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 4
64170: NEG
64171: PUSH
64172: LD_INT 3
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64185: LD_ADDR_VAR 0 29
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 3
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 4
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 4
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 3
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: LD_INT 5
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 5
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: LD_INT 4
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: LD_INT 6
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: LD_INT 6
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 5
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64340: LD_ADDR_VAR 0 30
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 3
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 4
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 4
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 4
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 5
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 5
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 5
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 6
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 6
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64483: LD_ADDR_VAR 0 31
64487: PUSH
64488: LD_INT 3
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 3
64500: PUSH
64501: LD_INT 3
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: LD_INT 3
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 4
64520: PUSH
64521: LD_INT 3
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 4
64530: PUSH
64531: LD_INT 4
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: PUSH
64541: LD_INT 4
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 5
64550: PUSH
64551: LD_INT 4
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 5
64560: PUSH
64561: LD_INT 5
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 4
64570: PUSH
64571: LD_INT 5
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 6
64580: PUSH
64581: LD_INT 5
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 6
64590: PUSH
64591: LD_INT 6
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 5
64600: PUSH
64601: LD_INT 6
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64622: LD_ADDR_VAR 0 32
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 3
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 4
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 4
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 3
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 5
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: LD_INT 5
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: LD_INT 4
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: LD_INT 6
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 6
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: LD_INT 5
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64765: LD_ADDR_VAR 0 33
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 4
64817: NEG
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 4
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 4
64840: NEG
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 5
64851: NEG
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 5
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 5
64874: NEG
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 6
64885: NEG
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 6
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64920: LD_ADDR_VAR 0 34
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: LD_INT 3
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 3
64951: NEG
64952: PUSH
64953: LD_INT 3
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: LD_INT 4
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 4
64975: NEG
64976: PUSH
64977: LD_INT 3
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 4
64987: NEG
64988: PUSH
64989: LD_INT 4
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 4
64999: NEG
65000: PUSH
65001: LD_INT 5
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 5
65011: NEG
65012: PUSH
65013: LD_INT 4
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 5
65023: NEG
65024: PUSH
65025: LD_INT 5
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 5
65035: NEG
65036: PUSH
65037: LD_INT 6
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 6
65047: NEG
65048: PUSH
65049: LD_INT 5
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 6
65059: NEG
65060: PUSH
65061: LD_INT 6
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65083: LD_ADDR_VAR 0 41
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: LD_INT 3
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65127: LD_ADDR_VAR 0 42
65131: PUSH
65132: LD_INT 2
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65168: LD_ADDR_VAR 0 43
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: LD_INT 2
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: LD_INT 3
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65208: LD_ADDR_VAR 0 44
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65249: LD_ADDR_VAR 0 45
65253: PUSH
65254: LD_INT 2
65256: NEG
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 2
65267: NEG
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: NEG
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65293: LD_ADDR_VAR 0 46
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: LD_INT 2
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: LD_INT 2
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65339: LD_ADDR_VAR 0 47
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: LD_INT 3
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65372: LD_ADDR_VAR 0 48
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65403: LD_ADDR_VAR 0 49
65407: PUSH
65408: LD_INT 3
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 3
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65432: LD_ADDR_VAR 0 50
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: LD_INT 3
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65461: LD_ADDR_VAR 0 51
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65492: LD_ADDR_VAR 0 52
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65525: LD_ADDR_VAR 0 53
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 3
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 3
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 2
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65569: LD_ADDR_VAR 0 54
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 3
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: LIST
65609: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65610: LD_ADDR_VAR 0 55
65614: PUSH
65615: LD_INT 3
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: LD_INT 3
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65650: LD_ADDR_VAR 0 56
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: LD_INT 2
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65691: LD_ADDR_VAR 0 57
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 3
65709: NEG
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 3
65720: NEG
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65735: LD_ADDR_VAR 0 58
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: LD_INT 3
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 3
65754: NEG
65755: PUSH
65756: LD_INT 2
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 3
65766: NEG
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65781: LD_ADDR_VAR 0 59
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 2
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65825: LD_ADDR_VAR 0 60
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 2
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65866: LD_ADDR_VAR 0 61
65870: PUSH
65871: LD_INT 2
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65906: LD_ADDR_VAR 0 62
65910: PUSH
65911: LD_INT 1
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65947: LD_ADDR_VAR 0 63
65951: PUSH
65952: LD_INT 1
65954: NEG
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 2
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: LIST
65990: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65991: LD_ADDR_VAR 0 64
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 2
66010: NEG
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: LIST
66036: ST_TO_ADDR
// end ; 2 :
66037: GO 69303
66039: LD_INT 2
66041: DOUBLE
66042: EQUAL
66043: IFTRUE 66047
66045: GO 69302
66047: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66048: LD_ADDR_VAR 0 29
66052: PUSH
66053: LD_INT 4
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 4
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 5
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 5
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 4
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 5
66138: PUSH
66139: LD_INT 2
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 3
66148: PUSH
66149: LD_INT 3
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 3
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 4
66168: PUSH
66169: LD_INT 3
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 4
66178: PUSH
66179: LD_INT 4
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 3
66188: PUSH
66189: LD_INT 4
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: LD_INT 3
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 4
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 2
66228: PUSH
66229: LD_INT 4
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 4
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 3
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: LD_INT 4
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: LD_INT 5
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: LD_INT 5
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: LD_INT 4
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: LD_INT 3
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 2
66310: PUSH
66311: LD_INT 5
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 3
66331: NEG
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 3
66342: NEG
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 2
66354: NEG
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 2
66365: NEG
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: NEG
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 4
66387: NEG
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 4
66398: NEG
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 4
66410: NEG
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: LD_INT 2
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: NEG
66434: PUSH
66435: LD_INT 4
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 4
66445: NEG
66446: PUSH
66447: LD_INT 5
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: NEG
66458: PUSH
66459: LD_INT 4
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: LD_INT 3
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 4
66481: NEG
66482: PUSH
66483: LD_INT 3
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 5
66493: NEG
66494: PUSH
66495: LD_INT 4
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 5
66505: NEG
66506: PUSH
66507: LD_INT 5
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 3
66517: NEG
66518: PUSH
66519: LD_INT 5
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 5
66529: NEG
66530: PUSH
66531: LD_INT 3
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66586: LD_ADDR_VAR 0 30
66590: PUSH
66591: LD_INT 4
66593: PUSH
66594: LD_INT 4
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 4
66603: PUSH
66604: LD_INT 3
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 5
66613: PUSH
66614: LD_INT 4
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 5
66623: PUSH
66624: LD_INT 5
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 4
66633: PUSH
66634: LD_INT 5
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 3
66643: PUSH
66644: LD_INT 4
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 3
66653: PUSH
66654: LD_INT 3
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 5
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 3
66673: PUSH
66674: LD_INT 5
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 4
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 4
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: LD_INT 3
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: LD_INT 4
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 2
66765: NEG
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 4
66776: NEG
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 4
66787: NEG
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 3
66799: NEG
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 5
66832: NEG
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 5
66843: NEG
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 5
66855: NEG
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 3
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: LD_INT 4
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: LD_INT 3
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 2
66914: NEG
66915: PUSH
66916: LD_INT 2
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 3
66926: NEG
66927: PUSH
66928: LD_INT 2
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 4
66938: NEG
66939: PUSH
66940: LD_INT 3
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 4
66950: NEG
66951: PUSH
66952: LD_INT 4
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 2
66962: NEG
66963: PUSH
66964: LD_INT 4
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 4
66974: NEG
66975: PUSH
66976: LD_INT 2
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 4
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: LD_INT 5
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: LD_INT 4
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 3
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 3
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: LD_INT 4
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 5
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: LD_INT 3
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 2
67076: NEG
67077: PUSH
67078: LD_INT 5
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67133: LD_ADDR_VAR 0 31
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: LD_INT 4
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 1
67170: PUSH
67171: LD_INT 5
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: LD_INT 5
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: LD_INT 4
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: LD_INT 5
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 3
67233: NEG
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 3
67244: NEG
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: NEG
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 3
67278: NEG
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 4
67289: NEG
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 4
67300: NEG
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 4
67312: NEG
67313: PUSH
67314: LD_INT 2
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 2
67324: NEG
67325: PUSH
67326: LD_INT 2
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 4
67335: NEG
67336: PUSH
67337: LD_INT 4
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 4
67347: NEG
67348: PUSH
67349: LD_INT 5
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: NEG
67360: PUSH
67361: LD_INT 4
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: LD_INT 3
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 4
67383: NEG
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 5
67395: NEG
67396: PUSH
67397: LD_INT 4
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 5
67407: NEG
67408: PUSH
67409: LD_INT 5
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 3
67419: NEG
67420: PUSH
67421: LD_INT 5
67423: NEG
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 5
67431: NEG
67432: PUSH
67433: LD_INT 3
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: LD_INT 3
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 4
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: LD_INT 3
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 1
67476: PUSH
67477: LD_INT 2
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: LD_INT 2
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: LD_INT 3
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 1
67510: NEG
67511: PUSH
67512: LD_INT 4
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 2
67522: PUSH
67523: LD_INT 2
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: LD_INT 4
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 4
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 5
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 5
67576: PUSH
67577: LD_INT 1
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 4
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 3
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 3
67617: PUSH
67618: LD_INT 2
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 5
67628: PUSH
67629: LD_INT 2
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67683: LD_ADDR_VAR 0 32
67687: PUSH
67688: LD_INT 4
67690: NEG
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 4
67701: NEG
67702: PUSH
67703: LD_INT 1
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 3
67713: NEG
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: LD_INT 1
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 4
67735: NEG
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 5
67746: NEG
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 5
67757: NEG
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 5
67769: NEG
67770: PUSH
67771: LD_INT 2
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 3
67781: NEG
67782: PUSH
67783: LD_INT 2
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 3
67792: NEG
67793: PUSH
67794: LD_INT 3
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 3
67804: NEG
67805: PUSH
67806: LD_INT 4
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 2
67816: NEG
67817: PUSH
67818: LD_INT 3
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 2
67828: NEG
67829: PUSH
67830: LD_INT 2
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: LD_INT 2
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 4
67852: NEG
67853: PUSH
67854: LD_INT 3
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 4
67864: NEG
67865: PUSH
67866: LD_INT 4
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 2
67876: NEG
67877: PUSH
67878: LD_INT 4
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 4
67888: NEG
67889: PUSH
67890: LD_INT 2
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 4
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: LD_INT 5
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 1
67922: PUSH
67923: LD_INT 4
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: LD_INT 3
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: LD_INT 3
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: LD_INT 4
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: NEG
67968: PUSH
67969: LD_INT 5
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 2
67990: NEG
67991: PUSH
67992: LD_INT 5
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: LD_INT 1
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 4
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 4
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: LD_INT 1
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 2
68063: PUSH
68064: LD_INT 1
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: LD_INT 2
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 4
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 4
68095: PUSH
68096: LD_INT 4
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 4
68105: PUSH
68106: LD_INT 3
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 5
68115: PUSH
68116: LD_INT 4
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 5
68125: PUSH
68126: LD_INT 5
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 4
68135: PUSH
68136: LD_INT 5
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 3
68145: PUSH
68146: LD_INT 4
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 3
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 5
68165: PUSH
68166: LD_INT 3
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: LD_INT 5
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68230: LD_ADDR_VAR 0 33
68234: PUSH
68235: LD_INT 4
68237: NEG
68238: PUSH
68239: LD_INT 4
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 4
68249: NEG
68250: PUSH
68251: LD_INT 5
68253: NEG
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: LD_INT 4
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: LD_INT 3
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 4
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 5
68297: NEG
68298: PUSH
68299: LD_INT 4
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 5
68309: NEG
68310: PUSH
68311: LD_INT 5
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 3
68321: NEG
68322: PUSH
68323: LD_INT 5
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 5
68333: NEG
68334: PUSH
68335: LD_INT 3
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: LD_INT 3
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: LD_INT 4
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: LD_INT 3
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 1
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: LD_INT 3
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: LD_INT 4
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: LD_INT 2
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 2
68435: NEG
68436: PUSH
68437: LD_INT 4
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 4
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: PUSH
68458: LD_INT 1
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 5
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 5
68478: PUSH
68479: LD_INT 1
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 4
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 3
68498: PUSH
68499: LD_INT 0
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 3
68508: PUSH
68509: LD_INT 1
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 3
68519: PUSH
68520: LD_INT 2
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 5
68530: PUSH
68531: LD_INT 2
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: PUSH
68541: LD_INT 3
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: LD_INT 2
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 4
68560: PUSH
68561: LD_INT 3
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 4
68570: PUSH
68571: LD_INT 4
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 3
68580: PUSH
68581: LD_INT 4
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 2
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: PUSH
68601: LD_INT 2
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 4
68610: PUSH
68611: LD_INT 2
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: LD_INT 4
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: LD_INT 4
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 3
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 1
68650: PUSH
68651: LD_INT 4
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 1
68660: PUSH
68661: LD_INT 5
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 0
68670: PUSH
68671: LD_INT 5
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: LD_INT 4
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: LD_INT 3
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 2
68702: PUSH
68703: LD_INT 5
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 2
68712: NEG
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68768: LD_ADDR_VAR 0 34
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: LD_INT 4
68778: NEG
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: LD_INT 5
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 1
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: LD_INT 3
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 1
68830: NEG
68831: PUSH
68832: LD_INT 4
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 1
68842: NEG
68843: PUSH
68844: LD_INT 5
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: LD_INT 3
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 2
68865: NEG
68866: PUSH
68867: LD_INT 5
68869: NEG
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 3
68877: PUSH
68878: LD_INT 0
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 4
68898: PUSH
68899: LD_INT 0
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 4
68908: PUSH
68909: LD_INT 1
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 2
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: LD_INT 1
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 2
68949: PUSH
68950: LD_INT 2
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 4
68960: PUSH
68961: LD_INT 2
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 4
68970: PUSH
68971: LD_INT 4
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 4
68980: PUSH
68981: LD_INT 3
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 5
68990: PUSH
68991: LD_INT 4
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 5
69000: PUSH
69001: LD_INT 5
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 4
69010: PUSH
69011: LD_INT 5
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 3
69020: PUSH
69021: LD_INT 4
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: LD_INT 3
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 5
69040: PUSH
69041: LD_INT 3
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 3
69050: PUSH
69051: LD_INT 5
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 0
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 1
69080: PUSH
69081: LD_INT 3
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: LD_INT 4
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 0
69100: PUSH
69101: LD_INT 4
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 1
69110: NEG
69111: PUSH
69112: LD_INT 3
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 1
69121: NEG
69122: PUSH
69123: LD_INT 2
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 2
69132: PUSH
69133: LD_INT 4
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 2
69142: NEG
69143: PUSH
69144: LD_INT 2
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 4
69153: NEG
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 4
69164: NEG
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 3
69176: NEG
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 4
69198: NEG
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 5
69209: NEG
69210: PUSH
69211: LD_INT 0
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 5
69220: NEG
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 5
69232: NEG
69233: PUSH
69234: LD_INT 2
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: NEG
69245: PUSH
69246: LD_INT 2
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: ST_TO_ADDR
// end ; end ;
69300: GO 69303
69302: POP
// case btype of b_depot , b_warehouse :
69303: LD_VAR 0 1
69307: PUSH
69308: LD_INT 0
69310: DOUBLE
69311: EQUAL
69312: IFTRUE 69322
69314: LD_INT 1
69316: DOUBLE
69317: EQUAL
69318: IFTRUE 69322
69320: GO 69523
69322: POP
// case nation of nation_american :
69323: LD_VAR 0 5
69327: PUSH
69328: LD_INT 1
69330: DOUBLE
69331: EQUAL
69332: IFTRUE 69336
69334: GO 69392
69336: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69337: LD_ADDR_VAR 0 9
69341: PUSH
69342: LD_VAR 0 11
69346: PUSH
69347: LD_VAR 0 12
69351: PUSH
69352: LD_VAR 0 13
69356: PUSH
69357: LD_VAR 0 14
69361: PUSH
69362: LD_VAR 0 15
69366: PUSH
69367: LD_VAR 0 16
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: PUSH
69380: LD_VAR 0 4
69384: PUSH
69385: LD_INT 1
69387: PLUS
69388: ARRAY
69389: ST_TO_ADDR
69390: GO 69521
69392: LD_INT 2
69394: DOUBLE
69395: EQUAL
69396: IFTRUE 69400
69398: GO 69456
69400: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69401: LD_ADDR_VAR 0 9
69405: PUSH
69406: LD_VAR 0 17
69410: PUSH
69411: LD_VAR 0 18
69415: PUSH
69416: LD_VAR 0 19
69420: PUSH
69421: LD_VAR 0 20
69425: PUSH
69426: LD_VAR 0 21
69430: PUSH
69431: LD_VAR 0 22
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: PUSH
69444: LD_VAR 0 4
69448: PUSH
69449: LD_INT 1
69451: PLUS
69452: ARRAY
69453: ST_TO_ADDR
69454: GO 69521
69456: LD_INT 3
69458: DOUBLE
69459: EQUAL
69460: IFTRUE 69464
69462: GO 69520
69464: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69465: LD_ADDR_VAR 0 9
69469: PUSH
69470: LD_VAR 0 23
69474: PUSH
69475: LD_VAR 0 24
69479: PUSH
69480: LD_VAR 0 25
69484: PUSH
69485: LD_VAR 0 26
69489: PUSH
69490: LD_VAR 0 27
69494: PUSH
69495: LD_VAR 0 28
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: PUSH
69508: LD_VAR 0 4
69512: PUSH
69513: LD_INT 1
69515: PLUS
69516: ARRAY
69517: ST_TO_ADDR
69518: GO 69521
69520: POP
69521: GO 70076
69523: LD_INT 2
69525: DOUBLE
69526: EQUAL
69527: IFTRUE 69537
69529: LD_INT 3
69531: DOUBLE
69532: EQUAL
69533: IFTRUE 69537
69535: GO 69593
69537: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69538: LD_ADDR_VAR 0 9
69542: PUSH
69543: LD_VAR 0 29
69547: PUSH
69548: LD_VAR 0 30
69552: PUSH
69553: LD_VAR 0 31
69557: PUSH
69558: LD_VAR 0 32
69562: PUSH
69563: LD_VAR 0 33
69567: PUSH
69568: LD_VAR 0 34
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: PUSH
69581: LD_VAR 0 4
69585: PUSH
69586: LD_INT 1
69588: PLUS
69589: ARRAY
69590: ST_TO_ADDR
69591: GO 70076
69593: LD_INT 16
69595: DOUBLE
69596: EQUAL
69597: IFTRUE 69655
69599: LD_INT 17
69601: DOUBLE
69602: EQUAL
69603: IFTRUE 69655
69605: LD_INT 18
69607: DOUBLE
69608: EQUAL
69609: IFTRUE 69655
69611: LD_INT 19
69613: DOUBLE
69614: EQUAL
69615: IFTRUE 69655
69617: LD_INT 22
69619: DOUBLE
69620: EQUAL
69621: IFTRUE 69655
69623: LD_INT 20
69625: DOUBLE
69626: EQUAL
69627: IFTRUE 69655
69629: LD_INT 21
69631: DOUBLE
69632: EQUAL
69633: IFTRUE 69655
69635: LD_INT 23
69637: DOUBLE
69638: EQUAL
69639: IFTRUE 69655
69641: LD_INT 24
69643: DOUBLE
69644: EQUAL
69645: IFTRUE 69655
69647: LD_INT 25
69649: DOUBLE
69650: EQUAL
69651: IFTRUE 69655
69653: GO 69711
69655: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69656: LD_ADDR_VAR 0 9
69660: PUSH
69661: LD_VAR 0 35
69665: PUSH
69666: LD_VAR 0 36
69670: PUSH
69671: LD_VAR 0 37
69675: PUSH
69676: LD_VAR 0 38
69680: PUSH
69681: LD_VAR 0 39
69685: PUSH
69686: LD_VAR 0 40
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: PUSH
69699: LD_VAR 0 4
69703: PUSH
69704: LD_INT 1
69706: PLUS
69707: ARRAY
69708: ST_TO_ADDR
69709: GO 70076
69711: LD_INT 6
69713: DOUBLE
69714: EQUAL
69715: IFTRUE 69767
69717: LD_INT 7
69719: DOUBLE
69720: EQUAL
69721: IFTRUE 69767
69723: LD_INT 8
69725: DOUBLE
69726: EQUAL
69727: IFTRUE 69767
69729: LD_INT 13
69731: DOUBLE
69732: EQUAL
69733: IFTRUE 69767
69735: LD_INT 12
69737: DOUBLE
69738: EQUAL
69739: IFTRUE 69767
69741: LD_INT 15
69743: DOUBLE
69744: EQUAL
69745: IFTRUE 69767
69747: LD_INT 11
69749: DOUBLE
69750: EQUAL
69751: IFTRUE 69767
69753: LD_INT 14
69755: DOUBLE
69756: EQUAL
69757: IFTRUE 69767
69759: LD_INT 10
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69767
69765: GO 69823
69767: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69768: LD_ADDR_VAR 0 9
69772: PUSH
69773: LD_VAR 0 41
69777: PUSH
69778: LD_VAR 0 42
69782: PUSH
69783: LD_VAR 0 43
69787: PUSH
69788: LD_VAR 0 44
69792: PUSH
69793: LD_VAR 0 45
69797: PUSH
69798: LD_VAR 0 46
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: PUSH
69811: LD_VAR 0 4
69815: PUSH
69816: LD_INT 1
69818: PLUS
69819: ARRAY
69820: ST_TO_ADDR
69821: GO 70076
69823: LD_INT 36
69825: DOUBLE
69826: EQUAL
69827: IFTRUE 69831
69829: GO 69887
69831: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69832: LD_ADDR_VAR 0 9
69836: PUSH
69837: LD_VAR 0 47
69841: PUSH
69842: LD_VAR 0 48
69846: PUSH
69847: LD_VAR 0 49
69851: PUSH
69852: LD_VAR 0 50
69856: PUSH
69857: LD_VAR 0 51
69861: PUSH
69862: LD_VAR 0 52
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: PUSH
69875: LD_VAR 0 4
69879: PUSH
69880: LD_INT 1
69882: PLUS
69883: ARRAY
69884: ST_TO_ADDR
69885: GO 70076
69887: LD_INT 4
69889: DOUBLE
69890: EQUAL
69891: IFTRUE 69913
69893: LD_INT 5
69895: DOUBLE
69896: EQUAL
69897: IFTRUE 69913
69899: LD_INT 34
69901: DOUBLE
69902: EQUAL
69903: IFTRUE 69913
69905: LD_INT 37
69907: DOUBLE
69908: EQUAL
69909: IFTRUE 69913
69911: GO 69969
69913: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69914: LD_ADDR_VAR 0 9
69918: PUSH
69919: LD_VAR 0 53
69923: PUSH
69924: LD_VAR 0 54
69928: PUSH
69929: LD_VAR 0 55
69933: PUSH
69934: LD_VAR 0 56
69938: PUSH
69939: LD_VAR 0 57
69943: PUSH
69944: LD_VAR 0 58
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: PUSH
69957: LD_VAR 0 4
69961: PUSH
69962: LD_INT 1
69964: PLUS
69965: ARRAY
69966: ST_TO_ADDR
69967: GO 70076
69969: LD_INT 31
69971: DOUBLE
69972: EQUAL
69973: IFTRUE 70019
69975: LD_INT 32
69977: DOUBLE
69978: EQUAL
69979: IFTRUE 70019
69981: LD_INT 33
69983: DOUBLE
69984: EQUAL
69985: IFTRUE 70019
69987: LD_INT 27
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 70019
69993: LD_INT 26
69995: DOUBLE
69996: EQUAL
69997: IFTRUE 70019
69999: LD_INT 28
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70019
70005: LD_INT 29
70007: DOUBLE
70008: EQUAL
70009: IFTRUE 70019
70011: LD_INT 30
70013: DOUBLE
70014: EQUAL
70015: IFTRUE 70019
70017: GO 70075
70019: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70020: LD_ADDR_VAR 0 9
70024: PUSH
70025: LD_VAR 0 59
70029: PUSH
70030: LD_VAR 0 60
70034: PUSH
70035: LD_VAR 0 61
70039: PUSH
70040: LD_VAR 0 62
70044: PUSH
70045: LD_VAR 0 63
70049: PUSH
70050: LD_VAR 0 64
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: PUSH
70063: LD_VAR 0 4
70067: PUSH
70068: LD_INT 1
70070: PLUS
70071: ARRAY
70072: ST_TO_ADDR
70073: GO 70076
70075: POP
// temp_list2 = [ ] ;
70076: LD_ADDR_VAR 0 10
70080: PUSH
70081: EMPTY
70082: ST_TO_ADDR
// for i in temp_list do
70083: LD_ADDR_VAR 0 8
70087: PUSH
70088: LD_VAR 0 9
70092: PUSH
70093: FOR_IN
70094: IFFALSE 70146
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70096: LD_ADDR_VAR 0 10
70100: PUSH
70101: LD_VAR 0 10
70105: PUSH
70106: LD_VAR 0 8
70110: PUSH
70111: LD_INT 1
70113: ARRAY
70114: PUSH
70115: LD_VAR 0 2
70119: PLUS
70120: PUSH
70121: LD_VAR 0 8
70125: PUSH
70126: LD_INT 2
70128: ARRAY
70129: PUSH
70130: LD_VAR 0 3
70134: PLUS
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: EMPTY
70141: LIST
70142: ADD
70143: ST_TO_ADDR
70144: GO 70093
70146: POP
70147: POP
// result = temp_list2 ;
70148: LD_ADDR_VAR 0 7
70152: PUSH
70153: LD_VAR 0 10
70157: ST_TO_ADDR
// end ;
70158: LD_VAR 0 7
70162: RET
// export function EnemyInRange ( unit , dist ) ; begin
70163: LD_INT 0
70165: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70166: LD_ADDR_VAR 0 3
70170: PUSH
70171: LD_VAR 0 1
70175: PPUSH
70176: CALL_OW 255
70180: PPUSH
70181: LD_VAR 0 1
70185: PPUSH
70186: CALL_OW 250
70190: PPUSH
70191: LD_VAR 0 1
70195: PPUSH
70196: CALL_OW 251
70200: PPUSH
70201: LD_VAR 0 2
70205: PPUSH
70206: CALL 43559 0 4
70210: PUSH
70211: LD_INT 4
70213: ARRAY
70214: ST_TO_ADDR
// end ;
70215: LD_VAR 0 3
70219: RET
// export function PlayerSeeMe ( unit ) ; begin
70220: LD_INT 0
70222: PPUSH
// result := See ( your_side , unit ) ;
70223: LD_ADDR_VAR 0 2
70227: PUSH
70228: LD_OWVAR 2
70232: PPUSH
70233: LD_VAR 0 1
70237: PPUSH
70238: CALL_OW 292
70242: ST_TO_ADDR
// end ;
70243: LD_VAR 0 2
70247: RET
// export function ReverseDir ( unit ) ; begin
70248: LD_INT 0
70250: PPUSH
// if not unit then
70251: LD_VAR 0 1
70255: NOT
70256: IFFALSE 70260
// exit ;
70258: GO 70283
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70260: LD_ADDR_VAR 0 2
70264: PUSH
70265: LD_VAR 0 1
70269: PPUSH
70270: CALL_OW 254
70274: PUSH
70275: LD_INT 3
70277: PLUS
70278: PUSH
70279: LD_INT 6
70281: MOD
70282: ST_TO_ADDR
// end ;
70283: LD_VAR 0 2
70287: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70288: LD_INT 0
70290: PPUSH
70291: PPUSH
70292: PPUSH
70293: PPUSH
70294: PPUSH
// if not hexes then
70295: LD_VAR 0 2
70299: NOT
70300: IFFALSE 70304
// exit ;
70302: GO 70452
// dist := 9999 ;
70304: LD_ADDR_VAR 0 5
70308: PUSH
70309: LD_INT 9999
70311: ST_TO_ADDR
// for i = 1 to hexes do
70312: LD_ADDR_VAR 0 4
70316: PUSH
70317: DOUBLE
70318: LD_INT 1
70320: DEC
70321: ST_TO_ADDR
70322: LD_VAR 0 2
70326: PUSH
70327: FOR_TO
70328: IFFALSE 70440
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70330: LD_VAR 0 1
70334: PPUSH
70335: LD_VAR 0 2
70339: PUSH
70340: LD_VAR 0 4
70344: ARRAY
70345: PUSH
70346: LD_INT 1
70348: ARRAY
70349: PPUSH
70350: LD_VAR 0 2
70354: PUSH
70355: LD_VAR 0 4
70359: ARRAY
70360: PUSH
70361: LD_INT 2
70363: ARRAY
70364: PPUSH
70365: CALL_OW 297
70369: PUSH
70370: LD_VAR 0 5
70374: LESS
70375: IFFALSE 70438
// begin hex := hexes [ i ] ;
70377: LD_ADDR_VAR 0 7
70381: PUSH
70382: LD_VAR 0 2
70386: PUSH
70387: LD_VAR 0 4
70391: ARRAY
70392: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70393: LD_ADDR_VAR 0 5
70397: PUSH
70398: LD_VAR 0 1
70402: PPUSH
70403: LD_VAR 0 2
70407: PUSH
70408: LD_VAR 0 4
70412: ARRAY
70413: PUSH
70414: LD_INT 1
70416: ARRAY
70417: PPUSH
70418: LD_VAR 0 2
70422: PUSH
70423: LD_VAR 0 4
70427: ARRAY
70428: PUSH
70429: LD_INT 2
70431: ARRAY
70432: PPUSH
70433: CALL_OW 297
70437: ST_TO_ADDR
// end ; end ;
70438: GO 70327
70440: POP
70441: POP
// result := hex ;
70442: LD_ADDR_VAR 0 3
70446: PUSH
70447: LD_VAR 0 7
70451: ST_TO_ADDR
// end ;
70452: LD_VAR 0 3
70456: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70457: LD_INT 0
70459: PPUSH
70460: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70461: LD_VAR 0 1
70465: NOT
70466: PUSH
70467: LD_VAR 0 1
70471: PUSH
70472: LD_INT 21
70474: PUSH
70475: LD_INT 2
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 23
70484: PUSH
70485: LD_INT 2
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: EMPTY
70493: LIST
70494: LIST
70495: PPUSH
70496: CALL_OW 69
70500: IN
70501: NOT
70502: OR
70503: IFFALSE 70507
// exit ;
70505: GO 70554
// for i = 1 to 3 do
70507: LD_ADDR_VAR 0 3
70511: PUSH
70512: DOUBLE
70513: LD_INT 1
70515: DEC
70516: ST_TO_ADDR
70517: LD_INT 3
70519: PUSH
70520: FOR_TO
70521: IFFALSE 70552
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70523: LD_VAR 0 1
70527: PPUSH
70528: CALL_OW 250
70532: PPUSH
70533: LD_VAR 0 1
70537: PPUSH
70538: CALL_OW 251
70542: PPUSH
70543: LD_INT 1
70545: PPUSH
70546: CALL_OW 453
70550: GO 70520
70552: POP
70553: POP
// end ;
70554: LD_VAR 0 2
70558: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70559: LD_INT 0
70561: PPUSH
70562: PPUSH
70563: PPUSH
70564: PPUSH
70565: PPUSH
70566: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70567: LD_VAR 0 1
70571: NOT
70572: PUSH
70573: LD_VAR 0 2
70577: NOT
70578: OR
70579: PUSH
70580: LD_VAR 0 1
70584: PPUSH
70585: CALL_OW 314
70589: OR
70590: IFFALSE 70594
// exit ;
70592: GO 71035
// x := GetX ( enemy_unit ) ;
70594: LD_ADDR_VAR 0 7
70598: PUSH
70599: LD_VAR 0 2
70603: PPUSH
70604: CALL_OW 250
70608: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70609: LD_ADDR_VAR 0 8
70613: PUSH
70614: LD_VAR 0 2
70618: PPUSH
70619: CALL_OW 251
70623: ST_TO_ADDR
// if not x or not y then
70624: LD_VAR 0 7
70628: NOT
70629: PUSH
70630: LD_VAR 0 8
70634: NOT
70635: OR
70636: IFFALSE 70640
// exit ;
70638: GO 71035
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70640: LD_ADDR_VAR 0 6
70644: PUSH
70645: LD_VAR 0 7
70649: PPUSH
70650: LD_INT 0
70652: PPUSH
70653: LD_INT 4
70655: PPUSH
70656: CALL_OW 272
70660: PUSH
70661: LD_VAR 0 8
70665: PPUSH
70666: LD_INT 0
70668: PPUSH
70669: LD_INT 4
70671: PPUSH
70672: CALL_OW 273
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_VAR 0 7
70685: PPUSH
70686: LD_INT 1
70688: PPUSH
70689: LD_INT 4
70691: PPUSH
70692: CALL_OW 272
70696: PUSH
70697: LD_VAR 0 8
70701: PPUSH
70702: LD_INT 1
70704: PPUSH
70705: LD_INT 4
70707: PPUSH
70708: CALL_OW 273
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_VAR 0 7
70721: PPUSH
70722: LD_INT 2
70724: PPUSH
70725: LD_INT 4
70727: PPUSH
70728: CALL_OW 272
70732: PUSH
70733: LD_VAR 0 8
70737: PPUSH
70738: LD_INT 2
70740: PPUSH
70741: LD_INT 4
70743: PPUSH
70744: CALL_OW 273
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_VAR 0 7
70757: PPUSH
70758: LD_INT 3
70760: PPUSH
70761: LD_INT 4
70763: PPUSH
70764: CALL_OW 272
70768: PUSH
70769: LD_VAR 0 8
70773: PPUSH
70774: LD_INT 3
70776: PPUSH
70777: LD_INT 4
70779: PPUSH
70780: CALL_OW 273
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_VAR 0 7
70793: PPUSH
70794: LD_INT 4
70796: PPUSH
70797: LD_INT 4
70799: PPUSH
70800: CALL_OW 272
70804: PUSH
70805: LD_VAR 0 8
70809: PPUSH
70810: LD_INT 4
70812: PPUSH
70813: LD_INT 4
70815: PPUSH
70816: CALL_OW 273
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_VAR 0 7
70829: PPUSH
70830: LD_INT 5
70832: PPUSH
70833: LD_INT 4
70835: PPUSH
70836: CALL_OW 272
70840: PUSH
70841: LD_VAR 0 8
70845: PPUSH
70846: LD_INT 5
70848: PPUSH
70849: LD_INT 4
70851: PPUSH
70852: CALL_OW 273
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: ST_TO_ADDR
// for i = tmp downto 1 do
70869: LD_ADDR_VAR 0 4
70873: PUSH
70874: DOUBLE
70875: LD_VAR 0 6
70879: INC
70880: ST_TO_ADDR
70881: LD_INT 1
70883: PUSH
70884: FOR_DOWNTO
70885: IFFALSE 70986
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70887: LD_VAR 0 6
70891: PUSH
70892: LD_VAR 0 4
70896: ARRAY
70897: PUSH
70898: LD_INT 1
70900: ARRAY
70901: PPUSH
70902: LD_VAR 0 6
70906: PUSH
70907: LD_VAR 0 4
70911: ARRAY
70912: PUSH
70913: LD_INT 2
70915: ARRAY
70916: PPUSH
70917: CALL_OW 488
70921: NOT
70922: PUSH
70923: LD_VAR 0 6
70927: PUSH
70928: LD_VAR 0 4
70932: ARRAY
70933: PUSH
70934: LD_INT 1
70936: ARRAY
70937: PPUSH
70938: LD_VAR 0 6
70942: PUSH
70943: LD_VAR 0 4
70947: ARRAY
70948: PUSH
70949: LD_INT 2
70951: ARRAY
70952: PPUSH
70953: CALL_OW 428
70957: PUSH
70958: LD_INT 0
70960: NONEQUAL
70961: OR
70962: IFFALSE 70984
// tmp := Delete ( tmp , i ) ;
70964: LD_ADDR_VAR 0 6
70968: PUSH
70969: LD_VAR 0 6
70973: PPUSH
70974: LD_VAR 0 4
70978: PPUSH
70979: CALL_OW 3
70983: ST_TO_ADDR
70984: GO 70884
70986: POP
70987: POP
// j := GetClosestHex ( unit , tmp ) ;
70988: LD_ADDR_VAR 0 5
70992: PUSH
70993: LD_VAR 0 1
70997: PPUSH
70998: LD_VAR 0 6
71002: PPUSH
71003: CALL 70288 0 2
71007: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71008: LD_VAR 0 1
71012: PPUSH
71013: LD_VAR 0 5
71017: PUSH
71018: LD_INT 1
71020: ARRAY
71021: PPUSH
71022: LD_VAR 0 5
71026: PUSH
71027: LD_INT 2
71029: ARRAY
71030: PPUSH
71031: CALL_OW 111
// end ;
71035: LD_VAR 0 3
71039: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71040: LD_INT 0
71042: PPUSH
71043: PPUSH
71044: PPUSH
// uc_side = 0 ;
71045: LD_ADDR_OWVAR 20
71049: PUSH
71050: LD_INT 0
71052: ST_TO_ADDR
// uc_nation = 0 ;
71053: LD_ADDR_OWVAR 21
71057: PUSH
71058: LD_INT 0
71060: ST_TO_ADDR
// InitHc_All ( ) ;
71061: CALL_OW 584
// InitVc ;
71065: CALL_OW 20
// if mastodonts then
71069: LD_VAR 0 6
71073: IFFALSE 71140
// for i = 1 to mastodonts do
71075: LD_ADDR_VAR 0 11
71079: PUSH
71080: DOUBLE
71081: LD_INT 1
71083: DEC
71084: ST_TO_ADDR
71085: LD_VAR 0 6
71089: PUSH
71090: FOR_TO
71091: IFFALSE 71138
// begin vc_chassis := 31 ;
71093: LD_ADDR_OWVAR 37
71097: PUSH
71098: LD_INT 31
71100: ST_TO_ADDR
// vc_control := control_rider ;
71101: LD_ADDR_OWVAR 38
71105: PUSH
71106: LD_INT 4
71108: ST_TO_ADDR
// animal := CreateVehicle ;
71109: LD_ADDR_VAR 0 12
71113: PUSH
71114: CALL_OW 45
71118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71119: LD_VAR 0 12
71123: PPUSH
71124: LD_VAR 0 8
71128: PPUSH
71129: LD_INT 0
71131: PPUSH
71132: CALL 73328 0 3
// end ;
71136: GO 71090
71138: POP
71139: POP
// if horses then
71140: LD_VAR 0 5
71144: IFFALSE 71211
// for i = 1 to horses do
71146: LD_ADDR_VAR 0 11
71150: PUSH
71151: DOUBLE
71152: LD_INT 1
71154: DEC
71155: ST_TO_ADDR
71156: LD_VAR 0 5
71160: PUSH
71161: FOR_TO
71162: IFFALSE 71209
// begin hc_class := 21 ;
71164: LD_ADDR_OWVAR 28
71168: PUSH
71169: LD_INT 21
71171: ST_TO_ADDR
// hc_gallery :=  ;
71172: LD_ADDR_OWVAR 33
71176: PUSH
71177: LD_STRING 
71179: ST_TO_ADDR
// animal := CreateHuman ;
71180: LD_ADDR_VAR 0 12
71184: PUSH
71185: CALL_OW 44
71189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71190: LD_VAR 0 12
71194: PPUSH
71195: LD_VAR 0 8
71199: PPUSH
71200: LD_INT 0
71202: PPUSH
71203: CALL 73328 0 3
// end ;
71207: GO 71161
71209: POP
71210: POP
// if birds then
71211: LD_VAR 0 1
71215: IFFALSE 71282
// for i = 1 to birds do
71217: LD_ADDR_VAR 0 11
71221: PUSH
71222: DOUBLE
71223: LD_INT 1
71225: DEC
71226: ST_TO_ADDR
71227: LD_VAR 0 1
71231: PUSH
71232: FOR_TO
71233: IFFALSE 71280
// begin hc_class = 18 ;
71235: LD_ADDR_OWVAR 28
71239: PUSH
71240: LD_INT 18
71242: ST_TO_ADDR
// hc_gallery =  ;
71243: LD_ADDR_OWVAR 33
71247: PUSH
71248: LD_STRING 
71250: ST_TO_ADDR
// animal := CreateHuman ;
71251: LD_ADDR_VAR 0 12
71255: PUSH
71256: CALL_OW 44
71260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71261: LD_VAR 0 12
71265: PPUSH
71266: LD_VAR 0 8
71270: PPUSH
71271: LD_INT 0
71273: PPUSH
71274: CALL 73328 0 3
// end ;
71278: GO 71232
71280: POP
71281: POP
// if tigers then
71282: LD_VAR 0 2
71286: IFFALSE 71370
// for i = 1 to tigers do
71288: LD_ADDR_VAR 0 11
71292: PUSH
71293: DOUBLE
71294: LD_INT 1
71296: DEC
71297: ST_TO_ADDR
71298: LD_VAR 0 2
71302: PUSH
71303: FOR_TO
71304: IFFALSE 71368
// begin hc_class = class_tiger ;
71306: LD_ADDR_OWVAR 28
71310: PUSH
71311: LD_INT 14
71313: ST_TO_ADDR
// hc_gallery =  ;
71314: LD_ADDR_OWVAR 33
71318: PUSH
71319: LD_STRING 
71321: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71322: LD_ADDR_OWVAR 35
71326: PUSH
71327: LD_INT 7
71329: NEG
71330: PPUSH
71331: LD_INT 7
71333: PPUSH
71334: CALL_OW 12
71338: ST_TO_ADDR
// animal := CreateHuman ;
71339: LD_ADDR_VAR 0 12
71343: PUSH
71344: CALL_OW 44
71348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71349: LD_VAR 0 12
71353: PPUSH
71354: LD_VAR 0 8
71358: PPUSH
71359: LD_INT 0
71361: PPUSH
71362: CALL 73328 0 3
// end ;
71366: GO 71303
71368: POP
71369: POP
// if apemans then
71370: LD_VAR 0 3
71374: IFFALSE 71497
// for i = 1 to apemans do
71376: LD_ADDR_VAR 0 11
71380: PUSH
71381: DOUBLE
71382: LD_INT 1
71384: DEC
71385: ST_TO_ADDR
71386: LD_VAR 0 3
71390: PUSH
71391: FOR_TO
71392: IFFALSE 71495
// begin hc_class = class_apeman ;
71394: LD_ADDR_OWVAR 28
71398: PUSH
71399: LD_INT 12
71401: ST_TO_ADDR
// hc_gallery =  ;
71402: LD_ADDR_OWVAR 33
71406: PUSH
71407: LD_STRING 
71409: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71410: LD_ADDR_OWVAR 35
71414: PUSH
71415: LD_INT 2
71417: NEG
71418: PPUSH
71419: LD_INT 2
71421: PPUSH
71422: CALL_OW 12
71426: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71427: LD_ADDR_OWVAR 31
71431: PUSH
71432: LD_INT 1
71434: PPUSH
71435: LD_INT 3
71437: PPUSH
71438: CALL_OW 12
71442: PUSH
71443: LD_INT 1
71445: PPUSH
71446: LD_INT 3
71448: PPUSH
71449: CALL_OW 12
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: ST_TO_ADDR
// animal := CreateHuman ;
71466: LD_ADDR_VAR 0 12
71470: PUSH
71471: CALL_OW 44
71475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71476: LD_VAR 0 12
71480: PPUSH
71481: LD_VAR 0 8
71485: PPUSH
71486: LD_INT 0
71488: PPUSH
71489: CALL 73328 0 3
// end ;
71493: GO 71391
71495: POP
71496: POP
// if enchidnas then
71497: LD_VAR 0 4
71501: IFFALSE 71568
// for i = 1 to enchidnas do
71503: LD_ADDR_VAR 0 11
71507: PUSH
71508: DOUBLE
71509: LD_INT 1
71511: DEC
71512: ST_TO_ADDR
71513: LD_VAR 0 4
71517: PUSH
71518: FOR_TO
71519: IFFALSE 71566
// begin hc_class = 13 ;
71521: LD_ADDR_OWVAR 28
71525: PUSH
71526: LD_INT 13
71528: ST_TO_ADDR
// hc_gallery =  ;
71529: LD_ADDR_OWVAR 33
71533: PUSH
71534: LD_STRING 
71536: ST_TO_ADDR
// animal := CreateHuman ;
71537: LD_ADDR_VAR 0 12
71541: PUSH
71542: CALL_OW 44
71546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71547: LD_VAR 0 12
71551: PPUSH
71552: LD_VAR 0 8
71556: PPUSH
71557: LD_INT 0
71559: PPUSH
71560: CALL 73328 0 3
// end ;
71564: GO 71518
71566: POP
71567: POP
// if fishes then
71568: LD_VAR 0 7
71572: IFFALSE 71639
// for i = 1 to fishes do
71574: LD_ADDR_VAR 0 11
71578: PUSH
71579: DOUBLE
71580: LD_INT 1
71582: DEC
71583: ST_TO_ADDR
71584: LD_VAR 0 7
71588: PUSH
71589: FOR_TO
71590: IFFALSE 71637
// begin hc_class = 20 ;
71592: LD_ADDR_OWVAR 28
71596: PUSH
71597: LD_INT 20
71599: ST_TO_ADDR
// hc_gallery =  ;
71600: LD_ADDR_OWVAR 33
71604: PUSH
71605: LD_STRING 
71607: ST_TO_ADDR
// animal := CreateHuman ;
71608: LD_ADDR_VAR 0 12
71612: PUSH
71613: CALL_OW 44
71617: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71618: LD_VAR 0 12
71622: PPUSH
71623: LD_VAR 0 9
71627: PPUSH
71628: LD_INT 0
71630: PPUSH
71631: CALL 73328 0 3
// end ;
71635: GO 71589
71637: POP
71638: POP
// end ;
71639: LD_VAR 0 10
71643: RET
// export function WantHeal ( sci , unit ) ; begin
71644: LD_INT 0
71646: PPUSH
// if GetTaskList ( sci ) > 0 then
71647: LD_VAR 0 1
71651: PPUSH
71652: CALL_OW 437
71656: PUSH
71657: LD_INT 0
71659: GREATER
71660: IFFALSE 71730
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71662: LD_VAR 0 1
71666: PPUSH
71667: CALL_OW 437
71671: PUSH
71672: LD_INT 1
71674: ARRAY
71675: PUSH
71676: LD_INT 1
71678: ARRAY
71679: PUSH
71680: LD_STRING l
71682: EQUAL
71683: PUSH
71684: LD_VAR 0 1
71688: PPUSH
71689: CALL_OW 437
71693: PUSH
71694: LD_INT 1
71696: ARRAY
71697: PUSH
71698: LD_INT 4
71700: ARRAY
71701: PUSH
71702: LD_VAR 0 2
71706: EQUAL
71707: AND
71708: IFFALSE 71720
// result := true else
71710: LD_ADDR_VAR 0 3
71714: PUSH
71715: LD_INT 1
71717: ST_TO_ADDR
71718: GO 71728
// result := false ;
71720: LD_ADDR_VAR 0 3
71724: PUSH
71725: LD_INT 0
71727: ST_TO_ADDR
// end else
71728: GO 71738
// result := false ;
71730: LD_ADDR_VAR 0 3
71734: PUSH
71735: LD_INT 0
71737: ST_TO_ADDR
// end ;
71738: LD_VAR 0 3
71742: RET
// export function HealTarget ( sci ) ; begin
71743: LD_INT 0
71745: PPUSH
// if not sci then
71746: LD_VAR 0 1
71750: NOT
71751: IFFALSE 71755
// exit ;
71753: GO 71820
// result := 0 ;
71755: LD_ADDR_VAR 0 2
71759: PUSH
71760: LD_INT 0
71762: ST_TO_ADDR
// if GetTaskList ( sci ) then
71763: LD_VAR 0 1
71767: PPUSH
71768: CALL_OW 437
71772: IFFALSE 71820
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71774: LD_VAR 0 1
71778: PPUSH
71779: CALL_OW 437
71783: PUSH
71784: LD_INT 1
71786: ARRAY
71787: PUSH
71788: LD_INT 1
71790: ARRAY
71791: PUSH
71792: LD_STRING l
71794: EQUAL
71795: IFFALSE 71820
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71797: LD_ADDR_VAR 0 2
71801: PUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 437
71811: PUSH
71812: LD_INT 1
71814: ARRAY
71815: PUSH
71816: LD_INT 4
71818: ARRAY
71819: ST_TO_ADDR
// end ;
71820: LD_VAR 0 2
71824: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71825: LD_INT 0
71827: PPUSH
71828: PPUSH
71829: PPUSH
71830: PPUSH
// if not base_units then
71831: LD_VAR 0 1
71835: NOT
71836: IFFALSE 71840
// exit ;
71838: GO 71927
// result := false ;
71840: LD_ADDR_VAR 0 2
71844: PUSH
71845: LD_INT 0
71847: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71848: LD_ADDR_VAR 0 5
71852: PUSH
71853: LD_VAR 0 1
71857: PPUSH
71858: LD_INT 21
71860: PUSH
71861: LD_INT 3
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PPUSH
71868: CALL_OW 72
71872: ST_TO_ADDR
// if not tmp then
71873: LD_VAR 0 5
71877: NOT
71878: IFFALSE 71882
// exit ;
71880: GO 71927
// for i in tmp do
71882: LD_ADDR_VAR 0 3
71886: PUSH
71887: LD_VAR 0 5
71891: PUSH
71892: FOR_IN
71893: IFFALSE 71925
// begin result := EnemyInRange ( i , 22 ) ;
71895: LD_ADDR_VAR 0 2
71899: PUSH
71900: LD_VAR 0 3
71904: PPUSH
71905: LD_INT 22
71907: PPUSH
71908: CALL 70163 0 2
71912: ST_TO_ADDR
// if result then
71913: LD_VAR 0 2
71917: IFFALSE 71923
// exit ;
71919: POP
71920: POP
71921: GO 71927
// end ;
71923: GO 71892
71925: POP
71926: POP
// end ;
71927: LD_VAR 0 2
71931: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71932: LD_INT 0
71934: PPUSH
71935: PPUSH
// if not units then
71936: LD_VAR 0 1
71940: NOT
71941: IFFALSE 71945
// exit ;
71943: GO 72015
// result := [ ] ;
71945: LD_ADDR_VAR 0 3
71949: PUSH
71950: EMPTY
71951: ST_TO_ADDR
// for i in units do
71952: LD_ADDR_VAR 0 4
71956: PUSH
71957: LD_VAR 0 1
71961: PUSH
71962: FOR_IN
71963: IFFALSE 72013
// if GetTag ( i ) = tag then
71965: LD_VAR 0 4
71969: PPUSH
71970: CALL_OW 110
71974: PUSH
71975: LD_VAR 0 2
71979: EQUAL
71980: IFFALSE 72011
// result := Replace ( result , result + 1 , i ) ;
71982: LD_ADDR_VAR 0 3
71986: PUSH
71987: LD_VAR 0 3
71991: PPUSH
71992: LD_VAR 0 3
71996: PUSH
71997: LD_INT 1
71999: PLUS
72000: PPUSH
72001: LD_VAR 0 4
72005: PPUSH
72006: CALL_OW 1
72010: ST_TO_ADDR
72011: GO 71962
72013: POP
72014: POP
// end ;
72015: LD_VAR 0 3
72019: RET
// export function IsDriver ( un ) ; begin
72020: LD_INT 0
72022: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72023: LD_ADDR_VAR 0 2
72027: PUSH
72028: LD_VAR 0 1
72032: PUSH
72033: LD_INT 55
72035: PUSH
72036: EMPTY
72037: LIST
72038: PPUSH
72039: CALL_OW 69
72043: IN
72044: ST_TO_ADDR
// end ;
72045: LD_VAR 0 2
72049: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72050: LD_INT 0
72052: PPUSH
72053: PPUSH
// list := [ ] ;
72054: LD_ADDR_VAR 0 5
72058: PUSH
72059: EMPTY
72060: ST_TO_ADDR
// case d of 0 :
72061: LD_VAR 0 3
72065: PUSH
72066: LD_INT 0
72068: DOUBLE
72069: EQUAL
72070: IFTRUE 72074
72072: GO 72207
72074: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72075: LD_ADDR_VAR 0 5
72079: PUSH
72080: LD_VAR 0 1
72084: PUSH
72085: LD_INT 4
72087: MINUS
72088: PUSH
72089: LD_VAR 0 2
72093: PUSH
72094: LD_INT 4
72096: MINUS
72097: PUSH
72098: LD_INT 2
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: PUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_INT 3
72113: MINUS
72114: PUSH
72115: LD_VAR 0 2
72119: PUSH
72120: LD_INT 1
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: PUSH
72128: LD_VAR 0 1
72132: PUSH
72133: LD_INT 4
72135: PLUS
72136: PUSH
72137: LD_VAR 0 2
72141: PUSH
72142: LD_INT 4
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: LIST
72149: PUSH
72150: LD_VAR 0 1
72154: PUSH
72155: LD_INT 3
72157: PLUS
72158: PUSH
72159: LD_VAR 0 2
72163: PUSH
72164: LD_INT 3
72166: PLUS
72167: PUSH
72168: LD_INT 5
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: PUSH
72176: LD_VAR 0 1
72180: PUSH
72181: LD_VAR 0 2
72185: PUSH
72186: LD_INT 4
72188: PLUS
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: ST_TO_ADDR
// end ; 1 :
72205: GO 72905
72207: LD_INT 1
72209: DOUBLE
72210: EQUAL
72211: IFTRUE 72215
72213: GO 72348
72215: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72216: LD_ADDR_VAR 0 5
72220: PUSH
72221: LD_VAR 0 1
72225: PUSH
72226: LD_VAR 0 2
72230: PUSH
72231: LD_INT 4
72233: MINUS
72234: PUSH
72235: LD_INT 3
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: LIST
72242: PUSH
72243: LD_VAR 0 1
72247: PUSH
72248: LD_INT 3
72250: MINUS
72251: PUSH
72252: LD_VAR 0 2
72256: PUSH
72257: LD_INT 3
72259: MINUS
72260: PUSH
72261: LD_INT 2
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: LIST
72268: PUSH
72269: LD_VAR 0 1
72273: PUSH
72274: LD_INT 4
72276: MINUS
72277: PUSH
72278: LD_VAR 0 2
72282: PUSH
72283: LD_INT 1
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: LIST
72290: PUSH
72291: LD_VAR 0 1
72295: PUSH
72296: LD_VAR 0 2
72300: PUSH
72301: LD_INT 3
72303: PLUS
72304: PUSH
72305: LD_INT 0
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: LIST
72312: PUSH
72313: LD_VAR 0 1
72317: PUSH
72318: LD_INT 4
72320: PLUS
72321: PUSH
72322: LD_VAR 0 2
72326: PUSH
72327: LD_INT 4
72329: PLUS
72330: PUSH
72331: LD_INT 5
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: LIST
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: ST_TO_ADDR
// end ; 2 :
72346: GO 72905
72348: LD_INT 2
72350: DOUBLE
72351: EQUAL
72352: IFTRUE 72356
72354: GO 72485
72356: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72357: LD_ADDR_VAR 0 5
72361: PUSH
72362: LD_VAR 0 1
72366: PUSH
72367: LD_VAR 0 2
72371: PUSH
72372: LD_INT 3
72374: MINUS
72375: PUSH
72376: LD_INT 3
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: LIST
72383: PUSH
72384: LD_VAR 0 1
72388: PUSH
72389: LD_INT 4
72391: PLUS
72392: PUSH
72393: LD_VAR 0 2
72397: PUSH
72398: LD_INT 4
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: LIST
72405: PUSH
72406: LD_VAR 0 1
72410: PUSH
72411: LD_VAR 0 2
72415: PUSH
72416: LD_INT 4
72418: PLUS
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: LIST
72427: PUSH
72428: LD_VAR 0 1
72432: PUSH
72433: LD_INT 3
72435: MINUS
72436: PUSH
72437: LD_VAR 0 2
72441: PUSH
72442: LD_INT 1
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: LIST
72449: PUSH
72450: LD_VAR 0 1
72454: PUSH
72455: LD_INT 4
72457: MINUS
72458: PUSH
72459: LD_VAR 0 2
72463: PUSH
72464: LD_INT 4
72466: MINUS
72467: PUSH
72468: LD_INT 2
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: ST_TO_ADDR
// end ; 3 :
72483: GO 72905
72485: LD_INT 3
72487: DOUBLE
72488: EQUAL
72489: IFTRUE 72493
72491: GO 72626
72493: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72494: LD_ADDR_VAR 0 5
72498: PUSH
72499: LD_VAR 0 1
72503: PUSH
72504: LD_INT 3
72506: PLUS
72507: PUSH
72508: LD_VAR 0 2
72512: PUSH
72513: LD_INT 4
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: LIST
72520: PUSH
72521: LD_VAR 0 1
72525: PUSH
72526: LD_INT 4
72528: PLUS
72529: PUSH
72530: LD_VAR 0 2
72534: PUSH
72535: LD_INT 4
72537: PLUS
72538: PUSH
72539: LD_INT 5
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: LIST
72546: PUSH
72547: LD_VAR 0 1
72551: PUSH
72552: LD_INT 4
72554: MINUS
72555: PUSH
72556: LD_VAR 0 2
72560: PUSH
72561: LD_INT 1
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: LIST
72568: PUSH
72569: LD_VAR 0 1
72573: PUSH
72574: LD_VAR 0 2
72578: PUSH
72579: LD_INT 4
72581: MINUS
72582: PUSH
72583: LD_INT 3
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: PUSH
72591: LD_VAR 0 1
72595: PUSH
72596: LD_INT 3
72598: MINUS
72599: PUSH
72600: LD_VAR 0 2
72604: PUSH
72605: LD_INT 3
72607: MINUS
72608: PUSH
72609: LD_INT 2
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: LIST
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: ST_TO_ADDR
// end ; 4 :
72624: GO 72905
72626: LD_INT 4
72628: DOUBLE
72629: EQUAL
72630: IFTRUE 72634
72632: GO 72767
72634: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72635: LD_ADDR_VAR 0 5
72639: PUSH
72640: LD_VAR 0 1
72644: PUSH
72645: LD_VAR 0 2
72649: PUSH
72650: LD_INT 4
72652: PLUS
72653: PUSH
72654: LD_INT 0
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: LIST
72661: PUSH
72662: LD_VAR 0 1
72666: PUSH
72667: LD_INT 3
72669: PLUS
72670: PUSH
72671: LD_VAR 0 2
72675: PUSH
72676: LD_INT 3
72678: PLUS
72679: PUSH
72680: LD_INT 5
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: LIST
72687: PUSH
72688: LD_VAR 0 1
72692: PUSH
72693: LD_INT 4
72695: PLUS
72696: PUSH
72697: LD_VAR 0 2
72701: PUSH
72702: LD_INT 4
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: PUSH
72710: LD_VAR 0 1
72714: PUSH
72715: LD_VAR 0 2
72719: PUSH
72720: LD_INT 3
72722: MINUS
72723: PUSH
72724: LD_INT 3
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: LIST
72731: PUSH
72732: LD_VAR 0 1
72736: PUSH
72737: LD_INT 4
72739: MINUS
72740: PUSH
72741: LD_VAR 0 2
72745: PUSH
72746: LD_INT 4
72748: MINUS
72749: PUSH
72750: LD_INT 2
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: LIST
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: ST_TO_ADDR
// end ; 5 :
72765: GO 72905
72767: LD_INT 5
72769: DOUBLE
72770: EQUAL
72771: IFTRUE 72775
72773: GO 72904
72775: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72776: LD_ADDR_VAR 0 5
72780: PUSH
72781: LD_VAR 0 1
72785: PUSH
72786: LD_INT 4
72788: MINUS
72789: PUSH
72790: LD_VAR 0 2
72794: PUSH
72795: LD_INT 1
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: LIST
72802: PUSH
72803: LD_VAR 0 1
72807: PUSH
72808: LD_VAR 0 2
72812: PUSH
72813: LD_INT 4
72815: MINUS
72816: PUSH
72817: LD_INT 3
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: LIST
72824: PUSH
72825: LD_VAR 0 1
72829: PUSH
72830: LD_INT 4
72832: PLUS
72833: PUSH
72834: LD_VAR 0 2
72838: PUSH
72839: LD_INT 4
72841: PLUS
72842: PUSH
72843: LD_INT 5
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: PUSH
72851: LD_VAR 0 1
72855: PUSH
72856: LD_INT 3
72858: PLUS
72859: PUSH
72860: LD_VAR 0 2
72864: PUSH
72865: LD_INT 4
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: LIST
72872: PUSH
72873: LD_VAR 0 1
72877: PUSH
72878: LD_VAR 0 2
72882: PUSH
72883: LD_INT 3
72885: PLUS
72886: PUSH
72887: LD_INT 0
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: LIST
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: ST_TO_ADDR
// end ; end ;
72902: GO 72905
72904: POP
// result := list ;
72905: LD_ADDR_VAR 0 4
72909: PUSH
72910: LD_VAR 0 5
72914: ST_TO_ADDR
// end ;
72915: LD_VAR 0 4
72919: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72920: LD_INT 0
72922: PPUSH
72923: PPUSH
72924: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72925: LD_VAR 0 1
72929: NOT
72930: PUSH
72931: LD_VAR 0 2
72935: PUSH
72936: LD_INT 1
72938: PUSH
72939: LD_INT 2
72941: PUSH
72942: LD_INT 3
72944: PUSH
72945: LD_INT 4
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: IN
72954: NOT
72955: OR
72956: IFFALSE 72960
// exit ;
72958: GO 73052
// tmp := [ ] ;
72960: LD_ADDR_VAR 0 5
72964: PUSH
72965: EMPTY
72966: ST_TO_ADDR
// for i in units do
72967: LD_ADDR_VAR 0 4
72971: PUSH
72972: LD_VAR 0 1
72976: PUSH
72977: FOR_IN
72978: IFFALSE 73021
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72980: LD_ADDR_VAR 0 5
72984: PUSH
72985: LD_VAR 0 5
72989: PPUSH
72990: LD_VAR 0 5
72994: PUSH
72995: LD_INT 1
72997: PLUS
72998: PPUSH
72999: LD_VAR 0 4
73003: PPUSH
73004: LD_VAR 0 2
73008: PPUSH
73009: CALL_OW 259
73013: PPUSH
73014: CALL_OW 2
73018: ST_TO_ADDR
73019: GO 72977
73021: POP
73022: POP
// if not tmp then
73023: LD_VAR 0 5
73027: NOT
73028: IFFALSE 73032
// exit ;
73030: GO 73052
// result := SortListByListDesc ( units , tmp ) ;
73032: LD_ADDR_VAR 0 3
73036: PUSH
73037: LD_VAR 0 1
73041: PPUSH
73042: LD_VAR 0 5
73046: PPUSH
73047: CALL_OW 77
73051: ST_TO_ADDR
// end ;
73052: LD_VAR 0 3
73056: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73057: LD_INT 0
73059: PPUSH
73060: PPUSH
73061: PPUSH
// result := false ;
73062: LD_ADDR_VAR 0 3
73066: PUSH
73067: LD_INT 0
73069: ST_TO_ADDR
// x := GetX ( building ) ;
73070: LD_ADDR_VAR 0 4
73074: PUSH
73075: LD_VAR 0 2
73079: PPUSH
73080: CALL_OW 250
73084: ST_TO_ADDR
// y := GetY ( building ) ;
73085: LD_ADDR_VAR 0 5
73089: PUSH
73090: LD_VAR 0 2
73094: PPUSH
73095: CALL_OW 251
73099: ST_TO_ADDR
// if not building or not x or not y then
73100: LD_VAR 0 2
73104: NOT
73105: PUSH
73106: LD_VAR 0 4
73110: NOT
73111: OR
73112: PUSH
73113: LD_VAR 0 5
73117: NOT
73118: OR
73119: IFFALSE 73123
// exit ;
73121: GO 73215
// if GetTaskList ( unit ) then
73123: LD_VAR 0 1
73127: PPUSH
73128: CALL_OW 437
73132: IFFALSE 73215
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73134: LD_STRING e
73136: PUSH
73137: LD_VAR 0 1
73141: PPUSH
73142: CALL_OW 437
73146: PUSH
73147: LD_INT 1
73149: ARRAY
73150: PUSH
73151: LD_INT 1
73153: ARRAY
73154: EQUAL
73155: PUSH
73156: LD_VAR 0 4
73160: PUSH
73161: LD_VAR 0 1
73165: PPUSH
73166: CALL_OW 437
73170: PUSH
73171: LD_INT 1
73173: ARRAY
73174: PUSH
73175: LD_INT 2
73177: ARRAY
73178: EQUAL
73179: AND
73180: PUSH
73181: LD_VAR 0 5
73185: PUSH
73186: LD_VAR 0 1
73190: PPUSH
73191: CALL_OW 437
73195: PUSH
73196: LD_INT 1
73198: ARRAY
73199: PUSH
73200: LD_INT 3
73202: ARRAY
73203: EQUAL
73204: AND
73205: IFFALSE 73215
// result := true end ;
73207: LD_ADDR_VAR 0 3
73211: PUSH
73212: LD_INT 1
73214: ST_TO_ADDR
// end ;
73215: LD_VAR 0 3
73219: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73220: LD_INT 0
73222: PPUSH
// result := false ;
73223: LD_ADDR_VAR 0 4
73227: PUSH
73228: LD_INT 0
73230: ST_TO_ADDR
// if GetTaskList ( unit ) then
73231: LD_VAR 0 1
73235: PPUSH
73236: CALL_OW 437
73240: IFFALSE 73323
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73242: LD_STRING M
73244: PUSH
73245: LD_VAR 0 1
73249: PPUSH
73250: CALL_OW 437
73254: PUSH
73255: LD_INT 1
73257: ARRAY
73258: PUSH
73259: LD_INT 1
73261: ARRAY
73262: EQUAL
73263: PUSH
73264: LD_VAR 0 2
73268: PUSH
73269: LD_VAR 0 1
73273: PPUSH
73274: CALL_OW 437
73278: PUSH
73279: LD_INT 1
73281: ARRAY
73282: PUSH
73283: LD_INT 2
73285: ARRAY
73286: EQUAL
73287: AND
73288: PUSH
73289: LD_VAR 0 3
73293: PUSH
73294: LD_VAR 0 1
73298: PPUSH
73299: CALL_OW 437
73303: PUSH
73304: LD_INT 1
73306: ARRAY
73307: PUSH
73308: LD_INT 3
73310: ARRAY
73311: EQUAL
73312: AND
73313: IFFALSE 73323
// result := true ;
73315: LD_ADDR_VAR 0 4
73319: PUSH
73320: LD_INT 1
73322: ST_TO_ADDR
// end ; end ;
73323: LD_VAR 0 4
73327: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73328: LD_INT 0
73330: PPUSH
73331: PPUSH
73332: PPUSH
73333: PPUSH
// if not unit or not area then
73334: LD_VAR 0 1
73338: NOT
73339: PUSH
73340: LD_VAR 0 2
73344: NOT
73345: OR
73346: IFFALSE 73350
// exit ;
73348: GO 73514
// tmp := AreaToList ( area , i ) ;
73350: LD_ADDR_VAR 0 6
73354: PUSH
73355: LD_VAR 0 2
73359: PPUSH
73360: LD_VAR 0 5
73364: PPUSH
73365: CALL_OW 517
73369: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73370: LD_ADDR_VAR 0 5
73374: PUSH
73375: DOUBLE
73376: LD_INT 1
73378: DEC
73379: ST_TO_ADDR
73380: LD_VAR 0 6
73384: PUSH
73385: LD_INT 1
73387: ARRAY
73388: PUSH
73389: FOR_TO
73390: IFFALSE 73512
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73392: LD_ADDR_VAR 0 7
73396: PUSH
73397: LD_VAR 0 6
73401: PUSH
73402: LD_INT 1
73404: ARRAY
73405: PUSH
73406: LD_VAR 0 5
73410: ARRAY
73411: PUSH
73412: LD_VAR 0 6
73416: PUSH
73417: LD_INT 2
73419: ARRAY
73420: PUSH
73421: LD_VAR 0 5
73425: ARRAY
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73431: LD_VAR 0 7
73435: PUSH
73436: LD_INT 1
73438: ARRAY
73439: PPUSH
73440: LD_VAR 0 7
73444: PUSH
73445: LD_INT 2
73447: ARRAY
73448: PPUSH
73449: CALL_OW 428
73453: PUSH
73454: LD_INT 0
73456: EQUAL
73457: IFFALSE 73510
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73459: LD_VAR 0 1
73463: PPUSH
73464: LD_VAR 0 7
73468: PUSH
73469: LD_INT 1
73471: ARRAY
73472: PPUSH
73473: LD_VAR 0 7
73477: PUSH
73478: LD_INT 2
73480: ARRAY
73481: PPUSH
73482: LD_VAR 0 3
73486: PPUSH
73487: CALL_OW 48
// result := IsPlaced ( unit ) ;
73491: LD_ADDR_VAR 0 4
73495: PUSH
73496: LD_VAR 0 1
73500: PPUSH
73501: CALL_OW 305
73505: ST_TO_ADDR
// exit ;
73506: POP
73507: POP
73508: GO 73514
// end ; end ;
73510: GO 73389
73512: POP
73513: POP
// end ;
73514: LD_VAR 0 4
73518: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73519: LD_INT 0
73521: PPUSH
73522: PPUSH
73523: PPUSH
// if not side or side > 8 then
73524: LD_VAR 0 1
73528: NOT
73529: PUSH
73530: LD_VAR 0 1
73534: PUSH
73535: LD_INT 8
73537: GREATER
73538: OR
73539: IFFALSE 73543
// exit ;
73541: GO 73730
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73543: LD_ADDR_VAR 0 4
73547: PUSH
73548: LD_INT 22
73550: PUSH
73551: LD_VAR 0 1
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PUSH
73560: LD_INT 21
73562: PUSH
73563: LD_INT 3
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PPUSH
73574: CALL_OW 69
73578: ST_TO_ADDR
// if not tmp then
73579: LD_VAR 0 4
73583: NOT
73584: IFFALSE 73588
// exit ;
73586: GO 73730
// enable_addtolog := true ;
73588: LD_ADDR_OWVAR 81
73592: PUSH
73593: LD_INT 1
73595: ST_TO_ADDR
// AddToLog ( [ ) ;
73596: LD_STRING [
73598: PPUSH
73599: CALL_OW 561
// for i in tmp do
73603: LD_ADDR_VAR 0 3
73607: PUSH
73608: LD_VAR 0 4
73612: PUSH
73613: FOR_IN
73614: IFFALSE 73721
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73616: LD_STRING [
73618: PUSH
73619: LD_VAR 0 3
73623: PPUSH
73624: CALL_OW 266
73628: STR
73629: PUSH
73630: LD_STRING , 
73632: STR
73633: PUSH
73634: LD_VAR 0 3
73638: PPUSH
73639: CALL_OW 250
73643: STR
73644: PUSH
73645: LD_STRING , 
73647: STR
73648: PUSH
73649: LD_VAR 0 3
73653: PPUSH
73654: CALL_OW 251
73658: STR
73659: PUSH
73660: LD_STRING , 
73662: STR
73663: PUSH
73664: LD_VAR 0 3
73668: PPUSH
73669: CALL_OW 254
73673: STR
73674: PUSH
73675: LD_STRING , 
73677: STR
73678: PUSH
73679: LD_VAR 0 3
73683: PPUSH
73684: LD_INT 1
73686: PPUSH
73687: CALL_OW 268
73691: STR
73692: PUSH
73693: LD_STRING , 
73695: STR
73696: PUSH
73697: LD_VAR 0 3
73701: PPUSH
73702: LD_INT 2
73704: PPUSH
73705: CALL_OW 268
73709: STR
73710: PUSH
73711: LD_STRING ],
73713: STR
73714: PPUSH
73715: CALL_OW 561
// end ;
73719: GO 73613
73721: POP
73722: POP
// AddToLog ( ]; ) ;
73723: LD_STRING ];
73725: PPUSH
73726: CALL_OW 561
// end ;
73730: LD_VAR 0 2
73734: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73735: LD_INT 0
73737: PPUSH
73738: PPUSH
73739: PPUSH
73740: PPUSH
73741: PPUSH
// if not area or not rate or not max then
73742: LD_VAR 0 1
73746: NOT
73747: PUSH
73748: LD_VAR 0 2
73752: NOT
73753: OR
73754: PUSH
73755: LD_VAR 0 4
73759: NOT
73760: OR
73761: IFFALSE 73765
// exit ;
73763: GO 73957
// while 1 do
73765: LD_INT 1
73767: IFFALSE 73957
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73769: LD_ADDR_VAR 0 9
73773: PUSH
73774: LD_VAR 0 1
73778: PPUSH
73779: LD_INT 1
73781: PPUSH
73782: CALL_OW 287
73786: PUSH
73787: LD_INT 10
73789: MUL
73790: ST_TO_ADDR
// r := rate / 10 ;
73791: LD_ADDR_VAR 0 7
73795: PUSH
73796: LD_VAR 0 2
73800: PUSH
73801: LD_INT 10
73803: DIVREAL
73804: ST_TO_ADDR
// time := 1 1$00 ;
73805: LD_ADDR_VAR 0 8
73809: PUSH
73810: LD_INT 2100
73812: ST_TO_ADDR
// if amount < min then
73813: LD_VAR 0 9
73817: PUSH
73818: LD_VAR 0 3
73822: LESS
73823: IFFALSE 73841
// r := r * 2 else
73825: LD_ADDR_VAR 0 7
73829: PUSH
73830: LD_VAR 0 7
73834: PUSH
73835: LD_INT 2
73837: MUL
73838: ST_TO_ADDR
73839: GO 73867
// if amount > max then
73841: LD_VAR 0 9
73845: PUSH
73846: LD_VAR 0 4
73850: GREATER
73851: IFFALSE 73867
// r := r / 2 ;
73853: LD_ADDR_VAR 0 7
73857: PUSH
73858: LD_VAR 0 7
73862: PUSH
73863: LD_INT 2
73865: DIVREAL
73866: ST_TO_ADDR
// time := time / r ;
73867: LD_ADDR_VAR 0 8
73871: PUSH
73872: LD_VAR 0 8
73876: PUSH
73877: LD_VAR 0 7
73881: DIVREAL
73882: ST_TO_ADDR
// if time < 0 then
73883: LD_VAR 0 8
73887: PUSH
73888: LD_INT 0
73890: LESS
73891: IFFALSE 73908
// time := time * - 1 ;
73893: LD_ADDR_VAR 0 8
73897: PUSH
73898: LD_VAR 0 8
73902: PUSH
73903: LD_INT 1
73905: NEG
73906: MUL
73907: ST_TO_ADDR
// wait ( time ) ;
73908: LD_VAR 0 8
73912: PPUSH
73913: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73917: LD_INT 35
73919: PPUSH
73920: LD_INT 875
73922: PPUSH
73923: CALL_OW 12
73927: PPUSH
73928: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73932: LD_INT 1
73934: PPUSH
73935: LD_INT 5
73937: PPUSH
73938: CALL_OW 12
73942: PPUSH
73943: LD_VAR 0 1
73947: PPUSH
73948: LD_INT 1
73950: PPUSH
73951: CALL_OW 55
// end ;
73955: GO 73765
// end ;
73957: LD_VAR 0 5
73961: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73962: LD_INT 0
73964: PPUSH
73965: PPUSH
73966: PPUSH
73967: PPUSH
73968: PPUSH
73969: PPUSH
73970: PPUSH
73971: PPUSH
// if not turrets or not factories then
73972: LD_VAR 0 1
73976: NOT
73977: PUSH
73978: LD_VAR 0 2
73982: NOT
73983: OR
73984: IFFALSE 73988
// exit ;
73986: GO 74295
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73988: LD_ADDR_VAR 0 10
73992: PUSH
73993: LD_INT 5
73995: PUSH
73996: LD_INT 6
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: PUSH
74003: LD_INT 2
74005: PUSH
74006: LD_INT 4
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: LD_INT 5
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 24
74030: PUSH
74031: LD_INT 25
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PUSH
74038: LD_INT 23
74040: PUSH
74041: LD_INT 27
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PUSH
74052: LD_INT 42
74054: PUSH
74055: LD_INT 43
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 44
74064: PUSH
74065: LD_INT 46
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 45
74074: PUSH
74075: LD_INT 47
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: LIST
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: LIST
74091: ST_TO_ADDR
// result := [ ] ;
74092: LD_ADDR_VAR 0 3
74096: PUSH
74097: EMPTY
74098: ST_TO_ADDR
// for i in turrets do
74099: LD_ADDR_VAR 0 4
74103: PUSH
74104: LD_VAR 0 1
74108: PUSH
74109: FOR_IN
74110: IFFALSE 74293
// begin nat := GetNation ( i ) ;
74112: LD_ADDR_VAR 0 7
74116: PUSH
74117: LD_VAR 0 4
74121: PPUSH
74122: CALL_OW 248
74126: ST_TO_ADDR
// weapon := 0 ;
74127: LD_ADDR_VAR 0 8
74131: PUSH
74132: LD_INT 0
74134: ST_TO_ADDR
// if not nat then
74135: LD_VAR 0 7
74139: NOT
74140: IFFALSE 74144
// continue ;
74142: GO 74109
// for j in list [ nat ] do
74144: LD_ADDR_VAR 0 5
74148: PUSH
74149: LD_VAR 0 10
74153: PUSH
74154: LD_VAR 0 7
74158: ARRAY
74159: PUSH
74160: FOR_IN
74161: IFFALSE 74202
// if GetBWeapon ( i ) = j [ 1 ] then
74163: LD_VAR 0 4
74167: PPUSH
74168: CALL_OW 269
74172: PUSH
74173: LD_VAR 0 5
74177: PUSH
74178: LD_INT 1
74180: ARRAY
74181: EQUAL
74182: IFFALSE 74200
// begin weapon := j [ 2 ] ;
74184: LD_ADDR_VAR 0 8
74188: PUSH
74189: LD_VAR 0 5
74193: PUSH
74194: LD_INT 2
74196: ARRAY
74197: ST_TO_ADDR
// break ;
74198: GO 74202
// end ;
74200: GO 74160
74202: POP
74203: POP
// if not weapon then
74204: LD_VAR 0 8
74208: NOT
74209: IFFALSE 74213
// continue ;
74211: GO 74109
// for k in factories do
74213: LD_ADDR_VAR 0 6
74217: PUSH
74218: LD_VAR 0 2
74222: PUSH
74223: FOR_IN
74224: IFFALSE 74289
// begin weapons := AvailableWeaponList ( k ) ;
74226: LD_ADDR_VAR 0 9
74230: PUSH
74231: LD_VAR 0 6
74235: PPUSH
74236: CALL_OW 478
74240: ST_TO_ADDR
// if not weapons then
74241: LD_VAR 0 9
74245: NOT
74246: IFFALSE 74250
// continue ;
74248: GO 74223
// if weapon in weapons then
74250: LD_VAR 0 8
74254: PUSH
74255: LD_VAR 0 9
74259: IN
74260: IFFALSE 74287
// begin result := [ i , weapon ] ;
74262: LD_ADDR_VAR 0 3
74266: PUSH
74267: LD_VAR 0 4
74271: PUSH
74272: LD_VAR 0 8
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: ST_TO_ADDR
// exit ;
74281: POP
74282: POP
74283: POP
74284: POP
74285: GO 74295
// end ; end ;
74287: GO 74223
74289: POP
74290: POP
// end ;
74291: GO 74109
74293: POP
74294: POP
// end ;
74295: LD_VAR 0 3
74299: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74300: LD_INT 0
74302: PPUSH
// if not side or side > 8 then
74303: LD_VAR 0 3
74307: NOT
74308: PUSH
74309: LD_VAR 0 3
74313: PUSH
74314: LD_INT 8
74316: GREATER
74317: OR
74318: IFFALSE 74322
// exit ;
74320: GO 74381
// if not range then
74322: LD_VAR 0 4
74326: NOT
74327: IFFALSE 74338
// range := - 12 ;
74329: LD_ADDR_VAR 0 4
74333: PUSH
74334: LD_INT 12
74336: NEG
74337: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74338: LD_VAR 0 1
74342: PPUSH
74343: LD_VAR 0 2
74347: PPUSH
74348: LD_VAR 0 3
74352: PPUSH
74353: LD_VAR 0 4
74357: PPUSH
74358: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74362: LD_VAR 0 1
74366: PPUSH
74367: LD_VAR 0 2
74371: PPUSH
74372: LD_VAR 0 3
74376: PPUSH
74377: CALL_OW 331
// end ;
74381: LD_VAR 0 5
74385: RET
// export function Video ( mode ) ; begin
74386: LD_INT 0
74388: PPUSH
// ingame_video = mode ;
74389: LD_ADDR_OWVAR 52
74393: PUSH
74394: LD_VAR 0 1
74398: ST_TO_ADDR
// interface_hidden = mode ;
74399: LD_ADDR_OWVAR 54
74403: PUSH
74404: LD_VAR 0 1
74408: ST_TO_ADDR
// end ;
74409: LD_VAR 0 2
74413: RET
// export function Join ( array , element ) ; begin
74414: LD_INT 0
74416: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74417: LD_ADDR_VAR 0 3
74421: PUSH
74422: LD_VAR 0 1
74426: PPUSH
74427: LD_VAR 0 1
74431: PUSH
74432: LD_INT 1
74434: PLUS
74435: PPUSH
74436: LD_VAR 0 2
74440: PPUSH
74441: CALL_OW 1
74445: ST_TO_ADDR
// end ;
74446: LD_VAR 0 3
74450: RET
// export function JoinUnion ( array , element ) ; begin
74451: LD_INT 0
74453: PPUSH
// result := array union element ;
74454: LD_ADDR_VAR 0 3
74458: PUSH
74459: LD_VAR 0 1
74463: PUSH
74464: LD_VAR 0 2
74468: UNION
74469: ST_TO_ADDR
// end ;
74470: LD_VAR 0 3
74474: RET
// export function GetBehemoths ( side ) ; begin
74475: LD_INT 0
74477: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74478: LD_ADDR_VAR 0 2
74482: PUSH
74483: LD_INT 22
74485: PUSH
74486: LD_VAR 0 1
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 31
74497: PUSH
74498: LD_INT 25
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: PPUSH
74509: CALL_OW 69
74513: ST_TO_ADDR
// end ;
74514: LD_VAR 0 2
74518: RET
// export function Shuffle ( array ) ; var i , index ; begin
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
74523: PPUSH
// result := [ ] ;
74524: LD_ADDR_VAR 0 2
74528: PUSH
74529: EMPTY
74530: ST_TO_ADDR
// if not array then
74531: LD_VAR 0 1
74535: NOT
74536: IFFALSE 74540
// exit ;
74538: GO 74639
// Randomize ;
74540: CALL_OW 10
// for i = array downto 1 do
74544: LD_ADDR_VAR 0 3
74548: PUSH
74549: DOUBLE
74550: LD_VAR 0 1
74554: INC
74555: ST_TO_ADDR
74556: LD_INT 1
74558: PUSH
74559: FOR_DOWNTO
74560: IFFALSE 74637
// begin index := rand ( 1 , array ) ;
74562: LD_ADDR_VAR 0 4
74566: PUSH
74567: LD_INT 1
74569: PPUSH
74570: LD_VAR 0 1
74574: PPUSH
74575: CALL_OW 12
74579: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74580: LD_ADDR_VAR 0 2
74584: PUSH
74585: LD_VAR 0 2
74589: PPUSH
74590: LD_VAR 0 2
74594: PUSH
74595: LD_INT 1
74597: PLUS
74598: PPUSH
74599: LD_VAR 0 1
74603: PUSH
74604: LD_VAR 0 4
74608: ARRAY
74609: PPUSH
74610: CALL_OW 2
74614: ST_TO_ADDR
// array := Delete ( array , index ) ;
74615: LD_ADDR_VAR 0 1
74619: PUSH
74620: LD_VAR 0 1
74624: PPUSH
74625: LD_VAR 0 4
74629: PPUSH
74630: CALL_OW 3
74634: ST_TO_ADDR
// end ;
74635: GO 74559
74637: POP
74638: POP
// end ;
74639: LD_VAR 0 2
74643: RET
// export function GetBaseMaterials ( base ) ; begin
74644: LD_INT 0
74646: PPUSH
// result := [ 0 , 0 , 0 ] ;
74647: LD_ADDR_VAR 0 2
74651: PUSH
74652: LD_INT 0
74654: PUSH
74655: LD_INT 0
74657: PUSH
74658: LD_INT 0
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: LIST
74665: ST_TO_ADDR
// if not base then
74666: LD_VAR 0 1
74670: NOT
74671: IFFALSE 74675
// exit ;
74673: GO 74724
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74675: LD_ADDR_VAR 0 2
74679: PUSH
74680: LD_VAR 0 1
74684: PPUSH
74685: LD_INT 1
74687: PPUSH
74688: CALL_OW 275
74692: PUSH
74693: LD_VAR 0 1
74697: PPUSH
74698: LD_INT 2
74700: PPUSH
74701: CALL_OW 275
74705: PUSH
74706: LD_VAR 0 1
74710: PPUSH
74711: LD_INT 3
74713: PPUSH
74714: CALL_OW 275
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: ST_TO_ADDR
// end ;
74724: LD_VAR 0 2
74728: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74729: LD_INT 0
74731: PPUSH
74732: PPUSH
// result := array ;
74733: LD_ADDR_VAR 0 3
74737: PUSH
74738: LD_VAR 0 1
74742: ST_TO_ADDR
// if size > 0 then
74743: LD_VAR 0 2
74747: PUSH
74748: LD_INT 0
74750: GREATER
74751: IFFALSE 74797
// for i := array downto size do
74753: LD_ADDR_VAR 0 4
74757: PUSH
74758: DOUBLE
74759: LD_VAR 0 1
74763: INC
74764: ST_TO_ADDR
74765: LD_VAR 0 2
74769: PUSH
74770: FOR_DOWNTO
74771: IFFALSE 74795
// result := Delete ( result , result ) ;
74773: LD_ADDR_VAR 0 3
74777: PUSH
74778: LD_VAR 0 3
74782: PPUSH
74783: LD_VAR 0 3
74787: PPUSH
74788: CALL_OW 3
74792: ST_TO_ADDR
74793: GO 74770
74795: POP
74796: POP
// end ;
74797: LD_VAR 0 3
74801: RET
// export function ComExit ( unit ) ; var tmp ; begin
74802: LD_INT 0
74804: PPUSH
74805: PPUSH
// if not IsInUnit ( unit ) then
74806: LD_VAR 0 1
74810: PPUSH
74811: CALL_OW 310
74815: NOT
74816: IFFALSE 74820
// exit ;
74818: GO 74880
// tmp := IsInUnit ( unit ) ;
74820: LD_ADDR_VAR 0 3
74824: PUSH
74825: LD_VAR 0 1
74829: PPUSH
74830: CALL_OW 310
74834: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74835: LD_VAR 0 3
74839: PPUSH
74840: CALL_OW 247
74844: PUSH
74845: LD_INT 2
74847: EQUAL
74848: IFFALSE 74861
// ComExitVehicle ( unit ) else
74850: LD_VAR 0 1
74854: PPUSH
74855: CALL_OW 121
74859: GO 74870
// ComExitBuilding ( unit ) ;
74861: LD_VAR 0 1
74865: PPUSH
74866: CALL_OW 122
// result := tmp ;
74870: LD_ADDR_VAR 0 2
74874: PUSH
74875: LD_VAR 0 3
74879: ST_TO_ADDR
// end ;
74880: LD_VAR 0 2
74884: RET
// export function ComExitAll ( units ) ; var i ; begin
74885: LD_INT 0
74887: PPUSH
74888: PPUSH
// if not units then
74889: LD_VAR 0 1
74893: NOT
74894: IFFALSE 74898
// exit ;
74896: GO 74924
// for i in units do
74898: LD_ADDR_VAR 0 3
74902: PUSH
74903: LD_VAR 0 1
74907: PUSH
74908: FOR_IN
74909: IFFALSE 74922
// ComExit ( i ) ;
74911: LD_VAR 0 3
74915: PPUSH
74916: CALL 74802 0 1
74920: GO 74908
74922: POP
74923: POP
// end ;
74924: LD_VAR 0 2
74928: RET
// export function ResetHc ; begin
74929: LD_INT 0
74931: PPUSH
// InitHc ;
74932: CALL_OW 19
// hc_importance := 0 ;
74936: LD_ADDR_OWVAR 32
74940: PUSH
74941: LD_INT 0
74943: ST_TO_ADDR
// end ;
74944: LD_VAR 0 1
74948: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74949: LD_INT 0
74951: PPUSH
74952: PPUSH
74953: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74954: LD_ADDR_VAR 0 6
74958: PUSH
74959: LD_VAR 0 1
74963: PUSH
74964: LD_VAR 0 3
74968: PLUS
74969: PUSH
74970: LD_INT 2
74972: DIV
74973: ST_TO_ADDR
// if _x < 0 then
74974: LD_VAR 0 6
74978: PUSH
74979: LD_INT 0
74981: LESS
74982: IFFALSE 74999
// _x := _x * - 1 ;
74984: LD_ADDR_VAR 0 6
74988: PUSH
74989: LD_VAR 0 6
74993: PUSH
74994: LD_INT 1
74996: NEG
74997: MUL
74998: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74999: LD_ADDR_VAR 0 7
75003: PUSH
75004: LD_VAR 0 2
75008: PUSH
75009: LD_VAR 0 4
75013: PLUS
75014: PUSH
75015: LD_INT 2
75017: DIV
75018: ST_TO_ADDR
// if _y < 0 then
75019: LD_VAR 0 7
75023: PUSH
75024: LD_INT 0
75026: LESS
75027: IFFALSE 75044
// _y := _y * - 1 ;
75029: LD_ADDR_VAR 0 7
75033: PUSH
75034: LD_VAR 0 7
75038: PUSH
75039: LD_INT 1
75041: NEG
75042: MUL
75043: ST_TO_ADDR
// result := [ _x , _y ] ;
75044: LD_ADDR_VAR 0 5
75048: PUSH
75049: LD_VAR 0 6
75053: PUSH
75054: LD_VAR 0 7
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: ST_TO_ADDR
// end ;
75063: LD_VAR 0 5
75067: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75068: LD_INT 0
75070: PPUSH
75071: PPUSH
75072: PPUSH
75073: PPUSH
// task := GetTaskList ( unit ) ;
75074: LD_ADDR_VAR 0 7
75078: PUSH
75079: LD_VAR 0 1
75083: PPUSH
75084: CALL_OW 437
75088: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75089: LD_VAR 0 7
75093: NOT
75094: PUSH
75095: LD_VAR 0 1
75099: PPUSH
75100: LD_VAR 0 2
75104: PPUSH
75105: CALL_OW 308
75109: NOT
75110: AND
75111: IFFALSE 75115
// exit ;
75113: GO 75233
// if IsInArea ( unit , area ) then
75115: LD_VAR 0 1
75119: PPUSH
75120: LD_VAR 0 2
75124: PPUSH
75125: CALL_OW 308
75129: IFFALSE 75147
// begin ComMoveToArea ( unit , goAway ) ;
75131: LD_VAR 0 1
75135: PPUSH
75136: LD_VAR 0 3
75140: PPUSH
75141: CALL_OW 113
// exit ;
75145: GO 75233
// end ; if task [ 1 ] [ 1 ] <> M then
75147: LD_VAR 0 7
75151: PUSH
75152: LD_INT 1
75154: ARRAY
75155: PUSH
75156: LD_INT 1
75158: ARRAY
75159: PUSH
75160: LD_STRING M
75162: NONEQUAL
75163: IFFALSE 75167
// exit ;
75165: GO 75233
// x := task [ 1 ] [ 2 ] ;
75167: LD_ADDR_VAR 0 5
75171: PUSH
75172: LD_VAR 0 7
75176: PUSH
75177: LD_INT 1
75179: ARRAY
75180: PUSH
75181: LD_INT 2
75183: ARRAY
75184: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75185: LD_ADDR_VAR 0 6
75189: PUSH
75190: LD_VAR 0 7
75194: PUSH
75195: LD_INT 1
75197: ARRAY
75198: PUSH
75199: LD_INT 3
75201: ARRAY
75202: ST_TO_ADDR
// if InArea ( x , y , area ) then
75203: LD_VAR 0 5
75207: PPUSH
75208: LD_VAR 0 6
75212: PPUSH
75213: LD_VAR 0 2
75217: PPUSH
75218: CALL_OW 309
75222: IFFALSE 75233
// ComStop ( unit ) ;
75224: LD_VAR 0 1
75228: PPUSH
75229: CALL_OW 141
// end ;
75233: LD_VAR 0 4
75237: RET
// export function Abs ( value ) ; begin
75238: LD_INT 0
75240: PPUSH
// result := value ;
75241: LD_ADDR_VAR 0 2
75245: PUSH
75246: LD_VAR 0 1
75250: ST_TO_ADDR
// if value < 0 then
75251: LD_VAR 0 1
75255: PUSH
75256: LD_INT 0
75258: LESS
75259: IFFALSE 75276
// result := value * - 1 ;
75261: LD_ADDR_VAR 0 2
75265: PUSH
75266: LD_VAR 0 1
75270: PUSH
75271: LD_INT 1
75273: NEG
75274: MUL
75275: ST_TO_ADDR
// end ;
75276: LD_VAR 0 2
75280: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75281: LD_INT 0
75283: PPUSH
75284: PPUSH
75285: PPUSH
75286: PPUSH
75287: PPUSH
75288: PPUSH
75289: PPUSH
75290: PPUSH
// if not unit or not building then
75291: LD_VAR 0 1
75295: NOT
75296: PUSH
75297: LD_VAR 0 2
75301: NOT
75302: OR
75303: IFFALSE 75307
// exit ;
75305: GO 75533
// x := GetX ( building ) ;
75307: LD_ADDR_VAR 0 4
75311: PUSH
75312: LD_VAR 0 2
75316: PPUSH
75317: CALL_OW 250
75321: ST_TO_ADDR
// y := GetY ( building ) ;
75322: LD_ADDR_VAR 0 6
75326: PUSH
75327: LD_VAR 0 2
75331: PPUSH
75332: CALL_OW 251
75336: ST_TO_ADDR
// d := GetDir ( building ) ;
75337: LD_ADDR_VAR 0 8
75341: PUSH
75342: LD_VAR 0 2
75346: PPUSH
75347: CALL_OW 254
75351: ST_TO_ADDR
// r := 4 ;
75352: LD_ADDR_VAR 0 9
75356: PUSH
75357: LD_INT 4
75359: ST_TO_ADDR
// for i := 1 to 5 do
75360: LD_ADDR_VAR 0 10
75364: PUSH
75365: DOUBLE
75366: LD_INT 1
75368: DEC
75369: ST_TO_ADDR
75370: LD_INT 5
75372: PUSH
75373: FOR_TO
75374: IFFALSE 75531
// begin _x := ShiftX ( x , d , r + i ) ;
75376: LD_ADDR_VAR 0 5
75380: PUSH
75381: LD_VAR 0 4
75385: PPUSH
75386: LD_VAR 0 8
75390: PPUSH
75391: LD_VAR 0 9
75395: PUSH
75396: LD_VAR 0 10
75400: PLUS
75401: PPUSH
75402: CALL_OW 272
75406: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75407: LD_ADDR_VAR 0 7
75411: PUSH
75412: LD_VAR 0 6
75416: PPUSH
75417: LD_VAR 0 8
75421: PPUSH
75422: LD_VAR 0 9
75426: PUSH
75427: LD_VAR 0 10
75431: PLUS
75432: PPUSH
75433: CALL_OW 273
75437: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75438: LD_VAR 0 5
75442: PPUSH
75443: LD_VAR 0 7
75447: PPUSH
75448: CALL_OW 488
75452: PUSH
75453: LD_VAR 0 5
75457: PPUSH
75458: LD_VAR 0 7
75462: PPUSH
75463: CALL_OW 428
75467: PPUSH
75468: CALL_OW 247
75472: PUSH
75473: LD_INT 3
75475: PUSH
75476: LD_INT 2
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: IN
75483: NOT
75484: AND
75485: IFFALSE 75529
// begin ComMoveXY ( unit , _x , _y ) ;
75487: LD_VAR 0 1
75491: PPUSH
75492: LD_VAR 0 5
75496: PPUSH
75497: LD_VAR 0 7
75501: PPUSH
75502: CALL_OW 111
// result := [ _x , _y ] ;
75506: LD_ADDR_VAR 0 3
75510: PUSH
75511: LD_VAR 0 5
75515: PUSH
75516: LD_VAR 0 7
75520: PUSH
75521: EMPTY
75522: LIST
75523: LIST
75524: ST_TO_ADDR
// exit ;
75525: POP
75526: POP
75527: GO 75533
// end ; end ;
75529: GO 75373
75531: POP
75532: POP
// end ;
75533: LD_VAR 0 3
75537: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75538: LD_INT 0
75540: PPUSH
75541: PPUSH
75542: PPUSH
// result := 0 ;
75543: LD_ADDR_VAR 0 3
75547: PUSH
75548: LD_INT 0
75550: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75551: LD_VAR 0 1
75555: PUSH
75556: LD_INT 0
75558: LESS
75559: PUSH
75560: LD_VAR 0 1
75564: PUSH
75565: LD_INT 8
75567: GREATER
75568: OR
75569: PUSH
75570: LD_VAR 0 2
75574: PUSH
75575: LD_INT 0
75577: LESS
75578: OR
75579: PUSH
75580: LD_VAR 0 2
75584: PUSH
75585: LD_INT 8
75587: GREATER
75588: OR
75589: IFFALSE 75593
// exit ;
75591: GO 75668
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75593: LD_ADDR_VAR 0 4
75597: PUSH
75598: LD_INT 22
75600: PUSH
75601: LD_VAR 0 2
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PPUSH
75610: CALL_OW 69
75614: PUSH
75615: FOR_IN
75616: IFFALSE 75666
// begin un := UnitShoot ( i ) ;
75618: LD_ADDR_VAR 0 5
75622: PUSH
75623: LD_VAR 0 4
75627: PPUSH
75628: CALL_OW 504
75632: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75633: LD_VAR 0 5
75637: PPUSH
75638: CALL_OW 255
75642: PUSH
75643: LD_VAR 0 1
75647: EQUAL
75648: IFFALSE 75664
// begin result := un ;
75650: LD_ADDR_VAR 0 3
75654: PUSH
75655: LD_VAR 0 5
75659: ST_TO_ADDR
// exit ;
75660: POP
75661: POP
75662: GO 75668
// end ; end ;
75664: GO 75615
75666: POP
75667: POP
// end ;
75668: LD_VAR 0 3
75672: RET
// export function GetCargoBay ( units ) ; begin
75673: LD_INT 0
75675: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75676: LD_ADDR_VAR 0 2
75680: PUSH
75681: LD_VAR 0 1
75685: PPUSH
75686: LD_INT 2
75688: PUSH
75689: LD_INT 34
75691: PUSH
75692: LD_INT 12
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: LD_INT 34
75701: PUSH
75702: LD_INT 51
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 34
75711: PUSH
75712: LD_INT 32
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 34
75721: PUSH
75722: LD_EXP 51
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: PPUSH
75738: CALL_OW 72
75742: ST_TO_ADDR
// end ;
75743: LD_VAR 0 2
75747: RET
// export function Negate ( value ) ; begin
75748: LD_INT 0
75750: PPUSH
// result := not value ;
75751: LD_ADDR_VAR 0 2
75755: PUSH
75756: LD_VAR 0 1
75760: NOT
75761: ST_TO_ADDR
// end ;
75762: LD_VAR 0 2
75766: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75767: LD_INT 0
75769: PPUSH
// if x1 = x2 then
75770: LD_VAR 0 1
75774: PUSH
75775: LD_VAR 0 3
75779: EQUAL
75780: IFFALSE 75814
// begin if y1 > y2 then
75782: LD_VAR 0 2
75786: PUSH
75787: LD_VAR 0 4
75791: GREATER
75792: IFFALSE 75804
// result := 0 else
75794: LD_ADDR_VAR 0 5
75798: PUSH
75799: LD_INT 0
75801: ST_TO_ADDR
75802: GO 75812
// result := 3 ;
75804: LD_ADDR_VAR 0 5
75808: PUSH
75809: LD_INT 3
75811: ST_TO_ADDR
// exit ;
75812: GO 75900
// end ; if y1 = y2 then
75814: LD_VAR 0 2
75818: PUSH
75819: LD_VAR 0 4
75823: EQUAL
75824: IFFALSE 75858
// begin if x1 > x2 then
75826: LD_VAR 0 1
75830: PUSH
75831: LD_VAR 0 3
75835: GREATER
75836: IFFALSE 75848
// result := 1 else
75838: LD_ADDR_VAR 0 5
75842: PUSH
75843: LD_INT 1
75845: ST_TO_ADDR
75846: GO 75856
// result := 4 ;
75848: LD_ADDR_VAR 0 5
75852: PUSH
75853: LD_INT 4
75855: ST_TO_ADDR
// exit ;
75856: GO 75900
// end ; if x1 > x2 and y1 > y2 then
75858: LD_VAR 0 1
75862: PUSH
75863: LD_VAR 0 3
75867: GREATER
75868: PUSH
75869: LD_VAR 0 2
75873: PUSH
75874: LD_VAR 0 4
75878: GREATER
75879: AND
75880: IFFALSE 75892
// result := 2 else
75882: LD_ADDR_VAR 0 5
75886: PUSH
75887: LD_INT 2
75889: ST_TO_ADDR
75890: GO 75900
// result := 5 ;
75892: LD_ADDR_VAR 0 5
75896: PUSH
75897: LD_INT 5
75899: ST_TO_ADDR
// end ;
75900: LD_VAR 0 5
75904: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75905: LD_INT 0
75907: PPUSH
75908: PPUSH
// if not driver or not IsInUnit ( driver ) then
75909: LD_VAR 0 1
75913: NOT
75914: PUSH
75915: LD_VAR 0 1
75919: PPUSH
75920: CALL_OW 310
75924: NOT
75925: OR
75926: IFFALSE 75930
// exit ;
75928: GO 76020
// vehicle := IsInUnit ( driver ) ;
75930: LD_ADDR_VAR 0 3
75934: PUSH
75935: LD_VAR 0 1
75939: PPUSH
75940: CALL_OW 310
75944: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75945: LD_VAR 0 1
75949: PPUSH
75950: LD_STRING \
75952: PUSH
75953: LD_INT 0
75955: PUSH
75956: LD_INT 0
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: LD_INT 0
75964: PUSH
75965: LD_INT 0
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: PUSH
75980: LD_STRING E
75982: PUSH
75983: LD_INT 0
75985: PUSH
75986: LD_INT 0
75988: PUSH
75989: LD_VAR 0 3
75993: PUSH
75994: LD_INT 0
75996: PUSH
75997: LD_INT 0
75999: PUSH
76000: LD_INT 0
76002: PUSH
76003: EMPTY
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PPUSH
76016: CALL_OW 446
// end ;
76020: LD_VAR 0 2
76024: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76025: LD_INT 0
76027: PPUSH
76028: PPUSH
// if not driver or not IsInUnit ( driver ) then
76029: LD_VAR 0 1
76033: NOT
76034: PUSH
76035: LD_VAR 0 1
76039: PPUSH
76040: CALL_OW 310
76044: NOT
76045: OR
76046: IFFALSE 76050
// exit ;
76048: GO 76140
// vehicle := IsInUnit ( driver ) ;
76050: LD_ADDR_VAR 0 3
76054: PUSH
76055: LD_VAR 0 1
76059: PPUSH
76060: CALL_OW 310
76064: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76065: LD_VAR 0 1
76069: PPUSH
76070: LD_STRING \
76072: PUSH
76073: LD_INT 0
76075: PUSH
76076: LD_INT 0
76078: PUSH
76079: LD_INT 0
76081: PUSH
76082: LD_INT 0
76084: PUSH
76085: LD_INT 0
76087: PUSH
76088: LD_INT 0
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: PUSH
76100: LD_STRING E
76102: PUSH
76103: LD_INT 0
76105: PUSH
76106: LD_INT 0
76108: PUSH
76109: LD_VAR 0 3
76113: PUSH
76114: LD_INT 0
76116: PUSH
76117: LD_INT 0
76119: PUSH
76120: LD_INT 0
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PPUSH
76136: CALL_OW 447
// end ;
76140: LD_VAR 0 2
76144: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76145: LD_INT 0
76147: PPUSH
76148: PPUSH
76149: PPUSH
// tmp := [ ] ;
76150: LD_ADDR_VAR 0 5
76154: PUSH
76155: EMPTY
76156: ST_TO_ADDR
// for i in units do
76157: LD_ADDR_VAR 0 4
76161: PUSH
76162: LD_VAR 0 1
76166: PUSH
76167: FOR_IN
76168: IFFALSE 76206
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: LD_VAR 0 5
76179: PPUSH
76180: LD_VAR 0 5
76184: PUSH
76185: LD_INT 1
76187: PLUS
76188: PPUSH
76189: LD_VAR 0 4
76193: PPUSH
76194: CALL_OW 256
76198: PPUSH
76199: CALL_OW 2
76203: ST_TO_ADDR
76204: GO 76167
76206: POP
76207: POP
// if not tmp then
76208: LD_VAR 0 5
76212: NOT
76213: IFFALSE 76217
// exit ;
76215: GO 76265
// if asc then
76217: LD_VAR 0 2
76221: IFFALSE 76245
// result := SortListByListAsc ( units , tmp ) else
76223: LD_ADDR_VAR 0 3
76227: PUSH
76228: LD_VAR 0 1
76232: PPUSH
76233: LD_VAR 0 5
76237: PPUSH
76238: CALL_OW 76
76242: ST_TO_ADDR
76243: GO 76265
// result := SortListByListDesc ( units , tmp ) ;
76245: LD_ADDR_VAR 0 3
76249: PUSH
76250: LD_VAR 0 1
76254: PPUSH
76255: LD_VAR 0 5
76259: PPUSH
76260: CALL_OW 77
76264: ST_TO_ADDR
// end ;
76265: LD_VAR 0 3
76269: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76270: LD_INT 0
76272: PPUSH
76273: PPUSH
// task := GetTaskList ( mech ) ;
76274: LD_ADDR_VAR 0 4
76278: PUSH
76279: LD_VAR 0 1
76283: PPUSH
76284: CALL_OW 437
76288: ST_TO_ADDR
// if not task then
76289: LD_VAR 0 4
76293: NOT
76294: IFFALSE 76298
// exit ;
76296: GO 76340
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76298: LD_ADDR_VAR 0 3
76302: PUSH
76303: LD_VAR 0 4
76307: PUSH
76308: LD_INT 1
76310: ARRAY
76311: PUSH
76312: LD_INT 1
76314: ARRAY
76315: PUSH
76316: LD_STRING r
76318: EQUAL
76319: PUSH
76320: LD_VAR 0 4
76324: PUSH
76325: LD_INT 1
76327: ARRAY
76328: PUSH
76329: LD_INT 4
76331: ARRAY
76332: PUSH
76333: LD_VAR 0 2
76337: EQUAL
76338: AND
76339: ST_TO_ADDR
// end ;
76340: LD_VAR 0 3
76344: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76345: LD_INT 0
76347: PPUSH
// SetDir ( unit , d ) ;
76348: LD_VAR 0 1
76352: PPUSH
76353: LD_VAR 0 4
76357: PPUSH
76358: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76362: LD_VAR 0 1
76366: PPUSH
76367: LD_VAR 0 2
76371: PPUSH
76372: LD_VAR 0 3
76376: PPUSH
76377: LD_VAR 0 5
76381: PPUSH
76382: CALL_OW 48
// end ;
76386: LD_VAR 0 6
76390: RET
// export function ToNaturalNumber ( number ) ; begin
76391: LD_INT 0
76393: PPUSH
// result := number div 1 ;
76394: LD_ADDR_VAR 0 2
76398: PUSH
76399: LD_VAR 0 1
76403: PUSH
76404: LD_INT 1
76406: DIV
76407: ST_TO_ADDR
// if number < 0 then
76408: LD_VAR 0 1
76412: PUSH
76413: LD_INT 0
76415: LESS
76416: IFFALSE 76426
// result := 0 ;
76418: LD_ADDR_VAR 0 2
76422: PUSH
76423: LD_INT 0
76425: ST_TO_ADDR
// end ;
76426: LD_VAR 0 2
76430: RET
// export function SortByClass ( units , class ) ; var un ; begin
76431: LD_INT 0
76433: PPUSH
76434: PPUSH
// if not units or not class then
76435: LD_VAR 0 1
76439: NOT
76440: PUSH
76441: LD_VAR 0 2
76445: NOT
76446: OR
76447: IFFALSE 76451
// exit ;
76449: GO 76546
// result := [ ] ;
76451: LD_ADDR_VAR 0 3
76455: PUSH
76456: EMPTY
76457: ST_TO_ADDR
// for un in units do
76458: LD_ADDR_VAR 0 4
76462: PUSH
76463: LD_VAR 0 1
76467: PUSH
76468: FOR_IN
76469: IFFALSE 76544
// if GetClass ( un ) = class then
76471: LD_VAR 0 4
76475: PPUSH
76476: CALL_OW 257
76480: PUSH
76481: LD_VAR 0 2
76485: EQUAL
76486: IFFALSE 76513
// result := Insert ( result , 1 , un ) else
76488: LD_ADDR_VAR 0 3
76492: PUSH
76493: LD_VAR 0 3
76497: PPUSH
76498: LD_INT 1
76500: PPUSH
76501: LD_VAR 0 4
76505: PPUSH
76506: CALL_OW 2
76510: ST_TO_ADDR
76511: GO 76542
// result := Replace ( result , result + 1 , un ) ;
76513: LD_ADDR_VAR 0 3
76517: PUSH
76518: LD_VAR 0 3
76522: PPUSH
76523: LD_VAR 0 3
76527: PUSH
76528: LD_INT 1
76530: PLUS
76531: PPUSH
76532: LD_VAR 0 4
76536: PPUSH
76537: CALL_OW 1
76541: ST_TO_ADDR
76542: GO 76468
76544: POP
76545: POP
// end ;
76546: LD_VAR 0 3
76550: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76551: LD_INT 0
76553: PPUSH
76554: PPUSH
76555: PPUSH
76556: PPUSH
76557: PPUSH
76558: PPUSH
76559: PPUSH
// result := [ ] ;
76560: LD_ADDR_VAR 0 4
76564: PUSH
76565: EMPTY
76566: ST_TO_ADDR
// if x - r < 0 then
76567: LD_VAR 0 1
76571: PUSH
76572: LD_VAR 0 3
76576: MINUS
76577: PUSH
76578: LD_INT 0
76580: LESS
76581: IFFALSE 76593
// min_x := 0 else
76583: LD_ADDR_VAR 0 8
76587: PUSH
76588: LD_INT 0
76590: ST_TO_ADDR
76591: GO 76609
// min_x := x - r ;
76593: LD_ADDR_VAR 0 8
76597: PUSH
76598: LD_VAR 0 1
76602: PUSH
76603: LD_VAR 0 3
76607: MINUS
76608: ST_TO_ADDR
// if y - r < 0 then
76609: LD_VAR 0 2
76613: PUSH
76614: LD_VAR 0 3
76618: MINUS
76619: PUSH
76620: LD_INT 0
76622: LESS
76623: IFFALSE 76635
// min_y := 0 else
76625: LD_ADDR_VAR 0 7
76629: PUSH
76630: LD_INT 0
76632: ST_TO_ADDR
76633: GO 76651
// min_y := y - r ;
76635: LD_ADDR_VAR 0 7
76639: PUSH
76640: LD_VAR 0 2
76644: PUSH
76645: LD_VAR 0 3
76649: MINUS
76650: ST_TO_ADDR
// max_x := x + r ;
76651: LD_ADDR_VAR 0 9
76655: PUSH
76656: LD_VAR 0 1
76660: PUSH
76661: LD_VAR 0 3
76665: PLUS
76666: ST_TO_ADDR
// max_y := y + r ;
76667: LD_ADDR_VAR 0 10
76671: PUSH
76672: LD_VAR 0 2
76676: PUSH
76677: LD_VAR 0 3
76681: PLUS
76682: ST_TO_ADDR
// for _x = min_x to max_x do
76683: LD_ADDR_VAR 0 5
76687: PUSH
76688: DOUBLE
76689: LD_VAR 0 8
76693: DEC
76694: ST_TO_ADDR
76695: LD_VAR 0 9
76699: PUSH
76700: FOR_TO
76701: IFFALSE 76802
// for _y = min_y to max_y do
76703: LD_ADDR_VAR 0 6
76707: PUSH
76708: DOUBLE
76709: LD_VAR 0 7
76713: DEC
76714: ST_TO_ADDR
76715: LD_VAR 0 10
76719: PUSH
76720: FOR_TO
76721: IFFALSE 76798
// begin if not ValidHex ( _x , _y ) then
76723: LD_VAR 0 5
76727: PPUSH
76728: LD_VAR 0 6
76732: PPUSH
76733: CALL_OW 488
76737: NOT
76738: IFFALSE 76742
// continue ;
76740: GO 76720
// if GetResourceTypeXY ( _x , _y ) then
76742: LD_VAR 0 5
76746: PPUSH
76747: LD_VAR 0 6
76751: PPUSH
76752: CALL_OW 283
76756: IFFALSE 76796
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76758: LD_ADDR_VAR 0 4
76762: PUSH
76763: LD_VAR 0 4
76767: PPUSH
76768: LD_VAR 0 4
76772: PUSH
76773: LD_INT 1
76775: PLUS
76776: PPUSH
76777: LD_VAR 0 5
76781: PUSH
76782: LD_VAR 0 6
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: PPUSH
76791: CALL_OW 1
76795: ST_TO_ADDR
// end ;
76796: GO 76720
76798: POP
76799: POP
76800: GO 76700
76802: POP
76803: POP
// end ;
76804: LD_VAR 0 4
76808: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
76809: LD_INT 0
76811: PPUSH
76812: PPUSH
76813: PPUSH
76814: PPUSH
76815: PPUSH
76816: PPUSH
// if not units then
76817: LD_VAR 0 1
76821: NOT
76822: IFFALSE 76826
// exit ;
76824: GO 77227
// result := UnitFilter ( units , [ f_ok ] ) ;
76826: LD_ADDR_VAR 0 3
76830: PUSH
76831: LD_VAR 0 1
76835: PPUSH
76836: LD_INT 50
76838: PUSH
76839: EMPTY
76840: LIST
76841: PPUSH
76842: CALL_OW 72
76846: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76847: LD_ADDR_VAR 0 7
76851: PUSH
76852: LD_VAR 0 1
76856: PUSH
76857: LD_INT 1
76859: ARRAY
76860: PPUSH
76861: CALL_OW 255
76865: ST_TO_ADDR
// if not result then
76866: LD_VAR 0 3
76870: NOT
76871: IFFALSE 76875
// exit ;
76873: GO 77227
// for i in result do
76875: LD_ADDR_VAR 0 4
76879: PUSH
76880: LD_VAR 0 3
76884: PUSH
76885: FOR_IN
76886: IFFALSE 77225
// begin tag := GetTag ( i ) + 1 ;
76888: LD_ADDR_VAR 0 8
76892: PUSH
76893: LD_VAR 0 4
76897: PPUSH
76898: CALL_OW 110
76902: PUSH
76903: LD_INT 1
76905: PLUS
76906: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76907: LD_ADDR_VAR 0 6
76911: PUSH
76912: LD_VAR 0 4
76916: PPUSH
76917: CALL_OW 250
76921: PPUSH
76922: LD_VAR 0 4
76926: PPUSH
76927: CALL_OW 251
76931: PPUSH
76932: LD_INT 6
76934: PPUSH
76935: CALL 76551 0 3
76939: ST_TO_ADDR
// if cr then
76940: LD_VAR 0 6
76944: IFFALSE 76983
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76946: LD_VAR 0 4
76950: PPUSH
76951: LD_VAR 0 6
76955: PUSH
76956: LD_INT 1
76958: ARRAY
76959: PUSH
76960: LD_INT 1
76962: ARRAY
76963: PPUSH
76964: LD_VAR 0 6
76968: PUSH
76969: LD_INT 1
76971: ARRAY
76972: PUSH
76973: LD_INT 2
76975: ARRAY
76976: PPUSH
76977: CALL_OW 116
76981: GO 77223
// if path > tag then
76983: LD_VAR 0 2
76987: PUSH
76988: LD_VAR 0 8
76992: GREATER
76993: IFFALSE 77171
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76995: LD_ADDR_VAR 0 5
76999: PUSH
77000: LD_INT 81
77002: PUSH
77003: LD_VAR 0 7
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: LD_INT 91
77014: PUSH
77015: LD_VAR 0 4
77019: PUSH
77020: LD_INT 12
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: LIST
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PPUSH
77032: CALL_OW 69
77036: ST_TO_ADDR
// if enemy then
77037: LD_VAR 0 5
77041: IFFALSE 77069
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77043: LD_VAR 0 4
77047: PPUSH
77048: LD_VAR 0 5
77052: PPUSH
77053: LD_VAR 0 4
77057: PPUSH
77058: CALL_OW 74
77062: PPUSH
77063: CALL_OW 115
77067: GO 77169
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77069: LD_VAR 0 4
77073: PPUSH
77074: LD_VAR 0 2
77078: PUSH
77079: LD_VAR 0 8
77083: ARRAY
77084: PUSH
77085: LD_INT 1
77087: ARRAY
77088: PPUSH
77089: LD_VAR 0 2
77093: PUSH
77094: LD_VAR 0 8
77098: ARRAY
77099: PUSH
77100: LD_INT 2
77102: ARRAY
77103: PPUSH
77104: CALL_OW 297
77108: PUSH
77109: LD_INT 6
77111: GREATER
77112: IFFALSE 77155
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77114: LD_VAR 0 4
77118: PPUSH
77119: LD_VAR 0 2
77123: PUSH
77124: LD_VAR 0 8
77128: ARRAY
77129: PUSH
77130: LD_INT 1
77132: ARRAY
77133: PPUSH
77134: LD_VAR 0 2
77138: PUSH
77139: LD_VAR 0 8
77143: ARRAY
77144: PUSH
77145: LD_INT 2
77147: ARRAY
77148: PPUSH
77149: CALL_OW 114
77153: GO 77169
// SetTag ( i , tag ) ;
77155: LD_VAR 0 4
77159: PPUSH
77160: LD_VAR 0 8
77164: PPUSH
77165: CALL_OW 109
// end else
77169: GO 77223
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77171: LD_ADDR_VAR 0 5
77175: PUSH
77176: LD_INT 81
77178: PUSH
77179: LD_VAR 0 7
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PPUSH
77188: CALL_OW 69
77192: ST_TO_ADDR
// if enemy then
77193: LD_VAR 0 5
77197: IFFALSE 77223
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77199: LD_VAR 0 4
77203: PPUSH
77204: LD_VAR 0 5
77208: PPUSH
77209: LD_VAR 0 4
77213: PPUSH
77214: CALL_OW 74
77218: PPUSH
77219: CALL_OW 115
// end ; end ;
77223: GO 76885
77225: POP
77226: POP
// end ; end_of_file
77227: LD_VAR 0 3
77231: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77232: LD_VAR 0 1
77236: PUSH
77237: LD_INT 200
77239: DOUBLE
77240: GREATEREQUAL
77241: IFFALSE 77249
77243: LD_INT 299
77245: DOUBLE
77246: LESSEQUAL
77247: IFTRUE 77251
77249: GO 77283
77251: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77252: LD_VAR 0 1
77256: PPUSH
77257: LD_VAR 0 2
77261: PPUSH
77262: LD_VAR 0 3
77266: PPUSH
77267: LD_VAR 0 4
77271: PPUSH
77272: LD_VAR 0 5
77276: PPUSH
77277: CALL 33794 0 5
77281: GO 77360
77283: LD_INT 300
77285: DOUBLE
77286: GREATEREQUAL
77287: IFFALSE 77295
77289: LD_INT 399
77291: DOUBLE
77292: LESSEQUAL
77293: IFTRUE 77297
77295: GO 77359
77297: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77298: LD_VAR 0 1
77302: PPUSH
77303: LD_VAR 0 2
77307: PPUSH
77308: LD_VAR 0 3
77312: PPUSH
77313: LD_VAR 0 4
77317: PPUSH
77318: LD_VAR 0 5
77322: PPUSH
77323: LD_VAR 0 6
77327: PPUSH
77328: LD_VAR 0 7
77332: PPUSH
77333: LD_VAR 0 8
77337: PPUSH
77338: LD_VAR 0 9
77342: PPUSH
77343: LD_VAR 0 10
77347: PPUSH
77348: LD_VAR 0 11
77352: PPUSH
77353: CALL 31692 0 11
77357: GO 77360
77359: POP
// end ;
77360: PPOPN 11
77362: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77363: LD_VAR 0 1
77367: PPUSH
77368: LD_VAR 0 2
77372: PPUSH
77373: LD_VAR 0 3
77377: PPUSH
77378: LD_VAR 0 4
77382: PPUSH
77383: LD_VAR 0 5
77387: PPUSH
77388: CALL 33786 0 5
// end ; end_of_file
77392: PPOPN 5
77394: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77395: LD_VAR 0 1
77399: PPUSH
77400: LD_VAR 0 2
77404: PPUSH
77405: LD_VAR 0 3
77409: PPUSH
77410: LD_VAR 0 4
77414: PPUSH
77415: LD_VAR 0 5
77419: PPUSH
77420: LD_VAR 0 6
77424: PPUSH
77425: CALL 19887 0 6
// end ;
77429: PPOPN 6
77431: END
