// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export reliefOfCommand ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4659 0 0
// PrepareRussianBase ;
  29: CALL 2948 0 0
// PrepareRussianCommander ;
  33: CALL 2899 0 0
// PrepareHeroes ;
  37: CALL 473 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8278 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 49
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 50
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode := 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible := 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack := 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson := 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase := 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer := 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus := 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer := 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog := 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog := 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog := 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil := 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower := 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable := 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter := 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor := true ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// reliefOfCommand := false ;
 298: LD_ADDR_EXP 48
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// escapeAvalaible = 0 ;
 306: LD_ADDR_EXP 40
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// specAttack := false ;
 314: LD_ADDR_EXP 47
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// ruMobile := [ ] ;
 322: LD_ADDR_EXP 46
 326: PUSH
 327: EMPTY
 328: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 329: LD_ADDR_EXP 43
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: LD_INT 5
 342: PUSH
 343: LD_INT 6
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: LD_OWVAR 67
 356: ARRAY
 357: ST_TO_ADDR
// end ;
 358: LD_VAR 0 1
 362: RET
// every 0 0$1 trigger debugMode do var i ;
 363: LD_EXP 45
 367: IFFALSE 429
 369: GO 371
 371: DISABLE
 372: LD_INT 0
 374: PPUSH
// begin enable ;
 375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 376: LD_ADDR_VAR 0 1
 380: PUSH
 381: LD_INT 22
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: PUSH
 391: LD_INT 21
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 427
// SetLives ( i , 1000 ) ;
 413: LD_VAR 0 1
 417: PPUSH
 418: LD_INT 1000
 420: PPUSH
 421: CALL_OW 234
 425: GO 410
 427: POP
 428: POP
// end ;
 429: PPOPN 1
 431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 34
 444: PUSH
 445: LD_INT 44
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PPUSH
 456: CALL_OW 69
 460: IFFALSE 472
 462: GO 464
 464: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 465: LD_STRING ACH_GUN
 467: PPUSH
 468: CALL_OW 543
 472: END
// export function PrepareHeroes ; var i , tmp ; begin
 473: LD_INT 0
 475: PPUSH
 476: PPUSH
 477: PPUSH
// uc_side = 1 ;
 478: LD_ADDR_OWVAR 20
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// uc_nation = 1 ;
 486: LD_ADDR_OWVAR 21
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 494: LD_ADDR_EXP 1
 498: PUSH
 499: LD_STRING JMM
 501: PPUSH
 502: LD_EXP 45
 506: NOT
 507: PPUSH
 508: LD_EXP 50
 512: PPUSH
 513: CALL 40717 0 3
 517: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 518: LD_ADDR_EXP 4
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 45
 530: NOT
 531: PPUSH
 532: LD_EXP 50
 536: PPUSH
 537: CALL 40717 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 50
 557: PPUSH
 558: CALL 40717 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 50
 578: PPUSH
 579: CALL 40717 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 50
 599: PPUSH
 600: CALL 40717 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 50
 620: PPUSH
 621: CALL 40717 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 50
 641: PPUSH
 642: CALL 40717 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 50
 662: PPUSH
 663: CALL 40717 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 50
 683: PPUSH
 684: CALL 40717 0 3
 688: ST_TO_ADDR
// if not Lisa then
 689: LD_EXP 4
 693: NOT
 694: IFFALSE 717
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 2
 700: PUSH
 701: LD_STRING Bobby
 703: PPUSH
 704: LD_INT 1
 706: PPUSH
 707: LD_EXP 50
 711: PPUSH
 712: CALL 40717 0 3
 716: ST_TO_ADDR
// if not Lisa and not Bobby then
 717: LD_EXP 4
 721: NOT
 722: PUSH
 723: LD_EXP 2
 727: NOT
 728: AND
 729: IFFALSE 752
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 731: LD_ADDR_EXP 3
 735: PUSH
 736: LD_STRING Cyrus
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: LD_EXP 50
 746: PPUSH
 747: CALL 40717 0 3
 751: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 752: LD_EXP 4
 756: NOT
 757: PUSH
 758: LD_EXP 2
 762: NOT
 763: AND
 764: PUSH
 765: LD_EXP 3
 769: NOT
 770: AND
 771: IFFALSE 870
// begin tmp = CreateCharacterSet ( 03_others ) ;
 773: LD_ADDR_VAR 0 3
 777: PUSH
 778: LD_STRING 03_others
 780: PPUSH
 781: CALL_OW 31
 785: ST_TO_ADDR
// if tmp then
 786: LD_VAR 0 3
 790: IFFALSE 847
// begin RandomBeforeMission = tmp [ 1 ] ;
 792: LD_ADDR_EXP 6
 796: PUSH
 797: LD_VAR 0 3
 801: PUSH
 802: LD_INT 1
 804: ARRAY
 805: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 40
// if tmp > 1 then
 813: LD_VAR 0 3
 817: PUSH
 818: LD_INT 1
 820: GREATER
 821: IFFALSE 845
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 823: LD_VAR 0 3
 827: PUSH
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 1
 835: ARRAY
 836: DIFF
 837: PPUSH
 838: LD_STRING 03_others
 840: PPUSH
 841: CALL_OW 38
// end else
 845: GO 870
// begin PrepareHuman ( false , 1 , 3 ) ;
 847: LD_INT 0
 849: PPUSH
 850: LD_INT 1
 852: PPUSH
 853: LD_INT 3
 855: PPUSH
 856: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 860: LD_ADDR_EXP 6
 864: PUSH
 865: CALL_OW 44
 869: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 870: LD_ADDR_OWVAR 20
 874: PUSH
 875: LD_INT 4
 877: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 878: LD_ADDR_EXP 13
 882: PUSH
 883: LD_STRING Donaldson
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_EXP 50
 893: PPUSH
 894: CALL 40717 0 3
 898: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 899: LD_ADDR_EXP 5
 903: PUSH
 904: LD_STRING Frank
 906: PPUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_EXP 50
 914: PPUSH
 915: CALL 40717 0 3
 919: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 920: LD_EXP 1
 924: PPUSH
 925: LD_INT 32
 927: PPUSH
 928: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 932: LD_EXP 7
 936: PPUSH
 937: LD_INT 1
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 947: LD_EXP 7
 951: PPUSH
 952: LD_INT 32
 954: PPUSH
 955: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 959: LD_EXP 8
 963: PPUSH
 964: LD_INT 2
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 974: LD_EXP 9
 978: PPUSH
 979: LD_INT 2
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 989: LD_EXP 12
 993: PPUSH
 994: LD_INT 2
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1004: LD_EXP 10
1008: PPUSH
1009: LD_INT 2
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1019: LD_EXP 11
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1034: LD_EXP 4
1038: PPUSH
1039: LD_INT 2
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// if Lisa = false then
1049: LD_EXP 4
1053: PUSH
1054: LD_INT 0
1056: EQUAL
1057: IFFALSE 1074
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1059: LD_EXP 2
1063: PPUSH
1064: LD_INT 2
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 49
// if Lisa = false and Bobby = false then
1074: LD_EXP 4
1078: PUSH
1079: LD_INT 0
1081: EQUAL
1082: PUSH
1083: LD_EXP 2
1087: PUSH
1088: LD_INT 0
1090: EQUAL
1091: AND
1092: IFFALSE 1109
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1094: LD_EXP 3
1098: PPUSH
1099: LD_INT 2
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1109: LD_EXP 4
1113: PUSH
1114: LD_INT 0
1116: EQUAL
1117: PUSH
1118: LD_EXP 2
1122: PUSH
1123: LD_INT 0
1125: EQUAL
1126: AND
1127: PUSH
1128: LD_EXP 3
1132: PUSH
1133: LD_INT 0
1135: EQUAL
1136: AND
1137: IFFALSE 1154
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1139: LD_EXP 6
1143: PPUSH
1144: LD_INT 2
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: CALL_OW 49
// end ;
1154: LD_VAR 0 1
1158: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1159: LD_INT 0
1161: PPUSH
1162: PPUSH
1163: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1164: LD_EXP 13
1168: PPUSH
1169: LD_INT 10
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// if Frank then
1179: LD_EXP 5
1183: IFFALSE 1200
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1185: LD_EXP 5
1189: PPUSH
1190: LD_INT 10
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// uc_nation = 1 ;
1200: LD_ADDR_OWVAR 21
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// uc_side = 4 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 4
1215: ST_TO_ADDR
// hc_class := 3 ;
1216: LD_ADDR_OWVAR 28
1220: PUSH
1221: LD_INT 3
1223: ST_TO_ADDR
// hc_sex := sex_male ;
1224: LD_ADDR_OWVAR 27
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1232: LD_ADDR_OWVAR 33
1236: PUSH
1237: LD_STRING SecondCharsGal
1239: ST_TO_ADDR
// hc_face_number := 53 ;
1240: LD_ADDR_OWVAR 34
1244: PUSH
1245: LD_INT 53
1247: ST_TO_ADDR
// hc_name := Freddie Warner ;
1248: LD_ADDR_OWVAR 26
1252: PUSH
1253: LD_STRING Freddie Warner
1255: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1256: LD_ADDR_OWVAR 29
1260: PUSH
1261: LD_INT 8
1263: PUSH
1264: LD_INT 11
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1271: LD_ADDR_OWVAR 30
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 0
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 0
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1294: LD_ADDR_OWVAR 31
1298: PUSH
1299: LD_INT 1
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 2
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: ST_TO_ADDR
// un = CreateHuman ;
1317: LD_ADDR_VAR 0 3
1321: PUSH
1322: CALL_OW 44
1326: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1327: LD_VAR 0 3
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 49
// hc_class := 1 ;
1342: LD_ADDR_OWVAR 28
1346: PUSH
1347: LD_INT 1
1349: ST_TO_ADDR
// hc_sex := sex_male ;
1350: LD_ADDR_OWVAR 27
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1358: LD_ADDR_OWVAR 33
1362: PUSH
1363: LD_STRING SecondCharsGal
1365: ST_TO_ADDR
// hc_face_number := 56 ;
1366: LD_ADDR_OWVAR 34
1370: PUSH
1371: LD_INT 56
1373: ST_TO_ADDR
// hc_name := Mel Brennan ;
1374: LD_ADDR_OWVAR 26
1378: PUSH
1379: LD_STRING Mel Brennan
1381: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1382: LD_ADDR_OWVAR 29
1386: PUSH
1387: LD_INT 12
1389: PUSH
1390: LD_INT 11
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1397: LD_ADDR_OWVAR 30
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 1
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1420: LD_ADDR_OWVAR 31
1424: PUSH
1425: LD_INT 3
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: ST_TO_ADDR
// un = CreateHuman ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: CALL_OW 44
1452: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1453: LD_VAR 0 3
1457: PPUSH
1458: LD_INT 10
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// hc_class := 1 ;
1468: LD_ADDR_OWVAR 28
1472: PUSH
1473: LD_INT 1
1475: ST_TO_ADDR
// hc_sex := sex_male ;
1476: LD_ADDR_OWVAR 27
1480: PUSH
1481: LD_INT 1
1483: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1484: LD_ADDR_OWVAR 33
1488: PUSH
1489: LD_STRING AmGalRemake
1491: ST_TO_ADDR
// hc_face_number := 5 ;
1492: LD_ADDR_OWVAR 34
1496: PUSH
1497: LD_INT 5
1499: ST_TO_ADDR
// hc_name := Bob Joplin ;
1500: LD_ADDR_OWVAR 26
1504: PUSH
1505: LD_STRING Bob Joplin
1507: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1508: LD_ADDR_OWVAR 29
1512: PUSH
1513: LD_INT 10
1515: PUSH
1516: LD_INT 11
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1523: LD_ADDR_OWVAR 30
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1546: LD_ADDR_OWVAR 31
1550: PUSH
1551: LD_INT 3
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// un = CreateHuman ;
1569: LD_ADDR_VAR 0 3
1573: PUSH
1574: CALL_OW 44
1578: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1579: LD_VAR 0 3
1583: PPUSH
1584: LD_INT 10
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 49
// hc_class := 3 ;
1594: LD_ADDR_OWVAR 28
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// hc_sex := sex_female ;
1602: LD_ADDR_OWVAR 27
1606: PUSH
1607: LD_INT 2
1609: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1610: LD_ADDR_OWVAR 33
1614: PUSH
1615: LD_STRING AmGalRemake
1617: ST_TO_ADDR
// hc_face_number := 8 ;
1618: LD_ADDR_OWVAR 34
1622: PUSH
1623: LD_INT 8
1625: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1626: LD_ADDR_OWVAR 26
1630: PUSH
1631: LD_STRING Elizabeth Whitney
1633: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1634: LD_ADDR_OWVAR 29
1638: PUSH
1639: LD_INT 9
1641: PUSH
1642: LD_INT 11
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1649: LD_ADDR_OWVAR 30
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 2
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1672: LD_ADDR_OWVAR 31
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: LD_INT 4
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// un = CreateHuman ;
1695: LD_ADDR_VAR 0 3
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1705: LD_VAR 0 3
1709: PPUSH
1710: LD_INT 10
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// InitHc ;
1720: CALL_OW 19
// end ;
1724: LD_VAR 0 1
1728: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
1734: PPUSH
// uc_nation = 1 ;
1735: LD_ADDR_OWVAR 21
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// uc_side = 1 ;
1743: LD_ADDR_OWVAR 20
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1751: LD_ADDR_OWVAR 37
1755: PUSH
1756: LD_INT 2
1758: ST_TO_ADDR
// vc_engine := engine_combustion ;
1759: LD_ADDR_OWVAR 39
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// vc_control := control_manual ;
1767: LD_ADDR_OWVAR 38
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1775: LD_ADDR_OWVAR 41
1779: PUSH
1780: LD_INT 65
1782: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 5
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 4
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PUSH
1806: LD_OWVAR 67
1810: ARRAY
1811: ST_TO_ADDR
// veh := CreateVehicle ;
1812: LD_ADDR_VAR 0 5
1816: PUSH
1817: CALL_OW 45
1821: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1822: LD_VAR 0 5
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1834: LD_INT 17
1836: PPUSH
1837: LD_INT 4
1839: PPUSH
1840: CALL_OW 428
1844: PUSH
1845: LD_INT 0
1847: EQUAL
1848: IFFALSE 1870
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 17
1857: PPUSH
1858: LD_INT 4
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL_OW 48
1868: GO 1888
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1870: LD_VAR 0 5
1874: PPUSH
1875: LD_INT 23
1877: PPUSH
1878: LD_INT 10
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 48
// hc_class := 1 ;
1888: LD_ADDR_OWVAR 28
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// hc_sex := sex_male ;
1896: LD_ADDR_OWVAR 27
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1904: LD_ADDR_OWVAR 33
1908: PUSH
1909: LD_STRING SecondCharsGal
1911: ST_TO_ADDR
// hc_face_number := 59 ;
1912: LD_ADDR_OWVAR 34
1916: PUSH
1917: LD_INT 59
1919: ST_TO_ADDR
// hc_name := Max Gray ;
1920: LD_ADDR_OWVAR 26
1924: PUSH
1925: LD_STRING Max Gray
1927: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1928: LD_ADDR_OWVAR 29
1932: PUSH
1933: LD_INT 9
1935: PUSH
1936: LD_INT 11
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1943: LD_ADDR_OWVAR 30
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: LD_INT 0
1956: PUSH
1957: LD_INT 0
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 4
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: LD_INT 0
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// un = CreateHuman ;
1989: LD_ADDR_VAR 0 4
1993: PUSH
1994: CALL_OW 44
1998: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1999: LD_VAR 0 4
2003: PPUSH
2004: LD_INT 11
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// hc_class := 2 ;
2014: LD_ADDR_OWVAR 28
2018: PUSH
2019: LD_INT 2
2021: ST_TO_ADDR
// hc_sex := sex_male ;
2022: LD_ADDR_OWVAR 27
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2030: LD_ADDR_OWVAR 33
2034: PUSH
2035: LD_STRING SecondCharsGal
2037: ST_TO_ADDR
// hc_face_number := 50 ;
2038: LD_ADDR_OWVAR 34
2042: PUSH
2043: LD_INT 50
2045: ST_TO_ADDR
// hc_name := Frank Hughes ;
2046: LD_ADDR_OWVAR 26
2050: PUSH
2051: LD_STRING Frank Hughes
2053: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2054: LD_ADDR_OWVAR 29
2058: PUSH
2059: LD_INT 10
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2069: LD_ADDR_OWVAR 30
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: LD_INT 2
2079: PUSH
2080: LD_INT 0
2082: PUSH
2083: LD_INT 0
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2092: LD_ADDR_OWVAR 31
2096: PUSH
2097: LD_INT 1
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: LD_INT 0
2105: PUSH
2106: LD_INT 1
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: ST_TO_ADDR
// un = CreateHuman ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: CALL_OW 44
2124: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2125: LD_VAR 0 4
2129: PPUSH
2130: LD_INT 11
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// hc_class := 1 ;
2140: LD_ADDR_OWVAR 28
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_sex := sex_male ;
2148: LD_ADDR_OWVAR 27
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2156: LD_ADDR_OWVAR 33
2160: PUSH
2161: LD_STRING SecondCharsGal
2163: ST_TO_ADDR
// hc_face_number := 54 ;
2164: LD_ADDR_OWVAR 34
2168: PUSH
2169: LD_INT 54
2171: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING Luigi Ghbellin
2179: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2180: LD_ADDR_OWVAR 29
2184: PUSH
2185: LD_INT 11
2187: PUSH
2188: LD_INT 11
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2195: LD_ADDR_OWVAR 30
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 0
2205: PUSH
2206: LD_INT 0
2208: PUSH
2209: LD_INT 0
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2218: LD_ADDR_OWVAR 31
2222: PUSH
2223: LD_INT 2
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: LD_INT 1
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: ST_TO_ADDR
// un = CreateHuman ;
2241: LD_ADDR_VAR 0 4
2245: PUSH
2246: CALL_OW 44
2250: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2251: LD_VAR 0 4
2255: PPUSH
2256: LD_INT 11
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// hc_class := 3 ;
2266: LD_ADDR_OWVAR 28
2270: PUSH
2271: LD_INT 3
2273: ST_TO_ADDR
// hc_sex := sex_male ;
2274: LD_ADDR_OWVAR 27
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2282: LD_ADDR_OWVAR 33
2286: PUSH
2287: LD_STRING AmGalRemake
2289: ST_TO_ADDR
// hc_face_number := 6 ;
2290: LD_ADDR_OWVAR 34
2294: PUSH
2295: LD_INT 6
2297: ST_TO_ADDR
// hc_name := Leon Carter ;
2298: LD_ADDR_OWVAR 26
2302: PUSH
2303: LD_STRING Leon Carter
2305: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2306: LD_ADDR_OWVAR 29
2310: PUSH
2311: LD_INT 10
2313: PUSH
2314: LD_INT 9
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2321: LD_ADDR_OWVAR 30
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: LD_INT 2
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2344: LD_ADDR_OWVAR 31
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: LD_INT 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: ST_TO_ADDR
// un = CreateHuman ;
2367: LD_ADDR_VAR 0 4
2371: PUSH
2372: CALL_OW 44
2376: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2377: LD_VAR 0 4
2381: PPUSH
2382: LD_VAR 0 5
2386: PPUSH
2387: CALL_OW 52
// if count = 4 then
2391: LD_VAR 0 1
2395: PUSH
2396: LD_INT 4
2398: EQUAL
2399: IFFALSE 2527
// begin hc_class := 1 ;
2401: LD_ADDR_OWVAR 28
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// hc_sex := sex_male ;
2409: LD_ADDR_OWVAR 27
2413: PUSH
2414: LD_INT 1
2416: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2417: LD_ADDR_OWVAR 33
2421: PUSH
2422: LD_STRING SecondCharsGal
2424: ST_TO_ADDR
// hc_face_number := 34 ;
2425: LD_ADDR_OWVAR 34
2429: PUSH
2430: LD_INT 34
2432: ST_TO_ADDR
// hc_name := Ian Hill ;
2433: LD_ADDR_OWVAR 26
2437: PUSH
2438: LD_STRING Ian Hill
2440: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2441: LD_ADDR_OWVAR 29
2445: PUSH
2446: LD_INT 10
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2456: LD_ADDR_OWVAR 30
2460: PUSH
2461: LD_INT 1
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: LD_INT 0
2469: PUSH
2470: LD_INT 0
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2479: LD_ADDR_OWVAR 31
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: ST_TO_ADDR
// un = CreateHuman ;
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: CALL_OW 44
2511: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2512: LD_VAR 0 4
2516: PPUSH
2517: LD_INT 11
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: CALL_OW 49
// end ; if count = 5 then
2527: LD_VAR 0 1
2531: PUSH
2532: LD_INT 5
2534: EQUAL
2535: IFFALSE 2789
// begin hc_class := 1 ;
2537: LD_ADDR_OWVAR 28
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// hc_sex := sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2553: LD_ADDR_OWVAR 33
2557: PUSH
2558: LD_STRING SecondCharsGal
2560: ST_TO_ADDR
// hc_face_number := 34 ;
2561: LD_ADDR_OWVAR 34
2565: PUSH
2566: LD_INT 34
2568: ST_TO_ADDR
// hc_name := Ian Hill ;
2569: LD_ADDR_OWVAR 26
2573: PUSH
2574: LD_STRING Ian Hill
2576: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2577: LD_ADDR_OWVAR 29
2581: PUSH
2582: LD_INT 10
2584: PUSH
2585: LD_INT 12
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2592: LD_ADDR_OWVAR 30
2596: PUSH
2597: LD_INT 1
2599: PUSH
2600: LD_INT 0
2602: PUSH
2603: LD_INT 0
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2615: LD_ADDR_OWVAR 31
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 1
2625: PUSH
2626: LD_INT 1
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: ST_TO_ADDR
// un = CreateHuman ;
2638: LD_ADDR_VAR 0 4
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2648: LD_VAR 0 4
2652: PPUSH
2653: LD_INT 11
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// hc_class := 1 ;
2663: LD_ADDR_OWVAR 28
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// hc_sex := sex_female ;
2671: LD_ADDR_OWVAR 27
2675: PUSH
2676: LD_INT 2
2678: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2679: LD_ADDR_OWVAR 33
2683: PUSH
2684: LD_STRING SecondCharsGal
2686: ST_TO_ADDR
// hc_face_number := 41 ;
2687: LD_ADDR_OWVAR 34
2691: PUSH
2692: LD_INT 41
2694: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2695: LD_ADDR_OWVAR 26
2699: PUSH
2700: LD_STRING Kate Wadsworth
2702: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2703: LD_ADDR_OWVAR 29
2707: PUSH
2708: LD_INT 9
2710: PUSH
2711: LD_INT 9
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2718: LD_ADDR_OWVAR 30
2722: PUSH
2723: LD_INT 0
2725: PUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 0
2731: PUSH
2732: LD_INT 0
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2741: LD_ADDR_OWVAR 31
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: LD_INT 3
2751: PUSH
2752: LD_INT 1
2754: PUSH
2755: LD_INT 0
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: ST_TO_ADDR
// un = CreateHuman ;
2764: LD_ADDR_VAR 0 4
2768: PUSH
2769: CALL_OW 44
2773: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2774: LD_VAR 0 4
2778: PPUSH
2779: LD_INT 11
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2789: LD_INT 11
2791: PPUSH
2792: LD_INT 22
2794: PUSH
2795: LD_INT 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 21
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 26
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: PPUSH
2827: CALL_OW 70
2831: PUSH
2832: LD_INT 1
2834: ARRAY
2835: PPUSH
2836: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2840: LD_INT 11
2842: PPUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: LD_INT 21
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_INT 26
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 70
2882: PUSH
2883: LD_INT 1
2885: ARRAY
2886: PPUSH
2887: LD_STRING D6-Sol3-1
2889: PPUSH
2890: CALL_OW 88
// end ; end_of_file
2894: LD_VAR 0 2
2898: RET
// export function PrepareRussianCommander ; begin
2899: LD_INT 0
2901: PPUSH
// uc_side = 3 ;
2902: LD_ADDR_OWVAR 20
2906: PUSH
2907: LD_INT 3
2909: ST_TO_ADDR
// uc_nation = 3 ;
2910: LD_ADDR_OWVAR 21
2914: PUSH
2915: LD_INT 3
2917: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2918: LD_ADDR_EXP 15
2922: PUSH
2923: LD_STRING Stolypin
2925: PPUSH
2926: CALL_OW 25
2930: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 21
2938: PPUSH
2939: CALL_OW 52
// end ;
2943: LD_VAR 0 1
2947: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2948: LD_INT 0
2950: PPUSH
2951: PPUSH
2952: PPUSH
2953: PPUSH
// if Difficulty > 1 then
2954: LD_OWVAR 67
2958: PUSH
2959: LD_INT 1
2961: GREATER
2962: IFFALSE 3072
// begin uc_side := 3 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 3
2971: ST_TO_ADDR
// uc_nation := 3 ;
2972: LD_ADDR_OWVAR 21
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// InitHc_All ( ) ;
2980: CALL_OW 584
// InitBc ;
2984: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
2988: LD_INT 0
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 380
// bc_type := b_breastwork ;
3001: LD_ADDR_OWVAR 42
3005: PUSH
3006: LD_INT 31
3008: ST_TO_ADDR
// bc_level := 4 ;
3009: LD_ADDR_OWVAR 43
3013: PUSH
3014: LD_INT 4
3016: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 100
3024: PPUSH
3025: LD_INT 58
3027: PPUSH
3028: LD_INT 2
3030: PPUSH
3031: CALL_OW 47
3035: ST_TO_ADDR
// un := CreateHuman ;
3036: LD_ADDR_VAR 0 4
3040: PUSH
3041: CALL_OW 44
3045: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_INT 5
3053: PPUSH
3054: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3072: LD_INT 3
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: LD_INT 22
3080: PPUSH
3081: LD_EXP 16
3085: PPUSH
3086: LD_EXP 17
3090: PPUSH
3091: CALL_OW 12
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 3
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 5
3107: PUSH
3108: LD_INT 6
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: LD_OWVAR 67
3121: ARRAY
3122: PPUSH
3123: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 21
3135: PPUSH
3136: LD_EXP 16
3140: PPUSH
3141: LD_EXP 17
3145: PPUSH
3146: CALL_OW 12
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_EXP 16
3174: PPUSH
3175: LD_EXP 17
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3195: LD_INT 3
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 24
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: LD_INT 3
3221: PPUSH
3222: LD_INT 5
3224: PPUSH
3225: CALL 4325 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 3
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 30
3246: PUSH
3247: LD_INT 32
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PUSH
3263: FOR_IN
3264: IFFALSE 3304
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3266: LD_INT 3
3268: PPUSH
3269: LD_INT 3
3271: PPUSH
3272: LD_VAR 0 2
3276: PPUSH
3277: LD_EXP 16
3281: PPUSH
3282: LD_EXP 17
3286: PPUSH
3287: CALL_OW 12
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: CALL 4325 0 6
3302: GO 3263
3304: POP
3305: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3306: LD_ADDR_VAR 0 2
3310: PUSH
3311: LD_INT 22
3313: PUSH
3314: LD_INT 3
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: LD_INT 30
3323: PUSH
3324: LD_INT 31
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: PUSH
3340: FOR_IN
3341: IFFALSE 3369
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3343: LD_EXP 16
3347: PPUSH
3348: LD_EXP 17
3352: PPUSH
3353: CALL_OW 12
3357: PPUSH
3358: LD_VAR 0 2
3362: PPUSH
3363: CALL 4434 0 2
3367: GO 3340
3369: POP
3370: POP
// end ;
3371: LD_VAR 0 1
3375: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3376: LD_INT 0
3378: PPUSH
3379: PPUSH
3380: PPUSH
3381: PPUSH
// uc_side = 6 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 6
3389: ST_TO_ADDR
// uc_nation = 3 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 3
3397: ST_TO_ADDR
// InitHC_All ( ) ;
3398: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 1
3414: PUSH
3415: LD_INT 2
3417: PUSH
3418: LD_INT 2
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PUSH
3430: LD_OWVAR 67
3434: ARRAY
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3605
// begin vc_engine = 1 ;
3439: LD_ADDR_OWVAR 39
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// vc_control = 1 ;
3447: LD_ADDR_OWVAR 38
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3455: LD_ADDR_OWVAR 40
3459: PUSH
3460: LD_INT 42
3462: PUSH
3463: LD_INT 42
3465: PUSH
3466: LD_INT 43
3468: PUSH
3469: LD_INT 43
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_OWVAR 67
3482: ARRAY
3483: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3484: LD_ADDR_OWVAR 37
3488: PUSH
3489: LD_INT 21
3491: PUSH
3492: LD_INT 22
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_OWVAR 67
3511: ARRAY
3512: ST_TO_ADDR
// veh = CreateVehicle ;
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: CALL_OW 45
3522: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3523: LD_VAR 0 3
3527: PPUSH
3528: LD_INT 3
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 49
// hc_gallery =  ;
3538: LD_ADDR_OWVAR 33
3542: PUSH
3543: LD_STRING 
3545: ST_TO_ADDR
// hc_name =  ;
3546: LD_ADDR_OWVAR 26
3550: PUSH
3551: LD_STRING 
3553: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 3
3559: PPUSH
3560: LD_EXP 16
3564: PPUSH
3565: LD_EXP 17
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: CALL_OW 380
// un = CreateHuman ;
3579: LD_ADDR_VAR 0 4
3583: PUSH
3584: CALL_OW 44
3588: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3589: LD_VAR 0 4
3593: PPUSH
3594: LD_VAR 0 3
3598: PPUSH
3599: CALL_OW 52
// end ;
3603: GO 3436
3605: POP
3606: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: LD_EXP 16
3617: PPUSH
3618: LD_EXP 17
3622: PPUSH
3623: CALL_OW 12
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PPUSH
3632: CALL_OW 380
// un = CreateHuman ;
3636: LD_ADDR_VAR 0 4
3640: PUSH
3641: CALL_OW 44
3645: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3646: LD_VAR 0 4
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: LD_INT 0
3656: PPUSH
3657: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 4
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: LD_EXP 17
3676: PPUSH
3677: CALL_OW 12
3681: PUSH
3682: LD_INT 2
3684: PLUS
3685: PPUSH
3686: CALL_OW 380
// un = CreateHuman ;
3690: LD_ADDR_VAR 0 4
3694: PUSH
3695: CALL_OW 44
3699: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3700: LD_VAR 0 4
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 0
3710: PPUSH
3711: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3715: LD_ADDR_VAR 0 2
3719: PUSH
3720: DOUBLE
3721: LD_INT 1
3723: DEC
3724: ST_TO_ADDR
3725: LD_INT 2
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 3
3733: PUSH
3734: LD_INT 4
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_OWVAR 67
3747: ARRAY
3748: PUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 12
3759: PLUS
3760: PUSH
3761: FOR_TO
3762: IFFALSE 3832
// begin hc_gallery =  ;
3764: LD_ADDR_OWVAR 33
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// hc_name =  ;
3772: LD_ADDR_OWVAR 26
3776: PUSH
3777: LD_STRING 
3779: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3780: LD_INT 0
3782: PPUSH
3783: LD_INT 1
3785: PPUSH
3786: LD_EXP 16
3790: PPUSH
3791: LD_EXP 17
3795: PPUSH
3796: CALL_OW 12
3800: PPUSH
3801: CALL_OW 380
// un = CreateHuman ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: CALL_OW 44
3814: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_INT 3
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: CALL_OW 49
// end ;
3830: GO 3761
3832: POP
3833: POP
// vc_engine = 1 ;
3834: LD_ADDR_OWVAR 39
3838: PUSH
3839: LD_INT 1
3841: ST_TO_ADDR
// vc_control = 1 ;
3842: LD_ADDR_OWVAR 38
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// vc_weapon = 51 ;
3850: LD_ADDR_OWVAR 40
3854: PUSH
3855: LD_INT 51
3857: ST_TO_ADDR
// vc_chassis = 22 ;
3858: LD_ADDR_OWVAR 37
3862: PUSH
3863: LD_INT 22
3865: ST_TO_ADDR
// veh = CreateVehicle ;
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: CALL_OW 45
3875: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: LD_INT 3
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 100
3901: PPUSH
3902: CALL_OW 290
// hc_gallery =  ;
3906: LD_ADDR_OWVAR 33
3910: PUSH
3911: LD_STRING 
3913: ST_TO_ADDR
// hc_name =  ;
3914: LD_ADDR_OWVAR 26
3918: PUSH
3919: LD_STRING 
3921: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: LD_EXP 17
3937: PPUSH
3938: CALL_OW 12
3942: PPUSH
3943: CALL_OW 380
// un = CreateHuman ;
3947: LD_ADDR_VAR 0 4
3951: PUSH
3952: CALL_OW 44
3956: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3957: LD_VAR 0 4
3961: PPUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3971: LD_ADDR_VAR 0 2
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: LD_INT 6
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 1
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: LD_INT 25
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: LD_INT 25
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: FOR_IN
4038: IFFALSE 4057
// ComAgressiveMove ( i , 45 , 46 ) ;
4040: LD_VAR 0 2
4044: PPUSH
4045: LD_INT 45
4047: PPUSH
4048: LD_INT 46
4050: PPUSH
4051: CALL_OW 114
4055: GO 4037
4057: POP
4058: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4059: LD_ADDR_VAR 0 2
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 6
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 25
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4125
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4096: LD_ADDR_EXP 21
4100: PUSH
4101: LD_VAR 0 2
4105: PPUSH
4106: LD_INT 0
4108: PPUSH
4109: LD_INT 48
4111: PPUSH
4112: LD_INT 55
4114: PPUSH
4115: LD_INT 5
4117: PPUSH
4118: CALL_OW 145
4122: ST_TO_ADDR
4123: GO 4093
4125: POP
4126: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 22
4134: PUSH
4135: LD_INT 6
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4181
// ComMoveXY ( i , 39 , 55 ) ;
4164: LD_VAR 0 2
4168: PPUSH
4169: LD_INT 39
4171: PPUSH
4172: LD_INT 55
4174: PPUSH
4175: CALL_OW 111
4179: GO 4161
4181: POP
4182: POP
// end ;
4183: LD_VAR 0 1
4187: RET
// export function PrepareFirstAttack ; var i , un ; begin
4188: LD_INT 0
4190: PPUSH
4191: PPUSH
4192: PPUSH
// uc_side = 5 ;
4193: LD_ADDR_OWVAR 20
4197: PUSH
4198: LD_INT 5
4200: ST_TO_ADDR
// uc_nation = 3 ;
4201: LD_ADDR_OWVAR 21
4205: PUSH
4206: LD_INT 3
4208: ST_TO_ADDR
// for i := 1 to 4 do
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: DOUBLE
4215: LD_INT 1
4217: DEC
4218: ST_TO_ADDR
4219: LD_INT 4
4221: PUSH
4222: FOR_TO
4223: IFFALSE 4310
// begin InitHC_All ( ) ;
4225: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4229: LD_INT 0
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_EXP 16
4239: PPUSH
4240: LD_EXP 17
4244: PPUSH
4245: CALL_OW 12
4249: PPUSH
4250: CALL_OW 380
// un = CreateHuman ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 44
4263: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 4
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4279: LD_VAR 0 3
4283: PPUSH
4284: LD_EXP 1
4288: PPUSH
4289: CALL_OW 250
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 251
4303: PPUSH
4304: CALL_OW 114
// end ;
4308: GO 4222
4310: POP
4311: POP
// firstRussianAttack = 1 ;
4312: LD_ADDR_EXP 23
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// end ; end_of_file
4320: LD_VAR 0 1
4324: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
4329: PPUSH
// for i = 1 to count do
4330: LD_ADDR_VAR 0 8
4334: PUSH
4335: DOUBLE
4336: LD_INT 1
4338: DEC
4339: ST_TO_ADDR
4340: LD_VAR 0 6
4344: PUSH
4345: FOR_TO
4346: IFFALSE 4427
// begin uc_side = side ;
4348: LD_ADDR_OWVAR 20
4352: PUSH
4353: LD_VAR 0 1
4357: ST_TO_ADDR
// uc_nation = nation ;
4358: LD_ADDR_OWVAR 21
4362: PUSH
4363: LD_VAR 0 2
4367: ST_TO_ADDR
// hc_gallery =  ;
4368: LD_ADDR_OWVAR 33
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// hc_name =  ;
4376: LD_ADDR_OWVAR 26
4380: PUSH
4381: LD_STRING 
4383: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4384: LD_INT 0
4386: PPUSH
4387: LD_VAR 0 5
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 380
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4411: LD_VAR 0 9
4415: PPUSH
4416: LD_VAR 0 3
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4345
4427: POP
4428: POP
// end ;
4429: LD_VAR 0 7
4433: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4434: LD_INT 0
4436: PPUSH
4437: PPUSH
4438: PPUSH
// uc_side := GetSide ( b ) ;
4439: LD_ADDR_OWVAR 20
4443: PUSH
4444: LD_VAR 0 2
4448: PPUSH
4449: CALL_OW 255
4453: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4454: LD_ADDR_OWVAR 21
4458: PUSH
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 248
4468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: CALL_OW 380
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 4
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4494: LD_ADDR_VAR 0 5
4498: PUSH
4499: LD_VAR 0 2
4503: PPUSH
4504: CALL_OW 254
4508: PUSH
4509: LD_INT 3
4511: MINUS
4512: ST_TO_ADDR
// if dir < 0 then
4513: LD_VAR 0 5
4517: PUSH
4518: LD_INT 0
4520: LESS
4521: IFFALSE 4537
// dir := 6 + dir ;
4523: LD_ADDR_VAR 0 5
4527: PUSH
4528: LD_INT 6
4530: PUSH
4531: LD_VAR 0 5
4535: PLUS
4536: ST_TO_ADDR
// SetDir ( un , dir ) ;
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4551: LD_VAR 0 4
4555: PPUSH
4556: LD_VAR 0 2
4560: PPUSH
4561: CALL_OW 52
// end ;
4565: LD_VAR 0 3
4569: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4570: LD_INT 0
4572: PPUSH
4573: PPUSH
4574: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4575: LD_ADDR_VAR 0 6
4579: PUSH
4580: LD_VAR 0 1
4584: PUSH
4585: LD_INT 1
4587: PPUSH
4588: LD_VAR 0 1
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4599: LD_VAR 0 6
4603: PPUSH
4604: CALL_OW 258
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4630
// Say ( speaker , dialogMID ) else
4614: LD_VAR 0 6
4618: PPUSH
4619: LD_VAR 0 2
4623: PPUSH
4624: CALL_OW 88
4628: GO 4644
// Say ( speaker , dialogFID ) ;
4630: LD_VAR 0 6
4634: PPUSH
4635: LD_VAR 0 3
4639: PPUSH
4640: CALL_OW 88
// result := speaker ;
4644: LD_ADDR_VAR 0 4
4648: PUSH
4649: LD_VAR 0 6
4653: ST_TO_ADDR
// end ;
4654: LD_VAR 0 4
4658: RET
// export function PrepareDifficulty ; var tmp ; begin
4659: LD_INT 0
4661: PPUSH
4662: PPUSH
// if Difficulty = 1 then
4663: LD_OWVAR 67
4667: PUSH
4668: LD_INT 1
4670: EQUAL
4671: IFFALSE 4689
// begin RuSoldMinLevel = 1 ;
4673: LD_ADDR_EXP 16
4677: PUSH
4678: LD_INT 1
4680: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4681: LD_ADDR_EXP 17
4685: PUSH
4686: LD_INT 2
4688: ST_TO_ADDR
// end ; if Difficulty = 2 then
4689: LD_OWVAR 67
4693: PUSH
4694: LD_INT 2
4696: EQUAL
4697: IFFALSE 4798
// begin RuSoldMinLevel = 2 ;
4699: LD_ADDR_EXP 16
4703: PUSH
4704: LD_INT 2
4706: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4707: LD_ADDR_EXP 17
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4715: LD_INT 23
4717: PPUSH
4718: CALL_OW 64
// uc_nation = 3 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 3
4729: ST_TO_ADDR
// uc_side = 3 ;
4730: LD_ADDR_OWVAR 20
4734: PUSH
4735: LD_INT 3
4737: ST_TO_ADDR
// bc_level = 5 ;
4738: LD_ADDR_OWVAR 43
4742: PUSH
4743: LD_INT 5
4745: ST_TO_ADDR
// bc_type = 32 ;
4746: LD_ADDR_OWVAR 42
4750: PUSH
4751: LD_INT 32
4753: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4754: LD_ADDR_VAR 0 2
4758: PUSH
4759: LD_INT 76
4761: PPUSH
4762: LD_INT 91
4764: PPUSH
4765: LD_INT 2
4767: PPUSH
4768: CALL_OW 47
4772: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 43
4780: PPUSH
4781: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4785: LD_INT 51
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 322
// end ; if Difficulty >= 3 then
4798: LD_OWVAR 67
4802: PUSH
4803: LD_INT 3
4805: GREATEREQUAL
4806: IFFALSE 4970
// begin RuSoldMinLevel = Difficulty ;
4808: LD_ADDR_EXP 16
4812: PUSH
4813: LD_OWVAR 67
4817: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4818: LD_ADDR_EXP 17
4822: PUSH
4823: LD_INT 4
4825: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4826: LD_INT 26
4828: PPUSH
4829: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4833: LD_INT 23
4835: PPUSH
4836: CALL_OW 64
// uc_nation = 3 ;
4840: LD_ADDR_OWVAR 21
4844: PUSH
4845: LD_INT 3
4847: ST_TO_ADDR
// uc_side = 3 ;
4848: LD_ADDR_OWVAR 20
4852: PUSH
4853: LD_INT 3
4855: ST_TO_ADDR
// bc_level = 5 ;
4856: LD_ADDR_OWVAR 43
4860: PUSH
4861: LD_INT 5
4863: ST_TO_ADDR
// bc_type = 32 ;
4864: LD_ADDR_OWVAR 42
4868: PUSH
4869: LD_INT 32
4871: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4872: LD_ADDR_VAR 0 2
4876: PUSH
4877: LD_INT 76
4879: PPUSH
4880: LD_INT 91
4882: PPUSH
4883: LD_INT 2
4885: PPUSH
4886: CALL_OW 47
4890: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: LD_INT 44
4898: PPUSH
4899: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: LD_INT 83
4910: PPUSH
4911: LD_INT 84
4913: PPUSH
4914: LD_INT 2
4916: PPUSH
4917: CALL_OW 47
4921: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 43
4929: PPUSH
4930: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4934: LD_INT 51
4936: PPUSH
4937: LD_INT 3
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4947: LD_INT 52
4949: PPUSH
4950: LD_INT 3
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4960: LD_INT 25
4962: PPUSH
4963: LD_INT 44
4965: PPUSH
4966: CALL_OW 431
// end ; end ;
4970: LD_VAR 0 1
4974: RET
// export function EnergyDialog ; begin
4975: LD_INT 0
4977: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4978: LD_INT 46
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 321
4988: PUSH
4989: LD_INT 1
4991: EQUAL
4992: PUSH
4993: LD_INT 35
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: CALL_OW 321
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5032
// begin Say ( JMM , D9c-JMM-1 ) ;
5010: LD_EXP 1
5014: PPUSH
5015: LD_STRING D9c-JMM-1
5017: PPUSH
5018: CALL_OW 88
// energyVDialog = 1 ;
5022: LD_ADDR_EXP 33
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// end else
5030: GO 5186
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5032: LD_INT 35
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 321
5042: PUSH
5043: LD_INT 2
5045: EQUAL
5046: PUSH
5047: LD_EXP 33
5051: PUSH
5052: LD_INT 0
5054: EQUAL
5055: AND
5056: IFFALSE 5078
// begin Say ( JMM , D9c-JMM-1a ) ;
5058: LD_EXP 1
5062: PPUSH
5063: LD_STRING D9c-JMM-1a
5065: PPUSH
5066: CALL_OW 88
// energyVDialog = 1 ;
5070: LD_ADDR_EXP 33
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5078: LD_INT 46
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 321
5088: PUSH
5089: LD_INT 2
5091: EQUAL
5092: PUSH
5093: LD_EXP 33
5097: PUSH
5098: LD_INT 0
5100: EQUAL
5101: AND
5102: IFFALSE 5124
// begin Say ( JMM , D9c-JMM-1b ) ;
5104: LD_EXP 1
5108: PPUSH
5109: LD_STRING D9c-JMM-1b
5111: PPUSH
5112: CALL_OW 88
// energyVDialog = 1 ;
5116: LD_ADDR_EXP 33
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5124: LD_INT 46
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 321
5134: PUSH
5135: LD_INT 2
5137: EQUAL
5138: PUSH
5139: LD_INT 21
5141: PPUSH
5142: LD_INT 1
5144: PPUSH
5145: CALL_OW 321
5149: PUSH
5150: LD_INT 2
5152: EQUAL
5153: AND
5154: PUSH
5155: LD_EXP 33
5159: PUSH
5160: LD_INT 0
5162: EQUAL
5163: AND
5164: IFFALSE 5186
// begin Say ( JMM , D9c-JMM-1c ) ;
5166: LD_EXP 1
5170: PPUSH
5171: LD_STRING D9c-JMM-1c
5173: PPUSH
5174: CALL_OW 88
// energyVDialog = 1 ;
5178: LD_ADDR_EXP 33
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// end ; end ; end ;
5186: LD_VAR 0 1
5190: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5198: LD_VAR 0 1
5202: NOT
5203: PUSH
5204: LD_VAR 0 1
5208: PPUSH
5209: CALL_OW 256
5213: PUSH
5214: LD_INT 250
5216: LESS
5217: OR
5218: PUSH
5219: LD_VAR 0 1
5223: PPUSH
5224: CALL_OW 314
5228: PUSH
5229: LD_VAR 0 1
5233: PPUSH
5234: CALL_OW 261
5238: PUSH
5239: LD_INT 20
5241: GREATER
5242: AND
5243: OR
5244: IFFALSE 5248
// exit ;
5246: GO 5613
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5248: LD_VAR 0 1
5252: PPUSH
5253: CALL_OW 261
5257: PUSH
5258: LD_INT 20
5260: LESS
5261: PUSH
5262: LD_VAR 0 1
5266: PPUSH
5267: CALL_OW 110
5271: PUSH
5272: LD_INT 21
5274: EQUAL
5275: NOT
5276: AND
5277: IFFALSE 5304
// begin ComStop ( bulldozer ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: LD_INT 21
5295: PPUSH
5296: CALL_OW 109
// exit ;
5300: GO 5613
// end else
5302: GO 5331
// if GetFuel ( bulldozer ) > 20 then
5304: LD_VAR 0 1
5308: PPUSH
5309: CALL_OW 261
5313: PUSH
5314: LD_INT 20
5316: GREATER
5317: IFFALSE 5331
// SetTag ( bulldozer , 0 ) ;
5319: LD_VAR 0 1
5323: PPUSH
5324: LD_INT 0
5326: PPUSH
5327: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5331: LD_ADDR_VAR 0 5
5335: PUSH
5336: LD_VAR 0 2
5340: PPUSH
5341: CALL_OW 353
5345: ST_TO_ADDR
// tmp := [ ] ;
5346: LD_ADDR_VAR 0 6
5350: PUSH
5351: EMPTY
5352: ST_TO_ADDR
// for i = 1 to list do
5353: LD_ADDR_VAR 0 4
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 5
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5467
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5371: LD_VAR 0 5
5375: PUSH
5376: LD_VAR 0 4
5380: ARRAY
5381: PUSH
5382: LD_INT 1
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PUSH
5391: LD_VAR 0 4
5395: ARRAY
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 554
5405: IFFALSE 5465
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5407: LD_ADDR_VAR 0 6
5411: PUSH
5412: LD_VAR 0 6
5416: PPUSH
5417: LD_VAR 0 6
5421: PUSH
5422: LD_INT 1
5424: PLUS
5425: PPUSH
5426: LD_VAR 0 5
5430: PUSH
5431: LD_VAR 0 4
5435: ARRAY
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 1
5464: ST_TO_ADDR
// end ;
5465: GO 5368
5467: POP
5468: POP
// ComStop ( bulldozer ) ;
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5478: LD_ADDR_VAR 0 7
5482: PUSH
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 250
5492: PUSH
5493: LD_VAR 0 1
5497: PPUSH
5498: CALL_OW 251
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: ST_TO_ADDR
// for i = tmp downto 1 do
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: DOUBLE
5513: LD_VAR 0 6
5517: INC
5518: ST_TO_ADDR
5519: LD_INT 1
5521: PUSH
5522: FOR_DOWNTO
5523: IFFALSE 5611
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5525: LD_ADDR_VAR 0 7
5529: PUSH
5530: LD_VAR 0 7
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: PPUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 2
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 6
5552: PPUSH
5553: CALL 5714 0 3
5557: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_VAR 0 7
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 2
5579: ARRAY
5580: PPUSH
5581: CALL 5618 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5585: LD_ADDR_VAR 0 6
5589: PUSH
5590: LD_VAR 0 6
5594: PPUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 3
5602: ARRAY
5603: PPUSH
5604: CALL_OW 3
5608: ST_TO_ADDR
// end ;
5609: GO 5522
5611: POP
5612: POP
// end ;
5613: LD_VAR 0 3
5617: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5618: LD_INT 0
5620: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5621: LD_VAR 0 2
5625: PPUSH
5626: LD_VAR 0 3
5630: PPUSH
5631: CALL_OW 351
5635: PUSH
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL_OW 554
5650: AND
5651: PUSH
5652: LD_VAR 0 2
5656: PPUSH
5657: LD_VAR 0 3
5661: PPUSH
5662: CALL_OW 488
5666: AND
5667: PUSH
5668: LD_VAR 0 2
5672: PPUSH
5673: LD_VAR 0 3
5677: PPUSH
5678: CALL_OW 428
5682: PUSH
5683: LD_INT 1
5685: NEG
5686: EQUAL
5687: AND
5688: IFFALSE 5709
// AddComMoveXY ( bulldozer , x , y ) ;
5690: LD_VAR 0 1
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: LD_VAR 0 3
5704: PPUSH
5705: CALL_OW 171
// end ;
5709: LD_VAR 0 4
5713: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5714: LD_INT 0
5716: PPUSH
5717: PPUSH
5718: PPUSH
5719: PPUSH
5720: PPUSH
5721: PPUSH
5722: PPUSH
// dist := 99999 ;
5723: LD_ADDR_VAR 0 6
5727: PUSH
5728: LD_INT 99999
5730: ST_TO_ADDR
// for i = 1 to list do
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: DOUBLE
5737: LD_INT 1
5739: DEC
5740: ST_TO_ADDR
5741: LD_VAR 0 3
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5885
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5749: LD_ADDR_VAR 0 7
5753: PUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PUSH
5769: LD_VAR 0 5
5773: ARRAY
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_VAR 0 3
5783: PUSH
5784: LD_VAR 0 5
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 298
5798: ST_TO_ADDR
// if d = 0 then
5799: LD_VAR 0 7
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5811
// continue ;
5809: GO 5746
// if d < dist then
5811: LD_VAR 0 7
5815: PUSH
5816: LD_VAR 0 6
5820: LESS
5821: IFFALSE 5883
// begin _x := list [ i ] [ 1 ] ;
5823: LD_ADDR_VAR 0 8
5827: PUSH
5828: LD_VAR 0 3
5832: PUSH
5833: LD_VAR 0 5
5837: ARRAY
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5843: LD_ADDR_VAR 0 9
5847: PUSH
5848: LD_VAR 0 3
5852: PUSH
5853: LD_VAR 0 5
5857: ARRAY
5858: PUSH
5859: LD_INT 2
5861: ARRAY
5862: ST_TO_ADDR
// _i := i ;
5863: LD_ADDR_VAR 0 10
5867: PUSH
5868: LD_VAR 0 5
5872: ST_TO_ADDR
// dist := d ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 7
5882: ST_TO_ADDR
// end ; end ;
5883: GO 5746
5885: POP
5886: POP
// result := [ _x , _y , _i , dist ] ;
5887: LD_ADDR_VAR 0 4
5891: PUSH
5892: LD_VAR 0 8
5896: PUSH
5897: LD_VAR 0 9
5901: PUSH
5902: LD_VAR 0 10
5906: PUSH
5907: LD_VAR 0 6
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: ST_TO_ADDR
// end ;
5918: LD_VAR 0 4
5922: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5923: LD_INT 0
5925: PPUSH
5926: PPUSH
// for i = 1 to 72 do
5927: LD_ADDR_VAR 0 5
5931: PUSH
5932: DOUBLE
5933: LD_INT 1
5935: DEC
5936: ST_TO_ADDR
5937: LD_INT 72
5939: PUSH
5940: FOR_TO
5941: IFFALSE 5995
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5943: LD_VAR 0 5
5947: PPUSH
5948: LD_VAR 0 1
5952: PPUSH
5953: CALL_OW 321
5957: PUSH
5958: LD_INT 1
5960: EQUAL
5961: PUSH
5962: LD_VAR 0 5
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: CALL_OW 482
5976: AND
5977: IFFALSE 5993
// AddComResearch ( lab , i ) ;
5979: LD_VAR 0 2
5983: PPUSH
5984: LD_VAR 0 5
5988: PPUSH
5989: CALL_OW 184
5993: GO 5940
5995: POP
5996: POP
// end ;
5997: LD_VAR 0 4
6001: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6002: LD_INT 0
6004: PPUSH
6005: PPUSH
6006: PPUSH
6007: PPUSH
6008: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6009: LD_ADDR_VAR 0 7
6013: PUSH
6014: LD_VAR 0 2
6018: PPUSH
6019: CALL_OW 313
6023: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6024: LD_ADDR_VAR 0 8
6028: PUSH
6029: LD_VAR 0 3
6033: PPUSH
6034: LD_INT 22
6036: PUSH
6037: LD_VAR 0 1
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 25
6048: PUSH
6049: LD_INT 2
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 24
6058: PUSH
6059: LD_INT 750
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 3
6068: PUSH
6069: LD_INT 54
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PPUSH
6085: CALL_OW 70
6089: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6090: LD_ADDR_VAR 0 5
6094: PUSH
6095: LD_VAR 0 3
6099: PPUSH
6100: LD_INT 22
6102: PUSH
6103: LD_VAR 0 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 21
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: LD_INT 24
6127: PUSH
6128: LD_INT 1000
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: PPUSH
6147: CALL_OW 70
6151: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6152: LD_VAR 0 5
6156: NOT
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_VAR 0 1
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 25
6172: PUSH
6173: LD_INT 2
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 24
6182: PUSH
6183: LD_INT 250
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: NOT
6200: AND
6201: IFFALSE 6205
// exit ;
6203: GO 6301
// if buildingsList and engineerOkInside then
6205: LD_VAR 0 5
6209: PUSH
6210: LD_VAR 0 7
6214: AND
6215: IFFALSE 6241
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6217: LD_VAR 0 7
6221: PPUSH
6222: LD_INT 25
6224: PUSH
6225: LD_INT 2
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 72
6236: PPUSH
6237: CALL_OW 122
// if buildingsList and engineerOkOutside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 8
6250: AND
6251: IFFALSE 6271
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6253: LD_VAR 0 8
6257: PPUSH
6258: LD_VAR 0 5
6262: PUSH
6263: LD_INT 1
6265: ARRAY
6266: PPUSH
6267: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6271: LD_VAR 0 5
6275: PUSH
6276: LD_INT 0
6278: EQUAL
6279: PUSH
6280: LD_VAR 0 8
6284: AND
6285: IFFALSE 6301
// ComEnterUnit ( engineerOkOutside , building ) ;
6287: LD_VAR 0 8
6291: PPUSH
6292: LD_VAR 0 2
6296: PPUSH
6297: CALL_OW 120
// end ;
6301: LD_VAR 0 4
6305: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
6310: PPUSH
6311: PPUSH
6312: PPUSH
6313: PPUSH
6314: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6315: LD_ADDR_VAR 0 6
6319: PUSH
6320: LD_INT 22
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 4
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 23
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 24
6354: PUSH
6355: LD_INT 251
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PPUSH
6368: CALL_OW 69
6372: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6373: LD_ADDR_VAR 0 7
6377: PUSH
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_INT 22
6385: PUSH
6386: LD_VAR 0 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 23
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 50
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 70
6431: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6432: LD_ADDR_VAR 0 8
6436: PUSH
6437: LD_VAR 0 3
6441: PPUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 1
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 21
6456: PUSH
6457: LD_INT 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 3
6483: PUSH
6484: LD_INT 24
6486: PUSH
6487: LD_INT 750
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 70
6508: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6509: LD_ADDR_VAR 0 9
6513: PUSH
6514: LD_VAR 0 2
6518: PPUSH
6519: LD_INT 22
6521: PUSH
6522: LD_VAR 0 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 21
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 25
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 3
6560: PUSH
6561: LD_INT 24
6563: PUSH
6564: LD_INT 1000
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 70
6585: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6586: LD_VAR 0 8
6590: NOT
6591: PUSH
6592: LD_VAR 0 9
6596: NOT
6597: AND
6598: PUSH
6599: LD_VAR 0 6
6603: NOT
6604: AND
6605: IFFALSE 6609
// exit ;
6607: GO 6815
// if damageUnits and sciList then
6609: LD_VAR 0 8
6613: PUSH
6614: LD_VAR 0 6
6618: AND
6619: IFFALSE 6635
// ComMoveToArea ( damageUnits , healArea ) ;
6621: LD_VAR 0 8
6625: PPUSH
6626: LD_VAR 0 2
6630: PPUSH
6631: CALL_OW 113
// if unitsToHeal and sciList then
6635: LD_VAR 0 9
6639: PUSH
6640: LD_VAR 0 6
6644: AND
6645: IFFALSE 6656
// ComExitBuilding ( sciList ) ;
6647: LD_VAR 0 6
6651: PPUSH
6652: CALL_OW 122
// if unitsToHeal and sciListOutside then
6656: LD_VAR 0 9
6660: PUSH
6661: LD_VAR 0 7
6665: AND
6666: IFFALSE 6686
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6668: LD_VAR 0 7
6672: PPUSH
6673: LD_VAR 0 9
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: PPUSH
6682: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6686: LD_VAR 0 8
6690: PUSH
6691: LD_INT 0
6693: EQUAL
6694: PUSH
6695: LD_VAR 0 9
6699: PUSH
6700: LD_INT 0
6702: EQUAL
6703: AND
6704: PUSH
6705: LD_VAR 0 7
6709: AND
6710: IFFALSE 6815
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6712: LD_ADDR_VAR 0 10
6716: PUSH
6717: LD_INT 22
6719: PUSH
6720: LD_VAR 0 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 21
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 30
6741: PUSH
6742: LD_INT 8
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL_OW 69
6758: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6759: LD_ADDR_VAR 0 11
6763: PUSH
6764: LD_INT 1
6766: PPUSH
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 12
6776: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6777: LD_VAR 0 7
6781: PPUSH
6782: LD_INT 3
6784: PUSH
6785: LD_INT 60
6787: PUSH
6788: EMPTY
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: PPUSH
6800: LD_VAR 0 10
6804: PUSH
6805: LD_VAR 0 11
6809: ARRAY
6810: PPUSH
6811: CALL_OW 120
// end ; end ;
6815: LD_VAR 0 5
6819: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6820: LD_INT 0
6822: PPUSH
6823: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6824: LD_INT 22
6826: PUSH
6827: LD_VAR 0 1
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 21
6838: PUSH
6839: LD_INT 2
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 69
6854: PUSH
6855: LD_VAR 0 3
6859: LESSEQUAL
6860: IFFALSE 6927
// for i = 1 to vehCount do
6862: LD_ADDR_VAR 0 9
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_VAR 0 3
6876: PUSH
6877: FOR_TO
6878: IFFALSE 6925
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 7
6889: PPUSH
6890: LD_VAR 0 5
6894: PPUSH
6895: LD_VAR 0 6
6899: PPUSH
6900: LD_VAR 0 4
6904: PUSH
6905: LD_INT 1
6907: PPUSH
6908: LD_VAR 0 4
6912: PPUSH
6913: CALL_OW 12
6917: ARRAY
6918: PPUSH
6919: CALL_OW 185
6923: GO 6877
6925: POP
6926: POP
// end ;
6927: LD_VAR 0 8
6931: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
6936: PPUSH
6937: PPUSH
6938: PPUSH
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to medicCount do
6945: LD_ADDR_VAR 0 11
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_VAR 0 4
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7031
// begin uc_side = side ;
6963: LD_ADDR_OWVAR 20
6967: PUSH
6968: LD_VAR 0 1
6972: ST_TO_ADDR
// uc_nation = nation ;
6973: LD_ADDR_OWVAR 21
6977: PUSH
6978: LD_VAR 0 2
6982: ST_TO_ADDR
// InitHC_All ( ) ;
6983: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
6987: LD_INT 0
6989: PPUSH
6990: LD_INT 4
6992: PPUSH
6993: LD_VAR 0 5
6997: PPUSH
6998: CALL_OW 380
// un = CreateHuman ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: CALL_OW 44
7011: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7012: LD_VAR 0 13
7016: PPUSH
7017: LD_VAR 0 6
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// end ;
7029: GO 6960
7031: POP
7032: POP
// for i = 1 to soldierCount do
7033: LD_ADDR_VAR 0 11
7037: PUSH
7038: DOUBLE
7039: LD_INT 1
7041: DEC
7042: ST_TO_ADDR
7043: LD_VAR 0 3
7047: PUSH
7048: FOR_TO
7049: IFFALSE 7119
// begin uc_side = side ;
7051: LD_ADDR_OWVAR 20
7055: PUSH
7056: LD_VAR 0 1
7060: ST_TO_ADDR
// uc_nation = nation ;
7061: LD_ADDR_OWVAR 21
7065: PUSH
7066: LD_VAR 0 2
7070: ST_TO_ADDR
// InitHC_All ( ) ;
7071: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7075: LD_INT 0
7077: PPUSH
7078: LD_INT 1
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 380
// un = CreateHuman ;
7090: LD_ADDR_VAR 0 13
7094: PUSH
7095: CALL_OW 44
7099: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7100: LD_VAR 0 13
7104: PPUSH
7105: LD_VAR 0 6
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 49
// end ;
7117: GO 7048
7119: POP
7120: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7121: LD_ADDR_VAR 0 16
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_VAR 0 1
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 2
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 5
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 8
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 25
7173: PUSH
7174: LD_INT 9
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 69
7196: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7197: LD_ADDR_VAR 0 15
7201: PUSH
7202: LD_INT 22
7204: PUSH
7205: LD_VAR 0 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 4
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7233: LD_VAR 0 15
7237: PPUSH
7238: LD_VAR 0 7
7242: PPUSH
7243: CALL_OW 113
// if strategy = 1 then
7247: LD_VAR 0 9
7251: PUSH
7252: LD_INT 1
7254: EQUAL
7255: IFFALSE 7703
// begin for i in soldiersOK_list do
7257: LD_ADDR_VAR 0 11
7261: PUSH
7262: LD_VAR 0 16
7266: PUSH
7267: FOR_IN
7268: IFFALSE 7332
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7270: LD_VAR 0 11
7274: PPUSH
7275: LD_INT 91
7277: PPUSH
7278: LD_INT 63
7280: PPUSH
7281: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7285: LD_VAR 0 11
7289: PPUSH
7290: LD_INT 101
7292: PPUSH
7293: LD_INT 53
7295: PPUSH
7296: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7300: LD_VAR 0 11
7304: PPUSH
7305: LD_INT 75
7307: PPUSH
7308: LD_INT 23
7310: PPUSH
7311: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7315: LD_VAR 0 11
7319: PPUSH
7320: LD_INT 78
7322: PPUSH
7323: LD_INT 8
7325: PPUSH
7326: CALL_OW 174
// end ;
7330: GO 7267
7332: POP
7333: POP
// wait ( 0 0$30 ) ;
7334: LD_INT 1050
7336: PPUSH
7337: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7348: LD_ADDR_VAR 0 14
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_VAR 0 1
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: LD_INT 24
7373: PUSH
7374: LD_INT 550
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: LD_INT 250
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 69
7408: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7409: LD_ADDR_VAR 0 16
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 1
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 24
7438: PUSH
7439: LD_INT 1000
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: ST_TO_ADDR
// if medicCount then
7456: LD_VAR 0 4
7460: IFFALSE 7500
// begin if damageUnit_list then
7462: LD_VAR 0 14
7466: IFFALSE 7500
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7468: LD_VAR 0 14
7472: PPUSH
7473: LD_VAR 0 7
7477: PPUSH
7478: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7482: LD_VAR 0 4
7486: PPUSH
7487: LD_VAR 0 14
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7500: LD_ADDR_VAR 0 11
7504: PUSH
7505: LD_VAR 0 16
7509: PUSH
7510: FOR_IN
7511: IFFALSE 7687
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7513: LD_ADDR_VAR 0 19
7517: PUSH
7518: LD_INT 22
7520: PUSH
7521: LD_VAR 0 8
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: PPUSH
7535: LD_VAR 0 11
7539: PPUSH
7540: CALL_OW 74
7544: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7545: LD_ADDR_VAR 0 20
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_VAR 0 8
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 2
7564: PUSH
7565: LD_INT 59
7567: PUSH
7568: EMPTY
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 21
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: PPUSH
7604: CALL_OW 69
7608: PPUSH
7609: LD_VAR 0 11
7613: PPUSH
7614: CALL_OW 74
7618: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7619: LD_VAR 0 11
7623: PPUSH
7624: LD_VAR 0 19
7628: PPUSH
7629: CALL_OW 296
7633: PUSH
7634: LD_INT 8
7636: PLUS
7637: PUSH
7638: LD_VAR 0 11
7642: PPUSH
7643: LD_VAR 0 20
7647: PPUSH
7648: CALL_OW 296
7652: LESS
7653: IFFALSE 7671
// ComAttackUnit ( i , target1 ) else
7655: LD_VAR 0 11
7659: PPUSH
7660: LD_VAR 0 19
7664: PPUSH
7665: CALL_OW 115
7669: GO 7685
// ComAttackUnit ( i , target2 ) ;
7671: LD_VAR 0 11
7675: PPUSH
7676: LD_VAR 0 20
7680: PPUSH
7681: CALL_OW 115
// end ;
7685: GO 7510
7687: POP
7688: POP
// until not soldiersOK_list and not damageUnit_list ;
7689: LD_VAR 0 16
7693: NOT
7694: PUSH
7695: LD_VAR 0 14
7699: NOT
7700: AND
7701: IFFALSE 7341
// end ; if strategy = 2 then
7703: LD_VAR 0 9
7707: PUSH
7708: LD_INT 2
7710: EQUAL
7711: IFFALSE 8129
// begin for i in soldiersOK_list do
7713: LD_ADDR_VAR 0 11
7717: PUSH
7718: LD_VAR 0 16
7722: PUSH
7723: FOR_IN
7724: IFFALSE 7758
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7726: LD_VAR 0 11
7730: PPUSH
7731: LD_INT 91
7733: PPUSH
7734: LD_INT 63
7736: PPUSH
7737: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7741: LD_VAR 0 11
7745: PPUSH
7746: LD_INT 75
7748: PPUSH
7749: LD_INT 33
7751: PPUSH
7752: CALL_OW 174
// end ;
7756: GO 7723
7758: POP
7759: POP
// wait ( 0 0$10 ) ;
7760: LD_INT 350
7762: PPUSH
7763: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7767: LD_INT 105
7769: PPUSH
7770: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7774: LD_ADDR_VAR 0 14
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_VAR 0 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: LD_INT 3
7796: PUSH
7797: LD_INT 24
7799: PUSH
7800: LD_INT 550
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 24
7813: PUSH
7814: LD_INT 250
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7835: LD_ADDR_VAR 0 16
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_VAR 0 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 24
7864: PUSH
7865: LD_INT 1000
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 69
7881: ST_TO_ADDR
// if medicCount then
7882: LD_VAR 0 4
7886: IFFALSE 7926
// begin if damageUnit_list then
7888: LD_VAR 0 14
7892: IFFALSE 7926
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7894: LD_VAR 0 14
7898: PPUSH
7899: LD_VAR 0 7
7903: PPUSH
7904: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7908: LD_VAR 0 4
7912: PPUSH
7913: LD_VAR 0 14
7917: PUSH
7918: LD_INT 1
7920: ARRAY
7921: PPUSH
7922: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7926: LD_ADDR_VAR 0 11
7930: PUSH
7931: LD_VAR 0 16
7935: PUSH
7936: FOR_IN
7937: IFFALSE 8113
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7939: LD_ADDR_VAR 0 19
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 8
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PPUSH
7961: LD_VAR 0 11
7965: PPUSH
7966: CALL_OW 74
7970: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7971: LD_ADDR_VAR 0 20
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_VAR 0 8
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: LD_INT 59
7993: PUSH
7994: EMPTY
7995: LIST
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 1
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 21
8009: PUSH
8010: LD_INT 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: PPUSH
8030: CALL_OW 69
8034: PPUSH
8035: LD_VAR 0 11
8039: PPUSH
8040: CALL_OW 74
8044: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8045: LD_VAR 0 11
8049: PPUSH
8050: LD_VAR 0 19
8054: PPUSH
8055: CALL_OW 296
8059: PUSH
8060: LD_INT 8
8062: PLUS
8063: PUSH
8064: LD_VAR 0 11
8068: PPUSH
8069: LD_VAR 0 20
8073: PPUSH
8074: CALL_OW 296
8078: LESS
8079: IFFALSE 8097
// ComAttackUnit ( i , target1 ) else
8081: LD_VAR 0 11
8085: PPUSH
8086: LD_VAR 0 19
8090: PPUSH
8091: CALL_OW 115
8095: GO 8111
// ComAttackUnit ( i , target2 ) ;
8097: LD_VAR 0 11
8101: PPUSH
8102: LD_VAR 0 20
8106: PPUSH
8107: CALL_OW 115
// end ;
8111: GO 7936
8113: POP
8114: POP
// until not soldiersOK_list and not damageUnit_list ;
8115: LD_VAR 0 16
8119: NOT
8120: PUSH
8121: LD_VAR 0 14
8125: NOT
8126: AND
8127: IFFALSE 7767
// end ; if medic_list then
8129: LD_VAR 0 15
8133: IFFALSE 8273
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8135: LD_ADDR_VAR 0 15
8139: PUSH
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: LD_INT 50
8164: PUSH
8165: EMPTY
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in medic_list do
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 15
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8264
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8198: LD_VAR 0 11
8202: PPUSH
8203: CALL_OW 314
8207: NOT
8208: PUSH
8209: LD_VAR 0 11
8213: PPUSH
8214: LD_INT 4
8216: PPUSH
8217: CALL_OW 308
8221: NOT
8222: AND
8223: IFFALSE 8239
// ComMoveToArea ( i , RussianAttack ) else
8225: LD_VAR 0 11
8229: PPUSH
8230: LD_INT 4
8232: PPUSH
8233: CALL_OW 113
8237: GO 8262
// if IsInArea ( i , RussianAttack ) then
8239: LD_VAR 0 11
8243: PPUSH
8244: LD_INT 4
8246: PPUSH
8247: CALL_OW 308
8251: IFFALSE 8262
// RemoveUnit ( i ) ;
8253: LD_VAR 0 11
8257: PPUSH
8258: CALL_OW 64
8262: GO 8195
8264: POP
8265: POP
// until not medic_list ;
8266: LD_VAR 0 15
8270: NOT
8271: IFFALSE 8135
// end ; end ; end_of_file
8273: LD_VAR 0 10
8277: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
// InGameOn ;
8285: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8289: LD_ADDR_VAR 0 3
8293: PUSH
8294: LD_EXP 8
8298: PUSH
8299: LD_EXP 9
8303: PUSH
8304: LD_EXP 10
8308: PUSH
8309: LD_EXP 11
8313: PUSH
8314: LD_EXP 12
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8326: LD_ADDR_VAR 0 4
8330: PUSH
8331: LD_INT 46
8333: PUSH
8334: LD_INT 45
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 43
8342: PUSH
8343: LD_INT 42
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_INT 14
8360: PUSH
8361: LD_INT 12
8363: PUSH
8364: LD_INT 10
8366: PUSH
8367: LD_INT 8
8369: PUSH
8370: LD_INT 6
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8380: LD_EXP 11
8384: PPUSH
8385: LD_INT 31
8387: PPUSH
8388: LD_INT 59
8390: PPUSH
8391: LD_INT 19
8393: PPUSH
8394: LD_INT 5
8396: PPUSH
8397: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8401: LD_INT 32
8403: PPUSH
8404: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8408: LD_INT 32
8410: PPUSH
8411: LD_INT 51
8413: PPUSH
8414: LD_INT 26
8416: PPUSH
8417: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8421: LD_INT 32
8423: PPUSH
8424: LD_INT 53
8426: PPUSH
8427: LD_INT 23
8429: PPUSH
8430: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8434: LD_INT 32
8436: PPUSH
8437: LD_INT 52
8439: PPUSH
8440: LD_INT 19
8442: PPUSH
8443: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8447: LD_INT 35
8449: PPUSH
8450: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8454: LD_INT 32
8456: PPUSH
8457: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 250
8468: PUSH
8469: LD_INT 52
8471: EQUAL
8472: PUSH
8473: LD_INT 32
8475: PPUSH
8476: CALL_OW 251
8480: PUSH
8481: LD_INT 19
8483: EQUAL
8484: AND
8485: IFFALSE 8447
// ComExitVehicle ( JMM ) ;
8487: LD_EXP 1
8491: PPUSH
8492: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8496: LD_EXP 7
8500: PPUSH
8501: LD_EXP 1
8505: PPUSH
8506: CALL_OW 119
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8517: LD_EXP 1
8521: PPUSH
8522: LD_INT 46
8524: PPUSH
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8532: LD_EXP 1
8536: PPUSH
8537: LD_EXP 7
8541: PPUSH
8542: CALL_OW 179
// wait ( 0 0$4 ) ;
8546: LD_INT 140
8548: PPUSH
8549: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8553: LD_EXP 1
8557: PPUSH
8558: LD_STRING D1-JMM-1
8560: PPUSH
8561: CALL_OW 88
// if not dialogue_skipped then
8565: LD_OWVAR 59
8569: NOT
8570: IFFALSE 9227
// begin for i := 1 to gammaSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: DOUBLE
8578: LD_INT 1
8580: DEC
8581: ST_TO_ADDR
8582: LD_VAR 0 3
8586: PUSH
8587: FOR_TO
8588: IFFALSE 8649
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 2
8599: ARRAY
8600: PPUSH
8601: LD_VAR 0 4
8605: PUSH
8606: LD_VAR 0 2
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 5
8616: PUSH
8617: LD_VAR 0 2
8621: ARRAY
8622: PPUSH
8623: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8627: LD_VAR 0 3
8631: PUSH
8632: LD_VAR 0 2
8636: ARRAY
8637: PPUSH
8638: LD_EXP 1
8642: PPUSH
8643: CALL_OW 179
// end ;
8647: GO 8587
8649: POP
8650: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8651: LD_EXP 4
8655: PPUSH
8656: LD_INT 41
8658: PPUSH
8659: LD_INT 4
8661: PPUSH
8662: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8666: LD_EXP 4
8670: PPUSH
8671: LD_EXP 1
8675: PPUSH
8676: CALL_OW 179
// if Lisa = false and Bobby then
8680: LD_EXP 4
8684: PUSH
8685: LD_INT 0
8687: EQUAL
8688: PUSH
8689: LD_EXP 2
8693: AND
8694: IFFALSE 8725
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8696: LD_EXP 2
8700: PPUSH
8701: LD_INT 41
8703: PPUSH
8704: LD_INT 4
8706: PPUSH
8707: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_EXP 1
8720: PPUSH
8721: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8725: LD_EXP 4
8729: PUSH
8730: LD_INT 0
8732: EQUAL
8733: PUSH
8734: LD_EXP 2
8738: PUSH
8739: LD_INT 0
8741: EQUAL
8742: AND
8743: PUSH
8744: LD_EXP 3
8748: AND
8749: IFFALSE 8780
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8751: LD_EXP 3
8755: PPUSH
8756: LD_INT 41
8758: PPUSH
8759: LD_INT 4
8761: PPUSH
8762: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8766: LD_EXP 3
8770: PPUSH
8771: LD_EXP 1
8775: PPUSH
8776: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8780: LD_EXP 4
8784: PUSH
8785: LD_INT 0
8787: EQUAL
8788: PUSH
8789: LD_EXP 2
8793: PUSH
8794: LD_INT 0
8796: EQUAL
8797: AND
8798: PUSH
8799: LD_EXP 3
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: AND
8808: IFFALSE 8839
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8810: LD_EXP 6
8814: PPUSH
8815: LD_INT 41
8817: PPUSH
8818: LD_INT 4
8820: PPUSH
8821: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8825: LD_EXP 6
8829: PPUSH
8830: LD_EXP 1
8834: PPUSH
8835: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8839: LD_EXP 7
8843: PPUSH
8844: LD_STRING D1-Brown-1
8846: PPUSH
8847: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8851: LD_EXP 1
8855: PPUSH
8856: LD_STRING D1-JMM-2
8858: PPUSH
8859: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8863: LD_EXP 7
8867: PPUSH
8868: LD_STRING D1-Brown-2
8870: PPUSH
8871: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8875: LD_EXP 1
8879: PPUSH
8880: LD_EXP 9
8884: PPUSH
8885: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8889: LD_EXP 9
8893: PPUSH
8894: LD_STRING D1-FSol1-2
8896: PPUSH
8897: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8901: LD_EXP 1
8905: PPUSH
8906: LD_EXP 8
8910: PPUSH
8911: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8915: LD_EXP 8
8919: PPUSH
8920: LD_STRING D1-Sol2-2
8922: PPUSH
8923: CALL_OW 88
// if Lisa then
8927: LD_EXP 4
8931: IFFALSE 8971
// begin ComTurnUnit ( JMM , Lisa ) ;
8933: LD_EXP 1
8937: PPUSH
8938: LD_EXP 4
8942: PPUSH
8943: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8947: LD_EXP 4
8951: PPUSH
8952: LD_STRING D1-Lisa-2
8954: PPUSH
8955: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8959: LD_EXP 1
8963: PPUSH
8964: LD_STRING D1-JMM-3
8966: PPUSH
8967: CALL_OW 88
// end ; if Bobby then
8971: LD_EXP 2
8975: IFFALSE 9015
// begin ComTurnUnit ( JMM , Bobby ) ;
8977: LD_EXP 1
8981: PPUSH
8982: LD_EXP 2
8986: PPUSH
8987: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
8991: LD_EXP 2
8995: PPUSH
8996: LD_STRING D1-Bobby-2
8998: PPUSH
8999: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9003: LD_EXP 1
9007: PPUSH
9008: LD_STRING D1-JMM-3
9010: PPUSH
9011: CALL_OW 88
// end ; if Cyrus then
9015: LD_EXP 3
9019: IFFALSE 9059
// begin ComTurnUnit ( JMM , Cyrus ) ;
9021: LD_EXP 1
9025: PPUSH
9026: LD_EXP 3
9030: PPUSH
9031: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9035: LD_EXP 3
9039: PPUSH
9040: LD_STRING D1-Cyrus-2
9042: PPUSH
9043: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9047: LD_EXP 1
9051: PPUSH
9052: LD_STRING D1-JMM-3
9054: PPUSH
9055: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_EXP 7
9068: PPUSH
9069: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9073: LD_EXP 1
9077: PPUSH
9078: LD_STRING D1-JMM-3a
9080: PPUSH
9081: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9085: LD_EXP 7
9089: PPUSH
9090: LD_INT 38
9092: PPUSH
9093: LD_INT 5
9095: PPUSH
9096: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9100: LD_EXP 7
9104: PPUSH
9105: LD_EXP 1
9109: PPUSH
9110: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9114: LD_EXP 1
9118: PPUSH
9119: LD_INT 40
9121: PPUSH
9122: LD_INT 7
9124: PPUSH
9125: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9129: LD_EXP 1
9133: PPUSH
9134: LD_EXP 7
9138: PPUSH
9139: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9143: LD_EXP 7
9147: PPUSH
9148: LD_STRING D1-Brown-3
9150: PPUSH
9151: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9155: LD_EXP 14
9159: PPUSH
9160: LD_STRING D1-Har-3
9162: PPUSH
9163: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D1-JMM-4
9174: PPUSH
9175: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D1-Har-4
9186: PPUSH
9187: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9191: LD_EXP 1
9195: PPUSH
9196: LD_STRING D1-JMM-5
9198: PPUSH
9199: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9203: LD_EXP 14
9207: PPUSH
9208: LD_STRING D1-Har-5
9210: PPUSH
9211: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9215: LD_EXP 1
9219: PPUSH
9220: LD_STRING D1-JMM-6
9222: PPUSH
9223: CALL_OW 88
// end ; InGameOff ;
9227: CALL_OW 9
// PrepareRussianConvoy ;
9231: CALL 3376 0 0
// ChangeMissionObjectives ( M1 ) ;
9235: LD_STRING M1
9237: PPUSH
9238: CALL_OW 337
// SaveForQuickRestart ;
9242: CALL_OW 22
// timerStatus = 1 ;
9246: LD_ADDR_EXP 29
9250: PUSH
9251: LD_INT 1
9253: ST_TO_ADDR
// startTimer = 1 ;
9254: LD_ADDR_EXP 30
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// bonusAvalaible = 1 ;
9262: LD_ADDR_EXP 44
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9270: LD_INT 105
9272: PPUSH
9273: CALL_OW 67
// DialogueOn ;
9277: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9281: LD_EXP 12
9285: PPUSH
9286: LD_STRING D9-Mech1-1
9288: PPUSH
9289: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9293: LD_EXP 1
9297: PPUSH
9298: LD_STRING D9-JMM-1
9300: PPUSH
9301: CALL_OW 88
// DialogueOff ;
9305: CALL_OW 7
// end ;
9309: LD_VAR 0 1
9313: RET
// export function JMMTraitor ; begin
9314: LD_INT 0
9316: PPUSH
// wait ( 0 0$2 ) ;
9317: LD_INT 70
9319: PPUSH
9320: CALL_OW 67
// DialogueOn ;
9324: CALL_OW 6
// InGameOn ;
9328: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
9332: LD_EXP 14
9336: PPUSH
9337: LD_STRING D8-Har-1b
9339: PPUSH
9340: CALL_OW 94
// YouLost ( LostCommand ) ;
9344: LD_STRING LostCommand
9346: PPUSH
9347: CALL_OW 104
// InGameOff ;
9351: CALL_OW 9
// DialogueOff ;
9355: CALL_OW 7
// end ;
9359: LD_VAR 0 1
9363: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9364: LD_INT 47
9366: PPUSH
9367: LD_INT 1
9369: PPUSH
9370: CALL_OW 321
9374: PUSH
9375: LD_INT 2
9377: EQUAL
9378: PUSH
9379: LD_EXP 31
9383: NOT
9384: AND
9385: PUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 1
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 57
9418: PUSH
9419: EMPTY
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 69
9432: AND
9433: IFFALSE 9667
9435: GO 9437
9437: DISABLE
// begin factoryDialog := true ;
9438: LD_ADDR_EXP 31
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// if IsOk ( Campell ) then
9446: LD_EXP 12
9450: PPUSH
9451: CALL_OW 302
9455: IFFALSE 9471
// Say ( Campell , D10-Mech1-1 ) else
9457: LD_EXP 12
9461: PPUSH
9462: LD_STRING D10-Mech1-1
9464: PPUSH
9465: CALL_OW 88
9469: GO 9667
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9471: LD_INT 22
9473: PUSH
9474: LD_INT 1
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 25
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 26
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: PUSH
9522: LD_EXP 1
9526: PUSH
9527: EMPTY
9528: LIST
9529: DIFF
9530: IFFALSE 9604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9532: LD_INT 22
9534: PUSH
9535: LD_INT 1
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 26
9564: PUSH
9565: LD_INT 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: PUSH
9583: LD_EXP 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: DIFF
9591: PPUSH
9592: LD_STRING D10-Mech1-1
9594: PPUSH
9595: LD_STRING D10-Mech1-1
9597: PPUSH
9598: CALL 4570 0 3
9602: GO 9667
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9604: LD_INT 22
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 26
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: CALL_OW 69
9647: PUSH
9648: LD_EXP 1
9652: PUSH
9653: EMPTY
9654: LIST
9655: DIFF
9656: PPUSH
9657: LD_STRING D10-Mech1-1
9659: PPUSH
9660: LD_STRING D10-Mech1-1
9662: PPUSH
9663: CALL 4570 0 3
// end ; end ;
9667: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9668: LD_INT 22
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 32
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_EXP 32
9701: PUSH
9702: LD_INT 0
9704: EQUAL
9705: AND
9706: IFFALSE 9942
9708: GO 9710
9710: DISABLE
// begin if IsOk ( Claptopn ) then
9711: LD_EXP 11
9715: PPUSH
9716: CALL_OW 302
9720: IFFALSE 9736
// Say ( Claptopn , D9b-Eng1-1 ) else
9722: LD_EXP 11
9726: PPUSH
9727: LD_STRING D9b-Eng1-1
9729: PPUSH
9730: CALL_OW 88
9734: GO 9928
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9736: LD_INT 22
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 21
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 25
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PPUSH
9782: CALL_OW 69
9786: PUSH
9787: LD_EXP 1
9791: PUSH
9792: EMPTY
9793: LIST
9794: DIFF
9795: IFFALSE 9869
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9797: LD_INT 22
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 21
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 26
9829: PUSH
9830: LD_INT 1
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: PUSH
9848: LD_EXP 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: DIFF
9856: PPUSH
9857: LD_STRING D9b-Eng1-1
9859: PPUSH
9860: LD_STRING D9b-Eng1-11
9862: PPUSH
9863: CALL 4570 0 3
9867: GO 9928
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9869: LD_INT 22
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 26
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 69
9908: PUSH
9909: LD_EXP 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: DIFF
9917: PPUSH
9918: LD_STRING D9b-Eng1-1
9920: PPUSH
9921: LD_STRING D9b-Eng1-1
9923: PPUSH
9924: CALL 4570 0 3
// end ; if energyVDialog = 0 then
9928: LD_EXP 33
9932: PUSH
9933: LD_INT 0
9935: EQUAL
9936: IFFALSE 9942
// EnergyDialog ;
9938: CALL 4975 0 0
// end ;
9942: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9943: LD_EXP 34
9947: PUSH
9948: LD_INT 1
9950: EQUAL
9951: PUSH
9952: LD_EXP 35
9956: PUSH
9957: LD_INT 1
9959: EQUAL
9960: AND
9961: IFFALSE 9973
9963: GO 9965
9965: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9966: LD_STRING M1a
9968: PPUSH
9969: CALL_OW 337
9973: END
// every 3 3$0 do
9974: GO 9976
9976: DISABLE
// PrepareFirstAttack ;
9977: CALL 4188 0 0
9981: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9982: LD_INT 22
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 24
10007: PUSH
10008: LD_INT 250
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: PUSH
10029: LD_INT 0
10031: GREATER
10032: PUSH
10033: LD_EXP 23
10037: PUSH
10038: LD_INT 1
10040: EQUAL
10041: AND
10042: IFFALSE 10343
10044: GO 10046
10046: DISABLE
10047: LD_INT 0
10049: PPUSH
// begin firstRussianAttack = 2 ;
10050: LD_ADDR_EXP 23
10054: PUSH
10055: LD_INT 2
10057: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10058: LD_INT 22
10060: PUSH
10061: LD_INT 5
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PPUSH
10082: CALL_OW 69
10086: PPUSH
10087: LD_INT 125
10089: PPUSH
10090: LD_INT 98
10092: PPUSH
10093: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10097: LD_INT 22
10099: PUSH
10100: LD_INT 1
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: LD_EXP 7
10135: PUSH
10136: LD_EXP 4
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: DIFF
10146: PPUSH
10147: LD_STRING DAtt1-Sol1-1
10149: PPUSH
10150: LD_STRING DAtt1-FSol1-1
10152: PPUSH
10153: CALL 4570 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10157: LD_EXP 1
10161: PPUSH
10162: LD_STRING DAtt1-JMM-1
10164: PPUSH
10165: CALL_OW 88
// if Lisa then
10169: LD_EXP 4
10173: IFFALSE 10189
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10175: LD_EXP 4
10179: PPUSH
10180: LD_STRING DAtt1a-Lisa-1
10182: PPUSH
10183: CALL_OW 88
10187: GO 10260
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10189: LD_INT 22
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 26
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PUSH
10229: LD_EXP 1
10233: PUSH
10234: LD_EXP 7
10238: PUSH
10239: LD_EXP 4
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: DIFF
10249: PPUSH
10250: LD_STRING DAtt1a-Sol1-1
10252: PPUSH
10253: LD_STRING DAtt1-FSol1-1
10255: PPUSH
10256: CALL 4570 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10260: LD_EXP 1
10264: PPUSH
10265: LD_STRING DAtt1a-JMM-1
10267: PPUSH
10268: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10272: LD_INT 22
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 26
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: PUSH
10312: LD_EXP 1
10316: PUSH
10317: LD_EXP 7
10321: PUSH
10322: LD_EXP 4
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: DIFF
10332: PPUSH
10333: LD_STRING DAtt1b-Sol1-1
10335: PPUSH
10336: LD_STRING DAtt1a-Sol1-1
10338: PPUSH
10339: CALL 4570 0 3
// end ;
10343: PPOPN 1
10345: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10346: LD_EXP 23
10350: PUSH
10351: LD_INT 2
10353: EQUAL
10354: PUSH
10355: LD_INT 5
10357: PPUSH
10358: LD_INT 22
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 70
10386: AND
10387: IFFALSE 10445
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10395: LD_ADDR_VAR 0 1
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_INT 5
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PPUSH
10424: CALL_OW 69
10428: PUSH
10429: FOR_IN
10430: IFFALSE 10443
// RemoveUnit ( i ) ;
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 64
10441: GO 10429
10443: POP
10444: POP
// end ;
10445: PPOPN 1
10447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10448: LD_INT 22
10450: PUSH
10451: LD_INT 5
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: PPUSH
10461: CALL_OW 69
10465: PUSH
10466: LD_INT 0
10468: EQUAL
10469: PUSH
10470: LD_EXP 23
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: IFFALSE 10492
10481: GO 10483
10483: DISABLE
// firstRussianAttack = 3 ;
10484: LD_ADDR_EXP 23
10488: PUSH
10489: LD_INT 3
10491: ST_TO_ADDR
10492: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10493: LD_EXP 28
10497: PUSH
10498: LD_INT 0
10500: EQUAL
10501: IFFALSE 10582
10503: GO 10505
10505: DISABLE
// begin timerStatus = 4 ;
10506: LD_ADDR_EXP 29
10510: PUSH
10511: LD_INT 4
10513: ST_TO_ADDR
// DialogueOn ;
10514: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10518: LD_EXP 13
10522: PPUSH
10523: LD_STRING D2-Don-1
10525: PPUSH
10526: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10530: LD_EXP 1
10534: PPUSH
10535: LD_STRING D2-JMM-1
10537: PPUSH
10538: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10542: LD_EXP 13
10546: PPUSH
10547: LD_STRING D2-Don-2
10549: PPUSH
10550: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10554: LD_EXP 1
10558: PPUSH
10559: LD_STRING D2-JMM-2
10561: PPUSH
10562: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10566: LD_EXP 13
10570: PPUSH
10571: LD_STRING D2-Don-3
10573: PPUSH
10574: CALL_OW 94
// DialogueOff ;
10578: CALL_OW 7
// end ;
10582: END
// every 12 12$0 do var tmp ;
10583: GO 10585
10585: DISABLE
10586: LD_INT 0
10588: PPUSH
// begin PrepareDonaldsonArmy ;
10589: CALL 1159 0 0
// CenterNowOnUnits ( Donaldson ) ;
10593: LD_EXP 13
10597: PPUSH
10598: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10602: LD_INT 22
10604: PUSH
10605: LD_INT 6
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: NOT
10617: IFFALSE 10633
// begin wait ( 3 ) ;
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10626: LD_STRING ACH_BASE
10628: PPUSH
10629: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10633: LD_ADDR_VAR 0 1
10637: PUSH
10638: LD_INT 22
10640: PUSH
10641: LD_INT 4
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 21
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 26
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: PUSH
10678: LD_EXP 5
10682: PUSH
10683: EMPTY
10684: LIST
10685: DIFF
10686: ST_TO_ADDR
// DialogueOn ;
10687: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 1
10700: PUSH
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_STRING D3-Sol1-1
10708: PPUSH
10709: LD_STRING D3-Sol1-1
10711: PPUSH
10712: CALL 4570 0 3
10716: DIFF
10717: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10718: LD_VAR 0 1
10722: PPUSH
10723: LD_STRING D3-Sol2-1
10725: PPUSH
10726: LD_STRING D3-Sol2-1
10728: PPUSH
10729: CALL 4570 0 3
// if Frank then
10733: LD_EXP 5
10737: IFFALSE 10751
// Say ( Frank , D3-Frank-1 ) ;
10739: LD_EXP 5
10743: PPUSH
10744: LD_STRING D3-Frank-1
10746: PPUSH
10747: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10751: LD_EXP 13
10755: PPUSH
10756: LD_STRING D3-Don-1
10758: PPUSH
10759: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10763: LD_EXP 13
10767: PPUSH
10768: LD_STRING D3-Don-1a
10770: PPUSH
10771: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D3-JMM-1
10782: PPUSH
10783: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10787: LD_EXP 13
10791: PPUSH
10792: LD_STRING D3-Don-2
10794: PPUSH
10795: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10799: LD_INT 22
10801: PUSH
10802: LD_INT 6
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 21
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 69
10827: IFFALSE 10965
// begin Say ( JMM , D3-JMM-2 ) ;
10829: LD_EXP 1
10833: PPUSH
10834: LD_STRING D3-JMM-2
10836: PPUSH
10837: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10841: LD_EXP 13
10845: PPUSH
10846: LD_STRING D3-Don-3
10848: PPUSH
10849: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10853: LD_EXP 1
10857: PPUSH
10858: LD_STRING D3-JMM-3
10860: PPUSH
10861: CALL_OW 88
// if IsOK ( Frank ) then
10865: LD_EXP 5
10869: PPUSH
10870: CALL_OW 302
10874: IFFALSE 10888
// Say ( Frank , D3-Frank-3 ) ;
10876: LD_EXP 5
10880: PPUSH
10881: LD_STRING D3-Frank-3
10883: PPUSH
10884: CALL_OW 88
// DialogueOff ;
10888: CALL_OW 7
// if IsOk ( Frank ) then
10892: LD_EXP 5
10896: PPUSH
10897: CALL_OW 302
10901: IFFALSE 10963
// begin SetSide ( Frank , 0 ) ;
10903: LD_EXP 5
10907: PPUSH
10908: LD_INT 0
10910: PPUSH
10911: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10915: LD_EXP 5
10919: PPUSH
10920: LD_INT 12
10922: PPUSH
10923: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10927: LD_EXP 5
10931: PPUSH
10932: LD_STRING 04t_Frank
10934: PPUSH
10935: CALL_OW 38
// wait ( 0 0$3 ) ;
10939: LD_INT 105
10941: PPUSH
10942: CALL_OW 67
// frankScoutBase = 1 ;
10946: LD_ADDR_EXP 25
10950: PUSH
10951: LD_INT 1
10953: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10954: LD_EXP 5
10958: PPUSH
10959: CALL_OW 64
// end ; end else
10963: GO 11052
// begin Say ( JMM , D3-JMM-4 ) ;
10965: LD_EXP 1
10969: PPUSH
10970: LD_STRING D3-JMM-4
10972: PPUSH
10973: CALL_OW 88
// DialogueOff ;
10977: CALL_OW 7
// if IsOk ( Frank ) then
10981: LD_EXP 5
10985: PPUSH
10986: CALL_OW 302
10990: IFFALSE 11052
// begin SetSide ( Frank , 0 ) ;
10992: LD_EXP 5
10996: PPUSH
10997: LD_INT 0
10999: PPUSH
11000: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11004: LD_EXP 5
11008: PPUSH
11009: LD_INT 12
11011: PPUSH
11012: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11016: LD_EXP 5
11020: PPUSH
11021: LD_STRING 04t_Frank
11023: PPUSH
11024: CALL_OW 38
// wait ( 0 0$3 ) ;
11028: LD_INT 105
11030: PPUSH
11031: CALL_OW 67
// frankScoutBase = 1 ;
11035: LD_ADDR_EXP 25
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11043: LD_EXP 5
11047: PPUSH
11048: CALL_OW 64
// end ; end ; end ;
11052: PPOPN 1
11054: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11055: LD_EXP 13
11059: PPUSH
11060: CALL_OW 255
11064: PUSH
11065: LD_INT 4
11067: EQUAL
11068: PUSH
11069: LD_EXP 13
11073: PPUSH
11074: CALL_OW 302
11078: AND
11079: IFFALSE 11319
11081: GO 11083
11083: DISABLE
11084: LD_INT 0
11086: PPUSH
11087: PPUSH
// begin wait ( 5 5$00 ) ;
11088: LD_INT 10500
11090: PPUSH
11091: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11095: LD_EXP 13
11099: PPUSH
11100: CALL_OW 255
11104: PUSH
11105: LD_INT 1
11107: EQUAL
11108: PUSH
11109: LD_EXP 13
11113: PPUSH
11114: CALL_OW 301
11118: OR
11119: IFFALSE 11123
// exit ;
11121: GO 11319
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11123: LD_EXP 13
11127: PPUSH
11128: LD_STRING D3b-Don-1
11130: PPUSH
11131: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11135: LD_ADDR_EXP 41
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11163: LD_INT 35
11165: PPUSH
11166: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11170: LD_VAR 0 2
11174: NOT
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 6
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 101
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: OR
11205: IFFALSE 11163
// if not tmp then
11207: LD_VAR 0 2
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 11319
// for i in tmp do
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: LD_VAR 0 2
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// ComAgressiveMove ( i , 52 , 64 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 52
11236: PPUSH
11237: LD_INT 64
11239: PPUSH
11240: CALL_OW 114
11244: GO 11226
11246: POP
11247: POP
// wait ( 0 0$10 ) ;
11248: LD_INT 350
11250: PPUSH
11251: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11255: LD_ADDR_VAR 0 1
11259: PUSH
11260: LD_INT 22
11262: PUSH
11263: LD_INT 4
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PUSH
11275: LD_EXP 5
11279: DIFF
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11298
// SetSide ( i , 1 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 235
11296: GO 11281
11298: POP
11299: POP
// if IsLive ( Donaldson ) then
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 300
11309: IFFALSE 11319
// saveDonaldson := 1 ;
11311: LD_ADDR_EXP 24
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// end ;
11319: PPOPN 2
11321: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11322: LD_EXP 13
11326: PPUSH
11327: CALL_OW 302
11331: PUSH
11332: LD_EXP 24
11336: NOT
11337: AND
11338: PUSH
11339: LD_EXP 41
11343: NOT
11344: AND
11345: PUSH
11346: LD_INT 26
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: PUSH
11364: LD_EXP 13
11368: PPUSH
11369: LD_EXP 1
11373: PPUSH
11374: CALL_OW 296
11378: PUSH
11379: LD_INT 6
11381: LESS
11382: OR
11383: AND
11384: IFFALSE 11439
11386: GO 11388
11388: DISABLE
11389: LD_INT 0
11391: PPUSH
// begin saveDonaldson := 1 ;
11392: LD_ADDR_EXP 24
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11400: LD_ADDR_VAR 0 1
11404: PUSH
11405: LD_INT 22
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: FOR_IN
11421: IFFALSE 11437
// SetSide ( i , 1 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 235
11435: GO 11420
11437: POP
11438: POP
// end ;
11439: PPOPN 1
11441: END
// every 0 0$1 trigger frankScoutBase do
11442: LD_EXP 25
11446: IFFALSE 11811
11448: GO 11450
11450: DISABLE
// begin wait ( 2 2$30 ) ;
11451: LD_INT 5250
11453: PPUSH
11454: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11458: LD_INT 35
11460: PPUSH
11461: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11465: LD_INT 81
11467: PUSH
11468: LD_INT 4
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 92
11477: PUSH
11478: LD_INT 84
11480: PUSH
11481: LD_INT 28
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PPUSH
11497: CALL_OW 69
11501: NOT
11502: IFFALSE 11458
// uc_side = 4 ;
11504: LD_ADDR_OWVAR 20
11508: PUSH
11509: LD_INT 4
11511: ST_TO_ADDR
// uc_nation = 1 ;
11512: LD_ADDR_OWVAR 21
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11520: LD_ADDR_EXP 5
11524: PUSH
11525: LD_STRING 04t_Frank
11527: PPUSH
11528: CALL_OW 34
11532: ST_TO_ADDR
// if not Frank then
11533: LD_EXP 5
11537: NOT
11538: IFFALSE 11542
// exit ;
11540: GO 11811
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11542: LD_EXP 5
11546: PPUSH
11547: LD_INT 13
11549: PPUSH
11550: LD_INT 0
11552: PPUSH
11553: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11557: LD_INT 35
11559: PPUSH
11560: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11564: LD_EXP 1
11568: PPUSH
11569: CALL_OW 310
11573: NOT
11574: PUSH
11575: LD_EXP 1
11579: PPUSH
11580: LD_INT 4
11582: PPUSH
11583: CALL_OW 296
11587: PUSH
11588: LD_INT 20
11590: LESS
11591: AND
11592: IFFALSE 11625
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11594: LD_EXP 5
11598: PPUSH
11599: LD_EXP 1
11603: PPUSH
11604: CALL_OW 250
11608: PPUSH
11609: LD_EXP 1
11613: PPUSH
11614: CALL_OW 251
11618: PPUSH
11619: CALL_OW 111
11623: GO 11640
// ComMoveXY ( Frank , 51 , 15 ) ;
11625: LD_EXP 5
11629: PPUSH
11630: LD_INT 51
11632: PPUSH
11633: LD_INT 15
11635: PPUSH
11636: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11640: LD_EXP 5
11644: PPUSH
11645: LD_EXP 1
11649: PPUSH
11650: CALL_OW 296
11654: PUSH
11655: LD_INT 10
11657: LESS
11658: IFFALSE 11557
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11660: LD_EXP 1
11664: PUSH
11665: LD_EXP 5
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 87
// DialogueOn ;
11678: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11682: LD_EXP 5
11686: PPUSH
11687: LD_STRING D3a-Frank-1
11689: PPUSH
11690: CALL_OW 88
// if Lisa then
11694: LD_EXP 4
11698: IFFALSE 11748
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11700: LD_EXP 4
11704: PPUSH
11705: LD_STRING D3a-Lisa-1
11707: PPUSH
11708: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11712: LD_EXP 5
11716: PPUSH
11717: LD_STRING D3a-Frank-2
11719: PPUSH
11720: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11724: LD_EXP 4
11728: PPUSH
11729: LD_STRING D3a-Lisa-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11736: LD_EXP 5
11740: PPUSH
11741: LD_STRING D3a-Frank-3
11743: PPUSH
11744: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11748: LD_EXP 1
11752: PPUSH
11753: LD_STRING D3a-JMM-3
11755: PPUSH
11756: CALL_OW 88
// DialogueOff ;
11760: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11764: LD_EXP 5
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 235
// InGameOn ;
11776: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11780: LD_INT 1
11782: PPUSH
11783: LD_INT 7
11785: PPUSH
11786: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11790: LD_INT 93
11792: PPUSH
11793: LD_INT 91
11795: PPUSH
11796: CALL_OW 84
// wait ( 0 0$5 ) ;
11800: LD_INT 175
11802: PPUSH
11803: CALL_OW 67
// InGameOff ;
11807: CALL_OW 9
// end ;
11811: END
// every 12 12$0 trigger Difficulty > 1 do
11812: LD_OWVAR 67
11816: PUSH
11817: LD_INT 1
11819: GREATER
11820: IFFALSE 11844
11822: GO 11824
11824: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11825: LD_INT 24
11827: PPUSH
11828: LD_INT 24
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: LD_INT 53
11839: PPUSH
11840: CALL_OW 185
11844: END
// every 18 18$0 do
11845: GO 11847
11847: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11848: LD_EXP 14
11852: PPUSH
11853: LD_STRING D4-Har-1
11855: PPUSH
11856: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11860: LD_EXP 1
11864: PPUSH
11865: LD_STRING D4-JMM-1
11867: PPUSH
11868: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11872: LD_EXP 14
11876: PPUSH
11877: LD_STRING D4-Har-2
11879: PPUSH
11880: CALL_OW 94
// case Query ( Q1 ) of 1 :
11884: LD_STRING Q1
11886: PPUSH
11887: CALL_OW 97
11891: PUSH
11892: LD_INT 1
11894: DOUBLE
11895: EQUAL
11896: IFTRUE 11900
11898: GO 11959
11900: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11901: LD_EXP 1
11905: PPUSH
11906: LD_STRING D5-JMM-1
11908: PPUSH
11909: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11913: LD_EXP 14
11917: PPUSH
11918: LD_STRING D5-Har-1
11920: PPUSH
11921: CALL_OW 94
// timeToSupport = 10 10$0 ;
11925: LD_ADDR_EXP 28
11929: PUSH
11930: LD_INT 21000
11932: ST_TO_ADDR
// timerStatus = 2 ;
11933: LD_ADDR_EXP 29
11937: PUSH
11938: LD_INT 2
11940: ST_TO_ADDR
// startTimer = 1 ;
11941: LD_ADDR_EXP 30
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// harrAnswer = 1 ;
11949: LD_ADDR_EXP 26
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// end ; 2 :
11957: GO 12094
11959: LD_INT 2
11961: DOUBLE
11962: EQUAL
11963: IFTRUE 11967
11965: GO 12026
11967: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11968: LD_EXP 1
11972: PPUSH
11973: LD_STRING D5-JMM-2
11975: PPUSH
11976: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11980: LD_EXP 14
11984: PPUSH
11985: LD_STRING D5-Har-2
11987: PPUSH
11988: CALL_OW 94
// timeToSupport = 5 5$0 ;
11992: LD_ADDR_EXP 28
11996: PUSH
11997: LD_INT 10500
11999: ST_TO_ADDR
// timerStatus = 2 ;
12000: LD_ADDR_EXP 29
12004: PUSH
12005: LD_INT 2
12007: ST_TO_ADDR
// startTimer = 1 ;
12008: LD_ADDR_EXP 30
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// harrAnswer = 2 ;
12016: LD_ADDR_EXP 26
12020: PUSH
12021: LD_INT 2
12023: ST_TO_ADDR
// end ; 3 :
12024: GO 12094
12026: LD_INT 3
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12093
12034: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12035: LD_EXP 1
12039: PPUSH
12040: LD_STRING D5-JMM-3
12042: PPUSH
12043: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12047: LD_EXP 14
12051: PPUSH
12052: LD_STRING D5-Har-3
12054: PPUSH
12055: CALL_OW 94
// timeToSupport = 5 5$0 ;
12059: LD_ADDR_EXP 28
12063: PUSH
12064: LD_INT 10500
12066: ST_TO_ADDR
// timerStatus = 2 ;
12067: LD_ADDR_EXP 29
12071: PUSH
12072: LD_INT 2
12074: ST_TO_ADDR
// startTimer = 1 ;
12075: LD_ADDR_EXP 30
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// harrAnswer = 3 ;
12083: LD_ADDR_EXP 26
12087: PUSH
12088: LD_INT 3
12090: ST_TO_ADDR
// end ; end ;
12091: GO 12094
12093: POP
// end ;
12094: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12095: LD_EXP 29
12099: PUSH
12100: LD_INT 2
12102: EQUAL
12103: PUSH
12104: LD_EXP 28
12108: PUSH
12109: LD_INT 0
12111: EQUAL
12112: AND
12113: IFFALSE 12402
12115: GO 12117
12117: DISABLE
// begin timerStatus = 4 ;
12118: LD_ADDR_EXP 29
12122: PUSH
12123: LD_INT 4
12125: ST_TO_ADDR
// if harrAnswer = 1 then
12126: LD_EXP 26
12130: PUSH
12131: LD_INT 1
12133: EQUAL
12134: IFFALSE 12218
// begin PrepareHarrisonSupport ( 3 ) ;
12136: LD_INT 3
12138: PPUSH
12139: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12143: LD_INT 2100
12145: PPUSH
12146: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12150: LD_EXP 14
12154: PPUSH
12155: LD_STRING D7-Har-1
12157: PPUSH
12158: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12162: LD_STRING M2
12164: PPUSH
12165: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12169: LD_ADDR_EXP 27
12173: PUSH
12174: LD_INT 31500
12176: PUSH
12177: LD_INT 10500
12179: PUSH
12180: LD_INT 8400
12182: PUSH
12183: LD_INT 6300
12185: PUSH
12186: LD_INT 6300
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_OWVAR 67
12199: ARRAY
12200: PLUS
12201: ST_TO_ADDR
// startTimer = 1 ;
12202: LD_ADDR_EXP 30
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// timerStatus = 3 ;
12210: LD_ADDR_EXP 29
12214: PUSH
12215: LD_INT 3
12217: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12218: LD_EXP 26
12222: PUSH
12223: LD_INT 2
12225: EQUAL
12226: IFFALSE 12310
// begin PrepareHarrisonSupport ( 4 ) ;
12228: LD_INT 4
12230: PPUSH
12231: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12235: LD_INT 2100
12237: PPUSH
12238: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12242: LD_EXP 14
12246: PPUSH
12247: LD_STRING D7-Har-1
12249: PPUSH
12250: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12254: LD_STRING M2
12256: PPUSH
12257: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12261: LD_ADDR_EXP 27
12265: PUSH
12266: LD_INT 33600
12268: PUSH
12269: LD_INT 10500
12271: PUSH
12272: LD_INT 8400
12274: PUSH
12275: LD_INT 6300
12277: PUSH
12278: LD_INT 5250
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_OWVAR 67
12291: ARRAY
12292: PLUS
12293: ST_TO_ADDR
// startTimer = 1 ;
12294: LD_ADDR_EXP 30
12298: PUSH
12299: LD_INT 1
12301: ST_TO_ADDR
// timerStatus = 3 ;
12302: LD_ADDR_EXP 29
12306: PUSH
12307: LD_INT 3
12309: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12310: LD_EXP 26
12314: PUSH
12315: LD_INT 3
12317: EQUAL
12318: IFFALSE 12402
// begin PrepareHarrisonSupport ( 5 ) ;
12320: LD_INT 5
12322: PPUSH
12323: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12327: LD_INT 2100
12329: PPUSH
12330: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12334: LD_EXP 14
12338: PPUSH
12339: LD_STRING D7-Har-1
12341: PPUSH
12342: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12346: LD_STRING M2
12348: PPUSH
12349: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12353: LD_ADDR_EXP 27
12357: PUSH
12358: LD_INT 35700
12360: PUSH
12361: LD_INT 10500
12363: PUSH
12364: LD_INT 6300
12366: PUSH
12367: LD_INT 4200
12369: PUSH
12370: LD_INT 3150
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: LD_OWVAR 67
12383: ARRAY
12384: PLUS
12385: ST_TO_ADDR
// startTimer = 1 ;
12386: LD_ADDR_EXP 30
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// timerStatus = 3 ;
12394: LD_ADDR_EXP 29
12398: PUSH
12399: LD_INT 3
12401: ST_TO_ADDR
// end ; end ;
12402: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12403: LD_EXP 27
12407: PUSH
12408: LD_INT 8400
12410: LESSEQUAL
12411: PUSH
12412: LD_EXP 29
12416: PUSH
12417: LD_INT 3
12419: EQUAL
12420: AND
12421: IFFALSE 12453
12423: GO 12425
12425: DISABLE
// begin DialogueOn ;
12426: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12430: LD_EXP 14
12434: PPUSH
12435: LD_STRING D7a-Har-1
12437: PPUSH
12438: CALL_OW 94
// DialogueOff ;
12442: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12446: LD_STRING M2a
12448: PPUSH
12449: CALL_OW 337
// end ;
12453: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12454: LD_EXP 27
12458: PUSH
12459: LD_INT 0
12461: LESSEQUAL
12462: PUSH
12463: LD_EXP 29
12467: PUSH
12468: LD_INT 3
12470: EQUAL
12471: AND
12472: PUSH
12473: LD_EXP 40
12477: NOT
12478: AND
12479: IFFALSE 12618
12481: GO 12483
12483: DISABLE
12484: LD_INT 0
12486: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 69
12506: PUSH
12507: LD_EXP 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: DIFF
12515: ST_TO_ADDR
// saveDonaldson := 2 ;
12516: LD_ADDR_EXP 24
12520: PUSH
12521: LD_INT 2
12523: ST_TO_ADDR
// DialogueOn ;
12524: CALL_OW 6
// if IsOk ( Donaldson ) then
12528: LD_EXP 13
12532: PPUSH
12533: CALL_OW 302
12537: IFFALSE 12553
// SayRadio ( Harisson , D8-Har-1 ) else
12539: LD_EXP 14
12543: PPUSH
12544: LD_STRING D8-Har-1
12546: PPUSH
12547: CALL_OW 94
12551: GO 12565
// SayRadio ( Harisson , D8-Har-1a ) ;
12553: LD_EXP 14
12557: PPUSH
12558: LD_STRING D8-Har-1a
12560: PPUSH
12561: CALL_OW 94
// DialogueOff ;
12565: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_INT 4
12576: PPUSH
12577: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 88
12588: PPUSH
12589: LD_INT 89
12591: PPUSH
12592: CALL_OW 114
// reliefOfCommand := true ;
12596: LD_ADDR_EXP 48
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12604: LD_INT 350
12606: PPUSH
12607: CALL_OW 67
// YouLost ( LostCommand ) ;
12611: LD_STRING LostCommand
12613: PPUSH
12614: CALL_OW 104
// end ;
12618: PPOPN 1
12620: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12621: LD_INT 22
12623: PUSH
12624: LD_INT 6
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 21
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: PUSH
12650: LD_INT 0
12652: EQUAL
12653: PUSH
12654: LD_EXP 20
12658: PUSH
12659: LD_INT 0
12661: EQUAL
12662: AND
12663: PUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_INT 1
12671: EQUAL
12672: AND
12673: IFFALSE 12767
12675: GO 12677
12677: DISABLE
12678: LD_INT 0
12680: PPUSH
12681: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_INT 22
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 21
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 23
12709: PUSH
12710: LD_INT 1
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: ST_TO_ADDR
// for i in tmp do
12727: LD_ADDR_VAR 0 1
12731: PUSH
12732: LD_VAR 0 2
12736: PUSH
12737: FOR_IN
12738: IFFALSE 12765
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12740: LD_VAR 0 1
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: LD_INT 4
12750: PPUSH
12751: CALL_OW 12
12755: PPUSH
12756: LD_INT 500
12758: PPUSH
12759: CALL_OW 492
12763: GO 12737
12765: POP
12766: POP
// end ; end_of_file
12767: PPOPN 2
12769: END
// every 0 0$1 trigger AIEnable do
12770: LD_EXP 37
12774: IFFALSE 12868
12776: GO 12778
12778: DISABLE
// begin enable ;
12779: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12780: LD_INT 3
12782: PPUSH
12783: LD_INT 21
12785: PPUSH
12786: LD_INT 7
12788: PPUSH
12789: CALL 6002 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12793: LD_INT 3
12795: PPUSH
12796: LD_INT 8
12798: PPUSH
12799: LD_INT 7
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL 6306 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12809: LD_EXP 20
12813: PUSH
12814: LD_INT 2
12816: EQUAL
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 6
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PPUSH
12828: CALL_OW 69
12832: AND
12833: IFFALSE 12868
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12835: LD_INT 6
12837: PPUSH
12838: LD_EXP 21
12842: PPUSH
12843: LD_INT 6
12845: PPUSH
12846: CALL 6002 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12850: LD_INT 6
12852: PPUSH
12853: LD_INT 9
12855: PPUSH
12856: LD_INT 6
12858: PPUSH
12859: LD_EXP 22
12863: PPUSH
12864: CALL 6306 0 4
// end ; end ;
12868: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12869: LD_EXP 15
12873: PPUSH
12874: CALL_OW 310
12878: NOT
12879: PUSH
12880: LD_INT 21
12882: PPUSH
12883: CALL_OW 302
12887: AND
12888: PUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 255
12896: PUSH
12897: LD_INT 3
12899: EQUAL
12900: AND
12901: IFFALSE 12918
12903: GO 12905
12905: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12906: LD_EXP 15
12910: PPUSH
12911: LD_INT 21
12913: PPUSH
12914: CALL_OW 120
12918: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12919: LD_INT 22
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 55
12941: PUSH
12942: EMPTY
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: PPUSH
12950: CALL_OW 69
12954: PUSH
12955: LD_INT 0
12957: EQUAL
12958: PUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: PUSH
12981: LD_INT 21
12983: PPUSH
12984: CALL_OW 255
12988: PUSH
12989: LD_INT 3
12991: EQUAL
12992: AND
12993: PUSH
12994: LD_INT 21
12996: PPUSH
12997: CALL_OW 302
13001: AND
13002: IFFALSE 13214
13004: GO 13006
13006: DISABLE
// begin enable ;
13007: ENABLE
// if Difficulty = 1 then
13008: LD_OWVAR 67
13012: PUSH
13013: LD_INT 1
13015: EQUAL
13016: IFFALSE 13060
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13018: LD_INT 3
13020: PPUSH
13021: LD_INT 24
13023: PPUSH
13024: LD_OWVAR 67
13028: PUSH
13029: LD_INT 2
13031: PLUS
13032: PPUSH
13033: LD_INT 42
13035: PUSH
13036: LD_INT 44
13038: PUSH
13039: LD_INT 43
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: LD_INT 21
13055: PPUSH
13056: CALL 6820 0 7
// if Difficulty = 2 then
13060: LD_OWVAR 67
13064: PUSH
13065: LD_INT 2
13067: EQUAL
13068: IFFALSE 13135
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13070: LD_INT 3
13072: PPUSH
13073: LD_INT 24
13075: PPUSH
13076: LD_OWVAR 67
13080: PUSH
13081: LD_INT 2
13083: PLUS
13084: PPUSH
13085: LD_INT 44
13087: PUSH
13088: LD_INT 44
13090: PUSH
13091: LD_INT 43
13093: PUSH
13094: LD_INT 43
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 1
13121: PPUSH
13122: LD_INT 2
13124: PPUSH
13125: CALL_OW 12
13129: ARRAY
13130: PPUSH
13131: CALL 6820 0 7
// if Difficulty >= 3 then
13135: LD_OWVAR 67
13139: PUSH
13140: LD_INT 3
13142: GREATEREQUAL
13143: IFFALSE 13214
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13145: LD_INT 3
13147: PPUSH
13148: LD_INT 24
13150: PPUSH
13151: LD_OWVAR 67
13155: PUSH
13156: LD_INT 2
13158: PPUSH
13159: LD_INT 3
13161: PPUSH
13162: CALL_OW 12
13166: PLUS
13167: PPUSH
13168: LD_INT 44
13170: PUSH
13171: LD_INT 44
13173: PUSH
13174: LD_INT 43
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 23
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 2
13203: PPUSH
13204: CALL_OW 12
13208: ARRAY
13209: PPUSH
13210: CALL 6820 0 7
// end ;
13214: END
// every 0 0$1 do
13215: GO 13217
13217: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13218: LD_INT 3
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: CALL 5923 0 3
13231: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13232: LD_EXP 20
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: IFFALSE 13387
13242: GO 13244
13244: DISABLE
13245: LD_INT 0
13247: PPUSH
13248: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_INT 6
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 21
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 34
13276: PUSH
13277: LD_INT 51
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13294: LD_VAR 0 2
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: LD_EXP 21
13307: PPUSH
13308: CALL_OW 250
13312: PUSH
13313: LD_INT 5
13315: MINUS
13316: PPUSH
13317: LD_EXP 21
13321: PPUSH
13322: CALL_OW 251
13326: PUSH
13327: LD_INT 5
13329: MINUS
13330: PPUSH
13331: CALL_OW 111
// wait ( 0 0$5 ) ;
13335: LD_INT 175
13337: PPUSH
13338: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13342: LD_VAR 0 2
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PPUSH
13351: LD_INT 41
13353: PPUSH
13354: LD_INT 52
13356: PPUSH
13357: CALL_OW 177
// wait ( 0 0$40 ) ;
13361: LD_INT 1400
13363: PPUSH
13364: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13368: LD_VAR 0 2
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PPUSH
13377: LD_INT 41
13379: PPUSH
13380: LD_INT 44
13382: PPUSH
13383: CALL_OW 111
// end ;
13387: PPOPN 2
13389: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13390: LD_EXP 21
13394: PPUSH
13395: CALL_OW 274
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 275
13407: PUSH
13408: LD_INT 100
13410: GREATEREQUAL
13411: IFFALSE 13639
13413: GO 13415
13415: DISABLE
13416: LD_INT 0
13418: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 6
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_INT 4
13475: PPUSH
13476: LD_INT 39
13478: PPUSH
13479: LD_INT 37
13481: PPUSH
13482: LD_INT 3
13484: PPUSH
13485: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13489: LD_VAR 0 1
13493: PUSH
13494: LD_INT 1
13496: ARRAY
13497: PPUSH
13498: LD_INT 29
13500: PPUSH
13501: LD_INT 42
13503: PPUSH
13504: LD_INT 54
13506: PPUSH
13507: LD_INT 3
13509: PPUSH
13510: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: LD_INT 6
13525: PPUSH
13526: LD_INT 38
13528: PPUSH
13529: LD_INT 48
13531: PPUSH
13532: LD_INT 0
13534: PPUSH
13535: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PPUSH
13548: LD_INT 2
13550: PPUSH
13551: LD_INT 32
13553: PPUSH
13554: LD_INT 38
13556: PPUSH
13557: LD_INT 2
13559: PPUSH
13560: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13564: LD_VAR 0 1
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: LD_INT 26
13575: PPUSH
13576: LD_INT 39
13578: PPUSH
13579: LD_INT 55
13581: PPUSH
13582: LD_INT 3
13584: PPUSH
13585: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_INT 32
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 31
13606: PPUSH
13607: LD_INT 3
13609: PPUSH
13610: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_INT 31
13625: PPUSH
13626: LD_INT 50
13628: PPUSH
13629: LD_INT 51
13631: PPUSH
13632: LD_INT 4
13634: PPUSH
13635: CALL_OW 205
// end ;
13639: PPOPN 1
13641: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13642: LD_EXP 46
13646: IFFALSE 14207
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
13654: PPUSH
13655: PPUSH
// begin enable ;
13656: ENABLE
// if not ruMobile then
13657: LD_EXP 46
13661: NOT
13662: IFFALSE 13666
// exit ;
13664: GO 14207
// for i in ruMobile do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: LD_EXP 46
13675: PUSH
13676: FOR_IN
13677: IFFALSE 14205
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 302
13688: NOT
13689: PUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 255
13699: PUSH
13700: LD_INT 3
13702: NONEQUAL
13703: OR
13704: IFFALSE 13724
// begin ruMobile := ruMobile diff i ;
13706: LD_ADDR_EXP 46
13710: PUSH
13711: LD_EXP 46
13715: PUSH
13716: LD_VAR 0 1
13720: DIFF
13721: ST_TO_ADDR
// continue ;
13722: GO 13676
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 110
13733: NOT
13734: PUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 110
13744: PUSH
13745: LD_INT 0
13747: EQUAL
13748: OR
13749: IFFALSE 13864
// begin if GetFuel ( i ) < 50 then
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 261
13760: PUSH
13761: LD_INT 50
13763: LESS
13764: IFFALSE 13823
// begin ComMoveXY ( i , 106 , 88 ) ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13781: LD_INT 35
13783: PPUSH
13784: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_INT 106
13795: PPUSH
13796: LD_INT 88
13798: PPUSH
13799: CALL_OW 297
13803: PUSH
13804: LD_INT 4
13806: LESS
13807: IFFALSE 13781
// SetFuel ( i , 100 ) ;
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 100
13816: PPUSH
13817: CALL_OW 240
// end else
13821: GO 13864
// if not IsInArea ( i , ruParking ) then
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 25
13830: PPUSH
13831: CALL_OW 308
13835: NOT
13836: IFFALSE 13852
// ComMoveToArea ( i , ruParking ) else
13838: LD_VAR 0 1
13842: PPUSH
13843: LD_INT 25
13845: PPUSH
13846: CALL_OW 113
13850: GO 13864
// SetTag ( i , 101 ) ;
13852: LD_VAR 0 1
13856: PPUSH
13857: LD_INT 101
13859: PPUSH
13860: CALL_OW 109
// end ; if GetTag ( i ) = 101 then
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 110
13873: PUSH
13874: LD_INT 101
13876: EQUAL
13877: IFFALSE 14007
// begin if GetLives ( i ) < 650 then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 256
13888: PUSH
13889: LD_INT 650
13891: LESS
13892: IFFALSE 13984
// begin if not IsDrivenBy ( i ) then
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 311
13903: NOT
13904: IFFALSE 13908
// continue ;
13906: GO 13676
// mech := IsDrivenBy ( i ) ;
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_VAR 0 1
13917: PPUSH
13918: CALL_OW 311
13922: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13923: LD_VAR 0 2
13927: PPUSH
13928: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13946: LD_INT 35
13948: PPUSH
13949: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 256
13962: PUSH
13963: LD_INT 1000
13965: EQUAL
13966: IFFALSE 13946
// ComEnterUnit ( mech , i ) ;
13968: LD_VAR 0 2
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 120
// end else
13982: GO 14007
// if IsDrivenBy ( i ) then
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 311
13993: IFFALSE 14007
// SetTag ( i , 102 ) ;
13995: LD_VAR 0 1
13999: PPUSH
14000: LD_INT 102
14002: PPUSH
14003: CALL_OW 109
// end ; if GetTag ( i ) = 102 then
14007: LD_VAR 0 1
14011: PPUSH
14012: CALL_OW 110
14016: PUSH
14017: LD_INT 102
14019: EQUAL
14020: IFFALSE 14203
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: LD_INT 24
14029: PPUSH
14030: LD_INT 81
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 70
14044: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14045: LD_VAR 0 1
14049: PPUSH
14050: CALL_OW 256
14054: PUSH
14055: LD_INT 650
14057: LESS
14058: IFFALSE 14083
// begin ComStop ( i ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 141
// SetTag ( i , 0 ) ;
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL_OW 109
// continue ;
14081: GO 13676
// end ; if enemy then
14083: LD_VAR 0 3
14087: IFFALSE 14127
// begin if not HasTask ( i ) then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 314
14098: NOT
14099: IFFALSE 14125
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 74
14120: PPUSH
14121: CALL_OW 115
// end else
14125: GO 14203
// if ruMobile then
14127: LD_EXP 46
14131: IFFALSE 14203
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: LD_INT 81
14140: PUSH
14141: LD_INT 3
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// if enemy then
14153: LD_VAR 0 3
14157: IFFALSE 14203
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14159: LD_VAR 0 1
14163: PPUSH
14164: LD_INT 95
14166: PUSH
14167: LD_INT 74
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 67
14176: PUSH
14177: LD_INT 59
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 55
14186: PUSH
14187: LD_INT 41
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PPUSH
14199: CALL 81012 0 2
// end ; end ; end ;
14203: GO 13676
14205: POP
14206: POP
// end ; end_of_file
14207: PPOPN 3
14209: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14210: LD_INT 0
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14219: LD_ADDR_VAR 0 3
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 6
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 25
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 3
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14278: LD_ADDR_VAR 0 7
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_INT 6
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 21
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 25
14305: PUSH
14306: LD_INT 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 54
14315: PUSH
14316: EMPTY
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14330: LD_ADDR_VAR 0 4
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_INT 6
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 25
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: PPUSH
14370: CALL_OW 69
14374: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14375: LD_ADDR_VAR 0 6
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: LD_INT 6
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14420: LD_ADDR_VAR 0 8
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 6
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 34
14447: PUSH
14448: LD_INT 51
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 6
14477: EQUAL
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 266
14488: PUSH
14489: LD_INT 0
14491: EQUAL
14492: AND
14493: IFFALSE 14513
// begin ruPDepot = building ;
14495: LD_ADDR_EXP 21
14499: PUSH
14500: LD_VAR 0 1
14504: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14505: LD_ADDR_EXP 20
14509: PUSH
14510: LD_INT 1
14512: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 266
14522: PUSH
14523: LD_INT 4
14525: EQUAL
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 255
14536: PUSH
14537: LD_INT 6
14539: EQUAL
14540: AND
14541: IFFALSE 14574
// for i in tmpSold do
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_VAR 0 3
14552: PUSH
14553: FOR_IN
14554: IFFALSE 14572
// ComEnterUnit ( i , building ) ;
14556: LD_VAR 0 2
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 120
14570: GO 14553
14572: POP
14573: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 266
14583: PUSH
14584: LD_INT 6
14586: EQUAL
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 6
14600: EQUAL
14601: AND
14602: IFFALSE 14660
// begin for i in tmpSci do
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_VAR 0 6
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14633
// ComEnterUnit ( i , building ) ;
14617: LD_VAR 0 2
14621: PPUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 120
14631: GO 14614
14633: POP
14634: POP
// ResAllTechs ( 6 , building , 3 ) ;
14635: LD_INT 6
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_INT 3
14645: PPUSH
14646: CALL 5923 0 3
// ruPLab = building ;
14650: LD_ADDR_EXP 22
14654: PUSH
14655: LD_VAR 0 1
14659: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 266
14669: PUSH
14670: LD_INT 2
14672: EQUAL
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 255
14683: PUSH
14684: LD_INT 6
14686: EQUAL
14687: AND
14688: IFFALSE 14739
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14690: LD_ADDR_VAR 0 5
14694: PUSH
14695: LD_VAR 0 8
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: PPUSH
14704: CALL_OW 313
14708: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14709: LD_VAR 0 5
14713: PPUSH
14714: CALL_OW 121
// wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 266
14748: PUSH
14749: LD_INT 32
14751: EQUAL
14752: PUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 255
14762: PUSH
14763: LD_INT 6
14765: EQUAL
14766: AND
14767: IFFALSE 14819
// begin ComPlaceWeapon ( building , 42 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 42
14776: PPUSH
14777: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14781: LD_VAR 0 7
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 122
// wait ( 0 0$1 ) ;
14794: LD_INT 35
14796: PPUSH
14797: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14801: LD_VAR 0 7
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14819: LD_VAR 0 1
14823: PPUSH
14824: CALL_OW 266
14828: PUSH
14829: LD_INT 31
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 255
14842: PUSH
14843: LD_INT 6
14845: EQUAL
14846: AND
14847: IFFALSE 14913
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14849: LD_VAR 0 7
14853: PUSH
14854: LD_INT 2
14856: ARRAY
14857: PPUSH
14858: CALL_OW 122
// wait ( 0 0$1 ) ;
14862: LD_INT 35
14864: PPUSH
14865: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14869: LD_VAR 0 7
14873: PUSH
14874: LD_INT 2
14876: ARRAY
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14887: LD_VAR 0 4
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PPUSH
14896: LD_EXP 21
14900: PPUSH
14901: CALL_OW 120
// baseReadyToBuild = 2 ;
14905: LD_ADDR_EXP 20
14909: PUSH
14910: LD_INT 2
14912: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 266
14922: PUSH
14923: LD_INT 32
14925: EQUAL
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 255
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: AND
14941: PUSH
14942: LD_EXP 32
14946: PUSH
14947: LD_INT 0
14949: EQUAL
14950: AND
14951: IFFALSE 15196
// begin bunkerDialog = 1 ;
14953: LD_ADDR_EXP 32
14957: PUSH
14958: LD_INT 1
14960: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14961: LD_EXP 11
14965: PPUSH
14966: CALL_OW 302
14970: IFFALSE 14986
// Say ( Claptopn , D11-Eng1-1 ) else
14972: LD_EXP 11
14976: PPUSH
14977: LD_STRING D11-Eng1-1
14979: PPUSH
14980: CALL_OW 88
14984: GO 15182
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14986: LD_INT 22
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 26
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 69
15036: PUSH
15037: LD_EXP 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: PUSH
15045: LD_INT 0
15047: GREATER
15048: DIFF
15049: IFFALSE 15123
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15051: LD_INT 22
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 21
15063: PUSH
15064: LD_INT 1
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 26
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_EXP 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: DIFF
15110: PPUSH
15111: LD_STRING D11-Eng1-1
15113: PPUSH
15114: LD_STRING D11-Eng1-1
15116: PPUSH
15117: CALL 4570 0 3
15121: GO 15182
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15123: LD_INT 22
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 21
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 26
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: LD_EXP 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: DIFF
15171: PPUSH
15172: LD_STRING D11-Eng1-1
15174: PPUSH
15175: LD_STRING D11-Eng1-1
15177: PPUSH
15178: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15182: LD_EXP 33
15186: PUSH
15187: LD_INT 0
15189: EQUAL
15190: IFFALSE 15196
// EnergyDialog ;
15192: CALL 4975 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 266
15205: PUSH
15206: LD_INT 29
15208: EQUAL
15209: PUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 255
15219: PUSH
15220: LD_INT 1
15222: EQUAL
15223: AND
15224: IFFALSE 15234
// buildOil = 1 ;
15226: LD_ADDR_EXP 34
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 266
15243: PUSH
15244: LD_INT 26
15246: EQUAL
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 255
15257: PUSH
15258: LD_INT 1
15260: EQUAL
15261: AND
15262: IFFALSE 15272
// buildPower = 1 ;
15264: LD_ADDR_EXP 35
15268: PUSH
15269: LD_INT 1
15271: ST_TO_ADDR
// end ;
15272: PPOPN 8
15274: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 266
15284: PUSH
15285: LD_INT 3
15287: EQUAL
15288: PUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL_OW 255
15298: PUSH
15299: LD_INT 1
15301: EQUAL
15302: AND
15303: PUSH
15304: LD_EXP 31
15308: PUSH
15309: LD_INT 0
15311: EQUAL
15312: AND
15313: IFFALSE 15661
// begin factoryDialog = 1 ;
15315: LD_ADDR_EXP 31
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15323: LD_INT 47
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 321
15333: PUSH
15334: LD_INT 1
15336: EQUAL
15337: PUSH
15338: LD_INT 45
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 321
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: AND
15353: IFFALSE 15661
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15355: LD_INT 22
15357: PUSH
15358: LD_INT 1
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 21
15367: PUSH
15368: LD_INT 3
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 24
15387: PUSH
15388: LD_INT 1000
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15414: LD_EXP 1
15418: PPUSH
15419: LD_STRING D9a-JMM-1
15421: PPUSH
15422: CALL_OW 88
// if IsOK ( Campell ) then
15426: LD_EXP 12
15430: PPUSH
15431: CALL_OW 302
15435: IFFALSE 15451
// Say ( Campell , D9a-Mech1-1 ) else
15437: LD_EXP 12
15441: PPUSH
15442: LD_STRING D9a-Mech1-1
15444: PPUSH
15445: CALL_OW 88
15449: GO 15647
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15451: LD_INT 22
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 21
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 26
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: PUSH
15502: LD_EXP 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: PUSH
15510: LD_INT 0
15512: GREATER
15513: DIFF
15514: IFFALSE 15588
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15516: LD_INT 22
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 21
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 25
15538: PUSH
15539: LD_INT 3
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 26
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 69
15566: PUSH
15567: LD_EXP 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: DIFF
15575: PPUSH
15576: LD_STRING D9a-Mech1-1
15578: PPUSH
15579: LD_STRING D9a-Mech1-1
15581: PPUSH
15582: CALL 4570 0 3
15586: GO 15647
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15588: LD_INT 22
15590: PUSH
15591: LD_INT 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: PUSH
15628: LD_EXP 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: DIFF
15636: PPUSH
15637: LD_STRING D9a-Mech1-1
15639: PPUSH
15640: LD_STRING D9a-Mech1-1
15642: PPUSH
15643: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15647: LD_EXP 33
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: IFFALSE 15661
// EnergyDialog ;
15657: CALL 4975 0 0
// end ; end ; end ;
15661: PPOPN 1
15663: END
// on UnitDestroyed ( unit ) do var mech ;
15664: LD_INT 0
15666: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL 35823 0 1
// if unit = JMM then
15676: LD_VAR 0 1
15680: PUSH
15681: LD_EXP 1
15685: EQUAL
15686: IFFALSE 15695
// YouLost ( JMM ) ;
15688: LD_STRING JMM
15690: PPUSH
15691: CALL_OW 104
// if unit = ambdept0 then
15695: LD_VAR 0 1
15699: PUSH
15700: LD_INT 4
15702: EQUAL
15703: IFFALSE 15712
// YouLost ( Base ) ;
15705: LD_STRING Base
15707: PPUSH
15708: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and IsInArea ( unit , ruDefArea ) then
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 255
15721: PUSH
15722: LD_INT 1
15724: EQUAL
15725: PUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 247
15735: PUSH
15736: LD_INT 1
15738: EQUAL
15739: AND
15740: PUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_INT 24
15748: PPUSH
15749: CALL_OW 308
15753: AND
15754: IFFALSE 15764
// honor := false ;
15756: LD_ADDR_EXP 39
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// if unit in ruMobile then
15764: LD_VAR 0 1
15768: PUSH
15769: LD_EXP 46
15773: IN
15774: IFFALSE 15792
// ruMobile = ruMobile diff ruMobile ;
15776: LD_ADDR_EXP 46
15780: PUSH
15781: LD_EXP 46
15785: PUSH
15786: LD_EXP 46
15790: DIFF
15791: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 247
15801: PUSH
15802: LD_INT 1
15804: EQUAL
15805: PUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 255
15815: PUSH
15816: LD_INT 1
15818: EQUAL
15819: AND
15820: IFFALSE 15836
// lostCounter = lostCounter + 1 ;
15822: LD_ADDR_EXP 38
15826: PUSH
15827: LD_EXP 38
15831: PUSH
15832: LD_INT 1
15834: PLUS
15835: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15836: LD_EXP 43
15840: PUSH
15841: LD_INT 24
15843: PPUSH
15844: CALL_OW 313
15848: PUSH
15849: LD_INT 6
15851: LESS
15852: AND
15853: PUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 257
15863: PUSH
15864: LD_INT 3
15866: EQUAL
15867: AND
15868: PUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 255
15878: PUSH
15879: LD_INT 3
15881: EQUAL
15882: AND
15883: PUSH
15884: LD_INT 24
15886: PPUSH
15887: CALL_OW 302
15891: AND
15892: PUSH
15893: LD_INT 24
15895: PPUSH
15896: CALL_OW 255
15900: PUSH
15901: LD_INT 3
15903: EQUAL
15904: AND
15905: IFFALSE 16034
// begin ruMech := ruMech - 1 ;
15907: LD_ADDR_EXP 43
15911: PUSH
15912: LD_EXP 43
15916: PUSH
15917: LD_INT 1
15919: MINUS
15920: ST_TO_ADDR
// if ruMech = 0 then
15921: LD_EXP 43
15925: PUSH
15926: LD_INT 0
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 16034
// wait ( 0 0$40 ) ;
15933: LD_INT 1400
15935: PPUSH
15936: CALL_OW 67
// uc_side = 3 ;
15940: LD_ADDR_OWVAR 20
15944: PUSH
15945: LD_INT 3
15947: ST_TO_ADDR
// uc_nation = 3 ;
15948: LD_ADDR_OWVAR 21
15952: PUSH
15953: LD_INT 3
15955: ST_TO_ADDR
// hc_gallery :=  ;
15956: LD_ADDR_OWVAR 33
15960: PUSH
15961: LD_STRING 
15963: ST_TO_ADDR
// hc_name :=  ;
15964: LD_ADDR_OWVAR 26
15968: PUSH
15969: LD_STRING 
15971: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15972: LD_INT 0
15974: PPUSH
15975: LD_EXP 16
15979: PPUSH
15980: LD_EXP 17
15984: PPUSH
15985: CALL_OW 12
15989: PPUSH
15990: CALL_OW 383
// mech := CreateHuman ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: CALL_OW 44
16003: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
16004: LD_VAR 0 2
16008: PPUSH
16009: LD_INT 124
16011: PPUSH
16012: LD_INT 97
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16022: LD_VAR 0 2
16026: PPUSH
16027: LD_INT 24
16029: PPUSH
16030: CALL_OW 120
// end ; end ;
16034: PPOPN 2
16036: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16037: LD_INT 0
16039: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 35943 0 2
// if GetSide ( vehicle ) = 1 then
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 255
16063: PUSH
16064: LD_INT 1
16066: EQUAL
16067: IFFALSE 16083
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16069: LD_ADDR_EXP 42
16073: PUSH
16074: LD_EXP 42
16078: PUSH
16079: LD_INT 1
16081: PLUS
16082: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 255
16092: PUSH
16093: LD_INT 3
16095: EQUAL
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 264
16106: PUSH
16107: LD_INT 42
16109: PUSH
16110: LD_INT 43
16112: PUSH
16113: LD_INT 44
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: IN
16121: AND
16122: IFFALSE 16140
// ruMobile := ruMobile union vehicle ;
16124: LD_ADDR_EXP 46
16128: PUSH
16129: LD_EXP 46
16133: PUSH
16134: LD_VAR 0 1
16138: UNION
16139: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 264
16149: PUSH
16150: LD_INT 53
16152: EQUAL
16153: IFFALSE 16289
// begin uc_side = 3 ;
16155: LD_ADDR_OWVAR 20
16159: PUSH
16160: LD_INT 3
16162: ST_TO_ADDR
// uc_nation = 3 ;
16163: LD_ADDR_OWVAR 21
16167: PUSH
16168: LD_INT 3
16170: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16171: LD_INT 0
16173: PPUSH
16174: LD_EXP 17
16178: PPUSH
16179: CALL_OW 383
// driver := CreateHuman ;
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: CALL_OW 44
16192: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16193: LD_VAR 0 3
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: LD_INT 21
16214: PPUSH
16215: CALL 5191 0 2
// repeat wait ( 0 0$1 ) ;
16219: LD_INT 35
16221: PPUSH
16222: CALL_OW 67
// until not HasTask ( vehicle ) ;
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL_OW 314
16235: NOT
16236: IFFALSE 16219
// driver := IsDrivenBy ( vehicle ) ;
16238: LD_ADDR_VAR 0 3
16242: PUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 311
16252: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16253: LD_VAR 0 3
16257: PPUSH
16258: LD_INT 104
16260: PPUSH
16261: LD_INT 73
16263: PPUSH
16264: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16268: LD_VAR 0 3
16272: PPUSH
16273: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16277: LD_VAR 0 3
16281: PPUSH
16282: LD_INT 24
16284: PPUSH
16285: CALL_OW 180
// end ; end ;
16289: PPOPN 3
16291: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 255
16301: PUSH
16302: LD_INT 3
16304: EQUAL
16305: PUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 247
16315: PUSH
16316: LD_INT 2
16318: EQUAL
16319: AND
16320: PUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 264
16330: PUSH
16331: LD_INT 42
16333: PUSH
16334: LD_INT 43
16336: PUSH
16337: LD_INT 44
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: IN
16345: AND
16346: IFFALSE 16395
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16348: LD_INT 24
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 265
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 262
16370: PPUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 263
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 264
16390: PPUSH
16391: CALL_OW 185
// end ;
16395: PPOPN 1
16397: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 255
16407: PUSH
16408: LD_INT 3
16410: EQUAL
16411: PUSH
16412: LD_VAR 0 2
16416: PPUSH
16417: CALL_OW 255
16421: PUSH
16422: LD_INT 3
16424: EQUAL
16425: AND
16426: PUSH
16427: LD_INT 24
16429: PPUSH
16430: CALL_OW 302
16434: AND
16435: PUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 302
16445: NOT
16446: AND
16447: IFFALSE 16461
// ComEnterUnit ( human , rubfact0 ) ;
16449: LD_VAR 0 2
16453: PPUSH
16454: LD_INT 24
16456: PPUSH
16457: CALL_OW 120
// end ;
16461: PPOPN 2
16463: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 5 then
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 255
16473: PUSH
16474: LD_INT 5
16476: EQUAL
16477: IFFALSE 16551
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 125
16486: PPUSH
16487: LD_INT 97
16489: PPUSH
16490: CALL_OW 111
// wait ( 0 0$1 ) ;
16494: LD_INT 35
16496: PPUSH
16497: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 301
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: LD_INT 125
16518: PPUSH
16519: LD_INT 97
16521: PPUSH
16522: CALL_OW 307
16526: OR
16527: IFFALSE 16479
// if IsDead ( driver ) then
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 301
16538: IFFALSE 16542
// exit ;
16540: GO 16551
// RemoveUnit ( driver ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 64
// end ; end ;
16551: PPOPN 4
16553: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16554: LD_VAR 0 1
16558: PUSH
16559: LD_INT 24
16561: EQUAL
16562: PUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: CALL_OW 256
16572: PUSH
16573: LD_INT 1000
16575: LESS
16576: AND
16577: IFFALSE 16591
// SetLives ( un , 1000 ) ;
16579: LD_VAR 0 2
16583: PPUSH
16584: LD_INT 1000
16586: PPUSH
16587: CALL_OW 234
// end ;
16591: PPOPN 2
16593: END
// on Command ( comandid ) do var i , j , tmp ;
16594: LD_INT 0
16596: PPUSH
16597: PPUSH
16598: PPUSH
// begin SOS_Command ( comandid ) ;
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL 35927 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16608: LD_INT 22
16610: PUSH
16611: LD_INT 4
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: NOT
16623: IFFALSE 16627
// exit ;
16625: GO 16792
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16627: LD_ADDR_VAR 0 2
16631: PUSH
16632: LD_INT 22
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 21
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 21
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: PUSH
16679: FOR_IN
16680: IFFALSE 16790
// begin if GetTaskList ( i ) > 0 then
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 437
16691: PUSH
16692: LD_INT 0
16694: GREATER
16695: IFFALSE 16788
// begin for j = 1 to GetTaskList ( i ) do
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: DOUBLE
16703: LD_INT 1
16705: DEC
16706: ST_TO_ADDR
16707: LD_VAR 0 2
16711: PPUSH
16712: CALL_OW 437
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16786
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16720: LD_ADDR_VAR 0 4
16724: PUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: CALL_OW 437
16734: PUSH
16735: LD_VAR 0 3
16739: ARRAY
16740: PUSH
16741: LD_INT 4
16743: ARRAY
16744: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16745: LD_VAR 0 4
16749: PPUSH
16750: CALL_OW 255
16754: PUSH
16755: LD_INT 4
16757: EQUAL
16758: PUSH
16759: LD_VAR 0 4
16763: PPUSH
16764: CALL_OW 255
16768: PUSH
16769: LD_INT 0
16771: EQUAL
16772: OR
16773: IFFALSE 16784
// ComStop ( i ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 141
// end ;
16784: GO 16717
16786: POP
16787: POP
// end ; end ;
16788: GO 16679
16790: POP
16791: POP
// end ;
16792: PPOPN 4
16794: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16795: LD_VAR 0 1
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 23
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: IN
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: LD_INT 1
16848: EQUAL
16849: AND
16850: IFFALSE 16856
// JMMTraitor ;
16852: CALL 9314 0 0
// end ; end_of_file
16856: PPOPN 3
16858: END
// every 10 10$0 do
16859: GO 16861
16861: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16862: LD_INT 5
16864: PPUSH
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 2
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 3
16876: PUSH
16877: LD_INT 4
16879: PUSH
16880: LD_INT 4
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: LD_OWVAR 67
16893: ARRAY
16894: PLUS
16895: PPUSH
16896: LD_INT 0
16898: PPUSH
16899: LD_EXP 16
16903: PPUSH
16904: LD_EXP 17
16908: PPUSH
16909: CALL_OW 12
16913: PPUSH
16914: LD_INT 4
16916: PPUSH
16917: LD_INT 14
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: LD_INT 2
16925: PPUSH
16926: CALL 6932 0 9
16930: END
// every 20 20$0 do
16931: GO 16933
16933: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16934: LD_INT 5
16936: PPUSH
16937: LD_INT 3
16939: PPUSH
16940: LD_INT 4
16942: PUSH
16943: LD_INT 2
16945: PUSH
16946: LD_INT 3
16948: PUSH
16949: LD_INT 4
16951: PUSH
16952: LD_INT 5
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: LD_OWVAR 67
16965: ARRAY
16966: PLUS
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: LD_EXP 16
16975: PPUSH
16976: LD_EXP 17
16980: PPUSH
16981: CALL_OW 12
16985: PPUSH
16986: LD_INT 4
16988: PPUSH
16989: LD_INT 14
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL 6932 0 9
17002: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
// begin hex := [ 123 , 95 ] ;
17013: LD_ADDR_VAR 0 4
17017: PUSH
17018: LD_INT 123
17020: PUSH
17021: LD_INT 95
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: ST_TO_ADDR
// tmp := [ ] ;
17028: LD_ADDR_VAR 0 5
17032: PUSH
17033: EMPTY
17034: ST_TO_ADDR
// if Difficulty > 1 then
17035: LD_OWVAR 67
17039: PUSH
17040: LD_INT 1
17042: GREATER
17043: IFFALSE 17053
// specAttack := true ;
17045: LD_ADDR_EXP 47
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: DOUBLE
17059: LD_INT 1
17061: DEC
17062: ST_TO_ADDR
17063: LD_INT 4
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 7
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_OWVAR 67
17085: ARRAY
17086: PUSH
17087: FOR_TO
17088: IFFALSE 17390
// begin uc_side := 5 ;
17090: LD_ADDR_OWVAR 20
17094: PUSH
17095: LD_INT 5
17097: ST_TO_ADDR
// uc_nation := 3 ;
17098: LD_ADDR_OWVAR 21
17102: PUSH
17103: LD_INT 3
17105: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
17106: LD_ADDR_OWVAR 37
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 22
17116: PUSH
17117: LD_INT 23
17119: PUSH
17120: LD_INT 24
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: LD_VAR 0 1
17133: PUSH
17134: LD_OWVAR 67
17138: MOD
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ARRAY
17144: ST_TO_ADDR
// vc_engine := engine_combustion ;
17145: LD_ADDR_OWVAR 39
17149: PUSH
17150: LD_INT 1
17152: ST_TO_ADDR
// vc_control := control_manual ;
17153: LD_ADDR_OWVAR 38
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
17161: LD_ADDR_OWVAR 40
17165: PUSH
17166: LD_INT 42
17168: PUSH
17169: LD_INT 43
17171: PUSH
17172: LD_INT 44
17174: PUSH
17175: LD_INT 44
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: LD_VAR 0 1
17188: PUSH
17189: LD_OWVAR 67
17193: MOD
17194: PUSH
17195: LD_INT 1
17197: PLUS
17198: ARRAY
17199: ST_TO_ADDR
// veh := CreateVehicle ;
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: CALL_OW 45
17209: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 5
17217: PPUSH
17218: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17222: LD_INT 35
17224: PPUSH
17225: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17229: LD_VAR 0 4
17233: PUSH
17234: LD_INT 1
17236: ARRAY
17237: PPUSH
17238: LD_VAR 0 4
17242: PUSH
17243: LD_INT 2
17245: ARRAY
17246: PPUSH
17247: CALL_OW 428
17251: PUSH
17252: LD_INT 0
17254: EQUAL
17255: IFFALSE 17222
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_VAR 0 4
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PPUSH
17271: LD_VAR 0 4
17275: PUSH
17276: LD_INT 2
17278: ARRAY
17279: PPUSH
17280: LD_INT 0
17282: PPUSH
17283: CALL_OW 48
// uc_side := 5 ;
17287: LD_ADDR_OWVAR 20
17291: PUSH
17292: LD_INT 5
17294: ST_TO_ADDR
// uc_nation := 3 ;
17295: LD_ADDR_OWVAR 21
17299: PUSH
17300: LD_INT 3
17302: ST_TO_ADDR
// InitHC_All ( ) ;
17303: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17307: LD_INT 0
17309: PPUSH
17310: LD_INT 2
17312: PUSH
17313: LD_OWVAR 67
17317: PLUS
17318: PPUSH
17319: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17323: CALL_OW 44
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 101
17344: PPUSH
17345: LD_INT 77
17347: PPUSH
17348: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17352: LD_ADDR_VAR 0 5
17356: PUSH
17357: LD_VAR 0 5
17361: PPUSH
17362: LD_VAR 0 5
17366: PUSH
17367: LD_INT 1
17369: PLUS
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: CALL_OW 1
17380: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17381: LD_INT 105
17383: PPUSH
17384: CALL_OW 67
// end ;
17388: GO 17087
17390: POP
17391: POP
// repeat wait ( 0 0$1 ) ;
17392: LD_INT 35
17394: PPUSH
17395: CALL_OW 67
// for i in tmp do
17399: LD_ADDR_VAR 0 1
17403: PUSH
17404: LD_VAR 0 5
17408: PUSH
17409: FOR_IN
17410: IFFALSE 17478
// if not IsOk ( i ) then
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 302
17421: NOT
17422: IFFALSE 17442
// tmp := tmp diff i else
17424: LD_ADDR_VAR 0 5
17428: PUSH
17429: LD_VAR 0 5
17433: PUSH
17434: LD_VAR 0 1
17438: DIFF
17439: ST_TO_ADDR
17440: GO 17476
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17442: LD_VAR 0 1
17446: PPUSH
17447: LD_INT 22
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 74
17471: PPUSH
17472: CALL_OW 115
17476: GO 17409
17478: POP
17479: POP
// until not tmp ;
17480: LD_VAR 0 5
17484: NOT
17485: IFFALSE 17392
// end ;
17487: PPOPN 5
17489: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17490: LD_EXP 47
17494: IFFALSE 17872
17496: GO 17498
17498: DISABLE
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
// begin wait ( 0 0$20 ) ;
17505: LD_INT 700
17507: PPUSH
17508: CALL_OW 67
// uc_side := 5 ;
17512: LD_ADDR_OWVAR 20
17516: PUSH
17517: LD_INT 5
17519: ST_TO_ADDR
// uc_nation := 3 ;
17520: LD_ADDR_OWVAR 21
17524: PUSH
17525: LD_INT 3
17527: ST_TO_ADDR
// InitHc ;
17528: CALL_OW 19
// hc_importance := 0 ;
17532: LD_ADDR_OWVAR 32
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// tmp := [ ] ;
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: EMPTY
17546: ST_TO_ADDR
// InitHC_All ( ) ;
17547: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17551: LD_INT 0
17553: PPUSH
17554: LD_INT 2
17556: PPUSH
17557: LD_INT 6
17559: PPUSH
17560: CALL_OW 380
// eng := CreateHuman ;
17564: LD_ADDR_VAR 0 4
17568: PUSH
17569: CALL_OW 44
17573: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17574: LD_VAR 0 4
17578: PPUSH
17579: LD_INT 78
17581: PPUSH
17582: LD_INT 2
17584: PPUSH
17585: LD_INT 4
17587: PPUSH
17588: LD_INT 0
17590: PPUSH
17591: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_INT 3
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: LD_INT 4
17613: PUSH
17614: LD_INT 5
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: LD_OWVAR 67
17627: ARRAY
17628: PUSH
17629: FOR_TO
17630: IFFALSE 17719
// begin InitHC_All ( ) ;
17632: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17636: LD_INT 0
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: LD_INT 4
17644: PUSH
17645: LD_INT 5
17647: PUSH
17648: LD_INT 6
17650: PUSH
17651: LD_INT 6
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: LD_OWVAR 67
17664: ARRAY
17665: PPUSH
17666: CALL_OW 380
// un := CreateHuman ;
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: CALL_OW 44
17679: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 78
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: LD_INT 4
17693: PPUSH
17694: LD_INT 0
17696: PPUSH
17697: CALL_OW 50
// tmp := tmp ^ un ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_VAR 0 2
17710: PUSH
17711: LD_VAR 0 1
17715: ADD
17716: ST_TO_ADDR
// end ;
17717: GO 17629
17719: POP
17720: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17721: LD_VAR 0 2
17725: PPUSH
17726: LD_INT 49
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: CALL_OW 111
// wait ( 0 0$2 ) ;
17736: LD_INT 70
17738: PPUSH
17739: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17743: LD_VAR 0 4
17747: PPUSH
17748: LD_INT 49
17750: PPUSH
17751: LD_INT 3
17753: PPUSH
17754: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17758: LD_VAR 0 4
17762: PPUSH
17763: LD_INT 4
17765: PPUSH
17766: CALL_OW 227
// wait ( 0 0$10 ) ;
17770: LD_INT 350
17772: PPUSH
17773: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17777: LD_INT 35
17779: PPUSH
17780: CALL_OW 67
// for i in tmp do
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: LD_VAR 0 2
17793: PUSH
17794: FOR_IN
17795: IFFALSE 17863
// if not IsOk ( i ) then
17797: LD_VAR 0 3
17801: PPUSH
17802: CALL_OW 302
17806: NOT
17807: IFFALSE 17827
// tmp := tmp diff i else
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 3
17823: DIFF
17824: ST_TO_ADDR
17825: GO 17861
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17827: LD_VAR 0 3
17831: PPUSH
17832: LD_INT 22
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 69
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: CALL_OW 74
17856: PPUSH
17857: CALL_OW 115
17861: GO 17794
17863: POP
17864: POP
// until not tmp ;
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17777
// end ; end_of_file
17872: PPOPN 4
17874: END
// every 0 0$1 trigger startTimer = 1 do
17875: LD_EXP 30
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 18013
17885: GO 17887
17887: DISABLE
// begin enable ;
17888: ENABLE
// if timerStatus = 1 then
17889: LD_EXP 29
17893: PUSH
17894: LD_INT 1
17896: EQUAL
17897: IFFALSE 17930
// begin timeToSupport = timeToSupport - 0 0$01 ;
17899: LD_ADDR_EXP 28
17903: PUSH
17904: LD_EXP 28
17908: PUSH
17909: LD_INT 35
17911: MINUS
17912: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17913: LD_ADDR_OWVAR 47
17917: PUSH
17918: LD_STRING #Am04-1
17920: PUSH
17921: LD_EXP 28
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: ST_TO_ADDR
// end ; if timerStatus = 2 then
17930: LD_EXP 29
17934: PUSH
17935: LD_INT 2
17937: EQUAL
17938: IFFALSE 17971
// begin timeToSupport = timeToSupport - 0 0$01 ;
17940: LD_ADDR_EXP 28
17944: PUSH
17945: LD_EXP 28
17949: PUSH
17950: LD_INT 35
17952: MINUS
17953: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17954: LD_ADDR_OWVAR 47
17958: PUSH
17959: LD_STRING #Am04-2
17961: PUSH
17962: LD_EXP 28
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: ST_TO_ADDR
// end ; if timerStatus = 3 then
17971: LD_EXP 29
17975: PUSH
17976: LD_INT 3
17978: EQUAL
17979: IFFALSE 17995
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17981: LD_ADDR_EXP 27
17985: PUSH
17986: LD_EXP 27
17990: PUSH
17991: LD_INT 35
17993: MINUS
17994: ST_TO_ADDR
// if timerStatus = 4 then
17995: LD_EXP 29
17999: PUSH
18000: LD_INT 4
18002: EQUAL
18003: IFFALSE 18013
// display_strings =  ;
18005: LD_ADDR_OWVAR 47
18009: PUSH
18010: LD_STRING 
18012: ST_TO_ADDR
// end ; end_of_file
18013: END
// every 0 0$1 trigger not reliefOfCommand and IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
18014: LD_EXP 48
18018: NOT
18019: PUSH
18020: LD_EXP 15
18024: PPUSH
18025: CALL_OW 301
18029: AND
18030: PUSH
18031: LD_INT 22
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 21
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: PUSH
18060: LD_INT 14
18062: PUSH
18063: LD_INT 13
18065: PUSH
18066: LD_INT 12
18068: PUSH
18069: LD_INT 11
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_OWVAR 67
18082: ARRAY
18083: LESS
18084: AND
18085: IFFALSE 18671
18087: GO 18089
18089: DISABLE
18090: LD_INT 0
18092: PPUSH
18093: PPUSH
18094: PPUSH
// begin AIEnable = 0 ;
18095: LD_ADDR_EXP 37
18099: PUSH
18100: LD_INT 0
18102: ST_TO_ADDR
// escapeAvalaible = 1 ;
18103: LD_ADDR_EXP 40
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// Video ( true ) ;
18111: LD_INT 1
18113: PPUSH
18114: CALL 78380 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18118: LD_INT 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_INT 1
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18134: LD_INT 6
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18150: LD_INT 5
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: LD_INT 1
18158: PPUSH
18159: LD_INT 0
18161: PPUSH
18162: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18166: LD_INT 3
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18176: LD_INT 97
18178: PPUSH
18179: LD_INT 91
18181: PPUSH
18182: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18186: LD_INT 22
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PPUSH
18215: CALL_OW 121
// wait ( 0 0$01 ) ;
18219: LD_INT 35
18221: PPUSH
18222: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PPUSH
18255: LD_INT 124
18257: PPUSH
18258: LD_INT 98
18260: PPUSH
18261: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18265: LD_INT 22
18267: PUSH
18268: LD_INT 5
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PPUSH
18289: CALL_OW 69
18293: PPUSH
18294: CALL_OW 121
// wait ( 0 0$01 ) ;
18298: LD_INT 35
18300: PPUSH
18301: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18305: LD_INT 22
18307: PUSH
18308: LD_INT 5
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: PPUSH
18334: LD_INT 124
18336: PPUSH
18337: LD_INT 98
18339: PPUSH
18340: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18344: LD_INT 22
18346: PUSH
18347: LD_INT 6
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 21
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: PPUSH
18373: CALL_OW 121
// wait ( 0 0$01 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18384: LD_INT 22
18386: PUSH
18387: LD_INT 6
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 21
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PPUSH
18408: CALL_OW 69
18412: PPUSH
18413: LD_INT 124
18415: PPUSH
18416: LD_INT 98
18418: PPUSH
18419: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18423: LD_INT 22
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 21
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PPUSH
18452: LD_INT 124
18454: PPUSH
18455: LD_INT 96
18457: PPUSH
18458: CALL_OW 114
// wait ( 0 0$1 ) ;
18462: LD_INT 35
18464: PPUSH
18465: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18469: LD_INT 124
18471: PPUSH
18472: LD_INT 96
18474: PPUSH
18475: CALL_OW 84
// p := 0 0$0 ;
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18487: LD_ADDR_VAR 0 2
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 6
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 21
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18539: LD_INT 35
18541: PPUSH
18542: CALL_OW 67
// p := p + 0 0$1 ;
18546: LD_ADDR_VAR 0 3
18550: PUSH
18551: LD_VAR 0 3
18555: PUSH
18556: LD_INT 35
18558: PLUS
18559: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_INT 5
18567: PPUSH
18568: CALL_OW 113
// for i in tmp do
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: FOR_IN
18583: IFFALSE 18610
// if IsInArea ( tmp , RussianEscape ) then
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_INT 5
18592: PPUSH
18593: CALL_OW 308
18597: IFFALSE 18608
// RemoveUnit ( i ) ;
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 64
18608: GO 18582
18610: POP
18611: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18612: LD_INT 23
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 24
18634: PUSH
18635: LD_INT 250
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: PUSH
18652: LD_INT 0
18654: EQUAL
18655: PUSH
18656: LD_VAR 0 3
18660: PUSH
18661: LD_INT 245
18663: GREATEREQUAL
18664: OR
18665: IFFALSE 18539
// FinishMission ;
18667: CALL 18674 0 0
// end ;
18671: PPOPN 3
18673: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18674: LD_INT 0
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18681: LD_INT 22
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 21
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 23
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 50
18713: PUSH
18714: EMPTY
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: PPUSH
18728: CALL 42819 0 1
18732: PUSH
18733: LD_INT 5
18735: LESS
18736: IFFALSE 18745
// YouLost ( LostVictory ) ;
18738: LD_STRING LostVictory
18740: PPUSH
18741: CALL_OW 104
// if not vehicleProduceCounter then
18745: LD_EXP 42
18749: NOT
18750: IFFALSE 18759
// SetAchievement ( ACH_INFANTRY ) ;
18752: LD_STRING ACH_INFANTRY
18754: PPUSH
18755: CALL_OW 543
// if tick <= 20 20$00 then
18759: LD_OWVAR 1
18763: PUSH
18764: LD_INT 42000
18766: LESSEQUAL
18767: IFFALSE 18783
// begin wait ( 3 ) ;
18769: LD_INT 3
18771: PPUSH
18772: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18776: LD_STRING ACH_ASPEED_4
18778: PPUSH
18779: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18783: LD_INT 22
18785: PPUSH
18786: CALL 19437 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18790: LD_INT 69
18792: PPUSH
18793: LD_INT 1
18795: PPUSH
18796: CALL_OW 321
18800: PPUSH
18801: LD_STRING GatlingInGamma
18803: PPUSH
18804: CALL_OW 39
// m1 := false ;
18808: LD_ADDR_VAR 0 3
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// m2 := false ;
18816: LD_ADDR_VAR 0 4
18820: PUSH
18821: LD_INT 0
18823: ST_TO_ADDR
// m3 := false ;
18824: LD_ADDR_VAR 0 5
18828: PUSH
18829: LD_INT 0
18831: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18832: LD_EXP 34
18836: PUSH
18837: LD_INT 1
18839: EQUAL
18840: PUSH
18841: LD_EXP 35
18845: PUSH
18846: LD_INT 1
18848: EQUAL
18849: AND
18850: IFFALSE 18872
// begin AddMedal ( oil , 1 ) ;
18852: LD_STRING oil
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: CALL_OW 101
// m1 := true ;
18862: LD_ADDR_VAR 0 3
18866: PUSH
18867: LD_INT 1
18869: ST_TO_ADDR
// end else
18870: GO 18965
// begin if buildOil = 1 and buildPower = 0 then
18872: LD_EXP 34
18876: PUSH
18877: LD_INT 1
18879: EQUAL
18880: PUSH
18881: LD_EXP 35
18885: PUSH
18886: LD_INT 0
18888: EQUAL
18889: AND
18890: IFFALSE 18903
// AddMedal ( oil , - 1 ) ;
18892: LD_STRING oil
18894: PPUSH
18895: LD_INT 1
18897: NEG
18898: PPUSH
18899: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18903: LD_EXP 34
18907: PUSH
18908: LD_INT 0
18910: EQUAL
18911: PUSH
18912: LD_EXP 35
18916: PUSH
18917: LD_INT 1
18919: EQUAL
18920: AND
18921: IFFALSE 18934
// AddMedal ( oil , - 2 ) ;
18923: LD_STRING oil
18925: PPUSH
18926: LD_INT 2
18928: NEG
18929: PPUSH
18930: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18934: LD_EXP 34
18938: PUSH
18939: LD_INT 0
18941: EQUAL
18942: PUSH
18943: LD_EXP 35
18947: PUSH
18948: LD_INT 0
18950: EQUAL
18951: AND
18952: IFFALSE 18965
// AddMedal ( oil , - 3 ) ;
18954: LD_STRING oil
18956: PPUSH
18957: LD_INT 3
18959: NEG
18960: PPUSH
18961: CALL_OW 101
// end ; if lostCounter > 3 then
18965: LD_EXP 38
18969: PUSH
18970: LD_INT 3
18972: GREATER
18973: IFFALSE 18988
// AddMedal ( deaths , - 1 ) else
18975: LD_STRING deaths
18977: PPUSH
18978: LD_INT 1
18980: NEG
18981: PPUSH
18982: CALL_OW 101
18986: GO 19006
// begin AddMedal ( deaths , 1 ) ;
18988: LD_STRING deaths
18990: PPUSH
18991: LD_INT 1
18993: PPUSH
18994: CALL_OW 101
// m2 := true ;
18998: LD_ADDR_VAR 0 4
19002: PUSH
19003: LD_INT 1
19005: ST_TO_ADDR
// end ; if honor then
19006: LD_EXP 39
19010: IFFALSE 19032
// begin AddMedal ( honour , 1 ) ;
19012: LD_STRING honour
19014: PPUSH
19015: LD_INT 1
19017: PPUSH
19018: CALL_OW 101
// m3 := true ;
19022: LD_ADDR_VAR 0 5
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// end else
19030: GO 19043
// AddMedal ( honour , - 1 ) ;
19032: LD_STRING honour
19034: PPUSH
19035: LD_INT 1
19037: NEG
19038: PPUSH
19039: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
19043: LD_VAR 0 3
19047: PUSH
19048: LD_VAR 0 4
19052: AND
19053: PUSH
19054: LD_VAR 0 5
19058: AND
19059: PUSH
19060: LD_OWVAR 67
19064: PUSH
19065: LD_INT 3
19067: GREATEREQUAL
19068: AND
19069: IFFALSE 19081
// SetAchievementEX ( ACH_AMER , 4 ) ;
19071: LD_STRING ACH_AMER
19073: PPUSH
19074: LD_INT 4
19076: PPUSH
19077: CALL_OW 564
// GiveMedals ( Main ) ;
19081: LD_STRING Main
19083: PPUSH
19084: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19088: LD_INT 22
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 23
19100: PUSH
19101: LD_INT 1
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 21
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: PPUSH
19123: CALL_OW 69
19127: PPUSH
19128: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19132: LD_EXP 1
19136: PPUSH
19137: LD_EXP 49
19141: PUSH
19142: LD_STRING JMM
19144: STR
19145: PPUSH
19146: CALL_OW 38
// if IsOK ( Bobby ) then
19150: LD_EXP 2
19154: PPUSH
19155: CALL_OW 302
19159: IFFALSE 19179
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19161: LD_EXP 2
19165: PPUSH
19166: LD_EXP 49
19170: PUSH
19171: LD_STRING Bobby
19173: STR
19174: PPUSH
19175: CALL_OW 38
// if IsOK ( Cyrus ) then
19179: LD_EXP 3
19183: PPUSH
19184: CALL_OW 302
19188: IFFALSE 19208
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19190: LD_EXP 3
19194: PPUSH
19195: LD_EXP 49
19199: PUSH
19200: LD_STRING Cyrus
19202: STR
19203: PPUSH
19204: CALL_OW 38
// if IsOK ( Lisa ) then
19208: LD_EXP 4
19212: PPUSH
19213: CALL_OW 302
19217: IFFALSE 19237
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19219: LD_EXP 4
19223: PPUSH
19224: LD_EXP 49
19228: PUSH
19229: LD_STRING Lisa
19231: STR
19232: PPUSH
19233: CALL_OW 38
// if IsOK ( Brown ) then
19237: LD_EXP 7
19241: PPUSH
19242: CALL_OW 302
19246: IFFALSE 19273
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
19248: LD_STRING enableBioCharacter(BIO_JEFF)
19250: PPUSH
19251: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19255: LD_EXP 7
19259: PPUSH
19260: LD_EXP 49
19264: PUSH
19265: LD_STRING Brown
19267: STR
19268: PPUSH
19269: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
19273: LD_EXP 13
19277: PPUSH
19278: CALL_OW 301
19282: NOT
19283: IFFALSE 19310
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
19285: LD_STRING enableBioCharacter(BIO_LUCY)
19287: PPUSH
19288: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19292: LD_EXP 13
19296: PPUSH
19297: LD_EXP 49
19301: PUSH
19302: LD_STRING Donaldson
19304: STR
19305: PPUSH
19306: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19310: LD_EXP 5
19314: PPUSH
19315: CALL_OW 301
19319: NOT
19320: IFFALSE 19340
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19322: LD_EXP 5
19326: PPUSH
19327: LD_EXP 49
19331: PUSH
19332: LD_STRING Frank
19334: STR
19335: PPUSH
19336: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19340: LD_INT 50
19342: PUSH
19343: EMPTY
19344: LIST
19345: PUSH
19346: LD_INT 22
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 21
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: PUSH
19376: LD_EXP 1
19380: PUSH
19381: LD_EXP 2
19385: PUSH
19386: LD_EXP 3
19390: PUSH
19391: LD_EXP 4
19395: PUSH
19396: LD_EXP 7
19400: PUSH
19401: LD_EXP 13
19405: PUSH
19406: LD_EXP 5
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: DIFF
19420: PPUSH
19421: LD_STRING 04_other_survivors
19423: PPUSH
19424: CALL_OW 38
// YouWin ;
19428: CALL_OW 103
// end ;
19432: LD_VAR 0 1
19436: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19437: LD_INT 0
19439: PPUSH
19440: PPUSH
19441: PPUSH
19442: PPUSH
// gammaBase = [ ] ;
19443: LD_ADDR_VAR 0 4
19447: PUSH
19448: EMPTY
19449: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19450: LD_ADDR_VAR 0 5
19454: PUSH
19455: LD_VAR 0 1
19459: PPUSH
19460: LD_INT 22
19462: PUSH
19463: LD_INT 1
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 21
19472: PUSH
19473: LD_INT 3
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 70
19488: ST_TO_ADDR
// for i in buildings do
19489: LD_ADDR_VAR 0 3
19493: PUSH
19494: LD_VAR 0 5
19498: PUSH
19499: FOR_IN
19500: IFFALSE 19837
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19502: LD_VAR 0 3
19506: PPUSH
19507: CALL_OW 266
19511: PUSH
19512: LD_INT 6
19514: PUSH
19515: LD_INT 7
19517: PUSH
19518: LD_INT 8
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: IN
19526: IFFALSE 19640
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19528: LD_ADDR_VAR 0 4
19532: PUSH
19533: LD_VAR 0 4
19537: PUSH
19538: LD_VAR 0 3
19542: PPUSH
19543: CALL_OW 266
19547: PUSH
19548: LD_VAR 0 3
19552: PPUSH
19553: CALL_OW 250
19557: PUSH
19558: LD_VAR 0 3
19562: PPUSH
19563: CALL_OW 251
19567: PUSH
19568: LD_VAR 0 3
19572: PPUSH
19573: CALL_OW 254
19577: PUSH
19578: LD_VAR 0 3
19582: PPUSH
19583: CALL_OW 267
19587: PUSH
19588: LD_VAR 0 3
19592: PPUSH
19593: CALL_OW 248
19597: PUSH
19598: LD_VAR 0 3
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: CALL_OW 268
19610: PUSH
19611: LD_VAR 0 3
19615: PPUSH
19616: LD_INT 2
19618: PPUSH
19619: CALL_OW 268
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: ADD
19637: ST_TO_ADDR
19638: GO 19835
// if GetBType ( i ) in [ b_bunker ] then
19640: LD_VAR 0 3
19644: PPUSH
19645: CALL_OW 266
19649: PUSH
19650: LD_INT 32
19652: PUSH
19653: EMPTY
19654: LIST
19655: IN
19656: IFFALSE 19753
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19658: LD_ADDR_VAR 0 4
19662: PUSH
19663: LD_VAR 0 4
19667: PUSH
19668: LD_VAR 0 3
19672: PPUSH
19673: CALL_OW 266
19677: PUSH
19678: LD_VAR 0 3
19682: PPUSH
19683: CALL_OW 250
19687: PUSH
19688: LD_VAR 0 3
19692: PPUSH
19693: CALL_OW 251
19697: PUSH
19698: LD_VAR 0 3
19702: PPUSH
19703: CALL_OW 254
19707: PUSH
19708: LD_VAR 0 3
19712: PPUSH
19713: CALL_OW 267
19717: PUSH
19718: LD_VAR 0 3
19722: PPUSH
19723: CALL_OW 248
19727: PUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: CALL_OW 269
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: ADD
19750: ST_TO_ADDR
19751: GO 19835
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19753: LD_ADDR_VAR 0 4
19757: PUSH
19758: LD_VAR 0 4
19762: PUSH
19763: LD_VAR 0 3
19767: PPUSH
19768: CALL_OW 266
19772: PUSH
19773: LD_VAR 0 3
19777: PPUSH
19778: CALL_OW 250
19782: PUSH
19783: LD_VAR 0 3
19787: PPUSH
19788: CALL_OW 251
19792: PUSH
19793: LD_VAR 0 3
19797: PPUSH
19798: CALL_OW 254
19802: PUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: CALL_OW 267
19812: PUSH
19813: LD_VAR 0 3
19817: PPUSH
19818: CALL_OW 248
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: PUSH
19831: EMPTY
19832: LIST
19833: ADD
19834: ST_TO_ADDR
// end ;
19835: GO 19499
19837: POP
19838: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19839: LD_VAR 0 4
19843: PPUSH
19844: LD_STRING GammaBase
19846: PPUSH
19847: CALL_OW 39
// end ; end_of_file
19851: LD_VAR 0 2
19855: RET
// every 1 1$15 do
19856: GO 19858
19858: DISABLE
// begin if supply <= 13 and supply > 7 then
19859: LD_EXP 36
19863: PUSH
19864: LD_INT 13
19866: LESSEQUAL
19867: PUSH
19868: LD_EXP 36
19872: PUSH
19873: LD_INT 7
19875: GREATER
19876: AND
19877: IFFALSE 19900
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19879: LD_INT 3
19881: PPUSH
19882: LD_INT 5
19884: PPUSH
19885: CALL_OW 12
19889: PPUSH
19890: LD_INT 18
19892: PPUSH
19893: LD_INT 1
19895: PPUSH
19896: CALL_OW 55
// if supply <= 7 and supply > 4 then
19900: LD_EXP 36
19904: PUSH
19905: LD_INT 7
19907: LESSEQUAL
19908: PUSH
19909: LD_EXP 36
19913: PUSH
19914: LD_INT 4
19916: GREATER
19917: AND
19918: IFFALSE 19941
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19920: LD_INT 3
19922: PPUSH
19923: LD_INT 5
19925: PPUSH
19926: CALL_OW 12
19930: PPUSH
19931: LD_INT 19
19933: PPUSH
19934: LD_INT 1
19936: PPUSH
19937: CALL_OW 55
// if supply <= 4 and supply > 0 then
19941: LD_EXP 36
19945: PUSH
19946: LD_INT 4
19948: LESSEQUAL
19949: PUSH
19950: LD_EXP 36
19954: PUSH
19955: LD_INT 0
19957: GREATER
19958: AND
19959: IFFALSE 19982
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19961: LD_INT 3
19963: PPUSH
19964: LD_INT 5
19966: PPUSH
19967: CALL_OW 12
19971: PPUSH
19972: LD_INT 20
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: CALL_OW 55
// if supply then
19982: LD_EXP 36
19986: IFFALSE 20003
// begin supply = supply - 1 ;
19988: LD_ADDR_EXP 36
19992: PUSH
19993: LD_EXP 36
19997: PUSH
19998: LD_INT 1
20000: MINUS
20001: ST_TO_ADDR
// enable ;
20002: ENABLE
// end ; end ; end_of_file end_of_file
20003: END
// export globalGameSaveCounter ; every 0 0$1 do
20004: GO 20006
20006: DISABLE
// begin enable ;
20007: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20008: LD_STRING updateTimer(
20010: PUSH
20011: LD_OWVAR 1
20015: STR
20016: PUSH
20017: LD_STRING );
20019: STR
20020: PPUSH
20021: CALL_OW 559
// end ;
20025: END
// every 0 0$1 do
20026: GO 20028
20028: DISABLE
// begin globalGameSaveCounter := 0 ;
20029: LD_ADDR_EXP 51
20033: PUSH
20034: LD_INT 0
20036: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20037: LD_STRING setGameSaveCounter(0)
20039: PPUSH
20040: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20044: LD_STRING initStreamRollete();
20046: PPUSH
20047: CALL_OW 559
// InitStreamMode ;
20051: CALL 21394 0 0
// DefineStreamItems ( false ) ;
20055: LD_INT 0
20057: PPUSH
20058: CALL 21858 0 1
// end ;
20062: END
// export function SOS_MapStart ( ) ; begin
20063: LD_INT 0
20065: PPUSH
// if streamModeActive then
20066: LD_EXP 52
20070: IFFALSE 20079
// DefineStreamItems ( true ) ;
20072: LD_INT 1
20074: PPUSH
20075: CALL 21858 0 1
// UpdateLuaVariables ( ) ;
20079: CALL 20096 0 0
// UpdateFactoryWaypoints ( ) ;
20083: CALL 34727 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20087: CALL 34984 0 0
// end ;
20091: LD_VAR 0 1
20095: RET
// function UpdateLuaVariables ( ) ; begin
20096: LD_INT 0
20098: PPUSH
// if globalGameSaveCounter then
20099: LD_EXP 51
20103: IFFALSE 20137
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20105: LD_ADDR_EXP 51
20109: PUSH
20110: LD_EXP 51
20114: PPUSH
20115: CALL 79769 0 1
20119: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20120: LD_STRING setGameSaveCounter(
20122: PUSH
20123: LD_EXP 51
20127: STR
20128: PUSH
20129: LD_STRING )
20131: STR
20132: PPUSH
20133: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20137: LD_STRING setGameDifficulty(
20139: PUSH
20140: LD_OWVAR 67
20144: STR
20145: PUSH
20146: LD_STRING )
20148: STR
20149: PPUSH
20150: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20154: LD_STRING displayDifficulty(
20156: PUSH
20157: LD_OWVAR 67
20161: STR
20162: PUSH
20163: LD_STRING )
20165: STR
20166: PPUSH
20167: CALL_OW 559
// end ;
20171: LD_VAR 0 1
20175: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20176: LD_INT 0
20178: PPUSH
// if p2 = stream_mode then
20179: LD_VAR 0 2
20183: PUSH
20184: LD_INT 100
20186: EQUAL
20187: IFFALSE 21190
// begin if not StreamModeActive then
20189: LD_EXP 52
20193: NOT
20194: IFFALSE 20204
// StreamModeActive := true ;
20196: LD_ADDR_EXP 52
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// if p3 = 0 then
20204: LD_VAR 0 3
20208: PUSH
20209: LD_INT 0
20211: EQUAL
20212: IFFALSE 20218
// InitStreamMode ;
20214: CALL 21394 0 0
// if p3 = 1 then
20218: LD_VAR 0 3
20222: PUSH
20223: LD_INT 1
20225: EQUAL
20226: IFFALSE 20236
// sRocket := true ;
20228: LD_ADDR_EXP 57
20232: PUSH
20233: LD_INT 1
20235: ST_TO_ADDR
// if p3 = 2 then
20236: LD_VAR 0 3
20240: PUSH
20241: LD_INT 2
20243: EQUAL
20244: IFFALSE 20254
// sSpeed := true ;
20246: LD_ADDR_EXP 56
20250: PUSH
20251: LD_INT 1
20253: ST_TO_ADDR
// if p3 = 3 then
20254: LD_VAR 0 3
20258: PUSH
20259: LD_INT 3
20261: EQUAL
20262: IFFALSE 20272
// sEngine := true ;
20264: LD_ADDR_EXP 58
20268: PUSH
20269: LD_INT 1
20271: ST_TO_ADDR
// if p3 = 4 then
20272: LD_VAR 0 3
20276: PUSH
20277: LD_INT 4
20279: EQUAL
20280: IFFALSE 20290
// sSpec := true ;
20282: LD_ADDR_EXP 55
20286: PUSH
20287: LD_INT 1
20289: ST_TO_ADDR
// if p3 = 5 then
20290: LD_VAR 0 3
20294: PUSH
20295: LD_INT 5
20297: EQUAL
20298: IFFALSE 20308
// sLevel := true ;
20300: LD_ADDR_EXP 59
20304: PUSH
20305: LD_INT 1
20307: ST_TO_ADDR
// if p3 = 6 then
20308: LD_VAR 0 3
20312: PUSH
20313: LD_INT 6
20315: EQUAL
20316: IFFALSE 20326
// sArmoury := true ;
20318: LD_ADDR_EXP 60
20322: PUSH
20323: LD_INT 1
20325: ST_TO_ADDR
// if p3 = 7 then
20326: LD_VAR 0 3
20330: PUSH
20331: LD_INT 7
20333: EQUAL
20334: IFFALSE 20344
// sRadar := true ;
20336: LD_ADDR_EXP 61
20340: PUSH
20341: LD_INT 1
20343: ST_TO_ADDR
// if p3 = 8 then
20344: LD_VAR 0 3
20348: PUSH
20349: LD_INT 8
20351: EQUAL
20352: IFFALSE 20362
// sBunker := true ;
20354: LD_ADDR_EXP 62
20358: PUSH
20359: LD_INT 1
20361: ST_TO_ADDR
// if p3 = 9 then
20362: LD_VAR 0 3
20366: PUSH
20367: LD_INT 9
20369: EQUAL
20370: IFFALSE 20380
// sHack := true ;
20372: LD_ADDR_EXP 63
20376: PUSH
20377: LD_INT 1
20379: ST_TO_ADDR
// if p3 = 10 then
20380: LD_VAR 0 3
20384: PUSH
20385: LD_INT 10
20387: EQUAL
20388: IFFALSE 20398
// sFire := true ;
20390: LD_ADDR_EXP 64
20394: PUSH
20395: LD_INT 1
20397: ST_TO_ADDR
// if p3 = 11 then
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 11
20405: EQUAL
20406: IFFALSE 20416
// sRefresh := true ;
20408: LD_ADDR_EXP 65
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// if p3 = 12 then
20416: LD_VAR 0 3
20420: PUSH
20421: LD_INT 12
20423: EQUAL
20424: IFFALSE 20434
// sExp := true ;
20426: LD_ADDR_EXP 66
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// if p3 = 13 then
20434: LD_VAR 0 3
20438: PUSH
20439: LD_INT 13
20441: EQUAL
20442: IFFALSE 20452
// sDepot := true ;
20444: LD_ADDR_EXP 67
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// if p3 = 14 then
20452: LD_VAR 0 3
20456: PUSH
20457: LD_INT 14
20459: EQUAL
20460: IFFALSE 20470
// sFlag := true ;
20462: LD_ADDR_EXP 68
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// if p3 = 15 then
20470: LD_VAR 0 3
20474: PUSH
20475: LD_INT 15
20477: EQUAL
20478: IFFALSE 20488
// sKamikadze := true ;
20480: LD_ADDR_EXP 76
20484: PUSH
20485: LD_INT 1
20487: ST_TO_ADDR
// if p3 = 16 then
20488: LD_VAR 0 3
20492: PUSH
20493: LD_INT 16
20495: EQUAL
20496: IFFALSE 20506
// sTroll := true ;
20498: LD_ADDR_EXP 77
20502: PUSH
20503: LD_INT 1
20505: ST_TO_ADDR
// if p3 = 17 then
20506: LD_VAR 0 3
20510: PUSH
20511: LD_INT 17
20513: EQUAL
20514: IFFALSE 20524
// sSlow := true ;
20516: LD_ADDR_EXP 78
20520: PUSH
20521: LD_INT 1
20523: ST_TO_ADDR
// if p3 = 18 then
20524: LD_VAR 0 3
20528: PUSH
20529: LD_INT 18
20531: EQUAL
20532: IFFALSE 20542
// sLack := true ;
20534: LD_ADDR_EXP 79
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// if p3 = 19 then
20542: LD_VAR 0 3
20546: PUSH
20547: LD_INT 19
20549: EQUAL
20550: IFFALSE 20560
// sTank := true ;
20552: LD_ADDR_EXP 81
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if p3 = 20 then
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 20
20567: EQUAL
20568: IFFALSE 20578
// sRemote := true ;
20570: LD_ADDR_EXP 82
20574: PUSH
20575: LD_INT 1
20577: ST_TO_ADDR
// if p3 = 21 then
20578: LD_VAR 0 3
20582: PUSH
20583: LD_INT 21
20585: EQUAL
20586: IFFALSE 20596
// sPowell := true ;
20588: LD_ADDR_EXP 83
20592: PUSH
20593: LD_INT 1
20595: ST_TO_ADDR
// if p3 = 22 then
20596: LD_VAR 0 3
20600: PUSH
20601: LD_INT 22
20603: EQUAL
20604: IFFALSE 20614
// sTeleport := true ;
20606: LD_ADDR_EXP 86
20610: PUSH
20611: LD_INT 1
20613: ST_TO_ADDR
// if p3 = 23 then
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 23
20621: EQUAL
20622: IFFALSE 20632
// sOilTower := true ;
20624: LD_ADDR_EXP 88
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// if p3 = 24 then
20632: LD_VAR 0 3
20636: PUSH
20637: LD_INT 24
20639: EQUAL
20640: IFFALSE 20650
// sShovel := true ;
20642: LD_ADDR_EXP 89
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// if p3 = 25 then
20650: LD_VAR 0 3
20654: PUSH
20655: LD_INT 25
20657: EQUAL
20658: IFFALSE 20668
// sSheik := true ;
20660: LD_ADDR_EXP 90
20664: PUSH
20665: LD_INT 1
20667: ST_TO_ADDR
// if p3 = 26 then
20668: LD_VAR 0 3
20672: PUSH
20673: LD_INT 26
20675: EQUAL
20676: IFFALSE 20686
// sEarthquake := true ;
20678: LD_ADDR_EXP 92
20682: PUSH
20683: LD_INT 1
20685: ST_TO_ADDR
// if p3 = 27 then
20686: LD_VAR 0 3
20690: PUSH
20691: LD_INT 27
20693: EQUAL
20694: IFFALSE 20704
// sAI := true ;
20696: LD_ADDR_EXP 93
20700: PUSH
20701: LD_INT 1
20703: ST_TO_ADDR
// if p3 = 28 then
20704: LD_VAR 0 3
20708: PUSH
20709: LD_INT 28
20711: EQUAL
20712: IFFALSE 20722
// sCargo := true ;
20714: LD_ADDR_EXP 96
20718: PUSH
20719: LD_INT 1
20721: ST_TO_ADDR
// if p3 = 29 then
20722: LD_VAR 0 3
20726: PUSH
20727: LD_INT 29
20729: EQUAL
20730: IFFALSE 20740
// sDLaser := true ;
20732: LD_ADDR_EXP 97
20736: PUSH
20737: LD_INT 1
20739: ST_TO_ADDR
// if p3 = 30 then
20740: LD_VAR 0 3
20744: PUSH
20745: LD_INT 30
20747: EQUAL
20748: IFFALSE 20758
// sExchange := true ;
20750: LD_ADDR_EXP 98
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// if p3 = 31 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 31
20765: EQUAL
20766: IFFALSE 20776
// sFac := true ;
20768: LD_ADDR_EXP 99
20772: PUSH
20773: LD_INT 1
20775: ST_TO_ADDR
// if p3 = 32 then
20776: LD_VAR 0 3
20780: PUSH
20781: LD_INT 32
20783: EQUAL
20784: IFFALSE 20794
// sPower := true ;
20786: LD_ADDR_EXP 100
20790: PUSH
20791: LD_INT 1
20793: ST_TO_ADDR
// if p3 = 33 then
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 33
20801: EQUAL
20802: IFFALSE 20812
// sRandom := true ;
20804: LD_ADDR_EXP 101
20808: PUSH
20809: LD_INT 1
20811: ST_TO_ADDR
// if p3 = 34 then
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 34
20819: EQUAL
20820: IFFALSE 20830
// sShield := true ;
20822: LD_ADDR_EXP 102
20826: PUSH
20827: LD_INT 1
20829: ST_TO_ADDR
// if p3 = 35 then
20830: LD_VAR 0 3
20834: PUSH
20835: LD_INT 35
20837: EQUAL
20838: IFFALSE 20848
// sTime := true ;
20840: LD_ADDR_EXP 103
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// if p3 = 36 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 36
20855: EQUAL
20856: IFFALSE 20866
// sTools := true ;
20858: LD_ADDR_EXP 104
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 101 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 101
20873: EQUAL
20874: IFFALSE 20884
// sSold := true ;
20876: LD_ADDR_EXP 69
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 102 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 102
20891: EQUAL
20892: IFFALSE 20902
// sDiff := true ;
20894: LD_ADDR_EXP 70
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 103 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 103
20909: EQUAL
20910: IFFALSE 20920
// sFog := true ;
20912: LD_ADDR_EXP 73
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 104 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 104
20927: EQUAL
20928: IFFALSE 20938
// sReset := true ;
20930: LD_ADDR_EXP 74
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 105 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 105
20945: EQUAL
20946: IFFALSE 20956
// sSun := true ;
20948: LD_ADDR_EXP 75
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 106 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 106
20963: EQUAL
20964: IFFALSE 20974
// sTiger := true ;
20966: LD_ADDR_EXP 71
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 107 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 107
20981: EQUAL
20982: IFFALSE 20992
// sBomb := true ;
20984: LD_ADDR_EXP 72
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 108 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 108
20999: EQUAL
21000: IFFALSE 21010
// sWound := true ;
21002: LD_ADDR_EXP 80
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 109 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 109
21017: EQUAL
21018: IFFALSE 21028
// sBetray := true ;
21020: LD_ADDR_EXP 84
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 110 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 110
21035: EQUAL
21036: IFFALSE 21046
// sContamin := true ;
21038: LD_ADDR_EXP 85
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 111 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 111
21053: EQUAL
21054: IFFALSE 21064
// sOil := true ;
21056: LD_ADDR_EXP 87
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 112 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 112
21071: EQUAL
21072: IFFALSE 21082
// sStu := true ;
21074: LD_ADDR_EXP 91
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 113 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 113
21089: EQUAL
21090: IFFALSE 21100
// sBazooka := true ;
21092: LD_ADDR_EXP 94
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 114 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 114
21107: EQUAL
21108: IFFALSE 21118
// sMortar := true ;
21110: LD_ADDR_EXP 95
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 115 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 115
21125: EQUAL
21126: IFFALSE 21136
// sRanger := true ;
21128: LD_ADDR_EXP 105
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 116 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 116
21143: EQUAL
21144: IFFALSE 21154
// sComputer := true ;
21146: LD_ADDR_EXP 106
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 117 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 117
21161: EQUAL
21162: IFFALSE 21172
// s30 := true ;
21164: LD_ADDR_EXP 107
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 118 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 118
21179: EQUAL
21180: IFFALSE 21190
// s60 := true ;
21182: LD_ADDR_EXP 108
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// end ; if p2 = hack_mode then
21190: LD_VAR 0 2
21194: PUSH
21195: LD_INT 101
21197: EQUAL
21198: IFFALSE 21326
// begin case p3 of 1 :
21200: LD_VAR 0 3
21204: PUSH
21205: LD_INT 1
21207: DOUBLE
21208: EQUAL
21209: IFTRUE 21213
21211: GO 21220
21213: POP
// hHackUnlimitedResources ; 2 :
21214: CALL 33473 0 0
21218: GO 21326
21220: LD_INT 2
21222: DOUBLE
21223: EQUAL
21224: IFTRUE 21228
21226: GO 21235
21228: POP
// hHackSetLevel10 ; 3 :
21229: CALL 33606 0 0
21233: GO 21326
21235: LD_INT 3
21237: DOUBLE
21238: EQUAL
21239: IFTRUE 21243
21241: GO 21250
21243: POP
// hHackSetLevel10YourUnits ; 4 :
21244: CALL 33691 0 0
21248: GO 21326
21250: LD_INT 4
21252: DOUBLE
21253: EQUAL
21254: IFTRUE 21258
21256: GO 21265
21258: POP
// hHackInvincible ; 5 :
21259: CALL 34139 0 0
21263: GO 21326
21265: LD_INT 5
21267: DOUBLE
21268: EQUAL
21269: IFTRUE 21273
21271: GO 21280
21273: POP
// hHackInvisible ; 6 :
21274: CALL 34250 0 0
21278: GO 21326
21280: LD_INT 6
21282: DOUBLE
21283: EQUAL
21284: IFTRUE 21288
21286: GO 21295
21288: POP
// hHackChangeYourSide ; 7 :
21289: CALL 34307 0 0
21293: GO 21326
21295: LD_INT 7
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21310
21303: POP
// hHackChangeUnitSide ; 8 :
21304: CALL 34349 0 0
21308: GO 21326
21310: LD_INT 8
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21325
21318: POP
// hHackFog ; end ;
21319: CALL 34450 0 0
21323: GO 21326
21325: POP
// end ; if p2 = game_save_mode then
21326: LD_VAR 0 2
21330: PUSH
21331: LD_INT 102
21333: EQUAL
21334: IFFALSE 21389
// begin if p3 = 1 then
21336: LD_VAR 0 3
21340: PUSH
21341: LD_INT 1
21343: EQUAL
21344: IFFALSE 21356
// globalGameSaveCounter := p4 ;
21346: LD_ADDR_EXP 51
21350: PUSH
21351: LD_VAR 0 4
21355: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21356: LD_VAR 0 3
21360: PUSH
21361: LD_INT 2
21363: EQUAL
21364: PUSH
21365: LD_EXP 51
21369: AND
21370: IFFALSE 21389
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21372: LD_STRING setGameSaveCounter(
21374: PUSH
21375: LD_EXP 51
21379: STR
21380: PUSH
21381: LD_STRING )
21383: STR
21384: PPUSH
21385: CALL_OW 559
// end ; end ;
21389: LD_VAR 0 7
21393: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21394: LD_INT 0
21396: PPUSH
// streamModeActive := false ;
21397: LD_ADDR_EXP 52
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// normalCounter := 36 ;
21405: LD_ADDR_EXP 53
21409: PUSH
21410: LD_INT 36
21412: ST_TO_ADDR
// hardcoreCounter := 18 ;
21413: LD_ADDR_EXP 54
21417: PUSH
21418: LD_INT 18
21420: ST_TO_ADDR
// sRocket := false ;
21421: LD_ADDR_EXP 57
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sSpeed := false ;
21429: LD_ADDR_EXP 56
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sEngine := false ;
21437: LD_ADDR_EXP 58
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sSpec := false ;
21445: LD_ADDR_EXP 55
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sLevel := false ;
21453: LD_ADDR_EXP 59
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sArmoury := false ;
21461: LD_ADDR_EXP 60
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sRadar := false ;
21469: LD_ADDR_EXP 61
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sBunker := false ;
21477: LD_ADDR_EXP 62
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sHack := false ;
21485: LD_ADDR_EXP 63
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sFire := false ;
21493: LD_ADDR_EXP 64
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sRefresh := false ;
21501: LD_ADDR_EXP 65
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sExp := false ;
21509: LD_ADDR_EXP 66
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sDepot := false ;
21517: LD_ADDR_EXP 67
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sFlag := false ;
21525: LD_ADDR_EXP 68
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sKamikadze := false ;
21533: LD_ADDR_EXP 76
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sTroll := false ;
21541: LD_ADDR_EXP 77
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sSlow := false ;
21549: LD_ADDR_EXP 78
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sLack := false ;
21557: LD_ADDR_EXP 79
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sTank := false ;
21565: LD_ADDR_EXP 81
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sRemote := false ;
21573: LD_ADDR_EXP 82
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sPowell := false ;
21581: LD_ADDR_EXP 83
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sTeleport := false ;
21589: LD_ADDR_EXP 86
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sOilTower := false ;
21597: LD_ADDR_EXP 88
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sShovel := false ;
21605: LD_ADDR_EXP 89
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sSheik := false ;
21613: LD_ADDR_EXP 90
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sEarthquake := false ;
21621: LD_ADDR_EXP 92
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sAI := false ;
21629: LD_ADDR_EXP 93
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sCargo := false ;
21637: LD_ADDR_EXP 96
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sDLaser := false ;
21645: LD_ADDR_EXP 97
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sExchange := false ;
21653: LD_ADDR_EXP 98
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sFac := false ;
21661: LD_ADDR_EXP 99
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sPower := false ;
21669: LD_ADDR_EXP 100
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sRandom := false ;
21677: LD_ADDR_EXP 101
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sShield := false ;
21685: LD_ADDR_EXP 102
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sTime := false ;
21693: LD_ADDR_EXP 103
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sTools := false ;
21701: LD_ADDR_EXP 104
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sSold := false ;
21709: LD_ADDR_EXP 69
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sDiff := false ;
21717: LD_ADDR_EXP 70
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sFog := false ;
21725: LD_ADDR_EXP 73
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sReset := false ;
21733: LD_ADDR_EXP 74
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sSun := false ;
21741: LD_ADDR_EXP 75
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sTiger := false ;
21749: LD_ADDR_EXP 71
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sBomb := false ;
21757: LD_ADDR_EXP 72
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sWound := false ;
21765: LD_ADDR_EXP 80
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sBetray := false ;
21773: LD_ADDR_EXP 84
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sContamin := false ;
21781: LD_ADDR_EXP 85
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sOil := false ;
21789: LD_ADDR_EXP 87
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// sStu := false ;
21797: LD_ADDR_EXP 91
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// sBazooka := false ;
21805: LD_ADDR_EXP 94
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// sMortar := false ;
21813: LD_ADDR_EXP 95
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
// sRanger := false ;
21821: LD_ADDR_EXP 105
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// sComputer := false ;
21829: LD_ADDR_EXP 106
21833: PUSH
21834: LD_INT 0
21836: ST_TO_ADDR
// s30 := false ;
21837: LD_ADDR_EXP 107
21841: PUSH
21842: LD_INT 0
21844: ST_TO_ADDR
// s60 := false ;
21845: LD_ADDR_EXP 108
21849: PUSH
21850: LD_INT 0
21852: ST_TO_ADDR
// end ;
21853: LD_VAR 0 1
21857: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21858: LD_INT 0
21860: PPUSH
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
// result := [ ] ;
21867: LD_ADDR_VAR 0 2
21871: PUSH
21872: EMPTY
21873: ST_TO_ADDR
// if campaign_id = 1 then
21874: LD_OWVAR 69
21878: PUSH
21879: LD_INT 1
21881: EQUAL
21882: IFFALSE 25048
// begin case mission_number of 1 :
21884: LD_OWVAR 70
21888: PUSH
21889: LD_INT 1
21891: DOUBLE
21892: EQUAL
21893: IFTRUE 21897
21895: GO 21973
21897: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21898: LD_ADDR_VAR 0 2
21902: PUSH
21903: LD_INT 2
21905: PUSH
21906: LD_INT 4
21908: PUSH
21909: LD_INT 11
21911: PUSH
21912: LD_INT 12
21914: PUSH
21915: LD_INT 15
21917: PUSH
21918: LD_INT 16
21920: PUSH
21921: LD_INT 22
21923: PUSH
21924: LD_INT 23
21926: PUSH
21927: LD_INT 26
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 101
21943: PUSH
21944: LD_INT 102
21946: PUSH
21947: LD_INT 106
21949: PUSH
21950: LD_INT 116
21952: PUSH
21953: LD_INT 117
21955: PUSH
21956: LD_INT 118
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: ST_TO_ADDR
21971: GO 25046
21973: LD_INT 2
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 22065
21981: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21982: LD_ADDR_VAR 0 2
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 4
21992: PUSH
21993: LD_INT 11
21995: PUSH
21996: LD_INT 12
21998: PUSH
21999: LD_INT 15
22001: PUSH
22002: LD_INT 16
22004: PUSH
22005: LD_INT 22
22007: PUSH
22008: LD_INT 23
22010: PUSH
22011: LD_INT 26
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 101
22027: PUSH
22028: LD_INT 102
22030: PUSH
22031: LD_INT 105
22033: PUSH
22034: LD_INT 106
22036: PUSH
22037: LD_INT 108
22039: PUSH
22040: LD_INT 116
22042: PUSH
22043: LD_INT 117
22045: PUSH
22046: LD_INT 118
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: ST_TO_ADDR
22063: GO 25046
22065: LD_INT 3
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22161
22073: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22074: LD_ADDR_VAR 0 2
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 4
22084: PUSH
22085: LD_INT 5
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 22
22102: PUSH
22103: LD_INT 26
22105: PUSH
22106: LD_INT 36
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 101
22123: PUSH
22124: LD_INT 102
22126: PUSH
22127: LD_INT 105
22129: PUSH
22130: LD_INT 106
22132: PUSH
22133: LD_INT 108
22135: PUSH
22136: LD_INT 116
22138: PUSH
22139: LD_INT 117
22141: PUSH
22142: LD_INT 118
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: ST_TO_ADDR
22159: GO 25046
22161: LD_INT 4
22163: DOUBLE
22164: EQUAL
22165: IFTRUE 22169
22167: GO 22265
22169: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22170: LD_ADDR_VAR 0 2
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 4
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: LD_INT 8
22186: PUSH
22187: LD_INT 11
22189: PUSH
22190: LD_INT 12
22192: PUSH
22193: LD_INT 15
22195: PUSH
22196: LD_INT 16
22198: PUSH
22199: LD_INT 22
22201: PUSH
22202: LD_INT 23
22204: PUSH
22205: LD_INT 26
22207: PUSH
22208: LD_INT 36
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 101
22227: PUSH
22228: LD_INT 102
22230: PUSH
22231: LD_INT 105
22233: PUSH
22234: LD_INT 106
22236: PUSH
22237: LD_INT 108
22239: PUSH
22240: LD_INT 116
22242: PUSH
22243: LD_INT 117
22245: PUSH
22246: LD_INT 118
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: ST_TO_ADDR
22263: GO 25046
22265: LD_INT 5
22267: DOUBLE
22268: EQUAL
22269: IFTRUE 22273
22271: GO 22385
22273: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22274: LD_ADDR_VAR 0 2
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: LD_INT 4
22284: PUSH
22285: LD_INT 5
22287: PUSH
22288: LD_INT 6
22290: PUSH
22291: LD_INT 8
22293: PUSH
22294: LD_INT 11
22296: PUSH
22297: LD_INT 12
22299: PUSH
22300: LD_INT 15
22302: PUSH
22303: LD_INT 16
22305: PUSH
22306: LD_INT 22
22308: PUSH
22309: LD_INT 23
22311: PUSH
22312: LD_INT 25
22314: PUSH
22315: LD_INT 26
22317: PUSH
22318: LD_INT 36
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 101
22339: PUSH
22340: LD_INT 102
22342: PUSH
22343: LD_INT 105
22345: PUSH
22346: LD_INT 106
22348: PUSH
22349: LD_INT 108
22351: PUSH
22352: LD_INT 109
22354: PUSH
22355: LD_INT 112
22357: PUSH
22358: LD_INT 116
22360: PUSH
22361: LD_INT 117
22363: PUSH
22364: LD_INT 118
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: ST_TO_ADDR
22383: GO 25046
22385: LD_INT 6
22387: DOUBLE
22388: EQUAL
22389: IFTRUE 22393
22391: GO 22525
22393: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22394: LD_ADDR_VAR 0 2
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 4
22404: PUSH
22405: LD_INT 5
22407: PUSH
22408: LD_INT 6
22410: PUSH
22411: LD_INT 8
22413: PUSH
22414: LD_INT 11
22416: PUSH
22417: LD_INT 12
22419: PUSH
22420: LD_INT 15
22422: PUSH
22423: LD_INT 16
22425: PUSH
22426: LD_INT 20
22428: PUSH
22429: LD_INT 21
22431: PUSH
22432: LD_INT 22
22434: PUSH
22435: LD_INT 23
22437: PUSH
22438: LD_INT 25
22440: PUSH
22441: LD_INT 26
22443: PUSH
22444: LD_INT 30
22446: PUSH
22447: LD_INT 31
22449: PUSH
22450: LD_INT 32
22452: PUSH
22453: LD_INT 36
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 101
22479: PUSH
22480: LD_INT 102
22482: PUSH
22483: LD_INT 105
22485: PUSH
22486: LD_INT 106
22488: PUSH
22489: LD_INT 108
22491: PUSH
22492: LD_INT 109
22494: PUSH
22495: LD_INT 112
22497: PUSH
22498: LD_INT 116
22500: PUSH
22501: LD_INT 117
22503: PUSH
22504: LD_INT 118
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: ST_TO_ADDR
22523: GO 25046
22525: LD_INT 7
22527: DOUBLE
22528: EQUAL
22529: IFTRUE 22533
22531: GO 22645
22533: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22534: LD_ADDR_VAR 0 2
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 4
22544: PUSH
22545: LD_INT 5
22547: PUSH
22548: LD_INT 7
22550: PUSH
22551: LD_INT 11
22553: PUSH
22554: LD_INT 12
22556: PUSH
22557: LD_INT 15
22559: PUSH
22560: LD_INT 16
22562: PUSH
22563: LD_INT 20
22565: PUSH
22566: LD_INT 21
22568: PUSH
22569: LD_INT 22
22571: PUSH
22572: LD_INT 23
22574: PUSH
22575: LD_INT 25
22577: PUSH
22578: LD_INT 26
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 101
22599: PUSH
22600: LD_INT 102
22602: PUSH
22603: LD_INT 103
22605: PUSH
22606: LD_INT 105
22608: PUSH
22609: LD_INT 106
22611: PUSH
22612: LD_INT 108
22614: PUSH
22615: LD_INT 112
22617: PUSH
22618: LD_INT 116
22620: PUSH
22621: LD_INT 117
22623: PUSH
22624: LD_INT 118
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: ST_TO_ADDR
22643: GO 25046
22645: LD_INT 8
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22793
22653: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: LD_INT 4
22664: PUSH
22665: LD_INT 5
22667: PUSH
22668: LD_INT 6
22670: PUSH
22671: LD_INT 7
22673: PUSH
22674: LD_INT 8
22676: PUSH
22677: LD_INT 11
22679: PUSH
22680: LD_INT 12
22682: PUSH
22683: LD_INT 15
22685: PUSH
22686: LD_INT 16
22688: PUSH
22689: LD_INT 20
22691: PUSH
22692: LD_INT 21
22694: PUSH
22695: LD_INT 22
22697: PUSH
22698: LD_INT 23
22700: PUSH
22701: LD_INT 25
22703: PUSH
22704: LD_INT 26
22706: PUSH
22707: LD_INT 30
22709: PUSH
22710: LD_INT 31
22712: PUSH
22713: LD_INT 32
22715: PUSH
22716: LD_INT 36
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 101
22743: PUSH
22744: LD_INT 102
22746: PUSH
22747: LD_INT 103
22749: PUSH
22750: LD_INT 105
22752: PUSH
22753: LD_INT 106
22755: PUSH
22756: LD_INT 108
22758: PUSH
22759: LD_INT 109
22761: PUSH
22762: LD_INT 112
22764: PUSH
22765: LD_INT 116
22767: PUSH
22768: LD_INT 117
22770: PUSH
22771: LD_INT 118
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: ST_TO_ADDR
22791: GO 25046
22793: LD_INT 9
22795: DOUBLE
22796: EQUAL
22797: IFTRUE 22801
22799: GO 22949
22801: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22802: LD_ADDR_VAR 0 2
22806: PUSH
22807: LD_INT 2
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: LD_INT 6
22818: PUSH
22819: LD_INT 7
22821: PUSH
22822: LD_INT 8
22824: PUSH
22825: LD_INT 11
22827: PUSH
22828: LD_INT 12
22830: PUSH
22831: LD_INT 15
22833: PUSH
22834: LD_INT 16
22836: PUSH
22837: LD_INT 20
22839: PUSH
22840: LD_INT 21
22842: PUSH
22843: LD_INT 22
22845: PUSH
22846: LD_INT 23
22848: PUSH
22849: LD_INT 25
22851: PUSH
22852: LD_INT 26
22854: PUSH
22855: LD_INT 28
22857: PUSH
22858: LD_INT 30
22860: PUSH
22861: LD_INT 31
22863: PUSH
22864: LD_INT 32
22866: PUSH
22867: LD_INT 36
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 101
22895: PUSH
22896: LD_INT 102
22898: PUSH
22899: LD_INT 103
22901: PUSH
22902: LD_INT 105
22904: PUSH
22905: LD_INT 106
22907: PUSH
22908: LD_INT 108
22910: PUSH
22911: LD_INT 109
22913: PUSH
22914: LD_INT 112
22916: PUSH
22917: LD_INT 114
22919: PUSH
22920: LD_INT 116
22922: PUSH
22923: LD_INT 117
22925: PUSH
22926: LD_INT 118
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: ST_TO_ADDR
22947: GO 25046
22949: LD_INT 10
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 23153
22957: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22958: LD_ADDR_VAR 0 2
22962: PUSH
22963: LD_INT 2
22965: PUSH
22966: LD_INT 4
22968: PUSH
22969: LD_INT 5
22971: PUSH
22972: LD_INT 6
22974: PUSH
22975: LD_INT 7
22977: PUSH
22978: LD_INT 8
22980: PUSH
22981: LD_INT 9
22983: PUSH
22984: LD_INT 10
22986: PUSH
22987: LD_INT 11
22989: PUSH
22990: LD_INT 12
22992: PUSH
22993: LD_INT 13
22995: PUSH
22996: LD_INT 14
22998: PUSH
22999: LD_INT 15
23001: PUSH
23002: LD_INT 16
23004: PUSH
23005: LD_INT 17
23007: PUSH
23008: LD_INT 18
23010: PUSH
23011: LD_INT 19
23013: PUSH
23014: LD_INT 20
23016: PUSH
23017: LD_INT 21
23019: PUSH
23020: LD_INT 22
23022: PUSH
23023: LD_INT 23
23025: PUSH
23026: LD_INT 24
23028: PUSH
23029: LD_INT 25
23031: PUSH
23032: LD_INT 26
23034: PUSH
23035: LD_INT 28
23037: PUSH
23038: LD_INT 30
23040: PUSH
23041: LD_INT 31
23043: PUSH
23044: LD_INT 32
23046: PUSH
23047: LD_INT 36
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 101
23083: PUSH
23084: LD_INT 102
23086: PUSH
23087: LD_INT 103
23089: PUSH
23090: LD_INT 104
23092: PUSH
23093: LD_INT 105
23095: PUSH
23096: LD_INT 106
23098: PUSH
23099: LD_INT 107
23101: PUSH
23102: LD_INT 108
23104: PUSH
23105: LD_INT 109
23107: PUSH
23108: LD_INT 110
23110: PUSH
23111: LD_INT 111
23113: PUSH
23114: LD_INT 112
23116: PUSH
23117: LD_INT 114
23119: PUSH
23120: LD_INT 116
23122: PUSH
23123: LD_INT 117
23125: PUSH
23126: LD_INT 118
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: ST_TO_ADDR
23151: GO 25046
23153: LD_INT 11
23155: DOUBLE
23156: EQUAL
23157: IFTRUE 23161
23159: GO 23365
23161: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23162: LD_ADDR_VAR 0 2
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: LD_INT 4
23175: PUSH
23176: LD_INT 5
23178: PUSH
23179: LD_INT 6
23181: PUSH
23182: LD_INT 7
23184: PUSH
23185: LD_INT 8
23187: PUSH
23188: LD_INT 9
23190: PUSH
23191: LD_INT 10
23193: PUSH
23194: LD_INT 11
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 13
23202: PUSH
23203: LD_INT 14
23205: PUSH
23206: LD_INT 15
23208: PUSH
23209: LD_INT 16
23211: PUSH
23212: LD_INT 17
23214: PUSH
23215: LD_INT 18
23217: PUSH
23218: LD_INT 19
23220: PUSH
23221: LD_INT 20
23223: PUSH
23224: LD_INT 21
23226: PUSH
23227: LD_INT 22
23229: PUSH
23230: LD_INT 23
23232: PUSH
23233: LD_INT 24
23235: PUSH
23236: LD_INT 25
23238: PUSH
23239: LD_INT 26
23241: PUSH
23242: LD_INT 28
23244: PUSH
23245: LD_INT 30
23247: PUSH
23248: LD_INT 31
23250: PUSH
23251: LD_INT 32
23253: PUSH
23254: LD_INT 34
23256: PUSH
23257: LD_INT 36
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 101
23295: PUSH
23296: LD_INT 102
23298: PUSH
23299: LD_INT 103
23301: PUSH
23302: LD_INT 104
23304: PUSH
23305: LD_INT 105
23307: PUSH
23308: LD_INT 106
23310: PUSH
23311: LD_INT 107
23313: PUSH
23314: LD_INT 108
23316: PUSH
23317: LD_INT 109
23319: PUSH
23320: LD_INT 110
23322: PUSH
23323: LD_INT 111
23325: PUSH
23326: LD_INT 112
23328: PUSH
23329: LD_INT 114
23331: PUSH
23332: LD_INT 116
23334: PUSH
23335: LD_INT 117
23337: PUSH
23338: LD_INT 118
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: ST_TO_ADDR
23363: GO 25046
23365: LD_INT 12
23367: DOUBLE
23368: EQUAL
23369: IFTRUE 23373
23371: GO 23593
23373: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23374: LD_ADDR_VAR 0 2
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: LD_INT 3
23387: PUSH
23388: LD_INT 4
23390: PUSH
23391: LD_INT 5
23393: PUSH
23394: LD_INT 6
23396: PUSH
23397: LD_INT 7
23399: PUSH
23400: LD_INT 8
23402: PUSH
23403: LD_INT 9
23405: PUSH
23406: LD_INT 10
23408: PUSH
23409: LD_INT 11
23411: PUSH
23412: LD_INT 12
23414: PUSH
23415: LD_INT 13
23417: PUSH
23418: LD_INT 14
23420: PUSH
23421: LD_INT 15
23423: PUSH
23424: LD_INT 16
23426: PUSH
23427: LD_INT 17
23429: PUSH
23430: LD_INT 18
23432: PUSH
23433: LD_INT 19
23435: PUSH
23436: LD_INT 20
23438: PUSH
23439: LD_INT 21
23441: PUSH
23442: LD_INT 22
23444: PUSH
23445: LD_INT 23
23447: PUSH
23448: LD_INT 24
23450: PUSH
23451: LD_INT 25
23453: PUSH
23454: LD_INT 26
23456: PUSH
23457: LD_INT 27
23459: PUSH
23460: LD_INT 28
23462: PUSH
23463: LD_INT 30
23465: PUSH
23466: LD_INT 31
23468: PUSH
23469: LD_INT 32
23471: PUSH
23472: LD_INT 33
23474: PUSH
23475: LD_INT 34
23477: PUSH
23478: LD_INT 36
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 101
23519: PUSH
23520: LD_INT 102
23522: PUSH
23523: LD_INT 103
23525: PUSH
23526: LD_INT 104
23528: PUSH
23529: LD_INT 105
23531: PUSH
23532: LD_INT 106
23534: PUSH
23535: LD_INT 107
23537: PUSH
23538: LD_INT 108
23540: PUSH
23541: LD_INT 109
23543: PUSH
23544: LD_INT 110
23546: PUSH
23547: LD_INT 111
23549: PUSH
23550: LD_INT 112
23552: PUSH
23553: LD_INT 113
23555: PUSH
23556: LD_INT 114
23558: PUSH
23559: LD_INT 116
23561: PUSH
23562: LD_INT 117
23564: PUSH
23565: LD_INT 118
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: ST_TO_ADDR
23591: GO 25046
23593: LD_INT 13
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23809
23601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23602: LD_ADDR_VAR 0 2
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: LD_INT 3
23615: PUSH
23616: LD_INT 4
23618: PUSH
23619: LD_INT 5
23621: PUSH
23622: LD_INT 8
23624: PUSH
23625: LD_INT 9
23627: PUSH
23628: LD_INT 10
23630: PUSH
23631: LD_INT 11
23633: PUSH
23634: LD_INT 12
23636: PUSH
23637: LD_INT 14
23639: PUSH
23640: LD_INT 15
23642: PUSH
23643: LD_INT 16
23645: PUSH
23646: LD_INT 17
23648: PUSH
23649: LD_INT 18
23651: PUSH
23652: LD_INT 19
23654: PUSH
23655: LD_INT 20
23657: PUSH
23658: LD_INT 21
23660: PUSH
23661: LD_INT 22
23663: PUSH
23664: LD_INT 23
23666: PUSH
23667: LD_INT 24
23669: PUSH
23670: LD_INT 25
23672: PUSH
23673: LD_INT 26
23675: PUSH
23676: LD_INT 27
23678: PUSH
23679: LD_INT 28
23681: PUSH
23682: LD_INT 30
23684: PUSH
23685: LD_INT 31
23687: PUSH
23688: LD_INT 32
23690: PUSH
23691: LD_INT 33
23693: PUSH
23694: LD_INT 34
23696: PUSH
23697: LD_INT 36
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 101
23735: PUSH
23736: LD_INT 102
23738: PUSH
23739: LD_INT 103
23741: PUSH
23742: LD_INT 104
23744: PUSH
23745: LD_INT 105
23747: PUSH
23748: LD_INT 106
23750: PUSH
23751: LD_INT 107
23753: PUSH
23754: LD_INT 108
23756: PUSH
23757: LD_INT 109
23759: PUSH
23760: LD_INT 110
23762: PUSH
23763: LD_INT 111
23765: PUSH
23766: LD_INT 112
23768: PUSH
23769: LD_INT 113
23771: PUSH
23772: LD_INT 114
23774: PUSH
23775: LD_INT 116
23777: PUSH
23778: LD_INT 117
23780: PUSH
23781: LD_INT 118
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: ST_TO_ADDR
23807: GO 25046
23809: LD_INT 14
23811: DOUBLE
23812: EQUAL
23813: IFTRUE 23817
23815: GO 24041
23817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23818: LD_ADDR_VAR 0 2
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 3
23831: PUSH
23832: LD_INT 4
23834: PUSH
23835: LD_INT 5
23837: PUSH
23838: LD_INT 6
23840: PUSH
23841: LD_INT 7
23843: PUSH
23844: LD_INT 8
23846: PUSH
23847: LD_INT 9
23849: PUSH
23850: LD_INT 10
23852: PUSH
23853: LD_INT 11
23855: PUSH
23856: LD_INT 12
23858: PUSH
23859: LD_INT 13
23861: PUSH
23862: LD_INT 14
23864: PUSH
23865: LD_INT 15
23867: PUSH
23868: LD_INT 16
23870: PUSH
23871: LD_INT 17
23873: PUSH
23874: LD_INT 18
23876: PUSH
23877: LD_INT 19
23879: PUSH
23880: LD_INT 20
23882: PUSH
23883: LD_INT 21
23885: PUSH
23886: LD_INT 22
23888: PUSH
23889: LD_INT 23
23891: PUSH
23892: LD_INT 24
23894: PUSH
23895: LD_INT 25
23897: PUSH
23898: LD_INT 26
23900: PUSH
23901: LD_INT 27
23903: PUSH
23904: LD_INT 28
23906: PUSH
23907: LD_INT 29
23909: PUSH
23910: LD_INT 30
23912: PUSH
23913: LD_INT 31
23915: PUSH
23916: LD_INT 32
23918: PUSH
23919: LD_INT 33
23921: PUSH
23922: LD_INT 34
23924: PUSH
23925: LD_INT 36
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 101
23967: PUSH
23968: LD_INT 102
23970: PUSH
23971: LD_INT 103
23973: PUSH
23974: LD_INT 104
23976: PUSH
23977: LD_INT 105
23979: PUSH
23980: LD_INT 106
23982: PUSH
23983: LD_INT 107
23985: PUSH
23986: LD_INT 108
23988: PUSH
23989: LD_INT 109
23991: PUSH
23992: LD_INT 110
23994: PUSH
23995: LD_INT 111
23997: PUSH
23998: LD_INT 112
24000: PUSH
24001: LD_INT 113
24003: PUSH
24004: LD_INT 114
24006: PUSH
24007: LD_INT 116
24009: PUSH
24010: LD_INT 117
24012: PUSH
24013: LD_INT 118
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: ST_TO_ADDR
24039: GO 25046
24041: LD_INT 15
24043: DOUBLE
24044: EQUAL
24045: IFTRUE 24049
24047: GO 24273
24049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24050: LD_ADDR_VAR 0 2
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: LD_INT 4
24066: PUSH
24067: LD_INT 5
24069: PUSH
24070: LD_INT 6
24072: PUSH
24073: LD_INT 7
24075: PUSH
24076: LD_INT 8
24078: PUSH
24079: LD_INT 9
24081: PUSH
24082: LD_INT 10
24084: PUSH
24085: LD_INT 11
24087: PUSH
24088: LD_INT 12
24090: PUSH
24091: LD_INT 13
24093: PUSH
24094: LD_INT 14
24096: PUSH
24097: LD_INT 15
24099: PUSH
24100: LD_INT 16
24102: PUSH
24103: LD_INT 17
24105: PUSH
24106: LD_INT 18
24108: PUSH
24109: LD_INT 19
24111: PUSH
24112: LD_INT 20
24114: PUSH
24115: LD_INT 21
24117: PUSH
24118: LD_INT 22
24120: PUSH
24121: LD_INT 23
24123: PUSH
24124: LD_INT 24
24126: PUSH
24127: LD_INT 25
24129: PUSH
24130: LD_INT 26
24132: PUSH
24133: LD_INT 27
24135: PUSH
24136: LD_INT 28
24138: PUSH
24139: LD_INT 29
24141: PUSH
24142: LD_INT 30
24144: PUSH
24145: LD_INT 31
24147: PUSH
24148: LD_INT 32
24150: PUSH
24151: LD_INT 33
24153: PUSH
24154: LD_INT 34
24156: PUSH
24157: LD_INT 36
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 101
24199: PUSH
24200: LD_INT 102
24202: PUSH
24203: LD_INT 103
24205: PUSH
24206: LD_INT 104
24208: PUSH
24209: LD_INT 105
24211: PUSH
24212: LD_INT 106
24214: PUSH
24215: LD_INT 107
24217: PUSH
24218: LD_INT 108
24220: PUSH
24221: LD_INT 109
24223: PUSH
24224: LD_INT 110
24226: PUSH
24227: LD_INT 111
24229: PUSH
24230: LD_INT 112
24232: PUSH
24233: LD_INT 113
24235: PUSH
24236: LD_INT 114
24238: PUSH
24239: LD_INT 116
24241: PUSH
24242: LD_INT 117
24244: PUSH
24245: LD_INT 118
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: ST_TO_ADDR
24271: GO 25046
24273: LD_INT 16
24275: DOUBLE
24276: EQUAL
24277: IFTRUE 24281
24279: GO 24417
24281: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24282: LD_ADDR_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: LD_INT 4
24292: PUSH
24293: LD_INT 5
24295: PUSH
24296: LD_INT 7
24298: PUSH
24299: LD_INT 11
24301: PUSH
24302: LD_INT 12
24304: PUSH
24305: LD_INT 15
24307: PUSH
24308: LD_INT 16
24310: PUSH
24311: LD_INT 20
24313: PUSH
24314: LD_INT 21
24316: PUSH
24317: LD_INT 22
24319: PUSH
24320: LD_INT 23
24322: PUSH
24323: LD_INT 25
24325: PUSH
24326: LD_INT 26
24328: PUSH
24329: LD_INT 30
24331: PUSH
24332: LD_INT 31
24334: PUSH
24335: LD_INT 32
24337: PUSH
24338: LD_INT 33
24340: PUSH
24341: LD_INT 34
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 101
24367: PUSH
24368: LD_INT 102
24370: PUSH
24371: LD_INT 103
24373: PUSH
24374: LD_INT 106
24376: PUSH
24377: LD_INT 108
24379: PUSH
24380: LD_INT 112
24382: PUSH
24383: LD_INT 113
24385: PUSH
24386: LD_INT 114
24388: PUSH
24389: LD_INT 116
24391: PUSH
24392: LD_INT 117
24394: PUSH
24395: LD_INT 118
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: ST_TO_ADDR
24415: GO 25046
24417: LD_INT 17
24419: DOUBLE
24420: EQUAL
24421: IFTRUE 24425
24423: GO 24649
24425: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24426: LD_ADDR_VAR 0 2
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: LD_INT 2
24436: PUSH
24437: LD_INT 3
24439: PUSH
24440: LD_INT 4
24442: PUSH
24443: LD_INT 5
24445: PUSH
24446: LD_INT 6
24448: PUSH
24449: LD_INT 7
24451: PUSH
24452: LD_INT 8
24454: PUSH
24455: LD_INT 9
24457: PUSH
24458: LD_INT 10
24460: PUSH
24461: LD_INT 11
24463: PUSH
24464: LD_INT 12
24466: PUSH
24467: LD_INT 13
24469: PUSH
24470: LD_INT 14
24472: PUSH
24473: LD_INT 15
24475: PUSH
24476: LD_INT 16
24478: PUSH
24479: LD_INT 17
24481: PUSH
24482: LD_INT 18
24484: PUSH
24485: LD_INT 19
24487: PUSH
24488: LD_INT 20
24490: PUSH
24491: LD_INT 21
24493: PUSH
24494: LD_INT 22
24496: PUSH
24497: LD_INT 23
24499: PUSH
24500: LD_INT 24
24502: PUSH
24503: LD_INT 25
24505: PUSH
24506: LD_INT 26
24508: PUSH
24509: LD_INT 27
24511: PUSH
24512: LD_INT 28
24514: PUSH
24515: LD_INT 29
24517: PUSH
24518: LD_INT 30
24520: PUSH
24521: LD_INT 31
24523: PUSH
24524: LD_INT 32
24526: PUSH
24527: LD_INT 33
24529: PUSH
24530: LD_INT 34
24532: PUSH
24533: LD_INT 36
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 101
24575: PUSH
24576: LD_INT 102
24578: PUSH
24579: LD_INT 103
24581: PUSH
24582: LD_INT 104
24584: PUSH
24585: LD_INT 105
24587: PUSH
24588: LD_INT 106
24590: PUSH
24591: LD_INT 107
24593: PUSH
24594: LD_INT 108
24596: PUSH
24597: LD_INT 109
24599: PUSH
24600: LD_INT 110
24602: PUSH
24603: LD_INT 111
24605: PUSH
24606: LD_INT 112
24608: PUSH
24609: LD_INT 113
24611: PUSH
24612: LD_INT 114
24614: PUSH
24615: LD_INT 116
24617: PUSH
24618: LD_INT 117
24620: PUSH
24621: LD_INT 118
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: ST_TO_ADDR
24647: GO 25046
24649: LD_INT 18
24651: DOUBLE
24652: EQUAL
24653: IFTRUE 24657
24655: GO 24805
24657: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_INT 2
24665: PUSH
24666: LD_INT 4
24668: PUSH
24669: LD_INT 5
24671: PUSH
24672: LD_INT 7
24674: PUSH
24675: LD_INT 11
24677: PUSH
24678: LD_INT 12
24680: PUSH
24681: LD_INT 15
24683: PUSH
24684: LD_INT 16
24686: PUSH
24687: LD_INT 20
24689: PUSH
24690: LD_INT 21
24692: PUSH
24693: LD_INT 22
24695: PUSH
24696: LD_INT 23
24698: PUSH
24699: LD_INT 25
24701: PUSH
24702: LD_INT 26
24704: PUSH
24705: LD_INT 30
24707: PUSH
24708: LD_INT 31
24710: PUSH
24711: LD_INT 32
24713: PUSH
24714: LD_INT 33
24716: PUSH
24717: LD_INT 34
24719: PUSH
24720: LD_INT 35
24722: PUSH
24723: LD_INT 36
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 101
24751: PUSH
24752: LD_INT 102
24754: PUSH
24755: LD_INT 103
24757: PUSH
24758: LD_INT 106
24760: PUSH
24761: LD_INT 108
24763: PUSH
24764: LD_INT 112
24766: PUSH
24767: LD_INT 113
24769: PUSH
24770: LD_INT 114
24772: PUSH
24773: LD_INT 115
24775: PUSH
24776: LD_INT 116
24778: PUSH
24779: LD_INT 117
24781: PUSH
24782: LD_INT 118
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: ST_TO_ADDR
24803: GO 25046
24805: LD_INT 19
24807: DOUBLE
24808: EQUAL
24809: IFTRUE 24813
24811: GO 25045
24813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24814: LD_ADDR_VAR 0 2
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 2
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: LD_INT 4
24830: PUSH
24831: LD_INT 5
24833: PUSH
24834: LD_INT 6
24836: PUSH
24837: LD_INT 7
24839: PUSH
24840: LD_INT 8
24842: PUSH
24843: LD_INT 9
24845: PUSH
24846: LD_INT 10
24848: PUSH
24849: LD_INT 11
24851: PUSH
24852: LD_INT 12
24854: PUSH
24855: LD_INT 13
24857: PUSH
24858: LD_INT 14
24860: PUSH
24861: LD_INT 15
24863: PUSH
24864: LD_INT 16
24866: PUSH
24867: LD_INT 17
24869: PUSH
24870: LD_INT 18
24872: PUSH
24873: LD_INT 19
24875: PUSH
24876: LD_INT 20
24878: PUSH
24879: LD_INT 21
24881: PUSH
24882: LD_INT 22
24884: PUSH
24885: LD_INT 23
24887: PUSH
24888: LD_INT 24
24890: PUSH
24891: LD_INT 25
24893: PUSH
24894: LD_INT 26
24896: PUSH
24897: LD_INT 27
24899: PUSH
24900: LD_INT 28
24902: PUSH
24903: LD_INT 29
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 31
24911: PUSH
24912: LD_INT 32
24914: PUSH
24915: LD_INT 33
24917: PUSH
24918: LD_INT 34
24920: PUSH
24921: LD_INT 35
24923: PUSH
24924: LD_INT 36
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 101
24967: PUSH
24968: LD_INT 102
24970: PUSH
24971: LD_INT 103
24973: PUSH
24974: LD_INT 104
24976: PUSH
24977: LD_INT 105
24979: PUSH
24980: LD_INT 106
24982: PUSH
24983: LD_INT 107
24985: PUSH
24986: LD_INT 108
24988: PUSH
24989: LD_INT 109
24991: PUSH
24992: LD_INT 110
24994: PUSH
24995: LD_INT 111
24997: PUSH
24998: LD_INT 112
25000: PUSH
25001: LD_INT 113
25003: PUSH
25004: LD_INT 114
25006: PUSH
25007: LD_INT 115
25009: PUSH
25010: LD_INT 116
25012: PUSH
25013: LD_INT 117
25015: PUSH
25016: LD_INT 118
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: ST_TO_ADDR
25043: GO 25046
25045: POP
// end else
25046: GO 25277
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25048: LD_ADDR_VAR 0 2
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 2
25058: PUSH
25059: LD_INT 3
25061: PUSH
25062: LD_INT 4
25064: PUSH
25065: LD_INT 5
25067: PUSH
25068: LD_INT 6
25070: PUSH
25071: LD_INT 7
25073: PUSH
25074: LD_INT 8
25076: PUSH
25077: LD_INT 9
25079: PUSH
25080: LD_INT 10
25082: PUSH
25083: LD_INT 11
25085: PUSH
25086: LD_INT 12
25088: PUSH
25089: LD_INT 13
25091: PUSH
25092: LD_INT 14
25094: PUSH
25095: LD_INT 15
25097: PUSH
25098: LD_INT 16
25100: PUSH
25101: LD_INT 17
25103: PUSH
25104: LD_INT 18
25106: PUSH
25107: LD_INT 19
25109: PUSH
25110: LD_INT 20
25112: PUSH
25113: LD_INT 21
25115: PUSH
25116: LD_INT 22
25118: PUSH
25119: LD_INT 23
25121: PUSH
25122: LD_INT 24
25124: PUSH
25125: LD_INT 25
25127: PUSH
25128: LD_INT 26
25130: PUSH
25131: LD_INT 27
25133: PUSH
25134: LD_INT 28
25136: PUSH
25137: LD_INT 29
25139: PUSH
25140: LD_INT 30
25142: PUSH
25143: LD_INT 31
25145: PUSH
25146: LD_INT 32
25148: PUSH
25149: LD_INT 33
25151: PUSH
25152: LD_INT 34
25154: PUSH
25155: LD_INT 35
25157: PUSH
25158: LD_INT 36
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 101
25201: PUSH
25202: LD_INT 102
25204: PUSH
25205: LD_INT 103
25207: PUSH
25208: LD_INT 104
25210: PUSH
25211: LD_INT 105
25213: PUSH
25214: LD_INT 106
25216: PUSH
25217: LD_INT 107
25219: PUSH
25220: LD_INT 108
25222: PUSH
25223: LD_INT 109
25225: PUSH
25226: LD_INT 110
25228: PUSH
25229: LD_INT 111
25231: PUSH
25232: LD_INT 112
25234: PUSH
25235: LD_INT 113
25237: PUSH
25238: LD_INT 114
25240: PUSH
25241: LD_INT 115
25243: PUSH
25244: LD_INT 116
25246: PUSH
25247: LD_INT 117
25249: PUSH
25250: LD_INT 118
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: ST_TO_ADDR
// if result then
25277: LD_VAR 0 2
25281: IFFALSE 26067
// begin normal :=  ;
25283: LD_ADDR_VAR 0 5
25287: PUSH
25288: LD_STRING 
25290: ST_TO_ADDR
// hardcore :=  ;
25291: LD_ADDR_VAR 0 6
25295: PUSH
25296: LD_STRING 
25298: ST_TO_ADDR
// active :=  ;
25299: LD_ADDR_VAR 0 7
25303: PUSH
25304: LD_STRING 
25306: ST_TO_ADDR
// for i = 1 to normalCounter do
25307: LD_ADDR_VAR 0 8
25311: PUSH
25312: DOUBLE
25313: LD_INT 1
25315: DEC
25316: ST_TO_ADDR
25317: LD_EXP 53
25321: PUSH
25322: FOR_TO
25323: IFFALSE 25424
// begin tmp := 0 ;
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_STRING 0
25332: ST_TO_ADDR
// if result [ 1 ] then
25333: LD_VAR 0 2
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: IFFALSE 25406
// if result [ 1 ] [ 1 ] = i then
25343: LD_VAR 0 2
25347: PUSH
25348: LD_INT 1
25350: ARRAY
25351: PUSH
25352: LD_INT 1
25354: ARRAY
25355: PUSH
25356: LD_VAR 0 8
25360: EQUAL
25361: IFFALSE 25406
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25363: LD_ADDR_VAR 0 2
25367: PUSH
25368: LD_VAR 0 2
25372: PPUSH
25373: LD_INT 1
25375: PPUSH
25376: LD_VAR 0 2
25380: PUSH
25381: LD_INT 1
25383: ARRAY
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: CALL_OW 3
25392: PPUSH
25393: CALL_OW 1
25397: ST_TO_ADDR
// tmp := 1 ;
25398: LD_ADDR_VAR 0 3
25402: PUSH
25403: LD_STRING 1
25405: ST_TO_ADDR
// end ; normal := normal & tmp ;
25406: LD_ADDR_VAR 0 5
25410: PUSH
25411: LD_VAR 0 5
25415: PUSH
25416: LD_VAR 0 3
25420: STR
25421: ST_TO_ADDR
// end ;
25422: GO 25322
25424: POP
25425: POP
// for i = 1 to hardcoreCounter do
25426: LD_ADDR_VAR 0 8
25430: PUSH
25431: DOUBLE
25432: LD_INT 1
25434: DEC
25435: ST_TO_ADDR
25436: LD_EXP 54
25440: PUSH
25441: FOR_TO
25442: IFFALSE 25547
// begin tmp := 0 ;
25444: LD_ADDR_VAR 0 3
25448: PUSH
25449: LD_STRING 0
25451: ST_TO_ADDR
// if result [ 2 ] then
25452: LD_VAR 0 2
25456: PUSH
25457: LD_INT 2
25459: ARRAY
25460: IFFALSE 25529
// if result [ 2 ] [ 1 ] = 100 + i then
25462: LD_VAR 0 2
25466: PUSH
25467: LD_INT 2
25469: ARRAY
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: PUSH
25475: LD_INT 100
25477: PUSH
25478: LD_VAR 0 8
25482: PLUS
25483: EQUAL
25484: IFFALSE 25529
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25486: LD_ADDR_VAR 0 2
25490: PUSH
25491: LD_VAR 0 2
25495: PPUSH
25496: LD_INT 2
25498: PPUSH
25499: LD_VAR 0 2
25503: PUSH
25504: LD_INT 2
25506: ARRAY
25507: PPUSH
25508: LD_INT 1
25510: PPUSH
25511: CALL_OW 3
25515: PPUSH
25516: CALL_OW 1
25520: ST_TO_ADDR
// tmp := 1 ;
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_STRING 1
25528: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25529: LD_ADDR_VAR 0 6
25533: PUSH
25534: LD_VAR 0 6
25538: PUSH
25539: LD_VAR 0 3
25543: STR
25544: ST_TO_ADDR
// end ;
25545: GO 25441
25547: POP
25548: POP
// if isGameLoad then
25549: LD_VAR 0 1
25553: IFFALSE 26028
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25555: LD_ADDR_VAR 0 4
25559: PUSH
25560: LD_EXP 57
25564: PUSH
25565: LD_EXP 56
25569: PUSH
25570: LD_EXP 58
25574: PUSH
25575: LD_EXP 55
25579: PUSH
25580: LD_EXP 59
25584: PUSH
25585: LD_EXP 60
25589: PUSH
25590: LD_EXP 61
25594: PUSH
25595: LD_EXP 62
25599: PUSH
25600: LD_EXP 63
25604: PUSH
25605: LD_EXP 64
25609: PUSH
25610: LD_EXP 65
25614: PUSH
25615: LD_EXP 66
25619: PUSH
25620: LD_EXP 67
25624: PUSH
25625: LD_EXP 68
25629: PUSH
25630: LD_EXP 76
25634: PUSH
25635: LD_EXP 77
25639: PUSH
25640: LD_EXP 78
25644: PUSH
25645: LD_EXP 79
25649: PUSH
25650: LD_EXP 81
25654: PUSH
25655: LD_EXP 82
25659: PUSH
25660: LD_EXP 83
25664: PUSH
25665: LD_EXP 86
25669: PUSH
25670: LD_EXP 88
25674: PUSH
25675: LD_EXP 89
25679: PUSH
25680: LD_EXP 90
25684: PUSH
25685: LD_EXP 92
25689: PUSH
25690: LD_EXP 93
25694: PUSH
25695: LD_EXP 96
25699: PUSH
25700: LD_EXP 97
25704: PUSH
25705: LD_EXP 98
25709: PUSH
25710: LD_EXP 99
25714: PUSH
25715: LD_EXP 100
25719: PUSH
25720: LD_EXP 101
25724: PUSH
25725: LD_EXP 102
25729: PUSH
25730: LD_EXP 103
25734: PUSH
25735: LD_EXP 104
25739: PUSH
25740: LD_EXP 69
25744: PUSH
25745: LD_EXP 70
25749: PUSH
25750: LD_EXP 73
25754: PUSH
25755: LD_EXP 74
25759: PUSH
25760: LD_EXP 75
25764: PUSH
25765: LD_EXP 71
25769: PUSH
25770: LD_EXP 72
25774: PUSH
25775: LD_EXP 80
25779: PUSH
25780: LD_EXP 84
25784: PUSH
25785: LD_EXP 85
25789: PUSH
25790: LD_EXP 87
25794: PUSH
25795: LD_EXP 91
25799: PUSH
25800: LD_EXP 94
25804: PUSH
25805: LD_EXP 95
25809: PUSH
25810: LD_EXP 105
25814: PUSH
25815: LD_EXP 106
25819: PUSH
25820: LD_EXP 107
25824: PUSH
25825: LD_EXP 108
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: ST_TO_ADDR
// tmp :=  ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_STRING 
25893: ST_TO_ADDR
// for i = 1 to normalCounter do
25894: LD_ADDR_VAR 0 8
25898: PUSH
25899: DOUBLE
25900: LD_INT 1
25902: DEC
25903: ST_TO_ADDR
25904: LD_EXP 53
25908: PUSH
25909: FOR_TO
25910: IFFALSE 25946
// begin if flags [ i ] then
25912: LD_VAR 0 4
25916: PUSH
25917: LD_VAR 0 8
25921: ARRAY
25922: IFFALSE 25944
// tmp := tmp & i & ; ;
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_VAR 0 3
25933: PUSH
25934: LD_VAR 0 8
25938: STR
25939: PUSH
25940: LD_STRING ;
25942: STR
25943: ST_TO_ADDR
// end ;
25944: GO 25909
25946: POP
25947: POP
// for i = 1 to hardcoreCounter do
25948: LD_ADDR_VAR 0 8
25952: PUSH
25953: DOUBLE
25954: LD_INT 1
25956: DEC
25957: ST_TO_ADDR
25958: LD_EXP 54
25962: PUSH
25963: FOR_TO
25964: IFFALSE 26010
// begin if flags [ normalCounter + i ] then
25966: LD_VAR 0 4
25970: PUSH
25971: LD_EXP 53
25975: PUSH
25976: LD_VAR 0 8
25980: PLUS
25981: ARRAY
25982: IFFALSE 26008
// tmp := tmp & ( 100 + i ) & ; ;
25984: LD_ADDR_VAR 0 3
25988: PUSH
25989: LD_VAR 0 3
25993: PUSH
25994: LD_INT 100
25996: PUSH
25997: LD_VAR 0 8
26001: PLUS
26002: STR
26003: PUSH
26004: LD_STRING ;
26006: STR
26007: ST_TO_ADDR
// end ;
26008: GO 25963
26010: POP
26011: POP
// if tmp then
26012: LD_VAR 0 3
26016: IFFALSE 26028
// active := tmp ;
26018: LD_ADDR_VAR 0 7
26022: PUSH
26023: LD_VAR 0 3
26027: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26028: LD_STRING getStreamItemsFromMission("
26030: PUSH
26031: LD_VAR 0 5
26035: STR
26036: PUSH
26037: LD_STRING ","
26039: STR
26040: PUSH
26041: LD_VAR 0 6
26045: STR
26046: PUSH
26047: LD_STRING ","
26049: STR
26050: PUSH
26051: LD_VAR 0 7
26055: STR
26056: PUSH
26057: LD_STRING ")
26059: STR
26060: PPUSH
26061: CALL_OW 559
// end else
26065: GO 26074
// ToLua ( getStreamItemsFromMission("","","") ) ;
26067: LD_STRING getStreamItemsFromMission("","","")
26069: PPUSH
26070: CALL_OW 559
// end ;
26074: LD_VAR 0 2
26078: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26079: LD_EXP 52
26083: PUSH
26084: LD_EXP 57
26088: AND
26089: IFFALSE 26213
26091: GO 26093
26093: DISABLE
26094: LD_INT 0
26096: PPUSH
26097: PPUSH
// begin enable ;
26098: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26099: LD_ADDR_VAR 0 2
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 34
26121: PUSH
26122: LD_INT 7
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 34
26131: PUSH
26132: LD_INT 45
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 34
26141: PUSH
26142: LD_INT 28
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 34
26151: PUSH
26152: LD_INT 47
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PPUSH
26170: CALL_OW 69
26174: ST_TO_ADDR
// if not tmp then
26175: LD_VAR 0 2
26179: NOT
26180: IFFALSE 26184
// exit ;
26182: GO 26213
// for i in tmp do
26184: LD_ADDR_VAR 0 1
26188: PUSH
26189: LD_VAR 0 2
26193: PUSH
26194: FOR_IN
26195: IFFALSE 26211
// begin SetLives ( i , 0 ) ;
26197: LD_VAR 0 1
26201: PPUSH
26202: LD_INT 0
26204: PPUSH
26205: CALL_OW 234
// end ;
26209: GO 26194
26211: POP
26212: POP
// end ;
26213: PPOPN 2
26215: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26216: LD_EXP 52
26220: PUSH
26221: LD_EXP 58
26225: AND
26226: IFFALSE 26310
26228: GO 26230
26230: DISABLE
26231: LD_INT 0
26233: PPUSH
26234: PPUSH
// begin enable ;
26235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26236: LD_ADDR_VAR 0 2
26240: PUSH
26241: LD_INT 22
26243: PUSH
26244: LD_OWVAR 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 32
26255: PUSH
26256: LD_INT 3
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PPUSH
26267: CALL_OW 69
26271: ST_TO_ADDR
// if not tmp then
26272: LD_VAR 0 2
26276: NOT
26277: IFFALSE 26281
// exit ;
26279: GO 26310
// for i in tmp do
26281: LD_ADDR_VAR 0 1
26285: PUSH
26286: LD_VAR 0 2
26290: PUSH
26291: FOR_IN
26292: IFFALSE 26308
// begin SetLives ( i , 0 ) ;
26294: LD_VAR 0 1
26298: PPUSH
26299: LD_INT 0
26301: PPUSH
26302: CALL_OW 234
// end ;
26306: GO 26291
26308: POP
26309: POP
// end ;
26310: PPOPN 2
26312: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26313: LD_EXP 52
26317: PUSH
26318: LD_EXP 55
26322: AND
26323: IFFALSE 26416
26325: GO 26327
26327: DISABLE
26328: LD_INT 0
26330: PPUSH
// begin enable ;
26331: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26332: LD_ADDR_VAR 0 1
26336: PUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 25
26354: PUSH
26355: LD_INT 5
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 25
26364: PUSH
26365: LD_INT 9
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 25
26374: PUSH
26375: LD_INT 8
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PPUSH
26392: CALL_OW 69
26396: PUSH
26397: FOR_IN
26398: IFFALSE 26414
// begin SetClass ( i , 1 ) ;
26400: LD_VAR 0 1
26404: PPUSH
26405: LD_INT 1
26407: PPUSH
26408: CALL_OW 336
// end ;
26412: GO 26397
26414: POP
26415: POP
// end ;
26416: PPOPN 1
26418: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26419: LD_EXP 52
26423: PUSH
26424: LD_EXP 56
26428: AND
26429: PUSH
26430: LD_OWVAR 65
26434: PUSH
26435: LD_INT 7
26437: LESS
26438: AND
26439: IFFALSE 26453
26441: GO 26443
26443: DISABLE
// begin enable ;
26444: ENABLE
// game_speed := 7 ;
26445: LD_ADDR_OWVAR 65
26449: PUSH
26450: LD_INT 7
26452: ST_TO_ADDR
// end ;
26453: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26454: LD_EXP 52
26458: PUSH
26459: LD_EXP 59
26463: AND
26464: IFFALSE 26666
26466: GO 26468
26468: DISABLE
26469: LD_INT 0
26471: PPUSH
26472: PPUSH
26473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_INT 81
26481: PUSH
26482: LD_OWVAR 2
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 21
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PPUSH
26505: CALL_OW 69
26509: ST_TO_ADDR
// if not tmp then
26510: LD_VAR 0 3
26514: NOT
26515: IFFALSE 26519
// exit ;
26517: GO 26666
// if tmp > 5 then
26519: LD_VAR 0 3
26523: PUSH
26524: LD_INT 5
26526: GREATER
26527: IFFALSE 26539
// k := 5 else
26529: LD_ADDR_VAR 0 2
26533: PUSH
26534: LD_INT 5
26536: ST_TO_ADDR
26537: GO 26549
// k := tmp ;
26539: LD_ADDR_VAR 0 2
26543: PUSH
26544: LD_VAR 0 3
26548: ST_TO_ADDR
// for i := 1 to k do
26549: LD_ADDR_VAR 0 1
26553: PUSH
26554: DOUBLE
26555: LD_INT 1
26557: DEC
26558: ST_TO_ADDR
26559: LD_VAR 0 2
26563: PUSH
26564: FOR_TO
26565: IFFALSE 26664
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26567: LD_VAR 0 3
26571: PUSH
26572: LD_VAR 0 1
26576: ARRAY
26577: PPUSH
26578: LD_VAR 0 1
26582: PUSH
26583: LD_INT 4
26585: MOD
26586: PUSH
26587: LD_INT 1
26589: PLUS
26590: PPUSH
26591: CALL_OW 259
26595: PUSH
26596: LD_INT 10
26598: LESS
26599: IFFALSE 26662
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 1
26610: ARRAY
26611: PPUSH
26612: LD_VAR 0 1
26616: PUSH
26617: LD_INT 4
26619: MOD
26620: PUSH
26621: LD_INT 1
26623: PLUS
26624: PPUSH
26625: LD_VAR 0 3
26629: PUSH
26630: LD_VAR 0 1
26634: ARRAY
26635: PPUSH
26636: LD_VAR 0 1
26640: PUSH
26641: LD_INT 4
26643: MOD
26644: PUSH
26645: LD_INT 1
26647: PLUS
26648: PPUSH
26649: CALL_OW 259
26653: PUSH
26654: LD_INT 1
26656: PLUS
26657: PPUSH
26658: CALL_OW 237
26662: GO 26564
26664: POP
26665: POP
// end ;
26666: PPOPN 3
26668: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26669: LD_EXP 52
26673: PUSH
26674: LD_EXP 60
26678: AND
26679: IFFALSE 26699
26681: GO 26683
26683: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26684: LD_INT 4
26686: PPUSH
26687: LD_OWVAR 2
26691: PPUSH
26692: LD_INT 0
26694: PPUSH
26695: CALL_OW 324
26699: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26700: LD_EXP 52
26704: PUSH
26705: LD_EXP 89
26709: AND
26710: IFFALSE 26730
26712: GO 26714
26714: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26715: LD_INT 19
26717: PPUSH
26718: LD_OWVAR 2
26722: PPUSH
26723: LD_INT 0
26725: PPUSH
26726: CALL_OW 324
26730: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26731: LD_EXP 52
26735: PUSH
26736: LD_EXP 61
26740: AND
26741: IFFALSE 26843
26743: GO 26745
26745: DISABLE
26746: LD_INT 0
26748: PPUSH
26749: PPUSH
// begin enable ;
26750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26751: LD_ADDR_VAR 0 2
26755: PUSH
26756: LD_INT 22
26758: PUSH
26759: LD_OWVAR 2
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: LD_INT 34
26773: PUSH
26774: LD_INT 11
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 34
26783: PUSH
26784: LD_INT 30
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PPUSH
26800: CALL_OW 69
26804: ST_TO_ADDR
// if not tmp then
26805: LD_VAR 0 2
26809: NOT
26810: IFFALSE 26814
// exit ;
26812: GO 26843
// for i in tmp do
26814: LD_ADDR_VAR 0 1
26818: PUSH
26819: LD_VAR 0 2
26823: PUSH
26824: FOR_IN
26825: IFFALSE 26841
// begin SetLives ( i , 0 ) ;
26827: LD_VAR 0 1
26831: PPUSH
26832: LD_INT 0
26834: PPUSH
26835: CALL_OW 234
// end ;
26839: GO 26824
26841: POP
26842: POP
// end ;
26843: PPOPN 2
26845: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26846: LD_EXP 52
26850: PUSH
26851: LD_EXP 62
26855: AND
26856: IFFALSE 26876
26858: GO 26860
26860: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26861: LD_INT 32
26863: PPUSH
26864: LD_OWVAR 2
26868: PPUSH
26869: LD_INT 0
26871: PPUSH
26872: CALL_OW 324
26876: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26877: LD_EXP 52
26881: PUSH
26882: LD_EXP 63
26886: AND
26887: IFFALSE 27068
26889: GO 26891
26891: DISABLE
26892: LD_INT 0
26894: PPUSH
26895: PPUSH
26896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26897: LD_ADDR_VAR 0 2
26901: PUSH
26902: LD_INT 22
26904: PUSH
26905: LD_OWVAR 2
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 33
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PPUSH
26928: CALL_OW 69
26932: ST_TO_ADDR
// if not tmp then
26933: LD_VAR 0 2
26937: NOT
26938: IFFALSE 26942
// exit ;
26940: GO 27068
// side := 0 ;
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: LD_INT 0
26949: ST_TO_ADDR
// for i := 1 to 8 do
26950: LD_ADDR_VAR 0 1
26954: PUSH
26955: DOUBLE
26956: LD_INT 1
26958: DEC
26959: ST_TO_ADDR
26960: LD_INT 8
26962: PUSH
26963: FOR_TO
26964: IFFALSE 27012
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26966: LD_OWVAR 2
26970: PUSH
26971: LD_VAR 0 1
26975: NONEQUAL
26976: PUSH
26977: LD_OWVAR 2
26981: PPUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 81
26991: PUSH
26992: LD_INT 2
26994: EQUAL
26995: AND
26996: IFFALSE 27010
// begin side := i ;
26998: LD_ADDR_VAR 0 3
27002: PUSH
27003: LD_VAR 0 1
27007: ST_TO_ADDR
// break ;
27008: GO 27012
// end ;
27010: GO 26963
27012: POP
27013: POP
// if not side then
27014: LD_VAR 0 3
27018: NOT
27019: IFFALSE 27023
// exit ;
27021: GO 27068
// for i := 1 to tmp do
27023: LD_ADDR_VAR 0 1
27027: PUSH
27028: DOUBLE
27029: LD_INT 1
27031: DEC
27032: ST_TO_ADDR
27033: LD_VAR 0 2
27037: PUSH
27038: FOR_TO
27039: IFFALSE 27066
// if Prob ( 60 ) then
27041: LD_INT 60
27043: PPUSH
27044: CALL_OW 13
27048: IFFALSE 27064
// SetSide ( i , side ) ;
27050: LD_VAR 0 1
27054: PPUSH
27055: LD_VAR 0 3
27059: PPUSH
27060: CALL_OW 235
27064: GO 27038
27066: POP
27067: POP
// end ;
27068: PPOPN 3
27070: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27071: LD_EXP 52
27075: PUSH
27076: LD_EXP 65
27080: AND
27081: IFFALSE 27200
27083: GO 27085
27085: DISABLE
27086: LD_INT 0
27088: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27089: LD_ADDR_VAR 0 1
27093: PUSH
27094: LD_INT 22
27096: PUSH
27097: LD_OWVAR 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 21
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 3
27118: PUSH
27119: LD_INT 23
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: LIST
27137: PPUSH
27138: CALL_OW 69
27142: PUSH
27143: FOR_IN
27144: IFFALSE 27198
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 257
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: LD_INT 4
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: IN
27174: IFFALSE 27196
// SetClass ( un , rand ( 1 , 4 ) ) ;
27176: LD_VAR 0 1
27180: PPUSH
27181: LD_INT 1
27183: PPUSH
27184: LD_INT 4
27186: PPUSH
27187: CALL_OW 12
27191: PPUSH
27192: CALL_OW 336
27196: GO 27143
27198: POP
27199: POP
// end ;
27200: PPOPN 1
27202: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27203: LD_EXP 52
27207: PUSH
27208: LD_EXP 64
27212: AND
27213: IFFALSE 27292
27215: GO 27217
27217: DISABLE
27218: LD_INT 0
27220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27221: LD_ADDR_VAR 0 1
27225: PUSH
27226: LD_INT 22
27228: PUSH
27229: LD_OWVAR 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 21
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PPUSH
27252: CALL_OW 69
27256: ST_TO_ADDR
// if not tmp then
27257: LD_VAR 0 1
27261: NOT
27262: IFFALSE 27266
// exit ;
27264: GO 27292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 1
27273: PPUSH
27274: LD_VAR 0 1
27278: PPUSH
27279: CALL_OW 12
27283: ARRAY
27284: PPUSH
27285: LD_INT 100
27287: PPUSH
27288: CALL_OW 234
// end ;
27292: PPOPN 1
27294: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27295: LD_EXP 52
27299: PUSH
27300: LD_EXP 66
27304: AND
27305: IFFALSE 27403
27307: GO 27309
27309: DISABLE
27310: LD_INT 0
27312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27313: LD_ADDR_VAR 0 1
27317: PUSH
27318: LD_INT 22
27320: PUSH
27321: LD_OWVAR 2
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 21
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PPUSH
27344: CALL_OW 69
27348: ST_TO_ADDR
// if not tmp then
27349: LD_VAR 0 1
27353: NOT
27354: IFFALSE 27358
// exit ;
27356: GO 27403
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27358: LD_VAR 0 1
27362: PUSH
27363: LD_INT 1
27365: PPUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: CALL_OW 12
27375: ARRAY
27376: PPUSH
27377: LD_INT 1
27379: PPUSH
27380: LD_INT 4
27382: PPUSH
27383: CALL_OW 12
27387: PPUSH
27388: LD_INT 3000
27390: PPUSH
27391: LD_INT 9000
27393: PPUSH
27394: CALL_OW 12
27398: PPUSH
27399: CALL_OW 492
// end ;
27403: PPOPN 1
27405: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27406: LD_EXP 52
27410: PUSH
27411: LD_EXP 67
27415: AND
27416: IFFALSE 27436
27418: GO 27420
27420: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27421: LD_INT 1
27423: PPUSH
27424: LD_OWVAR 2
27428: PPUSH
27429: LD_INT 0
27431: PPUSH
27432: CALL_OW 324
27436: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27437: LD_EXP 52
27441: PUSH
27442: LD_EXP 68
27446: AND
27447: IFFALSE 27530
27449: GO 27451
27451: DISABLE
27452: LD_INT 0
27454: PPUSH
27455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27456: LD_ADDR_VAR 0 2
27460: PUSH
27461: LD_INT 22
27463: PUSH
27464: LD_OWVAR 2
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 21
27475: PUSH
27476: LD_INT 3
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PPUSH
27487: CALL_OW 69
27491: ST_TO_ADDR
// if not tmp then
27492: LD_VAR 0 2
27496: NOT
27497: IFFALSE 27501
// exit ;
27499: GO 27530
// for i in tmp do
27501: LD_ADDR_VAR 0 1
27505: PUSH
27506: LD_VAR 0 2
27510: PUSH
27511: FOR_IN
27512: IFFALSE 27528
// SetBLevel ( i , 10 ) ;
27514: LD_VAR 0 1
27518: PPUSH
27519: LD_INT 10
27521: PPUSH
27522: CALL_OW 241
27526: GO 27511
27528: POP
27529: POP
// end ;
27530: PPOPN 2
27532: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27533: LD_EXP 52
27537: PUSH
27538: LD_EXP 69
27542: AND
27543: IFFALSE 27654
27545: GO 27547
27547: DISABLE
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
27552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27553: LD_ADDR_VAR 0 3
27557: PUSH
27558: LD_INT 22
27560: PUSH
27561: LD_OWVAR 2
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 25
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: ST_TO_ADDR
// if not tmp then
27589: LD_VAR 0 3
27593: NOT
27594: IFFALSE 27598
// exit ;
27596: GO 27654
// un := tmp [ rand ( 1 , tmp ) ] ;
27598: LD_ADDR_VAR 0 2
27602: PUSH
27603: LD_VAR 0 3
27607: PUSH
27608: LD_INT 1
27610: PPUSH
27611: LD_VAR 0 3
27615: PPUSH
27616: CALL_OW 12
27620: ARRAY
27621: ST_TO_ADDR
// if Crawls ( un ) then
27622: LD_VAR 0 2
27626: PPUSH
27627: CALL_OW 318
27631: IFFALSE 27642
// ComWalk ( un ) ;
27633: LD_VAR 0 2
27637: PPUSH
27638: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27642: LD_VAR 0 2
27646: PPUSH
27647: LD_INT 5
27649: PPUSH
27650: CALL_OW 336
// end ;
27654: PPOPN 3
27656: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27657: LD_EXP 52
27661: PUSH
27662: LD_EXP 70
27666: AND
27667: PUSH
27668: LD_OWVAR 67
27672: PUSH
27673: LD_INT 4
27675: LESS
27676: AND
27677: IFFALSE 27696
27679: GO 27681
27681: DISABLE
// begin Difficulty := Difficulty + 1 ;
27682: LD_ADDR_OWVAR 67
27686: PUSH
27687: LD_OWVAR 67
27691: PUSH
27692: LD_INT 1
27694: PLUS
27695: ST_TO_ADDR
// end ;
27696: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27697: LD_EXP 52
27701: PUSH
27702: LD_EXP 71
27706: AND
27707: IFFALSE 27810
27709: GO 27711
27711: DISABLE
27712: LD_INT 0
27714: PPUSH
// begin for i := 1 to 5 do
27715: LD_ADDR_VAR 0 1
27719: PUSH
27720: DOUBLE
27721: LD_INT 1
27723: DEC
27724: ST_TO_ADDR
27725: LD_INT 5
27727: PUSH
27728: FOR_TO
27729: IFFALSE 27808
// begin uc_nation := nation_nature ;
27731: LD_ADDR_OWVAR 21
27735: PUSH
27736: LD_INT 0
27738: ST_TO_ADDR
// uc_side := 0 ;
27739: LD_ADDR_OWVAR 20
27743: PUSH
27744: LD_INT 0
27746: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27747: LD_ADDR_OWVAR 29
27751: PUSH
27752: LD_INT 12
27754: PUSH
27755: LD_INT 12
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// hc_agressivity := 20 ;
27762: LD_ADDR_OWVAR 35
27766: PUSH
27767: LD_INT 20
27769: ST_TO_ADDR
// hc_class := class_tiger ;
27770: LD_ADDR_OWVAR 28
27774: PUSH
27775: LD_INT 14
27777: ST_TO_ADDR
// hc_gallery :=  ;
27778: LD_ADDR_OWVAR 33
27782: PUSH
27783: LD_STRING 
27785: ST_TO_ADDR
// hc_name :=  ;
27786: LD_ADDR_OWVAR 26
27790: PUSH
27791: LD_STRING 
27793: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27794: CALL_OW 44
27798: PPUSH
27799: LD_INT 0
27801: PPUSH
27802: CALL_OW 51
// end ;
27806: GO 27728
27808: POP
27809: POP
// end ;
27810: PPOPN 1
27812: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27813: LD_EXP 52
27817: PUSH
27818: LD_EXP 72
27822: AND
27823: IFFALSE 27832
27825: GO 27827
27827: DISABLE
// StreamSibBomb ;
27828: CALL 27833 0 0
27832: END
// export function StreamSibBomb ; var i , x , y ; begin
27833: LD_INT 0
27835: PPUSH
27836: PPUSH
27837: PPUSH
27838: PPUSH
// result := false ;
27839: LD_ADDR_VAR 0 1
27843: PUSH
27844: LD_INT 0
27846: ST_TO_ADDR
// for i := 1 to 16 do
27847: LD_ADDR_VAR 0 2
27851: PUSH
27852: DOUBLE
27853: LD_INT 1
27855: DEC
27856: ST_TO_ADDR
27857: LD_INT 16
27859: PUSH
27860: FOR_TO
27861: IFFALSE 28060
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_INT 10
27870: PUSH
27871: LD_INT 20
27873: PUSH
27874: LD_INT 30
27876: PUSH
27877: LD_INT 40
27879: PUSH
27880: LD_INT 50
27882: PUSH
27883: LD_INT 60
27885: PUSH
27886: LD_INT 70
27888: PUSH
27889: LD_INT 80
27891: PUSH
27892: LD_INT 90
27894: PUSH
27895: LD_INT 100
27897: PUSH
27898: LD_INT 110
27900: PUSH
27901: LD_INT 120
27903: PUSH
27904: LD_INT 130
27906: PUSH
27907: LD_INT 140
27909: PUSH
27910: LD_INT 150
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: PPUSH
27933: LD_INT 15
27935: PPUSH
27936: CALL_OW 12
27940: ARRAY
27941: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27942: LD_ADDR_VAR 0 4
27946: PUSH
27947: LD_INT 10
27949: PUSH
27950: LD_INT 20
27952: PUSH
27953: LD_INT 30
27955: PUSH
27956: LD_INT 40
27958: PUSH
27959: LD_INT 50
27961: PUSH
27962: LD_INT 60
27964: PUSH
27965: LD_INT 70
27967: PUSH
27968: LD_INT 80
27970: PUSH
27971: LD_INT 90
27973: PUSH
27974: LD_INT 100
27976: PUSH
27977: LD_INT 110
27979: PUSH
27980: LD_INT 120
27982: PUSH
27983: LD_INT 130
27985: PUSH
27986: LD_INT 140
27988: PUSH
27989: LD_INT 150
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PPUSH
28012: LD_INT 15
28014: PPUSH
28015: CALL_OW 12
28019: ARRAY
28020: ST_TO_ADDR
// if ValidHex ( x , y ) then
28021: LD_VAR 0 3
28025: PPUSH
28026: LD_VAR 0 4
28030: PPUSH
28031: CALL_OW 488
28035: IFFALSE 28058
// begin result := [ x , y ] ;
28037: LD_ADDR_VAR 0 1
28041: PUSH
28042: LD_VAR 0 3
28046: PUSH
28047: LD_VAR 0 4
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: ST_TO_ADDR
// break ;
28056: GO 28060
// end ; end ;
28058: GO 27860
28060: POP
28061: POP
// if result then
28062: LD_VAR 0 1
28066: IFFALSE 28126
// begin ToLua ( playSibBomb() ) ;
28068: LD_STRING playSibBomb()
28070: PPUSH
28071: CALL_OW 559
// wait ( 0 0$14 ) ;
28075: LD_INT 490
28077: PPUSH
28078: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28082: LD_VAR 0 1
28086: PUSH
28087: LD_INT 1
28089: ARRAY
28090: PPUSH
28091: LD_VAR 0 1
28095: PUSH
28096: LD_INT 2
28098: ARRAY
28099: PPUSH
28100: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28104: LD_VAR 0 1
28108: PUSH
28109: LD_INT 1
28111: ARRAY
28112: PPUSH
28113: LD_VAR 0 1
28117: PUSH
28118: LD_INT 2
28120: ARRAY
28121: PPUSH
28122: CALL_OW 429
// end ; end ;
28126: LD_VAR 0 1
28130: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28131: LD_EXP 52
28135: PUSH
28136: LD_EXP 74
28140: AND
28141: IFFALSE 28153
28143: GO 28145
28145: DISABLE
// YouLost (  ) ;
28146: LD_STRING 
28148: PPUSH
28149: CALL_OW 104
28153: END
// every 0 0$1 trigger StreamModeActive and sFog do
28154: LD_EXP 52
28158: PUSH
28159: LD_EXP 73
28163: AND
28164: IFFALSE 28178
28166: GO 28168
28168: DISABLE
// FogOff ( your_side ) ;
28169: LD_OWVAR 2
28173: PPUSH
28174: CALL_OW 344
28178: END
// every 0 0$1 trigger StreamModeActive and sSun do
28179: LD_EXP 52
28183: PUSH
28184: LD_EXP 75
28188: AND
28189: IFFALSE 28217
28191: GO 28193
28193: DISABLE
// begin solar_recharge_percent := 0 ;
28194: LD_ADDR_OWVAR 79
28198: PUSH
28199: LD_INT 0
28201: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28202: LD_INT 10500
28204: PPUSH
28205: CALL_OW 67
// solar_recharge_percent := 100 ;
28209: LD_ADDR_OWVAR 79
28213: PUSH
28214: LD_INT 100
28216: ST_TO_ADDR
// end ;
28217: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28218: LD_EXP 52
28222: PUSH
28223: LD_EXP 76
28227: AND
28228: IFFALSE 28467
28230: GO 28232
28232: DISABLE
28233: LD_INT 0
28235: PPUSH
28236: PPUSH
28237: PPUSH
// begin tmp := [ ] ;
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: EMPTY
28244: ST_TO_ADDR
// for i := 1 to 6 do
28245: LD_ADDR_VAR 0 1
28249: PUSH
28250: DOUBLE
28251: LD_INT 1
28253: DEC
28254: ST_TO_ADDR
28255: LD_INT 6
28257: PUSH
28258: FOR_TO
28259: IFFALSE 28364
// begin uc_nation := nation_nature ;
28261: LD_ADDR_OWVAR 21
28265: PUSH
28266: LD_INT 0
28268: ST_TO_ADDR
// uc_side := 0 ;
28269: LD_ADDR_OWVAR 20
28273: PUSH
28274: LD_INT 0
28276: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28277: LD_ADDR_OWVAR 29
28281: PUSH
28282: LD_INT 12
28284: PUSH
28285: LD_INT 12
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// hc_agressivity := 20 ;
28292: LD_ADDR_OWVAR 35
28296: PUSH
28297: LD_INT 20
28299: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28300: LD_ADDR_OWVAR 28
28304: PUSH
28305: LD_INT 17
28307: ST_TO_ADDR
// hc_gallery :=  ;
28308: LD_ADDR_OWVAR 33
28312: PUSH
28313: LD_STRING 
28315: ST_TO_ADDR
// hc_name :=  ;
28316: LD_ADDR_OWVAR 26
28320: PUSH
28321: LD_STRING 
28323: ST_TO_ADDR
// un := CreateHuman ;
28324: LD_ADDR_VAR 0 2
28328: PUSH
28329: CALL_OW 44
28333: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_INT 1
28341: PPUSH
28342: CALL_OW 51
// tmp := tmp ^ un ;
28346: LD_ADDR_VAR 0 3
28350: PUSH
28351: LD_VAR 0 3
28355: PUSH
28356: LD_VAR 0 2
28360: ADD
28361: ST_TO_ADDR
// end ;
28362: GO 28258
28364: POP
28365: POP
// repeat wait ( 0 0$1 ) ;
28366: LD_INT 35
28368: PPUSH
28369: CALL_OW 67
// for un in tmp do
28373: LD_ADDR_VAR 0 2
28377: PUSH
28378: LD_VAR 0 3
28382: PUSH
28383: FOR_IN
28384: IFFALSE 28458
// begin if IsDead ( un ) then
28386: LD_VAR 0 2
28390: PPUSH
28391: CALL_OW 301
28395: IFFALSE 28415
// begin tmp := tmp diff un ;
28397: LD_ADDR_VAR 0 3
28401: PUSH
28402: LD_VAR 0 3
28406: PUSH
28407: LD_VAR 0 2
28411: DIFF
28412: ST_TO_ADDR
// continue ;
28413: GO 28383
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28415: LD_VAR 0 2
28419: PPUSH
28420: LD_INT 3
28422: PUSH
28423: LD_INT 22
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PPUSH
28437: CALL_OW 69
28441: PPUSH
28442: LD_VAR 0 2
28446: PPUSH
28447: CALL_OW 74
28451: PPUSH
28452: CALL_OW 115
// end ;
28456: GO 28383
28458: POP
28459: POP
// until not tmp ;
28460: LD_VAR 0 3
28464: NOT
28465: IFFALSE 28366
// end ;
28467: PPOPN 3
28469: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28470: LD_EXP 52
28474: PUSH
28475: LD_EXP 77
28479: AND
28480: IFFALSE 28534
28482: GO 28484
28484: DISABLE
// begin ToLua ( displayTroll(); ) ;
28485: LD_STRING displayTroll();
28487: PPUSH
28488: CALL_OW 559
// wait ( 3 3$00 ) ;
28492: LD_INT 6300
28494: PPUSH
28495: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28499: LD_STRING hideTroll();
28501: PPUSH
28502: CALL_OW 559
// wait ( 1 1$00 ) ;
28506: LD_INT 2100
28508: PPUSH
28509: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28513: LD_STRING displayTroll();
28515: PPUSH
28516: CALL_OW 559
// wait ( 1 1$00 ) ;
28520: LD_INT 2100
28522: PPUSH
28523: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28527: LD_STRING hideTroll();
28529: PPUSH
28530: CALL_OW 559
// end ;
28534: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28535: LD_EXP 52
28539: PUSH
28540: LD_EXP 78
28544: AND
28545: IFFALSE 28608
28547: GO 28549
28549: DISABLE
28550: LD_INT 0
28552: PPUSH
// begin p := 0 ;
28553: LD_ADDR_VAR 0 1
28557: PUSH
28558: LD_INT 0
28560: ST_TO_ADDR
// repeat game_speed := 1 ;
28561: LD_ADDR_OWVAR 65
28565: PUSH
28566: LD_INT 1
28568: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28569: LD_INT 35
28571: PPUSH
28572: CALL_OW 67
// p := p + 1 ;
28576: LD_ADDR_VAR 0 1
28580: PUSH
28581: LD_VAR 0 1
28585: PUSH
28586: LD_INT 1
28588: PLUS
28589: ST_TO_ADDR
// until p >= 60 ;
28590: LD_VAR 0 1
28594: PUSH
28595: LD_INT 60
28597: GREATEREQUAL
28598: IFFALSE 28561
// game_speed := 4 ;
28600: LD_ADDR_OWVAR 65
28604: PUSH
28605: LD_INT 4
28607: ST_TO_ADDR
// end ;
28608: PPOPN 1
28610: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28611: LD_EXP 52
28615: PUSH
28616: LD_EXP 79
28620: AND
28621: IFFALSE 28767
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28630: LD_ADDR_VAR 0 1
28634: PUSH
28635: LD_INT 22
28637: PUSH
28638: LD_OWVAR 2
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 30
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 30
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 69
28683: ST_TO_ADDR
// if not depot then
28684: LD_VAR 0 1
28688: NOT
28689: IFFALSE 28693
// exit ;
28691: GO 28767
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28693: LD_ADDR_VAR 0 2
28697: PUSH
28698: LD_VAR 0 1
28702: PUSH
28703: LD_INT 1
28705: PPUSH
28706: LD_VAR 0 1
28710: PPUSH
28711: CALL_OW 12
28715: ARRAY
28716: PPUSH
28717: CALL_OW 274
28721: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_INT 1
28729: PPUSH
28730: LD_INT 0
28732: PPUSH
28733: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28737: LD_VAR 0 2
28741: PPUSH
28742: LD_INT 2
28744: PPUSH
28745: LD_INT 0
28747: PPUSH
28748: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28752: LD_VAR 0 2
28756: PPUSH
28757: LD_INT 3
28759: PPUSH
28760: LD_INT 0
28762: PPUSH
28763: CALL_OW 277
// end ;
28767: PPOPN 2
28769: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28770: LD_EXP 52
28774: PUSH
28775: LD_EXP 80
28779: AND
28780: IFFALSE 28877
28782: GO 28784
28784: DISABLE
28785: LD_INT 0
28787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28788: LD_ADDR_VAR 0 1
28792: PUSH
28793: LD_INT 22
28795: PUSH
28796: LD_OWVAR 2
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 21
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: LD_INT 23
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: PPUSH
28837: CALL_OW 69
28841: ST_TO_ADDR
// if not tmp then
28842: LD_VAR 0 1
28846: NOT
28847: IFFALSE 28851
// exit ;
28849: GO 28877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28851: LD_VAR 0 1
28855: PUSH
28856: LD_INT 1
28858: PPUSH
28859: LD_VAR 0 1
28863: PPUSH
28864: CALL_OW 12
28868: ARRAY
28869: PPUSH
28870: LD_INT 200
28872: PPUSH
28873: CALL_OW 234
// end ;
28877: PPOPN 1
28879: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28880: LD_EXP 52
28884: PUSH
28885: LD_EXP 81
28889: AND
28890: IFFALSE 28969
28892: GO 28894
28894: DISABLE
28895: LD_INT 0
28897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28898: LD_ADDR_VAR 0 1
28902: PUSH
28903: LD_INT 22
28905: PUSH
28906: LD_OWVAR 2
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 21
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PPUSH
28929: CALL_OW 69
28933: ST_TO_ADDR
// if not tmp then
28934: LD_VAR 0 1
28938: NOT
28939: IFFALSE 28943
// exit ;
28941: GO 28969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28943: LD_VAR 0 1
28947: PUSH
28948: LD_INT 1
28950: PPUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 12
28960: ARRAY
28961: PPUSH
28962: LD_INT 60
28964: PPUSH
28965: CALL_OW 234
// end ;
28969: PPOPN 1
28971: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28972: LD_EXP 52
28976: PUSH
28977: LD_EXP 82
28981: AND
28982: IFFALSE 29081
28984: GO 28986
28986: DISABLE
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
// begin enable ;
28991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28992: LD_ADDR_VAR 0 1
28996: PUSH
28997: LD_INT 22
28999: PUSH
29000: LD_OWVAR 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 61
29011: PUSH
29012: EMPTY
29013: LIST
29014: PUSH
29015: LD_INT 33
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: PPUSH
29030: CALL_OW 69
29034: ST_TO_ADDR
// if not tmp then
29035: LD_VAR 0 1
29039: NOT
29040: IFFALSE 29044
// exit ;
29042: GO 29081
// for i in tmp do
29044: LD_ADDR_VAR 0 2
29048: PUSH
29049: LD_VAR 0 1
29053: PUSH
29054: FOR_IN
29055: IFFALSE 29079
// if IsControledBy ( i ) then
29057: LD_VAR 0 2
29061: PPUSH
29062: CALL_OW 312
29066: IFFALSE 29077
// ComUnlink ( i ) ;
29068: LD_VAR 0 2
29072: PPUSH
29073: CALL_OW 136
29077: GO 29054
29079: POP
29080: POP
// end ;
29081: PPOPN 2
29083: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29084: LD_EXP 52
29088: PUSH
29089: LD_EXP 83
29093: AND
29094: IFFALSE 29234
29096: GO 29098
29098: DISABLE
29099: LD_INT 0
29101: PPUSH
29102: PPUSH
// begin ToLua ( displayPowell(); ) ;
29103: LD_STRING displayPowell();
29105: PPUSH
29106: CALL_OW 559
// uc_side := 0 ;
29110: LD_ADDR_OWVAR 20
29114: PUSH
29115: LD_INT 0
29117: ST_TO_ADDR
// uc_nation := 2 ;
29118: LD_ADDR_OWVAR 21
29122: PUSH
29123: LD_INT 2
29125: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29126: LD_ADDR_OWVAR 37
29130: PUSH
29131: LD_INT 14
29133: ST_TO_ADDR
// vc_engine := engine_siberite ;
29134: LD_ADDR_OWVAR 39
29138: PUSH
29139: LD_INT 3
29141: ST_TO_ADDR
// vc_control := control_apeman ;
29142: LD_ADDR_OWVAR 38
29146: PUSH
29147: LD_INT 5
29149: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29150: LD_ADDR_OWVAR 40
29154: PUSH
29155: LD_INT 29
29157: ST_TO_ADDR
// un := CreateVehicle ;
29158: LD_ADDR_VAR 0 2
29162: PUSH
29163: CALL_OW 45
29167: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29168: LD_VAR 0 2
29172: PPUSH
29173: LD_INT 1
29175: PPUSH
29176: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29180: LD_INT 35
29182: PPUSH
29183: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29187: LD_VAR 0 2
29191: PPUSH
29192: LD_INT 22
29194: PUSH
29195: LD_OWVAR 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PPUSH
29204: CALL_OW 69
29208: PPUSH
29209: LD_VAR 0 2
29213: PPUSH
29214: CALL_OW 74
29218: PPUSH
29219: CALL_OW 115
// until IsDead ( un ) ;
29223: LD_VAR 0 2
29227: PPUSH
29228: CALL_OW 301
29232: IFFALSE 29180
// end ;
29234: PPOPN 2
29236: END
// every 0 0$1 trigger StreamModeActive and sStu do
29237: LD_EXP 52
29241: PUSH
29242: LD_EXP 91
29246: AND
29247: IFFALSE 29263
29249: GO 29251
29251: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29252: LD_STRING displayStucuk();
29254: PPUSH
29255: CALL_OW 559
// ResetFog ;
29259: CALL_OW 335
// end ;
29263: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29264: LD_EXP 52
29268: PUSH
29269: LD_EXP 84
29273: AND
29274: IFFALSE 29415
29276: GO 29278
29278: DISABLE
29279: LD_INT 0
29281: PPUSH
29282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29283: LD_ADDR_VAR 0 2
29287: PUSH
29288: LD_INT 22
29290: PUSH
29291: LD_OWVAR 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 21
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PPUSH
29314: CALL_OW 69
29318: ST_TO_ADDR
// if not tmp then
29319: LD_VAR 0 2
29323: NOT
29324: IFFALSE 29328
// exit ;
29326: GO 29415
// un := tmp [ rand ( 1 , tmp ) ] ;
29328: LD_ADDR_VAR 0 1
29332: PUSH
29333: LD_VAR 0 2
29337: PUSH
29338: LD_INT 1
29340: PPUSH
29341: LD_VAR 0 2
29345: PPUSH
29346: CALL_OW 12
29350: ARRAY
29351: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29352: LD_VAR 0 1
29356: PPUSH
29357: LD_INT 0
29359: PPUSH
29360: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29364: LD_VAR 0 1
29368: PPUSH
29369: LD_OWVAR 3
29373: PUSH
29374: LD_VAR 0 1
29378: DIFF
29379: PPUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 74
29389: PPUSH
29390: CALL_OW 115
// wait ( 0 0$20 ) ;
29394: LD_INT 700
29396: PPUSH
29397: CALL_OW 67
// SetSide ( un , your_side ) ;
29401: LD_VAR 0 1
29405: PPUSH
29406: LD_OWVAR 2
29410: PPUSH
29411: CALL_OW 235
// end ;
29415: PPOPN 2
29417: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29418: LD_EXP 52
29422: PUSH
29423: LD_EXP 85
29427: AND
29428: IFFALSE 29534
29430: GO 29432
29432: DISABLE
29433: LD_INT 0
29435: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29436: LD_ADDR_VAR 0 1
29440: PUSH
29441: LD_INT 22
29443: PUSH
29444: LD_OWVAR 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: LD_INT 30
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 30
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PPUSH
29485: CALL_OW 69
29489: ST_TO_ADDR
// if not depot then
29490: LD_VAR 0 1
29494: NOT
29495: IFFALSE 29499
// exit ;
29497: GO 29534
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29499: LD_VAR 0 1
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: CALL_OW 250
29512: PPUSH
29513: LD_VAR 0 1
29517: PUSH
29518: LD_INT 1
29520: ARRAY
29521: PPUSH
29522: CALL_OW 251
29526: PPUSH
29527: LD_INT 70
29529: PPUSH
29530: CALL_OW 495
// end ;
29534: PPOPN 1
29536: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29537: LD_EXP 52
29541: PUSH
29542: LD_EXP 86
29546: AND
29547: IFFALSE 29758
29549: GO 29551
29551: DISABLE
29552: LD_INT 0
29554: PPUSH
29555: PPUSH
29556: PPUSH
29557: PPUSH
29558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29559: LD_ADDR_VAR 0 5
29563: PUSH
29564: LD_INT 22
29566: PUSH
29567: LD_OWVAR 2
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 21
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 69
29594: ST_TO_ADDR
// if not tmp then
29595: LD_VAR 0 5
29599: NOT
29600: IFFALSE 29604
// exit ;
29602: GO 29758
// for i in tmp do
29604: LD_ADDR_VAR 0 1
29608: PUSH
29609: LD_VAR 0 5
29613: PUSH
29614: FOR_IN
29615: IFFALSE 29756
// begin d := rand ( 0 , 5 ) ;
29617: LD_ADDR_VAR 0 4
29621: PUSH
29622: LD_INT 0
29624: PPUSH
29625: LD_INT 5
29627: PPUSH
29628: CALL_OW 12
29632: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29633: LD_ADDR_VAR 0 2
29637: PUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 250
29647: PPUSH
29648: LD_VAR 0 4
29652: PPUSH
29653: LD_INT 3
29655: PPUSH
29656: LD_INT 12
29658: PPUSH
29659: CALL_OW 12
29663: PPUSH
29664: CALL_OW 272
29668: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29669: LD_ADDR_VAR 0 3
29673: PUSH
29674: LD_VAR 0 1
29678: PPUSH
29679: CALL_OW 251
29683: PPUSH
29684: LD_VAR 0 4
29688: PPUSH
29689: LD_INT 3
29691: PPUSH
29692: LD_INT 12
29694: PPUSH
29695: CALL_OW 12
29699: PPUSH
29700: CALL_OW 273
29704: ST_TO_ADDR
// if ValidHex ( x , y ) then
29705: LD_VAR 0 2
29709: PPUSH
29710: LD_VAR 0 3
29714: PPUSH
29715: CALL_OW 488
29719: IFFALSE 29754
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_VAR 0 2
29730: PPUSH
29731: LD_VAR 0 3
29735: PPUSH
29736: LD_INT 3
29738: PPUSH
29739: LD_INT 6
29741: PPUSH
29742: CALL_OW 12
29746: PPUSH
29747: LD_INT 1
29749: PPUSH
29750: CALL_OW 483
// end ;
29754: GO 29614
29756: POP
29757: POP
// end ;
29758: PPOPN 5
29760: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29761: LD_EXP 52
29765: PUSH
29766: LD_EXP 87
29770: AND
29771: IFFALSE 29865
29773: GO 29775
29775: DISABLE
29776: LD_INT 0
29778: PPUSH
29779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29780: LD_ADDR_VAR 0 2
29784: PUSH
29785: LD_INT 22
29787: PUSH
29788: LD_OWVAR 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 32
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 21
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: PPUSH
29822: CALL_OW 69
29826: ST_TO_ADDR
// if not tmp then
29827: LD_VAR 0 2
29831: NOT
29832: IFFALSE 29836
// exit ;
29834: GO 29865
// for i in tmp do
29836: LD_ADDR_VAR 0 1
29840: PUSH
29841: LD_VAR 0 2
29845: PUSH
29846: FOR_IN
29847: IFFALSE 29863
// SetFuel ( i , 0 ) ;
29849: LD_VAR 0 1
29853: PPUSH
29854: LD_INT 0
29856: PPUSH
29857: CALL_OW 240
29861: GO 29846
29863: POP
29864: POP
// end ;
29865: PPOPN 2
29867: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29868: LD_EXP 52
29872: PUSH
29873: LD_EXP 88
29877: AND
29878: IFFALSE 29944
29880: GO 29882
29882: DISABLE
29883: LD_INT 0
29885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29886: LD_ADDR_VAR 0 1
29890: PUSH
29891: LD_INT 22
29893: PUSH
29894: LD_OWVAR 2
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 30
29905: PUSH
29906: LD_INT 29
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PPUSH
29917: CALL_OW 69
29921: ST_TO_ADDR
// if not tmp then
29922: LD_VAR 0 1
29926: NOT
29927: IFFALSE 29931
// exit ;
29929: GO 29944
// DestroyUnit ( tmp [ 1 ] ) ;
29931: LD_VAR 0 1
29935: PUSH
29936: LD_INT 1
29938: ARRAY
29939: PPUSH
29940: CALL_OW 65
// end ;
29944: PPOPN 1
29946: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29947: LD_EXP 52
29951: PUSH
29952: LD_EXP 90
29956: AND
29957: IFFALSE 30086
29959: GO 29961
29961: DISABLE
29962: LD_INT 0
29964: PPUSH
// begin uc_side := 0 ;
29965: LD_ADDR_OWVAR 20
29969: PUSH
29970: LD_INT 0
29972: ST_TO_ADDR
// uc_nation := nation_arabian ;
29973: LD_ADDR_OWVAR 21
29977: PUSH
29978: LD_INT 2
29980: ST_TO_ADDR
// hc_gallery :=  ;
29981: LD_ADDR_OWVAR 33
29985: PUSH
29986: LD_STRING 
29988: ST_TO_ADDR
// hc_name :=  ;
29989: LD_ADDR_OWVAR 26
29993: PUSH
29994: LD_STRING 
29996: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29997: LD_INT 1
29999: PPUSH
30000: LD_INT 11
30002: PPUSH
30003: LD_INT 10
30005: PPUSH
30006: CALL_OW 380
// un := CreateHuman ;
30010: LD_ADDR_VAR 0 1
30014: PUSH
30015: CALL_OW 44
30019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30020: LD_VAR 0 1
30024: PPUSH
30025: LD_INT 1
30027: PPUSH
30028: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30032: LD_INT 35
30034: PPUSH
30035: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30039: LD_VAR 0 1
30043: PPUSH
30044: LD_INT 22
30046: PUSH
30047: LD_OWVAR 2
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PPUSH
30056: CALL_OW 69
30060: PPUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL_OW 74
30070: PPUSH
30071: CALL_OW 115
// until IsDead ( un ) ;
30075: LD_VAR 0 1
30079: PPUSH
30080: CALL_OW 301
30084: IFFALSE 30032
// end ;
30086: PPOPN 1
30088: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30089: LD_EXP 52
30093: PUSH
30094: LD_EXP 92
30098: AND
30099: IFFALSE 30111
30101: GO 30103
30103: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30104: LD_STRING earthquake(getX(game), 0, 32)
30106: PPUSH
30107: CALL_OW 559
30111: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30112: LD_EXP 52
30116: PUSH
30117: LD_EXP 93
30121: AND
30122: IFFALSE 30213
30124: GO 30126
30126: DISABLE
30127: LD_INT 0
30129: PPUSH
// begin enable ;
30130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30131: LD_ADDR_VAR 0 1
30135: PUSH
30136: LD_INT 22
30138: PUSH
30139: LD_OWVAR 2
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 21
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 33
30160: PUSH
30161: LD_INT 3
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: LIST
30172: PPUSH
30173: CALL_OW 69
30177: ST_TO_ADDR
// if not tmp then
30178: LD_VAR 0 1
30182: NOT
30183: IFFALSE 30187
// exit ;
30185: GO 30213
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30187: LD_VAR 0 1
30191: PUSH
30192: LD_INT 1
30194: PPUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 12
30204: ARRAY
30205: PPUSH
30206: LD_INT 1
30208: PPUSH
30209: CALL_OW 234
// end ;
30213: PPOPN 1
30215: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30216: LD_EXP 52
30220: PUSH
30221: LD_EXP 94
30225: AND
30226: IFFALSE 30367
30228: GO 30230
30230: DISABLE
30231: LD_INT 0
30233: PPUSH
30234: PPUSH
30235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30236: LD_ADDR_VAR 0 3
30240: PUSH
30241: LD_INT 22
30243: PUSH
30244: LD_OWVAR 2
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 25
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PPUSH
30267: CALL_OW 69
30271: ST_TO_ADDR
// if not tmp then
30272: LD_VAR 0 3
30276: NOT
30277: IFFALSE 30281
// exit ;
30279: GO 30367
// un := tmp [ rand ( 1 , tmp ) ] ;
30281: LD_ADDR_VAR 0 2
30285: PUSH
30286: LD_VAR 0 3
30290: PUSH
30291: LD_INT 1
30293: PPUSH
30294: LD_VAR 0 3
30298: PPUSH
30299: CALL_OW 12
30303: ARRAY
30304: ST_TO_ADDR
// if Crawls ( un ) then
30305: LD_VAR 0 2
30309: PPUSH
30310: CALL_OW 318
30314: IFFALSE 30325
// ComWalk ( un ) ;
30316: LD_VAR 0 2
30320: PPUSH
30321: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30325: LD_VAR 0 2
30329: PPUSH
30330: LD_INT 9
30332: PPUSH
30333: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30337: LD_INT 28
30339: PPUSH
30340: LD_OWVAR 2
30344: PPUSH
30345: LD_INT 2
30347: PPUSH
30348: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30352: LD_INT 29
30354: PPUSH
30355: LD_OWVAR 2
30359: PPUSH
30360: LD_INT 2
30362: PPUSH
30363: CALL_OW 322
// end ;
30367: PPOPN 3
30369: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30370: LD_EXP 52
30374: PUSH
30375: LD_EXP 95
30379: AND
30380: IFFALSE 30491
30382: GO 30384
30384: DISABLE
30385: LD_INT 0
30387: PPUSH
30388: PPUSH
30389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30390: LD_ADDR_VAR 0 3
30394: PUSH
30395: LD_INT 22
30397: PUSH
30398: LD_OWVAR 2
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 25
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PPUSH
30421: CALL_OW 69
30425: ST_TO_ADDR
// if not tmp then
30426: LD_VAR 0 3
30430: NOT
30431: IFFALSE 30435
// exit ;
30433: GO 30491
// un := tmp [ rand ( 1 , tmp ) ] ;
30435: LD_ADDR_VAR 0 2
30439: PUSH
30440: LD_VAR 0 3
30444: PUSH
30445: LD_INT 1
30447: PPUSH
30448: LD_VAR 0 3
30452: PPUSH
30453: CALL_OW 12
30457: ARRAY
30458: ST_TO_ADDR
// if Crawls ( un ) then
30459: LD_VAR 0 2
30463: PPUSH
30464: CALL_OW 318
30468: IFFALSE 30479
// ComWalk ( un ) ;
30470: LD_VAR 0 2
30474: PPUSH
30475: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30479: LD_VAR 0 2
30483: PPUSH
30484: LD_INT 8
30486: PPUSH
30487: CALL_OW 336
// end ;
30491: PPOPN 3
30493: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30494: LD_EXP 52
30498: PUSH
30499: LD_EXP 96
30503: AND
30504: IFFALSE 30648
30506: GO 30508
30508: DISABLE
30509: LD_INT 0
30511: PPUSH
30512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30513: LD_ADDR_VAR 0 2
30517: PUSH
30518: LD_INT 22
30520: PUSH
30521: LD_OWVAR 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 21
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 2
30542: PUSH
30543: LD_INT 34
30545: PUSH
30546: LD_INT 12
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 34
30555: PUSH
30556: LD_INT 51
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 34
30565: PUSH
30566: LD_INT 32
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: PPUSH
30584: CALL_OW 69
30588: ST_TO_ADDR
// if not tmp then
30589: LD_VAR 0 2
30593: NOT
30594: IFFALSE 30598
// exit ;
30596: GO 30648
// for i in tmp do
30598: LD_ADDR_VAR 0 1
30602: PUSH
30603: LD_VAR 0 2
30607: PUSH
30608: FOR_IN
30609: IFFALSE 30646
// if GetCargo ( i , mat_artifact ) = 0 then
30611: LD_VAR 0 1
30615: PPUSH
30616: LD_INT 4
30618: PPUSH
30619: CALL_OW 289
30623: PUSH
30624: LD_INT 0
30626: EQUAL
30627: IFFALSE 30644
// SetCargo ( i , mat_siberit , 100 ) ;
30629: LD_VAR 0 1
30633: PPUSH
30634: LD_INT 3
30636: PPUSH
30637: LD_INT 100
30639: PPUSH
30640: CALL_OW 290
30644: GO 30608
30646: POP
30647: POP
// end ;
30648: PPOPN 2
30650: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30651: LD_EXP 52
30655: PUSH
30656: LD_EXP 97
30660: AND
30661: IFFALSE 30844
30663: GO 30665
30665: DISABLE
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30670: LD_ADDR_VAR 0 2
30674: PUSH
30675: LD_INT 22
30677: PUSH
30678: LD_OWVAR 2
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 69
30691: ST_TO_ADDR
// if not tmp then
30692: LD_VAR 0 2
30696: NOT
30697: IFFALSE 30701
// exit ;
30699: GO 30844
// for i := 1 to 2 do
30701: LD_ADDR_VAR 0 1
30705: PUSH
30706: DOUBLE
30707: LD_INT 1
30709: DEC
30710: ST_TO_ADDR
30711: LD_INT 2
30713: PUSH
30714: FOR_TO
30715: IFFALSE 30842
// begin uc_side := your_side ;
30717: LD_ADDR_OWVAR 20
30721: PUSH
30722: LD_OWVAR 2
30726: ST_TO_ADDR
// uc_nation := nation_american ;
30727: LD_ADDR_OWVAR 21
30731: PUSH
30732: LD_INT 1
30734: ST_TO_ADDR
// vc_chassis := us_morphling ;
30735: LD_ADDR_OWVAR 37
30739: PUSH
30740: LD_INT 5
30742: ST_TO_ADDR
// vc_engine := engine_siberite ;
30743: LD_ADDR_OWVAR 39
30747: PUSH
30748: LD_INT 3
30750: ST_TO_ADDR
// vc_control := control_computer ;
30751: LD_ADDR_OWVAR 38
30755: PUSH
30756: LD_INT 3
30758: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30759: LD_ADDR_OWVAR 40
30763: PUSH
30764: LD_INT 10
30766: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30767: LD_VAR 0 2
30771: PUSH
30772: LD_INT 1
30774: ARRAY
30775: PPUSH
30776: CALL_OW 310
30780: NOT
30781: IFFALSE 30828
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30783: CALL_OW 45
30787: PPUSH
30788: LD_VAR 0 2
30792: PUSH
30793: LD_INT 1
30795: ARRAY
30796: PPUSH
30797: CALL_OW 250
30801: PPUSH
30802: LD_VAR 0 2
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: PPUSH
30811: CALL_OW 251
30815: PPUSH
30816: LD_INT 12
30818: PPUSH
30819: LD_INT 1
30821: PPUSH
30822: CALL_OW 50
30826: GO 30840
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30828: CALL_OW 45
30832: PPUSH
30833: LD_INT 1
30835: PPUSH
30836: CALL_OW 51
// end ;
30840: GO 30714
30842: POP
30843: POP
// end ;
30844: PPOPN 2
30846: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30847: LD_EXP 52
30851: PUSH
30852: LD_EXP 98
30856: AND
30857: IFFALSE 31079
30859: GO 30861
30861: DISABLE
30862: LD_INT 0
30864: PPUSH
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30870: LD_ADDR_VAR 0 6
30874: PUSH
30875: LD_INT 22
30877: PUSH
30878: LD_OWVAR 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 21
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 3
30899: PUSH
30900: LD_INT 23
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: PPUSH
30919: CALL_OW 69
30923: ST_TO_ADDR
// if not tmp then
30924: LD_VAR 0 6
30928: NOT
30929: IFFALSE 30933
// exit ;
30931: GO 31079
// s1 := rand ( 1 , 4 ) ;
30933: LD_ADDR_VAR 0 2
30937: PUSH
30938: LD_INT 1
30940: PPUSH
30941: LD_INT 4
30943: PPUSH
30944: CALL_OW 12
30948: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30949: LD_ADDR_VAR 0 4
30953: PUSH
30954: LD_VAR 0 6
30958: PUSH
30959: LD_INT 1
30961: ARRAY
30962: PPUSH
30963: LD_VAR 0 2
30967: PPUSH
30968: CALL_OW 259
30972: ST_TO_ADDR
// if s1 = 1 then
30973: LD_VAR 0 2
30977: PUSH
30978: LD_INT 1
30980: EQUAL
30981: IFFALSE 31001
// s2 := rand ( 2 , 4 ) else
30983: LD_ADDR_VAR 0 3
30987: PUSH
30988: LD_INT 2
30990: PPUSH
30991: LD_INT 4
30993: PPUSH
30994: CALL_OW 12
30998: ST_TO_ADDR
30999: GO 31009
// s2 := 1 ;
31001: LD_ADDR_VAR 0 3
31005: PUSH
31006: LD_INT 1
31008: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31009: LD_ADDR_VAR 0 5
31013: PUSH
31014: LD_VAR 0 6
31018: PUSH
31019: LD_INT 1
31021: ARRAY
31022: PPUSH
31023: LD_VAR 0 3
31027: PPUSH
31028: CALL_OW 259
31032: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31033: LD_VAR 0 6
31037: PUSH
31038: LD_INT 1
31040: ARRAY
31041: PPUSH
31042: LD_VAR 0 2
31046: PPUSH
31047: LD_VAR 0 5
31051: PPUSH
31052: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31056: LD_VAR 0 6
31060: PUSH
31061: LD_INT 1
31063: ARRAY
31064: PPUSH
31065: LD_VAR 0 3
31069: PPUSH
31070: LD_VAR 0 4
31074: PPUSH
31075: CALL_OW 237
// end ;
31079: PPOPN 6
31081: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31082: LD_EXP 52
31086: PUSH
31087: LD_EXP 99
31091: AND
31092: IFFALSE 31171
31094: GO 31096
31096: DISABLE
31097: LD_INT 0
31099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: LD_INT 22
31107: PUSH
31108: LD_OWVAR 2
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 30
31119: PUSH
31120: LD_INT 3
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PPUSH
31131: CALL_OW 69
31135: ST_TO_ADDR
// if not tmp then
31136: LD_VAR 0 1
31140: NOT
31141: IFFALSE 31145
// exit ;
31143: GO 31171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31145: LD_VAR 0 1
31149: PUSH
31150: LD_INT 1
31152: PPUSH
31153: LD_VAR 0 1
31157: PPUSH
31158: CALL_OW 12
31162: ARRAY
31163: PPUSH
31164: LD_INT 1
31166: PPUSH
31167: CALL_OW 234
// end ;
31171: PPOPN 1
31173: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31174: LD_EXP 52
31178: PUSH
31179: LD_EXP 100
31183: AND
31184: IFFALSE 31296
31186: GO 31188
31188: DISABLE
31189: LD_INT 0
31191: PPUSH
31192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31193: LD_ADDR_VAR 0 2
31197: PUSH
31198: LD_INT 22
31200: PUSH
31201: LD_OWVAR 2
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: LD_INT 30
31215: PUSH
31216: LD_INT 27
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 30
31225: PUSH
31226: LD_INT 26
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 30
31235: PUSH
31236: LD_INT 28
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PPUSH
31253: CALL_OW 69
31257: ST_TO_ADDR
// if not tmp then
31258: LD_VAR 0 2
31262: NOT
31263: IFFALSE 31267
// exit ;
31265: GO 31296
// for i in tmp do
31267: LD_ADDR_VAR 0 1
31271: PUSH
31272: LD_VAR 0 2
31276: PUSH
31277: FOR_IN
31278: IFFALSE 31294
// SetLives ( i , 1 ) ;
31280: LD_VAR 0 1
31284: PPUSH
31285: LD_INT 1
31287: PPUSH
31288: CALL_OW 234
31292: GO 31277
31294: POP
31295: POP
// end ;
31296: PPOPN 2
31298: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31299: LD_EXP 52
31303: PUSH
31304: LD_EXP 101
31308: AND
31309: IFFALSE 31596
31311: GO 31313
31313: DISABLE
31314: LD_INT 0
31316: PPUSH
31317: PPUSH
31318: PPUSH
// begin i := rand ( 1 , 7 ) ;
31319: LD_ADDR_VAR 0 1
31323: PUSH
31324: LD_INT 1
31326: PPUSH
31327: LD_INT 7
31329: PPUSH
31330: CALL_OW 12
31334: ST_TO_ADDR
// case i of 1 :
31335: LD_VAR 0 1
31339: PUSH
31340: LD_INT 1
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31358
31348: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31349: LD_STRING earthquake(getX(game), 0, 32)
31351: PPUSH
31352: CALL_OW 559
31356: GO 31596
31358: LD_INT 2
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31380
31366: POP
// begin ToLua ( displayStucuk(); ) ;
31367: LD_STRING displayStucuk();
31369: PPUSH
31370: CALL_OW 559
// ResetFog ;
31374: CALL_OW 335
// end ; 3 :
31378: GO 31596
31380: LD_INT 3
31382: DOUBLE
31383: EQUAL
31384: IFTRUE 31388
31386: GO 31492
31388: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31389: LD_ADDR_VAR 0 2
31393: PUSH
31394: LD_INT 22
31396: PUSH
31397: LD_OWVAR 2
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 25
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PPUSH
31420: CALL_OW 69
31424: ST_TO_ADDR
// if not tmp then
31425: LD_VAR 0 2
31429: NOT
31430: IFFALSE 31434
// exit ;
31432: GO 31596
// un := tmp [ rand ( 1 , tmp ) ] ;
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: LD_VAR 0 2
31443: PUSH
31444: LD_INT 1
31446: PPUSH
31447: LD_VAR 0 2
31451: PPUSH
31452: CALL_OW 12
31456: ARRAY
31457: ST_TO_ADDR
// if Crawls ( un ) then
31458: LD_VAR 0 3
31462: PPUSH
31463: CALL_OW 318
31467: IFFALSE 31478
// ComWalk ( un ) ;
31469: LD_VAR 0 3
31473: PPUSH
31474: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31478: LD_VAR 0 3
31482: PPUSH
31483: LD_INT 8
31485: PPUSH
31486: CALL_OW 336
// end ; 4 :
31490: GO 31596
31492: LD_INT 4
31494: DOUBLE
31495: EQUAL
31496: IFTRUE 31500
31498: GO 31574
31500: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31501: LD_ADDR_VAR 0 2
31505: PUSH
31506: LD_INT 22
31508: PUSH
31509: LD_OWVAR 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 30
31520: PUSH
31521: LD_INT 29
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PPUSH
31532: CALL_OW 69
31536: ST_TO_ADDR
// if not tmp then
31537: LD_VAR 0 2
31541: NOT
31542: IFFALSE 31546
// exit ;
31544: GO 31596
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31546: LD_VAR 0 2
31550: PUSH
31551: LD_INT 1
31553: ARRAY
31554: PPUSH
31555: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31559: LD_VAR 0 2
31563: PUSH
31564: LD_INT 1
31566: ARRAY
31567: PPUSH
31568: CALL_OW 65
// end ; 5 .. 7 :
31572: GO 31596
31574: LD_INT 5
31576: DOUBLE
31577: GREATEREQUAL
31578: IFFALSE 31586
31580: LD_INT 7
31582: DOUBLE
31583: LESSEQUAL
31584: IFTRUE 31588
31586: GO 31595
31588: POP
// StreamSibBomb ; end ;
31589: CALL 27833 0 0
31593: GO 31596
31595: POP
// end ;
31596: PPOPN 3
31598: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31599: LD_EXP 52
31603: PUSH
31604: LD_EXP 102
31608: AND
31609: IFFALSE 31765
31611: GO 31613
31613: DISABLE
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
31618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31619: LD_ADDR_VAR 0 2
31623: PUSH
31624: LD_INT 81
31626: PUSH
31627: LD_OWVAR 2
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: LD_INT 21
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 21
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PPUSH
31668: CALL_OW 69
31672: ST_TO_ADDR
// if not tmp then
31673: LD_VAR 0 2
31677: NOT
31678: IFFALSE 31682
// exit ;
31680: GO 31765
// p := 0 ;
31682: LD_ADDR_VAR 0 3
31686: PUSH
31687: LD_INT 0
31689: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31690: LD_INT 35
31692: PPUSH
31693: CALL_OW 67
// p := p + 1 ;
31697: LD_ADDR_VAR 0 3
31701: PUSH
31702: LD_VAR 0 3
31706: PUSH
31707: LD_INT 1
31709: PLUS
31710: ST_TO_ADDR
// for i in tmp do
31711: LD_ADDR_VAR 0 1
31715: PUSH
31716: LD_VAR 0 2
31720: PUSH
31721: FOR_IN
31722: IFFALSE 31753
// if GetLives ( i ) < 1000 then
31724: LD_VAR 0 1
31728: PPUSH
31729: CALL_OW 256
31733: PUSH
31734: LD_INT 1000
31736: LESS
31737: IFFALSE 31751
// SetLives ( i , 1000 ) ;
31739: LD_VAR 0 1
31743: PPUSH
31744: LD_INT 1000
31746: PPUSH
31747: CALL_OW 234
31751: GO 31721
31753: POP
31754: POP
// until p > 20 ;
31755: LD_VAR 0 3
31759: PUSH
31760: LD_INT 20
31762: GREATER
31763: IFFALSE 31690
// end ;
31765: PPOPN 3
31767: END
// every 0 0$1 trigger StreamModeActive and sTime do
31768: LD_EXP 52
31772: PUSH
31773: LD_EXP 103
31777: AND
31778: IFFALSE 31813
31780: GO 31782
31782: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31783: LD_INT 28
31785: PPUSH
31786: LD_OWVAR 2
31790: PPUSH
31791: LD_INT 2
31793: PPUSH
31794: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31798: LD_INT 30
31800: PPUSH
31801: LD_OWVAR 2
31805: PPUSH
31806: LD_INT 2
31808: PPUSH
31809: CALL_OW 322
// end ;
31813: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31814: LD_EXP 52
31818: PUSH
31819: LD_EXP 104
31823: AND
31824: IFFALSE 31945
31826: GO 31828
31828: DISABLE
31829: LD_INT 0
31831: PPUSH
31832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31833: LD_ADDR_VAR 0 2
31837: PUSH
31838: LD_INT 22
31840: PUSH
31841: LD_OWVAR 2
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 21
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: LD_INT 23
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: PPUSH
31882: CALL_OW 69
31886: ST_TO_ADDR
// if not tmp then
31887: LD_VAR 0 2
31891: NOT
31892: IFFALSE 31896
// exit ;
31894: GO 31945
// for i in tmp do
31896: LD_ADDR_VAR 0 1
31900: PUSH
31901: LD_VAR 0 2
31905: PUSH
31906: FOR_IN
31907: IFFALSE 31943
// begin if Crawls ( i ) then
31909: LD_VAR 0 1
31913: PPUSH
31914: CALL_OW 318
31918: IFFALSE 31929
// ComWalk ( i ) ;
31920: LD_VAR 0 1
31924: PPUSH
31925: CALL_OW 138
// SetClass ( i , 2 ) ;
31929: LD_VAR 0 1
31933: PPUSH
31934: LD_INT 2
31936: PPUSH
31937: CALL_OW 336
// end ;
31941: GO 31906
31943: POP
31944: POP
// end ;
31945: PPOPN 2
31947: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31948: LD_EXP 52
31952: PUSH
31953: LD_EXP 105
31957: AND
31958: IFFALSE 32246
31960: GO 31962
31962: DISABLE
31963: LD_INT 0
31965: PPUSH
31966: PPUSH
31967: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31968: LD_OWVAR 2
31972: PPUSH
31973: LD_INT 9
31975: PPUSH
31976: LD_INT 1
31978: PPUSH
31979: LD_INT 1
31981: PPUSH
31982: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31986: LD_INT 9
31988: PPUSH
31989: LD_OWVAR 2
31993: PPUSH
31994: CALL_OW 343
// uc_side := 9 ;
31998: LD_ADDR_OWVAR 20
32002: PUSH
32003: LD_INT 9
32005: ST_TO_ADDR
// uc_nation := 2 ;
32006: LD_ADDR_OWVAR 21
32010: PUSH
32011: LD_INT 2
32013: ST_TO_ADDR
// hc_name := Dark Warrior ;
32014: LD_ADDR_OWVAR 26
32018: PUSH
32019: LD_STRING Dark Warrior
32021: ST_TO_ADDR
// hc_gallery :=  ;
32022: LD_ADDR_OWVAR 33
32026: PUSH
32027: LD_STRING 
32029: ST_TO_ADDR
// hc_noskilllimit := true ;
32030: LD_ADDR_OWVAR 76
32034: PUSH
32035: LD_INT 1
32037: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32038: LD_ADDR_OWVAR 31
32042: PUSH
32043: LD_INT 30
32045: PUSH
32046: LD_INT 30
32048: PUSH
32049: LD_INT 30
32051: PUSH
32052: LD_INT 30
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: ST_TO_ADDR
// un := CreateHuman ;
32061: LD_ADDR_VAR 0 3
32065: PUSH
32066: CALL_OW 44
32070: ST_TO_ADDR
// hc_noskilllimit := false ;
32071: LD_ADDR_OWVAR 76
32075: PUSH
32076: LD_INT 0
32078: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32079: LD_VAR 0 3
32083: PPUSH
32084: LD_INT 1
32086: PPUSH
32087: CALL_OW 51
// ToLua ( playRanger() ) ;
32091: LD_STRING playRanger()
32093: PPUSH
32094: CALL_OW 559
// p := 0 ;
32098: LD_ADDR_VAR 0 2
32102: PUSH
32103: LD_INT 0
32105: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32106: LD_INT 35
32108: PPUSH
32109: CALL_OW 67
// p := p + 1 ;
32113: LD_ADDR_VAR 0 2
32117: PUSH
32118: LD_VAR 0 2
32122: PUSH
32123: LD_INT 1
32125: PLUS
32126: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32127: LD_VAR 0 3
32131: PPUSH
32132: CALL_OW 256
32136: PUSH
32137: LD_INT 1000
32139: LESS
32140: IFFALSE 32154
// SetLives ( un , 1000 ) ;
32142: LD_VAR 0 3
32146: PPUSH
32147: LD_INT 1000
32149: PPUSH
32150: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32154: LD_VAR 0 3
32158: PPUSH
32159: LD_INT 81
32161: PUSH
32162: LD_OWVAR 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 91
32173: PUSH
32174: LD_VAR 0 3
32178: PUSH
32179: LD_INT 30
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PPUSH
32191: CALL_OW 69
32195: PPUSH
32196: LD_VAR 0 3
32200: PPUSH
32201: CALL_OW 74
32205: PPUSH
32206: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32210: LD_VAR 0 2
32214: PUSH
32215: LD_INT 80
32217: GREATER
32218: PUSH
32219: LD_VAR 0 3
32223: PPUSH
32224: CALL_OW 301
32228: OR
32229: IFFALSE 32106
// if un then
32231: LD_VAR 0 3
32235: IFFALSE 32246
// RemoveUnit ( un ) ;
32237: LD_VAR 0 3
32241: PPUSH
32242: CALL_OW 64
// end ;
32246: PPOPN 3
32248: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32249: LD_EXP 106
32253: IFFALSE 32369
32255: GO 32257
32257: DISABLE
32258: LD_INT 0
32260: PPUSH
32261: PPUSH
32262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32263: LD_ADDR_VAR 0 2
32267: PUSH
32268: LD_INT 81
32270: PUSH
32271: LD_OWVAR 2
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 21
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PPUSH
32294: CALL_OW 69
32298: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32299: LD_STRING playComputer()
32301: PPUSH
32302: CALL_OW 559
// if not tmp then
32306: LD_VAR 0 2
32310: NOT
32311: IFFALSE 32315
// exit ;
32313: GO 32369
// for i in tmp do
32315: LD_ADDR_VAR 0 1
32319: PUSH
32320: LD_VAR 0 2
32324: PUSH
32325: FOR_IN
32326: IFFALSE 32367
// for j := 1 to 4 do
32328: LD_ADDR_VAR 0 3
32332: PUSH
32333: DOUBLE
32334: LD_INT 1
32336: DEC
32337: ST_TO_ADDR
32338: LD_INT 4
32340: PUSH
32341: FOR_TO
32342: IFFALSE 32363
// SetSkill ( i , j , 10 ) ;
32344: LD_VAR 0 1
32348: PPUSH
32349: LD_VAR 0 3
32353: PPUSH
32354: LD_INT 10
32356: PPUSH
32357: CALL_OW 237
32361: GO 32341
32363: POP
32364: POP
32365: GO 32325
32367: POP
32368: POP
// end ;
32369: PPOPN 3
32371: END
// every 0 0$1 trigger s30 do var i , tmp ;
32372: LD_EXP 107
32376: IFFALSE 32445
32378: GO 32380
32380: DISABLE
32381: LD_INT 0
32383: PPUSH
32384: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32385: LD_ADDR_VAR 0 2
32389: PUSH
32390: LD_INT 22
32392: PUSH
32393: LD_OWVAR 2
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PPUSH
32402: CALL_OW 69
32406: ST_TO_ADDR
// if not tmp then
32407: LD_VAR 0 2
32411: NOT
32412: IFFALSE 32416
// exit ;
32414: GO 32445
// for i in tmp do
32416: LD_ADDR_VAR 0 1
32420: PUSH
32421: LD_VAR 0 2
32425: PUSH
32426: FOR_IN
32427: IFFALSE 32443
// SetLives ( i , 300 ) ;
32429: LD_VAR 0 1
32433: PPUSH
32434: LD_INT 300
32436: PPUSH
32437: CALL_OW 234
32441: GO 32426
32443: POP
32444: POP
// end ;
32445: PPOPN 2
32447: END
// every 0 0$1 trigger s60 do var i , tmp ;
32448: LD_EXP 108
32452: IFFALSE 32521
32454: GO 32456
32456: DISABLE
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32461: LD_ADDR_VAR 0 2
32465: PUSH
32466: LD_INT 22
32468: PUSH
32469: LD_OWVAR 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PPUSH
32478: CALL_OW 69
32482: ST_TO_ADDR
// if not tmp then
32483: LD_VAR 0 2
32487: NOT
32488: IFFALSE 32492
// exit ;
32490: GO 32521
// for i in tmp do
32492: LD_ADDR_VAR 0 1
32496: PUSH
32497: LD_VAR 0 2
32501: PUSH
32502: FOR_IN
32503: IFFALSE 32519
// SetLives ( i , 600 ) ;
32505: LD_VAR 0 1
32509: PPUSH
32510: LD_INT 600
32512: PPUSH
32513: CALL_OW 234
32517: GO 32502
32519: POP
32520: POP
// end ;
32521: PPOPN 2
32523: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32524: LD_INT 0
32526: PPUSH
// case cmd of 301 :
32527: LD_VAR 0 1
32531: PUSH
32532: LD_INT 301
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32572
32540: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32541: LD_VAR 0 6
32545: PPUSH
32546: LD_VAR 0 7
32550: PPUSH
32551: LD_VAR 0 8
32555: PPUSH
32556: LD_VAR 0 4
32560: PPUSH
32561: LD_VAR 0 5
32565: PPUSH
32566: CALL 33781 0 5
32570: GO 32693
32572: LD_INT 302
32574: DOUBLE
32575: EQUAL
32576: IFTRUE 32580
32578: GO 32617
32580: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32581: LD_VAR 0 6
32585: PPUSH
32586: LD_VAR 0 7
32590: PPUSH
32591: LD_VAR 0 8
32595: PPUSH
32596: LD_VAR 0 9
32600: PPUSH
32601: LD_VAR 0 4
32605: PPUSH
32606: LD_VAR 0 5
32610: PPUSH
32611: CALL 33872 0 6
32615: GO 32693
32617: LD_INT 303
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32662
32625: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32626: LD_VAR 0 6
32630: PPUSH
32631: LD_VAR 0 7
32635: PPUSH
32636: LD_VAR 0 8
32640: PPUSH
32641: LD_VAR 0 9
32645: PPUSH
32646: LD_VAR 0 4
32650: PPUSH
32651: LD_VAR 0 5
32655: PPUSH
32656: CALL 32698 0 6
32660: GO 32693
32662: LD_INT 304
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32692
32670: POP
// hHackTeleport ( unit , x , y ) ; end ;
32671: LD_VAR 0 2
32675: PPUSH
32676: LD_VAR 0 4
32680: PPUSH
32681: LD_VAR 0 5
32685: PPUSH
32686: CALL 34465 0 3
32690: GO 32693
32692: POP
// end ;
32693: LD_VAR 0 12
32697: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32698: LD_INT 0
32700: PPUSH
32701: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32702: LD_VAR 0 1
32706: PUSH
32707: LD_INT 1
32709: LESS
32710: PUSH
32711: LD_VAR 0 1
32715: PUSH
32716: LD_INT 3
32718: GREATER
32719: OR
32720: PUSH
32721: LD_VAR 0 5
32725: PPUSH
32726: LD_VAR 0 6
32730: PPUSH
32731: CALL_OW 428
32735: OR
32736: IFFALSE 32740
// exit ;
32738: GO 33468
// uc_side := your_side ;
32740: LD_ADDR_OWVAR 20
32744: PUSH
32745: LD_OWVAR 2
32749: ST_TO_ADDR
// uc_nation := nation ;
32750: LD_ADDR_OWVAR 21
32754: PUSH
32755: LD_VAR 0 1
32759: ST_TO_ADDR
// bc_level = 1 ;
32760: LD_ADDR_OWVAR 43
32764: PUSH
32765: LD_INT 1
32767: ST_TO_ADDR
// case btype of 1 :
32768: LD_VAR 0 2
32772: PUSH
32773: LD_INT 1
32775: DOUBLE
32776: EQUAL
32777: IFTRUE 32781
32779: GO 32792
32781: POP
// bc_type := b_depot ; 2 :
32782: LD_ADDR_OWVAR 42
32786: PUSH
32787: LD_INT 0
32789: ST_TO_ADDR
32790: GO 33412
32792: LD_INT 2
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32800
32798: GO 32811
32800: POP
// bc_type := b_warehouse ; 3 :
32801: LD_ADDR_OWVAR 42
32805: PUSH
32806: LD_INT 1
32808: ST_TO_ADDR
32809: GO 33412
32811: LD_INT 3
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32819
32817: GO 32830
32819: POP
// bc_type := b_lab ; 4 .. 9 :
32820: LD_ADDR_OWVAR 42
32824: PUSH
32825: LD_INT 6
32827: ST_TO_ADDR
32828: GO 33412
32830: LD_INT 4
32832: DOUBLE
32833: GREATEREQUAL
32834: IFFALSE 32842
32836: LD_INT 9
32838: DOUBLE
32839: LESSEQUAL
32840: IFTRUE 32844
32842: GO 32904
32844: POP
// begin bc_type := b_lab_half ;
32845: LD_ADDR_OWVAR 42
32849: PUSH
32850: LD_INT 7
32852: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32853: LD_ADDR_OWVAR 44
32857: PUSH
32858: LD_INT 10
32860: PUSH
32861: LD_INT 11
32863: PUSH
32864: LD_INT 12
32866: PUSH
32867: LD_INT 15
32869: PUSH
32870: LD_INT 14
32872: PUSH
32873: LD_INT 13
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: PUSH
32884: LD_VAR 0 2
32888: PUSH
32889: LD_INT 3
32891: MINUS
32892: ARRAY
32893: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32894: LD_ADDR_OWVAR 45
32898: PUSH
32899: LD_INT 9
32901: ST_TO_ADDR
// end ; 10 .. 13 :
32902: GO 33412
32904: LD_INT 10
32906: DOUBLE
32907: GREATEREQUAL
32908: IFFALSE 32916
32910: LD_INT 13
32912: DOUBLE
32913: LESSEQUAL
32914: IFTRUE 32918
32916: GO 32995
32918: POP
// begin bc_type := b_lab_full ;
32919: LD_ADDR_OWVAR 42
32923: PUSH
32924: LD_INT 8
32926: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32927: LD_ADDR_OWVAR 44
32931: PUSH
32932: LD_INT 10
32934: PUSH
32935: LD_INT 12
32937: PUSH
32938: LD_INT 14
32940: PUSH
32941: LD_INT 13
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: PUSH
32950: LD_VAR 0 2
32954: PUSH
32955: LD_INT 9
32957: MINUS
32958: ARRAY
32959: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32960: LD_ADDR_OWVAR 45
32964: PUSH
32965: LD_INT 11
32967: PUSH
32968: LD_INT 15
32970: PUSH
32971: LD_INT 12
32973: PUSH
32974: LD_INT 15
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: PUSH
32983: LD_VAR 0 2
32987: PUSH
32988: LD_INT 9
32990: MINUS
32991: ARRAY
32992: ST_TO_ADDR
// end ; 14 :
32993: GO 33412
32995: LD_INT 14
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33014
33003: POP
// bc_type := b_workshop ; 15 :
33004: LD_ADDR_OWVAR 42
33008: PUSH
33009: LD_INT 2
33011: ST_TO_ADDR
33012: GO 33412
33014: LD_INT 15
33016: DOUBLE
33017: EQUAL
33018: IFTRUE 33022
33020: GO 33033
33022: POP
// bc_type := b_factory ; 16 :
33023: LD_ADDR_OWVAR 42
33027: PUSH
33028: LD_INT 3
33030: ST_TO_ADDR
33031: GO 33412
33033: LD_INT 16
33035: DOUBLE
33036: EQUAL
33037: IFTRUE 33041
33039: GO 33052
33041: POP
// bc_type := b_ext_gun ; 17 :
33042: LD_ADDR_OWVAR 42
33046: PUSH
33047: LD_INT 17
33049: ST_TO_ADDR
33050: GO 33412
33052: LD_INT 17
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33088
33060: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33061: LD_ADDR_OWVAR 42
33065: PUSH
33066: LD_INT 19
33068: PUSH
33069: LD_INT 23
33071: PUSH
33072: LD_INT 19
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: PUSH
33080: LD_VAR 0 1
33084: ARRAY
33085: ST_TO_ADDR
33086: GO 33412
33088: LD_INT 18
33090: DOUBLE
33091: EQUAL
33092: IFTRUE 33096
33094: GO 33107
33096: POP
// bc_type := b_ext_radar ; 19 :
33097: LD_ADDR_OWVAR 42
33101: PUSH
33102: LD_INT 20
33104: ST_TO_ADDR
33105: GO 33412
33107: LD_INT 19
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33115
33113: GO 33126
33115: POP
// bc_type := b_ext_radio ; 20 :
33116: LD_ADDR_OWVAR 42
33120: PUSH
33121: LD_INT 22
33123: ST_TO_ADDR
33124: GO 33412
33126: LD_INT 20
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33145
33134: POP
// bc_type := b_ext_siberium ; 21 :
33135: LD_ADDR_OWVAR 42
33139: PUSH
33140: LD_INT 21
33142: ST_TO_ADDR
33143: GO 33412
33145: LD_INT 21
33147: DOUBLE
33148: EQUAL
33149: IFTRUE 33153
33151: GO 33164
33153: POP
// bc_type := b_ext_computer ; 22 :
33154: LD_ADDR_OWVAR 42
33158: PUSH
33159: LD_INT 24
33161: ST_TO_ADDR
33162: GO 33412
33164: LD_INT 22
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33183
33172: POP
// bc_type := b_ext_track ; 23 :
33173: LD_ADDR_OWVAR 42
33177: PUSH
33178: LD_INT 16
33180: ST_TO_ADDR
33181: GO 33412
33183: LD_INT 23
33185: DOUBLE
33186: EQUAL
33187: IFTRUE 33191
33189: GO 33202
33191: POP
// bc_type := b_ext_laser ; 24 :
33192: LD_ADDR_OWVAR 42
33196: PUSH
33197: LD_INT 25
33199: ST_TO_ADDR
33200: GO 33412
33202: LD_INT 24
33204: DOUBLE
33205: EQUAL
33206: IFTRUE 33210
33208: GO 33221
33210: POP
// bc_type := b_control_tower ; 25 :
33211: LD_ADDR_OWVAR 42
33215: PUSH
33216: LD_INT 36
33218: ST_TO_ADDR
33219: GO 33412
33221: LD_INT 25
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33240
33229: POP
// bc_type := b_breastwork ; 26 :
33230: LD_ADDR_OWVAR 42
33234: PUSH
33235: LD_INT 31
33237: ST_TO_ADDR
33238: GO 33412
33240: LD_INT 26
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33248
33246: GO 33259
33248: POP
// bc_type := b_bunker ; 27 :
33249: LD_ADDR_OWVAR 42
33253: PUSH
33254: LD_INT 32
33256: ST_TO_ADDR
33257: GO 33412
33259: LD_INT 27
33261: DOUBLE
33262: EQUAL
33263: IFTRUE 33267
33265: GO 33278
33267: POP
// bc_type := b_turret ; 28 :
33268: LD_ADDR_OWVAR 42
33272: PUSH
33273: LD_INT 33
33275: ST_TO_ADDR
33276: GO 33412
33278: LD_INT 28
33280: DOUBLE
33281: EQUAL
33282: IFTRUE 33286
33284: GO 33297
33286: POP
// bc_type := b_armoury ; 29 :
33287: LD_ADDR_OWVAR 42
33291: PUSH
33292: LD_INT 4
33294: ST_TO_ADDR
33295: GO 33412
33297: LD_INT 29
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33305
33303: GO 33316
33305: POP
// bc_type := b_barracks ; 30 :
33306: LD_ADDR_OWVAR 42
33310: PUSH
33311: LD_INT 5
33313: ST_TO_ADDR
33314: GO 33412
33316: LD_INT 30
33318: DOUBLE
33319: EQUAL
33320: IFTRUE 33324
33322: GO 33335
33324: POP
// bc_type := b_solar_power ; 31 :
33325: LD_ADDR_OWVAR 42
33329: PUSH
33330: LD_INT 27
33332: ST_TO_ADDR
33333: GO 33412
33335: LD_INT 31
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 33354
33343: POP
// bc_type := b_oil_power ; 32 :
33344: LD_ADDR_OWVAR 42
33348: PUSH
33349: LD_INT 26
33351: ST_TO_ADDR
33352: GO 33412
33354: LD_INT 32
33356: DOUBLE
33357: EQUAL
33358: IFTRUE 33362
33360: GO 33373
33362: POP
// bc_type := b_siberite_power ; 33 :
33363: LD_ADDR_OWVAR 42
33367: PUSH
33368: LD_INT 28
33370: ST_TO_ADDR
33371: GO 33412
33373: LD_INT 33
33375: DOUBLE
33376: EQUAL
33377: IFTRUE 33381
33379: GO 33392
33381: POP
// bc_type := b_oil_mine ; 34 :
33382: LD_ADDR_OWVAR 42
33386: PUSH
33387: LD_INT 29
33389: ST_TO_ADDR
33390: GO 33412
33392: LD_INT 34
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33411
33400: POP
// bc_type := b_siberite_mine ; end ;
33401: LD_ADDR_OWVAR 42
33405: PUSH
33406: LD_INT 30
33408: ST_TO_ADDR
33409: GO 33412
33411: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33412: LD_ADDR_VAR 0 8
33416: PUSH
33417: LD_VAR 0 5
33421: PPUSH
33422: LD_VAR 0 6
33426: PPUSH
33427: LD_VAR 0 3
33431: PPUSH
33432: CALL_OW 47
33436: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33437: LD_OWVAR 42
33441: PUSH
33442: LD_INT 32
33444: PUSH
33445: LD_INT 33
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: IN
33452: IFFALSE 33468
// PlaceWeaponTurret ( b , weapon ) ;
33454: LD_VAR 0 8
33458: PPUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: CALL_OW 431
// end ;
33468: LD_VAR 0 7
33472: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33473: LD_INT 0
33475: PPUSH
33476: PPUSH
33477: PPUSH
33478: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33479: LD_ADDR_VAR 0 4
33483: PUSH
33484: LD_INT 22
33486: PUSH
33487: LD_OWVAR 2
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: LD_INT 30
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 30
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PPUSH
33528: CALL_OW 69
33532: ST_TO_ADDR
// if not tmp then
33533: LD_VAR 0 4
33537: NOT
33538: IFFALSE 33542
// exit ;
33540: GO 33601
// for i in tmp do
33542: LD_ADDR_VAR 0 2
33546: PUSH
33547: LD_VAR 0 4
33551: PUSH
33552: FOR_IN
33553: IFFALSE 33599
// for j = 1 to 3 do
33555: LD_ADDR_VAR 0 3
33559: PUSH
33560: DOUBLE
33561: LD_INT 1
33563: DEC
33564: ST_TO_ADDR
33565: LD_INT 3
33567: PUSH
33568: FOR_TO
33569: IFFALSE 33595
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33571: LD_VAR 0 2
33575: PPUSH
33576: CALL_OW 274
33580: PPUSH
33581: LD_VAR 0 3
33585: PPUSH
33586: LD_INT 99999
33588: PPUSH
33589: CALL_OW 277
33593: GO 33568
33595: POP
33596: POP
33597: GO 33552
33599: POP
33600: POP
// end ;
33601: LD_VAR 0 1
33605: RET
// export function hHackSetLevel10 ; var i , j ; begin
33606: LD_INT 0
33608: PPUSH
33609: PPUSH
33610: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33611: LD_ADDR_VAR 0 2
33615: PUSH
33616: LD_INT 21
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PPUSH
33626: CALL_OW 69
33630: PUSH
33631: FOR_IN
33632: IFFALSE 33684
// if IsSelected ( i ) then
33634: LD_VAR 0 2
33638: PPUSH
33639: CALL_OW 306
33643: IFFALSE 33682
// begin for j := 1 to 4 do
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: DOUBLE
33651: LD_INT 1
33653: DEC
33654: ST_TO_ADDR
33655: LD_INT 4
33657: PUSH
33658: FOR_TO
33659: IFFALSE 33680
// SetSkill ( i , j , 10 ) ;
33661: LD_VAR 0 2
33665: PPUSH
33666: LD_VAR 0 3
33670: PPUSH
33671: LD_INT 10
33673: PPUSH
33674: CALL_OW 237
33678: GO 33658
33680: POP
33681: POP
// end ;
33682: GO 33631
33684: POP
33685: POP
// end ;
33686: LD_VAR 0 1
33690: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33691: LD_INT 0
33693: PPUSH
33694: PPUSH
33695: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33696: LD_ADDR_VAR 0 2
33700: PUSH
33701: LD_INT 22
33703: PUSH
33704: LD_OWVAR 2
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 21
33715: PUSH
33716: LD_INT 1
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PPUSH
33727: CALL_OW 69
33731: PUSH
33732: FOR_IN
33733: IFFALSE 33774
// begin for j := 1 to 4 do
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: DOUBLE
33741: LD_INT 1
33743: DEC
33744: ST_TO_ADDR
33745: LD_INT 4
33747: PUSH
33748: FOR_TO
33749: IFFALSE 33770
// SetSkill ( i , j , 10 ) ;
33751: LD_VAR 0 2
33755: PPUSH
33756: LD_VAR 0 3
33760: PPUSH
33761: LD_INT 10
33763: PPUSH
33764: CALL_OW 237
33768: GO 33748
33770: POP
33771: POP
// end ;
33772: GO 33732
33774: POP
33775: POP
// end ;
33776: LD_VAR 0 1
33780: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33781: LD_INT 0
33783: PPUSH
// uc_side := your_side ;
33784: LD_ADDR_OWVAR 20
33788: PUSH
33789: LD_OWVAR 2
33793: ST_TO_ADDR
// uc_nation := nation ;
33794: LD_ADDR_OWVAR 21
33798: PUSH
33799: LD_VAR 0 1
33803: ST_TO_ADDR
// InitHc ;
33804: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33808: LD_INT 0
33810: PPUSH
33811: LD_VAR 0 2
33815: PPUSH
33816: LD_VAR 0 3
33820: PPUSH
33821: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33825: LD_VAR 0 4
33829: PPUSH
33830: LD_VAR 0 5
33834: PPUSH
33835: CALL_OW 428
33839: PUSH
33840: LD_INT 0
33842: EQUAL
33843: IFFALSE 33867
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33845: CALL_OW 44
33849: PPUSH
33850: LD_VAR 0 4
33854: PPUSH
33855: LD_VAR 0 5
33859: PPUSH
33860: LD_INT 1
33862: PPUSH
33863: CALL_OW 48
// end ;
33867: LD_VAR 0 6
33871: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33872: LD_INT 0
33874: PPUSH
33875: PPUSH
// uc_side := your_side ;
33876: LD_ADDR_OWVAR 20
33880: PUSH
33881: LD_OWVAR 2
33885: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33886: LD_VAR 0 1
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: LD_INT 4
33902: PUSH
33903: LD_INT 5
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: IN
33913: IFFALSE 33925
// uc_nation := nation_american else
33915: LD_ADDR_OWVAR 21
33919: PUSH
33920: LD_INT 1
33922: ST_TO_ADDR
33923: GO 33968
// if chassis in [ 11 , 12 , 13 , 14 ] then
33925: LD_VAR 0 1
33929: PUSH
33930: LD_INT 11
33932: PUSH
33933: LD_INT 12
33935: PUSH
33936: LD_INT 13
33938: PUSH
33939: LD_INT 14
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: IN
33948: IFFALSE 33960
// uc_nation := nation_arabian else
33950: LD_ADDR_OWVAR 21
33954: PUSH
33955: LD_INT 2
33957: ST_TO_ADDR
33958: GO 33968
// uc_nation := nation_russian ;
33960: LD_ADDR_OWVAR 21
33964: PUSH
33965: LD_INT 3
33967: ST_TO_ADDR
// vc_chassis := chassis ;
33968: LD_ADDR_OWVAR 37
33972: PUSH
33973: LD_VAR 0 1
33977: ST_TO_ADDR
// vc_engine := engine ;
33978: LD_ADDR_OWVAR 39
33982: PUSH
33983: LD_VAR 0 2
33987: ST_TO_ADDR
// vc_control := control ;
33988: LD_ADDR_OWVAR 38
33992: PUSH
33993: LD_VAR 0 3
33997: ST_TO_ADDR
// vc_weapon := weapon ;
33998: LD_ADDR_OWVAR 40
34002: PUSH
34003: LD_VAR 0 4
34007: ST_TO_ADDR
// un := CreateVehicle ;
34008: LD_ADDR_VAR 0 8
34012: PUSH
34013: CALL_OW 45
34017: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34018: LD_VAR 0 8
34022: PPUSH
34023: LD_INT 0
34025: PPUSH
34026: LD_INT 5
34028: PPUSH
34029: CALL_OW 12
34033: PPUSH
34034: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34038: LD_VAR 0 8
34042: PPUSH
34043: LD_VAR 0 5
34047: PPUSH
34048: LD_VAR 0 6
34052: PPUSH
34053: LD_INT 1
34055: PPUSH
34056: CALL_OW 48
// end ;
34060: LD_VAR 0 7
34064: RET
// export hInvincible ; every 1 do
34065: GO 34067
34067: DISABLE
// hInvincible := [ ] ;
34068: LD_ADDR_EXP 109
34072: PUSH
34073: EMPTY
34074: ST_TO_ADDR
34075: END
// every 10 do var i ;
34076: GO 34078
34078: DISABLE
34079: LD_INT 0
34081: PPUSH
// begin enable ;
34082: ENABLE
// if not hInvincible then
34083: LD_EXP 109
34087: NOT
34088: IFFALSE 34092
// exit ;
34090: GO 34136
// for i in hInvincible do
34092: LD_ADDR_VAR 0 1
34096: PUSH
34097: LD_EXP 109
34101: PUSH
34102: FOR_IN
34103: IFFALSE 34134
// if GetLives ( i ) < 1000 then
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 256
34114: PUSH
34115: LD_INT 1000
34117: LESS
34118: IFFALSE 34132
// SetLives ( i , 1000 ) ;
34120: LD_VAR 0 1
34124: PPUSH
34125: LD_INT 1000
34127: PPUSH
34128: CALL_OW 234
34132: GO 34102
34134: POP
34135: POP
// end ;
34136: PPOPN 1
34138: END
// export function hHackInvincible ; var i ; begin
34139: LD_INT 0
34141: PPUSH
34142: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34143: LD_ADDR_VAR 0 2
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 21
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 21
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: PPUSH
34176: CALL_OW 69
34180: PUSH
34181: FOR_IN
34182: IFFALSE 34243
// if IsSelected ( i ) then
34184: LD_VAR 0 2
34188: PPUSH
34189: CALL_OW 306
34193: IFFALSE 34241
// begin if i in hInvincible then
34195: LD_VAR 0 2
34199: PUSH
34200: LD_EXP 109
34204: IN
34205: IFFALSE 34225
// hInvincible := hInvincible diff i else
34207: LD_ADDR_EXP 109
34211: PUSH
34212: LD_EXP 109
34216: PUSH
34217: LD_VAR 0 2
34221: DIFF
34222: ST_TO_ADDR
34223: GO 34241
// hInvincible := hInvincible union i ;
34225: LD_ADDR_EXP 109
34229: PUSH
34230: LD_EXP 109
34234: PUSH
34235: LD_VAR 0 2
34239: UNION
34240: ST_TO_ADDR
// end ;
34241: GO 34181
34243: POP
34244: POP
// end ;
34245: LD_VAR 0 1
34249: RET
// export function hHackInvisible ; var i , j ; begin
34250: LD_INT 0
34252: PPUSH
34253: PPUSH
34254: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34255: LD_ADDR_VAR 0 2
34259: PUSH
34260: LD_INT 21
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PPUSH
34270: CALL_OW 69
34274: PUSH
34275: FOR_IN
34276: IFFALSE 34300
// if IsSelected ( i ) then
34278: LD_VAR 0 2
34282: PPUSH
34283: CALL_OW 306
34287: IFFALSE 34298
// ComForceInvisible ( i ) ;
34289: LD_VAR 0 2
34293: PPUSH
34294: CALL_OW 496
34298: GO 34275
34300: POP
34301: POP
// end ;
34302: LD_VAR 0 1
34306: RET
// export function hHackChangeYourSide ; begin
34307: LD_INT 0
34309: PPUSH
// if your_side = 8 then
34310: LD_OWVAR 2
34314: PUSH
34315: LD_INT 8
34317: EQUAL
34318: IFFALSE 34330
// your_side := 0 else
34320: LD_ADDR_OWVAR 2
34324: PUSH
34325: LD_INT 0
34327: ST_TO_ADDR
34328: GO 34344
// your_side := your_side + 1 ;
34330: LD_ADDR_OWVAR 2
34334: PUSH
34335: LD_OWVAR 2
34339: PUSH
34340: LD_INT 1
34342: PLUS
34343: ST_TO_ADDR
// end ;
34344: LD_VAR 0 1
34348: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34349: LD_INT 0
34351: PPUSH
34352: PPUSH
34353: PPUSH
// for i in all_units do
34354: LD_ADDR_VAR 0 2
34358: PUSH
34359: LD_OWVAR 3
34363: PUSH
34364: FOR_IN
34365: IFFALSE 34443
// if IsSelected ( i ) then
34367: LD_VAR 0 2
34371: PPUSH
34372: CALL_OW 306
34376: IFFALSE 34441
// begin j := GetSide ( i ) ;
34378: LD_ADDR_VAR 0 3
34382: PUSH
34383: LD_VAR 0 2
34387: PPUSH
34388: CALL_OW 255
34392: ST_TO_ADDR
// if j = 8 then
34393: LD_VAR 0 3
34397: PUSH
34398: LD_INT 8
34400: EQUAL
34401: IFFALSE 34413
// j := 0 else
34403: LD_ADDR_VAR 0 3
34407: PUSH
34408: LD_INT 0
34410: ST_TO_ADDR
34411: GO 34427
// j := j + 1 ;
34413: LD_ADDR_VAR 0 3
34417: PUSH
34418: LD_VAR 0 3
34422: PUSH
34423: LD_INT 1
34425: PLUS
34426: ST_TO_ADDR
// SetSide ( i , j ) ;
34427: LD_VAR 0 2
34431: PPUSH
34432: LD_VAR 0 3
34436: PPUSH
34437: CALL_OW 235
// end ;
34441: GO 34364
34443: POP
34444: POP
// end ;
34445: LD_VAR 0 1
34449: RET
// export function hHackFog ; begin
34450: LD_INT 0
34452: PPUSH
// FogOff ( true ) ;
34453: LD_INT 1
34455: PPUSH
34456: CALL_OW 344
// end ;
34460: LD_VAR 0 1
34464: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34465: LD_INT 0
34467: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34468: LD_VAR 0 1
34472: PPUSH
34473: LD_VAR 0 2
34477: PPUSH
34478: LD_VAR 0 3
34482: PPUSH
34483: LD_INT 1
34485: PPUSH
34486: LD_INT 1
34488: PPUSH
34489: CALL_OW 483
// CenterOnXY ( x , y ) ;
34493: LD_VAR 0 2
34497: PPUSH
34498: LD_VAR 0 3
34502: PPUSH
34503: CALL_OW 84
// end ;
34507: LD_VAR 0 4
34511: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34512: LD_INT 0
34514: PPUSH
34515: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34516: LD_VAR 0 1
34520: NOT
34521: PUSH
34522: LD_VAR 0 2
34526: PPUSH
34527: LD_VAR 0 3
34531: PPUSH
34532: CALL_OW 488
34536: NOT
34537: OR
34538: PUSH
34539: LD_VAR 0 1
34543: PPUSH
34544: CALL_OW 266
34548: PUSH
34549: LD_INT 3
34551: NONEQUAL
34552: PUSH
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 247
34562: PUSH
34563: LD_INT 1
34565: EQUAL
34566: NOT
34567: AND
34568: OR
34569: IFFALSE 34573
// exit ;
34571: GO 34722
// if GetType ( factory ) = unit_human then
34573: LD_VAR 0 1
34577: PPUSH
34578: CALL_OW 247
34582: PUSH
34583: LD_INT 1
34585: EQUAL
34586: IFFALSE 34603
// factory := IsInUnit ( factory ) ;
34588: LD_ADDR_VAR 0 1
34592: PUSH
34593: LD_VAR 0 1
34597: PPUSH
34598: CALL_OW 310
34602: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34603: LD_VAR 0 1
34607: PPUSH
34608: CALL_OW 266
34612: PUSH
34613: LD_INT 3
34615: NONEQUAL
34616: IFFALSE 34620
// exit ;
34618: GO 34722
// if HexInfo ( x , y ) = factory then
34620: LD_VAR 0 2
34624: PPUSH
34625: LD_VAR 0 3
34629: PPUSH
34630: CALL_OW 428
34634: PUSH
34635: LD_VAR 0 1
34639: EQUAL
34640: IFFALSE 34667
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34642: LD_ADDR_EXP 110
34646: PUSH
34647: LD_EXP 110
34651: PPUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: LD_INT 0
34659: PPUSH
34660: CALL_OW 1
34664: ST_TO_ADDR
34665: GO 34718
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34667: LD_ADDR_EXP 110
34671: PUSH
34672: LD_EXP 110
34676: PPUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: LD_VAR 0 1
34686: PPUSH
34687: CALL_OW 255
34691: PUSH
34692: LD_VAR 0 1
34696: PUSH
34697: LD_VAR 0 2
34701: PUSH
34702: LD_VAR 0 3
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: PPUSH
34713: CALL_OW 1
34717: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34718: CALL 34727 0 0
// end ;
34722: LD_VAR 0 4
34726: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34727: LD_INT 0
34729: PPUSH
34730: PPUSH
34731: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34732: LD_STRING resetFactoryWaypoint();
34734: PPUSH
34735: CALL_OW 559
// if factoryWaypoints then
34739: LD_EXP 110
34743: IFFALSE 34869
// begin list := PrepareArray ( factoryWaypoints ) ;
34745: LD_ADDR_VAR 0 3
34749: PUSH
34750: LD_EXP 110
34754: PPUSH
34755: CALL 82166 0 1
34759: ST_TO_ADDR
// for i := 1 to list do
34760: LD_ADDR_VAR 0 2
34764: PUSH
34765: DOUBLE
34766: LD_INT 1
34768: DEC
34769: ST_TO_ADDR
34770: LD_VAR 0 3
34774: PUSH
34775: FOR_TO
34776: IFFALSE 34867
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34778: LD_STRING setFactoryWaypointXY(
34780: PUSH
34781: LD_VAR 0 3
34785: PUSH
34786: LD_VAR 0 2
34790: ARRAY
34791: PUSH
34792: LD_INT 1
34794: ARRAY
34795: STR
34796: PUSH
34797: LD_STRING ,
34799: STR
34800: PUSH
34801: LD_VAR 0 3
34805: PUSH
34806: LD_VAR 0 2
34810: ARRAY
34811: PUSH
34812: LD_INT 2
34814: ARRAY
34815: STR
34816: PUSH
34817: LD_STRING ,
34819: STR
34820: PUSH
34821: LD_VAR 0 3
34825: PUSH
34826: LD_VAR 0 2
34830: ARRAY
34831: PUSH
34832: LD_INT 3
34834: ARRAY
34835: STR
34836: PUSH
34837: LD_STRING ,
34839: STR
34840: PUSH
34841: LD_VAR 0 3
34845: PUSH
34846: LD_VAR 0 2
34850: ARRAY
34851: PUSH
34852: LD_INT 4
34854: ARRAY
34855: STR
34856: PUSH
34857: LD_STRING )
34859: STR
34860: PPUSH
34861: CALL_OW 559
34865: GO 34775
34867: POP
34868: POP
// end ; end ;
34869: LD_VAR 0 1
34873: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34874: LD_INT 0
34876: PPUSH
// if HexInfo ( x , y ) = warehouse then
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_VAR 0 3
34886: PPUSH
34887: CALL_OW 428
34891: PUSH
34892: LD_VAR 0 1
34896: EQUAL
34897: IFFALSE 34924
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34899: LD_ADDR_EXP 111
34903: PUSH
34904: LD_EXP 111
34908: PPUSH
34909: LD_VAR 0 1
34913: PPUSH
34914: LD_INT 0
34916: PPUSH
34917: CALL_OW 1
34921: ST_TO_ADDR
34922: GO 34975
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34924: LD_ADDR_EXP 111
34928: PUSH
34929: LD_EXP 111
34933: PPUSH
34934: LD_VAR 0 1
34938: PPUSH
34939: LD_VAR 0 1
34943: PPUSH
34944: CALL_OW 255
34948: PUSH
34949: LD_VAR 0 1
34953: PUSH
34954: LD_VAR 0 2
34958: PUSH
34959: LD_VAR 0 3
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: PPUSH
34970: CALL_OW 1
34974: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34975: CALL 34984 0 0
// end ;
34979: LD_VAR 0 4
34983: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34984: LD_INT 0
34986: PPUSH
34987: PPUSH
34988: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34989: LD_STRING resetWarehouseGatheringPoints();
34991: PPUSH
34992: CALL_OW 559
// if warehouseGatheringPoints then
34996: LD_EXP 111
35000: IFFALSE 35126
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35002: LD_ADDR_VAR 0 3
35006: PUSH
35007: LD_EXP 111
35011: PPUSH
35012: CALL 82166 0 1
35016: ST_TO_ADDR
// for i := 1 to list do
35017: LD_ADDR_VAR 0 2
35021: PUSH
35022: DOUBLE
35023: LD_INT 1
35025: DEC
35026: ST_TO_ADDR
35027: LD_VAR 0 3
35031: PUSH
35032: FOR_TO
35033: IFFALSE 35124
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35035: LD_STRING setWarehouseGatheringPointXY(
35037: PUSH
35038: LD_VAR 0 3
35042: PUSH
35043: LD_VAR 0 2
35047: ARRAY
35048: PUSH
35049: LD_INT 1
35051: ARRAY
35052: STR
35053: PUSH
35054: LD_STRING ,
35056: STR
35057: PUSH
35058: LD_VAR 0 3
35062: PUSH
35063: LD_VAR 0 2
35067: ARRAY
35068: PUSH
35069: LD_INT 2
35071: ARRAY
35072: STR
35073: PUSH
35074: LD_STRING ,
35076: STR
35077: PUSH
35078: LD_VAR 0 3
35082: PUSH
35083: LD_VAR 0 2
35087: ARRAY
35088: PUSH
35089: LD_INT 3
35091: ARRAY
35092: STR
35093: PUSH
35094: LD_STRING ,
35096: STR
35097: PUSH
35098: LD_VAR 0 3
35102: PUSH
35103: LD_VAR 0 2
35107: ARRAY
35108: PUSH
35109: LD_INT 4
35111: ARRAY
35112: STR
35113: PUSH
35114: LD_STRING )
35116: STR
35117: PPUSH
35118: CALL_OW 559
35122: GO 35032
35124: POP
35125: POP
// end ; end ;
35126: LD_VAR 0 1
35130: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35131: LD_EXP 111
35135: IFFALSE 35820
35137: GO 35139
35139: DISABLE
35140: LD_INT 0
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
// begin enable ;
35151: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35152: LD_ADDR_VAR 0 3
35156: PUSH
35157: LD_EXP 111
35161: PPUSH
35162: CALL 82166 0 1
35166: ST_TO_ADDR
// if not list then
35167: LD_VAR 0 3
35171: NOT
35172: IFFALSE 35176
// exit ;
35174: GO 35820
// for i := 1 to list do
35176: LD_ADDR_VAR 0 1
35180: PUSH
35181: DOUBLE
35182: LD_INT 1
35184: DEC
35185: ST_TO_ADDR
35186: LD_VAR 0 3
35190: PUSH
35191: FOR_TO
35192: IFFALSE 35818
// begin depot := list [ i ] [ 2 ] ;
35194: LD_ADDR_VAR 0 8
35198: PUSH
35199: LD_VAR 0 3
35203: PUSH
35204: LD_VAR 0 1
35208: ARRAY
35209: PUSH
35210: LD_INT 2
35212: ARRAY
35213: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35214: LD_ADDR_VAR 0 5
35218: PUSH
35219: LD_VAR 0 3
35223: PUSH
35224: LD_VAR 0 1
35228: ARRAY
35229: PUSH
35230: LD_INT 1
35232: ARRAY
35233: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35234: LD_VAR 0 8
35238: PPUSH
35239: CALL_OW 301
35243: PUSH
35244: LD_VAR 0 5
35248: PUSH
35249: LD_VAR 0 8
35253: PPUSH
35254: CALL_OW 255
35258: NONEQUAL
35259: OR
35260: IFFALSE 35289
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35262: LD_ADDR_EXP 111
35266: PUSH
35267: LD_EXP 111
35271: PPUSH
35272: LD_VAR 0 8
35276: PPUSH
35277: LD_INT 0
35279: PPUSH
35280: CALL_OW 1
35284: ST_TO_ADDR
// exit ;
35285: POP
35286: POP
35287: GO 35820
// end ; x := list [ i ] [ 3 ] ;
35289: LD_ADDR_VAR 0 6
35293: PUSH
35294: LD_VAR 0 3
35298: PUSH
35299: LD_VAR 0 1
35303: ARRAY
35304: PUSH
35305: LD_INT 3
35307: ARRAY
35308: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35309: LD_ADDR_VAR 0 7
35313: PUSH
35314: LD_VAR 0 3
35318: PUSH
35319: LD_VAR 0 1
35323: ARRAY
35324: PUSH
35325: LD_INT 4
35327: ARRAY
35328: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35329: LD_ADDR_VAR 0 9
35333: PUSH
35334: LD_VAR 0 6
35338: PPUSH
35339: LD_VAR 0 7
35343: PPUSH
35344: LD_INT 16
35346: PPUSH
35347: CALL 80754 0 3
35351: ST_TO_ADDR
// if not cratesNearbyPoint then
35352: LD_VAR 0 9
35356: NOT
35357: IFFALSE 35363
// exit ;
35359: POP
35360: POP
35361: GO 35820
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35363: LD_ADDR_VAR 0 4
35367: PUSH
35368: LD_INT 22
35370: PUSH
35371: LD_VAR 0 5
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 3
35382: PUSH
35383: LD_INT 60
35385: PUSH
35386: EMPTY
35387: LIST
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 91
35395: PUSH
35396: LD_VAR 0 8
35400: PUSH
35401: LD_INT 6
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 25
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 25
35424: PUSH
35425: LD_INT 16
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: PPUSH
35443: CALL_OW 69
35447: PUSH
35448: LD_VAR 0 8
35452: PPUSH
35453: CALL_OW 313
35457: PPUSH
35458: LD_INT 3
35460: PUSH
35461: LD_INT 60
35463: PUSH
35464: EMPTY
35465: LIST
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 25
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 25
35486: PUSH
35487: LD_INT 16
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PPUSH
35503: CALL_OW 72
35507: UNION
35508: ST_TO_ADDR
// if tmp then
35509: LD_VAR 0 4
35513: IFFALSE 35593
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35515: LD_ADDR_VAR 0 4
35519: PUSH
35520: LD_VAR 0 4
35524: PPUSH
35525: LD_INT 3
35527: PPUSH
35528: CALL 78723 0 2
35532: ST_TO_ADDR
// for j in tmp do
35533: LD_ADDR_VAR 0 2
35537: PUSH
35538: LD_VAR 0 4
35542: PUSH
35543: FOR_IN
35544: IFFALSE 35587
// begin if IsInUnit ( j ) then
35546: LD_VAR 0 2
35550: PPUSH
35551: CALL_OW 310
35555: IFFALSE 35566
// ComExit ( j ) ;
35557: LD_VAR 0 2
35561: PPUSH
35562: CALL 78806 0 1
// AddComCollect ( j , x , y ) ;
35566: LD_VAR 0 2
35570: PPUSH
35571: LD_VAR 0 6
35575: PPUSH
35576: LD_VAR 0 7
35580: PPUSH
35581: CALL_OW 177
// end ;
35585: GO 35543
35587: POP
35588: POP
// exit ;
35589: POP
35590: POP
35591: GO 35820
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35593: LD_ADDR_VAR 0 4
35597: PUSH
35598: LD_INT 22
35600: PUSH
35601: LD_VAR 0 5
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 91
35612: PUSH
35613: LD_VAR 0 8
35617: PUSH
35618: LD_INT 8
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 34
35631: PUSH
35632: LD_INT 12
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 34
35641: PUSH
35642: LD_INT 51
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 34
35651: PUSH
35652: LD_INT 32
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 34
35661: PUSH
35662: LD_INT 89
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: LIST
35680: PPUSH
35681: CALL_OW 69
35685: ST_TO_ADDR
// if tmp then
35686: LD_VAR 0 4
35690: IFFALSE 35816
// begin for j in tmp do
35692: LD_ADDR_VAR 0 2
35696: PUSH
35697: LD_VAR 0 4
35701: PUSH
35702: FOR_IN
35703: IFFALSE 35814
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35705: LD_VAR 0 2
35709: PPUSH
35710: CALL_OW 262
35714: PUSH
35715: LD_INT 3
35717: EQUAL
35718: PUSH
35719: LD_VAR 0 2
35723: PPUSH
35724: CALL_OW 261
35728: PUSH
35729: LD_INT 20
35731: GREATER
35732: OR
35733: PUSH
35734: LD_VAR 0 2
35738: PPUSH
35739: CALL_OW 314
35743: NOT
35744: AND
35745: PUSH
35746: LD_VAR 0 2
35750: PPUSH
35751: CALL_OW 263
35755: PUSH
35756: LD_INT 1
35758: NONEQUAL
35759: PUSH
35760: LD_VAR 0 2
35764: PPUSH
35765: CALL_OW 311
35769: OR
35770: AND
35771: IFFALSE 35812
// begin ComCollect ( j , x , y ) ;
35773: LD_VAR 0 2
35777: PPUSH
35778: LD_VAR 0 6
35782: PPUSH
35783: LD_VAR 0 7
35787: PPUSH
35788: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35792: LD_VAR 0 2
35796: PPUSH
35797: LD_VAR 0 8
35801: PPUSH
35802: CALL_OW 172
// exit ;
35806: POP
35807: POP
35808: POP
35809: POP
35810: GO 35820
// end ;
35812: GO 35702
35814: POP
35815: POP
// end ; end ;
35816: GO 35191
35818: POP
35819: POP
// end ; end_of_file
35820: PPOPN 9
35822: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35823: LD_INT 0
35825: PPUSH
35826: PPUSH
35827: PPUSH
35828: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35829: LD_VAR 0 1
35833: PPUSH
35834: CALL_OW 264
35838: PUSH
35839: LD_INT 91
35841: EQUAL
35842: IFFALSE 35914
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35844: LD_INT 68
35846: PPUSH
35847: LD_VAR 0 1
35851: PPUSH
35852: CALL_OW 255
35856: PPUSH
35857: CALL_OW 321
35861: PUSH
35862: LD_INT 2
35864: EQUAL
35865: IFFALSE 35877
// eff := 70 else
35867: LD_ADDR_VAR 0 4
35871: PUSH
35872: LD_INT 70
35874: ST_TO_ADDR
35875: GO 35885
// eff := 30 ;
35877: LD_ADDR_VAR 0 4
35881: PUSH
35882: LD_INT 30
35884: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL_OW 250
35894: PPUSH
35895: LD_VAR 0 1
35899: PPUSH
35900: CALL_OW 251
35904: PPUSH
35905: LD_VAR 0 4
35909: PPUSH
35910: CALL_OW 495
// end ; end ;
35914: LD_VAR 0 2
35918: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35919: LD_INT 0
35921: PPUSH
// end ;
35922: LD_VAR 0 4
35926: RET
// export function SOS_Command ( cmd ) ; begin
35927: LD_INT 0
35929: PPUSH
// end ;
35930: LD_VAR 0 2
35934: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35935: LD_INT 0
35937: PPUSH
// end ;
35938: LD_VAR 0 6
35942: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35943: LD_INT 0
35945: PPUSH
35946: PPUSH
// if not vehicle or not factory then
35947: LD_VAR 0 1
35951: NOT
35952: PUSH
35953: LD_VAR 0 2
35957: NOT
35958: OR
35959: IFFALSE 35963
// exit ;
35961: GO 36194
// if factoryWaypoints >= factory then
35963: LD_EXP 110
35967: PUSH
35968: LD_VAR 0 2
35972: GREATEREQUAL
35973: IFFALSE 36194
// if factoryWaypoints [ factory ] then
35975: LD_EXP 110
35979: PUSH
35980: LD_VAR 0 2
35984: ARRAY
35985: IFFALSE 36194
// begin if GetControl ( vehicle ) = control_manual then
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 263
35996: PUSH
35997: LD_INT 1
35999: EQUAL
36000: IFFALSE 36081
// begin driver := IsDrivenBy ( vehicle ) ;
36002: LD_ADDR_VAR 0 4
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 311
36016: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36017: LD_VAR 0 4
36021: PPUSH
36022: LD_EXP 110
36026: PUSH
36027: LD_VAR 0 2
36031: ARRAY
36032: PUSH
36033: LD_INT 3
36035: ARRAY
36036: PPUSH
36037: LD_EXP 110
36041: PUSH
36042: LD_VAR 0 2
36046: ARRAY
36047: PUSH
36048: LD_INT 4
36050: ARRAY
36051: PPUSH
36052: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36056: LD_VAR 0 4
36060: PPUSH
36061: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36065: LD_VAR 0 4
36069: PPUSH
36070: LD_VAR 0 2
36074: PPUSH
36075: CALL_OW 180
// end else
36079: GO 36194
// if GetControl ( vehicle ) = control_remote then
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 263
36090: PUSH
36091: LD_INT 2
36093: EQUAL
36094: IFFALSE 36155
// begin wait ( 0 0$2 ) ;
36096: LD_INT 70
36098: PPUSH
36099: CALL_OW 67
// if Connect ( vehicle ) then
36103: LD_VAR 0 1
36107: PPUSH
36108: CALL 49025 0 1
36112: IFFALSE 36153
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36114: LD_VAR 0 1
36118: PPUSH
36119: LD_EXP 110
36123: PUSH
36124: LD_VAR 0 2
36128: ARRAY
36129: PUSH
36130: LD_INT 3
36132: ARRAY
36133: PPUSH
36134: LD_EXP 110
36138: PUSH
36139: LD_VAR 0 2
36143: ARRAY
36144: PUSH
36145: LD_INT 4
36147: ARRAY
36148: PPUSH
36149: CALL_OW 171
// end else
36153: GO 36194
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36155: LD_VAR 0 1
36159: PPUSH
36160: LD_EXP 110
36164: PUSH
36165: LD_VAR 0 2
36169: ARRAY
36170: PUSH
36171: LD_INT 3
36173: ARRAY
36174: PPUSH
36175: LD_EXP 110
36179: PUSH
36180: LD_VAR 0 2
36184: ARRAY
36185: PUSH
36186: LD_INT 4
36188: ARRAY
36189: PPUSH
36190: CALL_OW 171
// end ; end ;
36194: LD_VAR 0 3
36198: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36199: LD_INT 0
36201: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36202: LD_VAR 0 1
36206: PUSH
36207: LD_INT 250
36209: EQUAL
36210: PUSH
36211: LD_VAR 0 2
36215: PPUSH
36216: CALL_OW 264
36220: PUSH
36221: LD_INT 81
36223: EQUAL
36224: AND
36225: IFFALSE 36246
// MinerPlaceMine ( unit , x , y ) ;
36227: LD_VAR 0 2
36231: PPUSH
36232: LD_VAR 0 4
36236: PPUSH
36237: LD_VAR 0 5
36241: PPUSH
36242: CALL 39236 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36246: LD_VAR 0 1
36250: PUSH
36251: LD_INT 251
36253: EQUAL
36254: PUSH
36255: LD_VAR 0 2
36259: PPUSH
36260: CALL_OW 264
36264: PUSH
36265: LD_INT 81
36267: EQUAL
36268: AND
36269: IFFALSE 36290
// MinerDetonateMine ( unit , x , y ) ;
36271: LD_VAR 0 2
36275: PPUSH
36276: LD_VAR 0 4
36280: PPUSH
36281: LD_VAR 0 5
36285: PPUSH
36286: CALL 39511 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36290: LD_VAR 0 1
36294: PUSH
36295: LD_INT 252
36297: EQUAL
36298: PUSH
36299: LD_VAR 0 2
36303: PPUSH
36304: CALL_OW 264
36308: PUSH
36309: LD_INT 81
36311: EQUAL
36312: AND
36313: IFFALSE 36334
// MinerCreateMinefield ( unit , x , y ) ;
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 4
36324: PPUSH
36325: LD_VAR 0 5
36329: PPUSH
36330: CALL 39928 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36334: LD_VAR 0 1
36338: PUSH
36339: LD_INT 253
36341: EQUAL
36342: PUSH
36343: LD_VAR 0 2
36347: PPUSH
36348: CALL_OW 257
36352: PUSH
36353: LD_INT 5
36355: EQUAL
36356: AND
36357: IFFALSE 36378
// ComBinocular ( unit , x , y ) ;
36359: LD_VAR 0 2
36363: PPUSH
36364: LD_VAR 0 4
36368: PPUSH
36369: LD_VAR 0 5
36373: PPUSH
36374: CALL 40297 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36378: LD_VAR 0 1
36382: PUSH
36383: LD_INT 254
36385: EQUAL
36386: PUSH
36387: LD_VAR 0 2
36391: PPUSH
36392: CALL_OW 264
36396: PUSH
36397: LD_INT 99
36399: EQUAL
36400: AND
36401: PUSH
36402: LD_VAR 0 3
36406: PPUSH
36407: CALL_OW 263
36411: PUSH
36412: LD_INT 3
36414: EQUAL
36415: AND
36416: IFFALSE 36432
// HackDestroyVehicle ( unit , selectedUnit ) ;
36418: LD_VAR 0 2
36422: PPUSH
36423: LD_VAR 0 3
36427: PPUSH
36428: CALL 38600 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36432: LD_VAR 0 1
36436: PUSH
36437: LD_INT 255
36439: EQUAL
36440: PUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: CALL_OW 264
36450: PUSH
36451: LD_INT 14
36453: PUSH
36454: LD_INT 53
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: IN
36461: AND
36462: PUSH
36463: LD_VAR 0 4
36467: PPUSH
36468: LD_VAR 0 5
36472: PPUSH
36473: CALL_OW 488
36477: AND
36478: IFFALSE 36502
// CutTreeXYR ( unit , x , y , 12 ) ;
36480: LD_VAR 0 2
36484: PPUSH
36485: LD_VAR 0 4
36489: PPUSH
36490: LD_VAR 0 5
36494: PPUSH
36495: LD_INT 12
36497: PPUSH
36498: CALL 36597 0 4
// if cmd = 256 then
36502: LD_VAR 0 1
36506: PUSH
36507: LD_INT 256
36509: EQUAL
36510: IFFALSE 36531
// SetFactoryWaypoint ( unit , x , y ) ;
36512: LD_VAR 0 2
36516: PPUSH
36517: LD_VAR 0 4
36521: PPUSH
36522: LD_VAR 0 5
36526: PPUSH
36527: CALL 34512 0 3
// if cmd = 257 then
36531: LD_VAR 0 1
36535: PUSH
36536: LD_INT 257
36538: EQUAL
36539: IFFALSE 36560
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36541: LD_VAR 0 2
36545: PPUSH
36546: LD_VAR 0 4
36550: PPUSH
36551: LD_VAR 0 5
36555: PPUSH
36556: CALL 34874 0 3
// if cmd = 258 then
36560: LD_VAR 0 1
36564: PUSH
36565: LD_INT 258
36567: EQUAL
36568: IFFALSE 36592
// BurnTreeXYR ( unit , x , y , 8 ) ;
36570: LD_VAR 0 2
36574: PPUSH
36575: LD_VAR 0 4
36579: PPUSH
36580: LD_VAR 0 5
36584: PPUSH
36585: LD_INT 8
36587: PPUSH
36588: CALL 36991 0 4
// end ;
36592: LD_VAR 0 6
36596: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36597: LD_INT 0
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
36603: PPUSH
36604: PPUSH
36605: PPUSH
36606: PPUSH
36607: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36608: LD_VAR 0 1
36612: PPUSH
36613: CALL_OW 302
36617: NOT
36618: PUSH
36619: LD_VAR 0 2
36623: PPUSH
36624: LD_VAR 0 3
36628: PPUSH
36629: CALL_OW 488
36633: NOT
36634: OR
36635: PUSH
36636: LD_VAR 0 4
36640: NOT
36641: OR
36642: IFFALSE 36646
// exit ;
36644: GO 36986
// list := [ ] ;
36646: LD_ADDR_VAR 0 13
36650: PUSH
36651: EMPTY
36652: ST_TO_ADDR
// if x - r < 0 then
36653: LD_VAR 0 2
36657: PUSH
36658: LD_VAR 0 4
36662: MINUS
36663: PUSH
36664: LD_INT 0
36666: LESS
36667: IFFALSE 36679
// min_x := 0 else
36669: LD_ADDR_VAR 0 7
36673: PUSH
36674: LD_INT 0
36676: ST_TO_ADDR
36677: GO 36695
// min_x := x - r ;
36679: LD_ADDR_VAR 0 7
36683: PUSH
36684: LD_VAR 0 2
36688: PUSH
36689: LD_VAR 0 4
36693: MINUS
36694: ST_TO_ADDR
// if y - r < 0 then
36695: LD_VAR 0 3
36699: PUSH
36700: LD_VAR 0 4
36704: MINUS
36705: PUSH
36706: LD_INT 0
36708: LESS
36709: IFFALSE 36721
// min_y := 0 else
36711: LD_ADDR_VAR 0 8
36715: PUSH
36716: LD_INT 0
36718: ST_TO_ADDR
36719: GO 36737
// min_y := y - r ;
36721: LD_ADDR_VAR 0 8
36725: PUSH
36726: LD_VAR 0 3
36730: PUSH
36731: LD_VAR 0 4
36735: MINUS
36736: ST_TO_ADDR
// max_x := x + r ;
36737: LD_ADDR_VAR 0 9
36741: PUSH
36742: LD_VAR 0 2
36746: PUSH
36747: LD_VAR 0 4
36751: PLUS
36752: ST_TO_ADDR
// max_y := y + r ;
36753: LD_ADDR_VAR 0 10
36757: PUSH
36758: LD_VAR 0 3
36762: PUSH
36763: LD_VAR 0 4
36767: PLUS
36768: ST_TO_ADDR
// for _x = min_x to max_x do
36769: LD_ADDR_VAR 0 11
36773: PUSH
36774: DOUBLE
36775: LD_VAR 0 7
36779: DEC
36780: ST_TO_ADDR
36781: LD_VAR 0 9
36785: PUSH
36786: FOR_TO
36787: IFFALSE 36904
// for _y = min_y to max_y do
36789: LD_ADDR_VAR 0 12
36793: PUSH
36794: DOUBLE
36795: LD_VAR 0 8
36799: DEC
36800: ST_TO_ADDR
36801: LD_VAR 0 10
36805: PUSH
36806: FOR_TO
36807: IFFALSE 36900
// begin if not ValidHex ( _x , _y ) then
36809: LD_VAR 0 11
36813: PPUSH
36814: LD_VAR 0 12
36818: PPUSH
36819: CALL_OW 488
36823: NOT
36824: IFFALSE 36828
// continue ;
36826: GO 36806
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36828: LD_VAR 0 11
36832: PPUSH
36833: LD_VAR 0 12
36837: PPUSH
36838: CALL_OW 351
36842: PUSH
36843: LD_VAR 0 11
36847: PPUSH
36848: LD_VAR 0 12
36852: PPUSH
36853: CALL_OW 554
36857: AND
36858: IFFALSE 36898
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36860: LD_ADDR_VAR 0 13
36864: PUSH
36865: LD_VAR 0 13
36869: PPUSH
36870: LD_VAR 0 13
36874: PUSH
36875: LD_INT 1
36877: PLUS
36878: PPUSH
36879: LD_VAR 0 11
36883: PUSH
36884: LD_VAR 0 12
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PPUSH
36893: CALL_OW 2
36897: ST_TO_ADDR
// end ;
36898: GO 36806
36900: POP
36901: POP
36902: GO 36786
36904: POP
36905: POP
// if not list then
36906: LD_VAR 0 13
36910: NOT
36911: IFFALSE 36915
// exit ;
36913: GO 36986
// for i in list do
36915: LD_ADDR_VAR 0 6
36919: PUSH
36920: LD_VAR 0 13
36924: PUSH
36925: FOR_IN
36926: IFFALSE 36984
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36928: LD_VAR 0 1
36932: PPUSH
36933: LD_STRING M
36935: PUSH
36936: LD_VAR 0 6
36940: PUSH
36941: LD_INT 1
36943: ARRAY
36944: PUSH
36945: LD_VAR 0 6
36949: PUSH
36950: LD_INT 2
36952: ARRAY
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: PUSH
36975: EMPTY
36976: LIST
36977: PPUSH
36978: CALL_OW 447
36982: GO 36925
36984: POP
36985: POP
// end ;
36986: LD_VAR 0 5
36990: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36991: LD_INT 0
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37003: LD_VAR 0 1
37007: PPUSH
37008: CALL_OW 302
37012: NOT
37013: PUSH
37014: LD_VAR 0 2
37018: PPUSH
37019: LD_VAR 0 3
37023: PPUSH
37024: CALL_OW 488
37028: NOT
37029: OR
37030: PUSH
37031: LD_VAR 0 4
37035: NOT
37036: OR
37037: IFFALSE 37041
// exit ;
37039: GO 37554
// list := [ ] ;
37041: LD_ADDR_VAR 0 13
37045: PUSH
37046: EMPTY
37047: ST_TO_ADDR
// if x - r < 0 then
37048: LD_VAR 0 2
37052: PUSH
37053: LD_VAR 0 4
37057: MINUS
37058: PUSH
37059: LD_INT 0
37061: LESS
37062: IFFALSE 37074
// min_x := 0 else
37064: LD_ADDR_VAR 0 7
37068: PUSH
37069: LD_INT 0
37071: ST_TO_ADDR
37072: GO 37090
// min_x := x - r ;
37074: LD_ADDR_VAR 0 7
37078: PUSH
37079: LD_VAR 0 2
37083: PUSH
37084: LD_VAR 0 4
37088: MINUS
37089: ST_TO_ADDR
// if y - r < 0 then
37090: LD_VAR 0 3
37094: PUSH
37095: LD_VAR 0 4
37099: MINUS
37100: PUSH
37101: LD_INT 0
37103: LESS
37104: IFFALSE 37116
// min_y := 0 else
37106: LD_ADDR_VAR 0 8
37110: PUSH
37111: LD_INT 0
37113: ST_TO_ADDR
37114: GO 37132
// min_y := y - r ;
37116: LD_ADDR_VAR 0 8
37120: PUSH
37121: LD_VAR 0 3
37125: PUSH
37126: LD_VAR 0 4
37130: MINUS
37131: ST_TO_ADDR
// max_x := x + r ;
37132: LD_ADDR_VAR 0 9
37136: PUSH
37137: LD_VAR 0 2
37141: PUSH
37142: LD_VAR 0 4
37146: PLUS
37147: ST_TO_ADDR
// max_y := y + r ;
37148: LD_ADDR_VAR 0 10
37152: PUSH
37153: LD_VAR 0 3
37157: PUSH
37158: LD_VAR 0 4
37162: PLUS
37163: ST_TO_ADDR
// for _x = min_x to max_x do
37164: LD_ADDR_VAR 0 11
37168: PUSH
37169: DOUBLE
37170: LD_VAR 0 7
37174: DEC
37175: ST_TO_ADDR
37176: LD_VAR 0 9
37180: PUSH
37181: FOR_TO
37182: IFFALSE 37299
// for _y = min_y to max_y do
37184: LD_ADDR_VAR 0 12
37188: PUSH
37189: DOUBLE
37190: LD_VAR 0 8
37194: DEC
37195: ST_TO_ADDR
37196: LD_VAR 0 10
37200: PUSH
37201: FOR_TO
37202: IFFALSE 37295
// begin if not ValidHex ( _x , _y ) then
37204: LD_VAR 0 11
37208: PPUSH
37209: LD_VAR 0 12
37213: PPUSH
37214: CALL_OW 488
37218: NOT
37219: IFFALSE 37223
// continue ;
37221: GO 37201
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37223: LD_VAR 0 11
37227: PPUSH
37228: LD_VAR 0 12
37232: PPUSH
37233: CALL_OW 351
37237: PUSH
37238: LD_VAR 0 11
37242: PPUSH
37243: LD_VAR 0 12
37247: PPUSH
37248: CALL_OW 554
37252: AND
37253: IFFALSE 37293
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37255: LD_ADDR_VAR 0 13
37259: PUSH
37260: LD_VAR 0 13
37264: PPUSH
37265: LD_VAR 0 13
37269: PUSH
37270: LD_INT 1
37272: PLUS
37273: PPUSH
37274: LD_VAR 0 11
37278: PUSH
37279: LD_VAR 0 12
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PPUSH
37288: CALL_OW 2
37292: ST_TO_ADDR
// end ;
37293: GO 37201
37295: POP
37296: POP
37297: GO 37181
37299: POP
37300: POP
// if not list then
37301: LD_VAR 0 13
37305: NOT
37306: IFFALSE 37310
// exit ;
37308: GO 37554
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37310: LD_ADDR_VAR 0 13
37314: PUSH
37315: LD_VAR 0 1
37319: PPUSH
37320: LD_VAR 0 13
37324: PPUSH
37325: LD_INT 1
37327: PPUSH
37328: LD_INT 1
37330: PPUSH
37331: CALL 46167 0 4
37335: ST_TO_ADDR
// ComStop ( flame ) ;
37336: LD_VAR 0 1
37340: PPUSH
37341: CALL_OW 141
// for i in list do
37345: LD_ADDR_VAR 0 6
37349: PUSH
37350: LD_VAR 0 13
37354: PUSH
37355: FOR_IN
37356: IFFALSE 37387
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37358: LD_VAR 0 1
37362: PPUSH
37363: LD_VAR 0 6
37367: PUSH
37368: LD_INT 1
37370: ARRAY
37371: PPUSH
37372: LD_VAR 0 6
37376: PUSH
37377: LD_INT 2
37379: ARRAY
37380: PPUSH
37381: CALL_OW 176
37385: GO 37355
37387: POP
37388: POP
// repeat wait ( 0 0$1 ) ;
37389: LD_INT 35
37391: PPUSH
37392: CALL_OW 67
// task := GetTaskList ( flame ) ;
37396: LD_ADDR_VAR 0 14
37400: PUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 437
37410: ST_TO_ADDR
// if not task then
37411: LD_VAR 0 14
37415: NOT
37416: IFFALSE 37420
// exit ;
37418: GO 37554
// if task [ 1 ] [ 1 ] <> | then
37420: LD_VAR 0 14
37424: PUSH
37425: LD_INT 1
37427: ARRAY
37428: PUSH
37429: LD_INT 1
37431: ARRAY
37432: PUSH
37433: LD_STRING |
37435: NONEQUAL
37436: IFFALSE 37440
// exit ;
37438: GO 37554
// _x := task [ 1 ] [ 2 ] ;
37440: LD_ADDR_VAR 0 11
37444: PUSH
37445: LD_VAR 0 14
37449: PUSH
37450: LD_INT 1
37452: ARRAY
37453: PUSH
37454: LD_INT 2
37456: ARRAY
37457: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37458: LD_ADDR_VAR 0 12
37462: PUSH
37463: LD_VAR 0 14
37467: PUSH
37468: LD_INT 1
37470: ARRAY
37471: PUSH
37472: LD_INT 3
37474: ARRAY
37475: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37476: LD_VAR 0 11
37480: PPUSH
37481: LD_VAR 0 12
37485: PPUSH
37486: CALL_OW 351
37490: NOT
37491: PUSH
37492: LD_VAR 0 11
37496: PPUSH
37497: LD_VAR 0 12
37501: PPUSH
37502: CALL_OW 554
37506: NOT
37507: OR
37508: IFFALSE 37542
// begin task := Delete ( task , 1 ) ;
37510: LD_ADDR_VAR 0 14
37514: PUSH
37515: LD_VAR 0 14
37519: PPUSH
37520: LD_INT 1
37522: PPUSH
37523: CALL_OW 3
37527: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37528: LD_VAR 0 1
37532: PPUSH
37533: LD_VAR 0 14
37537: PPUSH
37538: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37542: LD_VAR 0 1
37546: PPUSH
37547: CALL_OW 314
37551: NOT
37552: IFFALSE 37389
// end ;
37554: LD_VAR 0 5
37558: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37559: LD_EXP 113
37563: NOT
37564: IFFALSE 37614
37566: GO 37568
37568: DISABLE
// begin initHack := true ;
37569: LD_ADDR_EXP 113
37573: PUSH
37574: LD_INT 1
37576: ST_TO_ADDR
// hackTanks := [ ] ;
37577: LD_ADDR_EXP 114
37581: PUSH
37582: EMPTY
37583: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37584: LD_ADDR_EXP 115
37588: PUSH
37589: EMPTY
37590: ST_TO_ADDR
// hackLimit := 3 ;
37591: LD_ADDR_EXP 116
37595: PUSH
37596: LD_INT 3
37598: ST_TO_ADDR
// hackDist := 12 ;
37599: LD_ADDR_EXP 117
37603: PUSH
37604: LD_INT 12
37606: ST_TO_ADDR
// hackCounter := [ ] ;
37607: LD_ADDR_EXP 118
37611: PUSH
37612: EMPTY
37613: ST_TO_ADDR
// end ;
37614: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37615: LD_EXP 113
37619: PUSH
37620: LD_INT 34
37622: PUSH
37623: LD_INT 99
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PPUSH
37630: CALL_OW 69
37634: AND
37635: IFFALSE 37888
37637: GO 37639
37639: DISABLE
37640: LD_INT 0
37642: PPUSH
37643: PPUSH
// begin enable ;
37644: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37645: LD_ADDR_VAR 0 1
37649: PUSH
37650: LD_INT 34
37652: PUSH
37653: LD_INT 99
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PPUSH
37660: CALL_OW 69
37664: PUSH
37665: FOR_IN
37666: IFFALSE 37886
// begin if not i in hackTanks then
37668: LD_VAR 0 1
37672: PUSH
37673: LD_EXP 114
37677: IN
37678: NOT
37679: IFFALSE 37762
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37681: LD_ADDR_EXP 114
37685: PUSH
37686: LD_EXP 114
37690: PPUSH
37691: LD_EXP 114
37695: PUSH
37696: LD_INT 1
37698: PLUS
37699: PPUSH
37700: LD_VAR 0 1
37704: PPUSH
37705: CALL_OW 1
37709: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37710: LD_ADDR_EXP 115
37714: PUSH
37715: LD_EXP 115
37719: PPUSH
37720: LD_EXP 115
37724: PUSH
37725: LD_INT 1
37727: PLUS
37728: PPUSH
37729: EMPTY
37730: PPUSH
37731: CALL_OW 1
37735: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37736: LD_ADDR_EXP 118
37740: PUSH
37741: LD_EXP 118
37745: PPUSH
37746: LD_EXP 118
37750: PUSH
37751: LD_INT 1
37753: PLUS
37754: PPUSH
37755: EMPTY
37756: PPUSH
37757: CALL_OW 1
37761: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37762: LD_VAR 0 1
37766: PPUSH
37767: CALL_OW 302
37771: NOT
37772: IFFALSE 37785
// begin HackUnlinkAll ( i ) ;
37774: LD_VAR 0 1
37778: PPUSH
37779: CALL 37891 0 1
// continue ;
37783: GO 37665
// end ; HackCheckCapturedStatus ( i ) ;
37785: LD_VAR 0 1
37789: PPUSH
37790: CALL 38334 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37794: LD_ADDR_VAR 0 2
37798: PUSH
37799: LD_INT 81
37801: PUSH
37802: LD_VAR 0 1
37806: PPUSH
37807: CALL_OW 255
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 33
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 91
37828: PUSH
37829: LD_VAR 0 1
37833: PUSH
37834: LD_EXP 117
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 50
37846: PUSH
37847: EMPTY
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: PPUSH
37856: CALL_OW 69
37860: ST_TO_ADDR
// if not tmp then
37861: LD_VAR 0 2
37865: NOT
37866: IFFALSE 37870
// continue ;
37868: GO 37665
// HackLink ( i , tmp ) ;
37870: LD_VAR 0 1
37874: PPUSH
37875: LD_VAR 0 2
37879: PPUSH
37880: CALL 38027 0 2
// end ;
37884: GO 37665
37886: POP
37887: POP
// end ;
37888: PPOPN 2
37890: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37891: LD_INT 0
37893: PPUSH
37894: PPUSH
37895: PPUSH
// if not hack in hackTanks then
37896: LD_VAR 0 1
37900: PUSH
37901: LD_EXP 114
37905: IN
37906: NOT
37907: IFFALSE 37911
// exit ;
37909: GO 38022
// index := GetElementIndex ( hackTanks , hack ) ;
37911: LD_ADDR_VAR 0 4
37915: PUSH
37916: LD_EXP 114
37920: PPUSH
37921: LD_VAR 0 1
37925: PPUSH
37926: CALL 45464 0 2
37930: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37931: LD_EXP 115
37935: PUSH
37936: LD_VAR 0 4
37940: ARRAY
37941: IFFALSE 38022
// begin for i in hackTanksCaptured [ index ] do
37943: LD_ADDR_VAR 0 3
37947: PUSH
37948: LD_EXP 115
37952: PUSH
37953: LD_VAR 0 4
37957: ARRAY
37958: PUSH
37959: FOR_IN
37960: IFFALSE 37986
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37962: LD_VAR 0 3
37966: PUSH
37967: LD_INT 1
37969: ARRAY
37970: PPUSH
37971: LD_VAR 0 3
37975: PUSH
37976: LD_INT 2
37978: ARRAY
37979: PPUSH
37980: CALL_OW 235
37984: GO 37959
37986: POP
37987: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37988: LD_ADDR_EXP 115
37992: PUSH
37993: LD_EXP 115
37997: PPUSH
37998: LD_VAR 0 4
38002: PPUSH
38003: EMPTY
38004: PPUSH
38005: CALL_OW 1
38009: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38010: LD_VAR 0 1
38014: PPUSH
38015: LD_INT 0
38017: PPUSH
38018: CALL_OW 505
// end ; end ;
38022: LD_VAR 0 2
38026: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38027: LD_INT 0
38029: PPUSH
38030: PPUSH
38031: PPUSH
// if not hack in hackTanks or not vehicles then
38032: LD_VAR 0 1
38036: PUSH
38037: LD_EXP 114
38041: IN
38042: NOT
38043: PUSH
38044: LD_VAR 0 2
38048: NOT
38049: OR
38050: IFFALSE 38054
// exit ;
38052: GO 38329
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38054: LD_ADDR_VAR 0 2
38058: PUSH
38059: LD_VAR 0 1
38063: PPUSH
38064: LD_VAR 0 2
38068: PPUSH
38069: LD_INT 1
38071: PPUSH
38072: LD_INT 1
38074: PPUSH
38075: CALL 46114 0 4
38079: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38080: LD_ADDR_VAR 0 5
38084: PUSH
38085: LD_EXP 114
38089: PPUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL 45464 0 2
38099: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38100: LD_EXP 115
38104: PUSH
38105: LD_VAR 0 5
38109: ARRAY
38110: PUSH
38111: LD_EXP 116
38115: LESS
38116: IFFALSE 38305
// begin for i := 1 to vehicles do
38118: LD_ADDR_VAR 0 4
38122: PUSH
38123: DOUBLE
38124: LD_INT 1
38126: DEC
38127: ST_TO_ADDR
38128: LD_VAR 0 2
38132: PUSH
38133: FOR_TO
38134: IFFALSE 38303
// begin if hackTanksCaptured [ index ] = hackLimit then
38136: LD_EXP 115
38140: PUSH
38141: LD_VAR 0 5
38145: ARRAY
38146: PUSH
38147: LD_EXP 116
38151: EQUAL
38152: IFFALSE 38156
// break ;
38154: GO 38303
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38156: LD_ADDR_EXP 118
38160: PUSH
38161: LD_EXP 118
38165: PPUSH
38166: LD_VAR 0 5
38170: PPUSH
38171: LD_EXP 118
38175: PUSH
38176: LD_VAR 0 5
38180: ARRAY
38181: PUSH
38182: LD_INT 1
38184: PLUS
38185: PPUSH
38186: CALL_OW 1
38190: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38191: LD_ADDR_EXP 115
38195: PUSH
38196: LD_EXP 115
38200: PPUSH
38201: LD_VAR 0 5
38205: PUSH
38206: LD_EXP 115
38210: PUSH
38211: LD_VAR 0 5
38215: ARRAY
38216: PUSH
38217: LD_INT 1
38219: PLUS
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PPUSH
38225: LD_VAR 0 2
38229: PUSH
38230: LD_VAR 0 4
38234: ARRAY
38235: PUSH
38236: LD_VAR 0 2
38240: PUSH
38241: LD_VAR 0 4
38245: ARRAY
38246: PPUSH
38247: CALL_OW 255
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PPUSH
38256: CALL 45679 0 3
38260: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38261: LD_VAR 0 2
38265: PUSH
38266: LD_VAR 0 4
38270: ARRAY
38271: PPUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: CALL_OW 255
38281: PPUSH
38282: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38286: LD_VAR 0 2
38290: PUSH
38291: LD_VAR 0 4
38295: ARRAY
38296: PPUSH
38297: CALL_OW 141
// end ;
38301: GO 38133
38303: POP
38304: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38305: LD_VAR 0 1
38309: PPUSH
38310: LD_EXP 115
38314: PUSH
38315: LD_VAR 0 5
38319: ARRAY
38320: PUSH
38321: LD_INT 0
38323: PLUS
38324: PPUSH
38325: CALL_OW 505
// end ;
38329: LD_VAR 0 3
38333: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38334: LD_INT 0
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
// if not hack in hackTanks then
38340: LD_VAR 0 1
38344: PUSH
38345: LD_EXP 114
38349: IN
38350: NOT
38351: IFFALSE 38355
// exit ;
38353: GO 38595
// index := GetElementIndex ( hackTanks , hack ) ;
38355: LD_ADDR_VAR 0 4
38359: PUSH
38360: LD_EXP 114
38364: PPUSH
38365: LD_VAR 0 1
38369: PPUSH
38370: CALL 45464 0 2
38374: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38375: LD_ADDR_VAR 0 3
38379: PUSH
38380: DOUBLE
38381: LD_EXP 115
38385: PUSH
38386: LD_VAR 0 4
38390: ARRAY
38391: INC
38392: ST_TO_ADDR
38393: LD_INT 1
38395: PUSH
38396: FOR_DOWNTO
38397: IFFALSE 38569
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38399: LD_ADDR_VAR 0 5
38403: PUSH
38404: LD_EXP 115
38408: PUSH
38409: LD_VAR 0 4
38413: ARRAY
38414: PUSH
38415: LD_VAR 0 3
38419: ARRAY
38420: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38421: LD_VAR 0 5
38425: PUSH
38426: LD_INT 1
38428: ARRAY
38429: PPUSH
38430: CALL_OW 302
38434: NOT
38435: PUSH
38436: LD_VAR 0 5
38440: PUSH
38441: LD_INT 1
38443: ARRAY
38444: PPUSH
38445: CALL_OW 255
38449: PUSH
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 255
38459: NONEQUAL
38460: OR
38461: IFFALSE 38567
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38463: LD_VAR 0 5
38467: PUSH
38468: LD_INT 1
38470: ARRAY
38471: PPUSH
38472: CALL_OW 305
38476: PUSH
38477: LD_VAR 0 5
38481: PUSH
38482: LD_INT 1
38484: ARRAY
38485: PPUSH
38486: CALL_OW 255
38490: PUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 255
38500: EQUAL
38501: AND
38502: IFFALSE 38526
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38504: LD_VAR 0 5
38508: PUSH
38509: LD_INT 1
38511: ARRAY
38512: PPUSH
38513: LD_VAR 0 5
38517: PUSH
38518: LD_INT 2
38520: ARRAY
38521: PPUSH
38522: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38526: LD_ADDR_EXP 115
38530: PUSH
38531: LD_EXP 115
38535: PPUSH
38536: LD_VAR 0 4
38540: PPUSH
38541: LD_EXP 115
38545: PUSH
38546: LD_VAR 0 4
38550: ARRAY
38551: PPUSH
38552: LD_VAR 0 3
38556: PPUSH
38557: CALL_OW 3
38561: PPUSH
38562: CALL_OW 1
38566: ST_TO_ADDR
// end ; end ;
38567: GO 38396
38569: POP
38570: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38571: LD_VAR 0 1
38575: PPUSH
38576: LD_EXP 115
38580: PUSH
38581: LD_VAR 0 4
38585: ARRAY
38586: PUSH
38587: LD_INT 0
38589: PLUS
38590: PPUSH
38591: CALL_OW 505
// end ;
38595: LD_VAR 0 2
38599: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38600: LD_INT 0
38602: PPUSH
38603: PPUSH
38604: PPUSH
38605: PPUSH
// if not hack in hackTanks then
38606: LD_VAR 0 1
38610: PUSH
38611: LD_EXP 114
38615: IN
38616: NOT
38617: IFFALSE 38621
// exit ;
38619: GO 38706
// index := GetElementIndex ( hackTanks , hack ) ;
38621: LD_ADDR_VAR 0 5
38625: PUSH
38626: LD_EXP 114
38630: PPUSH
38631: LD_VAR 0 1
38635: PPUSH
38636: CALL 45464 0 2
38640: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38641: LD_ADDR_VAR 0 4
38645: PUSH
38646: DOUBLE
38647: LD_INT 1
38649: DEC
38650: ST_TO_ADDR
38651: LD_EXP 115
38655: PUSH
38656: LD_VAR 0 5
38660: ARRAY
38661: PUSH
38662: FOR_TO
38663: IFFALSE 38704
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38665: LD_EXP 115
38669: PUSH
38670: LD_VAR 0 5
38674: ARRAY
38675: PUSH
38676: LD_VAR 0 4
38680: ARRAY
38681: PUSH
38682: LD_INT 1
38684: ARRAY
38685: PUSH
38686: LD_VAR 0 2
38690: EQUAL
38691: IFFALSE 38702
// KillUnit ( vehicle ) ;
38693: LD_VAR 0 2
38697: PPUSH
38698: CALL_OW 66
38702: GO 38662
38704: POP
38705: POP
// end ;
38706: LD_VAR 0 3
38710: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38711: LD_EXP 119
38715: NOT
38716: IFFALSE 38751
38718: GO 38720
38720: DISABLE
// begin initMiner := true ;
38721: LD_ADDR_EXP 119
38725: PUSH
38726: LD_INT 1
38728: ST_TO_ADDR
// minersList := [ ] ;
38729: LD_ADDR_EXP 120
38733: PUSH
38734: EMPTY
38735: ST_TO_ADDR
// minerMinesList := [ ] ;
38736: LD_ADDR_EXP 121
38740: PUSH
38741: EMPTY
38742: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38743: LD_ADDR_EXP 122
38747: PUSH
38748: LD_INT 5
38750: ST_TO_ADDR
// end ;
38751: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38752: LD_EXP 119
38756: PUSH
38757: LD_INT 34
38759: PUSH
38760: LD_INT 81
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PPUSH
38767: CALL_OW 69
38771: AND
38772: IFFALSE 39233
38774: GO 38776
38776: DISABLE
38777: LD_INT 0
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
// begin enable ;
38783: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38784: LD_ADDR_VAR 0 1
38788: PUSH
38789: LD_INT 34
38791: PUSH
38792: LD_INT 81
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PPUSH
38799: CALL_OW 69
38803: PUSH
38804: FOR_IN
38805: IFFALSE 38877
// begin if not i in minersList then
38807: LD_VAR 0 1
38811: PUSH
38812: LD_EXP 120
38816: IN
38817: NOT
38818: IFFALSE 38875
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38820: LD_ADDR_EXP 120
38824: PUSH
38825: LD_EXP 120
38829: PPUSH
38830: LD_EXP 120
38834: PUSH
38835: LD_INT 1
38837: PLUS
38838: PPUSH
38839: LD_VAR 0 1
38843: PPUSH
38844: CALL_OW 1
38848: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38849: LD_ADDR_EXP 121
38853: PUSH
38854: LD_EXP 121
38858: PPUSH
38859: LD_EXP 121
38863: PUSH
38864: LD_INT 1
38866: PLUS
38867: PPUSH
38868: EMPTY
38869: PPUSH
38870: CALL_OW 1
38874: ST_TO_ADDR
// end end ;
38875: GO 38804
38877: POP
38878: POP
// for i := minerMinesList downto 1 do
38879: LD_ADDR_VAR 0 1
38883: PUSH
38884: DOUBLE
38885: LD_EXP 121
38889: INC
38890: ST_TO_ADDR
38891: LD_INT 1
38893: PUSH
38894: FOR_DOWNTO
38895: IFFALSE 39231
// begin if IsLive ( minersList [ i ] ) then
38897: LD_EXP 120
38901: PUSH
38902: LD_VAR 0 1
38906: ARRAY
38907: PPUSH
38908: CALL_OW 300
38912: IFFALSE 38940
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38914: LD_EXP 120
38918: PUSH
38919: LD_VAR 0 1
38923: ARRAY
38924: PPUSH
38925: LD_EXP 121
38929: PUSH
38930: LD_VAR 0 1
38934: ARRAY
38935: PPUSH
38936: CALL_OW 505
// if not minerMinesList [ i ] then
38940: LD_EXP 121
38944: PUSH
38945: LD_VAR 0 1
38949: ARRAY
38950: NOT
38951: IFFALSE 38955
// continue ;
38953: GO 38894
// for j := minerMinesList [ i ] downto 1 do
38955: LD_ADDR_VAR 0 2
38959: PUSH
38960: DOUBLE
38961: LD_EXP 121
38965: PUSH
38966: LD_VAR 0 1
38970: ARRAY
38971: INC
38972: ST_TO_ADDR
38973: LD_INT 1
38975: PUSH
38976: FOR_DOWNTO
38977: IFFALSE 39227
// begin side := GetSide ( minersList [ i ] ) ;
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: LD_EXP 120
38988: PUSH
38989: LD_VAR 0 1
38993: ARRAY
38994: PPUSH
38995: CALL_OW 255
38999: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39000: LD_ADDR_VAR 0 4
39004: PUSH
39005: LD_EXP 121
39009: PUSH
39010: LD_VAR 0 1
39014: ARRAY
39015: PUSH
39016: LD_VAR 0 2
39020: ARRAY
39021: PUSH
39022: LD_INT 1
39024: ARRAY
39025: PPUSH
39026: LD_EXP 121
39030: PUSH
39031: LD_VAR 0 1
39035: ARRAY
39036: PUSH
39037: LD_VAR 0 2
39041: ARRAY
39042: PUSH
39043: LD_INT 2
39045: ARRAY
39046: PPUSH
39047: CALL_OW 428
39051: ST_TO_ADDR
// if not tmp then
39052: LD_VAR 0 4
39056: NOT
39057: IFFALSE 39061
// continue ;
39059: GO 38976
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39061: LD_VAR 0 4
39065: PUSH
39066: LD_INT 81
39068: PUSH
39069: LD_VAR 0 3
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PPUSH
39078: CALL_OW 69
39082: IN
39083: PUSH
39084: LD_EXP 121
39088: PUSH
39089: LD_VAR 0 1
39093: ARRAY
39094: PUSH
39095: LD_VAR 0 2
39099: ARRAY
39100: PUSH
39101: LD_INT 1
39103: ARRAY
39104: PPUSH
39105: LD_EXP 121
39109: PUSH
39110: LD_VAR 0 1
39114: ARRAY
39115: PUSH
39116: LD_VAR 0 2
39120: ARRAY
39121: PUSH
39122: LD_INT 2
39124: ARRAY
39125: PPUSH
39126: CALL_OW 458
39130: AND
39131: IFFALSE 39225
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39133: LD_EXP 121
39137: PUSH
39138: LD_VAR 0 1
39142: ARRAY
39143: PUSH
39144: LD_VAR 0 2
39148: ARRAY
39149: PUSH
39150: LD_INT 1
39152: ARRAY
39153: PPUSH
39154: LD_EXP 121
39158: PUSH
39159: LD_VAR 0 1
39163: ARRAY
39164: PUSH
39165: LD_VAR 0 2
39169: ARRAY
39170: PUSH
39171: LD_INT 2
39173: ARRAY
39174: PPUSH
39175: LD_VAR 0 3
39179: PPUSH
39180: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39184: LD_ADDR_EXP 121
39188: PUSH
39189: LD_EXP 121
39193: PPUSH
39194: LD_VAR 0 1
39198: PPUSH
39199: LD_EXP 121
39203: PUSH
39204: LD_VAR 0 1
39208: ARRAY
39209: PPUSH
39210: LD_VAR 0 2
39214: PPUSH
39215: CALL_OW 3
39219: PPUSH
39220: CALL_OW 1
39224: ST_TO_ADDR
// end ; end ;
39225: GO 38976
39227: POP
39228: POP
// end ;
39229: GO 38894
39231: POP
39232: POP
// end ;
39233: PPOPN 4
39235: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39236: LD_INT 0
39238: PPUSH
39239: PPUSH
// result := false ;
39240: LD_ADDR_VAR 0 4
39244: PUSH
39245: LD_INT 0
39247: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39248: LD_VAR 0 1
39252: PPUSH
39253: CALL_OW 264
39257: PUSH
39258: LD_INT 81
39260: EQUAL
39261: NOT
39262: IFFALSE 39266
// exit ;
39264: GO 39506
// index := GetElementIndex ( minersList , unit ) ;
39266: LD_ADDR_VAR 0 5
39270: PUSH
39271: LD_EXP 120
39275: PPUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL 45464 0 2
39285: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39286: LD_EXP 121
39290: PUSH
39291: LD_VAR 0 5
39295: ARRAY
39296: PUSH
39297: LD_EXP 122
39301: GREATEREQUAL
39302: IFFALSE 39306
// exit ;
39304: GO 39506
// ComMoveXY ( unit , x , y ) ;
39306: LD_VAR 0 1
39310: PPUSH
39311: LD_VAR 0 2
39315: PPUSH
39316: LD_VAR 0 3
39320: PPUSH
39321: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39325: LD_INT 35
39327: PPUSH
39328: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39332: LD_VAR 0 1
39336: PPUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: LD_VAR 0 3
39346: PPUSH
39347: CALL 77205 0 3
39351: NOT
39352: PUSH
39353: LD_VAR 0 1
39357: PPUSH
39358: CALL_OW 314
39362: AND
39363: IFFALSE 39367
// exit ;
39365: GO 39506
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39367: LD_VAR 0 2
39371: PPUSH
39372: LD_VAR 0 3
39376: PPUSH
39377: CALL_OW 428
39381: PUSH
39382: LD_VAR 0 1
39386: EQUAL
39387: PUSH
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL_OW 314
39397: NOT
39398: AND
39399: IFFALSE 39325
// PlaySoundXY ( x , y , PlantMine ) ;
39401: LD_VAR 0 2
39405: PPUSH
39406: LD_VAR 0 3
39410: PPUSH
39411: LD_STRING PlantMine
39413: PPUSH
39414: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39418: LD_VAR 0 2
39422: PPUSH
39423: LD_VAR 0 3
39427: PPUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 255
39437: PPUSH
39438: LD_INT 0
39440: PPUSH
39441: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39445: LD_ADDR_EXP 121
39449: PUSH
39450: LD_EXP 121
39454: PPUSH
39455: LD_VAR 0 5
39459: PUSH
39460: LD_EXP 121
39464: PUSH
39465: LD_VAR 0 5
39469: ARRAY
39470: PUSH
39471: LD_INT 1
39473: PLUS
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PPUSH
39479: LD_VAR 0 2
39483: PUSH
39484: LD_VAR 0 3
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PPUSH
39493: CALL 45679 0 3
39497: ST_TO_ADDR
// result := true ;
39498: LD_ADDR_VAR 0 4
39502: PUSH
39503: LD_INT 1
39505: ST_TO_ADDR
// end ;
39506: LD_VAR 0 4
39510: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39511: LD_INT 0
39513: PPUSH
39514: PPUSH
39515: PPUSH
// if not unit in minersList then
39516: LD_VAR 0 1
39520: PUSH
39521: LD_EXP 120
39525: IN
39526: NOT
39527: IFFALSE 39531
// exit ;
39529: GO 39923
// index := GetElementIndex ( minersList , unit ) ;
39531: LD_ADDR_VAR 0 6
39535: PUSH
39536: LD_EXP 120
39540: PPUSH
39541: LD_VAR 0 1
39545: PPUSH
39546: CALL 45464 0 2
39550: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39551: LD_ADDR_VAR 0 5
39555: PUSH
39556: DOUBLE
39557: LD_EXP 121
39561: PUSH
39562: LD_VAR 0 6
39566: ARRAY
39567: INC
39568: ST_TO_ADDR
39569: LD_INT 1
39571: PUSH
39572: FOR_DOWNTO
39573: IFFALSE 39734
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39575: LD_EXP 121
39579: PUSH
39580: LD_VAR 0 6
39584: ARRAY
39585: PUSH
39586: LD_VAR 0 5
39590: ARRAY
39591: PUSH
39592: LD_INT 1
39594: ARRAY
39595: PUSH
39596: LD_VAR 0 2
39600: EQUAL
39601: PUSH
39602: LD_EXP 121
39606: PUSH
39607: LD_VAR 0 6
39611: ARRAY
39612: PUSH
39613: LD_VAR 0 5
39617: ARRAY
39618: PUSH
39619: LD_INT 2
39621: ARRAY
39622: PUSH
39623: LD_VAR 0 3
39627: EQUAL
39628: AND
39629: IFFALSE 39732
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39631: LD_EXP 121
39635: PUSH
39636: LD_VAR 0 6
39640: ARRAY
39641: PUSH
39642: LD_VAR 0 5
39646: ARRAY
39647: PUSH
39648: LD_INT 1
39650: ARRAY
39651: PPUSH
39652: LD_EXP 121
39656: PUSH
39657: LD_VAR 0 6
39661: ARRAY
39662: PUSH
39663: LD_VAR 0 5
39667: ARRAY
39668: PUSH
39669: LD_INT 2
39671: ARRAY
39672: PPUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: CALL_OW 255
39682: PPUSH
39683: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39687: LD_ADDR_EXP 121
39691: PUSH
39692: LD_EXP 121
39696: PPUSH
39697: LD_VAR 0 6
39701: PPUSH
39702: LD_EXP 121
39706: PUSH
39707: LD_VAR 0 6
39711: ARRAY
39712: PPUSH
39713: LD_VAR 0 5
39717: PPUSH
39718: CALL_OW 3
39722: PPUSH
39723: CALL_OW 1
39727: ST_TO_ADDR
// exit ;
39728: POP
39729: POP
39730: GO 39923
// end ; end ;
39732: GO 39572
39734: POP
39735: POP
// for i := minerMinesList [ index ] downto 1 do
39736: LD_ADDR_VAR 0 5
39740: PUSH
39741: DOUBLE
39742: LD_EXP 121
39746: PUSH
39747: LD_VAR 0 6
39751: ARRAY
39752: INC
39753: ST_TO_ADDR
39754: LD_INT 1
39756: PUSH
39757: FOR_DOWNTO
39758: IFFALSE 39921
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39760: LD_EXP 121
39764: PUSH
39765: LD_VAR 0 6
39769: ARRAY
39770: PUSH
39771: LD_VAR 0 5
39775: ARRAY
39776: PUSH
39777: LD_INT 1
39779: ARRAY
39780: PPUSH
39781: LD_EXP 121
39785: PUSH
39786: LD_VAR 0 6
39790: ARRAY
39791: PUSH
39792: LD_VAR 0 5
39796: ARRAY
39797: PUSH
39798: LD_INT 2
39800: ARRAY
39801: PPUSH
39802: LD_VAR 0 2
39806: PPUSH
39807: LD_VAR 0 3
39811: PPUSH
39812: CALL_OW 298
39816: PUSH
39817: LD_INT 6
39819: LESS
39820: IFFALSE 39919
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39822: LD_EXP 121
39826: PUSH
39827: LD_VAR 0 6
39831: ARRAY
39832: PUSH
39833: LD_VAR 0 5
39837: ARRAY
39838: PUSH
39839: LD_INT 1
39841: ARRAY
39842: PPUSH
39843: LD_EXP 121
39847: PUSH
39848: LD_VAR 0 6
39852: ARRAY
39853: PUSH
39854: LD_VAR 0 5
39858: ARRAY
39859: PUSH
39860: LD_INT 2
39862: ARRAY
39863: PPUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 255
39873: PPUSH
39874: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39878: LD_ADDR_EXP 121
39882: PUSH
39883: LD_EXP 121
39887: PPUSH
39888: LD_VAR 0 6
39892: PPUSH
39893: LD_EXP 121
39897: PUSH
39898: LD_VAR 0 6
39902: ARRAY
39903: PPUSH
39904: LD_VAR 0 5
39908: PPUSH
39909: CALL_OW 3
39913: PPUSH
39914: CALL_OW 1
39918: ST_TO_ADDR
// end ; end ;
39919: GO 39757
39921: POP
39922: POP
// end ;
39923: LD_VAR 0 4
39927: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39928: LD_INT 0
39930: PPUSH
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39939: LD_VAR 0 1
39943: PPUSH
39944: CALL_OW 264
39948: PUSH
39949: LD_INT 81
39951: EQUAL
39952: NOT
39953: PUSH
39954: LD_VAR 0 1
39958: PUSH
39959: LD_EXP 120
39963: IN
39964: NOT
39965: OR
39966: IFFALSE 39970
// exit ;
39968: GO 40292
// index := GetElementIndex ( minersList , unit ) ;
39970: LD_ADDR_VAR 0 6
39974: PUSH
39975: LD_EXP 120
39979: PPUSH
39980: LD_VAR 0 1
39984: PPUSH
39985: CALL 45464 0 2
39989: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39990: LD_ADDR_VAR 0 8
39994: PUSH
39995: LD_EXP 122
39999: PUSH
40000: LD_EXP 121
40004: PUSH
40005: LD_VAR 0 6
40009: ARRAY
40010: MINUS
40011: ST_TO_ADDR
// if not minesFreeAmount then
40012: LD_VAR 0 8
40016: NOT
40017: IFFALSE 40021
// exit ;
40019: GO 40292
// tmp := [ ] ;
40021: LD_ADDR_VAR 0 7
40025: PUSH
40026: EMPTY
40027: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40028: LD_ADDR_VAR 0 5
40032: PUSH
40033: DOUBLE
40034: LD_INT 1
40036: DEC
40037: ST_TO_ADDR
40038: LD_VAR 0 8
40042: PUSH
40043: FOR_TO
40044: IFFALSE 40239
// begin _d := rand ( 0 , 5 ) ;
40046: LD_ADDR_VAR 0 11
40050: PUSH
40051: LD_INT 0
40053: PPUSH
40054: LD_INT 5
40056: PPUSH
40057: CALL_OW 12
40061: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40062: LD_ADDR_VAR 0 12
40066: PUSH
40067: LD_INT 2
40069: PPUSH
40070: LD_INT 6
40072: PPUSH
40073: CALL_OW 12
40077: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40078: LD_ADDR_VAR 0 9
40082: PUSH
40083: LD_VAR 0 2
40087: PPUSH
40088: LD_VAR 0 11
40092: PPUSH
40093: LD_VAR 0 12
40097: PPUSH
40098: CALL_OW 272
40102: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40103: LD_ADDR_VAR 0 10
40107: PUSH
40108: LD_VAR 0 3
40112: PPUSH
40113: LD_VAR 0 11
40117: PPUSH
40118: LD_VAR 0 12
40122: PPUSH
40123: CALL_OW 273
40127: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40128: LD_VAR 0 9
40132: PPUSH
40133: LD_VAR 0 10
40137: PPUSH
40138: CALL_OW 488
40142: PUSH
40143: LD_VAR 0 9
40147: PUSH
40148: LD_VAR 0 10
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_VAR 0 7
40161: IN
40162: NOT
40163: AND
40164: PUSH
40165: LD_VAR 0 9
40169: PPUSH
40170: LD_VAR 0 10
40174: PPUSH
40175: CALL_OW 458
40179: NOT
40180: AND
40181: IFFALSE 40223
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40183: LD_ADDR_VAR 0 7
40187: PUSH
40188: LD_VAR 0 7
40192: PPUSH
40193: LD_VAR 0 7
40197: PUSH
40198: LD_INT 1
40200: PLUS
40201: PPUSH
40202: LD_VAR 0 9
40206: PUSH
40207: LD_VAR 0 10
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PPUSH
40216: CALL_OW 1
40220: ST_TO_ADDR
40221: GO 40237
// i := i - 1 ;
40223: LD_ADDR_VAR 0 5
40227: PUSH
40228: LD_VAR 0 5
40232: PUSH
40233: LD_INT 1
40235: MINUS
40236: ST_TO_ADDR
// end ;
40237: GO 40043
40239: POP
40240: POP
// for i in tmp do
40241: LD_ADDR_VAR 0 5
40245: PUSH
40246: LD_VAR 0 7
40250: PUSH
40251: FOR_IN
40252: IFFALSE 40290
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40254: LD_VAR 0 1
40258: PPUSH
40259: LD_VAR 0 5
40263: PUSH
40264: LD_INT 1
40266: ARRAY
40267: PPUSH
40268: LD_VAR 0 5
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: PPUSH
40277: CALL 39236 0 3
40281: NOT
40282: IFFALSE 40288
// exit ;
40284: POP
40285: POP
40286: GO 40292
40288: GO 40251
40290: POP
40291: POP
// end ;
40292: LD_VAR 0 4
40296: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40297: LD_INT 0
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
// if not GetClass ( unit ) = class_sniper then
40306: LD_VAR 0 1
40310: PPUSH
40311: CALL_OW 257
40315: PUSH
40316: LD_INT 5
40318: EQUAL
40319: NOT
40320: IFFALSE 40324
// exit ;
40322: GO 40712
// dist := 8 ;
40324: LD_ADDR_VAR 0 5
40328: PUSH
40329: LD_INT 8
40331: ST_TO_ADDR
// viewRange := 12 ;
40332: LD_ADDR_VAR 0 7
40336: PUSH
40337: LD_INT 12
40339: ST_TO_ADDR
// side := GetSide ( unit ) ;
40340: LD_ADDR_VAR 0 6
40344: PUSH
40345: LD_VAR 0 1
40349: PPUSH
40350: CALL_OW 255
40354: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40355: LD_INT 61
40357: PPUSH
40358: LD_VAR 0 6
40362: PPUSH
40363: CALL_OW 321
40367: PUSH
40368: LD_INT 2
40370: EQUAL
40371: IFFALSE 40381
// viewRange := 16 ;
40373: LD_ADDR_VAR 0 7
40377: PUSH
40378: LD_INT 16
40380: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40381: LD_VAR 0 1
40385: PPUSH
40386: LD_VAR 0 2
40390: PPUSH
40391: LD_VAR 0 3
40395: PPUSH
40396: CALL_OW 297
40400: PUSH
40401: LD_VAR 0 5
40405: GREATER
40406: IFFALSE 40485
// begin ComMoveXY ( unit , x , y ) ;
40408: LD_VAR 0 1
40412: PPUSH
40413: LD_VAR 0 2
40417: PPUSH
40418: LD_VAR 0 3
40422: PPUSH
40423: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40427: LD_INT 35
40429: PPUSH
40430: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40434: LD_VAR 0 1
40438: PPUSH
40439: LD_VAR 0 2
40443: PPUSH
40444: LD_VAR 0 3
40448: PPUSH
40449: CALL 77205 0 3
40453: NOT
40454: IFFALSE 40458
// exit ;
40456: GO 40712
// until GetDistUnitXY ( unit , x , y ) < dist ;
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_VAR 0 2
40467: PPUSH
40468: LD_VAR 0 3
40472: PPUSH
40473: CALL_OW 297
40477: PUSH
40478: LD_VAR 0 5
40482: LESS
40483: IFFALSE 40427
// end ; ComTurnXY ( unit , x , y ) ;
40485: LD_VAR 0 1
40489: PPUSH
40490: LD_VAR 0 2
40494: PPUSH
40495: LD_VAR 0 3
40499: PPUSH
40500: CALL_OW 118
// wait ( 5 ) ;
40504: LD_INT 5
40506: PPUSH
40507: CALL_OW 67
// _d := GetDir ( unit ) ;
40511: LD_ADDR_VAR 0 10
40515: PUSH
40516: LD_VAR 0 1
40520: PPUSH
40521: CALL_OW 254
40525: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40526: LD_ADDR_VAR 0 8
40530: PUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: CALL_OW 250
40540: PPUSH
40541: LD_VAR 0 10
40545: PPUSH
40546: LD_VAR 0 5
40550: PPUSH
40551: CALL_OW 272
40555: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40556: LD_ADDR_VAR 0 9
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 251
40570: PPUSH
40571: LD_VAR 0 10
40575: PPUSH
40576: LD_VAR 0 5
40580: PPUSH
40581: CALL_OW 273
40585: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40586: LD_VAR 0 8
40590: PPUSH
40591: LD_VAR 0 9
40595: PPUSH
40596: CALL_OW 488
40600: NOT
40601: IFFALSE 40605
// exit ;
40603: GO 40712
// ComAnimCustom ( unit , 1 ) ;
40605: LD_VAR 0 1
40609: PPUSH
40610: LD_INT 1
40612: PPUSH
40613: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40617: LD_VAR 0 8
40621: PPUSH
40622: LD_VAR 0 9
40626: PPUSH
40627: LD_VAR 0 6
40631: PPUSH
40632: LD_VAR 0 7
40636: PPUSH
40637: CALL_OW 330
// repeat wait ( 1 ) ;
40641: LD_INT 1
40643: PPUSH
40644: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 316
40657: PUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 314
40667: OR
40668: PUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 302
40678: NOT
40679: OR
40680: PUSH
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 301
40690: OR
40691: IFFALSE 40641
// RemoveSeeing ( _x , _y , side ) ;
40693: LD_VAR 0 8
40697: PPUSH
40698: LD_VAR 0 9
40702: PPUSH
40703: LD_VAR 0 6
40707: PPUSH
40708: CALL_OW 331
// end ; end_of_file
40712: LD_VAR 0 4
40716: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40717: LD_INT 0
40719: PPUSH
40720: PPUSH
// if exist_mode then
40721: LD_VAR 0 2
40725: IFFALSE 40750
// unit := CreateCharacter ( prefix & ident ) else
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: LD_VAR 0 3
40736: PUSH
40737: LD_VAR 0 1
40741: STR
40742: PPUSH
40743: CALL_OW 34
40747: ST_TO_ADDR
40748: GO 40765
// unit := NewCharacter ( ident ) ;
40750: LD_ADDR_VAR 0 5
40754: PUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL_OW 25
40764: ST_TO_ADDR
// result := unit ;
40765: LD_ADDR_VAR 0 4
40769: PUSH
40770: LD_VAR 0 5
40774: ST_TO_ADDR
// end ;
40775: LD_VAR 0 4
40779: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40780: LD_INT 0
40782: PPUSH
40783: PPUSH
// if not side or not nation then
40784: LD_VAR 0 1
40788: NOT
40789: PUSH
40790: LD_VAR 0 2
40794: NOT
40795: OR
40796: IFFALSE 40800
// exit ;
40798: GO 41568
// case nation of nation_american :
40800: LD_VAR 0 2
40804: PUSH
40805: LD_INT 1
40807: DOUBLE
40808: EQUAL
40809: IFTRUE 40813
40811: GO 41027
40813: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40814: LD_ADDR_VAR 0 4
40818: PUSH
40819: LD_INT 35
40821: PUSH
40822: LD_INT 45
40824: PUSH
40825: LD_INT 46
40827: PUSH
40828: LD_INT 47
40830: PUSH
40831: LD_INT 82
40833: PUSH
40834: LD_INT 83
40836: PUSH
40837: LD_INT 84
40839: PUSH
40840: LD_INT 85
40842: PUSH
40843: LD_INT 86
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 6
40854: PUSH
40855: LD_INT 15
40857: PUSH
40858: LD_INT 16
40860: PUSH
40861: LD_INT 7
40863: PUSH
40864: LD_INT 12
40866: PUSH
40867: LD_INT 13
40869: PUSH
40870: LD_INT 10
40872: PUSH
40873: LD_INT 14
40875: PUSH
40876: LD_INT 20
40878: PUSH
40879: LD_INT 21
40881: PUSH
40882: LD_INT 22
40884: PUSH
40885: LD_INT 25
40887: PUSH
40888: LD_INT 32
40890: PUSH
40891: LD_INT 27
40893: PUSH
40894: LD_INT 36
40896: PUSH
40897: LD_INT 69
40899: PUSH
40900: LD_INT 39
40902: PUSH
40903: LD_INT 34
40905: PUSH
40906: LD_INT 40
40908: PUSH
40909: LD_INT 48
40911: PUSH
40912: LD_INT 49
40914: PUSH
40915: LD_INT 50
40917: PUSH
40918: LD_INT 51
40920: PUSH
40921: LD_INT 52
40923: PUSH
40924: LD_INT 53
40926: PUSH
40927: LD_INT 54
40929: PUSH
40930: LD_INT 55
40932: PUSH
40933: LD_INT 56
40935: PUSH
40936: LD_INT 57
40938: PUSH
40939: LD_INT 58
40941: PUSH
40942: LD_INT 59
40944: PUSH
40945: LD_INT 60
40947: PUSH
40948: LD_INT 61
40950: PUSH
40951: LD_INT 62
40953: PUSH
40954: LD_INT 80
40956: PUSH
40957: LD_INT 82
40959: PUSH
40960: LD_INT 83
40962: PUSH
40963: LD_INT 84
40965: PUSH
40966: LD_INT 85
40968: PUSH
40969: LD_INT 86
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: ST_TO_ADDR
41025: GO 41492
41027: LD_INT 2
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41035
41033: GO 41261
41035: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41036: LD_ADDR_VAR 0 4
41040: PUSH
41041: LD_INT 35
41043: PUSH
41044: LD_INT 45
41046: PUSH
41047: LD_INT 46
41049: PUSH
41050: LD_INT 47
41052: PUSH
41053: LD_INT 82
41055: PUSH
41056: LD_INT 83
41058: PUSH
41059: LD_INT 84
41061: PUSH
41062: LD_INT 85
41064: PUSH
41065: LD_INT 87
41067: PUSH
41068: LD_INT 70
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 11
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: LD_INT 4
41082: PUSH
41083: LD_INT 5
41085: PUSH
41086: LD_INT 6
41088: PUSH
41089: LD_INT 15
41091: PUSH
41092: LD_INT 18
41094: PUSH
41095: LD_INT 7
41097: PUSH
41098: LD_INT 17
41100: PUSH
41101: LD_INT 8
41103: PUSH
41104: LD_INT 20
41106: PUSH
41107: LD_INT 21
41109: PUSH
41110: LD_INT 22
41112: PUSH
41113: LD_INT 72
41115: PUSH
41116: LD_INT 26
41118: PUSH
41119: LD_INT 69
41121: PUSH
41122: LD_INT 39
41124: PUSH
41125: LD_INT 40
41127: PUSH
41128: LD_INT 41
41130: PUSH
41131: LD_INT 42
41133: PUSH
41134: LD_INT 43
41136: PUSH
41137: LD_INT 48
41139: PUSH
41140: LD_INT 49
41142: PUSH
41143: LD_INT 50
41145: PUSH
41146: LD_INT 51
41148: PUSH
41149: LD_INT 52
41151: PUSH
41152: LD_INT 53
41154: PUSH
41155: LD_INT 54
41157: PUSH
41158: LD_INT 55
41160: PUSH
41161: LD_INT 56
41163: PUSH
41164: LD_INT 60
41166: PUSH
41167: LD_INT 61
41169: PUSH
41170: LD_INT 62
41172: PUSH
41173: LD_INT 66
41175: PUSH
41176: LD_INT 67
41178: PUSH
41179: LD_INT 68
41181: PUSH
41182: LD_INT 81
41184: PUSH
41185: LD_INT 82
41187: PUSH
41188: LD_INT 83
41190: PUSH
41191: LD_INT 84
41193: PUSH
41194: LD_INT 85
41196: PUSH
41197: LD_INT 87
41199: PUSH
41200: LD_INT 88
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: ST_TO_ADDR
41259: GO 41492
41261: LD_INT 3
41263: DOUBLE
41264: EQUAL
41265: IFTRUE 41269
41267: GO 41491
41269: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41270: LD_ADDR_VAR 0 4
41274: PUSH
41275: LD_INT 46
41277: PUSH
41278: LD_INT 47
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 82
41289: PUSH
41290: LD_INT 83
41292: PUSH
41293: LD_INT 84
41295: PUSH
41296: LD_INT 85
41298: PUSH
41299: LD_INT 86
41301: PUSH
41302: LD_INT 11
41304: PUSH
41305: LD_INT 9
41307: PUSH
41308: LD_INT 20
41310: PUSH
41311: LD_INT 19
41313: PUSH
41314: LD_INT 21
41316: PUSH
41317: LD_INT 24
41319: PUSH
41320: LD_INT 22
41322: PUSH
41323: LD_INT 25
41325: PUSH
41326: LD_INT 28
41328: PUSH
41329: LD_INT 29
41331: PUSH
41332: LD_INT 30
41334: PUSH
41335: LD_INT 31
41337: PUSH
41338: LD_INT 37
41340: PUSH
41341: LD_INT 38
41343: PUSH
41344: LD_INT 32
41346: PUSH
41347: LD_INT 27
41349: PUSH
41350: LD_INT 33
41352: PUSH
41353: LD_INT 69
41355: PUSH
41356: LD_INT 39
41358: PUSH
41359: LD_INT 34
41361: PUSH
41362: LD_INT 40
41364: PUSH
41365: LD_INT 71
41367: PUSH
41368: LD_INT 23
41370: PUSH
41371: LD_INT 44
41373: PUSH
41374: LD_INT 48
41376: PUSH
41377: LD_INT 49
41379: PUSH
41380: LD_INT 50
41382: PUSH
41383: LD_INT 51
41385: PUSH
41386: LD_INT 52
41388: PUSH
41389: LD_INT 53
41391: PUSH
41392: LD_INT 54
41394: PUSH
41395: LD_INT 55
41397: PUSH
41398: LD_INT 56
41400: PUSH
41401: LD_INT 57
41403: PUSH
41404: LD_INT 58
41406: PUSH
41407: LD_INT 59
41409: PUSH
41410: LD_INT 63
41412: PUSH
41413: LD_INT 64
41415: PUSH
41416: LD_INT 65
41418: PUSH
41419: LD_INT 82
41421: PUSH
41422: LD_INT 83
41424: PUSH
41425: LD_INT 84
41427: PUSH
41428: LD_INT 85
41430: PUSH
41431: LD_INT 86
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: ST_TO_ADDR
41489: GO 41492
41491: POP
// if state > - 1 and state < 3 then
41492: LD_VAR 0 3
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: GREATER
41501: PUSH
41502: LD_VAR 0 3
41506: PUSH
41507: LD_INT 3
41509: LESS
41510: AND
41511: IFFALSE 41568
// for i in result do
41513: LD_ADDR_VAR 0 5
41517: PUSH
41518: LD_VAR 0 4
41522: PUSH
41523: FOR_IN
41524: IFFALSE 41566
// if GetTech ( i , side ) <> state then
41526: LD_VAR 0 5
41530: PPUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 321
41540: PUSH
41541: LD_VAR 0 3
41545: NONEQUAL
41546: IFFALSE 41564
// result := result diff i ;
41548: LD_ADDR_VAR 0 4
41552: PUSH
41553: LD_VAR 0 4
41557: PUSH
41558: LD_VAR 0 5
41562: DIFF
41563: ST_TO_ADDR
41564: GO 41523
41566: POP
41567: POP
// end ;
41568: LD_VAR 0 4
41572: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41573: LD_INT 0
41575: PPUSH
41576: PPUSH
41577: PPUSH
// result := true ;
41578: LD_ADDR_VAR 0 3
41582: PUSH
41583: LD_INT 1
41585: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41586: LD_ADDR_VAR 0 5
41590: PUSH
41591: LD_VAR 0 2
41595: PPUSH
41596: CALL_OW 480
41600: ST_TO_ADDR
// if not tmp then
41601: LD_VAR 0 5
41605: NOT
41606: IFFALSE 41610
// exit ;
41608: GO 41659
// for i in tmp do
41610: LD_ADDR_VAR 0 4
41614: PUSH
41615: LD_VAR 0 5
41619: PUSH
41620: FOR_IN
41621: IFFALSE 41657
// if GetTech ( i , side ) <> state_researched then
41623: LD_VAR 0 4
41627: PPUSH
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 321
41637: PUSH
41638: LD_INT 2
41640: NONEQUAL
41641: IFFALSE 41655
// begin result := false ;
41643: LD_ADDR_VAR 0 3
41647: PUSH
41648: LD_INT 0
41650: ST_TO_ADDR
// exit ;
41651: POP
41652: POP
41653: GO 41659
// end ;
41655: GO 41620
41657: POP
41658: POP
// end ;
41659: LD_VAR 0 3
41663: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41664: LD_INT 0
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41679: LD_VAR 0 1
41683: NOT
41684: PUSH
41685: LD_VAR 0 1
41689: PPUSH
41690: CALL_OW 257
41694: PUSH
41695: LD_INT 9
41697: NONEQUAL
41698: OR
41699: IFFALSE 41703
// exit ;
41701: GO 42276
// side := GetSide ( unit ) ;
41703: LD_ADDR_VAR 0 9
41707: PUSH
41708: LD_VAR 0 1
41712: PPUSH
41713: CALL_OW 255
41717: ST_TO_ADDR
// tech_space := tech_spacanom ;
41718: LD_ADDR_VAR 0 12
41722: PUSH
41723: LD_INT 29
41725: ST_TO_ADDR
// tech_time := tech_taurad ;
41726: LD_ADDR_VAR 0 13
41730: PUSH
41731: LD_INT 28
41733: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41734: LD_ADDR_VAR 0 11
41738: PUSH
41739: LD_VAR 0 1
41743: PPUSH
41744: CALL_OW 310
41748: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41749: LD_VAR 0 11
41753: PPUSH
41754: CALL_OW 247
41758: PUSH
41759: LD_INT 2
41761: EQUAL
41762: IFFALSE 41766
// exit ;
41764: GO 42276
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41766: LD_ADDR_VAR 0 8
41770: PUSH
41771: LD_INT 81
41773: PUSH
41774: LD_VAR 0 9
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 3
41785: PUSH
41786: LD_INT 21
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 69
41808: ST_TO_ADDR
// if not tmp then
41809: LD_VAR 0 8
41813: NOT
41814: IFFALSE 41818
// exit ;
41816: GO 42276
// if in_unit then
41818: LD_VAR 0 11
41822: IFFALSE 41846
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41824: LD_ADDR_VAR 0 10
41828: PUSH
41829: LD_VAR 0 8
41833: PPUSH
41834: LD_VAR 0 11
41838: PPUSH
41839: CALL_OW 74
41843: ST_TO_ADDR
41844: GO 41866
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41846: LD_ADDR_VAR 0 10
41850: PUSH
41851: LD_VAR 0 8
41855: PPUSH
41856: LD_VAR 0 1
41860: PPUSH
41861: CALL_OW 74
41865: ST_TO_ADDR
// if not enemy then
41866: LD_VAR 0 10
41870: NOT
41871: IFFALSE 41875
// exit ;
41873: GO 42276
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41875: LD_VAR 0 11
41879: PUSH
41880: LD_VAR 0 11
41884: PPUSH
41885: LD_VAR 0 10
41889: PPUSH
41890: CALL_OW 296
41894: PUSH
41895: LD_INT 13
41897: GREATER
41898: AND
41899: PUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_VAR 0 10
41909: PPUSH
41910: CALL_OW 296
41914: PUSH
41915: LD_INT 12
41917: GREATER
41918: OR
41919: IFFALSE 41923
// exit ;
41921: GO 42276
// missile := [ 1 ] ;
41923: LD_ADDR_VAR 0 14
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41934: LD_VAR 0 9
41938: PPUSH
41939: LD_VAR 0 12
41943: PPUSH
41944: CALL_OW 325
41948: IFFALSE 41977
// missile := Replace ( missile , missile + 1 , 2 ) ;
41950: LD_ADDR_VAR 0 14
41954: PUSH
41955: LD_VAR 0 14
41959: PPUSH
41960: LD_VAR 0 14
41964: PUSH
41965: LD_INT 1
41967: PLUS
41968: PPUSH
41969: LD_INT 2
41971: PPUSH
41972: CALL_OW 1
41976: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41977: LD_VAR 0 9
41981: PPUSH
41982: LD_VAR 0 13
41986: PPUSH
41987: CALL_OW 325
41991: PUSH
41992: LD_VAR 0 10
41996: PPUSH
41997: CALL_OW 255
42001: PPUSH
42002: LD_VAR 0 13
42006: PPUSH
42007: CALL_OW 325
42011: NOT
42012: AND
42013: IFFALSE 42042
// missile := Replace ( missile , missile + 1 , 3 ) ;
42015: LD_ADDR_VAR 0 14
42019: PUSH
42020: LD_VAR 0 14
42024: PPUSH
42025: LD_VAR 0 14
42029: PUSH
42030: LD_INT 1
42032: PLUS
42033: PPUSH
42034: LD_INT 3
42036: PPUSH
42037: CALL_OW 1
42041: ST_TO_ADDR
// if missile < 2 then
42042: LD_VAR 0 14
42046: PUSH
42047: LD_INT 2
42049: LESS
42050: IFFALSE 42054
// exit ;
42052: GO 42276
// x := GetX ( enemy ) ;
42054: LD_ADDR_VAR 0 4
42058: PUSH
42059: LD_VAR 0 10
42063: PPUSH
42064: CALL_OW 250
42068: ST_TO_ADDR
// y := GetY ( enemy ) ;
42069: LD_ADDR_VAR 0 5
42073: PUSH
42074: LD_VAR 0 10
42078: PPUSH
42079: CALL_OW 251
42083: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42084: LD_ADDR_VAR 0 6
42088: PUSH
42089: LD_VAR 0 4
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PPUSH
42098: LD_INT 1
42100: PPUSH
42101: CALL_OW 12
42105: PLUS
42106: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42107: LD_ADDR_VAR 0 7
42111: PUSH
42112: LD_VAR 0 5
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PPUSH
42121: LD_INT 1
42123: PPUSH
42124: CALL_OW 12
42128: PLUS
42129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42130: LD_VAR 0 6
42134: PPUSH
42135: LD_VAR 0 7
42139: PPUSH
42140: CALL_OW 488
42144: NOT
42145: IFFALSE 42167
// begin _x := x ;
42147: LD_ADDR_VAR 0 6
42151: PUSH
42152: LD_VAR 0 4
42156: ST_TO_ADDR
// _y := y ;
42157: LD_ADDR_VAR 0 7
42161: PUSH
42162: LD_VAR 0 5
42166: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42167: LD_ADDR_VAR 0 3
42171: PUSH
42172: LD_INT 1
42174: PPUSH
42175: LD_VAR 0 14
42179: PPUSH
42180: CALL_OW 12
42184: ST_TO_ADDR
// case i of 1 :
42185: LD_VAR 0 3
42189: PUSH
42190: LD_INT 1
42192: DOUBLE
42193: EQUAL
42194: IFTRUE 42198
42196: GO 42215
42198: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42199: LD_VAR 0 1
42203: PPUSH
42204: LD_VAR 0 10
42208: PPUSH
42209: CALL_OW 115
42213: GO 42276
42215: LD_INT 2
42217: DOUBLE
42218: EQUAL
42219: IFTRUE 42223
42221: GO 42245
42223: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42224: LD_VAR 0 1
42228: PPUSH
42229: LD_VAR 0 6
42233: PPUSH
42234: LD_VAR 0 7
42238: PPUSH
42239: CALL_OW 153
42243: GO 42276
42245: LD_INT 3
42247: DOUBLE
42248: EQUAL
42249: IFTRUE 42253
42251: GO 42275
42253: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42254: LD_VAR 0 1
42258: PPUSH
42259: LD_VAR 0 6
42263: PPUSH
42264: LD_VAR 0 7
42268: PPUSH
42269: CALL_OW 154
42273: GO 42276
42275: POP
// end ;
42276: LD_VAR 0 2
42280: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42281: LD_INT 0
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
// if not unit or not building then
42289: LD_VAR 0 1
42293: NOT
42294: PUSH
42295: LD_VAR 0 2
42299: NOT
42300: OR
42301: IFFALSE 42305
// exit ;
42303: GO 42463
// x := GetX ( building ) ;
42305: LD_ADDR_VAR 0 5
42309: PUSH
42310: LD_VAR 0 2
42314: PPUSH
42315: CALL_OW 250
42319: ST_TO_ADDR
// y := GetY ( building ) ;
42320: LD_ADDR_VAR 0 6
42324: PUSH
42325: LD_VAR 0 2
42329: PPUSH
42330: CALL_OW 251
42334: ST_TO_ADDR
// for i = 0 to 5 do
42335: LD_ADDR_VAR 0 4
42339: PUSH
42340: DOUBLE
42341: LD_INT 0
42343: DEC
42344: ST_TO_ADDR
42345: LD_INT 5
42347: PUSH
42348: FOR_TO
42349: IFFALSE 42461
// begin _x := ShiftX ( x , i , 3 ) ;
42351: LD_ADDR_VAR 0 7
42355: PUSH
42356: LD_VAR 0 5
42360: PPUSH
42361: LD_VAR 0 4
42365: PPUSH
42366: LD_INT 3
42368: PPUSH
42369: CALL_OW 272
42373: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42374: LD_ADDR_VAR 0 8
42378: PUSH
42379: LD_VAR 0 6
42383: PPUSH
42384: LD_VAR 0 4
42388: PPUSH
42389: LD_INT 3
42391: PPUSH
42392: CALL_OW 273
42396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42397: LD_VAR 0 7
42401: PPUSH
42402: LD_VAR 0 8
42406: PPUSH
42407: CALL_OW 488
42411: NOT
42412: IFFALSE 42416
// continue ;
42414: GO 42348
// if HexInfo ( _x , _y ) = 0 then
42416: LD_VAR 0 7
42420: PPUSH
42421: LD_VAR 0 8
42425: PPUSH
42426: CALL_OW 428
42430: PUSH
42431: LD_INT 0
42433: EQUAL
42434: IFFALSE 42459
// begin ComMoveXY ( unit , _x , _y ) ;
42436: LD_VAR 0 1
42440: PPUSH
42441: LD_VAR 0 7
42445: PPUSH
42446: LD_VAR 0 8
42450: PPUSH
42451: CALL_OW 111
// exit ;
42455: POP
42456: POP
42457: GO 42463
// end ; end ;
42459: GO 42348
42461: POP
42462: POP
// end ;
42463: LD_VAR 0 3
42467: RET
// export function ScanBase ( side , base_area ) ; begin
42468: LD_INT 0
42470: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_VAR 0 2
42480: PPUSH
42481: LD_INT 81
42483: PUSH
42484: LD_VAR 0 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PPUSH
42493: CALL_OW 70
42497: ST_TO_ADDR
// end ;
42498: LD_VAR 0 3
42502: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42503: LD_INT 0
42505: PPUSH
42506: PPUSH
42507: PPUSH
42508: PPUSH
// result := false ;
42509: LD_ADDR_VAR 0 2
42513: PUSH
42514: LD_INT 0
42516: ST_TO_ADDR
// side := GetSide ( unit ) ;
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL_OW 255
42531: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42532: LD_ADDR_VAR 0 4
42536: PUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: CALL_OW 248
42546: ST_TO_ADDR
// case nat of 1 :
42547: LD_VAR 0 4
42551: PUSH
42552: LD_INT 1
42554: DOUBLE
42555: EQUAL
42556: IFTRUE 42560
42558: GO 42571
42560: POP
// tech := tech_lassight ; 2 :
42561: LD_ADDR_VAR 0 5
42565: PUSH
42566: LD_INT 12
42568: ST_TO_ADDR
42569: GO 42610
42571: LD_INT 2
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42579
42577: GO 42590
42579: POP
// tech := tech_mortar ; 3 :
42580: LD_ADDR_VAR 0 5
42584: PUSH
42585: LD_INT 41
42587: ST_TO_ADDR
42588: GO 42610
42590: LD_INT 3
42592: DOUBLE
42593: EQUAL
42594: IFTRUE 42598
42596: GO 42609
42598: POP
// tech := tech_bazooka ; end ;
42599: LD_ADDR_VAR 0 5
42603: PUSH
42604: LD_INT 44
42606: ST_TO_ADDR
42607: GO 42610
42609: POP
// if Researched ( side , tech ) then
42610: LD_VAR 0 3
42614: PPUSH
42615: LD_VAR 0 5
42619: PPUSH
42620: CALL_OW 325
42624: IFFALSE 42651
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42626: LD_ADDR_VAR 0 2
42630: PUSH
42631: LD_INT 5
42633: PUSH
42634: LD_INT 8
42636: PUSH
42637: LD_INT 9
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: PUSH
42645: LD_VAR 0 4
42649: ARRAY
42650: ST_TO_ADDR
// end ;
42651: LD_VAR 0 2
42655: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42656: LD_INT 0
42658: PPUSH
42659: PPUSH
42660: PPUSH
// if not mines then
42661: LD_VAR 0 2
42665: NOT
42666: IFFALSE 42670
// exit ;
42668: GO 42814
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42670: LD_ADDR_VAR 0 5
42674: PUSH
42675: LD_INT 81
42677: PUSH
42678: LD_VAR 0 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 21
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PPUSH
42708: CALL_OW 69
42712: ST_TO_ADDR
// for i in mines do
42713: LD_ADDR_VAR 0 4
42717: PUSH
42718: LD_VAR 0 2
42722: PUSH
42723: FOR_IN
42724: IFFALSE 42812
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42726: LD_VAR 0 4
42730: PUSH
42731: LD_INT 1
42733: ARRAY
42734: PPUSH
42735: LD_VAR 0 4
42739: PUSH
42740: LD_INT 2
42742: ARRAY
42743: PPUSH
42744: CALL_OW 458
42748: NOT
42749: IFFALSE 42753
// continue ;
42751: GO 42723
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42753: LD_VAR 0 4
42757: PUSH
42758: LD_INT 1
42760: ARRAY
42761: PPUSH
42762: LD_VAR 0 4
42766: PUSH
42767: LD_INT 2
42769: ARRAY
42770: PPUSH
42771: CALL_OW 428
42775: PUSH
42776: LD_VAR 0 5
42780: IN
42781: IFFALSE 42810
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42783: LD_VAR 0 4
42787: PUSH
42788: LD_INT 1
42790: ARRAY
42791: PPUSH
42792: LD_VAR 0 4
42796: PUSH
42797: LD_INT 2
42799: ARRAY
42800: PPUSH
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 456
// end ;
42810: GO 42723
42812: POP
42813: POP
// end ;
42814: LD_VAR 0 3
42818: RET
// export function Count ( array ) ; begin
42819: LD_INT 0
42821: PPUSH
// result := array + 0 ;
42822: LD_ADDR_VAR 0 2
42826: PUSH
42827: LD_VAR 0 1
42831: PUSH
42832: LD_INT 0
42834: PLUS
42835: ST_TO_ADDR
// end ;
42836: LD_VAR 0 2
42840: RET
// export function IsEmpty ( building ) ; begin
42841: LD_INT 0
42843: PPUSH
// if not building then
42844: LD_VAR 0 1
42848: NOT
42849: IFFALSE 42853
// exit ;
42851: GO 42896
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42853: LD_ADDR_VAR 0 2
42857: PUSH
42858: LD_VAR 0 1
42862: PUSH
42863: LD_INT 22
42865: PUSH
42866: LD_VAR 0 1
42870: PPUSH
42871: CALL_OW 255
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 58
42882: PUSH
42883: EMPTY
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PPUSH
42890: CALL_OW 69
42894: IN
42895: ST_TO_ADDR
// end ;
42896: LD_VAR 0 2
42900: RET
// export function IsNotFull ( building ) ; var places ; begin
42901: LD_INT 0
42903: PPUSH
42904: PPUSH
// if not building then
42905: LD_VAR 0 1
42909: NOT
42910: IFFALSE 42914
// exit ;
42912: GO 42942
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42914: LD_ADDR_VAR 0 2
42918: PUSH
42919: LD_VAR 0 1
42923: PPUSH
42924: LD_INT 3
42926: PUSH
42927: LD_INT 62
42929: PUSH
42930: EMPTY
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PPUSH
42937: CALL_OW 72
42941: ST_TO_ADDR
// end ;
42942: LD_VAR 0 2
42946: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42947: LD_INT 0
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
// tmp := [ ] ;
42953: LD_ADDR_VAR 0 3
42957: PUSH
42958: EMPTY
42959: ST_TO_ADDR
// list := [ ] ;
42960: LD_ADDR_VAR 0 5
42964: PUSH
42965: EMPTY
42966: ST_TO_ADDR
// for i = 16 to 25 do
42967: LD_ADDR_VAR 0 4
42971: PUSH
42972: DOUBLE
42973: LD_INT 16
42975: DEC
42976: ST_TO_ADDR
42977: LD_INT 25
42979: PUSH
42980: FOR_TO
42981: IFFALSE 43054
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_VAR 0 3
42992: PUSH
42993: LD_INT 22
42995: PUSH
42996: LD_VAR 0 1
43000: PPUSH
43001: CALL_OW 255
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 91
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: LD_INT 6
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 30
43028: PUSH
43029: LD_VAR 0 4
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: PPUSH
43046: CALL_OW 69
43050: ADD
43051: ST_TO_ADDR
43052: GO 42980
43054: POP
43055: POP
// for i = 1 to tmp do
43056: LD_ADDR_VAR 0 4
43060: PUSH
43061: DOUBLE
43062: LD_INT 1
43064: DEC
43065: ST_TO_ADDR
43066: LD_VAR 0 3
43070: PUSH
43071: FOR_TO
43072: IFFALSE 43160
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43074: LD_ADDR_VAR 0 5
43078: PUSH
43079: LD_VAR 0 5
43083: PUSH
43084: LD_VAR 0 3
43088: PUSH
43089: LD_VAR 0 4
43093: ARRAY
43094: PPUSH
43095: CALL_OW 266
43099: PUSH
43100: LD_VAR 0 3
43104: PUSH
43105: LD_VAR 0 4
43109: ARRAY
43110: PPUSH
43111: CALL_OW 250
43115: PUSH
43116: LD_VAR 0 3
43120: PUSH
43121: LD_VAR 0 4
43125: ARRAY
43126: PPUSH
43127: CALL_OW 251
43131: PUSH
43132: LD_VAR 0 3
43136: PUSH
43137: LD_VAR 0 4
43141: ARRAY
43142: PPUSH
43143: CALL_OW 254
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: ADD
43157: ST_TO_ADDR
43158: GO 43071
43160: POP
43161: POP
// result := list ;
43162: LD_ADDR_VAR 0 2
43166: PUSH
43167: LD_VAR 0 5
43171: ST_TO_ADDR
// end ;
43172: LD_VAR 0 2
43176: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43177: LD_INT 0
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
// if not factory then
43186: LD_VAR 0 1
43190: NOT
43191: IFFALSE 43195
// exit ;
43193: GO 43788
// if control = control_apeman then
43195: LD_VAR 0 4
43199: PUSH
43200: LD_INT 5
43202: EQUAL
43203: IFFALSE 43312
// begin tmp := UnitsInside ( factory ) ;
43205: LD_ADDR_VAR 0 8
43209: PUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 313
43219: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43220: LD_VAR 0 8
43224: PPUSH
43225: LD_INT 25
43227: PUSH
43228: LD_INT 12
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PPUSH
43235: CALL_OW 72
43239: NOT
43240: IFFALSE 43250
// control := control_manual ;
43242: LD_ADDR_VAR 0 4
43246: PUSH
43247: LD_INT 1
43249: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43250: LD_ADDR_VAR 0 8
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL 42947 0 1
43264: ST_TO_ADDR
// if tmp then
43265: LD_VAR 0 8
43269: IFFALSE 43312
// begin for i in tmp do
43271: LD_ADDR_VAR 0 7
43275: PUSH
43276: LD_VAR 0 8
43280: PUSH
43281: FOR_IN
43282: IFFALSE 43310
// if i [ 1 ] = b_ext_radio then
43284: LD_VAR 0 7
43288: PUSH
43289: LD_INT 1
43291: ARRAY
43292: PUSH
43293: LD_INT 22
43295: EQUAL
43296: IFFALSE 43308
// begin control := control_remote ;
43298: LD_ADDR_VAR 0 4
43302: PUSH
43303: LD_INT 2
43305: ST_TO_ADDR
// break ;
43306: GO 43310
// end ;
43308: GO 43281
43310: POP
43311: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43312: LD_VAR 0 1
43316: PPUSH
43317: LD_VAR 0 2
43321: PPUSH
43322: LD_VAR 0 3
43326: PPUSH
43327: LD_VAR 0 4
43331: PPUSH
43332: LD_VAR 0 5
43336: PPUSH
43337: CALL_OW 448
43341: IFFALSE 43376
// begin result := [ chassis , engine , control , weapon ] ;
43343: LD_ADDR_VAR 0 6
43347: PUSH
43348: LD_VAR 0 2
43352: PUSH
43353: LD_VAR 0 3
43357: PUSH
43358: LD_VAR 0 4
43362: PUSH
43363: LD_VAR 0 5
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: ST_TO_ADDR
// exit ;
43374: GO 43788
// end ; _chassis := AvailableChassisList ( factory ) ;
43376: LD_ADDR_VAR 0 9
43380: PUSH
43381: LD_VAR 0 1
43385: PPUSH
43386: CALL_OW 475
43390: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43391: LD_ADDR_VAR 0 11
43395: PUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 476
43405: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43406: LD_ADDR_VAR 0 12
43410: PUSH
43411: LD_VAR 0 1
43415: PPUSH
43416: CALL_OW 477
43420: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43421: LD_ADDR_VAR 0 10
43425: PUSH
43426: LD_VAR 0 1
43430: PPUSH
43431: CALL_OW 478
43435: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43436: LD_VAR 0 9
43440: NOT
43441: PUSH
43442: LD_VAR 0 11
43446: NOT
43447: OR
43448: PUSH
43449: LD_VAR 0 12
43453: NOT
43454: OR
43455: PUSH
43456: LD_VAR 0 10
43460: NOT
43461: OR
43462: IFFALSE 43497
// begin result := [ chassis , engine , control , weapon ] ;
43464: LD_ADDR_VAR 0 6
43468: PUSH
43469: LD_VAR 0 2
43473: PUSH
43474: LD_VAR 0 3
43478: PUSH
43479: LD_VAR 0 4
43483: PUSH
43484: LD_VAR 0 5
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
// exit ;
43495: GO 43788
// end ; if not chassis in _chassis then
43497: LD_VAR 0 2
43501: PUSH
43502: LD_VAR 0 9
43506: IN
43507: NOT
43508: IFFALSE 43534
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43510: LD_ADDR_VAR 0 2
43514: PUSH
43515: LD_VAR 0 9
43519: PUSH
43520: LD_INT 1
43522: PPUSH
43523: LD_VAR 0 9
43527: PPUSH
43528: CALL_OW 12
43532: ARRAY
43533: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43534: LD_VAR 0 2
43538: PPUSH
43539: LD_VAR 0 3
43543: PPUSH
43544: CALL 43793 0 2
43548: NOT
43549: IFFALSE 43608
// repeat engine := _engine [ 1 ] ;
43551: LD_ADDR_VAR 0 3
43555: PUSH
43556: LD_VAR 0 11
43560: PUSH
43561: LD_INT 1
43563: ARRAY
43564: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43565: LD_ADDR_VAR 0 11
43569: PUSH
43570: LD_VAR 0 11
43574: PPUSH
43575: LD_INT 1
43577: PPUSH
43578: CALL_OW 3
43582: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43583: LD_VAR 0 2
43587: PPUSH
43588: LD_VAR 0 3
43592: PPUSH
43593: CALL 43793 0 2
43597: PUSH
43598: LD_VAR 0 11
43602: PUSH
43603: EMPTY
43604: EQUAL
43605: OR
43606: IFFALSE 43551
// if not control in _control then
43608: LD_VAR 0 4
43612: PUSH
43613: LD_VAR 0 12
43617: IN
43618: NOT
43619: IFFALSE 43645
// control := _control [ rand ( 1 , _control ) ] ;
43621: LD_ADDR_VAR 0 4
43625: PUSH
43626: LD_VAR 0 12
43630: PUSH
43631: LD_INT 1
43633: PPUSH
43634: LD_VAR 0 12
43638: PPUSH
43639: CALL_OW 12
43643: ARRAY
43644: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43645: LD_VAR 0 2
43649: PPUSH
43650: LD_VAR 0 5
43654: PPUSH
43655: CALL 44013 0 2
43659: NOT
43660: IFFALSE 43719
// repeat weapon := _weapon [ 1 ] ;
43662: LD_ADDR_VAR 0 5
43666: PUSH
43667: LD_VAR 0 10
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43676: LD_ADDR_VAR 0 10
43680: PUSH
43681: LD_VAR 0 10
43685: PPUSH
43686: LD_INT 1
43688: PPUSH
43689: CALL_OW 3
43693: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43694: LD_VAR 0 2
43698: PPUSH
43699: LD_VAR 0 5
43703: PPUSH
43704: CALL 44013 0 2
43708: PUSH
43709: LD_VAR 0 10
43713: PUSH
43714: EMPTY
43715: EQUAL
43716: OR
43717: IFFALSE 43662
// result := [ ] ;
43719: LD_ADDR_VAR 0 6
43723: PUSH
43724: EMPTY
43725: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43726: LD_VAR 0 1
43730: PPUSH
43731: LD_VAR 0 2
43735: PPUSH
43736: LD_VAR 0 3
43740: PPUSH
43741: LD_VAR 0 4
43745: PPUSH
43746: LD_VAR 0 5
43750: PPUSH
43751: CALL_OW 448
43755: IFFALSE 43788
// result := [ chassis , engine , control , weapon ] ;
43757: LD_ADDR_VAR 0 6
43761: PUSH
43762: LD_VAR 0 2
43766: PUSH
43767: LD_VAR 0 3
43771: PUSH
43772: LD_VAR 0 4
43776: PUSH
43777: LD_VAR 0 5
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// end ;
43788: LD_VAR 0 6
43792: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43793: LD_INT 0
43795: PPUSH
// if not chassis or not engine then
43796: LD_VAR 0 1
43800: NOT
43801: PUSH
43802: LD_VAR 0 2
43806: NOT
43807: OR
43808: IFFALSE 43812
// exit ;
43810: GO 44008
// case engine of engine_solar :
43812: LD_VAR 0 2
43816: PUSH
43817: LD_INT 2
43819: DOUBLE
43820: EQUAL
43821: IFTRUE 43825
43823: GO 43863
43825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43826: LD_ADDR_VAR 0 3
43830: PUSH
43831: LD_INT 11
43833: PUSH
43834: LD_INT 12
43836: PUSH
43837: LD_INT 13
43839: PUSH
43840: LD_INT 14
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 3
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: ST_TO_ADDR
43861: GO 43992
43863: LD_INT 1
43865: DOUBLE
43866: EQUAL
43867: IFTRUE 43871
43869: GO 43933
43871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43872: LD_ADDR_VAR 0 3
43876: PUSH
43877: LD_INT 11
43879: PUSH
43880: LD_INT 12
43882: PUSH
43883: LD_INT 13
43885: PUSH
43886: LD_INT 14
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 4
43900: PUSH
43901: LD_INT 5
43903: PUSH
43904: LD_INT 21
43906: PUSH
43907: LD_INT 23
43909: PUSH
43910: LD_INT 22
43912: PUSH
43913: LD_INT 24
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
43931: GO 43992
43933: LD_INT 3
43935: DOUBLE
43936: EQUAL
43937: IFTRUE 43941
43939: GO 43991
43941: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43942: LD_ADDR_VAR 0 3
43946: PUSH
43947: LD_INT 13
43949: PUSH
43950: LD_INT 14
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: LD_INT 4
43961: PUSH
43962: LD_INT 5
43964: PUSH
43965: LD_INT 21
43967: PUSH
43968: LD_INT 22
43970: PUSH
43971: LD_INT 23
43973: PUSH
43974: LD_INT 24
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
43989: GO 43992
43991: POP
// result := ( chassis in result ) ;
43992: LD_ADDR_VAR 0 3
43996: PUSH
43997: LD_VAR 0 1
44001: PUSH
44002: LD_VAR 0 3
44006: IN
44007: ST_TO_ADDR
// end ;
44008: LD_VAR 0 3
44012: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44013: LD_INT 0
44015: PPUSH
// if not chassis or not weapon then
44016: LD_VAR 0 1
44020: NOT
44021: PUSH
44022: LD_VAR 0 2
44026: NOT
44027: OR
44028: IFFALSE 44032
// exit ;
44030: GO 45092
// case weapon of us_machine_gun :
44032: LD_VAR 0 2
44036: PUSH
44037: LD_INT 2
44039: DOUBLE
44040: EQUAL
44041: IFTRUE 44045
44043: GO 44075
44045: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44046: LD_ADDR_VAR 0 3
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: LD_INT 4
44062: PUSH
44063: LD_INT 5
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: ST_TO_ADDR
44073: GO 45076
44075: LD_INT 3
44077: DOUBLE
44078: EQUAL
44079: IFTRUE 44083
44081: GO 44113
44083: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44084: LD_ADDR_VAR 0 3
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 3
44097: PUSH
44098: LD_INT 4
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
44111: GO 45076
44113: LD_INT 11
44115: DOUBLE
44116: EQUAL
44117: IFTRUE 44121
44119: GO 44151
44121: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44122: LD_ADDR_VAR 0 3
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: LD_INT 3
44135: PUSH
44136: LD_INT 4
44138: PUSH
44139: LD_INT 5
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
44149: GO 45076
44151: LD_INT 4
44153: DOUBLE
44154: EQUAL
44155: IFTRUE 44159
44157: GO 44185
44159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44160: LD_ADDR_VAR 0 3
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: LD_INT 3
44170: PUSH
44171: LD_INT 4
44173: PUSH
44174: LD_INT 5
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
44183: GO 45076
44185: LD_INT 5
44187: DOUBLE
44188: EQUAL
44189: IFTRUE 44193
44191: GO 44219
44193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44194: LD_ADDR_VAR 0 3
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 3
44204: PUSH
44205: LD_INT 4
44207: PUSH
44208: LD_INT 5
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
44217: GO 45076
44219: LD_INT 9
44221: DOUBLE
44222: EQUAL
44223: IFTRUE 44227
44225: GO 44253
44227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44228: LD_ADDR_VAR 0 3
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 4
44241: PUSH
44242: LD_INT 5
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: ST_TO_ADDR
44251: GO 45076
44253: LD_INT 7
44255: DOUBLE
44256: EQUAL
44257: IFTRUE 44261
44259: GO 44287
44261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44262: LD_ADDR_VAR 0 3
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 4
44275: PUSH
44276: LD_INT 5
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: ST_TO_ADDR
44285: GO 45076
44287: LD_INT 12
44289: DOUBLE
44290: EQUAL
44291: IFTRUE 44295
44293: GO 44321
44295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44296: LD_ADDR_VAR 0 3
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 3
44306: PUSH
44307: LD_INT 4
44309: PUSH
44310: LD_INT 5
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: ST_TO_ADDR
44319: GO 45076
44321: LD_INT 13
44323: DOUBLE
44324: EQUAL
44325: IFTRUE 44329
44327: GO 44355
44329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44330: LD_ADDR_VAR 0 3
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: LD_INT 4
44343: PUSH
44344: LD_INT 5
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
44353: GO 45076
44355: LD_INT 14
44357: DOUBLE
44358: EQUAL
44359: IFTRUE 44363
44361: GO 44381
44363: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44364: LD_ADDR_VAR 0 3
44368: PUSH
44369: LD_INT 4
44371: PUSH
44372: LD_INT 5
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: ST_TO_ADDR
44379: GO 45076
44381: LD_INT 6
44383: DOUBLE
44384: EQUAL
44385: IFTRUE 44389
44387: GO 44407
44389: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44390: LD_ADDR_VAR 0 3
44394: PUSH
44395: LD_INT 4
44397: PUSH
44398: LD_INT 5
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: ST_TO_ADDR
44405: GO 45076
44407: LD_INT 10
44409: DOUBLE
44410: EQUAL
44411: IFTRUE 44415
44413: GO 44433
44415: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44416: LD_ADDR_VAR 0 3
44420: PUSH
44421: LD_INT 4
44423: PUSH
44424: LD_INT 5
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: ST_TO_ADDR
44431: GO 45076
44433: LD_INT 22
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44441
44439: GO 44467
44441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44442: LD_ADDR_VAR 0 3
44446: PUSH
44447: LD_INT 11
44449: PUSH
44450: LD_INT 12
44452: PUSH
44453: LD_INT 13
44455: PUSH
44456: LD_INT 14
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
44465: GO 45076
44467: LD_INT 23
44469: DOUBLE
44470: EQUAL
44471: IFTRUE 44475
44473: GO 44501
44475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_INT 11
44483: PUSH
44484: LD_INT 12
44486: PUSH
44487: LD_INT 13
44489: PUSH
44490: LD_INT 14
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
44499: GO 45076
44501: LD_INT 24
44503: DOUBLE
44504: EQUAL
44505: IFTRUE 44509
44507: GO 44535
44509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44510: LD_ADDR_VAR 0 3
44514: PUSH
44515: LD_INT 11
44517: PUSH
44518: LD_INT 12
44520: PUSH
44521: LD_INT 13
44523: PUSH
44524: LD_INT 14
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: ST_TO_ADDR
44533: GO 45076
44535: LD_INT 30
44537: DOUBLE
44538: EQUAL
44539: IFTRUE 44543
44541: GO 44569
44543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44544: LD_ADDR_VAR 0 3
44548: PUSH
44549: LD_INT 11
44551: PUSH
44552: LD_INT 12
44554: PUSH
44555: LD_INT 13
44557: PUSH
44558: LD_INT 14
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: ST_TO_ADDR
44567: GO 45076
44569: LD_INT 25
44571: DOUBLE
44572: EQUAL
44573: IFTRUE 44577
44575: GO 44595
44577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44578: LD_ADDR_VAR 0 3
44582: PUSH
44583: LD_INT 13
44585: PUSH
44586: LD_INT 14
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: ST_TO_ADDR
44593: GO 45076
44595: LD_INT 27
44597: DOUBLE
44598: EQUAL
44599: IFTRUE 44603
44601: GO 44621
44603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44604: LD_ADDR_VAR 0 3
44608: PUSH
44609: LD_INT 13
44611: PUSH
44612: LD_INT 14
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: ST_TO_ADDR
44619: GO 45076
44621: LD_INT 92
44623: DOUBLE
44624: EQUAL
44625: IFTRUE 44629
44627: GO 44655
44629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44630: LD_ADDR_VAR 0 3
44634: PUSH
44635: LD_INT 11
44637: PUSH
44638: LD_INT 12
44640: PUSH
44641: LD_INT 13
44643: PUSH
44644: LD_INT 14
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: ST_TO_ADDR
44653: GO 45076
44655: LD_INT 28
44657: DOUBLE
44658: EQUAL
44659: IFTRUE 44663
44661: GO 44681
44663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_INT 13
44671: PUSH
44672: LD_INT 14
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: ST_TO_ADDR
44679: GO 45076
44681: LD_INT 29
44683: DOUBLE
44684: EQUAL
44685: IFTRUE 44689
44687: GO 44707
44689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44690: LD_ADDR_VAR 0 3
44694: PUSH
44695: LD_INT 13
44697: PUSH
44698: LD_INT 14
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: ST_TO_ADDR
44705: GO 45076
44707: LD_INT 31
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44715
44713: GO 44733
44715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44716: LD_ADDR_VAR 0 3
44720: PUSH
44721: LD_INT 13
44723: PUSH
44724: LD_INT 14
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: ST_TO_ADDR
44731: GO 45076
44733: LD_INT 26
44735: DOUBLE
44736: EQUAL
44737: IFTRUE 44741
44739: GO 44759
44741: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: LD_INT 13
44749: PUSH
44750: LD_INT 14
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: ST_TO_ADDR
44757: GO 45076
44759: LD_INT 42
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44767
44765: GO 44793
44767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_INT 21
44775: PUSH
44776: LD_INT 22
44778: PUSH
44779: LD_INT 23
44781: PUSH
44782: LD_INT 24
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
44791: GO 45076
44793: LD_INT 43
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44801
44799: GO 44827
44801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44802: LD_ADDR_VAR 0 3
44806: PUSH
44807: LD_INT 21
44809: PUSH
44810: LD_INT 22
44812: PUSH
44813: LD_INT 23
44815: PUSH
44816: LD_INT 24
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
44825: GO 45076
44827: LD_INT 44
44829: DOUBLE
44830: EQUAL
44831: IFTRUE 44835
44833: GO 44861
44835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44836: LD_ADDR_VAR 0 3
44840: PUSH
44841: LD_INT 21
44843: PUSH
44844: LD_INT 22
44846: PUSH
44847: LD_INT 23
44849: PUSH
44850: LD_INT 24
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
44859: GO 45076
44861: LD_INT 45
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44869
44867: GO 44895
44869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: LD_INT 21
44877: PUSH
44878: LD_INT 22
44880: PUSH
44881: LD_INT 23
44883: PUSH
44884: LD_INT 24
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: ST_TO_ADDR
44893: GO 45076
44895: LD_INT 49
44897: DOUBLE
44898: EQUAL
44899: IFTRUE 44903
44901: GO 44929
44903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44904: LD_ADDR_VAR 0 3
44908: PUSH
44909: LD_INT 21
44911: PUSH
44912: LD_INT 22
44914: PUSH
44915: LD_INT 23
44917: PUSH
44918: LD_INT 24
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: ST_TO_ADDR
44927: GO 45076
44929: LD_INT 51
44931: DOUBLE
44932: EQUAL
44933: IFTRUE 44937
44935: GO 44963
44937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44938: LD_ADDR_VAR 0 3
44942: PUSH
44943: LD_INT 21
44945: PUSH
44946: LD_INT 22
44948: PUSH
44949: LD_INT 23
44951: PUSH
44952: LD_INT 24
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
44961: GO 45076
44963: LD_INT 52
44965: DOUBLE
44966: EQUAL
44967: IFTRUE 44971
44969: GO 44997
44971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44972: LD_ADDR_VAR 0 3
44976: PUSH
44977: LD_INT 21
44979: PUSH
44980: LD_INT 22
44982: PUSH
44983: LD_INT 23
44985: PUSH
44986: LD_INT 24
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: ST_TO_ADDR
44995: GO 45076
44997: LD_INT 53
44999: DOUBLE
45000: EQUAL
45001: IFTRUE 45005
45003: GO 45023
45005: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45006: LD_ADDR_VAR 0 3
45010: PUSH
45011: LD_INT 23
45013: PUSH
45014: LD_INT 24
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: ST_TO_ADDR
45021: GO 45076
45023: LD_INT 46
45025: DOUBLE
45026: EQUAL
45027: IFTRUE 45031
45029: GO 45049
45031: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45032: LD_ADDR_VAR 0 3
45036: PUSH
45037: LD_INT 23
45039: PUSH
45040: LD_INT 24
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: ST_TO_ADDR
45047: GO 45076
45049: LD_INT 47
45051: DOUBLE
45052: EQUAL
45053: IFTRUE 45057
45055: GO 45075
45057: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45058: LD_ADDR_VAR 0 3
45062: PUSH
45063: LD_INT 23
45065: PUSH
45066: LD_INT 24
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: ST_TO_ADDR
45073: GO 45076
45075: POP
// result := ( chassis in result ) ;
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: LD_VAR 0 1
45085: PUSH
45086: LD_VAR 0 3
45090: IN
45091: ST_TO_ADDR
// end ;
45092: LD_VAR 0 3
45096: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45097: LD_INT 0
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
// result := array ;
45106: LD_ADDR_VAR 0 5
45110: PUSH
45111: LD_VAR 0 1
45115: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45116: LD_VAR 0 1
45120: NOT
45121: PUSH
45122: LD_VAR 0 2
45126: NOT
45127: OR
45128: PUSH
45129: LD_VAR 0 3
45133: NOT
45134: OR
45135: PUSH
45136: LD_VAR 0 2
45140: PUSH
45141: LD_VAR 0 1
45145: GREATER
45146: OR
45147: PUSH
45148: LD_VAR 0 3
45152: PUSH
45153: LD_VAR 0 1
45157: GREATER
45158: OR
45159: IFFALSE 45163
// exit ;
45161: GO 45459
// if direction then
45163: LD_VAR 0 4
45167: IFFALSE 45231
// begin d := 1 ;
45169: LD_ADDR_VAR 0 9
45173: PUSH
45174: LD_INT 1
45176: ST_TO_ADDR
// if i_from > i_to then
45177: LD_VAR 0 2
45181: PUSH
45182: LD_VAR 0 3
45186: GREATER
45187: IFFALSE 45213
// length := ( array - i_from ) + i_to else
45189: LD_ADDR_VAR 0 11
45193: PUSH
45194: LD_VAR 0 1
45198: PUSH
45199: LD_VAR 0 2
45203: MINUS
45204: PUSH
45205: LD_VAR 0 3
45209: PLUS
45210: ST_TO_ADDR
45211: GO 45229
// length := i_to - i_from ;
45213: LD_ADDR_VAR 0 11
45217: PUSH
45218: LD_VAR 0 3
45222: PUSH
45223: LD_VAR 0 2
45227: MINUS
45228: ST_TO_ADDR
// end else
45229: GO 45292
// begin d := - 1 ;
45231: LD_ADDR_VAR 0 9
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: ST_TO_ADDR
// if i_from > i_to then
45240: LD_VAR 0 2
45244: PUSH
45245: LD_VAR 0 3
45249: GREATER
45250: IFFALSE 45270
// length := i_from - i_to else
45252: LD_ADDR_VAR 0 11
45256: PUSH
45257: LD_VAR 0 2
45261: PUSH
45262: LD_VAR 0 3
45266: MINUS
45267: ST_TO_ADDR
45268: GO 45292
// length := ( array - i_to ) + i_from ;
45270: LD_ADDR_VAR 0 11
45274: PUSH
45275: LD_VAR 0 1
45279: PUSH
45280: LD_VAR 0 3
45284: MINUS
45285: PUSH
45286: LD_VAR 0 2
45290: PLUS
45291: ST_TO_ADDR
// end ; if not length then
45292: LD_VAR 0 11
45296: NOT
45297: IFFALSE 45301
// exit ;
45299: GO 45459
// tmp := array ;
45301: LD_ADDR_VAR 0 10
45305: PUSH
45306: LD_VAR 0 1
45310: ST_TO_ADDR
// for i = 1 to length do
45311: LD_ADDR_VAR 0 6
45315: PUSH
45316: DOUBLE
45317: LD_INT 1
45319: DEC
45320: ST_TO_ADDR
45321: LD_VAR 0 11
45325: PUSH
45326: FOR_TO
45327: IFFALSE 45447
// begin for j = 1 to array do
45329: LD_ADDR_VAR 0 7
45333: PUSH
45334: DOUBLE
45335: LD_INT 1
45337: DEC
45338: ST_TO_ADDR
45339: LD_VAR 0 1
45343: PUSH
45344: FOR_TO
45345: IFFALSE 45433
// begin k := j + d ;
45347: LD_ADDR_VAR 0 8
45351: PUSH
45352: LD_VAR 0 7
45356: PUSH
45357: LD_VAR 0 9
45361: PLUS
45362: ST_TO_ADDR
// if k > array then
45363: LD_VAR 0 8
45367: PUSH
45368: LD_VAR 0 1
45372: GREATER
45373: IFFALSE 45383
// k := 1 ;
45375: LD_ADDR_VAR 0 8
45379: PUSH
45380: LD_INT 1
45382: ST_TO_ADDR
// if not k then
45383: LD_VAR 0 8
45387: NOT
45388: IFFALSE 45400
// k := array ;
45390: LD_ADDR_VAR 0 8
45394: PUSH
45395: LD_VAR 0 1
45399: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45400: LD_ADDR_VAR 0 10
45404: PUSH
45405: LD_VAR 0 10
45409: PPUSH
45410: LD_VAR 0 8
45414: PPUSH
45415: LD_VAR 0 1
45419: PUSH
45420: LD_VAR 0 7
45424: ARRAY
45425: PPUSH
45426: CALL_OW 1
45430: ST_TO_ADDR
// end ;
45431: GO 45344
45433: POP
45434: POP
// array := tmp ;
45435: LD_ADDR_VAR 0 1
45439: PUSH
45440: LD_VAR 0 10
45444: ST_TO_ADDR
// end ;
45445: GO 45326
45447: POP
45448: POP
// result := array ;
45449: LD_ADDR_VAR 0 5
45453: PUSH
45454: LD_VAR 0 1
45458: ST_TO_ADDR
// end ;
45459: LD_VAR 0 5
45463: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45464: LD_INT 0
45466: PPUSH
45467: PPUSH
// result := 0 ;
45468: LD_ADDR_VAR 0 3
45472: PUSH
45473: LD_INT 0
45475: ST_TO_ADDR
// if not array or not value in array then
45476: LD_VAR 0 1
45480: NOT
45481: PUSH
45482: LD_VAR 0 2
45486: PUSH
45487: LD_VAR 0 1
45491: IN
45492: NOT
45493: OR
45494: IFFALSE 45498
// exit ;
45496: GO 45552
// for i = 1 to array do
45498: LD_ADDR_VAR 0 4
45502: PUSH
45503: DOUBLE
45504: LD_INT 1
45506: DEC
45507: ST_TO_ADDR
45508: LD_VAR 0 1
45512: PUSH
45513: FOR_TO
45514: IFFALSE 45550
// if value = array [ i ] then
45516: LD_VAR 0 2
45520: PUSH
45521: LD_VAR 0 1
45525: PUSH
45526: LD_VAR 0 4
45530: ARRAY
45531: EQUAL
45532: IFFALSE 45548
// begin result := i ;
45534: LD_ADDR_VAR 0 3
45538: PUSH
45539: LD_VAR 0 4
45543: ST_TO_ADDR
// exit ;
45544: POP
45545: POP
45546: GO 45552
// end ;
45548: GO 45513
45550: POP
45551: POP
// end ;
45552: LD_VAR 0 3
45556: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45557: LD_INT 0
45559: PPUSH
// vc_chassis := chassis ;
45560: LD_ADDR_OWVAR 37
45564: PUSH
45565: LD_VAR 0 1
45569: ST_TO_ADDR
// vc_engine := engine ;
45570: LD_ADDR_OWVAR 39
45574: PUSH
45575: LD_VAR 0 2
45579: ST_TO_ADDR
// vc_control := control ;
45580: LD_ADDR_OWVAR 38
45584: PUSH
45585: LD_VAR 0 3
45589: ST_TO_ADDR
// vc_weapon := weapon ;
45590: LD_ADDR_OWVAR 40
45594: PUSH
45595: LD_VAR 0 4
45599: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45600: LD_ADDR_OWVAR 41
45604: PUSH
45605: LD_VAR 0 5
45609: ST_TO_ADDR
// end ;
45610: LD_VAR 0 6
45614: RET
// export function WantPlant ( unit ) ; var task ; begin
45615: LD_INT 0
45617: PPUSH
45618: PPUSH
// result := false ;
45619: LD_ADDR_VAR 0 2
45623: PUSH
45624: LD_INT 0
45626: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45627: LD_ADDR_VAR 0 3
45631: PUSH
45632: LD_VAR 0 1
45636: PPUSH
45637: CALL_OW 437
45641: ST_TO_ADDR
// if task then
45642: LD_VAR 0 3
45646: IFFALSE 45674
// if task [ 1 ] [ 1 ] = p then
45648: LD_VAR 0 3
45652: PUSH
45653: LD_INT 1
45655: ARRAY
45656: PUSH
45657: LD_INT 1
45659: ARRAY
45660: PUSH
45661: LD_STRING p
45663: EQUAL
45664: IFFALSE 45674
// result := true ;
45666: LD_ADDR_VAR 0 2
45670: PUSH
45671: LD_INT 1
45673: ST_TO_ADDR
// end ;
45674: LD_VAR 0 2
45678: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45679: LD_INT 0
45681: PPUSH
45682: PPUSH
45683: PPUSH
45684: PPUSH
// if pos < 1 then
45685: LD_VAR 0 2
45689: PUSH
45690: LD_INT 1
45692: LESS
45693: IFFALSE 45697
// exit ;
45695: GO 46000
// if pos = 1 then
45697: LD_VAR 0 2
45701: PUSH
45702: LD_INT 1
45704: EQUAL
45705: IFFALSE 45738
// result := Replace ( arr , pos [ 1 ] , value ) else
45707: LD_ADDR_VAR 0 4
45711: PUSH
45712: LD_VAR 0 1
45716: PPUSH
45717: LD_VAR 0 2
45721: PUSH
45722: LD_INT 1
45724: ARRAY
45725: PPUSH
45726: LD_VAR 0 3
45730: PPUSH
45731: CALL_OW 1
45735: ST_TO_ADDR
45736: GO 46000
// begin tmp := arr ;
45738: LD_ADDR_VAR 0 6
45742: PUSH
45743: LD_VAR 0 1
45747: ST_TO_ADDR
// s_arr := [ tmp ] ;
45748: LD_ADDR_VAR 0 7
45752: PUSH
45753: LD_VAR 0 6
45757: PUSH
45758: EMPTY
45759: LIST
45760: ST_TO_ADDR
// for i = 1 to pos - 1 do
45761: LD_ADDR_VAR 0 5
45765: PUSH
45766: DOUBLE
45767: LD_INT 1
45769: DEC
45770: ST_TO_ADDR
45771: LD_VAR 0 2
45775: PUSH
45776: LD_INT 1
45778: MINUS
45779: PUSH
45780: FOR_TO
45781: IFFALSE 45826
// begin tmp := tmp [ pos [ i ] ] ;
45783: LD_ADDR_VAR 0 6
45787: PUSH
45788: LD_VAR 0 6
45792: PUSH
45793: LD_VAR 0 2
45797: PUSH
45798: LD_VAR 0 5
45802: ARRAY
45803: ARRAY
45804: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45805: LD_ADDR_VAR 0 7
45809: PUSH
45810: LD_VAR 0 7
45814: PUSH
45815: LD_VAR 0 6
45819: PUSH
45820: EMPTY
45821: LIST
45822: ADD
45823: ST_TO_ADDR
// end ;
45824: GO 45780
45826: POP
45827: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45828: LD_ADDR_VAR 0 6
45832: PUSH
45833: LD_VAR 0 6
45837: PPUSH
45838: LD_VAR 0 2
45842: PUSH
45843: LD_VAR 0 2
45847: ARRAY
45848: PPUSH
45849: LD_VAR 0 3
45853: PPUSH
45854: CALL_OW 1
45858: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45859: LD_ADDR_VAR 0 7
45863: PUSH
45864: LD_VAR 0 7
45868: PPUSH
45869: LD_VAR 0 7
45873: PPUSH
45874: LD_VAR 0 6
45878: PPUSH
45879: CALL_OW 1
45883: ST_TO_ADDR
// for i = s_arr downto 2 do
45884: LD_ADDR_VAR 0 5
45888: PUSH
45889: DOUBLE
45890: LD_VAR 0 7
45894: INC
45895: ST_TO_ADDR
45896: LD_INT 2
45898: PUSH
45899: FOR_DOWNTO
45900: IFFALSE 45984
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45902: LD_ADDR_VAR 0 6
45906: PUSH
45907: LD_VAR 0 7
45911: PUSH
45912: LD_VAR 0 5
45916: PUSH
45917: LD_INT 1
45919: MINUS
45920: ARRAY
45921: PPUSH
45922: LD_VAR 0 2
45926: PUSH
45927: LD_VAR 0 5
45931: PUSH
45932: LD_INT 1
45934: MINUS
45935: ARRAY
45936: PPUSH
45937: LD_VAR 0 7
45941: PUSH
45942: LD_VAR 0 5
45946: ARRAY
45947: PPUSH
45948: CALL_OW 1
45952: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45953: LD_ADDR_VAR 0 7
45957: PUSH
45958: LD_VAR 0 7
45962: PPUSH
45963: LD_VAR 0 5
45967: PUSH
45968: LD_INT 1
45970: MINUS
45971: PPUSH
45972: LD_VAR 0 6
45976: PPUSH
45977: CALL_OW 1
45981: ST_TO_ADDR
// end ;
45982: GO 45899
45984: POP
45985: POP
// result := s_arr [ 1 ] ;
45986: LD_ADDR_VAR 0 4
45990: PUSH
45991: LD_VAR 0 7
45995: PUSH
45996: LD_INT 1
45998: ARRAY
45999: ST_TO_ADDR
// end ; end ;
46000: LD_VAR 0 4
46004: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46005: LD_INT 0
46007: PPUSH
46008: PPUSH
// if not list then
46009: LD_VAR 0 1
46013: NOT
46014: IFFALSE 46018
// exit ;
46016: GO 46109
// i := list [ pos1 ] ;
46018: LD_ADDR_VAR 0 5
46022: PUSH
46023: LD_VAR 0 1
46027: PUSH
46028: LD_VAR 0 2
46032: ARRAY
46033: ST_TO_ADDR
// if not i then
46034: LD_VAR 0 5
46038: NOT
46039: IFFALSE 46043
// exit ;
46041: GO 46109
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46043: LD_ADDR_VAR 0 1
46047: PUSH
46048: LD_VAR 0 1
46052: PPUSH
46053: LD_VAR 0 2
46057: PPUSH
46058: LD_VAR 0 1
46062: PUSH
46063: LD_VAR 0 3
46067: ARRAY
46068: PPUSH
46069: CALL_OW 1
46073: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46074: LD_ADDR_VAR 0 1
46078: PUSH
46079: LD_VAR 0 1
46083: PPUSH
46084: LD_VAR 0 3
46088: PPUSH
46089: LD_VAR 0 5
46093: PPUSH
46094: CALL_OW 1
46098: ST_TO_ADDR
// result := list ;
46099: LD_ADDR_VAR 0 4
46103: PUSH
46104: LD_VAR 0 1
46108: ST_TO_ADDR
// end ;
46109: LD_VAR 0 4
46113: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46114: LD_INT 0
46116: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46117: LD_ADDR_VAR 0 5
46121: PUSH
46122: LD_VAR 0 1
46126: PPUSH
46127: CALL_OW 250
46131: PPUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: CALL_OW 251
46141: PPUSH
46142: LD_VAR 0 2
46146: PPUSH
46147: LD_VAR 0 3
46151: PPUSH
46152: LD_VAR 0 4
46156: PPUSH
46157: CALL 46535 0 5
46161: ST_TO_ADDR
// end ;
46162: LD_VAR 0 5
46166: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46167: LD_INT 0
46169: PPUSH
46170: PPUSH
46171: PPUSH
46172: PPUSH
// if not list or not unit then
46173: LD_VAR 0 2
46177: NOT
46178: PUSH
46179: LD_VAR 0 1
46183: NOT
46184: OR
46185: IFFALSE 46189
// exit ;
46187: GO 46530
// result := [ ] ;
46189: LD_ADDR_VAR 0 5
46193: PUSH
46194: EMPTY
46195: ST_TO_ADDR
// for i in list do
46196: LD_ADDR_VAR 0 6
46200: PUSH
46201: LD_VAR 0 2
46205: PUSH
46206: FOR_IN
46207: IFFALSE 46425
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46209: LD_ADDR_VAR 0 8
46213: PUSH
46214: LD_VAR 0 1
46218: PPUSH
46219: LD_VAR 0 6
46223: PUSH
46224: LD_INT 1
46226: ARRAY
46227: PPUSH
46228: LD_VAR 0 6
46232: PUSH
46233: LD_INT 2
46235: ARRAY
46236: PPUSH
46237: CALL_OW 297
46241: ST_TO_ADDR
// if not Count ( result ) then
46242: LD_VAR 0 5
46246: PPUSH
46247: CALL 42819 0 1
46251: NOT
46252: IFFALSE 46285
// begin result := Join ( result , [ i , tmp ] ) ;
46254: LD_ADDR_VAR 0 5
46258: PUSH
46259: LD_VAR 0 5
46263: PPUSH
46264: LD_VAR 0 6
46268: PUSH
46269: LD_VAR 0 8
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PPUSH
46278: CALL 78408 0 2
46282: ST_TO_ADDR
// continue ;
46283: GO 46206
// end ; if result [ result ] [ 2 ] <= tmp then
46285: LD_VAR 0 5
46289: PUSH
46290: LD_VAR 0 5
46294: ARRAY
46295: PUSH
46296: LD_INT 2
46298: ARRAY
46299: PUSH
46300: LD_VAR 0 8
46304: LESSEQUAL
46305: IFFALSE 46338
// result := Join ( result , [ i , tmp ] ) else
46307: LD_ADDR_VAR 0 5
46311: PUSH
46312: LD_VAR 0 5
46316: PPUSH
46317: LD_VAR 0 6
46321: PUSH
46322: LD_VAR 0 8
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PPUSH
46331: CALL 78408 0 2
46335: ST_TO_ADDR
46336: GO 46423
// begin for j := 1 to Count ( result ) do
46338: LD_ADDR_VAR 0 7
46342: PUSH
46343: DOUBLE
46344: LD_INT 1
46346: DEC
46347: ST_TO_ADDR
46348: LD_VAR 0 5
46352: PPUSH
46353: CALL 42819 0 1
46357: PUSH
46358: FOR_TO
46359: IFFALSE 46421
// begin if tmp < result [ j ] [ 2 ] then
46361: LD_VAR 0 8
46365: PUSH
46366: LD_VAR 0 5
46370: PUSH
46371: LD_VAR 0 7
46375: ARRAY
46376: PUSH
46377: LD_INT 2
46379: ARRAY
46380: LESS
46381: IFFALSE 46419
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46383: LD_ADDR_VAR 0 5
46387: PUSH
46388: LD_VAR 0 5
46392: PPUSH
46393: LD_VAR 0 7
46397: PPUSH
46398: LD_VAR 0 6
46402: PUSH
46403: LD_VAR 0 8
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PPUSH
46412: CALL_OW 2
46416: ST_TO_ADDR
// break ;
46417: GO 46421
// end ; end ;
46419: GO 46358
46421: POP
46422: POP
// end ; end ;
46423: GO 46206
46425: POP
46426: POP
// if result and not asc then
46427: LD_VAR 0 5
46431: PUSH
46432: LD_VAR 0 3
46436: NOT
46437: AND
46438: IFFALSE 46455
// result := ReverseArray ( result ) ;
46440: LD_ADDR_VAR 0 5
46444: PUSH
46445: LD_VAR 0 5
46449: PPUSH
46450: CALL 73695 0 1
46454: ST_TO_ADDR
// tmp := [ ] ;
46455: LD_ADDR_VAR 0 8
46459: PUSH
46460: EMPTY
46461: ST_TO_ADDR
// if mode then
46462: LD_VAR 0 4
46466: IFFALSE 46530
// begin for i := 1 to result do
46468: LD_ADDR_VAR 0 6
46472: PUSH
46473: DOUBLE
46474: LD_INT 1
46476: DEC
46477: ST_TO_ADDR
46478: LD_VAR 0 5
46482: PUSH
46483: FOR_TO
46484: IFFALSE 46518
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46486: LD_ADDR_VAR 0 8
46490: PUSH
46491: LD_VAR 0 8
46495: PPUSH
46496: LD_VAR 0 5
46500: PUSH
46501: LD_VAR 0 6
46505: ARRAY
46506: PUSH
46507: LD_INT 1
46509: ARRAY
46510: PPUSH
46511: CALL 78408 0 2
46515: ST_TO_ADDR
46516: GO 46483
46518: POP
46519: POP
// result := tmp ;
46520: LD_ADDR_VAR 0 5
46524: PUSH
46525: LD_VAR 0 8
46529: ST_TO_ADDR
// end ; end ;
46530: LD_VAR 0 5
46534: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46535: LD_INT 0
46537: PPUSH
46538: PPUSH
46539: PPUSH
46540: PPUSH
// if not list then
46541: LD_VAR 0 3
46545: NOT
46546: IFFALSE 46550
// exit ;
46548: GO 46938
// result := [ ] ;
46550: LD_ADDR_VAR 0 6
46554: PUSH
46555: EMPTY
46556: ST_TO_ADDR
// for i in list do
46557: LD_ADDR_VAR 0 7
46561: PUSH
46562: LD_VAR 0 3
46566: PUSH
46567: FOR_IN
46568: IFFALSE 46770
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46570: LD_ADDR_VAR 0 9
46574: PUSH
46575: LD_VAR 0 7
46579: PPUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: LD_VAR 0 2
46589: PPUSH
46590: CALL_OW 297
46594: ST_TO_ADDR
// if not result then
46595: LD_VAR 0 6
46599: NOT
46600: IFFALSE 46626
// result := [ [ i , tmp ] ] else
46602: LD_ADDR_VAR 0 6
46606: PUSH
46607: LD_VAR 0 7
46611: PUSH
46612: LD_VAR 0 9
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: ST_TO_ADDR
46624: GO 46768
// begin if result [ result ] [ 2 ] < tmp then
46626: LD_VAR 0 6
46630: PUSH
46631: LD_VAR 0 6
46635: ARRAY
46636: PUSH
46637: LD_INT 2
46639: ARRAY
46640: PUSH
46641: LD_VAR 0 9
46645: LESS
46646: IFFALSE 46688
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46648: LD_ADDR_VAR 0 6
46652: PUSH
46653: LD_VAR 0 6
46657: PPUSH
46658: LD_VAR 0 6
46662: PUSH
46663: LD_INT 1
46665: PLUS
46666: PPUSH
46667: LD_VAR 0 7
46671: PUSH
46672: LD_VAR 0 9
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PPUSH
46681: CALL_OW 2
46685: ST_TO_ADDR
46686: GO 46768
// for j = 1 to result do
46688: LD_ADDR_VAR 0 8
46692: PUSH
46693: DOUBLE
46694: LD_INT 1
46696: DEC
46697: ST_TO_ADDR
46698: LD_VAR 0 6
46702: PUSH
46703: FOR_TO
46704: IFFALSE 46766
// begin if tmp < result [ j ] [ 2 ] then
46706: LD_VAR 0 9
46710: PUSH
46711: LD_VAR 0 6
46715: PUSH
46716: LD_VAR 0 8
46720: ARRAY
46721: PUSH
46722: LD_INT 2
46724: ARRAY
46725: LESS
46726: IFFALSE 46764
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46728: LD_ADDR_VAR 0 6
46732: PUSH
46733: LD_VAR 0 6
46737: PPUSH
46738: LD_VAR 0 8
46742: PPUSH
46743: LD_VAR 0 7
46747: PUSH
46748: LD_VAR 0 9
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PPUSH
46757: CALL_OW 2
46761: ST_TO_ADDR
// break ;
46762: GO 46766
// end ; end ;
46764: GO 46703
46766: POP
46767: POP
// end ; end ;
46768: GO 46567
46770: POP
46771: POP
// if result and not asc then
46772: LD_VAR 0 6
46776: PUSH
46777: LD_VAR 0 4
46781: NOT
46782: AND
46783: IFFALSE 46858
// begin tmp := result ;
46785: LD_ADDR_VAR 0 9
46789: PUSH
46790: LD_VAR 0 6
46794: ST_TO_ADDR
// for i = tmp downto 1 do
46795: LD_ADDR_VAR 0 7
46799: PUSH
46800: DOUBLE
46801: LD_VAR 0 9
46805: INC
46806: ST_TO_ADDR
46807: LD_INT 1
46809: PUSH
46810: FOR_DOWNTO
46811: IFFALSE 46856
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46813: LD_ADDR_VAR 0 6
46817: PUSH
46818: LD_VAR 0 6
46822: PPUSH
46823: LD_VAR 0 9
46827: PUSH
46828: LD_VAR 0 7
46832: MINUS
46833: PUSH
46834: LD_INT 1
46836: PLUS
46837: PPUSH
46838: LD_VAR 0 9
46842: PUSH
46843: LD_VAR 0 7
46847: ARRAY
46848: PPUSH
46849: CALL_OW 1
46853: ST_TO_ADDR
46854: GO 46810
46856: POP
46857: POP
// end ; tmp := [ ] ;
46858: LD_ADDR_VAR 0 9
46862: PUSH
46863: EMPTY
46864: ST_TO_ADDR
// if mode then
46865: LD_VAR 0 5
46869: IFFALSE 46938
// begin for i = 1 to result do
46871: LD_ADDR_VAR 0 7
46875: PUSH
46876: DOUBLE
46877: LD_INT 1
46879: DEC
46880: ST_TO_ADDR
46881: LD_VAR 0 6
46885: PUSH
46886: FOR_TO
46887: IFFALSE 46926
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46889: LD_ADDR_VAR 0 9
46893: PUSH
46894: LD_VAR 0 9
46898: PPUSH
46899: LD_VAR 0 7
46903: PPUSH
46904: LD_VAR 0 6
46908: PUSH
46909: LD_VAR 0 7
46913: ARRAY
46914: PUSH
46915: LD_INT 1
46917: ARRAY
46918: PPUSH
46919: CALL_OW 1
46923: ST_TO_ADDR
46924: GO 46886
46926: POP
46927: POP
// result := tmp ;
46928: LD_ADDR_VAR 0 6
46932: PUSH
46933: LD_VAR 0 9
46937: ST_TO_ADDR
// end ; end ;
46938: LD_VAR 0 6
46942: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46943: LD_INT 0
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46951: LD_ADDR_VAR 0 5
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// if not x or not y then
46973: LD_VAR 0 2
46977: NOT
46978: PUSH
46979: LD_VAR 0 3
46983: NOT
46984: OR
46985: IFFALSE 46989
// exit ;
46987: GO 48639
// if not range then
46989: LD_VAR 0 4
46993: NOT
46994: IFFALSE 47004
// range := 10 ;
46996: LD_ADDR_VAR 0 4
47000: PUSH
47001: LD_INT 10
47003: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47004: LD_ADDR_VAR 0 8
47008: PUSH
47009: LD_INT 81
47011: PUSH
47012: LD_VAR 0 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 92
47023: PUSH
47024: LD_VAR 0 2
47028: PUSH
47029: LD_VAR 0 3
47033: PUSH
47034: LD_VAR 0 4
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 3
47047: PUSH
47048: LD_INT 21
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: PPUSH
47067: CALL_OW 69
47071: ST_TO_ADDR
// if not tmp then
47072: LD_VAR 0 8
47076: NOT
47077: IFFALSE 47081
// exit ;
47079: GO 48639
// for i in tmp do
47081: LD_ADDR_VAR 0 6
47085: PUSH
47086: LD_VAR 0 8
47090: PUSH
47091: FOR_IN
47092: IFFALSE 48614
// begin points := [ 0 , 0 , 0 ] ;
47094: LD_ADDR_VAR 0 9
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// bpoints := 1 ;
47113: LD_ADDR_VAR 0 10
47117: PUSH
47118: LD_INT 1
47120: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47121: LD_VAR 0 6
47125: PPUSH
47126: CALL_OW 247
47130: PUSH
47131: LD_INT 1
47133: DOUBLE
47134: EQUAL
47135: IFTRUE 47139
47137: GO 47717
47139: POP
// begin if GetClass ( i ) = 1 then
47140: LD_VAR 0 6
47144: PPUSH
47145: CALL_OW 257
47149: PUSH
47150: LD_INT 1
47152: EQUAL
47153: IFFALSE 47174
// points := [ 10 , 5 , 3 ] ;
47155: LD_ADDR_VAR 0 9
47159: PUSH
47160: LD_INT 10
47162: PUSH
47163: LD_INT 5
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47174: LD_VAR 0 6
47178: PPUSH
47179: CALL_OW 257
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: LD_INT 4
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: IN
47198: IFFALSE 47219
// points := [ 3 , 2 , 1 ] ;
47200: LD_ADDR_VAR 0 9
47204: PUSH
47205: LD_INT 3
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: LIST
47218: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47219: LD_VAR 0 6
47223: PPUSH
47224: CALL_OW 257
47228: PUSH
47229: LD_INT 5
47231: EQUAL
47232: IFFALSE 47253
// points := [ 130 , 5 , 2 ] ;
47234: LD_ADDR_VAR 0 9
47238: PUSH
47239: LD_INT 130
47241: PUSH
47242: LD_INT 5
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: LIST
47252: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47253: LD_VAR 0 6
47257: PPUSH
47258: CALL_OW 257
47262: PUSH
47263: LD_INT 8
47265: EQUAL
47266: IFFALSE 47287
// points := [ 35 , 35 , 30 ] ;
47268: LD_ADDR_VAR 0 9
47272: PUSH
47273: LD_INT 35
47275: PUSH
47276: LD_INT 35
47278: PUSH
47279: LD_INT 30
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47287: LD_VAR 0 6
47291: PPUSH
47292: CALL_OW 257
47296: PUSH
47297: LD_INT 9
47299: EQUAL
47300: IFFALSE 47321
// points := [ 20 , 55 , 40 ] ;
47302: LD_ADDR_VAR 0 9
47306: PUSH
47307: LD_INT 20
47309: PUSH
47310: LD_INT 55
47312: PUSH
47313: LD_INT 40
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47321: LD_VAR 0 6
47325: PPUSH
47326: CALL_OW 257
47330: PUSH
47331: LD_INT 12
47333: PUSH
47334: LD_INT 16
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: IN
47341: IFFALSE 47362
// points := [ 5 , 3 , 2 ] ;
47343: LD_ADDR_VAR 0 9
47347: PUSH
47348: LD_INT 5
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47362: LD_VAR 0 6
47366: PPUSH
47367: CALL_OW 257
47371: PUSH
47372: LD_INT 17
47374: EQUAL
47375: IFFALSE 47396
// points := [ 100 , 50 , 75 ] ;
47377: LD_ADDR_VAR 0 9
47381: PUSH
47382: LD_INT 100
47384: PUSH
47385: LD_INT 50
47387: PUSH
47388: LD_INT 75
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: LIST
47395: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47396: LD_VAR 0 6
47400: PPUSH
47401: CALL_OW 257
47405: PUSH
47406: LD_INT 15
47408: EQUAL
47409: IFFALSE 47430
// points := [ 10 , 5 , 3 ] ;
47411: LD_ADDR_VAR 0 9
47415: PUSH
47416: LD_INT 10
47418: PUSH
47419: LD_INT 5
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47430: LD_VAR 0 6
47434: PPUSH
47435: CALL_OW 257
47439: PUSH
47440: LD_INT 14
47442: EQUAL
47443: IFFALSE 47464
// points := [ 10 , 0 , 0 ] ;
47445: LD_ADDR_VAR 0 9
47449: PUSH
47450: LD_INT 10
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47464: LD_VAR 0 6
47468: PPUSH
47469: CALL_OW 257
47473: PUSH
47474: LD_INT 11
47476: EQUAL
47477: IFFALSE 47498
// points := [ 30 , 10 , 5 ] ;
47479: LD_ADDR_VAR 0 9
47483: PUSH
47484: LD_INT 30
47486: PUSH
47487: LD_INT 10
47489: PUSH
47490: LD_INT 5
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47498: LD_VAR 0 1
47502: PPUSH
47503: LD_INT 5
47505: PPUSH
47506: CALL_OW 321
47510: PUSH
47511: LD_INT 2
47513: EQUAL
47514: IFFALSE 47531
// bpoints := bpoints * 1.8 ;
47516: LD_ADDR_VAR 0 10
47520: PUSH
47521: LD_VAR 0 10
47525: PUSH
47526: LD_REAL  1.80000000000000E+0000
47529: MUL
47530: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47531: LD_VAR 0 6
47535: PPUSH
47536: CALL_OW 257
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: LD_INT 4
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: IN
47559: PUSH
47560: LD_VAR 0 1
47564: PPUSH
47565: LD_INT 51
47567: PPUSH
47568: CALL_OW 321
47572: PUSH
47573: LD_INT 2
47575: EQUAL
47576: AND
47577: IFFALSE 47594
// bpoints := bpoints * 1.2 ;
47579: LD_ADDR_VAR 0 10
47583: PUSH
47584: LD_VAR 0 10
47588: PUSH
47589: LD_REAL  1.20000000000000E+0000
47592: MUL
47593: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47594: LD_VAR 0 6
47598: PPUSH
47599: CALL_OW 257
47603: PUSH
47604: LD_INT 5
47606: PUSH
47607: LD_INT 7
47609: PUSH
47610: LD_INT 9
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: IN
47618: PUSH
47619: LD_VAR 0 1
47623: PPUSH
47624: LD_INT 52
47626: PPUSH
47627: CALL_OW 321
47631: PUSH
47632: LD_INT 2
47634: EQUAL
47635: AND
47636: IFFALSE 47653
// bpoints := bpoints * 1.5 ;
47638: LD_ADDR_VAR 0 10
47642: PUSH
47643: LD_VAR 0 10
47647: PUSH
47648: LD_REAL  1.50000000000000E+0000
47651: MUL
47652: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47653: LD_VAR 0 1
47657: PPUSH
47658: LD_INT 66
47660: PPUSH
47661: CALL_OW 321
47665: PUSH
47666: LD_INT 2
47668: EQUAL
47669: IFFALSE 47686
// bpoints := bpoints * 1.1 ;
47671: LD_ADDR_VAR 0 10
47675: PUSH
47676: LD_VAR 0 10
47680: PUSH
47681: LD_REAL  1.10000000000000E+0000
47684: MUL
47685: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47686: LD_ADDR_VAR 0 10
47690: PUSH
47691: LD_VAR 0 10
47695: PUSH
47696: LD_VAR 0 6
47700: PPUSH
47701: LD_INT 1
47703: PPUSH
47704: CALL_OW 259
47708: PUSH
47709: LD_REAL  1.15000000000000E+0000
47712: MUL
47713: MUL
47714: ST_TO_ADDR
// end ; unit_vehicle :
47715: GO 48543
47717: LD_INT 2
47719: DOUBLE
47720: EQUAL
47721: IFTRUE 47725
47723: GO 48531
47725: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47726: LD_VAR 0 6
47730: PPUSH
47731: CALL_OW 264
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 42
47741: PUSH
47742: LD_INT 24
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: IN
47750: IFFALSE 47771
// points := [ 25 , 5 , 3 ] ;
47752: LD_ADDR_VAR 0 9
47756: PUSH
47757: LD_INT 25
47759: PUSH
47760: LD_INT 5
47762: PUSH
47763: LD_INT 3
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47771: LD_VAR 0 6
47775: PPUSH
47776: CALL_OW 264
47780: PUSH
47781: LD_INT 4
47783: PUSH
47784: LD_INT 43
47786: PUSH
47787: LD_INT 25
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: IN
47795: IFFALSE 47816
// points := [ 40 , 15 , 5 ] ;
47797: LD_ADDR_VAR 0 9
47801: PUSH
47802: LD_INT 40
47804: PUSH
47805: LD_INT 15
47807: PUSH
47808: LD_INT 5
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47816: LD_VAR 0 6
47820: PPUSH
47821: CALL_OW 264
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: LD_INT 23
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: IN
47836: IFFALSE 47857
// points := [ 7 , 25 , 8 ] ;
47838: LD_ADDR_VAR 0 9
47842: PUSH
47843: LD_INT 7
47845: PUSH
47846: LD_INT 25
47848: PUSH
47849: LD_INT 8
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47857: LD_VAR 0 6
47861: PPUSH
47862: CALL_OW 264
47866: PUSH
47867: LD_INT 5
47869: PUSH
47870: LD_INT 27
47872: PUSH
47873: LD_INT 44
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: IN
47881: IFFALSE 47902
// points := [ 14 , 50 , 16 ] ;
47883: LD_ADDR_VAR 0 9
47887: PUSH
47888: LD_INT 14
47890: PUSH
47891: LD_INT 50
47893: PUSH
47894: LD_INT 16
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47902: LD_VAR 0 6
47906: PPUSH
47907: CALL_OW 264
47911: PUSH
47912: LD_INT 6
47914: PUSH
47915: LD_INT 46
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: IN
47922: IFFALSE 47943
// points := [ 32 , 120 , 70 ] ;
47924: LD_ADDR_VAR 0 9
47928: PUSH
47929: LD_INT 32
47931: PUSH
47932: LD_INT 120
47934: PUSH
47935: LD_INT 70
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47943: LD_VAR 0 6
47947: PPUSH
47948: CALL_OW 264
47952: PUSH
47953: LD_INT 7
47955: PUSH
47956: LD_INT 28
47958: PUSH
47959: LD_INT 45
47961: PUSH
47962: LD_INT 92
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: IN
47971: IFFALSE 47992
// points := [ 35 , 20 , 45 ] ;
47973: LD_ADDR_VAR 0 9
47977: PUSH
47978: LD_INT 35
47980: PUSH
47981: LD_INT 20
47983: PUSH
47984: LD_INT 45
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47992: LD_VAR 0 6
47996: PPUSH
47997: CALL_OW 264
48001: PUSH
48002: LD_INT 47
48004: PUSH
48005: EMPTY
48006: LIST
48007: IN
48008: IFFALSE 48029
// points := [ 67 , 45 , 75 ] ;
48010: LD_ADDR_VAR 0 9
48014: PUSH
48015: LD_INT 67
48017: PUSH
48018: LD_INT 45
48020: PUSH
48021: LD_INT 75
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48029: LD_VAR 0 6
48033: PPUSH
48034: CALL_OW 264
48038: PUSH
48039: LD_INT 26
48041: PUSH
48042: EMPTY
48043: LIST
48044: IN
48045: IFFALSE 48066
// points := [ 120 , 30 , 80 ] ;
48047: LD_ADDR_VAR 0 9
48051: PUSH
48052: LD_INT 120
48054: PUSH
48055: LD_INT 30
48057: PUSH
48058: LD_INT 80
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48066: LD_VAR 0 6
48070: PPUSH
48071: CALL_OW 264
48075: PUSH
48076: LD_INT 22
48078: PUSH
48079: EMPTY
48080: LIST
48081: IN
48082: IFFALSE 48103
// points := [ 40 , 1 , 1 ] ;
48084: LD_ADDR_VAR 0 9
48088: PUSH
48089: LD_INT 40
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48103: LD_VAR 0 6
48107: PPUSH
48108: CALL_OW 264
48112: PUSH
48113: LD_INT 29
48115: PUSH
48116: EMPTY
48117: LIST
48118: IN
48119: IFFALSE 48140
// points := [ 70 , 200 , 400 ] ;
48121: LD_ADDR_VAR 0 9
48125: PUSH
48126: LD_INT 70
48128: PUSH
48129: LD_INT 200
48131: PUSH
48132: LD_INT 400
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48140: LD_VAR 0 6
48144: PPUSH
48145: CALL_OW 264
48149: PUSH
48150: LD_INT 14
48152: PUSH
48153: LD_INT 53
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: IN
48160: IFFALSE 48181
// points := [ 40 , 10 , 20 ] ;
48162: LD_ADDR_VAR 0 9
48166: PUSH
48167: LD_INT 40
48169: PUSH
48170: LD_INT 10
48172: PUSH
48173: LD_INT 20
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48181: LD_VAR 0 6
48185: PPUSH
48186: CALL_OW 264
48190: PUSH
48191: LD_INT 9
48193: PUSH
48194: EMPTY
48195: LIST
48196: IN
48197: IFFALSE 48218
// points := [ 5 , 70 , 20 ] ;
48199: LD_ADDR_VAR 0 9
48203: PUSH
48204: LD_INT 5
48206: PUSH
48207: LD_INT 70
48209: PUSH
48210: LD_INT 20
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48218: LD_VAR 0 6
48222: PPUSH
48223: CALL_OW 264
48227: PUSH
48228: LD_INT 10
48230: PUSH
48231: EMPTY
48232: LIST
48233: IN
48234: IFFALSE 48255
// points := [ 35 , 110 , 70 ] ;
48236: LD_ADDR_VAR 0 9
48240: PUSH
48241: LD_INT 35
48243: PUSH
48244: LD_INT 110
48246: PUSH
48247: LD_INT 70
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48255: LD_VAR 0 6
48259: PPUSH
48260: CALL_OW 265
48264: PUSH
48265: LD_INT 25
48267: EQUAL
48268: IFFALSE 48289
// points := [ 80 , 65 , 100 ] ;
48270: LD_ADDR_VAR 0 9
48274: PUSH
48275: LD_INT 80
48277: PUSH
48278: LD_INT 65
48280: PUSH
48281: LD_INT 100
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48289: LD_VAR 0 6
48293: PPUSH
48294: CALL_OW 263
48298: PUSH
48299: LD_INT 1
48301: EQUAL
48302: IFFALSE 48337
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48304: LD_ADDR_VAR 0 10
48308: PUSH
48309: LD_VAR 0 10
48313: PUSH
48314: LD_VAR 0 6
48318: PPUSH
48319: CALL_OW 311
48323: PPUSH
48324: LD_INT 3
48326: PPUSH
48327: CALL_OW 259
48331: PUSH
48332: LD_INT 4
48334: MUL
48335: MUL
48336: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48337: LD_VAR 0 6
48341: PPUSH
48342: CALL_OW 263
48346: PUSH
48347: LD_INT 2
48349: EQUAL
48350: IFFALSE 48401
// begin j := IsControledBy ( i ) ;
48352: LD_ADDR_VAR 0 7
48356: PUSH
48357: LD_VAR 0 6
48361: PPUSH
48362: CALL_OW 312
48366: ST_TO_ADDR
// if j then
48367: LD_VAR 0 7
48371: IFFALSE 48401
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48373: LD_ADDR_VAR 0 10
48377: PUSH
48378: LD_VAR 0 10
48382: PUSH
48383: LD_VAR 0 7
48387: PPUSH
48388: LD_INT 3
48390: PPUSH
48391: CALL_OW 259
48395: PUSH
48396: LD_INT 3
48398: MUL
48399: MUL
48400: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48401: LD_VAR 0 6
48405: PPUSH
48406: CALL_OW 264
48410: PUSH
48411: LD_INT 5
48413: PUSH
48414: LD_INT 6
48416: PUSH
48417: LD_INT 46
48419: PUSH
48420: LD_INT 44
48422: PUSH
48423: LD_INT 47
48425: PUSH
48426: LD_INT 45
48428: PUSH
48429: LD_INT 28
48431: PUSH
48432: LD_INT 7
48434: PUSH
48435: LD_INT 27
48437: PUSH
48438: LD_INT 29
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: IN
48453: PUSH
48454: LD_VAR 0 1
48458: PPUSH
48459: LD_INT 52
48461: PPUSH
48462: CALL_OW 321
48466: PUSH
48467: LD_INT 2
48469: EQUAL
48470: AND
48471: IFFALSE 48488
// bpoints := bpoints * 1.2 ;
48473: LD_ADDR_VAR 0 10
48477: PUSH
48478: LD_VAR 0 10
48482: PUSH
48483: LD_REAL  1.20000000000000E+0000
48486: MUL
48487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48488: LD_VAR 0 6
48492: PPUSH
48493: CALL_OW 264
48497: PUSH
48498: LD_INT 6
48500: PUSH
48501: LD_INT 46
48503: PUSH
48504: LD_INT 47
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: IN
48512: IFFALSE 48529
// bpoints := bpoints * 1.2 ;
48514: LD_ADDR_VAR 0 10
48518: PUSH
48519: LD_VAR 0 10
48523: PUSH
48524: LD_REAL  1.20000000000000E+0000
48527: MUL
48528: ST_TO_ADDR
// end ; unit_building :
48529: GO 48543
48531: LD_INT 3
48533: DOUBLE
48534: EQUAL
48535: IFTRUE 48539
48537: GO 48542
48539: POP
// ; end ;
48540: GO 48543
48542: POP
// for j = 1 to 3 do
48543: LD_ADDR_VAR 0 7
48547: PUSH
48548: DOUBLE
48549: LD_INT 1
48551: DEC
48552: ST_TO_ADDR
48553: LD_INT 3
48555: PUSH
48556: FOR_TO
48557: IFFALSE 48610
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48559: LD_ADDR_VAR 0 5
48563: PUSH
48564: LD_VAR 0 5
48568: PPUSH
48569: LD_VAR 0 7
48573: PPUSH
48574: LD_VAR 0 5
48578: PUSH
48579: LD_VAR 0 7
48583: ARRAY
48584: PUSH
48585: LD_VAR 0 9
48589: PUSH
48590: LD_VAR 0 7
48594: ARRAY
48595: PUSH
48596: LD_VAR 0 10
48600: MUL
48601: PLUS
48602: PPUSH
48603: CALL_OW 1
48607: ST_TO_ADDR
48608: GO 48556
48610: POP
48611: POP
// end ;
48612: GO 47091
48614: POP
48615: POP
// result := Replace ( result , 4 , tmp ) ;
48616: LD_ADDR_VAR 0 5
48620: PUSH
48621: LD_VAR 0 5
48625: PPUSH
48626: LD_INT 4
48628: PPUSH
48629: LD_VAR 0 8
48633: PPUSH
48634: CALL_OW 1
48638: ST_TO_ADDR
// end ;
48639: LD_VAR 0 5
48643: RET
// export function DangerAtRange ( unit , range ) ; begin
48644: LD_INT 0
48646: PPUSH
// if not unit then
48647: LD_VAR 0 1
48651: NOT
48652: IFFALSE 48656
// exit ;
48654: GO 48701
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48656: LD_ADDR_VAR 0 3
48660: PUSH
48661: LD_VAR 0 1
48665: PPUSH
48666: CALL_OW 255
48670: PPUSH
48671: LD_VAR 0 1
48675: PPUSH
48676: CALL_OW 250
48680: PPUSH
48681: LD_VAR 0 1
48685: PPUSH
48686: CALL_OW 251
48690: PPUSH
48691: LD_VAR 0 2
48695: PPUSH
48696: CALL 46943 0 4
48700: ST_TO_ADDR
// end ;
48701: LD_VAR 0 3
48705: RET
// export function DangerInArea ( side , area ) ; begin
48706: LD_INT 0
48708: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48709: LD_ADDR_VAR 0 3
48713: PUSH
48714: LD_VAR 0 2
48718: PPUSH
48719: LD_INT 81
48721: PUSH
48722: LD_VAR 0 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PPUSH
48731: CALL_OW 70
48735: ST_TO_ADDR
// end ;
48736: LD_VAR 0 3
48740: RET
// export function IsExtension ( b ) ; begin
48741: LD_INT 0
48743: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48744: LD_ADDR_VAR 0 2
48748: PUSH
48749: LD_VAR 0 1
48753: PUSH
48754: LD_INT 23
48756: PUSH
48757: LD_INT 20
48759: PUSH
48760: LD_INT 22
48762: PUSH
48763: LD_INT 17
48765: PUSH
48766: LD_INT 24
48768: PUSH
48769: LD_INT 21
48771: PUSH
48772: LD_INT 19
48774: PUSH
48775: LD_INT 16
48777: PUSH
48778: LD_INT 25
48780: PUSH
48781: LD_INT 18
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: IN
48796: ST_TO_ADDR
// end ;
48797: LD_VAR 0 2
48801: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48802: LD_INT 0
48804: PPUSH
48805: PPUSH
48806: PPUSH
// result := [ ] ;
48807: LD_ADDR_VAR 0 4
48811: PUSH
48812: EMPTY
48813: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48814: LD_ADDR_VAR 0 5
48818: PUSH
48819: LD_VAR 0 2
48823: PPUSH
48824: LD_INT 21
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PPUSH
48834: CALL_OW 70
48838: ST_TO_ADDR
// if not tmp then
48839: LD_VAR 0 5
48843: NOT
48844: IFFALSE 48848
// exit ;
48846: GO 48912
// if checkLink then
48848: LD_VAR 0 3
48852: IFFALSE 48902
// begin for i in tmp do
48854: LD_ADDR_VAR 0 6
48858: PUSH
48859: LD_VAR 0 5
48863: PUSH
48864: FOR_IN
48865: IFFALSE 48900
// if GetBase ( i ) <> base then
48867: LD_VAR 0 6
48871: PPUSH
48872: CALL_OW 274
48876: PUSH
48877: LD_VAR 0 1
48881: NONEQUAL
48882: IFFALSE 48898
// ComLinkToBase ( base , i ) ;
48884: LD_VAR 0 1
48888: PPUSH
48889: LD_VAR 0 6
48893: PPUSH
48894: CALL_OW 169
48898: GO 48864
48900: POP
48901: POP
// end ; result := tmp ;
48902: LD_ADDR_VAR 0 4
48906: PUSH
48907: LD_VAR 0 5
48911: ST_TO_ADDR
// end ;
48912: LD_VAR 0 4
48916: RET
// export function ComComplete ( units , b ) ; var i ; begin
48917: LD_INT 0
48919: PPUSH
48920: PPUSH
// if not units then
48921: LD_VAR 0 1
48925: NOT
48926: IFFALSE 48930
// exit ;
48928: GO 49020
// for i in units do
48930: LD_ADDR_VAR 0 4
48934: PUSH
48935: LD_VAR 0 1
48939: PUSH
48940: FOR_IN
48941: IFFALSE 49018
// if BuildingStatus ( b ) = bs_build then
48943: LD_VAR 0 2
48947: PPUSH
48948: CALL_OW 461
48952: PUSH
48953: LD_INT 1
48955: EQUAL
48956: IFFALSE 49016
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48958: LD_VAR 0 4
48962: PPUSH
48963: LD_STRING h
48965: PUSH
48966: LD_VAR 0 2
48970: PPUSH
48971: CALL_OW 250
48975: PUSH
48976: LD_VAR 0 2
48980: PPUSH
48981: CALL_OW 251
48985: PUSH
48986: LD_VAR 0 2
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: PPUSH
49012: CALL_OW 446
49016: GO 48940
49018: POP
49019: POP
// end ;
49020: LD_VAR 0 3
49024: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49025: LD_INT 0
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49033: LD_VAR 0 1
49037: NOT
49038: PUSH
49039: LD_VAR 0 1
49043: PPUSH
49044: CALL_OW 263
49048: PUSH
49049: LD_INT 2
49051: NONEQUAL
49052: OR
49053: IFFALSE 49057
// exit ;
49055: GO 49373
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49057: LD_ADDR_VAR 0 6
49061: PUSH
49062: LD_INT 22
49064: PUSH
49065: LD_VAR 0 1
49069: PPUSH
49070: CALL_OW 255
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 30
49084: PUSH
49085: LD_INT 36
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 34
49094: PUSH
49095: LD_INT 31
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PPUSH
49111: CALL_OW 69
49115: ST_TO_ADDR
// if not tmp then
49116: LD_VAR 0 6
49120: NOT
49121: IFFALSE 49125
// exit ;
49123: GO 49373
// result := [ ] ;
49125: LD_ADDR_VAR 0 2
49129: PUSH
49130: EMPTY
49131: ST_TO_ADDR
// for i in tmp do
49132: LD_ADDR_VAR 0 3
49136: PUSH
49137: LD_VAR 0 6
49141: PUSH
49142: FOR_IN
49143: IFFALSE 49214
// begin t := UnitsInside ( i ) ;
49145: LD_ADDR_VAR 0 4
49149: PUSH
49150: LD_VAR 0 3
49154: PPUSH
49155: CALL_OW 313
49159: ST_TO_ADDR
// if t then
49160: LD_VAR 0 4
49164: IFFALSE 49212
// for j in t do
49166: LD_ADDR_VAR 0 7
49170: PUSH
49171: LD_VAR 0 4
49175: PUSH
49176: FOR_IN
49177: IFFALSE 49210
// result := Replace ( result , result + 1 , j ) ;
49179: LD_ADDR_VAR 0 2
49183: PUSH
49184: LD_VAR 0 2
49188: PPUSH
49189: LD_VAR 0 2
49193: PUSH
49194: LD_INT 1
49196: PLUS
49197: PPUSH
49198: LD_VAR 0 7
49202: PPUSH
49203: CALL_OW 1
49207: ST_TO_ADDR
49208: GO 49176
49210: POP
49211: POP
// end ;
49212: GO 49142
49214: POP
49215: POP
// if not result then
49216: LD_VAR 0 2
49220: NOT
49221: IFFALSE 49225
// exit ;
49223: GO 49373
// mech := result [ 1 ] ;
49225: LD_ADDR_VAR 0 5
49229: PUSH
49230: LD_VAR 0 2
49234: PUSH
49235: LD_INT 1
49237: ARRAY
49238: ST_TO_ADDR
// if result > 1 then
49239: LD_VAR 0 2
49243: PUSH
49244: LD_INT 1
49246: GREATER
49247: IFFALSE 49359
// begin for i = 2 to result do
49249: LD_ADDR_VAR 0 3
49253: PUSH
49254: DOUBLE
49255: LD_INT 2
49257: DEC
49258: ST_TO_ADDR
49259: LD_VAR 0 2
49263: PUSH
49264: FOR_TO
49265: IFFALSE 49357
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49267: LD_ADDR_VAR 0 4
49271: PUSH
49272: LD_VAR 0 2
49276: PUSH
49277: LD_VAR 0 3
49281: ARRAY
49282: PPUSH
49283: LD_INT 3
49285: PPUSH
49286: CALL_OW 259
49290: PUSH
49291: LD_VAR 0 2
49295: PUSH
49296: LD_VAR 0 3
49300: ARRAY
49301: PPUSH
49302: CALL_OW 432
49306: MINUS
49307: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49308: LD_VAR 0 4
49312: PUSH
49313: LD_VAR 0 5
49317: PPUSH
49318: LD_INT 3
49320: PPUSH
49321: CALL_OW 259
49325: PUSH
49326: LD_VAR 0 5
49330: PPUSH
49331: CALL_OW 432
49335: MINUS
49336: GREATEREQUAL
49337: IFFALSE 49355
// mech := result [ i ] ;
49339: LD_ADDR_VAR 0 5
49343: PUSH
49344: LD_VAR 0 2
49348: PUSH
49349: LD_VAR 0 3
49353: ARRAY
49354: ST_TO_ADDR
// end ;
49355: GO 49264
49357: POP
49358: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49359: LD_VAR 0 1
49363: PPUSH
49364: LD_VAR 0 5
49368: PPUSH
49369: CALL_OW 135
// end ;
49373: LD_VAR 0 2
49377: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49378: LD_INT 0
49380: PPUSH
49381: PPUSH
49382: PPUSH
49383: PPUSH
49384: PPUSH
49385: PPUSH
49386: PPUSH
49387: PPUSH
49388: PPUSH
49389: PPUSH
49390: PPUSH
49391: PPUSH
49392: PPUSH
// result := [ ] ;
49393: LD_ADDR_VAR 0 7
49397: PUSH
49398: EMPTY
49399: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49400: LD_VAR 0 1
49404: PPUSH
49405: CALL_OW 266
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: IN
49420: NOT
49421: IFFALSE 49425
// exit ;
49423: GO 51059
// if name then
49425: LD_VAR 0 3
49429: IFFALSE 49445
// SetBName ( base_dep , name ) ;
49431: LD_VAR 0 1
49435: PPUSH
49436: LD_VAR 0 3
49440: PPUSH
49441: CALL_OW 500
// base := GetBase ( base_dep ) ;
49445: LD_ADDR_VAR 0 15
49449: PUSH
49450: LD_VAR 0 1
49454: PPUSH
49455: CALL_OW 274
49459: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49460: LD_ADDR_VAR 0 16
49464: PUSH
49465: LD_VAR 0 1
49469: PPUSH
49470: CALL_OW 255
49474: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49475: LD_ADDR_VAR 0 17
49479: PUSH
49480: LD_VAR 0 1
49484: PPUSH
49485: CALL_OW 248
49489: ST_TO_ADDR
// if sources then
49490: LD_VAR 0 5
49494: IFFALSE 49541
// for i = 1 to 3 do
49496: LD_ADDR_VAR 0 8
49500: PUSH
49501: DOUBLE
49502: LD_INT 1
49504: DEC
49505: ST_TO_ADDR
49506: LD_INT 3
49508: PUSH
49509: FOR_TO
49510: IFFALSE 49539
// AddResourceType ( base , i , sources [ i ] ) ;
49512: LD_VAR 0 15
49516: PPUSH
49517: LD_VAR 0 8
49521: PPUSH
49522: LD_VAR 0 5
49526: PUSH
49527: LD_VAR 0 8
49531: ARRAY
49532: PPUSH
49533: CALL_OW 276
49537: GO 49509
49539: POP
49540: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49541: LD_ADDR_VAR 0 18
49545: PUSH
49546: LD_VAR 0 15
49550: PPUSH
49551: LD_VAR 0 2
49555: PPUSH
49556: LD_INT 1
49558: PPUSH
49559: CALL 48802 0 3
49563: ST_TO_ADDR
// InitHc ;
49564: CALL_OW 19
// InitUc ;
49568: CALL_OW 18
// uc_side := side ;
49572: LD_ADDR_OWVAR 20
49576: PUSH
49577: LD_VAR 0 16
49581: ST_TO_ADDR
// uc_nation := nation ;
49582: LD_ADDR_OWVAR 21
49586: PUSH
49587: LD_VAR 0 17
49591: ST_TO_ADDR
// if buildings then
49592: LD_VAR 0 18
49596: IFFALSE 50918
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49598: LD_ADDR_VAR 0 19
49602: PUSH
49603: LD_VAR 0 18
49607: PPUSH
49608: LD_INT 2
49610: PUSH
49611: LD_INT 30
49613: PUSH
49614: LD_INT 29
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 30
49623: PUSH
49624: LD_INT 30
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: LIST
49635: PPUSH
49636: CALL_OW 72
49640: ST_TO_ADDR
// if tmp then
49641: LD_VAR 0 19
49645: IFFALSE 49693
// for i in tmp do
49647: LD_ADDR_VAR 0 8
49651: PUSH
49652: LD_VAR 0 19
49656: PUSH
49657: FOR_IN
49658: IFFALSE 49691
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49660: LD_VAR 0 8
49664: PPUSH
49665: CALL_OW 250
49669: PPUSH
49670: LD_VAR 0 8
49674: PPUSH
49675: CALL_OW 251
49679: PPUSH
49680: LD_VAR 0 16
49684: PPUSH
49685: CALL_OW 441
49689: GO 49657
49691: POP
49692: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49693: LD_VAR 0 18
49697: PPUSH
49698: LD_INT 2
49700: PUSH
49701: LD_INT 30
49703: PUSH
49704: LD_INT 32
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 30
49713: PUSH
49714: LD_INT 33
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: LIST
49725: PPUSH
49726: CALL_OW 72
49730: IFFALSE 49818
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49732: LD_ADDR_VAR 0 8
49736: PUSH
49737: LD_VAR 0 18
49741: PPUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 30
49747: PUSH
49748: LD_INT 32
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 30
49757: PUSH
49758: LD_INT 33
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: PPUSH
49770: CALL_OW 72
49774: PUSH
49775: FOR_IN
49776: IFFALSE 49816
// begin if not GetBWeapon ( i ) then
49778: LD_VAR 0 8
49782: PPUSH
49783: CALL_OW 269
49787: NOT
49788: IFFALSE 49814
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49790: LD_VAR 0 8
49794: PPUSH
49795: LD_VAR 0 8
49799: PPUSH
49800: LD_VAR 0 2
49804: PPUSH
49805: CALL 51064 0 2
49809: PPUSH
49810: CALL_OW 431
// end ;
49814: GO 49775
49816: POP
49817: POP
// end ; for i = 1 to personel do
49818: LD_ADDR_VAR 0 8
49822: PUSH
49823: DOUBLE
49824: LD_INT 1
49826: DEC
49827: ST_TO_ADDR
49828: LD_VAR 0 6
49832: PUSH
49833: FOR_TO
49834: IFFALSE 50898
// begin if i > 4 then
49836: LD_VAR 0 8
49840: PUSH
49841: LD_INT 4
49843: GREATER
49844: IFFALSE 49848
// break ;
49846: GO 50898
// case i of 1 :
49848: LD_VAR 0 8
49852: PUSH
49853: LD_INT 1
49855: DOUBLE
49856: EQUAL
49857: IFTRUE 49861
49859: GO 49941
49861: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49862: LD_ADDR_VAR 0 12
49866: PUSH
49867: LD_VAR 0 18
49871: PPUSH
49872: LD_INT 22
49874: PUSH
49875: LD_VAR 0 16
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 58
49886: PUSH
49887: EMPTY
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 30
49895: PUSH
49896: LD_INT 32
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 30
49905: PUSH
49906: LD_INT 4
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 30
49915: PUSH
49916: LD_INT 5
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: LIST
49933: PPUSH
49934: CALL_OW 72
49938: ST_TO_ADDR
49939: GO 50163
49941: LD_INT 2
49943: DOUBLE
49944: EQUAL
49945: IFTRUE 49949
49947: GO 50011
49949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49950: LD_ADDR_VAR 0 12
49954: PUSH
49955: LD_VAR 0 18
49959: PPUSH
49960: LD_INT 22
49962: PUSH
49963: LD_VAR 0 16
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 30
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 30
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PPUSH
50004: CALL_OW 72
50008: ST_TO_ADDR
50009: GO 50163
50011: LD_INT 3
50013: DOUBLE
50014: EQUAL
50015: IFTRUE 50019
50017: GO 50081
50019: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50020: LD_ADDR_VAR 0 12
50024: PUSH
50025: LD_VAR 0 18
50029: PPUSH
50030: LD_INT 22
50032: PUSH
50033: LD_VAR 0 16
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: LD_INT 30
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 30
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PPUSH
50074: CALL_OW 72
50078: ST_TO_ADDR
50079: GO 50163
50081: LD_INT 4
50083: DOUBLE
50084: EQUAL
50085: IFTRUE 50089
50087: GO 50162
50089: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50090: LD_ADDR_VAR 0 12
50094: PUSH
50095: LD_VAR 0 18
50099: PPUSH
50100: LD_INT 22
50102: PUSH
50103: LD_VAR 0 16
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 30
50117: PUSH
50118: LD_INT 6
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 30
50127: PUSH
50128: LD_INT 7
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 30
50137: PUSH
50138: LD_INT 8
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PPUSH
50155: CALL_OW 72
50159: ST_TO_ADDR
50160: GO 50163
50162: POP
// if i = 1 then
50163: LD_VAR 0 8
50167: PUSH
50168: LD_INT 1
50170: EQUAL
50171: IFFALSE 50282
// begin tmp := [ ] ;
50173: LD_ADDR_VAR 0 19
50177: PUSH
50178: EMPTY
50179: ST_TO_ADDR
// for j in f do
50180: LD_ADDR_VAR 0 9
50184: PUSH
50185: LD_VAR 0 12
50189: PUSH
50190: FOR_IN
50191: IFFALSE 50264
// if GetBType ( j ) = b_bunker then
50193: LD_VAR 0 9
50197: PPUSH
50198: CALL_OW 266
50202: PUSH
50203: LD_INT 32
50205: EQUAL
50206: IFFALSE 50233
// tmp := Insert ( tmp , 1 , j ) else
50208: LD_ADDR_VAR 0 19
50212: PUSH
50213: LD_VAR 0 19
50217: PPUSH
50218: LD_INT 1
50220: PPUSH
50221: LD_VAR 0 9
50225: PPUSH
50226: CALL_OW 2
50230: ST_TO_ADDR
50231: GO 50262
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50233: LD_ADDR_VAR 0 19
50237: PUSH
50238: LD_VAR 0 19
50242: PPUSH
50243: LD_VAR 0 19
50247: PUSH
50248: LD_INT 1
50250: PLUS
50251: PPUSH
50252: LD_VAR 0 9
50256: PPUSH
50257: CALL_OW 2
50261: ST_TO_ADDR
50262: GO 50190
50264: POP
50265: POP
// if tmp then
50266: LD_VAR 0 19
50270: IFFALSE 50282
// f := tmp ;
50272: LD_ADDR_VAR 0 12
50276: PUSH
50277: LD_VAR 0 19
50281: ST_TO_ADDR
// end ; x := personel [ i ] ;
50282: LD_ADDR_VAR 0 13
50286: PUSH
50287: LD_VAR 0 6
50291: PUSH
50292: LD_VAR 0 8
50296: ARRAY
50297: ST_TO_ADDR
// if x = - 1 then
50298: LD_VAR 0 13
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: EQUAL
50307: IFFALSE 50516
// begin for j in f do
50309: LD_ADDR_VAR 0 9
50313: PUSH
50314: LD_VAR 0 12
50318: PUSH
50319: FOR_IN
50320: IFFALSE 50512
// repeat InitHc ;
50322: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50326: LD_VAR 0 9
50330: PPUSH
50331: CALL_OW 266
50335: PUSH
50336: LD_INT 5
50338: EQUAL
50339: IFFALSE 50409
// begin if UnitsInside ( j ) < 3 then
50341: LD_VAR 0 9
50345: PPUSH
50346: CALL_OW 313
50350: PUSH
50351: LD_INT 3
50353: LESS
50354: IFFALSE 50390
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50356: LD_INT 0
50358: PPUSH
50359: LD_INT 5
50361: PUSH
50362: LD_INT 8
50364: PUSH
50365: LD_INT 9
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: PUSH
50373: LD_VAR 0 17
50377: ARRAY
50378: PPUSH
50379: LD_VAR 0 4
50383: PPUSH
50384: CALL_OW 380
50388: GO 50407
// PrepareHuman ( false , i , skill ) ;
50390: LD_INT 0
50392: PPUSH
50393: LD_VAR 0 8
50397: PPUSH
50398: LD_VAR 0 4
50402: PPUSH
50403: CALL_OW 380
// end else
50407: GO 50426
// PrepareHuman ( false , i , skill ) ;
50409: LD_INT 0
50411: PPUSH
50412: LD_VAR 0 8
50416: PPUSH
50417: LD_VAR 0 4
50421: PPUSH
50422: CALL_OW 380
// un := CreateHuman ;
50426: LD_ADDR_VAR 0 14
50430: PUSH
50431: CALL_OW 44
50435: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50436: LD_ADDR_VAR 0 7
50440: PUSH
50441: LD_VAR 0 7
50445: PPUSH
50446: LD_INT 1
50448: PPUSH
50449: LD_VAR 0 14
50453: PPUSH
50454: CALL_OW 2
50458: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50459: LD_VAR 0 14
50463: PPUSH
50464: LD_VAR 0 9
50468: PPUSH
50469: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50473: LD_VAR 0 9
50477: PPUSH
50478: CALL_OW 313
50482: PUSH
50483: LD_INT 6
50485: EQUAL
50486: PUSH
50487: LD_VAR 0 9
50491: PPUSH
50492: CALL_OW 266
50496: PUSH
50497: LD_INT 32
50499: PUSH
50500: LD_INT 31
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: IN
50507: OR
50508: IFFALSE 50322
50510: GO 50319
50512: POP
50513: POP
// end else
50514: GO 50896
// for j = 1 to x do
50516: LD_ADDR_VAR 0 9
50520: PUSH
50521: DOUBLE
50522: LD_INT 1
50524: DEC
50525: ST_TO_ADDR
50526: LD_VAR 0 13
50530: PUSH
50531: FOR_TO
50532: IFFALSE 50894
// begin InitHc ;
50534: CALL_OW 19
// if not f then
50538: LD_VAR 0 12
50542: NOT
50543: IFFALSE 50632
// begin PrepareHuman ( false , i , skill ) ;
50545: LD_INT 0
50547: PPUSH
50548: LD_VAR 0 8
50552: PPUSH
50553: LD_VAR 0 4
50557: PPUSH
50558: CALL_OW 380
// un := CreateHuman ;
50562: LD_ADDR_VAR 0 14
50566: PUSH
50567: CALL_OW 44
50571: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50572: LD_ADDR_VAR 0 7
50576: PUSH
50577: LD_VAR 0 7
50581: PPUSH
50582: LD_INT 1
50584: PPUSH
50585: LD_VAR 0 14
50589: PPUSH
50590: CALL_OW 2
50594: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50595: LD_VAR 0 14
50599: PPUSH
50600: LD_VAR 0 1
50604: PPUSH
50605: CALL_OW 250
50609: PPUSH
50610: LD_VAR 0 1
50614: PPUSH
50615: CALL_OW 251
50619: PPUSH
50620: LD_INT 10
50622: PPUSH
50623: LD_INT 0
50625: PPUSH
50626: CALL_OW 50
// continue ;
50630: GO 50531
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50632: LD_VAR 0 12
50636: PUSH
50637: LD_INT 1
50639: ARRAY
50640: PPUSH
50641: CALL_OW 313
50645: PUSH
50646: LD_VAR 0 12
50650: PUSH
50651: LD_INT 1
50653: ARRAY
50654: PPUSH
50655: CALL_OW 266
50659: PUSH
50660: LD_INT 32
50662: PUSH
50663: LD_INT 31
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: IN
50670: AND
50671: PUSH
50672: LD_VAR 0 12
50676: PUSH
50677: LD_INT 1
50679: ARRAY
50680: PPUSH
50681: CALL_OW 313
50685: PUSH
50686: LD_INT 6
50688: EQUAL
50689: OR
50690: IFFALSE 50710
// f := Delete ( f , 1 ) ;
50692: LD_ADDR_VAR 0 12
50696: PUSH
50697: LD_VAR 0 12
50701: PPUSH
50702: LD_INT 1
50704: PPUSH
50705: CALL_OW 3
50709: ST_TO_ADDR
// if not f then
50710: LD_VAR 0 12
50714: NOT
50715: IFFALSE 50733
// begin x := x + 2 ;
50717: LD_ADDR_VAR 0 13
50721: PUSH
50722: LD_VAR 0 13
50726: PUSH
50727: LD_INT 2
50729: PLUS
50730: ST_TO_ADDR
// continue ;
50731: GO 50531
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50733: LD_VAR 0 12
50737: PUSH
50738: LD_INT 1
50740: ARRAY
50741: PPUSH
50742: CALL_OW 266
50746: PUSH
50747: LD_INT 5
50749: EQUAL
50750: IFFALSE 50824
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50752: LD_VAR 0 12
50756: PUSH
50757: LD_INT 1
50759: ARRAY
50760: PPUSH
50761: CALL_OW 313
50765: PUSH
50766: LD_INT 3
50768: LESS
50769: IFFALSE 50805
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50771: LD_INT 0
50773: PPUSH
50774: LD_INT 5
50776: PUSH
50777: LD_INT 8
50779: PUSH
50780: LD_INT 9
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: LIST
50787: PUSH
50788: LD_VAR 0 17
50792: ARRAY
50793: PPUSH
50794: LD_VAR 0 4
50798: PPUSH
50799: CALL_OW 380
50803: GO 50822
// PrepareHuman ( false , i , skill ) ;
50805: LD_INT 0
50807: PPUSH
50808: LD_VAR 0 8
50812: PPUSH
50813: LD_VAR 0 4
50817: PPUSH
50818: CALL_OW 380
// end else
50822: GO 50841
// PrepareHuman ( false , i , skill ) ;
50824: LD_INT 0
50826: PPUSH
50827: LD_VAR 0 8
50831: PPUSH
50832: LD_VAR 0 4
50836: PPUSH
50837: CALL_OW 380
// un := CreateHuman ;
50841: LD_ADDR_VAR 0 14
50845: PUSH
50846: CALL_OW 44
50850: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50851: LD_ADDR_VAR 0 7
50855: PUSH
50856: LD_VAR 0 7
50860: PPUSH
50861: LD_INT 1
50863: PPUSH
50864: LD_VAR 0 14
50868: PPUSH
50869: CALL_OW 2
50873: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50874: LD_VAR 0 14
50878: PPUSH
50879: LD_VAR 0 12
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: PPUSH
50888: CALL_OW 52
// end ;
50892: GO 50531
50894: POP
50895: POP
// end ;
50896: GO 49833
50898: POP
50899: POP
// result := result ^ buildings ;
50900: LD_ADDR_VAR 0 7
50904: PUSH
50905: LD_VAR 0 7
50909: PUSH
50910: LD_VAR 0 18
50914: ADD
50915: ST_TO_ADDR
// end else
50916: GO 51059
// begin for i = 1 to personel do
50918: LD_ADDR_VAR 0 8
50922: PUSH
50923: DOUBLE
50924: LD_INT 1
50926: DEC
50927: ST_TO_ADDR
50928: LD_VAR 0 6
50932: PUSH
50933: FOR_TO
50934: IFFALSE 51057
// begin if i > 4 then
50936: LD_VAR 0 8
50940: PUSH
50941: LD_INT 4
50943: GREATER
50944: IFFALSE 50948
// break ;
50946: GO 51057
// x := personel [ i ] ;
50948: LD_ADDR_VAR 0 13
50952: PUSH
50953: LD_VAR 0 6
50957: PUSH
50958: LD_VAR 0 8
50962: ARRAY
50963: ST_TO_ADDR
// if x = - 1 then
50964: LD_VAR 0 13
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: EQUAL
50973: IFFALSE 50977
// continue ;
50975: GO 50933
// PrepareHuman ( false , i , skill ) ;
50977: LD_INT 0
50979: PPUSH
50980: LD_VAR 0 8
50984: PPUSH
50985: LD_VAR 0 4
50989: PPUSH
50990: CALL_OW 380
// un := CreateHuman ;
50994: LD_ADDR_VAR 0 14
50998: PUSH
50999: CALL_OW 44
51003: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51004: LD_VAR 0 14
51008: PPUSH
51009: LD_VAR 0 1
51013: PPUSH
51014: CALL_OW 250
51018: PPUSH
51019: LD_VAR 0 1
51023: PPUSH
51024: CALL_OW 251
51028: PPUSH
51029: LD_INT 10
51031: PPUSH
51032: LD_INT 0
51034: PPUSH
51035: CALL_OW 50
// result := result ^ un ;
51039: LD_ADDR_VAR 0 7
51043: PUSH
51044: LD_VAR 0 7
51048: PUSH
51049: LD_VAR 0 14
51053: ADD
51054: ST_TO_ADDR
// end ;
51055: GO 50933
51057: POP
51058: POP
// end ; end ;
51059: LD_VAR 0 7
51063: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51064: LD_INT 0
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
// result := false ;
51082: LD_ADDR_VAR 0 3
51086: PUSH
51087: LD_INT 0
51089: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51090: LD_VAR 0 1
51094: NOT
51095: PUSH
51096: LD_VAR 0 1
51100: PPUSH
51101: CALL_OW 266
51105: PUSH
51106: LD_INT 32
51108: PUSH
51109: LD_INT 33
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: IN
51116: NOT
51117: OR
51118: IFFALSE 51122
// exit ;
51120: GO 52231
// nat := GetNation ( tower ) ;
51122: LD_ADDR_VAR 0 12
51126: PUSH
51127: LD_VAR 0 1
51131: PPUSH
51132: CALL_OW 248
51136: ST_TO_ADDR
// side := GetSide ( tower ) ;
51137: LD_ADDR_VAR 0 16
51141: PUSH
51142: LD_VAR 0 1
51146: PPUSH
51147: CALL_OW 255
51151: ST_TO_ADDR
// x := GetX ( tower ) ;
51152: LD_ADDR_VAR 0 10
51156: PUSH
51157: LD_VAR 0 1
51161: PPUSH
51162: CALL_OW 250
51166: ST_TO_ADDR
// y := GetY ( tower ) ;
51167: LD_ADDR_VAR 0 11
51171: PUSH
51172: LD_VAR 0 1
51176: PPUSH
51177: CALL_OW 251
51181: ST_TO_ADDR
// if not x or not y then
51182: LD_VAR 0 10
51186: NOT
51187: PUSH
51188: LD_VAR 0 11
51192: NOT
51193: OR
51194: IFFALSE 51198
// exit ;
51196: GO 52231
// weapon := 0 ;
51198: LD_ADDR_VAR 0 18
51202: PUSH
51203: LD_INT 0
51205: ST_TO_ADDR
// fac_list := [ ] ;
51206: LD_ADDR_VAR 0 17
51210: PUSH
51211: EMPTY
51212: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51213: LD_ADDR_VAR 0 6
51217: PUSH
51218: LD_VAR 0 1
51222: PPUSH
51223: CALL_OW 274
51227: PPUSH
51228: LD_VAR 0 2
51232: PPUSH
51233: LD_INT 0
51235: PPUSH
51236: CALL 48802 0 3
51240: PPUSH
51241: LD_INT 30
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PPUSH
51251: CALL_OW 72
51255: ST_TO_ADDR
// if not factories then
51256: LD_VAR 0 6
51260: NOT
51261: IFFALSE 51265
// exit ;
51263: GO 52231
// for i in factories do
51265: LD_ADDR_VAR 0 8
51269: PUSH
51270: LD_VAR 0 6
51274: PUSH
51275: FOR_IN
51276: IFFALSE 51301
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51278: LD_ADDR_VAR 0 17
51282: PUSH
51283: LD_VAR 0 17
51287: PUSH
51288: LD_VAR 0 8
51292: PPUSH
51293: CALL_OW 478
51297: UNION
51298: ST_TO_ADDR
51299: GO 51275
51301: POP
51302: POP
// if not fac_list then
51303: LD_VAR 0 17
51307: NOT
51308: IFFALSE 51312
// exit ;
51310: GO 52231
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51312: LD_ADDR_VAR 0 5
51316: PUSH
51317: LD_INT 4
51319: PUSH
51320: LD_INT 5
51322: PUSH
51323: LD_INT 9
51325: PUSH
51326: LD_INT 10
51328: PUSH
51329: LD_INT 6
51331: PUSH
51332: LD_INT 7
51334: PUSH
51335: LD_INT 11
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 27
51349: PUSH
51350: LD_INT 28
51352: PUSH
51353: LD_INT 26
51355: PUSH
51356: LD_INT 30
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 43
51367: PUSH
51368: LD_INT 44
51370: PUSH
51371: LD_INT 46
51373: PUSH
51374: LD_INT 45
51376: PUSH
51377: LD_INT 47
51379: PUSH
51380: LD_INT 49
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: PUSH
51396: LD_VAR 0 12
51400: ARRAY
51401: ST_TO_ADDR
// list := list isect fac_list ;
51402: LD_ADDR_VAR 0 5
51406: PUSH
51407: LD_VAR 0 5
51411: PUSH
51412: LD_VAR 0 17
51416: ISECT
51417: ST_TO_ADDR
// if not list then
51418: LD_VAR 0 5
51422: NOT
51423: IFFALSE 51427
// exit ;
51425: GO 52231
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51427: LD_VAR 0 12
51431: PUSH
51432: LD_INT 3
51434: EQUAL
51435: PUSH
51436: LD_INT 49
51438: PUSH
51439: LD_VAR 0 5
51443: IN
51444: AND
51445: PUSH
51446: LD_INT 31
51448: PPUSH
51449: LD_VAR 0 16
51453: PPUSH
51454: CALL_OW 321
51458: PUSH
51459: LD_INT 2
51461: EQUAL
51462: AND
51463: IFFALSE 51523
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51465: LD_INT 22
51467: PUSH
51468: LD_VAR 0 16
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 35
51479: PUSH
51480: LD_INT 49
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 91
51489: PUSH
51490: LD_VAR 0 1
51494: PUSH
51495: LD_INT 10
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: PPUSH
51508: CALL_OW 69
51512: NOT
51513: IFFALSE 51523
// weapon := ru_time_lapser ;
51515: LD_ADDR_VAR 0 18
51519: PUSH
51520: LD_INT 49
51522: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51523: LD_VAR 0 12
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: IN
51538: PUSH
51539: LD_INT 11
51541: PUSH
51542: LD_VAR 0 5
51546: IN
51547: PUSH
51548: LD_INT 30
51550: PUSH
51551: LD_VAR 0 5
51555: IN
51556: OR
51557: AND
51558: PUSH
51559: LD_INT 6
51561: PPUSH
51562: LD_VAR 0 16
51566: PPUSH
51567: CALL_OW 321
51571: PUSH
51572: LD_INT 2
51574: EQUAL
51575: AND
51576: IFFALSE 51741
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51578: LD_INT 22
51580: PUSH
51581: LD_VAR 0 16
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 35
51595: PUSH
51596: LD_INT 11
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 35
51605: PUSH
51606: LD_INT 30
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 91
51620: PUSH
51621: LD_VAR 0 1
51625: PUSH
51626: LD_INT 18
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: LIST
51638: PPUSH
51639: CALL_OW 69
51643: NOT
51644: PUSH
51645: LD_INT 22
51647: PUSH
51648: LD_VAR 0 16
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 30
51662: PUSH
51663: LD_INT 32
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 30
51672: PUSH
51673: LD_INT 33
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 91
51687: PUSH
51688: LD_VAR 0 1
51692: PUSH
51693: LD_INT 12
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: PPUSH
51709: CALL_OW 69
51713: PUSH
51714: LD_INT 2
51716: GREATER
51717: AND
51718: IFFALSE 51741
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51720: LD_ADDR_VAR 0 18
51724: PUSH
51725: LD_INT 11
51727: PUSH
51728: LD_INT 30
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_VAR 0 12
51739: ARRAY
51740: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51741: LD_VAR 0 18
51745: NOT
51746: PUSH
51747: LD_INT 40
51749: PPUSH
51750: LD_VAR 0 16
51754: PPUSH
51755: CALL_OW 321
51759: PUSH
51760: LD_INT 2
51762: EQUAL
51763: AND
51764: PUSH
51765: LD_INT 7
51767: PUSH
51768: LD_VAR 0 5
51772: IN
51773: PUSH
51774: LD_INT 28
51776: PUSH
51777: LD_VAR 0 5
51781: IN
51782: OR
51783: PUSH
51784: LD_INT 45
51786: PUSH
51787: LD_VAR 0 5
51791: IN
51792: OR
51793: AND
51794: IFFALSE 52048
// begin hex := GetHexInfo ( x , y ) ;
51796: LD_ADDR_VAR 0 4
51800: PUSH
51801: LD_VAR 0 10
51805: PPUSH
51806: LD_VAR 0 11
51810: PPUSH
51811: CALL_OW 546
51815: ST_TO_ADDR
// if hex [ 1 ] then
51816: LD_VAR 0 4
51820: PUSH
51821: LD_INT 1
51823: ARRAY
51824: IFFALSE 51828
// exit ;
51826: GO 52231
// height := hex [ 2 ] ;
51828: LD_ADDR_VAR 0 15
51832: PUSH
51833: LD_VAR 0 4
51837: PUSH
51838: LD_INT 2
51840: ARRAY
51841: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51842: LD_ADDR_VAR 0 14
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: LD_INT 5
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// for i in tmp do
51865: LD_ADDR_VAR 0 8
51869: PUSH
51870: LD_VAR 0 14
51874: PUSH
51875: FOR_IN
51876: IFFALSE 52046
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51878: LD_ADDR_VAR 0 9
51882: PUSH
51883: LD_VAR 0 10
51887: PPUSH
51888: LD_VAR 0 8
51892: PPUSH
51893: LD_INT 5
51895: PPUSH
51896: CALL_OW 272
51900: PUSH
51901: LD_VAR 0 11
51905: PPUSH
51906: LD_VAR 0 8
51910: PPUSH
51911: LD_INT 5
51913: PPUSH
51914: CALL_OW 273
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51923: LD_VAR 0 9
51927: PUSH
51928: LD_INT 1
51930: ARRAY
51931: PPUSH
51932: LD_VAR 0 9
51936: PUSH
51937: LD_INT 2
51939: ARRAY
51940: PPUSH
51941: CALL_OW 488
51945: IFFALSE 52044
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51947: LD_ADDR_VAR 0 4
51951: PUSH
51952: LD_VAR 0 9
51956: PUSH
51957: LD_INT 1
51959: ARRAY
51960: PPUSH
51961: LD_VAR 0 9
51965: PUSH
51966: LD_INT 2
51968: ARRAY
51969: PPUSH
51970: CALL_OW 546
51974: ST_TO_ADDR
// if hex [ 1 ] then
51975: LD_VAR 0 4
51979: PUSH
51980: LD_INT 1
51982: ARRAY
51983: IFFALSE 51987
// continue ;
51985: GO 51875
// h := hex [ 2 ] ;
51987: LD_ADDR_VAR 0 13
51991: PUSH
51992: LD_VAR 0 4
51996: PUSH
51997: LD_INT 2
51999: ARRAY
52000: ST_TO_ADDR
// if h + 7 < height then
52001: LD_VAR 0 13
52005: PUSH
52006: LD_INT 7
52008: PLUS
52009: PUSH
52010: LD_VAR 0 15
52014: LESS
52015: IFFALSE 52044
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52017: LD_ADDR_VAR 0 18
52021: PUSH
52022: LD_INT 7
52024: PUSH
52025: LD_INT 28
52027: PUSH
52028: LD_INT 45
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: PUSH
52036: LD_VAR 0 12
52040: ARRAY
52041: ST_TO_ADDR
// break ;
52042: GO 52046
// end ; end ; end ;
52044: GO 51875
52046: POP
52047: POP
// end ; if not weapon then
52048: LD_VAR 0 18
52052: NOT
52053: IFFALSE 52113
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52055: LD_ADDR_VAR 0 5
52059: PUSH
52060: LD_VAR 0 5
52064: PUSH
52065: LD_INT 11
52067: PUSH
52068: LD_INT 30
52070: PUSH
52071: LD_INT 49
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: DIFF
52079: ST_TO_ADDR
// if not list then
52080: LD_VAR 0 5
52084: NOT
52085: IFFALSE 52089
// exit ;
52087: GO 52231
// weapon := list [ rand ( 1 , list ) ] ;
52089: LD_ADDR_VAR 0 18
52093: PUSH
52094: LD_VAR 0 5
52098: PUSH
52099: LD_INT 1
52101: PPUSH
52102: LD_VAR 0 5
52106: PPUSH
52107: CALL_OW 12
52111: ARRAY
52112: ST_TO_ADDR
// end ; if weapon then
52113: LD_VAR 0 18
52117: IFFALSE 52231
// begin tmp := CostOfWeapon ( weapon ) ;
52119: LD_ADDR_VAR 0 14
52123: PUSH
52124: LD_VAR 0 18
52128: PPUSH
52129: CALL_OW 451
52133: ST_TO_ADDR
// j := GetBase ( tower ) ;
52134: LD_ADDR_VAR 0 9
52138: PUSH
52139: LD_VAR 0 1
52143: PPUSH
52144: CALL_OW 274
52148: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52149: LD_VAR 0 9
52153: PPUSH
52154: LD_INT 1
52156: PPUSH
52157: CALL_OW 275
52161: PUSH
52162: LD_VAR 0 14
52166: PUSH
52167: LD_INT 1
52169: ARRAY
52170: GREATEREQUAL
52171: PUSH
52172: LD_VAR 0 9
52176: PPUSH
52177: LD_INT 2
52179: PPUSH
52180: CALL_OW 275
52184: PUSH
52185: LD_VAR 0 14
52189: PUSH
52190: LD_INT 2
52192: ARRAY
52193: GREATEREQUAL
52194: AND
52195: PUSH
52196: LD_VAR 0 9
52200: PPUSH
52201: LD_INT 3
52203: PPUSH
52204: CALL_OW 275
52208: PUSH
52209: LD_VAR 0 14
52213: PUSH
52214: LD_INT 3
52216: ARRAY
52217: GREATEREQUAL
52218: AND
52219: IFFALSE 52231
// result := weapon ;
52221: LD_ADDR_VAR 0 3
52225: PUSH
52226: LD_VAR 0 18
52230: ST_TO_ADDR
// end ; end ;
52231: LD_VAR 0 3
52235: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52236: LD_INT 0
52238: PPUSH
52239: PPUSH
// result := true ;
52240: LD_ADDR_VAR 0 3
52244: PUSH
52245: LD_INT 1
52247: ST_TO_ADDR
// if array1 = array2 then
52248: LD_VAR 0 1
52252: PUSH
52253: LD_VAR 0 2
52257: EQUAL
52258: IFFALSE 52318
// begin for i = 1 to array1 do
52260: LD_ADDR_VAR 0 4
52264: PUSH
52265: DOUBLE
52266: LD_INT 1
52268: DEC
52269: ST_TO_ADDR
52270: LD_VAR 0 1
52274: PUSH
52275: FOR_TO
52276: IFFALSE 52314
// if array1 [ i ] <> array2 [ i ] then
52278: LD_VAR 0 1
52282: PUSH
52283: LD_VAR 0 4
52287: ARRAY
52288: PUSH
52289: LD_VAR 0 2
52293: PUSH
52294: LD_VAR 0 4
52298: ARRAY
52299: NONEQUAL
52300: IFFALSE 52312
// begin result := false ;
52302: LD_ADDR_VAR 0 3
52306: PUSH
52307: LD_INT 0
52309: ST_TO_ADDR
// break ;
52310: GO 52314
// end ;
52312: GO 52275
52314: POP
52315: POP
// end else
52316: GO 52326
// result := false ;
52318: LD_ADDR_VAR 0 3
52322: PUSH
52323: LD_INT 0
52325: ST_TO_ADDR
// end ;
52326: LD_VAR 0 3
52330: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52331: LD_INT 0
52333: PPUSH
52334: PPUSH
// if not array1 or not array2 then
52335: LD_VAR 0 1
52339: NOT
52340: PUSH
52341: LD_VAR 0 2
52345: NOT
52346: OR
52347: IFFALSE 52351
// exit ;
52349: GO 52415
// result := true ;
52351: LD_ADDR_VAR 0 3
52355: PUSH
52356: LD_INT 1
52358: ST_TO_ADDR
// for i = 1 to array1 do
52359: LD_ADDR_VAR 0 4
52363: PUSH
52364: DOUBLE
52365: LD_INT 1
52367: DEC
52368: ST_TO_ADDR
52369: LD_VAR 0 1
52373: PUSH
52374: FOR_TO
52375: IFFALSE 52413
// if array1 [ i ] <> array2 [ i ] then
52377: LD_VAR 0 1
52381: PUSH
52382: LD_VAR 0 4
52386: ARRAY
52387: PUSH
52388: LD_VAR 0 2
52392: PUSH
52393: LD_VAR 0 4
52397: ARRAY
52398: NONEQUAL
52399: IFFALSE 52411
// begin result := false ;
52401: LD_ADDR_VAR 0 3
52405: PUSH
52406: LD_INT 0
52408: ST_TO_ADDR
// break ;
52409: GO 52413
// end ;
52411: GO 52374
52413: POP
52414: POP
// end ;
52415: LD_VAR 0 3
52419: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52420: LD_INT 0
52422: PPUSH
52423: PPUSH
52424: PPUSH
// pom := GetBase ( fac ) ;
52425: LD_ADDR_VAR 0 5
52429: PUSH
52430: LD_VAR 0 1
52434: PPUSH
52435: CALL_OW 274
52439: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52440: LD_ADDR_VAR 0 4
52444: PUSH
52445: LD_VAR 0 2
52449: PUSH
52450: LD_INT 1
52452: ARRAY
52453: PPUSH
52454: LD_VAR 0 2
52458: PUSH
52459: LD_INT 2
52461: ARRAY
52462: PPUSH
52463: LD_VAR 0 2
52467: PUSH
52468: LD_INT 3
52470: ARRAY
52471: PPUSH
52472: LD_VAR 0 2
52476: PUSH
52477: LD_INT 4
52479: ARRAY
52480: PPUSH
52481: CALL_OW 449
52485: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52486: LD_ADDR_VAR 0 3
52490: PUSH
52491: LD_VAR 0 5
52495: PPUSH
52496: LD_INT 1
52498: PPUSH
52499: CALL_OW 275
52503: PUSH
52504: LD_VAR 0 4
52508: PUSH
52509: LD_INT 1
52511: ARRAY
52512: GREATEREQUAL
52513: PUSH
52514: LD_VAR 0 5
52518: PPUSH
52519: LD_INT 2
52521: PPUSH
52522: CALL_OW 275
52526: PUSH
52527: LD_VAR 0 4
52531: PUSH
52532: LD_INT 2
52534: ARRAY
52535: GREATEREQUAL
52536: AND
52537: PUSH
52538: LD_VAR 0 5
52542: PPUSH
52543: LD_INT 3
52545: PPUSH
52546: CALL_OW 275
52550: PUSH
52551: LD_VAR 0 4
52555: PUSH
52556: LD_INT 3
52558: ARRAY
52559: GREATEREQUAL
52560: AND
52561: ST_TO_ADDR
// end ;
52562: LD_VAR 0 3
52566: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52567: LD_INT 0
52569: PPUSH
52570: PPUSH
52571: PPUSH
52572: PPUSH
// pom := GetBase ( building ) ;
52573: LD_ADDR_VAR 0 3
52577: PUSH
52578: LD_VAR 0 1
52582: PPUSH
52583: CALL_OW 274
52587: ST_TO_ADDR
// if not pom then
52588: LD_VAR 0 3
52592: NOT
52593: IFFALSE 52597
// exit ;
52595: GO 52767
// btype := GetBType ( building ) ;
52597: LD_ADDR_VAR 0 5
52601: PUSH
52602: LD_VAR 0 1
52606: PPUSH
52607: CALL_OW 266
52611: ST_TO_ADDR
// if btype = b_armoury then
52612: LD_VAR 0 5
52616: PUSH
52617: LD_INT 4
52619: EQUAL
52620: IFFALSE 52630
// btype := b_barracks ;
52622: LD_ADDR_VAR 0 5
52626: PUSH
52627: LD_INT 5
52629: ST_TO_ADDR
// if btype = b_depot then
52630: LD_VAR 0 5
52634: PUSH
52635: LD_INT 0
52637: EQUAL
52638: IFFALSE 52648
// btype := b_warehouse ;
52640: LD_ADDR_VAR 0 5
52644: PUSH
52645: LD_INT 1
52647: ST_TO_ADDR
// if btype = b_workshop then
52648: LD_VAR 0 5
52652: PUSH
52653: LD_INT 2
52655: EQUAL
52656: IFFALSE 52666
// btype := b_factory ;
52658: LD_ADDR_VAR 0 5
52662: PUSH
52663: LD_INT 3
52665: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52666: LD_ADDR_VAR 0 4
52670: PUSH
52671: LD_VAR 0 5
52675: PPUSH
52676: LD_VAR 0 1
52680: PPUSH
52681: CALL_OW 248
52685: PPUSH
52686: CALL_OW 450
52690: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52691: LD_ADDR_VAR 0 2
52695: PUSH
52696: LD_VAR 0 3
52700: PPUSH
52701: LD_INT 1
52703: PPUSH
52704: CALL_OW 275
52708: PUSH
52709: LD_VAR 0 4
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: GREATEREQUAL
52718: PUSH
52719: LD_VAR 0 3
52723: PPUSH
52724: LD_INT 2
52726: PPUSH
52727: CALL_OW 275
52731: PUSH
52732: LD_VAR 0 4
52736: PUSH
52737: LD_INT 2
52739: ARRAY
52740: GREATEREQUAL
52741: AND
52742: PUSH
52743: LD_VAR 0 3
52747: PPUSH
52748: LD_INT 3
52750: PPUSH
52751: CALL_OW 275
52755: PUSH
52756: LD_VAR 0 4
52760: PUSH
52761: LD_INT 3
52763: ARRAY
52764: GREATEREQUAL
52765: AND
52766: ST_TO_ADDR
// end ;
52767: LD_VAR 0 2
52771: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52772: LD_INT 0
52774: PPUSH
52775: PPUSH
52776: PPUSH
// pom := GetBase ( building ) ;
52777: LD_ADDR_VAR 0 4
52781: PUSH
52782: LD_VAR 0 1
52786: PPUSH
52787: CALL_OW 274
52791: ST_TO_ADDR
// if not pom then
52792: LD_VAR 0 4
52796: NOT
52797: IFFALSE 52801
// exit ;
52799: GO 52902
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52801: LD_ADDR_VAR 0 5
52805: PUSH
52806: LD_VAR 0 2
52810: PPUSH
52811: LD_VAR 0 1
52815: PPUSH
52816: CALL_OW 248
52820: PPUSH
52821: CALL_OW 450
52825: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52826: LD_ADDR_VAR 0 3
52830: PUSH
52831: LD_VAR 0 4
52835: PPUSH
52836: LD_INT 1
52838: PPUSH
52839: CALL_OW 275
52843: PUSH
52844: LD_VAR 0 5
52848: PUSH
52849: LD_INT 1
52851: ARRAY
52852: GREATEREQUAL
52853: PUSH
52854: LD_VAR 0 4
52858: PPUSH
52859: LD_INT 2
52861: PPUSH
52862: CALL_OW 275
52866: PUSH
52867: LD_VAR 0 5
52871: PUSH
52872: LD_INT 2
52874: ARRAY
52875: GREATEREQUAL
52876: AND
52877: PUSH
52878: LD_VAR 0 4
52882: PPUSH
52883: LD_INT 3
52885: PPUSH
52886: CALL_OW 275
52890: PUSH
52891: LD_VAR 0 5
52895: PUSH
52896: LD_INT 3
52898: ARRAY
52899: GREATEREQUAL
52900: AND
52901: ST_TO_ADDR
// end ;
52902: LD_VAR 0 3
52906: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52907: LD_INT 0
52909: PPUSH
52910: PPUSH
52911: PPUSH
52912: PPUSH
52913: PPUSH
52914: PPUSH
52915: PPUSH
52916: PPUSH
52917: PPUSH
52918: PPUSH
52919: PPUSH
// result := false ;
52920: LD_ADDR_VAR 0 8
52924: PUSH
52925: LD_INT 0
52927: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52928: LD_VAR 0 5
52932: NOT
52933: PUSH
52934: LD_VAR 0 1
52938: NOT
52939: OR
52940: PUSH
52941: LD_VAR 0 2
52945: NOT
52946: OR
52947: PUSH
52948: LD_VAR 0 3
52952: NOT
52953: OR
52954: IFFALSE 52958
// exit ;
52956: GO 53772
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52958: LD_ADDR_VAR 0 14
52962: PUSH
52963: LD_VAR 0 1
52967: PPUSH
52968: LD_VAR 0 2
52972: PPUSH
52973: LD_VAR 0 3
52977: PPUSH
52978: LD_VAR 0 4
52982: PPUSH
52983: LD_VAR 0 5
52987: PUSH
52988: LD_INT 1
52990: ARRAY
52991: PPUSH
52992: CALL_OW 248
52996: PPUSH
52997: LD_INT 0
52999: PPUSH
53000: CALL 55025 0 6
53004: ST_TO_ADDR
// if not hexes then
53005: LD_VAR 0 14
53009: NOT
53010: IFFALSE 53014
// exit ;
53012: GO 53772
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53014: LD_ADDR_VAR 0 17
53018: PUSH
53019: LD_VAR 0 5
53023: PPUSH
53024: LD_INT 22
53026: PUSH
53027: LD_VAR 0 13
53031: PPUSH
53032: CALL_OW 255
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 30
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 30
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PPUSH
53073: CALL_OW 72
53077: ST_TO_ADDR
// for i = 1 to hexes do
53078: LD_ADDR_VAR 0 9
53082: PUSH
53083: DOUBLE
53084: LD_INT 1
53086: DEC
53087: ST_TO_ADDR
53088: LD_VAR 0 14
53092: PUSH
53093: FOR_TO
53094: IFFALSE 53770
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53096: LD_ADDR_VAR 0 13
53100: PUSH
53101: LD_VAR 0 14
53105: PUSH
53106: LD_VAR 0 9
53110: ARRAY
53111: PUSH
53112: LD_INT 1
53114: ARRAY
53115: PPUSH
53116: LD_VAR 0 14
53120: PUSH
53121: LD_VAR 0 9
53125: ARRAY
53126: PUSH
53127: LD_INT 2
53129: ARRAY
53130: PPUSH
53131: CALL_OW 428
53135: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53136: LD_VAR 0 14
53140: PUSH
53141: LD_VAR 0 9
53145: ARRAY
53146: PUSH
53147: LD_INT 1
53149: ARRAY
53150: PPUSH
53151: LD_VAR 0 14
53155: PUSH
53156: LD_VAR 0 9
53160: ARRAY
53161: PUSH
53162: LD_INT 2
53164: ARRAY
53165: PPUSH
53166: CALL_OW 351
53170: PUSH
53171: LD_VAR 0 14
53175: PUSH
53176: LD_VAR 0 9
53180: ARRAY
53181: PUSH
53182: LD_INT 1
53184: ARRAY
53185: PPUSH
53186: LD_VAR 0 14
53190: PUSH
53191: LD_VAR 0 9
53195: ARRAY
53196: PUSH
53197: LD_INT 2
53199: ARRAY
53200: PPUSH
53201: CALL_OW 488
53205: NOT
53206: OR
53207: PUSH
53208: LD_VAR 0 13
53212: PPUSH
53213: CALL_OW 247
53217: PUSH
53218: LD_INT 3
53220: EQUAL
53221: OR
53222: IFFALSE 53228
// exit ;
53224: POP
53225: POP
53226: GO 53772
// if not tmp then
53228: LD_VAR 0 13
53232: NOT
53233: IFFALSE 53237
// continue ;
53235: GO 53093
// result := true ;
53237: LD_ADDR_VAR 0 8
53241: PUSH
53242: LD_INT 1
53244: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53245: LD_VAR 0 6
53249: PUSH
53250: LD_VAR 0 13
53254: PPUSH
53255: CALL_OW 247
53259: PUSH
53260: LD_INT 2
53262: EQUAL
53263: AND
53264: PUSH
53265: LD_VAR 0 13
53269: PPUSH
53270: CALL_OW 263
53274: PUSH
53275: LD_INT 1
53277: EQUAL
53278: AND
53279: IFFALSE 53443
// begin if IsDrivenBy ( tmp ) then
53281: LD_VAR 0 13
53285: PPUSH
53286: CALL_OW 311
53290: IFFALSE 53294
// continue ;
53292: GO 53093
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53294: LD_VAR 0 6
53298: PPUSH
53299: LD_INT 3
53301: PUSH
53302: LD_INT 60
53304: PUSH
53305: EMPTY
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 3
53314: PUSH
53315: LD_INT 55
53317: PUSH
53318: EMPTY
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PPUSH
53329: CALL_OW 72
53333: IFFALSE 53441
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53335: LD_ADDR_VAR 0 18
53339: PUSH
53340: LD_VAR 0 6
53344: PPUSH
53345: LD_INT 3
53347: PUSH
53348: LD_INT 60
53350: PUSH
53351: EMPTY
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: LD_INT 55
53363: PUSH
53364: EMPTY
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PPUSH
53375: CALL_OW 72
53379: PUSH
53380: LD_INT 1
53382: ARRAY
53383: ST_TO_ADDR
// if IsInUnit ( driver ) then
53384: LD_VAR 0 18
53388: PPUSH
53389: CALL_OW 310
53393: IFFALSE 53404
// ComExit ( driver ) ;
53395: LD_VAR 0 18
53399: PPUSH
53400: CALL 78806 0 1
// AddComEnterUnit ( driver , tmp ) ;
53404: LD_VAR 0 18
53408: PPUSH
53409: LD_VAR 0 13
53413: PPUSH
53414: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53418: LD_VAR 0 18
53422: PPUSH
53423: LD_VAR 0 7
53427: PPUSH
53428: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53432: LD_VAR 0 18
53436: PPUSH
53437: CALL_OW 181
// end ; continue ;
53441: GO 53093
// end ; if not cleaners or not tmp in cleaners then
53443: LD_VAR 0 6
53447: NOT
53448: PUSH
53449: LD_VAR 0 13
53453: PUSH
53454: LD_VAR 0 6
53458: IN
53459: NOT
53460: OR
53461: IFFALSE 53768
// begin if dep then
53463: LD_VAR 0 17
53467: IFFALSE 53603
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53469: LD_ADDR_VAR 0 16
53473: PUSH
53474: LD_VAR 0 17
53478: PUSH
53479: LD_INT 1
53481: ARRAY
53482: PPUSH
53483: CALL_OW 250
53487: PPUSH
53488: LD_VAR 0 17
53492: PUSH
53493: LD_INT 1
53495: ARRAY
53496: PPUSH
53497: CALL_OW 254
53501: PPUSH
53502: LD_INT 5
53504: PPUSH
53505: CALL_OW 272
53509: PUSH
53510: LD_VAR 0 17
53514: PUSH
53515: LD_INT 1
53517: ARRAY
53518: PPUSH
53519: CALL_OW 251
53523: PPUSH
53524: LD_VAR 0 17
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PPUSH
53533: CALL_OW 254
53537: PPUSH
53538: LD_INT 5
53540: PPUSH
53541: CALL_OW 273
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53550: LD_VAR 0 16
53554: PUSH
53555: LD_INT 1
53557: ARRAY
53558: PPUSH
53559: LD_VAR 0 16
53563: PUSH
53564: LD_INT 2
53566: ARRAY
53567: PPUSH
53568: CALL_OW 488
53572: IFFALSE 53603
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53574: LD_VAR 0 13
53578: PPUSH
53579: LD_VAR 0 16
53583: PUSH
53584: LD_INT 1
53586: ARRAY
53587: PPUSH
53588: LD_VAR 0 16
53592: PUSH
53593: LD_INT 2
53595: ARRAY
53596: PPUSH
53597: CALL_OW 111
// continue ;
53601: GO 53093
// end ; end ; r := GetDir ( tmp ) ;
53603: LD_ADDR_VAR 0 15
53607: PUSH
53608: LD_VAR 0 13
53612: PPUSH
53613: CALL_OW 254
53617: ST_TO_ADDR
// if r = 5 then
53618: LD_VAR 0 15
53622: PUSH
53623: LD_INT 5
53625: EQUAL
53626: IFFALSE 53636
// r := 0 ;
53628: LD_ADDR_VAR 0 15
53632: PUSH
53633: LD_INT 0
53635: ST_TO_ADDR
// for j = r to 5 do
53636: LD_ADDR_VAR 0 10
53640: PUSH
53641: DOUBLE
53642: LD_VAR 0 15
53646: DEC
53647: ST_TO_ADDR
53648: LD_INT 5
53650: PUSH
53651: FOR_TO
53652: IFFALSE 53766
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53654: LD_ADDR_VAR 0 11
53658: PUSH
53659: LD_VAR 0 13
53663: PPUSH
53664: CALL_OW 250
53668: PPUSH
53669: LD_VAR 0 10
53673: PPUSH
53674: LD_INT 2
53676: PPUSH
53677: CALL_OW 272
53681: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53682: LD_ADDR_VAR 0 12
53686: PUSH
53687: LD_VAR 0 13
53691: PPUSH
53692: CALL_OW 251
53696: PPUSH
53697: LD_VAR 0 10
53701: PPUSH
53702: LD_INT 2
53704: PPUSH
53705: CALL_OW 273
53709: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53710: LD_VAR 0 11
53714: PPUSH
53715: LD_VAR 0 12
53719: PPUSH
53720: CALL_OW 488
53724: PUSH
53725: LD_VAR 0 11
53729: PPUSH
53730: LD_VAR 0 12
53734: PPUSH
53735: CALL_OW 428
53739: NOT
53740: AND
53741: IFFALSE 53764
// begin ComMoveXY ( tmp , _x , _y ) ;
53743: LD_VAR 0 13
53747: PPUSH
53748: LD_VAR 0 11
53752: PPUSH
53753: LD_VAR 0 12
53757: PPUSH
53758: CALL_OW 111
// break ;
53762: GO 53766
// end ; end ;
53764: GO 53651
53766: POP
53767: POP
// end ; end ;
53768: GO 53093
53770: POP
53771: POP
// end ;
53772: LD_VAR 0 8
53776: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53777: LD_INT 0
53779: PPUSH
// result := true ;
53780: LD_ADDR_VAR 0 3
53784: PUSH
53785: LD_INT 1
53787: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53788: LD_VAR 0 2
53792: PUSH
53793: LD_INT 24
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53807
53799: LD_INT 33
53801: DOUBLE
53802: EQUAL
53803: IFTRUE 53807
53805: GO 53832
53807: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53808: LD_ADDR_VAR 0 3
53812: PUSH
53813: LD_INT 32
53815: PPUSH
53816: LD_VAR 0 1
53820: PPUSH
53821: CALL_OW 321
53825: PUSH
53826: LD_INT 2
53828: EQUAL
53829: ST_TO_ADDR
53830: GO 54148
53832: LD_INT 20
53834: DOUBLE
53835: EQUAL
53836: IFTRUE 53840
53838: GO 53865
53840: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53841: LD_ADDR_VAR 0 3
53845: PUSH
53846: LD_INT 6
53848: PPUSH
53849: LD_VAR 0 1
53853: PPUSH
53854: CALL_OW 321
53858: PUSH
53859: LD_INT 2
53861: EQUAL
53862: ST_TO_ADDR
53863: GO 54148
53865: LD_INT 22
53867: DOUBLE
53868: EQUAL
53869: IFTRUE 53879
53871: LD_INT 36
53873: DOUBLE
53874: EQUAL
53875: IFTRUE 53879
53877: GO 53904
53879: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53880: LD_ADDR_VAR 0 3
53884: PUSH
53885: LD_INT 15
53887: PPUSH
53888: LD_VAR 0 1
53892: PPUSH
53893: CALL_OW 321
53897: PUSH
53898: LD_INT 2
53900: EQUAL
53901: ST_TO_ADDR
53902: GO 54148
53904: LD_INT 30
53906: DOUBLE
53907: EQUAL
53908: IFTRUE 53912
53910: GO 53937
53912: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53913: LD_ADDR_VAR 0 3
53917: PUSH
53918: LD_INT 20
53920: PPUSH
53921: LD_VAR 0 1
53925: PPUSH
53926: CALL_OW 321
53930: PUSH
53931: LD_INT 2
53933: EQUAL
53934: ST_TO_ADDR
53935: GO 54148
53937: LD_INT 28
53939: DOUBLE
53940: EQUAL
53941: IFTRUE 53951
53943: LD_INT 21
53945: DOUBLE
53946: EQUAL
53947: IFTRUE 53951
53949: GO 53976
53951: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53952: LD_ADDR_VAR 0 3
53956: PUSH
53957: LD_INT 21
53959: PPUSH
53960: LD_VAR 0 1
53964: PPUSH
53965: CALL_OW 321
53969: PUSH
53970: LD_INT 2
53972: EQUAL
53973: ST_TO_ADDR
53974: GO 54148
53976: LD_INT 16
53978: DOUBLE
53979: EQUAL
53980: IFTRUE 53984
53982: GO 54009
53984: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53985: LD_ADDR_VAR 0 3
53989: PUSH
53990: LD_INT 84
53992: PPUSH
53993: LD_VAR 0 1
53997: PPUSH
53998: CALL_OW 321
54002: PUSH
54003: LD_INT 2
54005: EQUAL
54006: ST_TO_ADDR
54007: GO 54148
54009: LD_INT 19
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54023
54015: LD_INT 23
54017: DOUBLE
54018: EQUAL
54019: IFTRUE 54023
54021: GO 54048
54023: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54024: LD_ADDR_VAR 0 3
54028: PUSH
54029: LD_INT 83
54031: PPUSH
54032: LD_VAR 0 1
54036: PPUSH
54037: CALL_OW 321
54041: PUSH
54042: LD_INT 2
54044: EQUAL
54045: ST_TO_ADDR
54046: GO 54148
54048: LD_INT 17
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54056
54054: GO 54081
54056: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54057: LD_ADDR_VAR 0 3
54061: PUSH
54062: LD_INT 39
54064: PPUSH
54065: LD_VAR 0 1
54069: PPUSH
54070: CALL_OW 321
54074: PUSH
54075: LD_INT 2
54077: EQUAL
54078: ST_TO_ADDR
54079: GO 54148
54081: LD_INT 18
54083: DOUBLE
54084: EQUAL
54085: IFTRUE 54089
54087: GO 54114
54089: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54090: LD_ADDR_VAR 0 3
54094: PUSH
54095: LD_INT 40
54097: PPUSH
54098: LD_VAR 0 1
54102: PPUSH
54103: CALL_OW 321
54107: PUSH
54108: LD_INT 2
54110: EQUAL
54111: ST_TO_ADDR
54112: GO 54148
54114: LD_INT 27
54116: DOUBLE
54117: EQUAL
54118: IFTRUE 54122
54120: GO 54147
54122: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54123: LD_ADDR_VAR 0 3
54127: PUSH
54128: LD_INT 35
54130: PPUSH
54131: LD_VAR 0 1
54135: PPUSH
54136: CALL_OW 321
54140: PUSH
54141: LD_INT 2
54143: EQUAL
54144: ST_TO_ADDR
54145: GO 54148
54147: POP
// end ;
54148: LD_VAR 0 3
54152: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54153: LD_INT 0
54155: PPUSH
54156: PPUSH
54157: PPUSH
54158: PPUSH
54159: PPUSH
54160: PPUSH
54161: PPUSH
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
// result := false ;
54166: LD_ADDR_VAR 0 6
54170: PUSH
54171: LD_INT 0
54173: ST_TO_ADDR
// if btype = b_depot then
54174: LD_VAR 0 2
54178: PUSH
54179: LD_INT 0
54181: EQUAL
54182: IFFALSE 54194
// begin result := true ;
54184: LD_ADDR_VAR 0 6
54188: PUSH
54189: LD_INT 1
54191: ST_TO_ADDR
// exit ;
54192: GO 55020
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54194: LD_VAR 0 1
54198: NOT
54199: PUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: CALL_OW 266
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: IN
54220: NOT
54221: OR
54222: PUSH
54223: LD_VAR 0 2
54227: NOT
54228: OR
54229: PUSH
54230: LD_VAR 0 5
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 3
54246: PUSH
54247: LD_INT 4
54249: PUSH
54250: LD_INT 5
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: IN
54261: NOT
54262: OR
54263: PUSH
54264: LD_VAR 0 3
54268: PPUSH
54269: LD_VAR 0 4
54273: PPUSH
54274: CALL_OW 488
54278: NOT
54279: OR
54280: IFFALSE 54284
// exit ;
54282: GO 55020
// side := GetSide ( depot ) ;
54284: LD_ADDR_VAR 0 9
54288: PUSH
54289: LD_VAR 0 1
54293: PPUSH
54294: CALL_OW 255
54298: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54299: LD_VAR 0 9
54303: PPUSH
54304: LD_VAR 0 2
54308: PPUSH
54309: CALL 53777 0 2
54313: NOT
54314: IFFALSE 54318
// exit ;
54316: GO 55020
// pom := GetBase ( depot ) ;
54318: LD_ADDR_VAR 0 10
54322: PUSH
54323: LD_VAR 0 1
54327: PPUSH
54328: CALL_OW 274
54332: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54333: LD_ADDR_VAR 0 11
54337: PUSH
54338: LD_VAR 0 2
54342: PPUSH
54343: LD_VAR 0 1
54347: PPUSH
54348: CALL_OW 248
54352: PPUSH
54353: CALL_OW 450
54357: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54358: LD_VAR 0 10
54362: PPUSH
54363: LD_INT 1
54365: PPUSH
54366: CALL_OW 275
54370: PUSH
54371: LD_VAR 0 11
54375: PUSH
54376: LD_INT 1
54378: ARRAY
54379: GREATEREQUAL
54380: PUSH
54381: LD_VAR 0 10
54385: PPUSH
54386: LD_INT 2
54388: PPUSH
54389: CALL_OW 275
54393: PUSH
54394: LD_VAR 0 11
54398: PUSH
54399: LD_INT 2
54401: ARRAY
54402: GREATEREQUAL
54403: AND
54404: PUSH
54405: LD_VAR 0 10
54409: PPUSH
54410: LD_INT 3
54412: PPUSH
54413: CALL_OW 275
54417: PUSH
54418: LD_VAR 0 11
54422: PUSH
54423: LD_INT 3
54425: ARRAY
54426: GREATEREQUAL
54427: AND
54428: NOT
54429: IFFALSE 54433
// exit ;
54431: GO 55020
// if GetBType ( depot ) = b_depot then
54433: LD_VAR 0 1
54437: PPUSH
54438: CALL_OW 266
54442: PUSH
54443: LD_INT 0
54445: EQUAL
54446: IFFALSE 54458
// dist := 28 else
54448: LD_ADDR_VAR 0 14
54452: PUSH
54453: LD_INT 28
54455: ST_TO_ADDR
54456: GO 54466
// dist := 36 ;
54458: LD_ADDR_VAR 0 14
54462: PUSH
54463: LD_INT 36
54465: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54466: LD_VAR 0 1
54470: PPUSH
54471: LD_VAR 0 3
54475: PPUSH
54476: LD_VAR 0 4
54480: PPUSH
54481: CALL_OW 297
54485: PUSH
54486: LD_VAR 0 14
54490: GREATER
54491: IFFALSE 54495
// exit ;
54493: GO 55020
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54495: LD_ADDR_VAR 0 12
54499: PUSH
54500: LD_VAR 0 2
54504: PPUSH
54505: LD_VAR 0 3
54509: PPUSH
54510: LD_VAR 0 4
54514: PPUSH
54515: LD_VAR 0 5
54519: PPUSH
54520: LD_VAR 0 1
54524: PPUSH
54525: CALL_OW 248
54529: PPUSH
54530: LD_INT 0
54532: PPUSH
54533: CALL 55025 0 6
54537: ST_TO_ADDR
// if not hexes then
54538: LD_VAR 0 12
54542: NOT
54543: IFFALSE 54547
// exit ;
54545: GO 55020
// hex := GetHexInfo ( x , y ) ;
54547: LD_ADDR_VAR 0 15
54551: PUSH
54552: LD_VAR 0 3
54556: PPUSH
54557: LD_VAR 0 4
54561: PPUSH
54562: CALL_OW 546
54566: ST_TO_ADDR
// if hex [ 1 ] then
54567: LD_VAR 0 15
54571: PUSH
54572: LD_INT 1
54574: ARRAY
54575: IFFALSE 54579
// exit ;
54577: GO 55020
// height := hex [ 2 ] ;
54579: LD_ADDR_VAR 0 13
54583: PUSH
54584: LD_VAR 0 15
54588: PUSH
54589: LD_INT 2
54591: ARRAY
54592: ST_TO_ADDR
// for i = 1 to hexes do
54593: LD_ADDR_VAR 0 7
54597: PUSH
54598: DOUBLE
54599: LD_INT 1
54601: DEC
54602: ST_TO_ADDR
54603: LD_VAR 0 12
54607: PUSH
54608: FOR_TO
54609: IFFALSE 54939
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54611: LD_VAR 0 12
54615: PUSH
54616: LD_VAR 0 7
54620: ARRAY
54621: PUSH
54622: LD_INT 1
54624: ARRAY
54625: PPUSH
54626: LD_VAR 0 12
54630: PUSH
54631: LD_VAR 0 7
54635: ARRAY
54636: PUSH
54637: LD_INT 2
54639: ARRAY
54640: PPUSH
54641: CALL_OW 488
54645: NOT
54646: PUSH
54647: LD_VAR 0 12
54651: PUSH
54652: LD_VAR 0 7
54656: ARRAY
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: PPUSH
54662: LD_VAR 0 12
54666: PUSH
54667: LD_VAR 0 7
54671: ARRAY
54672: PUSH
54673: LD_INT 2
54675: ARRAY
54676: PPUSH
54677: CALL_OW 428
54681: PUSH
54682: LD_INT 0
54684: GREATER
54685: OR
54686: PUSH
54687: LD_VAR 0 12
54691: PUSH
54692: LD_VAR 0 7
54696: ARRAY
54697: PUSH
54698: LD_INT 1
54700: ARRAY
54701: PPUSH
54702: LD_VAR 0 12
54706: PUSH
54707: LD_VAR 0 7
54711: ARRAY
54712: PUSH
54713: LD_INT 2
54715: ARRAY
54716: PPUSH
54717: CALL_OW 351
54721: OR
54722: IFFALSE 54728
// exit ;
54724: POP
54725: POP
54726: GO 55020
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54728: LD_ADDR_VAR 0 8
54732: PUSH
54733: LD_VAR 0 12
54737: PUSH
54738: LD_VAR 0 7
54742: ARRAY
54743: PUSH
54744: LD_INT 1
54746: ARRAY
54747: PPUSH
54748: LD_VAR 0 12
54752: PUSH
54753: LD_VAR 0 7
54757: ARRAY
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: CALL_OW 546
54767: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54768: LD_VAR 0 8
54772: PUSH
54773: LD_INT 1
54775: ARRAY
54776: PUSH
54777: LD_VAR 0 8
54781: PUSH
54782: LD_INT 2
54784: ARRAY
54785: PUSH
54786: LD_VAR 0 13
54790: PUSH
54791: LD_INT 2
54793: PLUS
54794: GREATER
54795: OR
54796: PUSH
54797: LD_VAR 0 8
54801: PUSH
54802: LD_INT 2
54804: ARRAY
54805: PUSH
54806: LD_VAR 0 13
54810: PUSH
54811: LD_INT 2
54813: MINUS
54814: LESS
54815: OR
54816: PUSH
54817: LD_VAR 0 8
54821: PUSH
54822: LD_INT 3
54824: ARRAY
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 8
54831: PUSH
54832: LD_INT 9
54834: PUSH
54835: LD_INT 10
54837: PUSH
54838: LD_INT 11
54840: PUSH
54841: LD_INT 12
54843: PUSH
54844: LD_INT 13
54846: PUSH
54847: LD_INT 16
54849: PUSH
54850: LD_INT 17
54852: PUSH
54853: LD_INT 18
54855: PUSH
54856: LD_INT 19
54858: PUSH
54859: LD_INT 20
54861: PUSH
54862: LD_INT 21
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: IN
54880: NOT
54881: OR
54882: PUSH
54883: LD_VAR 0 8
54887: PUSH
54888: LD_INT 5
54890: ARRAY
54891: NOT
54892: OR
54893: PUSH
54894: LD_VAR 0 8
54898: PUSH
54899: LD_INT 6
54901: ARRAY
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 7
54911: PUSH
54912: LD_INT 9
54914: PUSH
54915: LD_INT 10
54917: PUSH
54918: LD_INT 11
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: IN
54929: NOT
54930: OR
54931: IFFALSE 54937
// exit ;
54933: POP
54934: POP
54935: GO 55020
// end ;
54937: GO 54608
54939: POP
54940: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54941: LD_VAR 0 9
54945: PPUSH
54946: LD_VAR 0 3
54950: PPUSH
54951: LD_VAR 0 4
54955: PPUSH
54956: LD_INT 20
54958: PPUSH
54959: CALL 46943 0 4
54963: PUSH
54964: LD_INT 4
54966: ARRAY
54967: IFFALSE 54971
// exit ;
54969: GO 55020
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54971: LD_VAR 0 2
54975: PUSH
54976: LD_INT 29
54978: PUSH
54979: LD_INT 30
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: IN
54986: PUSH
54987: LD_VAR 0 3
54991: PPUSH
54992: LD_VAR 0 4
54996: PPUSH
54997: LD_VAR 0 9
55001: PPUSH
55002: CALL_OW 440
55006: NOT
55007: AND
55008: IFFALSE 55012
// exit ;
55010: GO 55020
// result := true ;
55012: LD_ADDR_VAR 0 6
55016: PUSH
55017: LD_INT 1
55019: ST_TO_ADDR
// end ;
55020: LD_VAR 0 6
55024: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55025: LD_INT 0
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
55050: PPUSH
55051: PPUSH
55052: PPUSH
55053: PPUSH
55054: PPUSH
55055: PPUSH
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
55081: PPUSH
55082: PPUSH
55083: PPUSH
55084: PPUSH
// result = [ ] ;
55085: LD_ADDR_VAR 0 7
55089: PUSH
55090: EMPTY
55091: ST_TO_ADDR
// temp_list = [ ] ;
55092: LD_ADDR_VAR 0 9
55096: PUSH
55097: EMPTY
55098: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55099: LD_VAR 0 4
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: LD_INT 4
55118: PUSH
55119: LD_INT 5
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: IN
55130: NOT
55131: PUSH
55132: LD_VAR 0 1
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: IN
55147: PUSH
55148: LD_VAR 0 5
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: IN
55167: NOT
55168: AND
55169: OR
55170: IFFALSE 55174
// exit ;
55172: GO 73565
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55174: LD_VAR 0 1
55178: PUSH
55179: LD_INT 6
55181: PUSH
55182: LD_INT 7
55184: PUSH
55185: LD_INT 8
55187: PUSH
55188: LD_INT 13
55190: PUSH
55191: LD_INT 12
55193: PUSH
55194: LD_INT 15
55196: PUSH
55197: LD_INT 11
55199: PUSH
55200: LD_INT 14
55202: PUSH
55203: LD_INT 10
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: IN
55217: IFFALSE 55227
// btype = b_lab ;
55219: LD_ADDR_VAR 0 1
55223: PUSH
55224: LD_INT 6
55226: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55227: LD_VAR 0 6
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: IN
55246: NOT
55247: PUSH
55248: LD_VAR 0 1
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 3
55264: PUSH
55265: LD_INT 6
55267: PUSH
55268: LD_INT 36
55270: PUSH
55271: LD_INT 4
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: LD_INT 31
55279: PUSH
55280: LD_INT 32
55282: PUSH
55283: LD_INT 33
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: IN
55299: NOT
55300: PUSH
55301: LD_VAR 0 6
55305: PUSH
55306: LD_INT 1
55308: EQUAL
55309: AND
55310: OR
55311: PUSH
55312: LD_VAR 0 1
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: IN
55327: NOT
55328: PUSH
55329: LD_VAR 0 6
55333: PUSH
55334: LD_INT 2
55336: EQUAL
55337: AND
55338: OR
55339: IFFALSE 55349
// mode = 0 ;
55341: LD_ADDR_VAR 0 6
55345: PUSH
55346: LD_INT 0
55348: ST_TO_ADDR
// case mode of 0 :
55349: LD_VAR 0 6
55353: PUSH
55354: LD_INT 0
55356: DOUBLE
55357: EQUAL
55358: IFTRUE 55362
55360: GO 66815
55362: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55363: LD_ADDR_VAR 0 11
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55556: LD_ADDR_VAR 0 12
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 3
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55752: LD_ADDR_VAR 0 13
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55951: LD_ADDR_VAR 0 14
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 3
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 3
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56147: LD_ADDR_VAR 0 15
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56340: LD_ADDR_VAR 0 16
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56533: LD_ADDR_VAR 0 17
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56763: LD_ADDR_VAR 0 18
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56993: LD_ADDR_VAR 0 19
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57223: LD_ADDR_VAR 0 20
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57453: LD_ADDR_VAR 0 21
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57683: LD_ADDR_VAR 0 22
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 2
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57913: LD_ADDR_VAR 0 23
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58193: LD_ADDR_VAR 0 24
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 2
58369: NEG
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 3
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58469: LD_ADDR_VAR 0 25
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58743: LD_ADDR_VAR 0 26
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: LD_INT 3
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 3
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59019: LD_ADDR_VAR 0 27
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59299: LD_ADDR_VAR 0 28
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: NEG
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: LD_INT 3
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59581: LD_ADDR_VAR 0 29
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 2
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 3
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 3
59825: NEG
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59860: LD_ADDR_VAR 0 30
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 3
60103: NEG
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60138: LD_ADDR_VAR 0 31
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: LD_INT 3
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60416: LD_ADDR_VAR 0 32
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: LD_INT 2
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 0
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 3
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60694: LD_ADDR_VAR 0 33
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 0
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: LD_INT 2
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 3
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: LD_INT 3
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: LD_INT 2
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60973: LD_ADDR_VAR 0 34
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: NEG
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: LD_INT 2
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: LD_INT 3
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: LD_INT 3
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61253: LD_ADDR_VAR 0 35
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 1
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: LD_INT 1
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61365: LD_ADDR_VAR 0 36
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61477: LD_ADDR_VAR 0 37
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61589: LD_ADDR_VAR 0 38
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61701: LD_ADDR_VAR 0 39
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61813: LD_ADDR_VAR 0 40
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61925: LD_ADDR_VAR 0 41
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: NEG
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: LD_INT 2
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: NEG
62116: PUSH
62117: LD_INT 3
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 3
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 3
62168: PUSH
62169: LD_INT 3
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 2
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 3
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: LD_INT 3
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62275: LD_ADDR_VAR 0 42
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 2
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: LD_INT 3
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: LD_INT 3
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 3
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: LD_INT 3
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62625: LD_ADDR_VAR 0 43
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 3
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: LD_INT 1
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 3
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 3
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 3
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 3
62921: NEG
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 3
62932: NEG
62933: PUSH
62934: LD_INT 1
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62973: LD_ADDR_VAR 0 44
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: LD_INT 0
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: LD_INT 1
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: LD_INT 2
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: LD_INT 3
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: LD_INT 3
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: NEG
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 3
63258: NEG
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 3
63282: NEG
63283: PUSH
63284: LD_INT 3
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63323: LD_ADDR_VAR 0 45
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 2
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: LD_INT 3
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: LD_INT 3
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 3
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 3
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: NEG
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: LD_INT 3
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63673: LD_ADDR_VAR 0 46
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 2
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 2
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 3
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 3
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 3
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 3
63969: NEG
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 3
63980: NEG
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64021: LD_ADDR_VAR 0 47
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: LD_INT 1
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: LD_INT 2
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 2
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: NEG
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64172: LD_ADDR_VAR 0 48
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 1
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: NEG
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: LD_INT 2
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 2
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64319: LD_ADDR_VAR 0 49
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64463: LD_ADDR_VAR 0 50
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 2
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64607: LD_ADDR_VAR 0 51
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64754: LD_ADDR_VAR 0 52
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 2
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64905: LD_ADDR_VAR 0 53
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: NEG
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 2
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: PUSH
65041: LD_INT 2
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: LD_INT 2
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: LD_INT 2
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 2
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: LD_INT 2
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65135: LD_ADDR_VAR 0 54
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: LD_INT 0
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 1
65204: NEG
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: LD_INT 1
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 2
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 2
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: LD_INT 2
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: LD_INT 2
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 1
65300: NEG
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: NEG
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 2
65322: NEG
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 2
65334: NEG
65335: PUSH
65336: LD_INT 2
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65365: LD_ADDR_VAR 0 55
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 2
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 2
65552: NEG
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 2
65564: NEG
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65595: LD_ADDR_VAR 0 56
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: NEG
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 2
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: LD_INT 1
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 2
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 2
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: LD_INT 1
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 2
65771: NEG
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 2
65782: NEG
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65825: LD_ADDR_VAR 0 57
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 2
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: LD_INT 2
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 2
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 2
66001: NEG
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66055: LD_ADDR_VAR 0 58
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 2
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 2
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: LD_INT 2
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: LD_INT 2
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66285: LD_ADDR_VAR 0 59
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66373: LD_ADDR_VAR 0 60
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: NEG
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: NEG
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66461: LD_ADDR_VAR 0 61
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66549: LD_ADDR_VAR 0 62
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 1
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: NEG
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66637: LD_ADDR_VAR 0 63
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: LD_INT 1
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: LD_INT 1
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66725: LD_ADDR_VAR 0 64
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: LD_INT 1
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: LD_INT 1
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 1
66783: NEG
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 1
66794: NEG
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: ST_TO_ADDR
// end ; 1 :
66813: GO 72710
66815: LD_INT 1
66817: DOUBLE
66818: EQUAL
66819: IFTRUE 66823
66821: GO 69446
66823: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66824: LD_ADDR_VAR 0 11
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 3
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66868: LD_ADDR_VAR 0 12
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 3
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 3
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66909: LD_ADDR_VAR 0 13
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 3
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66949: LD_ADDR_VAR 0 14
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: LD_INT 3
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 3
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66990: LD_ADDR_VAR 0 15
66994: PUSH
66995: LD_INT 2
66997: NEG
66998: PUSH
66999: LD_INT 1
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 3
67008: NEG
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 3
67019: NEG
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67034: LD_ADDR_VAR 0 16
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 3
67053: NEG
67054: PUSH
67055: LD_INT 2
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: LD_INT 3
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67080: LD_ADDR_VAR 0 17
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67124: LD_ADDR_VAR 0 18
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 3
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67165: LD_ADDR_VAR 0 19
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: LIST
67204: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67205: LD_ADDR_VAR 0 20
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67246: LD_ADDR_VAR 0 21
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67290: LD_ADDR_VAR 0 22
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: NEG
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: LD_INT 3
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67336: LD_ADDR_VAR 0 23
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: LD_INT 3
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 4
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: LD_INT 3
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67380: LD_ADDR_VAR 0 24
67384: PUSH
67385: LD_INT 3
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 3
67397: PUSH
67398: LD_INT 1
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 4
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67421: LD_ADDR_VAR 0 25
67425: PUSH
67426: LD_INT 3
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 4
67438: PUSH
67439: LD_INT 3
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 3
67448: PUSH
67449: LD_INT 4
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67461: LD_ADDR_VAR 0 26
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: LD_INT 3
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: LD_INT 4
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67502: LD_ADDR_VAR 0 27
67506: PUSH
67507: LD_INT 3
67509: NEG
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 4
67531: NEG
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67546: LD_ADDR_VAR 0 28
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 3
67565: NEG
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 4
67577: NEG
67578: PUSH
67579: LD_INT 3
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67592: LD_ADDR_VAR 0 29
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: PUSH
67601: LD_INT 3
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: LD_INT 3
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: LD_INT 2
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: LD_INT 4
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 4
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 3
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: LD_INT 5
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 5
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: LD_INT 4
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 6
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: LD_INT 6
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: LD_INT 5
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67747: LD_ADDR_VAR 0 30
67751: PUSH
67752: LD_INT 2
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 4
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 5
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 5
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 5
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 6
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 6
67868: PUSH
67869: LD_INT 1
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67890: LD_ADDR_VAR 0 31
67894: PUSH
67895: LD_INT 3
67897: PUSH
67898: LD_INT 2
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 3
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: LD_INT 3
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 4
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: PUSH
67938: LD_INT 4
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: LD_INT 4
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 5
67957: PUSH
67958: LD_INT 4
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 5
67967: PUSH
67968: LD_INT 5
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 4
67977: PUSH
67978: LD_INT 5
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 6
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 6
67997: PUSH
67998: LD_INT 6
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 5
68007: PUSH
68008: LD_INT 6
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68029: LD_ADDR_VAR 0 32
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 0
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: NEG
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 4
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 3
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: LD_INT 5
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: LD_INT 5
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 1
68118: NEG
68119: PUSH
68120: LD_INT 4
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 1
68129: PUSH
68130: LD_INT 6
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: LD_INT 6
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 1
68149: NEG
68150: PUSH
68151: LD_INT 5
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68172: LD_ADDR_VAR 0 33
68176: PUSH
68177: LD_INT 2
68179: NEG
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 3
68190: NEG
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 3
68201: NEG
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 3
68213: NEG
68214: PUSH
68215: LD_INT 1
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 4
68224: NEG
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 4
68235: NEG
68236: PUSH
68237: LD_INT 1
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 4
68247: NEG
68248: PUSH
68249: LD_INT 1
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 5
68258: NEG
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 5
68269: NEG
68270: PUSH
68271: LD_INT 1
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 5
68281: NEG
68282: PUSH
68283: LD_INT 1
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 6
68292: NEG
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 6
68303: NEG
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68327: LD_ADDR_VAR 0 34
68331: PUSH
68332: LD_INT 2
68334: NEG
68335: PUSH
68336: LD_INT 3
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 3
68346: NEG
68347: PUSH
68348: LD_INT 2
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 3
68370: NEG
68371: PUSH
68372: LD_INT 4
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 4
68382: NEG
68383: PUSH
68384: LD_INT 3
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 4
68394: NEG
68395: PUSH
68396: LD_INT 4
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: LD_INT 5
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 5
68418: NEG
68419: PUSH
68420: LD_INT 4
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 5
68430: NEG
68431: PUSH
68432: LD_INT 5
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 5
68442: NEG
68443: PUSH
68444: LD_INT 6
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 6
68454: NEG
68455: PUSH
68456: LD_INT 5
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 6
68466: NEG
68467: PUSH
68468: LD_INT 6
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68490: LD_ADDR_VAR 0 41
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: LD_INT 2
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: LD_INT 3
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 1
68520: PUSH
68521: LD_INT 2
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68534: LD_ADDR_VAR 0 42
68538: PUSH
68539: LD_INT 2
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 2
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68575: LD_ADDR_VAR 0 43
68579: PUSH
68580: LD_INT 2
68582: PUSH
68583: LD_INT 2
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: LD_INT 2
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 2
68602: PUSH
68603: LD_INT 3
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: LIST
68614: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68615: LD_ADDR_VAR 0 44
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: LD_INT 3
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: LIST
68655: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68656: LD_ADDR_VAR 0 45
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: LD_INT 0
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 2
68674: NEG
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 3
68685: NEG
68686: PUSH
68687: LD_INT 1
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: LIST
68699: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68700: LD_ADDR_VAR 0 46
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: LD_INT 2
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: LD_INT 3
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: LD_INT 2
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: LIST
68745: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68746: LD_ADDR_VAR 0 47
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: LD_INT 3
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68779: LD_ADDR_VAR 0 48
68783: PUSH
68784: LD_INT 1
68786: PUSH
68787: LD_INT 2
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 2
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68810: LD_ADDR_VAR 0 49
68814: PUSH
68815: LD_INT 3
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 3
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68839: LD_ADDR_VAR 0 50
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: LD_INT 3
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: LD_INT 3
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68868: LD_ADDR_VAR 0 51
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 2
68886: NEG
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68899: LD_ADDR_VAR 0 52
68903: PUSH
68904: LD_INT 3
68906: NEG
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 3
68918: NEG
68919: PUSH
68920: LD_INT 2
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68932: LD_ADDR_VAR 0 53
68936: PUSH
68937: LD_INT 1
68939: NEG
68940: PUSH
68941: LD_INT 3
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 0
68951: PUSH
68952: LD_INT 3
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: LD_INT 2
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: LIST
68975: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68976: LD_ADDR_VAR 0 54
68980: PUSH
68981: LD_INT 2
68983: PUSH
68984: LD_INT 1
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 3
69004: PUSH
69005: LD_INT 1
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: LIST
69016: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69017: LD_ADDR_VAR 0 55
69021: PUSH
69022: LD_INT 3
69024: PUSH
69025: LD_INT 2
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 3
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 2
69044: PUSH
69045: LD_INT 3
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: LIST
69056: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69057: LD_ADDR_VAR 0 56
69061: PUSH
69062: LD_INT 1
69064: PUSH
69065: LD_INT 3
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 0
69074: PUSH
69075: LD_INT 3
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: NEG
69085: PUSH
69086: LD_INT 2
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: LIST
69097: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69098: LD_ADDR_VAR 0 57
69102: PUSH
69103: LD_INT 2
69105: NEG
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: LIST
69141: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69142: LD_ADDR_VAR 0 58
69146: PUSH
69147: LD_INT 2
69149: NEG
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: NEG
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 3
69173: NEG
69174: PUSH
69175: LD_INT 3
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: LIST
69187: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69188: LD_ADDR_VAR 0 59
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: LD_INT 2
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 0
69207: PUSH
69208: LD_INT 2
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: LD_INT 1
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69232: LD_ADDR_VAR 0 60
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: LD_INT 1
69242: NEG
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 2
69250: PUSH
69251: LD_INT 0
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 2
69260: PUSH
69261: LD_INT 1
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: LIST
69272: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69273: LD_ADDR_VAR 0 61
69277: PUSH
69278: LD_INT 2
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 2
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: LIST
69312: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69313: LD_ADDR_VAR 0 62
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: LD_INT 2
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: LD_INT 2
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: NEG
69341: PUSH
69342: LD_INT 1
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69354: LD_ADDR_VAR 0 63
69358: PUSH
69359: LD_INT 1
69361: NEG
69362: PUSH
69363: LD_INT 1
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 2
69372: NEG
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: LD_INT 1
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: LIST
69397: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69398: LD_ADDR_VAR 0 64
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 2
69417: NEG
69418: PUSH
69419: LD_INT 1
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: LD_INT 2
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: LIST
69443: ST_TO_ADDR
// end ; 2 :
69444: GO 72710
69446: LD_INT 2
69448: DOUBLE
69449: EQUAL
69450: IFTRUE 69454
69452: GO 72709
69454: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69455: LD_ADDR_VAR 0 29
69459: PUSH
69460: LD_INT 4
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 4
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 5
69483: PUSH
69484: LD_INT 0
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 5
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 4
69503: PUSH
69504: LD_INT 1
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 3
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 3
69523: PUSH
69524: LD_INT 1
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 3
69534: PUSH
69535: LD_INT 2
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 5
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 3
69555: PUSH
69556: LD_INT 3
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: LD_INT 2
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 4
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 4
69585: PUSH
69586: LD_INT 4
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 3
69595: PUSH
69596: LD_INT 4
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 2
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: LD_INT 2
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: LD_INT 4
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 0
69645: PUSH
69646: LD_INT 4
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 0
69655: PUSH
69656: LD_INT 3
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 1
69665: PUSH
69666: LD_INT 4
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 1
69675: PUSH
69676: LD_INT 5
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_INT 5
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 1
69695: NEG
69696: PUSH
69697: LD_INT 4
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: LD_INT 3
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 2
69717: PUSH
69718: LD_INT 5
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 2
69727: NEG
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 3
69738: NEG
69739: PUSH
69740: LD_INT 0
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 3
69749: NEG
69750: PUSH
69751: LD_INT 1
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 2
69761: NEG
69762: PUSH
69763: LD_INT 0
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 2
69772: NEG
69773: PUSH
69774: LD_INT 1
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 3
69783: NEG
69784: PUSH
69785: LD_INT 1
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 4
69794: NEG
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 4
69805: NEG
69806: PUSH
69807: LD_INT 1
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 4
69817: NEG
69818: PUSH
69819: LD_INT 2
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 2
69829: NEG
69830: PUSH
69831: LD_INT 2
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 4
69840: NEG
69841: PUSH
69842: LD_INT 4
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 4
69852: NEG
69853: PUSH
69854: LD_INT 5
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 3
69864: NEG
69865: PUSH
69866: LD_INT 4
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 3
69876: NEG
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 4
69888: NEG
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 5
69900: NEG
69901: PUSH
69902: LD_INT 4
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 5
69912: NEG
69913: PUSH
69914: LD_INT 5
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 3
69924: NEG
69925: PUSH
69926: LD_INT 5
69928: NEG
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 5
69936: NEG
69937: PUSH
69938: LD_INT 3
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69993: LD_ADDR_VAR 0 30
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: LD_INT 4
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 4
70010: PUSH
70011: LD_INT 3
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 5
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: LD_INT 5
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 4
70040: PUSH
70041: LD_INT 5
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 3
70050: PUSH
70051: LD_INT 4
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 3
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 5
70070: PUSH
70071: LD_INT 3
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: LD_INT 5
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: LD_INT 2
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 1
70110: PUSH
70111: LD_INT 3
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 1
70120: PUSH
70121: LD_INT 4
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: LD_INT 4
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 1
70151: NEG
70152: PUSH
70153: LD_INT 2
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 2
70162: PUSH
70163: LD_INT 4
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 2
70172: NEG
70173: PUSH
70174: LD_INT 2
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 4
70183: NEG
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 4
70194: NEG
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 3
70206: NEG
70207: PUSH
70208: LD_INT 0
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 3
70217: NEG
70218: PUSH
70219: LD_INT 1
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 4
70228: NEG
70229: PUSH
70230: LD_INT 1
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 5
70239: NEG
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 5
70250: NEG
70251: PUSH
70252: LD_INT 1
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 5
70262: NEG
70263: PUSH
70264: LD_INT 2
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 3
70274: NEG
70275: PUSH
70276: LD_INT 2
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 3
70285: NEG
70286: PUSH
70287: LD_INT 3
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 3
70297: NEG
70298: PUSH
70299: LD_INT 4
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 2
70309: NEG
70310: PUSH
70311: LD_INT 3
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: LD_INT 2
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 3
70333: NEG
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 4
70345: NEG
70346: PUSH
70347: LD_INT 3
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 4
70357: NEG
70358: PUSH
70359: LD_INT 4
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 2
70369: NEG
70370: PUSH
70371: LD_INT 4
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 4
70381: NEG
70382: PUSH
70383: LD_INT 2
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 0
70393: PUSH
70394: LD_INT 4
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: LD_INT 5
70407: NEG
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 1
70415: PUSH
70416: LD_INT 4
70418: NEG
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 1
70426: PUSH
70427: LD_INT 3
70429: NEG
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: LD_INT 3
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 1
70448: NEG
70449: PUSH
70450: LD_INT 4
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 1
70460: NEG
70461: PUSH
70462: LD_INT 5
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: LD_INT 3
70475: NEG
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 2
70483: NEG
70484: PUSH
70485: LD_INT 5
70487: NEG
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70540: LD_ADDR_VAR 0 31
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 4
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 0
70557: PUSH
70558: LD_INT 3
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 1
70567: PUSH
70568: LD_INT 4
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 1
70577: PUSH
70578: LD_INT 5
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 0
70587: PUSH
70588: LD_INT 5
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: LD_INT 4
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 2
70619: PUSH
70620: LD_INT 5
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 2
70629: NEG
70630: PUSH
70631: LD_INT 3
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 3
70640: NEG
70641: PUSH
70642: LD_INT 0
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 3
70651: NEG
70652: PUSH
70653: LD_INT 1
70655: NEG
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 2
70663: NEG
70664: PUSH
70665: LD_INT 0
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 2
70674: NEG
70675: PUSH
70676: LD_INT 1
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 3
70685: NEG
70686: PUSH
70687: LD_INT 1
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 4
70696: NEG
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 4
70707: NEG
70708: PUSH
70709: LD_INT 1
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 4
70719: NEG
70720: PUSH
70721: LD_INT 2
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: LD_INT 2
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 4
70742: NEG
70743: PUSH
70744: LD_INT 4
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 4
70754: NEG
70755: PUSH
70756: LD_INT 5
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 3
70766: NEG
70767: PUSH
70768: LD_INT 4
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 3
70778: NEG
70779: PUSH
70780: LD_INT 3
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 4
70790: NEG
70791: PUSH
70792: LD_INT 3
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 5
70802: NEG
70803: PUSH
70804: LD_INT 4
70806: NEG
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 5
70814: NEG
70815: PUSH
70816: LD_INT 5
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: NEG
70827: PUSH
70828: LD_INT 5
70830: NEG
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 5
70838: NEG
70839: PUSH
70840: LD_INT 3
70842: NEG
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 0
70850: PUSH
70851: LD_INT 3
70853: NEG
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: LD_INT 4
70864: NEG
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: LD_INT 3
70875: NEG
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 1
70883: PUSH
70884: LD_INT 2
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: LD_INT 2
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 1
70905: NEG
70906: PUSH
70907: LD_INT 3
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 1
70917: NEG
70918: PUSH
70919: LD_INT 4
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 2
70929: PUSH
70930: LD_INT 2
70932: NEG
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 2
70940: NEG
70941: PUSH
70942: LD_INT 4
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 4
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 4
70962: PUSH
70963: LD_INT 1
70965: NEG
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 5
70973: PUSH
70974: LD_INT 0
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 5
70983: PUSH
70984: LD_INT 1
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 4
70993: PUSH
70994: LD_INT 1
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 3
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 3
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 3
71024: PUSH
71025: LD_INT 2
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 5
71035: PUSH
71036: LD_INT 2
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71090: LD_ADDR_VAR 0 32
71094: PUSH
71095: LD_INT 4
71097: NEG
71098: PUSH
71099: LD_INT 0
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 4
71108: NEG
71109: PUSH
71110: LD_INT 1
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 3
71120: NEG
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 3
71131: NEG
71132: PUSH
71133: LD_INT 1
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 4
71142: NEG
71143: PUSH
71144: LD_INT 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 5
71153: NEG
71154: PUSH
71155: LD_INT 0
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 5
71164: NEG
71165: PUSH
71166: LD_INT 1
71168: NEG
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 5
71176: NEG
71177: PUSH
71178: LD_INT 2
71180: NEG
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 3
71188: NEG
71189: PUSH
71190: LD_INT 2
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 3
71199: NEG
71200: PUSH
71201: LD_INT 3
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 3
71211: NEG
71212: PUSH
71213: LD_INT 4
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 2
71223: NEG
71224: PUSH
71225: LD_INT 3
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 2
71235: NEG
71236: PUSH
71237: LD_INT 2
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 3
71247: NEG
71248: PUSH
71249: LD_INT 2
71251: NEG
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 4
71259: NEG
71260: PUSH
71261: LD_INT 3
71263: NEG
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 4
71271: NEG
71272: PUSH
71273: LD_INT 4
71275: NEG
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 2
71283: NEG
71284: PUSH
71285: LD_INT 4
71287: NEG
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 4
71295: NEG
71296: PUSH
71297: LD_INT 2
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 0
71307: PUSH
71308: LD_INT 4
71310: NEG
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: LD_INT 5
71321: NEG
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 1
71329: PUSH
71330: LD_INT 4
71332: NEG
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 1
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: LD_INT 3
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 1
71362: NEG
71363: PUSH
71364: LD_INT 4
71366: NEG
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 1
71374: NEG
71375: PUSH
71376: LD_INT 5
71378: NEG
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 2
71386: PUSH
71387: LD_INT 3
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 2
71397: NEG
71398: PUSH
71399: LD_INT 5
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 3
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 3
71419: PUSH
71420: LD_INT 1
71422: NEG
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 4
71430: PUSH
71431: LD_INT 0
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 4
71440: PUSH
71441: LD_INT 1
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 3
71450: PUSH
71451: LD_INT 1
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 2
71460: PUSH
71461: LD_INT 0
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 2
71470: PUSH
71471: LD_INT 1
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: LD_INT 2
71484: NEG
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 4
71492: PUSH
71493: LD_INT 2
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 4
71502: PUSH
71503: LD_INT 4
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 4
71512: PUSH
71513: LD_INT 3
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 5
71522: PUSH
71523: LD_INT 4
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 5
71532: PUSH
71533: LD_INT 5
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 4
71542: PUSH
71543: LD_INT 5
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 3
71552: PUSH
71553: LD_INT 4
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 3
71562: PUSH
71563: LD_INT 3
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 5
71572: PUSH
71573: LD_INT 3
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: LD_INT 3
71582: PUSH
71583: LD_INT 5
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71637: LD_ADDR_VAR 0 33
71641: PUSH
71642: LD_INT 4
71644: NEG
71645: PUSH
71646: LD_INT 4
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 4
71656: NEG
71657: PUSH
71658: LD_INT 5
71660: NEG
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 3
71668: NEG
71669: PUSH
71670: LD_INT 4
71672: NEG
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 3
71680: NEG
71681: PUSH
71682: LD_INT 3
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 4
71692: NEG
71693: PUSH
71694: LD_INT 3
71696: NEG
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 5
71704: NEG
71705: PUSH
71706: LD_INT 4
71708: NEG
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 5
71716: NEG
71717: PUSH
71718: LD_INT 5
71720: NEG
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 3
71728: NEG
71729: PUSH
71730: LD_INT 5
71732: NEG
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 5
71740: NEG
71741: PUSH
71742: LD_INT 3
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 0
71752: PUSH
71753: LD_INT 3
71755: NEG
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 0
71763: PUSH
71764: LD_INT 4
71766: NEG
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 1
71774: PUSH
71775: LD_INT 3
71777: NEG
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 1
71785: PUSH
71786: LD_INT 2
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 0
71796: PUSH
71797: LD_INT 2
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 1
71807: NEG
71808: PUSH
71809: LD_INT 3
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 1
71819: NEG
71820: PUSH
71821: LD_INT 4
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 2
71831: PUSH
71832: LD_INT 2
71834: NEG
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 2
71842: NEG
71843: PUSH
71844: LD_INT 4
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 4
71854: PUSH
71855: LD_INT 0
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 4
71864: PUSH
71865: LD_INT 1
71867: NEG
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 5
71875: PUSH
71876: LD_INT 0
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 5
71885: PUSH
71886: LD_INT 1
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 4
71895: PUSH
71896: LD_INT 1
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: LD_INT 3
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 3
71915: PUSH
71916: LD_INT 1
71918: NEG
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 3
71926: PUSH
71927: LD_INT 2
71929: NEG
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 5
71937: PUSH
71938: LD_INT 2
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 3
71947: PUSH
71948: LD_INT 3
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 3
71957: PUSH
71958: LD_INT 2
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 4
71967: PUSH
71968: LD_INT 3
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 4
71977: PUSH
71978: LD_INT 4
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 3
71987: PUSH
71988: LD_INT 4
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 2
71997: PUSH
71998: LD_INT 3
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 2
72007: PUSH
72008: LD_INT 2
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 4
72017: PUSH
72018: LD_INT 2
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 2
72027: PUSH
72028: LD_INT 4
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: LD_INT 4
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 0
72047: PUSH
72048: LD_INT 3
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: LD_INT 4
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 1
72067: PUSH
72068: LD_INT 5
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 0
72077: PUSH
72078: LD_INT 5
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 1
72087: NEG
72088: PUSH
72089: LD_INT 4
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 1
72098: NEG
72099: PUSH
72100: LD_INT 3
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 2
72109: PUSH
72110: LD_INT 5
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 2
72119: NEG
72120: PUSH
72121: LD_INT 3
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72175: LD_ADDR_VAR 0 34
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: LD_INT 4
72185: NEG
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: LD_INT 5
72196: NEG
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: LD_INT 4
72207: NEG
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 1
72215: PUSH
72216: LD_INT 3
72218: NEG
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 0
72226: PUSH
72227: LD_INT 3
72229: NEG
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 1
72237: NEG
72238: PUSH
72239: LD_INT 4
72241: NEG
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 1
72249: NEG
72250: PUSH
72251: LD_INT 5
72253: NEG
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 2
72261: PUSH
72262: LD_INT 3
72264: NEG
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 2
72272: NEG
72273: PUSH
72274: LD_INT 5
72276: NEG
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 3
72284: PUSH
72285: LD_INT 0
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 3
72294: PUSH
72295: LD_INT 1
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 4
72305: PUSH
72306: LD_INT 0
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 4
72315: PUSH
72316: LD_INT 1
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 3
72325: PUSH
72326: LD_INT 1
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 2
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 2
72345: PUSH
72346: LD_INT 1
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 2
72356: PUSH
72357: LD_INT 2
72359: NEG
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 4
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 4
72377: PUSH
72378: LD_INT 4
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 4
72387: PUSH
72388: LD_INT 3
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 5
72397: PUSH
72398: LD_INT 4
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 5
72407: PUSH
72408: LD_INT 5
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 4
72417: PUSH
72418: LD_INT 5
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 3
72427: PUSH
72428: LD_INT 4
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 3
72437: PUSH
72438: LD_INT 3
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 5
72447: PUSH
72448: LD_INT 3
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 3
72457: PUSH
72458: LD_INT 5
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 0
72467: PUSH
72468: LD_INT 3
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 0
72477: PUSH
72478: LD_INT 2
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 1
72487: PUSH
72488: LD_INT 3
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 1
72497: PUSH
72498: LD_INT 4
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: LD_INT 4
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 1
72517: NEG
72518: PUSH
72519: LD_INT 3
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 1
72528: NEG
72529: PUSH
72530: LD_INT 2
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 2
72539: PUSH
72540: LD_INT 4
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 2
72549: NEG
72550: PUSH
72551: LD_INT 2
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 4
72560: NEG
72561: PUSH
72562: LD_INT 0
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 4
72571: NEG
72572: PUSH
72573: LD_INT 1
72575: NEG
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 3
72583: NEG
72584: PUSH
72585: LD_INT 0
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 3
72594: NEG
72595: PUSH
72596: LD_INT 1
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 4
72605: NEG
72606: PUSH
72607: LD_INT 1
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: LD_INT 5
72616: NEG
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 5
72627: NEG
72628: PUSH
72629: LD_INT 1
72631: NEG
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 5
72639: NEG
72640: PUSH
72641: LD_INT 2
72643: NEG
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 3
72651: NEG
72652: PUSH
72653: LD_INT 2
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: ST_TO_ADDR
// end ; end ;
72707: GO 72710
72709: POP
// case btype of b_depot , b_warehouse :
72710: LD_VAR 0 1
72714: PUSH
72715: LD_INT 0
72717: DOUBLE
72718: EQUAL
72719: IFTRUE 72729
72721: LD_INT 1
72723: DOUBLE
72724: EQUAL
72725: IFTRUE 72729
72727: GO 72930
72729: POP
// case nation of nation_american :
72730: LD_VAR 0 5
72734: PUSH
72735: LD_INT 1
72737: DOUBLE
72738: EQUAL
72739: IFTRUE 72743
72741: GO 72799
72743: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72744: LD_ADDR_VAR 0 9
72748: PUSH
72749: LD_VAR 0 11
72753: PUSH
72754: LD_VAR 0 12
72758: PUSH
72759: LD_VAR 0 13
72763: PUSH
72764: LD_VAR 0 14
72768: PUSH
72769: LD_VAR 0 15
72773: PUSH
72774: LD_VAR 0 16
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: PUSH
72787: LD_VAR 0 4
72791: PUSH
72792: LD_INT 1
72794: PLUS
72795: ARRAY
72796: ST_TO_ADDR
72797: GO 72928
72799: LD_INT 2
72801: DOUBLE
72802: EQUAL
72803: IFTRUE 72807
72805: GO 72863
72807: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72808: LD_ADDR_VAR 0 9
72812: PUSH
72813: LD_VAR 0 17
72817: PUSH
72818: LD_VAR 0 18
72822: PUSH
72823: LD_VAR 0 19
72827: PUSH
72828: LD_VAR 0 20
72832: PUSH
72833: LD_VAR 0 21
72837: PUSH
72838: LD_VAR 0 22
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: PUSH
72851: LD_VAR 0 4
72855: PUSH
72856: LD_INT 1
72858: PLUS
72859: ARRAY
72860: ST_TO_ADDR
72861: GO 72928
72863: LD_INT 3
72865: DOUBLE
72866: EQUAL
72867: IFTRUE 72871
72869: GO 72927
72871: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72872: LD_ADDR_VAR 0 9
72876: PUSH
72877: LD_VAR 0 23
72881: PUSH
72882: LD_VAR 0 24
72886: PUSH
72887: LD_VAR 0 25
72891: PUSH
72892: LD_VAR 0 26
72896: PUSH
72897: LD_VAR 0 27
72901: PUSH
72902: LD_VAR 0 28
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: PUSH
72915: LD_VAR 0 4
72919: PUSH
72920: LD_INT 1
72922: PLUS
72923: ARRAY
72924: ST_TO_ADDR
72925: GO 72928
72927: POP
72928: GO 73483
72930: LD_INT 2
72932: DOUBLE
72933: EQUAL
72934: IFTRUE 72944
72936: LD_INT 3
72938: DOUBLE
72939: EQUAL
72940: IFTRUE 72944
72942: GO 73000
72944: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72945: LD_ADDR_VAR 0 9
72949: PUSH
72950: LD_VAR 0 29
72954: PUSH
72955: LD_VAR 0 30
72959: PUSH
72960: LD_VAR 0 31
72964: PUSH
72965: LD_VAR 0 32
72969: PUSH
72970: LD_VAR 0 33
72974: PUSH
72975: LD_VAR 0 34
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: PUSH
72988: LD_VAR 0 4
72992: PUSH
72993: LD_INT 1
72995: PLUS
72996: ARRAY
72997: ST_TO_ADDR
72998: GO 73483
73000: LD_INT 16
73002: DOUBLE
73003: EQUAL
73004: IFTRUE 73062
73006: LD_INT 17
73008: DOUBLE
73009: EQUAL
73010: IFTRUE 73062
73012: LD_INT 18
73014: DOUBLE
73015: EQUAL
73016: IFTRUE 73062
73018: LD_INT 19
73020: DOUBLE
73021: EQUAL
73022: IFTRUE 73062
73024: LD_INT 22
73026: DOUBLE
73027: EQUAL
73028: IFTRUE 73062
73030: LD_INT 20
73032: DOUBLE
73033: EQUAL
73034: IFTRUE 73062
73036: LD_INT 21
73038: DOUBLE
73039: EQUAL
73040: IFTRUE 73062
73042: LD_INT 23
73044: DOUBLE
73045: EQUAL
73046: IFTRUE 73062
73048: LD_INT 24
73050: DOUBLE
73051: EQUAL
73052: IFTRUE 73062
73054: LD_INT 25
73056: DOUBLE
73057: EQUAL
73058: IFTRUE 73062
73060: GO 73118
73062: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73063: LD_ADDR_VAR 0 9
73067: PUSH
73068: LD_VAR 0 35
73072: PUSH
73073: LD_VAR 0 36
73077: PUSH
73078: LD_VAR 0 37
73082: PUSH
73083: LD_VAR 0 38
73087: PUSH
73088: LD_VAR 0 39
73092: PUSH
73093: LD_VAR 0 40
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: PUSH
73106: LD_VAR 0 4
73110: PUSH
73111: LD_INT 1
73113: PLUS
73114: ARRAY
73115: ST_TO_ADDR
73116: GO 73483
73118: LD_INT 6
73120: DOUBLE
73121: EQUAL
73122: IFTRUE 73174
73124: LD_INT 7
73126: DOUBLE
73127: EQUAL
73128: IFTRUE 73174
73130: LD_INT 8
73132: DOUBLE
73133: EQUAL
73134: IFTRUE 73174
73136: LD_INT 13
73138: DOUBLE
73139: EQUAL
73140: IFTRUE 73174
73142: LD_INT 12
73144: DOUBLE
73145: EQUAL
73146: IFTRUE 73174
73148: LD_INT 15
73150: DOUBLE
73151: EQUAL
73152: IFTRUE 73174
73154: LD_INT 11
73156: DOUBLE
73157: EQUAL
73158: IFTRUE 73174
73160: LD_INT 14
73162: DOUBLE
73163: EQUAL
73164: IFTRUE 73174
73166: LD_INT 10
73168: DOUBLE
73169: EQUAL
73170: IFTRUE 73174
73172: GO 73230
73174: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73175: LD_ADDR_VAR 0 9
73179: PUSH
73180: LD_VAR 0 41
73184: PUSH
73185: LD_VAR 0 42
73189: PUSH
73190: LD_VAR 0 43
73194: PUSH
73195: LD_VAR 0 44
73199: PUSH
73200: LD_VAR 0 45
73204: PUSH
73205: LD_VAR 0 46
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: PUSH
73218: LD_VAR 0 4
73222: PUSH
73223: LD_INT 1
73225: PLUS
73226: ARRAY
73227: ST_TO_ADDR
73228: GO 73483
73230: LD_INT 36
73232: DOUBLE
73233: EQUAL
73234: IFTRUE 73238
73236: GO 73294
73238: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73239: LD_ADDR_VAR 0 9
73243: PUSH
73244: LD_VAR 0 47
73248: PUSH
73249: LD_VAR 0 48
73253: PUSH
73254: LD_VAR 0 49
73258: PUSH
73259: LD_VAR 0 50
73263: PUSH
73264: LD_VAR 0 51
73268: PUSH
73269: LD_VAR 0 52
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: PUSH
73282: LD_VAR 0 4
73286: PUSH
73287: LD_INT 1
73289: PLUS
73290: ARRAY
73291: ST_TO_ADDR
73292: GO 73483
73294: LD_INT 4
73296: DOUBLE
73297: EQUAL
73298: IFTRUE 73320
73300: LD_INT 5
73302: DOUBLE
73303: EQUAL
73304: IFTRUE 73320
73306: LD_INT 34
73308: DOUBLE
73309: EQUAL
73310: IFTRUE 73320
73312: LD_INT 37
73314: DOUBLE
73315: EQUAL
73316: IFTRUE 73320
73318: GO 73376
73320: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73321: LD_ADDR_VAR 0 9
73325: PUSH
73326: LD_VAR 0 53
73330: PUSH
73331: LD_VAR 0 54
73335: PUSH
73336: LD_VAR 0 55
73340: PUSH
73341: LD_VAR 0 56
73345: PUSH
73346: LD_VAR 0 57
73350: PUSH
73351: LD_VAR 0 58
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: PUSH
73364: LD_VAR 0 4
73368: PUSH
73369: LD_INT 1
73371: PLUS
73372: ARRAY
73373: ST_TO_ADDR
73374: GO 73483
73376: LD_INT 31
73378: DOUBLE
73379: EQUAL
73380: IFTRUE 73426
73382: LD_INT 32
73384: DOUBLE
73385: EQUAL
73386: IFTRUE 73426
73388: LD_INT 33
73390: DOUBLE
73391: EQUAL
73392: IFTRUE 73426
73394: LD_INT 27
73396: DOUBLE
73397: EQUAL
73398: IFTRUE 73426
73400: LD_INT 26
73402: DOUBLE
73403: EQUAL
73404: IFTRUE 73426
73406: LD_INT 28
73408: DOUBLE
73409: EQUAL
73410: IFTRUE 73426
73412: LD_INT 29
73414: DOUBLE
73415: EQUAL
73416: IFTRUE 73426
73418: LD_INT 30
73420: DOUBLE
73421: EQUAL
73422: IFTRUE 73426
73424: GO 73482
73426: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73427: LD_ADDR_VAR 0 9
73431: PUSH
73432: LD_VAR 0 59
73436: PUSH
73437: LD_VAR 0 60
73441: PUSH
73442: LD_VAR 0 61
73446: PUSH
73447: LD_VAR 0 62
73451: PUSH
73452: LD_VAR 0 63
73456: PUSH
73457: LD_VAR 0 64
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: PUSH
73470: LD_VAR 0 4
73474: PUSH
73475: LD_INT 1
73477: PLUS
73478: ARRAY
73479: ST_TO_ADDR
73480: GO 73483
73482: POP
// temp_list2 = [ ] ;
73483: LD_ADDR_VAR 0 10
73487: PUSH
73488: EMPTY
73489: ST_TO_ADDR
// for i in temp_list do
73490: LD_ADDR_VAR 0 8
73494: PUSH
73495: LD_VAR 0 9
73499: PUSH
73500: FOR_IN
73501: IFFALSE 73553
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73503: LD_ADDR_VAR 0 10
73507: PUSH
73508: LD_VAR 0 10
73512: PUSH
73513: LD_VAR 0 8
73517: PUSH
73518: LD_INT 1
73520: ARRAY
73521: PUSH
73522: LD_VAR 0 2
73526: PLUS
73527: PUSH
73528: LD_VAR 0 8
73532: PUSH
73533: LD_INT 2
73535: ARRAY
73536: PUSH
73537: LD_VAR 0 3
73541: PLUS
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: EMPTY
73548: LIST
73549: ADD
73550: ST_TO_ADDR
73551: GO 73500
73553: POP
73554: POP
// result = temp_list2 ;
73555: LD_ADDR_VAR 0 7
73559: PUSH
73560: LD_VAR 0 10
73564: ST_TO_ADDR
// end ;
73565: LD_VAR 0 7
73569: RET
// export function EnemyInRange ( unit , dist ) ; begin
73570: LD_INT 0
73572: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73573: LD_ADDR_VAR 0 3
73577: PUSH
73578: LD_VAR 0 1
73582: PPUSH
73583: CALL_OW 255
73587: PPUSH
73588: LD_VAR 0 1
73592: PPUSH
73593: CALL_OW 250
73597: PPUSH
73598: LD_VAR 0 1
73602: PPUSH
73603: CALL_OW 251
73607: PPUSH
73608: LD_VAR 0 2
73612: PPUSH
73613: CALL 46943 0 4
73617: PUSH
73618: LD_INT 4
73620: ARRAY
73621: ST_TO_ADDR
// end ;
73622: LD_VAR 0 3
73626: RET
// export function PlayerSeeMe ( unit ) ; begin
73627: LD_INT 0
73629: PPUSH
// result := See ( your_side , unit ) ;
73630: LD_ADDR_VAR 0 2
73634: PUSH
73635: LD_OWVAR 2
73639: PPUSH
73640: LD_VAR 0 1
73644: PPUSH
73645: CALL_OW 292
73649: ST_TO_ADDR
// end ;
73650: LD_VAR 0 2
73654: RET
// export function ReverseDir ( unit ) ; begin
73655: LD_INT 0
73657: PPUSH
// if not unit then
73658: LD_VAR 0 1
73662: NOT
73663: IFFALSE 73667
// exit ;
73665: GO 73690
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73667: LD_ADDR_VAR 0 2
73671: PUSH
73672: LD_VAR 0 1
73676: PPUSH
73677: CALL_OW 254
73681: PUSH
73682: LD_INT 3
73684: PLUS
73685: PUSH
73686: LD_INT 6
73688: MOD
73689: ST_TO_ADDR
// end ;
73690: LD_VAR 0 2
73694: RET
// export function ReverseArray ( array ) ; var i ; begin
73695: LD_INT 0
73697: PPUSH
73698: PPUSH
// if not array then
73699: LD_VAR 0 1
73703: NOT
73704: IFFALSE 73708
// exit ;
73706: GO 73763
// result := [ ] ;
73708: LD_ADDR_VAR 0 2
73712: PUSH
73713: EMPTY
73714: ST_TO_ADDR
// for i := array downto 1 do
73715: LD_ADDR_VAR 0 3
73719: PUSH
73720: DOUBLE
73721: LD_VAR 0 1
73725: INC
73726: ST_TO_ADDR
73727: LD_INT 1
73729: PUSH
73730: FOR_DOWNTO
73731: IFFALSE 73761
// result := Join ( result , array [ i ] ) ;
73733: LD_ADDR_VAR 0 2
73737: PUSH
73738: LD_VAR 0 2
73742: PPUSH
73743: LD_VAR 0 1
73747: PUSH
73748: LD_VAR 0 3
73752: ARRAY
73753: PPUSH
73754: CALL 78408 0 2
73758: ST_TO_ADDR
73759: GO 73730
73761: POP
73762: POP
// end ;
73763: LD_VAR 0 2
73767: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73768: LD_INT 0
73770: PPUSH
73771: PPUSH
73772: PPUSH
73773: PPUSH
73774: PPUSH
73775: PPUSH
// if not unit or not hexes then
73776: LD_VAR 0 1
73780: NOT
73781: PUSH
73782: LD_VAR 0 2
73786: NOT
73787: OR
73788: IFFALSE 73792
// exit ;
73790: GO 73915
// dist := 9999 ;
73792: LD_ADDR_VAR 0 5
73796: PUSH
73797: LD_INT 9999
73799: ST_TO_ADDR
// for i = 1 to hexes do
73800: LD_ADDR_VAR 0 4
73804: PUSH
73805: DOUBLE
73806: LD_INT 1
73808: DEC
73809: ST_TO_ADDR
73810: LD_VAR 0 2
73814: PUSH
73815: FOR_TO
73816: IFFALSE 73903
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73818: LD_ADDR_VAR 0 6
73822: PUSH
73823: LD_VAR 0 1
73827: PPUSH
73828: LD_VAR 0 2
73832: PUSH
73833: LD_VAR 0 4
73837: ARRAY
73838: PUSH
73839: LD_INT 1
73841: ARRAY
73842: PPUSH
73843: LD_VAR 0 2
73847: PUSH
73848: LD_VAR 0 4
73852: ARRAY
73853: PUSH
73854: LD_INT 2
73856: ARRAY
73857: PPUSH
73858: CALL_OW 297
73862: ST_TO_ADDR
// if tdist < dist then
73863: LD_VAR 0 6
73867: PUSH
73868: LD_VAR 0 5
73872: LESS
73873: IFFALSE 73901
// begin hex := hexes [ i ] ;
73875: LD_ADDR_VAR 0 8
73879: PUSH
73880: LD_VAR 0 2
73884: PUSH
73885: LD_VAR 0 4
73889: ARRAY
73890: ST_TO_ADDR
// dist := tdist ;
73891: LD_ADDR_VAR 0 5
73895: PUSH
73896: LD_VAR 0 6
73900: ST_TO_ADDR
// end ; end ;
73901: GO 73815
73903: POP
73904: POP
// result := hex ;
73905: LD_ADDR_VAR 0 3
73909: PUSH
73910: LD_VAR 0 8
73914: ST_TO_ADDR
// end ;
73915: LD_VAR 0 3
73919: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73920: LD_INT 0
73922: PPUSH
73923: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73924: LD_VAR 0 1
73928: NOT
73929: PUSH
73930: LD_VAR 0 1
73934: PUSH
73935: LD_INT 21
73937: PUSH
73938: LD_INT 2
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 23
73947: PUSH
73948: LD_INT 2
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PPUSH
73959: CALL_OW 69
73963: IN
73964: NOT
73965: OR
73966: IFFALSE 73970
// exit ;
73968: GO 74017
// for i = 1 to 3 do
73970: LD_ADDR_VAR 0 3
73974: PUSH
73975: DOUBLE
73976: LD_INT 1
73978: DEC
73979: ST_TO_ADDR
73980: LD_INT 3
73982: PUSH
73983: FOR_TO
73984: IFFALSE 74015
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73986: LD_VAR 0 1
73990: PPUSH
73991: CALL_OW 250
73995: PPUSH
73996: LD_VAR 0 1
74000: PPUSH
74001: CALL_OW 251
74005: PPUSH
74006: LD_INT 1
74008: PPUSH
74009: CALL_OW 453
74013: GO 73983
74015: POP
74016: POP
// end ;
74017: LD_VAR 0 2
74021: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74022: LD_INT 0
74024: PPUSH
74025: PPUSH
74026: PPUSH
74027: PPUSH
74028: PPUSH
74029: PPUSH
// if not unit or not enemy_unit then
74030: LD_VAR 0 1
74034: NOT
74035: PUSH
74036: LD_VAR 0 2
74040: NOT
74041: OR
74042: IFFALSE 74046
// exit ;
74044: GO 74513
// if GetLives ( i ) < 250 then
74046: LD_VAR 0 4
74050: PPUSH
74051: CALL_OW 256
74055: PUSH
74056: LD_INT 250
74058: LESS
74059: IFFALSE 74072
// begin ComAutodestruct ( i ) ;
74061: LD_VAR 0 4
74065: PPUSH
74066: CALL 73920 0 1
// exit ;
74070: GO 74513
// end ; x := GetX ( enemy_unit ) ;
74072: LD_ADDR_VAR 0 7
74076: PUSH
74077: LD_VAR 0 2
74081: PPUSH
74082: CALL_OW 250
74086: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74087: LD_ADDR_VAR 0 8
74091: PUSH
74092: LD_VAR 0 2
74096: PPUSH
74097: CALL_OW 251
74101: ST_TO_ADDR
// if not x or not y then
74102: LD_VAR 0 7
74106: NOT
74107: PUSH
74108: LD_VAR 0 8
74112: NOT
74113: OR
74114: IFFALSE 74118
// exit ;
74116: GO 74513
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74118: LD_ADDR_VAR 0 6
74122: PUSH
74123: LD_VAR 0 7
74127: PPUSH
74128: LD_INT 0
74130: PPUSH
74131: LD_INT 4
74133: PPUSH
74134: CALL_OW 272
74138: PUSH
74139: LD_VAR 0 8
74143: PPUSH
74144: LD_INT 0
74146: PPUSH
74147: LD_INT 4
74149: PPUSH
74150: CALL_OW 273
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_VAR 0 7
74163: PPUSH
74164: LD_INT 1
74166: PPUSH
74167: LD_INT 4
74169: PPUSH
74170: CALL_OW 272
74174: PUSH
74175: LD_VAR 0 8
74179: PPUSH
74180: LD_INT 1
74182: PPUSH
74183: LD_INT 4
74185: PPUSH
74186: CALL_OW 273
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_VAR 0 7
74199: PPUSH
74200: LD_INT 2
74202: PPUSH
74203: LD_INT 4
74205: PPUSH
74206: CALL_OW 272
74210: PUSH
74211: LD_VAR 0 8
74215: PPUSH
74216: LD_INT 2
74218: PPUSH
74219: LD_INT 4
74221: PPUSH
74222: CALL_OW 273
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_VAR 0 7
74235: PPUSH
74236: LD_INT 3
74238: PPUSH
74239: LD_INT 4
74241: PPUSH
74242: CALL_OW 272
74246: PUSH
74247: LD_VAR 0 8
74251: PPUSH
74252: LD_INT 3
74254: PPUSH
74255: LD_INT 4
74257: PPUSH
74258: CALL_OW 273
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_VAR 0 7
74271: PPUSH
74272: LD_INT 4
74274: PPUSH
74275: LD_INT 4
74277: PPUSH
74278: CALL_OW 272
74282: PUSH
74283: LD_VAR 0 8
74287: PPUSH
74288: LD_INT 4
74290: PPUSH
74291: LD_INT 4
74293: PPUSH
74294: CALL_OW 273
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: LD_VAR 0 7
74307: PPUSH
74308: LD_INT 5
74310: PPUSH
74311: LD_INT 4
74313: PPUSH
74314: CALL_OW 272
74318: PUSH
74319: LD_VAR 0 8
74323: PPUSH
74324: LD_INT 5
74326: PPUSH
74327: LD_INT 4
74329: PPUSH
74330: CALL_OW 273
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: ST_TO_ADDR
// for i = tmp downto 1 do
74347: LD_ADDR_VAR 0 4
74351: PUSH
74352: DOUBLE
74353: LD_VAR 0 6
74357: INC
74358: ST_TO_ADDR
74359: LD_INT 1
74361: PUSH
74362: FOR_DOWNTO
74363: IFFALSE 74464
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74365: LD_VAR 0 6
74369: PUSH
74370: LD_VAR 0 4
74374: ARRAY
74375: PUSH
74376: LD_INT 1
74378: ARRAY
74379: PPUSH
74380: LD_VAR 0 6
74384: PUSH
74385: LD_VAR 0 4
74389: ARRAY
74390: PUSH
74391: LD_INT 2
74393: ARRAY
74394: PPUSH
74395: CALL_OW 488
74399: NOT
74400: PUSH
74401: LD_VAR 0 6
74405: PUSH
74406: LD_VAR 0 4
74410: ARRAY
74411: PUSH
74412: LD_INT 1
74414: ARRAY
74415: PPUSH
74416: LD_VAR 0 6
74420: PUSH
74421: LD_VAR 0 4
74425: ARRAY
74426: PUSH
74427: LD_INT 2
74429: ARRAY
74430: PPUSH
74431: CALL_OW 428
74435: PUSH
74436: LD_INT 0
74438: NONEQUAL
74439: OR
74440: IFFALSE 74462
// tmp := Delete ( tmp , i ) ;
74442: LD_ADDR_VAR 0 6
74446: PUSH
74447: LD_VAR 0 6
74451: PPUSH
74452: LD_VAR 0 4
74456: PPUSH
74457: CALL_OW 3
74461: ST_TO_ADDR
74462: GO 74362
74464: POP
74465: POP
// j := GetClosestHex ( unit , tmp ) ;
74466: LD_ADDR_VAR 0 5
74470: PUSH
74471: LD_VAR 0 1
74475: PPUSH
74476: LD_VAR 0 6
74480: PPUSH
74481: CALL 73768 0 2
74485: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74486: LD_VAR 0 1
74490: PPUSH
74491: LD_VAR 0 5
74495: PUSH
74496: LD_INT 1
74498: ARRAY
74499: PPUSH
74500: LD_VAR 0 5
74504: PUSH
74505: LD_INT 2
74507: ARRAY
74508: PPUSH
74509: CALL_OW 111
// end ;
74513: LD_VAR 0 3
74517: RET
// export function PrepareApemanSoldier ( ) ; begin
74518: LD_INT 0
74520: PPUSH
// uc_nation := 0 ;
74521: LD_ADDR_OWVAR 21
74525: PUSH
74526: LD_INT 0
74528: ST_TO_ADDR
// hc_sex := sex_male ;
74529: LD_ADDR_OWVAR 27
74533: PUSH
74534: LD_INT 1
74536: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74537: LD_ADDR_OWVAR 28
74541: PUSH
74542: LD_INT 15
74544: ST_TO_ADDR
// hc_gallery :=  ;
74545: LD_ADDR_OWVAR 33
74549: PUSH
74550: LD_STRING 
74552: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74553: LD_ADDR_OWVAR 31
74557: PUSH
74558: LD_INT 0
74560: PPUSH
74561: LD_INT 3
74563: PPUSH
74564: CALL_OW 12
74568: PUSH
74569: LD_INT 0
74571: PPUSH
74572: LD_INT 3
74574: PPUSH
74575: CALL_OW 12
74579: PUSH
74580: LD_INT 0
74582: PUSH
74583: LD_INT 0
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: ST_TO_ADDR
// end ;
74592: LD_VAR 0 1
74596: RET
// export function PrepareApemanEngineer ( ) ; begin
74597: LD_INT 0
74599: PPUSH
// uc_nation := 0 ;
74600: LD_ADDR_OWVAR 21
74604: PUSH
74605: LD_INT 0
74607: ST_TO_ADDR
// hc_sex := sex_male ;
74608: LD_ADDR_OWVAR 27
74612: PUSH
74613: LD_INT 1
74615: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74616: LD_ADDR_OWVAR 28
74620: PUSH
74621: LD_INT 16
74623: ST_TO_ADDR
// hc_gallery :=  ;
74624: LD_ADDR_OWVAR 33
74628: PUSH
74629: LD_STRING 
74631: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74632: LD_ADDR_OWVAR 31
74636: PUSH
74637: LD_INT 0
74639: PPUSH
74640: LD_INT 3
74642: PPUSH
74643: CALL_OW 12
74647: PUSH
74648: LD_INT 0
74650: PPUSH
74651: LD_INT 3
74653: PPUSH
74654: CALL_OW 12
74658: PUSH
74659: LD_INT 0
74661: PUSH
74662: LD_INT 0
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: ST_TO_ADDR
// end ;
74671: LD_VAR 0 1
74675: RET
// export function PrepareApeman ( agressivity ) ; begin
74676: LD_INT 0
74678: PPUSH
// uc_side := 0 ;
74679: LD_ADDR_OWVAR 20
74683: PUSH
74684: LD_INT 0
74686: ST_TO_ADDR
// uc_nation := 0 ;
74687: LD_ADDR_OWVAR 21
74691: PUSH
74692: LD_INT 0
74694: ST_TO_ADDR
// hc_sex := sex_male ;
74695: LD_ADDR_OWVAR 27
74699: PUSH
74700: LD_INT 1
74702: ST_TO_ADDR
// hc_class := class_apeman ;
74703: LD_ADDR_OWVAR 28
74707: PUSH
74708: LD_INT 12
74710: ST_TO_ADDR
// hc_gallery :=  ;
74711: LD_ADDR_OWVAR 33
74715: PUSH
74716: LD_STRING 
74718: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74719: LD_ADDR_OWVAR 35
74723: PUSH
74724: LD_VAR 0 1
74728: NEG
74729: PPUSH
74730: LD_VAR 0 1
74734: PPUSH
74735: CALL_OW 12
74739: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74740: LD_ADDR_OWVAR 31
74744: PUSH
74745: LD_INT 0
74747: PPUSH
74748: LD_INT 3
74750: PPUSH
74751: CALL_OW 12
74755: PUSH
74756: LD_INT 0
74758: PPUSH
74759: LD_INT 3
74761: PPUSH
74762: CALL_OW 12
74766: PUSH
74767: LD_INT 0
74769: PUSH
74770: LD_INT 0
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: ST_TO_ADDR
// end ;
74779: LD_VAR 0 2
74783: RET
// export function PrepareTiger ( agressivity ) ; begin
74784: LD_INT 0
74786: PPUSH
// uc_side := 0 ;
74787: LD_ADDR_OWVAR 20
74791: PUSH
74792: LD_INT 0
74794: ST_TO_ADDR
// uc_nation := 0 ;
74795: LD_ADDR_OWVAR 21
74799: PUSH
74800: LD_INT 0
74802: ST_TO_ADDR
// hc_class := class_tiger ;
74803: LD_ADDR_OWVAR 28
74807: PUSH
74808: LD_INT 14
74810: ST_TO_ADDR
// hc_gallery :=  ;
74811: LD_ADDR_OWVAR 33
74815: PUSH
74816: LD_STRING 
74818: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74819: LD_ADDR_OWVAR 35
74823: PUSH
74824: LD_VAR 0 1
74828: NEG
74829: PPUSH
74830: LD_VAR 0 1
74834: PPUSH
74835: CALL_OW 12
74839: ST_TO_ADDR
// end ;
74840: LD_VAR 0 2
74844: RET
// export function PrepareEnchidna ( ) ; begin
74845: LD_INT 0
74847: PPUSH
// uc_side := 0 ;
74848: LD_ADDR_OWVAR 20
74852: PUSH
74853: LD_INT 0
74855: ST_TO_ADDR
// uc_nation := 0 ;
74856: LD_ADDR_OWVAR 21
74860: PUSH
74861: LD_INT 0
74863: ST_TO_ADDR
// hc_class := class_baggie ;
74864: LD_ADDR_OWVAR 28
74868: PUSH
74869: LD_INT 13
74871: ST_TO_ADDR
// hc_gallery :=  ;
74872: LD_ADDR_OWVAR 33
74876: PUSH
74877: LD_STRING 
74879: ST_TO_ADDR
// end ;
74880: LD_VAR 0 1
74884: RET
// export function PrepareFrog ( ) ; begin
74885: LD_INT 0
74887: PPUSH
// uc_side := 0 ;
74888: LD_ADDR_OWVAR 20
74892: PUSH
74893: LD_INT 0
74895: ST_TO_ADDR
// uc_nation := 0 ;
74896: LD_ADDR_OWVAR 21
74900: PUSH
74901: LD_INT 0
74903: ST_TO_ADDR
// hc_class := class_frog ;
74904: LD_ADDR_OWVAR 28
74908: PUSH
74909: LD_INT 19
74911: ST_TO_ADDR
// hc_gallery :=  ;
74912: LD_ADDR_OWVAR 33
74916: PUSH
74917: LD_STRING 
74919: ST_TO_ADDR
// end ;
74920: LD_VAR 0 1
74924: RET
// export function PrepareFish ( ) ; begin
74925: LD_INT 0
74927: PPUSH
// uc_side := 0 ;
74928: LD_ADDR_OWVAR 20
74932: PUSH
74933: LD_INT 0
74935: ST_TO_ADDR
// uc_nation := 0 ;
74936: LD_ADDR_OWVAR 21
74940: PUSH
74941: LD_INT 0
74943: ST_TO_ADDR
// hc_class := class_fish ;
74944: LD_ADDR_OWVAR 28
74948: PUSH
74949: LD_INT 20
74951: ST_TO_ADDR
// hc_gallery :=  ;
74952: LD_ADDR_OWVAR 33
74956: PUSH
74957: LD_STRING 
74959: ST_TO_ADDR
// end ;
74960: LD_VAR 0 1
74964: RET
// export function PrepareBird ( ) ; begin
74965: LD_INT 0
74967: PPUSH
// uc_side := 0 ;
74968: LD_ADDR_OWVAR 20
74972: PUSH
74973: LD_INT 0
74975: ST_TO_ADDR
// uc_nation := 0 ;
74976: LD_ADDR_OWVAR 21
74980: PUSH
74981: LD_INT 0
74983: ST_TO_ADDR
// hc_class := class_phororhacos ;
74984: LD_ADDR_OWVAR 28
74988: PUSH
74989: LD_INT 18
74991: ST_TO_ADDR
// hc_gallery :=  ;
74992: LD_ADDR_OWVAR 33
74996: PUSH
74997: LD_STRING 
74999: ST_TO_ADDR
// end ;
75000: LD_VAR 0 1
75004: RET
// export function PrepareHorse ( ) ; begin
75005: LD_INT 0
75007: PPUSH
// uc_side := 0 ;
75008: LD_ADDR_OWVAR 20
75012: PUSH
75013: LD_INT 0
75015: ST_TO_ADDR
// uc_nation := 0 ;
75016: LD_ADDR_OWVAR 21
75020: PUSH
75021: LD_INT 0
75023: ST_TO_ADDR
// hc_class := class_horse ;
75024: LD_ADDR_OWVAR 28
75028: PUSH
75029: LD_INT 21
75031: ST_TO_ADDR
// hc_gallery :=  ;
75032: LD_ADDR_OWVAR 33
75036: PUSH
75037: LD_STRING 
75039: ST_TO_ADDR
// end ;
75040: LD_VAR 0 1
75044: RET
// export function PrepareMastodont ( ) ; begin
75045: LD_INT 0
75047: PPUSH
// uc_side := 0 ;
75048: LD_ADDR_OWVAR 20
75052: PUSH
75053: LD_INT 0
75055: ST_TO_ADDR
// uc_nation := 0 ;
75056: LD_ADDR_OWVAR 21
75060: PUSH
75061: LD_INT 0
75063: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75064: LD_ADDR_OWVAR 37
75068: PUSH
75069: LD_INT 31
75071: ST_TO_ADDR
// vc_control := control_rider ;
75072: LD_ADDR_OWVAR 38
75076: PUSH
75077: LD_INT 4
75079: ST_TO_ADDR
// end ;
75080: LD_VAR 0 1
75084: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75085: LD_INT 0
75087: PPUSH
75088: PPUSH
75089: PPUSH
// uc_side = 0 ;
75090: LD_ADDR_OWVAR 20
75094: PUSH
75095: LD_INT 0
75097: ST_TO_ADDR
// uc_nation = 0 ;
75098: LD_ADDR_OWVAR 21
75102: PUSH
75103: LD_INT 0
75105: ST_TO_ADDR
// InitHc_All ( ) ;
75106: CALL_OW 584
// InitVc ;
75110: CALL_OW 20
// if mastodonts then
75114: LD_VAR 0 6
75118: IFFALSE 75185
// for i = 1 to mastodonts do
75120: LD_ADDR_VAR 0 11
75124: PUSH
75125: DOUBLE
75126: LD_INT 1
75128: DEC
75129: ST_TO_ADDR
75130: LD_VAR 0 6
75134: PUSH
75135: FOR_TO
75136: IFFALSE 75183
// begin vc_chassis := 31 ;
75138: LD_ADDR_OWVAR 37
75142: PUSH
75143: LD_INT 31
75145: ST_TO_ADDR
// vc_control := control_rider ;
75146: LD_ADDR_OWVAR 38
75150: PUSH
75151: LD_INT 4
75153: ST_TO_ADDR
// animal := CreateVehicle ;
75154: LD_ADDR_VAR 0 12
75158: PUSH
75159: CALL_OW 45
75163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75164: LD_VAR 0 12
75168: PPUSH
75169: LD_VAR 0 8
75173: PPUSH
75174: LD_INT 0
75176: PPUSH
75177: CALL 77313 0 3
// end ;
75181: GO 75135
75183: POP
75184: POP
// if horses then
75185: LD_VAR 0 5
75189: IFFALSE 75256
// for i = 1 to horses do
75191: LD_ADDR_VAR 0 11
75195: PUSH
75196: DOUBLE
75197: LD_INT 1
75199: DEC
75200: ST_TO_ADDR
75201: LD_VAR 0 5
75205: PUSH
75206: FOR_TO
75207: IFFALSE 75254
// begin hc_class := 21 ;
75209: LD_ADDR_OWVAR 28
75213: PUSH
75214: LD_INT 21
75216: ST_TO_ADDR
// hc_gallery :=  ;
75217: LD_ADDR_OWVAR 33
75221: PUSH
75222: LD_STRING 
75224: ST_TO_ADDR
// animal := CreateHuman ;
75225: LD_ADDR_VAR 0 12
75229: PUSH
75230: CALL_OW 44
75234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75235: LD_VAR 0 12
75239: PPUSH
75240: LD_VAR 0 8
75244: PPUSH
75245: LD_INT 0
75247: PPUSH
75248: CALL 77313 0 3
// end ;
75252: GO 75206
75254: POP
75255: POP
// if birds then
75256: LD_VAR 0 1
75260: IFFALSE 75327
// for i = 1 to birds do
75262: LD_ADDR_VAR 0 11
75266: PUSH
75267: DOUBLE
75268: LD_INT 1
75270: DEC
75271: ST_TO_ADDR
75272: LD_VAR 0 1
75276: PUSH
75277: FOR_TO
75278: IFFALSE 75325
// begin hc_class := 18 ;
75280: LD_ADDR_OWVAR 28
75284: PUSH
75285: LD_INT 18
75287: ST_TO_ADDR
// hc_gallery =  ;
75288: LD_ADDR_OWVAR 33
75292: PUSH
75293: LD_STRING 
75295: ST_TO_ADDR
// animal := CreateHuman ;
75296: LD_ADDR_VAR 0 12
75300: PUSH
75301: CALL_OW 44
75305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75306: LD_VAR 0 12
75310: PPUSH
75311: LD_VAR 0 8
75315: PPUSH
75316: LD_INT 0
75318: PPUSH
75319: CALL 77313 0 3
// end ;
75323: GO 75277
75325: POP
75326: POP
// if tigers then
75327: LD_VAR 0 2
75331: IFFALSE 75415
// for i = 1 to tigers do
75333: LD_ADDR_VAR 0 11
75337: PUSH
75338: DOUBLE
75339: LD_INT 1
75341: DEC
75342: ST_TO_ADDR
75343: LD_VAR 0 2
75347: PUSH
75348: FOR_TO
75349: IFFALSE 75413
// begin hc_class = class_tiger ;
75351: LD_ADDR_OWVAR 28
75355: PUSH
75356: LD_INT 14
75358: ST_TO_ADDR
// hc_gallery =  ;
75359: LD_ADDR_OWVAR 33
75363: PUSH
75364: LD_STRING 
75366: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75367: LD_ADDR_OWVAR 35
75371: PUSH
75372: LD_INT 7
75374: NEG
75375: PPUSH
75376: LD_INT 7
75378: PPUSH
75379: CALL_OW 12
75383: ST_TO_ADDR
// animal := CreateHuman ;
75384: LD_ADDR_VAR 0 12
75388: PUSH
75389: CALL_OW 44
75393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75394: LD_VAR 0 12
75398: PPUSH
75399: LD_VAR 0 8
75403: PPUSH
75404: LD_INT 0
75406: PPUSH
75407: CALL 77313 0 3
// end ;
75411: GO 75348
75413: POP
75414: POP
// if apemans then
75415: LD_VAR 0 3
75419: IFFALSE 75542
// for i = 1 to apemans do
75421: LD_ADDR_VAR 0 11
75425: PUSH
75426: DOUBLE
75427: LD_INT 1
75429: DEC
75430: ST_TO_ADDR
75431: LD_VAR 0 3
75435: PUSH
75436: FOR_TO
75437: IFFALSE 75540
// begin hc_class = class_apeman ;
75439: LD_ADDR_OWVAR 28
75443: PUSH
75444: LD_INT 12
75446: ST_TO_ADDR
// hc_gallery =  ;
75447: LD_ADDR_OWVAR 33
75451: PUSH
75452: LD_STRING 
75454: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75455: LD_ADDR_OWVAR 35
75459: PUSH
75460: LD_INT 2
75462: NEG
75463: PPUSH
75464: LD_INT 2
75466: PPUSH
75467: CALL_OW 12
75471: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75472: LD_ADDR_OWVAR 31
75476: PUSH
75477: LD_INT 1
75479: PPUSH
75480: LD_INT 3
75482: PPUSH
75483: CALL_OW 12
75487: PUSH
75488: LD_INT 1
75490: PPUSH
75491: LD_INT 3
75493: PPUSH
75494: CALL_OW 12
75498: PUSH
75499: LD_INT 0
75501: PUSH
75502: LD_INT 0
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: ST_TO_ADDR
// animal := CreateHuman ;
75511: LD_ADDR_VAR 0 12
75515: PUSH
75516: CALL_OW 44
75520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75521: LD_VAR 0 12
75525: PPUSH
75526: LD_VAR 0 8
75530: PPUSH
75531: LD_INT 0
75533: PPUSH
75534: CALL 77313 0 3
// end ;
75538: GO 75436
75540: POP
75541: POP
// if enchidnas then
75542: LD_VAR 0 4
75546: IFFALSE 75613
// for i = 1 to enchidnas do
75548: LD_ADDR_VAR 0 11
75552: PUSH
75553: DOUBLE
75554: LD_INT 1
75556: DEC
75557: ST_TO_ADDR
75558: LD_VAR 0 4
75562: PUSH
75563: FOR_TO
75564: IFFALSE 75611
// begin hc_class = 13 ;
75566: LD_ADDR_OWVAR 28
75570: PUSH
75571: LD_INT 13
75573: ST_TO_ADDR
// hc_gallery =  ;
75574: LD_ADDR_OWVAR 33
75578: PUSH
75579: LD_STRING 
75581: ST_TO_ADDR
// animal := CreateHuman ;
75582: LD_ADDR_VAR 0 12
75586: PUSH
75587: CALL_OW 44
75591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75592: LD_VAR 0 12
75596: PPUSH
75597: LD_VAR 0 8
75601: PPUSH
75602: LD_INT 0
75604: PPUSH
75605: CALL 77313 0 3
// end ;
75609: GO 75563
75611: POP
75612: POP
// if fishes then
75613: LD_VAR 0 7
75617: IFFALSE 75684
// for i = 1 to fishes do
75619: LD_ADDR_VAR 0 11
75623: PUSH
75624: DOUBLE
75625: LD_INT 1
75627: DEC
75628: ST_TO_ADDR
75629: LD_VAR 0 7
75633: PUSH
75634: FOR_TO
75635: IFFALSE 75682
// begin hc_class = 20 ;
75637: LD_ADDR_OWVAR 28
75641: PUSH
75642: LD_INT 20
75644: ST_TO_ADDR
// hc_gallery =  ;
75645: LD_ADDR_OWVAR 33
75649: PUSH
75650: LD_STRING 
75652: ST_TO_ADDR
// animal := CreateHuman ;
75653: LD_ADDR_VAR 0 12
75657: PUSH
75658: CALL_OW 44
75662: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75663: LD_VAR 0 12
75667: PPUSH
75668: LD_VAR 0 9
75672: PPUSH
75673: LD_INT 0
75675: PPUSH
75676: CALL 77313 0 3
// end ;
75680: GO 75634
75682: POP
75683: POP
// end ;
75684: LD_VAR 0 10
75688: RET
// export function WantHeal ( sci , unit ) ; begin
75689: LD_INT 0
75691: PPUSH
// if GetTaskList ( sci ) > 0 then
75692: LD_VAR 0 1
75696: PPUSH
75697: CALL_OW 437
75701: PUSH
75702: LD_INT 0
75704: GREATER
75705: IFFALSE 75775
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75707: LD_VAR 0 1
75711: PPUSH
75712: CALL_OW 437
75716: PUSH
75717: LD_INT 1
75719: ARRAY
75720: PUSH
75721: LD_INT 1
75723: ARRAY
75724: PUSH
75725: LD_STRING l
75727: EQUAL
75728: PUSH
75729: LD_VAR 0 1
75733: PPUSH
75734: CALL_OW 437
75738: PUSH
75739: LD_INT 1
75741: ARRAY
75742: PUSH
75743: LD_INT 4
75745: ARRAY
75746: PUSH
75747: LD_VAR 0 2
75751: EQUAL
75752: AND
75753: IFFALSE 75765
// result := true else
75755: LD_ADDR_VAR 0 3
75759: PUSH
75760: LD_INT 1
75762: ST_TO_ADDR
75763: GO 75773
// result := false ;
75765: LD_ADDR_VAR 0 3
75769: PUSH
75770: LD_INT 0
75772: ST_TO_ADDR
// end else
75773: GO 75783
// result := false ;
75775: LD_ADDR_VAR 0 3
75779: PUSH
75780: LD_INT 0
75782: ST_TO_ADDR
// end ;
75783: LD_VAR 0 3
75787: RET
// export function HealTarget ( sci ) ; begin
75788: LD_INT 0
75790: PPUSH
// if not sci then
75791: LD_VAR 0 1
75795: NOT
75796: IFFALSE 75800
// exit ;
75798: GO 75865
// result := 0 ;
75800: LD_ADDR_VAR 0 2
75804: PUSH
75805: LD_INT 0
75807: ST_TO_ADDR
// if GetTaskList ( sci ) then
75808: LD_VAR 0 1
75812: PPUSH
75813: CALL_OW 437
75817: IFFALSE 75865
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75819: LD_VAR 0 1
75823: PPUSH
75824: CALL_OW 437
75828: PUSH
75829: LD_INT 1
75831: ARRAY
75832: PUSH
75833: LD_INT 1
75835: ARRAY
75836: PUSH
75837: LD_STRING l
75839: EQUAL
75840: IFFALSE 75865
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75842: LD_ADDR_VAR 0 2
75846: PUSH
75847: LD_VAR 0 1
75851: PPUSH
75852: CALL_OW 437
75856: PUSH
75857: LD_INT 1
75859: ARRAY
75860: PUSH
75861: LD_INT 4
75863: ARRAY
75864: ST_TO_ADDR
// end ;
75865: LD_VAR 0 2
75869: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75870: LD_INT 0
75872: PPUSH
75873: PPUSH
75874: PPUSH
75875: PPUSH
// if not base_units then
75876: LD_VAR 0 1
75880: NOT
75881: IFFALSE 75885
// exit ;
75883: GO 75972
// result := false ;
75885: LD_ADDR_VAR 0 2
75889: PUSH
75890: LD_INT 0
75892: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75893: LD_ADDR_VAR 0 5
75897: PUSH
75898: LD_VAR 0 1
75902: PPUSH
75903: LD_INT 21
75905: PUSH
75906: LD_INT 3
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PPUSH
75913: CALL_OW 72
75917: ST_TO_ADDR
// if not tmp then
75918: LD_VAR 0 5
75922: NOT
75923: IFFALSE 75927
// exit ;
75925: GO 75972
// for i in tmp do
75927: LD_ADDR_VAR 0 3
75931: PUSH
75932: LD_VAR 0 5
75936: PUSH
75937: FOR_IN
75938: IFFALSE 75970
// begin result := EnemyInRange ( i , 22 ) ;
75940: LD_ADDR_VAR 0 2
75944: PUSH
75945: LD_VAR 0 3
75949: PPUSH
75950: LD_INT 22
75952: PPUSH
75953: CALL 73570 0 2
75957: ST_TO_ADDR
// if result then
75958: LD_VAR 0 2
75962: IFFALSE 75968
// exit ;
75964: POP
75965: POP
75966: GO 75972
// end ;
75968: GO 75937
75970: POP
75971: POP
// end ;
75972: LD_VAR 0 2
75976: RET
// export function FilterByTag ( units , tag ) ; begin
75977: LD_INT 0
75979: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75980: LD_ADDR_VAR 0 3
75984: PUSH
75985: LD_VAR 0 1
75989: PPUSH
75990: LD_INT 120
75992: PUSH
75993: LD_VAR 0 2
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: PPUSH
76002: CALL_OW 72
76006: ST_TO_ADDR
// end ;
76007: LD_VAR 0 3
76011: RET
// export function IsDriver ( un ) ; begin
76012: LD_INT 0
76014: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76015: LD_ADDR_VAR 0 2
76019: PUSH
76020: LD_VAR 0 1
76024: PUSH
76025: LD_INT 55
76027: PUSH
76028: EMPTY
76029: LIST
76030: PPUSH
76031: CALL_OW 69
76035: IN
76036: ST_TO_ADDR
// end ;
76037: LD_VAR 0 2
76041: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76042: LD_INT 0
76044: PPUSH
76045: PPUSH
// list := [ ] ;
76046: LD_ADDR_VAR 0 5
76050: PUSH
76051: EMPTY
76052: ST_TO_ADDR
// case d of 0 :
76053: LD_VAR 0 3
76057: PUSH
76058: LD_INT 0
76060: DOUBLE
76061: EQUAL
76062: IFTRUE 76066
76064: GO 76199
76066: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76067: LD_ADDR_VAR 0 5
76071: PUSH
76072: LD_VAR 0 1
76076: PUSH
76077: LD_INT 4
76079: MINUS
76080: PUSH
76081: LD_VAR 0 2
76085: PUSH
76086: LD_INT 4
76088: MINUS
76089: PUSH
76090: LD_INT 2
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: LIST
76097: PUSH
76098: LD_VAR 0 1
76102: PUSH
76103: LD_INT 3
76105: MINUS
76106: PUSH
76107: LD_VAR 0 2
76111: PUSH
76112: LD_INT 1
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: LIST
76119: PUSH
76120: LD_VAR 0 1
76124: PUSH
76125: LD_INT 4
76127: PLUS
76128: PUSH
76129: LD_VAR 0 2
76133: PUSH
76134: LD_INT 4
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: LIST
76141: PUSH
76142: LD_VAR 0 1
76146: PUSH
76147: LD_INT 3
76149: PLUS
76150: PUSH
76151: LD_VAR 0 2
76155: PUSH
76156: LD_INT 3
76158: PLUS
76159: PUSH
76160: LD_INT 5
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: LIST
76167: PUSH
76168: LD_VAR 0 1
76172: PUSH
76173: LD_VAR 0 2
76177: PUSH
76178: LD_INT 4
76180: PLUS
76181: PUSH
76182: LD_INT 0
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: LIST
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: ST_TO_ADDR
// end ; 1 :
76197: GO 76897
76199: LD_INT 1
76201: DOUBLE
76202: EQUAL
76203: IFTRUE 76207
76205: GO 76340
76207: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76208: LD_ADDR_VAR 0 5
76212: PUSH
76213: LD_VAR 0 1
76217: PUSH
76218: LD_VAR 0 2
76222: PUSH
76223: LD_INT 4
76225: MINUS
76226: PUSH
76227: LD_INT 3
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: LIST
76234: PUSH
76235: LD_VAR 0 1
76239: PUSH
76240: LD_INT 3
76242: MINUS
76243: PUSH
76244: LD_VAR 0 2
76248: PUSH
76249: LD_INT 3
76251: MINUS
76252: PUSH
76253: LD_INT 2
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: LIST
76260: PUSH
76261: LD_VAR 0 1
76265: PUSH
76266: LD_INT 4
76268: MINUS
76269: PUSH
76270: LD_VAR 0 2
76274: PUSH
76275: LD_INT 1
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: LIST
76282: PUSH
76283: LD_VAR 0 1
76287: PUSH
76288: LD_VAR 0 2
76292: PUSH
76293: LD_INT 3
76295: PLUS
76296: PUSH
76297: LD_INT 0
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: LIST
76304: PUSH
76305: LD_VAR 0 1
76309: PUSH
76310: LD_INT 4
76312: PLUS
76313: PUSH
76314: LD_VAR 0 2
76318: PUSH
76319: LD_INT 4
76321: PLUS
76322: PUSH
76323: LD_INT 5
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: LIST
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: LIST
76335: LIST
76336: LIST
76337: ST_TO_ADDR
// end ; 2 :
76338: GO 76897
76340: LD_INT 2
76342: DOUBLE
76343: EQUAL
76344: IFTRUE 76348
76346: GO 76477
76348: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76349: LD_ADDR_VAR 0 5
76353: PUSH
76354: LD_VAR 0 1
76358: PUSH
76359: LD_VAR 0 2
76363: PUSH
76364: LD_INT 3
76366: MINUS
76367: PUSH
76368: LD_INT 3
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: LIST
76375: PUSH
76376: LD_VAR 0 1
76380: PUSH
76381: LD_INT 4
76383: PLUS
76384: PUSH
76385: LD_VAR 0 2
76389: PUSH
76390: LD_INT 4
76392: PUSH
76393: EMPTY
76394: LIST
76395: LIST
76396: LIST
76397: PUSH
76398: LD_VAR 0 1
76402: PUSH
76403: LD_VAR 0 2
76407: PUSH
76408: LD_INT 4
76410: PLUS
76411: PUSH
76412: LD_INT 0
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: LIST
76419: PUSH
76420: LD_VAR 0 1
76424: PUSH
76425: LD_INT 3
76427: MINUS
76428: PUSH
76429: LD_VAR 0 2
76433: PUSH
76434: LD_INT 1
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: LIST
76441: PUSH
76442: LD_VAR 0 1
76446: PUSH
76447: LD_INT 4
76449: MINUS
76450: PUSH
76451: LD_VAR 0 2
76455: PUSH
76456: LD_INT 4
76458: MINUS
76459: PUSH
76460: LD_INT 2
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: LIST
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: ST_TO_ADDR
// end ; 3 :
76475: GO 76897
76477: LD_INT 3
76479: DOUBLE
76480: EQUAL
76481: IFTRUE 76485
76483: GO 76618
76485: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76486: LD_ADDR_VAR 0 5
76490: PUSH
76491: LD_VAR 0 1
76495: PUSH
76496: LD_INT 3
76498: PLUS
76499: PUSH
76500: LD_VAR 0 2
76504: PUSH
76505: LD_INT 4
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: LIST
76512: PUSH
76513: LD_VAR 0 1
76517: PUSH
76518: LD_INT 4
76520: PLUS
76521: PUSH
76522: LD_VAR 0 2
76526: PUSH
76527: LD_INT 4
76529: PLUS
76530: PUSH
76531: LD_INT 5
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: LIST
76538: PUSH
76539: LD_VAR 0 1
76543: PUSH
76544: LD_INT 4
76546: MINUS
76547: PUSH
76548: LD_VAR 0 2
76552: PUSH
76553: LD_INT 1
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: LIST
76560: PUSH
76561: LD_VAR 0 1
76565: PUSH
76566: LD_VAR 0 2
76570: PUSH
76571: LD_INT 4
76573: MINUS
76574: PUSH
76575: LD_INT 3
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: LIST
76582: PUSH
76583: LD_VAR 0 1
76587: PUSH
76588: LD_INT 3
76590: MINUS
76591: PUSH
76592: LD_VAR 0 2
76596: PUSH
76597: LD_INT 3
76599: MINUS
76600: PUSH
76601: LD_INT 2
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: LIST
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: ST_TO_ADDR
// end ; 4 :
76616: GO 76897
76618: LD_INT 4
76620: DOUBLE
76621: EQUAL
76622: IFTRUE 76626
76624: GO 76759
76626: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76627: LD_ADDR_VAR 0 5
76631: PUSH
76632: LD_VAR 0 1
76636: PUSH
76637: LD_VAR 0 2
76641: PUSH
76642: LD_INT 4
76644: PLUS
76645: PUSH
76646: LD_INT 0
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: LIST
76653: PUSH
76654: LD_VAR 0 1
76658: PUSH
76659: LD_INT 3
76661: PLUS
76662: PUSH
76663: LD_VAR 0 2
76667: PUSH
76668: LD_INT 3
76670: PLUS
76671: PUSH
76672: LD_INT 5
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: LIST
76679: PUSH
76680: LD_VAR 0 1
76684: PUSH
76685: LD_INT 4
76687: PLUS
76688: PUSH
76689: LD_VAR 0 2
76693: PUSH
76694: LD_INT 4
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: PUSH
76702: LD_VAR 0 1
76706: PUSH
76707: LD_VAR 0 2
76711: PUSH
76712: LD_INT 3
76714: MINUS
76715: PUSH
76716: LD_INT 3
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: LIST
76723: PUSH
76724: LD_VAR 0 1
76728: PUSH
76729: LD_INT 4
76731: MINUS
76732: PUSH
76733: LD_VAR 0 2
76737: PUSH
76738: LD_INT 4
76740: MINUS
76741: PUSH
76742: LD_INT 2
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: LIST
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: ST_TO_ADDR
// end ; 5 :
76757: GO 76897
76759: LD_INT 5
76761: DOUBLE
76762: EQUAL
76763: IFTRUE 76767
76765: GO 76896
76767: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76768: LD_ADDR_VAR 0 5
76772: PUSH
76773: LD_VAR 0 1
76777: PUSH
76778: LD_INT 4
76780: MINUS
76781: PUSH
76782: LD_VAR 0 2
76786: PUSH
76787: LD_INT 1
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: LIST
76794: PUSH
76795: LD_VAR 0 1
76799: PUSH
76800: LD_VAR 0 2
76804: PUSH
76805: LD_INT 4
76807: MINUS
76808: PUSH
76809: LD_INT 3
76811: PUSH
76812: EMPTY
76813: LIST
76814: LIST
76815: LIST
76816: PUSH
76817: LD_VAR 0 1
76821: PUSH
76822: LD_INT 4
76824: PLUS
76825: PUSH
76826: LD_VAR 0 2
76830: PUSH
76831: LD_INT 4
76833: PLUS
76834: PUSH
76835: LD_INT 5
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: LIST
76842: PUSH
76843: LD_VAR 0 1
76847: PUSH
76848: LD_INT 3
76850: PLUS
76851: PUSH
76852: LD_VAR 0 2
76856: PUSH
76857: LD_INT 4
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: LIST
76864: PUSH
76865: LD_VAR 0 1
76869: PUSH
76870: LD_VAR 0 2
76874: PUSH
76875: LD_INT 3
76877: PLUS
76878: PUSH
76879: LD_INT 0
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: LIST
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: LIST
76891: LIST
76892: LIST
76893: ST_TO_ADDR
// end ; end ;
76894: GO 76897
76896: POP
// result := list ;
76897: LD_ADDR_VAR 0 4
76901: PUSH
76902: LD_VAR 0 5
76906: ST_TO_ADDR
// end ;
76907: LD_VAR 0 4
76911: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76912: LD_INT 0
76914: PPUSH
76915: PPUSH
76916: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76917: LD_VAR 0 1
76921: NOT
76922: PUSH
76923: LD_VAR 0 2
76927: PUSH
76928: LD_INT 1
76930: PUSH
76931: LD_INT 2
76933: PUSH
76934: LD_INT 3
76936: PUSH
76937: LD_INT 4
76939: PUSH
76940: EMPTY
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: IN
76946: NOT
76947: OR
76948: IFFALSE 76952
// exit ;
76950: GO 77035
// tmp := [ ] ;
76952: LD_ADDR_VAR 0 5
76956: PUSH
76957: EMPTY
76958: ST_TO_ADDR
// for i in units do
76959: LD_ADDR_VAR 0 4
76963: PUSH
76964: LD_VAR 0 1
76968: PUSH
76969: FOR_IN
76970: IFFALSE 77004
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76972: LD_ADDR_VAR 0 5
76976: PUSH
76977: LD_VAR 0 5
76981: PPUSH
76982: LD_VAR 0 4
76986: PPUSH
76987: LD_VAR 0 2
76991: PPUSH
76992: CALL_OW 259
76996: PPUSH
76997: CALL 78408 0 2
77001: ST_TO_ADDR
77002: GO 76969
77004: POP
77005: POP
// if not tmp then
77006: LD_VAR 0 5
77010: NOT
77011: IFFALSE 77015
// exit ;
77013: GO 77035
// result := SortListByListDesc ( units , tmp ) ;
77015: LD_ADDR_VAR 0 3
77019: PUSH
77020: LD_VAR 0 1
77024: PPUSH
77025: LD_VAR 0 5
77029: PPUSH
77030: CALL_OW 77
77034: ST_TO_ADDR
// end ;
77035: LD_VAR 0 3
77039: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77040: LD_INT 0
77042: PPUSH
77043: PPUSH
77044: PPUSH
// result := false ;
77045: LD_ADDR_VAR 0 3
77049: PUSH
77050: LD_INT 0
77052: ST_TO_ADDR
// if not building then
77053: LD_VAR 0 2
77057: NOT
77058: IFFALSE 77062
// exit ;
77060: GO 77200
// x := GetX ( building ) ;
77062: LD_ADDR_VAR 0 4
77066: PUSH
77067: LD_VAR 0 2
77071: PPUSH
77072: CALL_OW 250
77076: ST_TO_ADDR
// y := GetY ( building ) ;
77077: LD_ADDR_VAR 0 5
77081: PUSH
77082: LD_VAR 0 2
77086: PPUSH
77087: CALL_OW 251
77091: ST_TO_ADDR
// if not x or not y then
77092: LD_VAR 0 4
77096: NOT
77097: PUSH
77098: LD_VAR 0 5
77102: NOT
77103: OR
77104: IFFALSE 77108
// exit ;
77106: GO 77200
// if GetTaskList ( unit ) then
77108: LD_VAR 0 1
77112: PPUSH
77113: CALL_OW 437
77117: IFFALSE 77200
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77119: LD_STRING e
77121: PUSH
77122: LD_VAR 0 1
77126: PPUSH
77127: CALL_OW 437
77131: PUSH
77132: LD_INT 1
77134: ARRAY
77135: PUSH
77136: LD_INT 1
77138: ARRAY
77139: EQUAL
77140: PUSH
77141: LD_VAR 0 4
77145: PUSH
77146: LD_VAR 0 1
77150: PPUSH
77151: CALL_OW 437
77155: PUSH
77156: LD_INT 1
77158: ARRAY
77159: PUSH
77160: LD_INT 2
77162: ARRAY
77163: EQUAL
77164: AND
77165: PUSH
77166: LD_VAR 0 5
77170: PUSH
77171: LD_VAR 0 1
77175: PPUSH
77176: CALL_OW 437
77180: PUSH
77181: LD_INT 1
77183: ARRAY
77184: PUSH
77185: LD_INT 3
77187: ARRAY
77188: EQUAL
77189: AND
77190: IFFALSE 77200
// result := true end ;
77192: LD_ADDR_VAR 0 3
77196: PUSH
77197: LD_INT 1
77199: ST_TO_ADDR
// end ;
77200: LD_VAR 0 3
77204: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77205: LD_INT 0
77207: PPUSH
// result := false ;
77208: LD_ADDR_VAR 0 4
77212: PUSH
77213: LD_INT 0
77215: ST_TO_ADDR
// if GetTaskList ( unit ) then
77216: LD_VAR 0 1
77220: PPUSH
77221: CALL_OW 437
77225: IFFALSE 77308
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77227: LD_STRING M
77229: PUSH
77230: LD_VAR 0 1
77234: PPUSH
77235: CALL_OW 437
77239: PUSH
77240: LD_INT 1
77242: ARRAY
77243: PUSH
77244: LD_INT 1
77246: ARRAY
77247: EQUAL
77248: PUSH
77249: LD_VAR 0 2
77253: PUSH
77254: LD_VAR 0 1
77258: PPUSH
77259: CALL_OW 437
77263: PUSH
77264: LD_INT 1
77266: ARRAY
77267: PUSH
77268: LD_INT 2
77270: ARRAY
77271: EQUAL
77272: AND
77273: PUSH
77274: LD_VAR 0 3
77278: PUSH
77279: LD_VAR 0 1
77283: PPUSH
77284: CALL_OW 437
77288: PUSH
77289: LD_INT 1
77291: ARRAY
77292: PUSH
77293: LD_INT 3
77295: ARRAY
77296: EQUAL
77297: AND
77298: IFFALSE 77308
// result := true ;
77300: LD_ADDR_VAR 0 4
77304: PUSH
77305: LD_INT 1
77307: ST_TO_ADDR
// end ; end ;
77308: LD_VAR 0 4
77312: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77313: LD_INT 0
77315: PPUSH
77316: PPUSH
77317: PPUSH
77318: PPUSH
// if not unit or not area then
77319: LD_VAR 0 1
77323: NOT
77324: PUSH
77325: LD_VAR 0 2
77329: NOT
77330: OR
77331: IFFALSE 77335
// exit ;
77333: GO 77511
// tmp := AreaToList ( area , i ) ;
77335: LD_ADDR_VAR 0 6
77339: PUSH
77340: LD_VAR 0 2
77344: PPUSH
77345: LD_VAR 0 5
77349: PPUSH
77350: CALL_OW 517
77354: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77355: LD_ADDR_VAR 0 5
77359: PUSH
77360: DOUBLE
77361: LD_INT 1
77363: DEC
77364: ST_TO_ADDR
77365: LD_VAR 0 6
77369: PUSH
77370: LD_INT 1
77372: ARRAY
77373: PUSH
77374: FOR_TO
77375: IFFALSE 77509
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77377: LD_ADDR_VAR 0 7
77381: PUSH
77382: LD_VAR 0 6
77386: PUSH
77387: LD_INT 1
77389: ARRAY
77390: PUSH
77391: LD_VAR 0 5
77395: ARRAY
77396: PUSH
77397: LD_VAR 0 6
77401: PUSH
77402: LD_INT 2
77404: ARRAY
77405: PUSH
77406: LD_VAR 0 5
77410: ARRAY
77411: PUSH
77412: EMPTY
77413: LIST
77414: LIST
77415: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77416: LD_INT 92
77418: PUSH
77419: LD_VAR 0 7
77423: PUSH
77424: LD_INT 1
77426: ARRAY
77427: PUSH
77428: LD_VAR 0 7
77432: PUSH
77433: LD_INT 2
77435: ARRAY
77436: PUSH
77437: LD_INT 2
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: PPUSH
77446: CALL_OW 69
77450: PUSH
77451: LD_INT 0
77453: EQUAL
77454: IFFALSE 77507
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77456: LD_VAR 0 1
77460: PPUSH
77461: LD_VAR 0 7
77465: PUSH
77466: LD_INT 1
77468: ARRAY
77469: PPUSH
77470: LD_VAR 0 7
77474: PUSH
77475: LD_INT 2
77477: ARRAY
77478: PPUSH
77479: LD_VAR 0 3
77483: PPUSH
77484: CALL_OW 48
// result := IsPlaced ( unit ) ;
77488: LD_ADDR_VAR 0 4
77492: PUSH
77493: LD_VAR 0 1
77497: PPUSH
77498: CALL_OW 305
77502: ST_TO_ADDR
// exit ;
77503: POP
77504: POP
77505: GO 77511
// end ; end ;
77507: GO 77374
77509: POP
77510: POP
// end ;
77511: LD_VAR 0 4
77515: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77516: LD_INT 0
77518: PPUSH
77519: PPUSH
77520: PPUSH
// if not side or side > 8 then
77521: LD_VAR 0 1
77525: NOT
77526: PUSH
77527: LD_VAR 0 1
77531: PUSH
77532: LD_INT 8
77534: GREATER
77535: OR
77536: IFFALSE 77540
// exit ;
77538: GO 77727
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77540: LD_ADDR_VAR 0 4
77544: PUSH
77545: LD_INT 22
77547: PUSH
77548: LD_VAR 0 1
77552: PUSH
77553: EMPTY
77554: LIST
77555: LIST
77556: PUSH
77557: LD_INT 21
77559: PUSH
77560: LD_INT 3
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: PPUSH
77571: CALL_OW 69
77575: ST_TO_ADDR
// if not tmp then
77576: LD_VAR 0 4
77580: NOT
77581: IFFALSE 77585
// exit ;
77583: GO 77727
// enable_addtolog := true ;
77585: LD_ADDR_OWVAR 81
77589: PUSH
77590: LD_INT 1
77592: ST_TO_ADDR
// AddToLog ( [ ) ;
77593: LD_STRING [
77595: PPUSH
77596: CALL_OW 561
// for i in tmp do
77600: LD_ADDR_VAR 0 3
77604: PUSH
77605: LD_VAR 0 4
77609: PUSH
77610: FOR_IN
77611: IFFALSE 77718
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77613: LD_STRING [
77615: PUSH
77616: LD_VAR 0 3
77620: PPUSH
77621: CALL_OW 266
77625: STR
77626: PUSH
77627: LD_STRING , 
77629: STR
77630: PUSH
77631: LD_VAR 0 3
77635: PPUSH
77636: CALL_OW 250
77640: STR
77641: PUSH
77642: LD_STRING , 
77644: STR
77645: PUSH
77646: LD_VAR 0 3
77650: PPUSH
77651: CALL_OW 251
77655: STR
77656: PUSH
77657: LD_STRING , 
77659: STR
77660: PUSH
77661: LD_VAR 0 3
77665: PPUSH
77666: CALL_OW 254
77670: STR
77671: PUSH
77672: LD_STRING , 
77674: STR
77675: PUSH
77676: LD_VAR 0 3
77680: PPUSH
77681: LD_INT 1
77683: PPUSH
77684: CALL_OW 268
77688: STR
77689: PUSH
77690: LD_STRING , 
77692: STR
77693: PUSH
77694: LD_VAR 0 3
77698: PPUSH
77699: LD_INT 2
77701: PPUSH
77702: CALL_OW 268
77706: STR
77707: PUSH
77708: LD_STRING ],
77710: STR
77711: PPUSH
77712: CALL_OW 561
// end ;
77716: GO 77610
77718: POP
77719: POP
// AddToLog ( ]; ) ;
77720: LD_STRING ];
77722: PPUSH
77723: CALL_OW 561
// end ;
77727: LD_VAR 0 2
77731: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77732: LD_INT 0
77734: PPUSH
77735: PPUSH
77736: PPUSH
77737: PPUSH
77738: PPUSH
// if not area or not rate or not max then
77739: LD_VAR 0 1
77743: NOT
77744: PUSH
77745: LD_VAR 0 2
77749: NOT
77750: OR
77751: PUSH
77752: LD_VAR 0 4
77756: NOT
77757: OR
77758: IFFALSE 77762
// exit ;
77760: GO 77951
// while 1 do
77762: LD_INT 1
77764: IFFALSE 77951
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77766: LD_ADDR_VAR 0 9
77770: PUSH
77771: LD_VAR 0 1
77775: PPUSH
77776: LD_INT 1
77778: PPUSH
77779: CALL_OW 287
77783: PUSH
77784: LD_INT 10
77786: MUL
77787: ST_TO_ADDR
// r := rate / 10 ;
77788: LD_ADDR_VAR 0 7
77792: PUSH
77793: LD_VAR 0 2
77797: PUSH
77798: LD_INT 10
77800: DIVREAL
77801: ST_TO_ADDR
// time := 1 1$00 ;
77802: LD_ADDR_VAR 0 8
77806: PUSH
77807: LD_INT 2100
77809: ST_TO_ADDR
// if amount < min then
77810: LD_VAR 0 9
77814: PUSH
77815: LD_VAR 0 3
77819: LESS
77820: IFFALSE 77838
// r := r * 2 else
77822: LD_ADDR_VAR 0 7
77826: PUSH
77827: LD_VAR 0 7
77831: PUSH
77832: LD_INT 2
77834: MUL
77835: ST_TO_ADDR
77836: GO 77864
// if amount > max then
77838: LD_VAR 0 9
77842: PUSH
77843: LD_VAR 0 4
77847: GREATER
77848: IFFALSE 77864
// r := r / 2 ;
77850: LD_ADDR_VAR 0 7
77854: PUSH
77855: LD_VAR 0 7
77859: PUSH
77860: LD_INT 2
77862: DIVREAL
77863: ST_TO_ADDR
// time := time / r ;
77864: LD_ADDR_VAR 0 8
77868: PUSH
77869: LD_VAR 0 8
77873: PUSH
77874: LD_VAR 0 7
77878: DIVREAL
77879: ST_TO_ADDR
// if time < 0 then
77880: LD_VAR 0 8
77884: PUSH
77885: LD_INT 0
77887: LESS
77888: IFFALSE 77905
// time := time * - 1 ;
77890: LD_ADDR_VAR 0 8
77894: PUSH
77895: LD_VAR 0 8
77899: PUSH
77900: LD_INT 1
77902: NEG
77903: MUL
77904: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77905: LD_VAR 0 8
77909: PUSH
77910: LD_INT 35
77912: PPUSH
77913: LD_INT 875
77915: PPUSH
77916: CALL_OW 12
77920: PLUS
77921: PPUSH
77922: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77926: LD_INT 1
77928: PPUSH
77929: LD_INT 5
77931: PPUSH
77932: CALL_OW 12
77936: PPUSH
77937: LD_VAR 0 1
77941: PPUSH
77942: LD_INT 1
77944: PPUSH
77945: CALL_OW 55
// end ;
77949: GO 77762
// end ;
77951: LD_VAR 0 5
77955: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77956: LD_INT 0
77958: PPUSH
77959: PPUSH
77960: PPUSH
77961: PPUSH
77962: PPUSH
77963: PPUSH
77964: PPUSH
77965: PPUSH
// if not turrets or not factories then
77966: LD_VAR 0 1
77970: NOT
77971: PUSH
77972: LD_VAR 0 2
77976: NOT
77977: OR
77978: IFFALSE 77982
// exit ;
77980: GO 78289
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77982: LD_ADDR_VAR 0 10
77986: PUSH
77987: LD_INT 5
77989: PUSH
77990: LD_INT 6
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 2
77999: PUSH
78000: LD_INT 4
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PUSH
78007: LD_INT 3
78009: PUSH
78010: LD_INT 5
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: LIST
78021: PUSH
78022: LD_INT 24
78024: PUSH
78025: LD_INT 25
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: PUSH
78032: LD_INT 23
78034: PUSH
78035: LD_INT 27
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PUSH
78046: LD_INT 42
78048: PUSH
78049: LD_INT 43
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: LD_INT 44
78058: PUSH
78059: LD_INT 46
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: LD_INT 45
78068: PUSH
78069: LD_INT 47
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: EMPTY
78077: LIST
78078: LIST
78079: LIST
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: LIST
78085: ST_TO_ADDR
// result := [ ] ;
78086: LD_ADDR_VAR 0 3
78090: PUSH
78091: EMPTY
78092: ST_TO_ADDR
// for i in turrets do
78093: LD_ADDR_VAR 0 4
78097: PUSH
78098: LD_VAR 0 1
78102: PUSH
78103: FOR_IN
78104: IFFALSE 78287
// begin nat := GetNation ( i ) ;
78106: LD_ADDR_VAR 0 7
78110: PUSH
78111: LD_VAR 0 4
78115: PPUSH
78116: CALL_OW 248
78120: ST_TO_ADDR
// weapon := 0 ;
78121: LD_ADDR_VAR 0 8
78125: PUSH
78126: LD_INT 0
78128: ST_TO_ADDR
// if not nat then
78129: LD_VAR 0 7
78133: NOT
78134: IFFALSE 78138
// continue ;
78136: GO 78103
// for j in list [ nat ] do
78138: LD_ADDR_VAR 0 5
78142: PUSH
78143: LD_VAR 0 10
78147: PUSH
78148: LD_VAR 0 7
78152: ARRAY
78153: PUSH
78154: FOR_IN
78155: IFFALSE 78196
// if GetBWeapon ( i ) = j [ 1 ] then
78157: LD_VAR 0 4
78161: PPUSH
78162: CALL_OW 269
78166: PUSH
78167: LD_VAR 0 5
78171: PUSH
78172: LD_INT 1
78174: ARRAY
78175: EQUAL
78176: IFFALSE 78194
// begin weapon := j [ 2 ] ;
78178: LD_ADDR_VAR 0 8
78182: PUSH
78183: LD_VAR 0 5
78187: PUSH
78188: LD_INT 2
78190: ARRAY
78191: ST_TO_ADDR
// break ;
78192: GO 78196
// end ;
78194: GO 78154
78196: POP
78197: POP
// if not weapon then
78198: LD_VAR 0 8
78202: NOT
78203: IFFALSE 78207
// continue ;
78205: GO 78103
// for k in factories do
78207: LD_ADDR_VAR 0 6
78211: PUSH
78212: LD_VAR 0 2
78216: PUSH
78217: FOR_IN
78218: IFFALSE 78283
// begin weapons := AvailableWeaponList ( k ) ;
78220: LD_ADDR_VAR 0 9
78224: PUSH
78225: LD_VAR 0 6
78229: PPUSH
78230: CALL_OW 478
78234: ST_TO_ADDR
// if not weapons then
78235: LD_VAR 0 9
78239: NOT
78240: IFFALSE 78244
// continue ;
78242: GO 78217
// if weapon in weapons then
78244: LD_VAR 0 8
78248: PUSH
78249: LD_VAR 0 9
78253: IN
78254: IFFALSE 78281
// begin result := [ i , weapon ] ;
78256: LD_ADDR_VAR 0 3
78260: PUSH
78261: LD_VAR 0 4
78265: PUSH
78266: LD_VAR 0 8
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: ST_TO_ADDR
// exit ;
78275: POP
78276: POP
78277: POP
78278: POP
78279: GO 78289
// end ; end ;
78281: GO 78217
78283: POP
78284: POP
// end ;
78285: GO 78103
78287: POP
78288: POP
// end ;
78289: LD_VAR 0 3
78293: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78294: LD_INT 0
78296: PPUSH
// if not side or side > 8 then
78297: LD_VAR 0 3
78301: NOT
78302: PUSH
78303: LD_VAR 0 3
78307: PUSH
78308: LD_INT 8
78310: GREATER
78311: OR
78312: IFFALSE 78316
// exit ;
78314: GO 78375
// if not range then
78316: LD_VAR 0 4
78320: NOT
78321: IFFALSE 78332
// range := - 12 ;
78323: LD_ADDR_VAR 0 4
78327: PUSH
78328: LD_INT 12
78330: NEG
78331: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78332: LD_VAR 0 1
78336: PPUSH
78337: LD_VAR 0 2
78341: PPUSH
78342: LD_VAR 0 3
78346: PPUSH
78347: LD_VAR 0 4
78351: PPUSH
78352: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78356: LD_VAR 0 1
78360: PPUSH
78361: LD_VAR 0 2
78365: PPUSH
78366: LD_VAR 0 3
78370: PPUSH
78371: CALL_OW 331
// end ;
78375: LD_VAR 0 5
78379: RET
// export function Video ( mode ) ; begin
78380: LD_INT 0
78382: PPUSH
// ingame_video = mode ;
78383: LD_ADDR_OWVAR 52
78387: PUSH
78388: LD_VAR 0 1
78392: ST_TO_ADDR
// interface_hidden = mode ;
78393: LD_ADDR_OWVAR 54
78397: PUSH
78398: LD_VAR 0 1
78402: ST_TO_ADDR
// end ;
78403: LD_VAR 0 2
78407: RET
// export function Join ( array , element ) ; begin
78408: LD_INT 0
78410: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78411: LD_ADDR_VAR 0 3
78415: PUSH
78416: LD_VAR 0 1
78420: PPUSH
78421: LD_VAR 0 1
78425: PUSH
78426: LD_INT 1
78428: PLUS
78429: PPUSH
78430: LD_VAR 0 2
78434: PPUSH
78435: CALL_OW 1
78439: ST_TO_ADDR
// end ;
78440: LD_VAR 0 3
78444: RET
// export function JoinUnion ( array , element ) ; begin
78445: LD_INT 0
78447: PPUSH
// result := array union element ;
78448: LD_ADDR_VAR 0 3
78452: PUSH
78453: LD_VAR 0 1
78457: PUSH
78458: LD_VAR 0 2
78462: UNION
78463: ST_TO_ADDR
// end ;
78464: LD_VAR 0 3
78468: RET
// export function GetBehemoths ( side ) ; begin
78469: LD_INT 0
78471: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78472: LD_ADDR_VAR 0 2
78476: PUSH
78477: LD_INT 22
78479: PUSH
78480: LD_VAR 0 1
78484: PUSH
78485: EMPTY
78486: LIST
78487: LIST
78488: PUSH
78489: LD_INT 31
78491: PUSH
78492: LD_INT 25
78494: PUSH
78495: EMPTY
78496: LIST
78497: LIST
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PPUSH
78503: CALL_OW 69
78507: ST_TO_ADDR
// end ;
78508: LD_VAR 0 2
78512: RET
// export function Shuffle ( array ) ; var i , index ; begin
78513: LD_INT 0
78515: PPUSH
78516: PPUSH
78517: PPUSH
// result := [ ] ;
78518: LD_ADDR_VAR 0 2
78522: PUSH
78523: EMPTY
78524: ST_TO_ADDR
// if not array then
78525: LD_VAR 0 1
78529: NOT
78530: IFFALSE 78534
// exit ;
78532: GO 78633
// Randomize ;
78534: CALL_OW 10
// for i = array downto 1 do
78538: LD_ADDR_VAR 0 3
78542: PUSH
78543: DOUBLE
78544: LD_VAR 0 1
78548: INC
78549: ST_TO_ADDR
78550: LD_INT 1
78552: PUSH
78553: FOR_DOWNTO
78554: IFFALSE 78631
// begin index := rand ( 1 , array ) ;
78556: LD_ADDR_VAR 0 4
78560: PUSH
78561: LD_INT 1
78563: PPUSH
78564: LD_VAR 0 1
78568: PPUSH
78569: CALL_OW 12
78573: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78574: LD_ADDR_VAR 0 2
78578: PUSH
78579: LD_VAR 0 2
78583: PPUSH
78584: LD_VAR 0 2
78588: PUSH
78589: LD_INT 1
78591: PLUS
78592: PPUSH
78593: LD_VAR 0 1
78597: PUSH
78598: LD_VAR 0 4
78602: ARRAY
78603: PPUSH
78604: CALL_OW 2
78608: ST_TO_ADDR
// array := Delete ( array , index ) ;
78609: LD_ADDR_VAR 0 1
78613: PUSH
78614: LD_VAR 0 1
78618: PPUSH
78619: LD_VAR 0 4
78623: PPUSH
78624: CALL_OW 3
78628: ST_TO_ADDR
// end ;
78629: GO 78553
78631: POP
78632: POP
// end ;
78633: LD_VAR 0 2
78637: RET
// export function GetBaseMaterials ( base ) ; begin
78638: LD_INT 0
78640: PPUSH
// result := [ 0 , 0 , 0 ] ;
78641: LD_ADDR_VAR 0 2
78645: PUSH
78646: LD_INT 0
78648: PUSH
78649: LD_INT 0
78651: PUSH
78652: LD_INT 0
78654: PUSH
78655: EMPTY
78656: LIST
78657: LIST
78658: LIST
78659: ST_TO_ADDR
// if not base then
78660: LD_VAR 0 1
78664: NOT
78665: IFFALSE 78669
// exit ;
78667: GO 78718
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78669: LD_ADDR_VAR 0 2
78673: PUSH
78674: LD_VAR 0 1
78678: PPUSH
78679: LD_INT 1
78681: PPUSH
78682: CALL_OW 275
78686: PUSH
78687: LD_VAR 0 1
78691: PPUSH
78692: LD_INT 2
78694: PPUSH
78695: CALL_OW 275
78699: PUSH
78700: LD_VAR 0 1
78704: PPUSH
78705: LD_INT 3
78707: PPUSH
78708: CALL_OW 275
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: LIST
78717: ST_TO_ADDR
// end ;
78718: LD_VAR 0 2
78722: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78723: LD_INT 0
78725: PPUSH
78726: PPUSH
// result := array ;
78727: LD_ADDR_VAR 0 3
78731: PUSH
78732: LD_VAR 0 1
78736: ST_TO_ADDR
// if size >= result then
78737: LD_VAR 0 2
78741: PUSH
78742: LD_VAR 0 3
78746: GREATEREQUAL
78747: IFFALSE 78751
// exit ;
78749: GO 78801
// if size then
78751: LD_VAR 0 2
78755: IFFALSE 78801
// for i := array downto size do
78757: LD_ADDR_VAR 0 4
78761: PUSH
78762: DOUBLE
78763: LD_VAR 0 1
78767: INC
78768: ST_TO_ADDR
78769: LD_VAR 0 2
78773: PUSH
78774: FOR_DOWNTO
78775: IFFALSE 78799
// result := Delete ( result , result ) ;
78777: LD_ADDR_VAR 0 3
78781: PUSH
78782: LD_VAR 0 3
78786: PPUSH
78787: LD_VAR 0 3
78791: PPUSH
78792: CALL_OW 3
78796: ST_TO_ADDR
78797: GO 78774
78799: POP
78800: POP
// end ;
78801: LD_VAR 0 3
78805: RET
// export function ComExit ( unit ) ; var tmp ; begin
78806: LD_INT 0
78808: PPUSH
78809: PPUSH
// if not IsInUnit ( unit ) then
78810: LD_VAR 0 1
78814: PPUSH
78815: CALL_OW 310
78819: NOT
78820: IFFALSE 78824
// exit ;
78822: GO 78884
// tmp := IsInUnit ( unit ) ;
78824: LD_ADDR_VAR 0 3
78828: PUSH
78829: LD_VAR 0 1
78833: PPUSH
78834: CALL_OW 310
78838: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78839: LD_VAR 0 3
78843: PPUSH
78844: CALL_OW 247
78848: PUSH
78849: LD_INT 2
78851: EQUAL
78852: IFFALSE 78865
// ComExitVehicle ( unit ) else
78854: LD_VAR 0 1
78858: PPUSH
78859: CALL_OW 121
78863: GO 78874
// ComExitBuilding ( unit ) ;
78865: LD_VAR 0 1
78869: PPUSH
78870: CALL_OW 122
// result := tmp ;
78874: LD_ADDR_VAR 0 2
78878: PUSH
78879: LD_VAR 0 3
78883: ST_TO_ADDR
// end ;
78884: LD_VAR 0 2
78888: RET
// export function ComExitAll ( units ) ; var i ; begin
78889: LD_INT 0
78891: PPUSH
78892: PPUSH
// if not units then
78893: LD_VAR 0 1
78897: NOT
78898: IFFALSE 78902
// exit ;
78900: GO 78928
// for i in units do
78902: LD_ADDR_VAR 0 3
78906: PUSH
78907: LD_VAR 0 1
78911: PUSH
78912: FOR_IN
78913: IFFALSE 78926
// ComExit ( i ) ;
78915: LD_VAR 0 3
78919: PPUSH
78920: CALL 78806 0 1
78924: GO 78912
78926: POP
78927: POP
// end ;
78928: LD_VAR 0 2
78932: RET
// export function ResetHc ; begin
78933: LD_INT 0
78935: PPUSH
// InitHc ;
78936: CALL_OW 19
// hc_importance := 0 ;
78940: LD_ADDR_OWVAR 32
78944: PUSH
78945: LD_INT 0
78947: ST_TO_ADDR
// end ;
78948: LD_VAR 0 1
78952: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78953: LD_INT 0
78955: PPUSH
78956: PPUSH
78957: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78958: LD_ADDR_VAR 0 6
78962: PUSH
78963: LD_VAR 0 1
78967: PUSH
78968: LD_VAR 0 3
78972: PLUS
78973: PUSH
78974: LD_INT 2
78976: DIV
78977: ST_TO_ADDR
// if _x < 0 then
78978: LD_VAR 0 6
78982: PUSH
78983: LD_INT 0
78985: LESS
78986: IFFALSE 79003
// _x := _x * - 1 ;
78988: LD_ADDR_VAR 0 6
78992: PUSH
78993: LD_VAR 0 6
78997: PUSH
78998: LD_INT 1
79000: NEG
79001: MUL
79002: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79003: LD_ADDR_VAR 0 7
79007: PUSH
79008: LD_VAR 0 2
79012: PUSH
79013: LD_VAR 0 4
79017: PLUS
79018: PUSH
79019: LD_INT 2
79021: DIV
79022: ST_TO_ADDR
// if _y < 0 then
79023: LD_VAR 0 7
79027: PUSH
79028: LD_INT 0
79030: LESS
79031: IFFALSE 79048
// _y := _y * - 1 ;
79033: LD_ADDR_VAR 0 7
79037: PUSH
79038: LD_VAR 0 7
79042: PUSH
79043: LD_INT 1
79045: NEG
79046: MUL
79047: ST_TO_ADDR
// result := [ _x , _y ] ;
79048: LD_ADDR_VAR 0 5
79052: PUSH
79053: LD_VAR 0 6
79057: PUSH
79058: LD_VAR 0 7
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: ST_TO_ADDR
// end ;
79067: LD_VAR 0 5
79071: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79072: LD_INT 0
79074: PPUSH
79075: PPUSH
79076: PPUSH
79077: PPUSH
// task := GetTaskList ( unit ) ;
79078: LD_ADDR_VAR 0 7
79082: PUSH
79083: LD_VAR 0 1
79087: PPUSH
79088: CALL_OW 437
79092: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79093: LD_VAR 0 7
79097: NOT
79098: PUSH
79099: LD_VAR 0 1
79103: PPUSH
79104: LD_VAR 0 2
79108: PPUSH
79109: CALL_OW 308
79113: NOT
79114: AND
79115: IFFALSE 79119
// exit ;
79117: GO 79237
// if IsInArea ( unit , area ) then
79119: LD_VAR 0 1
79123: PPUSH
79124: LD_VAR 0 2
79128: PPUSH
79129: CALL_OW 308
79133: IFFALSE 79151
// begin ComMoveToArea ( unit , goAway ) ;
79135: LD_VAR 0 1
79139: PPUSH
79140: LD_VAR 0 3
79144: PPUSH
79145: CALL_OW 113
// exit ;
79149: GO 79237
// end ; if task [ 1 ] [ 1 ] <> M then
79151: LD_VAR 0 7
79155: PUSH
79156: LD_INT 1
79158: ARRAY
79159: PUSH
79160: LD_INT 1
79162: ARRAY
79163: PUSH
79164: LD_STRING M
79166: NONEQUAL
79167: IFFALSE 79171
// exit ;
79169: GO 79237
// x := task [ 1 ] [ 2 ] ;
79171: LD_ADDR_VAR 0 5
79175: PUSH
79176: LD_VAR 0 7
79180: PUSH
79181: LD_INT 1
79183: ARRAY
79184: PUSH
79185: LD_INT 2
79187: ARRAY
79188: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79189: LD_ADDR_VAR 0 6
79193: PUSH
79194: LD_VAR 0 7
79198: PUSH
79199: LD_INT 1
79201: ARRAY
79202: PUSH
79203: LD_INT 3
79205: ARRAY
79206: ST_TO_ADDR
// if InArea ( x , y , area ) then
79207: LD_VAR 0 5
79211: PPUSH
79212: LD_VAR 0 6
79216: PPUSH
79217: LD_VAR 0 2
79221: PPUSH
79222: CALL_OW 309
79226: IFFALSE 79237
// ComStop ( unit ) ;
79228: LD_VAR 0 1
79232: PPUSH
79233: CALL_OW 141
// end ;
79237: LD_VAR 0 4
79241: RET
// export function Abs ( value ) ; begin
79242: LD_INT 0
79244: PPUSH
// result := value ;
79245: LD_ADDR_VAR 0 2
79249: PUSH
79250: LD_VAR 0 1
79254: ST_TO_ADDR
// if value < 0 then
79255: LD_VAR 0 1
79259: PUSH
79260: LD_INT 0
79262: LESS
79263: IFFALSE 79280
// result := value * - 1 ;
79265: LD_ADDR_VAR 0 2
79269: PUSH
79270: LD_VAR 0 1
79274: PUSH
79275: LD_INT 1
79277: NEG
79278: MUL
79279: ST_TO_ADDR
// end ;
79280: LD_VAR 0 2
79284: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79285: LD_INT 0
79287: PPUSH
79288: PPUSH
79289: PPUSH
79290: PPUSH
79291: PPUSH
79292: PPUSH
79293: PPUSH
79294: PPUSH
// if not unit or not building then
79295: LD_VAR 0 1
79299: NOT
79300: PUSH
79301: LD_VAR 0 2
79305: NOT
79306: OR
79307: IFFALSE 79311
// exit ;
79309: GO 79537
// x := GetX ( building ) ;
79311: LD_ADDR_VAR 0 4
79315: PUSH
79316: LD_VAR 0 2
79320: PPUSH
79321: CALL_OW 250
79325: ST_TO_ADDR
// y := GetY ( building ) ;
79326: LD_ADDR_VAR 0 6
79330: PUSH
79331: LD_VAR 0 2
79335: PPUSH
79336: CALL_OW 251
79340: ST_TO_ADDR
// d := GetDir ( building ) ;
79341: LD_ADDR_VAR 0 8
79345: PUSH
79346: LD_VAR 0 2
79350: PPUSH
79351: CALL_OW 254
79355: ST_TO_ADDR
// r := 4 ;
79356: LD_ADDR_VAR 0 9
79360: PUSH
79361: LD_INT 4
79363: ST_TO_ADDR
// for i := 1 to 5 do
79364: LD_ADDR_VAR 0 10
79368: PUSH
79369: DOUBLE
79370: LD_INT 1
79372: DEC
79373: ST_TO_ADDR
79374: LD_INT 5
79376: PUSH
79377: FOR_TO
79378: IFFALSE 79535
// begin _x := ShiftX ( x , d , r + i ) ;
79380: LD_ADDR_VAR 0 5
79384: PUSH
79385: LD_VAR 0 4
79389: PPUSH
79390: LD_VAR 0 8
79394: PPUSH
79395: LD_VAR 0 9
79399: PUSH
79400: LD_VAR 0 10
79404: PLUS
79405: PPUSH
79406: CALL_OW 272
79410: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79411: LD_ADDR_VAR 0 7
79415: PUSH
79416: LD_VAR 0 6
79420: PPUSH
79421: LD_VAR 0 8
79425: PPUSH
79426: LD_VAR 0 9
79430: PUSH
79431: LD_VAR 0 10
79435: PLUS
79436: PPUSH
79437: CALL_OW 273
79441: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79442: LD_VAR 0 5
79446: PPUSH
79447: LD_VAR 0 7
79451: PPUSH
79452: CALL_OW 488
79456: PUSH
79457: LD_VAR 0 5
79461: PPUSH
79462: LD_VAR 0 7
79466: PPUSH
79467: CALL_OW 428
79471: PPUSH
79472: CALL_OW 247
79476: PUSH
79477: LD_INT 3
79479: PUSH
79480: LD_INT 2
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: IN
79487: NOT
79488: AND
79489: IFFALSE 79533
// begin ComMoveXY ( unit , _x , _y ) ;
79491: LD_VAR 0 1
79495: PPUSH
79496: LD_VAR 0 5
79500: PPUSH
79501: LD_VAR 0 7
79505: PPUSH
79506: CALL_OW 111
// result := [ _x , _y ] ;
79510: LD_ADDR_VAR 0 3
79514: PUSH
79515: LD_VAR 0 5
79519: PUSH
79520: LD_VAR 0 7
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: ST_TO_ADDR
// exit ;
79529: POP
79530: POP
79531: GO 79537
// end ; end ;
79533: GO 79377
79535: POP
79536: POP
// end ;
79537: LD_VAR 0 3
79541: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79542: LD_INT 0
79544: PPUSH
79545: PPUSH
79546: PPUSH
// result := 0 ;
79547: LD_ADDR_VAR 0 3
79551: PUSH
79552: LD_INT 0
79554: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79555: LD_VAR 0 1
79559: PUSH
79560: LD_INT 0
79562: LESS
79563: PUSH
79564: LD_VAR 0 1
79568: PUSH
79569: LD_INT 8
79571: GREATER
79572: OR
79573: PUSH
79574: LD_VAR 0 2
79578: PUSH
79579: LD_INT 0
79581: LESS
79582: OR
79583: PUSH
79584: LD_VAR 0 2
79588: PUSH
79589: LD_INT 8
79591: GREATER
79592: OR
79593: IFFALSE 79597
// exit ;
79595: GO 79672
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79597: LD_ADDR_VAR 0 4
79601: PUSH
79602: LD_INT 22
79604: PUSH
79605: LD_VAR 0 2
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PPUSH
79614: CALL_OW 69
79618: PUSH
79619: FOR_IN
79620: IFFALSE 79670
// begin un := UnitShoot ( i ) ;
79622: LD_ADDR_VAR 0 5
79626: PUSH
79627: LD_VAR 0 4
79631: PPUSH
79632: CALL_OW 504
79636: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79637: LD_VAR 0 5
79641: PPUSH
79642: CALL_OW 255
79646: PUSH
79647: LD_VAR 0 1
79651: EQUAL
79652: IFFALSE 79668
// begin result := un ;
79654: LD_ADDR_VAR 0 3
79658: PUSH
79659: LD_VAR 0 5
79663: ST_TO_ADDR
// exit ;
79664: POP
79665: POP
79666: GO 79672
// end ; end ;
79668: GO 79619
79670: POP
79671: POP
// end ;
79672: LD_VAR 0 3
79676: RET
// export function GetCargoBay ( units ) ; begin
79677: LD_INT 0
79679: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79680: LD_ADDR_VAR 0 2
79684: PUSH
79685: LD_VAR 0 1
79689: PPUSH
79690: LD_INT 2
79692: PUSH
79693: LD_INT 34
79695: PUSH
79696: LD_INT 12
79698: PUSH
79699: EMPTY
79700: LIST
79701: LIST
79702: PUSH
79703: LD_INT 34
79705: PUSH
79706: LD_INT 51
79708: PUSH
79709: EMPTY
79710: LIST
79711: LIST
79712: PUSH
79713: LD_INT 34
79715: PUSH
79716: LD_INT 32
79718: PUSH
79719: EMPTY
79720: LIST
79721: LIST
79722: PUSH
79723: LD_INT 34
79725: PUSH
79726: LD_INT 89
79728: PUSH
79729: EMPTY
79730: LIST
79731: LIST
79732: PUSH
79733: EMPTY
79734: LIST
79735: LIST
79736: LIST
79737: LIST
79738: LIST
79739: PPUSH
79740: CALL_OW 72
79744: ST_TO_ADDR
// end ;
79745: LD_VAR 0 2
79749: RET
// export function Negate ( value ) ; begin
79750: LD_INT 0
79752: PPUSH
// result := not value ;
79753: LD_ADDR_VAR 0 2
79757: PUSH
79758: LD_VAR 0 1
79762: NOT
79763: ST_TO_ADDR
// end ;
79764: LD_VAR 0 2
79768: RET
// export function Inc ( value ) ; begin
79769: LD_INT 0
79771: PPUSH
// result := value + 1 ;
79772: LD_ADDR_VAR 0 2
79776: PUSH
79777: LD_VAR 0 1
79781: PUSH
79782: LD_INT 1
79784: PLUS
79785: ST_TO_ADDR
// end ;
79786: LD_VAR 0 2
79790: RET
// export function Dec ( value ) ; begin
79791: LD_INT 0
79793: PPUSH
// result := value - 1 ;
79794: LD_ADDR_VAR 0 2
79798: PUSH
79799: LD_VAR 0 1
79803: PUSH
79804: LD_INT 1
79806: MINUS
79807: ST_TO_ADDR
// end ;
79808: LD_VAR 0 2
79812: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79813: LD_INT 0
79815: PPUSH
79816: PPUSH
79817: PPUSH
79818: PPUSH
79819: PPUSH
79820: PPUSH
79821: PPUSH
79822: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79823: LD_VAR 0 1
79827: PPUSH
79828: LD_VAR 0 2
79832: PPUSH
79833: CALL_OW 488
79837: NOT
79838: PUSH
79839: LD_VAR 0 3
79843: PPUSH
79844: LD_VAR 0 4
79848: PPUSH
79849: CALL_OW 488
79853: NOT
79854: OR
79855: IFFALSE 79868
// begin result := - 1 ;
79857: LD_ADDR_VAR 0 5
79861: PUSH
79862: LD_INT 1
79864: NEG
79865: ST_TO_ADDR
// exit ;
79866: GO 80103
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79868: LD_ADDR_VAR 0 12
79872: PUSH
79873: LD_VAR 0 1
79877: PPUSH
79878: LD_VAR 0 2
79882: PPUSH
79883: LD_VAR 0 3
79887: PPUSH
79888: LD_VAR 0 4
79892: PPUSH
79893: CALL 78953 0 4
79897: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79898: LD_ADDR_VAR 0 11
79902: PUSH
79903: LD_VAR 0 1
79907: PPUSH
79908: LD_VAR 0 2
79912: PPUSH
79913: LD_VAR 0 12
79917: PUSH
79918: LD_INT 1
79920: ARRAY
79921: PPUSH
79922: LD_VAR 0 12
79926: PUSH
79927: LD_INT 2
79929: ARRAY
79930: PPUSH
79931: CALL_OW 298
79935: ST_TO_ADDR
// distance := 9999 ;
79936: LD_ADDR_VAR 0 10
79940: PUSH
79941: LD_INT 9999
79943: ST_TO_ADDR
// for i := 0 to 5 do
79944: LD_ADDR_VAR 0 6
79948: PUSH
79949: DOUBLE
79950: LD_INT 0
79952: DEC
79953: ST_TO_ADDR
79954: LD_INT 5
79956: PUSH
79957: FOR_TO
79958: IFFALSE 80101
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79960: LD_ADDR_VAR 0 7
79964: PUSH
79965: LD_VAR 0 1
79969: PPUSH
79970: LD_VAR 0 6
79974: PPUSH
79975: LD_VAR 0 11
79979: PPUSH
79980: CALL_OW 272
79984: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79985: LD_ADDR_VAR 0 8
79989: PUSH
79990: LD_VAR 0 2
79994: PPUSH
79995: LD_VAR 0 6
79999: PPUSH
80000: LD_VAR 0 11
80004: PPUSH
80005: CALL_OW 273
80009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80010: LD_VAR 0 7
80014: PPUSH
80015: LD_VAR 0 8
80019: PPUSH
80020: CALL_OW 488
80024: NOT
80025: IFFALSE 80029
// continue ;
80027: GO 79957
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80029: LD_ADDR_VAR 0 9
80033: PUSH
80034: LD_VAR 0 12
80038: PUSH
80039: LD_INT 1
80041: ARRAY
80042: PPUSH
80043: LD_VAR 0 12
80047: PUSH
80048: LD_INT 2
80050: ARRAY
80051: PPUSH
80052: LD_VAR 0 7
80056: PPUSH
80057: LD_VAR 0 8
80061: PPUSH
80062: CALL_OW 298
80066: ST_TO_ADDR
// if tmp < distance then
80067: LD_VAR 0 9
80071: PUSH
80072: LD_VAR 0 10
80076: LESS
80077: IFFALSE 80099
// begin result := i ;
80079: LD_ADDR_VAR 0 5
80083: PUSH
80084: LD_VAR 0 6
80088: ST_TO_ADDR
// distance := tmp ;
80089: LD_ADDR_VAR 0 10
80093: PUSH
80094: LD_VAR 0 9
80098: ST_TO_ADDR
// end ; end ;
80099: GO 79957
80101: POP
80102: POP
// end ;
80103: LD_VAR 0 5
80107: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80108: LD_INT 0
80110: PPUSH
80111: PPUSH
// if not driver or not IsInUnit ( driver ) then
80112: LD_VAR 0 1
80116: NOT
80117: PUSH
80118: LD_VAR 0 1
80122: PPUSH
80123: CALL_OW 310
80127: NOT
80128: OR
80129: IFFALSE 80133
// exit ;
80131: GO 80223
// vehicle := IsInUnit ( driver ) ;
80133: LD_ADDR_VAR 0 3
80137: PUSH
80138: LD_VAR 0 1
80142: PPUSH
80143: CALL_OW 310
80147: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80148: LD_VAR 0 1
80152: PPUSH
80153: LD_STRING \
80155: PUSH
80156: LD_INT 0
80158: PUSH
80159: LD_INT 0
80161: PUSH
80162: LD_INT 0
80164: PUSH
80165: LD_INT 0
80167: PUSH
80168: LD_INT 0
80170: PUSH
80171: LD_INT 0
80173: PUSH
80174: EMPTY
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: PUSH
80183: LD_STRING E
80185: PUSH
80186: LD_INT 0
80188: PUSH
80189: LD_INT 0
80191: PUSH
80192: LD_VAR 0 3
80196: PUSH
80197: LD_INT 0
80199: PUSH
80200: LD_INT 0
80202: PUSH
80203: LD_INT 0
80205: PUSH
80206: EMPTY
80207: LIST
80208: LIST
80209: LIST
80210: LIST
80211: LIST
80212: LIST
80213: LIST
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PPUSH
80219: CALL_OW 446
// end ;
80223: LD_VAR 0 2
80227: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80228: LD_INT 0
80230: PPUSH
80231: PPUSH
// if not driver or not IsInUnit ( driver ) then
80232: LD_VAR 0 1
80236: NOT
80237: PUSH
80238: LD_VAR 0 1
80242: PPUSH
80243: CALL_OW 310
80247: NOT
80248: OR
80249: IFFALSE 80253
// exit ;
80251: GO 80343
// vehicle := IsInUnit ( driver ) ;
80253: LD_ADDR_VAR 0 3
80257: PUSH
80258: LD_VAR 0 1
80262: PPUSH
80263: CALL_OW 310
80267: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80268: LD_VAR 0 1
80272: PPUSH
80273: LD_STRING \
80275: PUSH
80276: LD_INT 0
80278: PUSH
80279: LD_INT 0
80281: PUSH
80282: LD_INT 0
80284: PUSH
80285: LD_INT 0
80287: PUSH
80288: LD_INT 0
80290: PUSH
80291: LD_INT 0
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: LIST
80298: LIST
80299: LIST
80300: LIST
80301: LIST
80302: PUSH
80303: LD_STRING E
80305: PUSH
80306: LD_INT 0
80308: PUSH
80309: LD_INT 0
80311: PUSH
80312: LD_VAR 0 3
80316: PUSH
80317: LD_INT 0
80319: PUSH
80320: LD_INT 0
80322: PUSH
80323: LD_INT 0
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: LIST
80330: LIST
80331: LIST
80332: LIST
80333: LIST
80334: PUSH
80335: EMPTY
80336: LIST
80337: LIST
80338: PPUSH
80339: CALL_OW 447
// end ;
80343: LD_VAR 0 2
80347: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80348: LD_INT 0
80350: PPUSH
80351: PPUSH
80352: PPUSH
// tmp := [ ] ;
80353: LD_ADDR_VAR 0 5
80357: PUSH
80358: EMPTY
80359: ST_TO_ADDR
// for i in units do
80360: LD_ADDR_VAR 0 4
80364: PUSH
80365: LD_VAR 0 1
80369: PUSH
80370: FOR_IN
80371: IFFALSE 80409
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80373: LD_ADDR_VAR 0 5
80377: PUSH
80378: LD_VAR 0 5
80382: PPUSH
80383: LD_VAR 0 5
80387: PUSH
80388: LD_INT 1
80390: PLUS
80391: PPUSH
80392: LD_VAR 0 4
80396: PPUSH
80397: CALL_OW 256
80401: PPUSH
80402: CALL_OW 2
80406: ST_TO_ADDR
80407: GO 80370
80409: POP
80410: POP
// if not tmp then
80411: LD_VAR 0 5
80415: NOT
80416: IFFALSE 80420
// exit ;
80418: GO 80468
// if asc then
80420: LD_VAR 0 2
80424: IFFALSE 80448
// result := SortListByListAsc ( units , tmp ) else
80426: LD_ADDR_VAR 0 3
80430: PUSH
80431: LD_VAR 0 1
80435: PPUSH
80436: LD_VAR 0 5
80440: PPUSH
80441: CALL_OW 76
80445: ST_TO_ADDR
80446: GO 80468
// result := SortListByListDesc ( units , tmp ) ;
80448: LD_ADDR_VAR 0 3
80452: PUSH
80453: LD_VAR 0 1
80457: PPUSH
80458: LD_VAR 0 5
80462: PPUSH
80463: CALL_OW 77
80467: ST_TO_ADDR
// end ;
80468: LD_VAR 0 3
80472: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80473: LD_INT 0
80475: PPUSH
80476: PPUSH
// task := GetTaskList ( mech ) ;
80477: LD_ADDR_VAR 0 4
80481: PUSH
80482: LD_VAR 0 1
80486: PPUSH
80487: CALL_OW 437
80491: ST_TO_ADDR
// if not task then
80492: LD_VAR 0 4
80496: NOT
80497: IFFALSE 80501
// exit ;
80499: GO 80543
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80501: LD_ADDR_VAR 0 3
80505: PUSH
80506: LD_VAR 0 4
80510: PUSH
80511: LD_INT 1
80513: ARRAY
80514: PUSH
80515: LD_INT 1
80517: ARRAY
80518: PUSH
80519: LD_STRING r
80521: EQUAL
80522: PUSH
80523: LD_VAR 0 4
80527: PUSH
80528: LD_INT 1
80530: ARRAY
80531: PUSH
80532: LD_INT 4
80534: ARRAY
80535: PUSH
80536: LD_VAR 0 2
80540: EQUAL
80541: AND
80542: ST_TO_ADDR
// end ;
80543: LD_VAR 0 3
80547: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80548: LD_INT 0
80550: PPUSH
// SetDir ( unit , d ) ;
80551: LD_VAR 0 1
80555: PPUSH
80556: LD_VAR 0 4
80560: PPUSH
80561: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80565: LD_VAR 0 1
80569: PPUSH
80570: LD_VAR 0 2
80574: PPUSH
80575: LD_VAR 0 3
80579: PPUSH
80580: LD_VAR 0 5
80584: PPUSH
80585: CALL_OW 48
// end ;
80589: LD_VAR 0 6
80593: RET
// export function ToNaturalNumber ( number ) ; begin
80594: LD_INT 0
80596: PPUSH
// result := number div 1 ;
80597: LD_ADDR_VAR 0 2
80601: PUSH
80602: LD_VAR 0 1
80606: PUSH
80607: LD_INT 1
80609: DIV
80610: ST_TO_ADDR
// if number < 0 then
80611: LD_VAR 0 1
80615: PUSH
80616: LD_INT 0
80618: LESS
80619: IFFALSE 80629
// result := 0 ;
80621: LD_ADDR_VAR 0 2
80625: PUSH
80626: LD_INT 0
80628: ST_TO_ADDR
// end ;
80629: LD_VAR 0 2
80633: RET
// export function SortByClass ( units , class ) ; var un ; begin
80634: LD_INT 0
80636: PPUSH
80637: PPUSH
// if not units or not class then
80638: LD_VAR 0 1
80642: NOT
80643: PUSH
80644: LD_VAR 0 2
80648: NOT
80649: OR
80650: IFFALSE 80654
// exit ;
80652: GO 80749
// result := [ ] ;
80654: LD_ADDR_VAR 0 3
80658: PUSH
80659: EMPTY
80660: ST_TO_ADDR
// for un in units do
80661: LD_ADDR_VAR 0 4
80665: PUSH
80666: LD_VAR 0 1
80670: PUSH
80671: FOR_IN
80672: IFFALSE 80747
// if GetClass ( un ) = class then
80674: LD_VAR 0 4
80678: PPUSH
80679: CALL_OW 257
80683: PUSH
80684: LD_VAR 0 2
80688: EQUAL
80689: IFFALSE 80716
// result := Insert ( result , 1 , un ) else
80691: LD_ADDR_VAR 0 3
80695: PUSH
80696: LD_VAR 0 3
80700: PPUSH
80701: LD_INT 1
80703: PPUSH
80704: LD_VAR 0 4
80708: PPUSH
80709: CALL_OW 2
80713: ST_TO_ADDR
80714: GO 80745
// result := Replace ( result , result + 1 , un ) ;
80716: LD_ADDR_VAR 0 3
80720: PUSH
80721: LD_VAR 0 3
80725: PPUSH
80726: LD_VAR 0 3
80730: PUSH
80731: LD_INT 1
80733: PLUS
80734: PPUSH
80735: LD_VAR 0 4
80739: PPUSH
80740: CALL_OW 1
80744: ST_TO_ADDR
80745: GO 80671
80747: POP
80748: POP
// end ;
80749: LD_VAR 0 3
80753: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80754: LD_INT 0
80756: PPUSH
80757: PPUSH
80758: PPUSH
80759: PPUSH
80760: PPUSH
80761: PPUSH
80762: PPUSH
// result := [ ] ;
80763: LD_ADDR_VAR 0 4
80767: PUSH
80768: EMPTY
80769: ST_TO_ADDR
// if x - r < 0 then
80770: LD_VAR 0 1
80774: PUSH
80775: LD_VAR 0 3
80779: MINUS
80780: PUSH
80781: LD_INT 0
80783: LESS
80784: IFFALSE 80796
// min_x := 0 else
80786: LD_ADDR_VAR 0 8
80790: PUSH
80791: LD_INT 0
80793: ST_TO_ADDR
80794: GO 80812
// min_x := x - r ;
80796: LD_ADDR_VAR 0 8
80800: PUSH
80801: LD_VAR 0 1
80805: PUSH
80806: LD_VAR 0 3
80810: MINUS
80811: ST_TO_ADDR
// if y - r < 0 then
80812: LD_VAR 0 2
80816: PUSH
80817: LD_VAR 0 3
80821: MINUS
80822: PUSH
80823: LD_INT 0
80825: LESS
80826: IFFALSE 80838
// min_y := 0 else
80828: LD_ADDR_VAR 0 7
80832: PUSH
80833: LD_INT 0
80835: ST_TO_ADDR
80836: GO 80854
// min_y := y - r ;
80838: LD_ADDR_VAR 0 7
80842: PUSH
80843: LD_VAR 0 2
80847: PUSH
80848: LD_VAR 0 3
80852: MINUS
80853: ST_TO_ADDR
// max_x := x + r ;
80854: LD_ADDR_VAR 0 9
80858: PUSH
80859: LD_VAR 0 1
80863: PUSH
80864: LD_VAR 0 3
80868: PLUS
80869: ST_TO_ADDR
// max_y := y + r ;
80870: LD_ADDR_VAR 0 10
80874: PUSH
80875: LD_VAR 0 2
80879: PUSH
80880: LD_VAR 0 3
80884: PLUS
80885: ST_TO_ADDR
// for _x = min_x to max_x do
80886: LD_ADDR_VAR 0 5
80890: PUSH
80891: DOUBLE
80892: LD_VAR 0 8
80896: DEC
80897: ST_TO_ADDR
80898: LD_VAR 0 9
80902: PUSH
80903: FOR_TO
80904: IFFALSE 81005
// for _y = min_y to max_y do
80906: LD_ADDR_VAR 0 6
80910: PUSH
80911: DOUBLE
80912: LD_VAR 0 7
80916: DEC
80917: ST_TO_ADDR
80918: LD_VAR 0 10
80922: PUSH
80923: FOR_TO
80924: IFFALSE 81001
// begin if not ValidHex ( _x , _y ) then
80926: LD_VAR 0 5
80930: PPUSH
80931: LD_VAR 0 6
80935: PPUSH
80936: CALL_OW 488
80940: NOT
80941: IFFALSE 80945
// continue ;
80943: GO 80923
// if GetResourceTypeXY ( _x , _y ) then
80945: LD_VAR 0 5
80949: PPUSH
80950: LD_VAR 0 6
80954: PPUSH
80955: CALL_OW 283
80959: IFFALSE 80999
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80961: LD_ADDR_VAR 0 4
80965: PUSH
80966: LD_VAR 0 4
80970: PPUSH
80971: LD_VAR 0 4
80975: PUSH
80976: LD_INT 1
80978: PLUS
80979: PPUSH
80980: LD_VAR 0 5
80984: PUSH
80985: LD_VAR 0 6
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: PPUSH
80994: CALL_OW 1
80998: ST_TO_ADDR
// end ;
80999: GO 80923
81001: POP
81002: POP
81003: GO 80903
81005: POP
81006: POP
// end ;
81007: LD_VAR 0 4
81011: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81012: LD_INT 0
81014: PPUSH
81015: PPUSH
81016: PPUSH
81017: PPUSH
81018: PPUSH
81019: PPUSH
81020: PPUSH
81021: PPUSH
// if not units then
81022: LD_VAR 0 1
81026: NOT
81027: IFFALSE 81031
// exit ;
81029: GO 81555
// result := UnitFilter ( units , [ f_ok ] ) ;
81031: LD_ADDR_VAR 0 3
81035: PUSH
81036: LD_VAR 0 1
81040: PPUSH
81041: LD_INT 50
81043: PUSH
81044: EMPTY
81045: LIST
81046: PPUSH
81047: CALL_OW 72
81051: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81052: LD_ADDR_VAR 0 8
81056: PUSH
81057: LD_VAR 0 1
81061: PUSH
81062: LD_INT 1
81064: ARRAY
81065: PPUSH
81066: CALL_OW 255
81070: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81071: LD_ADDR_VAR 0 10
81075: PUSH
81076: LD_INT 29
81078: PUSH
81079: LD_INT 91
81081: PUSH
81082: LD_INT 49
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: LIST
81089: ST_TO_ADDR
// if not result then
81090: LD_VAR 0 3
81094: NOT
81095: IFFALSE 81099
// exit ;
81097: GO 81555
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81099: LD_ADDR_VAR 0 5
81103: PUSH
81104: LD_INT 81
81106: PUSH
81107: LD_VAR 0 8
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PPUSH
81116: CALL_OW 69
81120: ST_TO_ADDR
// for i in result do
81121: LD_ADDR_VAR 0 4
81125: PUSH
81126: LD_VAR 0 3
81130: PUSH
81131: FOR_IN
81132: IFFALSE 81553
// begin tag := GetTag ( i ) + 1 ;
81134: LD_ADDR_VAR 0 9
81138: PUSH
81139: LD_VAR 0 4
81143: PPUSH
81144: CALL_OW 110
81148: PUSH
81149: LD_INT 1
81151: PLUS
81152: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81153: LD_ADDR_VAR 0 7
81157: PUSH
81158: LD_VAR 0 4
81162: PPUSH
81163: CALL_OW 250
81167: PPUSH
81168: LD_VAR 0 4
81172: PPUSH
81173: CALL_OW 251
81177: PPUSH
81178: LD_INT 6
81180: PPUSH
81181: CALL 80754 0 3
81185: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81186: LD_VAR 0 4
81190: PPUSH
81191: CALL_OW 247
81195: PUSH
81196: LD_INT 2
81198: EQUAL
81199: PUSH
81200: LD_VAR 0 7
81204: AND
81205: PUSH
81206: LD_VAR 0 4
81210: PPUSH
81211: CALL_OW 264
81215: PUSH
81216: LD_VAR 0 10
81220: IN
81221: NOT
81222: AND
81223: IFFALSE 81262
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81225: LD_VAR 0 4
81229: PPUSH
81230: LD_VAR 0 7
81234: PUSH
81235: LD_INT 1
81237: ARRAY
81238: PUSH
81239: LD_INT 1
81241: ARRAY
81242: PPUSH
81243: LD_VAR 0 7
81247: PUSH
81248: LD_INT 1
81250: ARRAY
81251: PUSH
81252: LD_INT 2
81254: ARRAY
81255: PPUSH
81256: CALL_OW 116
81260: GO 81551
// if path > tag then
81262: LD_VAR 0 2
81266: PUSH
81267: LD_VAR 0 9
81271: GREATER
81272: IFFALSE 81480
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81274: LD_ADDR_VAR 0 6
81278: PUSH
81279: LD_VAR 0 5
81283: PPUSH
81284: LD_INT 91
81286: PUSH
81287: LD_VAR 0 4
81291: PUSH
81292: LD_INT 8
81294: PUSH
81295: EMPTY
81296: LIST
81297: LIST
81298: LIST
81299: PPUSH
81300: CALL_OW 72
81304: ST_TO_ADDR
// if nearEnemy then
81305: LD_VAR 0 6
81309: IFFALSE 81378
// begin if GetWeapon ( i ) = ru_time_lapser then
81311: LD_VAR 0 4
81315: PPUSH
81316: CALL_OW 264
81320: PUSH
81321: LD_INT 49
81323: EQUAL
81324: IFFALSE 81352
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81326: LD_VAR 0 4
81330: PPUSH
81331: LD_VAR 0 6
81335: PPUSH
81336: LD_VAR 0 4
81340: PPUSH
81341: CALL_OW 74
81345: PPUSH
81346: CALL_OW 112
81350: GO 81376
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81352: LD_VAR 0 4
81356: PPUSH
81357: LD_VAR 0 6
81361: PPUSH
81362: LD_VAR 0 4
81366: PPUSH
81367: CALL_OW 74
81371: PPUSH
81372: CALL 82480 0 2
// end else
81376: GO 81478
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81378: LD_VAR 0 4
81382: PPUSH
81383: LD_VAR 0 2
81387: PUSH
81388: LD_VAR 0 9
81392: ARRAY
81393: PUSH
81394: LD_INT 1
81396: ARRAY
81397: PPUSH
81398: LD_VAR 0 2
81402: PUSH
81403: LD_VAR 0 9
81407: ARRAY
81408: PUSH
81409: LD_INT 2
81411: ARRAY
81412: PPUSH
81413: CALL_OW 297
81417: PUSH
81418: LD_INT 6
81420: GREATER
81421: IFFALSE 81464
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81423: LD_VAR 0 4
81427: PPUSH
81428: LD_VAR 0 2
81432: PUSH
81433: LD_VAR 0 9
81437: ARRAY
81438: PUSH
81439: LD_INT 1
81441: ARRAY
81442: PPUSH
81443: LD_VAR 0 2
81447: PUSH
81448: LD_VAR 0 9
81452: ARRAY
81453: PUSH
81454: LD_INT 2
81456: ARRAY
81457: PPUSH
81458: CALL_OW 114
81462: GO 81478
// SetTag ( i , tag ) ;
81464: LD_VAR 0 4
81468: PPUSH
81469: LD_VAR 0 9
81473: PPUSH
81474: CALL_OW 109
// end else
81478: GO 81551
// if enemy then
81480: LD_VAR 0 5
81484: IFFALSE 81551
// begin if GetWeapon ( i ) = ru_time_lapser then
81486: LD_VAR 0 4
81490: PPUSH
81491: CALL_OW 264
81495: PUSH
81496: LD_INT 49
81498: EQUAL
81499: IFFALSE 81527
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81501: LD_VAR 0 4
81505: PPUSH
81506: LD_VAR 0 5
81510: PPUSH
81511: LD_VAR 0 4
81515: PPUSH
81516: CALL_OW 74
81520: PPUSH
81521: CALL_OW 112
81525: GO 81551
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81527: LD_VAR 0 4
81531: PPUSH
81532: LD_VAR 0 5
81536: PPUSH
81537: LD_VAR 0 4
81541: PPUSH
81542: CALL_OW 74
81546: PPUSH
81547: CALL 82480 0 2
// end ; end ;
81551: GO 81131
81553: POP
81554: POP
// end ;
81555: LD_VAR 0 3
81559: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81560: LD_INT 0
81562: PPUSH
81563: PPUSH
81564: PPUSH
// if not unit or IsInUnit ( unit ) then
81565: LD_VAR 0 1
81569: NOT
81570: PUSH
81571: LD_VAR 0 1
81575: PPUSH
81576: CALL_OW 310
81580: OR
81581: IFFALSE 81585
// exit ;
81583: GO 81676
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81585: LD_ADDR_VAR 0 4
81589: PUSH
81590: LD_VAR 0 1
81594: PPUSH
81595: CALL_OW 250
81599: PPUSH
81600: LD_VAR 0 2
81604: PPUSH
81605: LD_INT 1
81607: PPUSH
81608: CALL_OW 272
81612: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81613: LD_ADDR_VAR 0 5
81617: PUSH
81618: LD_VAR 0 1
81622: PPUSH
81623: CALL_OW 251
81627: PPUSH
81628: LD_VAR 0 2
81632: PPUSH
81633: LD_INT 1
81635: PPUSH
81636: CALL_OW 273
81640: ST_TO_ADDR
// if ValidHex ( x , y ) then
81641: LD_VAR 0 4
81645: PPUSH
81646: LD_VAR 0 5
81650: PPUSH
81651: CALL_OW 488
81655: IFFALSE 81676
// ComTurnXY ( unit , x , y ) ;
81657: LD_VAR 0 1
81661: PPUSH
81662: LD_VAR 0 4
81666: PPUSH
81667: LD_VAR 0 5
81671: PPUSH
81672: CALL_OW 118
// end ;
81676: LD_VAR 0 3
81680: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81681: LD_INT 0
81683: PPUSH
81684: PPUSH
// result := false ;
81685: LD_ADDR_VAR 0 3
81689: PUSH
81690: LD_INT 0
81692: ST_TO_ADDR
// if not units then
81693: LD_VAR 0 2
81697: NOT
81698: IFFALSE 81702
// exit ;
81700: GO 81747
// for i in units do
81702: LD_ADDR_VAR 0 4
81706: PUSH
81707: LD_VAR 0 2
81711: PUSH
81712: FOR_IN
81713: IFFALSE 81745
// if See ( side , i ) then
81715: LD_VAR 0 1
81719: PPUSH
81720: LD_VAR 0 4
81724: PPUSH
81725: CALL_OW 292
81729: IFFALSE 81743
// begin result := true ;
81731: LD_ADDR_VAR 0 3
81735: PUSH
81736: LD_INT 1
81738: ST_TO_ADDR
// exit ;
81739: POP
81740: POP
81741: GO 81747
// end ;
81743: GO 81712
81745: POP
81746: POP
// end ;
81747: LD_VAR 0 3
81751: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81752: LD_INT 0
81754: PPUSH
81755: PPUSH
81756: PPUSH
81757: PPUSH
// if not unit or not points then
81758: LD_VAR 0 1
81762: NOT
81763: PUSH
81764: LD_VAR 0 2
81768: NOT
81769: OR
81770: IFFALSE 81774
// exit ;
81772: GO 81864
// dist := 99999 ;
81774: LD_ADDR_VAR 0 5
81778: PUSH
81779: LD_INT 99999
81781: ST_TO_ADDR
// for i in points do
81782: LD_ADDR_VAR 0 4
81786: PUSH
81787: LD_VAR 0 2
81791: PUSH
81792: FOR_IN
81793: IFFALSE 81862
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81795: LD_ADDR_VAR 0 6
81799: PUSH
81800: LD_VAR 0 1
81804: PPUSH
81805: LD_VAR 0 4
81809: PUSH
81810: LD_INT 1
81812: ARRAY
81813: PPUSH
81814: LD_VAR 0 4
81818: PUSH
81819: LD_INT 2
81821: ARRAY
81822: PPUSH
81823: CALL_OW 297
81827: ST_TO_ADDR
// if tmpDist < dist then
81828: LD_VAR 0 6
81832: PUSH
81833: LD_VAR 0 5
81837: LESS
81838: IFFALSE 81860
// begin result := i ;
81840: LD_ADDR_VAR 0 3
81844: PUSH
81845: LD_VAR 0 4
81849: ST_TO_ADDR
// dist := tmpDist ;
81850: LD_ADDR_VAR 0 5
81854: PUSH
81855: LD_VAR 0 6
81859: ST_TO_ADDR
// end ; end ;
81860: GO 81792
81862: POP
81863: POP
// end ;
81864: LD_VAR 0 3
81868: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81869: LD_INT 0
81871: PPUSH
// uc_side := side ;
81872: LD_ADDR_OWVAR 20
81876: PUSH
81877: LD_VAR 0 1
81881: ST_TO_ADDR
// uc_nation := 3 ;
81882: LD_ADDR_OWVAR 21
81886: PUSH
81887: LD_INT 3
81889: ST_TO_ADDR
// vc_chassis := 25 ;
81890: LD_ADDR_OWVAR 37
81894: PUSH
81895: LD_INT 25
81897: ST_TO_ADDR
// vc_engine := engine_siberite ;
81898: LD_ADDR_OWVAR 39
81902: PUSH
81903: LD_INT 3
81905: ST_TO_ADDR
// vc_control := control_computer ;
81906: LD_ADDR_OWVAR 38
81910: PUSH
81911: LD_INT 3
81913: ST_TO_ADDR
// vc_weapon := 59 ;
81914: LD_ADDR_OWVAR 40
81918: PUSH
81919: LD_INT 59
81921: ST_TO_ADDR
// result := CreateVehicle ;
81922: LD_ADDR_VAR 0 5
81926: PUSH
81927: CALL_OW 45
81931: ST_TO_ADDR
// SetDir ( result , d ) ;
81932: LD_VAR 0 5
81936: PPUSH
81937: LD_VAR 0 4
81941: PPUSH
81942: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81946: LD_VAR 0 5
81950: PPUSH
81951: LD_VAR 0 2
81955: PPUSH
81956: LD_VAR 0 3
81960: PPUSH
81961: LD_INT 0
81963: PPUSH
81964: CALL_OW 48
// end ;
81968: LD_VAR 0 5
81972: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81973: LD_INT 0
81975: PPUSH
81976: PPUSH
81977: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81978: LD_ADDR_VAR 0 2
81982: PUSH
81983: LD_INT 0
81985: PUSH
81986: LD_INT 0
81988: PUSH
81989: LD_INT 0
81991: PUSH
81992: LD_INT 0
81994: PUSH
81995: EMPTY
81996: LIST
81997: LIST
81998: LIST
81999: LIST
82000: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82001: LD_VAR 0 1
82005: NOT
82006: PUSH
82007: LD_VAR 0 1
82011: PPUSH
82012: CALL_OW 264
82016: PUSH
82017: LD_INT 12
82019: PUSH
82020: LD_INT 51
82022: PUSH
82023: LD_INT 32
82025: PUSH
82026: LD_INT 89
82028: PUSH
82029: EMPTY
82030: LIST
82031: LIST
82032: LIST
82033: LIST
82034: IN
82035: NOT
82036: OR
82037: IFFALSE 82041
// exit ;
82039: GO 82139
// for i := 1 to 3 do
82041: LD_ADDR_VAR 0 3
82045: PUSH
82046: DOUBLE
82047: LD_INT 1
82049: DEC
82050: ST_TO_ADDR
82051: LD_INT 3
82053: PUSH
82054: FOR_TO
82055: IFFALSE 82137
// begin tmp := GetCargo ( cargo , i ) ;
82057: LD_ADDR_VAR 0 4
82061: PUSH
82062: LD_VAR 0 1
82066: PPUSH
82067: LD_VAR 0 3
82071: PPUSH
82072: CALL_OW 289
82076: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82077: LD_ADDR_VAR 0 2
82081: PUSH
82082: LD_VAR 0 2
82086: PPUSH
82087: LD_VAR 0 3
82091: PPUSH
82092: LD_VAR 0 4
82096: PPUSH
82097: CALL_OW 1
82101: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82102: LD_ADDR_VAR 0 2
82106: PUSH
82107: LD_VAR 0 2
82111: PPUSH
82112: LD_INT 4
82114: PPUSH
82115: LD_VAR 0 2
82119: PUSH
82120: LD_INT 4
82122: ARRAY
82123: PUSH
82124: LD_VAR 0 4
82128: PLUS
82129: PPUSH
82130: CALL_OW 1
82134: ST_TO_ADDR
// end ;
82135: GO 82054
82137: POP
82138: POP
// end ;
82139: LD_VAR 0 2
82143: RET
// export function Length ( array ) ; begin
82144: LD_INT 0
82146: PPUSH
// result := array + 0 ;
82147: LD_ADDR_VAR 0 2
82151: PUSH
82152: LD_VAR 0 1
82156: PUSH
82157: LD_INT 0
82159: PLUS
82160: ST_TO_ADDR
// end ;
82161: LD_VAR 0 2
82165: RET
// export function PrepareArray ( array ) ; begin
82166: LD_INT 0
82168: PPUSH
// result := array diff 0 ;
82169: LD_ADDR_VAR 0 2
82173: PUSH
82174: LD_VAR 0 1
82178: PUSH
82179: LD_INT 0
82181: DIFF
82182: ST_TO_ADDR
// if not result [ 1 ] then
82183: LD_VAR 0 2
82187: PUSH
82188: LD_INT 1
82190: ARRAY
82191: NOT
82192: IFFALSE 82212
// result := Delete ( result , 1 ) ;
82194: LD_ADDR_VAR 0 2
82198: PUSH
82199: LD_VAR 0 2
82203: PPUSH
82204: LD_INT 1
82206: PPUSH
82207: CALL_OW 3
82211: ST_TO_ADDR
// end ;
82212: LD_VAR 0 2
82216: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82217: LD_INT 0
82219: PPUSH
82220: PPUSH
82221: PPUSH
82222: PPUSH
// sibRocketRange := 25 ;
82223: LD_ADDR_VAR 0 6
82227: PUSH
82228: LD_INT 25
82230: ST_TO_ADDR
// result := false ;
82231: LD_ADDR_VAR 0 4
82235: PUSH
82236: LD_INT 0
82238: ST_TO_ADDR
// for i := 0 to 5 do
82239: LD_ADDR_VAR 0 5
82243: PUSH
82244: DOUBLE
82245: LD_INT 0
82247: DEC
82248: ST_TO_ADDR
82249: LD_INT 5
82251: PUSH
82252: FOR_TO
82253: IFFALSE 82320
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82255: LD_VAR 0 1
82259: PPUSH
82260: LD_VAR 0 5
82264: PPUSH
82265: LD_VAR 0 6
82269: PPUSH
82270: CALL_OW 272
82274: PPUSH
82275: LD_VAR 0 2
82279: PPUSH
82280: LD_VAR 0 5
82284: PPUSH
82285: LD_VAR 0 6
82289: PPUSH
82290: CALL_OW 273
82294: PPUSH
82295: LD_VAR 0 3
82299: PPUSH
82300: CALL_OW 309
82304: IFFALSE 82318
// begin result := true ;
82306: LD_ADDR_VAR 0 4
82310: PUSH
82311: LD_INT 1
82313: ST_TO_ADDR
// exit ;
82314: POP
82315: POP
82316: GO 82322
// end ;
82318: GO 82252
82320: POP
82321: POP
// end ;
82322: LD_VAR 0 4
82326: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82327: LD_INT 0
82329: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82330: LD_VAR 0 1
82334: PPUSH
82335: LD_VAR 0 2
82339: PPUSH
82340: LD_INT 0
82342: PPUSH
82343: LD_INT 0
82345: PPUSH
82346: LD_INT 1
82348: PPUSH
82349: LD_INT 0
82351: PPUSH
82352: CALL_OW 587
// end ;
82356: LD_VAR 0 3
82360: RET
// export function CenterOnNow ( unit ) ; begin
82361: LD_INT 0
82363: PPUSH
// result := IsInUnit ( unit ) ;
82364: LD_ADDR_VAR 0 2
82368: PUSH
82369: LD_VAR 0 1
82373: PPUSH
82374: CALL_OW 310
82378: ST_TO_ADDR
// if not result then
82379: LD_VAR 0 2
82383: NOT
82384: IFFALSE 82396
// result := unit ;
82386: LD_ADDR_VAR 0 2
82390: PUSH
82391: LD_VAR 0 1
82395: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82396: LD_VAR 0 1
82400: PPUSH
82401: CALL_OW 87
// end ;
82405: LD_VAR 0 2
82409: RET
// export function ComMoveHex ( unit , hex ) ; begin
82410: LD_INT 0
82412: PPUSH
// if not hex then
82413: LD_VAR 0 2
82417: NOT
82418: IFFALSE 82422
// exit ;
82420: GO 82475
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82422: LD_VAR 0 2
82426: PUSH
82427: LD_INT 1
82429: ARRAY
82430: PPUSH
82431: LD_VAR 0 2
82435: PUSH
82436: LD_INT 2
82438: ARRAY
82439: PPUSH
82440: CALL_OW 428
82444: IFFALSE 82448
// exit ;
82446: GO 82475
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82448: LD_VAR 0 1
82452: PPUSH
82453: LD_VAR 0 2
82457: PUSH
82458: LD_INT 1
82460: ARRAY
82461: PPUSH
82462: LD_VAR 0 2
82466: PUSH
82467: LD_INT 2
82469: ARRAY
82470: PPUSH
82471: CALL_OW 111
// end ;
82475: LD_VAR 0 3
82479: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82480: LD_INT 0
82482: PPUSH
82483: PPUSH
82484: PPUSH
// if not unit or not enemy then
82485: LD_VAR 0 1
82489: NOT
82490: PUSH
82491: LD_VAR 0 2
82495: NOT
82496: OR
82497: IFFALSE 82501
// exit ;
82499: GO 82625
// x := GetX ( enemy ) ;
82501: LD_ADDR_VAR 0 4
82505: PUSH
82506: LD_VAR 0 2
82510: PPUSH
82511: CALL_OW 250
82515: ST_TO_ADDR
// y := GetY ( enemy ) ;
82516: LD_ADDR_VAR 0 5
82520: PUSH
82521: LD_VAR 0 2
82525: PPUSH
82526: CALL_OW 251
82530: ST_TO_ADDR
// if ValidHex ( x , y ) then
82531: LD_VAR 0 4
82535: PPUSH
82536: LD_VAR 0 5
82540: PPUSH
82541: CALL_OW 488
82545: IFFALSE 82625
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82547: LD_VAR 0 2
82551: PPUSH
82552: CALL_OW 247
82556: PUSH
82557: LD_INT 3
82559: PUSH
82560: LD_INT 2
82562: PUSH
82563: EMPTY
82564: LIST
82565: LIST
82566: IN
82567: PUSH
82568: LD_VAR 0 1
82572: PPUSH
82573: CALL_OW 255
82577: PPUSH
82578: LD_VAR 0 2
82582: PPUSH
82583: CALL_OW 292
82587: OR
82588: IFFALSE 82606
// ComAttackUnit ( unit , enemy ) else
82590: LD_VAR 0 1
82594: PPUSH
82595: LD_VAR 0 2
82599: PPUSH
82600: CALL_OW 115
82604: GO 82625
// ComAgressiveMove ( unit , x , y ) ;
82606: LD_VAR 0 1
82610: PPUSH
82611: LD_VAR 0 4
82615: PPUSH
82616: LD_VAR 0 5
82620: PPUSH
82621: CALL_OW 114
// end ;
82625: LD_VAR 0 3
82629: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82630: LD_INT 0
82632: PPUSH
82633: PPUSH
82634: PPUSH
// list := AreaToList ( area , 0 ) ;
82635: LD_ADDR_VAR 0 5
82639: PUSH
82640: LD_VAR 0 1
82644: PPUSH
82645: LD_INT 0
82647: PPUSH
82648: CALL_OW 517
82652: ST_TO_ADDR
// if not list then
82653: LD_VAR 0 5
82657: NOT
82658: IFFALSE 82662
// exit ;
82660: GO 82792
// if all then
82662: LD_VAR 0 2
82666: IFFALSE 82754
// begin for i := 1 to list [ 1 ] do
82668: LD_ADDR_VAR 0 4
82672: PUSH
82673: DOUBLE
82674: LD_INT 1
82676: DEC
82677: ST_TO_ADDR
82678: LD_VAR 0 5
82682: PUSH
82683: LD_INT 1
82685: ARRAY
82686: PUSH
82687: FOR_TO
82688: IFFALSE 82750
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82690: LD_ADDR_VAR 0 3
82694: PUSH
82695: LD_VAR 0 3
82699: PPUSH
82700: LD_VAR 0 3
82704: PUSH
82705: LD_INT 1
82707: PLUS
82708: PPUSH
82709: LD_VAR 0 5
82713: PUSH
82714: LD_INT 1
82716: ARRAY
82717: PUSH
82718: LD_VAR 0 4
82722: ARRAY
82723: PUSH
82724: LD_VAR 0 5
82728: PUSH
82729: LD_INT 2
82731: ARRAY
82732: PUSH
82733: LD_VAR 0 4
82737: ARRAY
82738: PUSH
82739: EMPTY
82740: LIST
82741: LIST
82742: PPUSH
82743: CALL_OW 1
82747: ST_TO_ADDR
82748: GO 82687
82750: POP
82751: POP
// exit ;
82752: GO 82792
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82754: LD_ADDR_VAR 0 3
82758: PUSH
82759: LD_VAR 0 5
82763: PUSH
82764: LD_INT 1
82766: ARRAY
82767: PUSH
82768: LD_INT 1
82770: ARRAY
82771: PUSH
82772: LD_VAR 0 5
82776: PUSH
82777: LD_INT 2
82779: ARRAY
82780: PUSH
82781: LD_INT 1
82783: ARRAY
82784: PUSH
82785: EMPTY
82786: LIST
82787: LIST
82788: PUSH
82789: EMPTY
82790: LIST
82791: ST_TO_ADDR
// end ;
82792: LD_VAR 0 3
82796: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82797: LD_INT 0
82799: PPUSH
82800: PPUSH
// list := AreaToList ( area , 0 ) ;
82801: LD_ADDR_VAR 0 4
82805: PUSH
82806: LD_VAR 0 1
82810: PPUSH
82811: LD_INT 0
82813: PPUSH
82814: CALL_OW 517
82818: ST_TO_ADDR
// if not list then
82819: LD_VAR 0 4
82823: NOT
82824: IFFALSE 82828
// exit ;
82826: GO 82869
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82828: LD_ADDR_VAR 0 3
82832: PUSH
82833: LD_VAR 0 4
82837: PUSH
82838: LD_INT 1
82840: ARRAY
82841: PUSH
82842: LD_INT 1
82844: ARRAY
82845: PUSH
82846: LD_VAR 0 4
82850: PUSH
82851: LD_INT 2
82853: ARRAY
82854: PUSH
82855: LD_INT 1
82857: ARRAY
82858: PUSH
82859: LD_VAR 0 2
82863: PUSH
82864: EMPTY
82865: LIST
82866: LIST
82867: LIST
82868: ST_TO_ADDR
// end ;
82869: LD_VAR 0 3
82873: RET
// export function First ( array ) ; begin
82874: LD_INT 0
82876: PPUSH
// if not array then
82877: LD_VAR 0 1
82881: NOT
82882: IFFALSE 82886
// exit ;
82884: GO 82900
// result := array [ 1 ] ;
82886: LD_ADDR_VAR 0 2
82890: PUSH
82891: LD_VAR 0 1
82895: PUSH
82896: LD_INT 1
82898: ARRAY
82899: ST_TO_ADDR
// end ;
82900: LD_VAR 0 2
82904: RET
// export function Last ( array ) ; begin
82905: LD_INT 0
82907: PPUSH
// if not array then
82908: LD_VAR 0 1
82912: NOT
82913: IFFALSE 82917
// exit ;
82915: GO 82933
// result := array [ array ] ;
82917: LD_ADDR_VAR 0 2
82921: PUSH
82922: LD_VAR 0 1
82926: PUSH
82927: LD_VAR 0 1
82931: ARRAY
82932: ST_TO_ADDR
// end ;
82933: LD_VAR 0 2
82937: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82938: LD_INT 0
82940: PPUSH
82941: PPUSH
// result := [ ] ;
82942: LD_ADDR_VAR 0 5
82946: PUSH
82947: EMPTY
82948: ST_TO_ADDR
// if not array then
82949: LD_VAR 0 1
82953: NOT
82954: IFFALSE 82958
// exit ;
82956: GO 83070
// for i := 1 to array do
82958: LD_ADDR_VAR 0 6
82962: PUSH
82963: DOUBLE
82964: LD_INT 1
82966: DEC
82967: ST_TO_ADDR
82968: LD_VAR 0 1
82972: PUSH
82973: FOR_TO
82974: IFFALSE 83068
// if array [ i ] [ index ] = value then
82976: LD_VAR 0 1
82980: PUSH
82981: LD_VAR 0 6
82985: ARRAY
82986: PUSH
82987: LD_VAR 0 2
82991: ARRAY
82992: PUSH
82993: LD_VAR 0 3
82997: EQUAL
82998: IFFALSE 83066
// begin if indexColumn then
83000: LD_VAR 0 4
83004: IFFALSE 83040
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83006: LD_ADDR_VAR 0 5
83010: PUSH
83011: LD_VAR 0 5
83015: PPUSH
83016: LD_VAR 0 1
83020: PUSH
83021: LD_VAR 0 6
83025: ARRAY
83026: PUSH
83027: LD_VAR 0 4
83031: ARRAY
83032: PPUSH
83033: CALL 78408 0 2
83037: ST_TO_ADDR
83038: GO 83066
// result := Join ( result , array [ i ] ) ;
83040: LD_ADDR_VAR 0 5
83044: PUSH
83045: LD_VAR 0 5
83049: PPUSH
83050: LD_VAR 0 1
83054: PUSH
83055: LD_VAR 0 6
83059: ARRAY
83060: PPUSH
83061: CALL 78408 0 2
83065: ST_TO_ADDR
// end ;
83066: GO 82973
83068: POP
83069: POP
// end ;
83070: LD_VAR 0 5
83074: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83075: LD_INT 0
83077: PPUSH
83078: PPUSH
83079: PPUSH
// if btype = b_depot then
83080: LD_VAR 0 2
83084: PUSH
83085: LD_INT 0
83087: EQUAL
83088: IFFALSE 83100
// begin result := true ;
83090: LD_ADDR_VAR 0 3
83094: PUSH
83095: LD_INT 1
83097: ST_TO_ADDR
// exit ;
83098: GO 83216
// end ; pom := GetBase ( depot ) ;
83100: LD_ADDR_VAR 0 4
83104: PUSH
83105: LD_VAR 0 1
83109: PPUSH
83110: CALL_OW 274
83114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83115: LD_ADDR_VAR 0 5
83119: PUSH
83120: LD_VAR 0 2
83124: PPUSH
83125: LD_VAR 0 1
83129: PPUSH
83130: CALL_OW 248
83134: PPUSH
83135: CALL_OW 450
83139: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83140: LD_ADDR_VAR 0 3
83144: PUSH
83145: LD_VAR 0 4
83149: PPUSH
83150: LD_INT 1
83152: PPUSH
83153: CALL_OW 275
83157: PUSH
83158: LD_VAR 0 5
83162: PUSH
83163: LD_INT 1
83165: ARRAY
83166: GREATEREQUAL
83167: PUSH
83168: LD_VAR 0 4
83172: PPUSH
83173: LD_INT 2
83175: PPUSH
83176: CALL_OW 275
83180: PUSH
83181: LD_VAR 0 5
83185: PUSH
83186: LD_INT 2
83188: ARRAY
83189: GREATEREQUAL
83190: AND
83191: PUSH
83192: LD_VAR 0 4
83196: PPUSH
83197: LD_INT 3
83199: PPUSH
83200: CALL_OW 275
83204: PUSH
83205: LD_VAR 0 5
83209: PUSH
83210: LD_INT 3
83212: ARRAY
83213: GREATEREQUAL
83214: AND
83215: ST_TO_ADDR
// end ;
83216: LD_VAR 0 3
83220: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83221: LD_INT 0
83223: PPUSH
// if not vehicles or not parkingPoint then
83224: LD_VAR 0 1
83228: NOT
83229: PUSH
83230: LD_VAR 0 2
83234: NOT
83235: OR
83236: IFFALSE 83240
// exit ;
83238: GO 83338
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83240: LD_ADDR_VAR 0 1
83244: PUSH
83245: LD_VAR 0 1
83249: PPUSH
83250: LD_INT 50
83252: PUSH
83253: EMPTY
83254: LIST
83255: PUSH
83256: LD_INT 3
83258: PUSH
83259: LD_INT 92
83261: PUSH
83262: LD_VAR 0 2
83266: PUSH
83267: LD_INT 1
83269: ARRAY
83270: PUSH
83271: LD_VAR 0 2
83275: PUSH
83276: LD_INT 2
83278: ARRAY
83279: PUSH
83280: LD_INT 8
83282: PUSH
83283: EMPTY
83284: LIST
83285: LIST
83286: LIST
83287: LIST
83288: PUSH
83289: EMPTY
83290: LIST
83291: LIST
83292: PUSH
83293: EMPTY
83294: LIST
83295: LIST
83296: PPUSH
83297: CALL_OW 72
83301: ST_TO_ADDR
// if not vehicles then
83302: LD_VAR 0 1
83306: NOT
83307: IFFALSE 83311
// exit ;
83309: GO 83338
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83311: LD_VAR 0 1
83315: PPUSH
83316: LD_VAR 0 2
83320: PUSH
83321: LD_INT 1
83323: ARRAY
83324: PPUSH
83325: LD_VAR 0 2
83329: PUSH
83330: LD_INT 2
83332: ARRAY
83333: PPUSH
83334: CALL_OW 111
// end ;
83338: LD_VAR 0 3
83342: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83343: LD_INT 0
83345: PPUSH
83346: PPUSH
83347: PPUSH
// if not side or not area then
83348: LD_VAR 0 1
83352: NOT
83353: PUSH
83354: LD_VAR 0 2
83358: NOT
83359: OR
83360: IFFALSE 83364
// exit ;
83362: GO 83483
// tmp := AreaToList ( area , 0 ) ;
83364: LD_ADDR_VAR 0 5
83368: PUSH
83369: LD_VAR 0 2
83373: PPUSH
83374: LD_INT 0
83376: PPUSH
83377: CALL_OW 517
83381: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83382: LD_ADDR_VAR 0 4
83386: PUSH
83387: DOUBLE
83388: LD_INT 1
83390: DEC
83391: ST_TO_ADDR
83392: LD_VAR 0 5
83396: PUSH
83397: LD_INT 1
83399: ARRAY
83400: PUSH
83401: FOR_TO
83402: IFFALSE 83481
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83404: LD_VAR 0 5
83408: PUSH
83409: LD_INT 1
83411: ARRAY
83412: PUSH
83413: LD_VAR 0 4
83417: ARRAY
83418: PPUSH
83419: LD_VAR 0 5
83423: PUSH
83424: LD_INT 2
83426: ARRAY
83427: PUSH
83428: LD_VAR 0 4
83432: ARRAY
83433: PPUSH
83434: CALL_OW 351
83438: IFFALSE 83479
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83440: LD_VAR 0 5
83444: PUSH
83445: LD_INT 1
83447: ARRAY
83448: PUSH
83449: LD_VAR 0 4
83453: ARRAY
83454: PPUSH
83455: LD_VAR 0 5
83459: PUSH
83460: LD_INT 2
83462: ARRAY
83463: PUSH
83464: LD_VAR 0 4
83468: ARRAY
83469: PPUSH
83470: LD_VAR 0 1
83474: PPUSH
83475: CALL_OW 244
// end ;
83479: GO 83401
83481: POP
83482: POP
// end ; end_of_file
83483: LD_VAR 0 3
83487: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83488: LD_VAR 0 1
83492: PUSH
83493: LD_INT 200
83495: DOUBLE
83496: GREATEREQUAL
83497: IFFALSE 83505
83499: LD_INT 299
83501: DOUBLE
83502: LESSEQUAL
83503: IFTRUE 83507
83505: GO 83539
83507: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83508: LD_VAR 0 1
83512: PPUSH
83513: LD_VAR 0 2
83517: PPUSH
83518: LD_VAR 0 3
83522: PPUSH
83523: LD_VAR 0 4
83527: PPUSH
83528: LD_VAR 0 5
83532: PPUSH
83533: CALL 36199 0 5
83537: GO 83616
83539: LD_INT 300
83541: DOUBLE
83542: GREATEREQUAL
83543: IFFALSE 83551
83545: LD_INT 399
83547: DOUBLE
83548: LESSEQUAL
83549: IFTRUE 83553
83551: GO 83615
83553: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83554: LD_VAR 0 1
83558: PPUSH
83559: LD_VAR 0 2
83563: PPUSH
83564: LD_VAR 0 3
83568: PPUSH
83569: LD_VAR 0 4
83573: PPUSH
83574: LD_VAR 0 5
83578: PPUSH
83579: LD_VAR 0 6
83583: PPUSH
83584: LD_VAR 0 7
83588: PPUSH
83589: LD_VAR 0 8
83593: PPUSH
83594: LD_VAR 0 9
83598: PPUSH
83599: LD_VAR 0 10
83603: PPUSH
83604: LD_VAR 0 11
83608: PPUSH
83609: CALL 32524 0 11
83613: GO 83616
83615: POP
// end ;
83616: PPOPN 11
83618: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83619: LD_VAR 0 1
83623: PPUSH
83624: LD_VAR 0 2
83628: PPUSH
83629: LD_VAR 0 3
83633: PPUSH
83634: LD_VAR 0 4
83638: PPUSH
83639: LD_VAR 0 5
83643: PPUSH
83644: CALL 35935 0 5
// end ; end_of_file
83648: PPOPN 5
83650: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83651: LD_VAR 0 1
83655: PPUSH
83656: LD_VAR 0 2
83660: PPUSH
83661: LD_VAR 0 3
83665: PPUSH
83666: LD_VAR 0 4
83670: PPUSH
83671: LD_VAR 0 5
83675: PPUSH
83676: LD_VAR 0 6
83680: PPUSH
83681: CALL 20176 0 6
// end ;
83685: PPOPN 6
83687: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83688: LD_INT 0
83690: PPUSH
// begin if not units then
83691: LD_VAR 0 1
83695: NOT
83696: IFFALSE 83700
// exit ;
83698: GO 83700
// end ;
83700: PPOPN 7
83702: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83703: CALL 20063 0 0
// end ;
83707: PPOPN 1
83709: END
