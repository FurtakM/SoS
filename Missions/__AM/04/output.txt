// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4695 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8338 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 37699 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 37699 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 37699 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 37699 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 37699 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 37699 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 37699 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 37699 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 37699 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 37699 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 37699 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 37699 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 37699 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc ;
3008: CALL_OW 19
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4361 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4361 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4470 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 1
3438: PUSH
3439: LD_INT 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 3
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: LD_OWVAR 67
3458: ARRAY
3459: PUSH
3460: FOR_TO
3461: IFFALSE 3629
// begin vc_engine = 1 ;
3463: LD_ADDR_OWVAR 39
3467: PUSH
3468: LD_INT 1
3470: ST_TO_ADDR
// vc_control = 1 ;
3471: LD_ADDR_OWVAR 38
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3479: LD_ADDR_OWVAR 40
3483: PUSH
3484: LD_INT 42
3486: PUSH
3487: LD_INT 42
3489: PUSH
3490: LD_INT 43
3492: PUSH
3493: LD_INT 43
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: LD_OWVAR 67
3506: ARRAY
3507: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3508: LD_ADDR_OWVAR 37
3512: PUSH
3513: LD_INT 21
3515: PUSH
3516: LD_INT 22
3518: PUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 22
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_OWVAR 67
3535: ARRAY
3536: ST_TO_ADDR
// veh = CreateVehicle ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 45
3546: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 3
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL_OW 49
// hc_gallery =  ;
3562: LD_ADDR_OWVAR 33
3566: PUSH
3567: LD_STRING 
3569: ST_TO_ADDR
// hc_name =  ;
3570: LD_ADDR_OWVAR 26
3574: PUSH
3575: LD_STRING 
3577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3578: LD_INT 0
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: LD_EXP 16
3588: PPUSH
3589: LD_EXP 17
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: CALL_OW 380
// un = CreateHuman ;
3603: LD_ADDR_VAR 0 4
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3613: LD_VAR 0 4
3617: PPUSH
3618: LD_VAR 0 3
3622: PPUSH
3623: CALL_OW 52
// end ;
3627: GO 3460
3629: POP
3630: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: LD_EXP 17
3646: PPUSH
3647: CALL_OW 12
3651: PUSH
3652: LD_INT 2
3654: PLUS
3655: PPUSH
3656: CALL_OW 380
// un = CreateHuman ;
3660: LD_ADDR_VAR 0 4
3664: PUSH
3665: CALL_OW 44
3669: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3670: LD_VAR 0 4
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3685: LD_INT 0
3687: PPUSH
3688: LD_INT 4
3690: PPUSH
3691: LD_EXP 16
3695: PPUSH
3696: LD_EXP 17
3700: PPUSH
3701: CALL_OW 12
3705: PUSH
3706: LD_INT 2
3708: PLUS
3709: PPUSH
3710: CALL_OW 380
// un = CreateHuman ;
3714: LD_ADDR_VAR 0 4
3718: PUSH
3719: CALL_OW 44
3723: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3724: LD_VAR 0 4
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 0
3734: PPUSH
3735: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 2
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_OWVAR 67
3771: ARRAY
3772: PUSH
3773: LD_INT 1
3775: PPUSH
3776: LD_INT 3
3778: PPUSH
3779: CALL_OW 12
3783: PLUS
3784: PUSH
3785: FOR_TO
3786: IFFALSE 3856
// begin hc_gallery =  ;
3788: LD_ADDR_OWVAR 33
3792: PUSH
3793: LD_STRING 
3795: ST_TO_ADDR
// hc_name =  ;
3796: LD_ADDR_OWVAR 26
3800: PUSH
3801: LD_STRING 
3803: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_EXP 16
3814: PPUSH
3815: LD_EXP 17
3819: PPUSH
3820: CALL_OW 12
3824: PPUSH
3825: CALL_OW 380
// un = CreateHuman ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3839: LD_VAR 0 4
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 0
3849: PPUSH
3850: CALL_OW 49
// end ;
3854: GO 3785
3856: POP
3857: POP
// vc_engine = 1 ;
3858: LD_ADDR_OWVAR 39
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// vc_control = 1 ;
3866: LD_ADDR_OWVAR 38
3870: PUSH
3871: LD_INT 1
3873: ST_TO_ADDR
// vc_weapon = 51 ;
3874: LD_ADDR_OWVAR 40
3878: PUSH
3879: LD_INT 51
3881: ST_TO_ADDR
// vc_chassis = 22 ;
3882: LD_ADDR_OWVAR 37
3886: PUSH
3887: LD_INT 22
3889: ST_TO_ADDR
// veh = CreateVehicle ;
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: CALL_OW 45
3899: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 100
3925: PPUSH
3926: CALL_OW 290
// hc_gallery =  ;
3930: LD_ADDR_OWVAR 33
3934: PUSH
3935: LD_STRING 
3937: ST_TO_ADDR
// hc_name =  ;
3938: LD_ADDR_OWVAR 26
3942: PUSH
3943: LD_STRING 
3945: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3946: LD_INT 0
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_EXP 16
3956: PPUSH
3957: LD_EXP 17
3961: PPUSH
3962: CALL_OW 12
3966: PPUSH
3967: CALL_OW 380
// un = CreateHuman ;
3971: LD_ADDR_VAR 0 4
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3981: LD_VAR 0 4
3985: PPUSH
3986: LD_VAR 0 3
3990: PPUSH
3991: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 6
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 25
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 3
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 4
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PPUSH
4056: CALL_OW 69
4060: PUSH
4061: FOR_IN
4062: IFFALSE 4081
// ComAgressiveMove ( i , 45 , 46 ) ;
4064: LD_VAR 0 2
4068: PPUSH
4069: LD_INT 45
4071: PPUSH
4072: LD_INT 46
4074: PPUSH
4075: CALL_OW 114
4079: GO 4061
4081: POP
4082: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: LD_INT 22
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 25
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PPUSH
4112: CALL_OW 69
4116: PUSH
4117: FOR_IN
4118: IFFALSE 4149
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4120: LD_ADDR_EXP 21
4124: PUSH
4125: LD_VAR 0 2
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: LD_INT 48
4135: PPUSH
4136: LD_INT 55
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: CALL_OW 145
4146: ST_TO_ADDR
4147: GO 4117
4149: POP
4150: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4151: LD_ADDR_VAR 0 2
4155: PUSH
4156: LD_INT 22
4158: PUSH
4159: LD_INT 6
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 25
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 69
4184: PUSH
4185: FOR_IN
4186: IFFALSE 4205
// ComMoveXY ( i , 39 , 55 ) ;
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_INT 39
4195: PPUSH
4196: LD_INT 55
4198: PPUSH
4199: CALL_OW 111
4203: GO 4185
4205: POP
4206: POP
// end ;
4207: LD_VAR 0 1
4211: RET
// export function PrepareFirstAttack ; var i , un ; begin
4212: LD_INT 0
4214: PPUSH
4215: PPUSH
4216: PPUSH
// uc_side = 5 ;
4217: LD_ADDR_OWVAR 20
4221: PUSH
4222: LD_INT 5
4224: ST_TO_ADDR
// uc_nation = 3 ;
4225: LD_ADDR_OWVAR 21
4229: PUSH
4230: LD_INT 3
4232: ST_TO_ADDR
// for i := 1 to 4 do
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: DOUBLE
4239: LD_INT 1
4241: DEC
4242: ST_TO_ADDR
4243: LD_INT 4
4245: PUSH
4246: FOR_TO
4247: IFFALSE 4346
// begin hc_gallery =  ;
4249: LD_ADDR_OWVAR 33
4253: PUSH
4254: LD_STRING 
4256: ST_TO_ADDR
// hc_name =  ;
4257: LD_ADDR_OWVAR 26
4261: PUSH
4262: LD_STRING 
4264: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4265: LD_INT 0
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_EXP 16
4275: PPUSH
4276: LD_EXP 17
4280: PPUSH
4281: CALL_OW 12
4285: PPUSH
4286: CALL_OW 380
// un = CreateHuman ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: CALL_OW 44
4299: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4300: LD_VAR 0 3
4304: PPUSH
4305: LD_INT 4
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_EXP 1
4324: PPUSH
4325: CALL_OW 250
4329: PPUSH
4330: LD_EXP 1
4334: PPUSH
4335: CALL_OW 251
4339: PPUSH
4340: CALL_OW 114
// end ;
4344: GO 4246
4346: POP
4347: POP
// firstRussianAttack = 1 ;
4348: LD_ADDR_EXP 23
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// end ; end_of_file
4356: LD_VAR 0 1
4360: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
// for i = 1 to count do
4366: LD_ADDR_VAR 0 8
4370: PUSH
4371: DOUBLE
4372: LD_INT 1
4374: DEC
4375: ST_TO_ADDR
4376: LD_VAR 0 6
4380: PUSH
4381: FOR_TO
4382: IFFALSE 4463
// begin uc_side = side ;
4384: LD_ADDR_OWVAR 20
4388: PUSH
4389: LD_VAR 0 1
4393: ST_TO_ADDR
// uc_nation = nation ;
4394: LD_ADDR_OWVAR 21
4398: PUSH
4399: LD_VAR 0 2
4403: ST_TO_ADDR
// hc_gallery =  ;
4404: LD_ADDR_OWVAR 33
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// hc_name =  ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING 
4419: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4420: LD_INT 0
4422: PPUSH
4423: LD_VAR 0 5
4427: PPUSH
4428: LD_VAR 0 4
4432: PPUSH
4433: CALL_OW 380
// un = CreateHuman ;
4437: LD_ADDR_VAR 0 9
4441: PUSH
4442: CALL_OW 44
4446: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4447: LD_VAR 0 9
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 52
// end ;
4461: GO 4381
4463: POP
4464: POP
// end ;
4465: LD_VAR 0 7
4469: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
4474: PPUSH
// uc_side := GetSide ( b ) ;
4475: LD_ADDR_OWVAR 20
4479: PUSH
4480: LD_VAR 0 2
4484: PPUSH
4485: CALL_OW 255
4489: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4490: LD_ADDR_OWVAR 21
4494: PUSH
4495: LD_VAR 0 2
4499: PPUSH
4500: CALL_OW 248
4504: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 380
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 4
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4530: LD_ADDR_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL_OW 254
4544: PUSH
4545: LD_INT 3
4547: MINUS
4548: ST_TO_ADDR
// if dir < 0 then
4549: LD_VAR 0 5
4553: PUSH
4554: LD_INT 0
4556: LESS
4557: IFFALSE 4573
// dir := 6 + dir ;
4559: LD_ADDR_VAR 0 5
4563: PUSH
4564: LD_INT 6
4566: PUSH
4567: LD_VAR 0 5
4571: PLUS
4572: ST_TO_ADDR
// SetDir ( un , dir ) ;
4573: LD_VAR 0 4
4577: PPUSH
4578: LD_VAR 0 5
4582: PPUSH
4583: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4587: LD_VAR 0 4
4591: PPUSH
4592: LD_VAR 0 2
4596: PPUSH
4597: CALL_OW 52
// end ;
4601: LD_VAR 0 3
4605: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
4610: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4611: LD_ADDR_VAR 0 6
4615: PUSH
4616: LD_VAR 0 1
4620: PUSH
4621: LD_INT 1
4623: PPUSH
4624: LD_VAR 0 1
4628: PPUSH
4629: CALL_OW 12
4633: ARRAY
4634: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4635: LD_VAR 0 6
4639: PPUSH
4640: CALL_OW 258
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: IFFALSE 4666
// Say ( speaker , dialogMID ) else
4650: LD_VAR 0 6
4654: PPUSH
4655: LD_VAR 0 2
4659: PPUSH
4660: CALL_OW 88
4664: GO 4680
// Say ( speaker , dialogFID ) ;
4666: LD_VAR 0 6
4670: PPUSH
4671: LD_VAR 0 3
4675: PPUSH
4676: CALL_OW 88
// result := speaker ;
4680: LD_ADDR_VAR 0 4
4684: PUSH
4685: LD_VAR 0 6
4689: ST_TO_ADDR
// end ;
4690: LD_VAR 0 4
4694: RET
// export function PrepareDifficulty ; var tmp ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if Difficulty = 1 then
4699: LD_OWVAR 67
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: IFFALSE 4725
// begin RuSoldMinLevel = 1 ;
4709: LD_ADDR_EXP 16
4713: PUSH
4714: LD_INT 1
4716: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4717: LD_ADDR_EXP 17
4721: PUSH
4722: LD_INT 2
4724: ST_TO_ADDR
// end ; if Difficulty = 2 then
4725: LD_OWVAR 67
4729: PUSH
4730: LD_INT 2
4732: EQUAL
4733: IFFALSE 4834
// begin RuSoldMinLevel = 2 ;
4735: LD_ADDR_EXP 16
4739: PUSH
4740: LD_INT 2
4742: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4743: LD_ADDR_EXP 17
4747: PUSH
4748: LD_INT 3
4750: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4751: LD_INT 23
4753: PPUSH
4754: CALL_OW 64
// uc_nation = 3 ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// uc_side = 3 ;
4766: LD_ADDR_OWVAR 20
4770: PUSH
4771: LD_INT 3
4773: ST_TO_ADDR
// bc_level = 5 ;
4774: LD_ADDR_OWVAR 43
4778: PUSH
4779: LD_INT 5
4781: ST_TO_ADDR
// bc_type = 32 ;
4782: LD_ADDR_OWVAR 42
4786: PUSH
4787: LD_INT 32
4789: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 76
4797: PPUSH
4798: LD_INT 91
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: CALL_OW 47
4808: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4809: LD_VAR 0 2
4813: PPUSH
4814: LD_INT 43
4816: PPUSH
4817: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4821: LD_INT 51
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: CALL_OW 322
// end ; if Difficulty >= 3 then
4834: LD_OWVAR 67
4838: PUSH
4839: LD_INT 3
4841: GREATEREQUAL
4842: IFFALSE 5006
// begin RuSoldMinLevel = Difficulty ;
4844: LD_ADDR_EXP 16
4848: PUSH
4849: LD_OWVAR 67
4853: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4854: LD_ADDR_EXP 17
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4862: LD_INT 26
4864: PPUSH
4865: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4869: LD_INT 23
4871: PPUSH
4872: CALL_OW 64
// uc_nation = 3 ;
4876: LD_ADDR_OWVAR 21
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// uc_side = 3 ;
4884: LD_ADDR_OWVAR 20
4888: PUSH
4889: LD_INT 3
4891: ST_TO_ADDR
// bc_level = 5 ;
4892: LD_ADDR_OWVAR 43
4896: PUSH
4897: LD_INT 5
4899: ST_TO_ADDR
// bc_type = 32 ;
4900: LD_ADDR_OWVAR 42
4904: PUSH
4905: LD_INT 32
4907: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_INT 76
4915: PPUSH
4916: LD_INT 91
4918: PPUSH
4919: LD_INT 2
4921: PPUSH
4922: CALL_OW 47
4926: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4927: LD_VAR 0 2
4931: PPUSH
4932: LD_INT 44
4934: PPUSH
4935: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: LD_INT 83
4946: PPUSH
4947: LD_INT 84
4949: PPUSH
4950: LD_INT 2
4952: PPUSH
4953: CALL_OW 47
4957: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4958: LD_VAR 0 2
4962: PPUSH
4963: LD_INT 43
4965: PPUSH
4966: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4970: LD_INT 51
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4983: LD_INT 52
4985: PPUSH
4986: LD_INT 3
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4996: LD_INT 25
4998: PPUSH
4999: LD_INT 44
5001: PPUSH
5002: CALL_OW 431
// end ; end ;
5006: LD_VAR 0 1
5010: RET
// export function EnergyDialog ; begin
5011: LD_INT 0
5013: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5014: LD_INT 46
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 321
5024: PUSH
5025: LD_INT 1
5027: EQUAL
5028: PUSH
5029: LD_INT 35
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: CALL_OW 321
5039: PUSH
5040: LD_INT 1
5042: EQUAL
5043: AND
5044: IFFALSE 5068
// begin Say ( JMM , D9c-JMM-1 ) ;
5046: LD_EXP 1
5050: PPUSH
5051: LD_STRING D9c-JMM-1
5053: PPUSH
5054: CALL_OW 88
// energyVDialog = 1 ;
5058: LD_ADDR_EXP 33
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// end else
5066: GO 5222
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5068: LD_INT 35
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: CALL_OW 321
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: PUSH
5083: LD_EXP 33
5087: PUSH
5088: LD_INT 0
5090: EQUAL
5091: AND
5092: IFFALSE 5114
// begin Say ( JMM , D9c-JMM-1a ) ;
5094: LD_EXP 1
5098: PPUSH
5099: LD_STRING D9c-JMM-1a
5101: PPUSH
5102: CALL_OW 88
// energyVDialog = 1 ;
5106: LD_ADDR_EXP 33
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5114: LD_INT 46
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 321
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: PUSH
5129: LD_EXP 33
5133: PUSH
5134: LD_INT 0
5136: EQUAL
5137: AND
5138: IFFALSE 5160
// begin Say ( JMM , D9c-JMM-1b ) ;
5140: LD_EXP 1
5144: PPUSH
5145: LD_STRING D9c-JMM-1b
5147: PPUSH
5148: CALL_OW 88
// energyVDialog = 1 ;
5152: LD_ADDR_EXP 33
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5160: LD_INT 46
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 321
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: PUSH
5175: LD_INT 21
5177: PPUSH
5178: LD_INT 1
5180: PPUSH
5181: CALL_OW 321
5185: PUSH
5186: LD_INT 2
5188: EQUAL
5189: AND
5190: PUSH
5191: LD_EXP 33
5195: PUSH
5196: LD_INT 0
5198: EQUAL
5199: AND
5200: IFFALSE 5222
// begin Say ( JMM , D9c-JMM-1c ) ;
5202: LD_EXP 1
5206: PPUSH
5207: LD_STRING D9c-JMM-1c
5209: PPUSH
5210: CALL_OW 88
// energyVDialog = 1 ;
5214: LD_ADDR_EXP 33
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// end ; end ; end ;
5222: LD_VAR 0 1
5226: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5227: LD_INT 0
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
5233: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5234: LD_VAR 0 1
5238: NOT
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 256
5249: PUSH
5250: LD_INT 250
5252: LESS
5253: OR
5254: PUSH
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 314
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 261
5274: PUSH
5275: LD_INT 20
5277: GREATER
5278: AND
5279: OR
5280: IFFALSE 5284
// exit ;
5282: GO 5649
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5284: LD_VAR 0 1
5288: PPUSH
5289: CALL_OW 261
5293: PUSH
5294: LD_INT 20
5296: LESS
5297: PUSH
5298: LD_VAR 0 1
5302: PPUSH
5303: CALL_OW 110
5307: PUSH
5308: LD_INT 21
5310: EQUAL
5311: NOT
5312: AND
5313: IFFALSE 5340
// begin ComStop ( bulldozer ) ;
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5324: LD_VAR 0 1
5328: PPUSH
5329: LD_INT 21
5331: PPUSH
5332: CALL_OW 109
// exit ;
5336: GO 5649
// end else
5338: GO 5367
// if GetFuel ( bulldozer ) > 20 then
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL_OW 261
5349: PUSH
5350: LD_INT 20
5352: GREATER
5353: IFFALSE 5367
// SetTag ( bulldozer , 0 ) ;
5355: LD_VAR 0 1
5359: PPUSH
5360: LD_INT 0
5362: PPUSH
5363: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: LD_VAR 0 2
5376: PPUSH
5377: CALL_OW 353
5381: ST_TO_ADDR
// tmp := [ ] ;
5382: LD_ADDR_VAR 0 6
5386: PUSH
5387: EMPTY
5388: ST_TO_ADDR
// for i = 1 to list do
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: DOUBLE
5395: LD_INT 1
5397: DEC
5398: ST_TO_ADDR
5399: LD_VAR 0 5
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5503
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5407: LD_VAR 0 5
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PPUSH
5422: LD_VAR 0 5
5426: PUSH
5427: LD_VAR 0 4
5431: ARRAY
5432: PUSH
5433: LD_INT 2
5435: ARRAY
5436: PPUSH
5437: CALL_OW 554
5441: IFFALSE 5501
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_VAR 0 6
5452: PPUSH
5453: LD_VAR 0 6
5457: PUSH
5458: LD_INT 1
5460: PLUS
5461: PPUSH
5462: LD_VAR 0 5
5466: PUSH
5467: LD_VAR 0 4
5471: ARRAY
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: LD_VAR 0 4
5486: ARRAY
5487: PUSH
5488: LD_INT 2
5490: ARRAY
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PPUSH
5496: CALL_OW 1
5500: ST_TO_ADDR
// end ;
5501: GO 5404
5503: POP
5504: POP
// ComStop ( bulldozer ) ;
5505: LD_VAR 0 1
5509: PPUSH
5510: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5514: LD_ADDR_VAR 0 7
5518: PUSH
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 250
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 251
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: ST_TO_ADDR
// for i = tmp downto 1 do
5543: LD_ADDR_VAR 0 4
5547: PUSH
5548: DOUBLE
5549: LD_VAR 0 6
5553: INC
5554: ST_TO_ADDR
5555: LD_INT 1
5557: PUSH
5558: FOR_DOWNTO
5559: IFFALSE 5647
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5561: LD_ADDR_VAR 0 7
5565: PUSH
5566: LD_VAR 0 7
5570: PUSH
5571: LD_INT 1
5573: ARRAY
5574: PPUSH
5575: LD_VAR 0 7
5579: PUSH
5580: LD_INT 2
5582: ARRAY
5583: PPUSH
5584: LD_VAR 0 6
5588: PPUSH
5589: CALL 5750 0 3
5593: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_VAR 0 7
5612: PUSH
5613: LD_INT 2
5615: ARRAY
5616: PPUSH
5617: CALL 5654 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5621: LD_ADDR_VAR 0 6
5625: PUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: LD_VAR 0 7
5635: PUSH
5636: LD_INT 3
5638: ARRAY
5639: PPUSH
5640: CALL_OW 3
5644: ST_TO_ADDR
// end ;
5645: GO 5558
5647: POP
5648: POP
// end ;
5649: LD_VAR 0 3
5653: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5654: LD_INT 0
5656: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_VAR 0 3
5666: PPUSH
5667: CALL_OW 351
5671: PUSH
5672: LD_VAR 0 2
5676: PPUSH
5677: LD_VAR 0 3
5681: PPUSH
5682: CALL_OW 554
5686: AND
5687: PUSH
5688: LD_VAR 0 2
5692: PPUSH
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 488
5702: AND
5703: PUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 428
5718: PUSH
5719: LD_INT 1
5721: NEG
5722: EQUAL
5723: AND
5724: IFFALSE 5745
// AddComMoveXY ( bulldozer , x , y ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: CALL_OW 171
// end ;
5745: LD_VAR 0 4
5749: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5750: LD_INT 0
5752: PPUSH
5753: PPUSH
5754: PPUSH
5755: PPUSH
5756: PPUSH
5757: PPUSH
5758: PPUSH
// dist := 99999 ;
5759: LD_ADDR_VAR 0 6
5763: PUSH
5764: LD_INT 99999
5766: ST_TO_ADDR
// for i = 1 to list do
5767: LD_ADDR_VAR 0 5
5771: PUSH
5772: DOUBLE
5773: LD_INT 1
5775: DEC
5776: ST_TO_ADDR
5777: LD_VAR 0 3
5781: PUSH
5782: FOR_TO
5783: IFFALSE 5921
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5785: LD_ADDR_VAR 0 7
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 2
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 5
5809: ARRAY
5810: PUSH
5811: LD_INT 1
5813: ARRAY
5814: PPUSH
5815: LD_VAR 0 3
5819: PUSH
5820: LD_VAR 0 5
5824: ARRAY
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 298
5834: ST_TO_ADDR
// if d = 0 then
5835: LD_VAR 0 7
5839: PUSH
5840: LD_INT 0
5842: EQUAL
5843: IFFALSE 5847
// continue ;
5845: GO 5782
// if d < dist then
5847: LD_VAR 0 7
5851: PUSH
5852: LD_VAR 0 6
5856: LESS
5857: IFFALSE 5919
// begin _x := list [ i ] [ 1 ] ;
5859: LD_ADDR_VAR 0 8
5863: PUSH
5864: LD_VAR 0 3
5868: PUSH
5869: LD_VAR 0 5
5873: ARRAY
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5879: LD_ADDR_VAR 0 9
5883: PUSH
5884: LD_VAR 0 3
5888: PUSH
5889: LD_VAR 0 5
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: ST_TO_ADDR
// _i := i ;
5899: LD_ADDR_VAR 0 10
5903: PUSH
5904: LD_VAR 0 5
5908: ST_TO_ADDR
// dist := d ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: LD_VAR 0 7
5918: ST_TO_ADDR
// end ; end ;
5919: GO 5782
5921: POP
5922: POP
// result := [ _x , _y , _i , dist ] ;
5923: LD_ADDR_VAR 0 4
5927: PUSH
5928: LD_VAR 0 8
5932: PUSH
5933: LD_VAR 0 9
5937: PUSH
5938: LD_VAR 0 10
5942: PUSH
5943: LD_VAR 0 6
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: ST_TO_ADDR
// end ;
5954: LD_VAR 0 4
5958: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5959: LD_INT 0
5961: PPUSH
5962: PPUSH
// for i = 1 to 72 do
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_INT 72
5975: PUSH
5976: FOR_TO
5977: IFFALSE 6031
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5979: LD_VAR 0 5
5983: PPUSH
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 321
5993: PUSH
5994: LD_INT 1
5996: EQUAL
5997: PUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_VAR 0 3
6007: PPUSH
6008: CALL_OW 482
6012: AND
6013: IFFALSE 6029
// AddComResearch ( lab , i ) ;
6015: LD_VAR 0 2
6019: PPUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: CALL_OW 184
6029: GO 5976
6031: POP
6032: POP
// end ;
6033: LD_VAR 0 4
6037: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6038: LD_INT 0
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: LD_VAR 0 2
6054: PPUSH
6055: CALL_OW 313
6059: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6060: LD_ADDR_VAR 0 8
6064: PUSH
6065: LD_VAR 0 3
6069: PPUSH
6070: LD_INT 22
6072: PUSH
6073: LD_VAR 0 1
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 25
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: LD_INT 750
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: LD_INT 54
6107: PUSH
6108: EMPTY
6109: LIST
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 70
6125: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6126: LD_ADDR_VAR 0 5
6130: PUSH
6131: LD_VAR 0 3
6135: PPUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 3
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 24
6163: PUSH
6164: LD_INT 1000
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: EMPTY
6181: LIST
6182: PPUSH
6183: CALL_OW 70
6187: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6188: LD_VAR 0 5
6192: NOT
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_VAR 0 1
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 24
6218: PUSH
6219: LD_INT 250
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 69
6235: NOT
6236: AND
6237: IFFALSE 6241
// exit ;
6239: GO 6337
// if buildingsList and engineerOkInside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 7
6250: AND
6251: IFFALSE 6277
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6253: LD_VAR 0 7
6257: PPUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 72
6272: PPUSH
6273: CALL_OW 122
// if buildingsList and engineerOkOutside then
6277: LD_VAR 0 5
6281: PUSH
6282: LD_VAR 0 8
6286: AND
6287: IFFALSE 6307
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6289: LD_VAR 0 8
6293: PPUSH
6294: LD_VAR 0 5
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6307: LD_VAR 0 5
6311: PUSH
6312: LD_INT 0
6314: EQUAL
6315: PUSH
6316: LD_VAR 0 8
6320: AND
6321: IFFALSE 6337
// ComEnterUnit ( engineerOkOutside , building ) ;
6323: LD_VAR 0 8
6327: PPUSH
6328: LD_VAR 0 2
6332: PPUSH
6333: CALL_OW 120
// end ;
6337: LD_VAR 0 4
6341: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6342: LD_INT 0
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
6349: PPUSH
6350: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6351: LD_ADDR_VAR 0 6
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_VAR 0 1
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 25
6370: PUSH
6371: LD_INT 4
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 23
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 24
6390: PUSH
6391: LD_INT 251
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 69
6408: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 3
6418: PPUSH
6419: LD_INT 22
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 23
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 50
6453: PUSH
6454: EMPTY
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 70
6467: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6468: LD_ADDR_VAR 0 8
6472: PUSH
6473: LD_VAR 0 3
6477: PPUSH
6478: LD_INT 22
6480: PUSH
6481: LD_VAR 0 1
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 21
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: LD_INT 25
6505: PUSH
6506: LD_INT 3
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 3
6519: PUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 750
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 70
6544: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6545: LD_ADDR_VAR 0 9
6549: PUSH
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_INT 22
6557: PUSH
6558: LD_VAR 0 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 25
6582: PUSH
6583: LD_INT 3
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 3
6596: PUSH
6597: LD_INT 24
6599: PUSH
6600: LD_INT 1000
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 70
6621: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6622: LD_VAR 0 8
6626: NOT
6627: PUSH
6628: LD_VAR 0 9
6632: NOT
6633: AND
6634: PUSH
6635: LD_VAR 0 6
6639: NOT
6640: AND
6641: IFFALSE 6645
// exit ;
6643: GO 6851
// if damageUnits and sciList then
6645: LD_VAR 0 8
6649: PUSH
6650: LD_VAR 0 6
6654: AND
6655: IFFALSE 6671
// ComMoveToArea ( damageUnits , healArea ) ;
6657: LD_VAR 0 8
6661: PPUSH
6662: LD_VAR 0 2
6666: PPUSH
6667: CALL_OW 113
// if unitsToHeal and sciList then
6671: LD_VAR 0 9
6675: PUSH
6676: LD_VAR 0 6
6680: AND
6681: IFFALSE 6692
// ComExitBuilding ( sciList ) ;
6683: LD_VAR 0 6
6687: PPUSH
6688: CALL_OW 122
// if unitsToHeal and sciListOutside then
6692: LD_VAR 0 9
6696: PUSH
6697: LD_VAR 0 7
6701: AND
6702: IFFALSE 6722
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6704: LD_VAR 0 7
6708: PPUSH
6709: LD_VAR 0 9
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6722: LD_VAR 0 8
6726: PUSH
6727: LD_INT 0
6729: EQUAL
6730: PUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 0
6738: EQUAL
6739: AND
6740: PUSH
6741: LD_VAR 0 7
6745: AND
6746: IFFALSE 6851
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6748: LD_ADDR_VAR 0 10
6752: PUSH
6753: LD_INT 22
6755: PUSH
6756: LD_VAR 0 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 21
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 30
6777: PUSH
6778: LD_INT 8
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: PPUSH
6790: CALL_OW 69
6794: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6795: LD_ADDR_VAR 0 11
6799: PUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 10
6807: PPUSH
6808: CALL_OW 12
6812: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6813: LD_VAR 0 7
6817: PPUSH
6818: LD_INT 3
6820: PUSH
6821: LD_INT 60
6823: PUSH
6824: EMPTY
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 72
6835: PPUSH
6836: LD_VAR 0 10
6840: PUSH
6841: LD_VAR 0 11
6845: ARRAY
6846: PPUSH
6847: CALL_OW 120
// end ; end ;
6851: LD_VAR 0 5
6855: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6856: LD_INT 0
6858: PPUSH
6859: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6860: LD_INT 22
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: LD_VAR 0 3
6895: LESSEQUAL
6896: IFFALSE 6963
// for i = 1 to vehCount do
6898: LD_ADDR_VAR 0 9
6902: PUSH
6903: DOUBLE
6904: LD_INT 1
6906: DEC
6907: ST_TO_ADDR
6908: LD_VAR 0 3
6912: PUSH
6913: FOR_TO
6914: IFFALSE 6961
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6916: LD_VAR 0 2
6920: PPUSH
6921: LD_VAR 0 7
6925: PPUSH
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_VAR 0 6
6935: PPUSH
6936: LD_VAR 0 4
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: LD_VAR 0 4
6948: PPUSH
6949: CALL_OW 12
6953: ARRAY
6954: PPUSH
6955: CALL_OW 185
6959: GO 6913
6961: POP
6962: POP
// end ;
6963: LD_VAR 0 8
6967: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6968: LD_INT 0
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
// for i = 1 to medicCount do
6981: LD_ADDR_VAR 0 11
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_VAR 0 4
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7079
// begin uc_side = side ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_VAR 0 1
7008: ST_TO_ADDR
// uc_nation = nation ;
7009: LD_ADDR_OWVAR 21
7013: PUSH
7014: LD_VAR 0 2
7018: ST_TO_ADDR
// hc_name =  ;
7019: LD_ADDR_OWVAR 26
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_gallery =  ;
7027: LD_ADDR_OWVAR 33
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7035: LD_INT 0
7037: PPUSH
7038: LD_INT 4
7040: PPUSH
7041: LD_VAR 0 5
7045: PPUSH
7046: CALL_OW 380
// un = CreateHuman ;
7050: LD_ADDR_VAR 0 13
7054: PUSH
7055: CALL_OW 44
7059: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7060: LD_VAR 0 13
7064: PPUSH
7065: LD_VAR 0 6
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 49
// end ;
7077: GO 6996
7079: POP
7080: POP
// for i = 1 to soldierCount do
7081: LD_ADDR_VAR 0 11
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_VAR 0 3
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7179
// begin uc_side = side ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_VAR 0 1
7108: ST_TO_ADDR
// uc_nation = nation ;
7109: LD_ADDR_OWVAR 21
7113: PUSH
7114: LD_VAR 0 2
7118: ST_TO_ADDR
// hc_name =  ;
7119: LD_ADDR_OWVAR 26
7123: PUSH
7124: LD_STRING 
7126: ST_TO_ADDR
// hc_gallery =  ;
7127: LD_ADDR_OWVAR 33
7131: PUSH
7132: LD_STRING 
7134: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7135: LD_INT 0
7137: PPUSH
7138: LD_INT 1
7140: PPUSH
7141: LD_VAR 0 5
7145: PPUSH
7146: CALL_OW 380
// un = CreateHuman ;
7150: LD_ADDR_VAR 0 13
7154: PUSH
7155: CALL_OW 44
7159: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7160: LD_VAR 0 13
7164: PPUSH
7165: LD_VAR 0 6
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 49
// end ;
7177: GO 7096
7179: POP
7180: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7181: LD_ADDR_VAR 0 16
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 25
7203: PUSH
7204: LD_INT 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 25
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 25
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 25
7233: PUSH
7234: LD_INT 9
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7257: LD_ADDR_VAR 0 15
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_VAR 0 1
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 25
7276: PUSH
7277: LD_INT 4
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 69
7292: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 7
7302: PPUSH
7303: CALL_OW 113
// if strategy = 1 then
7307: LD_VAR 0 9
7311: PUSH
7312: LD_INT 1
7314: EQUAL
7315: IFFALSE 7763
// begin for i in soldiersOK_list do
7317: LD_ADDR_VAR 0 11
7321: PUSH
7322: LD_VAR 0 16
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7392
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7330: LD_VAR 0 11
7334: PPUSH
7335: LD_INT 91
7337: PPUSH
7338: LD_INT 63
7340: PPUSH
7341: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7345: LD_VAR 0 11
7349: PPUSH
7350: LD_INT 101
7352: PPUSH
7353: LD_INT 53
7355: PPUSH
7356: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7360: LD_VAR 0 11
7364: PPUSH
7365: LD_INT 75
7367: PPUSH
7368: LD_INT 23
7370: PPUSH
7371: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7375: LD_VAR 0 11
7379: PPUSH
7380: LD_INT 78
7382: PPUSH
7383: LD_INT 8
7385: PPUSH
7386: CALL_OW 174
// end ;
7390: GO 7327
7392: POP
7393: POP
// wait ( 0 0$30 ) ;
7394: LD_INT 1050
7396: PPUSH
7397: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7408: LD_ADDR_VAR 0 14
7412: PUSH
7413: LD_INT 22
7415: PUSH
7416: LD_VAR 0 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 24
7433: PUSH
7434: LD_INT 550
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 24
7447: PUSH
7448: LD_INT 250
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7469: LD_ADDR_VAR 0 16
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_VAR 0 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 1000
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 69
7515: ST_TO_ADDR
// if medicCount then
7516: LD_VAR 0 4
7520: IFFALSE 7560
// begin if damageUnit_list then
7522: LD_VAR 0 14
7526: IFFALSE 7560
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7528: LD_VAR 0 14
7532: PPUSH
7533: LD_VAR 0 7
7537: PPUSH
7538: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7542: LD_VAR 0 4
7546: PPUSH
7547: LD_VAR 0 14
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: PPUSH
7556: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7560: LD_ADDR_VAR 0 11
7564: PUSH
7565: LD_VAR 0 16
7569: PUSH
7570: FOR_IN
7571: IFFALSE 7747
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7573: LD_ADDR_VAR 0 19
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 69
7594: PPUSH
7595: LD_VAR 0 11
7599: PPUSH
7600: CALL_OW 74
7604: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7605: LD_ADDR_VAR 0 20
7609: PUSH
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 8
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 59
7627: PUSH
7628: EMPTY
7629: LIST
7630: PUSH
7631: LD_INT 21
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 21
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: PPUSH
7664: CALL_OW 69
7668: PPUSH
7669: LD_VAR 0 11
7673: PPUSH
7674: CALL_OW 74
7678: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7679: LD_VAR 0 11
7683: PPUSH
7684: LD_VAR 0 19
7688: PPUSH
7689: CALL_OW 296
7693: PUSH
7694: LD_INT 8
7696: PLUS
7697: PUSH
7698: LD_VAR 0 11
7702: PPUSH
7703: LD_VAR 0 20
7707: PPUSH
7708: CALL_OW 296
7712: LESS
7713: IFFALSE 7731
// ComAttackUnit ( i , target1 ) else
7715: LD_VAR 0 11
7719: PPUSH
7720: LD_VAR 0 19
7724: PPUSH
7725: CALL_OW 115
7729: GO 7745
// ComAttackUnit ( i , target2 ) ;
7731: LD_VAR 0 11
7735: PPUSH
7736: LD_VAR 0 20
7740: PPUSH
7741: CALL_OW 115
// end ;
7745: GO 7570
7747: POP
7748: POP
// until not soldiersOK_list and not damageUnit_list ;
7749: LD_VAR 0 16
7753: NOT
7754: PUSH
7755: LD_VAR 0 14
7759: NOT
7760: AND
7761: IFFALSE 7401
// end ; if strategy = 2 then
7763: LD_VAR 0 9
7767: PUSH
7768: LD_INT 2
7770: EQUAL
7771: IFFALSE 8189
// begin for i in soldiersOK_list do
7773: LD_ADDR_VAR 0 11
7777: PUSH
7778: LD_VAR 0 16
7782: PUSH
7783: FOR_IN
7784: IFFALSE 7818
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7786: LD_VAR 0 11
7790: PPUSH
7791: LD_INT 91
7793: PPUSH
7794: LD_INT 63
7796: PPUSH
7797: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7801: LD_VAR 0 11
7805: PPUSH
7806: LD_INT 75
7808: PPUSH
7809: LD_INT 33
7811: PPUSH
7812: CALL_OW 174
// end ;
7816: GO 7783
7818: POP
7819: POP
// wait ( 0 0$10 ) ;
7820: LD_INT 350
7822: PPUSH
7823: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7827: LD_INT 105
7829: PPUSH
7830: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7834: LD_ADDR_VAR 0 14
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_VAR 0 1
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 1
7853: PUSH
7854: LD_INT 3
7856: PUSH
7857: LD_INT 24
7859: PUSH
7860: LD_INT 550
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 24
7873: PUSH
7874: LD_INT 250
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 69
7894: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7895: LD_ADDR_VAR 0 16
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 24
7924: PUSH
7925: LD_INT 1000
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// if medicCount then
7942: LD_VAR 0 4
7946: IFFALSE 7986
// begin if damageUnit_list then
7948: LD_VAR 0 14
7952: IFFALSE 7986
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7954: LD_VAR 0 14
7958: PPUSH
7959: LD_VAR 0 7
7963: PPUSH
7964: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7968: LD_VAR 0 4
7972: PPUSH
7973: LD_VAR 0 14
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PPUSH
7982: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7986: LD_ADDR_VAR 0 11
7990: PUSH
7991: LD_VAR 0 16
7995: PUSH
7996: FOR_IN
7997: IFFALSE 8173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7999: LD_ADDR_VAR 0 19
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PPUSH
8016: CALL_OW 69
8020: PPUSH
8021: LD_VAR 0 11
8025: PPUSH
8026: CALL_OW 74
8030: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8031: LD_ADDR_VAR 0 20
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 8
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: LD_INT 59
8053: PUSH
8054: EMPTY
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 11
8099: PPUSH
8100: CALL_OW 74
8104: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8105: LD_VAR 0 11
8109: PPUSH
8110: LD_VAR 0 19
8114: PPUSH
8115: CALL_OW 296
8119: PUSH
8120: LD_INT 8
8122: PLUS
8123: PUSH
8124: LD_VAR 0 11
8128: PPUSH
8129: LD_VAR 0 20
8133: PPUSH
8134: CALL_OW 296
8138: LESS
8139: IFFALSE 8157
// ComAttackUnit ( i , target1 ) else
8141: LD_VAR 0 11
8145: PPUSH
8146: LD_VAR 0 19
8150: PPUSH
8151: CALL_OW 115
8155: GO 8171
// ComAttackUnit ( i , target2 ) ;
8157: LD_VAR 0 11
8161: PPUSH
8162: LD_VAR 0 20
8166: PPUSH
8167: CALL_OW 115
// end ;
8171: GO 7996
8173: POP
8174: POP
// until not soldiersOK_list and not damageUnit_list ;
8175: LD_VAR 0 16
8179: NOT
8180: PUSH
8181: LD_VAR 0 14
8185: NOT
8186: AND
8187: IFFALSE 7827
// end ; if medic_list then
8189: LD_VAR 0 15
8193: IFFALSE 8333
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 15
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_VAR 0 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 50
8224: PUSH
8225: EMPTY
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 69
8237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// for i in medic_list do
8245: LD_ADDR_VAR 0 11
8249: PUSH
8250: LD_VAR 0 15
8254: PUSH
8255: FOR_IN
8256: IFFALSE 8324
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8258: LD_VAR 0 11
8262: PPUSH
8263: CALL_OW 314
8267: NOT
8268: PUSH
8269: LD_VAR 0 11
8273: PPUSH
8274: LD_INT 4
8276: PPUSH
8277: CALL_OW 308
8281: NOT
8282: AND
8283: IFFALSE 8299
// ComMoveToArea ( i , RussianAttack ) else
8285: LD_VAR 0 11
8289: PPUSH
8290: LD_INT 4
8292: PPUSH
8293: CALL_OW 113
8297: GO 8322
// if IsInArea ( i , RussianAttack ) then
8299: LD_VAR 0 11
8303: PPUSH
8304: LD_INT 4
8306: PPUSH
8307: CALL_OW 308
8311: IFFALSE 8322
// RemoveUnit ( i ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 64
8322: GO 8255
8324: POP
8325: POP
// until not medic_list ;
8326: LD_VAR 0 15
8330: NOT
8331: IFFALSE 8195
// end ; end ; end_of_file
8333: LD_VAR 0 10
8337: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8338: LD_INT 0
8340: PPUSH
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
// InGameOn ;
8345: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8349: LD_ADDR_VAR 0 3
8353: PUSH
8354: LD_EXP 8
8358: PUSH
8359: LD_EXP 9
8363: PUSH
8364: LD_EXP 10
8368: PUSH
8369: LD_EXP 11
8373: PUSH
8374: LD_EXP 12
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8386: LD_ADDR_VAR 0 4
8390: PUSH
8391: LD_INT 46
8393: PUSH
8394: LD_INT 45
8396: PUSH
8397: LD_INT 44
8399: PUSH
8400: LD_INT 43
8402: PUSH
8403: LD_INT 42
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 14
8420: PUSH
8421: LD_INT 12
8423: PUSH
8424: LD_INT 10
8426: PUSH
8427: LD_INT 8
8429: PUSH
8430: LD_INT 6
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8440: LD_EXP 11
8444: PPUSH
8445: LD_INT 31
8447: PPUSH
8448: LD_INT 59
8450: PPUSH
8451: LD_INT 19
8453: PPUSH
8454: LD_INT 5
8456: PPUSH
8457: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8468: LD_INT 32
8470: PPUSH
8471: LD_INT 51
8473: PPUSH
8474: LD_INT 26
8476: PPUSH
8477: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8481: LD_INT 32
8483: PPUSH
8484: LD_INT 53
8486: PPUSH
8487: LD_INT 23
8489: PPUSH
8490: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8494: LD_INT 32
8496: PPUSH
8497: LD_INT 52
8499: PPUSH
8500: LD_INT 19
8502: PPUSH
8503: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8514: LD_INT 32
8516: PPUSH
8517: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8521: LD_INT 32
8523: PPUSH
8524: CALL_OW 250
8528: PUSH
8529: LD_INT 52
8531: EQUAL
8532: PUSH
8533: LD_INT 32
8535: PPUSH
8536: CALL_OW 251
8540: PUSH
8541: LD_INT 19
8543: EQUAL
8544: AND
8545: IFFALSE 8507
// ComExitVehicle ( JMM ) ;
8547: LD_EXP 1
8551: PPUSH
8552: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8556: LD_EXP 7
8560: PPUSH
8561: LD_EXP 1
8565: PPUSH
8566: CALL_OW 119
// wait ( 0 0$01 ) ;
8570: LD_INT 35
8572: PPUSH
8573: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8577: LD_EXP 1
8581: PPUSH
8582: LD_INT 46
8584: PPUSH
8585: LD_INT 10
8587: PPUSH
8588: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8592: LD_EXP 1
8596: PPUSH
8597: LD_EXP 7
8601: PPUSH
8602: CALL_OW 179
// wait ( 0 0$4 ) ;
8606: LD_INT 140
8608: PPUSH
8609: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8613: LD_EXP 1
8617: PPUSH
8618: LD_STRING D1-JMM-1
8620: PPUSH
8621: CALL_OW 88
// if not dialogue_skipped then
8625: LD_OWVAR 59
8629: NOT
8630: IFFALSE 9287
// begin for i := 1 to gammaSquad do
8632: LD_ADDR_VAR 0 2
8636: PUSH
8637: DOUBLE
8638: LD_INT 1
8640: DEC
8641: ST_TO_ADDR
8642: LD_VAR 0 3
8646: PUSH
8647: FOR_TO
8648: IFFALSE 8709
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8650: LD_VAR 0 3
8654: PUSH
8655: LD_VAR 0 2
8659: ARRAY
8660: PPUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_VAR 0 2
8670: ARRAY
8671: PPUSH
8672: LD_VAR 0 5
8676: PUSH
8677: LD_VAR 0 2
8681: ARRAY
8682: PPUSH
8683: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8687: LD_VAR 0 3
8691: PUSH
8692: LD_VAR 0 2
8696: ARRAY
8697: PPUSH
8698: LD_EXP 1
8702: PPUSH
8703: CALL_OW 179
// end ;
8707: GO 8647
8709: POP
8710: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8711: LD_EXP 4
8715: PPUSH
8716: LD_INT 41
8718: PPUSH
8719: LD_INT 4
8721: PPUSH
8722: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8726: LD_EXP 4
8730: PPUSH
8731: LD_EXP 1
8735: PPUSH
8736: CALL_OW 179
// if Lisa = false and Bobby then
8740: LD_EXP 4
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: PUSH
8749: LD_EXP 2
8753: AND
8754: IFFALSE 8785
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8756: LD_EXP 2
8760: PPUSH
8761: LD_INT 41
8763: PPUSH
8764: LD_INT 4
8766: PPUSH
8767: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8771: LD_EXP 2
8775: PPUSH
8776: LD_EXP 1
8780: PPUSH
8781: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8785: LD_EXP 4
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: PUSH
8794: LD_EXP 2
8798: PUSH
8799: LD_INT 0
8801: EQUAL
8802: AND
8803: PUSH
8804: LD_EXP 3
8808: AND
8809: IFFALSE 8840
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8811: LD_EXP 3
8815: PPUSH
8816: LD_INT 41
8818: PPUSH
8819: LD_INT 4
8821: PPUSH
8822: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8826: LD_EXP 3
8830: PPUSH
8831: LD_EXP 1
8835: PPUSH
8836: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8840: LD_EXP 4
8844: PUSH
8845: LD_INT 0
8847: EQUAL
8848: PUSH
8849: LD_EXP 2
8853: PUSH
8854: LD_INT 0
8856: EQUAL
8857: AND
8858: PUSH
8859: LD_EXP 3
8863: PUSH
8864: LD_INT 0
8866: EQUAL
8867: AND
8868: IFFALSE 8899
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8870: LD_EXP 6
8874: PPUSH
8875: LD_INT 41
8877: PPUSH
8878: LD_INT 4
8880: PPUSH
8881: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8885: LD_EXP 6
8889: PPUSH
8890: LD_EXP 1
8894: PPUSH
8895: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8899: LD_EXP 7
8903: PPUSH
8904: LD_STRING D1-Brown-1
8906: PPUSH
8907: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8911: LD_EXP 1
8915: PPUSH
8916: LD_STRING D1-JMM-2
8918: PPUSH
8919: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8923: LD_EXP 7
8927: PPUSH
8928: LD_STRING D1-Brown-2
8930: PPUSH
8931: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8935: LD_EXP 1
8939: PPUSH
8940: LD_EXP 9
8944: PPUSH
8945: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8949: LD_EXP 9
8953: PPUSH
8954: LD_STRING D1-FSol1-2
8956: PPUSH
8957: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 8
8970: PPUSH
8971: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8975: LD_EXP 8
8979: PPUSH
8980: LD_STRING D1-Sol2-2
8982: PPUSH
8983: CALL_OW 88
// if Lisa then
8987: LD_EXP 4
8991: IFFALSE 9031
// begin ComTurnUnit ( JMM , Lisa ) ;
8993: LD_EXP 1
8997: PPUSH
8998: LD_EXP 4
9002: PPUSH
9003: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
9007: LD_EXP 4
9011: PPUSH
9012: LD_STRING D1-Lisa-2
9014: PPUSH
9015: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9019: LD_EXP 1
9023: PPUSH
9024: LD_STRING D1-JMM-3
9026: PPUSH
9027: CALL_OW 88
// end ; if Bobby then
9031: LD_EXP 2
9035: IFFALSE 9075
// begin ComTurnUnit ( JMM , Bobby ) ;
9037: LD_EXP 1
9041: PPUSH
9042: LD_EXP 2
9046: PPUSH
9047: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9051: LD_EXP 2
9055: PPUSH
9056: LD_STRING D1-Bobby-2
9058: PPUSH
9059: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9063: LD_EXP 1
9067: PPUSH
9068: LD_STRING D1-JMM-3
9070: PPUSH
9071: CALL_OW 88
// end ; if Cyrus then
9075: LD_EXP 3
9079: IFFALSE 9119
// begin ComTurnUnit ( JMM , Cyrus ) ;
9081: LD_EXP 1
9085: PPUSH
9086: LD_EXP 3
9090: PPUSH
9091: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9095: LD_EXP 3
9099: PPUSH
9100: LD_STRING D1-Cyrus-2
9102: PPUSH
9103: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9107: LD_EXP 1
9111: PPUSH
9112: LD_STRING D1-JMM-3
9114: PPUSH
9115: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9119: LD_EXP 1
9123: PPUSH
9124: LD_EXP 7
9128: PPUSH
9129: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9133: LD_EXP 1
9137: PPUSH
9138: LD_STRING D1-JMM-3a
9140: PPUSH
9141: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9145: LD_EXP 7
9149: PPUSH
9150: LD_INT 38
9152: PPUSH
9153: LD_INT 5
9155: PPUSH
9156: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9160: LD_EXP 7
9164: PPUSH
9165: LD_EXP 1
9169: PPUSH
9170: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9174: LD_EXP 1
9178: PPUSH
9179: LD_INT 40
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9189: LD_EXP 1
9193: PPUSH
9194: LD_EXP 7
9198: PPUSH
9199: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9203: LD_EXP 7
9207: PPUSH
9208: LD_STRING D1-Brown-3
9210: PPUSH
9211: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D1-Har-3
9222: PPUSH
9223: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9227: LD_EXP 1
9231: PPUSH
9232: LD_STRING D1-JMM-4
9234: PPUSH
9235: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9239: LD_EXP 14
9243: PPUSH
9244: LD_STRING D1-Har-4
9246: PPUSH
9247: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9251: LD_EXP 1
9255: PPUSH
9256: LD_STRING D1-JMM-5
9258: PPUSH
9259: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9263: LD_EXP 14
9267: PPUSH
9268: LD_STRING D1-Har-5
9270: PPUSH
9271: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9275: LD_EXP 1
9279: PPUSH
9280: LD_STRING D1-JMM-6
9282: PPUSH
9283: CALL_OW 88
// end ; InGameOff ;
9287: CALL_OW 9
// PrepareRussianConvoy ;
9291: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9295: LD_STRING M1
9297: PPUSH
9298: CALL_OW 337
// SaveForQuickRestart ;
9302: CALL_OW 22
// timerStatus = 1 ;
9306: LD_ADDR_EXP 29
9310: PUSH
9311: LD_INT 1
9313: ST_TO_ADDR
// startTimer = 1 ;
9314: LD_ADDR_EXP 30
9318: PUSH
9319: LD_INT 1
9321: ST_TO_ADDR
// bonusAvalaible = 1 ;
9322: LD_ADDR_EXP 44
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9330: LD_INT 105
9332: PPUSH
9333: CALL_OW 67
// DialogueOn ;
9337: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9341: LD_EXP 12
9345: PPUSH
9346: LD_STRING D9-Mech1-1
9348: PPUSH
9349: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9353: LD_EXP 1
9357: PPUSH
9358: LD_STRING D9-JMM-1
9360: PPUSH
9361: CALL_OW 88
// DialogueOff ;
9365: CALL_OW 7
// end ;
9369: LD_VAR 0 1
9373: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9374: LD_INT 47
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 321
9384: PUSH
9385: LD_INT 2
9387: EQUAL
9388: PUSH
9389: LD_EXP 31
9393: NOT
9394: AND
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 30
9418: PUSH
9419: LD_INT 3
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 57
9428: PUSH
9429: EMPTY
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: AND
9443: IFFALSE 9677
9445: GO 9447
9447: DISABLE
// begin factoryDialog := true ;
9448: LD_ADDR_EXP 31
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// if IsOk ( Campell ) then
9456: LD_EXP 12
9460: PPUSH
9461: CALL_OW 302
9465: IFFALSE 9481
// Say ( Campell , D10-Mech1-1 ) else
9467: LD_EXP 12
9471: PPUSH
9472: LD_STRING D10-Mech1-1
9474: PPUSH
9475: CALL_OW 88
9479: GO 9677
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9481: LD_INT 22
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: PUSH
9532: LD_EXP 1
9536: PUSH
9537: EMPTY
9538: LIST
9539: DIFF
9540: IFFALSE 9614
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9542: LD_INT 22
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 21
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 25
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PPUSH
9588: CALL_OW 69
9592: PUSH
9593: LD_EXP 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: DIFF
9601: PPUSH
9602: LD_STRING D10-Mech1-1
9604: PPUSH
9605: LD_STRING D10-Mech1-1
9607: PPUSH
9608: CALL 4606 0 3
9612: GO 9677
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9614: LD_INT 22
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 26
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 1
9651: ARRAY
9652: PPUSH
9653: CALL_OW 69
9657: PUSH
9658: LD_EXP 1
9662: PUSH
9663: EMPTY
9664: LIST
9665: DIFF
9666: PPUSH
9667: LD_STRING D10-Mech1-1
9669: PPUSH
9670: LD_STRING D10-Mech1-1
9672: PPUSH
9673: CALL 4606 0 3
// end ; end ;
9677: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9678: LD_INT 22
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 32
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PPUSH
9702: CALL_OW 69
9706: PUSH
9707: LD_EXP 32
9711: PUSH
9712: LD_INT 0
9714: EQUAL
9715: AND
9716: IFFALSE 9952
9718: GO 9720
9720: DISABLE
// begin if IsOk ( Claptopn ) then
9721: LD_EXP 11
9725: PPUSH
9726: CALL_OW 302
9730: IFFALSE 9746
// Say ( Claptopn , D9b-Eng1-1 ) else
9732: LD_EXP 11
9736: PPUSH
9737: LD_STRING D9b-Eng1-1
9739: PPUSH
9740: CALL_OW 88
9744: GO 9938
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9746: LD_INT 22
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 3
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 26
9778: PUSH
9779: LD_INT 1
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 69
9796: PUSH
9797: LD_EXP 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: DIFF
9805: IFFALSE 9879
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9807: LD_INT 22
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 21
9819: PUSH
9820: LD_INT 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 26
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PUSH
9858: LD_EXP 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: DIFF
9866: PPUSH
9867: LD_STRING D9b-Eng1-1
9869: PPUSH
9870: LD_STRING D9b-Eng1-11
9872: PPUSH
9873: CALL 4606 0 3
9877: GO 9938
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9879: LD_INT 22
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 69
9918: PUSH
9919: LD_EXP 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: DIFF
9927: PPUSH
9928: LD_STRING D9b-Eng1-1
9930: PPUSH
9931: LD_STRING D9b-Eng1-1
9933: PPUSH
9934: CALL 4606 0 3
// end ; if energyVDialog = 0 then
9938: LD_EXP 33
9942: PUSH
9943: LD_INT 0
9945: EQUAL
9946: IFFALSE 9952
// EnergyDialog ;
9948: CALL 5011 0 0
// end ;
9952: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9953: LD_EXP 34
9957: PUSH
9958: LD_INT 1
9960: EQUAL
9961: PUSH
9962: LD_EXP 35
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: AND
9971: IFFALSE 9983
9973: GO 9975
9975: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9976: LD_STRING M1a
9978: PPUSH
9979: CALL_OW 337
9983: END
// every 3 3$0 do
9984: GO 9986
9986: DISABLE
// PrepareFirstAttack ;
9987: CALL 4212 0 0
9991: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9992: LD_INT 22
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: LD_INT 250
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 69
10038: PUSH
10039: LD_INT 0
10041: GREATER
10042: PUSH
10043: LD_EXP 23
10047: PUSH
10048: LD_INT 1
10050: EQUAL
10051: AND
10052: IFFALSE 10353
10054: GO 10056
10056: DISABLE
10057: LD_INT 0
10059: PPUSH
// begin firstRussianAttack = 2 ;
10060: LD_ADDR_EXP 23
10064: PUSH
10065: LD_INT 2
10067: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10068: LD_INT 22
10070: PUSH
10071: LD_INT 5
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 21
10080: PUSH
10081: LD_INT 1
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: PPUSH
10097: LD_INT 125
10099: PPUSH
10100: LD_INT 98
10102: PPUSH
10103: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10107: LD_INT 22
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 21
10119: PUSH
10120: LD_INT 1
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: PUSH
10136: LD_EXP 1
10140: PUSH
10141: LD_EXP 7
10145: PUSH
10146: LD_EXP 4
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: DIFF
10156: PPUSH
10157: LD_STRING DAtt1-Sol1-1
10159: PPUSH
10160: LD_STRING DAtt1-FSol1-1
10162: PPUSH
10163: CALL 4606 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10167: LD_EXP 1
10171: PPUSH
10172: LD_STRING DAtt1-JMM-1
10174: PPUSH
10175: CALL_OW 88
// if Lisa then
10179: LD_EXP 4
10183: IFFALSE 10199
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10185: LD_EXP 4
10189: PPUSH
10190: LD_STRING DAtt1a-Lisa-1
10192: PPUSH
10193: CALL_OW 88
10197: GO 10270
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10199: LD_INT 22
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 21
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 26
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: PUSH
10239: LD_EXP 1
10243: PUSH
10244: LD_EXP 7
10248: PUSH
10249: LD_EXP 4
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: DIFF
10259: PPUSH
10260: LD_STRING DAtt1a-Sol1-1
10262: PPUSH
10263: LD_STRING DAtt1-FSol1-1
10265: PPUSH
10266: CALL 4606 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10270: LD_EXP 1
10274: PPUSH
10275: LD_STRING DAtt1a-JMM-1
10277: PPUSH
10278: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10282: LD_INT 22
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 21
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 26
10304: PUSH
10305: LD_INT 1
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 69
10321: PUSH
10322: LD_EXP 1
10326: PUSH
10327: LD_EXP 7
10331: PUSH
10332: LD_EXP 4
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: DIFF
10342: PPUSH
10343: LD_STRING DAtt1b-Sol1-1
10345: PPUSH
10346: LD_STRING DAtt1a-Sol1-1
10348: PPUSH
10349: CALL 4606 0 3
// end ;
10353: PPOPN 1
10355: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10356: LD_EXP 23
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: PUSH
10365: LD_INT 5
10367: PPUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 70
10396: AND
10397: IFFALSE 10455
10399: GO 10401
10401: DISABLE
10402: LD_INT 0
10404: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 5
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 21
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: FOR_IN
10440: IFFALSE 10453
// RemoveUnit ( i ) ;
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 64
10451: GO 10439
10453: POP
10454: POP
// end ;
10455: PPOPN 1
10457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10458: LD_INT 22
10460: PUSH
10461: LD_INT 5
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: PUSH
10480: LD_EXP 23
10484: PUSH
10485: LD_INT 2
10487: EQUAL
10488: AND
10489: IFFALSE 10502
10491: GO 10493
10493: DISABLE
// firstRussianAttack = 3 ;
10494: LD_ADDR_EXP 23
10498: PUSH
10499: LD_INT 3
10501: ST_TO_ADDR
10502: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10503: LD_EXP 28
10507: PUSH
10508: LD_INT 0
10510: EQUAL
10511: IFFALSE 10592
10513: GO 10515
10515: DISABLE
// begin timerStatus = 4 ;
10516: LD_ADDR_EXP 29
10520: PUSH
10521: LD_INT 4
10523: ST_TO_ADDR
// DialogueOn ;
10524: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10528: LD_EXP 13
10532: PPUSH
10533: LD_STRING D2-Don-1
10535: PPUSH
10536: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D2-JMM-1
10547: PPUSH
10548: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10552: LD_EXP 13
10556: PPUSH
10557: LD_STRING D2-Don-2
10559: PPUSH
10560: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10564: LD_EXP 1
10568: PPUSH
10569: LD_STRING D2-JMM-2
10571: PPUSH
10572: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10576: LD_EXP 13
10580: PPUSH
10581: LD_STRING D2-Don-3
10583: PPUSH
10584: CALL_OW 94
// DialogueOff ;
10588: CALL_OW 7
// end ;
10592: END
// every 12 12$0 do var tmp ;
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
// begin PrepareDonaldsonArmy ;
10599: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10603: LD_EXP 13
10607: PPUSH
10608: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10612: LD_INT 22
10614: PUSH
10615: LD_INT 6
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: NOT
10627: IFFALSE 10643
// begin wait ( 3 ) ;
10629: LD_INT 3
10631: PPUSH
10632: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10636: LD_STRING ACH_BASE
10638: PPUSH
10639: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10643: LD_ADDR_VAR 0 1
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 1
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 25
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: PUSH
10699: LD_EXP 5
10703: PUSH
10704: EMPTY
10705: LIST
10706: DIFF
10707: ST_TO_ADDR
// DialogueOn ;
10708: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10712: LD_VAR 0 1
10716: PPUSH
10717: LD_STRING D3-Sol1-1
10719: PPUSH
10720: LD_STRING D3-Sol1-1
10722: PPUSH
10723: CALL 4606 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10727: LD_INT 22
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 21
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: PPUSH
10778: LD_STRING D3-Sol2-1
10780: PPUSH
10781: LD_STRING D3-Sol2-1
10783: PPUSH
10784: CALL 4606 0 3
// if Frank then
10788: LD_EXP 5
10792: IFFALSE 10806
// Say ( Frank , D3-Frank-1 ) ;
10794: LD_EXP 5
10798: PPUSH
10799: LD_STRING D3-Frank-1
10801: PPUSH
10802: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10806: LD_EXP 13
10810: PPUSH
10811: LD_STRING D3-Don-1
10813: PPUSH
10814: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10818: LD_EXP 13
10822: PPUSH
10823: LD_STRING D3-Don-1a
10825: PPUSH
10826: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10830: LD_EXP 1
10834: PPUSH
10835: LD_STRING D3-JMM-1
10837: PPUSH
10838: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10842: LD_EXP 13
10846: PPUSH
10847: LD_STRING D3-Don-2
10849: PPUSH
10850: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10854: LD_INT 22
10856: PUSH
10857: LD_INT 6
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 21
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 69
10882: IFFALSE 11020
// begin Say ( JMM , D3-JMM-2 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING D3-JMM-2
10891: PPUSH
10892: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10896: LD_EXP 13
10900: PPUSH
10901: LD_STRING D3-Don-3
10903: PPUSH
10904: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10908: LD_EXP 1
10912: PPUSH
10913: LD_STRING D3-JMM-3
10915: PPUSH
10916: CALL_OW 88
// if IsOK ( Frank ) then
10920: LD_EXP 5
10924: PPUSH
10925: CALL_OW 302
10929: IFFALSE 10943
// Say ( Frank , D3-Frank-3 ) ;
10931: LD_EXP 5
10935: PPUSH
10936: LD_STRING D3-Frank-3
10938: PPUSH
10939: CALL_OW 88
// DialogueOff ;
10943: CALL_OW 7
// if IsOk ( Frank ) then
10947: LD_EXP 5
10951: PPUSH
10952: CALL_OW 302
10956: IFFALSE 11018
// begin SetSide ( Frank , 0 ) ;
10958: LD_EXP 5
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 12
10977: PPUSH
10978: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_STRING 04t_Frank
10989: PPUSH
10990: CALL_OW 38
// wait ( 0 0$3 ) ;
10994: LD_INT 105
10996: PPUSH
10997: CALL_OW 67
// frankScoutBase = 1 ;
11001: LD_ADDR_EXP 25
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11009: LD_EXP 5
11013: PPUSH
11014: CALL_OW 64
// end ; end else
11018: GO 11107
// begin Say ( JMM , D3-JMM-4 ) ;
11020: LD_EXP 1
11024: PPUSH
11025: LD_STRING D3-JMM-4
11027: PPUSH
11028: CALL_OW 88
// DialogueOff ;
11032: CALL_OW 7
// if IsOk ( Frank ) then
11036: LD_EXP 5
11040: PPUSH
11041: CALL_OW 302
11045: IFFALSE 11107
// begin SetSide ( Frank , 0 ) ;
11047: LD_EXP 5
11051: PPUSH
11052: LD_INT 0
11054: PPUSH
11055: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11059: LD_EXP 5
11063: PPUSH
11064: LD_INT 12
11066: PPUSH
11067: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11071: LD_EXP 5
11075: PPUSH
11076: LD_STRING 04t_Frank
11078: PPUSH
11079: CALL_OW 38
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// frankScoutBase = 1 ;
11090: LD_ADDR_EXP 25
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11098: LD_EXP 5
11102: PPUSH
11103: CALL_OW 64
// end ; end ; end ;
11107: PPOPN 1
11109: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11110: LD_EXP 13
11114: PPUSH
11115: CALL_OW 255
11119: PUSH
11120: LD_INT 4
11122: EQUAL
11123: PUSH
11124: LD_EXP 13
11128: PPUSH
11129: CALL_OW 302
11133: AND
11134: IFFALSE 11374
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin wait ( 5 5$00 ) ;
11143: LD_INT 10500
11145: PPUSH
11146: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11150: LD_EXP 13
11154: PPUSH
11155: CALL_OW 255
11159: PUSH
11160: LD_INT 1
11162: EQUAL
11163: PUSH
11164: LD_EXP 13
11168: PPUSH
11169: CALL_OW 301
11173: OR
11174: IFFALSE 11178
// exit ;
11176: GO 11374
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11178: LD_EXP 13
11182: PPUSH
11183: LD_STRING D3b-Don-1
11185: PPUSH
11186: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11190: LD_ADDR_EXP 41
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_INT 22
11205: PUSH
11206: LD_INT 4
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11218: LD_INT 35
11220: PPUSH
11221: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11225: LD_VAR 0 2
11229: NOT
11230: PUSH
11231: LD_INT 22
11233: PUSH
11234: LD_INT 6
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: OR
11260: IFFALSE 11218
// if not tmp then
11262: LD_VAR 0 2
11266: NOT
11267: IFFALSE 11271
// exit ;
11269: GO 11374
// for i in tmp do
11271: LD_ADDR_VAR 0 1
11275: PUSH
11276: LD_VAR 0 2
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11301
// ComAgressiveMove ( i , 52 , 64 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 52
11291: PPUSH
11292: LD_INT 64
11294: PPUSH
11295: CALL_OW 114
11299: GO 11281
11301: POP
11302: POP
// wait ( 0 0$10 ) ;
11303: LD_INT 350
11305: PPUSH
11306: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11310: LD_ADDR_VAR 0 1
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_INT 4
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 69
11329: PUSH
11330: LD_EXP 5
11334: DIFF
11335: PUSH
11336: FOR_IN
11337: IFFALSE 11353
// SetSide ( i , 1 ) ;
11339: LD_VAR 0 1
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 235
11351: GO 11336
11353: POP
11354: POP
// if IsLive ( Donaldson ) then
11355: LD_EXP 13
11359: PPUSH
11360: CALL_OW 300
11364: IFFALSE 11374
// saveDonaldson := 1 ;
11366: LD_ADDR_EXP 24
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// end ;
11374: PPOPN 2
11376: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11377: LD_EXP 24
11381: NOT
11382: PUSH
11383: LD_EXP 41
11387: NOT
11388: AND
11389: PUSH
11390: LD_INT 26
11392: PPUSH
11393: LD_INT 22
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PPUSH
11403: CALL_OW 70
11407: PUSH
11408: LD_EXP 13
11412: PPUSH
11413: LD_EXP 1
11417: PPUSH
11418: CALL_OW 296
11422: PUSH
11423: LD_INT 6
11425: LESS
11426: OR
11427: AND
11428: IFFALSE 11483
11430: GO 11432
11432: DISABLE
11433: LD_INT 0
11435: PPUSH
// begin saveDonaldson := 1 ;
11436: LD_ADDR_EXP 24
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11444: LD_ADDR_VAR 0 1
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 4
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: PUSH
11464: FOR_IN
11465: IFFALSE 11481
// SetSide ( i , 1 ) ;
11467: LD_VAR 0 1
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 235
11479: GO 11464
11481: POP
11482: POP
// end ;
11483: PPOPN 1
11485: END
// every 0 0$1 trigger frankScoutBase do
11486: LD_EXP 25
11490: IFFALSE 11855
11492: GO 11494
11494: DISABLE
// begin wait ( 2 2$30 ) ;
11495: LD_INT 5250
11497: PPUSH
11498: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11502: LD_INT 35
11504: PPUSH
11505: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11509: LD_INT 81
11511: PUSH
11512: LD_INT 4
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 92
11521: PUSH
11522: LD_INT 84
11524: PUSH
11525: LD_INT 28
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 69
11545: NOT
11546: IFFALSE 11502
// uc_side = 4 ;
11548: LD_ADDR_OWVAR 20
11552: PUSH
11553: LD_INT 4
11555: ST_TO_ADDR
// uc_nation = 1 ;
11556: LD_ADDR_OWVAR 21
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11564: LD_ADDR_EXP 5
11568: PUSH
11569: LD_STRING 04t_Frank
11571: PPUSH
11572: CALL_OW 34
11576: ST_TO_ADDR
// if not Frank then
11577: LD_EXP 5
11581: NOT
11582: IFFALSE 11586
// exit ;
11584: GO 11855
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11586: LD_EXP 5
11590: PPUSH
11591: LD_INT 13
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11601: LD_INT 35
11603: PPUSH
11604: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11608: LD_EXP 1
11612: PPUSH
11613: CALL_OW 310
11617: NOT
11618: PUSH
11619: LD_EXP 1
11623: PPUSH
11624: LD_INT 4
11626: PPUSH
11627: CALL_OW 296
11631: PUSH
11632: LD_INT 20
11634: LESS
11635: AND
11636: IFFALSE 11669
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11638: LD_EXP 5
11642: PPUSH
11643: LD_EXP 1
11647: PPUSH
11648: CALL_OW 250
11652: PPUSH
11653: LD_EXP 1
11657: PPUSH
11658: CALL_OW 251
11662: PPUSH
11663: CALL_OW 111
11667: GO 11684
// ComMoveXY ( Frank , 51 , 15 ) ;
11669: LD_EXP 5
11673: PPUSH
11674: LD_INT 51
11676: PPUSH
11677: LD_INT 15
11679: PPUSH
11680: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11684: LD_EXP 5
11688: PPUSH
11689: LD_EXP 1
11693: PPUSH
11694: CALL_OW 296
11698: PUSH
11699: LD_INT 10
11701: LESS
11702: IFFALSE 11601
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11704: LD_EXP 1
11708: PUSH
11709: LD_EXP 5
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 87
// DialogueOn ;
11722: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11726: LD_EXP 5
11730: PPUSH
11731: LD_STRING D3a-Frank-1
11733: PPUSH
11734: CALL_OW 88
// if Lisa then
11738: LD_EXP 4
11742: IFFALSE 11792
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11744: LD_EXP 4
11748: PPUSH
11749: LD_STRING D3a-Lisa-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11756: LD_EXP 5
11760: PPUSH
11761: LD_STRING D3a-Frank-2
11763: PPUSH
11764: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11768: LD_EXP 4
11772: PPUSH
11773: LD_STRING D3a-Lisa-2
11775: PPUSH
11776: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11780: LD_EXP 5
11784: PPUSH
11785: LD_STRING D3a-Frank-3
11787: PPUSH
11788: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11792: LD_EXP 1
11796: PPUSH
11797: LD_STRING D3a-JMM-3
11799: PPUSH
11800: CALL_OW 88
// DialogueOff ;
11804: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11808: LD_EXP 5
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 235
// InGameOn ;
11820: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11824: LD_INT 1
11826: PPUSH
11827: LD_INT 7
11829: PPUSH
11830: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11834: LD_INT 93
11836: PPUSH
11837: LD_INT 91
11839: PPUSH
11840: CALL_OW 84
// wait ( 0 0$5 ) ;
11844: LD_INT 175
11846: PPUSH
11847: CALL_OW 67
// InGameOff ;
11851: CALL_OW 9
// end ;
11855: END
// every 12 12$0 trigger Difficulty > 1 do
11856: LD_OWVAR 67
11860: PUSH
11861: LD_INT 1
11863: GREATER
11864: IFFALSE 11888
11866: GO 11868
11868: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11869: LD_INT 24
11871: PPUSH
11872: LD_INT 24
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 53
11883: PPUSH
11884: CALL_OW 185
11888: END
// every 18 18$0 do
11889: GO 11891
11891: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11892: LD_EXP 14
11896: PPUSH
11897: LD_STRING D4-Har-1
11899: PPUSH
11900: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11904: LD_EXP 1
11908: PPUSH
11909: LD_STRING D4-JMM-1
11911: PPUSH
11912: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11916: LD_EXP 14
11920: PPUSH
11921: LD_STRING D4-Har-2
11923: PPUSH
11924: CALL_OW 94
// case Query ( Q1 ) of 1 :
11928: LD_STRING Q1
11930: PPUSH
11931: CALL_OW 97
11935: PUSH
11936: LD_INT 1
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12003
11944: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11945: LD_EXP 1
11949: PPUSH
11950: LD_STRING D5-JMM-1
11952: PPUSH
11953: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11957: LD_EXP 14
11961: PPUSH
11962: LD_STRING D5-Har-1
11964: PPUSH
11965: CALL_OW 94
// timeToSupport = 10 10$0 ;
11969: LD_ADDR_EXP 28
11973: PUSH
11974: LD_INT 21000
11976: ST_TO_ADDR
// timerStatus = 2 ;
11977: LD_ADDR_EXP 29
11981: PUSH
11982: LD_INT 2
11984: ST_TO_ADDR
// startTimer = 1 ;
11985: LD_ADDR_EXP 30
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// harrAnswer = 1 ;
11993: LD_ADDR_EXP 26
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// end ; 2 :
12001: GO 12138
12003: LD_INT 2
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12070
12011: POP
// begin Say ( JMM , D5-JMM-2 ) ;
12012: LD_EXP 1
12016: PPUSH
12017: LD_STRING D5-JMM-2
12019: PPUSH
12020: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12024: LD_EXP 14
12028: PPUSH
12029: LD_STRING D5-Har-2
12031: PPUSH
12032: CALL_OW 94
// timeToSupport = 5 5$0 ;
12036: LD_ADDR_EXP 28
12040: PUSH
12041: LD_INT 10500
12043: ST_TO_ADDR
// timerStatus = 2 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 2
12051: ST_TO_ADDR
// startTimer = 1 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// harrAnswer = 2 ;
12060: LD_ADDR_EXP 26
12064: PUSH
12065: LD_INT 2
12067: ST_TO_ADDR
// end ; 3 :
12068: GO 12138
12070: LD_INT 3
12072: DOUBLE
12073: EQUAL
12074: IFTRUE 12078
12076: GO 12137
12078: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12079: LD_EXP 1
12083: PPUSH
12084: LD_STRING D5-JMM-3
12086: PPUSH
12087: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12091: LD_EXP 14
12095: PPUSH
12096: LD_STRING D5-Har-3
12098: PPUSH
12099: CALL_OW 94
// timeToSupport = 5 5$0 ;
12103: LD_ADDR_EXP 28
12107: PUSH
12108: LD_INT 10500
12110: ST_TO_ADDR
// timerStatus = 2 ;
12111: LD_ADDR_EXP 29
12115: PUSH
12116: LD_INT 2
12118: ST_TO_ADDR
// startTimer = 1 ;
12119: LD_ADDR_EXP 30
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// harrAnswer = 3 ;
12127: LD_ADDR_EXP 26
12131: PUSH
12132: LD_INT 3
12134: ST_TO_ADDR
// end ; end ;
12135: GO 12138
12137: POP
// end ;
12138: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12139: LD_EXP 29
12143: PUSH
12144: LD_INT 2
12146: EQUAL
12147: PUSH
12148: LD_EXP 28
12152: PUSH
12153: LD_INT 0
12155: EQUAL
12156: AND
12157: IFFALSE 12446
12159: GO 12161
12161: DISABLE
// begin timerStatus = 4 ;
12162: LD_ADDR_EXP 29
12166: PUSH
12167: LD_INT 4
12169: ST_TO_ADDR
// if harrAnswer = 1 then
12170: LD_EXP 26
12174: PUSH
12175: LD_INT 1
12177: EQUAL
12178: IFFALSE 12262
// begin PrepareHarrisonSupport ( 3 ) ;
12180: LD_INT 3
12182: PPUSH
12183: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12187: LD_INT 2100
12189: PPUSH
12190: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12194: LD_EXP 14
12198: PPUSH
12199: LD_STRING D7-Har-1
12201: PPUSH
12202: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12206: LD_STRING M2
12208: PPUSH
12209: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12213: LD_ADDR_EXP 27
12217: PUSH
12218: LD_INT 31500
12220: PUSH
12221: LD_INT 10500
12223: PUSH
12224: LD_INT 8400
12226: PUSH
12227: LD_INT 6300
12229: PUSH
12230: LD_INT 6300
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: LD_OWVAR 67
12243: ARRAY
12244: PLUS
12245: ST_TO_ADDR
// startTimer = 1 ;
12246: LD_ADDR_EXP 30
12250: PUSH
12251: LD_INT 1
12253: ST_TO_ADDR
// timerStatus = 3 ;
12254: LD_ADDR_EXP 29
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12262: LD_EXP 26
12266: PUSH
12267: LD_INT 2
12269: EQUAL
12270: IFFALSE 12354
// begin PrepareHarrisonSupport ( 4 ) ;
12272: LD_INT 4
12274: PPUSH
12275: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12279: LD_INT 2100
12281: PPUSH
12282: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12286: LD_EXP 14
12290: PPUSH
12291: LD_STRING D7-Har-1
12293: PPUSH
12294: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12298: LD_STRING M2
12300: PPUSH
12301: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12305: LD_ADDR_EXP 27
12309: PUSH
12310: LD_INT 33600
12312: PUSH
12313: LD_INT 10500
12315: PUSH
12316: LD_INT 8400
12318: PUSH
12319: LD_INT 6300
12321: PUSH
12322: LD_INT 5250
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PLUS
12337: ST_TO_ADDR
// startTimer = 1 ;
12338: LD_ADDR_EXP 30
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
// timerStatus = 3 ;
12346: LD_ADDR_EXP 29
12350: PUSH
12351: LD_INT 3
12353: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12354: LD_EXP 26
12358: PUSH
12359: LD_INT 3
12361: EQUAL
12362: IFFALSE 12446
// begin PrepareHarrisonSupport ( 5 ) ;
12364: LD_INT 5
12366: PPUSH
12367: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12371: LD_INT 2100
12373: PPUSH
12374: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12378: LD_EXP 14
12382: PPUSH
12383: LD_STRING D7-Har-1
12385: PPUSH
12386: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12390: LD_STRING M2
12392: PPUSH
12393: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12397: LD_ADDR_EXP 27
12401: PUSH
12402: LD_INT 35700
12404: PUSH
12405: LD_INT 10500
12407: PUSH
12408: LD_INT 6300
12410: PUSH
12411: LD_INT 4200
12413: PUSH
12414: LD_INT 3150
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: LD_OWVAR 67
12427: ARRAY
12428: PLUS
12429: ST_TO_ADDR
// startTimer = 1 ;
12430: LD_ADDR_EXP 30
12434: PUSH
12435: LD_INT 1
12437: ST_TO_ADDR
// timerStatus = 3 ;
12438: LD_ADDR_EXP 29
12442: PUSH
12443: LD_INT 3
12445: ST_TO_ADDR
// end ; end ;
12446: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12447: LD_EXP 27
12451: PUSH
12452: LD_INT 8400
12454: LESSEQUAL
12455: PUSH
12456: LD_EXP 29
12460: PUSH
12461: LD_INT 3
12463: EQUAL
12464: AND
12465: IFFALSE 12497
12467: GO 12469
12469: DISABLE
// begin DialogueOn ;
12470: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12474: LD_EXP 14
12478: PPUSH
12479: LD_STRING D7a-Har-1
12481: PPUSH
12482: CALL_OW 94
// DialogueOff ;
12486: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12490: LD_STRING M2a
12492: PPUSH
12493: CALL_OW 337
// end ;
12497: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12498: LD_EXP 27
12502: PUSH
12503: LD_INT 0
12505: LESSEQUAL
12506: PUSH
12507: LD_EXP 29
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: AND
12516: PUSH
12517: LD_EXP 40
12521: NOT
12522: AND
12523: IFFALSE 12662
12525: GO 12527
12527: DISABLE
12528: LD_INT 0
12530: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_INT 22
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: PUSH
12551: LD_EXP 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: DIFF
12559: ST_TO_ADDR
// saveDonaldson = 2 ;
12560: LD_ADDR_EXP 24
12564: PUSH
12565: LD_INT 2
12567: ST_TO_ADDR
// DialogueOn ;
12568: CALL_OW 6
// if IsOk ( Donaldson ) then
12572: LD_EXP 13
12576: PPUSH
12577: CALL_OW 302
12581: IFFALSE 12597
// SayRadio ( Harisson , D8-Har-1 ) else
12583: LD_EXP 14
12587: PPUSH
12588: LD_STRING D8-Har-1
12590: PPUSH
12591: CALL_OW 94
12595: GO 12609
// SayRadio ( Harisson , D8-Har-1a ) ;
12597: LD_EXP 14
12601: PPUSH
12602: LD_STRING D8-Har-1a
12604: PPUSH
12605: CALL_OW 94
// DialogueOff ;
12609: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 4
12620: PPUSH
12621: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_INT 88
12632: PPUSH
12633: LD_INT 89
12635: PPUSH
12636: CALL_OW 114
// honor = 0 ;
12640: LD_ADDR_EXP 39
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12648: LD_INT 350
12650: PPUSH
12651: CALL_OW 67
// YouLost ( LostCommand ) ;
12655: LD_STRING LostCommand
12657: PPUSH
12658: CALL_OW 104
// end ;
12662: PPOPN 1
12664: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12665: LD_INT 22
12667: PUSH
12668: LD_INT 6
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: PUSH
12694: LD_INT 0
12696: EQUAL
12697: PUSH
12698: LD_EXP 20
12702: PUSH
12703: LD_INT 0
12705: EQUAL
12706: AND
12707: PUSH
12708: LD_EXP 44
12712: PUSH
12713: LD_INT 1
12715: EQUAL
12716: AND
12717: IFFALSE 12811
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
12725: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 22
12733: PUSH
12734: LD_INT 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 23
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// for i in tmp do
12771: LD_ADDR_VAR 0 1
12775: PUSH
12776: LD_VAR 0 2
12780: PUSH
12781: FOR_IN
12782: IFFALSE 12809
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12784: LD_VAR 0 1
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 4
12794: PPUSH
12795: CALL_OW 12
12799: PPUSH
12800: LD_INT 500
12802: PPUSH
12803: CALL_OW 492
12807: GO 12781
12809: POP
12810: POP
// end ; end_of_file
12811: PPOPN 2
12813: END
// every 0 0$1 trigger AIEnable do
12814: LD_EXP 37
12818: IFFALSE 12912
12820: GO 12822
12822: DISABLE
// begin enable ;
12823: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 21
12829: PPUSH
12830: LD_INT 7
12832: PPUSH
12833: CALL 6038 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12837: LD_INT 3
12839: PPUSH
12840: LD_INT 8
12842: PPUSH
12843: LD_INT 7
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL 6342 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12853: LD_EXP 20
12857: PUSH
12858: LD_INT 2
12860: EQUAL
12861: PUSH
12862: LD_INT 22
12864: PUSH
12865: LD_INT 6
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 69
12876: AND
12877: IFFALSE 12912
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12879: LD_INT 6
12881: PPUSH
12882: LD_EXP 21
12886: PPUSH
12887: LD_INT 6
12889: PPUSH
12890: CALL 6038 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12894: LD_INT 6
12896: PPUSH
12897: LD_INT 9
12899: PPUSH
12900: LD_INT 6
12902: PPUSH
12903: LD_EXP 22
12907: PPUSH
12908: CALL 6342 0 4
// end ; end ;
12912: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12913: LD_EXP 15
12917: PPUSH
12918: CALL_OW 310
12922: NOT
12923: PUSH
12924: LD_INT 21
12926: PPUSH
12927: CALL_OW 302
12931: AND
12932: PUSH
12933: LD_INT 21
12935: PPUSH
12936: CALL_OW 255
12940: PUSH
12941: LD_INT 3
12943: EQUAL
12944: AND
12945: IFFALSE 12962
12947: GO 12949
12949: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12950: LD_EXP 15
12954: PPUSH
12955: LD_INT 21
12957: PPUSH
12958: CALL_OW 120
12962: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12963: LD_INT 22
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 21
12975: PUSH
12976: LD_INT 2
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 55
12985: PUSH
12986: EMPTY
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: PUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 255
13010: PUSH
13011: LD_INT 3
13013: EQUAL
13014: AND
13015: PUSH
13016: LD_INT 21
13018: PPUSH
13019: CALL_OW 302
13023: AND
13024: PUSH
13025: LD_INT 21
13027: PPUSH
13028: CALL_OW 255
13032: PUSH
13033: LD_INT 3
13035: EQUAL
13036: AND
13037: PUSH
13038: LD_INT 21
13040: PPUSH
13041: CALL_OW 302
13045: AND
13046: IFFALSE 13258
13048: GO 13050
13050: DISABLE
// begin enable ;
13051: ENABLE
// if Difficulty = 1 then
13052: LD_OWVAR 67
13056: PUSH
13057: LD_INT 1
13059: EQUAL
13060: IFFALSE 13104
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13062: LD_INT 3
13064: PPUSH
13065: LD_INT 24
13067: PPUSH
13068: LD_OWVAR 67
13072: PUSH
13073: LD_INT 2
13075: PLUS
13076: PPUSH
13077: LD_INT 42
13079: PUSH
13080: LD_INT 44
13082: PUSH
13083: LD_INT 43
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: LD_INT 21
13099: PPUSH
13100: CALL 6856 0 7
// if Difficulty = 2 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 2
13111: EQUAL
13112: IFFALSE 13179
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13114: LD_INT 3
13116: PPUSH
13117: LD_INT 24
13119: PPUSH
13120: LD_OWVAR 67
13124: PUSH
13125: LD_INT 2
13127: PLUS
13128: PPUSH
13129: LD_INT 44
13131: PUSH
13132: LD_INT 44
13134: PUSH
13135: LD_INT 43
13137: PUSH
13138: LD_INT 43
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: LD_INT 21
13155: PUSH
13156: LD_INT 22
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 2
13168: PPUSH
13169: CALL_OW 12
13173: ARRAY
13174: PPUSH
13175: CALL 6856 0 7
// if Difficulty >= 3 then
13179: LD_OWVAR 67
13183: PUSH
13184: LD_INT 3
13186: GREATEREQUAL
13187: IFFALSE 13258
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13189: LD_INT 3
13191: PPUSH
13192: LD_INT 24
13194: PPUSH
13195: LD_OWVAR 67
13199: PUSH
13200: LD_INT 2
13202: PPUSH
13203: LD_INT 3
13205: PPUSH
13206: CALL_OW 12
13210: PLUS
13211: PPUSH
13212: LD_INT 44
13214: PUSH
13215: LD_INT 44
13217: PUSH
13218: LD_INT 43
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 23
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 1
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: CALL_OW 12
13252: ARRAY
13253: PPUSH
13254: CALL 6856 0 7
// end ;
13258: END
// every 0 0$1 do
13259: GO 13261
13261: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13262: LD_INT 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: CALL 5959 0 3
13275: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13276: LD_EXP 20
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13431
13286: GO 13288
13288: DISABLE
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_INT 6
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 34
13320: PUSH
13321: LD_INT 51
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 69
13337: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13338: LD_VAR 0 2
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: LD_EXP 21
13351: PPUSH
13352: CALL_OW 250
13356: PUSH
13357: LD_INT 5
13359: MINUS
13360: PPUSH
13361: LD_EXP 21
13365: PPUSH
13366: CALL_OW 251
13370: PUSH
13371: LD_INT 5
13373: MINUS
13374: PPUSH
13375: CALL_OW 111
// wait ( 0 0$5 ) ;
13379: LD_INT 175
13381: PPUSH
13382: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13386: LD_VAR 0 2
13390: PUSH
13391: LD_INT 1
13393: ARRAY
13394: PPUSH
13395: LD_INT 41
13397: PPUSH
13398: LD_INT 52
13400: PPUSH
13401: CALL_OW 177
// wait ( 0 0$40 ) ;
13405: LD_INT 1400
13407: PPUSH
13408: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13412: LD_VAR 0 2
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: PPUSH
13421: LD_INT 41
13423: PPUSH
13424: LD_INT 44
13426: PPUSH
13427: CALL_OW 111
// end ;
13431: PPOPN 2
13433: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13434: LD_EXP 21
13438: PPUSH
13439: CALL_OW 274
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 275
13451: PUSH
13452: LD_INT 100
13454: GREATEREQUAL
13455: IFFALSE 13683
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 6
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13508: LD_VAR 0 1
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: LD_INT 4
13519: PPUSH
13520: LD_INT 39
13522: PPUSH
13523: LD_INT 37
13525: PPUSH
13526: LD_INT 3
13528: PPUSH
13529: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13533: LD_VAR 0 1
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_INT 29
13544: PPUSH
13545: LD_INT 42
13547: PPUSH
13548: LD_INT 54
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13558: LD_VAR 0 1
13562: PUSH
13563: LD_INT 1
13565: ARRAY
13566: PPUSH
13567: LD_INT 6
13569: PPUSH
13570: LD_INT 38
13572: PPUSH
13573: LD_INT 48
13575: PPUSH
13576: LD_INT 0
13578: PPUSH
13579: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: LD_INT 2
13594: PPUSH
13595: LD_INT 32
13597: PPUSH
13598: LD_INT 38
13600: PPUSH
13601: LD_INT 2
13603: PPUSH
13604: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: LD_INT 26
13619: PPUSH
13620: LD_INT 39
13622: PPUSH
13623: LD_INT 55
13625: PPUSH
13626: LD_INT 3
13628: PPUSH
13629: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: PPUSH
13642: LD_INT 32
13644: PPUSH
13645: LD_INT 31
13647: PPUSH
13648: LD_INT 31
13650: PPUSH
13651: LD_INT 3
13653: PPUSH
13654: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13658: LD_VAR 0 1
13662: PUSH
13663: LD_INT 1
13665: ARRAY
13666: PPUSH
13667: LD_INT 31
13669: PPUSH
13670: LD_INT 50
13672: PPUSH
13673: LD_INT 51
13675: PPUSH
13676: LD_INT 4
13678: PPUSH
13679: CALL_OW 205
// end ;
13683: PPOPN 1
13685: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13686: LD_EXP 46
13690: IFFALSE 14247
13692: GO 13694
13694: DISABLE
13695: LD_INT 0
13697: PPUSH
13698: PPUSH
13699: PPUSH
// begin enable ;
13700: ENABLE
// if not ruMobile then
13701: LD_EXP 46
13705: NOT
13706: IFFALSE 13710
// exit ;
13708: GO 14247
// for i in ruMobile do
13710: LD_ADDR_VAR 0 1
13714: PUSH
13715: LD_EXP 46
13719: PUSH
13720: FOR_IN
13721: IFFALSE 14245
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13723: LD_VAR 0 1
13727: PPUSH
13728: CALL_OW 302
13732: NOT
13733: PUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 255
13743: PUSH
13744: LD_INT 3
13746: NONEQUAL
13747: OR
13748: IFFALSE 13768
// begin ruMobile := ruMobile diff i ;
13750: LD_ADDR_EXP 46
13754: PUSH
13755: LD_EXP 46
13759: PUSH
13760: LD_VAR 0 1
13764: DIFF
13765: ST_TO_ADDR
// continue ;
13766: GO 13720
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13768: LD_VAR 0 1
13772: PPUSH
13773: CALL_OW 110
13777: NOT
13778: PUSH
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 110
13788: PUSH
13789: LD_INT 0
13791: EQUAL
13792: OR
13793: IFFALSE 13908
// begin if GetFuel ( i ) < 50 then
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 261
13804: PUSH
13805: LD_INT 50
13807: LESS
13808: IFFALSE 13867
// begin ComMoveXY ( i , 106 , 88 ) ;
13810: LD_VAR 0 1
13814: PPUSH
13815: LD_INT 106
13817: PPUSH
13818: LD_INT 88
13820: PPUSH
13821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13825: LD_INT 35
13827: PPUSH
13828: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13832: LD_VAR 0 1
13836: PPUSH
13837: LD_INT 106
13839: PPUSH
13840: LD_INT 88
13842: PPUSH
13843: CALL_OW 297
13847: PUSH
13848: LD_INT 4
13850: LESS
13851: IFFALSE 13825
// SetFuel ( i , 100 ) ;
13853: LD_VAR 0 1
13857: PPUSH
13858: LD_INT 100
13860: PPUSH
13861: CALL_OW 240
// end else
13865: GO 13908
// if not IsInArea ( i , ruParking ) then
13867: LD_VAR 0 1
13871: PPUSH
13872: LD_INT 25
13874: PPUSH
13875: CALL_OW 308
13879: NOT
13880: IFFALSE 13896
// ComMoveToArea ( i , ruParking ) else
13882: LD_VAR 0 1
13886: PPUSH
13887: LD_INT 25
13889: PPUSH
13890: CALL_OW 113
13894: GO 13908
// SetTag ( i , 1 ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 110
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: IFFALSE 14051
// begin if GetLives ( i ) < 1000 then
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 256
13932: PUSH
13933: LD_INT 1000
13935: LESS
13936: IFFALSE 14028
// begin if not IsDrivenBy ( i ) then
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 311
13947: NOT
13948: IFFALSE 13952
// continue ;
13950: GO 13720
// mech := IsDrivenBy ( i ) ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 311
13966: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13967: LD_VAR 0 2
13971: PPUSH
13972: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 256
14006: PUSH
14007: LD_INT 1000
14009: EQUAL
14010: IFFALSE 13990
// ComEnterUnit ( mech , i ) ;
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 120
// end else
14026: GO 14051
// if IsDrivenBy ( i ) then
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 311
14037: IFFALSE 14051
// SetTag ( i , 2 ) ;
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_INT 2
14046: PPUSH
14047: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 110
14060: PUSH
14061: LD_INT 2
14063: EQUAL
14064: IFFALSE 14243
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14066: LD_ADDR_VAR 0 3
14070: PUSH
14071: LD_INT 24
14073: PPUSH
14074: LD_INT 81
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PPUSH
14084: CALL_OW 70
14088: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 256
14098: PUSH
14099: LD_INT 650
14101: LESS
14102: IFFALSE 14127
// begin ComStop ( i ) ;
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 141
// SetTag ( i , 0 ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 0
14120: PPUSH
14121: CALL_OW 109
// continue ;
14125: GO 13720
// end ; if enemy then
14127: LD_VAR 0 3
14131: IFFALSE 14171
// begin if not HasTask ( i ) then
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 314
14142: NOT
14143: IFFALSE 14169
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14145: LD_VAR 0 1
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 74
14164: PPUSH
14165: CALL_OW 115
// end else
14169: GO 14243
// if ruMobile > 2 then
14171: LD_EXP 46
14175: PUSH
14176: LD_INT 2
14178: GREATER
14179: IFFALSE 14243
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 81
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: ST_TO_ADDR
// if enemy then
14201: LD_VAR 0 3
14205: IFFALSE 14243
// if not HasTask ( i ) then
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 314
14216: NOT
14217: IFFALSE 14243
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_VAR 0 3
14228: PPUSH
14229: LD_VAR 0 1
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: CALL_OW 115
// end ; end ; end ;
14243: GO 13720
14245: POP
14246: POP
// end ; end_of_file
14247: PPOPN 3
14249: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14250: LD_INT 0
14252: PPUSH
14253: PPUSH
14254: PPUSH
14255: PPUSH
14256: PPUSH
14257: PPUSH
14258: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14259: LD_ADDR_VAR 0 3
14263: PUSH
14264: LD_INT 22
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 25
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 3
14296: PUSH
14297: LD_INT 54
14299: PUSH
14300: EMPTY
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 69
14317: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14318: LD_ADDR_VAR 0 7
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 6
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 54
14355: PUSH
14356: EMPTY
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14370: LD_ADDR_VAR 0 4
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_INT 6
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 21
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 25
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14415: LD_ADDR_VAR 0 6
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 6
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 21
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 25
14442: PUSH
14443: LD_INT 4
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14460: LD_ADDR_VAR 0 8
14464: PUSH
14465: LD_INT 22
14467: PUSH
14468: LD_INT 6
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 34
14487: PUSH
14488: LD_INT 51
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 255
14514: PUSH
14515: LD_INT 6
14517: EQUAL
14518: PUSH
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 266
14528: PUSH
14529: LD_INT 0
14531: EQUAL
14532: AND
14533: IFFALSE 14553
// begin ruPDepot = building ;
14535: LD_ADDR_EXP 21
14539: PUSH
14540: LD_VAR 0 1
14544: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14545: LD_ADDR_EXP 20
14549: PUSH
14550: LD_INT 1
14552: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 266
14562: PUSH
14563: LD_INT 4
14565: EQUAL
14566: PUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 255
14576: PUSH
14577: LD_INT 6
14579: EQUAL
14580: AND
14581: IFFALSE 14614
// for i in tmpSold do
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_VAR 0 3
14592: PUSH
14593: FOR_IN
14594: IFFALSE 14612
// ComEnterUnit ( i , building ) ;
14596: LD_VAR 0 2
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 120
14610: GO 14593
14612: POP
14613: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 266
14623: PUSH
14624: LD_INT 6
14626: EQUAL
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: PUSH
14638: LD_INT 6
14640: EQUAL
14641: AND
14642: IFFALSE 14700
// begin for i in tmpSci do
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_VAR 0 6
14653: PUSH
14654: FOR_IN
14655: IFFALSE 14673
// ComEnterUnit ( i , building ) ;
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 120
14671: GO 14654
14673: POP
14674: POP
// ResAllTechs ( 6 , building , 3 ) ;
14675: LD_INT 6
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 3
14685: PPUSH
14686: CALL 5959 0 3
// ruPLab = building ;
14690: LD_ADDR_EXP 22
14694: PUSH
14695: LD_VAR 0 1
14699: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 266
14709: PUSH
14710: LD_INT 2
14712: EQUAL
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 255
14723: PUSH
14724: LD_INT 6
14726: EQUAL
14727: AND
14728: IFFALSE 14779
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14730: LD_ADDR_VAR 0 5
14734: PUSH
14735: LD_VAR 0 8
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PPUSH
14744: CALL_OW 313
14748: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14749: LD_VAR 0 5
14753: PPUSH
14754: CALL_OW 121
// wait ( 0 0$1 ) ;
14758: LD_INT 35
14760: PPUSH
14761: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14765: LD_VAR 0 5
14769: PPUSH
14770: LD_VAR 0 1
14774: PPUSH
14775: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14779: LD_VAR 0 1
14783: PPUSH
14784: CALL_OW 266
14788: PUSH
14789: LD_INT 32
14791: EQUAL
14792: PUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 6
14805: EQUAL
14806: AND
14807: IFFALSE 14859
// begin ComPlaceWeapon ( building , 42 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 42
14816: PPUSH
14817: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14821: LD_VAR 0 7
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: CALL_OW 122
// wait ( 0 0$1 ) ;
14834: LD_INT 35
14836: PPUSH
14837: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14841: LD_VAR 0 7
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 266
14868: PUSH
14869: LD_INT 31
14871: EQUAL
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 255
14882: PUSH
14883: LD_INT 6
14885: EQUAL
14886: AND
14887: IFFALSE 14953
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14889: LD_VAR 0 7
14893: PUSH
14894: LD_INT 2
14896: ARRAY
14897: PPUSH
14898: CALL_OW 122
// wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14909: LD_VAR 0 7
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: PPUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14927: LD_VAR 0 4
14931: PUSH
14932: LD_INT 1
14934: ARRAY
14935: PPUSH
14936: LD_EXP 21
14940: PPUSH
14941: CALL_OW 120
// baseReadyToBuild = 2 ;
14945: LD_ADDR_EXP 20
14949: PUSH
14950: LD_INT 2
14952: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 266
14962: PUSH
14963: LD_INT 32
14965: EQUAL
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 1
14979: EQUAL
14980: AND
14981: PUSH
14982: LD_EXP 32
14986: PUSH
14987: LD_INT 0
14989: EQUAL
14990: AND
14991: IFFALSE 15236
// begin bunkerDialog = 1 ;
14993: LD_ADDR_EXP 32
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15001: LD_EXP 11
15005: PPUSH
15006: CALL_OW 302
15010: IFFALSE 15026
// Say ( Claptopn , D11-Eng1-1 ) else
15012: LD_EXP 11
15016: PPUSH
15017: LD_STRING D11-Eng1-1
15019: PPUSH
15020: CALL_OW 88
15024: GO 15222
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15026: LD_INT 22
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 21
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 26
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: PUSH
15077: LD_EXP 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: PUSH
15085: LD_INT 0
15087: GREATER
15088: DIFF
15089: IFFALSE 15163
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15091: LD_INT 22
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 25
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 26
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PPUSH
15137: CALL_OW 69
15141: PUSH
15142: LD_EXP 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: DIFF
15150: PPUSH
15151: LD_STRING D11-Eng1-1
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: CALL 4606 0 3
15161: GO 15222
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15163: LD_INT 22
15165: PUSH
15166: LD_INT 1
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 26
15185: PUSH
15186: LD_INT 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 69
15202: PUSH
15203: LD_EXP 1
15207: PUSH
15208: EMPTY
15209: LIST
15210: DIFF
15211: PPUSH
15212: LD_STRING D11-Eng1-1
15214: PPUSH
15215: LD_STRING D11-Eng1-1
15217: PPUSH
15218: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15222: LD_EXP 33
15226: PUSH
15227: LD_INT 0
15229: EQUAL
15230: IFFALSE 15236
// EnergyDialog ;
15232: CALL 5011 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 266
15245: PUSH
15246: LD_INT 29
15248: EQUAL
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 255
15259: PUSH
15260: LD_INT 1
15262: EQUAL
15263: AND
15264: IFFALSE 15274
// buildOil = 1 ;
15266: LD_ADDR_EXP 34
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 266
15283: PUSH
15284: LD_INT 26
15286: EQUAL
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 255
15297: PUSH
15298: LD_INT 1
15300: EQUAL
15301: AND
15302: IFFALSE 15312
// buildPower = 1 ;
15304: LD_ADDR_EXP 35
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// end ;
15312: PPOPN 8
15314: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 266
15324: PUSH
15325: LD_INT 3
15327: EQUAL
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 255
15338: PUSH
15339: LD_INT 1
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_EXP 31
15348: PUSH
15349: LD_INT 0
15351: EQUAL
15352: AND
15353: IFFALSE 15701
// begin factoryDialog = 1 ;
15355: LD_ADDR_EXP 31
15359: PUSH
15360: LD_INT 1
15362: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15363: LD_INT 47
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 321
15373: PUSH
15374: LD_INT 1
15376: EQUAL
15377: PUSH
15378: LD_INT 45
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 321
15388: PUSH
15389: LD_INT 1
15391: EQUAL
15392: AND
15393: IFFALSE 15701
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15395: LD_INT 22
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 24
15427: PUSH
15428: LD_INT 1000
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: PUSH
15446: LD_INT 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15454: LD_EXP 1
15458: PPUSH
15459: LD_STRING D9a-JMM-1
15461: PPUSH
15462: CALL_OW 88
// if IsOK ( Campell ) then
15466: LD_EXP 12
15470: PPUSH
15471: CALL_OW 302
15475: IFFALSE 15491
// Say ( Campell , D9a-Mech1-1 ) else
15477: LD_EXP 12
15481: PPUSH
15482: LD_STRING D9a-Mech1-1
15484: PPUSH
15485: CALL_OW 88
15489: GO 15687
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15491: LD_INT 22
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 21
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 26
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PUSH
15542: LD_EXP 1
15546: PUSH
15547: EMPTY
15548: LIST
15549: PUSH
15550: LD_INT 0
15552: GREATER
15553: DIFF
15554: IFFALSE 15628
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15556: LD_INT 22
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 25
15578: PUSH
15579: LD_INT 3
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 26
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 69
15606: PUSH
15607: LD_EXP 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: DIFF
15615: PPUSH
15616: LD_STRING D9a-Mech1-1
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: CALL 4606 0 3
15626: GO 15687
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15628: LD_INT 22
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 26
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 69
15667: PUSH
15668: LD_EXP 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: DIFF
15676: PPUSH
15677: LD_STRING D9a-Mech1-1
15679: PPUSH
15680: LD_STRING D9a-Mech1-1
15682: PPUSH
15683: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15687: LD_EXP 33
15691: PUSH
15692: LD_INT 0
15694: EQUAL
15695: IFFALSE 15701
// EnergyDialog ;
15697: CALL 5011 0 0
// end ; end ; end ;
15701: PPOPN 1
15703: END
// on UnitDestroyed ( unit ) do var mech ;
15704: LD_INT 0
15706: PPUSH
// begin if unit = JMM then
15707: LD_VAR 0 1
15711: PUSH
15712: LD_EXP 1
15716: EQUAL
15717: IFFALSE 15726
// YouLost ( JMM ) ;
15719: LD_STRING JMM
15721: PPUSH
15722: CALL_OW 104
// if unit = ambdept0 then
15726: LD_VAR 0 1
15730: PUSH
15731: LD_INT 4
15733: EQUAL
15734: IFFALSE 15743
// YouLost ( Base ) ;
15736: LD_STRING Base
15738: PPUSH
15739: CALL_OW 104
// if unit in ruMobile then
15743: LD_VAR 0 1
15747: PUSH
15748: LD_EXP 46
15752: IN
15753: IFFALSE 15771
// ruMobile = ruMobile diff ruMobile ;
15755: LD_ADDR_EXP 46
15759: PUSH
15760: LD_EXP 46
15764: PUSH
15765: LD_EXP 46
15769: DIFF
15770: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 247
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: PUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 255
15794: PUSH
15795: LD_INT 1
15797: EQUAL
15798: AND
15799: IFFALSE 15815
// lostCounter = lostCounter + 1 ;
15801: LD_ADDR_EXP 38
15805: PUSH
15806: LD_EXP 38
15810: PUSH
15811: LD_INT 1
15813: PLUS
15814: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15815: LD_EXP 43
15819: PUSH
15820: LD_INT 24
15822: PPUSH
15823: CALL_OW 313
15827: PUSH
15828: LD_INT 6
15830: LESS
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 255
15857: PUSH
15858: LD_INT 3
15860: EQUAL
15861: AND
15862: PUSH
15863: LD_INT 24
15865: PPUSH
15866: CALL_OW 302
15870: AND
15871: PUSH
15872: LD_INT 24
15874: PPUSH
15875: CALL_OW 255
15879: PUSH
15880: LD_INT 3
15882: EQUAL
15883: AND
15884: IFFALSE 16013
// begin ruMech := ruMech - 1 ;
15886: LD_ADDR_EXP 43
15890: PUSH
15891: LD_EXP 43
15895: PUSH
15896: LD_INT 1
15898: MINUS
15899: ST_TO_ADDR
// if ruMech = 0 then
15900: LD_EXP 43
15904: PUSH
15905: LD_INT 0
15907: EQUAL
15908: IFFALSE 15912
// exit ;
15910: GO 16013
// wait ( 0 0$40 ) ;
15912: LD_INT 1400
15914: PPUSH
15915: CALL_OW 67
// uc_side = 3 ;
15919: LD_ADDR_OWVAR 20
15923: PUSH
15924: LD_INT 3
15926: ST_TO_ADDR
// uc_nation = 3 ;
15927: LD_ADDR_OWVAR 21
15931: PUSH
15932: LD_INT 3
15934: ST_TO_ADDR
// hc_gallery :=  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_name :=  ;
15943: LD_ADDR_OWVAR 26
15947: PUSH
15948: LD_STRING 
15950: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15951: LD_INT 0
15953: PPUSH
15954: LD_EXP 16
15958: PPUSH
15959: LD_EXP 17
15963: PPUSH
15964: CALL_OW 12
15968: PPUSH
15969: CALL_OW 383
// mech := CreateHuman ;
15973: LD_ADDR_VAR 0 2
15977: PUSH
15978: CALL_OW 44
15982: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15983: LD_VAR 0 2
15987: PPUSH
15988: LD_INT 124
15990: PPUSH
15991: LD_INT 97
15993: PPUSH
15994: LD_INT 0
15996: PPUSH
15997: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16001: LD_VAR 0 2
16005: PPUSH
16006: LD_INT 24
16008: PPUSH
16009: CALL_OW 120
// end ; end ;
16013: PPOPN 2
16015: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16016: LD_INT 0
16018: PPUSH
// begin if GetSide ( vehicle ) = 1 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PUSH
16029: LD_INT 1
16031: EQUAL
16032: IFFALSE 16048
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16034: LD_ADDR_EXP 42
16038: PUSH
16039: LD_EXP 42
16043: PUSH
16044: LD_INT 1
16046: PLUS
16047: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 3
16060: EQUAL
16061: PUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 264
16071: PUSH
16072: LD_INT 42
16074: PUSH
16075: LD_INT 43
16077: PUSH
16078: LD_INT 44
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: IN
16086: AND
16087: IFFALSE 16105
// ruMobile := ruMobile union vehicle ;
16089: LD_ADDR_EXP 46
16093: PUSH
16094: LD_EXP 46
16098: PUSH
16099: LD_VAR 0 1
16103: UNION
16104: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 264
16114: PUSH
16115: LD_INT 53
16117: EQUAL
16118: IFFALSE 16254
// begin uc_side = 3 ;
16120: LD_ADDR_OWVAR 20
16124: PUSH
16125: LD_INT 3
16127: ST_TO_ADDR
// uc_nation = 3 ;
16128: LD_ADDR_OWVAR 21
16132: PUSH
16133: LD_INT 3
16135: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16136: LD_INT 0
16138: PPUSH
16139: LD_EXP 17
16143: PPUSH
16144: CALL_OW 383
// driver := CreateHuman ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: CALL_OW 44
16157: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16172: LD_VAR 0 1
16176: PPUSH
16177: LD_INT 21
16179: PPUSH
16180: CALL 5227 0 2
// repeat wait ( 0 0$1 ) ;
16184: LD_INT 35
16186: PPUSH
16187: CALL_OW 67
// until not HasTask ( vehicle ) ;
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 314
16200: NOT
16201: IFFALSE 16184
// driver := IsDrivenBy ( vehicle ) ;
16203: LD_ADDR_VAR 0 3
16207: PUSH
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 311
16217: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16218: LD_VAR 0 3
16222: PPUSH
16223: LD_INT 104
16225: PPUSH
16226: LD_INT 73
16228: PPUSH
16229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16233: LD_VAR 0 3
16237: PPUSH
16238: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16242: LD_VAR 0 3
16246: PPUSH
16247: LD_INT 24
16249: PPUSH
16250: CALL_OW 180
// end ; end ;
16254: PPOPN 3
16256: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 255
16266: PUSH
16267: LD_INT 3
16269: EQUAL
16270: PUSH
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 247
16280: PUSH
16281: LD_INT 2
16283: EQUAL
16284: AND
16285: PUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 264
16295: PUSH
16296: LD_INT 42
16298: PUSH
16299: LD_INT 43
16301: PUSH
16302: LD_INT 44
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: IN
16310: AND
16311: IFFALSE 16360
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16313: LD_INT 24
16315: PPUSH
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 265
16325: PPUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 262
16335: PPUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 263
16345: PPUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 264
16355: PPUSH
16356: CALL_OW 185
// end ;
16360: PPOPN 1
16362: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 255
16372: PUSH
16373: LD_INT 3
16375: EQUAL
16376: PUSH
16377: LD_VAR 0 2
16381: PPUSH
16382: CALL_OW 255
16386: PUSH
16387: LD_INT 3
16389: EQUAL
16390: AND
16391: PUSH
16392: LD_INT 24
16394: PPUSH
16395: CALL_OW 302
16399: AND
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 302
16410: NOT
16411: AND
16412: IFFALSE 16426
// ComEnterUnit ( human , rubfact0 ) ;
16414: LD_VAR 0 2
16418: PPUSH
16419: LD_INT 24
16421: PPUSH
16422: CALL_OW 120
// end ;
16426: PPOPN 2
16428: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 24
16436: EQUAL
16437: PUSH
16438: LD_VAR 0 2
16442: PPUSH
16443: CALL_OW 256
16447: PUSH
16448: LD_INT 1000
16450: LESS
16451: AND
16452: IFFALSE 16466
// SetLives ( un , 1000 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 1000
16461: PPUSH
16462: CALL_OW 234
// end ;
16466: PPOPN 2
16468: END
// on Command ( comandid ) do var i , j , tmp ;
16469: LD_INT 0
16471: PPUSH
16472: PPUSH
16473: PPUSH
// begin SOS_Command ( comandid ) ;
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL 33800 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16483: LD_INT 22
16485: PUSH
16486: LD_INT 4
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: NOT
16498: IFFALSE 16502
// exit ;
16500: GO 16667
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_INT 22
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 21
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: PUSH
16554: FOR_IN
16555: IFFALSE 16665
// begin if GetTaskList ( i ) > 0 then
16557: LD_VAR 0 2
16561: PPUSH
16562: CALL_OW 437
16566: PUSH
16567: LD_INT 0
16569: GREATER
16570: IFFALSE 16663
// begin for j = 1 to GetTaskList ( i ) do
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: DOUBLE
16578: LD_INT 1
16580: DEC
16581: ST_TO_ADDR
16582: LD_VAR 0 2
16586: PPUSH
16587: CALL_OW 437
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16661
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16595: LD_ADDR_VAR 0 4
16599: PUSH
16600: LD_VAR 0 2
16604: PPUSH
16605: CALL_OW 437
16609: PUSH
16610: LD_VAR 0 3
16614: ARRAY
16615: PUSH
16616: LD_INT 4
16618: ARRAY
16619: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16620: LD_VAR 0 4
16624: PPUSH
16625: CALL_OW 255
16629: PUSH
16630: LD_INT 4
16632: EQUAL
16633: PUSH
16634: LD_VAR 0 4
16638: PPUSH
16639: CALL_OW 255
16643: PUSH
16644: LD_INT 0
16646: EQUAL
16647: OR
16648: IFFALSE 16659
// ComStop ( i ) ;
16650: LD_VAR 0 2
16654: PPUSH
16655: CALL_OW 141
// end ;
16659: GO 16592
16661: POP
16662: POP
// end ; end ;
16663: GO 16554
16665: POP
16666: POP
// end ; end_of_file
16667: PPOPN 4
16669: END
// every 10 10$0 do
16670: GO 16672
16672: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16673: LD_INT 5
16675: PPUSH
16676: LD_INT 3
16678: PPUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: LD_INT 3
16687: PUSH
16688: LD_INT 4
16690: PUSH
16691: LD_INT 4
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_OWVAR 67
16704: ARRAY
16705: PLUS
16706: PPUSH
16707: LD_INT 0
16709: PPUSH
16710: LD_EXP 16
16714: PPUSH
16715: LD_EXP 17
16719: PPUSH
16720: CALL_OW 12
16724: PPUSH
16725: LD_INT 4
16727: PPUSH
16728: LD_INT 14
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: LD_INT 2
16736: PPUSH
16737: CALL 6968 0 9
16741: END
// every 20 20$0 do
16742: GO 16744
16744: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16745: LD_INT 5
16747: PPUSH
16748: LD_INT 3
16750: PPUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 3
16759: PUSH
16760: LD_INT 4
16762: PUSH
16763: LD_INT 5
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_OWVAR 67
16776: ARRAY
16777: PLUS
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: LD_EXP 16
16786: PPUSH
16787: LD_EXP 17
16791: PPUSH
16792: CALL_OW 12
16796: PPUSH
16797: LD_INT 4
16799: PPUSH
16800: LD_INT 14
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL 6968 0 9
16813: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16814: GO 16816
16816: DISABLE
16817: LD_INT 0
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin hex := [ 123 , 95 ] ;
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_INT 123
16831: PUSH
16832: LD_INT 95
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: ST_TO_ADDR
// tmp := [ ] ;
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: EMPTY
16845: ST_TO_ADDR
// if Difficulty > 1 then
16846: LD_OWVAR 67
16850: PUSH
16851: LD_INT 1
16853: GREATER
16854: IFFALSE 16864
// specAttack := true ;
16856: LD_ADDR_EXP 47
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: DOUBLE
16870: LD_INT 1
16872: DEC
16873: ST_TO_ADDR
16874: LD_INT 4
16876: PUSH
16877: LD_INT 5
16879: PUSH
16880: LD_INT 6
16882: PUSH
16883: LD_INT 7
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: LD_OWVAR 67
16896: ARRAY
16897: PUSH
16898: FOR_TO
16899: IFFALSE 17197
// begin uc_side := 5 ;
16901: LD_ADDR_OWVAR 20
16905: PUSH
16906: LD_INT 5
16908: ST_TO_ADDR
// uc_nation := 3 ;
16909: LD_ADDR_OWVAR 21
16913: PUSH
16914: LD_INT 3
16916: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16917: LD_ADDR_OWVAR 37
16921: PUSH
16922: LD_INT 21
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_INT 23
16930: PUSH
16931: LD_INT 24
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: LD_VAR 0 1
16944: PUSH
16945: LD_OWVAR 67
16949: MOD
16950: PUSH
16951: LD_INT 1
16953: PLUS
16954: ARRAY
16955: ST_TO_ADDR
// vc_engine := engine_combustion ;
16956: LD_ADDR_OWVAR 39
16960: PUSH
16961: LD_INT 1
16963: ST_TO_ADDR
// vc_control := control_manual ;
16964: LD_ADDR_OWVAR 38
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16972: LD_ADDR_OWVAR 40
16976: PUSH
16977: LD_INT 42
16979: PUSH
16980: LD_INT 43
16982: PUSH
16983: LD_INT 44
16985: PUSH
16986: LD_INT 44
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: LD_VAR 0 1
16999: PUSH
17000: LD_OWVAR 67
17004: MOD
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: ARRAY
17010: ST_TO_ADDR
// veh := CreateVehicle ;
17011: LD_ADDR_VAR 0 3
17015: PUSH
17016: CALL_OW 45
17020: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 5
17028: PPUSH
17029: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17033: LD_INT 35
17035: PPUSH
17036: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17040: LD_VAR 0 4
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 4
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 428
17062: PUSH
17063: LD_INT 0
17065: EQUAL
17066: IFFALSE 17033
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17068: LD_VAR 0 3
17072: PPUSH
17073: LD_VAR 0 4
17077: PUSH
17078: LD_INT 1
17080: ARRAY
17081: PPUSH
17082: LD_VAR 0 4
17086: PUSH
17087: LD_INT 2
17089: ARRAY
17090: PPUSH
17091: LD_INT 0
17093: PPUSH
17094: CALL_OW 48
// uc_side := 5 ;
17098: LD_ADDR_OWVAR 20
17102: PUSH
17103: LD_INT 5
17105: ST_TO_ADDR
// uc_nation := 3 ;
17106: LD_ADDR_OWVAR 21
17110: PUSH
17111: LD_INT 3
17113: ST_TO_ADDR
// PrepareMechanic ( false , 2 + Difficulty ) ;
17114: LD_INT 0
17116: PPUSH
17117: LD_INT 2
17119: PUSH
17120: LD_OWVAR 67
17124: PLUS
17125: PPUSH
17126: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17130: CALL_OW 44
17134: PPUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17144: LD_VAR 0 3
17148: PPUSH
17149: LD_INT 101
17151: PPUSH
17152: LD_INT 77
17154: PPUSH
17155: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17159: LD_ADDR_VAR 0 5
17163: PUSH
17164: LD_VAR 0 5
17168: PPUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_INT 1
17176: PLUS
17177: PPUSH
17178: LD_VAR 0 3
17182: PPUSH
17183: CALL_OW 1
17187: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17188: LD_INT 105
17190: PPUSH
17191: CALL_OW 67
// end ;
17195: GO 16898
17197: POP
17198: POP
// repeat wait ( 0 0$1 ) ;
17199: LD_INT 35
17201: PPUSH
17202: CALL_OW 67
// for i in tmp do
17206: LD_ADDR_VAR 0 1
17210: PUSH
17211: LD_VAR 0 5
17215: PUSH
17216: FOR_IN
17217: IFFALSE 17285
// if not IsOk ( i ) then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 302
17228: NOT
17229: IFFALSE 17249
// tmp := tmp diff i else
17231: LD_ADDR_VAR 0 5
17235: PUSH
17236: LD_VAR 0 5
17240: PUSH
17241: LD_VAR 0 1
17245: DIFF
17246: ST_TO_ADDR
17247: GO 17283
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 22
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: PPUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 74
17278: PPUSH
17279: CALL_OW 115
17283: GO 17216
17285: POP
17286: POP
// until not tmp ;
17287: LD_VAR 0 5
17291: NOT
17292: IFFALSE 17199
// end ;
17294: PPOPN 5
17296: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17297: LD_EXP 47
17301: IFFALSE 17668
17303: GO 17305
17305: DISABLE
17306: LD_INT 0
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
// begin wait ( 0 0$20 ) ;
17312: LD_INT 700
17314: PPUSH
17315: CALL_OW 67
// uc_side := 5 ;
17319: LD_ADDR_OWVAR 20
17323: PUSH
17324: LD_INT 5
17326: ST_TO_ADDR
// uc_nation := 3 ;
17327: LD_ADDR_OWVAR 21
17331: PUSH
17332: LD_INT 3
17334: ST_TO_ADDR
// InitHc ;
17335: CALL_OW 19
// hc_importance := 0 ;
17339: LD_ADDR_OWVAR 32
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// tmp := [ ] ;
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: EMPTY
17353: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: LD_INT 6
17362: PPUSH
17363: CALL_OW 380
// eng := CreateHuman ;
17367: LD_ADDR_VAR 0 4
17371: PUSH
17372: CALL_OW 44
17376: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17377: LD_VAR 0 4
17381: PPUSH
17382: LD_INT 78
17384: PPUSH
17385: LD_INT 2
17387: PPUSH
17388: LD_INT 4
17390: PPUSH
17391: LD_INT 0
17393: PPUSH
17394: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17398: LD_ADDR_VAR 0 3
17402: PUSH
17403: DOUBLE
17404: LD_INT 1
17406: DEC
17407: ST_TO_ADDR
17408: LD_INT 2
17410: PUSH
17411: LD_OWVAR 67
17415: PLUS
17416: PUSH
17417: FOR_TO
17418: IFFALSE 17503
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17420: LD_INT 0
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_INT 4
17428: PUSH
17429: LD_INT 5
17431: PUSH
17432: LD_INT 6
17434: PUSH
17435: LD_INT 6
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: LD_OWVAR 67
17448: ARRAY
17449: PPUSH
17450: CALL_OW 380
// un := CreateHuman ;
17454: LD_ADDR_VAR 0 1
17458: PUSH
17459: CALL_OW 44
17463: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 78
17471: PPUSH
17472: LD_INT 2
17474: PPUSH
17475: LD_INT 4
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 50
// tmp := tmp ^ un ;
17485: LD_ADDR_VAR 0 2
17489: PUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 1
17499: ADD
17500: ST_TO_ADDR
// end ;
17501: GO 17417
17503: POP
17504: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17505: LD_VAR 0 2
17509: PPUSH
17510: LD_INT 49
17512: PPUSH
17513: LD_INT 3
17515: PPUSH
17516: CALL_OW 111
// wait ( 0 0$2 ) ;
17520: LD_INT 70
17522: PPUSH
17523: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17527: LD_VAR 0 4
17531: PPUSH
17532: LD_INT 49
17534: PPUSH
17535: LD_INT 3
17537: PPUSH
17538: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17542: LD_VAR 0 4
17546: PPUSH
17547: LD_INT 4
17549: PPUSH
17550: CALL_OW 227
// wait ( 0 0$10 ) ;
17554: LD_INT 350
17556: PPUSH
17557: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17561: LD_INT 35
17563: PPUSH
17564: CALL_OW 67
// for i in tmp do
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17659
// if not IsOk ( i ) then
17581: LD_VAR 0 3
17585: PPUSH
17586: CALL_OW 302
17590: NOT
17591: IFFALSE 17611
// tmp := tmp diff i else
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_VAR 0 2
17602: PUSH
17603: LD_VAR 0 3
17607: DIFF
17608: ST_TO_ADDR
17609: GO 17657
// if not HasTask ( i ) then
17611: LD_VAR 0 3
17615: PPUSH
17616: CALL_OW 314
17620: NOT
17621: IFFALSE 17657
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: CALL_OW 74
17652: PPUSH
17653: CALL_OW 115
17657: GO 17578
17659: POP
17660: POP
// until not tmp ;
17661: LD_VAR 0 2
17665: NOT
17666: IFFALSE 17561
// end ; end_of_file
17668: PPOPN 4
17670: END
// every 0 0$1 trigger startTimer = 1 do
17671: LD_EXP 30
17675: PUSH
17676: LD_INT 1
17678: EQUAL
17679: IFFALSE 17809
17681: GO 17683
17683: DISABLE
// begin enable ;
17684: ENABLE
// if timerStatus = 1 then
17685: LD_EXP 29
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: IFFALSE 17726
// begin timeToSupport = timeToSupport - 0 0$01 ;
17695: LD_ADDR_EXP 28
17699: PUSH
17700: LD_EXP 28
17704: PUSH
17705: LD_INT 35
17707: MINUS
17708: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17709: LD_ADDR_OWVAR 47
17713: PUSH
17714: LD_STRING #Am04-1
17716: PUSH
17717: LD_EXP 28
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: ST_TO_ADDR
// end ; if timerStatus = 2 then
17726: LD_EXP 29
17730: PUSH
17731: LD_INT 2
17733: EQUAL
17734: IFFALSE 17767
// begin timeToSupport = timeToSupport - 0 0$01 ;
17736: LD_ADDR_EXP 28
17740: PUSH
17741: LD_EXP 28
17745: PUSH
17746: LD_INT 35
17748: MINUS
17749: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17750: LD_ADDR_OWVAR 47
17754: PUSH
17755: LD_STRING #Am04-2
17757: PUSH
17758: LD_EXP 28
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: ST_TO_ADDR
// end ; if timerStatus = 3 then
17767: LD_EXP 29
17771: PUSH
17772: LD_INT 3
17774: EQUAL
17775: IFFALSE 17791
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17777: LD_ADDR_EXP 27
17781: PUSH
17782: LD_EXP 27
17786: PUSH
17787: LD_INT 35
17789: MINUS
17790: ST_TO_ADDR
// if timerStatus = 4 then
17791: LD_EXP 29
17795: PUSH
17796: LD_INT 4
17798: EQUAL
17799: IFFALSE 17809
// display_strings =  ;
17801: LD_ADDR_OWVAR 47
17805: PUSH
17806: LD_STRING 
17808: ST_TO_ADDR
// end ; end_of_file
17809: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17810: LD_EXP 15
17814: PPUSH
17815: CALL_OW 301
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 21
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 69
17848: PUSH
17849: LD_INT 14
17851: PUSH
17852: LD_INT 13
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 11
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: LD_OWVAR 67
17871: ARRAY
17872: LESS
17873: AND
17874: IFFALSE 18460
17876: GO 17878
17878: DISABLE
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
// begin AIEnable = 0 ;
17884: LD_ADDR_EXP 37
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// escapeAvalaible = 1 ;
17892: LD_ADDR_EXP 40
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// Video ( true ) ;
17900: LD_INT 1
17902: PPUSH
17903: CALL 74408 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17907: LD_INT 3
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: LD_INT 0
17918: PPUSH
17919: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17923: LD_INT 6
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: LD_INT 1
17931: PPUSH
17932: LD_INT 0
17934: PPUSH
17935: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17939: LD_INT 5
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: LD_INT 0
17950: PPUSH
17951: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17955: LD_INT 3
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17965: LD_INT 97
17967: PPUSH
17968: LD_INT 91
17970: PPUSH
17971: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17975: LD_INT 22
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 21
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: PPUSH
18004: CALL_OW 121
// wait ( 0 0$01 ) ;
18008: LD_INT 35
18010: PPUSH
18011: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 21
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PPUSH
18039: CALL_OW 69
18043: PPUSH
18044: LD_INT 124
18046: PPUSH
18047: LD_INT 98
18049: PPUSH
18050: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18054: LD_INT 22
18056: PUSH
18057: LD_INT 5
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 21
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 69
18082: PPUSH
18083: CALL_OW 121
// wait ( 0 0$01 ) ;
18087: LD_INT 35
18089: PPUSH
18090: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18094: LD_INT 22
18096: PUSH
18097: LD_INT 5
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 21
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PPUSH
18123: LD_INT 124
18125: PPUSH
18126: LD_INT 98
18128: PPUSH
18129: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 6
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 21
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PPUSH
18157: CALL_OW 69
18161: PPUSH
18162: CALL_OW 121
// wait ( 0 0$01 ) ;
18166: LD_INT 35
18168: PPUSH
18169: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18173: LD_INT 22
18175: PUSH
18176: LD_INT 6
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 21
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: PPUSH
18202: LD_INT 124
18204: PPUSH
18205: LD_INT 98
18207: PPUSH
18208: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18212: LD_INT 22
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 21
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: PPUSH
18241: LD_INT 124
18243: PPUSH
18244: LD_INT 96
18246: PPUSH
18247: CALL_OW 114
// wait ( 0 0$1 ) ;
18251: LD_INT 35
18253: PPUSH
18254: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18258: LD_INT 124
18260: PPUSH
18261: LD_INT 96
18263: PPUSH
18264: CALL_OW 84
// p := 0 0$0 ;
18268: LD_ADDR_VAR 0 3
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18276: LD_ADDR_VAR 0 2
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 22
18296: PUSH
18297: LD_INT 6
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18328: LD_INT 35
18330: PPUSH
18331: CALL_OW 67
// p := p + 0 0$1 ;
18335: LD_ADDR_VAR 0 3
18339: PUSH
18340: LD_VAR 0 3
18344: PUSH
18345: LD_INT 35
18347: PLUS
18348: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_INT 5
18356: PPUSH
18357: CALL_OW 113
// for i in tmp do
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: LD_VAR 0 2
18370: PUSH
18371: FOR_IN
18372: IFFALSE 18399
// if IsInArea ( tmp , RussianEscape ) then
18374: LD_VAR 0 2
18378: PPUSH
18379: LD_INT 5
18381: PPUSH
18382: CALL_OW 308
18386: IFFALSE 18397
// RemoveUnit ( i ) ;
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 64
18397: GO 18371
18399: POP
18400: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18401: LD_INT 23
18403: PUSH
18404: LD_INT 3
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 21
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 24
18423: PUSH
18424: LD_INT 250
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: PUSH
18441: LD_INT 0
18443: EQUAL
18444: PUSH
18445: LD_VAR 0 3
18449: PUSH
18450: LD_INT 245
18452: GREATEREQUAL
18453: OR
18454: IFFALSE 18328
// FinishMission ;
18456: CALL 18463 0 0
// end ;
18460: PPOPN 3
18462: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18463: LD_INT 0
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
// if not vehicleProduceCounter then
18470: LD_EXP 42
18474: NOT
18475: IFFALSE 18484
// SetAchievement ( ACH_INFANTRY ) ;
18477: LD_STRING ACH_INFANTRY
18479: PPUSH
18480: CALL_OW 543
// if tick <= 20 20$00 then
18484: LD_OWVAR 1
18488: PUSH
18489: LD_INT 42000
18491: LESSEQUAL
18492: IFFALSE 18508
// begin wait ( 3 ) ;
18494: LD_INT 3
18496: PPUSH
18497: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18501: LD_STRING ACH_ASPEED_4
18503: PPUSH
18504: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18508: LD_INT 22
18510: PPUSH
18511: CALL 19152 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18515: LD_INT 69
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 321
18525: PPUSH
18526: LD_STRING GatlingInGamma
18528: PPUSH
18529: CALL_OW 39
// m1 := false ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
// m2 := false ;
18541: LD_ADDR_VAR 0 4
18545: PUSH
18546: LD_INT 0
18548: ST_TO_ADDR
// m3 := false ;
18549: LD_ADDR_VAR 0 5
18553: PUSH
18554: LD_INT 0
18556: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18557: LD_EXP 34
18561: PUSH
18562: LD_INT 1
18564: EQUAL
18565: PUSH
18566: LD_EXP 35
18570: PUSH
18571: LD_INT 1
18573: EQUAL
18574: AND
18575: IFFALSE 18597
// begin AddMedal ( oil , 1 ) ;
18577: LD_STRING oil
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 101
// m1 := true ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 1
18594: ST_TO_ADDR
// end else
18595: GO 18690
// begin if buildOil = 1 and buildPower = 0 then
18597: LD_EXP 34
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: PUSH
18606: LD_EXP 35
18610: PUSH
18611: LD_INT 0
18613: EQUAL
18614: AND
18615: IFFALSE 18628
// AddMedal ( oil , - 1 ) ;
18617: LD_STRING oil
18619: PPUSH
18620: LD_INT 1
18622: NEG
18623: PPUSH
18624: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18628: LD_EXP 34
18632: PUSH
18633: LD_INT 0
18635: EQUAL
18636: PUSH
18637: LD_EXP 35
18641: PUSH
18642: LD_INT 1
18644: EQUAL
18645: AND
18646: IFFALSE 18659
// AddMedal ( oil , - 2 ) ;
18648: LD_STRING oil
18650: PPUSH
18651: LD_INT 2
18653: NEG
18654: PPUSH
18655: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18659: LD_EXP 34
18663: PUSH
18664: LD_INT 0
18666: EQUAL
18667: PUSH
18668: LD_EXP 35
18672: PUSH
18673: LD_INT 0
18675: EQUAL
18676: AND
18677: IFFALSE 18690
// AddMedal ( oil , - 3 ) ;
18679: LD_STRING oil
18681: PPUSH
18682: LD_INT 3
18684: NEG
18685: PPUSH
18686: CALL_OW 101
// end ; if lostCounter > 3 then
18690: LD_EXP 38
18694: PUSH
18695: LD_INT 3
18697: GREATER
18698: IFFALSE 18713
// AddMedal ( deaths , - 1 ) else
18700: LD_STRING deaths
18702: PPUSH
18703: LD_INT 1
18705: NEG
18706: PPUSH
18707: CALL_OW 101
18711: GO 18731
// begin AddMedal ( deaths , 1 ) ;
18713: LD_STRING deaths
18715: PPUSH
18716: LD_INT 1
18718: PPUSH
18719: CALL_OW 101
// m2 := true ;
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: LD_INT 1
18730: ST_TO_ADDR
// end ; if honor = 1 then
18731: LD_EXP 39
18735: PUSH
18736: LD_INT 1
18738: EQUAL
18739: IFFALSE 18761
// begin AddMedal ( honour , 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 101
// m3 := true ;
18751: LD_ADDR_VAR 0 5
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// end else
18759: GO 18772
// AddMedal ( honour , - 1 ) ;
18761: LD_STRING honour
18763: PPUSH
18764: LD_INT 1
18766: NEG
18767: PPUSH
18768: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 4
18781: AND
18782: PUSH
18783: LD_VAR 0 5
18787: AND
18788: PUSH
18789: LD_OWVAR 67
18793: PUSH
18794: LD_INT 3
18796: GREATEREQUAL
18797: AND
18798: IFFALSE 18810
// SetAchievementEX ( ACH_AMER , 4 ) ;
18800: LD_STRING ACH_AMER
18802: PPUSH
18803: LD_INT 4
18805: PPUSH
18806: CALL_OW 564
// GiveMedals ( Main ) ;
18810: LD_STRING Main
18812: PPUSH
18813: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18817: LD_INT 22
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 23
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: PPUSH
18857: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18861: LD_EXP 1
18865: PPUSH
18866: LD_EXP 48
18870: PUSH
18871: LD_STRING JMM
18873: STR
18874: PPUSH
18875: CALL_OW 38
// if IsOK ( Bobby ) then
18879: LD_EXP 2
18883: PPUSH
18884: CALL_OW 302
18888: IFFALSE 18908
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18890: LD_EXP 2
18894: PPUSH
18895: LD_EXP 48
18899: PUSH
18900: LD_STRING Bobby
18902: STR
18903: PPUSH
18904: CALL_OW 38
// if IsOK ( Cyrus ) then
18908: LD_EXP 3
18912: PPUSH
18913: CALL_OW 302
18917: IFFALSE 18937
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18919: LD_EXP 3
18923: PPUSH
18924: LD_EXP 48
18928: PUSH
18929: LD_STRING Cyrus
18931: STR
18932: PPUSH
18933: CALL_OW 38
// if IsOK ( Lisa ) then
18937: LD_EXP 4
18941: PPUSH
18942: CALL_OW 302
18946: IFFALSE 18966
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18948: LD_EXP 4
18952: PPUSH
18953: LD_EXP 48
18957: PUSH
18958: LD_STRING Lisa
18960: STR
18961: PPUSH
18962: CALL_OW 38
// if IsOK ( Brown ) then
18966: LD_EXP 7
18970: PPUSH
18971: CALL_OW 302
18975: IFFALSE 18995
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18977: LD_EXP 7
18981: PPUSH
18982: LD_EXP 48
18986: PUSH
18987: LD_STRING Brown
18989: STR
18990: PPUSH
18991: CALL_OW 38
// if not IsDead ( Donaldson ) then
18995: LD_EXP 13
18999: PPUSH
19000: CALL_OW 301
19004: NOT
19005: IFFALSE 19025
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19007: LD_EXP 13
19011: PPUSH
19012: LD_EXP 48
19016: PUSH
19017: LD_STRING Donaldson
19019: STR
19020: PPUSH
19021: CALL_OW 38
// if not IsDead ( Frank ) then
19025: LD_EXP 5
19029: PPUSH
19030: CALL_OW 301
19034: NOT
19035: IFFALSE 19055
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19037: LD_EXP 5
19041: PPUSH
19042: LD_EXP 48
19046: PUSH
19047: LD_STRING Frank
19049: STR
19050: PPUSH
19051: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19055: LD_INT 50
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 21
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: PUSH
19091: LD_EXP 1
19095: PUSH
19096: LD_EXP 2
19100: PUSH
19101: LD_EXP 3
19105: PUSH
19106: LD_EXP 4
19110: PUSH
19111: LD_EXP 7
19115: PUSH
19116: LD_EXP 13
19120: PUSH
19121: LD_EXP 5
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: DIFF
19135: PPUSH
19136: LD_STRING 04_other_survivors
19138: PPUSH
19139: CALL_OW 38
// YouWin ;
19143: CALL_OW 103
// end ;
19147: LD_VAR 0 1
19151: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19152: LD_INT 0
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
// gammaBase = [ ] ;
19158: LD_ADDR_VAR 0 4
19162: PUSH
19163: EMPTY
19164: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19165: LD_ADDR_VAR 0 5
19169: PUSH
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_INT 22
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 21
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PPUSH
19199: CALL_OW 70
19203: ST_TO_ADDR
// for i in buildings do
19204: LD_ADDR_VAR 0 3
19208: PUSH
19209: LD_VAR 0 5
19213: PUSH
19214: FOR_IN
19215: IFFALSE 19552
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19217: LD_VAR 0 3
19221: PPUSH
19222: CALL_OW 266
19226: PUSH
19227: LD_INT 6
19229: PUSH
19230: LD_INT 7
19232: PUSH
19233: LD_INT 8
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: IN
19241: IFFALSE 19355
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19243: LD_ADDR_VAR 0 4
19247: PUSH
19248: LD_VAR 0 4
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 266
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 250
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 251
19282: PUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 254
19292: PUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: CALL_OW 267
19302: PUSH
19303: LD_VAR 0 3
19307: PPUSH
19308: CALL_OW 248
19312: PUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 268
19325: PUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: LD_INT 2
19333: PPUSH
19334: CALL_OW 268
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: ADD
19352: ST_TO_ADDR
19353: GO 19550
// if GetBType ( i ) in [ b_bunker ] then
19355: LD_VAR 0 3
19359: PPUSH
19360: CALL_OW 266
19364: PUSH
19365: LD_INT 32
19367: PUSH
19368: EMPTY
19369: LIST
19370: IN
19371: IFFALSE 19468
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19373: LD_ADDR_VAR 0 4
19377: PUSH
19378: LD_VAR 0 4
19382: PUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: CALL_OW 266
19392: PUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: CALL_OW 250
19402: PUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: CALL_OW 251
19412: PUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: CALL_OW 254
19422: PUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 267
19432: PUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: CALL_OW 248
19442: PUSH
19443: LD_VAR 0 3
19447: PPUSH
19448: CALL_OW 269
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: ADD
19465: ST_TO_ADDR
19466: GO 19550
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_VAR 0 4
19477: PUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: CALL_OW 266
19487: PUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: CALL_OW 250
19497: PUSH
19498: LD_VAR 0 3
19502: PPUSH
19503: CALL_OW 251
19507: PUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 254
19517: PUSH
19518: LD_VAR 0 3
19522: PPUSH
19523: CALL_OW 267
19527: PUSH
19528: LD_VAR 0 3
19532: PPUSH
19533: CALL_OW 248
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: ADD
19549: ST_TO_ADDR
// end ;
19550: GO 19214
19552: POP
19553: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19554: LD_VAR 0 4
19558: PPUSH
19559: LD_STRING GammaBase
19561: PPUSH
19562: CALL_OW 39
// end ; end_of_file
19566: LD_VAR 0 2
19570: RET
// every 1 1$15 do
19571: GO 19573
19573: DISABLE
// begin if supply <= 13 and supply > 7 then
19574: LD_EXP 36
19578: PUSH
19579: LD_INT 13
19581: LESSEQUAL
19582: PUSH
19583: LD_EXP 36
19587: PUSH
19588: LD_INT 7
19590: GREATER
19591: AND
19592: IFFALSE 19615
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19594: LD_INT 3
19596: PPUSH
19597: LD_INT 5
19599: PPUSH
19600: CALL_OW 12
19604: PPUSH
19605: LD_INT 18
19607: PPUSH
19608: LD_INT 1
19610: PPUSH
19611: CALL_OW 55
// if supply <= 7 and supply > 4 then
19615: LD_EXP 36
19619: PUSH
19620: LD_INT 7
19622: LESSEQUAL
19623: PUSH
19624: LD_EXP 36
19628: PUSH
19629: LD_INT 4
19631: GREATER
19632: AND
19633: IFFALSE 19656
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19635: LD_INT 3
19637: PPUSH
19638: LD_INT 5
19640: PPUSH
19641: CALL_OW 12
19645: PPUSH
19646: LD_INT 19
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 55
// if supply <= 4 and supply > 0 then
19656: LD_EXP 36
19660: PUSH
19661: LD_INT 4
19663: LESSEQUAL
19664: PUSH
19665: LD_EXP 36
19669: PUSH
19670: LD_INT 0
19672: GREATER
19673: AND
19674: IFFALSE 19697
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19676: LD_INT 3
19678: PPUSH
19679: LD_INT 5
19681: PPUSH
19682: CALL_OW 12
19686: PPUSH
19687: LD_INT 20
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 55
// if supply then
19697: LD_EXP 36
19701: IFFALSE 19718
// begin supply = supply - 1 ;
19703: LD_ADDR_EXP 36
19707: PUSH
19708: LD_EXP 36
19712: PUSH
19713: LD_INT 1
19715: MINUS
19716: ST_TO_ADDR
// enable ;
19717: ENABLE
// end ; end ; end_of_file
19718: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19719: LD_INT 0
19721: PPUSH
// ar_miner := 81 ;
19722: LD_ADDR_EXP 57
19726: PUSH
19727: LD_INT 81
19729: ST_TO_ADDR
// ar_crane := 88 ;
19730: LD_ADDR_EXP 56
19734: PUSH
19735: LD_INT 88
19737: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19738: LD_ADDR_EXP 51
19742: PUSH
19743: LD_INT 89
19745: ST_TO_ADDR
// us_hack := 99 ;
19746: LD_ADDR_EXP 52
19750: PUSH
19751: LD_INT 99
19753: ST_TO_ADDR
// us_artillery := 97 ;
19754: LD_ADDR_EXP 53
19758: PUSH
19759: LD_INT 97
19761: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19762: LD_ADDR_EXP 54
19766: PUSH
19767: LD_INT 91
19769: ST_TO_ADDR
// ar_mortar := 92 ;
19770: LD_ADDR_EXP 55
19774: PUSH
19775: LD_INT 92
19777: ST_TO_ADDR
// ru_radar := 98 ;
19778: LD_ADDR_EXP 50
19782: PUSH
19783: LD_INT 98
19785: ST_TO_ADDR
// tech_Artillery := 80 ;
19786: LD_ADDR_EXP 58
19790: PUSH
19791: LD_INT 80
19793: ST_TO_ADDR
// tech_RadMat := 81 ;
19794: LD_ADDR_EXP 59
19798: PUSH
19799: LD_INT 81
19801: ST_TO_ADDR
// tech_BasicTools := 82 ;
19802: LD_ADDR_EXP 60
19806: PUSH
19807: LD_INT 82
19809: ST_TO_ADDR
// tech_Cargo := 83 ;
19810: LD_ADDR_EXP 61
19814: PUSH
19815: LD_INT 83
19817: ST_TO_ADDR
// tech_Track := 84 ;
19818: LD_ADDR_EXP 62
19822: PUSH
19823: LD_INT 84
19825: ST_TO_ADDR
// tech_Crane := 85 ;
19826: LD_ADDR_EXP 63
19830: PUSH
19831: LD_INT 85
19833: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19834: LD_ADDR_EXP 64
19838: PUSH
19839: LD_INT 86
19841: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19842: LD_ADDR_EXP 65
19846: PUSH
19847: LD_INT 87
19849: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19850: LD_ADDR_EXP 66
19854: PUSH
19855: LD_INT 88
19857: ST_TO_ADDR
// class_mastodont := 31 ;
19858: LD_ADDR_EXP 67
19862: PUSH
19863: LD_INT 31
19865: ST_TO_ADDR
// class_horse := 21 ;
19866: LD_ADDR_EXP 68
19870: PUSH
19871: LD_INT 21
19873: ST_TO_ADDR
// end ;
19874: LD_VAR 0 1
19878: RET
// every 1 do
19879: GO 19881
19881: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19882: CALL 19719 0 0
19886: END
// every 0 0$1 do
19887: GO 19889
19889: DISABLE
// begin enable ;
19890: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19891: LD_STRING updateTimer(
19893: PUSH
19894: LD_OWVAR 1
19898: STR
19899: PUSH
19900: LD_STRING );
19902: STR
19903: PPUSH
19904: CALL_OW 559
// end ;
19908: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19909: LD_INT 0
19911: PPUSH
// if p2 = 100 then
19912: LD_VAR 0 2
19916: PUSH
19917: LD_INT 100
19919: EQUAL
19920: IFFALSE 20923
// begin if not StreamModeActive then
19922: LD_EXP 69
19926: NOT
19927: IFFALSE 19937
// StreamModeActive := true ;
19929: LD_ADDR_EXP 69
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 0 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 0
19944: EQUAL
19945: IFFALSE 19951
// InitStreamMode ;
19947: CALL 21083 0 0
// if p3 = 1 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 1
19958: EQUAL
19959: IFFALSE 19969
// sRocket := true ;
19961: LD_ADDR_EXP 74
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 2 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 2
19976: EQUAL
19977: IFFALSE 19987
// sSpeed := true ;
19979: LD_ADDR_EXP 73
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 3 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 3
19994: EQUAL
19995: IFFALSE 20005
// sEngine := true ;
19997: LD_ADDR_EXP 75
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 4 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 4
20012: EQUAL
20013: IFFALSE 20023
// sSpec := true ;
20015: LD_ADDR_EXP 72
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 5 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 5
20030: EQUAL
20031: IFFALSE 20041
// sLevel := true ;
20033: LD_ADDR_EXP 76
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 6 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 6
20048: EQUAL
20049: IFFALSE 20059
// sArmoury := true ;
20051: LD_ADDR_EXP 77
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 7 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 7
20066: EQUAL
20067: IFFALSE 20077
// sRadar := true ;
20069: LD_ADDR_EXP 78
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 8 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 8
20084: EQUAL
20085: IFFALSE 20095
// sBunker := true ;
20087: LD_ADDR_EXP 79
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 9 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 9
20102: EQUAL
20103: IFFALSE 20113
// sHack := true ;
20105: LD_ADDR_EXP 80
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// if p3 = 10 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 10
20120: EQUAL
20121: IFFALSE 20131
// sFire := true ;
20123: LD_ADDR_EXP 81
20127: PUSH
20128: LD_INT 1
20130: ST_TO_ADDR
// if p3 = 11 then
20131: LD_VAR 0 3
20135: PUSH
20136: LD_INT 11
20138: EQUAL
20139: IFFALSE 20149
// sRefresh := true ;
20141: LD_ADDR_EXP 82
20145: PUSH
20146: LD_INT 1
20148: ST_TO_ADDR
// if p3 = 12 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_INT 12
20156: EQUAL
20157: IFFALSE 20167
// sExp := true ;
20159: LD_ADDR_EXP 83
20163: PUSH
20164: LD_INT 1
20166: ST_TO_ADDR
// if p3 = 13 then
20167: LD_VAR 0 3
20171: PUSH
20172: LD_INT 13
20174: EQUAL
20175: IFFALSE 20185
// sDepot := true ;
20177: LD_ADDR_EXP 84
20181: PUSH
20182: LD_INT 1
20184: ST_TO_ADDR
// if p3 = 14 then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 14
20192: EQUAL
20193: IFFALSE 20203
// sFlag := true ;
20195: LD_ADDR_EXP 85
20199: PUSH
20200: LD_INT 1
20202: ST_TO_ADDR
// if p3 = 15 then
20203: LD_VAR 0 3
20207: PUSH
20208: LD_INT 15
20210: EQUAL
20211: IFFALSE 20221
// sKamikadze := true ;
20213: LD_ADDR_EXP 93
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 16 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 16
20228: EQUAL
20229: IFFALSE 20239
// sTroll := true ;
20231: LD_ADDR_EXP 94
20235: PUSH
20236: LD_INT 1
20238: ST_TO_ADDR
// if p3 = 17 then
20239: LD_VAR 0 3
20243: PUSH
20244: LD_INT 17
20246: EQUAL
20247: IFFALSE 20257
// sSlow := true ;
20249: LD_ADDR_EXP 95
20253: PUSH
20254: LD_INT 1
20256: ST_TO_ADDR
// if p3 = 18 then
20257: LD_VAR 0 3
20261: PUSH
20262: LD_INT 18
20264: EQUAL
20265: IFFALSE 20275
// sLack := true ;
20267: LD_ADDR_EXP 96
20271: PUSH
20272: LD_INT 1
20274: ST_TO_ADDR
// if p3 = 19 then
20275: LD_VAR 0 3
20279: PUSH
20280: LD_INT 19
20282: EQUAL
20283: IFFALSE 20293
// sTank := true ;
20285: LD_ADDR_EXP 98
20289: PUSH
20290: LD_INT 1
20292: ST_TO_ADDR
// if p3 = 20 then
20293: LD_VAR 0 3
20297: PUSH
20298: LD_INT 20
20300: EQUAL
20301: IFFALSE 20311
// sRemote := true ;
20303: LD_ADDR_EXP 99
20307: PUSH
20308: LD_INT 1
20310: ST_TO_ADDR
// if p3 = 21 then
20311: LD_VAR 0 3
20315: PUSH
20316: LD_INT 21
20318: EQUAL
20319: IFFALSE 20329
// sPowell := true ;
20321: LD_ADDR_EXP 100
20325: PUSH
20326: LD_INT 1
20328: ST_TO_ADDR
// if p3 = 22 then
20329: LD_VAR 0 3
20333: PUSH
20334: LD_INT 22
20336: EQUAL
20337: IFFALSE 20347
// sTeleport := true ;
20339: LD_ADDR_EXP 103
20343: PUSH
20344: LD_INT 1
20346: ST_TO_ADDR
// if p3 = 23 then
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 23
20354: EQUAL
20355: IFFALSE 20365
// sOilTower := true ;
20357: LD_ADDR_EXP 105
20361: PUSH
20362: LD_INT 1
20364: ST_TO_ADDR
// if p3 = 24 then
20365: LD_VAR 0 3
20369: PUSH
20370: LD_INT 24
20372: EQUAL
20373: IFFALSE 20383
// sShovel := true ;
20375: LD_ADDR_EXP 106
20379: PUSH
20380: LD_INT 1
20382: ST_TO_ADDR
// if p3 = 25 then
20383: LD_VAR 0 3
20387: PUSH
20388: LD_INT 25
20390: EQUAL
20391: IFFALSE 20401
// sSheik := true ;
20393: LD_ADDR_EXP 107
20397: PUSH
20398: LD_INT 1
20400: ST_TO_ADDR
// if p3 = 26 then
20401: LD_VAR 0 3
20405: PUSH
20406: LD_INT 26
20408: EQUAL
20409: IFFALSE 20419
// sEarthquake := true ;
20411: LD_ADDR_EXP 109
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
// if p3 = 27 then
20419: LD_VAR 0 3
20423: PUSH
20424: LD_INT 27
20426: EQUAL
20427: IFFALSE 20437
// sAI := true ;
20429: LD_ADDR_EXP 110
20433: PUSH
20434: LD_INT 1
20436: ST_TO_ADDR
// if p3 = 28 then
20437: LD_VAR 0 3
20441: PUSH
20442: LD_INT 28
20444: EQUAL
20445: IFFALSE 20455
// sCargo := true ;
20447: LD_ADDR_EXP 113
20451: PUSH
20452: LD_INT 1
20454: ST_TO_ADDR
// if p3 = 29 then
20455: LD_VAR 0 3
20459: PUSH
20460: LD_INT 29
20462: EQUAL
20463: IFFALSE 20473
// sDLaser := true ;
20465: LD_ADDR_EXP 114
20469: PUSH
20470: LD_INT 1
20472: ST_TO_ADDR
// if p3 = 30 then
20473: LD_VAR 0 3
20477: PUSH
20478: LD_INT 30
20480: EQUAL
20481: IFFALSE 20491
// sExchange := true ;
20483: LD_ADDR_EXP 115
20487: PUSH
20488: LD_INT 1
20490: ST_TO_ADDR
// if p3 = 31 then
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 31
20498: EQUAL
20499: IFFALSE 20509
// sFac := true ;
20501: LD_ADDR_EXP 116
20505: PUSH
20506: LD_INT 1
20508: ST_TO_ADDR
// if p3 = 32 then
20509: LD_VAR 0 3
20513: PUSH
20514: LD_INT 32
20516: EQUAL
20517: IFFALSE 20527
// sPower := true ;
20519: LD_ADDR_EXP 117
20523: PUSH
20524: LD_INT 1
20526: ST_TO_ADDR
// if p3 = 33 then
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 33
20534: EQUAL
20535: IFFALSE 20545
// sRandom := true ;
20537: LD_ADDR_EXP 118
20541: PUSH
20542: LD_INT 1
20544: ST_TO_ADDR
// if p3 = 34 then
20545: LD_VAR 0 3
20549: PUSH
20550: LD_INT 34
20552: EQUAL
20553: IFFALSE 20563
// sShield := true ;
20555: LD_ADDR_EXP 119
20559: PUSH
20560: LD_INT 1
20562: ST_TO_ADDR
// if p3 = 35 then
20563: LD_VAR 0 3
20567: PUSH
20568: LD_INT 35
20570: EQUAL
20571: IFFALSE 20581
// sTime := true ;
20573: LD_ADDR_EXP 120
20577: PUSH
20578: LD_INT 1
20580: ST_TO_ADDR
// if p3 = 36 then
20581: LD_VAR 0 3
20585: PUSH
20586: LD_INT 36
20588: EQUAL
20589: IFFALSE 20599
// sTools := true ;
20591: LD_ADDR_EXP 121
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// if p3 = 101 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 101
20606: EQUAL
20607: IFFALSE 20617
// sSold := true ;
20609: LD_ADDR_EXP 86
20613: PUSH
20614: LD_INT 1
20616: ST_TO_ADDR
// if p3 = 102 then
20617: LD_VAR 0 3
20621: PUSH
20622: LD_INT 102
20624: EQUAL
20625: IFFALSE 20635
// sDiff := true ;
20627: LD_ADDR_EXP 87
20631: PUSH
20632: LD_INT 1
20634: ST_TO_ADDR
// if p3 = 103 then
20635: LD_VAR 0 3
20639: PUSH
20640: LD_INT 103
20642: EQUAL
20643: IFFALSE 20653
// sFog := true ;
20645: LD_ADDR_EXP 90
20649: PUSH
20650: LD_INT 1
20652: ST_TO_ADDR
// if p3 = 104 then
20653: LD_VAR 0 3
20657: PUSH
20658: LD_INT 104
20660: EQUAL
20661: IFFALSE 20671
// sReset := true ;
20663: LD_ADDR_EXP 91
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if p3 = 105 then
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 105
20678: EQUAL
20679: IFFALSE 20689
// sSun := true ;
20681: LD_ADDR_EXP 92
20685: PUSH
20686: LD_INT 1
20688: ST_TO_ADDR
// if p3 = 106 then
20689: LD_VAR 0 3
20693: PUSH
20694: LD_INT 106
20696: EQUAL
20697: IFFALSE 20707
// sTiger := true ;
20699: LD_ADDR_EXP 88
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// if p3 = 107 then
20707: LD_VAR 0 3
20711: PUSH
20712: LD_INT 107
20714: EQUAL
20715: IFFALSE 20725
// sBomb := true ;
20717: LD_ADDR_EXP 89
20721: PUSH
20722: LD_INT 1
20724: ST_TO_ADDR
// if p3 = 108 then
20725: LD_VAR 0 3
20729: PUSH
20730: LD_INT 108
20732: EQUAL
20733: IFFALSE 20743
// sWound := true ;
20735: LD_ADDR_EXP 97
20739: PUSH
20740: LD_INT 1
20742: ST_TO_ADDR
// if p3 = 109 then
20743: LD_VAR 0 3
20747: PUSH
20748: LD_INT 109
20750: EQUAL
20751: IFFALSE 20761
// sBetray := true ;
20753: LD_ADDR_EXP 101
20757: PUSH
20758: LD_INT 1
20760: ST_TO_ADDR
// if p3 = 110 then
20761: LD_VAR 0 3
20765: PUSH
20766: LD_INT 110
20768: EQUAL
20769: IFFALSE 20779
// sContamin := true ;
20771: LD_ADDR_EXP 102
20775: PUSH
20776: LD_INT 1
20778: ST_TO_ADDR
// if p3 = 111 then
20779: LD_VAR 0 3
20783: PUSH
20784: LD_INT 111
20786: EQUAL
20787: IFFALSE 20797
// sOil := true ;
20789: LD_ADDR_EXP 104
20793: PUSH
20794: LD_INT 1
20796: ST_TO_ADDR
// if p3 = 112 then
20797: LD_VAR 0 3
20801: PUSH
20802: LD_INT 112
20804: EQUAL
20805: IFFALSE 20815
// sStu := true ;
20807: LD_ADDR_EXP 108
20811: PUSH
20812: LD_INT 1
20814: ST_TO_ADDR
// if p3 = 113 then
20815: LD_VAR 0 3
20819: PUSH
20820: LD_INT 113
20822: EQUAL
20823: IFFALSE 20833
// sBazooka := true ;
20825: LD_ADDR_EXP 111
20829: PUSH
20830: LD_INT 1
20832: ST_TO_ADDR
// if p3 = 114 then
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 114
20840: EQUAL
20841: IFFALSE 20851
// sMortar := true ;
20843: LD_ADDR_EXP 112
20847: PUSH
20848: LD_INT 1
20850: ST_TO_ADDR
// if p3 = 115 then
20851: LD_VAR 0 3
20855: PUSH
20856: LD_INT 115
20858: EQUAL
20859: IFFALSE 20869
// sRanger := true ;
20861: LD_ADDR_EXP 122
20865: PUSH
20866: LD_INT 1
20868: ST_TO_ADDR
// if p3 = 116 then
20869: LD_VAR 0 3
20873: PUSH
20874: LD_INT 116
20876: EQUAL
20877: IFFALSE 20887
// sComputer := true ;
20879: LD_ADDR_EXP 123
20883: PUSH
20884: LD_INT 1
20886: ST_TO_ADDR
// if p3 = 117 then
20887: LD_VAR 0 3
20891: PUSH
20892: LD_INT 117
20894: EQUAL
20895: IFFALSE 20905
// s30 := true ;
20897: LD_ADDR_EXP 124
20901: PUSH
20902: LD_INT 1
20904: ST_TO_ADDR
// if p3 = 118 then
20905: LD_VAR 0 3
20909: PUSH
20910: LD_INT 118
20912: EQUAL
20913: IFFALSE 20923
// s60 := true ;
20915: LD_ADDR_EXP 125
20919: PUSH
20920: LD_INT 1
20922: ST_TO_ADDR
// end ; if p2 = 101 then
20923: LD_VAR 0 2
20927: PUSH
20928: LD_INT 101
20930: EQUAL
20931: IFFALSE 21059
// begin case p3 of 1 :
20933: LD_VAR 0 3
20937: PUSH
20938: LD_INT 1
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 20953
20946: POP
// hHackUnlimitedResources ; 2 :
20947: CALL 32655 0 0
20951: GO 21059
20953: LD_INT 2
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20968
20961: POP
// hHackSetLevel10 ; 3 :
20962: CALL 32788 0 0
20966: GO 21059
20968: LD_INT 3
20970: DOUBLE
20971: EQUAL
20972: IFTRUE 20976
20974: GO 20983
20976: POP
// hHackSetLevel10YourUnits ; 4 :
20977: CALL 32873 0 0
20981: GO 21059
20983: LD_INT 4
20985: DOUBLE
20986: EQUAL
20987: IFTRUE 20991
20989: GO 20998
20991: POP
// hHackInvincible ; 5 :
20992: CALL 33321 0 0
20996: GO 21059
20998: LD_INT 5
21000: DOUBLE
21001: EQUAL
21002: IFTRUE 21006
21004: GO 21013
21006: POP
// hHackInvisible ; 6 :
21007: CALL 33432 0 0
21011: GO 21059
21013: LD_INT 6
21015: DOUBLE
21016: EQUAL
21017: IFTRUE 21021
21019: GO 21028
21021: POP
// hHackChangeYourSide ; 7 :
21022: CALL 33489 0 0
21026: GO 21059
21028: LD_INT 7
21030: DOUBLE
21031: EQUAL
21032: IFTRUE 21036
21034: GO 21043
21036: POP
// hHackChangeUnitSide ; 8 :
21037: CALL 33531 0 0
21041: GO 21059
21043: LD_INT 8
21045: DOUBLE
21046: EQUAL
21047: IFTRUE 21051
21049: GO 21058
21051: POP
// hHackFog ; end ;
21052: CALL 33632 0 0
21056: GO 21059
21058: POP
// end ; end ;
21059: LD_VAR 0 7
21063: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21064: GO 21066
21066: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21067: LD_STRING initStreamRollete();
21069: PPUSH
21070: CALL_OW 559
// InitStreamMode ;
21074: CALL 21083 0 0
// DefineStreamItems ( ) ;
21078: CALL 21547 0 0
// end ;
21082: END
// function InitStreamMode ; begin
21083: LD_INT 0
21085: PPUSH
// streamModeActive := false ;
21086: LD_ADDR_EXP 69
21090: PUSH
21091: LD_INT 0
21093: ST_TO_ADDR
// normalCounter := 36 ;
21094: LD_ADDR_EXP 70
21098: PUSH
21099: LD_INT 36
21101: ST_TO_ADDR
// hardcoreCounter := 16 ;
21102: LD_ADDR_EXP 71
21106: PUSH
21107: LD_INT 16
21109: ST_TO_ADDR
// sRocket := false ;
21110: LD_ADDR_EXP 74
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// sSpeed := false ;
21118: LD_ADDR_EXP 73
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// sEngine := false ;
21126: LD_ADDR_EXP 75
21130: PUSH
21131: LD_INT 0
21133: ST_TO_ADDR
// sSpec := false ;
21134: LD_ADDR_EXP 72
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// sLevel := false ;
21142: LD_ADDR_EXP 76
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// sArmoury := false ;
21150: LD_ADDR_EXP 77
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// sRadar := false ;
21158: LD_ADDR_EXP 78
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sBunker := false ;
21166: LD_ADDR_EXP 79
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sHack := false ;
21174: LD_ADDR_EXP 80
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sFire := false ;
21182: LD_ADDR_EXP 81
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// sRefresh := false ;
21190: LD_ADDR_EXP 82
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// sExp := false ;
21198: LD_ADDR_EXP 83
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sDepot := false ;
21206: LD_ADDR_EXP 84
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sFlag := false ;
21214: LD_ADDR_EXP 85
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sKamikadze := false ;
21222: LD_ADDR_EXP 93
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sTroll := false ;
21230: LD_ADDR_EXP 94
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sSlow := false ;
21238: LD_ADDR_EXP 95
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sLack := false ;
21246: LD_ADDR_EXP 96
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sTank := false ;
21254: LD_ADDR_EXP 98
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sRemote := false ;
21262: LD_ADDR_EXP 99
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sPowell := false ;
21270: LD_ADDR_EXP 100
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sTeleport := false ;
21278: LD_ADDR_EXP 103
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sOilTower := false ;
21286: LD_ADDR_EXP 105
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sShovel := false ;
21294: LD_ADDR_EXP 106
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sSheik := false ;
21302: LD_ADDR_EXP 107
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sEarthquake := false ;
21310: LD_ADDR_EXP 109
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sAI := false ;
21318: LD_ADDR_EXP 110
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sCargo := false ;
21326: LD_ADDR_EXP 113
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sDLaser := false ;
21334: LD_ADDR_EXP 114
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sExchange := false ;
21342: LD_ADDR_EXP 115
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sFac := false ;
21350: LD_ADDR_EXP 116
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sPower := false ;
21358: LD_ADDR_EXP 117
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sRandom := false ;
21366: LD_ADDR_EXP 118
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sShield := false ;
21374: LD_ADDR_EXP 119
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sTime := false ;
21382: LD_ADDR_EXP 120
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sTools := false ;
21390: LD_ADDR_EXP 121
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sSold := false ;
21398: LD_ADDR_EXP 86
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sDiff := false ;
21406: LD_ADDR_EXP 87
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sFog := false ;
21414: LD_ADDR_EXP 90
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sReset := false ;
21422: LD_ADDR_EXP 91
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sSun := false ;
21430: LD_ADDR_EXP 92
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sTiger := false ;
21438: LD_ADDR_EXP 88
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sBomb := false ;
21446: LD_ADDR_EXP 89
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sWound := false ;
21454: LD_ADDR_EXP 97
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sBetray := false ;
21462: LD_ADDR_EXP 101
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sContamin := false ;
21470: LD_ADDR_EXP 102
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sOil := false ;
21478: LD_ADDR_EXP 104
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sStu := false ;
21486: LD_ADDR_EXP 108
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sBazooka := false ;
21494: LD_ADDR_EXP 111
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sMortar := false ;
21502: LD_ADDR_EXP 112
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sRanger := false ;
21510: LD_ADDR_EXP 122
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sComputer := false ;
21518: LD_ADDR_EXP 123
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// s30 := false ;
21526: LD_ADDR_EXP 124
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// s60 := false ;
21534: LD_ADDR_EXP 125
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// end ;
21542: LD_VAR 0 1
21546: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21547: LD_INT 0
21549: PPUSH
21550: PPUSH
21551: PPUSH
21552: PPUSH
21553: PPUSH
// result := [ ] ;
21554: LD_ADDR_VAR 0 1
21558: PUSH
21559: EMPTY
21560: ST_TO_ADDR
// if campaign_id = 1 then
21561: LD_OWVAR 69
21565: PUSH
21566: LD_INT 1
21568: EQUAL
21569: IFFALSE 24735
// begin case mission_number of 1 :
21571: LD_OWVAR 70
21575: PUSH
21576: LD_INT 1
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21660
21584: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21585: LD_ADDR_VAR 0 1
21589: PUSH
21590: LD_INT 2
21592: PUSH
21593: LD_INT 4
21595: PUSH
21596: LD_INT 11
21598: PUSH
21599: LD_INT 12
21601: PUSH
21602: LD_INT 15
21604: PUSH
21605: LD_INT 16
21607: PUSH
21608: LD_INT 22
21610: PUSH
21611: LD_INT 23
21613: PUSH
21614: LD_INT 26
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 101
21630: PUSH
21631: LD_INT 102
21633: PUSH
21634: LD_INT 106
21636: PUSH
21637: LD_INT 116
21639: PUSH
21640: LD_INT 117
21642: PUSH
21643: LD_INT 118
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: ST_TO_ADDR
21658: GO 24733
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21752
21668: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_INT 2
21676: PUSH
21677: LD_INT 4
21679: PUSH
21680: LD_INT 11
21682: PUSH
21683: LD_INT 12
21685: PUSH
21686: LD_INT 15
21688: PUSH
21689: LD_INT 16
21691: PUSH
21692: LD_INT 22
21694: PUSH
21695: LD_INT 23
21697: PUSH
21698: LD_INT 26
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 101
21714: PUSH
21715: LD_INT 102
21717: PUSH
21718: LD_INT 105
21720: PUSH
21721: LD_INT 106
21723: PUSH
21724: LD_INT 108
21726: PUSH
21727: LD_INT 116
21729: PUSH
21730: LD_INT 117
21732: PUSH
21733: LD_INT 118
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: ST_TO_ADDR
21750: GO 24733
21752: LD_INT 3
21754: DOUBLE
21755: EQUAL
21756: IFTRUE 21760
21758: GO 21848
21760: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21761: LD_ADDR_VAR 0 1
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: LD_INT 4
21771: PUSH
21772: LD_INT 5
21774: PUSH
21775: LD_INT 11
21777: PUSH
21778: LD_INT 12
21780: PUSH
21781: LD_INT 15
21783: PUSH
21784: LD_INT 16
21786: PUSH
21787: LD_INT 22
21789: PUSH
21790: LD_INT 26
21792: PUSH
21793: LD_INT 36
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 101
21810: PUSH
21811: LD_INT 102
21813: PUSH
21814: LD_INT 105
21816: PUSH
21817: LD_INT 106
21819: PUSH
21820: LD_INT 108
21822: PUSH
21823: LD_INT 116
21825: PUSH
21826: LD_INT 117
21828: PUSH
21829: LD_INT 118
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: ST_TO_ADDR
21846: GO 24733
21848: LD_INT 4
21850: DOUBLE
21851: EQUAL
21852: IFTRUE 21856
21854: GO 21952
21856: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: LD_INT 2
21864: PUSH
21865: LD_INT 4
21867: PUSH
21868: LD_INT 5
21870: PUSH
21871: LD_INT 8
21873: PUSH
21874: LD_INT 11
21876: PUSH
21877: LD_INT 12
21879: PUSH
21880: LD_INT 15
21882: PUSH
21883: LD_INT 16
21885: PUSH
21886: LD_INT 22
21888: PUSH
21889: LD_INT 23
21891: PUSH
21892: LD_INT 26
21894: PUSH
21895: LD_INT 36
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 101
21914: PUSH
21915: LD_INT 102
21917: PUSH
21918: LD_INT 105
21920: PUSH
21921: LD_INT 106
21923: PUSH
21924: LD_INT 108
21926: PUSH
21927: LD_INT 116
21929: PUSH
21930: LD_INT 117
21932: PUSH
21933: LD_INT 118
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: ST_TO_ADDR
21950: GO 24733
21952: LD_INT 5
21954: DOUBLE
21955: EQUAL
21956: IFTRUE 21960
21958: GO 22072
21960: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21961: LD_ADDR_VAR 0 1
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 4
21971: PUSH
21972: LD_INT 5
21974: PUSH
21975: LD_INT 6
21977: PUSH
21978: LD_INT 8
21980: PUSH
21981: LD_INT 11
21983: PUSH
21984: LD_INT 12
21986: PUSH
21987: LD_INT 15
21989: PUSH
21990: LD_INT 16
21992: PUSH
21993: LD_INT 22
21995: PUSH
21996: LD_INT 23
21998: PUSH
21999: LD_INT 25
22001: PUSH
22002: LD_INT 26
22004: PUSH
22005: LD_INT 36
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 101
22026: PUSH
22027: LD_INT 102
22029: PUSH
22030: LD_INT 105
22032: PUSH
22033: LD_INT 106
22035: PUSH
22036: LD_INT 108
22038: PUSH
22039: LD_INT 109
22041: PUSH
22042: LD_INT 112
22044: PUSH
22045: LD_INT 116
22047: PUSH
22048: LD_INT 117
22050: PUSH
22051: LD_INT 118
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: ST_TO_ADDR
22070: GO 24733
22072: LD_INT 6
22074: DOUBLE
22075: EQUAL
22076: IFTRUE 22080
22078: GO 22212
22080: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22081: LD_ADDR_VAR 0 1
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: LD_INT 4
22091: PUSH
22092: LD_INT 5
22094: PUSH
22095: LD_INT 6
22097: PUSH
22098: LD_INT 8
22100: PUSH
22101: LD_INT 11
22103: PUSH
22104: LD_INT 12
22106: PUSH
22107: LD_INT 15
22109: PUSH
22110: LD_INT 16
22112: PUSH
22113: LD_INT 20
22115: PUSH
22116: LD_INT 21
22118: PUSH
22119: LD_INT 22
22121: PUSH
22122: LD_INT 23
22124: PUSH
22125: LD_INT 25
22127: PUSH
22128: LD_INT 26
22130: PUSH
22131: LD_INT 30
22133: PUSH
22134: LD_INT 31
22136: PUSH
22137: LD_INT 32
22139: PUSH
22140: LD_INT 36
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 101
22166: PUSH
22167: LD_INT 102
22169: PUSH
22170: LD_INT 105
22172: PUSH
22173: LD_INT 106
22175: PUSH
22176: LD_INT 108
22178: PUSH
22179: LD_INT 109
22181: PUSH
22182: LD_INT 112
22184: PUSH
22185: LD_INT 116
22187: PUSH
22188: LD_INT 117
22190: PUSH
22191: LD_INT 118
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24733
22212: LD_INT 7
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22332
22220: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22221: LD_ADDR_VAR 0 1
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 7
22237: PUSH
22238: LD_INT 11
22240: PUSH
22241: LD_INT 12
22243: PUSH
22244: LD_INT 15
22246: PUSH
22247: LD_INT 16
22249: PUSH
22250: LD_INT 20
22252: PUSH
22253: LD_INT 21
22255: PUSH
22256: LD_INT 22
22258: PUSH
22259: LD_INT 23
22261: PUSH
22262: LD_INT 25
22264: PUSH
22265: LD_INT 26
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 101
22286: PUSH
22287: LD_INT 102
22289: PUSH
22290: LD_INT 103
22292: PUSH
22293: LD_INT 105
22295: PUSH
22296: LD_INT 106
22298: PUSH
22299: LD_INT 108
22301: PUSH
22302: LD_INT 112
22304: PUSH
22305: LD_INT 116
22307: PUSH
22308: LD_INT 117
22310: PUSH
22311: LD_INT 118
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: ST_TO_ADDR
22330: GO 24733
22332: LD_INT 8
22334: DOUBLE
22335: EQUAL
22336: IFTRUE 22340
22338: GO 22480
22340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22341: LD_ADDR_VAR 0 1
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: LD_INT 4
22351: PUSH
22352: LD_INT 5
22354: PUSH
22355: LD_INT 6
22357: PUSH
22358: LD_INT 7
22360: PUSH
22361: LD_INT 8
22363: PUSH
22364: LD_INT 11
22366: PUSH
22367: LD_INT 12
22369: PUSH
22370: LD_INT 15
22372: PUSH
22373: LD_INT 16
22375: PUSH
22376: LD_INT 20
22378: PUSH
22379: LD_INT 21
22381: PUSH
22382: LD_INT 22
22384: PUSH
22385: LD_INT 23
22387: PUSH
22388: LD_INT 25
22390: PUSH
22391: LD_INT 26
22393: PUSH
22394: LD_INT 30
22396: PUSH
22397: LD_INT 31
22399: PUSH
22400: LD_INT 32
22402: PUSH
22403: LD_INT 36
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 101
22430: PUSH
22431: LD_INT 102
22433: PUSH
22434: LD_INT 103
22436: PUSH
22437: LD_INT 105
22439: PUSH
22440: LD_INT 106
22442: PUSH
22443: LD_INT 108
22445: PUSH
22446: LD_INT 109
22448: PUSH
22449: LD_INT 112
22451: PUSH
22452: LD_INT 116
22454: PUSH
22455: LD_INT 117
22457: PUSH
22458: LD_INT 118
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: ST_TO_ADDR
22478: GO 24733
22480: LD_INT 9
22482: DOUBLE
22483: EQUAL
22484: IFTRUE 22488
22486: GO 22636
22488: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22489: LD_ADDR_VAR 0 1
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: LD_INT 4
22499: PUSH
22500: LD_INT 5
22502: PUSH
22503: LD_INT 6
22505: PUSH
22506: LD_INT 7
22508: PUSH
22509: LD_INT 8
22511: PUSH
22512: LD_INT 11
22514: PUSH
22515: LD_INT 12
22517: PUSH
22518: LD_INT 15
22520: PUSH
22521: LD_INT 16
22523: PUSH
22524: LD_INT 20
22526: PUSH
22527: LD_INT 21
22529: PUSH
22530: LD_INT 22
22532: PUSH
22533: LD_INT 23
22535: PUSH
22536: LD_INT 25
22538: PUSH
22539: LD_INT 26
22541: PUSH
22542: LD_INT 28
22544: PUSH
22545: LD_INT 30
22547: PUSH
22548: LD_INT 31
22550: PUSH
22551: LD_INT 32
22553: PUSH
22554: LD_INT 36
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 101
22582: PUSH
22583: LD_INT 102
22585: PUSH
22586: LD_INT 103
22588: PUSH
22589: LD_INT 105
22591: PUSH
22592: LD_INT 106
22594: PUSH
22595: LD_INT 108
22597: PUSH
22598: LD_INT 109
22600: PUSH
22601: LD_INT 112
22603: PUSH
22604: LD_INT 114
22606: PUSH
22607: LD_INT 116
22609: PUSH
22610: LD_INT 117
22612: PUSH
22613: LD_INT 118
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: ST_TO_ADDR
22634: GO 24733
22636: LD_INT 10
22638: DOUBLE
22639: EQUAL
22640: IFTRUE 22644
22642: GO 22840
22644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22645: LD_ADDR_VAR 0 1
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 4
22655: PUSH
22656: LD_INT 5
22658: PUSH
22659: LD_INT 6
22661: PUSH
22662: LD_INT 7
22664: PUSH
22665: LD_INT 8
22667: PUSH
22668: LD_INT 9
22670: PUSH
22671: LD_INT 10
22673: PUSH
22674: LD_INT 11
22676: PUSH
22677: LD_INT 12
22679: PUSH
22680: LD_INT 13
22682: PUSH
22683: LD_INT 14
22685: PUSH
22686: LD_INT 15
22688: PUSH
22689: LD_INT 16
22691: PUSH
22692: LD_INT 17
22694: PUSH
22695: LD_INT 18
22697: PUSH
22698: LD_INT 19
22700: PUSH
22701: LD_INT 20
22703: PUSH
22704: LD_INT 21
22706: PUSH
22707: LD_INT 22
22709: PUSH
22710: LD_INT 23
22712: PUSH
22713: LD_INT 24
22715: PUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 26
22721: PUSH
22722: LD_INT 28
22724: PUSH
22725: LD_INT 30
22727: PUSH
22728: LD_INT 31
22730: PUSH
22731: LD_INT 32
22733: PUSH
22734: LD_INT 36
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 101
22770: PUSH
22771: LD_INT 102
22773: PUSH
22774: LD_INT 103
22776: PUSH
22777: LD_INT 104
22779: PUSH
22780: LD_INT 105
22782: PUSH
22783: LD_INT 106
22785: PUSH
22786: LD_INT 107
22788: PUSH
22789: LD_INT 108
22791: PUSH
22792: LD_INT 109
22794: PUSH
22795: LD_INT 110
22797: PUSH
22798: LD_INT 111
22800: PUSH
22801: LD_INT 112
22803: PUSH
22804: LD_INT 114
22806: PUSH
22807: LD_INT 116
22809: PUSH
22810: LD_INT 117
22812: PUSH
22813: LD_INT 118
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: ST_TO_ADDR
22838: GO 24733
22840: LD_INT 11
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 23052
22848: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22849: LD_ADDR_VAR 0 1
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 3
22859: PUSH
22860: LD_INT 4
22862: PUSH
22863: LD_INT 5
22865: PUSH
22866: LD_INT 6
22868: PUSH
22869: LD_INT 7
22871: PUSH
22872: LD_INT 8
22874: PUSH
22875: LD_INT 9
22877: PUSH
22878: LD_INT 10
22880: PUSH
22881: LD_INT 11
22883: PUSH
22884: LD_INT 12
22886: PUSH
22887: LD_INT 13
22889: PUSH
22890: LD_INT 14
22892: PUSH
22893: LD_INT 15
22895: PUSH
22896: LD_INT 16
22898: PUSH
22899: LD_INT 17
22901: PUSH
22902: LD_INT 18
22904: PUSH
22905: LD_INT 19
22907: PUSH
22908: LD_INT 20
22910: PUSH
22911: LD_INT 21
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_INT 23
22919: PUSH
22920: LD_INT 24
22922: PUSH
22923: LD_INT 25
22925: PUSH
22926: LD_INT 26
22928: PUSH
22929: LD_INT 28
22931: PUSH
22932: LD_INT 30
22934: PUSH
22935: LD_INT 31
22937: PUSH
22938: LD_INT 32
22940: PUSH
22941: LD_INT 34
22943: PUSH
22944: LD_INT 36
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 101
22982: PUSH
22983: LD_INT 102
22985: PUSH
22986: LD_INT 103
22988: PUSH
22989: LD_INT 104
22991: PUSH
22992: LD_INT 105
22994: PUSH
22995: LD_INT 106
22997: PUSH
22998: LD_INT 107
23000: PUSH
23001: LD_INT 108
23003: PUSH
23004: LD_INT 109
23006: PUSH
23007: LD_INT 110
23009: PUSH
23010: LD_INT 111
23012: PUSH
23013: LD_INT 112
23015: PUSH
23016: LD_INT 114
23018: PUSH
23019: LD_INT 116
23021: PUSH
23022: LD_INT 117
23024: PUSH
23025: LD_INT 118
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: ST_TO_ADDR
23050: GO 24733
23052: LD_INT 12
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23280
23060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23061: LD_ADDR_VAR 0 1
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 3
23074: PUSH
23075: LD_INT 4
23077: PUSH
23078: LD_INT 5
23080: PUSH
23081: LD_INT 6
23083: PUSH
23084: LD_INT 7
23086: PUSH
23087: LD_INT 8
23089: PUSH
23090: LD_INT 9
23092: PUSH
23093: LD_INT 10
23095: PUSH
23096: LD_INT 11
23098: PUSH
23099: LD_INT 12
23101: PUSH
23102: LD_INT 13
23104: PUSH
23105: LD_INT 14
23107: PUSH
23108: LD_INT 15
23110: PUSH
23111: LD_INT 16
23113: PUSH
23114: LD_INT 17
23116: PUSH
23117: LD_INT 18
23119: PUSH
23120: LD_INT 19
23122: PUSH
23123: LD_INT 20
23125: PUSH
23126: LD_INT 21
23128: PUSH
23129: LD_INT 22
23131: PUSH
23132: LD_INT 23
23134: PUSH
23135: LD_INT 24
23137: PUSH
23138: LD_INT 25
23140: PUSH
23141: LD_INT 26
23143: PUSH
23144: LD_INT 27
23146: PUSH
23147: LD_INT 28
23149: PUSH
23150: LD_INT 30
23152: PUSH
23153: LD_INT 31
23155: PUSH
23156: LD_INT 32
23158: PUSH
23159: LD_INT 33
23161: PUSH
23162: LD_INT 34
23164: PUSH
23165: LD_INT 36
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 101
23206: PUSH
23207: LD_INT 102
23209: PUSH
23210: LD_INT 103
23212: PUSH
23213: LD_INT 104
23215: PUSH
23216: LD_INT 105
23218: PUSH
23219: LD_INT 106
23221: PUSH
23222: LD_INT 107
23224: PUSH
23225: LD_INT 108
23227: PUSH
23228: LD_INT 109
23230: PUSH
23231: LD_INT 110
23233: PUSH
23234: LD_INT 111
23236: PUSH
23237: LD_INT 112
23239: PUSH
23240: LD_INT 113
23242: PUSH
23243: LD_INT 114
23245: PUSH
23246: LD_INT 116
23248: PUSH
23249: LD_INT 117
23251: PUSH
23252: LD_INT 118
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: ST_TO_ADDR
23278: GO 24733
23280: LD_INT 13
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23496
23288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23289: LD_ADDR_VAR 0 1
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 3
23302: PUSH
23303: LD_INT 4
23305: PUSH
23306: LD_INT 5
23308: PUSH
23309: LD_INT 8
23311: PUSH
23312: LD_INT 9
23314: PUSH
23315: LD_INT 10
23317: PUSH
23318: LD_INT 11
23320: PUSH
23321: LD_INT 12
23323: PUSH
23324: LD_INT 14
23326: PUSH
23327: LD_INT 15
23329: PUSH
23330: LD_INT 16
23332: PUSH
23333: LD_INT 17
23335: PUSH
23336: LD_INT 18
23338: PUSH
23339: LD_INT 19
23341: PUSH
23342: LD_INT 20
23344: PUSH
23345: LD_INT 21
23347: PUSH
23348: LD_INT 22
23350: PUSH
23351: LD_INT 23
23353: PUSH
23354: LD_INT 24
23356: PUSH
23357: LD_INT 25
23359: PUSH
23360: LD_INT 26
23362: PUSH
23363: LD_INT 27
23365: PUSH
23366: LD_INT 28
23368: PUSH
23369: LD_INT 30
23371: PUSH
23372: LD_INT 31
23374: PUSH
23375: LD_INT 32
23377: PUSH
23378: LD_INT 33
23380: PUSH
23381: LD_INT 34
23383: PUSH
23384: LD_INT 36
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 101
23422: PUSH
23423: LD_INT 102
23425: PUSH
23426: LD_INT 103
23428: PUSH
23429: LD_INT 104
23431: PUSH
23432: LD_INT 105
23434: PUSH
23435: LD_INT 106
23437: PUSH
23438: LD_INT 107
23440: PUSH
23441: LD_INT 108
23443: PUSH
23444: LD_INT 109
23446: PUSH
23447: LD_INT 110
23449: PUSH
23450: LD_INT 111
23452: PUSH
23453: LD_INT 112
23455: PUSH
23456: LD_INT 113
23458: PUSH
23459: LD_INT 114
23461: PUSH
23462: LD_INT 116
23464: PUSH
23465: LD_INT 117
23467: PUSH
23468: LD_INT 118
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: ST_TO_ADDR
23494: GO 24733
23496: LD_INT 14
23498: DOUBLE
23499: EQUAL
23500: IFTRUE 23504
23502: GO 23728
23504: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23505: LD_ADDR_VAR 0 1
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: LD_INT 3
23518: PUSH
23519: LD_INT 4
23521: PUSH
23522: LD_INT 5
23524: PUSH
23525: LD_INT 6
23527: PUSH
23528: LD_INT 7
23530: PUSH
23531: LD_INT 8
23533: PUSH
23534: LD_INT 9
23536: PUSH
23537: LD_INT 10
23539: PUSH
23540: LD_INT 11
23542: PUSH
23543: LD_INT 12
23545: PUSH
23546: LD_INT 13
23548: PUSH
23549: LD_INT 14
23551: PUSH
23552: LD_INT 15
23554: PUSH
23555: LD_INT 16
23557: PUSH
23558: LD_INT 17
23560: PUSH
23561: LD_INT 18
23563: PUSH
23564: LD_INT 19
23566: PUSH
23567: LD_INT 20
23569: PUSH
23570: LD_INT 21
23572: PUSH
23573: LD_INT 22
23575: PUSH
23576: LD_INT 23
23578: PUSH
23579: LD_INT 24
23581: PUSH
23582: LD_INT 25
23584: PUSH
23585: LD_INT 26
23587: PUSH
23588: LD_INT 27
23590: PUSH
23591: LD_INT 28
23593: PUSH
23594: LD_INT 29
23596: PUSH
23597: LD_INT 30
23599: PUSH
23600: LD_INT 31
23602: PUSH
23603: LD_INT 32
23605: PUSH
23606: LD_INT 33
23608: PUSH
23609: LD_INT 34
23611: PUSH
23612: LD_INT 36
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 101
23654: PUSH
23655: LD_INT 102
23657: PUSH
23658: LD_INT 103
23660: PUSH
23661: LD_INT 104
23663: PUSH
23664: LD_INT 105
23666: PUSH
23667: LD_INT 106
23669: PUSH
23670: LD_INT 107
23672: PUSH
23673: LD_INT 108
23675: PUSH
23676: LD_INT 109
23678: PUSH
23679: LD_INT 110
23681: PUSH
23682: LD_INT 111
23684: PUSH
23685: LD_INT 112
23687: PUSH
23688: LD_INT 113
23690: PUSH
23691: LD_INT 114
23693: PUSH
23694: LD_INT 116
23696: PUSH
23697: LD_INT 117
23699: PUSH
23700: LD_INT 118
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: ST_TO_ADDR
23726: GO 24733
23728: LD_INT 15
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23960
23736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23737: LD_ADDR_VAR 0 1
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 3
23750: PUSH
23751: LD_INT 4
23753: PUSH
23754: LD_INT 5
23756: PUSH
23757: LD_INT 6
23759: PUSH
23760: LD_INT 7
23762: PUSH
23763: LD_INT 8
23765: PUSH
23766: LD_INT 9
23768: PUSH
23769: LD_INT 10
23771: PUSH
23772: LD_INT 11
23774: PUSH
23775: LD_INT 12
23777: PUSH
23778: LD_INT 13
23780: PUSH
23781: LD_INT 14
23783: PUSH
23784: LD_INT 15
23786: PUSH
23787: LD_INT 16
23789: PUSH
23790: LD_INT 17
23792: PUSH
23793: LD_INT 18
23795: PUSH
23796: LD_INT 19
23798: PUSH
23799: LD_INT 20
23801: PUSH
23802: LD_INT 21
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_INT 23
23810: PUSH
23811: LD_INT 24
23813: PUSH
23814: LD_INT 25
23816: PUSH
23817: LD_INT 26
23819: PUSH
23820: LD_INT 27
23822: PUSH
23823: LD_INT 28
23825: PUSH
23826: LD_INT 29
23828: PUSH
23829: LD_INT 30
23831: PUSH
23832: LD_INT 31
23834: PUSH
23835: LD_INT 32
23837: PUSH
23838: LD_INT 33
23840: PUSH
23841: LD_INT 34
23843: PUSH
23844: LD_INT 36
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 101
23886: PUSH
23887: LD_INT 102
23889: PUSH
23890: LD_INT 103
23892: PUSH
23893: LD_INT 104
23895: PUSH
23896: LD_INT 105
23898: PUSH
23899: LD_INT 106
23901: PUSH
23902: LD_INT 107
23904: PUSH
23905: LD_INT 108
23907: PUSH
23908: LD_INT 109
23910: PUSH
23911: LD_INT 110
23913: PUSH
23914: LD_INT 111
23916: PUSH
23917: LD_INT 112
23919: PUSH
23920: LD_INT 113
23922: PUSH
23923: LD_INT 114
23925: PUSH
23926: LD_INT 116
23928: PUSH
23929: LD_INT 117
23931: PUSH
23932: LD_INT 118
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: ST_TO_ADDR
23958: GO 24733
23960: LD_INT 16
23962: DOUBLE
23963: EQUAL
23964: IFTRUE 23968
23966: GO 24104
23968: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23969: LD_ADDR_VAR 0 1
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 4
23979: PUSH
23980: LD_INT 5
23982: PUSH
23983: LD_INT 7
23985: PUSH
23986: LD_INT 11
23988: PUSH
23989: LD_INT 12
23991: PUSH
23992: LD_INT 15
23994: PUSH
23995: LD_INT 16
23997: PUSH
23998: LD_INT 20
24000: PUSH
24001: LD_INT 21
24003: PUSH
24004: LD_INT 22
24006: PUSH
24007: LD_INT 23
24009: PUSH
24010: LD_INT 25
24012: PUSH
24013: LD_INT 26
24015: PUSH
24016: LD_INT 30
24018: PUSH
24019: LD_INT 31
24021: PUSH
24022: LD_INT 32
24024: PUSH
24025: LD_INT 33
24027: PUSH
24028: LD_INT 34
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 101
24054: PUSH
24055: LD_INT 102
24057: PUSH
24058: LD_INT 103
24060: PUSH
24061: LD_INT 106
24063: PUSH
24064: LD_INT 108
24066: PUSH
24067: LD_INT 112
24069: PUSH
24070: LD_INT 113
24072: PUSH
24073: LD_INT 114
24075: PUSH
24076: LD_INT 116
24078: PUSH
24079: LD_INT 117
24081: PUSH
24082: LD_INT 118
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: ST_TO_ADDR
24102: GO 24733
24104: LD_INT 17
24106: DOUBLE
24107: EQUAL
24108: IFTRUE 24112
24110: GO 24336
24112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24113: LD_ADDR_VAR 0 1
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: LD_INT 4
24129: PUSH
24130: LD_INT 5
24132: PUSH
24133: LD_INT 6
24135: PUSH
24136: LD_INT 7
24138: PUSH
24139: LD_INT 8
24141: PUSH
24142: LD_INT 9
24144: PUSH
24145: LD_INT 10
24147: PUSH
24148: LD_INT 11
24150: PUSH
24151: LD_INT 12
24153: PUSH
24154: LD_INT 13
24156: PUSH
24157: LD_INT 14
24159: PUSH
24160: LD_INT 15
24162: PUSH
24163: LD_INT 16
24165: PUSH
24166: LD_INT 17
24168: PUSH
24169: LD_INT 18
24171: PUSH
24172: LD_INT 19
24174: PUSH
24175: LD_INT 20
24177: PUSH
24178: LD_INT 21
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_INT 23
24186: PUSH
24187: LD_INT 24
24189: PUSH
24190: LD_INT 25
24192: PUSH
24193: LD_INT 26
24195: PUSH
24196: LD_INT 27
24198: PUSH
24199: LD_INT 28
24201: PUSH
24202: LD_INT 29
24204: PUSH
24205: LD_INT 30
24207: PUSH
24208: LD_INT 31
24210: PUSH
24211: LD_INT 32
24213: PUSH
24214: LD_INT 33
24216: PUSH
24217: LD_INT 34
24219: PUSH
24220: LD_INT 36
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 101
24262: PUSH
24263: LD_INT 102
24265: PUSH
24266: LD_INT 103
24268: PUSH
24269: LD_INT 104
24271: PUSH
24272: LD_INT 105
24274: PUSH
24275: LD_INT 106
24277: PUSH
24278: LD_INT 107
24280: PUSH
24281: LD_INT 108
24283: PUSH
24284: LD_INT 109
24286: PUSH
24287: LD_INT 110
24289: PUSH
24290: LD_INT 111
24292: PUSH
24293: LD_INT 112
24295: PUSH
24296: LD_INT 113
24298: PUSH
24299: LD_INT 114
24301: PUSH
24302: LD_INT 116
24304: PUSH
24305: LD_INT 117
24307: PUSH
24308: LD_INT 118
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: ST_TO_ADDR
24334: GO 24733
24336: LD_INT 18
24338: DOUBLE
24339: EQUAL
24340: IFTRUE 24344
24342: GO 24492
24344: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24345: LD_ADDR_VAR 0 1
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 4
24355: PUSH
24356: LD_INT 5
24358: PUSH
24359: LD_INT 7
24361: PUSH
24362: LD_INT 11
24364: PUSH
24365: LD_INT 12
24367: PUSH
24368: LD_INT 15
24370: PUSH
24371: LD_INT 16
24373: PUSH
24374: LD_INT 20
24376: PUSH
24377: LD_INT 21
24379: PUSH
24380: LD_INT 22
24382: PUSH
24383: LD_INT 23
24385: PUSH
24386: LD_INT 25
24388: PUSH
24389: LD_INT 26
24391: PUSH
24392: LD_INT 30
24394: PUSH
24395: LD_INT 31
24397: PUSH
24398: LD_INT 32
24400: PUSH
24401: LD_INT 33
24403: PUSH
24404: LD_INT 34
24406: PUSH
24407: LD_INT 35
24409: PUSH
24410: LD_INT 36
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 101
24438: PUSH
24439: LD_INT 102
24441: PUSH
24442: LD_INT 103
24444: PUSH
24445: LD_INT 106
24447: PUSH
24448: LD_INT 108
24450: PUSH
24451: LD_INT 112
24453: PUSH
24454: LD_INT 113
24456: PUSH
24457: LD_INT 114
24459: PUSH
24460: LD_INT 115
24462: PUSH
24463: LD_INT 116
24465: PUSH
24466: LD_INT 117
24468: PUSH
24469: LD_INT 118
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: ST_TO_ADDR
24490: GO 24733
24492: LD_INT 19
24494: DOUBLE
24495: EQUAL
24496: IFTRUE 24500
24498: GO 24732
24500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24501: LD_ADDR_VAR 0 1
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: LD_INT 3
24514: PUSH
24515: LD_INT 4
24517: PUSH
24518: LD_INT 5
24520: PUSH
24521: LD_INT 6
24523: PUSH
24524: LD_INT 7
24526: PUSH
24527: LD_INT 8
24529: PUSH
24530: LD_INT 9
24532: PUSH
24533: LD_INT 10
24535: PUSH
24536: LD_INT 11
24538: PUSH
24539: LD_INT 12
24541: PUSH
24542: LD_INT 13
24544: PUSH
24545: LD_INT 14
24547: PUSH
24548: LD_INT 15
24550: PUSH
24551: LD_INT 16
24553: PUSH
24554: LD_INT 17
24556: PUSH
24557: LD_INT 18
24559: PUSH
24560: LD_INT 19
24562: PUSH
24563: LD_INT 20
24565: PUSH
24566: LD_INT 21
24568: PUSH
24569: LD_INT 22
24571: PUSH
24572: LD_INT 23
24574: PUSH
24575: LD_INT 24
24577: PUSH
24578: LD_INT 25
24580: PUSH
24581: LD_INT 26
24583: PUSH
24584: LD_INT 27
24586: PUSH
24587: LD_INT 28
24589: PUSH
24590: LD_INT 29
24592: PUSH
24593: LD_INT 30
24595: PUSH
24596: LD_INT 31
24598: PUSH
24599: LD_INT 32
24601: PUSH
24602: LD_INT 33
24604: PUSH
24605: LD_INT 34
24607: PUSH
24608: LD_INT 35
24610: PUSH
24611: LD_INT 36
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 101
24654: PUSH
24655: LD_INT 102
24657: PUSH
24658: LD_INT 103
24660: PUSH
24661: LD_INT 104
24663: PUSH
24664: LD_INT 105
24666: PUSH
24667: LD_INT 106
24669: PUSH
24670: LD_INT 107
24672: PUSH
24673: LD_INT 108
24675: PUSH
24676: LD_INT 109
24678: PUSH
24679: LD_INT 110
24681: PUSH
24682: LD_INT 111
24684: PUSH
24685: LD_INT 112
24687: PUSH
24688: LD_INT 113
24690: PUSH
24691: LD_INT 114
24693: PUSH
24694: LD_INT 115
24696: PUSH
24697: LD_INT 116
24699: PUSH
24700: LD_INT 117
24702: PUSH
24703: LD_INT 118
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: ST_TO_ADDR
24730: GO 24733
24732: POP
// end else
24733: GO 24964
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24735: LD_ADDR_VAR 0 1
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 3
24748: PUSH
24749: LD_INT 4
24751: PUSH
24752: LD_INT 5
24754: PUSH
24755: LD_INT 6
24757: PUSH
24758: LD_INT 7
24760: PUSH
24761: LD_INT 8
24763: PUSH
24764: LD_INT 9
24766: PUSH
24767: LD_INT 10
24769: PUSH
24770: LD_INT 11
24772: PUSH
24773: LD_INT 12
24775: PUSH
24776: LD_INT 13
24778: PUSH
24779: LD_INT 14
24781: PUSH
24782: LD_INT 15
24784: PUSH
24785: LD_INT 16
24787: PUSH
24788: LD_INT 17
24790: PUSH
24791: LD_INT 18
24793: PUSH
24794: LD_INT 19
24796: PUSH
24797: LD_INT 20
24799: PUSH
24800: LD_INT 21
24802: PUSH
24803: LD_INT 22
24805: PUSH
24806: LD_INT 23
24808: PUSH
24809: LD_INT 24
24811: PUSH
24812: LD_INT 25
24814: PUSH
24815: LD_INT 26
24817: PUSH
24818: LD_INT 27
24820: PUSH
24821: LD_INT 28
24823: PUSH
24824: LD_INT 29
24826: PUSH
24827: LD_INT 30
24829: PUSH
24830: LD_INT 31
24832: PUSH
24833: LD_INT 32
24835: PUSH
24836: LD_INT 33
24838: PUSH
24839: LD_INT 34
24841: PUSH
24842: LD_INT 35
24844: PUSH
24845: LD_INT 36
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 101
24888: PUSH
24889: LD_INT 102
24891: PUSH
24892: LD_INT 103
24894: PUSH
24895: LD_INT 104
24897: PUSH
24898: LD_INT 105
24900: PUSH
24901: LD_INT 106
24903: PUSH
24904: LD_INT 107
24906: PUSH
24907: LD_INT 108
24909: PUSH
24910: LD_INT 109
24912: PUSH
24913: LD_INT 110
24915: PUSH
24916: LD_INT 111
24918: PUSH
24919: LD_INT 112
24921: PUSH
24922: LD_INT 113
24924: PUSH
24925: LD_INT 114
24927: PUSH
24928: LD_INT 115
24930: PUSH
24931: LD_INT 116
24933: PUSH
24934: LD_INT 117
24936: PUSH
24937: LD_INT 118
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: ST_TO_ADDR
// if result then
24964: LD_VAR 0 1
24968: IFFALSE 25257
// begin normal :=  ;
24970: LD_ADDR_VAR 0 3
24974: PUSH
24975: LD_STRING 
24977: ST_TO_ADDR
// hardcore :=  ;
24978: LD_ADDR_VAR 0 4
24982: PUSH
24983: LD_STRING 
24985: ST_TO_ADDR
// for i = 1 to normalCounter do
24986: LD_ADDR_VAR 0 5
24990: PUSH
24991: DOUBLE
24992: LD_INT 1
24994: DEC
24995: ST_TO_ADDR
24996: LD_EXP 70
25000: PUSH
25001: FOR_TO
25002: IFFALSE 25103
// begin tmp := 0 ;
25004: LD_ADDR_VAR 0 2
25008: PUSH
25009: LD_STRING 0
25011: ST_TO_ADDR
// if result [ 1 ] then
25012: LD_VAR 0 1
25016: PUSH
25017: LD_INT 1
25019: ARRAY
25020: IFFALSE 25085
// if result [ 1 ] [ 1 ] = i then
25022: LD_VAR 0 1
25026: PUSH
25027: LD_INT 1
25029: ARRAY
25030: PUSH
25031: LD_INT 1
25033: ARRAY
25034: PUSH
25035: LD_VAR 0 5
25039: EQUAL
25040: IFFALSE 25085
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25042: LD_ADDR_VAR 0 1
25046: PUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: LD_INT 1
25054: PPUSH
25055: LD_VAR 0 1
25059: PUSH
25060: LD_INT 1
25062: ARRAY
25063: PPUSH
25064: LD_INT 1
25066: PPUSH
25067: CALL_OW 3
25071: PPUSH
25072: CALL_OW 1
25076: ST_TO_ADDR
// tmp := 1 ;
25077: LD_ADDR_VAR 0 2
25081: PUSH
25082: LD_STRING 1
25084: ST_TO_ADDR
// end ; normal := normal & tmp ;
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_VAR 0 3
25094: PUSH
25095: LD_VAR 0 2
25099: STR
25100: ST_TO_ADDR
// end ;
25101: GO 25001
25103: POP
25104: POP
// for i = 1 to hardcoreCounter do
25105: LD_ADDR_VAR 0 5
25109: PUSH
25110: DOUBLE
25111: LD_INT 1
25113: DEC
25114: ST_TO_ADDR
25115: LD_EXP 71
25119: PUSH
25120: FOR_TO
25121: IFFALSE 25226
// begin tmp := 0 ;
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_STRING 0
25130: ST_TO_ADDR
// if result [ 2 ] then
25131: LD_VAR 0 1
25135: PUSH
25136: LD_INT 2
25138: ARRAY
25139: IFFALSE 25208
// if result [ 2 ] [ 1 ] = 100 + i then
25141: LD_VAR 0 1
25145: PUSH
25146: LD_INT 2
25148: ARRAY
25149: PUSH
25150: LD_INT 1
25152: ARRAY
25153: PUSH
25154: LD_INT 100
25156: PUSH
25157: LD_VAR 0 5
25161: PLUS
25162: EQUAL
25163: IFFALSE 25208
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25165: LD_ADDR_VAR 0 1
25169: PUSH
25170: LD_VAR 0 1
25174: PPUSH
25175: LD_INT 2
25177: PPUSH
25178: LD_VAR 0 1
25182: PUSH
25183: LD_INT 2
25185: ARRAY
25186: PPUSH
25187: LD_INT 1
25189: PPUSH
25190: CALL_OW 3
25194: PPUSH
25195: CALL_OW 1
25199: ST_TO_ADDR
// tmp := 1 ;
25200: LD_ADDR_VAR 0 2
25204: PUSH
25205: LD_STRING 1
25207: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25208: LD_ADDR_VAR 0 4
25212: PUSH
25213: LD_VAR 0 4
25217: PUSH
25218: LD_VAR 0 2
25222: STR
25223: ST_TO_ADDR
// end ;
25224: GO 25120
25226: POP
25227: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25228: LD_STRING getStreamItemsFromMission("
25230: PUSH
25231: LD_VAR 0 3
25235: STR
25236: PUSH
25237: LD_STRING ","
25239: STR
25240: PUSH
25241: LD_VAR 0 4
25245: STR
25246: PUSH
25247: LD_STRING ")
25249: STR
25250: PPUSH
25251: CALL_OW 559
// end else
25255: GO 25264
// ToLua ( getStreamItemsFromMission("","") ) ;
25257: LD_STRING getStreamItemsFromMission("","")
25259: PPUSH
25260: CALL_OW 559
// end ;
25264: LD_VAR 0 1
25268: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25269: LD_EXP 69
25273: PUSH
25274: LD_EXP 74
25278: AND
25279: IFFALSE 25403
25281: GO 25283
25283: DISABLE
25284: LD_INT 0
25286: PPUSH
25287: PPUSH
// begin enable ;
25288: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25289: LD_ADDR_VAR 0 2
25293: PUSH
25294: LD_INT 22
25296: PUSH
25297: LD_OWVAR 2
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: LD_INT 34
25311: PUSH
25312: LD_INT 7
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 34
25321: PUSH
25322: LD_INT 45
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 34
25331: PUSH
25332: LD_INT 28
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 34
25341: PUSH
25342: LD_INT 47
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PPUSH
25360: CALL_OW 69
25364: ST_TO_ADDR
// if not tmp then
25365: LD_VAR 0 2
25369: NOT
25370: IFFALSE 25374
// exit ;
25372: GO 25403
// for i in tmp do
25374: LD_ADDR_VAR 0 1
25378: PUSH
25379: LD_VAR 0 2
25383: PUSH
25384: FOR_IN
25385: IFFALSE 25401
// begin SetLives ( i , 0 ) ;
25387: LD_VAR 0 1
25391: PPUSH
25392: LD_INT 0
25394: PPUSH
25395: CALL_OW 234
// end ;
25399: GO 25384
25401: POP
25402: POP
// end ;
25403: PPOPN 2
25405: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25406: LD_EXP 69
25410: PUSH
25411: LD_EXP 75
25415: AND
25416: IFFALSE 25500
25418: GO 25420
25420: DISABLE
25421: LD_INT 0
25423: PPUSH
25424: PPUSH
// begin enable ;
25425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25426: LD_ADDR_VAR 0 2
25430: PUSH
25431: LD_INT 22
25433: PUSH
25434: LD_OWVAR 2
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 32
25445: PUSH
25446: LD_INT 3
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL_OW 69
25461: ST_TO_ADDR
// if not tmp then
25462: LD_VAR 0 2
25466: NOT
25467: IFFALSE 25471
// exit ;
25469: GO 25500
// for i in tmp do
25471: LD_ADDR_VAR 0 1
25475: PUSH
25476: LD_VAR 0 2
25480: PUSH
25481: FOR_IN
25482: IFFALSE 25498
// begin SetLives ( i , 0 ) ;
25484: LD_VAR 0 1
25488: PPUSH
25489: LD_INT 0
25491: PPUSH
25492: CALL_OW 234
// end ;
25496: GO 25481
25498: POP
25499: POP
// end ;
25500: PPOPN 2
25502: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25503: LD_EXP 69
25507: PUSH
25508: LD_EXP 72
25512: AND
25513: IFFALSE 25606
25515: GO 25517
25517: DISABLE
25518: LD_INT 0
25520: PPUSH
// begin enable ;
25521: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25522: LD_ADDR_VAR 0 1
25526: PUSH
25527: LD_INT 22
25529: PUSH
25530: LD_OWVAR 2
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 25
25544: PUSH
25545: LD_INT 5
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 25
25554: PUSH
25555: LD_INT 9
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 25
25564: PUSH
25565: LD_INT 8
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 69
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25604
// begin SetClass ( i , 1 ) ;
25590: LD_VAR 0 1
25594: PPUSH
25595: LD_INT 1
25597: PPUSH
25598: CALL_OW 336
// end ;
25602: GO 25587
25604: POP
25605: POP
// end ;
25606: PPOPN 1
25608: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25609: LD_EXP 69
25613: PUSH
25614: LD_EXP 73
25618: AND
25619: PUSH
25620: LD_OWVAR 65
25624: PUSH
25625: LD_INT 7
25627: LESS
25628: AND
25629: IFFALSE 25643
25631: GO 25633
25633: DISABLE
// begin enable ;
25634: ENABLE
// game_speed := 7 ;
25635: LD_ADDR_OWVAR 65
25639: PUSH
25640: LD_INT 7
25642: ST_TO_ADDR
// end ;
25643: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25644: LD_EXP 69
25648: PUSH
25649: LD_EXP 76
25653: AND
25654: IFFALSE 25856
25656: GO 25658
25658: DISABLE
25659: LD_INT 0
25661: PPUSH
25662: PPUSH
25663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_INT 81
25671: PUSH
25672: LD_OWVAR 2
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 21
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PPUSH
25695: CALL_OW 69
25699: ST_TO_ADDR
// if not tmp then
25700: LD_VAR 0 3
25704: NOT
25705: IFFALSE 25709
// exit ;
25707: GO 25856
// if tmp > 5 then
25709: LD_VAR 0 3
25713: PUSH
25714: LD_INT 5
25716: GREATER
25717: IFFALSE 25729
// k := 5 else
25719: LD_ADDR_VAR 0 2
25723: PUSH
25724: LD_INT 5
25726: ST_TO_ADDR
25727: GO 25739
// k := tmp ;
25729: LD_ADDR_VAR 0 2
25733: PUSH
25734: LD_VAR 0 3
25738: ST_TO_ADDR
// for i := 1 to k do
25739: LD_ADDR_VAR 0 1
25743: PUSH
25744: DOUBLE
25745: LD_INT 1
25747: DEC
25748: ST_TO_ADDR
25749: LD_VAR 0 2
25753: PUSH
25754: FOR_TO
25755: IFFALSE 25854
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25757: LD_VAR 0 3
25761: PUSH
25762: LD_VAR 0 1
25766: ARRAY
25767: PPUSH
25768: LD_VAR 0 1
25772: PUSH
25773: LD_INT 4
25775: MOD
25776: PUSH
25777: LD_INT 1
25779: PLUS
25780: PPUSH
25781: CALL_OW 259
25785: PUSH
25786: LD_INT 10
25788: LESS
25789: IFFALSE 25852
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25791: LD_VAR 0 3
25795: PUSH
25796: LD_VAR 0 1
25800: ARRAY
25801: PPUSH
25802: LD_VAR 0 1
25806: PUSH
25807: LD_INT 4
25809: MOD
25810: PUSH
25811: LD_INT 1
25813: PLUS
25814: PPUSH
25815: LD_VAR 0 3
25819: PUSH
25820: LD_VAR 0 1
25824: ARRAY
25825: PPUSH
25826: LD_VAR 0 1
25830: PUSH
25831: LD_INT 4
25833: MOD
25834: PUSH
25835: LD_INT 1
25837: PLUS
25838: PPUSH
25839: CALL_OW 259
25843: PUSH
25844: LD_INT 1
25846: PLUS
25847: PPUSH
25848: CALL_OW 237
25852: GO 25754
25854: POP
25855: POP
// end ;
25856: PPOPN 3
25858: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25859: LD_EXP 69
25863: PUSH
25864: LD_EXP 77
25868: AND
25869: IFFALSE 25889
25871: GO 25873
25873: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25874: LD_INT 4
25876: PPUSH
25877: LD_OWVAR 2
25881: PPUSH
25882: LD_INT 0
25884: PPUSH
25885: CALL_OW 324
25889: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25890: LD_EXP 69
25894: PUSH
25895: LD_EXP 106
25899: AND
25900: IFFALSE 25920
25902: GO 25904
25904: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25905: LD_INT 19
25907: PPUSH
25908: LD_OWVAR 2
25912: PPUSH
25913: LD_INT 0
25915: PPUSH
25916: CALL_OW 324
25920: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25921: LD_EXP 69
25925: PUSH
25926: LD_EXP 78
25930: AND
25931: IFFALSE 26033
25933: GO 25935
25935: DISABLE
25936: LD_INT 0
25938: PPUSH
25939: PPUSH
// begin enable ;
25940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25941: LD_ADDR_VAR 0 2
25945: PUSH
25946: LD_INT 22
25948: PUSH
25949: LD_OWVAR 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 34
25963: PUSH
25964: LD_INT 11
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 34
25973: PUSH
25974: LD_INT 30
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: LIST
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PPUSH
25990: CALL_OW 69
25994: ST_TO_ADDR
// if not tmp then
25995: LD_VAR 0 2
25999: NOT
26000: IFFALSE 26004
// exit ;
26002: GO 26033
// for i in tmp do
26004: LD_ADDR_VAR 0 1
26008: PUSH
26009: LD_VAR 0 2
26013: PUSH
26014: FOR_IN
26015: IFFALSE 26031
// begin SetLives ( i , 0 ) ;
26017: LD_VAR 0 1
26021: PPUSH
26022: LD_INT 0
26024: PPUSH
26025: CALL_OW 234
// end ;
26029: GO 26014
26031: POP
26032: POP
// end ;
26033: PPOPN 2
26035: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26036: LD_EXP 69
26040: PUSH
26041: LD_EXP 79
26045: AND
26046: IFFALSE 26066
26048: GO 26050
26050: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26051: LD_INT 32
26053: PPUSH
26054: LD_OWVAR 2
26058: PPUSH
26059: LD_INT 0
26061: PPUSH
26062: CALL_OW 324
26066: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26067: LD_EXP 69
26071: PUSH
26072: LD_EXP 80
26076: AND
26077: IFFALSE 26258
26079: GO 26081
26081: DISABLE
26082: LD_INT 0
26084: PPUSH
26085: PPUSH
26086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26087: LD_ADDR_VAR 0 2
26091: PUSH
26092: LD_INT 22
26094: PUSH
26095: LD_OWVAR 2
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 33
26106: PUSH
26107: LD_INT 3
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PPUSH
26118: CALL_OW 69
26122: ST_TO_ADDR
// if not tmp then
26123: LD_VAR 0 2
26127: NOT
26128: IFFALSE 26132
// exit ;
26130: GO 26258
// side := 0 ;
26132: LD_ADDR_VAR 0 3
26136: PUSH
26137: LD_INT 0
26139: ST_TO_ADDR
// for i := 1 to 8 do
26140: LD_ADDR_VAR 0 1
26144: PUSH
26145: DOUBLE
26146: LD_INT 1
26148: DEC
26149: ST_TO_ADDR
26150: LD_INT 8
26152: PUSH
26153: FOR_TO
26154: IFFALSE 26202
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26156: LD_OWVAR 2
26160: PUSH
26161: LD_VAR 0 1
26165: NONEQUAL
26166: PUSH
26167: LD_OWVAR 2
26171: PPUSH
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL_OW 81
26181: PUSH
26182: LD_INT 2
26184: EQUAL
26185: AND
26186: IFFALSE 26200
// begin side := i ;
26188: LD_ADDR_VAR 0 3
26192: PUSH
26193: LD_VAR 0 1
26197: ST_TO_ADDR
// break ;
26198: GO 26202
// end ;
26200: GO 26153
26202: POP
26203: POP
// if not side then
26204: LD_VAR 0 3
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26258
// for i := 1 to tmp do
26213: LD_ADDR_VAR 0 1
26217: PUSH
26218: DOUBLE
26219: LD_INT 1
26221: DEC
26222: ST_TO_ADDR
26223: LD_VAR 0 2
26227: PUSH
26228: FOR_TO
26229: IFFALSE 26256
// if Prob ( 60 ) then
26231: LD_INT 60
26233: PPUSH
26234: CALL_OW 13
26238: IFFALSE 26254
// SetSide ( i , side ) ;
26240: LD_VAR 0 1
26244: PPUSH
26245: LD_VAR 0 3
26249: PPUSH
26250: CALL_OW 235
26254: GO 26228
26256: POP
26257: POP
// end ;
26258: PPOPN 3
26260: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26261: LD_EXP 69
26265: PUSH
26266: LD_EXP 82
26270: AND
26271: IFFALSE 26390
26273: GO 26275
26275: DISABLE
26276: LD_INT 0
26278: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26279: LD_ADDR_VAR 0 1
26283: PUSH
26284: LD_INT 22
26286: PUSH
26287: LD_OWVAR 2
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 21
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 3
26308: PUSH
26309: LD_INT 23
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: PPUSH
26328: CALL_OW 69
26332: PUSH
26333: FOR_IN
26334: IFFALSE 26388
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26336: LD_VAR 0 1
26340: PPUSH
26341: CALL_OW 257
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 3
26354: PUSH
26355: LD_INT 4
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: IN
26364: IFFALSE 26386
// SetClass ( un , rand ( 1 , 4 ) ) ;
26366: LD_VAR 0 1
26370: PPUSH
26371: LD_INT 1
26373: PPUSH
26374: LD_INT 4
26376: PPUSH
26377: CALL_OW 12
26381: PPUSH
26382: CALL_OW 336
26386: GO 26333
26388: POP
26389: POP
// end ;
26390: PPOPN 1
26392: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26393: LD_EXP 69
26397: PUSH
26398: LD_EXP 81
26402: AND
26403: IFFALSE 26482
26405: GO 26407
26407: DISABLE
26408: LD_INT 0
26410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26411: LD_ADDR_VAR 0 1
26415: PUSH
26416: LD_INT 22
26418: PUSH
26419: LD_OWVAR 2
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 21
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PPUSH
26442: CALL_OW 69
26446: ST_TO_ADDR
// if not tmp then
26447: LD_VAR 0 1
26451: NOT
26452: IFFALSE 26456
// exit ;
26454: GO 26482
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26456: LD_VAR 0 1
26460: PUSH
26461: LD_INT 1
26463: PPUSH
26464: LD_VAR 0 1
26468: PPUSH
26469: CALL_OW 12
26473: ARRAY
26474: PPUSH
26475: LD_INT 100
26477: PPUSH
26478: CALL_OW 234
// end ;
26482: PPOPN 1
26484: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26485: LD_EXP 69
26489: PUSH
26490: LD_EXP 83
26494: AND
26495: IFFALSE 26593
26497: GO 26499
26499: DISABLE
26500: LD_INT 0
26502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26503: LD_ADDR_VAR 0 1
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_OWVAR 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 21
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PPUSH
26534: CALL_OW 69
26538: ST_TO_ADDR
// if not tmp then
26539: LD_VAR 0 1
26543: NOT
26544: IFFALSE 26548
// exit ;
26546: GO 26593
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26548: LD_VAR 0 1
26552: PUSH
26553: LD_INT 1
26555: PPUSH
26556: LD_VAR 0 1
26560: PPUSH
26561: CALL_OW 12
26565: ARRAY
26566: PPUSH
26567: LD_INT 1
26569: PPUSH
26570: LD_INT 4
26572: PPUSH
26573: CALL_OW 12
26577: PPUSH
26578: LD_INT 3000
26580: PPUSH
26581: LD_INT 9000
26583: PPUSH
26584: CALL_OW 12
26588: PPUSH
26589: CALL_OW 492
// end ;
26593: PPOPN 1
26595: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26596: LD_EXP 69
26600: PUSH
26601: LD_EXP 84
26605: AND
26606: IFFALSE 26626
26608: GO 26610
26610: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26611: LD_INT 1
26613: PPUSH
26614: LD_OWVAR 2
26618: PPUSH
26619: LD_INT 0
26621: PPUSH
26622: CALL_OW 324
26626: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26627: LD_EXP 69
26631: PUSH
26632: LD_EXP 85
26636: AND
26637: IFFALSE 26720
26639: GO 26641
26641: DISABLE
26642: LD_INT 0
26644: PPUSH
26645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26646: LD_ADDR_VAR 0 2
26650: PUSH
26651: LD_INT 22
26653: PUSH
26654: LD_OWVAR 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 21
26665: PUSH
26666: LD_INT 3
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PPUSH
26677: CALL_OW 69
26681: ST_TO_ADDR
// if not tmp then
26682: LD_VAR 0 2
26686: NOT
26687: IFFALSE 26691
// exit ;
26689: GO 26720
// for i in tmp do
26691: LD_ADDR_VAR 0 1
26695: PUSH
26696: LD_VAR 0 2
26700: PUSH
26701: FOR_IN
26702: IFFALSE 26718
// SetBLevel ( i , 10 ) ;
26704: LD_VAR 0 1
26708: PPUSH
26709: LD_INT 10
26711: PPUSH
26712: CALL_OW 241
26716: GO 26701
26718: POP
26719: POP
// end ;
26720: PPOPN 2
26722: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26723: LD_EXP 69
26727: PUSH
26728: LD_EXP 86
26732: AND
26733: IFFALSE 26844
26735: GO 26737
26737: DISABLE
26738: LD_INT 0
26740: PPUSH
26741: PPUSH
26742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26743: LD_ADDR_VAR 0 3
26747: PUSH
26748: LD_INT 22
26750: PUSH
26751: LD_OWVAR 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 25
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PPUSH
26774: CALL_OW 69
26778: ST_TO_ADDR
// if not tmp then
26779: LD_VAR 0 3
26783: NOT
26784: IFFALSE 26788
// exit ;
26786: GO 26844
// un := tmp [ rand ( 1 , tmp ) ] ;
26788: LD_ADDR_VAR 0 2
26792: PUSH
26793: LD_VAR 0 3
26797: PUSH
26798: LD_INT 1
26800: PPUSH
26801: LD_VAR 0 3
26805: PPUSH
26806: CALL_OW 12
26810: ARRAY
26811: ST_TO_ADDR
// if Crawls ( un ) then
26812: LD_VAR 0 2
26816: PPUSH
26817: CALL_OW 318
26821: IFFALSE 26832
// ComWalk ( un ) ;
26823: LD_VAR 0 2
26827: PPUSH
26828: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26832: LD_VAR 0 2
26836: PPUSH
26837: LD_INT 5
26839: PPUSH
26840: CALL_OW 336
// end ;
26844: PPOPN 3
26846: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26847: LD_EXP 69
26851: PUSH
26852: LD_EXP 87
26856: AND
26857: PUSH
26858: LD_OWVAR 67
26862: PUSH
26863: LD_INT 4
26865: LESS
26866: AND
26867: IFFALSE 26886
26869: GO 26871
26871: DISABLE
// begin Difficulty := Difficulty + 1 ;
26872: LD_ADDR_OWVAR 67
26876: PUSH
26877: LD_OWVAR 67
26881: PUSH
26882: LD_INT 1
26884: PLUS
26885: ST_TO_ADDR
// end ;
26886: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26887: LD_EXP 69
26891: PUSH
26892: LD_EXP 88
26896: AND
26897: IFFALSE 27000
26899: GO 26901
26901: DISABLE
26902: LD_INT 0
26904: PPUSH
// begin for i := 1 to 5 do
26905: LD_ADDR_VAR 0 1
26909: PUSH
26910: DOUBLE
26911: LD_INT 1
26913: DEC
26914: ST_TO_ADDR
26915: LD_INT 5
26917: PUSH
26918: FOR_TO
26919: IFFALSE 26998
// begin uc_nation := nation_nature ;
26921: LD_ADDR_OWVAR 21
26925: PUSH
26926: LD_INT 0
26928: ST_TO_ADDR
// uc_side := 0 ;
26929: LD_ADDR_OWVAR 20
26933: PUSH
26934: LD_INT 0
26936: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26937: LD_ADDR_OWVAR 29
26941: PUSH
26942: LD_INT 12
26944: PUSH
26945: LD_INT 12
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: ST_TO_ADDR
// hc_agressivity := 20 ;
26952: LD_ADDR_OWVAR 35
26956: PUSH
26957: LD_INT 20
26959: ST_TO_ADDR
// hc_class := class_tiger ;
26960: LD_ADDR_OWVAR 28
26964: PUSH
26965: LD_INT 14
26967: ST_TO_ADDR
// hc_gallery :=  ;
26968: LD_ADDR_OWVAR 33
26972: PUSH
26973: LD_STRING 
26975: ST_TO_ADDR
// hc_name :=  ;
26976: LD_ADDR_OWVAR 26
26980: PUSH
26981: LD_STRING 
26983: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26984: CALL_OW 44
26988: PPUSH
26989: LD_INT 0
26991: PPUSH
26992: CALL_OW 51
// end ;
26996: GO 26918
26998: POP
26999: POP
// end ;
27000: PPOPN 1
27002: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27003: LD_EXP 69
27007: PUSH
27008: LD_EXP 89
27012: AND
27013: IFFALSE 27022
27015: GO 27017
27017: DISABLE
// StreamSibBomb ;
27018: CALL 27023 0 0
27022: END
// export function StreamSibBomb ; var i , x , y ; begin
27023: LD_INT 0
27025: PPUSH
27026: PPUSH
27027: PPUSH
27028: PPUSH
// result := false ;
27029: LD_ADDR_VAR 0 1
27033: PUSH
27034: LD_INT 0
27036: ST_TO_ADDR
// for i := 1 to 16 do
27037: LD_ADDR_VAR 0 2
27041: PUSH
27042: DOUBLE
27043: LD_INT 1
27045: DEC
27046: ST_TO_ADDR
27047: LD_INT 16
27049: PUSH
27050: FOR_TO
27051: IFFALSE 27250
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27053: LD_ADDR_VAR 0 3
27057: PUSH
27058: LD_INT 10
27060: PUSH
27061: LD_INT 20
27063: PUSH
27064: LD_INT 30
27066: PUSH
27067: LD_INT 40
27069: PUSH
27070: LD_INT 50
27072: PUSH
27073: LD_INT 60
27075: PUSH
27076: LD_INT 70
27078: PUSH
27079: LD_INT 80
27081: PUSH
27082: LD_INT 90
27084: PUSH
27085: LD_INT 100
27087: PUSH
27088: LD_INT 110
27090: PUSH
27091: LD_INT 120
27093: PUSH
27094: LD_INT 130
27096: PUSH
27097: LD_INT 140
27099: PUSH
27100: LD_INT 150
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PPUSH
27123: LD_INT 15
27125: PPUSH
27126: CALL_OW 12
27130: ARRAY
27131: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27132: LD_ADDR_VAR 0 4
27136: PUSH
27137: LD_INT 10
27139: PUSH
27140: LD_INT 20
27142: PUSH
27143: LD_INT 30
27145: PUSH
27146: LD_INT 40
27148: PUSH
27149: LD_INT 50
27151: PUSH
27152: LD_INT 60
27154: PUSH
27155: LD_INT 70
27157: PUSH
27158: LD_INT 80
27160: PUSH
27161: LD_INT 90
27163: PUSH
27164: LD_INT 100
27166: PUSH
27167: LD_INT 110
27169: PUSH
27170: LD_INT 120
27172: PUSH
27173: LD_INT 130
27175: PUSH
27176: LD_INT 140
27178: PUSH
27179: LD_INT 150
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: PPUSH
27202: LD_INT 15
27204: PPUSH
27205: CALL_OW 12
27209: ARRAY
27210: ST_TO_ADDR
// if ValidHex ( x , y ) then
27211: LD_VAR 0 3
27215: PPUSH
27216: LD_VAR 0 4
27220: PPUSH
27221: CALL_OW 488
27225: IFFALSE 27248
// begin result := [ x , y ] ;
27227: LD_ADDR_VAR 0 1
27231: PUSH
27232: LD_VAR 0 3
27236: PUSH
27237: LD_VAR 0 4
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: ST_TO_ADDR
// break ;
27246: GO 27250
// end ; end ;
27248: GO 27050
27250: POP
27251: POP
// if result then
27252: LD_VAR 0 1
27256: IFFALSE 27316
// begin ToLua ( playSibBomb() ) ;
27258: LD_STRING playSibBomb()
27260: PPUSH
27261: CALL_OW 559
// wait ( 0 0$14 ) ;
27265: LD_INT 490
27267: PPUSH
27268: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27272: LD_VAR 0 1
27276: PUSH
27277: LD_INT 1
27279: ARRAY
27280: PPUSH
27281: LD_VAR 0 1
27285: PUSH
27286: LD_INT 2
27288: ARRAY
27289: PPUSH
27290: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27294: LD_VAR 0 1
27298: PUSH
27299: LD_INT 1
27301: ARRAY
27302: PPUSH
27303: LD_VAR 0 1
27307: PUSH
27308: LD_INT 2
27310: ARRAY
27311: PPUSH
27312: CALL_OW 429
// end ; end ;
27316: LD_VAR 0 1
27320: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27321: LD_EXP 69
27325: PUSH
27326: LD_EXP 91
27330: AND
27331: IFFALSE 27343
27333: GO 27335
27335: DISABLE
// YouLost (  ) ;
27336: LD_STRING 
27338: PPUSH
27339: CALL_OW 104
27343: END
// every 0 0$1 trigger StreamModeActive and sFog do
27344: LD_EXP 69
27348: PUSH
27349: LD_EXP 90
27353: AND
27354: IFFALSE 27368
27356: GO 27358
27358: DISABLE
// FogOff ( your_side ) ;
27359: LD_OWVAR 2
27363: PPUSH
27364: CALL_OW 344
27368: END
// every 0 0$1 trigger StreamModeActive and sSun do
27369: LD_EXP 69
27373: PUSH
27374: LD_EXP 92
27378: AND
27379: IFFALSE 27407
27381: GO 27383
27383: DISABLE
// begin solar_recharge_percent := 0 ;
27384: LD_ADDR_OWVAR 79
27388: PUSH
27389: LD_INT 0
27391: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27392: LD_INT 10500
27394: PPUSH
27395: CALL_OW 67
// solar_recharge_percent := 100 ;
27399: LD_ADDR_OWVAR 79
27403: PUSH
27404: LD_INT 100
27406: ST_TO_ADDR
// end ;
27407: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27408: LD_EXP 69
27412: PUSH
27413: LD_EXP 93
27417: AND
27418: IFFALSE 27657
27420: GO 27422
27422: DISABLE
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
27427: PPUSH
// begin tmp := [ ] ;
27428: LD_ADDR_VAR 0 3
27432: PUSH
27433: EMPTY
27434: ST_TO_ADDR
// for i := 1 to 6 do
27435: LD_ADDR_VAR 0 1
27439: PUSH
27440: DOUBLE
27441: LD_INT 1
27443: DEC
27444: ST_TO_ADDR
27445: LD_INT 6
27447: PUSH
27448: FOR_TO
27449: IFFALSE 27554
// begin uc_nation := nation_nature ;
27451: LD_ADDR_OWVAR 21
27455: PUSH
27456: LD_INT 0
27458: ST_TO_ADDR
// uc_side := 0 ;
27459: LD_ADDR_OWVAR 20
27463: PUSH
27464: LD_INT 0
27466: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27467: LD_ADDR_OWVAR 29
27471: PUSH
27472: LD_INT 12
27474: PUSH
27475: LD_INT 12
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: ST_TO_ADDR
// hc_agressivity := 20 ;
27482: LD_ADDR_OWVAR 35
27486: PUSH
27487: LD_INT 20
27489: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27490: LD_ADDR_OWVAR 28
27494: PUSH
27495: LD_INT 17
27497: ST_TO_ADDR
// hc_gallery :=  ;
27498: LD_ADDR_OWVAR 33
27502: PUSH
27503: LD_STRING 
27505: ST_TO_ADDR
// hc_name :=  ;
27506: LD_ADDR_OWVAR 26
27510: PUSH
27511: LD_STRING 
27513: ST_TO_ADDR
// un := CreateHuman ;
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: CALL_OW 44
27523: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27524: LD_VAR 0 2
27528: PPUSH
27529: LD_INT 1
27531: PPUSH
27532: CALL_OW 51
// tmp := tmp ^ un ;
27536: LD_ADDR_VAR 0 3
27540: PUSH
27541: LD_VAR 0 3
27545: PUSH
27546: LD_VAR 0 2
27550: ADD
27551: ST_TO_ADDR
// end ;
27552: GO 27448
27554: POP
27555: POP
// repeat wait ( 0 0$1 ) ;
27556: LD_INT 35
27558: PPUSH
27559: CALL_OW 67
// for un in tmp do
27563: LD_ADDR_VAR 0 2
27567: PUSH
27568: LD_VAR 0 3
27572: PUSH
27573: FOR_IN
27574: IFFALSE 27648
// begin if IsDead ( un ) then
27576: LD_VAR 0 2
27580: PPUSH
27581: CALL_OW 301
27585: IFFALSE 27605
// begin tmp := tmp diff un ;
27587: LD_ADDR_VAR 0 3
27591: PUSH
27592: LD_VAR 0 3
27596: PUSH
27597: LD_VAR 0 2
27601: DIFF
27602: ST_TO_ADDR
// continue ;
27603: GO 27573
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27605: LD_VAR 0 2
27609: PPUSH
27610: LD_INT 3
27612: PUSH
27613: LD_INT 22
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PPUSH
27627: CALL_OW 69
27631: PPUSH
27632: LD_VAR 0 2
27636: PPUSH
27637: CALL_OW 74
27641: PPUSH
27642: CALL_OW 115
// end ;
27646: GO 27573
27648: POP
27649: POP
// until not tmp ;
27650: LD_VAR 0 3
27654: NOT
27655: IFFALSE 27556
// end ;
27657: PPOPN 3
27659: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27660: LD_EXP 69
27664: PUSH
27665: LD_EXP 94
27669: AND
27670: IFFALSE 27724
27672: GO 27674
27674: DISABLE
// begin ToLua ( displayTroll(); ) ;
27675: LD_STRING displayTroll();
27677: PPUSH
27678: CALL_OW 559
// wait ( 3 3$00 ) ;
27682: LD_INT 6300
27684: PPUSH
27685: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27689: LD_STRING hideTroll();
27691: PPUSH
27692: CALL_OW 559
// wait ( 1 1$00 ) ;
27696: LD_INT 2100
27698: PPUSH
27699: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27703: LD_STRING displayTroll();
27705: PPUSH
27706: CALL_OW 559
// wait ( 1 1$00 ) ;
27710: LD_INT 2100
27712: PPUSH
27713: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27717: LD_STRING hideTroll();
27719: PPUSH
27720: CALL_OW 559
// end ;
27724: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27725: LD_EXP 69
27729: PUSH
27730: LD_EXP 95
27734: AND
27735: IFFALSE 27798
27737: GO 27739
27739: DISABLE
27740: LD_INT 0
27742: PPUSH
// begin p := 0 ;
27743: LD_ADDR_VAR 0 1
27747: PUSH
27748: LD_INT 0
27750: ST_TO_ADDR
// repeat game_speed := 1 ;
27751: LD_ADDR_OWVAR 65
27755: PUSH
27756: LD_INT 1
27758: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27759: LD_INT 35
27761: PPUSH
27762: CALL_OW 67
// p := p + 1 ;
27766: LD_ADDR_VAR 0 1
27770: PUSH
27771: LD_VAR 0 1
27775: PUSH
27776: LD_INT 1
27778: PLUS
27779: ST_TO_ADDR
// until p >= 60 ;
27780: LD_VAR 0 1
27784: PUSH
27785: LD_INT 60
27787: GREATEREQUAL
27788: IFFALSE 27751
// game_speed := 4 ;
27790: LD_ADDR_OWVAR 65
27794: PUSH
27795: LD_INT 4
27797: ST_TO_ADDR
// end ;
27798: PPOPN 1
27800: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27801: LD_EXP 69
27805: PUSH
27806: LD_EXP 96
27810: AND
27811: IFFALSE 27957
27813: GO 27815
27815: DISABLE
27816: LD_INT 0
27818: PPUSH
27819: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27820: LD_ADDR_VAR 0 1
27824: PUSH
27825: LD_INT 22
27827: PUSH
27828: LD_OWVAR 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: LD_INT 30
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 30
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PPUSH
27869: CALL_OW 69
27873: ST_TO_ADDR
// if not depot then
27874: LD_VAR 0 1
27878: NOT
27879: IFFALSE 27883
// exit ;
27881: GO 27957
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27883: LD_ADDR_VAR 0 2
27887: PUSH
27888: LD_VAR 0 1
27892: PUSH
27893: LD_INT 1
27895: PPUSH
27896: LD_VAR 0 1
27900: PPUSH
27901: CALL_OW 12
27905: ARRAY
27906: PPUSH
27907: CALL_OW 274
27911: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27912: LD_VAR 0 2
27916: PPUSH
27917: LD_INT 1
27919: PPUSH
27920: LD_INT 0
27922: PPUSH
27923: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27927: LD_VAR 0 2
27931: PPUSH
27932: LD_INT 2
27934: PPUSH
27935: LD_INT 0
27937: PPUSH
27938: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27942: LD_VAR 0 2
27946: PPUSH
27947: LD_INT 3
27949: PPUSH
27950: LD_INT 0
27952: PPUSH
27953: CALL_OW 277
// end ;
27957: PPOPN 2
27959: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27960: LD_EXP 69
27964: PUSH
27965: LD_EXP 97
27969: AND
27970: IFFALSE 28067
27972: GO 27974
27974: DISABLE
27975: LD_INT 0
27977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27978: LD_ADDR_VAR 0 1
27982: PUSH
27983: LD_INT 22
27985: PUSH
27986: LD_OWVAR 2
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 21
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 23
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 69
28031: ST_TO_ADDR
// if not tmp then
28032: LD_VAR 0 1
28036: NOT
28037: IFFALSE 28041
// exit ;
28039: GO 28067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28041: LD_VAR 0 1
28045: PUSH
28046: LD_INT 1
28048: PPUSH
28049: LD_VAR 0 1
28053: PPUSH
28054: CALL_OW 12
28058: ARRAY
28059: PPUSH
28060: LD_INT 200
28062: PPUSH
28063: CALL_OW 234
// end ;
28067: PPOPN 1
28069: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28070: LD_EXP 69
28074: PUSH
28075: LD_EXP 98
28079: AND
28080: IFFALSE 28159
28082: GO 28084
28084: DISABLE
28085: LD_INT 0
28087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28088: LD_ADDR_VAR 0 1
28092: PUSH
28093: LD_INT 22
28095: PUSH
28096: LD_OWVAR 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 21
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 69
28123: ST_TO_ADDR
// if not tmp then
28124: LD_VAR 0 1
28128: NOT
28129: IFFALSE 28133
// exit ;
28131: GO 28159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28133: LD_VAR 0 1
28137: PUSH
28138: LD_INT 1
28140: PPUSH
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL_OW 12
28150: ARRAY
28151: PPUSH
28152: LD_INT 60
28154: PPUSH
28155: CALL_OW 234
// end ;
28159: PPOPN 1
28161: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28162: LD_EXP 69
28166: PUSH
28167: LD_EXP 99
28171: AND
28172: IFFALSE 28271
28174: GO 28176
28176: DISABLE
28177: LD_INT 0
28179: PPUSH
28180: PPUSH
// begin enable ;
28181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28182: LD_ADDR_VAR 0 1
28186: PUSH
28187: LD_INT 22
28189: PUSH
28190: LD_OWVAR 2
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 61
28201: PUSH
28202: EMPTY
28203: LIST
28204: PUSH
28205: LD_INT 33
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: PPUSH
28220: CALL_OW 69
28224: ST_TO_ADDR
// if not tmp then
28225: LD_VAR 0 1
28229: NOT
28230: IFFALSE 28234
// exit ;
28232: GO 28271
// for i in tmp do
28234: LD_ADDR_VAR 0 2
28238: PUSH
28239: LD_VAR 0 1
28243: PUSH
28244: FOR_IN
28245: IFFALSE 28269
// if IsControledBy ( i ) then
28247: LD_VAR 0 2
28251: PPUSH
28252: CALL_OW 312
28256: IFFALSE 28267
// ComUnlink ( i ) ;
28258: LD_VAR 0 2
28262: PPUSH
28263: CALL_OW 136
28267: GO 28244
28269: POP
28270: POP
// end ;
28271: PPOPN 2
28273: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28274: LD_EXP 69
28278: PUSH
28279: LD_EXP 100
28283: AND
28284: IFFALSE 28424
28286: GO 28288
28288: DISABLE
28289: LD_INT 0
28291: PPUSH
28292: PPUSH
// begin ToLua ( displayPowell(); ) ;
28293: LD_STRING displayPowell();
28295: PPUSH
28296: CALL_OW 559
// uc_side := 0 ;
28300: LD_ADDR_OWVAR 20
28304: PUSH
28305: LD_INT 0
28307: ST_TO_ADDR
// uc_nation := 2 ;
28308: LD_ADDR_OWVAR 21
28312: PUSH
28313: LD_INT 2
28315: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28316: LD_ADDR_OWVAR 37
28320: PUSH
28321: LD_INT 14
28323: ST_TO_ADDR
// vc_engine := engine_siberite ;
28324: LD_ADDR_OWVAR 39
28328: PUSH
28329: LD_INT 3
28331: ST_TO_ADDR
// vc_control := control_apeman ;
28332: LD_ADDR_OWVAR 38
28336: PUSH
28337: LD_INT 5
28339: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28340: LD_ADDR_OWVAR 40
28344: PUSH
28345: LD_INT 29
28347: ST_TO_ADDR
// un := CreateVehicle ;
28348: LD_ADDR_VAR 0 2
28352: PUSH
28353: CALL_OW 45
28357: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28358: LD_VAR 0 2
28362: PPUSH
28363: LD_INT 1
28365: PPUSH
28366: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28370: LD_INT 35
28372: PPUSH
28373: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_INT 22
28384: PUSH
28385: LD_OWVAR 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 69
28398: PPUSH
28399: LD_VAR 0 2
28403: PPUSH
28404: CALL_OW 74
28408: PPUSH
28409: CALL_OW 115
// until IsDead ( un ) ;
28413: LD_VAR 0 2
28417: PPUSH
28418: CALL_OW 301
28422: IFFALSE 28370
// end ;
28424: PPOPN 2
28426: END
// every 0 0$1 trigger StreamModeActive and sStu do
28427: LD_EXP 69
28431: PUSH
28432: LD_EXP 108
28436: AND
28437: IFFALSE 28453
28439: GO 28441
28441: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28442: LD_STRING displayStucuk();
28444: PPUSH
28445: CALL_OW 559
// ResetFog ;
28449: CALL_OW 335
// end ;
28453: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28454: LD_EXP 69
28458: PUSH
28459: LD_EXP 101
28463: AND
28464: IFFALSE 28605
28466: GO 28468
28468: DISABLE
28469: LD_INT 0
28471: PPUSH
28472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28473: LD_ADDR_VAR 0 2
28477: PUSH
28478: LD_INT 22
28480: PUSH
28481: LD_OWVAR 2
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 21
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PPUSH
28504: CALL_OW 69
28508: ST_TO_ADDR
// if not tmp then
28509: LD_VAR 0 2
28513: NOT
28514: IFFALSE 28518
// exit ;
28516: GO 28605
// un := tmp [ rand ( 1 , tmp ) ] ;
28518: LD_ADDR_VAR 0 1
28522: PUSH
28523: LD_VAR 0 2
28527: PUSH
28528: LD_INT 1
28530: PPUSH
28531: LD_VAR 0 2
28535: PPUSH
28536: CALL_OW 12
28540: ARRAY
28541: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28542: LD_VAR 0 1
28546: PPUSH
28547: LD_INT 0
28549: PPUSH
28550: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28554: LD_VAR 0 1
28558: PPUSH
28559: LD_OWVAR 3
28563: PUSH
28564: LD_VAR 0 1
28568: DIFF
28569: PPUSH
28570: LD_VAR 0 1
28574: PPUSH
28575: CALL_OW 74
28579: PPUSH
28580: CALL_OW 115
// wait ( 0 0$20 ) ;
28584: LD_INT 700
28586: PPUSH
28587: CALL_OW 67
// SetSide ( un , your_side ) ;
28591: LD_VAR 0 1
28595: PPUSH
28596: LD_OWVAR 2
28600: PPUSH
28601: CALL_OW 235
// end ;
28605: PPOPN 2
28607: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28608: LD_EXP 69
28612: PUSH
28613: LD_EXP 102
28617: AND
28618: IFFALSE 28724
28620: GO 28622
28622: DISABLE
28623: LD_INT 0
28625: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28626: LD_ADDR_VAR 0 1
28630: PUSH
28631: LD_INT 22
28633: PUSH
28634: LD_OWVAR 2
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: LD_INT 30
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 30
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PPUSH
28675: CALL_OW 69
28679: ST_TO_ADDR
// if not depot then
28680: LD_VAR 0 1
28684: NOT
28685: IFFALSE 28689
// exit ;
28687: GO 28724
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28689: LD_VAR 0 1
28693: PUSH
28694: LD_INT 1
28696: ARRAY
28697: PPUSH
28698: CALL_OW 250
28702: PPUSH
28703: LD_VAR 0 1
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: CALL_OW 251
28716: PPUSH
28717: LD_INT 70
28719: PPUSH
28720: CALL_OW 495
// end ;
28724: PPOPN 1
28726: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28727: LD_EXP 69
28731: PUSH
28732: LD_EXP 103
28736: AND
28737: IFFALSE 28948
28739: GO 28741
28741: DISABLE
28742: LD_INT 0
28744: PPUSH
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28749: LD_ADDR_VAR 0 5
28753: PUSH
28754: LD_INT 22
28756: PUSH
28757: LD_OWVAR 2
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 21
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: ST_TO_ADDR
// if not tmp then
28785: LD_VAR 0 5
28789: NOT
28790: IFFALSE 28794
// exit ;
28792: GO 28948
// for i in tmp do
28794: LD_ADDR_VAR 0 1
28798: PUSH
28799: LD_VAR 0 5
28803: PUSH
28804: FOR_IN
28805: IFFALSE 28946
// begin d := rand ( 0 , 5 ) ;
28807: LD_ADDR_VAR 0 4
28811: PUSH
28812: LD_INT 0
28814: PPUSH
28815: LD_INT 5
28817: PPUSH
28818: CALL_OW 12
28822: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28823: LD_ADDR_VAR 0 2
28827: PUSH
28828: LD_VAR 0 1
28832: PPUSH
28833: CALL_OW 250
28837: PPUSH
28838: LD_VAR 0 4
28842: PPUSH
28843: LD_INT 3
28845: PPUSH
28846: LD_INT 12
28848: PPUSH
28849: CALL_OW 12
28853: PPUSH
28854: CALL_OW 272
28858: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28859: LD_ADDR_VAR 0 3
28863: PUSH
28864: LD_VAR 0 1
28868: PPUSH
28869: CALL_OW 251
28873: PPUSH
28874: LD_VAR 0 4
28878: PPUSH
28879: LD_INT 3
28881: PPUSH
28882: LD_INT 12
28884: PPUSH
28885: CALL_OW 12
28889: PPUSH
28890: CALL_OW 273
28894: ST_TO_ADDR
// if ValidHex ( x , y ) then
28895: LD_VAR 0 2
28899: PPUSH
28900: LD_VAR 0 3
28904: PPUSH
28905: CALL_OW 488
28909: IFFALSE 28944
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28911: LD_VAR 0 1
28915: PPUSH
28916: LD_VAR 0 2
28920: PPUSH
28921: LD_VAR 0 3
28925: PPUSH
28926: LD_INT 3
28928: PPUSH
28929: LD_INT 6
28931: PPUSH
28932: CALL_OW 12
28936: PPUSH
28937: LD_INT 1
28939: PPUSH
28940: CALL_OW 483
// end ;
28944: GO 28804
28946: POP
28947: POP
// end ;
28948: PPOPN 5
28950: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28951: LD_EXP 69
28955: PUSH
28956: LD_EXP 104
28960: AND
28961: IFFALSE 29055
28963: GO 28965
28965: DISABLE
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28970: LD_ADDR_VAR 0 2
28974: PUSH
28975: LD_INT 22
28977: PUSH
28978: LD_OWVAR 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 32
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 21
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 69
29016: ST_TO_ADDR
// if not tmp then
29017: LD_VAR 0 2
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29055
// for i in tmp do
29026: LD_ADDR_VAR 0 1
29030: PUSH
29031: LD_VAR 0 2
29035: PUSH
29036: FOR_IN
29037: IFFALSE 29053
// SetFuel ( i , 0 ) ;
29039: LD_VAR 0 1
29043: PPUSH
29044: LD_INT 0
29046: PPUSH
29047: CALL_OW 240
29051: GO 29036
29053: POP
29054: POP
// end ;
29055: PPOPN 2
29057: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29058: LD_EXP 69
29062: PUSH
29063: LD_EXP 105
29067: AND
29068: IFFALSE 29134
29070: GO 29072
29072: DISABLE
29073: LD_INT 0
29075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29076: LD_ADDR_VAR 0 1
29080: PUSH
29081: LD_INT 22
29083: PUSH
29084: LD_OWVAR 2
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 30
29095: PUSH
29096: LD_INT 29
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PPUSH
29107: CALL_OW 69
29111: ST_TO_ADDR
// if not tmp then
29112: LD_VAR 0 1
29116: NOT
29117: IFFALSE 29121
// exit ;
29119: GO 29134
// DestroyUnit ( tmp [ 1 ] ) ;
29121: LD_VAR 0 1
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: CALL_OW 65
// end ;
29134: PPOPN 1
29136: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29137: LD_EXP 69
29141: PUSH
29142: LD_EXP 107
29146: AND
29147: IFFALSE 29276
29149: GO 29151
29151: DISABLE
29152: LD_INT 0
29154: PPUSH
// begin uc_side := 0 ;
29155: LD_ADDR_OWVAR 20
29159: PUSH
29160: LD_INT 0
29162: ST_TO_ADDR
// uc_nation := nation_arabian ;
29163: LD_ADDR_OWVAR 21
29167: PUSH
29168: LD_INT 2
29170: ST_TO_ADDR
// hc_gallery :=  ;
29171: LD_ADDR_OWVAR 33
29175: PUSH
29176: LD_STRING 
29178: ST_TO_ADDR
// hc_name :=  ;
29179: LD_ADDR_OWVAR 26
29183: PUSH
29184: LD_STRING 
29186: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29187: LD_INT 1
29189: PPUSH
29190: LD_INT 11
29192: PPUSH
29193: LD_INT 10
29195: PPUSH
29196: CALL_OW 380
// un := CreateHuman ;
29200: LD_ADDR_VAR 0 1
29204: PUSH
29205: CALL_OW 44
29209: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29210: LD_VAR 0 1
29214: PPUSH
29215: LD_INT 1
29217: PPUSH
29218: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29222: LD_INT 35
29224: PPUSH
29225: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29229: LD_VAR 0 1
29233: PPUSH
29234: LD_INT 22
29236: PUSH
29237: LD_OWVAR 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PPUSH
29246: CALL_OW 69
29250: PPUSH
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 74
29260: PPUSH
29261: CALL_OW 115
// until IsDead ( un ) ;
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 301
29274: IFFALSE 29222
// end ;
29276: PPOPN 1
29278: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29279: LD_EXP 69
29283: PUSH
29284: LD_EXP 109
29288: AND
29289: IFFALSE 29301
29291: GO 29293
29293: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29294: LD_STRING earthquake(getX(game), 0, 32)
29296: PPUSH
29297: CALL_OW 559
29301: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29302: LD_EXP 69
29306: PUSH
29307: LD_EXP 110
29311: AND
29312: IFFALSE 29403
29314: GO 29316
29316: DISABLE
29317: LD_INT 0
29319: PPUSH
// begin enable ;
29320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29321: LD_ADDR_VAR 0 1
29325: PUSH
29326: LD_INT 22
29328: PUSH
29329: LD_OWVAR 2
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 21
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 33
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 69
29367: ST_TO_ADDR
// if not tmp then
29368: LD_VAR 0 1
29372: NOT
29373: IFFALSE 29377
// exit ;
29375: GO 29403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29377: LD_VAR 0 1
29381: PUSH
29382: LD_INT 1
29384: PPUSH
29385: LD_VAR 0 1
29389: PPUSH
29390: CALL_OW 12
29394: ARRAY
29395: PPUSH
29396: LD_INT 1
29398: PPUSH
29399: CALL_OW 234
// end ;
29403: PPOPN 1
29405: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29406: LD_EXP 69
29410: PUSH
29411: LD_EXP 111
29415: AND
29416: IFFALSE 29557
29418: GO 29420
29420: DISABLE
29421: LD_INT 0
29423: PPUSH
29424: PPUSH
29425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29426: LD_ADDR_VAR 0 3
29430: PUSH
29431: LD_INT 22
29433: PUSH
29434: LD_OWVAR 2
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 25
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PPUSH
29457: CALL_OW 69
29461: ST_TO_ADDR
// if not tmp then
29462: LD_VAR 0 3
29466: NOT
29467: IFFALSE 29471
// exit ;
29469: GO 29557
// un := tmp [ rand ( 1 , tmp ) ] ;
29471: LD_ADDR_VAR 0 2
29475: PUSH
29476: LD_VAR 0 3
29480: PUSH
29481: LD_INT 1
29483: PPUSH
29484: LD_VAR 0 3
29488: PPUSH
29489: CALL_OW 12
29493: ARRAY
29494: ST_TO_ADDR
// if Crawls ( un ) then
29495: LD_VAR 0 2
29499: PPUSH
29500: CALL_OW 318
29504: IFFALSE 29515
// ComWalk ( un ) ;
29506: LD_VAR 0 2
29510: PPUSH
29511: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29515: LD_VAR 0 2
29519: PPUSH
29520: LD_INT 9
29522: PPUSH
29523: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29527: LD_INT 28
29529: PPUSH
29530: LD_OWVAR 2
29534: PPUSH
29535: LD_INT 2
29537: PPUSH
29538: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29542: LD_INT 29
29544: PPUSH
29545: LD_OWVAR 2
29549: PPUSH
29550: LD_INT 2
29552: PPUSH
29553: CALL_OW 322
// end ;
29557: PPOPN 3
29559: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29560: LD_EXP 69
29564: PUSH
29565: LD_EXP 112
29569: AND
29570: IFFALSE 29681
29572: GO 29574
29574: DISABLE
29575: LD_INT 0
29577: PPUSH
29578: PPUSH
29579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_INT 22
29587: PUSH
29588: LD_OWVAR 2
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 25
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 69
29615: ST_TO_ADDR
// if not tmp then
29616: LD_VAR 0 3
29620: NOT
29621: IFFALSE 29625
// exit ;
29623: GO 29681
// un := tmp [ rand ( 1 , tmp ) ] ;
29625: LD_ADDR_VAR 0 2
29629: PUSH
29630: LD_VAR 0 3
29634: PUSH
29635: LD_INT 1
29637: PPUSH
29638: LD_VAR 0 3
29642: PPUSH
29643: CALL_OW 12
29647: ARRAY
29648: ST_TO_ADDR
// if Crawls ( un ) then
29649: LD_VAR 0 2
29653: PPUSH
29654: CALL_OW 318
29658: IFFALSE 29669
// ComWalk ( un ) ;
29660: LD_VAR 0 2
29664: PPUSH
29665: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29669: LD_VAR 0 2
29673: PPUSH
29674: LD_INT 8
29676: PPUSH
29677: CALL_OW 336
// end ;
29681: PPOPN 3
29683: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29684: LD_EXP 69
29688: PUSH
29689: LD_EXP 113
29693: AND
29694: IFFALSE 29838
29696: GO 29698
29698: DISABLE
29699: LD_INT 0
29701: PPUSH
29702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29703: LD_ADDR_VAR 0 2
29707: PUSH
29708: LD_INT 22
29710: PUSH
29711: LD_OWVAR 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 21
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 34
29735: PUSH
29736: LD_INT 12
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 34
29745: PUSH
29746: LD_INT 51
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 34
29755: PUSH
29756: LD_INT 32
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: PPUSH
29774: CALL_OW 69
29778: ST_TO_ADDR
// if not tmp then
29779: LD_VAR 0 2
29783: NOT
29784: IFFALSE 29788
// exit ;
29786: GO 29838
// for i in tmp do
29788: LD_ADDR_VAR 0 1
29792: PUSH
29793: LD_VAR 0 2
29797: PUSH
29798: FOR_IN
29799: IFFALSE 29836
// if GetCargo ( i , mat_artifact ) = 0 then
29801: LD_VAR 0 1
29805: PPUSH
29806: LD_INT 4
29808: PPUSH
29809: CALL_OW 289
29813: PUSH
29814: LD_INT 0
29816: EQUAL
29817: IFFALSE 29834
// SetCargo ( i , mat_siberit , 100 ) ;
29819: LD_VAR 0 1
29823: PPUSH
29824: LD_INT 3
29826: PPUSH
29827: LD_INT 100
29829: PPUSH
29830: CALL_OW 290
29834: GO 29798
29836: POP
29837: POP
// end ;
29838: PPOPN 2
29840: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29841: LD_EXP 69
29845: PUSH
29846: LD_EXP 114
29850: AND
29851: IFFALSE 30034
29853: GO 29855
29855: DISABLE
29856: LD_INT 0
29858: PPUSH
29859: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29860: LD_ADDR_VAR 0 2
29864: PUSH
29865: LD_INT 22
29867: PUSH
29868: LD_OWVAR 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PPUSH
29877: CALL_OW 69
29881: ST_TO_ADDR
// if not tmp then
29882: LD_VAR 0 2
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 30034
// for i := 1 to 2 do
29891: LD_ADDR_VAR 0 1
29895: PUSH
29896: DOUBLE
29897: LD_INT 1
29899: DEC
29900: ST_TO_ADDR
29901: LD_INT 2
29903: PUSH
29904: FOR_TO
29905: IFFALSE 30032
// begin uc_side := your_side ;
29907: LD_ADDR_OWVAR 20
29911: PUSH
29912: LD_OWVAR 2
29916: ST_TO_ADDR
// uc_nation := nation_american ;
29917: LD_ADDR_OWVAR 21
29921: PUSH
29922: LD_INT 1
29924: ST_TO_ADDR
// vc_chassis := us_morphling ;
29925: LD_ADDR_OWVAR 37
29929: PUSH
29930: LD_INT 5
29932: ST_TO_ADDR
// vc_engine := engine_siberite ;
29933: LD_ADDR_OWVAR 39
29937: PUSH
29938: LD_INT 3
29940: ST_TO_ADDR
// vc_control := control_computer ;
29941: LD_ADDR_OWVAR 38
29945: PUSH
29946: LD_INT 3
29948: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29949: LD_ADDR_OWVAR 40
29953: PUSH
29954: LD_INT 10
29956: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29957: LD_VAR 0 2
29961: PUSH
29962: LD_INT 1
29964: ARRAY
29965: PPUSH
29966: CALL_OW 310
29970: NOT
29971: IFFALSE 30018
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29973: CALL_OW 45
29977: PPUSH
29978: LD_VAR 0 2
29982: PUSH
29983: LD_INT 1
29985: ARRAY
29986: PPUSH
29987: CALL_OW 250
29991: PPUSH
29992: LD_VAR 0 2
29996: PUSH
29997: LD_INT 1
29999: ARRAY
30000: PPUSH
30001: CALL_OW 251
30005: PPUSH
30006: LD_INT 12
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL_OW 50
30016: GO 30030
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30018: CALL_OW 45
30022: PPUSH
30023: LD_INT 1
30025: PPUSH
30026: CALL_OW 51
// end ;
30030: GO 29904
30032: POP
30033: POP
// end ;
30034: PPOPN 2
30036: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30037: LD_EXP 69
30041: PUSH
30042: LD_EXP 115
30046: AND
30047: IFFALSE 30269
30049: GO 30051
30051: DISABLE
30052: LD_INT 0
30054: PPUSH
30055: PPUSH
30056: PPUSH
30057: PPUSH
30058: PPUSH
30059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30060: LD_ADDR_VAR 0 6
30064: PUSH
30065: LD_INT 22
30067: PUSH
30068: LD_OWVAR 2
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 21
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 23
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: PPUSH
30109: CALL_OW 69
30113: ST_TO_ADDR
// if not tmp then
30114: LD_VAR 0 6
30118: NOT
30119: IFFALSE 30123
// exit ;
30121: GO 30269
// s1 := rand ( 1 , 4 ) ;
30123: LD_ADDR_VAR 0 2
30127: PUSH
30128: LD_INT 1
30130: PPUSH
30131: LD_INT 4
30133: PPUSH
30134: CALL_OW 12
30138: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30139: LD_ADDR_VAR 0 4
30143: PUSH
30144: LD_VAR 0 6
30148: PUSH
30149: LD_INT 1
30151: ARRAY
30152: PPUSH
30153: LD_VAR 0 2
30157: PPUSH
30158: CALL_OW 259
30162: ST_TO_ADDR
// if s1 = 1 then
30163: LD_VAR 0 2
30167: PUSH
30168: LD_INT 1
30170: EQUAL
30171: IFFALSE 30191
// s2 := rand ( 2 , 4 ) else
30173: LD_ADDR_VAR 0 3
30177: PUSH
30178: LD_INT 2
30180: PPUSH
30181: LD_INT 4
30183: PPUSH
30184: CALL_OW 12
30188: ST_TO_ADDR
30189: GO 30199
// s2 := 1 ;
30191: LD_ADDR_VAR 0 3
30195: PUSH
30196: LD_INT 1
30198: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_VAR 0 6
30208: PUSH
30209: LD_INT 1
30211: ARRAY
30212: PPUSH
30213: LD_VAR 0 3
30217: PPUSH
30218: CALL_OW 259
30222: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30223: LD_VAR 0 6
30227: PUSH
30228: LD_INT 1
30230: ARRAY
30231: PPUSH
30232: LD_VAR 0 2
30236: PPUSH
30237: LD_VAR 0 5
30241: PPUSH
30242: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30246: LD_VAR 0 6
30250: PUSH
30251: LD_INT 1
30253: ARRAY
30254: PPUSH
30255: LD_VAR 0 3
30259: PPUSH
30260: LD_VAR 0 4
30264: PPUSH
30265: CALL_OW 237
// end ;
30269: PPOPN 6
30271: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30272: LD_EXP 69
30276: PUSH
30277: LD_EXP 116
30281: AND
30282: IFFALSE 30361
30284: GO 30286
30286: DISABLE
30287: LD_INT 0
30289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30290: LD_ADDR_VAR 0 1
30294: PUSH
30295: LD_INT 22
30297: PUSH
30298: LD_OWVAR 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 30
30309: PUSH
30310: LD_INT 3
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PPUSH
30321: CALL_OW 69
30325: ST_TO_ADDR
// if not tmp then
30326: LD_VAR 0 1
30330: NOT
30331: IFFALSE 30335
// exit ;
30333: GO 30361
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30335: LD_VAR 0 1
30339: PUSH
30340: LD_INT 1
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 12
30352: ARRAY
30353: PPUSH
30354: LD_INT 1
30356: PPUSH
30357: CALL_OW 234
// end ;
30361: PPOPN 1
30363: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30364: LD_EXP 69
30368: PUSH
30369: LD_EXP 117
30373: AND
30374: IFFALSE 30486
30376: GO 30378
30378: DISABLE
30379: LD_INT 0
30381: PPUSH
30382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30383: LD_ADDR_VAR 0 2
30387: PUSH
30388: LD_INT 22
30390: PUSH
30391: LD_OWVAR 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: LD_INT 30
30405: PUSH
30406: LD_INT 27
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 30
30415: PUSH
30416: LD_INT 26
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 30
30425: PUSH
30426: LD_INT 28
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: ST_TO_ADDR
// if not tmp then
30448: LD_VAR 0 2
30452: NOT
30453: IFFALSE 30457
// exit ;
30455: GO 30486
// for i in tmp do
30457: LD_ADDR_VAR 0 1
30461: PUSH
30462: LD_VAR 0 2
30466: PUSH
30467: FOR_IN
30468: IFFALSE 30484
// SetLives ( i , 1 ) ;
30470: LD_VAR 0 1
30474: PPUSH
30475: LD_INT 1
30477: PPUSH
30478: CALL_OW 234
30482: GO 30467
30484: POP
30485: POP
// end ;
30486: PPOPN 2
30488: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30489: LD_EXP 69
30493: PUSH
30494: LD_EXP 118
30498: AND
30499: IFFALSE 30786
30501: GO 30503
30503: DISABLE
30504: LD_INT 0
30506: PPUSH
30507: PPUSH
30508: PPUSH
// begin i := rand ( 1 , 7 ) ;
30509: LD_ADDR_VAR 0 1
30513: PUSH
30514: LD_INT 1
30516: PPUSH
30517: LD_INT 7
30519: PPUSH
30520: CALL_OW 12
30524: ST_TO_ADDR
// case i of 1 :
30525: LD_VAR 0 1
30529: PUSH
30530: LD_INT 1
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30548
30538: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30539: LD_STRING earthquake(getX(game), 0, 32)
30541: PPUSH
30542: CALL_OW 559
30546: GO 30786
30548: LD_INT 2
30550: DOUBLE
30551: EQUAL
30552: IFTRUE 30556
30554: GO 30570
30556: POP
// begin ToLua ( displayStucuk(); ) ;
30557: LD_STRING displayStucuk();
30559: PPUSH
30560: CALL_OW 559
// ResetFog ;
30564: CALL_OW 335
// end ; 3 :
30568: GO 30786
30570: LD_INT 3
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30682
30578: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30579: LD_ADDR_VAR 0 2
30583: PUSH
30584: LD_INT 22
30586: PUSH
30587: LD_OWVAR 2
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 25
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PPUSH
30610: CALL_OW 69
30614: ST_TO_ADDR
// if not tmp then
30615: LD_VAR 0 2
30619: NOT
30620: IFFALSE 30624
// exit ;
30622: GO 30786
// un := tmp [ rand ( 1 , tmp ) ] ;
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_VAR 0 2
30633: PUSH
30634: LD_INT 1
30636: PPUSH
30637: LD_VAR 0 2
30641: PPUSH
30642: CALL_OW 12
30646: ARRAY
30647: ST_TO_ADDR
// if Crawls ( un ) then
30648: LD_VAR 0 3
30652: PPUSH
30653: CALL_OW 318
30657: IFFALSE 30668
// ComWalk ( un ) ;
30659: LD_VAR 0 3
30663: PPUSH
30664: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30668: LD_VAR 0 3
30672: PPUSH
30673: LD_INT 8
30675: PPUSH
30676: CALL_OW 336
// end ; 4 :
30680: GO 30786
30682: LD_INT 4
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30764
30690: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30691: LD_ADDR_VAR 0 2
30695: PUSH
30696: LD_INT 22
30698: PUSH
30699: LD_OWVAR 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 30
30710: PUSH
30711: LD_INT 29
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PPUSH
30722: CALL_OW 69
30726: ST_TO_ADDR
// if not tmp then
30727: LD_VAR 0 2
30731: NOT
30732: IFFALSE 30736
// exit ;
30734: GO 30786
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30736: LD_VAR 0 2
30740: PUSH
30741: LD_INT 1
30743: ARRAY
30744: PPUSH
30745: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30749: LD_VAR 0 2
30753: PUSH
30754: LD_INT 1
30756: ARRAY
30757: PPUSH
30758: CALL_OW 65
// end ; 5 .. 7 :
30762: GO 30786
30764: LD_INT 5
30766: DOUBLE
30767: GREATEREQUAL
30768: IFFALSE 30776
30770: LD_INT 7
30772: DOUBLE
30773: LESSEQUAL
30774: IFTRUE 30778
30776: GO 30785
30778: POP
// StreamSibBomb ; end ;
30779: CALL 27023 0 0
30783: GO 30786
30785: POP
// end ;
30786: PPOPN 3
30788: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30789: LD_EXP 69
30793: PUSH
30794: LD_EXP 119
30798: AND
30799: IFFALSE 30955
30801: GO 30803
30803: DISABLE
30804: LD_INT 0
30806: PPUSH
30807: PPUSH
30808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30809: LD_ADDR_VAR 0 2
30813: PUSH
30814: LD_INT 81
30816: PUSH
30817: LD_OWVAR 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 21
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 21
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PPUSH
30858: CALL_OW 69
30862: ST_TO_ADDR
// if not tmp then
30863: LD_VAR 0 2
30867: NOT
30868: IFFALSE 30872
// exit ;
30870: GO 30955
// p := 0 ;
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 0
30879: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30880: LD_INT 35
30882: PPUSH
30883: CALL_OW 67
// p := p + 1 ;
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_VAR 0 3
30896: PUSH
30897: LD_INT 1
30899: PLUS
30900: ST_TO_ADDR
// for i in tmp do
30901: LD_ADDR_VAR 0 1
30905: PUSH
30906: LD_VAR 0 2
30910: PUSH
30911: FOR_IN
30912: IFFALSE 30943
// if GetLives ( i ) < 1000 then
30914: LD_VAR 0 1
30918: PPUSH
30919: CALL_OW 256
30923: PUSH
30924: LD_INT 1000
30926: LESS
30927: IFFALSE 30941
// SetLives ( i , 1000 ) ;
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_INT 1000
30936: PPUSH
30937: CALL_OW 234
30941: GO 30911
30943: POP
30944: POP
// until p > 20 ;
30945: LD_VAR 0 3
30949: PUSH
30950: LD_INT 20
30952: GREATER
30953: IFFALSE 30880
// end ;
30955: PPOPN 3
30957: END
// every 0 0$1 trigger StreamModeActive and sTime do
30958: LD_EXP 69
30962: PUSH
30963: LD_EXP 120
30967: AND
30968: IFFALSE 31003
30970: GO 30972
30972: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30973: LD_INT 28
30975: PPUSH
30976: LD_OWVAR 2
30980: PPUSH
30981: LD_INT 2
30983: PPUSH
30984: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30988: LD_INT 30
30990: PPUSH
30991: LD_OWVAR 2
30995: PPUSH
30996: LD_INT 2
30998: PPUSH
30999: CALL_OW 322
// end ;
31003: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31004: LD_EXP 69
31008: PUSH
31009: LD_EXP 121
31013: AND
31014: IFFALSE 31135
31016: GO 31018
31018: DISABLE
31019: LD_INT 0
31021: PPUSH
31022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31023: LD_ADDR_VAR 0 2
31027: PUSH
31028: LD_INT 22
31030: PUSH
31031: LD_OWVAR 2
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 21
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: LD_INT 23
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: PPUSH
31072: CALL_OW 69
31076: ST_TO_ADDR
// if not tmp then
31077: LD_VAR 0 2
31081: NOT
31082: IFFALSE 31086
// exit ;
31084: GO 31135
// for i in tmp do
31086: LD_ADDR_VAR 0 1
31090: PUSH
31091: LD_VAR 0 2
31095: PUSH
31096: FOR_IN
31097: IFFALSE 31133
// begin if Crawls ( i ) then
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 318
31108: IFFALSE 31119
// ComWalk ( i ) ;
31110: LD_VAR 0 1
31114: PPUSH
31115: CALL_OW 138
// SetClass ( i , 2 ) ;
31119: LD_VAR 0 1
31123: PPUSH
31124: LD_INT 2
31126: PPUSH
31127: CALL_OW 336
// end ;
31131: GO 31096
31133: POP
31134: POP
// end ;
31135: PPOPN 2
31137: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31138: LD_EXP 69
31142: PUSH
31143: LD_EXP 122
31147: AND
31148: IFFALSE 31436
31150: GO 31152
31152: DISABLE
31153: LD_INT 0
31155: PPUSH
31156: PPUSH
31157: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31158: LD_OWVAR 2
31162: PPUSH
31163: LD_INT 9
31165: PPUSH
31166: LD_INT 1
31168: PPUSH
31169: LD_INT 1
31171: PPUSH
31172: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31176: LD_INT 9
31178: PPUSH
31179: LD_OWVAR 2
31183: PPUSH
31184: CALL_OW 343
// uc_side := 9 ;
31188: LD_ADDR_OWVAR 20
31192: PUSH
31193: LD_INT 9
31195: ST_TO_ADDR
// uc_nation := 2 ;
31196: LD_ADDR_OWVAR 21
31200: PUSH
31201: LD_INT 2
31203: ST_TO_ADDR
// hc_name := Dark Warrior ;
31204: LD_ADDR_OWVAR 26
31208: PUSH
31209: LD_STRING Dark Warrior
31211: ST_TO_ADDR
// hc_gallery :=  ;
31212: LD_ADDR_OWVAR 33
31216: PUSH
31217: LD_STRING 
31219: ST_TO_ADDR
// hc_noskilllimit := true ;
31220: LD_ADDR_OWVAR 76
31224: PUSH
31225: LD_INT 1
31227: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31228: LD_ADDR_OWVAR 31
31232: PUSH
31233: LD_INT 30
31235: PUSH
31236: LD_INT 30
31238: PUSH
31239: LD_INT 30
31241: PUSH
31242: LD_INT 30
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: ST_TO_ADDR
// un := CreateHuman ;
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: CALL_OW 44
31260: ST_TO_ADDR
// hc_noskilllimit := false ;
31261: LD_ADDR_OWVAR 76
31265: PUSH
31266: LD_INT 0
31268: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31269: LD_VAR 0 3
31273: PPUSH
31274: LD_INT 1
31276: PPUSH
31277: CALL_OW 51
// ToLua ( playRanger() ) ;
31281: LD_STRING playRanger()
31283: PPUSH
31284: CALL_OW 559
// p := 0 ;
31288: LD_ADDR_VAR 0 2
31292: PUSH
31293: LD_INT 0
31295: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31296: LD_INT 35
31298: PPUSH
31299: CALL_OW 67
// p := p + 1 ;
31303: LD_ADDR_VAR 0 2
31307: PUSH
31308: LD_VAR 0 2
31312: PUSH
31313: LD_INT 1
31315: PLUS
31316: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31317: LD_VAR 0 3
31321: PPUSH
31322: CALL_OW 256
31326: PUSH
31327: LD_INT 1000
31329: LESS
31330: IFFALSE 31344
// SetLives ( un , 1000 ) ;
31332: LD_VAR 0 3
31336: PPUSH
31337: LD_INT 1000
31339: PPUSH
31340: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31344: LD_VAR 0 3
31348: PPUSH
31349: LD_INT 81
31351: PUSH
31352: LD_OWVAR 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 91
31363: PUSH
31364: LD_VAR 0 3
31368: PUSH
31369: LD_INT 30
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PPUSH
31381: CALL_OW 69
31385: PPUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: CALL_OW 74
31395: PPUSH
31396: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31400: LD_VAR 0 2
31404: PUSH
31405: LD_INT 80
31407: GREATER
31408: PUSH
31409: LD_VAR 0 3
31413: PPUSH
31414: CALL_OW 301
31418: OR
31419: IFFALSE 31296
// if un then
31421: LD_VAR 0 3
31425: IFFALSE 31436
// RemoveUnit ( un ) ;
31427: LD_VAR 0 3
31431: PPUSH
31432: CALL_OW 64
// end ;
31436: PPOPN 3
31438: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31439: LD_EXP 123
31443: IFFALSE 31559
31445: GO 31447
31447: DISABLE
31448: LD_INT 0
31450: PPUSH
31451: PPUSH
31452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31453: LD_ADDR_VAR 0 2
31457: PUSH
31458: LD_INT 81
31460: PUSH
31461: LD_OWVAR 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 21
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PPUSH
31484: CALL_OW 69
31488: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31489: LD_STRING playComputer()
31491: PPUSH
31492: CALL_OW 559
// if not tmp then
31496: LD_VAR 0 2
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 31559
// for i in tmp do
31505: LD_ADDR_VAR 0 1
31509: PUSH
31510: LD_VAR 0 2
31514: PUSH
31515: FOR_IN
31516: IFFALSE 31557
// for j := 1 to 4 do
31518: LD_ADDR_VAR 0 3
31522: PUSH
31523: DOUBLE
31524: LD_INT 1
31526: DEC
31527: ST_TO_ADDR
31528: LD_INT 4
31530: PUSH
31531: FOR_TO
31532: IFFALSE 31553
// SetSkill ( i , j , 10 ) ;
31534: LD_VAR 0 1
31538: PPUSH
31539: LD_VAR 0 3
31543: PPUSH
31544: LD_INT 10
31546: PPUSH
31547: CALL_OW 237
31551: GO 31531
31553: POP
31554: POP
31555: GO 31515
31557: POP
31558: POP
// end ;
31559: PPOPN 3
31561: END
// every 0 0$1 trigger s30 do var i , tmp ;
31562: LD_EXP 124
31566: IFFALSE 31635
31568: GO 31570
31570: DISABLE
31571: LD_INT 0
31573: PPUSH
31574: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31575: LD_ADDR_VAR 0 2
31579: PUSH
31580: LD_INT 22
31582: PUSH
31583: LD_OWVAR 2
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PPUSH
31592: CALL_OW 69
31596: ST_TO_ADDR
// if not tmp then
31597: LD_VAR 0 2
31601: NOT
31602: IFFALSE 31606
// exit ;
31604: GO 31635
// for i in tmp do
31606: LD_ADDR_VAR 0 1
31610: PUSH
31611: LD_VAR 0 2
31615: PUSH
31616: FOR_IN
31617: IFFALSE 31633
// SetLives ( i , 300 ) ;
31619: LD_VAR 0 1
31623: PPUSH
31624: LD_INT 300
31626: PPUSH
31627: CALL_OW 234
31631: GO 31616
31633: POP
31634: POP
// end ;
31635: PPOPN 2
31637: END
// every 0 0$1 trigger s60 do var i , tmp ;
31638: LD_EXP 125
31642: IFFALSE 31711
31644: GO 31646
31646: DISABLE
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31651: LD_ADDR_VAR 0 2
31655: PUSH
31656: LD_INT 22
31658: PUSH
31659: LD_OWVAR 2
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PPUSH
31668: CALL_OW 69
31672: ST_TO_ADDR
// if not tmp then
31673: LD_VAR 0 2
31677: NOT
31678: IFFALSE 31682
// exit ;
31680: GO 31711
// for i in tmp do
31682: LD_ADDR_VAR 0 1
31686: PUSH
31687: LD_VAR 0 2
31691: PUSH
31692: FOR_IN
31693: IFFALSE 31709
// SetLives ( i , 600 ) ;
31695: LD_VAR 0 1
31699: PPUSH
31700: LD_INT 600
31702: PPUSH
31703: CALL_OW 234
31707: GO 31692
31709: POP
31710: POP
// end ;
31711: PPOPN 2
31713: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31714: LD_INT 0
31716: PPUSH
// case cmd of 301 :
31717: LD_VAR 0 1
31721: PUSH
31722: LD_INT 301
31724: DOUBLE
31725: EQUAL
31726: IFTRUE 31730
31728: GO 31762
31730: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31731: LD_VAR 0 6
31735: PPUSH
31736: LD_VAR 0 7
31740: PPUSH
31741: LD_VAR 0 8
31745: PPUSH
31746: LD_VAR 0 4
31750: PPUSH
31751: LD_VAR 0 5
31755: PPUSH
31756: CALL 32963 0 5
31760: GO 31883
31762: LD_INT 302
31764: DOUBLE
31765: EQUAL
31766: IFTRUE 31770
31768: GO 31807
31770: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31771: LD_VAR 0 6
31775: PPUSH
31776: LD_VAR 0 7
31780: PPUSH
31781: LD_VAR 0 8
31785: PPUSH
31786: LD_VAR 0 9
31790: PPUSH
31791: LD_VAR 0 4
31795: PPUSH
31796: LD_VAR 0 5
31800: PPUSH
31801: CALL 33054 0 6
31805: GO 31883
31807: LD_INT 303
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31852
31815: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31816: LD_VAR 0 6
31820: PPUSH
31821: LD_VAR 0 7
31825: PPUSH
31826: LD_VAR 0 8
31830: PPUSH
31831: LD_VAR 0 9
31835: PPUSH
31836: LD_VAR 0 4
31840: PPUSH
31841: LD_VAR 0 5
31845: PPUSH
31846: CALL 31888 0 6
31850: GO 31883
31852: LD_INT 304
31854: DOUBLE
31855: EQUAL
31856: IFTRUE 31860
31858: GO 31882
31860: POP
// hHackTeleport ( unit , x , y ) ; end ;
31861: LD_VAR 0 2
31865: PPUSH
31866: LD_VAR 0 4
31870: PPUSH
31871: LD_VAR 0 5
31875: PPUSH
31876: CALL 33647 0 3
31880: GO 31883
31882: POP
// end ;
31883: LD_VAR 0 12
31887: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31888: LD_INT 0
31890: PPUSH
31891: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31892: LD_VAR 0 1
31896: PUSH
31897: LD_INT 1
31899: LESS
31900: PUSH
31901: LD_VAR 0 1
31905: PUSH
31906: LD_INT 3
31908: GREATER
31909: OR
31910: PUSH
31911: LD_VAR 0 5
31915: PPUSH
31916: LD_VAR 0 6
31920: PPUSH
31921: CALL_OW 428
31925: OR
31926: IFFALSE 31930
// exit ;
31928: GO 32650
// uc_side := your_side ;
31930: LD_ADDR_OWVAR 20
31934: PUSH
31935: LD_OWVAR 2
31939: ST_TO_ADDR
// uc_nation := nation ;
31940: LD_ADDR_OWVAR 21
31944: PUSH
31945: LD_VAR 0 1
31949: ST_TO_ADDR
// bc_level = 1 ;
31950: LD_ADDR_OWVAR 43
31954: PUSH
31955: LD_INT 1
31957: ST_TO_ADDR
// case btype of 1 :
31958: LD_VAR 0 2
31962: PUSH
31963: LD_INT 1
31965: DOUBLE
31966: EQUAL
31967: IFTRUE 31971
31969: GO 31982
31971: POP
// bc_type := b_depot ; 2 :
31972: LD_ADDR_OWVAR 42
31976: PUSH
31977: LD_INT 0
31979: ST_TO_ADDR
31980: GO 32594
31982: LD_INT 2
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 32001
31990: POP
// bc_type := b_warehouse ; 3 :
31991: LD_ADDR_OWVAR 42
31995: PUSH
31996: LD_INT 1
31998: ST_TO_ADDR
31999: GO 32594
32001: LD_INT 3
32003: DOUBLE
32004: EQUAL
32005: IFTRUE 32009
32007: GO 32020
32009: POP
// bc_type := b_lab ; 4 .. 9 :
32010: LD_ADDR_OWVAR 42
32014: PUSH
32015: LD_INT 6
32017: ST_TO_ADDR
32018: GO 32594
32020: LD_INT 4
32022: DOUBLE
32023: GREATEREQUAL
32024: IFFALSE 32032
32026: LD_INT 9
32028: DOUBLE
32029: LESSEQUAL
32030: IFTRUE 32034
32032: GO 32086
32034: POP
// begin bc_type := b_lab_half ;
32035: LD_ADDR_OWVAR 42
32039: PUSH
32040: LD_INT 7
32042: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32043: LD_ADDR_OWVAR 44
32047: PUSH
32048: LD_INT 10
32050: PUSH
32051: LD_INT 11
32053: PUSH
32054: LD_INT 12
32056: PUSH
32057: LD_INT 15
32059: PUSH
32060: LD_INT 14
32062: PUSH
32063: LD_INT 13
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: PUSH
32074: LD_VAR 0 2
32078: PUSH
32079: LD_INT 3
32081: MINUS
32082: ARRAY
32083: ST_TO_ADDR
// end ; 10 .. 13 :
32084: GO 32594
32086: LD_INT 10
32088: DOUBLE
32089: GREATEREQUAL
32090: IFFALSE 32098
32092: LD_INT 13
32094: DOUBLE
32095: LESSEQUAL
32096: IFTRUE 32100
32098: GO 32177
32100: POP
// begin bc_type := b_lab_full ;
32101: LD_ADDR_OWVAR 42
32105: PUSH
32106: LD_INT 8
32108: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32109: LD_ADDR_OWVAR 44
32113: PUSH
32114: LD_INT 10
32116: PUSH
32117: LD_INT 12
32119: PUSH
32120: LD_INT 14
32122: PUSH
32123: LD_INT 13
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: PUSH
32132: LD_VAR 0 2
32136: PUSH
32137: LD_INT 9
32139: MINUS
32140: ARRAY
32141: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32142: LD_ADDR_OWVAR 45
32146: PUSH
32147: LD_INT 11
32149: PUSH
32150: LD_INT 15
32152: PUSH
32153: LD_INT 12
32155: PUSH
32156: LD_INT 15
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: PUSH
32165: LD_VAR 0 2
32169: PUSH
32170: LD_INT 9
32172: MINUS
32173: ARRAY
32174: ST_TO_ADDR
// end ; 14 :
32175: GO 32594
32177: LD_INT 14
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32196
32185: POP
// bc_type := b_workshop ; 15 :
32186: LD_ADDR_OWVAR 42
32190: PUSH
32191: LD_INT 2
32193: ST_TO_ADDR
32194: GO 32594
32196: LD_INT 15
32198: DOUBLE
32199: EQUAL
32200: IFTRUE 32204
32202: GO 32215
32204: POP
// bc_type := b_factory ; 16 :
32205: LD_ADDR_OWVAR 42
32209: PUSH
32210: LD_INT 3
32212: ST_TO_ADDR
32213: GO 32594
32215: LD_INT 16
32217: DOUBLE
32218: EQUAL
32219: IFTRUE 32223
32221: GO 32234
32223: POP
// bc_type := b_ext_gun ; 17 :
32224: LD_ADDR_OWVAR 42
32228: PUSH
32229: LD_INT 17
32231: ST_TO_ADDR
32232: GO 32594
32234: LD_INT 17
32236: DOUBLE
32237: EQUAL
32238: IFTRUE 32242
32240: GO 32270
32242: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32243: LD_ADDR_OWVAR 42
32247: PUSH
32248: LD_INT 19
32250: PUSH
32251: LD_INT 23
32253: PUSH
32254: LD_INT 19
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: PUSH
32262: LD_VAR 0 1
32266: ARRAY
32267: ST_TO_ADDR
32268: GO 32594
32270: LD_INT 18
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32289
32278: POP
// bc_type := b_ext_radar ; 19 :
32279: LD_ADDR_OWVAR 42
32283: PUSH
32284: LD_INT 20
32286: ST_TO_ADDR
32287: GO 32594
32289: LD_INT 19
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 32308
32297: POP
// bc_type := b_ext_radio ; 20 :
32298: LD_ADDR_OWVAR 42
32302: PUSH
32303: LD_INT 22
32305: ST_TO_ADDR
32306: GO 32594
32308: LD_INT 20
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32327
32316: POP
// bc_type := b_ext_siberium ; 21 :
32317: LD_ADDR_OWVAR 42
32321: PUSH
32322: LD_INT 21
32324: ST_TO_ADDR
32325: GO 32594
32327: LD_INT 21
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32346
32335: POP
// bc_type := b_ext_computer ; 22 :
32336: LD_ADDR_OWVAR 42
32340: PUSH
32341: LD_INT 24
32343: ST_TO_ADDR
32344: GO 32594
32346: LD_INT 22
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32354
32352: GO 32365
32354: POP
// bc_type := b_ext_track ; 23 :
32355: LD_ADDR_OWVAR 42
32359: PUSH
32360: LD_INT 16
32362: ST_TO_ADDR
32363: GO 32594
32365: LD_INT 23
32367: DOUBLE
32368: EQUAL
32369: IFTRUE 32373
32371: GO 32384
32373: POP
// bc_type := b_ext_laser ; 24 :
32374: LD_ADDR_OWVAR 42
32378: PUSH
32379: LD_INT 25
32381: ST_TO_ADDR
32382: GO 32594
32384: LD_INT 24
32386: DOUBLE
32387: EQUAL
32388: IFTRUE 32392
32390: GO 32403
32392: POP
// bc_type := b_control_tower ; 25 :
32393: LD_ADDR_OWVAR 42
32397: PUSH
32398: LD_INT 36
32400: ST_TO_ADDR
32401: GO 32594
32403: LD_INT 25
32405: DOUBLE
32406: EQUAL
32407: IFTRUE 32411
32409: GO 32422
32411: POP
// bc_type := b_breastwork ; 26 :
32412: LD_ADDR_OWVAR 42
32416: PUSH
32417: LD_INT 31
32419: ST_TO_ADDR
32420: GO 32594
32422: LD_INT 26
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32441
32430: POP
// bc_type := b_bunker ; 27 :
32431: LD_ADDR_OWVAR 42
32435: PUSH
32436: LD_INT 32
32438: ST_TO_ADDR
32439: GO 32594
32441: LD_INT 27
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32449
32447: GO 32460
32449: POP
// bc_type := b_turret ; 28 :
32450: LD_ADDR_OWVAR 42
32454: PUSH
32455: LD_INT 33
32457: ST_TO_ADDR
32458: GO 32594
32460: LD_INT 28
32462: DOUBLE
32463: EQUAL
32464: IFTRUE 32468
32466: GO 32479
32468: POP
// bc_type := b_armoury ; 29 :
32469: LD_ADDR_OWVAR 42
32473: PUSH
32474: LD_INT 4
32476: ST_TO_ADDR
32477: GO 32594
32479: LD_INT 29
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32498
32487: POP
// bc_type := b_barracks ; 30 :
32488: LD_ADDR_OWVAR 42
32492: PUSH
32493: LD_INT 5
32495: ST_TO_ADDR
32496: GO 32594
32498: LD_INT 30
32500: DOUBLE
32501: EQUAL
32502: IFTRUE 32506
32504: GO 32517
32506: POP
// bc_type := b_solar_power ; 31 :
32507: LD_ADDR_OWVAR 42
32511: PUSH
32512: LD_INT 27
32514: ST_TO_ADDR
32515: GO 32594
32517: LD_INT 31
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32536
32525: POP
// bc_type := b_oil_power ; 32 :
32526: LD_ADDR_OWVAR 42
32530: PUSH
32531: LD_INT 26
32533: ST_TO_ADDR
32534: GO 32594
32536: LD_INT 32
32538: DOUBLE
32539: EQUAL
32540: IFTRUE 32544
32542: GO 32555
32544: POP
// bc_type := b_siberite_power ; 33 :
32545: LD_ADDR_OWVAR 42
32549: PUSH
32550: LD_INT 28
32552: ST_TO_ADDR
32553: GO 32594
32555: LD_INT 33
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32574
32563: POP
// bc_type := b_oil_mine ; 34 :
32564: LD_ADDR_OWVAR 42
32568: PUSH
32569: LD_INT 29
32571: ST_TO_ADDR
32572: GO 32594
32574: LD_INT 34
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32593
32582: POP
// bc_type := b_siberite_mine ; end ;
32583: LD_ADDR_OWVAR 42
32587: PUSH
32588: LD_INT 30
32590: ST_TO_ADDR
32591: GO 32594
32593: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32594: LD_ADDR_VAR 0 8
32598: PUSH
32599: LD_VAR 0 5
32603: PPUSH
32604: LD_VAR 0 6
32608: PPUSH
32609: LD_VAR 0 3
32613: PPUSH
32614: CALL_OW 47
32618: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32619: LD_OWVAR 42
32623: PUSH
32624: LD_INT 32
32626: PUSH
32627: LD_INT 33
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: IN
32634: IFFALSE 32650
// PlaceWeaponTurret ( b , weapon ) ;
32636: LD_VAR 0 8
32640: PPUSH
32641: LD_VAR 0 4
32645: PPUSH
32646: CALL_OW 431
// end ;
32650: LD_VAR 0 7
32654: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32655: LD_INT 0
32657: PPUSH
32658: PPUSH
32659: PPUSH
32660: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32661: LD_ADDR_VAR 0 4
32665: PUSH
32666: LD_INT 22
32668: PUSH
32669: LD_OWVAR 2
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: LD_INT 30
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 30
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PPUSH
32710: CALL_OW 69
32714: ST_TO_ADDR
// if not tmp then
32715: LD_VAR 0 4
32719: NOT
32720: IFFALSE 32724
// exit ;
32722: GO 32783
// for i in tmp do
32724: LD_ADDR_VAR 0 2
32728: PUSH
32729: LD_VAR 0 4
32733: PUSH
32734: FOR_IN
32735: IFFALSE 32781
// for j = 1 to 3 do
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: DOUBLE
32743: LD_INT 1
32745: DEC
32746: ST_TO_ADDR
32747: LD_INT 3
32749: PUSH
32750: FOR_TO
32751: IFFALSE 32777
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32753: LD_VAR 0 2
32757: PPUSH
32758: CALL_OW 274
32762: PPUSH
32763: LD_VAR 0 3
32767: PPUSH
32768: LD_INT 99999
32770: PPUSH
32771: CALL_OW 277
32775: GO 32750
32777: POP
32778: POP
32779: GO 32734
32781: POP
32782: POP
// end ;
32783: LD_VAR 0 1
32787: RET
// export function hHackSetLevel10 ; var i , j ; begin
32788: LD_INT 0
32790: PPUSH
32791: PPUSH
32792: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32793: LD_ADDR_VAR 0 2
32797: PUSH
32798: LD_INT 21
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PPUSH
32808: CALL_OW 69
32812: PUSH
32813: FOR_IN
32814: IFFALSE 32866
// if IsSelected ( i ) then
32816: LD_VAR 0 2
32820: PPUSH
32821: CALL_OW 306
32825: IFFALSE 32864
// begin for j := 1 to 4 do
32827: LD_ADDR_VAR 0 3
32831: PUSH
32832: DOUBLE
32833: LD_INT 1
32835: DEC
32836: ST_TO_ADDR
32837: LD_INT 4
32839: PUSH
32840: FOR_TO
32841: IFFALSE 32862
// SetSkill ( i , j , 10 ) ;
32843: LD_VAR 0 2
32847: PPUSH
32848: LD_VAR 0 3
32852: PPUSH
32853: LD_INT 10
32855: PPUSH
32856: CALL_OW 237
32860: GO 32840
32862: POP
32863: POP
// end ;
32864: GO 32813
32866: POP
32867: POP
// end ;
32868: LD_VAR 0 1
32872: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32873: LD_INT 0
32875: PPUSH
32876: PPUSH
32877: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32878: LD_ADDR_VAR 0 2
32882: PUSH
32883: LD_INT 22
32885: PUSH
32886: LD_OWVAR 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 21
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PPUSH
32909: CALL_OW 69
32913: PUSH
32914: FOR_IN
32915: IFFALSE 32956
// begin for j := 1 to 4 do
32917: LD_ADDR_VAR 0 3
32921: PUSH
32922: DOUBLE
32923: LD_INT 1
32925: DEC
32926: ST_TO_ADDR
32927: LD_INT 4
32929: PUSH
32930: FOR_TO
32931: IFFALSE 32952
// SetSkill ( i , j , 10 ) ;
32933: LD_VAR 0 2
32937: PPUSH
32938: LD_VAR 0 3
32942: PPUSH
32943: LD_INT 10
32945: PPUSH
32946: CALL_OW 237
32950: GO 32930
32952: POP
32953: POP
// end ;
32954: GO 32914
32956: POP
32957: POP
// end ;
32958: LD_VAR 0 1
32962: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32963: LD_INT 0
32965: PPUSH
// uc_side := your_side ;
32966: LD_ADDR_OWVAR 20
32970: PUSH
32971: LD_OWVAR 2
32975: ST_TO_ADDR
// uc_nation := nation ;
32976: LD_ADDR_OWVAR 21
32980: PUSH
32981: LD_VAR 0 1
32985: ST_TO_ADDR
// InitHc ;
32986: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32990: LD_INT 0
32992: PPUSH
32993: LD_VAR 0 2
32997: PPUSH
32998: LD_VAR 0 3
33002: PPUSH
33003: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33007: LD_VAR 0 4
33011: PPUSH
33012: LD_VAR 0 5
33016: PPUSH
33017: CALL_OW 428
33021: PUSH
33022: LD_INT 0
33024: EQUAL
33025: IFFALSE 33049
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33027: CALL_OW 44
33031: PPUSH
33032: LD_VAR 0 4
33036: PPUSH
33037: LD_VAR 0 5
33041: PPUSH
33042: LD_INT 1
33044: PPUSH
33045: CALL_OW 48
// end ;
33049: LD_VAR 0 6
33053: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
// uc_side := your_side ;
33058: LD_ADDR_OWVAR 20
33062: PUSH
33063: LD_OWVAR 2
33067: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33068: LD_VAR 0 1
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 4
33084: PUSH
33085: LD_INT 5
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: IN
33095: IFFALSE 33107
// uc_nation := nation_american else
33097: LD_ADDR_OWVAR 21
33101: PUSH
33102: LD_INT 1
33104: ST_TO_ADDR
33105: GO 33150
// if chassis in [ 11 , 12 , 13 , 14 ] then
33107: LD_VAR 0 1
33111: PUSH
33112: LD_INT 11
33114: PUSH
33115: LD_INT 12
33117: PUSH
33118: LD_INT 13
33120: PUSH
33121: LD_INT 14
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: IN
33130: IFFALSE 33142
// uc_nation := nation_arabian else
33132: LD_ADDR_OWVAR 21
33136: PUSH
33137: LD_INT 2
33139: ST_TO_ADDR
33140: GO 33150
// uc_nation := nation_russian ;
33142: LD_ADDR_OWVAR 21
33146: PUSH
33147: LD_INT 3
33149: ST_TO_ADDR
// vc_chassis := chassis ;
33150: LD_ADDR_OWVAR 37
33154: PUSH
33155: LD_VAR 0 1
33159: ST_TO_ADDR
// vc_engine := engine ;
33160: LD_ADDR_OWVAR 39
33164: PUSH
33165: LD_VAR 0 2
33169: ST_TO_ADDR
// vc_control := control ;
33170: LD_ADDR_OWVAR 38
33174: PUSH
33175: LD_VAR 0 3
33179: ST_TO_ADDR
// vc_weapon := weapon ;
33180: LD_ADDR_OWVAR 40
33184: PUSH
33185: LD_VAR 0 4
33189: ST_TO_ADDR
// un := CreateVehicle ;
33190: LD_ADDR_VAR 0 8
33194: PUSH
33195: CALL_OW 45
33199: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33200: LD_VAR 0 8
33204: PPUSH
33205: LD_INT 0
33207: PPUSH
33208: LD_INT 5
33210: PPUSH
33211: CALL_OW 12
33215: PPUSH
33216: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33220: LD_VAR 0 8
33224: PPUSH
33225: LD_VAR 0 5
33229: PPUSH
33230: LD_VAR 0 6
33234: PPUSH
33235: LD_INT 1
33237: PPUSH
33238: CALL_OW 48
// end ;
33242: LD_VAR 0 7
33246: RET
// export hInvincible ; every 1 do
33247: GO 33249
33249: DISABLE
// hInvincible := [ ] ;
33250: LD_ADDR_EXP 126
33254: PUSH
33255: EMPTY
33256: ST_TO_ADDR
33257: END
// every 10 do var i ;
33258: GO 33260
33260: DISABLE
33261: LD_INT 0
33263: PPUSH
// begin enable ;
33264: ENABLE
// if not hInvincible then
33265: LD_EXP 126
33269: NOT
33270: IFFALSE 33274
// exit ;
33272: GO 33318
// for i in hInvincible do
33274: LD_ADDR_VAR 0 1
33278: PUSH
33279: LD_EXP 126
33283: PUSH
33284: FOR_IN
33285: IFFALSE 33316
// if GetLives ( i ) < 1000 then
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 256
33296: PUSH
33297: LD_INT 1000
33299: LESS
33300: IFFALSE 33314
// SetLives ( i , 1000 ) ;
33302: LD_VAR 0 1
33306: PPUSH
33307: LD_INT 1000
33309: PPUSH
33310: CALL_OW 234
33314: GO 33284
33316: POP
33317: POP
// end ;
33318: PPOPN 1
33320: END
// export function hHackInvincible ; var i ; begin
33321: LD_INT 0
33323: PPUSH
33324: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33325: LD_ADDR_VAR 0 2
33329: PUSH
33330: LD_INT 2
33332: PUSH
33333: LD_INT 21
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 21
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: PPUSH
33358: CALL_OW 69
33362: PUSH
33363: FOR_IN
33364: IFFALSE 33425
// if IsSelected ( i ) then
33366: LD_VAR 0 2
33370: PPUSH
33371: CALL_OW 306
33375: IFFALSE 33423
// begin if i in hInvincible then
33377: LD_VAR 0 2
33381: PUSH
33382: LD_EXP 126
33386: IN
33387: IFFALSE 33407
// hInvincible := hInvincible diff i else
33389: LD_ADDR_EXP 126
33393: PUSH
33394: LD_EXP 126
33398: PUSH
33399: LD_VAR 0 2
33403: DIFF
33404: ST_TO_ADDR
33405: GO 33423
// hInvincible := hInvincible union i ;
33407: LD_ADDR_EXP 126
33411: PUSH
33412: LD_EXP 126
33416: PUSH
33417: LD_VAR 0 2
33421: UNION
33422: ST_TO_ADDR
// end ;
33423: GO 33363
33425: POP
33426: POP
// end ;
33427: LD_VAR 0 1
33431: RET
// export function hHackInvisible ; var i , j ; begin
33432: LD_INT 0
33434: PPUSH
33435: PPUSH
33436: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33437: LD_ADDR_VAR 0 2
33441: PUSH
33442: LD_INT 21
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PPUSH
33452: CALL_OW 69
33456: PUSH
33457: FOR_IN
33458: IFFALSE 33482
// if IsSelected ( i ) then
33460: LD_VAR 0 2
33464: PPUSH
33465: CALL_OW 306
33469: IFFALSE 33480
// ComForceInvisible ( i ) ;
33471: LD_VAR 0 2
33475: PPUSH
33476: CALL_OW 496
33480: GO 33457
33482: POP
33483: POP
// end ;
33484: LD_VAR 0 1
33488: RET
// export function hHackChangeYourSide ; begin
33489: LD_INT 0
33491: PPUSH
// if your_side = 8 then
33492: LD_OWVAR 2
33496: PUSH
33497: LD_INT 8
33499: EQUAL
33500: IFFALSE 33512
// your_side := 0 else
33502: LD_ADDR_OWVAR 2
33506: PUSH
33507: LD_INT 0
33509: ST_TO_ADDR
33510: GO 33526
// your_side := your_side + 1 ;
33512: LD_ADDR_OWVAR 2
33516: PUSH
33517: LD_OWVAR 2
33521: PUSH
33522: LD_INT 1
33524: PLUS
33525: ST_TO_ADDR
// end ;
33526: LD_VAR 0 1
33530: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33531: LD_INT 0
33533: PPUSH
33534: PPUSH
33535: PPUSH
// for i in all_units do
33536: LD_ADDR_VAR 0 2
33540: PUSH
33541: LD_OWVAR 3
33545: PUSH
33546: FOR_IN
33547: IFFALSE 33625
// if IsSelected ( i ) then
33549: LD_VAR 0 2
33553: PPUSH
33554: CALL_OW 306
33558: IFFALSE 33623
// begin j := GetSide ( i ) ;
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_VAR 0 2
33569: PPUSH
33570: CALL_OW 255
33574: ST_TO_ADDR
// if j = 8 then
33575: LD_VAR 0 3
33579: PUSH
33580: LD_INT 8
33582: EQUAL
33583: IFFALSE 33595
// j := 0 else
33585: LD_ADDR_VAR 0 3
33589: PUSH
33590: LD_INT 0
33592: ST_TO_ADDR
33593: GO 33609
// j := j + 1 ;
33595: LD_ADDR_VAR 0 3
33599: PUSH
33600: LD_VAR 0 3
33604: PUSH
33605: LD_INT 1
33607: PLUS
33608: ST_TO_ADDR
// SetSide ( i , j ) ;
33609: LD_VAR 0 2
33613: PPUSH
33614: LD_VAR 0 3
33618: PPUSH
33619: CALL_OW 235
// end ;
33623: GO 33546
33625: POP
33626: POP
// end ;
33627: LD_VAR 0 1
33631: RET
// export function hHackFog ; begin
33632: LD_INT 0
33634: PPUSH
// FogOff ( true ) ;
33635: LD_INT 1
33637: PPUSH
33638: CALL_OW 344
// end ;
33642: LD_VAR 0 1
33646: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33647: LD_INT 0
33649: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33650: LD_VAR 0 1
33654: PPUSH
33655: LD_VAR 0 2
33659: PPUSH
33660: LD_VAR 0 3
33664: PPUSH
33665: LD_INT 1
33667: PPUSH
33668: LD_INT 1
33670: PPUSH
33671: CALL_OW 483
// CenterOnXY ( x , y ) ;
33675: LD_VAR 0 2
33679: PPUSH
33680: LD_VAR 0 3
33684: PPUSH
33685: CALL_OW 84
// end ; end_of_file
33689: LD_VAR 0 4
33693: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33694: LD_INT 0
33696: PPUSH
33697: PPUSH
33698: PPUSH
33699: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 264
33709: PUSH
33710: LD_EXP 54
33714: EQUAL
33715: IFFALSE 33787
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33717: LD_INT 68
33719: PPUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 255
33729: PPUSH
33730: CALL_OW 321
33734: PUSH
33735: LD_INT 2
33737: EQUAL
33738: IFFALSE 33750
// eff := 70 else
33740: LD_ADDR_VAR 0 4
33744: PUSH
33745: LD_INT 70
33747: ST_TO_ADDR
33748: GO 33758
// eff := 30 ;
33750: LD_ADDR_VAR 0 4
33754: PUSH
33755: LD_INT 30
33757: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL_OW 250
33767: PPUSH
33768: LD_VAR 0 1
33772: PPUSH
33773: CALL_OW 251
33777: PPUSH
33778: LD_VAR 0 4
33782: PPUSH
33783: CALL_OW 495
// end ; end ;
33787: LD_VAR 0 2
33791: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33792: LD_INT 0
33794: PPUSH
// end ;
33795: LD_VAR 0 4
33799: RET
// export function SOS_Command ( cmd ) ; begin
33800: LD_INT 0
33802: PPUSH
// end ;
33803: LD_VAR 0 2
33807: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33808: LD_INT 0
33810: PPUSH
// end ;
33811: LD_VAR 0 6
33815: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33816: LD_INT 0
33818: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33819: LD_VAR 0 1
33823: PUSH
33824: LD_INT 250
33826: EQUAL
33827: PUSH
33828: LD_VAR 0 2
33832: PPUSH
33833: CALL_OW 264
33837: PUSH
33838: LD_EXP 57
33842: EQUAL
33843: AND
33844: IFFALSE 33865
// MinerPlaceMine ( unit , x , y ) ;
33846: LD_VAR 0 2
33850: PPUSH
33851: LD_VAR 0 4
33855: PPUSH
33856: LD_VAR 0 5
33860: PPUSH
33861: CALL 36214 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33865: LD_VAR 0 1
33869: PUSH
33870: LD_INT 251
33872: EQUAL
33873: PUSH
33874: LD_VAR 0 2
33878: PPUSH
33879: CALL_OW 264
33883: PUSH
33884: LD_EXP 57
33888: EQUAL
33889: AND
33890: IFFALSE 33911
// MinerDetonateMine ( unit , x , y ) ;
33892: LD_VAR 0 2
33896: PPUSH
33897: LD_VAR 0 4
33901: PPUSH
33902: LD_VAR 0 5
33906: PPUSH
33907: CALL 36491 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33911: LD_VAR 0 1
33915: PUSH
33916: LD_INT 252
33918: EQUAL
33919: PUSH
33920: LD_VAR 0 2
33924: PPUSH
33925: CALL_OW 264
33929: PUSH
33930: LD_EXP 57
33934: EQUAL
33935: AND
33936: IFFALSE 33957
// MinerCreateMinefield ( unit , x , y ) ;
33938: LD_VAR 0 2
33942: PPUSH
33943: LD_VAR 0 4
33947: PPUSH
33948: LD_VAR 0 5
33952: PPUSH
33953: CALL 36908 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33957: LD_VAR 0 1
33961: PUSH
33962: LD_INT 253
33964: EQUAL
33965: PUSH
33966: LD_VAR 0 2
33970: PPUSH
33971: CALL_OW 257
33975: PUSH
33976: LD_INT 5
33978: EQUAL
33979: AND
33980: IFFALSE 34001
// ComBinocular ( unit , x , y ) ;
33982: LD_VAR 0 2
33986: PPUSH
33987: LD_VAR 0 4
33991: PPUSH
33992: LD_VAR 0 5
33996: PPUSH
33997: CALL 37279 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34001: LD_VAR 0 1
34005: PUSH
34006: LD_INT 254
34008: EQUAL
34009: PUSH
34010: LD_VAR 0 2
34014: PPUSH
34015: CALL_OW 264
34019: PUSH
34020: LD_EXP 52
34024: EQUAL
34025: AND
34026: PUSH
34027: LD_VAR 0 3
34031: PPUSH
34032: CALL_OW 263
34036: PUSH
34037: LD_INT 3
34039: EQUAL
34040: AND
34041: IFFALSE 34057
// HackDestroyVehicle ( unit , selectedUnit ) ;
34043: LD_VAR 0 2
34047: PPUSH
34048: LD_VAR 0 3
34052: PPUSH
34053: CALL 35574 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34057: LD_VAR 0 1
34061: PUSH
34062: LD_INT 255
34064: EQUAL
34065: PUSH
34066: LD_VAR 0 2
34070: PPUSH
34071: CALL_OW 264
34075: PUSH
34076: LD_INT 14
34078: PUSH
34079: LD_INT 53
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: IN
34086: AND
34087: PUSH
34088: LD_VAR 0 4
34092: PPUSH
34093: LD_VAR 0 5
34097: PPUSH
34098: CALL_OW 488
34102: AND
34103: IFFALSE 34127
// CutTreeXYR ( unit , x , y , 12 ) ;
34105: LD_VAR 0 2
34109: PPUSH
34110: LD_VAR 0 4
34114: PPUSH
34115: LD_VAR 0 5
34119: PPUSH
34120: LD_INT 12
34122: PPUSH
34123: CALL 34140 0 4
// end ;
34127: LD_VAR 0 6
34131: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
34132: LD_INT 0
34134: PPUSH
// end ;
34135: LD_VAR 0 4
34139: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34140: LD_INT 0
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
34149: PPUSH
34150: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34151: LD_VAR 0 1
34155: NOT
34156: PUSH
34157: LD_VAR 0 2
34161: PPUSH
34162: LD_VAR 0 3
34166: PPUSH
34167: CALL_OW 488
34171: NOT
34172: OR
34173: PUSH
34174: LD_VAR 0 4
34178: NOT
34179: OR
34180: IFFALSE 34184
// exit ;
34182: GO 34524
// list := [ ] ;
34184: LD_ADDR_VAR 0 13
34188: PUSH
34189: EMPTY
34190: ST_TO_ADDR
// if x - r < 0 then
34191: LD_VAR 0 2
34195: PUSH
34196: LD_VAR 0 4
34200: MINUS
34201: PUSH
34202: LD_INT 0
34204: LESS
34205: IFFALSE 34217
// min_x := 0 else
34207: LD_ADDR_VAR 0 7
34211: PUSH
34212: LD_INT 0
34214: ST_TO_ADDR
34215: GO 34233
// min_x := x - r ;
34217: LD_ADDR_VAR 0 7
34221: PUSH
34222: LD_VAR 0 2
34226: PUSH
34227: LD_VAR 0 4
34231: MINUS
34232: ST_TO_ADDR
// if y - r < 0 then
34233: LD_VAR 0 3
34237: PUSH
34238: LD_VAR 0 4
34242: MINUS
34243: PUSH
34244: LD_INT 0
34246: LESS
34247: IFFALSE 34259
// min_y := 0 else
34249: LD_ADDR_VAR 0 8
34253: PUSH
34254: LD_INT 0
34256: ST_TO_ADDR
34257: GO 34275
// min_y := y - r ;
34259: LD_ADDR_VAR 0 8
34263: PUSH
34264: LD_VAR 0 3
34268: PUSH
34269: LD_VAR 0 4
34273: MINUS
34274: ST_TO_ADDR
// max_x := x + r ;
34275: LD_ADDR_VAR 0 9
34279: PUSH
34280: LD_VAR 0 2
34284: PUSH
34285: LD_VAR 0 4
34289: PLUS
34290: ST_TO_ADDR
// max_y := y + r ;
34291: LD_ADDR_VAR 0 10
34295: PUSH
34296: LD_VAR 0 3
34300: PUSH
34301: LD_VAR 0 4
34305: PLUS
34306: ST_TO_ADDR
// for _x = min_x to max_x do
34307: LD_ADDR_VAR 0 11
34311: PUSH
34312: DOUBLE
34313: LD_VAR 0 7
34317: DEC
34318: ST_TO_ADDR
34319: LD_VAR 0 9
34323: PUSH
34324: FOR_TO
34325: IFFALSE 34442
// for _y = min_y to max_y do
34327: LD_ADDR_VAR 0 12
34331: PUSH
34332: DOUBLE
34333: LD_VAR 0 8
34337: DEC
34338: ST_TO_ADDR
34339: LD_VAR 0 10
34343: PUSH
34344: FOR_TO
34345: IFFALSE 34438
// begin if not ValidHex ( _x , _y ) then
34347: LD_VAR 0 11
34351: PPUSH
34352: LD_VAR 0 12
34356: PPUSH
34357: CALL_OW 488
34361: NOT
34362: IFFALSE 34366
// continue ;
34364: GO 34344
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34366: LD_VAR 0 11
34370: PPUSH
34371: LD_VAR 0 12
34375: PPUSH
34376: CALL_OW 351
34380: PUSH
34381: LD_VAR 0 11
34385: PPUSH
34386: LD_VAR 0 12
34390: PPUSH
34391: CALL_OW 554
34395: AND
34396: IFFALSE 34436
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34398: LD_ADDR_VAR 0 13
34402: PUSH
34403: LD_VAR 0 13
34407: PPUSH
34408: LD_VAR 0 13
34412: PUSH
34413: LD_INT 1
34415: PLUS
34416: PPUSH
34417: LD_VAR 0 11
34421: PUSH
34422: LD_VAR 0 12
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PPUSH
34431: CALL_OW 2
34435: ST_TO_ADDR
// end ;
34436: GO 34344
34438: POP
34439: POP
34440: GO 34324
34442: POP
34443: POP
// if not list then
34444: LD_VAR 0 13
34448: NOT
34449: IFFALSE 34453
// exit ;
34451: GO 34524
// for i in list do
34453: LD_ADDR_VAR 0 6
34457: PUSH
34458: LD_VAR 0 13
34462: PUSH
34463: FOR_IN
34464: IFFALSE 34522
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34466: LD_VAR 0 1
34470: PPUSH
34471: LD_STRING M
34473: PUSH
34474: LD_VAR 0 6
34478: PUSH
34479: LD_INT 1
34481: ARRAY
34482: PUSH
34483: LD_VAR 0 6
34487: PUSH
34488: LD_INT 2
34490: ARRAY
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: PPUSH
34516: CALL_OW 447
34520: GO 34463
34522: POP
34523: POP
// end ;
34524: LD_VAR 0 5
34528: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34529: LD_EXP 129
34533: NOT
34534: IFFALSE 34584
34536: GO 34538
34538: DISABLE
// begin initHack := true ;
34539: LD_ADDR_EXP 129
34543: PUSH
34544: LD_INT 1
34546: ST_TO_ADDR
// hackTanks := [ ] ;
34547: LD_ADDR_EXP 130
34551: PUSH
34552: EMPTY
34553: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34554: LD_ADDR_EXP 131
34558: PUSH
34559: EMPTY
34560: ST_TO_ADDR
// hackLimit := 3 ;
34561: LD_ADDR_EXP 132
34565: PUSH
34566: LD_INT 3
34568: ST_TO_ADDR
// hackDist := 12 ;
34569: LD_ADDR_EXP 133
34573: PUSH
34574: LD_INT 12
34576: ST_TO_ADDR
// hackCounter := [ ] ;
34577: LD_ADDR_EXP 134
34581: PUSH
34582: EMPTY
34583: ST_TO_ADDR
// end ;
34584: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34585: LD_EXP 129
34589: PUSH
34590: LD_INT 34
34592: PUSH
34593: LD_EXP 52
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PPUSH
34602: CALL_OW 69
34606: AND
34607: IFFALSE 34862
34609: GO 34611
34611: DISABLE
34612: LD_INT 0
34614: PPUSH
34615: PPUSH
// begin enable ;
34616: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34617: LD_ADDR_VAR 0 1
34621: PUSH
34622: LD_INT 34
34624: PUSH
34625: LD_EXP 52
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PPUSH
34634: CALL_OW 69
34638: PUSH
34639: FOR_IN
34640: IFFALSE 34860
// begin if not i in hackTanks then
34642: LD_VAR 0 1
34646: PUSH
34647: LD_EXP 130
34651: IN
34652: NOT
34653: IFFALSE 34736
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34655: LD_ADDR_EXP 130
34659: PUSH
34660: LD_EXP 130
34664: PPUSH
34665: LD_EXP 130
34669: PUSH
34670: LD_INT 1
34672: PLUS
34673: PPUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 1
34683: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34684: LD_ADDR_EXP 131
34688: PUSH
34689: LD_EXP 131
34693: PPUSH
34694: LD_EXP 131
34698: PUSH
34699: LD_INT 1
34701: PLUS
34702: PPUSH
34703: EMPTY
34704: PPUSH
34705: CALL_OW 1
34709: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34710: LD_ADDR_EXP 134
34714: PUSH
34715: LD_EXP 134
34719: PPUSH
34720: LD_EXP 134
34724: PUSH
34725: LD_INT 1
34727: PLUS
34728: PPUSH
34729: EMPTY
34730: PPUSH
34731: CALL_OW 1
34735: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 302
34745: NOT
34746: IFFALSE 34759
// begin HackUnlinkAll ( i ) ;
34748: LD_VAR 0 1
34752: PPUSH
34753: CALL 34865 0 1
// continue ;
34757: GO 34639
// end ; HackCheckCapturedStatus ( i ) ;
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL 35308 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34768: LD_ADDR_VAR 0 2
34772: PUSH
34773: LD_INT 81
34775: PUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 255
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 33
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 91
34802: PUSH
34803: LD_VAR 0 1
34807: PUSH
34808: LD_EXP 133
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 50
34820: PUSH
34821: EMPTY
34822: LIST
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: PPUSH
34830: CALL_OW 69
34834: ST_TO_ADDR
// if not tmp then
34835: LD_VAR 0 2
34839: NOT
34840: IFFALSE 34844
// continue ;
34842: GO 34639
// HackLink ( i , tmp ) ;
34844: LD_VAR 0 1
34848: PPUSH
34849: LD_VAR 0 2
34853: PPUSH
34854: CALL 35001 0 2
// end ;
34858: GO 34639
34860: POP
34861: POP
// end ;
34862: PPOPN 2
34864: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34865: LD_INT 0
34867: PPUSH
34868: PPUSH
34869: PPUSH
// if not hack in hackTanks then
34870: LD_VAR 0 1
34874: PUSH
34875: LD_EXP 130
34879: IN
34880: NOT
34881: IFFALSE 34885
// exit ;
34883: GO 34996
// index := GetElementIndex ( hackTanks , hack ) ;
34885: LD_ADDR_VAR 0 4
34889: PUSH
34890: LD_EXP 130
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL 42470 0 2
34904: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34905: LD_EXP 131
34909: PUSH
34910: LD_VAR 0 4
34914: ARRAY
34915: IFFALSE 34996
// begin for i in hackTanksCaptured [ index ] do
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: LD_EXP 131
34926: PUSH
34927: LD_VAR 0 4
34931: ARRAY
34932: PUSH
34933: FOR_IN
34934: IFFALSE 34960
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34936: LD_VAR 0 3
34940: PUSH
34941: LD_INT 1
34943: ARRAY
34944: PPUSH
34945: LD_VAR 0 3
34949: PUSH
34950: LD_INT 2
34952: ARRAY
34953: PPUSH
34954: CALL_OW 235
34958: GO 34933
34960: POP
34961: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34962: LD_ADDR_EXP 131
34966: PUSH
34967: LD_EXP 131
34971: PPUSH
34972: LD_VAR 0 4
34976: PPUSH
34977: EMPTY
34978: PPUSH
34979: CALL_OW 1
34983: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34984: LD_VAR 0 1
34988: PPUSH
34989: LD_INT 0
34991: PPUSH
34992: CALL_OW 505
// end ; end ;
34996: LD_VAR 0 2
35000: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35001: LD_INT 0
35003: PPUSH
35004: PPUSH
35005: PPUSH
// if not hack in hackTanks or not vehicles then
35006: LD_VAR 0 1
35010: PUSH
35011: LD_EXP 130
35015: IN
35016: NOT
35017: PUSH
35018: LD_VAR 0 2
35022: NOT
35023: OR
35024: IFFALSE 35028
// exit ;
35026: GO 35303
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35028: LD_ADDR_VAR 0 2
35032: PUSH
35033: LD_VAR 0 1
35037: PPUSH
35038: LD_VAR 0 2
35042: PPUSH
35043: LD_INT 1
35045: PPUSH
35046: LD_INT 1
35048: PPUSH
35049: CALL 43120 0 4
35053: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35054: LD_ADDR_VAR 0 5
35058: PUSH
35059: LD_EXP 130
35063: PPUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL 42470 0 2
35073: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35074: LD_EXP 131
35078: PUSH
35079: LD_VAR 0 5
35083: ARRAY
35084: PUSH
35085: LD_EXP 132
35089: LESS
35090: IFFALSE 35279
// begin for i := 1 to vehicles do
35092: LD_ADDR_VAR 0 4
35096: PUSH
35097: DOUBLE
35098: LD_INT 1
35100: DEC
35101: ST_TO_ADDR
35102: LD_VAR 0 2
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35277
// begin if hackTanksCaptured [ index ] = hackLimit then
35110: LD_EXP 131
35114: PUSH
35115: LD_VAR 0 5
35119: ARRAY
35120: PUSH
35121: LD_EXP 132
35125: EQUAL
35126: IFFALSE 35130
// break ;
35128: GO 35277
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35130: LD_ADDR_EXP 134
35134: PUSH
35135: LD_EXP 134
35139: PPUSH
35140: LD_VAR 0 5
35144: PPUSH
35145: LD_EXP 134
35149: PUSH
35150: LD_VAR 0 5
35154: ARRAY
35155: PUSH
35156: LD_INT 1
35158: PLUS
35159: PPUSH
35160: CALL_OW 1
35164: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35165: LD_ADDR_EXP 131
35169: PUSH
35170: LD_EXP 131
35174: PPUSH
35175: LD_VAR 0 5
35179: PUSH
35180: LD_EXP 131
35184: PUSH
35185: LD_VAR 0 5
35189: ARRAY
35190: PUSH
35191: LD_INT 1
35193: PLUS
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PPUSH
35199: LD_VAR 0 2
35203: PUSH
35204: LD_VAR 0 4
35208: ARRAY
35209: PUSH
35210: LD_VAR 0 2
35214: PUSH
35215: LD_VAR 0 4
35219: ARRAY
35220: PPUSH
35221: CALL_OW 255
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PPUSH
35230: CALL 42685 0 3
35234: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35235: LD_VAR 0 2
35239: PUSH
35240: LD_VAR 0 4
35244: ARRAY
35245: PPUSH
35246: LD_VAR 0 1
35250: PPUSH
35251: CALL_OW 255
35255: PPUSH
35256: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35260: LD_VAR 0 2
35264: PUSH
35265: LD_VAR 0 4
35269: ARRAY
35270: PPUSH
35271: CALL_OW 141
// end ;
35275: GO 35107
35277: POP
35278: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35279: LD_VAR 0 1
35283: PPUSH
35284: LD_EXP 131
35288: PUSH
35289: LD_VAR 0 5
35293: ARRAY
35294: PUSH
35295: LD_INT 0
35297: PLUS
35298: PPUSH
35299: CALL_OW 505
// end ;
35303: LD_VAR 0 3
35307: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35308: LD_INT 0
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
// if not hack in hackTanks then
35314: LD_VAR 0 1
35318: PUSH
35319: LD_EXP 130
35323: IN
35324: NOT
35325: IFFALSE 35329
// exit ;
35327: GO 35569
// index := GetElementIndex ( hackTanks , hack ) ;
35329: LD_ADDR_VAR 0 4
35333: PUSH
35334: LD_EXP 130
35338: PPUSH
35339: LD_VAR 0 1
35343: PPUSH
35344: CALL 42470 0 2
35348: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35349: LD_ADDR_VAR 0 3
35353: PUSH
35354: DOUBLE
35355: LD_EXP 131
35359: PUSH
35360: LD_VAR 0 4
35364: ARRAY
35365: INC
35366: ST_TO_ADDR
35367: LD_INT 1
35369: PUSH
35370: FOR_DOWNTO
35371: IFFALSE 35543
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35373: LD_ADDR_VAR 0 5
35377: PUSH
35378: LD_EXP 131
35382: PUSH
35383: LD_VAR 0 4
35387: ARRAY
35388: PUSH
35389: LD_VAR 0 3
35393: ARRAY
35394: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35395: LD_VAR 0 5
35399: PUSH
35400: LD_INT 1
35402: ARRAY
35403: PPUSH
35404: CALL_OW 302
35408: NOT
35409: PUSH
35410: LD_VAR 0 5
35414: PUSH
35415: LD_INT 1
35417: ARRAY
35418: PPUSH
35419: CALL_OW 255
35423: PUSH
35424: LD_VAR 0 1
35428: PPUSH
35429: CALL_OW 255
35433: NONEQUAL
35434: OR
35435: IFFALSE 35541
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35437: LD_VAR 0 5
35441: PUSH
35442: LD_INT 1
35444: ARRAY
35445: PPUSH
35446: CALL_OW 305
35450: PUSH
35451: LD_VAR 0 5
35455: PUSH
35456: LD_INT 1
35458: ARRAY
35459: PPUSH
35460: CALL_OW 255
35464: PUSH
35465: LD_VAR 0 1
35469: PPUSH
35470: CALL_OW 255
35474: EQUAL
35475: AND
35476: IFFALSE 35500
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35478: LD_VAR 0 5
35482: PUSH
35483: LD_INT 1
35485: ARRAY
35486: PPUSH
35487: LD_VAR 0 5
35491: PUSH
35492: LD_INT 2
35494: ARRAY
35495: PPUSH
35496: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35500: LD_ADDR_EXP 131
35504: PUSH
35505: LD_EXP 131
35509: PPUSH
35510: LD_VAR 0 4
35514: PPUSH
35515: LD_EXP 131
35519: PUSH
35520: LD_VAR 0 4
35524: ARRAY
35525: PPUSH
35526: LD_VAR 0 3
35530: PPUSH
35531: CALL_OW 3
35535: PPUSH
35536: CALL_OW 1
35540: ST_TO_ADDR
// end ; end ;
35541: GO 35370
35543: POP
35544: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35545: LD_VAR 0 1
35549: PPUSH
35550: LD_EXP 131
35554: PUSH
35555: LD_VAR 0 4
35559: ARRAY
35560: PUSH
35561: LD_INT 0
35563: PLUS
35564: PPUSH
35565: CALL_OW 505
// end ;
35569: LD_VAR 0 2
35573: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35574: LD_INT 0
35576: PPUSH
35577: PPUSH
35578: PPUSH
35579: PPUSH
// if not hack in hackTanks then
35580: LD_VAR 0 1
35584: PUSH
35585: LD_EXP 130
35589: IN
35590: NOT
35591: IFFALSE 35595
// exit ;
35593: GO 35680
// index := GetElementIndex ( hackTanks , hack ) ;
35595: LD_ADDR_VAR 0 5
35599: PUSH
35600: LD_EXP 130
35604: PPUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL 42470 0 2
35614: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35615: LD_ADDR_VAR 0 4
35619: PUSH
35620: DOUBLE
35621: LD_INT 1
35623: DEC
35624: ST_TO_ADDR
35625: LD_EXP 131
35629: PUSH
35630: LD_VAR 0 5
35634: ARRAY
35635: PUSH
35636: FOR_TO
35637: IFFALSE 35678
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35639: LD_EXP 131
35643: PUSH
35644: LD_VAR 0 5
35648: ARRAY
35649: PUSH
35650: LD_VAR 0 4
35654: ARRAY
35655: PUSH
35656: LD_INT 1
35658: ARRAY
35659: PUSH
35660: LD_VAR 0 2
35664: EQUAL
35665: IFFALSE 35676
// KillUnit ( vehicle ) ;
35667: LD_VAR 0 2
35671: PPUSH
35672: CALL_OW 66
35676: GO 35636
35678: POP
35679: POP
// end ;
35680: LD_VAR 0 3
35684: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35685: LD_EXP 135
35689: NOT
35690: IFFALSE 35725
35692: GO 35694
35694: DISABLE
// begin initMiner := true ;
35695: LD_ADDR_EXP 135
35699: PUSH
35700: LD_INT 1
35702: ST_TO_ADDR
// minersList := [ ] ;
35703: LD_ADDR_EXP 136
35707: PUSH
35708: EMPTY
35709: ST_TO_ADDR
// minerMinesList := [ ] ;
35710: LD_ADDR_EXP 137
35714: PUSH
35715: EMPTY
35716: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35717: LD_ADDR_EXP 138
35721: PUSH
35722: LD_INT 5
35724: ST_TO_ADDR
// end ;
35725: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35726: LD_EXP 135
35730: PUSH
35731: LD_INT 34
35733: PUSH
35734: LD_EXP 57
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PPUSH
35743: CALL_OW 69
35747: AND
35748: IFFALSE 36211
35750: GO 35752
35752: DISABLE
35753: LD_INT 0
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
// begin enable ;
35759: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35760: LD_ADDR_VAR 0 1
35764: PUSH
35765: LD_INT 34
35767: PUSH
35768: LD_EXP 57
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PPUSH
35777: CALL_OW 69
35781: PUSH
35782: FOR_IN
35783: IFFALSE 35855
// begin if not i in minersList then
35785: LD_VAR 0 1
35789: PUSH
35790: LD_EXP 136
35794: IN
35795: NOT
35796: IFFALSE 35853
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35798: LD_ADDR_EXP 136
35802: PUSH
35803: LD_EXP 136
35807: PPUSH
35808: LD_EXP 136
35812: PUSH
35813: LD_INT 1
35815: PLUS
35816: PPUSH
35817: LD_VAR 0 1
35821: PPUSH
35822: CALL_OW 1
35826: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35827: LD_ADDR_EXP 137
35831: PUSH
35832: LD_EXP 137
35836: PPUSH
35837: LD_EXP 137
35841: PUSH
35842: LD_INT 1
35844: PLUS
35845: PPUSH
35846: EMPTY
35847: PPUSH
35848: CALL_OW 1
35852: ST_TO_ADDR
// end end ;
35853: GO 35782
35855: POP
35856: POP
// for i := minerMinesList downto 1 do
35857: LD_ADDR_VAR 0 1
35861: PUSH
35862: DOUBLE
35863: LD_EXP 137
35867: INC
35868: ST_TO_ADDR
35869: LD_INT 1
35871: PUSH
35872: FOR_DOWNTO
35873: IFFALSE 36209
// begin if IsLive ( minersList [ i ] ) then
35875: LD_EXP 136
35879: PUSH
35880: LD_VAR 0 1
35884: ARRAY
35885: PPUSH
35886: CALL_OW 300
35890: IFFALSE 35918
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35892: LD_EXP 136
35896: PUSH
35897: LD_VAR 0 1
35901: ARRAY
35902: PPUSH
35903: LD_EXP 137
35907: PUSH
35908: LD_VAR 0 1
35912: ARRAY
35913: PPUSH
35914: CALL_OW 505
// if not minerMinesList [ i ] then
35918: LD_EXP 137
35922: PUSH
35923: LD_VAR 0 1
35927: ARRAY
35928: NOT
35929: IFFALSE 35933
// continue ;
35931: GO 35872
// for j := minerMinesList [ i ] downto 1 do
35933: LD_ADDR_VAR 0 2
35937: PUSH
35938: DOUBLE
35939: LD_EXP 137
35943: PUSH
35944: LD_VAR 0 1
35948: ARRAY
35949: INC
35950: ST_TO_ADDR
35951: LD_INT 1
35953: PUSH
35954: FOR_DOWNTO
35955: IFFALSE 36205
// begin side := GetSide ( minersList [ i ] ) ;
35957: LD_ADDR_VAR 0 3
35961: PUSH
35962: LD_EXP 136
35966: PUSH
35967: LD_VAR 0 1
35971: ARRAY
35972: PPUSH
35973: CALL_OW 255
35977: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35978: LD_ADDR_VAR 0 4
35982: PUSH
35983: LD_EXP 137
35987: PUSH
35988: LD_VAR 0 1
35992: ARRAY
35993: PUSH
35994: LD_VAR 0 2
35998: ARRAY
35999: PUSH
36000: LD_INT 1
36002: ARRAY
36003: PPUSH
36004: LD_EXP 137
36008: PUSH
36009: LD_VAR 0 1
36013: ARRAY
36014: PUSH
36015: LD_VAR 0 2
36019: ARRAY
36020: PUSH
36021: LD_INT 2
36023: ARRAY
36024: PPUSH
36025: CALL_OW 428
36029: ST_TO_ADDR
// if not tmp then
36030: LD_VAR 0 4
36034: NOT
36035: IFFALSE 36039
// continue ;
36037: GO 35954
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36039: LD_VAR 0 4
36043: PUSH
36044: LD_INT 81
36046: PUSH
36047: LD_VAR 0 3
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PPUSH
36056: CALL_OW 69
36060: IN
36061: PUSH
36062: LD_EXP 137
36066: PUSH
36067: LD_VAR 0 1
36071: ARRAY
36072: PUSH
36073: LD_VAR 0 2
36077: ARRAY
36078: PUSH
36079: LD_INT 1
36081: ARRAY
36082: PPUSH
36083: LD_EXP 137
36087: PUSH
36088: LD_VAR 0 1
36092: ARRAY
36093: PUSH
36094: LD_VAR 0 2
36098: ARRAY
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 458
36108: AND
36109: IFFALSE 36203
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36111: LD_EXP 137
36115: PUSH
36116: LD_VAR 0 1
36120: ARRAY
36121: PUSH
36122: LD_VAR 0 2
36126: ARRAY
36127: PUSH
36128: LD_INT 1
36130: ARRAY
36131: PPUSH
36132: LD_EXP 137
36136: PUSH
36137: LD_VAR 0 1
36141: ARRAY
36142: PUSH
36143: LD_VAR 0 2
36147: ARRAY
36148: PUSH
36149: LD_INT 2
36151: ARRAY
36152: PPUSH
36153: LD_VAR 0 3
36157: PPUSH
36158: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36162: LD_ADDR_EXP 137
36166: PUSH
36167: LD_EXP 137
36171: PPUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: LD_EXP 137
36181: PUSH
36182: LD_VAR 0 1
36186: ARRAY
36187: PPUSH
36188: LD_VAR 0 2
36192: PPUSH
36193: CALL_OW 3
36197: PPUSH
36198: CALL_OW 1
36202: ST_TO_ADDR
// end ; end ;
36203: GO 35954
36205: POP
36206: POP
// end ;
36207: GO 35872
36209: POP
36210: POP
// end ;
36211: PPOPN 4
36213: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36214: LD_INT 0
36216: PPUSH
36217: PPUSH
// result := false ;
36218: LD_ADDR_VAR 0 4
36222: PUSH
36223: LD_INT 0
36225: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 264
36235: PUSH
36236: LD_EXP 57
36240: EQUAL
36241: NOT
36242: IFFALSE 36246
// exit ;
36244: GO 36486
// index := GetElementIndex ( minersList , unit ) ;
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: LD_EXP 136
36255: PPUSH
36256: LD_VAR 0 1
36260: PPUSH
36261: CALL 42470 0 2
36265: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36266: LD_EXP 137
36270: PUSH
36271: LD_VAR 0 5
36275: ARRAY
36276: PUSH
36277: LD_EXP 138
36281: GREATEREQUAL
36282: IFFALSE 36286
// exit ;
36284: GO 36486
// ComMoveXY ( unit , x , y ) ;
36286: LD_VAR 0 1
36290: PPUSH
36291: LD_VAR 0 2
36295: PPUSH
36296: LD_VAR 0 3
36300: PPUSH
36301: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36305: LD_INT 35
36307: PPUSH
36308: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36312: LD_VAR 0 1
36316: PPUSH
36317: LD_VAR 0 2
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: CALL 73242 0 3
36331: NOT
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: CALL_OW 314
36342: AND
36343: IFFALSE 36347
// exit ;
36345: GO 36486
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36347: LD_VAR 0 2
36351: PPUSH
36352: LD_VAR 0 3
36356: PPUSH
36357: CALL_OW 428
36361: PUSH
36362: LD_VAR 0 1
36366: EQUAL
36367: PUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 314
36377: NOT
36378: AND
36379: IFFALSE 36305
// PlaySoundXY ( x , y , PlantMine ) ;
36381: LD_VAR 0 2
36385: PPUSH
36386: LD_VAR 0 3
36390: PPUSH
36391: LD_STRING PlantMine
36393: PPUSH
36394: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36398: LD_VAR 0 2
36402: PPUSH
36403: LD_VAR 0 3
36407: PPUSH
36408: LD_VAR 0 1
36412: PPUSH
36413: CALL_OW 255
36417: PPUSH
36418: LD_INT 0
36420: PPUSH
36421: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36425: LD_ADDR_EXP 137
36429: PUSH
36430: LD_EXP 137
36434: PPUSH
36435: LD_VAR 0 5
36439: PUSH
36440: LD_EXP 137
36444: PUSH
36445: LD_VAR 0 5
36449: ARRAY
36450: PUSH
36451: LD_INT 1
36453: PLUS
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PPUSH
36459: LD_VAR 0 2
36463: PUSH
36464: LD_VAR 0 3
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PPUSH
36473: CALL 42685 0 3
36477: ST_TO_ADDR
// result := true ;
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: LD_INT 1
36485: ST_TO_ADDR
// end ;
36486: LD_VAR 0 4
36490: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36491: LD_INT 0
36493: PPUSH
36494: PPUSH
36495: PPUSH
// if not unit in minersList then
36496: LD_VAR 0 1
36500: PUSH
36501: LD_EXP 136
36505: IN
36506: NOT
36507: IFFALSE 36511
// exit ;
36509: GO 36903
// index := GetElementIndex ( minersList , unit ) ;
36511: LD_ADDR_VAR 0 6
36515: PUSH
36516: LD_EXP 136
36520: PPUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL 42470 0 2
36530: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36531: LD_ADDR_VAR 0 5
36535: PUSH
36536: DOUBLE
36537: LD_EXP 137
36541: PUSH
36542: LD_VAR 0 6
36546: ARRAY
36547: INC
36548: ST_TO_ADDR
36549: LD_INT 1
36551: PUSH
36552: FOR_DOWNTO
36553: IFFALSE 36714
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36555: LD_EXP 137
36559: PUSH
36560: LD_VAR 0 6
36564: ARRAY
36565: PUSH
36566: LD_VAR 0 5
36570: ARRAY
36571: PUSH
36572: LD_INT 1
36574: ARRAY
36575: PUSH
36576: LD_VAR 0 2
36580: EQUAL
36581: PUSH
36582: LD_EXP 137
36586: PUSH
36587: LD_VAR 0 6
36591: ARRAY
36592: PUSH
36593: LD_VAR 0 5
36597: ARRAY
36598: PUSH
36599: LD_INT 2
36601: ARRAY
36602: PUSH
36603: LD_VAR 0 3
36607: EQUAL
36608: AND
36609: IFFALSE 36712
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36611: LD_EXP 137
36615: PUSH
36616: LD_VAR 0 6
36620: ARRAY
36621: PUSH
36622: LD_VAR 0 5
36626: ARRAY
36627: PUSH
36628: LD_INT 1
36630: ARRAY
36631: PPUSH
36632: LD_EXP 137
36636: PUSH
36637: LD_VAR 0 6
36641: ARRAY
36642: PUSH
36643: LD_VAR 0 5
36647: ARRAY
36648: PUSH
36649: LD_INT 2
36651: ARRAY
36652: PPUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL_OW 255
36662: PPUSH
36663: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36667: LD_ADDR_EXP 137
36671: PUSH
36672: LD_EXP 137
36676: PPUSH
36677: LD_VAR 0 6
36681: PPUSH
36682: LD_EXP 137
36686: PUSH
36687: LD_VAR 0 6
36691: ARRAY
36692: PPUSH
36693: LD_VAR 0 5
36697: PPUSH
36698: CALL_OW 3
36702: PPUSH
36703: CALL_OW 1
36707: ST_TO_ADDR
// exit ;
36708: POP
36709: POP
36710: GO 36903
// end ; end ;
36712: GO 36552
36714: POP
36715: POP
// for i := minerMinesList [ index ] downto 1 do
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: DOUBLE
36722: LD_EXP 137
36726: PUSH
36727: LD_VAR 0 6
36731: ARRAY
36732: INC
36733: ST_TO_ADDR
36734: LD_INT 1
36736: PUSH
36737: FOR_DOWNTO
36738: IFFALSE 36901
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36740: LD_EXP 137
36744: PUSH
36745: LD_VAR 0 6
36749: ARRAY
36750: PUSH
36751: LD_VAR 0 5
36755: ARRAY
36756: PUSH
36757: LD_INT 1
36759: ARRAY
36760: PPUSH
36761: LD_EXP 137
36765: PUSH
36766: LD_VAR 0 6
36770: ARRAY
36771: PUSH
36772: LD_VAR 0 5
36776: ARRAY
36777: PUSH
36778: LD_INT 2
36780: ARRAY
36781: PPUSH
36782: LD_VAR 0 2
36786: PPUSH
36787: LD_VAR 0 3
36791: PPUSH
36792: CALL_OW 298
36796: PUSH
36797: LD_INT 6
36799: LESS
36800: IFFALSE 36899
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36802: LD_EXP 137
36806: PUSH
36807: LD_VAR 0 6
36811: ARRAY
36812: PUSH
36813: LD_VAR 0 5
36817: ARRAY
36818: PUSH
36819: LD_INT 1
36821: ARRAY
36822: PPUSH
36823: LD_EXP 137
36827: PUSH
36828: LD_VAR 0 6
36832: ARRAY
36833: PUSH
36834: LD_VAR 0 5
36838: ARRAY
36839: PUSH
36840: LD_INT 2
36842: ARRAY
36843: PPUSH
36844: LD_VAR 0 1
36848: PPUSH
36849: CALL_OW 255
36853: PPUSH
36854: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36858: LD_ADDR_EXP 137
36862: PUSH
36863: LD_EXP 137
36867: PPUSH
36868: LD_VAR 0 6
36872: PPUSH
36873: LD_EXP 137
36877: PUSH
36878: LD_VAR 0 6
36882: ARRAY
36883: PPUSH
36884: LD_VAR 0 5
36888: PPUSH
36889: CALL_OW 3
36893: PPUSH
36894: CALL_OW 1
36898: ST_TO_ADDR
// end ; end ;
36899: GO 36737
36901: POP
36902: POP
// end ;
36903: LD_VAR 0 4
36907: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36908: LD_INT 0
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
36914: PPUSH
36915: PPUSH
36916: PPUSH
36917: PPUSH
36918: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 264
36928: PUSH
36929: LD_EXP 57
36933: EQUAL
36934: NOT
36935: PUSH
36936: LD_VAR 0 1
36940: PUSH
36941: LD_EXP 136
36945: IN
36946: NOT
36947: OR
36948: IFFALSE 36952
// exit ;
36950: GO 37274
// index := GetElementIndex ( minersList , unit ) ;
36952: LD_ADDR_VAR 0 6
36956: PUSH
36957: LD_EXP 136
36961: PPUSH
36962: LD_VAR 0 1
36966: PPUSH
36967: CALL 42470 0 2
36971: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36972: LD_ADDR_VAR 0 8
36976: PUSH
36977: LD_EXP 138
36981: PUSH
36982: LD_EXP 137
36986: PUSH
36987: LD_VAR 0 6
36991: ARRAY
36992: MINUS
36993: ST_TO_ADDR
// if not minesFreeAmount then
36994: LD_VAR 0 8
36998: NOT
36999: IFFALSE 37003
// exit ;
37001: GO 37274
// tmp := [ ] ;
37003: LD_ADDR_VAR 0 7
37007: PUSH
37008: EMPTY
37009: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37010: LD_ADDR_VAR 0 5
37014: PUSH
37015: DOUBLE
37016: LD_INT 1
37018: DEC
37019: ST_TO_ADDR
37020: LD_VAR 0 8
37024: PUSH
37025: FOR_TO
37026: IFFALSE 37221
// begin _d := rand ( 0 , 5 ) ;
37028: LD_ADDR_VAR 0 11
37032: PUSH
37033: LD_INT 0
37035: PPUSH
37036: LD_INT 5
37038: PPUSH
37039: CALL_OW 12
37043: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37044: LD_ADDR_VAR 0 12
37048: PUSH
37049: LD_INT 2
37051: PPUSH
37052: LD_INT 6
37054: PPUSH
37055: CALL_OW 12
37059: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37060: LD_ADDR_VAR 0 9
37064: PUSH
37065: LD_VAR 0 2
37069: PPUSH
37070: LD_VAR 0 11
37074: PPUSH
37075: LD_VAR 0 12
37079: PPUSH
37080: CALL_OW 272
37084: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37085: LD_ADDR_VAR 0 10
37089: PUSH
37090: LD_VAR 0 3
37094: PPUSH
37095: LD_VAR 0 11
37099: PPUSH
37100: LD_VAR 0 12
37104: PPUSH
37105: CALL_OW 273
37109: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37110: LD_VAR 0 9
37114: PPUSH
37115: LD_VAR 0 10
37119: PPUSH
37120: CALL_OW 488
37124: PUSH
37125: LD_VAR 0 9
37129: PUSH
37130: LD_VAR 0 10
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_VAR 0 7
37143: IN
37144: NOT
37145: AND
37146: PUSH
37147: LD_VAR 0 9
37151: PPUSH
37152: LD_VAR 0 10
37156: PPUSH
37157: CALL_OW 458
37161: NOT
37162: AND
37163: IFFALSE 37205
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37165: LD_ADDR_VAR 0 7
37169: PUSH
37170: LD_VAR 0 7
37174: PPUSH
37175: LD_VAR 0 7
37179: PUSH
37180: LD_INT 1
37182: PLUS
37183: PPUSH
37184: LD_VAR 0 9
37188: PUSH
37189: LD_VAR 0 10
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PPUSH
37198: CALL_OW 1
37202: ST_TO_ADDR
37203: GO 37219
// i := i - 1 ;
37205: LD_ADDR_VAR 0 5
37209: PUSH
37210: LD_VAR 0 5
37214: PUSH
37215: LD_INT 1
37217: MINUS
37218: ST_TO_ADDR
// end ;
37219: GO 37025
37221: POP
37222: POP
// for i in tmp do
37223: LD_ADDR_VAR 0 5
37227: PUSH
37228: LD_VAR 0 7
37232: PUSH
37233: FOR_IN
37234: IFFALSE 37272
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37236: LD_VAR 0 1
37240: PPUSH
37241: LD_VAR 0 5
37245: PUSH
37246: LD_INT 1
37248: ARRAY
37249: PPUSH
37250: LD_VAR 0 5
37254: PUSH
37255: LD_INT 2
37257: ARRAY
37258: PPUSH
37259: CALL 36214 0 3
37263: NOT
37264: IFFALSE 37270
// exit ;
37266: POP
37267: POP
37268: GO 37274
37270: GO 37233
37272: POP
37273: POP
// end ;
37274: LD_VAR 0 4
37278: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37279: LD_INT 0
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
37287: PPUSH
// if not GetClass ( unit ) = class_sniper then
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 257
37297: PUSH
37298: LD_INT 5
37300: EQUAL
37301: NOT
37302: IFFALSE 37306
// exit ;
37304: GO 37694
// dist := 8 ;
37306: LD_ADDR_VAR 0 5
37310: PUSH
37311: LD_INT 8
37313: ST_TO_ADDR
// viewRange := 12 ;
37314: LD_ADDR_VAR 0 7
37318: PUSH
37319: LD_INT 12
37321: ST_TO_ADDR
// side := GetSide ( unit ) ;
37322: LD_ADDR_VAR 0 6
37326: PUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 255
37336: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37337: LD_INT 61
37339: PPUSH
37340: LD_VAR 0 6
37344: PPUSH
37345: CALL_OW 321
37349: PUSH
37350: LD_INT 2
37352: EQUAL
37353: IFFALSE 37363
// viewRange := 16 ;
37355: LD_ADDR_VAR 0 7
37359: PUSH
37360: LD_INT 16
37362: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37363: LD_VAR 0 1
37367: PPUSH
37368: LD_VAR 0 2
37372: PPUSH
37373: LD_VAR 0 3
37377: PPUSH
37378: CALL_OW 297
37382: PUSH
37383: LD_VAR 0 5
37387: GREATER
37388: IFFALSE 37467
// begin ComMoveXY ( unit , x , y ) ;
37390: LD_VAR 0 1
37394: PPUSH
37395: LD_VAR 0 2
37399: PPUSH
37400: LD_VAR 0 3
37404: PPUSH
37405: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37409: LD_INT 35
37411: PPUSH
37412: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37416: LD_VAR 0 1
37420: PPUSH
37421: LD_VAR 0 2
37425: PPUSH
37426: LD_VAR 0 3
37430: PPUSH
37431: CALL 73242 0 3
37435: NOT
37436: IFFALSE 37440
// exit ;
37438: GO 37694
// until GetDistUnitXY ( unit , x , y ) < dist ;
37440: LD_VAR 0 1
37444: PPUSH
37445: LD_VAR 0 2
37449: PPUSH
37450: LD_VAR 0 3
37454: PPUSH
37455: CALL_OW 297
37459: PUSH
37460: LD_VAR 0 5
37464: LESS
37465: IFFALSE 37409
// end ; ComTurnXY ( unit , x , y ) ;
37467: LD_VAR 0 1
37471: PPUSH
37472: LD_VAR 0 2
37476: PPUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL_OW 118
// wait ( 5 ) ;
37486: LD_INT 5
37488: PPUSH
37489: CALL_OW 67
// _d := GetDir ( unit ) ;
37493: LD_ADDR_VAR 0 10
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 254
37507: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37508: LD_ADDR_VAR 0 8
37512: PUSH
37513: LD_VAR 0 1
37517: PPUSH
37518: CALL_OW 250
37522: PPUSH
37523: LD_VAR 0 10
37527: PPUSH
37528: LD_VAR 0 5
37532: PPUSH
37533: CALL_OW 272
37537: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37538: LD_ADDR_VAR 0 9
37542: PUSH
37543: LD_VAR 0 1
37547: PPUSH
37548: CALL_OW 251
37552: PPUSH
37553: LD_VAR 0 10
37557: PPUSH
37558: LD_VAR 0 5
37562: PPUSH
37563: CALL_OW 273
37567: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37568: LD_VAR 0 8
37572: PPUSH
37573: LD_VAR 0 9
37577: PPUSH
37578: CALL_OW 488
37582: NOT
37583: IFFALSE 37587
// exit ;
37585: GO 37694
// ComAnimCustom ( unit , 1 ) ;
37587: LD_VAR 0 1
37591: PPUSH
37592: LD_INT 1
37594: PPUSH
37595: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37599: LD_VAR 0 8
37603: PPUSH
37604: LD_VAR 0 9
37608: PPUSH
37609: LD_VAR 0 6
37613: PPUSH
37614: LD_VAR 0 7
37618: PPUSH
37619: CALL_OW 330
// repeat wait ( 1 ) ;
37623: LD_INT 1
37625: PPUSH
37626: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 316
37639: PUSH
37640: LD_VAR 0 1
37644: PPUSH
37645: CALL_OW 314
37649: OR
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: CALL_OW 302
37660: NOT
37661: OR
37662: PUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 301
37672: OR
37673: IFFALSE 37623
// RemoveSeeing ( _x , _y , side ) ;
37675: LD_VAR 0 8
37679: PPUSH
37680: LD_VAR 0 9
37684: PPUSH
37685: LD_VAR 0 6
37689: PPUSH
37690: CALL_OW 331
// end ; end_of_file
37694: LD_VAR 0 4
37698: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37699: LD_INT 0
37701: PPUSH
37702: PPUSH
// if exist_mode then
37703: LD_VAR 0 2
37707: IFFALSE 37732
// unit := CreateCharacter ( prefix & ident ) else
37709: LD_ADDR_VAR 0 5
37713: PUSH
37714: LD_VAR 0 3
37718: PUSH
37719: LD_VAR 0 1
37723: STR
37724: PPUSH
37725: CALL_OW 34
37729: ST_TO_ADDR
37730: GO 37747
// unit := NewCharacter ( ident ) ;
37732: LD_ADDR_VAR 0 5
37736: PUSH
37737: LD_VAR 0 1
37741: PPUSH
37742: CALL_OW 25
37746: ST_TO_ADDR
// result := unit ;
37747: LD_ADDR_VAR 0 4
37751: PUSH
37752: LD_VAR 0 5
37756: ST_TO_ADDR
// end ;
37757: LD_VAR 0 4
37761: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37762: LD_INT 0
37764: PPUSH
37765: PPUSH
// if not side or not nation then
37766: LD_VAR 0 1
37770: NOT
37771: PUSH
37772: LD_VAR 0 2
37776: NOT
37777: OR
37778: IFFALSE 37782
// exit ;
37780: GO 38550
// case nation of nation_american :
37782: LD_VAR 0 2
37786: PUSH
37787: LD_INT 1
37789: DOUBLE
37790: EQUAL
37791: IFTRUE 37795
37793: GO 38009
37795: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37796: LD_ADDR_VAR 0 4
37800: PUSH
37801: LD_INT 35
37803: PUSH
37804: LD_INT 45
37806: PUSH
37807: LD_INT 46
37809: PUSH
37810: LD_INT 47
37812: PUSH
37813: LD_INT 82
37815: PUSH
37816: LD_INT 83
37818: PUSH
37819: LD_INT 84
37821: PUSH
37822: LD_INT 85
37824: PUSH
37825: LD_INT 86
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: LD_INT 6
37836: PUSH
37837: LD_INT 15
37839: PUSH
37840: LD_INT 16
37842: PUSH
37843: LD_INT 7
37845: PUSH
37846: LD_INT 12
37848: PUSH
37849: LD_INT 13
37851: PUSH
37852: LD_INT 10
37854: PUSH
37855: LD_INT 14
37857: PUSH
37858: LD_INT 20
37860: PUSH
37861: LD_INT 21
37863: PUSH
37864: LD_INT 22
37866: PUSH
37867: LD_INT 25
37869: PUSH
37870: LD_INT 32
37872: PUSH
37873: LD_INT 27
37875: PUSH
37876: LD_INT 36
37878: PUSH
37879: LD_INT 69
37881: PUSH
37882: LD_INT 39
37884: PUSH
37885: LD_INT 34
37887: PUSH
37888: LD_INT 40
37890: PUSH
37891: LD_INT 48
37893: PUSH
37894: LD_INT 49
37896: PUSH
37897: LD_INT 50
37899: PUSH
37900: LD_INT 51
37902: PUSH
37903: LD_INT 52
37905: PUSH
37906: LD_INT 53
37908: PUSH
37909: LD_INT 54
37911: PUSH
37912: LD_INT 55
37914: PUSH
37915: LD_INT 56
37917: PUSH
37918: LD_INT 57
37920: PUSH
37921: LD_INT 58
37923: PUSH
37924: LD_INT 59
37926: PUSH
37927: LD_INT 60
37929: PUSH
37930: LD_INT 61
37932: PUSH
37933: LD_INT 62
37935: PUSH
37936: LD_INT 80
37938: PUSH
37939: LD_INT 82
37941: PUSH
37942: LD_INT 83
37944: PUSH
37945: LD_INT 84
37947: PUSH
37948: LD_INT 85
37950: PUSH
37951: LD_INT 86
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: ST_TO_ADDR
38007: GO 38474
38009: LD_INT 2
38011: DOUBLE
38012: EQUAL
38013: IFTRUE 38017
38015: GO 38243
38017: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38018: LD_ADDR_VAR 0 4
38022: PUSH
38023: LD_INT 35
38025: PUSH
38026: LD_INT 45
38028: PUSH
38029: LD_INT 46
38031: PUSH
38032: LD_INT 47
38034: PUSH
38035: LD_INT 82
38037: PUSH
38038: LD_INT 83
38040: PUSH
38041: LD_INT 84
38043: PUSH
38044: LD_INT 85
38046: PUSH
38047: LD_INT 87
38049: PUSH
38050: LD_INT 70
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 11
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 4
38064: PUSH
38065: LD_INT 5
38067: PUSH
38068: LD_INT 6
38070: PUSH
38071: LD_INT 15
38073: PUSH
38074: LD_INT 18
38076: PUSH
38077: LD_INT 7
38079: PUSH
38080: LD_INT 17
38082: PUSH
38083: LD_INT 8
38085: PUSH
38086: LD_INT 20
38088: PUSH
38089: LD_INT 21
38091: PUSH
38092: LD_INT 22
38094: PUSH
38095: LD_INT 72
38097: PUSH
38098: LD_INT 26
38100: PUSH
38101: LD_INT 69
38103: PUSH
38104: LD_INT 39
38106: PUSH
38107: LD_INT 40
38109: PUSH
38110: LD_INT 41
38112: PUSH
38113: LD_INT 42
38115: PUSH
38116: LD_INT 43
38118: PUSH
38119: LD_INT 48
38121: PUSH
38122: LD_INT 49
38124: PUSH
38125: LD_INT 50
38127: PUSH
38128: LD_INT 51
38130: PUSH
38131: LD_INT 52
38133: PUSH
38134: LD_INT 53
38136: PUSH
38137: LD_INT 54
38139: PUSH
38140: LD_INT 55
38142: PUSH
38143: LD_INT 56
38145: PUSH
38146: LD_INT 60
38148: PUSH
38149: LD_INT 61
38151: PUSH
38152: LD_INT 62
38154: PUSH
38155: LD_INT 66
38157: PUSH
38158: LD_INT 67
38160: PUSH
38161: LD_INT 68
38163: PUSH
38164: LD_INT 81
38166: PUSH
38167: LD_INT 82
38169: PUSH
38170: LD_INT 83
38172: PUSH
38173: LD_INT 84
38175: PUSH
38176: LD_INT 85
38178: PUSH
38179: LD_INT 87
38181: PUSH
38182: LD_INT 88
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
38241: GO 38474
38243: LD_INT 3
38245: DOUBLE
38246: EQUAL
38247: IFTRUE 38251
38249: GO 38473
38251: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38252: LD_ADDR_VAR 0 4
38256: PUSH
38257: LD_INT 46
38259: PUSH
38260: LD_INT 47
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 82
38271: PUSH
38272: LD_INT 83
38274: PUSH
38275: LD_INT 84
38277: PUSH
38278: LD_INT 85
38280: PUSH
38281: LD_INT 86
38283: PUSH
38284: LD_INT 11
38286: PUSH
38287: LD_INT 9
38289: PUSH
38290: LD_INT 20
38292: PUSH
38293: LD_INT 19
38295: PUSH
38296: LD_INT 21
38298: PUSH
38299: LD_INT 24
38301: PUSH
38302: LD_INT 22
38304: PUSH
38305: LD_INT 25
38307: PUSH
38308: LD_INT 28
38310: PUSH
38311: LD_INT 29
38313: PUSH
38314: LD_INT 30
38316: PUSH
38317: LD_INT 31
38319: PUSH
38320: LD_INT 37
38322: PUSH
38323: LD_INT 38
38325: PUSH
38326: LD_INT 32
38328: PUSH
38329: LD_INT 27
38331: PUSH
38332: LD_INT 33
38334: PUSH
38335: LD_INT 69
38337: PUSH
38338: LD_INT 39
38340: PUSH
38341: LD_INT 34
38343: PUSH
38344: LD_INT 40
38346: PUSH
38347: LD_INT 71
38349: PUSH
38350: LD_INT 23
38352: PUSH
38353: LD_INT 44
38355: PUSH
38356: LD_INT 48
38358: PUSH
38359: LD_INT 49
38361: PUSH
38362: LD_INT 50
38364: PUSH
38365: LD_INT 51
38367: PUSH
38368: LD_INT 52
38370: PUSH
38371: LD_INT 53
38373: PUSH
38374: LD_INT 54
38376: PUSH
38377: LD_INT 55
38379: PUSH
38380: LD_INT 56
38382: PUSH
38383: LD_INT 57
38385: PUSH
38386: LD_INT 58
38388: PUSH
38389: LD_INT 59
38391: PUSH
38392: LD_INT 63
38394: PUSH
38395: LD_INT 64
38397: PUSH
38398: LD_INT 65
38400: PUSH
38401: LD_INT 82
38403: PUSH
38404: LD_INT 83
38406: PUSH
38407: LD_INT 84
38409: PUSH
38410: LD_INT 85
38412: PUSH
38413: LD_INT 86
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
38471: GO 38474
38473: POP
// if state > - 1 and state < 3 then
38474: LD_VAR 0 3
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: GREATER
38483: PUSH
38484: LD_VAR 0 3
38488: PUSH
38489: LD_INT 3
38491: LESS
38492: AND
38493: IFFALSE 38550
// for i in result do
38495: LD_ADDR_VAR 0 5
38499: PUSH
38500: LD_VAR 0 4
38504: PUSH
38505: FOR_IN
38506: IFFALSE 38548
// if GetTech ( i , side ) <> state then
38508: LD_VAR 0 5
38512: PPUSH
38513: LD_VAR 0 1
38517: PPUSH
38518: CALL_OW 321
38522: PUSH
38523: LD_VAR 0 3
38527: NONEQUAL
38528: IFFALSE 38546
// result := result diff i ;
38530: LD_ADDR_VAR 0 4
38534: PUSH
38535: LD_VAR 0 4
38539: PUSH
38540: LD_VAR 0 5
38544: DIFF
38545: ST_TO_ADDR
38546: GO 38505
38548: POP
38549: POP
// end ;
38550: LD_VAR 0 4
38554: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38555: LD_INT 0
38557: PPUSH
38558: PPUSH
38559: PPUSH
// result := true ;
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_INT 1
38567: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38568: LD_ADDR_VAR 0 5
38572: PUSH
38573: LD_VAR 0 2
38577: PPUSH
38578: CALL_OW 480
38582: ST_TO_ADDR
// if not tmp then
38583: LD_VAR 0 5
38587: NOT
38588: IFFALSE 38592
// exit ;
38590: GO 38641
// for i in tmp do
38592: LD_ADDR_VAR 0 4
38596: PUSH
38597: LD_VAR 0 5
38601: PUSH
38602: FOR_IN
38603: IFFALSE 38639
// if GetTech ( i , side ) <> state_researched then
38605: LD_VAR 0 4
38609: PPUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL_OW 321
38619: PUSH
38620: LD_INT 2
38622: NONEQUAL
38623: IFFALSE 38637
// begin result := false ;
38625: LD_ADDR_VAR 0 3
38629: PUSH
38630: LD_INT 0
38632: ST_TO_ADDR
// exit ;
38633: POP
38634: POP
38635: GO 38641
// end ;
38637: GO 38602
38639: POP
38640: POP
// end ;
38641: LD_VAR 0 3
38645: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38646: LD_INT 0
38648: PPUSH
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38661: LD_VAR 0 1
38665: NOT
38666: PUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 257
38676: PUSH
38677: LD_INT 9
38679: NONEQUAL
38680: OR
38681: IFFALSE 38685
// exit ;
38683: GO 39258
// side := GetSide ( unit ) ;
38685: LD_ADDR_VAR 0 9
38689: PUSH
38690: LD_VAR 0 1
38694: PPUSH
38695: CALL_OW 255
38699: ST_TO_ADDR
// tech_space := tech_spacanom ;
38700: LD_ADDR_VAR 0 12
38704: PUSH
38705: LD_INT 29
38707: ST_TO_ADDR
// tech_time := tech_taurad ;
38708: LD_ADDR_VAR 0 13
38712: PUSH
38713: LD_INT 28
38715: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38716: LD_ADDR_VAR 0 11
38720: PUSH
38721: LD_VAR 0 1
38725: PPUSH
38726: CALL_OW 310
38730: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38731: LD_VAR 0 11
38735: PPUSH
38736: CALL_OW 247
38740: PUSH
38741: LD_INT 2
38743: EQUAL
38744: IFFALSE 38748
// exit ;
38746: GO 39258
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38748: LD_ADDR_VAR 0 8
38752: PUSH
38753: LD_INT 81
38755: PUSH
38756: LD_VAR 0 9
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: LD_INT 21
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PPUSH
38786: CALL_OW 69
38790: ST_TO_ADDR
// if not tmp then
38791: LD_VAR 0 8
38795: NOT
38796: IFFALSE 38800
// exit ;
38798: GO 39258
// if in_unit then
38800: LD_VAR 0 11
38804: IFFALSE 38828
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38806: LD_ADDR_VAR 0 10
38810: PUSH
38811: LD_VAR 0 8
38815: PPUSH
38816: LD_VAR 0 11
38820: PPUSH
38821: CALL_OW 74
38825: ST_TO_ADDR
38826: GO 38848
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38828: LD_ADDR_VAR 0 10
38832: PUSH
38833: LD_VAR 0 8
38837: PPUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 74
38847: ST_TO_ADDR
// if not enemy then
38848: LD_VAR 0 10
38852: NOT
38853: IFFALSE 38857
// exit ;
38855: GO 39258
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38857: LD_VAR 0 11
38861: PUSH
38862: LD_VAR 0 11
38866: PPUSH
38867: LD_VAR 0 10
38871: PPUSH
38872: CALL_OW 296
38876: PUSH
38877: LD_INT 13
38879: GREATER
38880: AND
38881: PUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: LD_VAR 0 10
38891: PPUSH
38892: CALL_OW 296
38896: PUSH
38897: LD_INT 12
38899: GREATER
38900: OR
38901: IFFALSE 38905
// exit ;
38903: GO 39258
// missile := [ 1 ] ;
38905: LD_ADDR_VAR 0 14
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: EMPTY
38914: LIST
38915: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38916: LD_VAR 0 9
38920: PPUSH
38921: LD_VAR 0 12
38925: PPUSH
38926: CALL_OW 325
38930: IFFALSE 38959
// missile := Insert ( missile , missile + 1 , 2 ) ;
38932: LD_ADDR_VAR 0 14
38936: PUSH
38937: LD_VAR 0 14
38941: PPUSH
38942: LD_VAR 0 14
38946: PUSH
38947: LD_INT 1
38949: PLUS
38950: PPUSH
38951: LD_INT 2
38953: PPUSH
38954: CALL_OW 2
38958: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38959: LD_VAR 0 9
38963: PPUSH
38964: LD_VAR 0 13
38968: PPUSH
38969: CALL_OW 325
38973: PUSH
38974: LD_VAR 0 10
38978: PPUSH
38979: CALL_OW 255
38983: PPUSH
38984: LD_VAR 0 13
38988: PPUSH
38989: CALL_OW 325
38993: NOT
38994: AND
38995: IFFALSE 39024
// missile := Insert ( missile , missile + 1 , 3 ) ;
38997: LD_ADDR_VAR 0 14
39001: PUSH
39002: LD_VAR 0 14
39006: PPUSH
39007: LD_VAR 0 14
39011: PUSH
39012: LD_INT 1
39014: PLUS
39015: PPUSH
39016: LD_INT 3
39018: PPUSH
39019: CALL_OW 2
39023: ST_TO_ADDR
// if missile < 2 then
39024: LD_VAR 0 14
39028: PUSH
39029: LD_INT 2
39031: LESS
39032: IFFALSE 39036
// exit ;
39034: GO 39258
// x := GetX ( enemy ) ;
39036: LD_ADDR_VAR 0 4
39040: PUSH
39041: LD_VAR 0 10
39045: PPUSH
39046: CALL_OW 250
39050: ST_TO_ADDR
// y := GetY ( enemy ) ;
39051: LD_ADDR_VAR 0 5
39055: PUSH
39056: LD_VAR 0 10
39060: PPUSH
39061: CALL_OW 251
39065: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39066: LD_ADDR_VAR 0 6
39070: PUSH
39071: LD_VAR 0 4
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PPUSH
39080: LD_INT 1
39082: PPUSH
39083: CALL_OW 12
39087: PLUS
39088: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39089: LD_ADDR_VAR 0 7
39093: PUSH
39094: LD_VAR 0 5
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PPUSH
39103: LD_INT 1
39105: PPUSH
39106: CALL_OW 12
39110: PLUS
39111: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39112: LD_VAR 0 6
39116: PPUSH
39117: LD_VAR 0 7
39121: PPUSH
39122: CALL_OW 488
39126: NOT
39127: IFFALSE 39149
// begin _x := x ;
39129: LD_ADDR_VAR 0 6
39133: PUSH
39134: LD_VAR 0 4
39138: ST_TO_ADDR
// _y := y ;
39139: LD_ADDR_VAR 0 7
39143: PUSH
39144: LD_VAR 0 5
39148: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39149: LD_ADDR_VAR 0 3
39153: PUSH
39154: LD_INT 1
39156: PPUSH
39157: LD_VAR 0 14
39161: PPUSH
39162: CALL_OW 12
39166: ST_TO_ADDR
// case i of 1 :
39167: LD_VAR 0 3
39171: PUSH
39172: LD_INT 1
39174: DOUBLE
39175: EQUAL
39176: IFTRUE 39180
39178: GO 39197
39180: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39181: LD_VAR 0 1
39185: PPUSH
39186: LD_VAR 0 10
39190: PPUSH
39191: CALL_OW 115
39195: GO 39258
39197: LD_INT 2
39199: DOUBLE
39200: EQUAL
39201: IFTRUE 39205
39203: GO 39227
39205: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39206: LD_VAR 0 1
39210: PPUSH
39211: LD_VAR 0 6
39215: PPUSH
39216: LD_VAR 0 7
39220: PPUSH
39221: CALL_OW 153
39225: GO 39258
39227: LD_INT 3
39229: DOUBLE
39230: EQUAL
39231: IFTRUE 39235
39233: GO 39257
39235: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39236: LD_VAR 0 1
39240: PPUSH
39241: LD_VAR 0 6
39245: PPUSH
39246: LD_VAR 0 7
39250: PPUSH
39251: CALL_OW 154
39255: GO 39258
39257: POP
// end ;
39258: LD_VAR 0 2
39262: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39263: LD_INT 0
39265: PPUSH
39266: PPUSH
39267: PPUSH
39268: PPUSH
39269: PPUSH
39270: PPUSH
// if not unit or not building then
39271: LD_VAR 0 1
39275: NOT
39276: PUSH
39277: LD_VAR 0 2
39281: NOT
39282: OR
39283: IFFALSE 39287
// exit ;
39285: GO 39445
// x := GetX ( building ) ;
39287: LD_ADDR_VAR 0 5
39291: PUSH
39292: LD_VAR 0 2
39296: PPUSH
39297: CALL_OW 250
39301: ST_TO_ADDR
// y := GetY ( building ) ;
39302: LD_ADDR_VAR 0 6
39306: PUSH
39307: LD_VAR 0 2
39311: PPUSH
39312: CALL_OW 251
39316: ST_TO_ADDR
// for i = 0 to 5 do
39317: LD_ADDR_VAR 0 4
39321: PUSH
39322: DOUBLE
39323: LD_INT 0
39325: DEC
39326: ST_TO_ADDR
39327: LD_INT 5
39329: PUSH
39330: FOR_TO
39331: IFFALSE 39443
// begin _x := ShiftX ( x , i , 3 ) ;
39333: LD_ADDR_VAR 0 7
39337: PUSH
39338: LD_VAR 0 5
39342: PPUSH
39343: LD_VAR 0 4
39347: PPUSH
39348: LD_INT 3
39350: PPUSH
39351: CALL_OW 272
39355: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39356: LD_ADDR_VAR 0 8
39360: PUSH
39361: LD_VAR 0 6
39365: PPUSH
39366: LD_VAR 0 4
39370: PPUSH
39371: LD_INT 3
39373: PPUSH
39374: CALL_OW 273
39378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39379: LD_VAR 0 7
39383: PPUSH
39384: LD_VAR 0 8
39388: PPUSH
39389: CALL_OW 488
39393: NOT
39394: IFFALSE 39398
// continue ;
39396: GO 39330
// if HexInfo ( _x , _y ) = 0 then
39398: LD_VAR 0 7
39402: PPUSH
39403: LD_VAR 0 8
39407: PPUSH
39408: CALL_OW 428
39412: PUSH
39413: LD_INT 0
39415: EQUAL
39416: IFFALSE 39441
// begin ComMoveXY ( unit , _x , _y ) ;
39418: LD_VAR 0 1
39422: PPUSH
39423: LD_VAR 0 7
39427: PPUSH
39428: LD_VAR 0 8
39432: PPUSH
39433: CALL_OW 111
// exit ;
39437: POP
39438: POP
39439: GO 39445
// end ; end ;
39441: GO 39330
39443: POP
39444: POP
// end ;
39445: LD_VAR 0 3
39449: RET
// export function ScanBase ( side , base_area ) ; begin
39450: LD_INT 0
39452: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_VAR 0 2
39462: PPUSH
39463: LD_INT 81
39465: PUSH
39466: LD_VAR 0 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PPUSH
39475: CALL_OW 70
39479: ST_TO_ADDR
// end ;
39480: LD_VAR 0 3
39484: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39485: LD_INT 0
39487: PPUSH
39488: PPUSH
39489: PPUSH
39490: PPUSH
// result := false ;
39491: LD_ADDR_VAR 0 2
39495: PUSH
39496: LD_INT 0
39498: ST_TO_ADDR
// side := GetSide ( unit ) ;
39499: LD_ADDR_VAR 0 3
39503: PUSH
39504: LD_VAR 0 1
39508: PPUSH
39509: CALL_OW 255
39513: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39514: LD_ADDR_VAR 0 4
39518: PUSH
39519: LD_VAR 0 1
39523: PPUSH
39524: CALL_OW 248
39528: ST_TO_ADDR
// case nat of 1 :
39529: LD_VAR 0 4
39533: PUSH
39534: LD_INT 1
39536: DOUBLE
39537: EQUAL
39538: IFTRUE 39542
39540: GO 39553
39542: POP
// tech := tech_lassight ; 2 :
39543: LD_ADDR_VAR 0 5
39547: PUSH
39548: LD_INT 12
39550: ST_TO_ADDR
39551: GO 39592
39553: LD_INT 2
39555: DOUBLE
39556: EQUAL
39557: IFTRUE 39561
39559: GO 39572
39561: POP
// tech := tech_mortar ; 3 :
39562: LD_ADDR_VAR 0 5
39566: PUSH
39567: LD_INT 41
39569: ST_TO_ADDR
39570: GO 39592
39572: LD_INT 3
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39591
39580: POP
// tech := tech_bazooka ; end ;
39581: LD_ADDR_VAR 0 5
39585: PUSH
39586: LD_INT 44
39588: ST_TO_ADDR
39589: GO 39592
39591: POP
// if Researched ( side , tech ) then
39592: LD_VAR 0 3
39596: PPUSH
39597: LD_VAR 0 5
39601: PPUSH
39602: CALL_OW 325
39606: IFFALSE 39633
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39608: LD_ADDR_VAR 0 2
39612: PUSH
39613: LD_INT 5
39615: PUSH
39616: LD_INT 8
39618: PUSH
39619: LD_INT 9
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: LIST
39626: PUSH
39627: LD_VAR 0 4
39631: ARRAY
39632: ST_TO_ADDR
// end ;
39633: LD_VAR 0 2
39637: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39638: LD_INT 0
39640: PPUSH
39641: PPUSH
39642: PPUSH
// if not mines then
39643: LD_VAR 0 2
39647: NOT
39648: IFFALSE 39652
// exit ;
39650: GO 39796
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39652: LD_ADDR_VAR 0 5
39656: PUSH
39657: LD_INT 81
39659: PUSH
39660: LD_VAR 0 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 21
39674: PUSH
39675: LD_INT 3
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PPUSH
39690: CALL_OW 69
39694: ST_TO_ADDR
// for i in mines do
39695: LD_ADDR_VAR 0 4
39699: PUSH
39700: LD_VAR 0 2
39704: PUSH
39705: FOR_IN
39706: IFFALSE 39794
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39708: LD_VAR 0 4
39712: PUSH
39713: LD_INT 1
39715: ARRAY
39716: PPUSH
39717: LD_VAR 0 4
39721: PUSH
39722: LD_INT 2
39724: ARRAY
39725: PPUSH
39726: CALL_OW 458
39730: NOT
39731: IFFALSE 39735
// continue ;
39733: GO 39705
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39735: LD_VAR 0 4
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PPUSH
39744: LD_VAR 0 4
39748: PUSH
39749: LD_INT 2
39751: ARRAY
39752: PPUSH
39753: CALL_OW 428
39757: PUSH
39758: LD_VAR 0 5
39762: IN
39763: IFFALSE 39792
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39765: LD_VAR 0 4
39769: PUSH
39770: LD_INT 1
39772: ARRAY
39773: PPUSH
39774: LD_VAR 0 4
39778: PUSH
39779: LD_INT 2
39781: ARRAY
39782: PPUSH
39783: LD_VAR 0 1
39787: PPUSH
39788: CALL_OW 456
// end ;
39792: GO 39705
39794: POP
39795: POP
// end ;
39796: LD_VAR 0 3
39800: RET
// export function Count ( array ) ; var i ; begin
39801: LD_INT 0
39803: PPUSH
39804: PPUSH
// result := 0 ;
39805: LD_ADDR_VAR 0 2
39809: PUSH
39810: LD_INT 0
39812: ST_TO_ADDR
// for i in array do
39813: LD_ADDR_VAR 0 3
39817: PUSH
39818: LD_VAR 0 1
39822: PUSH
39823: FOR_IN
39824: IFFALSE 39848
// if i then
39826: LD_VAR 0 3
39830: IFFALSE 39846
// result := result + 1 ;
39832: LD_ADDR_VAR 0 2
39836: PUSH
39837: LD_VAR 0 2
39841: PUSH
39842: LD_INT 1
39844: PLUS
39845: ST_TO_ADDR
39846: GO 39823
39848: POP
39849: POP
// end ;
39850: LD_VAR 0 2
39854: RET
// export function IsEmpty ( building ) ; begin
39855: LD_INT 0
39857: PPUSH
// if not building then
39858: LD_VAR 0 1
39862: NOT
39863: IFFALSE 39867
// exit ;
39865: GO 39910
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39867: LD_ADDR_VAR 0 2
39871: PUSH
39872: LD_VAR 0 1
39876: PUSH
39877: LD_INT 22
39879: PUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 255
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 58
39896: PUSH
39897: EMPTY
39898: LIST
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PPUSH
39904: CALL_OW 69
39908: IN
39909: ST_TO_ADDR
// end ;
39910: LD_VAR 0 2
39914: RET
// export function IsNotFull ( building ) ; begin
39915: LD_INT 0
39917: PPUSH
// if not building then
39918: LD_VAR 0 1
39922: NOT
39923: IFFALSE 39927
// exit ;
39925: GO 39946
// result := UnitsInside ( building ) < 6 ;
39927: LD_ADDR_VAR 0 2
39931: PUSH
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 313
39941: PUSH
39942: LD_INT 6
39944: LESS
39945: ST_TO_ADDR
// end ;
39946: LD_VAR 0 2
39950: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39951: LD_INT 0
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
// tmp := [ ] ;
39957: LD_ADDR_VAR 0 3
39961: PUSH
39962: EMPTY
39963: ST_TO_ADDR
// list := [ ] ;
39964: LD_ADDR_VAR 0 5
39968: PUSH
39969: EMPTY
39970: ST_TO_ADDR
// for i = 16 to 25 do
39971: LD_ADDR_VAR 0 4
39975: PUSH
39976: DOUBLE
39977: LD_INT 16
39979: DEC
39980: ST_TO_ADDR
39981: LD_INT 25
39983: PUSH
39984: FOR_TO
39985: IFFALSE 40058
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_VAR 0 3
39996: PUSH
39997: LD_INT 22
39999: PUSH
40000: LD_VAR 0 1
40004: PPUSH
40005: CALL_OW 255
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 91
40016: PUSH
40017: LD_VAR 0 1
40021: PUSH
40022: LD_INT 6
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 30
40032: PUSH
40033: LD_VAR 0 4
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: PPUSH
40050: CALL_OW 69
40054: ADD
40055: ST_TO_ADDR
40056: GO 39984
40058: POP
40059: POP
// for i = 1 to tmp do
40060: LD_ADDR_VAR 0 4
40064: PUSH
40065: DOUBLE
40066: LD_INT 1
40068: DEC
40069: ST_TO_ADDR
40070: LD_VAR 0 3
40074: PUSH
40075: FOR_TO
40076: IFFALSE 40164
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40078: LD_ADDR_VAR 0 5
40082: PUSH
40083: LD_VAR 0 5
40087: PUSH
40088: LD_VAR 0 3
40092: PUSH
40093: LD_VAR 0 4
40097: ARRAY
40098: PPUSH
40099: CALL_OW 266
40103: PUSH
40104: LD_VAR 0 3
40108: PUSH
40109: LD_VAR 0 4
40113: ARRAY
40114: PPUSH
40115: CALL_OW 250
40119: PUSH
40120: LD_VAR 0 3
40124: PUSH
40125: LD_VAR 0 4
40129: ARRAY
40130: PPUSH
40131: CALL_OW 251
40135: PUSH
40136: LD_VAR 0 3
40140: PUSH
40141: LD_VAR 0 4
40145: ARRAY
40146: PPUSH
40147: CALL_OW 254
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: ADD
40161: ST_TO_ADDR
40162: GO 40075
40164: POP
40165: POP
// result := list ;
40166: LD_ADDR_VAR 0 2
40170: PUSH
40171: LD_VAR 0 5
40175: ST_TO_ADDR
// end ;
40176: LD_VAR 0 2
40180: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40181: LD_INT 0
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
// if not factory then
40190: LD_VAR 0 1
40194: NOT
40195: IFFALSE 40199
// exit ;
40197: GO 40792
// if control = control_apeman then
40199: LD_VAR 0 4
40203: PUSH
40204: LD_INT 5
40206: EQUAL
40207: IFFALSE 40316
// begin tmp := UnitsInside ( factory ) ;
40209: LD_ADDR_VAR 0 8
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 313
40223: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40224: LD_VAR 0 8
40228: PPUSH
40229: LD_INT 25
40231: PUSH
40232: LD_INT 12
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PPUSH
40239: CALL_OW 72
40243: NOT
40244: IFFALSE 40254
// control := control_manual ;
40246: LD_ADDR_VAR 0 4
40250: PUSH
40251: LD_INT 1
40253: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40254: LD_ADDR_VAR 0 8
40258: PUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL 39951 0 1
40268: ST_TO_ADDR
// if tmp then
40269: LD_VAR 0 8
40273: IFFALSE 40316
// begin for i in tmp do
40275: LD_ADDR_VAR 0 7
40279: PUSH
40280: LD_VAR 0 8
40284: PUSH
40285: FOR_IN
40286: IFFALSE 40314
// if i [ 1 ] = b_ext_radio then
40288: LD_VAR 0 7
40292: PUSH
40293: LD_INT 1
40295: ARRAY
40296: PUSH
40297: LD_INT 22
40299: EQUAL
40300: IFFALSE 40312
// begin control := control_remote ;
40302: LD_ADDR_VAR 0 4
40306: PUSH
40307: LD_INT 2
40309: ST_TO_ADDR
// break ;
40310: GO 40314
// end ;
40312: GO 40285
40314: POP
40315: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40316: LD_VAR 0 1
40320: PPUSH
40321: LD_VAR 0 2
40325: PPUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: LD_VAR 0 4
40335: PPUSH
40336: LD_VAR 0 5
40340: PPUSH
40341: CALL_OW 448
40345: IFFALSE 40380
// begin result := [ chassis , engine , control , weapon ] ;
40347: LD_ADDR_VAR 0 6
40351: PUSH
40352: LD_VAR 0 2
40356: PUSH
40357: LD_VAR 0 3
40361: PUSH
40362: LD_VAR 0 4
40366: PUSH
40367: LD_VAR 0 5
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: ST_TO_ADDR
// exit ;
40378: GO 40792
// end ; _chassis := AvailableChassisList ( factory ) ;
40380: LD_ADDR_VAR 0 9
40384: PUSH
40385: LD_VAR 0 1
40389: PPUSH
40390: CALL_OW 475
40394: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40395: LD_ADDR_VAR 0 11
40399: PUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: CALL_OW 476
40409: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40410: LD_ADDR_VAR 0 12
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 477
40424: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40425: LD_ADDR_VAR 0 10
40429: PUSH
40430: LD_VAR 0 1
40434: PPUSH
40435: CALL_OW 478
40439: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40440: LD_VAR 0 9
40444: NOT
40445: PUSH
40446: LD_VAR 0 11
40450: NOT
40451: OR
40452: PUSH
40453: LD_VAR 0 12
40457: NOT
40458: OR
40459: PUSH
40460: LD_VAR 0 10
40464: NOT
40465: OR
40466: IFFALSE 40501
// begin result := [ chassis , engine , control , weapon ] ;
40468: LD_ADDR_VAR 0 6
40472: PUSH
40473: LD_VAR 0 2
40477: PUSH
40478: LD_VAR 0 3
40482: PUSH
40483: LD_VAR 0 4
40487: PUSH
40488: LD_VAR 0 5
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: ST_TO_ADDR
// exit ;
40499: GO 40792
// end ; if not chassis in _chassis then
40501: LD_VAR 0 2
40505: PUSH
40506: LD_VAR 0 9
40510: IN
40511: NOT
40512: IFFALSE 40538
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40514: LD_ADDR_VAR 0 2
40518: PUSH
40519: LD_VAR 0 9
40523: PUSH
40524: LD_INT 1
40526: PPUSH
40527: LD_VAR 0 9
40531: PPUSH
40532: CALL_OW 12
40536: ARRAY
40537: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40538: LD_VAR 0 2
40542: PPUSH
40543: LD_VAR 0 3
40547: PPUSH
40548: CALL 40797 0 2
40552: NOT
40553: IFFALSE 40612
// repeat engine := _engine [ 1 ] ;
40555: LD_ADDR_VAR 0 3
40559: PUSH
40560: LD_VAR 0 11
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40569: LD_ADDR_VAR 0 11
40573: PUSH
40574: LD_VAR 0 11
40578: PPUSH
40579: LD_INT 1
40581: PPUSH
40582: CALL_OW 3
40586: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40587: LD_VAR 0 2
40591: PPUSH
40592: LD_VAR 0 3
40596: PPUSH
40597: CALL 40797 0 2
40601: PUSH
40602: LD_VAR 0 11
40606: PUSH
40607: EMPTY
40608: EQUAL
40609: OR
40610: IFFALSE 40555
// if not control in _control then
40612: LD_VAR 0 4
40616: PUSH
40617: LD_VAR 0 12
40621: IN
40622: NOT
40623: IFFALSE 40649
// control := _control [ rand ( 1 , _control ) ] ;
40625: LD_ADDR_VAR 0 4
40629: PUSH
40630: LD_VAR 0 12
40634: PUSH
40635: LD_INT 1
40637: PPUSH
40638: LD_VAR 0 12
40642: PPUSH
40643: CALL_OW 12
40647: ARRAY
40648: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40649: LD_VAR 0 2
40653: PPUSH
40654: LD_VAR 0 5
40658: PPUSH
40659: CALL 41017 0 2
40663: NOT
40664: IFFALSE 40723
// repeat weapon := _weapon [ 1 ] ;
40666: LD_ADDR_VAR 0 5
40670: PUSH
40671: LD_VAR 0 10
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40680: LD_ADDR_VAR 0 10
40684: PUSH
40685: LD_VAR 0 10
40689: PPUSH
40690: LD_INT 1
40692: PPUSH
40693: CALL_OW 3
40697: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40698: LD_VAR 0 2
40702: PPUSH
40703: LD_VAR 0 5
40707: PPUSH
40708: CALL 41017 0 2
40712: PUSH
40713: LD_VAR 0 10
40717: PUSH
40718: EMPTY
40719: EQUAL
40720: OR
40721: IFFALSE 40666
// result := [ ] ;
40723: LD_ADDR_VAR 0 6
40727: PUSH
40728: EMPTY
40729: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40730: LD_VAR 0 1
40734: PPUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: LD_VAR 0 3
40744: PPUSH
40745: LD_VAR 0 4
40749: PPUSH
40750: LD_VAR 0 5
40754: PPUSH
40755: CALL_OW 448
40759: IFFALSE 40792
// result := [ chassis , engine , control , weapon ] ;
40761: LD_ADDR_VAR 0 6
40765: PUSH
40766: LD_VAR 0 2
40770: PUSH
40771: LD_VAR 0 3
40775: PUSH
40776: LD_VAR 0 4
40780: PUSH
40781: LD_VAR 0 5
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
// end ;
40792: LD_VAR 0 6
40796: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40797: LD_INT 0
40799: PPUSH
// if not chassis or not engine then
40800: LD_VAR 0 1
40804: NOT
40805: PUSH
40806: LD_VAR 0 2
40810: NOT
40811: OR
40812: IFFALSE 40816
// exit ;
40814: GO 41012
// case engine of engine_solar :
40816: LD_VAR 0 2
40820: PUSH
40821: LD_INT 2
40823: DOUBLE
40824: EQUAL
40825: IFTRUE 40829
40827: GO 40867
40829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40830: LD_ADDR_VAR 0 3
40834: PUSH
40835: LD_INT 11
40837: PUSH
40838: LD_INT 12
40840: PUSH
40841: LD_INT 13
40843: PUSH
40844: LD_INT 14
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 3
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
40865: GO 40996
40867: LD_INT 1
40869: DOUBLE
40870: EQUAL
40871: IFTRUE 40875
40873: GO 40937
40875: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_INT 11
40883: PUSH
40884: LD_INT 12
40886: PUSH
40887: LD_INT 13
40889: PUSH
40890: LD_INT 14
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 2
40898: PUSH
40899: LD_INT 3
40901: PUSH
40902: LD_INT 4
40904: PUSH
40905: LD_INT 5
40907: PUSH
40908: LD_INT 21
40910: PUSH
40911: LD_INT 23
40913: PUSH
40914: LD_INT 22
40916: PUSH
40917: LD_INT 24
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: ST_TO_ADDR
40935: GO 40996
40937: LD_INT 3
40939: DOUBLE
40940: EQUAL
40941: IFTRUE 40945
40943: GO 40995
40945: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40946: LD_ADDR_VAR 0 3
40950: PUSH
40951: LD_INT 13
40953: PUSH
40954: LD_INT 14
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: LD_INT 4
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: LD_INT 21
40971: PUSH
40972: LD_INT 22
40974: PUSH
40975: LD_INT 23
40977: PUSH
40978: LD_INT 24
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: ST_TO_ADDR
40993: GO 40996
40995: POP
// result := ( chassis in result ) ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 1
41005: PUSH
41006: LD_VAR 0 3
41010: IN
41011: ST_TO_ADDR
// end ;
41012: LD_VAR 0 3
41016: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41017: LD_INT 0
41019: PPUSH
// if not chassis or not weapon then
41020: LD_VAR 0 1
41024: NOT
41025: PUSH
41026: LD_VAR 0 2
41030: NOT
41031: OR
41032: IFFALSE 41036
// exit ;
41034: GO 42098
// case weapon of us_machine_gun :
41036: LD_VAR 0 2
41040: PUSH
41041: LD_INT 2
41043: DOUBLE
41044: EQUAL
41045: IFTRUE 41049
41047: GO 41079
41049: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41050: LD_ADDR_VAR 0 3
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 3
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: LD_INT 5
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
41077: GO 42082
41079: LD_INT 3
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41087
41085: GO 41117
41087: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: LD_INT 4
41104: PUSH
41105: LD_INT 5
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: ST_TO_ADDR
41115: GO 42082
41117: LD_INT 11
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41125
41123: GO 41155
41125: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41126: LD_ADDR_VAR 0 3
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: LD_INT 4
41142: PUSH
41143: LD_INT 5
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: ST_TO_ADDR
41153: GO 42082
41155: LD_INT 4
41157: DOUBLE
41158: EQUAL
41159: IFTRUE 41163
41161: GO 41189
41163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41164: LD_ADDR_VAR 0 3
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: LD_INT 4
41177: PUSH
41178: LD_INT 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
41187: GO 42082
41189: LD_INT 5
41191: DOUBLE
41192: EQUAL
41193: IFTRUE 41197
41195: GO 41223
41197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41198: LD_ADDR_VAR 0 3
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: LD_INT 3
41208: PUSH
41209: LD_INT 4
41211: PUSH
41212: LD_INT 5
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: ST_TO_ADDR
41221: GO 42082
41223: LD_INT 9
41225: DOUBLE
41226: EQUAL
41227: IFTRUE 41231
41229: GO 41257
41231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41232: LD_ADDR_VAR 0 3
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: LD_INT 4
41245: PUSH
41246: LD_INT 5
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
41255: GO 42082
41257: LD_INT 7
41259: DOUBLE
41260: EQUAL
41261: IFTRUE 41265
41263: GO 41291
41265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41266: LD_ADDR_VAR 0 3
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: LD_INT 4
41279: PUSH
41280: LD_INT 5
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
41289: GO 42082
41291: LD_INT 12
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41299
41297: GO 41325
41299: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41300: LD_ADDR_VAR 0 3
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: LD_INT 3
41310: PUSH
41311: LD_INT 4
41313: PUSH
41314: LD_INT 5
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: ST_TO_ADDR
41323: GO 42082
41325: LD_INT 13
41327: DOUBLE
41328: EQUAL
41329: IFTRUE 41333
41331: GO 41359
41333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41334: LD_ADDR_VAR 0 3
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: LD_INT 4
41347: PUSH
41348: LD_INT 5
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: ST_TO_ADDR
41357: GO 42082
41359: LD_INT 14
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41367
41365: GO 41385
41367: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41368: LD_ADDR_VAR 0 3
41372: PUSH
41373: LD_INT 4
41375: PUSH
41376: LD_INT 5
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: ST_TO_ADDR
41383: GO 42082
41385: LD_INT 6
41387: DOUBLE
41388: EQUAL
41389: IFTRUE 41393
41391: GO 41411
41393: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41394: LD_ADDR_VAR 0 3
41398: PUSH
41399: LD_INT 4
41401: PUSH
41402: LD_INT 5
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: ST_TO_ADDR
41409: GO 42082
41411: LD_INT 10
41413: DOUBLE
41414: EQUAL
41415: IFTRUE 41419
41417: GO 41437
41419: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41420: LD_ADDR_VAR 0 3
41424: PUSH
41425: LD_INT 4
41427: PUSH
41428: LD_INT 5
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: ST_TO_ADDR
41435: GO 42082
41437: LD_INT 22
41439: DOUBLE
41440: EQUAL
41441: IFTRUE 41445
41443: GO 41471
41445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_INT 11
41453: PUSH
41454: LD_INT 12
41456: PUSH
41457: LD_INT 13
41459: PUSH
41460: LD_INT 14
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: ST_TO_ADDR
41469: GO 42082
41471: LD_INT 23
41473: DOUBLE
41474: EQUAL
41475: IFTRUE 41479
41477: GO 41505
41479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: LD_INT 11
41487: PUSH
41488: LD_INT 12
41490: PUSH
41491: LD_INT 13
41493: PUSH
41494: LD_INT 14
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
41503: GO 42082
41505: LD_INT 24
41507: DOUBLE
41508: EQUAL
41509: IFTRUE 41513
41511: GO 41539
41513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41514: LD_ADDR_VAR 0 3
41518: PUSH
41519: LD_INT 11
41521: PUSH
41522: LD_INT 12
41524: PUSH
41525: LD_INT 13
41527: PUSH
41528: LD_INT 14
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
41537: GO 42082
41539: LD_INT 30
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41547
41545: GO 41573
41547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41548: LD_ADDR_VAR 0 3
41552: PUSH
41553: LD_INT 11
41555: PUSH
41556: LD_INT 12
41558: PUSH
41559: LD_INT 13
41561: PUSH
41562: LD_INT 14
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: ST_TO_ADDR
41571: GO 42082
41573: LD_INT 25
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41581
41579: GO 41599
41581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41582: LD_ADDR_VAR 0 3
41586: PUSH
41587: LD_INT 13
41589: PUSH
41590: LD_INT 14
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: ST_TO_ADDR
41597: GO 42082
41599: LD_INT 27
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 41625
41607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41608: LD_ADDR_VAR 0 3
41612: PUSH
41613: LD_INT 13
41615: PUSH
41616: LD_INT 14
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 42082
41625: LD_EXP 55
41629: DOUBLE
41630: EQUAL
41631: IFTRUE 41635
41633: GO 41661
41635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41636: LD_ADDR_VAR 0 3
41640: PUSH
41641: LD_INT 11
41643: PUSH
41644: LD_INT 12
41646: PUSH
41647: LD_INT 13
41649: PUSH
41650: LD_INT 14
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: ST_TO_ADDR
41659: GO 42082
41661: LD_INT 28
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41669
41667: GO 41687
41669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41670: LD_ADDR_VAR 0 3
41674: PUSH
41675: LD_INT 13
41677: PUSH
41678: LD_INT 14
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: ST_TO_ADDR
41685: GO 42082
41687: LD_INT 29
41689: DOUBLE
41690: EQUAL
41691: IFTRUE 41695
41693: GO 41713
41695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_INT 13
41703: PUSH
41704: LD_INT 14
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: ST_TO_ADDR
41711: GO 42082
41713: LD_INT 31
41715: DOUBLE
41716: EQUAL
41717: IFTRUE 41721
41719: GO 41739
41721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41722: LD_ADDR_VAR 0 3
41726: PUSH
41727: LD_INT 13
41729: PUSH
41730: LD_INT 14
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: ST_TO_ADDR
41737: GO 42082
41739: LD_INT 26
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41747
41745: GO 41765
41747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: LD_INT 13
41755: PUSH
41756: LD_INT 14
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: ST_TO_ADDR
41763: GO 42082
41765: LD_INT 42
41767: DOUBLE
41768: EQUAL
41769: IFTRUE 41773
41771: GO 41799
41773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41774: LD_ADDR_VAR 0 3
41778: PUSH
41779: LD_INT 21
41781: PUSH
41782: LD_INT 22
41784: PUSH
41785: LD_INT 23
41787: PUSH
41788: LD_INT 24
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: ST_TO_ADDR
41797: GO 42082
41799: LD_INT 43
41801: DOUBLE
41802: EQUAL
41803: IFTRUE 41807
41805: GO 41833
41807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41808: LD_ADDR_VAR 0 3
41812: PUSH
41813: LD_INT 21
41815: PUSH
41816: LD_INT 22
41818: PUSH
41819: LD_INT 23
41821: PUSH
41822: LD_INT 24
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: ST_TO_ADDR
41831: GO 42082
41833: LD_INT 44
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41841
41839: GO 41867
41841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_INT 21
41849: PUSH
41850: LD_INT 22
41852: PUSH
41853: LD_INT 23
41855: PUSH
41856: LD_INT 24
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: ST_TO_ADDR
41865: GO 42082
41867: LD_INT 45
41869: DOUBLE
41870: EQUAL
41871: IFTRUE 41875
41873: GO 41901
41875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_INT 21
41883: PUSH
41884: LD_INT 22
41886: PUSH
41887: LD_INT 23
41889: PUSH
41890: LD_INT 24
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: ST_TO_ADDR
41899: GO 42082
41901: LD_INT 49
41903: DOUBLE
41904: EQUAL
41905: IFTRUE 41909
41907: GO 41935
41909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41910: LD_ADDR_VAR 0 3
41914: PUSH
41915: LD_INT 21
41917: PUSH
41918: LD_INT 22
41920: PUSH
41921: LD_INT 23
41923: PUSH
41924: LD_INT 24
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: ST_TO_ADDR
41933: GO 42082
41935: LD_INT 51
41937: DOUBLE
41938: EQUAL
41939: IFTRUE 41943
41941: GO 41969
41943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41944: LD_ADDR_VAR 0 3
41948: PUSH
41949: LD_INT 21
41951: PUSH
41952: LD_INT 22
41954: PUSH
41955: LD_INT 23
41957: PUSH
41958: LD_INT 24
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: ST_TO_ADDR
41967: GO 42082
41969: LD_INT 52
41971: DOUBLE
41972: EQUAL
41973: IFTRUE 41977
41975: GO 42003
41977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_INT 21
41985: PUSH
41986: LD_INT 22
41988: PUSH
41989: LD_INT 23
41991: PUSH
41992: LD_INT 24
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
42001: GO 42082
42003: LD_INT 53
42005: DOUBLE
42006: EQUAL
42007: IFTRUE 42011
42009: GO 42029
42011: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_INT 23
42019: PUSH
42020: LD_INT 24
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: ST_TO_ADDR
42027: GO 42082
42029: LD_INT 46
42031: DOUBLE
42032: EQUAL
42033: IFTRUE 42037
42035: GO 42055
42037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42038: LD_ADDR_VAR 0 3
42042: PUSH
42043: LD_INT 23
42045: PUSH
42046: LD_INT 24
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: ST_TO_ADDR
42053: GO 42082
42055: LD_INT 47
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42063
42061: GO 42081
42063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42064: LD_ADDR_VAR 0 3
42068: PUSH
42069: LD_INT 23
42071: PUSH
42072: LD_INT 24
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: ST_TO_ADDR
42079: GO 42082
42081: POP
// result := ( chassis in result ) ;
42082: LD_ADDR_VAR 0 3
42086: PUSH
42087: LD_VAR 0 1
42091: PUSH
42092: LD_VAR 0 3
42096: IN
42097: ST_TO_ADDR
// end ;
42098: LD_VAR 0 3
42102: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42103: LD_INT 0
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
// result := array ;
42112: LD_ADDR_VAR 0 5
42116: PUSH
42117: LD_VAR 0 1
42121: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42122: LD_VAR 0 1
42126: NOT
42127: PUSH
42128: LD_VAR 0 2
42132: NOT
42133: OR
42134: PUSH
42135: LD_VAR 0 3
42139: NOT
42140: OR
42141: PUSH
42142: LD_VAR 0 2
42146: PUSH
42147: LD_VAR 0 1
42151: GREATER
42152: OR
42153: PUSH
42154: LD_VAR 0 3
42158: PUSH
42159: LD_VAR 0 1
42163: GREATER
42164: OR
42165: IFFALSE 42169
// exit ;
42167: GO 42465
// if direction then
42169: LD_VAR 0 4
42173: IFFALSE 42237
// begin d := 1 ;
42175: LD_ADDR_VAR 0 9
42179: PUSH
42180: LD_INT 1
42182: ST_TO_ADDR
// if i_from > i_to then
42183: LD_VAR 0 2
42187: PUSH
42188: LD_VAR 0 3
42192: GREATER
42193: IFFALSE 42219
// length := ( array - i_from ) + i_to else
42195: LD_ADDR_VAR 0 11
42199: PUSH
42200: LD_VAR 0 1
42204: PUSH
42205: LD_VAR 0 2
42209: MINUS
42210: PUSH
42211: LD_VAR 0 3
42215: PLUS
42216: ST_TO_ADDR
42217: GO 42235
// length := i_to - i_from ;
42219: LD_ADDR_VAR 0 11
42223: PUSH
42224: LD_VAR 0 3
42228: PUSH
42229: LD_VAR 0 2
42233: MINUS
42234: ST_TO_ADDR
// end else
42235: GO 42298
// begin d := - 1 ;
42237: LD_ADDR_VAR 0 9
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: ST_TO_ADDR
// if i_from > i_to then
42246: LD_VAR 0 2
42250: PUSH
42251: LD_VAR 0 3
42255: GREATER
42256: IFFALSE 42276
// length := i_from - i_to else
42258: LD_ADDR_VAR 0 11
42262: PUSH
42263: LD_VAR 0 2
42267: PUSH
42268: LD_VAR 0 3
42272: MINUS
42273: ST_TO_ADDR
42274: GO 42298
// length := ( array - i_to ) + i_from ;
42276: LD_ADDR_VAR 0 11
42280: PUSH
42281: LD_VAR 0 1
42285: PUSH
42286: LD_VAR 0 3
42290: MINUS
42291: PUSH
42292: LD_VAR 0 2
42296: PLUS
42297: ST_TO_ADDR
// end ; if not length then
42298: LD_VAR 0 11
42302: NOT
42303: IFFALSE 42307
// exit ;
42305: GO 42465
// tmp := array ;
42307: LD_ADDR_VAR 0 10
42311: PUSH
42312: LD_VAR 0 1
42316: ST_TO_ADDR
// for i = 1 to length do
42317: LD_ADDR_VAR 0 6
42321: PUSH
42322: DOUBLE
42323: LD_INT 1
42325: DEC
42326: ST_TO_ADDR
42327: LD_VAR 0 11
42331: PUSH
42332: FOR_TO
42333: IFFALSE 42453
// begin for j = 1 to array do
42335: LD_ADDR_VAR 0 7
42339: PUSH
42340: DOUBLE
42341: LD_INT 1
42343: DEC
42344: ST_TO_ADDR
42345: LD_VAR 0 1
42349: PUSH
42350: FOR_TO
42351: IFFALSE 42439
// begin k := j + d ;
42353: LD_ADDR_VAR 0 8
42357: PUSH
42358: LD_VAR 0 7
42362: PUSH
42363: LD_VAR 0 9
42367: PLUS
42368: ST_TO_ADDR
// if k > array then
42369: LD_VAR 0 8
42373: PUSH
42374: LD_VAR 0 1
42378: GREATER
42379: IFFALSE 42389
// k := 1 ;
42381: LD_ADDR_VAR 0 8
42385: PUSH
42386: LD_INT 1
42388: ST_TO_ADDR
// if not k then
42389: LD_VAR 0 8
42393: NOT
42394: IFFALSE 42406
// k := array ;
42396: LD_ADDR_VAR 0 8
42400: PUSH
42401: LD_VAR 0 1
42405: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42406: LD_ADDR_VAR 0 10
42410: PUSH
42411: LD_VAR 0 10
42415: PPUSH
42416: LD_VAR 0 8
42420: PPUSH
42421: LD_VAR 0 1
42425: PUSH
42426: LD_VAR 0 7
42430: ARRAY
42431: PPUSH
42432: CALL_OW 1
42436: ST_TO_ADDR
// end ;
42437: GO 42350
42439: POP
42440: POP
// array := tmp ;
42441: LD_ADDR_VAR 0 1
42445: PUSH
42446: LD_VAR 0 10
42450: ST_TO_ADDR
// end ;
42451: GO 42332
42453: POP
42454: POP
// result := array ;
42455: LD_ADDR_VAR 0 5
42459: PUSH
42460: LD_VAR 0 1
42464: ST_TO_ADDR
// end ;
42465: LD_VAR 0 5
42469: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42470: LD_INT 0
42472: PPUSH
42473: PPUSH
// result := 0 ;
42474: LD_ADDR_VAR 0 3
42478: PUSH
42479: LD_INT 0
42481: ST_TO_ADDR
// if not array or not value in array then
42482: LD_VAR 0 1
42486: NOT
42487: PUSH
42488: LD_VAR 0 2
42492: PUSH
42493: LD_VAR 0 1
42497: IN
42498: NOT
42499: OR
42500: IFFALSE 42504
// exit ;
42502: GO 42558
// for i = 1 to array do
42504: LD_ADDR_VAR 0 4
42508: PUSH
42509: DOUBLE
42510: LD_INT 1
42512: DEC
42513: ST_TO_ADDR
42514: LD_VAR 0 1
42518: PUSH
42519: FOR_TO
42520: IFFALSE 42556
// if value = array [ i ] then
42522: LD_VAR 0 2
42526: PUSH
42527: LD_VAR 0 1
42531: PUSH
42532: LD_VAR 0 4
42536: ARRAY
42537: EQUAL
42538: IFFALSE 42554
// begin result := i ;
42540: LD_ADDR_VAR 0 3
42544: PUSH
42545: LD_VAR 0 4
42549: ST_TO_ADDR
// exit ;
42550: POP
42551: POP
42552: GO 42558
// end ;
42554: GO 42519
42556: POP
42557: POP
// end ;
42558: LD_VAR 0 3
42562: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42563: LD_INT 0
42565: PPUSH
// vc_chassis := chassis ;
42566: LD_ADDR_OWVAR 37
42570: PUSH
42571: LD_VAR 0 1
42575: ST_TO_ADDR
// vc_engine := engine ;
42576: LD_ADDR_OWVAR 39
42580: PUSH
42581: LD_VAR 0 2
42585: ST_TO_ADDR
// vc_control := control ;
42586: LD_ADDR_OWVAR 38
42590: PUSH
42591: LD_VAR 0 3
42595: ST_TO_ADDR
// vc_weapon := weapon ;
42596: LD_ADDR_OWVAR 40
42600: PUSH
42601: LD_VAR 0 4
42605: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42606: LD_ADDR_OWVAR 41
42610: PUSH
42611: LD_VAR 0 5
42615: ST_TO_ADDR
// end ;
42616: LD_VAR 0 6
42620: RET
// export function WantPlant ( unit ) ; var task ; begin
42621: LD_INT 0
42623: PPUSH
42624: PPUSH
// result := false ;
42625: LD_ADDR_VAR 0 2
42629: PUSH
42630: LD_INT 0
42632: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42633: LD_ADDR_VAR 0 3
42637: PUSH
42638: LD_VAR 0 1
42642: PPUSH
42643: CALL_OW 437
42647: ST_TO_ADDR
// if task then
42648: LD_VAR 0 3
42652: IFFALSE 42680
// if task [ 1 ] [ 1 ] = p then
42654: LD_VAR 0 3
42658: PUSH
42659: LD_INT 1
42661: ARRAY
42662: PUSH
42663: LD_INT 1
42665: ARRAY
42666: PUSH
42667: LD_STRING p
42669: EQUAL
42670: IFFALSE 42680
// result := true ;
42672: LD_ADDR_VAR 0 2
42676: PUSH
42677: LD_INT 1
42679: ST_TO_ADDR
// end ;
42680: LD_VAR 0 2
42684: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42685: LD_INT 0
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
// if pos < 1 then
42691: LD_VAR 0 2
42695: PUSH
42696: LD_INT 1
42698: LESS
42699: IFFALSE 42703
// exit ;
42701: GO 43006
// if pos = 1 then
42703: LD_VAR 0 2
42707: PUSH
42708: LD_INT 1
42710: EQUAL
42711: IFFALSE 42744
// result := Replace ( arr , pos [ 1 ] , value ) else
42713: LD_ADDR_VAR 0 4
42717: PUSH
42718: LD_VAR 0 1
42722: PPUSH
42723: LD_VAR 0 2
42727: PUSH
42728: LD_INT 1
42730: ARRAY
42731: PPUSH
42732: LD_VAR 0 3
42736: PPUSH
42737: CALL_OW 1
42741: ST_TO_ADDR
42742: GO 43006
// begin tmp := arr ;
42744: LD_ADDR_VAR 0 6
42748: PUSH
42749: LD_VAR 0 1
42753: ST_TO_ADDR
// s_arr := [ tmp ] ;
42754: LD_ADDR_VAR 0 7
42758: PUSH
42759: LD_VAR 0 6
42763: PUSH
42764: EMPTY
42765: LIST
42766: ST_TO_ADDR
// for i = 1 to pos - 1 do
42767: LD_ADDR_VAR 0 5
42771: PUSH
42772: DOUBLE
42773: LD_INT 1
42775: DEC
42776: ST_TO_ADDR
42777: LD_VAR 0 2
42781: PUSH
42782: LD_INT 1
42784: MINUS
42785: PUSH
42786: FOR_TO
42787: IFFALSE 42832
// begin tmp := tmp [ pos [ i ] ] ;
42789: LD_ADDR_VAR 0 6
42793: PUSH
42794: LD_VAR 0 6
42798: PUSH
42799: LD_VAR 0 2
42803: PUSH
42804: LD_VAR 0 5
42808: ARRAY
42809: ARRAY
42810: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42811: LD_ADDR_VAR 0 7
42815: PUSH
42816: LD_VAR 0 7
42820: PUSH
42821: LD_VAR 0 6
42825: PUSH
42826: EMPTY
42827: LIST
42828: ADD
42829: ST_TO_ADDR
// end ;
42830: GO 42786
42832: POP
42833: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42834: LD_ADDR_VAR 0 6
42838: PUSH
42839: LD_VAR 0 6
42843: PPUSH
42844: LD_VAR 0 2
42848: PUSH
42849: LD_VAR 0 2
42853: ARRAY
42854: PPUSH
42855: LD_VAR 0 3
42859: PPUSH
42860: CALL_OW 1
42864: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42865: LD_ADDR_VAR 0 7
42869: PUSH
42870: LD_VAR 0 7
42874: PPUSH
42875: LD_VAR 0 7
42879: PPUSH
42880: LD_VAR 0 6
42884: PPUSH
42885: CALL_OW 1
42889: ST_TO_ADDR
// for i = s_arr downto 2 do
42890: LD_ADDR_VAR 0 5
42894: PUSH
42895: DOUBLE
42896: LD_VAR 0 7
42900: INC
42901: ST_TO_ADDR
42902: LD_INT 2
42904: PUSH
42905: FOR_DOWNTO
42906: IFFALSE 42990
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42908: LD_ADDR_VAR 0 6
42912: PUSH
42913: LD_VAR 0 7
42917: PUSH
42918: LD_VAR 0 5
42922: PUSH
42923: LD_INT 1
42925: MINUS
42926: ARRAY
42927: PPUSH
42928: LD_VAR 0 2
42932: PUSH
42933: LD_VAR 0 5
42937: PUSH
42938: LD_INT 1
42940: MINUS
42941: ARRAY
42942: PPUSH
42943: LD_VAR 0 7
42947: PUSH
42948: LD_VAR 0 5
42952: ARRAY
42953: PPUSH
42954: CALL_OW 1
42958: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42959: LD_ADDR_VAR 0 7
42963: PUSH
42964: LD_VAR 0 7
42968: PPUSH
42969: LD_VAR 0 5
42973: PUSH
42974: LD_INT 1
42976: MINUS
42977: PPUSH
42978: LD_VAR 0 6
42982: PPUSH
42983: CALL_OW 1
42987: ST_TO_ADDR
// end ;
42988: GO 42905
42990: POP
42991: POP
// result := s_arr [ 1 ] ;
42992: LD_ADDR_VAR 0 4
42996: PUSH
42997: LD_VAR 0 7
43001: PUSH
43002: LD_INT 1
43004: ARRAY
43005: ST_TO_ADDR
// end ; end ;
43006: LD_VAR 0 4
43010: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43011: LD_INT 0
43013: PPUSH
43014: PPUSH
// if not list then
43015: LD_VAR 0 1
43019: NOT
43020: IFFALSE 43024
// exit ;
43022: GO 43115
// i := list [ pos1 ] ;
43024: LD_ADDR_VAR 0 5
43028: PUSH
43029: LD_VAR 0 1
43033: PUSH
43034: LD_VAR 0 2
43038: ARRAY
43039: ST_TO_ADDR
// if not i then
43040: LD_VAR 0 5
43044: NOT
43045: IFFALSE 43049
// exit ;
43047: GO 43115
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43049: LD_ADDR_VAR 0 1
43053: PUSH
43054: LD_VAR 0 1
43058: PPUSH
43059: LD_VAR 0 2
43063: PPUSH
43064: LD_VAR 0 1
43068: PUSH
43069: LD_VAR 0 3
43073: ARRAY
43074: PPUSH
43075: CALL_OW 1
43079: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43080: LD_ADDR_VAR 0 1
43084: PUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: LD_VAR 0 3
43094: PPUSH
43095: LD_VAR 0 5
43099: PPUSH
43100: CALL_OW 1
43104: ST_TO_ADDR
// result := list ;
43105: LD_ADDR_VAR 0 4
43109: PUSH
43110: LD_VAR 0 1
43114: ST_TO_ADDR
// end ;
43115: LD_VAR 0 4
43119: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43120: LD_INT 0
43122: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43123: LD_ADDR_VAR 0 5
43127: PUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: CALL_OW 250
43137: PPUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 251
43147: PPUSH
43148: LD_VAR 0 2
43152: PPUSH
43153: LD_VAR 0 3
43157: PPUSH
43158: LD_VAR 0 4
43162: PPUSH
43163: CALL 43173 0 5
43167: ST_TO_ADDR
// end ;
43168: LD_VAR 0 5
43172: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43173: LD_INT 0
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
// if not list then
43179: LD_VAR 0 3
43183: NOT
43184: IFFALSE 43188
// exit ;
43186: GO 43576
// result := [ ] ;
43188: LD_ADDR_VAR 0 6
43192: PUSH
43193: EMPTY
43194: ST_TO_ADDR
// for i in list do
43195: LD_ADDR_VAR 0 7
43199: PUSH
43200: LD_VAR 0 3
43204: PUSH
43205: FOR_IN
43206: IFFALSE 43408
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43208: LD_ADDR_VAR 0 9
43212: PUSH
43213: LD_VAR 0 7
43217: PPUSH
43218: LD_VAR 0 1
43222: PPUSH
43223: LD_VAR 0 2
43227: PPUSH
43228: CALL_OW 297
43232: ST_TO_ADDR
// if not result then
43233: LD_VAR 0 6
43237: NOT
43238: IFFALSE 43264
// result := [ [ i , tmp ] ] else
43240: LD_ADDR_VAR 0 6
43244: PUSH
43245: LD_VAR 0 7
43249: PUSH
43250: LD_VAR 0 9
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: EMPTY
43260: LIST
43261: ST_TO_ADDR
43262: GO 43406
// begin if result [ result ] [ 2 ] < tmp then
43264: LD_VAR 0 6
43268: PUSH
43269: LD_VAR 0 6
43273: ARRAY
43274: PUSH
43275: LD_INT 2
43277: ARRAY
43278: PUSH
43279: LD_VAR 0 9
43283: LESS
43284: IFFALSE 43326
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43286: LD_ADDR_VAR 0 6
43290: PUSH
43291: LD_VAR 0 6
43295: PPUSH
43296: LD_VAR 0 6
43300: PUSH
43301: LD_INT 1
43303: PLUS
43304: PPUSH
43305: LD_VAR 0 7
43309: PUSH
43310: LD_VAR 0 9
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PPUSH
43319: CALL_OW 2
43323: ST_TO_ADDR
43324: GO 43406
// for j = 1 to result do
43326: LD_ADDR_VAR 0 8
43330: PUSH
43331: DOUBLE
43332: LD_INT 1
43334: DEC
43335: ST_TO_ADDR
43336: LD_VAR 0 6
43340: PUSH
43341: FOR_TO
43342: IFFALSE 43404
// begin if tmp < result [ j ] [ 2 ] then
43344: LD_VAR 0 9
43348: PUSH
43349: LD_VAR 0 6
43353: PUSH
43354: LD_VAR 0 8
43358: ARRAY
43359: PUSH
43360: LD_INT 2
43362: ARRAY
43363: LESS
43364: IFFALSE 43402
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43366: LD_ADDR_VAR 0 6
43370: PUSH
43371: LD_VAR 0 6
43375: PPUSH
43376: LD_VAR 0 8
43380: PPUSH
43381: LD_VAR 0 7
43385: PUSH
43386: LD_VAR 0 9
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PPUSH
43395: CALL_OW 2
43399: ST_TO_ADDR
// break ;
43400: GO 43404
// end ; end ;
43402: GO 43341
43404: POP
43405: POP
// end ; end ;
43406: GO 43205
43408: POP
43409: POP
// if result and not asc then
43410: LD_VAR 0 6
43414: PUSH
43415: LD_VAR 0 4
43419: NOT
43420: AND
43421: IFFALSE 43496
// begin tmp := result ;
43423: LD_ADDR_VAR 0 9
43427: PUSH
43428: LD_VAR 0 6
43432: ST_TO_ADDR
// for i = tmp downto 1 do
43433: LD_ADDR_VAR 0 7
43437: PUSH
43438: DOUBLE
43439: LD_VAR 0 9
43443: INC
43444: ST_TO_ADDR
43445: LD_INT 1
43447: PUSH
43448: FOR_DOWNTO
43449: IFFALSE 43494
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43451: LD_ADDR_VAR 0 6
43455: PUSH
43456: LD_VAR 0 6
43460: PPUSH
43461: LD_VAR 0 9
43465: PUSH
43466: LD_VAR 0 7
43470: MINUS
43471: PUSH
43472: LD_INT 1
43474: PLUS
43475: PPUSH
43476: LD_VAR 0 9
43480: PUSH
43481: LD_VAR 0 7
43485: ARRAY
43486: PPUSH
43487: CALL_OW 1
43491: ST_TO_ADDR
43492: GO 43448
43494: POP
43495: POP
// end ; tmp := [ ] ;
43496: LD_ADDR_VAR 0 9
43500: PUSH
43501: EMPTY
43502: ST_TO_ADDR
// if mode then
43503: LD_VAR 0 5
43507: IFFALSE 43576
// begin for i = 1 to result do
43509: LD_ADDR_VAR 0 7
43513: PUSH
43514: DOUBLE
43515: LD_INT 1
43517: DEC
43518: ST_TO_ADDR
43519: LD_VAR 0 6
43523: PUSH
43524: FOR_TO
43525: IFFALSE 43564
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43527: LD_ADDR_VAR 0 9
43531: PUSH
43532: LD_VAR 0 9
43536: PPUSH
43537: LD_VAR 0 7
43541: PPUSH
43542: LD_VAR 0 6
43546: PUSH
43547: LD_VAR 0 7
43551: ARRAY
43552: PUSH
43553: LD_INT 1
43555: ARRAY
43556: PPUSH
43557: CALL_OW 1
43561: ST_TO_ADDR
43562: GO 43524
43564: POP
43565: POP
// result := tmp ;
43566: LD_ADDR_VAR 0 6
43570: PUSH
43571: LD_VAR 0 9
43575: ST_TO_ADDR
// end ; end ;
43576: LD_VAR 0 6
43580: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43581: LD_INT 0
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43589: LD_ADDR_VAR 0 5
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// if not x or not y then
43611: LD_VAR 0 2
43615: NOT
43616: PUSH
43617: LD_VAR 0 3
43621: NOT
43622: OR
43623: IFFALSE 43627
// exit ;
43625: GO 45279
// if not range then
43627: LD_VAR 0 4
43631: NOT
43632: IFFALSE 43642
// range := 10 ;
43634: LD_ADDR_VAR 0 4
43638: PUSH
43639: LD_INT 10
43641: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43642: LD_ADDR_VAR 0 8
43646: PUSH
43647: LD_INT 81
43649: PUSH
43650: LD_VAR 0 1
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 92
43661: PUSH
43662: LD_VAR 0 2
43666: PUSH
43667: LD_VAR 0 3
43671: PUSH
43672: LD_VAR 0 4
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 3
43685: PUSH
43686: LD_INT 21
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: PPUSH
43705: CALL_OW 69
43709: ST_TO_ADDR
// if not tmp then
43710: LD_VAR 0 8
43714: NOT
43715: IFFALSE 43719
// exit ;
43717: GO 45279
// for i in tmp do
43719: LD_ADDR_VAR 0 6
43723: PUSH
43724: LD_VAR 0 8
43728: PUSH
43729: FOR_IN
43730: IFFALSE 45254
// begin points := [ 0 , 0 , 0 ] ;
43732: LD_ADDR_VAR 0 9
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: ST_TO_ADDR
// bpoints := 1 ;
43751: LD_ADDR_VAR 0 10
43755: PUSH
43756: LD_INT 1
43758: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43759: LD_VAR 0 6
43763: PPUSH
43764: CALL_OW 247
43768: PUSH
43769: LD_INT 1
43771: DOUBLE
43772: EQUAL
43773: IFTRUE 43777
43775: GO 44355
43777: POP
// begin if GetClass ( i ) = 1 then
43778: LD_VAR 0 6
43782: PPUSH
43783: CALL_OW 257
43787: PUSH
43788: LD_INT 1
43790: EQUAL
43791: IFFALSE 43812
// points := [ 10 , 5 , 3 ] ;
43793: LD_ADDR_VAR 0 9
43797: PUSH
43798: LD_INT 10
43800: PUSH
43801: LD_INT 5
43803: PUSH
43804: LD_INT 3
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43812: LD_VAR 0 6
43816: PPUSH
43817: CALL_OW 257
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: LD_INT 4
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: IN
43836: IFFALSE 43857
// points := [ 3 , 2 , 1 ] ;
43838: LD_ADDR_VAR 0 9
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43857: LD_VAR 0 6
43861: PPUSH
43862: CALL_OW 257
43866: PUSH
43867: LD_INT 5
43869: EQUAL
43870: IFFALSE 43891
// points := [ 130 , 5 , 2 ] ;
43872: LD_ADDR_VAR 0 9
43876: PUSH
43877: LD_INT 130
43879: PUSH
43880: LD_INT 5
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43891: LD_VAR 0 6
43895: PPUSH
43896: CALL_OW 257
43900: PUSH
43901: LD_INT 8
43903: EQUAL
43904: IFFALSE 43925
// points := [ 35 , 35 , 30 ] ;
43906: LD_ADDR_VAR 0 9
43910: PUSH
43911: LD_INT 35
43913: PUSH
43914: LD_INT 35
43916: PUSH
43917: LD_INT 30
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: LIST
43924: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43925: LD_VAR 0 6
43929: PPUSH
43930: CALL_OW 257
43934: PUSH
43935: LD_INT 9
43937: EQUAL
43938: IFFALSE 43959
// points := [ 20 , 55 , 40 ] ;
43940: LD_ADDR_VAR 0 9
43944: PUSH
43945: LD_INT 20
43947: PUSH
43948: LD_INT 55
43950: PUSH
43951: LD_INT 40
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43959: LD_VAR 0 6
43963: PPUSH
43964: CALL_OW 257
43968: PUSH
43969: LD_INT 12
43971: PUSH
43972: LD_INT 16
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: IN
43979: IFFALSE 44000
// points := [ 5 , 3 , 2 ] ;
43981: LD_ADDR_VAR 0 9
43985: PUSH
43986: LD_INT 5
43988: PUSH
43989: LD_INT 3
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44000: LD_VAR 0 6
44004: PPUSH
44005: CALL_OW 257
44009: PUSH
44010: LD_INT 17
44012: EQUAL
44013: IFFALSE 44034
// points := [ 100 , 50 , 75 ] ;
44015: LD_ADDR_VAR 0 9
44019: PUSH
44020: LD_INT 100
44022: PUSH
44023: LD_INT 50
44025: PUSH
44026: LD_INT 75
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44034: LD_VAR 0 6
44038: PPUSH
44039: CALL_OW 257
44043: PUSH
44044: LD_INT 15
44046: EQUAL
44047: IFFALSE 44068
// points := [ 10 , 5 , 3 ] ;
44049: LD_ADDR_VAR 0 9
44053: PUSH
44054: LD_INT 10
44056: PUSH
44057: LD_INT 5
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44068: LD_VAR 0 6
44072: PPUSH
44073: CALL_OW 257
44077: PUSH
44078: LD_INT 14
44080: EQUAL
44081: IFFALSE 44102
// points := [ 10 , 0 , 0 ] ;
44083: LD_ADDR_VAR 0 9
44087: PUSH
44088: LD_INT 10
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44102: LD_VAR 0 6
44106: PPUSH
44107: CALL_OW 257
44111: PUSH
44112: LD_INT 11
44114: EQUAL
44115: IFFALSE 44136
// points := [ 30 , 10 , 5 ] ;
44117: LD_ADDR_VAR 0 9
44121: PUSH
44122: LD_INT 30
44124: PUSH
44125: LD_INT 10
44127: PUSH
44128: LD_INT 5
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44136: LD_VAR 0 1
44140: PPUSH
44141: LD_INT 5
44143: PPUSH
44144: CALL_OW 321
44148: PUSH
44149: LD_INT 2
44151: EQUAL
44152: IFFALSE 44169
// bpoints := bpoints * 1.8 ;
44154: LD_ADDR_VAR 0 10
44158: PUSH
44159: LD_VAR 0 10
44163: PUSH
44164: LD_REAL  1.80000000000000E+0000
44167: MUL
44168: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44169: LD_VAR 0 6
44173: PPUSH
44174: CALL_OW 257
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: LD_INT 4
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: IN
44197: PUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: LD_INT 51
44205: PPUSH
44206: CALL_OW 321
44210: PUSH
44211: LD_INT 2
44213: EQUAL
44214: AND
44215: IFFALSE 44232
// bpoints := bpoints * 1.2 ;
44217: LD_ADDR_VAR 0 10
44221: PUSH
44222: LD_VAR 0 10
44226: PUSH
44227: LD_REAL  1.20000000000000E+0000
44230: MUL
44231: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44232: LD_VAR 0 6
44236: PPUSH
44237: CALL_OW 257
44241: PUSH
44242: LD_INT 5
44244: PUSH
44245: LD_INT 7
44247: PUSH
44248: LD_INT 9
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: LIST
44255: IN
44256: PUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: LD_INT 52
44264: PPUSH
44265: CALL_OW 321
44269: PUSH
44270: LD_INT 2
44272: EQUAL
44273: AND
44274: IFFALSE 44291
// bpoints := bpoints * 1.5 ;
44276: LD_ADDR_VAR 0 10
44280: PUSH
44281: LD_VAR 0 10
44285: PUSH
44286: LD_REAL  1.50000000000000E+0000
44289: MUL
44290: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44291: LD_VAR 0 1
44295: PPUSH
44296: LD_INT 66
44298: PPUSH
44299: CALL_OW 321
44303: PUSH
44304: LD_INT 2
44306: EQUAL
44307: IFFALSE 44324
// bpoints := bpoints * 1.1 ;
44309: LD_ADDR_VAR 0 10
44313: PUSH
44314: LD_VAR 0 10
44318: PUSH
44319: LD_REAL  1.10000000000000E+0000
44322: MUL
44323: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44324: LD_ADDR_VAR 0 10
44328: PUSH
44329: LD_VAR 0 10
44333: PUSH
44334: LD_VAR 0 6
44338: PPUSH
44339: LD_INT 1
44341: PPUSH
44342: CALL_OW 259
44346: PUSH
44347: LD_REAL  1.15000000000000E+0000
44350: MUL
44351: MUL
44352: ST_TO_ADDR
// end ; unit_vehicle :
44353: GO 45183
44355: LD_INT 2
44357: DOUBLE
44358: EQUAL
44359: IFTRUE 44363
44361: GO 45171
44363: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44364: LD_VAR 0 6
44368: PPUSH
44369: CALL_OW 264
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 42
44379: PUSH
44380: LD_INT 24
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: IN
44388: IFFALSE 44409
// points := [ 25 , 5 , 3 ] ;
44390: LD_ADDR_VAR 0 9
44394: PUSH
44395: LD_INT 25
44397: PUSH
44398: LD_INT 5
44400: PUSH
44401: LD_INT 3
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44409: LD_VAR 0 6
44413: PPUSH
44414: CALL_OW 264
44418: PUSH
44419: LD_INT 4
44421: PUSH
44422: LD_INT 43
44424: PUSH
44425: LD_INT 25
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: IN
44433: IFFALSE 44454
// points := [ 40 , 15 , 5 ] ;
44435: LD_ADDR_VAR 0 9
44439: PUSH
44440: LD_INT 40
44442: PUSH
44443: LD_INT 15
44445: PUSH
44446: LD_INT 5
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44454: LD_VAR 0 6
44458: PPUSH
44459: CALL_OW 264
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: LD_INT 23
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: IN
44474: IFFALSE 44495
// points := [ 7 , 25 , 8 ] ;
44476: LD_ADDR_VAR 0 9
44480: PUSH
44481: LD_INT 7
44483: PUSH
44484: LD_INT 25
44486: PUSH
44487: LD_INT 8
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44495: LD_VAR 0 6
44499: PPUSH
44500: CALL_OW 264
44504: PUSH
44505: LD_INT 5
44507: PUSH
44508: LD_INT 27
44510: PUSH
44511: LD_INT 44
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: LIST
44518: IN
44519: IFFALSE 44540
// points := [ 14 , 50 , 16 ] ;
44521: LD_ADDR_VAR 0 9
44525: PUSH
44526: LD_INT 14
44528: PUSH
44529: LD_INT 50
44531: PUSH
44532: LD_INT 16
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44540: LD_VAR 0 6
44544: PPUSH
44545: CALL_OW 264
44549: PUSH
44550: LD_INT 6
44552: PUSH
44553: LD_INT 46
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: IN
44560: IFFALSE 44581
// points := [ 32 , 120 , 70 ] ;
44562: LD_ADDR_VAR 0 9
44566: PUSH
44567: LD_INT 32
44569: PUSH
44570: LD_INT 120
44572: PUSH
44573: LD_INT 70
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44581: LD_VAR 0 6
44585: PPUSH
44586: CALL_OW 264
44590: PUSH
44591: LD_INT 7
44593: PUSH
44594: LD_INT 28
44596: PUSH
44597: LD_INT 45
44599: PUSH
44600: LD_EXP 55
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: IN
44611: IFFALSE 44632
// points := [ 35 , 20 , 45 ] ;
44613: LD_ADDR_VAR 0 9
44617: PUSH
44618: LD_INT 35
44620: PUSH
44621: LD_INT 20
44623: PUSH
44624: LD_INT 45
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44632: LD_VAR 0 6
44636: PPUSH
44637: CALL_OW 264
44641: PUSH
44642: LD_INT 47
44644: PUSH
44645: EMPTY
44646: LIST
44647: IN
44648: IFFALSE 44669
// points := [ 67 , 45 , 75 ] ;
44650: LD_ADDR_VAR 0 9
44654: PUSH
44655: LD_INT 67
44657: PUSH
44658: LD_INT 45
44660: PUSH
44661: LD_INT 75
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44669: LD_VAR 0 6
44673: PPUSH
44674: CALL_OW 264
44678: PUSH
44679: LD_INT 26
44681: PUSH
44682: EMPTY
44683: LIST
44684: IN
44685: IFFALSE 44706
// points := [ 120 , 30 , 80 ] ;
44687: LD_ADDR_VAR 0 9
44691: PUSH
44692: LD_INT 120
44694: PUSH
44695: LD_INT 30
44697: PUSH
44698: LD_INT 80
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44706: LD_VAR 0 6
44710: PPUSH
44711: CALL_OW 264
44715: PUSH
44716: LD_INT 22
44718: PUSH
44719: EMPTY
44720: LIST
44721: IN
44722: IFFALSE 44743
// points := [ 40 , 1 , 1 ] ;
44724: LD_ADDR_VAR 0 9
44728: PUSH
44729: LD_INT 40
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44743: LD_VAR 0 6
44747: PPUSH
44748: CALL_OW 264
44752: PUSH
44753: LD_INT 29
44755: PUSH
44756: EMPTY
44757: LIST
44758: IN
44759: IFFALSE 44780
// points := [ 70 , 200 , 400 ] ;
44761: LD_ADDR_VAR 0 9
44765: PUSH
44766: LD_INT 70
44768: PUSH
44769: LD_INT 200
44771: PUSH
44772: LD_INT 400
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44780: LD_VAR 0 6
44784: PPUSH
44785: CALL_OW 264
44789: PUSH
44790: LD_INT 14
44792: PUSH
44793: LD_INT 53
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: IN
44800: IFFALSE 44821
// points := [ 40 , 10 , 20 ] ;
44802: LD_ADDR_VAR 0 9
44806: PUSH
44807: LD_INT 40
44809: PUSH
44810: LD_INT 10
44812: PUSH
44813: LD_INT 20
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44821: LD_VAR 0 6
44825: PPUSH
44826: CALL_OW 264
44830: PUSH
44831: LD_INT 9
44833: PUSH
44834: EMPTY
44835: LIST
44836: IN
44837: IFFALSE 44858
// points := [ 5 , 70 , 20 ] ;
44839: LD_ADDR_VAR 0 9
44843: PUSH
44844: LD_INT 5
44846: PUSH
44847: LD_INT 70
44849: PUSH
44850: LD_INT 20
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44858: LD_VAR 0 6
44862: PPUSH
44863: CALL_OW 264
44867: PUSH
44868: LD_INT 10
44870: PUSH
44871: EMPTY
44872: LIST
44873: IN
44874: IFFALSE 44895
// points := [ 35 , 110 , 70 ] ;
44876: LD_ADDR_VAR 0 9
44880: PUSH
44881: LD_INT 35
44883: PUSH
44884: LD_INT 110
44886: PUSH
44887: LD_INT 70
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44895: LD_VAR 0 6
44899: PPUSH
44900: CALL_OW 265
44904: PUSH
44905: LD_INT 25
44907: EQUAL
44908: IFFALSE 44929
// points := [ 80 , 65 , 100 ] ;
44910: LD_ADDR_VAR 0 9
44914: PUSH
44915: LD_INT 80
44917: PUSH
44918: LD_INT 65
44920: PUSH
44921: LD_INT 100
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44929: LD_VAR 0 6
44933: PPUSH
44934: CALL_OW 263
44938: PUSH
44939: LD_INT 1
44941: EQUAL
44942: IFFALSE 44977
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44944: LD_ADDR_VAR 0 10
44948: PUSH
44949: LD_VAR 0 10
44953: PUSH
44954: LD_VAR 0 6
44958: PPUSH
44959: CALL_OW 311
44963: PPUSH
44964: LD_INT 3
44966: PPUSH
44967: CALL_OW 259
44971: PUSH
44972: LD_INT 4
44974: MUL
44975: MUL
44976: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44977: LD_VAR 0 6
44981: PPUSH
44982: CALL_OW 263
44986: PUSH
44987: LD_INT 2
44989: EQUAL
44990: IFFALSE 45041
// begin j := IsControledBy ( i ) ;
44992: LD_ADDR_VAR 0 7
44996: PUSH
44997: LD_VAR 0 6
45001: PPUSH
45002: CALL_OW 312
45006: ST_TO_ADDR
// if j then
45007: LD_VAR 0 7
45011: IFFALSE 45041
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45013: LD_ADDR_VAR 0 10
45017: PUSH
45018: LD_VAR 0 10
45022: PUSH
45023: LD_VAR 0 7
45027: PPUSH
45028: LD_INT 3
45030: PPUSH
45031: CALL_OW 259
45035: PUSH
45036: LD_INT 3
45038: MUL
45039: MUL
45040: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45041: LD_VAR 0 6
45045: PPUSH
45046: CALL_OW 264
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: LD_INT 6
45056: PUSH
45057: LD_INT 46
45059: PUSH
45060: LD_INT 44
45062: PUSH
45063: LD_INT 47
45065: PUSH
45066: LD_INT 45
45068: PUSH
45069: LD_INT 28
45071: PUSH
45072: LD_INT 7
45074: PUSH
45075: LD_INT 27
45077: PUSH
45078: LD_INT 29
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: IN
45093: PUSH
45094: LD_VAR 0 1
45098: PPUSH
45099: LD_INT 52
45101: PPUSH
45102: CALL_OW 321
45106: PUSH
45107: LD_INT 2
45109: EQUAL
45110: AND
45111: IFFALSE 45128
// bpoints := bpoints * 1.2 ;
45113: LD_ADDR_VAR 0 10
45117: PUSH
45118: LD_VAR 0 10
45122: PUSH
45123: LD_REAL  1.20000000000000E+0000
45126: MUL
45127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45128: LD_VAR 0 6
45132: PPUSH
45133: CALL_OW 264
45137: PUSH
45138: LD_INT 6
45140: PUSH
45141: LD_INT 46
45143: PUSH
45144: LD_INT 47
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: IN
45152: IFFALSE 45169
// bpoints := bpoints * 1.2 ;
45154: LD_ADDR_VAR 0 10
45158: PUSH
45159: LD_VAR 0 10
45163: PUSH
45164: LD_REAL  1.20000000000000E+0000
45167: MUL
45168: ST_TO_ADDR
// end ; unit_building :
45169: GO 45183
45171: LD_INT 3
45173: DOUBLE
45174: EQUAL
45175: IFTRUE 45179
45177: GO 45182
45179: POP
// ; end ;
45180: GO 45183
45182: POP
// for j = 1 to 3 do
45183: LD_ADDR_VAR 0 7
45187: PUSH
45188: DOUBLE
45189: LD_INT 1
45191: DEC
45192: ST_TO_ADDR
45193: LD_INT 3
45195: PUSH
45196: FOR_TO
45197: IFFALSE 45250
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45199: LD_ADDR_VAR 0 5
45203: PUSH
45204: LD_VAR 0 5
45208: PPUSH
45209: LD_VAR 0 7
45213: PPUSH
45214: LD_VAR 0 5
45218: PUSH
45219: LD_VAR 0 7
45223: ARRAY
45224: PUSH
45225: LD_VAR 0 9
45229: PUSH
45230: LD_VAR 0 7
45234: ARRAY
45235: PUSH
45236: LD_VAR 0 10
45240: MUL
45241: PLUS
45242: PPUSH
45243: CALL_OW 1
45247: ST_TO_ADDR
45248: GO 45196
45250: POP
45251: POP
// end ;
45252: GO 43729
45254: POP
45255: POP
// result := Replace ( result , 4 , tmp ) ;
45256: LD_ADDR_VAR 0 5
45260: PUSH
45261: LD_VAR 0 5
45265: PPUSH
45266: LD_INT 4
45268: PPUSH
45269: LD_VAR 0 8
45273: PPUSH
45274: CALL_OW 1
45278: ST_TO_ADDR
// end ;
45279: LD_VAR 0 5
45283: RET
// export function DangerAtRange ( unit , range ) ; begin
45284: LD_INT 0
45286: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45287: LD_ADDR_VAR 0 3
45291: PUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 255
45301: PPUSH
45302: LD_VAR 0 1
45306: PPUSH
45307: CALL_OW 250
45311: PPUSH
45312: LD_VAR 0 1
45316: PPUSH
45317: CALL_OW 251
45321: PPUSH
45322: LD_VAR 0 2
45326: PPUSH
45327: CALL 43581 0 4
45331: ST_TO_ADDR
// end ;
45332: LD_VAR 0 3
45336: RET
// export function DangerInArea ( side , area ) ; begin
45337: LD_INT 0
45339: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45340: LD_ADDR_VAR 0 3
45344: PUSH
45345: LD_VAR 0 2
45349: PPUSH
45350: LD_INT 81
45352: PUSH
45353: LD_VAR 0 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PPUSH
45362: CALL_OW 70
45366: ST_TO_ADDR
// end ;
45367: LD_VAR 0 3
45371: RET
// export function IsExtension ( b ) ; begin
45372: LD_INT 0
45374: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45375: LD_ADDR_VAR 0 2
45379: PUSH
45380: LD_VAR 0 1
45384: PUSH
45385: LD_INT 23
45387: PUSH
45388: LD_INT 20
45390: PUSH
45391: LD_INT 22
45393: PUSH
45394: LD_INT 17
45396: PUSH
45397: LD_INT 24
45399: PUSH
45400: LD_INT 21
45402: PUSH
45403: LD_INT 19
45405: PUSH
45406: LD_INT 16
45408: PUSH
45409: LD_INT 25
45411: PUSH
45412: LD_INT 18
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: IN
45427: ST_TO_ADDR
// end ;
45428: LD_VAR 0 2
45432: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45433: LD_INT 0
45435: PPUSH
45436: PPUSH
45437: PPUSH
// result := [ ] ;
45438: LD_ADDR_VAR 0 4
45442: PUSH
45443: EMPTY
45444: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45445: LD_ADDR_VAR 0 5
45449: PUSH
45450: LD_VAR 0 2
45454: PPUSH
45455: LD_INT 21
45457: PUSH
45458: LD_INT 3
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PPUSH
45465: CALL_OW 70
45469: ST_TO_ADDR
// if not tmp then
45470: LD_VAR 0 5
45474: NOT
45475: IFFALSE 45479
// exit ;
45477: GO 45543
// if checkLink then
45479: LD_VAR 0 3
45483: IFFALSE 45533
// begin for i in tmp do
45485: LD_ADDR_VAR 0 6
45489: PUSH
45490: LD_VAR 0 5
45494: PUSH
45495: FOR_IN
45496: IFFALSE 45531
// if GetBase ( i ) <> base then
45498: LD_VAR 0 6
45502: PPUSH
45503: CALL_OW 274
45507: PUSH
45508: LD_VAR 0 1
45512: NONEQUAL
45513: IFFALSE 45529
// ComLinkToBase ( base , i ) ;
45515: LD_VAR 0 1
45519: PPUSH
45520: LD_VAR 0 6
45524: PPUSH
45525: CALL_OW 169
45529: GO 45495
45531: POP
45532: POP
// end ; result := tmp ;
45533: LD_ADDR_VAR 0 4
45537: PUSH
45538: LD_VAR 0 5
45542: ST_TO_ADDR
// end ;
45543: LD_VAR 0 4
45547: RET
// export function ComComplete ( units , b ) ; var i ; begin
45548: LD_INT 0
45550: PPUSH
45551: PPUSH
// if not units then
45552: LD_VAR 0 1
45556: NOT
45557: IFFALSE 45561
// exit ;
45559: GO 45651
// for i in units do
45561: LD_ADDR_VAR 0 4
45565: PUSH
45566: LD_VAR 0 1
45570: PUSH
45571: FOR_IN
45572: IFFALSE 45649
// if BuildingStatus ( b ) = bs_build then
45574: LD_VAR 0 2
45578: PPUSH
45579: CALL_OW 461
45583: PUSH
45584: LD_INT 1
45586: EQUAL
45587: IFFALSE 45647
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45589: LD_VAR 0 4
45593: PPUSH
45594: LD_STRING h
45596: PUSH
45597: LD_VAR 0 2
45601: PPUSH
45602: CALL_OW 250
45606: PUSH
45607: LD_VAR 0 2
45611: PPUSH
45612: CALL_OW 251
45616: PUSH
45617: LD_VAR 0 2
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: PUSH
45640: EMPTY
45641: LIST
45642: PPUSH
45643: CALL_OW 446
45647: GO 45571
45649: POP
45650: POP
// end ;
45651: LD_VAR 0 3
45655: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45656: LD_INT 0
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
45662: PPUSH
45663: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45664: LD_VAR 0 1
45668: NOT
45669: PUSH
45670: LD_VAR 0 1
45674: PPUSH
45675: CALL_OW 263
45679: PUSH
45680: LD_INT 2
45682: NONEQUAL
45683: OR
45684: IFFALSE 45688
// exit ;
45686: GO 46004
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45688: LD_ADDR_VAR 0 6
45692: PUSH
45693: LD_INT 22
45695: PUSH
45696: LD_VAR 0 1
45700: PPUSH
45701: CALL_OW 255
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 30
45715: PUSH
45716: LD_INT 36
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 34
45725: PUSH
45726: LD_INT 31
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PPUSH
45742: CALL_OW 69
45746: ST_TO_ADDR
// if not tmp then
45747: LD_VAR 0 6
45751: NOT
45752: IFFALSE 45756
// exit ;
45754: GO 46004
// result := [ ] ;
45756: LD_ADDR_VAR 0 2
45760: PUSH
45761: EMPTY
45762: ST_TO_ADDR
// for i in tmp do
45763: LD_ADDR_VAR 0 3
45767: PUSH
45768: LD_VAR 0 6
45772: PUSH
45773: FOR_IN
45774: IFFALSE 45845
// begin t := UnitsInside ( i ) ;
45776: LD_ADDR_VAR 0 4
45780: PUSH
45781: LD_VAR 0 3
45785: PPUSH
45786: CALL_OW 313
45790: ST_TO_ADDR
// if t then
45791: LD_VAR 0 4
45795: IFFALSE 45843
// for j in t do
45797: LD_ADDR_VAR 0 7
45801: PUSH
45802: LD_VAR 0 4
45806: PUSH
45807: FOR_IN
45808: IFFALSE 45841
// result := Replace ( result , result + 1 , j ) ;
45810: LD_ADDR_VAR 0 2
45814: PUSH
45815: LD_VAR 0 2
45819: PPUSH
45820: LD_VAR 0 2
45824: PUSH
45825: LD_INT 1
45827: PLUS
45828: PPUSH
45829: LD_VAR 0 7
45833: PPUSH
45834: CALL_OW 1
45838: ST_TO_ADDR
45839: GO 45807
45841: POP
45842: POP
// end ;
45843: GO 45773
45845: POP
45846: POP
// if not result then
45847: LD_VAR 0 2
45851: NOT
45852: IFFALSE 45856
// exit ;
45854: GO 46004
// mech := result [ 1 ] ;
45856: LD_ADDR_VAR 0 5
45860: PUSH
45861: LD_VAR 0 2
45865: PUSH
45866: LD_INT 1
45868: ARRAY
45869: ST_TO_ADDR
// if result > 1 then
45870: LD_VAR 0 2
45874: PUSH
45875: LD_INT 1
45877: GREATER
45878: IFFALSE 45990
// begin for i = 2 to result do
45880: LD_ADDR_VAR 0 3
45884: PUSH
45885: DOUBLE
45886: LD_INT 2
45888: DEC
45889: ST_TO_ADDR
45890: LD_VAR 0 2
45894: PUSH
45895: FOR_TO
45896: IFFALSE 45988
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45898: LD_ADDR_VAR 0 4
45902: PUSH
45903: LD_VAR 0 2
45907: PUSH
45908: LD_VAR 0 3
45912: ARRAY
45913: PPUSH
45914: LD_INT 3
45916: PPUSH
45917: CALL_OW 259
45921: PUSH
45922: LD_VAR 0 2
45926: PUSH
45927: LD_VAR 0 3
45931: ARRAY
45932: PPUSH
45933: CALL_OW 432
45937: MINUS
45938: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45939: LD_VAR 0 4
45943: PUSH
45944: LD_VAR 0 5
45948: PPUSH
45949: LD_INT 3
45951: PPUSH
45952: CALL_OW 259
45956: PUSH
45957: LD_VAR 0 5
45961: PPUSH
45962: CALL_OW 432
45966: MINUS
45967: GREATEREQUAL
45968: IFFALSE 45986
// mech := result [ i ] ;
45970: LD_ADDR_VAR 0 5
45974: PUSH
45975: LD_VAR 0 2
45979: PUSH
45980: LD_VAR 0 3
45984: ARRAY
45985: ST_TO_ADDR
// end ;
45986: GO 45895
45988: POP
45989: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45990: LD_VAR 0 1
45994: PPUSH
45995: LD_VAR 0 5
45999: PPUSH
46000: CALL_OW 135
// end ;
46004: LD_VAR 0 2
46008: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46009: LD_INT 0
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
// result := [ ] ;
46024: LD_ADDR_VAR 0 7
46028: PUSH
46029: EMPTY
46030: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46031: LD_VAR 0 1
46035: PPUSH
46036: CALL_OW 266
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: IN
46051: NOT
46052: IFFALSE 46056
// exit ;
46054: GO 47690
// if name then
46056: LD_VAR 0 3
46060: IFFALSE 46076
// SetBName ( base_dep , name ) ;
46062: LD_VAR 0 1
46066: PPUSH
46067: LD_VAR 0 3
46071: PPUSH
46072: CALL_OW 500
// base := GetBase ( base_dep ) ;
46076: LD_ADDR_VAR 0 15
46080: PUSH
46081: LD_VAR 0 1
46085: PPUSH
46086: CALL_OW 274
46090: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46091: LD_ADDR_VAR 0 16
46095: PUSH
46096: LD_VAR 0 1
46100: PPUSH
46101: CALL_OW 255
46105: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46106: LD_ADDR_VAR 0 17
46110: PUSH
46111: LD_VAR 0 1
46115: PPUSH
46116: CALL_OW 248
46120: ST_TO_ADDR
// if sources then
46121: LD_VAR 0 5
46125: IFFALSE 46172
// for i = 1 to 3 do
46127: LD_ADDR_VAR 0 8
46131: PUSH
46132: DOUBLE
46133: LD_INT 1
46135: DEC
46136: ST_TO_ADDR
46137: LD_INT 3
46139: PUSH
46140: FOR_TO
46141: IFFALSE 46170
// AddResourceType ( base , i , sources [ i ] ) ;
46143: LD_VAR 0 15
46147: PPUSH
46148: LD_VAR 0 8
46152: PPUSH
46153: LD_VAR 0 5
46157: PUSH
46158: LD_VAR 0 8
46162: ARRAY
46163: PPUSH
46164: CALL_OW 276
46168: GO 46140
46170: POP
46171: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46172: LD_ADDR_VAR 0 18
46176: PUSH
46177: LD_VAR 0 15
46181: PPUSH
46182: LD_VAR 0 2
46186: PPUSH
46187: LD_INT 1
46189: PPUSH
46190: CALL 45433 0 3
46194: ST_TO_ADDR
// InitHc ;
46195: CALL_OW 19
// InitUc ;
46199: CALL_OW 18
// uc_side := side ;
46203: LD_ADDR_OWVAR 20
46207: PUSH
46208: LD_VAR 0 16
46212: ST_TO_ADDR
// uc_nation := nation ;
46213: LD_ADDR_OWVAR 21
46217: PUSH
46218: LD_VAR 0 17
46222: ST_TO_ADDR
// if buildings then
46223: LD_VAR 0 18
46227: IFFALSE 47549
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46229: LD_ADDR_VAR 0 19
46233: PUSH
46234: LD_VAR 0 18
46238: PPUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 30
46244: PUSH
46245: LD_INT 29
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 30
46254: PUSH
46255: LD_INT 30
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: PPUSH
46267: CALL_OW 72
46271: ST_TO_ADDR
// if tmp then
46272: LD_VAR 0 19
46276: IFFALSE 46324
// for i in tmp do
46278: LD_ADDR_VAR 0 8
46282: PUSH
46283: LD_VAR 0 19
46287: PUSH
46288: FOR_IN
46289: IFFALSE 46322
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46291: LD_VAR 0 8
46295: PPUSH
46296: CALL_OW 250
46300: PPUSH
46301: LD_VAR 0 8
46305: PPUSH
46306: CALL_OW 251
46310: PPUSH
46311: LD_VAR 0 16
46315: PPUSH
46316: CALL_OW 441
46320: GO 46288
46322: POP
46323: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46324: LD_VAR 0 18
46328: PPUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 30
46334: PUSH
46335: LD_INT 32
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 30
46344: PUSH
46345: LD_INT 33
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: PPUSH
46357: CALL_OW 72
46361: IFFALSE 46449
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46363: LD_ADDR_VAR 0 8
46367: PUSH
46368: LD_VAR 0 18
46372: PPUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 30
46378: PUSH
46379: LD_INT 32
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 30
46388: PUSH
46389: LD_INT 33
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: PPUSH
46401: CALL_OW 72
46405: PUSH
46406: FOR_IN
46407: IFFALSE 46447
// begin if not GetBWeapon ( i ) then
46409: LD_VAR 0 8
46413: PPUSH
46414: CALL_OW 269
46418: NOT
46419: IFFALSE 46445
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46421: LD_VAR 0 8
46425: PPUSH
46426: LD_VAR 0 8
46430: PPUSH
46431: LD_VAR 0 2
46435: PPUSH
46436: CALL 47695 0 2
46440: PPUSH
46441: CALL_OW 431
// end ;
46445: GO 46406
46447: POP
46448: POP
// end ; for i = 1 to personel do
46449: LD_ADDR_VAR 0 8
46453: PUSH
46454: DOUBLE
46455: LD_INT 1
46457: DEC
46458: ST_TO_ADDR
46459: LD_VAR 0 6
46463: PUSH
46464: FOR_TO
46465: IFFALSE 47529
// begin if i > 4 then
46467: LD_VAR 0 8
46471: PUSH
46472: LD_INT 4
46474: GREATER
46475: IFFALSE 46479
// break ;
46477: GO 47529
// case i of 1 :
46479: LD_VAR 0 8
46483: PUSH
46484: LD_INT 1
46486: DOUBLE
46487: EQUAL
46488: IFTRUE 46492
46490: GO 46572
46492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46493: LD_ADDR_VAR 0 12
46497: PUSH
46498: LD_VAR 0 18
46502: PPUSH
46503: LD_INT 22
46505: PUSH
46506: LD_VAR 0 16
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 58
46517: PUSH
46518: EMPTY
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 30
46526: PUSH
46527: LD_INT 32
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 30
46536: PUSH
46537: LD_INT 4
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 30
46546: PUSH
46547: LD_INT 5
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: PPUSH
46565: CALL_OW 72
46569: ST_TO_ADDR
46570: GO 46794
46572: LD_INT 2
46574: DOUBLE
46575: EQUAL
46576: IFTRUE 46580
46578: GO 46642
46580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46581: LD_ADDR_VAR 0 12
46585: PUSH
46586: LD_VAR 0 18
46590: PPUSH
46591: LD_INT 22
46593: PUSH
46594: LD_VAR 0 16
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 30
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 30
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PPUSH
46635: CALL_OW 72
46639: ST_TO_ADDR
46640: GO 46794
46642: LD_INT 3
46644: DOUBLE
46645: EQUAL
46646: IFTRUE 46650
46648: GO 46712
46650: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46651: LD_ADDR_VAR 0 12
46655: PUSH
46656: LD_VAR 0 18
46660: PPUSH
46661: LD_INT 22
46663: PUSH
46664: LD_VAR 0 16
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 30
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 30
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PPUSH
46705: CALL_OW 72
46709: ST_TO_ADDR
46710: GO 46794
46712: LD_INT 4
46714: DOUBLE
46715: EQUAL
46716: IFTRUE 46720
46718: GO 46793
46720: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46721: LD_ADDR_VAR 0 12
46725: PUSH
46726: LD_VAR 0 18
46730: PPUSH
46731: LD_INT 22
46733: PUSH
46734: LD_VAR 0 16
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 30
46748: PUSH
46749: LD_INT 6
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 30
46758: PUSH
46759: LD_INT 7
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 30
46768: PUSH
46769: LD_INT 8
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PPUSH
46786: CALL_OW 72
46790: ST_TO_ADDR
46791: GO 46794
46793: POP
// if i = 1 then
46794: LD_VAR 0 8
46798: PUSH
46799: LD_INT 1
46801: EQUAL
46802: IFFALSE 46913
// begin tmp := [ ] ;
46804: LD_ADDR_VAR 0 19
46808: PUSH
46809: EMPTY
46810: ST_TO_ADDR
// for j in f do
46811: LD_ADDR_VAR 0 9
46815: PUSH
46816: LD_VAR 0 12
46820: PUSH
46821: FOR_IN
46822: IFFALSE 46895
// if GetBType ( j ) = b_bunker then
46824: LD_VAR 0 9
46828: PPUSH
46829: CALL_OW 266
46833: PUSH
46834: LD_INT 32
46836: EQUAL
46837: IFFALSE 46864
// tmp := Insert ( tmp , 1 , j ) else
46839: LD_ADDR_VAR 0 19
46843: PUSH
46844: LD_VAR 0 19
46848: PPUSH
46849: LD_INT 1
46851: PPUSH
46852: LD_VAR 0 9
46856: PPUSH
46857: CALL_OW 2
46861: ST_TO_ADDR
46862: GO 46893
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46864: LD_ADDR_VAR 0 19
46868: PUSH
46869: LD_VAR 0 19
46873: PPUSH
46874: LD_VAR 0 19
46878: PUSH
46879: LD_INT 1
46881: PLUS
46882: PPUSH
46883: LD_VAR 0 9
46887: PPUSH
46888: CALL_OW 2
46892: ST_TO_ADDR
46893: GO 46821
46895: POP
46896: POP
// if tmp then
46897: LD_VAR 0 19
46901: IFFALSE 46913
// f := tmp ;
46903: LD_ADDR_VAR 0 12
46907: PUSH
46908: LD_VAR 0 19
46912: ST_TO_ADDR
// end ; x := personel [ i ] ;
46913: LD_ADDR_VAR 0 13
46917: PUSH
46918: LD_VAR 0 6
46922: PUSH
46923: LD_VAR 0 8
46927: ARRAY
46928: ST_TO_ADDR
// if x = - 1 then
46929: LD_VAR 0 13
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: EQUAL
46938: IFFALSE 47147
// begin for j in f do
46940: LD_ADDR_VAR 0 9
46944: PUSH
46945: LD_VAR 0 12
46949: PUSH
46950: FOR_IN
46951: IFFALSE 47143
// repeat InitHc ;
46953: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46957: LD_VAR 0 9
46961: PPUSH
46962: CALL_OW 266
46966: PUSH
46967: LD_INT 5
46969: EQUAL
46970: IFFALSE 47040
// begin if UnitsInside ( j ) < 3 then
46972: LD_VAR 0 9
46976: PPUSH
46977: CALL_OW 313
46981: PUSH
46982: LD_INT 3
46984: LESS
46985: IFFALSE 47021
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46987: LD_INT 0
46989: PPUSH
46990: LD_INT 5
46992: PUSH
46993: LD_INT 8
46995: PUSH
46996: LD_INT 9
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: PUSH
47004: LD_VAR 0 17
47008: ARRAY
47009: PPUSH
47010: LD_VAR 0 4
47014: PPUSH
47015: CALL_OW 380
47019: GO 47038
// PrepareHuman ( false , i , skill ) ;
47021: LD_INT 0
47023: PPUSH
47024: LD_VAR 0 8
47028: PPUSH
47029: LD_VAR 0 4
47033: PPUSH
47034: CALL_OW 380
// end else
47038: GO 47057
// PrepareHuman ( false , i , skill ) ;
47040: LD_INT 0
47042: PPUSH
47043: LD_VAR 0 8
47047: PPUSH
47048: LD_VAR 0 4
47052: PPUSH
47053: CALL_OW 380
// un := CreateHuman ;
47057: LD_ADDR_VAR 0 14
47061: PUSH
47062: CALL_OW 44
47066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47067: LD_ADDR_VAR 0 7
47071: PUSH
47072: LD_VAR 0 7
47076: PPUSH
47077: LD_INT 1
47079: PPUSH
47080: LD_VAR 0 14
47084: PPUSH
47085: CALL_OW 2
47089: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47090: LD_VAR 0 14
47094: PPUSH
47095: LD_VAR 0 9
47099: PPUSH
47100: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47104: LD_VAR 0 9
47108: PPUSH
47109: CALL_OW 313
47113: PUSH
47114: LD_INT 6
47116: EQUAL
47117: PUSH
47118: LD_VAR 0 9
47122: PPUSH
47123: CALL_OW 266
47127: PUSH
47128: LD_INT 32
47130: PUSH
47131: LD_INT 31
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: IN
47138: OR
47139: IFFALSE 46953
47141: GO 46950
47143: POP
47144: POP
// end else
47145: GO 47527
// for j = 1 to x do
47147: LD_ADDR_VAR 0 9
47151: PUSH
47152: DOUBLE
47153: LD_INT 1
47155: DEC
47156: ST_TO_ADDR
47157: LD_VAR 0 13
47161: PUSH
47162: FOR_TO
47163: IFFALSE 47525
// begin InitHc ;
47165: CALL_OW 19
// if not f then
47169: LD_VAR 0 12
47173: NOT
47174: IFFALSE 47263
// begin PrepareHuman ( false , i , skill ) ;
47176: LD_INT 0
47178: PPUSH
47179: LD_VAR 0 8
47183: PPUSH
47184: LD_VAR 0 4
47188: PPUSH
47189: CALL_OW 380
// un := CreateHuman ;
47193: LD_ADDR_VAR 0 14
47197: PUSH
47198: CALL_OW 44
47202: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47203: LD_ADDR_VAR 0 7
47207: PUSH
47208: LD_VAR 0 7
47212: PPUSH
47213: LD_INT 1
47215: PPUSH
47216: LD_VAR 0 14
47220: PPUSH
47221: CALL_OW 2
47225: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47226: LD_VAR 0 14
47230: PPUSH
47231: LD_VAR 0 1
47235: PPUSH
47236: CALL_OW 250
47240: PPUSH
47241: LD_VAR 0 1
47245: PPUSH
47246: CALL_OW 251
47250: PPUSH
47251: LD_INT 10
47253: PPUSH
47254: LD_INT 0
47256: PPUSH
47257: CALL_OW 50
// continue ;
47261: GO 47162
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47263: LD_VAR 0 12
47267: PUSH
47268: LD_INT 1
47270: ARRAY
47271: PPUSH
47272: CALL_OW 313
47276: PUSH
47277: LD_VAR 0 12
47281: PUSH
47282: LD_INT 1
47284: ARRAY
47285: PPUSH
47286: CALL_OW 266
47290: PUSH
47291: LD_INT 32
47293: PUSH
47294: LD_INT 31
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: IN
47301: AND
47302: PUSH
47303: LD_VAR 0 12
47307: PUSH
47308: LD_INT 1
47310: ARRAY
47311: PPUSH
47312: CALL_OW 313
47316: PUSH
47317: LD_INT 6
47319: EQUAL
47320: OR
47321: IFFALSE 47341
// f := Delete ( f , 1 ) ;
47323: LD_ADDR_VAR 0 12
47327: PUSH
47328: LD_VAR 0 12
47332: PPUSH
47333: LD_INT 1
47335: PPUSH
47336: CALL_OW 3
47340: ST_TO_ADDR
// if not f then
47341: LD_VAR 0 12
47345: NOT
47346: IFFALSE 47364
// begin x := x + 2 ;
47348: LD_ADDR_VAR 0 13
47352: PUSH
47353: LD_VAR 0 13
47357: PUSH
47358: LD_INT 2
47360: PLUS
47361: ST_TO_ADDR
// continue ;
47362: GO 47162
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47364: LD_VAR 0 12
47368: PUSH
47369: LD_INT 1
47371: ARRAY
47372: PPUSH
47373: CALL_OW 266
47377: PUSH
47378: LD_INT 5
47380: EQUAL
47381: IFFALSE 47455
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47383: LD_VAR 0 12
47387: PUSH
47388: LD_INT 1
47390: ARRAY
47391: PPUSH
47392: CALL_OW 313
47396: PUSH
47397: LD_INT 3
47399: LESS
47400: IFFALSE 47436
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47402: LD_INT 0
47404: PPUSH
47405: LD_INT 5
47407: PUSH
47408: LD_INT 8
47410: PUSH
47411: LD_INT 9
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: PUSH
47419: LD_VAR 0 17
47423: ARRAY
47424: PPUSH
47425: LD_VAR 0 4
47429: PPUSH
47430: CALL_OW 380
47434: GO 47453
// PrepareHuman ( false , i , skill ) ;
47436: LD_INT 0
47438: PPUSH
47439: LD_VAR 0 8
47443: PPUSH
47444: LD_VAR 0 4
47448: PPUSH
47449: CALL_OW 380
// end else
47453: GO 47472
// PrepareHuman ( false , i , skill ) ;
47455: LD_INT 0
47457: PPUSH
47458: LD_VAR 0 8
47462: PPUSH
47463: LD_VAR 0 4
47467: PPUSH
47468: CALL_OW 380
// un := CreateHuman ;
47472: LD_ADDR_VAR 0 14
47476: PUSH
47477: CALL_OW 44
47481: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47482: LD_ADDR_VAR 0 7
47486: PUSH
47487: LD_VAR 0 7
47491: PPUSH
47492: LD_INT 1
47494: PPUSH
47495: LD_VAR 0 14
47499: PPUSH
47500: CALL_OW 2
47504: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47505: LD_VAR 0 14
47509: PPUSH
47510: LD_VAR 0 12
47514: PUSH
47515: LD_INT 1
47517: ARRAY
47518: PPUSH
47519: CALL_OW 52
// end ;
47523: GO 47162
47525: POP
47526: POP
// end ;
47527: GO 46464
47529: POP
47530: POP
// result := result ^ buildings ;
47531: LD_ADDR_VAR 0 7
47535: PUSH
47536: LD_VAR 0 7
47540: PUSH
47541: LD_VAR 0 18
47545: ADD
47546: ST_TO_ADDR
// end else
47547: GO 47690
// begin for i = 1 to personel do
47549: LD_ADDR_VAR 0 8
47553: PUSH
47554: DOUBLE
47555: LD_INT 1
47557: DEC
47558: ST_TO_ADDR
47559: LD_VAR 0 6
47563: PUSH
47564: FOR_TO
47565: IFFALSE 47688
// begin if i > 4 then
47567: LD_VAR 0 8
47571: PUSH
47572: LD_INT 4
47574: GREATER
47575: IFFALSE 47579
// break ;
47577: GO 47688
// x := personel [ i ] ;
47579: LD_ADDR_VAR 0 13
47583: PUSH
47584: LD_VAR 0 6
47588: PUSH
47589: LD_VAR 0 8
47593: ARRAY
47594: ST_TO_ADDR
// if x = - 1 then
47595: LD_VAR 0 13
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: EQUAL
47604: IFFALSE 47608
// continue ;
47606: GO 47564
// PrepareHuman ( false , i , skill ) ;
47608: LD_INT 0
47610: PPUSH
47611: LD_VAR 0 8
47615: PPUSH
47616: LD_VAR 0 4
47620: PPUSH
47621: CALL_OW 380
// un := CreateHuman ;
47625: LD_ADDR_VAR 0 14
47629: PUSH
47630: CALL_OW 44
47634: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47635: LD_VAR 0 14
47639: PPUSH
47640: LD_VAR 0 1
47644: PPUSH
47645: CALL_OW 250
47649: PPUSH
47650: LD_VAR 0 1
47654: PPUSH
47655: CALL_OW 251
47659: PPUSH
47660: LD_INT 10
47662: PPUSH
47663: LD_INT 0
47665: PPUSH
47666: CALL_OW 50
// result := result ^ un ;
47670: LD_ADDR_VAR 0 7
47674: PUSH
47675: LD_VAR 0 7
47679: PUSH
47680: LD_VAR 0 14
47684: ADD
47685: ST_TO_ADDR
// end ;
47686: GO 47564
47688: POP
47689: POP
// end ; end ;
47690: LD_VAR 0 7
47694: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47695: LD_INT 0
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
// result := false ;
47713: LD_ADDR_VAR 0 3
47717: PUSH
47718: LD_INT 0
47720: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47721: LD_VAR 0 1
47725: NOT
47726: PUSH
47727: LD_VAR 0 1
47731: PPUSH
47732: CALL_OW 266
47736: PUSH
47737: LD_INT 32
47739: PUSH
47740: LD_INT 33
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: IN
47747: NOT
47748: OR
47749: IFFALSE 47753
// exit ;
47751: GO 48862
// nat := GetNation ( tower ) ;
47753: LD_ADDR_VAR 0 12
47757: PUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 248
47767: ST_TO_ADDR
// side := GetSide ( tower ) ;
47768: LD_ADDR_VAR 0 16
47772: PUSH
47773: LD_VAR 0 1
47777: PPUSH
47778: CALL_OW 255
47782: ST_TO_ADDR
// x := GetX ( tower ) ;
47783: LD_ADDR_VAR 0 10
47787: PUSH
47788: LD_VAR 0 1
47792: PPUSH
47793: CALL_OW 250
47797: ST_TO_ADDR
// y := GetY ( tower ) ;
47798: LD_ADDR_VAR 0 11
47802: PUSH
47803: LD_VAR 0 1
47807: PPUSH
47808: CALL_OW 251
47812: ST_TO_ADDR
// if not x or not y then
47813: LD_VAR 0 10
47817: NOT
47818: PUSH
47819: LD_VAR 0 11
47823: NOT
47824: OR
47825: IFFALSE 47829
// exit ;
47827: GO 48862
// weapon := 0 ;
47829: LD_ADDR_VAR 0 18
47833: PUSH
47834: LD_INT 0
47836: ST_TO_ADDR
// fac_list := [ ] ;
47837: LD_ADDR_VAR 0 17
47841: PUSH
47842: EMPTY
47843: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47844: LD_ADDR_VAR 0 6
47848: PUSH
47849: LD_VAR 0 1
47853: PPUSH
47854: CALL_OW 274
47858: PPUSH
47859: LD_VAR 0 2
47863: PPUSH
47864: LD_INT 0
47866: PPUSH
47867: CALL 45433 0 3
47871: PPUSH
47872: LD_INT 30
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PPUSH
47882: CALL_OW 72
47886: ST_TO_ADDR
// if not factories then
47887: LD_VAR 0 6
47891: NOT
47892: IFFALSE 47896
// exit ;
47894: GO 48862
// for i in factories do
47896: LD_ADDR_VAR 0 8
47900: PUSH
47901: LD_VAR 0 6
47905: PUSH
47906: FOR_IN
47907: IFFALSE 47932
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47909: LD_ADDR_VAR 0 17
47913: PUSH
47914: LD_VAR 0 17
47918: PUSH
47919: LD_VAR 0 8
47923: PPUSH
47924: CALL_OW 478
47928: UNION
47929: ST_TO_ADDR
47930: GO 47906
47932: POP
47933: POP
// if not fac_list then
47934: LD_VAR 0 17
47938: NOT
47939: IFFALSE 47943
// exit ;
47941: GO 48862
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47943: LD_ADDR_VAR 0 5
47947: PUSH
47948: LD_INT 4
47950: PUSH
47951: LD_INT 5
47953: PUSH
47954: LD_INT 9
47956: PUSH
47957: LD_INT 10
47959: PUSH
47960: LD_INT 6
47962: PUSH
47963: LD_INT 7
47965: PUSH
47966: LD_INT 11
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 27
47980: PUSH
47981: LD_INT 28
47983: PUSH
47984: LD_INT 26
47986: PUSH
47987: LD_INT 30
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 43
47998: PUSH
47999: LD_INT 44
48001: PUSH
48002: LD_INT 46
48004: PUSH
48005: LD_INT 45
48007: PUSH
48008: LD_INT 47
48010: PUSH
48011: LD_INT 49
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: PUSH
48027: LD_VAR 0 12
48031: ARRAY
48032: ST_TO_ADDR
// list := list isect fac_list ;
48033: LD_ADDR_VAR 0 5
48037: PUSH
48038: LD_VAR 0 5
48042: PUSH
48043: LD_VAR 0 17
48047: ISECT
48048: ST_TO_ADDR
// if not list then
48049: LD_VAR 0 5
48053: NOT
48054: IFFALSE 48058
// exit ;
48056: GO 48862
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48058: LD_VAR 0 12
48062: PUSH
48063: LD_INT 3
48065: EQUAL
48066: PUSH
48067: LD_INT 49
48069: PUSH
48070: LD_VAR 0 5
48074: IN
48075: AND
48076: PUSH
48077: LD_INT 31
48079: PPUSH
48080: LD_VAR 0 16
48084: PPUSH
48085: CALL_OW 321
48089: PUSH
48090: LD_INT 2
48092: EQUAL
48093: AND
48094: IFFALSE 48154
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48096: LD_INT 22
48098: PUSH
48099: LD_VAR 0 16
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 35
48110: PUSH
48111: LD_INT 49
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 91
48120: PUSH
48121: LD_VAR 0 1
48125: PUSH
48126: LD_INT 10
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: PPUSH
48139: CALL_OW 69
48143: NOT
48144: IFFALSE 48154
// weapon := ru_time_lapser ;
48146: LD_ADDR_VAR 0 18
48150: PUSH
48151: LD_INT 49
48153: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48154: LD_VAR 0 12
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: IN
48169: PUSH
48170: LD_INT 11
48172: PUSH
48173: LD_VAR 0 5
48177: IN
48178: PUSH
48179: LD_INT 30
48181: PUSH
48182: LD_VAR 0 5
48186: IN
48187: OR
48188: AND
48189: PUSH
48190: LD_INT 6
48192: PPUSH
48193: LD_VAR 0 16
48197: PPUSH
48198: CALL_OW 321
48202: PUSH
48203: LD_INT 2
48205: EQUAL
48206: AND
48207: IFFALSE 48372
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48209: LD_INT 22
48211: PUSH
48212: LD_VAR 0 16
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 35
48226: PUSH
48227: LD_INT 11
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 35
48236: PUSH
48237: LD_INT 30
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 91
48251: PUSH
48252: LD_VAR 0 1
48256: PUSH
48257: LD_INT 18
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: PPUSH
48270: CALL_OW 69
48274: NOT
48275: PUSH
48276: LD_INT 22
48278: PUSH
48279: LD_VAR 0 16
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 30
48293: PUSH
48294: LD_INT 32
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 30
48303: PUSH
48304: LD_INT 33
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 91
48318: PUSH
48319: LD_VAR 0 1
48323: PUSH
48324: LD_INT 12
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: PUSH
48337: EMPTY
48338: LIST
48339: PPUSH
48340: CALL_OW 69
48344: PUSH
48345: LD_INT 2
48347: GREATER
48348: AND
48349: IFFALSE 48372
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48351: LD_ADDR_VAR 0 18
48355: PUSH
48356: LD_INT 11
48358: PUSH
48359: LD_INT 30
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_VAR 0 12
48370: ARRAY
48371: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48372: LD_VAR 0 18
48376: NOT
48377: PUSH
48378: LD_INT 40
48380: PPUSH
48381: LD_VAR 0 16
48385: PPUSH
48386: CALL_OW 321
48390: PUSH
48391: LD_INT 2
48393: EQUAL
48394: AND
48395: PUSH
48396: LD_INT 7
48398: PUSH
48399: LD_VAR 0 5
48403: IN
48404: PUSH
48405: LD_INT 28
48407: PUSH
48408: LD_VAR 0 5
48412: IN
48413: OR
48414: PUSH
48415: LD_INT 45
48417: PUSH
48418: LD_VAR 0 5
48422: IN
48423: OR
48424: AND
48425: IFFALSE 48679
// begin hex := GetHexInfo ( x , y ) ;
48427: LD_ADDR_VAR 0 4
48431: PUSH
48432: LD_VAR 0 10
48436: PPUSH
48437: LD_VAR 0 11
48441: PPUSH
48442: CALL_OW 546
48446: ST_TO_ADDR
// if hex [ 1 ] then
48447: LD_VAR 0 4
48451: PUSH
48452: LD_INT 1
48454: ARRAY
48455: IFFALSE 48459
// exit ;
48457: GO 48862
// height := hex [ 2 ] ;
48459: LD_ADDR_VAR 0 15
48463: PUSH
48464: LD_VAR 0 4
48468: PUSH
48469: LD_INT 2
48471: ARRAY
48472: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48473: LD_ADDR_VAR 0 14
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: LD_INT 5
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: ST_TO_ADDR
// for i in tmp do
48496: LD_ADDR_VAR 0 8
48500: PUSH
48501: LD_VAR 0 14
48505: PUSH
48506: FOR_IN
48507: IFFALSE 48677
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48509: LD_ADDR_VAR 0 9
48513: PUSH
48514: LD_VAR 0 10
48518: PPUSH
48519: LD_VAR 0 8
48523: PPUSH
48524: LD_INT 5
48526: PPUSH
48527: CALL_OW 272
48531: PUSH
48532: LD_VAR 0 11
48536: PPUSH
48537: LD_VAR 0 8
48541: PPUSH
48542: LD_INT 5
48544: PPUSH
48545: CALL_OW 273
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48554: LD_VAR 0 9
48558: PUSH
48559: LD_INT 1
48561: ARRAY
48562: PPUSH
48563: LD_VAR 0 9
48567: PUSH
48568: LD_INT 2
48570: ARRAY
48571: PPUSH
48572: CALL_OW 488
48576: IFFALSE 48675
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48578: LD_ADDR_VAR 0 4
48582: PUSH
48583: LD_VAR 0 9
48587: PUSH
48588: LD_INT 1
48590: ARRAY
48591: PPUSH
48592: LD_VAR 0 9
48596: PUSH
48597: LD_INT 2
48599: ARRAY
48600: PPUSH
48601: CALL_OW 546
48605: ST_TO_ADDR
// if hex [ 1 ] then
48606: LD_VAR 0 4
48610: PUSH
48611: LD_INT 1
48613: ARRAY
48614: IFFALSE 48618
// continue ;
48616: GO 48506
// h := hex [ 2 ] ;
48618: LD_ADDR_VAR 0 13
48622: PUSH
48623: LD_VAR 0 4
48627: PUSH
48628: LD_INT 2
48630: ARRAY
48631: ST_TO_ADDR
// if h + 7 < height then
48632: LD_VAR 0 13
48636: PUSH
48637: LD_INT 7
48639: PLUS
48640: PUSH
48641: LD_VAR 0 15
48645: LESS
48646: IFFALSE 48675
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48648: LD_ADDR_VAR 0 18
48652: PUSH
48653: LD_INT 7
48655: PUSH
48656: LD_INT 28
48658: PUSH
48659: LD_INT 45
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: PUSH
48667: LD_VAR 0 12
48671: ARRAY
48672: ST_TO_ADDR
// break ;
48673: GO 48677
// end ; end ; end ;
48675: GO 48506
48677: POP
48678: POP
// end ; if not weapon then
48679: LD_VAR 0 18
48683: NOT
48684: IFFALSE 48744
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48686: LD_ADDR_VAR 0 5
48690: PUSH
48691: LD_VAR 0 5
48695: PUSH
48696: LD_INT 11
48698: PUSH
48699: LD_INT 30
48701: PUSH
48702: LD_INT 49
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: DIFF
48710: ST_TO_ADDR
// if not list then
48711: LD_VAR 0 5
48715: NOT
48716: IFFALSE 48720
// exit ;
48718: GO 48862
// weapon := list [ rand ( 1 , list ) ] ;
48720: LD_ADDR_VAR 0 18
48724: PUSH
48725: LD_VAR 0 5
48729: PUSH
48730: LD_INT 1
48732: PPUSH
48733: LD_VAR 0 5
48737: PPUSH
48738: CALL_OW 12
48742: ARRAY
48743: ST_TO_ADDR
// end ; if weapon then
48744: LD_VAR 0 18
48748: IFFALSE 48862
// begin tmp := CostOfWeapon ( weapon ) ;
48750: LD_ADDR_VAR 0 14
48754: PUSH
48755: LD_VAR 0 18
48759: PPUSH
48760: CALL_OW 451
48764: ST_TO_ADDR
// j := GetBase ( tower ) ;
48765: LD_ADDR_VAR 0 9
48769: PUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: CALL_OW 274
48779: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48780: LD_VAR 0 9
48784: PPUSH
48785: LD_INT 1
48787: PPUSH
48788: CALL_OW 275
48792: PUSH
48793: LD_VAR 0 14
48797: PUSH
48798: LD_INT 1
48800: ARRAY
48801: GREATEREQUAL
48802: PUSH
48803: LD_VAR 0 9
48807: PPUSH
48808: LD_INT 2
48810: PPUSH
48811: CALL_OW 275
48815: PUSH
48816: LD_VAR 0 14
48820: PUSH
48821: LD_INT 2
48823: ARRAY
48824: GREATEREQUAL
48825: AND
48826: PUSH
48827: LD_VAR 0 9
48831: PPUSH
48832: LD_INT 3
48834: PPUSH
48835: CALL_OW 275
48839: PUSH
48840: LD_VAR 0 14
48844: PUSH
48845: LD_INT 3
48847: ARRAY
48848: GREATEREQUAL
48849: AND
48850: IFFALSE 48862
// result := weapon ;
48852: LD_ADDR_VAR 0 3
48856: PUSH
48857: LD_VAR 0 18
48861: ST_TO_ADDR
// end ; end ;
48862: LD_VAR 0 3
48866: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48867: LD_INT 0
48869: PPUSH
48870: PPUSH
// result := true ;
48871: LD_ADDR_VAR 0 3
48875: PUSH
48876: LD_INT 1
48878: ST_TO_ADDR
// if array1 = array2 then
48879: LD_VAR 0 1
48883: PUSH
48884: LD_VAR 0 2
48888: EQUAL
48889: IFFALSE 48949
// begin for i = 1 to array1 do
48891: LD_ADDR_VAR 0 4
48895: PUSH
48896: DOUBLE
48897: LD_INT 1
48899: DEC
48900: ST_TO_ADDR
48901: LD_VAR 0 1
48905: PUSH
48906: FOR_TO
48907: IFFALSE 48945
// if array1 [ i ] <> array2 [ i ] then
48909: LD_VAR 0 1
48913: PUSH
48914: LD_VAR 0 4
48918: ARRAY
48919: PUSH
48920: LD_VAR 0 2
48924: PUSH
48925: LD_VAR 0 4
48929: ARRAY
48930: NONEQUAL
48931: IFFALSE 48943
// begin result := false ;
48933: LD_ADDR_VAR 0 3
48937: PUSH
48938: LD_INT 0
48940: ST_TO_ADDR
// break ;
48941: GO 48945
// end ;
48943: GO 48906
48945: POP
48946: POP
// end else
48947: GO 48957
// result := false ;
48949: LD_ADDR_VAR 0 3
48953: PUSH
48954: LD_INT 0
48956: ST_TO_ADDR
// end ;
48957: LD_VAR 0 3
48961: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48962: LD_INT 0
48964: PPUSH
48965: PPUSH
// if not array1 or not array2 then
48966: LD_VAR 0 1
48970: NOT
48971: PUSH
48972: LD_VAR 0 2
48976: NOT
48977: OR
48978: IFFALSE 48982
// exit ;
48980: GO 49046
// result := true ;
48982: LD_ADDR_VAR 0 3
48986: PUSH
48987: LD_INT 1
48989: ST_TO_ADDR
// for i = 1 to array1 do
48990: LD_ADDR_VAR 0 4
48994: PUSH
48995: DOUBLE
48996: LD_INT 1
48998: DEC
48999: ST_TO_ADDR
49000: LD_VAR 0 1
49004: PUSH
49005: FOR_TO
49006: IFFALSE 49044
// if array1 [ i ] <> array2 [ i ] then
49008: LD_VAR 0 1
49012: PUSH
49013: LD_VAR 0 4
49017: ARRAY
49018: PUSH
49019: LD_VAR 0 2
49023: PUSH
49024: LD_VAR 0 4
49028: ARRAY
49029: NONEQUAL
49030: IFFALSE 49042
// begin result := false ;
49032: LD_ADDR_VAR 0 3
49036: PUSH
49037: LD_INT 0
49039: ST_TO_ADDR
// break ;
49040: GO 49044
// end ;
49042: GO 49005
49044: POP
49045: POP
// end ;
49046: LD_VAR 0 3
49050: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49051: LD_INT 0
49053: PPUSH
49054: PPUSH
49055: PPUSH
// pom := GetBase ( fac ) ;
49056: LD_ADDR_VAR 0 5
49060: PUSH
49061: LD_VAR 0 1
49065: PPUSH
49066: CALL_OW 274
49070: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49071: LD_ADDR_VAR 0 4
49075: PUSH
49076: LD_VAR 0 2
49080: PUSH
49081: LD_INT 1
49083: ARRAY
49084: PPUSH
49085: LD_VAR 0 2
49089: PUSH
49090: LD_INT 2
49092: ARRAY
49093: PPUSH
49094: LD_VAR 0 2
49098: PUSH
49099: LD_INT 3
49101: ARRAY
49102: PPUSH
49103: LD_VAR 0 2
49107: PUSH
49108: LD_INT 4
49110: ARRAY
49111: PPUSH
49112: CALL_OW 449
49116: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49117: LD_ADDR_VAR 0 3
49121: PUSH
49122: LD_VAR 0 5
49126: PPUSH
49127: LD_INT 1
49129: PPUSH
49130: CALL_OW 275
49134: PUSH
49135: LD_VAR 0 4
49139: PUSH
49140: LD_INT 1
49142: ARRAY
49143: GREATEREQUAL
49144: PUSH
49145: LD_VAR 0 5
49149: PPUSH
49150: LD_INT 2
49152: PPUSH
49153: CALL_OW 275
49157: PUSH
49158: LD_VAR 0 4
49162: PUSH
49163: LD_INT 2
49165: ARRAY
49166: GREATEREQUAL
49167: AND
49168: PUSH
49169: LD_VAR 0 5
49173: PPUSH
49174: LD_INT 3
49176: PPUSH
49177: CALL_OW 275
49181: PUSH
49182: LD_VAR 0 4
49186: PUSH
49187: LD_INT 3
49189: ARRAY
49190: GREATEREQUAL
49191: AND
49192: ST_TO_ADDR
// end ;
49193: LD_VAR 0 3
49197: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49198: LD_INT 0
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
// pom := GetBase ( building ) ;
49204: LD_ADDR_VAR 0 3
49208: PUSH
49209: LD_VAR 0 1
49213: PPUSH
49214: CALL_OW 274
49218: ST_TO_ADDR
// if not pom then
49219: LD_VAR 0 3
49223: NOT
49224: IFFALSE 49228
// exit ;
49226: GO 49398
// btype := GetBType ( building ) ;
49228: LD_ADDR_VAR 0 5
49232: PUSH
49233: LD_VAR 0 1
49237: PPUSH
49238: CALL_OW 266
49242: ST_TO_ADDR
// if btype = b_armoury then
49243: LD_VAR 0 5
49247: PUSH
49248: LD_INT 4
49250: EQUAL
49251: IFFALSE 49261
// btype := b_barracks ;
49253: LD_ADDR_VAR 0 5
49257: PUSH
49258: LD_INT 5
49260: ST_TO_ADDR
// if btype = b_depot then
49261: LD_VAR 0 5
49265: PUSH
49266: LD_INT 0
49268: EQUAL
49269: IFFALSE 49279
// btype := b_warehouse ;
49271: LD_ADDR_VAR 0 5
49275: PUSH
49276: LD_INT 1
49278: ST_TO_ADDR
// if btype = b_workshop then
49279: LD_VAR 0 5
49283: PUSH
49284: LD_INT 2
49286: EQUAL
49287: IFFALSE 49297
// btype := b_factory ;
49289: LD_ADDR_VAR 0 5
49293: PUSH
49294: LD_INT 3
49296: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49297: LD_ADDR_VAR 0 4
49301: PUSH
49302: LD_VAR 0 5
49306: PPUSH
49307: LD_VAR 0 1
49311: PPUSH
49312: CALL_OW 248
49316: PPUSH
49317: CALL_OW 450
49321: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49322: LD_ADDR_VAR 0 2
49326: PUSH
49327: LD_VAR 0 3
49331: PPUSH
49332: LD_INT 1
49334: PPUSH
49335: CALL_OW 275
49339: PUSH
49340: LD_VAR 0 4
49344: PUSH
49345: LD_INT 1
49347: ARRAY
49348: GREATEREQUAL
49349: PUSH
49350: LD_VAR 0 3
49354: PPUSH
49355: LD_INT 2
49357: PPUSH
49358: CALL_OW 275
49362: PUSH
49363: LD_VAR 0 4
49367: PUSH
49368: LD_INT 2
49370: ARRAY
49371: GREATEREQUAL
49372: AND
49373: PUSH
49374: LD_VAR 0 3
49378: PPUSH
49379: LD_INT 3
49381: PPUSH
49382: CALL_OW 275
49386: PUSH
49387: LD_VAR 0 4
49391: PUSH
49392: LD_INT 3
49394: ARRAY
49395: GREATEREQUAL
49396: AND
49397: ST_TO_ADDR
// end ;
49398: LD_VAR 0 2
49402: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49403: LD_INT 0
49405: PPUSH
49406: PPUSH
49407: PPUSH
// pom := GetBase ( building ) ;
49408: LD_ADDR_VAR 0 4
49412: PUSH
49413: LD_VAR 0 1
49417: PPUSH
49418: CALL_OW 274
49422: ST_TO_ADDR
// if not pom then
49423: LD_VAR 0 4
49427: NOT
49428: IFFALSE 49432
// exit ;
49430: GO 49533
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49432: LD_ADDR_VAR 0 5
49436: PUSH
49437: LD_VAR 0 2
49441: PPUSH
49442: LD_VAR 0 1
49446: PPUSH
49447: CALL_OW 248
49451: PPUSH
49452: CALL_OW 450
49456: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49457: LD_ADDR_VAR 0 3
49461: PUSH
49462: LD_VAR 0 4
49466: PPUSH
49467: LD_INT 1
49469: PPUSH
49470: CALL_OW 275
49474: PUSH
49475: LD_VAR 0 5
49479: PUSH
49480: LD_INT 1
49482: ARRAY
49483: GREATEREQUAL
49484: PUSH
49485: LD_VAR 0 4
49489: PPUSH
49490: LD_INT 2
49492: PPUSH
49493: CALL_OW 275
49497: PUSH
49498: LD_VAR 0 5
49502: PUSH
49503: LD_INT 2
49505: ARRAY
49506: GREATEREQUAL
49507: AND
49508: PUSH
49509: LD_VAR 0 4
49513: PPUSH
49514: LD_INT 3
49516: PPUSH
49517: CALL_OW 275
49521: PUSH
49522: LD_VAR 0 5
49526: PUSH
49527: LD_INT 3
49529: ARRAY
49530: GREATEREQUAL
49531: AND
49532: ST_TO_ADDR
// end ;
49533: LD_VAR 0 3
49537: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49538: LD_INT 0
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
49545: PPUSH
49546: PPUSH
49547: PPUSH
49548: PPUSH
49549: PPUSH
49550: PPUSH
// result := false ;
49551: LD_ADDR_VAR 0 8
49555: PUSH
49556: LD_INT 0
49558: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49559: LD_VAR 0 5
49563: NOT
49564: PUSH
49565: LD_VAR 0 1
49569: NOT
49570: OR
49571: PUSH
49572: LD_VAR 0 2
49576: NOT
49577: OR
49578: PUSH
49579: LD_VAR 0 3
49583: NOT
49584: OR
49585: IFFALSE 49589
// exit ;
49587: GO 50403
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49589: LD_ADDR_VAR 0 14
49593: PUSH
49594: LD_VAR 0 1
49598: PPUSH
49599: LD_VAR 0 2
49603: PPUSH
49604: LD_VAR 0 3
49608: PPUSH
49609: LD_VAR 0 4
49613: PPUSH
49614: LD_VAR 0 5
49618: PUSH
49619: LD_INT 1
49621: ARRAY
49622: PPUSH
49623: CALL_OW 248
49627: PPUSH
49628: LD_INT 0
49630: PPUSH
49631: CALL 51640 0 6
49635: ST_TO_ADDR
// if not hexes then
49636: LD_VAR 0 14
49640: NOT
49641: IFFALSE 49645
// exit ;
49643: GO 50403
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49645: LD_ADDR_VAR 0 17
49649: PUSH
49650: LD_VAR 0 5
49654: PPUSH
49655: LD_INT 22
49657: PUSH
49658: LD_VAR 0 13
49662: PPUSH
49663: CALL_OW 255
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 30
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 30
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PPUSH
49704: CALL_OW 72
49708: ST_TO_ADDR
// for i = 1 to hexes do
49709: LD_ADDR_VAR 0 9
49713: PUSH
49714: DOUBLE
49715: LD_INT 1
49717: DEC
49718: ST_TO_ADDR
49719: LD_VAR 0 14
49723: PUSH
49724: FOR_TO
49725: IFFALSE 50401
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49727: LD_ADDR_VAR 0 13
49731: PUSH
49732: LD_VAR 0 14
49736: PUSH
49737: LD_VAR 0 9
49741: ARRAY
49742: PUSH
49743: LD_INT 1
49745: ARRAY
49746: PPUSH
49747: LD_VAR 0 14
49751: PUSH
49752: LD_VAR 0 9
49756: ARRAY
49757: PUSH
49758: LD_INT 2
49760: ARRAY
49761: PPUSH
49762: CALL_OW 428
49766: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49767: LD_VAR 0 14
49771: PUSH
49772: LD_VAR 0 9
49776: ARRAY
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: PPUSH
49782: LD_VAR 0 14
49786: PUSH
49787: LD_VAR 0 9
49791: ARRAY
49792: PUSH
49793: LD_INT 2
49795: ARRAY
49796: PPUSH
49797: CALL_OW 351
49801: PUSH
49802: LD_VAR 0 14
49806: PUSH
49807: LD_VAR 0 9
49811: ARRAY
49812: PUSH
49813: LD_INT 1
49815: ARRAY
49816: PPUSH
49817: LD_VAR 0 14
49821: PUSH
49822: LD_VAR 0 9
49826: ARRAY
49827: PUSH
49828: LD_INT 2
49830: ARRAY
49831: PPUSH
49832: CALL_OW 488
49836: NOT
49837: OR
49838: PUSH
49839: LD_VAR 0 13
49843: PPUSH
49844: CALL_OW 247
49848: PUSH
49849: LD_INT 3
49851: EQUAL
49852: OR
49853: IFFALSE 49859
// exit ;
49855: POP
49856: POP
49857: GO 50403
// if not tmp then
49859: LD_VAR 0 13
49863: NOT
49864: IFFALSE 49868
// continue ;
49866: GO 49724
// result := true ;
49868: LD_ADDR_VAR 0 8
49872: PUSH
49873: LD_INT 1
49875: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49876: LD_VAR 0 6
49880: PUSH
49881: LD_VAR 0 13
49885: PPUSH
49886: CALL_OW 247
49890: PUSH
49891: LD_INT 2
49893: EQUAL
49894: AND
49895: PUSH
49896: LD_VAR 0 13
49900: PPUSH
49901: CALL_OW 263
49905: PUSH
49906: LD_INT 1
49908: EQUAL
49909: AND
49910: IFFALSE 50074
// begin if IsDrivenBy ( tmp ) then
49912: LD_VAR 0 13
49916: PPUSH
49917: CALL_OW 311
49921: IFFALSE 49925
// continue ;
49923: GO 49724
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49925: LD_VAR 0 6
49929: PPUSH
49930: LD_INT 3
49932: PUSH
49933: LD_INT 60
49935: PUSH
49936: EMPTY
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: LD_INT 55
49948: PUSH
49949: EMPTY
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PPUSH
49960: CALL_OW 72
49964: IFFALSE 50072
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49966: LD_ADDR_VAR 0 18
49970: PUSH
49971: LD_VAR 0 6
49975: PPUSH
49976: LD_INT 3
49978: PUSH
49979: LD_INT 60
49981: PUSH
49982: EMPTY
49983: LIST
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: LD_INT 55
49994: PUSH
49995: EMPTY
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PPUSH
50006: CALL_OW 72
50010: PUSH
50011: LD_INT 1
50013: ARRAY
50014: ST_TO_ADDR
// if IsInUnit ( driver ) then
50015: LD_VAR 0 18
50019: PPUSH
50020: CALL_OW 310
50024: IFFALSE 50035
// ComExit ( driver ) ;
50026: LD_VAR 0 18
50030: PPUSH
50031: CALL 74824 0 1
// AddComEnterUnit ( driver , tmp ) ;
50035: LD_VAR 0 18
50039: PPUSH
50040: LD_VAR 0 13
50044: PPUSH
50045: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50049: LD_VAR 0 18
50053: PPUSH
50054: LD_VAR 0 7
50058: PPUSH
50059: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50063: LD_VAR 0 18
50067: PPUSH
50068: CALL_OW 181
// end ; continue ;
50072: GO 49724
// end ; if not cleaners or not tmp in cleaners then
50074: LD_VAR 0 6
50078: NOT
50079: PUSH
50080: LD_VAR 0 13
50084: PUSH
50085: LD_VAR 0 6
50089: IN
50090: NOT
50091: OR
50092: IFFALSE 50399
// begin if dep then
50094: LD_VAR 0 17
50098: IFFALSE 50234
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50100: LD_ADDR_VAR 0 16
50104: PUSH
50105: LD_VAR 0 17
50109: PUSH
50110: LD_INT 1
50112: ARRAY
50113: PPUSH
50114: CALL_OW 250
50118: PPUSH
50119: LD_VAR 0 17
50123: PUSH
50124: LD_INT 1
50126: ARRAY
50127: PPUSH
50128: CALL_OW 254
50132: PPUSH
50133: LD_INT 5
50135: PPUSH
50136: CALL_OW 272
50140: PUSH
50141: LD_VAR 0 17
50145: PUSH
50146: LD_INT 1
50148: ARRAY
50149: PPUSH
50150: CALL_OW 251
50154: PPUSH
50155: LD_VAR 0 17
50159: PUSH
50160: LD_INT 1
50162: ARRAY
50163: PPUSH
50164: CALL_OW 254
50168: PPUSH
50169: LD_INT 5
50171: PPUSH
50172: CALL_OW 273
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50181: LD_VAR 0 16
50185: PUSH
50186: LD_INT 1
50188: ARRAY
50189: PPUSH
50190: LD_VAR 0 16
50194: PUSH
50195: LD_INT 2
50197: ARRAY
50198: PPUSH
50199: CALL_OW 488
50203: IFFALSE 50234
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50205: LD_VAR 0 13
50209: PPUSH
50210: LD_VAR 0 16
50214: PUSH
50215: LD_INT 1
50217: ARRAY
50218: PPUSH
50219: LD_VAR 0 16
50223: PUSH
50224: LD_INT 2
50226: ARRAY
50227: PPUSH
50228: CALL_OW 111
// continue ;
50232: GO 49724
// end ; end ; r := GetDir ( tmp ) ;
50234: LD_ADDR_VAR 0 15
50238: PUSH
50239: LD_VAR 0 13
50243: PPUSH
50244: CALL_OW 254
50248: ST_TO_ADDR
// if r = 5 then
50249: LD_VAR 0 15
50253: PUSH
50254: LD_INT 5
50256: EQUAL
50257: IFFALSE 50267
// r := 0 ;
50259: LD_ADDR_VAR 0 15
50263: PUSH
50264: LD_INT 0
50266: ST_TO_ADDR
// for j = r to 5 do
50267: LD_ADDR_VAR 0 10
50271: PUSH
50272: DOUBLE
50273: LD_VAR 0 15
50277: DEC
50278: ST_TO_ADDR
50279: LD_INT 5
50281: PUSH
50282: FOR_TO
50283: IFFALSE 50397
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50285: LD_ADDR_VAR 0 11
50289: PUSH
50290: LD_VAR 0 13
50294: PPUSH
50295: CALL_OW 250
50299: PPUSH
50300: LD_VAR 0 10
50304: PPUSH
50305: LD_INT 2
50307: PPUSH
50308: CALL_OW 272
50312: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50313: LD_ADDR_VAR 0 12
50317: PUSH
50318: LD_VAR 0 13
50322: PPUSH
50323: CALL_OW 251
50327: PPUSH
50328: LD_VAR 0 10
50332: PPUSH
50333: LD_INT 2
50335: PPUSH
50336: CALL_OW 273
50340: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50341: LD_VAR 0 11
50345: PPUSH
50346: LD_VAR 0 12
50350: PPUSH
50351: CALL_OW 488
50355: PUSH
50356: LD_VAR 0 11
50360: PPUSH
50361: LD_VAR 0 12
50365: PPUSH
50366: CALL_OW 428
50370: NOT
50371: AND
50372: IFFALSE 50395
// begin ComMoveXY ( tmp , _x , _y ) ;
50374: LD_VAR 0 13
50378: PPUSH
50379: LD_VAR 0 11
50383: PPUSH
50384: LD_VAR 0 12
50388: PPUSH
50389: CALL_OW 111
// break ;
50393: GO 50397
// end ; end ;
50395: GO 50282
50397: POP
50398: POP
// end ; end ;
50399: GO 49724
50401: POP
50402: POP
// end ;
50403: LD_VAR 0 8
50407: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50408: LD_INT 0
50410: PPUSH
// result := true ;
50411: LD_ADDR_VAR 0 3
50415: PUSH
50416: LD_INT 1
50418: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50419: LD_VAR 0 2
50423: PUSH
50424: LD_INT 24
50426: DOUBLE
50427: EQUAL
50428: IFTRUE 50438
50430: LD_INT 33
50432: DOUBLE
50433: EQUAL
50434: IFTRUE 50438
50436: GO 50463
50438: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50439: LD_ADDR_VAR 0 3
50443: PUSH
50444: LD_INT 32
50446: PPUSH
50447: LD_VAR 0 1
50451: PPUSH
50452: CALL_OW 321
50456: PUSH
50457: LD_INT 2
50459: EQUAL
50460: ST_TO_ADDR
50461: GO 50783
50463: LD_INT 20
50465: DOUBLE
50466: EQUAL
50467: IFTRUE 50471
50469: GO 50496
50471: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50472: LD_ADDR_VAR 0 3
50476: PUSH
50477: LD_INT 6
50479: PPUSH
50480: LD_VAR 0 1
50484: PPUSH
50485: CALL_OW 321
50489: PUSH
50490: LD_INT 2
50492: EQUAL
50493: ST_TO_ADDR
50494: GO 50783
50496: LD_INT 22
50498: DOUBLE
50499: EQUAL
50500: IFTRUE 50510
50502: LD_INT 36
50504: DOUBLE
50505: EQUAL
50506: IFTRUE 50510
50508: GO 50535
50510: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50511: LD_ADDR_VAR 0 3
50515: PUSH
50516: LD_INT 15
50518: PPUSH
50519: LD_VAR 0 1
50523: PPUSH
50524: CALL_OW 321
50528: PUSH
50529: LD_INT 2
50531: EQUAL
50532: ST_TO_ADDR
50533: GO 50783
50535: LD_INT 30
50537: DOUBLE
50538: EQUAL
50539: IFTRUE 50543
50541: GO 50568
50543: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50544: LD_ADDR_VAR 0 3
50548: PUSH
50549: LD_INT 20
50551: PPUSH
50552: LD_VAR 0 1
50556: PPUSH
50557: CALL_OW 321
50561: PUSH
50562: LD_INT 2
50564: EQUAL
50565: ST_TO_ADDR
50566: GO 50783
50568: LD_INT 28
50570: DOUBLE
50571: EQUAL
50572: IFTRUE 50582
50574: LD_INT 21
50576: DOUBLE
50577: EQUAL
50578: IFTRUE 50582
50580: GO 50607
50582: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50583: LD_ADDR_VAR 0 3
50587: PUSH
50588: LD_INT 21
50590: PPUSH
50591: LD_VAR 0 1
50595: PPUSH
50596: CALL_OW 321
50600: PUSH
50601: LD_INT 2
50603: EQUAL
50604: ST_TO_ADDR
50605: GO 50783
50607: LD_INT 16
50609: DOUBLE
50610: EQUAL
50611: IFTRUE 50615
50613: GO 50642
50615: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50616: LD_ADDR_VAR 0 3
50620: PUSH
50621: LD_EXP 62
50625: PPUSH
50626: LD_VAR 0 1
50630: PPUSH
50631: CALL_OW 321
50635: PUSH
50636: LD_INT 2
50638: EQUAL
50639: ST_TO_ADDR
50640: GO 50783
50642: LD_INT 19
50644: DOUBLE
50645: EQUAL
50646: IFTRUE 50656
50648: LD_INT 23
50650: DOUBLE
50651: EQUAL
50652: IFTRUE 50656
50654: GO 50683
50656: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50657: LD_ADDR_VAR 0 3
50661: PUSH
50662: LD_EXP 61
50666: PPUSH
50667: LD_VAR 0 1
50671: PPUSH
50672: CALL_OW 321
50676: PUSH
50677: LD_INT 2
50679: EQUAL
50680: ST_TO_ADDR
50681: GO 50783
50683: LD_INT 17
50685: DOUBLE
50686: EQUAL
50687: IFTRUE 50691
50689: GO 50716
50691: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50692: LD_ADDR_VAR 0 3
50696: PUSH
50697: LD_INT 39
50699: PPUSH
50700: LD_VAR 0 1
50704: PPUSH
50705: CALL_OW 321
50709: PUSH
50710: LD_INT 2
50712: EQUAL
50713: ST_TO_ADDR
50714: GO 50783
50716: LD_INT 18
50718: DOUBLE
50719: EQUAL
50720: IFTRUE 50724
50722: GO 50749
50724: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50725: LD_ADDR_VAR 0 3
50729: PUSH
50730: LD_INT 40
50732: PPUSH
50733: LD_VAR 0 1
50737: PPUSH
50738: CALL_OW 321
50742: PUSH
50743: LD_INT 2
50745: EQUAL
50746: ST_TO_ADDR
50747: GO 50783
50749: LD_INT 27
50751: DOUBLE
50752: EQUAL
50753: IFTRUE 50757
50755: GO 50782
50757: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50758: LD_ADDR_VAR 0 3
50762: PUSH
50763: LD_INT 35
50765: PPUSH
50766: LD_VAR 0 1
50770: PPUSH
50771: CALL_OW 321
50775: PUSH
50776: LD_INT 2
50778: EQUAL
50779: ST_TO_ADDR
50780: GO 50783
50782: POP
// end ;
50783: LD_VAR 0 3
50787: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50788: LD_INT 0
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
50796: PPUSH
50797: PPUSH
50798: PPUSH
50799: PPUSH
50800: PPUSH
// result := false ;
50801: LD_ADDR_VAR 0 6
50805: PUSH
50806: LD_INT 0
50808: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50809: LD_VAR 0 1
50813: NOT
50814: PUSH
50815: LD_VAR 0 1
50819: PPUSH
50820: CALL_OW 266
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: IN
50835: NOT
50836: OR
50837: PUSH
50838: LD_VAR 0 2
50842: NOT
50843: OR
50844: PUSH
50845: LD_VAR 0 5
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: LD_INT 3
50861: PUSH
50862: LD_INT 4
50864: PUSH
50865: LD_INT 5
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: IN
50876: NOT
50877: OR
50878: PUSH
50879: LD_VAR 0 3
50883: PPUSH
50884: LD_VAR 0 4
50888: PPUSH
50889: CALL_OW 488
50893: NOT
50894: OR
50895: IFFALSE 50899
// exit ;
50897: GO 51635
// side := GetSide ( depot ) ;
50899: LD_ADDR_VAR 0 9
50903: PUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: CALL_OW 255
50913: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50914: LD_VAR 0 9
50918: PPUSH
50919: LD_VAR 0 2
50923: PPUSH
50924: CALL 50408 0 2
50928: NOT
50929: IFFALSE 50933
// exit ;
50931: GO 51635
// pom := GetBase ( depot ) ;
50933: LD_ADDR_VAR 0 10
50937: PUSH
50938: LD_VAR 0 1
50942: PPUSH
50943: CALL_OW 274
50947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50948: LD_ADDR_VAR 0 11
50952: PUSH
50953: LD_VAR 0 2
50957: PPUSH
50958: LD_VAR 0 1
50962: PPUSH
50963: CALL_OW 248
50967: PPUSH
50968: CALL_OW 450
50972: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50973: LD_VAR 0 10
50977: PPUSH
50978: LD_INT 1
50980: PPUSH
50981: CALL_OW 275
50985: PUSH
50986: LD_VAR 0 11
50990: PUSH
50991: LD_INT 1
50993: ARRAY
50994: GREATEREQUAL
50995: PUSH
50996: LD_VAR 0 10
51000: PPUSH
51001: LD_INT 2
51003: PPUSH
51004: CALL_OW 275
51008: PUSH
51009: LD_VAR 0 11
51013: PUSH
51014: LD_INT 2
51016: ARRAY
51017: GREATEREQUAL
51018: AND
51019: PUSH
51020: LD_VAR 0 10
51024: PPUSH
51025: LD_INT 3
51027: PPUSH
51028: CALL_OW 275
51032: PUSH
51033: LD_VAR 0 11
51037: PUSH
51038: LD_INT 3
51040: ARRAY
51041: GREATEREQUAL
51042: AND
51043: NOT
51044: IFFALSE 51048
// exit ;
51046: GO 51635
// if GetBType ( depot ) = b_depot then
51048: LD_VAR 0 1
51052: PPUSH
51053: CALL_OW 266
51057: PUSH
51058: LD_INT 0
51060: EQUAL
51061: IFFALSE 51073
// dist := 28 else
51063: LD_ADDR_VAR 0 14
51067: PUSH
51068: LD_INT 28
51070: ST_TO_ADDR
51071: GO 51081
// dist := 36 ;
51073: LD_ADDR_VAR 0 14
51077: PUSH
51078: LD_INT 36
51080: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51081: LD_VAR 0 1
51085: PPUSH
51086: LD_VAR 0 3
51090: PPUSH
51091: LD_VAR 0 4
51095: PPUSH
51096: CALL_OW 297
51100: PUSH
51101: LD_VAR 0 14
51105: GREATER
51106: IFFALSE 51110
// exit ;
51108: GO 51635
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51110: LD_ADDR_VAR 0 12
51114: PUSH
51115: LD_VAR 0 2
51119: PPUSH
51120: LD_VAR 0 3
51124: PPUSH
51125: LD_VAR 0 4
51129: PPUSH
51130: LD_VAR 0 5
51134: PPUSH
51135: LD_VAR 0 1
51139: PPUSH
51140: CALL_OW 248
51144: PPUSH
51145: LD_INT 0
51147: PPUSH
51148: CALL 51640 0 6
51152: ST_TO_ADDR
// if not hexes then
51153: LD_VAR 0 12
51157: NOT
51158: IFFALSE 51162
// exit ;
51160: GO 51635
// hex := GetHexInfo ( x , y ) ;
51162: LD_ADDR_VAR 0 15
51166: PUSH
51167: LD_VAR 0 3
51171: PPUSH
51172: LD_VAR 0 4
51176: PPUSH
51177: CALL_OW 546
51181: ST_TO_ADDR
// if hex [ 1 ] then
51182: LD_VAR 0 15
51186: PUSH
51187: LD_INT 1
51189: ARRAY
51190: IFFALSE 51194
// exit ;
51192: GO 51635
// height := hex [ 2 ] ;
51194: LD_ADDR_VAR 0 13
51198: PUSH
51199: LD_VAR 0 15
51203: PUSH
51204: LD_INT 2
51206: ARRAY
51207: ST_TO_ADDR
// for i = 1 to hexes do
51208: LD_ADDR_VAR 0 7
51212: PUSH
51213: DOUBLE
51214: LD_INT 1
51216: DEC
51217: ST_TO_ADDR
51218: LD_VAR 0 12
51222: PUSH
51223: FOR_TO
51224: IFFALSE 51554
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51226: LD_VAR 0 12
51230: PUSH
51231: LD_VAR 0 7
51235: ARRAY
51236: PUSH
51237: LD_INT 1
51239: ARRAY
51240: PPUSH
51241: LD_VAR 0 12
51245: PUSH
51246: LD_VAR 0 7
51250: ARRAY
51251: PUSH
51252: LD_INT 2
51254: ARRAY
51255: PPUSH
51256: CALL_OW 488
51260: NOT
51261: PUSH
51262: LD_VAR 0 12
51266: PUSH
51267: LD_VAR 0 7
51271: ARRAY
51272: PUSH
51273: LD_INT 1
51275: ARRAY
51276: PPUSH
51277: LD_VAR 0 12
51281: PUSH
51282: LD_VAR 0 7
51286: ARRAY
51287: PUSH
51288: LD_INT 2
51290: ARRAY
51291: PPUSH
51292: CALL_OW 428
51296: PUSH
51297: LD_INT 0
51299: GREATER
51300: OR
51301: PUSH
51302: LD_VAR 0 12
51306: PUSH
51307: LD_VAR 0 7
51311: ARRAY
51312: PUSH
51313: LD_INT 1
51315: ARRAY
51316: PPUSH
51317: LD_VAR 0 12
51321: PUSH
51322: LD_VAR 0 7
51326: ARRAY
51327: PUSH
51328: LD_INT 2
51330: ARRAY
51331: PPUSH
51332: CALL_OW 351
51336: OR
51337: IFFALSE 51343
// exit ;
51339: POP
51340: POP
51341: GO 51635
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51343: LD_ADDR_VAR 0 8
51347: PUSH
51348: LD_VAR 0 12
51352: PUSH
51353: LD_VAR 0 7
51357: ARRAY
51358: PUSH
51359: LD_INT 1
51361: ARRAY
51362: PPUSH
51363: LD_VAR 0 12
51367: PUSH
51368: LD_VAR 0 7
51372: ARRAY
51373: PUSH
51374: LD_INT 2
51376: ARRAY
51377: PPUSH
51378: CALL_OW 546
51382: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51383: LD_VAR 0 8
51387: PUSH
51388: LD_INT 1
51390: ARRAY
51391: PUSH
51392: LD_VAR 0 8
51396: PUSH
51397: LD_INT 2
51399: ARRAY
51400: PUSH
51401: LD_VAR 0 13
51405: PUSH
51406: LD_INT 2
51408: PLUS
51409: GREATER
51410: OR
51411: PUSH
51412: LD_VAR 0 8
51416: PUSH
51417: LD_INT 2
51419: ARRAY
51420: PUSH
51421: LD_VAR 0 13
51425: PUSH
51426: LD_INT 2
51428: MINUS
51429: LESS
51430: OR
51431: PUSH
51432: LD_VAR 0 8
51436: PUSH
51437: LD_INT 3
51439: ARRAY
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 8
51446: PUSH
51447: LD_INT 9
51449: PUSH
51450: LD_INT 10
51452: PUSH
51453: LD_INT 11
51455: PUSH
51456: LD_INT 12
51458: PUSH
51459: LD_INT 13
51461: PUSH
51462: LD_INT 16
51464: PUSH
51465: LD_INT 17
51467: PUSH
51468: LD_INT 18
51470: PUSH
51471: LD_INT 19
51473: PUSH
51474: LD_INT 20
51476: PUSH
51477: LD_INT 21
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: IN
51495: NOT
51496: OR
51497: PUSH
51498: LD_VAR 0 8
51502: PUSH
51503: LD_INT 5
51505: ARRAY
51506: NOT
51507: OR
51508: PUSH
51509: LD_VAR 0 8
51513: PUSH
51514: LD_INT 6
51516: ARRAY
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 7
51526: PUSH
51527: LD_INT 9
51529: PUSH
51530: LD_INT 10
51532: PUSH
51533: LD_INT 11
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: IN
51544: NOT
51545: OR
51546: IFFALSE 51552
// exit ;
51548: POP
51549: POP
51550: GO 51635
// end ;
51552: GO 51223
51554: POP
51555: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51556: LD_VAR 0 9
51560: PPUSH
51561: LD_VAR 0 3
51565: PPUSH
51566: LD_VAR 0 4
51570: PPUSH
51571: LD_INT 20
51573: PPUSH
51574: CALL 43581 0 4
51578: PUSH
51579: LD_INT 4
51581: ARRAY
51582: IFFALSE 51586
// exit ;
51584: GO 51635
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51586: LD_VAR 0 2
51590: PUSH
51591: LD_INT 29
51593: PUSH
51594: LD_INT 30
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: IN
51601: PUSH
51602: LD_VAR 0 3
51606: PPUSH
51607: LD_VAR 0 4
51611: PPUSH
51612: LD_VAR 0 9
51616: PPUSH
51617: CALL_OW 440
51621: NOT
51622: AND
51623: IFFALSE 51627
// exit ;
51625: GO 51635
// result := true ;
51627: LD_ADDR_VAR 0 6
51631: PUSH
51632: LD_INT 1
51634: ST_TO_ADDR
// end ;
51635: LD_VAR 0 6
51639: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51640: LD_INT 0
51642: PPUSH
51643: PPUSH
51644: PPUSH
51645: PPUSH
51646: PPUSH
51647: PPUSH
51648: PPUSH
51649: PPUSH
51650: PPUSH
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
51658: PPUSH
51659: PPUSH
51660: PPUSH
51661: PPUSH
51662: PPUSH
51663: PPUSH
51664: PPUSH
51665: PPUSH
51666: PPUSH
51667: PPUSH
51668: PPUSH
51669: PPUSH
51670: PPUSH
51671: PPUSH
51672: PPUSH
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
51678: PPUSH
51679: PPUSH
51680: PPUSH
51681: PPUSH
51682: PPUSH
51683: PPUSH
51684: PPUSH
51685: PPUSH
51686: PPUSH
51687: PPUSH
51688: PPUSH
51689: PPUSH
51690: PPUSH
51691: PPUSH
51692: PPUSH
51693: PPUSH
51694: PPUSH
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
51699: PPUSH
// result = [ ] ;
51700: LD_ADDR_VAR 0 7
51704: PUSH
51705: EMPTY
51706: ST_TO_ADDR
// temp_list = [ ] ;
51707: LD_ADDR_VAR 0 9
51711: PUSH
51712: EMPTY
51713: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51714: LD_VAR 0 4
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 4
51733: PUSH
51734: LD_INT 5
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: IN
51745: NOT
51746: PUSH
51747: LD_VAR 0 1
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: IN
51762: PUSH
51763: LD_VAR 0 5
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 3
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: IN
51782: NOT
51783: AND
51784: OR
51785: IFFALSE 51789
// exit ;
51787: GO 70180
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51789: LD_VAR 0 1
51793: PUSH
51794: LD_INT 6
51796: PUSH
51797: LD_INT 7
51799: PUSH
51800: LD_INT 8
51802: PUSH
51803: LD_INT 13
51805: PUSH
51806: LD_INT 12
51808: PUSH
51809: LD_INT 15
51811: PUSH
51812: LD_INT 11
51814: PUSH
51815: LD_INT 14
51817: PUSH
51818: LD_INT 10
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: IN
51832: IFFALSE 51842
// btype = b_lab ;
51834: LD_ADDR_VAR 0 1
51838: PUSH
51839: LD_INT 6
51841: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51842: LD_VAR 0 6
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: IN
51861: NOT
51862: PUSH
51863: LD_VAR 0 1
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 3
51879: PUSH
51880: LD_INT 6
51882: PUSH
51883: LD_INT 36
51885: PUSH
51886: LD_INT 4
51888: PUSH
51889: LD_INT 5
51891: PUSH
51892: LD_INT 31
51894: PUSH
51895: LD_INT 32
51897: PUSH
51898: LD_INT 33
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: IN
51914: NOT
51915: PUSH
51916: LD_VAR 0 6
51920: PUSH
51921: LD_INT 1
51923: EQUAL
51924: AND
51925: OR
51926: PUSH
51927: LD_VAR 0 1
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: IN
51942: NOT
51943: PUSH
51944: LD_VAR 0 6
51948: PUSH
51949: LD_INT 2
51951: EQUAL
51952: AND
51953: OR
51954: IFFALSE 51964
// mode = 0 ;
51956: LD_ADDR_VAR 0 6
51960: PUSH
51961: LD_INT 0
51963: ST_TO_ADDR
// case mode of 0 :
51964: LD_VAR 0 6
51968: PUSH
51969: LD_INT 0
51971: DOUBLE
51972: EQUAL
51973: IFTRUE 51977
51975: GO 63430
51977: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51978: LD_ADDR_VAR 0 11
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52171: LD_ADDR_VAR 0 12
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 3
52339: NEG
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52367: LD_ADDR_VAR 0 13
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 2
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: NEG
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52566: LD_ADDR_VAR 0 14
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 3
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52762: LD_ADDR_VAR 0 15
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52955: LD_ADDR_VAR 0 16
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53148: LD_ADDR_VAR 0 17
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53378: LD_ADDR_VAR 0 18
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53608: LD_ADDR_VAR 0 19
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: NEG
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53838: LD_ADDR_VAR 0 20
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54068: LD_ADDR_VAR 0 21
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54298: LD_ADDR_VAR 0 22
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54528: LD_ADDR_VAR 0 23
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 2
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54808: LD_ADDR_VAR 0 24
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55084: LD_ADDR_VAR 0 25
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 2
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55358: LD_ADDR_VAR 0 26
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55634: LD_ADDR_VAR 0 27
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55914: LD_ADDR_VAR 0 28
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56196: LD_ADDR_VAR 0 29
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: LD_INT 2
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56475: LD_ADDR_VAR 0 30
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: NEG
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 3
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56753: LD_ADDR_VAR 0 31
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: LD_INT 3
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57031: LD_ADDR_VAR 0 32
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57309: LD_ADDR_VAR 0 33
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57588: LD_ADDR_VAR 0 34
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 3
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57868: LD_ADDR_VAR 0 35
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57980: LD_ADDR_VAR 0 36
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58092: LD_ADDR_VAR 0 37
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: NEG
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58204: LD_ADDR_VAR 0 38
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58316: LD_ADDR_VAR 0 39
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58428: LD_ADDR_VAR 0 40
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58540: LD_ADDR_VAR 0 41
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: LD_INT 2
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 3
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: LD_INT 3
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58890: LD_ADDR_VAR 0 42
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 3
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59240: LD_ADDR_VAR 0 43
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 2
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 3
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59588: LD_ADDR_VAR 0 44
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: LD_INT 2
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: NEG
59779: PUSH
59780: LD_INT 3
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 3
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 3
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 3
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59938: LD_ADDR_VAR 0 45
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 2
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: NEG
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: LD_INT 3
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60288: LD_ADDR_VAR 0 46
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: LD_INT 3
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 3
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60636: LD_ADDR_VAR 0 47
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60787: LD_ADDR_VAR 0 48
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60934: LD_ADDR_VAR 0 49
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61078: LD_ADDR_VAR 0 50
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 2
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61222: LD_ADDR_VAR 0 51
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61369: LD_ADDR_VAR 0 52
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61520: LD_ADDR_VAR 0 53
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61750: LD_ADDR_VAR 0 54
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 2
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 2
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: NEG
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61980: LD_ADDR_VAR 0 55
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 2
62115: PUSH
62116: LD_INT 2
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: LD_INT 2
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62210: LD_ADDR_VAR 0 56
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: NEG
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62440: LD_ADDR_VAR 0 57
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: NEG
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: LD_INT 2
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62670: LD_ADDR_VAR 0 58
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: NEG
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 2
62857: NEG
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: LD_INT 2
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62900: LD_ADDR_VAR 0 59
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62988: LD_ADDR_VAR 0 60
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63076: LD_ADDR_VAR 0 61
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63164: LD_ADDR_VAR 0 62
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63252: LD_ADDR_VAR 0 63
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63340: LD_ADDR_VAR 0 64
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: ST_TO_ADDR
// end ; 1 :
63428: GO 69325
63430: LD_INT 1
63432: DOUBLE
63433: EQUAL
63434: IFTRUE 63438
63436: GO 66061
63438: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63439: LD_ADDR_VAR 0 11
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: LD_INT 3
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63483: LD_ADDR_VAR 0 12
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63524: LD_ADDR_VAR 0 13
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: LD_INT 3
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63564: LD_ADDR_VAR 0 14
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63605: LD_ADDR_VAR 0 15
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 3
63623: NEG
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 3
63634: NEG
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63649: LD_ADDR_VAR 0 16
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: LD_INT 3
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: NEG
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63695: LD_ADDR_VAR 0 17
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 3
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63739: LD_ADDR_VAR 0 18
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63780: LD_ADDR_VAR 0 19
63784: PUSH
63785: LD_INT 3
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63820: LD_ADDR_VAR 0 20
63824: PUSH
63825: LD_INT 1
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63861: LD_ADDR_VAR 0 21
63865: PUSH
63866: LD_INT 2
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 3
63879: NEG
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 3
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: LIST
63904: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63905: LD_ADDR_VAR 0 22
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 3
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 3
63924: NEG
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63951: LD_ADDR_VAR 0 23
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 3
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: LD_INT 4
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: LIST
63994: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63995: LD_ADDR_VAR 0 24
63999: PUSH
64000: LD_INT 3
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 3
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 4
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: LIST
64035: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64036: LD_ADDR_VAR 0 25
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: LD_INT 3
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 4
64053: PUSH
64054: LD_INT 3
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: LD_INT 4
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64076: LD_ADDR_VAR 0 26
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 3
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: LD_INT 4
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: NEG
64104: PUSH
64105: LD_INT 3
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: LIST
64116: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64117: LD_ADDR_VAR 0 27
64121: PUSH
64122: LD_INT 3
64124: NEG
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 3
64135: NEG
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 4
64146: NEG
64147: PUSH
64148: LD_INT 1
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: LIST
64160: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64161: LD_ADDR_VAR 0 28
64165: PUSH
64166: LD_INT 3
64168: NEG
64169: PUSH
64170: LD_INT 3
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: LD_INT 4
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 4
64192: NEG
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: LIST
64206: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64207: LD_ADDR_VAR 0 29
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 3
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 3
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 4
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 4
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 3
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: LD_INT 5
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 5
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: LD_INT 4
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 6
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 6
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: LD_INT 5
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64362: LD_ADDR_VAR 0 30
64366: PUSH
64367: LD_INT 2
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 3
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 3
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 4
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 4
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 4
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 5
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 5
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 5
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 6
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 6
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64505: LD_ADDR_VAR 0 31
64509: PUSH
64510: LD_INT 3
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 3
64522: PUSH
64523: LD_INT 3
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: LD_INT 3
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 4
64542: PUSH
64543: LD_INT 3
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 4
64552: PUSH
64553: LD_INT 4
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 3
64562: PUSH
64563: LD_INT 4
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 5
64572: PUSH
64573: LD_INT 4
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 5
64582: PUSH
64583: LD_INT 5
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 4
64592: PUSH
64593: LD_INT 5
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 6
64602: PUSH
64603: LD_INT 5
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 6
64612: PUSH
64613: LD_INT 6
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 5
64622: PUSH
64623: LD_INT 6
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64644: LD_ADDR_VAR 0 32
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 3
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: LD_INT 3
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: LD_INT 2
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: LD_INT 4
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 4
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: LD_INT 3
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: LD_INT 5
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 5
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: LD_INT 4
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: LD_INT 6
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 6
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 5
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64787: LD_ADDR_VAR 0 33
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 3
64805: NEG
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 4
64839: NEG
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 4
64850: NEG
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 4
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 5
64873: NEG
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 5
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 5
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 6
64907: NEG
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 6
64918: NEG
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64942: LD_ADDR_VAR 0 34
64946: PUSH
64947: LD_INT 2
64949: NEG
64950: PUSH
64951: LD_INT 3
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 3
64961: NEG
64962: PUSH
64963: LD_INT 2
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 3
64973: NEG
64974: PUSH
64975: LD_INT 3
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 3
64985: NEG
64986: PUSH
64987: LD_INT 4
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 4
64997: NEG
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 4
65009: NEG
65010: PUSH
65011: LD_INT 4
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: NEG
65022: PUSH
65023: LD_INT 5
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 5
65033: NEG
65034: PUSH
65035: LD_INT 4
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 5
65045: NEG
65046: PUSH
65047: LD_INT 5
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 5
65057: NEG
65058: PUSH
65059: LD_INT 6
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 6
65069: NEG
65070: PUSH
65071: LD_INT 5
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 6
65081: NEG
65082: PUSH
65083: LD_INT 6
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65105: LD_ADDR_VAR 0 41
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 2
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 3
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: LD_INT 2
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: LIST
65148: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65149: LD_ADDR_VAR 0 42
65153: PUSH
65154: LD_INT 2
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65190: LD_ADDR_VAR 0 43
65194: PUSH
65195: LD_INT 2
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 3
65207: PUSH
65208: LD_INT 2
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: LD_INT 3
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65230: LD_ADDR_VAR 0 44
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: LD_INT 3
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65271: LD_ADDR_VAR 0 45
65275: PUSH
65276: LD_INT 2
65278: NEG
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: NEG
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65315: LD_ADDR_VAR 0 46
65319: PUSH
65320: LD_INT 2
65322: NEG
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 2
65334: NEG
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: NEG
65347: PUSH
65348: LD_INT 2
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65361: LD_ADDR_VAR 0 47
65365: PUSH
65366: LD_INT 2
65368: NEG
65369: PUSH
65370: LD_INT 3
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 3
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65394: LD_ADDR_VAR 0 48
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: LD_INT 2
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65425: LD_ADDR_VAR 0 49
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65454: LD_ADDR_VAR 0 50
65458: PUSH
65459: LD_INT 2
65461: PUSH
65462: LD_INT 3
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65483: LD_ADDR_VAR 0 51
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 2
65501: NEG
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65514: LD_ADDR_VAR 0 52
65518: PUSH
65519: LD_INT 3
65521: NEG
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 3
65533: NEG
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65547: LD_ADDR_VAR 0 53
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: LD_INT 3
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: LD_INT 2
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65591: LD_ADDR_VAR 0 54
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65632: LD_ADDR_VAR 0 55
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 3
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: LD_INT 3
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65672: LD_ADDR_VAR 0 56
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: LD_INT 3
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: NEG
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65713: LD_ADDR_VAR 0 57
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: NEG
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65757: LD_ADDR_VAR 0 58
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: LD_INT 3
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 3
65776: NEG
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 3
65788: NEG
65789: PUSH
65790: LD_INT 3
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: LIST
65802: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65803: LD_ADDR_VAR 0 59
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: LD_INT 2
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 2
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65847: LD_ADDR_VAR 0 60
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65888: LD_ADDR_VAR 0 61
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: LD_INT 2
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65928: LD_ADDR_VAR 0 62
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 2
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 2
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65969: LD_ADDR_VAR 0 63
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 2
65987: NEG
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66013: LD_ADDR_VAR 0 64
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 2
66044: NEG
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: ST_TO_ADDR
// end ; 2 :
66059: GO 69325
66061: LD_INT 2
66063: DOUBLE
66064: EQUAL
66065: IFTRUE 66069
66067: GO 69324
66069: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66070: LD_ADDR_VAR 0 29
66074: PUSH
66075: LD_INT 4
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 4
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 5
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 5
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 4
66118: PUSH
66119: LD_INT 1
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 3
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: PUSH
66150: LD_INT 2
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: LD_INT 2
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: LD_INT 3
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 3
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 4
66190: PUSH
66191: LD_INT 3
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 4
66200: PUSH
66201: LD_INT 4
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 3
66210: PUSH
66211: LD_INT 4
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: LD_INT 3
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 4
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 2
66250: PUSH
66251: LD_INT 4
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: LD_INT 4
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: LD_INT 5
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 5
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: LD_INT 4
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: LD_INT 5
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 3
66353: NEG
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: LD_INT 1
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: NEG
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 2
66387: NEG
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: NEG
66399: PUSH
66400: LD_INT 1
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: NEG
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 4
66420: NEG
66421: PUSH
66422: LD_INT 1
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 4
66432: NEG
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: LD_INT 2
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: NEG
66456: PUSH
66457: LD_INT 4
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 4
66467: NEG
66468: PUSH
66469: LD_INT 5
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 3
66479: NEG
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: LD_INT 3
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 4
66503: NEG
66504: PUSH
66505: LD_INT 3
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 5
66515: NEG
66516: PUSH
66517: LD_INT 4
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 5
66527: NEG
66528: PUSH
66529: LD_INT 5
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: LD_INT 5
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 5
66551: NEG
66552: PUSH
66553: LD_INT 3
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66608: LD_ADDR_VAR 0 30
66612: PUSH
66613: LD_INT 4
66615: PUSH
66616: LD_INT 4
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 4
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 5
66635: PUSH
66636: LD_INT 4
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 5
66645: PUSH
66646: LD_INT 5
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 4
66655: PUSH
66656: LD_INT 5
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: LD_INT 4
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 3
66675: PUSH
66676: LD_INT 3
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 5
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 3
66695: PUSH
66696: LD_INT 5
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: LD_INT 3
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: PUSH
66726: LD_INT 3
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 4
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 3
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: NEG
66767: PUSH
66768: LD_INT 2
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: LD_INT 4
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 4
66798: NEG
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: NEG
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 3
66821: NEG
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: LD_INT 1
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 5
66854: NEG
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 5
66865: NEG
66866: PUSH
66867: LD_INT 1
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 5
66877: NEG
66878: PUSH
66879: LD_INT 2
66881: NEG
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 3
66889: NEG
66890: PUSH
66891: LD_INT 2
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: NEG
66913: PUSH
66914: LD_INT 4
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 2
66924: NEG
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: NEG
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 3
66948: NEG
66949: PUSH
66950: LD_INT 2
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 4
66960: NEG
66961: PUSH
66962: LD_INT 3
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 4
66972: NEG
66973: PUSH
66974: LD_INT 4
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 2
66984: NEG
66985: PUSH
66986: LD_INT 4
66988: NEG
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 4
66996: NEG
66997: PUSH
66998: LD_INT 2
67000: NEG
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: LD_INT 4
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: LD_INT 5
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 4
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 3
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 4
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: LD_INT 5
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 2
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: LD_INT 5
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67155: LD_ADDR_VAR 0 31
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 4
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: LD_INT 4
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 1
67192: PUSH
67193: LD_INT 5
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 5
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: LD_INT 4
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 2
67244: NEG
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 3
67255: NEG
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 3
67266: NEG
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 2
67278: NEG
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 3
67300: NEG
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 4
67311: NEG
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 4
67322: NEG
67323: PUSH
67324: LD_INT 1
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 4
67334: NEG
67335: PUSH
67336: LD_INT 2
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 2
67346: NEG
67347: PUSH
67348: LD_INT 2
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 4
67357: NEG
67358: PUSH
67359: LD_INT 4
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 4
67369: NEG
67370: PUSH
67371: LD_INT 5
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: LD_INT 4
67385: NEG
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 3
67393: NEG
67394: PUSH
67395: LD_INT 3
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 4
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 5
67417: NEG
67418: PUSH
67419: LD_INT 4
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 5
67429: NEG
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 5
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: NEG
67454: PUSH
67455: LD_INT 3
67457: NEG
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: LD_INT 3
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 0
67476: PUSH
67477: LD_INT 4
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: LD_INT 3
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 1
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 2
67544: PUSH
67545: LD_INT 2
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: LD_INT 4
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 4
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 4
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 5
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 5
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 3
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 5
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67705: LD_ADDR_VAR 0 32
67709: PUSH
67710: LD_INT 4
67712: NEG
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: NEG
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 3
67746: NEG
67747: PUSH
67748: LD_INT 1
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 4
67757: NEG
67758: PUSH
67759: LD_INT 1
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 5
67768: NEG
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 5
67779: NEG
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 5
67791: NEG
67792: PUSH
67793: LD_INT 2
67795: NEG
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 3
67803: NEG
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 3
67814: NEG
67815: PUSH
67816: LD_INT 3
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: NEG
67827: PUSH
67828: LD_INT 4
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 2
67838: NEG
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 2
67850: NEG
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 3
67862: NEG
67863: PUSH
67864: LD_INT 2
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 4
67874: NEG
67875: PUSH
67876: LD_INT 3
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 4
67886: NEG
67887: PUSH
67888: LD_INT 4
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: LD_INT 4
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 4
67910: NEG
67911: PUSH
67912: LD_INT 2
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: LD_INT 4
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_INT 5
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: LD_INT 4
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: LD_INT 3
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: LD_INT 4
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 1
67989: NEG
67990: PUSH
67991: LD_INT 5
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: LD_INT 5
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 4
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 4
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 3
68065: PUSH
68066: LD_INT 1
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: LD_INT 0
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 2
68085: PUSH
68086: LD_INT 1
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: PUSH
68097: LD_INT 2
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: PUSH
68108: LD_INT 2
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: PUSH
68118: LD_INT 4
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 5
68137: PUSH
68138: LD_INT 4
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 5
68147: PUSH
68148: LD_INT 5
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 4
68157: PUSH
68158: LD_INT 5
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 3
68167: PUSH
68168: LD_INT 4
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: PUSH
68178: LD_INT 3
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 5
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 3
68197: PUSH
68198: LD_INT 5
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68252: LD_ADDR_VAR 0 33
68256: PUSH
68257: LD_INT 4
68259: NEG
68260: PUSH
68261: LD_INT 4
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 4
68271: NEG
68272: PUSH
68273: LD_INT 5
68275: NEG
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 3
68283: NEG
68284: PUSH
68285: LD_INT 4
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 3
68295: NEG
68296: PUSH
68297: LD_INT 3
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 4
68307: NEG
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 5
68319: NEG
68320: PUSH
68321: LD_INT 4
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 5
68331: NEG
68332: PUSH
68333: LD_INT 5
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: NEG
68344: PUSH
68345: LD_INT 5
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 5
68355: NEG
68356: PUSH
68357: LD_INT 3
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: LD_INT 3
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: LD_INT 4
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 1
68389: PUSH
68390: LD_INT 3
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: LD_INT 2
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: NEG
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 1
68434: NEG
68435: PUSH
68436: LD_INT 4
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: PUSH
68447: LD_INT 2
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: LD_INT 4
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 4
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 4
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 5
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 5
68500: PUSH
68501: LD_INT 1
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 4
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 3
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 3
68541: PUSH
68542: LD_INT 2
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 5
68552: PUSH
68553: LD_INT 2
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: PUSH
68563: LD_INT 3
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 3
68572: PUSH
68573: LD_INT 2
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: LD_INT 3
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 4
68592: PUSH
68593: LD_INT 4
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 3
68602: PUSH
68603: LD_INT 4
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: LD_INT 3
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 2
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 4
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 2
68642: PUSH
68643: LD_INT 4
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 1
68672: PUSH
68673: LD_INT 4
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 1
68682: PUSH
68683: LD_INT 5
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: LD_INT 5
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 1
68702: NEG
68703: PUSH
68704: LD_INT 4
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 1
68713: NEG
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 2
68724: PUSH
68725: LD_INT 5
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 2
68734: NEG
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68790: LD_ADDR_VAR 0 34
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 0
68808: PUSH
68809: LD_INT 5
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: LD_INT 4
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 1
68830: PUSH
68831: LD_INT 3
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: LD_INT 3
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: LD_INT 4
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 1
68864: NEG
68865: PUSH
68866: LD_INT 5
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 2
68876: PUSH
68877: LD_INT 3
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 2
68887: NEG
68888: PUSH
68889: LD_INT 5
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 3
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 3
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 4
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 4
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 3
68940: PUSH
68941: LD_INT 1
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 2
68960: PUSH
68961: LD_INT 1
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 2
68971: PUSH
68972: LD_INT 2
68974: NEG
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 4
68992: PUSH
68993: LD_INT 4
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 4
69002: PUSH
69003: LD_INT 3
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 5
69012: PUSH
69013: LD_INT 4
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 5
69022: PUSH
69023: LD_INT 5
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 4
69032: PUSH
69033: LD_INT 5
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: LD_INT 4
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 3
69052: PUSH
69053: LD_INT 3
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 5
69062: PUSH
69063: LD_INT 3
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 3
69072: PUSH
69073: LD_INT 5
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_INT 3
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: LD_INT 2
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: LD_INT 3
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 4
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: LD_INT 4
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: LD_INT 3
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 2
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 2
69164: NEG
69165: PUSH
69166: LD_INT 2
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 4
69175: NEG
69176: PUSH
69177: LD_INT 0
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 4
69186: NEG
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 3
69209: NEG
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 4
69220: NEG
69221: PUSH
69222: LD_INT 1
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 5
69231: NEG
69232: PUSH
69233: LD_INT 0
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 5
69242: NEG
69243: PUSH
69244: LD_INT 1
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 5
69254: NEG
69255: PUSH
69256: LD_INT 2
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 3
69266: NEG
69267: PUSH
69268: LD_INT 2
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: ST_TO_ADDR
// end ; end ;
69322: GO 69325
69324: POP
// case btype of b_depot , b_warehouse :
69325: LD_VAR 0 1
69329: PUSH
69330: LD_INT 0
69332: DOUBLE
69333: EQUAL
69334: IFTRUE 69344
69336: LD_INT 1
69338: DOUBLE
69339: EQUAL
69340: IFTRUE 69344
69342: GO 69545
69344: POP
// case nation of nation_american :
69345: LD_VAR 0 5
69349: PUSH
69350: LD_INT 1
69352: DOUBLE
69353: EQUAL
69354: IFTRUE 69358
69356: GO 69414
69358: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69359: LD_ADDR_VAR 0 9
69363: PUSH
69364: LD_VAR 0 11
69368: PUSH
69369: LD_VAR 0 12
69373: PUSH
69374: LD_VAR 0 13
69378: PUSH
69379: LD_VAR 0 14
69383: PUSH
69384: LD_VAR 0 15
69388: PUSH
69389: LD_VAR 0 16
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: PUSH
69402: LD_VAR 0 4
69406: PUSH
69407: LD_INT 1
69409: PLUS
69410: ARRAY
69411: ST_TO_ADDR
69412: GO 69543
69414: LD_INT 2
69416: DOUBLE
69417: EQUAL
69418: IFTRUE 69422
69420: GO 69478
69422: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69423: LD_ADDR_VAR 0 9
69427: PUSH
69428: LD_VAR 0 17
69432: PUSH
69433: LD_VAR 0 18
69437: PUSH
69438: LD_VAR 0 19
69442: PUSH
69443: LD_VAR 0 20
69447: PUSH
69448: LD_VAR 0 21
69452: PUSH
69453: LD_VAR 0 22
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: PUSH
69466: LD_VAR 0 4
69470: PUSH
69471: LD_INT 1
69473: PLUS
69474: ARRAY
69475: ST_TO_ADDR
69476: GO 69543
69478: LD_INT 3
69480: DOUBLE
69481: EQUAL
69482: IFTRUE 69486
69484: GO 69542
69486: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69487: LD_ADDR_VAR 0 9
69491: PUSH
69492: LD_VAR 0 23
69496: PUSH
69497: LD_VAR 0 24
69501: PUSH
69502: LD_VAR 0 25
69506: PUSH
69507: LD_VAR 0 26
69511: PUSH
69512: LD_VAR 0 27
69516: PUSH
69517: LD_VAR 0 28
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: PUSH
69530: LD_VAR 0 4
69534: PUSH
69535: LD_INT 1
69537: PLUS
69538: ARRAY
69539: ST_TO_ADDR
69540: GO 69543
69542: POP
69543: GO 70098
69545: LD_INT 2
69547: DOUBLE
69548: EQUAL
69549: IFTRUE 69559
69551: LD_INT 3
69553: DOUBLE
69554: EQUAL
69555: IFTRUE 69559
69557: GO 69615
69559: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69560: LD_ADDR_VAR 0 9
69564: PUSH
69565: LD_VAR 0 29
69569: PUSH
69570: LD_VAR 0 30
69574: PUSH
69575: LD_VAR 0 31
69579: PUSH
69580: LD_VAR 0 32
69584: PUSH
69585: LD_VAR 0 33
69589: PUSH
69590: LD_VAR 0 34
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: PUSH
69603: LD_VAR 0 4
69607: PUSH
69608: LD_INT 1
69610: PLUS
69611: ARRAY
69612: ST_TO_ADDR
69613: GO 70098
69615: LD_INT 16
69617: DOUBLE
69618: EQUAL
69619: IFTRUE 69677
69621: LD_INT 17
69623: DOUBLE
69624: EQUAL
69625: IFTRUE 69677
69627: LD_INT 18
69629: DOUBLE
69630: EQUAL
69631: IFTRUE 69677
69633: LD_INT 19
69635: DOUBLE
69636: EQUAL
69637: IFTRUE 69677
69639: LD_INT 22
69641: DOUBLE
69642: EQUAL
69643: IFTRUE 69677
69645: LD_INT 20
69647: DOUBLE
69648: EQUAL
69649: IFTRUE 69677
69651: LD_INT 21
69653: DOUBLE
69654: EQUAL
69655: IFTRUE 69677
69657: LD_INT 23
69659: DOUBLE
69660: EQUAL
69661: IFTRUE 69677
69663: LD_INT 24
69665: DOUBLE
69666: EQUAL
69667: IFTRUE 69677
69669: LD_INT 25
69671: DOUBLE
69672: EQUAL
69673: IFTRUE 69677
69675: GO 69733
69677: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69678: LD_ADDR_VAR 0 9
69682: PUSH
69683: LD_VAR 0 35
69687: PUSH
69688: LD_VAR 0 36
69692: PUSH
69693: LD_VAR 0 37
69697: PUSH
69698: LD_VAR 0 38
69702: PUSH
69703: LD_VAR 0 39
69707: PUSH
69708: LD_VAR 0 40
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: PUSH
69721: LD_VAR 0 4
69725: PUSH
69726: LD_INT 1
69728: PLUS
69729: ARRAY
69730: ST_TO_ADDR
69731: GO 70098
69733: LD_INT 6
69735: DOUBLE
69736: EQUAL
69737: IFTRUE 69789
69739: LD_INT 7
69741: DOUBLE
69742: EQUAL
69743: IFTRUE 69789
69745: LD_INT 8
69747: DOUBLE
69748: EQUAL
69749: IFTRUE 69789
69751: LD_INT 13
69753: DOUBLE
69754: EQUAL
69755: IFTRUE 69789
69757: LD_INT 12
69759: DOUBLE
69760: EQUAL
69761: IFTRUE 69789
69763: LD_INT 15
69765: DOUBLE
69766: EQUAL
69767: IFTRUE 69789
69769: LD_INT 11
69771: DOUBLE
69772: EQUAL
69773: IFTRUE 69789
69775: LD_INT 14
69777: DOUBLE
69778: EQUAL
69779: IFTRUE 69789
69781: LD_INT 10
69783: DOUBLE
69784: EQUAL
69785: IFTRUE 69789
69787: GO 69845
69789: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69790: LD_ADDR_VAR 0 9
69794: PUSH
69795: LD_VAR 0 41
69799: PUSH
69800: LD_VAR 0 42
69804: PUSH
69805: LD_VAR 0 43
69809: PUSH
69810: LD_VAR 0 44
69814: PUSH
69815: LD_VAR 0 45
69819: PUSH
69820: LD_VAR 0 46
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: PUSH
69833: LD_VAR 0 4
69837: PUSH
69838: LD_INT 1
69840: PLUS
69841: ARRAY
69842: ST_TO_ADDR
69843: GO 70098
69845: LD_INT 36
69847: DOUBLE
69848: EQUAL
69849: IFTRUE 69853
69851: GO 69909
69853: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69854: LD_ADDR_VAR 0 9
69858: PUSH
69859: LD_VAR 0 47
69863: PUSH
69864: LD_VAR 0 48
69868: PUSH
69869: LD_VAR 0 49
69873: PUSH
69874: LD_VAR 0 50
69878: PUSH
69879: LD_VAR 0 51
69883: PUSH
69884: LD_VAR 0 52
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: PUSH
69897: LD_VAR 0 4
69901: PUSH
69902: LD_INT 1
69904: PLUS
69905: ARRAY
69906: ST_TO_ADDR
69907: GO 70098
69909: LD_INT 4
69911: DOUBLE
69912: EQUAL
69913: IFTRUE 69935
69915: LD_INT 5
69917: DOUBLE
69918: EQUAL
69919: IFTRUE 69935
69921: LD_INT 34
69923: DOUBLE
69924: EQUAL
69925: IFTRUE 69935
69927: LD_INT 37
69929: DOUBLE
69930: EQUAL
69931: IFTRUE 69935
69933: GO 69991
69935: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69936: LD_ADDR_VAR 0 9
69940: PUSH
69941: LD_VAR 0 53
69945: PUSH
69946: LD_VAR 0 54
69950: PUSH
69951: LD_VAR 0 55
69955: PUSH
69956: LD_VAR 0 56
69960: PUSH
69961: LD_VAR 0 57
69965: PUSH
69966: LD_VAR 0 58
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: PUSH
69979: LD_VAR 0 4
69983: PUSH
69984: LD_INT 1
69986: PLUS
69987: ARRAY
69988: ST_TO_ADDR
69989: GO 70098
69991: LD_INT 31
69993: DOUBLE
69994: EQUAL
69995: IFTRUE 70041
69997: LD_INT 32
69999: DOUBLE
70000: EQUAL
70001: IFTRUE 70041
70003: LD_INT 33
70005: DOUBLE
70006: EQUAL
70007: IFTRUE 70041
70009: LD_INT 27
70011: DOUBLE
70012: EQUAL
70013: IFTRUE 70041
70015: LD_INT 26
70017: DOUBLE
70018: EQUAL
70019: IFTRUE 70041
70021: LD_INT 28
70023: DOUBLE
70024: EQUAL
70025: IFTRUE 70041
70027: LD_INT 29
70029: DOUBLE
70030: EQUAL
70031: IFTRUE 70041
70033: LD_INT 30
70035: DOUBLE
70036: EQUAL
70037: IFTRUE 70041
70039: GO 70097
70041: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70042: LD_ADDR_VAR 0 9
70046: PUSH
70047: LD_VAR 0 59
70051: PUSH
70052: LD_VAR 0 60
70056: PUSH
70057: LD_VAR 0 61
70061: PUSH
70062: LD_VAR 0 62
70066: PUSH
70067: LD_VAR 0 63
70071: PUSH
70072: LD_VAR 0 64
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: PUSH
70085: LD_VAR 0 4
70089: PUSH
70090: LD_INT 1
70092: PLUS
70093: ARRAY
70094: ST_TO_ADDR
70095: GO 70098
70097: POP
// temp_list2 = [ ] ;
70098: LD_ADDR_VAR 0 10
70102: PUSH
70103: EMPTY
70104: ST_TO_ADDR
// for i in temp_list do
70105: LD_ADDR_VAR 0 8
70109: PUSH
70110: LD_VAR 0 9
70114: PUSH
70115: FOR_IN
70116: IFFALSE 70168
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70118: LD_ADDR_VAR 0 10
70122: PUSH
70123: LD_VAR 0 10
70127: PUSH
70128: LD_VAR 0 8
70132: PUSH
70133: LD_INT 1
70135: ARRAY
70136: PUSH
70137: LD_VAR 0 2
70141: PLUS
70142: PUSH
70143: LD_VAR 0 8
70147: PUSH
70148: LD_INT 2
70150: ARRAY
70151: PUSH
70152: LD_VAR 0 3
70156: PLUS
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: EMPTY
70163: LIST
70164: ADD
70165: ST_TO_ADDR
70166: GO 70115
70168: POP
70169: POP
// result = temp_list2 ;
70170: LD_ADDR_VAR 0 7
70174: PUSH
70175: LD_VAR 0 10
70179: ST_TO_ADDR
// end ;
70180: LD_VAR 0 7
70184: RET
// export function EnemyInRange ( unit , dist ) ; begin
70185: LD_INT 0
70187: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70188: LD_ADDR_VAR 0 3
70192: PUSH
70193: LD_VAR 0 1
70197: PPUSH
70198: CALL_OW 255
70202: PPUSH
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL_OW 250
70212: PPUSH
70213: LD_VAR 0 1
70217: PPUSH
70218: CALL_OW 251
70222: PPUSH
70223: LD_VAR 0 2
70227: PPUSH
70228: CALL 43581 0 4
70232: PUSH
70233: LD_INT 4
70235: ARRAY
70236: ST_TO_ADDR
// end ;
70237: LD_VAR 0 3
70241: RET
// export function PlayerSeeMe ( unit ) ; begin
70242: LD_INT 0
70244: PPUSH
// result := See ( your_side , unit ) ;
70245: LD_ADDR_VAR 0 2
70249: PUSH
70250: LD_OWVAR 2
70254: PPUSH
70255: LD_VAR 0 1
70259: PPUSH
70260: CALL_OW 292
70264: ST_TO_ADDR
// end ;
70265: LD_VAR 0 2
70269: RET
// export function ReverseDir ( unit ) ; begin
70270: LD_INT 0
70272: PPUSH
// if not unit then
70273: LD_VAR 0 1
70277: NOT
70278: IFFALSE 70282
// exit ;
70280: GO 70305
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70282: LD_ADDR_VAR 0 2
70286: PUSH
70287: LD_VAR 0 1
70291: PPUSH
70292: CALL_OW 254
70296: PUSH
70297: LD_INT 3
70299: PLUS
70300: PUSH
70301: LD_INT 6
70303: MOD
70304: ST_TO_ADDR
// end ;
70305: LD_VAR 0 2
70309: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70310: LD_INT 0
70312: PPUSH
70313: PPUSH
70314: PPUSH
70315: PPUSH
70316: PPUSH
// if not hexes then
70317: LD_VAR 0 2
70321: NOT
70322: IFFALSE 70326
// exit ;
70324: GO 70474
// dist := 9999 ;
70326: LD_ADDR_VAR 0 5
70330: PUSH
70331: LD_INT 9999
70333: ST_TO_ADDR
// for i = 1 to hexes do
70334: LD_ADDR_VAR 0 4
70338: PUSH
70339: DOUBLE
70340: LD_INT 1
70342: DEC
70343: ST_TO_ADDR
70344: LD_VAR 0 2
70348: PUSH
70349: FOR_TO
70350: IFFALSE 70462
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70352: LD_VAR 0 1
70356: PPUSH
70357: LD_VAR 0 2
70361: PUSH
70362: LD_VAR 0 4
70366: ARRAY
70367: PUSH
70368: LD_INT 1
70370: ARRAY
70371: PPUSH
70372: LD_VAR 0 2
70376: PUSH
70377: LD_VAR 0 4
70381: ARRAY
70382: PUSH
70383: LD_INT 2
70385: ARRAY
70386: PPUSH
70387: CALL_OW 297
70391: PUSH
70392: LD_VAR 0 5
70396: LESS
70397: IFFALSE 70460
// begin hex := hexes [ i ] ;
70399: LD_ADDR_VAR 0 7
70403: PUSH
70404: LD_VAR 0 2
70408: PUSH
70409: LD_VAR 0 4
70413: ARRAY
70414: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70415: LD_ADDR_VAR 0 5
70419: PUSH
70420: LD_VAR 0 1
70424: PPUSH
70425: LD_VAR 0 2
70429: PUSH
70430: LD_VAR 0 4
70434: ARRAY
70435: PUSH
70436: LD_INT 1
70438: ARRAY
70439: PPUSH
70440: LD_VAR 0 2
70444: PUSH
70445: LD_VAR 0 4
70449: ARRAY
70450: PUSH
70451: LD_INT 2
70453: ARRAY
70454: PPUSH
70455: CALL_OW 297
70459: ST_TO_ADDR
// end ; end ;
70460: GO 70349
70462: POP
70463: POP
// result := hex ;
70464: LD_ADDR_VAR 0 3
70468: PUSH
70469: LD_VAR 0 7
70473: ST_TO_ADDR
// end ;
70474: LD_VAR 0 3
70478: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70479: LD_INT 0
70481: PPUSH
70482: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70483: LD_VAR 0 1
70487: NOT
70488: PUSH
70489: LD_VAR 0 1
70493: PUSH
70494: LD_INT 21
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 23
70506: PUSH
70507: LD_INT 2
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PPUSH
70518: CALL_OW 69
70522: IN
70523: NOT
70524: OR
70525: IFFALSE 70529
// exit ;
70527: GO 70576
// for i = 1 to 3 do
70529: LD_ADDR_VAR 0 3
70533: PUSH
70534: DOUBLE
70535: LD_INT 1
70537: DEC
70538: ST_TO_ADDR
70539: LD_INT 3
70541: PUSH
70542: FOR_TO
70543: IFFALSE 70574
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70545: LD_VAR 0 1
70549: PPUSH
70550: CALL_OW 250
70554: PPUSH
70555: LD_VAR 0 1
70559: PPUSH
70560: CALL_OW 251
70564: PPUSH
70565: LD_INT 1
70567: PPUSH
70568: CALL_OW 453
70572: GO 70542
70574: POP
70575: POP
// end ;
70576: LD_VAR 0 2
70580: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70581: LD_INT 0
70583: PPUSH
70584: PPUSH
70585: PPUSH
70586: PPUSH
70587: PPUSH
70588: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70589: LD_VAR 0 1
70593: NOT
70594: PUSH
70595: LD_VAR 0 2
70599: NOT
70600: OR
70601: PUSH
70602: LD_VAR 0 1
70606: PPUSH
70607: CALL_OW 314
70611: OR
70612: IFFALSE 70616
// exit ;
70614: GO 71057
// x := GetX ( enemy_unit ) ;
70616: LD_ADDR_VAR 0 7
70620: PUSH
70621: LD_VAR 0 2
70625: PPUSH
70626: CALL_OW 250
70630: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70631: LD_ADDR_VAR 0 8
70635: PUSH
70636: LD_VAR 0 2
70640: PPUSH
70641: CALL_OW 251
70645: ST_TO_ADDR
// if not x or not y then
70646: LD_VAR 0 7
70650: NOT
70651: PUSH
70652: LD_VAR 0 8
70656: NOT
70657: OR
70658: IFFALSE 70662
// exit ;
70660: GO 71057
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70662: LD_ADDR_VAR 0 6
70666: PUSH
70667: LD_VAR 0 7
70671: PPUSH
70672: LD_INT 0
70674: PPUSH
70675: LD_INT 4
70677: PPUSH
70678: CALL_OW 272
70682: PUSH
70683: LD_VAR 0 8
70687: PPUSH
70688: LD_INT 0
70690: PPUSH
70691: LD_INT 4
70693: PPUSH
70694: CALL_OW 273
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_VAR 0 7
70707: PPUSH
70708: LD_INT 1
70710: PPUSH
70711: LD_INT 4
70713: PPUSH
70714: CALL_OW 272
70718: PUSH
70719: LD_VAR 0 8
70723: PPUSH
70724: LD_INT 1
70726: PPUSH
70727: LD_INT 4
70729: PPUSH
70730: CALL_OW 273
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_VAR 0 7
70743: PPUSH
70744: LD_INT 2
70746: PPUSH
70747: LD_INT 4
70749: PPUSH
70750: CALL_OW 272
70754: PUSH
70755: LD_VAR 0 8
70759: PPUSH
70760: LD_INT 2
70762: PPUSH
70763: LD_INT 4
70765: PPUSH
70766: CALL_OW 273
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_VAR 0 7
70779: PPUSH
70780: LD_INT 3
70782: PPUSH
70783: LD_INT 4
70785: PPUSH
70786: CALL_OW 272
70790: PUSH
70791: LD_VAR 0 8
70795: PPUSH
70796: LD_INT 3
70798: PPUSH
70799: LD_INT 4
70801: PPUSH
70802: CALL_OW 273
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_VAR 0 7
70815: PPUSH
70816: LD_INT 4
70818: PPUSH
70819: LD_INT 4
70821: PPUSH
70822: CALL_OW 272
70826: PUSH
70827: LD_VAR 0 8
70831: PPUSH
70832: LD_INT 4
70834: PPUSH
70835: LD_INT 4
70837: PPUSH
70838: CALL_OW 273
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_VAR 0 7
70851: PPUSH
70852: LD_INT 5
70854: PPUSH
70855: LD_INT 4
70857: PPUSH
70858: CALL_OW 272
70862: PUSH
70863: LD_VAR 0 8
70867: PPUSH
70868: LD_INT 5
70870: PPUSH
70871: LD_INT 4
70873: PPUSH
70874: CALL_OW 273
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: ST_TO_ADDR
// for i = tmp downto 1 do
70891: LD_ADDR_VAR 0 4
70895: PUSH
70896: DOUBLE
70897: LD_VAR 0 6
70901: INC
70902: ST_TO_ADDR
70903: LD_INT 1
70905: PUSH
70906: FOR_DOWNTO
70907: IFFALSE 71008
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70909: LD_VAR 0 6
70913: PUSH
70914: LD_VAR 0 4
70918: ARRAY
70919: PUSH
70920: LD_INT 1
70922: ARRAY
70923: PPUSH
70924: LD_VAR 0 6
70928: PUSH
70929: LD_VAR 0 4
70933: ARRAY
70934: PUSH
70935: LD_INT 2
70937: ARRAY
70938: PPUSH
70939: CALL_OW 488
70943: NOT
70944: PUSH
70945: LD_VAR 0 6
70949: PUSH
70950: LD_VAR 0 4
70954: ARRAY
70955: PUSH
70956: LD_INT 1
70958: ARRAY
70959: PPUSH
70960: LD_VAR 0 6
70964: PUSH
70965: LD_VAR 0 4
70969: ARRAY
70970: PUSH
70971: LD_INT 2
70973: ARRAY
70974: PPUSH
70975: CALL_OW 428
70979: PUSH
70980: LD_INT 0
70982: NONEQUAL
70983: OR
70984: IFFALSE 71006
// tmp := Delete ( tmp , i ) ;
70986: LD_ADDR_VAR 0 6
70990: PUSH
70991: LD_VAR 0 6
70995: PPUSH
70996: LD_VAR 0 4
71000: PPUSH
71001: CALL_OW 3
71005: ST_TO_ADDR
71006: GO 70906
71008: POP
71009: POP
// j := GetClosestHex ( unit , tmp ) ;
71010: LD_ADDR_VAR 0 5
71014: PUSH
71015: LD_VAR 0 1
71019: PPUSH
71020: LD_VAR 0 6
71024: PPUSH
71025: CALL 70310 0 2
71029: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_VAR 0 5
71039: PUSH
71040: LD_INT 1
71042: ARRAY
71043: PPUSH
71044: LD_VAR 0 5
71048: PUSH
71049: LD_INT 2
71051: ARRAY
71052: PPUSH
71053: CALL_OW 111
// end ;
71057: LD_VAR 0 3
71061: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71062: LD_INT 0
71064: PPUSH
71065: PPUSH
71066: PPUSH
// uc_side = 0 ;
71067: LD_ADDR_OWVAR 20
71071: PUSH
71072: LD_INT 0
71074: ST_TO_ADDR
// uc_nation = 0 ;
71075: LD_ADDR_OWVAR 21
71079: PUSH
71080: LD_INT 0
71082: ST_TO_ADDR
// InitHc_All ( ) ;
71083: CALL_OW 584
// InitVc ;
71087: CALL_OW 20
// if mastodonts then
71091: LD_VAR 0 6
71095: IFFALSE 71162
// for i = 1 to mastodonts do
71097: LD_ADDR_VAR 0 11
71101: PUSH
71102: DOUBLE
71103: LD_INT 1
71105: DEC
71106: ST_TO_ADDR
71107: LD_VAR 0 6
71111: PUSH
71112: FOR_TO
71113: IFFALSE 71160
// begin vc_chassis := 31 ;
71115: LD_ADDR_OWVAR 37
71119: PUSH
71120: LD_INT 31
71122: ST_TO_ADDR
// vc_control := control_rider ;
71123: LD_ADDR_OWVAR 38
71127: PUSH
71128: LD_INT 4
71130: ST_TO_ADDR
// animal := CreateVehicle ;
71131: LD_ADDR_VAR 0 12
71135: PUSH
71136: CALL_OW 45
71140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71141: LD_VAR 0 12
71145: PPUSH
71146: LD_VAR 0 8
71150: PPUSH
71151: LD_INT 0
71153: PPUSH
71154: CALL 73350 0 3
// end ;
71158: GO 71112
71160: POP
71161: POP
// if horses then
71162: LD_VAR 0 5
71166: IFFALSE 71233
// for i = 1 to horses do
71168: LD_ADDR_VAR 0 11
71172: PUSH
71173: DOUBLE
71174: LD_INT 1
71176: DEC
71177: ST_TO_ADDR
71178: LD_VAR 0 5
71182: PUSH
71183: FOR_TO
71184: IFFALSE 71231
// begin hc_class := 21 ;
71186: LD_ADDR_OWVAR 28
71190: PUSH
71191: LD_INT 21
71193: ST_TO_ADDR
// hc_gallery :=  ;
71194: LD_ADDR_OWVAR 33
71198: PUSH
71199: LD_STRING 
71201: ST_TO_ADDR
// animal := CreateHuman ;
71202: LD_ADDR_VAR 0 12
71206: PUSH
71207: CALL_OW 44
71211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71212: LD_VAR 0 12
71216: PPUSH
71217: LD_VAR 0 8
71221: PPUSH
71222: LD_INT 0
71224: PPUSH
71225: CALL 73350 0 3
// end ;
71229: GO 71183
71231: POP
71232: POP
// if birds then
71233: LD_VAR 0 1
71237: IFFALSE 71304
// for i = 1 to birds do
71239: LD_ADDR_VAR 0 11
71243: PUSH
71244: DOUBLE
71245: LD_INT 1
71247: DEC
71248: ST_TO_ADDR
71249: LD_VAR 0 1
71253: PUSH
71254: FOR_TO
71255: IFFALSE 71302
// begin hc_class = 18 ;
71257: LD_ADDR_OWVAR 28
71261: PUSH
71262: LD_INT 18
71264: ST_TO_ADDR
// hc_gallery =  ;
71265: LD_ADDR_OWVAR 33
71269: PUSH
71270: LD_STRING 
71272: ST_TO_ADDR
// animal := CreateHuman ;
71273: LD_ADDR_VAR 0 12
71277: PUSH
71278: CALL_OW 44
71282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71283: LD_VAR 0 12
71287: PPUSH
71288: LD_VAR 0 8
71292: PPUSH
71293: LD_INT 0
71295: PPUSH
71296: CALL 73350 0 3
// end ;
71300: GO 71254
71302: POP
71303: POP
// if tigers then
71304: LD_VAR 0 2
71308: IFFALSE 71392
// for i = 1 to tigers do
71310: LD_ADDR_VAR 0 11
71314: PUSH
71315: DOUBLE
71316: LD_INT 1
71318: DEC
71319: ST_TO_ADDR
71320: LD_VAR 0 2
71324: PUSH
71325: FOR_TO
71326: IFFALSE 71390
// begin hc_class = class_tiger ;
71328: LD_ADDR_OWVAR 28
71332: PUSH
71333: LD_INT 14
71335: ST_TO_ADDR
// hc_gallery =  ;
71336: LD_ADDR_OWVAR 33
71340: PUSH
71341: LD_STRING 
71343: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71344: LD_ADDR_OWVAR 35
71348: PUSH
71349: LD_INT 7
71351: NEG
71352: PPUSH
71353: LD_INT 7
71355: PPUSH
71356: CALL_OW 12
71360: ST_TO_ADDR
// animal := CreateHuman ;
71361: LD_ADDR_VAR 0 12
71365: PUSH
71366: CALL_OW 44
71370: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71371: LD_VAR 0 12
71375: PPUSH
71376: LD_VAR 0 8
71380: PPUSH
71381: LD_INT 0
71383: PPUSH
71384: CALL 73350 0 3
// end ;
71388: GO 71325
71390: POP
71391: POP
// if apemans then
71392: LD_VAR 0 3
71396: IFFALSE 71519
// for i = 1 to apemans do
71398: LD_ADDR_VAR 0 11
71402: PUSH
71403: DOUBLE
71404: LD_INT 1
71406: DEC
71407: ST_TO_ADDR
71408: LD_VAR 0 3
71412: PUSH
71413: FOR_TO
71414: IFFALSE 71517
// begin hc_class = class_apeman ;
71416: LD_ADDR_OWVAR 28
71420: PUSH
71421: LD_INT 12
71423: ST_TO_ADDR
// hc_gallery =  ;
71424: LD_ADDR_OWVAR 33
71428: PUSH
71429: LD_STRING 
71431: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71432: LD_ADDR_OWVAR 35
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PPUSH
71441: LD_INT 2
71443: PPUSH
71444: CALL_OW 12
71448: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71449: LD_ADDR_OWVAR 31
71453: PUSH
71454: LD_INT 1
71456: PPUSH
71457: LD_INT 3
71459: PPUSH
71460: CALL_OW 12
71464: PUSH
71465: LD_INT 1
71467: PPUSH
71468: LD_INT 3
71470: PPUSH
71471: CALL_OW 12
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: ST_TO_ADDR
// animal := CreateHuman ;
71488: LD_ADDR_VAR 0 12
71492: PUSH
71493: CALL_OW 44
71497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71498: LD_VAR 0 12
71502: PPUSH
71503: LD_VAR 0 8
71507: PPUSH
71508: LD_INT 0
71510: PPUSH
71511: CALL 73350 0 3
// end ;
71515: GO 71413
71517: POP
71518: POP
// if enchidnas then
71519: LD_VAR 0 4
71523: IFFALSE 71590
// for i = 1 to enchidnas do
71525: LD_ADDR_VAR 0 11
71529: PUSH
71530: DOUBLE
71531: LD_INT 1
71533: DEC
71534: ST_TO_ADDR
71535: LD_VAR 0 4
71539: PUSH
71540: FOR_TO
71541: IFFALSE 71588
// begin hc_class = 13 ;
71543: LD_ADDR_OWVAR 28
71547: PUSH
71548: LD_INT 13
71550: ST_TO_ADDR
// hc_gallery =  ;
71551: LD_ADDR_OWVAR 33
71555: PUSH
71556: LD_STRING 
71558: ST_TO_ADDR
// animal := CreateHuman ;
71559: LD_ADDR_VAR 0 12
71563: PUSH
71564: CALL_OW 44
71568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71569: LD_VAR 0 12
71573: PPUSH
71574: LD_VAR 0 8
71578: PPUSH
71579: LD_INT 0
71581: PPUSH
71582: CALL 73350 0 3
// end ;
71586: GO 71540
71588: POP
71589: POP
// if fishes then
71590: LD_VAR 0 7
71594: IFFALSE 71661
// for i = 1 to fishes do
71596: LD_ADDR_VAR 0 11
71600: PUSH
71601: DOUBLE
71602: LD_INT 1
71604: DEC
71605: ST_TO_ADDR
71606: LD_VAR 0 7
71610: PUSH
71611: FOR_TO
71612: IFFALSE 71659
// begin hc_class = 20 ;
71614: LD_ADDR_OWVAR 28
71618: PUSH
71619: LD_INT 20
71621: ST_TO_ADDR
// hc_gallery =  ;
71622: LD_ADDR_OWVAR 33
71626: PUSH
71627: LD_STRING 
71629: ST_TO_ADDR
// animal := CreateHuman ;
71630: LD_ADDR_VAR 0 12
71634: PUSH
71635: CALL_OW 44
71639: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71640: LD_VAR 0 12
71644: PPUSH
71645: LD_VAR 0 9
71649: PPUSH
71650: LD_INT 0
71652: PPUSH
71653: CALL 73350 0 3
// end ;
71657: GO 71611
71659: POP
71660: POP
// end ;
71661: LD_VAR 0 10
71665: RET
// export function WantHeal ( sci , unit ) ; begin
71666: LD_INT 0
71668: PPUSH
// if GetTaskList ( sci ) > 0 then
71669: LD_VAR 0 1
71673: PPUSH
71674: CALL_OW 437
71678: PUSH
71679: LD_INT 0
71681: GREATER
71682: IFFALSE 71752
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71684: LD_VAR 0 1
71688: PPUSH
71689: CALL_OW 437
71693: PUSH
71694: LD_INT 1
71696: ARRAY
71697: PUSH
71698: LD_INT 1
71700: ARRAY
71701: PUSH
71702: LD_STRING l
71704: EQUAL
71705: PUSH
71706: LD_VAR 0 1
71710: PPUSH
71711: CALL_OW 437
71715: PUSH
71716: LD_INT 1
71718: ARRAY
71719: PUSH
71720: LD_INT 4
71722: ARRAY
71723: PUSH
71724: LD_VAR 0 2
71728: EQUAL
71729: AND
71730: IFFALSE 71742
// result := true else
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: LD_INT 1
71739: ST_TO_ADDR
71740: GO 71750
// result := false ;
71742: LD_ADDR_VAR 0 3
71746: PUSH
71747: LD_INT 0
71749: ST_TO_ADDR
// end else
71750: GO 71760
// result := false ;
71752: LD_ADDR_VAR 0 3
71756: PUSH
71757: LD_INT 0
71759: ST_TO_ADDR
// end ;
71760: LD_VAR 0 3
71764: RET
// export function HealTarget ( sci ) ; begin
71765: LD_INT 0
71767: PPUSH
// if not sci then
71768: LD_VAR 0 1
71772: NOT
71773: IFFALSE 71777
// exit ;
71775: GO 71842
// result := 0 ;
71777: LD_ADDR_VAR 0 2
71781: PUSH
71782: LD_INT 0
71784: ST_TO_ADDR
// if GetTaskList ( sci ) then
71785: LD_VAR 0 1
71789: PPUSH
71790: CALL_OW 437
71794: IFFALSE 71842
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71796: LD_VAR 0 1
71800: PPUSH
71801: CALL_OW 437
71805: PUSH
71806: LD_INT 1
71808: ARRAY
71809: PUSH
71810: LD_INT 1
71812: ARRAY
71813: PUSH
71814: LD_STRING l
71816: EQUAL
71817: IFFALSE 71842
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71819: LD_ADDR_VAR 0 2
71823: PUSH
71824: LD_VAR 0 1
71828: PPUSH
71829: CALL_OW 437
71833: PUSH
71834: LD_INT 1
71836: ARRAY
71837: PUSH
71838: LD_INT 4
71840: ARRAY
71841: ST_TO_ADDR
// end ;
71842: LD_VAR 0 2
71846: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71847: LD_INT 0
71849: PPUSH
71850: PPUSH
71851: PPUSH
71852: PPUSH
// if not base_units then
71853: LD_VAR 0 1
71857: NOT
71858: IFFALSE 71862
// exit ;
71860: GO 71949
// result := false ;
71862: LD_ADDR_VAR 0 2
71866: PUSH
71867: LD_INT 0
71869: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71870: LD_ADDR_VAR 0 5
71874: PUSH
71875: LD_VAR 0 1
71879: PPUSH
71880: LD_INT 21
71882: PUSH
71883: LD_INT 3
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PPUSH
71890: CALL_OW 72
71894: ST_TO_ADDR
// if not tmp then
71895: LD_VAR 0 5
71899: NOT
71900: IFFALSE 71904
// exit ;
71902: GO 71949
// for i in tmp do
71904: LD_ADDR_VAR 0 3
71908: PUSH
71909: LD_VAR 0 5
71913: PUSH
71914: FOR_IN
71915: IFFALSE 71947
// begin result := EnemyInRange ( i , 22 ) ;
71917: LD_ADDR_VAR 0 2
71921: PUSH
71922: LD_VAR 0 3
71926: PPUSH
71927: LD_INT 22
71929: PPUSH
71930: CALL 70185 0 2
71934: ST_TO_ADDR
// if result then
71935: LD_VAR 0 2
71939: IFFALSE 71945
// exit ;
71941: POP
71942: POP
71943: GO 71949
// end ;
71945: GO 71914
71947: POP
71948: POP
// end ;
71949: LD_VAR 0 2
71953: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71954: LD_INT 0
71956: PPUSH
71957: PPUSH
// if not units then
71958: LD_VAR 0 1
71962: NOT
71963: IFFALSE 71967
// exit ;
71965: GO 72037
// result := [ ] ;
71967: LD_ADDR_VAR 0 3
71971: PUSH
71972: EMPTY
71973: ST_TO_ADDR
// for i in units do
71974: LD_ADDR_VAR 0 4
71978: PUSH
71979: LD_VAR 0 1
71983: PUSH
71984: FOR_IN
71985: IFFALSE 72035
// if GetTag ( i ) = tag then
71987: LD_VAR 0 4
71991: PPUSH
71992: CALL_OW 110
71996: PUSH
71997: LD_VAR 0 2
72001: EQUAL
72002: IFFALSE 72033
// result := Replace ( result , result + 1 , i ) ;
72004: LD_ADDR_VAR 0 3
72008: PUSH
72009: LD_VAR 0 3
72013: PPUSH
72014: LD_VAR 0 3
72018: PUSH
72019: LD_INT 1
72021: PLUS
72022: PPUSH
72023: LD_VAR 0 4
72027: PPUSH
72028: CALL_OW 1
72032: ST_TO_ADDR
72033: GO 71984
72035: POP
72036: POP
// end ;
72037: LD_VAR 0 3
72041: RET
// export function IsDriver ( un ) ; begin
72042: LD_INT 0
72044: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72045: LD_ADDR_VAR 0 2
72049: PUSH
72050: LD_VAR 0 1
72054: PUSH
72055: LD_INT 55
72057: PUSH
72058: EMPTY
72059: LIST
72060: PPUSH
72061: CALL_OW 69
72065: IN
72066: ST_TO_ADDR
// end ;
72067: LD_VAR 0 2
72071: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72072: LD_INT 0
72074: PPUSH
72075: PPUSH
// list := [ ] ;
72076: LD_ADDR_VAR 0 5
72080: PUSH
72081: EMPTY
72082: ST_TO_ADDR
// case d of 0 :
72083: LD_VAR 0 3
72087: PUSH
72088: LD_INT 0
72090: DOUBLE
72091: EQUAL
72092: IFTRUE 72096
72094: GO 72229
72096: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72097: LD_ADDR_VAR 0 5
72101: PUSH
72102: LD_VAR 0 1
72106: PUSH
72107: LD_INT 4
72109: MINUS
72110: PUSH
72111: LD_VAR 0 2
72115: PUSH
72116: LD_INT 4
72118: MINUS
72119: PUSH
72120: LD_INT 2
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: LIST
72127: PUSH
72128: LD_VAR 0 1
72132: PUSH
72133: LD_INT 3
72135: MINUS
72136: PUSH
72137: LD_VAR 0 2
72141: PUSH
72142: LD_INT 1
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: LIST
72149: PUSH
72150: LD_VAR 0 1
72154: PUSH
72155: LD_INT 4
72157: PLUS
72158: PUSH
72159: LD_VAR 0 2
72163: PUSH
72164: LD_INT 4
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: LIST
72171: PUSH
72172: LD_VAR 0 1
72176: PUSH
72177: LD_INT 3
72179: PLUS
72180: PUSH
72181: LD_VAR 0 2
72185: PUSH
72186: LD_INT 3
72188: PLUS
72189: PUSH
72190: LD_INT 5
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: PUSH
72198: LD_VAR 0 1
72202: PUSH
72203: LD_VAR 0 2
72207: PUSH
72208: LD_INT 4
72210: PLUS
72211: PUSH
72212: LD_INT 0
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: LIST
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: ST_TO_ADDR
// end ; 1 :
72227: GO 72927
72229: LD_INT 1
72231: DOUBLE
72232: EQUAL
72233: IFTRUE 72237
72235: GO 72370
72237: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72238: LD_ADDR_VAR 0 5
72242: PUSH
72243: LD_VAR 0 1
72247: PUSH
72248: LD_VAR 0 2
72252: PUSH
72253: LD_INT 4
72255: MINUS
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: LIST
72264: PUSH
72265: LD_VAR 0 1
72269: PUSH
72270: LD_INT 3
72272: MINUS
72273: PUSH
72274: LD_VAR 0 2
72278: PUSH
72279: LD_INT 3
72281: MINUS
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: LIST
72290: PUSH
72291: LD_VAR 0 1
72295: PUSH
72296: LD_INT 4
72298: MINUS
72299: PUSH
72300: LD_VAR 0 2
72304: PUSH
72305: LD_INT 1
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: LIST
72312: PUSH
72313: LD_VAR 0 1
72317: PUSH
72318: LD_VAR 0 2
72322: PUSH
72323: LD_INT 3
72325: PLUS
72326: PUSH
72327: LD_INT 0
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: LIST
72334: PUSH
72335: LD_VAR 0 1
72339: PUSH
72340: LD_INT 4
72342: PLUS
72343: PUSH
72344: LD_VAR 0 2
72348: PUSH
72349: LD_INT 4
72351: PLUS
72352: PUSH
72353: LD_INT 5
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: LIST
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: ST_TO_ADDR
// end ; 2 :
72368: GO 72927
72370: LD_INT 2
72372: DOUBLE
72373: EQUAL
72374: IFTRUE 72378
72376: GO 72507
72378: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72379: LD_ADDR_VAR 0 5
72383: PUSH
72384: LD_VAR 0 1
72388: PUSH
72389: LD_VAR 0 2
72393: PUSH
72394: LD_INT 3
72396: MINUS
72397: PUSH
72398: LD_INT 3
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: LIST
72405: PUSH
72406: LD_VAR 0 1
72410: PUSH
72411: LD_INT 4
72413: PLUS
72414: PUSH
72415: LD_VAR 0 2
72419: PUSH
72420: LD_INT 4
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: LIST
72427: PUSH
72428: LD_VAR 0 1
72432: PUSH
72433: LD_VAR 0 2
72437: PUSH
72438: LD_INT 4
72440: PLUS
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: LIST
72449: PUSH
72450: LD_VAR 0 1
72454: PUSH
72455: LD_INT 3
72457: MINUS
72458: PUSH
72459: LD_VAR 0 2
72463: PUSH
72464: LD_INT 1
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: LIST
72471: PUSH
72472: LD_VAR 0 1
72476: PUSH
72477: LD_INT 4
72479: MINUS
72480: PUSH
72481: LD_VAR 0 2
72485: PUSH
72486: LD_INT 4
72488: MINUS
72489: PUSH
72490: LD_INT 2
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: LIST
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: ST_TO_ADDR
// end ; 3 :
72505: GO 72927
72507: LD_INT 3
72509: DOUBLE
72510: EQUAL
72511: IFTRUE 72515
72513: GO 72648
72515: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72516: LD_ADDR_VAR 0 5
72520: PUSH
72521: LD_VAR 0 1
72525: PUSH
72526: LD_INT 3
72528: PLUS
72529: PUSH
72530: LD_VAR 0 2
72534: PUSH
72535: LD_INT 4
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: LIST
72542: PUSH
72543: LD_VAR 0 1
72547: PUSH
72548: LD_INT 4
72550: PLUS
72551: PUSH
72552: LD_VAR 0 2
72556: PUSH
72557: LD_INT 4
72559: PLUS
72560: PUSH
72561: LD_INT 5
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: LIST
72568: PUSH
72569: LD_VAR 0 1
72573: PUSH
72574: LD_INT 4
72576: MINUS
72577: PUSH
72578: LD_VAR 0 2
72582: PUSH
72583: LD_INT 1
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: LIST
72590: PUSH
72591: LD_VAR 0 1
72595: PUSH
72596: LD_VAR 0 2
72600: PUSH
72601: LD_INT 4
72603: MINUS
72604: PUSH
72605: LD_INT 3
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: LIST
72612: PUSH
72613: LD_VAR 0 1
72617: PUSH
72618: LD_INT 3
72620: MINUS
72621: PUSH
72622: LD_VAR 0 2
72626: PUSH
72627: LD_INT 3
72629: MINUS
72630: PUSH
72631: LD_INT 2
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: LIST
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: ST_TO_ADDR
// end ; 4 :
72646: GO 72927
72648: LD_INT 4
72650: DOUBLE
72651: EQUAL
72652: IFTRUE 72656
72654: GO 72789
72656: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72657: LD_ADDR_VAR 0 5
72661: PUSH
72662: LD_VAR 0 1
72666: PUSH
72667: LD_VAR 0 2
72671: PUSH
72672: LD_INT 4
72674: PLUS
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: LIST
72683: PUSH
72684: LD_VAR 0 1
72688: PUSH
72689: LD_INT 3
72691: PLUS
72692: PUSH
72693: LD_VAR 0 2
72697: PUSH
72698: LD_INT 3
72700: PLUS
72701: PUSH
72702: LD_INT 5
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: PUSH
72710: LD_VAR 0 1
72714: PUSH
72715: LD_INT 4
72717: PLUS
72718: PUSH
72719: LD_VAR 0 2
72723: PUSH
72724: LD_INT 4
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: LIST
72731: PUSH
72732: LD_VAR 0 1
72736: PUSH
72737: LD_VAR 0 2
72741: PUSH
72742: LD_INT 3
72744: MINUS
72745: PUSH
72746: LD_INT 3
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: LIST
72753: PUSH
72754: LD_VAR 0 1
72758: PUSH
72759: LD_INT 4
72761: MINUS
72762: PUSH
72763: LD_VAR 0 2
72767: PUSH
72768: LD_INT 4
72770: MINUS
72771: PUSH
72772: LD_INT 2
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: LIST
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: ST_TO_ADDR
// end ; 5 :
72787: GO 72927
72789: LD_INT 5
72791: DOUBLE
72792: EQUAL
72793: IFTRUE 72797
72795: GO 72926
72797: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72798: LD_ADDR_VAR 0 5
72802: PUSH
72803: LD_VAR 0 1
72807: PUSH
72808: LD_INT 4
72810: MINUS
72811: PUSH
72812: LD_VAR 0 2
72816: PUSH
72817: LD_INT 1
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: LIST
72824: PUSH
72825: LD_VAR 0 1
72829: PUSH
72830: LD_VAR 0 2
72834: PUSH
72835: LD_INT 4
72837: MINUS
72838: PUSH
72839: LD_INT 3
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: LIST
72846: PUSH
72847: LD_VAR 0 1
72851: PUSH
72852: LD_INT 4
72854: PLUS
72855: PUSH
72856: LD_VAR 0 2
72860: PUSH
72861: LD_INT 4
72863: PLUS
72864: PUSH
72865: LD_INT 5
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: LIST
72872: PUSH
72873: LD_VAR 0 1
72877: PUSH
72878: LD_INT 3
72880: PLUS
72881: PUSH
72882: LD_VAR 0 2
72886: PUSH
72887: LD_INT 4
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: LIST
72894: PUSH
72895: LD_VAR 0 1
72899: PUSH
72900: LD_VAR 0 2
72904: PUSH
72905: LD_INT 3
72907: PLUS
72908: PUSH
72909: LD_INT 0
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: LIST
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: ST_TO_ADDR
// end ; end ;
72924: GO 72927
72926: POP
// result := list ;
72927: LD_ADDR_VAR 0 4
72931: PUSH
72932: LD_VAR 0 5
72936: ST_TO_ADDR
// end ;
72937: LD_VAR 0 4
72941: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72942: LD_INT 0
72944: PPUSH
72945: PPUSH
72946: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72947: LD_VAR 0 1
72951: NOT
72952: PUSH
72953: LD_VAR 0 2
72957: PUSH
72958: LD_INT 1
72960: PUSH
72961: LD_INT 2
72963: PUSH
72964: LD_INT 3
72966: PUSH
72967: LD_INT 4
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: IN
72976: NOT
72977: OR
72978: IFFALSE 72982
// exit ;
72980: GO 73074
// tmp := [ ] ;
72982: LD_ADDR_VAR 0 5
72986: PUSH
72987: EMPTY
72988: ST_TO_ADDR
// for i in units do
72989: LD_ADDR_VAR 0 4
72993: PUSH
72994: LD_VAR 0 1
72998: PUSH
72999: FOR_IN
73000: IFFALSE 73043
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73002: LD_ADDR_VAR 0 5
73006: PUSH
73007: LD_VAR 0 5
73011: PPUSH
73012: LD_VAR 0 5
73016: PUSH
73017: LD_INT 1
73019: PLUS
73020: PPUSH
73021: LD_VAR 0 4
73025: PPUSH
73026: LD_VAR 0 2
73030: PPUSH
73031: CALL_OW 259
73035: PPUSH
73036: CALL_OW 2
73040: ST_TO_ADDR
73041: GO 72999
73043: POP
73044: POP
// if not tmp then
73045: LD_VAR 0 5
73049: NOT
73050: IFFALSE 73054
// exit ;
73052: GO 73074
// result := SortListByListDesc ( units , tmp ) ;
73054: LD_ADDR_VAR 0 3
73058: PUSH
73059: LD_VAR 0 1
73063: PPUSH
73064: LD_VAR 0 5
73068: PPUSH
73069: CALL_OW 77
73073: ST_TO_ADDR
// end ;
73074: LD_VAR 0 3
73078: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73079: LD_INT 0
73081: PPUSH
73082: PPUSH
73083: PPUSH
// result := false ;
73084: LD_ADDR_VAR 0 3
73088: PUSH
73089: LD_INT 0
73091: ST_TO_ADDR
// x := GetX ( building ) ;
73092: LD_ADDR_VAR 0 4
73096: PUSH
73097: LD_VAR 0 2
73101: PPUSH
73102: CALL_OW 250
73106: ST_TO_ADDR
// y := GetY ( building ) ;
73107: LD_ADDR_VAR 0 5
73111: PUSH
73112: LD_VAR 0 2
73116: PPUSH
73117: CALL_OW 251
73121: ST_TO_ADDR
// if not building or not x or not y then
73122: LD_VAR 0 2
73126: NOT
73127: PUSH
73128: LD_VAR 0 4
73132: NOT
73133: OR
73134: PUSH
73135: LD_VAR 0 5
73139: NOT
73140: OR
73141: IFFALSE 73145
// exit ;
73143: GO 73237
// if GetTaskList ( unit ) then
73145: LD_VAR 0 1
73149: PPUSH
73150: CALL_OW 437
73154: IFFALSE 73237
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73156: LD_STRING e
73158: PUSH
73159: LD_VAR 0 1
73163: PPUSH
73164: CALL_OW 437
73168: PUSH
73169: LD_INT 1
73171: ARRAY
73172: PUSH
73173: LD_INT 1
73175: ARRAY
73176: EQUAL
73177: PUSH
73178: LD_VAR 0 4
73182: PUSH
73183: LD_VAR 0 1
73187: PPUSH
73188: CALL_OW 437
73192: PUSH
73193: LD_INT 1
73195: ARRAY
73196: PUSH
73197: LD_INT 2
73199: ARRAY
73200: EQUAL
73201: AND
73202: PUSH
73203: LD_VAR 0 5
73207: PUSH
73208: LD_VAR 0 1
73212: PPUSH
73213: CALL_OW 437
73217: PUSH
73218: LD_INT 1
73220: ARRAY
73221: PUSH
73222: LD_INT 3
73224: ARRAY
73225: EQUAL
73226: AND
73227: IFFALSE 73237
// result := true end ;
73229: LD_ADDR_VAR 0 3
73233: PUSH
73234: LD_INT 1
73236: ST_TO_ADDR
// end ;
73237: LD_VAR 0 3
73241: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73242: LD_INT 0
73244: PPUSH
// result := false ;
73245: LD_ADDR_VAR 0 4
73249: PUSH
73250: LD_INT 0
73252: ST_TO_ADDR
// if GetTaskList ( unit ) then
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 437
73262: IFFALSE 73345
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73264: LD_STRING M
73266: PUSH
73267: LD_VAR 0 1
73271: PPUSH
73272: CALL_OW 437
73276: PUSH
73277: LD_INT 1
73279: ARRAY
73280: PUSH
73281: LD_INT 1
73283: ARRAY
73284: EQUAL
73285: PUSH
73286: LD_VAR 0 2
73290: PUSH
73291: LD_VAR 0 1
73295: PPUSH
73296: CALL_OW 437
73300: PUSH
73301: LD_INT 1
73303: ARRAY
73304: PUSH
73305: LD_INT 2
73307: ARRAY
73308: EQUAL
73309: AND
73310: PUSH
73311: LD_VAR 0 3
73315: PUSH
73316: LD_VAR 0 1
73320: PPUSH
73321: CALL_OW 437
73325: PUSH
73326: LD_INT 1
73328: ARRAY
73329: PUSH
73330: LD_INT 3
73332: ARRAY
73333: EQUAL
73334: AND
73335: IFFALSE 73345
// result := true ;
73337: LD_ADDR_VAR 0 4
73341: PUSH
73342: LD_INT 1
73344: ST_TO_ADDR
// end ; end ;
73345: LD_VAR 0 4
73349: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73350: LD_INT 0
73352: PPUSH
73353: PPUSH
73354: PPUSH
73355: PPUSH
// if not unit or not area then
73356: LD_VAR 0 1
73360: NOT
73361: PUSH
73362: LD_VAR 0 2
73366: NOT
73367: OR
73368: IFFALSE 73372
// exit ;
73370: GO 73536
// tmp := AreaToList ( area , i ) ;
73372: LD_ADDR_VAR 0 6
73376: PUSH
73377: LD_VAR 0 2
73381: PPUSH
73382: LD_VAR 0 5
73386: PPUSH
73387: CALL_OW 517
73391: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73392: LD_ADDR_VAR 0 5
73396: PUSH
73397: DOUBLE
73398: LD_INT 1
73400: DEC
73401: ST_TO_ADDR
73402: LD_VAR 0 6
73406: PUSH
73407: LD_INT 1
73409: ARRAY
73410: PUSH
73411: FOR_TO
73412: IFFALSE 73534
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73414: LD_ADDR_VAR 0 7
73418: PUSH
73419: LD_VAR 0 6
73423: PUSH
73424: LD_INT 1
73426: ARRAY
73427: PUSH
73428: LD_VAR 0 5
73432: ARRAY
73433: PUSH
73434: LD_VAR 0 6
73438: PUSH
73439: LD_INT 2
73441: ARRAY
73442: PUSH
73443: LD_VAR 0 5
73447: ARRAY
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73453: LD_VAR 0 7
73457: PUSH
73458: LD_INT 1
73460: ARRAY
73461: PPUSH
73462: LD_VAR 0 7
73466: PUSH
73467: LD_INT 2
73469: ARRAY
73470: PPUSH
73471: CALL_OW 428
73475: PUSH
73476: LD_INT 0
73478: EQUAL
73479: IFFALSE 73532
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73481: LD_VAR 0 1
73485: PPUSH
73486: LD_VAR 0 7
73490: PUSH
73491: LD_INT 1
73493: ARRAY
73494: PPUSH
73495: LD_VAR 0 7
73499: PUSH
73500: LD_INT 2
73502: ARRAY
73503: PPUSH
73504: LD_VAR 0 3
73508: PPUSH
73509: CALL_OW 48
// result := IsPlaced ( unit ) ;
73513: LD_ADDR_VAR 0 4
73517: PUSH
73518: LD_VAR 0 1
73522: PPUSH
73523: CALL_OW 305
73527: ST_TO_ADDR
// exit ;
73528: POP
73529: POP
73530: GO 73536
// end ; end ;
73532: GO 73411
73534: POP
73535: POP
// end ;
73536: LD_VAR 0 4
73540: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73541: LD_INT 0
73543: PPUSH
73544: PPUSH
73545: PPUSH
// if not side or side > 8 then
73546: LD_VAR 0 1
73550: NOT
73551: PUSH
73552: LD_VAR 0 1
73556: PUSH
73557: LD_INT 8
73559: GREATER
73560: OR
73561: IFFALSE 73565
// exit ;
73563: GO 73752
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73565: LD_ADDR_VAR 0 4
73569: PUSH
73570: LD_INT 22
73572: PUSH
73573: LD_VAR 0 1
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: LD_INT 21
73584: PUSH
73585: LD_INT 3
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PPUSH
73596: CALL_OW 69
73600: ST_TO_ADDR
// if not tmp then
73601: LD_VAR 0 4
73605: NOT
73606: IFFALSE 73610
// exit ;
73608: GO 73752
// enable_addtolog := true ;
73610: LD_ADDR_OWVAR 81
73614: PUSH
73615: LD_INT 1
73617: ST_TO_ADDR
// AddToLog ( [ ) ;
73618: LD_STRING [
73620: PPUSH
73621: CALL_OW 561
// for i in tmp do
73625: LD_ADDR_VAR 0 3
73629: PUSH
73630: LD_VAR 0 4
73634: PUSH
73635: FOR_IN
73636: IFFALSE 73743
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73638: LD_STRING [
73640: PUSH
73641: LD_VAR 0 3
73645: PPUSH
73646: CALL_OW 266
73650: STR
73651: PUSH
73652: LD_STRING , 
73654: STR
73655: PUSH
73656: LD_VAR 0 3
73660: PPUSH
73661: CALL_OW 250
73665: STR
73666: PUSH
73667: LD_STRING , 
73669: STR
73670: PUSH
73671: LD_VAR 0 3
73675: PPUSH
73676: CALL_OW 251
73680: STR
73681: PUSH
73682: LD_STRING , 
73684: STR
73685: PUSH
73686: LD_VAR 0 3
73690: PPUSH
73691: CALL_OW 254
73695: STR
73696: PUSH
73697: LD_STRING , 
73699: STR
73700: PUSH
73701: LD_VAR 0 3
73705: PPUSH
73706: LD_INT 1
73708: PPUSH
73709: CALL_OW 268
73713: STR
73714: PUSH
73715: LD_STRING , 
73717: STR
73718: PUSH
73719: LD_VAR 0 3
73723: PPUSH
73724: LD_INT 2
73726: PPUSH
73727: CALL_OW 268
73731: STR
73732: PUSH
73733: LD_STRING ],
73735: STR
73736: PPUSH
73737: CALL_OW 561
// end ;
73741: GO 73635
73743: POP
73744: POP
// AddToLog ( ]; ) ;
73745: LD_STRING ];
73747: PPUSH
73748: CALL_OW 561
// end ;
73752: LD_VAR 0 2
73756: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73757: LD_INT 0
73759: PPUSH
73760: PPUSH
73761: PPUSH
73762: PPUSH
73763: PPUSH
// if not area or not rate or not max then
73764: LD_VAR 0 1
73768: NOT
73769: PUSH
73770: LD_VAR 0 2
73774: NOT
73775: OR
73776: PUSH
73777: LD_VAR 0 4
73781: NOT
73782: OR
73783: IFFALSE 73787
// exit ;
73785: GO 73979
// while 1 do
73787: LD_INT 1
73789: IFFALSE 73979
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73791: LD_ADDR_VAR 0 9
73795: PUSH
73796: LD_VAR 0 1
73800: PPUSH
73801: LD_INT 1
73803: PPUSH
73804: CALL_OW 287
73808: PUSH
73809: LD_INT 10
73811: MUL
73812: ST_TO_ADDR
// r := rate / 10 ;
73813: LD_ADDR_VAR 0 7
73817: PUSH
73818: LD_VAR 0 2
73822: PUSH
73823: LD_INT 10
73825: DIVREAL
73826: ST_TO_ADDR
// time := 1 1$00 ;
73827: LD_ADDR_VAR 0 8
73831: PUSH
73832: LD_INT 2100
73834: ST_TO_ADDR
// if amount < min then
73835: LD_VAR 0 9
73839: PUSH
73840: LD_VAR 0 3
73844: LESS
73845: IFFALSE 73863
// r := r * 2 else
73847: LD_ADDR_VAR 0 7
73851: PUSH
73852: LD_VAR 0 7
73856: PUSH
73857: LD_INT 2
73859: MUL
73860: ST_TO_ADDR
73861: GO 73889
// if amount > max then
73863: LD_VAR 0 9
73867: PUSH
73868: LD_VAR 0 4
73872: GREATER
73873: IFFALSE 73889
// r := r / 2 ;
73875: LD_ADDR_VAR 0 7
73879: PUSH
73880: LD_VAR 0 7
73884: PUSH
73885: LD_INT 2
73887: DIVREAL
73888: ST_TO_ADDR
// time := time / r ;
73889: LD_ADDR_VAR 0 8
73893: PUSH
73894: LD_VAR 0 8
73898: PUSH
73899: LD_VAR 0 7
73903: DIVREAL
73904: ST_TO_ADDR
// if time < 0 then
73905: LD_VAR 0 8
73909: PUSH
73910: LD_INT 0
73912: LESS
73913: IFFALSE 73930
// time := time * - 1 ;
73915: LD_ADDR_VAR 0 8
73919: PUSH
73920: LD_VAR 0 8
73924: PUSH
73925: LD_INT 1
73927: NEG
73928: MUL
73929: ST_TO_ADDR
// wait ( time ) ;
73930: LD_VAR 0 8
73934: PPUSH
73935: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73939: LD_INT 35
73941: PPUSH
73942: LD_INT 875
73944: PPUSH
73945: CALL_OW 12
73949: PPUSH
73950: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73954: LD_INT 1
73956: PPUSH
73957: LD_INT 5
73959: PPUSH
73960: CALL_OW 12
73964: PPUSH
73965: LD_VAR 0 1
73969: PPUSH
73970: LD_INT 1
73972: PPUSH
73973: CALL_OW 55
// end ;
73977: GO 73787
// end ;
73979: LD_VAR 0 5
73983: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73984: LD_INT 0
73986: PPUSH
73987: PPUSH
73988: PPUSH
73989: PPUSH
73990: PPUSH
73991: PPUSH
73992: PPUSH
73993: PPUSH
// if not turrets or not factories then
73994: LD_VAR 0 1
73998: NOT
73999: PUSH
74000: LD_VAR 0 2
74004: NOT
74005: OR
74006: IFFALSE 74010
// exit ;
74008: GO 74317
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74010: LD_ADDR_VAR 0 10
74014: PUSH
74015: LD_INT 5
74017: PUSH
74018: LD_INT 6
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 2
74027: PUSH
74028: LD_INT 4
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 3
74037: PUSH
74038: LD_INT 5
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 24
74052: PUSH
74053: LD_INT 25
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 23
74062: PUSH
74063: LD_INT 27
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 42
74076: PUSH
74077: LD_INT 43
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 44
74086: PUSH
74087: LD_INT 46
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 45
74096: PUSH
74097: LD_INT 47
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: LIST
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: LIST
74113: ST_TO_ADDR
// result := [ ] ;
74114: LD_ADDR_VAR 0 3
74118: PUSH
74119: EMPTY
74120: ST_TO_ADDR
// for i in turrets do
74121: LD_ADDR_VAR 0 4
74125: PUSH
74126: LD_VAR 0 1
74130: PUSH
74131: FOR_IN
74132: IFFALSE 74315
// begin nat := GetNation ( i ) ;
74134: LD_ADDR_VAR 0 7
74138: PUSH
74139: LD_VAR 0 4
74143: PPUSH
74144: CALL_OW 248
74148: ST_TO_ADDR
// weapon := 0 ;
74149: LD_ADDR_VAR 0 8
74153: PUSH
74154: LD_INT 0
74156: ST_TO_ADDR
// if not nat then
74157: LD_VAR 0 7
74161: NOT
74162: IFFALSE 74166
// continue ;
74164: GO 74131
// for j in list [ nat ] do
74166: LD_ADDR_VAR 0 5
74170: PUSH
74171: LD_VAR 0 10
74175: PUSH
74176: LD_VAR 0 7
74180: ARRAY
74181: PUSH
74182: FOR_IN
74183: IFFALSE 74224
// if GetBWeapon ( i ) = j [ 1 ] then
74185: LD_VAR 0 4
74189: PPUSH
74190: CALL_OW 269
74194: PUSH
74195: LD_VAR 0 5
74199: PUSH
74200: LD_INT 1
74202: ARRAY
74203: EQUAL
74204: IFFALSE 74222
// begin weapon := j [ 2 ] ;
74206: LD_ADDR_VAR 0 8
74210: PUSH
74211: LD_VAR 0 5
74215: PUSH
74216: LD_INT 2
74218: ARRAY
74219: ST_TO_ADDR
// break ;
74220: GO 74224
// end ;
74222: GO 74182
74224: POP
74225: POP
// if not weapon then
74226: LD_VAR 0 8
74230: NOT
74231: IFFALSE 74235
// continue ;
74233: GO 74131
// for k in factories do
74235: LD_ADDR_VAR 0 6
74239: PUSH
74240: LD_VAR 0 2
74244: PUSH
74245: FOR_IN
74246: IFFALSE 74311
// begin weapons := AvailableWeaponList ( k ) ;
74248: LD_ADDR_VAR 0 9
74252: PUSH
74253: LD_VAR 0 6
74257: PPUSH
74258: CALL_OW 478
74262: ST_TO_ADDR
// if not weapons then
74263: LD_VAR 0 9
74267: NOT
74268: IFFALSE 74272
// continue ;
74270: GO 74245
// if weapon in weapons then
74272: LD_VAR 0 8
74276: PUSH
74277: LD_VAR 0 9
74281: IN
74282: IFFALSE 74309
// begin result := [ i , weapon ] ;
74284: LD_ADDR_VAR 0 3
74288: PUSH
74289: LD_VAR 0 4
74293: PUSH
74294: LD_VAR 0 8
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: ST_TO_ADDR
// exit ;
74303: POP
74304: POP
74305: POP
74306: POP
74307: GO 74317
// end ; end ;
74309: GO 74245
74311: POP
74312: POP
// end ;
74313: GO 74131
74315: POP
74316: POP
// end ;
74317: LD_VAR 0 3
74321: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74322: LD_INT 0
74324: PPUSH
// if not side or side > 8 then
74325: LD_VAR 0 3
74329: NOT
74330: PUSH
74331: LD_VAR 0 3
74335: PUSH
74336: LD_INT 8
74338: GREATER
74339: OR
74340: IFFALSE 74344
// exit ;
74342: GO 74403
// if not range then
74344: LD_VAR 0 4
74348: NOT
74349: IFFALSE 74360
// range := - 12 ;
74351: LD_ADDR_VAR 0 4
74355: PUSH
74356: LD_INT 12
74358: NEG
74359: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74360: LD_VAR 0 1
74364: PPUSH
74365: LD_VAR 0 2
74369: PPUSH
74370: LD_VAR 0 3
74374: PPUSH
74375: LD_VAR 0 4
74379: PPUSH
74380: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74384: LD_VAR 0 1
74388: PPUSH
74389: LD_VAR 0 2
74393: PPUSH
74394: LD_VAR 0 3
74398: PPUSH
74399: CALL_OW 331
// end ;
74403: LD_VAR 0 5
74407: RET
// export function Video ( mode ) ; begin
74408: LD_INT 0
74410: PPUSH
// ingame_video = mode ;
74411: LD_ADDR_OWVAR 52
74415: PUSH
74416: LD_VAR 0 1
74420: ST_TO_ADDR
// interface_hidden = mode ;
74421: LD_ADDR_OWVAR 54
74425: PUSH
74426: LD_VAR 0 1
74430: ST_TO_ADDR
// end ;
74431: LD_VAR 0 2
74435: RET
// export function Join ( array , element ) ; begin
74436: LD_INT 0
74438: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74439: LD_ADDR_VAR 0 3
74443: PUSH
74444: LD_VAR 0 1
74448: PPUSH
74449: LD_VAR 0 1
74453: PUSH
74454: LD_INT 1
74456: PLUS
74457: PPUSH
74458: LD_VAR 0 2
74462: PPUSH
74463: CALL_OW 1
74467: ST_TO_ADDR
// end ;
74468: LD_VAR 0 3
74472: RET
// export function JoinUnion ( array , element ) ; begin
74473: LD_INT 0
74475: PPUSH
// result := array union element ;
74476: LD_ADDR_VAR 0 3
74480: PUSH
74481: LD_VAR 0 1
74485: PUSH
74486: LD_VAR 0 2
74490: UNION
74491: ST_TO_ADDR
// end ;
74492: LD_VAR 0 3
74496: RET
// export function GetBehemoths ( side ) ; begin
74497: LD_INT 0
74499: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74500: LD_ADDR_VAR 0 2
74504: PUSH
74505: LD_INT 22
74507: PUSH
74508: LD_VAR 0 1
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 31
74519: PUSH
74520: LD_INT 25
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PPUSH
74531: CALL_OW 69
74535: ST_TO_ADDR
// end ;
74536: LD_VAR 0 2
74540: RET
// export function Shuffle ( array ) ; var i , index ; begin
74541: LD_INT 0
74543: PPUSH
74544: PPUSH
74545: PPUSH
// result := [ ] ;
74546: LD_ADDR_VAR 0 2
74550: PUSH
74551: EMPTY
74552: ST_TO_ADDR
// if not array then
74553: LD_VAR 0 1
74557: NOT
74558: IFFALSE 74562
// exit ;
74560: GO 74661
// Randomize ;
74562: CALL_OW 10
// for i = array downto 1 do
74566: LD_ADDR_VAR 0 3
74570: PUSH
74571: DOUBLE
74572: LD_VAR 0 1
74576: INC
74577: ST_TO_ADDR
74578: LD_INT 1
74580: PUSH
74581: FOR_DOWNTO
74582: IFFALSE 74659
// begin index := rand ( 1 , array ) ;
74584: LD_ADDR_VAR 0 4
74588: PUSH
74589: LD_INT 1
74591: PPUSH
74592: LD_VAR 0 1
74596: PPUSH
74597: CALL_OW 12
74601: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74602: LD_ADDR_VAR 0 2
74606: PUSH
74607: LD_VAR 0 2
74611: PPUSH
74612: LD_VAR 0 2
74616: PUSH
74617: LD_INT 1
74619: PLUS
74620: PPUSH
74621: LD_VAR 0 1
74625: PUSH
74626: LD_VAR 0 4
74630: ARRAY
74631: PPUSH
74632: CALL_OW 2
74636: ST_TO_ADDR
// array := Delete ( array , index ) ;
74637: LD_ADDR_VAR 0 1
74641: PUSH
74642: LD_VAR 0 1
74646: PPUSH
74647: LD_VAR 0 4
74651: PPUSH
74652: CALL_OW 3
74656: ST_TO_ADDR
// end ;
74657: GO 74581
74659: POP
74660: POP
// end ;
74661: LD_VAR 0 2
74665: RET
// export function GetBaseMaterials ( base ) ; begin
74666: LD_INT 0
74668: PPUSH
// result := [ 0 , 0 , 0 ] ;
74669: LD_ADDR_VAR 0 2
74673: PUSH
74674: LD_INT 0
74676: PUSH
74677: LD_INT 0
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: LIST
74687: ST_TO_ADDR
// if not base then
74688: LD_VAR 0 1
74692: NOT
74693: IFFALSE 74697
// exit ;
74695: GO 74746
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74697: LD_ADDR_VAR 0 2
74701: PUSH
74702: LD_VAR 0 1
74706: PPUSH
74707: LD_INT 1
74709: PPUSH
74710: CALL_OW 275
74714: PUSH
74715: LD_VAR 0 1
74719: PPUSH
74720: LD_INT 2
74722: PPUSH
74723: CALL_OW 275
74727: PUSH
74728: LD_VAR 0 1
74732: PPUSH
74733: LD_INT 3
74735: PPUSH
74736: CALL_OW 275
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: LIST
74745: ST_TO_ADDR
// end ;
74746: LD_VAR 0 2
74750: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74751: LD_INT 0
74753: PPUSH
74754: PPUSH
// result := array ;
74755: LD_ADDR_VAR 0 3
74759: PUSH
74760: LD_VAR 0 1
74764: ST_TO_ADDR
// if size > 0 then
74765: LD_VAR 0 2
74769: PUSH
74770: LD_INT 0
74772: GREATER
74773: IFFALSE 74819
// for i := array downto size do
74775: LD_ADDR_VAR 0 4
74779: PUSH
74780: DOUBLE
74781: LD_VAR 0 1
74785: INC
74786: ST_TO_ADDR
74787: LD_VAR 0 2
74791: PUSH
74792: FOR_DOWNTO
74793: IFFALSE 74817
// result := Delete ( result , result ) ;
74795: LD_ADDR_VAR 0 3
74799: PUSH
74800: LD_VAR 0 3
74804: PPUSH
74805: LD_VAR 0 3
74809: PPUSH
74810: CALL_OW 3
74814: ST_TO_ADDR
74815: GO 74792
74817: POP
74818: POP
// end ;
74819: LD_VAR 0 3
74823: RET
// export function ComExit ( unit ) ; var tmp ; begin
74824: LD_INT 0
74826: PPUSH
74827: PPUSH
// if not IsInUnit ( unit ) then
74828: LD_VAR 0 1
74832: PPUSH
74833: CALL_OW 310
74837: NOT
74838: IFFALSE 74842
// exit ;
74840: GO 74902
// tmp := IsInUnit ( unit ) ;
74842: LD_ADDR_VAR 0 3
74846: PUSH
74847: LD_VAR 0 1
74851: PPUSH
74852: CALL_OW 310
74856: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74857: LD_VAR 0 3
74861: PPUSH
74862: CALL_OW 247
74866: PUSH
74867: LD_INT 2
74869: EQUAL
74870: IFFALSE 74883
// ComExitVehicle ( unit ) else
74872: LD_VAR 0 1
74876: PPUSH
74877: CALL_OW 121
74881: GO 74892
// ComExitBuilding ( unit ) ;
74883: LD_VAR 0 1
74887: PPUSH
74888: CALL_OW 122
// result := tmp ;
74892: LD_ADDR_VAR 0 2
74896: PUSH
74897: LD_VAR 0 3
74901: ST_TO_ADDR
// end ;
74902: LD_VAR 0 2
74906: RET
// export function ComExitAll ( units ) ; var i ; begin
74907: LD_INT 0
74909: PPUSH
74910: PPUSH
// if not units then
74911: LD_VAR 0 1
74915: NOT
74916: IFFALSE 74920
// exit ;
74918: GO 74946
// for i in units do
74920: LD_ADDR_VAR 0 3
74924: PUSH
74925: LD_VAR 0 1
74929: PUSH
74930: FOR_IN
74931: IFFALSE 74944
// ComExit ( i ) ;
74933: LD_VAR 0 3
74937: PPUSH
74938: CALL 74824 0 1
74942: GO 74930
74944: POP
74945: POP
// end ;
74946: LD_VAR 0 2
74950: RET
// export function ResetHc ; begin
74951: LD_INT 0
74953: PPUSH
// InitHc ;
74954: CALL_OW 19
// hc_importance := 0 ;
74958: LD_ADDR_OWVAR 32
74962: PUSH
74963: LD_INT 0
74965: ST_TO_ADDR
// end ;
74966: LD_VAR 0 1
74970: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74971: LD_INT 0
74973: PPUSH
74974: PPUSH
74975: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74976: LD_ADDR_VAR 0 6
74980: PUSH
74981: LD_VAR 0 1
74985: PUSH
74986: LD_VAR 0 3
74990: PLUS
74991: PUSH
74992: LD_INT 2
74994: DIV
74995: ST_TO_ADDR
// if _x < 0 then
74996: LD_VAR 0 6
75000: PUSH
75001: LD_INT 0
75003: LESS
75004: IFFALSE 75021
// _x := _x * - 1 ;
75006: LD_ADDR_VAR 0 6
75010: PUSH
75011: LD_VAR 0 6
75015: PUSH
75016: LD_INT 1
75018: NEG
75019: MUL
75020: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75021: LD_ADDR_VAR 0 7
75025: PUSH
75026: LD_VAR 0 2
75030: PUSH
75031: LD_VAR 0 4
75035: PLUS
75036: PUSH
75037: LD_INT 2
75039: DIV
75040: ST_TO_ADDR
// if _y < 0 then
75041: LD_VAR 0 7
75045: PUSH
75046: LD_INT 0
75048: LESS
75049: IFFALSE 75066
// _y := _y * - 1 ;
75051: LD_ADDR_VAR 0 7
75055: PUSH
75056: LD_VAR 0 7
75060: PUSH
75061: LD_INT 1
75063: NEG
75064: MUL
75065: ST_TO_ADDR
// result := [ _x , _y ] ;
75066: LD_ADDR_VAR 0 5
75070: PUSH
75071: LD_VAR 0 6
75075: PUSH
75076: LD_VAR 0 7
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: ST_TO_ADDR
// end ;
75085: LD_VAR 0 5
75089: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75090: LD_INT 0
75092: PPUSH
75093: PPUSH
75094: PPUSH
75095: PPUSH
// task := GetTaskList ( unit ) ;
75096: LD_ADDR_VAR 0 7
75100: PUSH
75101: LD_VAR 0 1
75105: PPUSH
75106: CALL_OW 437
75110: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75111: LD_VAR 0 7
75115: NOT
75116: PUSH
75117: LD_VAR 0 1
75121: PPUSH
75122: LD_VAR 0 2
75126: PPUSH
75127: CALL_OW 308
75131: NOT
75132: AND
75133: IFFALSE 75137
// exit ;
75135: GO 75255
// if IsInArea ( unit , area ) then
75137: LD_VAR 0 1
75141: PPUSH
75142: LD_VAR 0 2
75146: PPUSH
75147: CALL_OW 308
75151: IFFALSE 75169
// begin ComMoveToArea ( unit , goAway ) ;
75153: LD_VAR 0 1
75157: PPUSH
75158: LD_VAR 0 3
75162: PPUSH
75163: CALL_OW 113
// exit ;
75167: GO 75255
// end ; if task [ 1 ] [ 1 ] <> M then
75169: LD_VAR 0 7
75173: PUSH
75174: LD_INT 1
75176: ARRAY
75177: PUSH
75178: LD_INT 1
75180: ARRAY
75181: PUSH
75182: LD_STRING M
75184: NONEQUAL
75185: IFFALSE 75189
// exit ;
75187: GO 75255
// x := task [ 1 ] [ 2 ] ;
75189: LD_ADDR_VAR 0 5
75193: PUSH
75194: LD_VAR 0 7
75198: PUSH
75199: LD_INT 1
75201: ARRAY
75202: PUSH
75203: LD_INT 2
75205: ARRAY
75206: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75207: LD_ADDR_VAR 0 6
75211: PUSH
75212: LD_VAR 0 7
75216: PUSH
75217: LD_INT 1
75219: ARRAY
75220: PUSH
75221: LD_INT 3
75223: ARRAY
75224: ST_TO_ADDR
// if InArea ( x , y , area ) then
75225: LD_VAR 0 5
75229: PPUSH
75230: LD_VAR 0 6
75234: PPUSH
75235: LD_VAR 0 2
75239: PPUSH
75240: CALL_OW 309
75244: IFFALSE 75255
// ComStop ( unit ) ;
75246: LD_VAR 0 1
75250: PPUSH
75251: CALL_OW 141
// end ;
75255: LD_VAR 0 4
75259: RET
// export function Abs ( value ) ; begin
75260: LD_INT 0
75262: PPUSH
// result := value ;
75263: LD_ADDR_VAR 0 2
75267: PUSH
75268: LD_VAR 0 1
75272: ST_TO_ADDR
// if value < 0 then
75273: LD_VAR 0 1
75277: PUSH
75278: LD_INT 0
75280: LESS
75281: IFFALSE 75298
// result := value * - 1 ;
75283: LD_ADDR_VAR 0 2
75287: PUSH
75288: LD_VAR 0 1
75292: PUSH
75293: LD_INT 1
75295: NEG
75296: MUL
75297: ST_TO_ADDR
// end ;
75298: LD_VAR 0 2
75302: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75303: LD_INT 0
75305: PPUSH
75306: PPUSH
75307: PPUSH
75308: PPUSH
75309: PPUSH
75310: PPUSH
75311: PPUSH
75312: PPUSH
// if not unit or not building then
75313: LD_VAR 0 1
75317: NOT
75318: PUSH
75319: LD_VAR 0 2
75323: NOT
75324: OR
75325: IFFALSE 75329
// exit ;
75327: GO 75555
// x := GetX ( building ) ;
75329: LD_ADDR_VAR 0 4
75333: PUSH
75334: LD_VAR 0 2
75338: PPUSH
75339: CALL_OW 250
75343: ST_TO_ADDR
// y := GetY ( building ) ;
75344: LD_ADDR_VAR 0 6
75348: PUSH
75349: LD_VAR 0 2
75353: PPUSH
75354: CALL_OW 251
75358: ST_TO_ADDR
// d := GetDir ( building ) ;
75359: LD_ADDR_VAR 0 8
75363: PUSH
75364: LD_VAR 0 2
75368: PPUSH
75369: CALL_OW 254
75373: ST_TO_ADDR
// r := 4 ;
75374: LD_ADDR_VAR 0 9
75378: PUSH
75379: LD_INT 4
75381: ST_TO_ADDR
// for i := 1 to 5 do
75382: LD_ADDR_VAR 0 10
75386: PUSH
75387: DOUBLE
75388: LD_INT 1
75390: DEC
75391: ST_TO_ADDR
75392: LD_INT 5
75394: PUSH
75395: FOR_TO
75396: IFFALSE 75553
// begin _x := ShiftX ( x , d , r + i ) ;
75398: LD_ADDR_VAR 0 5
75402: PUSH
75403: LD_VAR 0 4
75407: PPUSH
75408: LD_VAR 0 8
75412: PPUSH
75413: LD_VAR 0 9
75417: PUSH
75418: LD_VAR 0 10
75422: PLUS
75423: PPUSH
75424: CALL_OW 272
75428: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75429: LD_ADDR_VAR 0 7
75433: PUSH
75434: LD_VAR 0 6
75438: PPUSH
75439: LD_VAR 0 8
75443: PPUSH
75444: LD_VAR 0 9
75448: PUSH
75449: LD_VAR 0 10
75453: PLUS
75454: PPUSH
75455: CALL_OW 273
75459: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75460: LD_VAR 0 5
75464: PPUSH
75465: LD_VAR 0 7
75469: PPUSH
75470: CALL_OW 488
75474: PUSH
75475: LD_VAR 0 5
75479: PPUSH
75480: LD_VAR 0 7
75484: PPUSH
75485: CALL_OW 428
75489: PPUSH
75490: CALL_OW 247
75494: PUSH
75495: LD_INT 3
75497: PUSH
75498: LD_INT 2
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: IN
75505: NOT
75506: AND
75507: IFFALSE 75551
// begin ComMoveXY ( unit , _x , _y ) ;
75509: LD_VAR 0 1
75513: PPUSH
75514: LD_VAR 0 5
75518: PPUSH
75519: LD_VAR 0 7
75523: PPUSH
75524: CALL_OW 111
// result := [ _x , _y ] ;
75528: LD_ADDR_VAR 0 3
75532: PUSH
75533: LD_VAR 0 5
75537: PUSH
75538: LD_VAR 0 7
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: ST_TO_ADDR
// exit ;
75547: POP
75548: POP
75549: GO 75555
// end ; end ;
75551: GO 75395
75553: POP
75554: POP
// end ;
75555: LD_VAR 0 3
75559: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75560: LD_INT 0
75562: PPUSH
75563: PPUSH
75564: PPUSH
// result := 0 ;
75565: LD_ADDR_VAR 0 3
75569: PUSH
75570: LD_INT 0
75572: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75573: LD_VAR 0 1
75577: PUSH
75578: LD_INT 0
75580: LESS
75581: PUSH
75582: LD_VAR 0 1
75586: PUSH
75587: LD_INT 8
75589: GREATER
75590: OR
75591: PUSH
75592: LD_VAR 0 2
75596: PUSH
75597: LD_INT 0
75599: LESS
75600: OR
75601: PUSH
75602: LD_VAR 0 2
75606: PUSH
75607: LD_INT 8
75609: GREATER
75610: OR
75611: IFFALSE 75615
// exit ;
75613: GO 75690
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75615: LD_ADDR_VAR 0 4
75619: PUSH
75620: LD_INT 22
75622: PUSH
75623: LD_VAR 0 2
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PPUSH
75632: CALL_OW 69
75636: PUSH
75637: FOR_IN
75638: IFFALSE 75688
// begin un := UnitShoot ( i ) ;
75640: LD_ADDR_VAR 0 5
75644: PUSH
75645: LD_VAR 0 4
75649: PPUSH
75650: CALL_OW 504
75654: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75655: LD_VAR 0 5
75659: PPUSH
75660: CALL_OW 255
75664: PUSH
75665: LD_VAR 0 1
75669: EQUAL
75670: IFFALSE 75686
// begin result := un ;
75672: LD_ADDR_VAR 0 3
75676: PUSH
75677: LD_VAR 0 5
75681: ST_TO_ADDR
// exit ;
75682: POP
75683: POP
75684: GO 75690
// end ; end ;
75686: GO 75637
75688: POP
75689: POP
// end ;
75690: LD_VAR 0 3
75694: RET
// export function GetCargoBay ( units ) ; begin
75695: LD_INT 0
75697: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75698: LD_ADDR_VAR 0 2
75702: PUSH
75703: LD_VAR 0 1
75707: PPUSH
75708: LD_INT 2
75710: PUSH
75711: LD_INT 34
75713: PUSH
75714: LD_INT 12
75716: PUSH
75717: EMPTY
75718: LIST
75719: LIST
75720: PUSH
75721: LD_INT 34
75723: PUSH
75724: LD_INT 51
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PUSH
75731: LD_INT 34
75733: PUSH
75734: LD_INT 32
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: PUSH
75741: LD_INT 34
75743: PUSH
75744: LD_EXP 51
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: PPUSH
75760: CALL_OW 72
75764: ST_TO_ADDR
// end ;
75765: LD_VAR 0 2
75769: RET
// export function Negate ( value ) ; begin
75770: LD_INT 0
75772: PPUSH
// result := not value ;
75773: LD_ADDR_VAR 0 2
75777: PUSH
75778: LD_VAR 0 1
75782: NOT
75783: ST_TO_ADDR
// end ;
75784: LD_VAR 0 2
75788: RET
// export function Inc ( value ) ; begin
75789: LD_INT 0
75791: PPUSH
// result := value + 1 ;
75792: LD_ADDR_VAR 0 2
75796: PUSH
75797: LD_VAR 0 1
75801: PUSH
75802: LD_INT 1
75804: PLUS
75805: ST_TO_ADDR
// end ;
75806: LD_VAR 0 2
75810: RET
// export function Dec ( value ) ; begin
75811: LD_INT 0
75813: PPUSH
// result := value - 1 ;
75814: LD_ADDR_VAR 0 2
75818: PUSH
75819: LD_VAR 0 1
75823: PUSH
75824: LD_INT 1
75826: MINUS
75827: ST_TO_ADDR
// end ;
75828: LD_VAR 0 2
75832: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75833: LD_INT 0
75835: PPUSH
75836: PPUSH
75837: PPUSH
75838: PPUSH
75839: PPUSH
75840: PPUSH
75841: PPUSH
75842: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75843: LD_VAR 0 1
75847: PPUSH
75848: LD_VAR 0 2
75852: PPUSH
75853: CALL_OW 488
75857: NOT
75858: PUSH
75859: LD_VAR 0 3
75863: PPUSH
75864: LD_VAR 0 4
75868: PPUSH
75869: CALL_OW 488
75873: NOT
75874: OR
75875: IFFALSE 75888
// begin result := - 1 ;
75877: LD_ADDR_VAR 0 5
75881: PUSH
75882: LD_INT 1
75884: NEG
75885: ST_TO_ADDR
// exit ;
75886: GO 76123
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75888: LD_ADDR_VAR 0 12
75892: PUSH
75893: LD_VAR 0 1
75897: PPUSH
75898: LD_VAR 0 2
75902: PPUSH
75903: LD_VAR 0 3
75907: PPUSH
75908: LD_VAR 0 4
75912: PPUSH
75913: CALL 74971 0 4
75917: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75918: LD_ADDR_VAR 0 11
75922: PUSH
75923: LD_VAR 0 1
75927: PPUSH
75928: LD_VAR 0 2
75932: PPUSH
75933: LD_VAR 0 12
75937: PUSH
75938: LD_INT 1
75940: ARRAY
75941: PPUSH
75942: LD_VAR 0 12
75946: PUSH
75947: LD_INT 2
75949: ARRAY
75950: PPUSH
75951: CALL_OW 298
75955: ST_TO_ADDR
// distance := 9999 ;
75956: LD_ADDR_VAR 0 10
75960: PUSH
75961: LD_INT 9999
75963: ST_TO_ADDR
// for i := 0 to 5 do
75964: LD_ADDR_VAR 0 6
75968: PUSH
75969: DOUBLE
75970: LD_INT 0
75972: DEC
75973: ST_TO_ADDR
75974: LD_INT 5
75976: PUSH
75977: FOR_TO
75978: IFFALSE 76121
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75980: LD_ADDR_VAR 0 7
75984: PUSH
75985: LD_VAR 0 1
75989: PPUSH
75990: LD_VAR 0 6
75994: PPUSH
75995: LD_VAR 0 11
75999: PPUSH
76000: CALL_OW 272
76004: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76005: LD_ADDR_VAR 0 8
76009: PUSH
76010: LD_VAR 0 2
76014: PPUSH
76015: LD_VAR 0 6
76019: PPUSH
76020: LD_VAR 0 11
76024: PPUSH
76025: CALL_OW 273
76029: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76030: LD_VAR 0 7
76034: PPUSH
76035: LD_VAR 0 8
76039: PPUSH
76040: CALL_OW 488
76044: NOT
76045: IFFALSE 76049
// continue ;
76047: GO 75977
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76049: LD_ADDR_VAR 0 9
76053: PUSH
76054: LD_VAR 0 12
76058: PUSH
76059: LD_INT 1
76061: ARRAY
76062: PPUSH
76063: LD_VAR 0 12
76067: PUSH
76068: LD_INT 2
76070: ARRAY
76071: PPUSH
76072: LD_VAR 0 7
76076: PPUSH
76077: LD_VAR 0 8
76081: PPUSH
76082: CALL_OW 298
76086: ST_TO_ADDR
// if tmp < distance then
76087: LD_VAR 0 9
76091: PUSH
76092: LD_VAR 0 10
76096: LESS
76097: IFFALSE 76119
// begin result := i ;
76099: LD_ADDR_VAR 0 5
76103: PUSH
76104: LD_VAR 0 6
76108: ST_TO_ADDR
// distance := tmp ;
76109: LD_ADDR_VAR 0 10
76113: PUSH
76114: LD_VAR 0 9
76118: ST_TO_ADDR
// end ; end ;
76119: GO 75977
76121: POP
76122: POP
// end ;
76123: LD_VAR 0 5
76127: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76128: LD_INT 0
76130: PPUSH
76131: PPUSH
// if not driver or not IsInUnit ( driver ) then
76132: LD_VAR 0 1
76136: NOT
76137: PUSH
76138: LD_VAR 0 1
76142: PPUSH
76143: CALL_OW 310
76147: NOT
76148: OR
76149: IFFALSE 76153
// exit ;
76151: GO 76243
// vehicle := IsInUnit ( driver ) ;
76153: LD_ADDR_VAR 0 3
76157: PUSH
76158: LD_VAR 0 1
76162: PPUSH
76163: CALL_OW 310
76167: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76168: LD_VAR 0 1
76172: PPUSH
76173: LD_STRING \
76175: PUSH
76176: LD_INT 0
76178: PUSH
76179: LD_INT 0
76181: PUSH
76182: LD_INT 0
76184: PUSH
76185: LD_INT 0
76187: PUSH
76188: LD_INT 0
76190: PUSH
76191: LD_INT 0
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: PUSH
76203: LD_STRING E
76205: PUSH
76206: LD_INT 0
76208: PUSH
76209: LD_INT 0
76211: PUSH
76212: LD_VAR 0 3
76216: PUSH
76217: LD_INT 0
76219: PUSH
76220: LD_INT 0
76222: PUSH
76223: LD_INT 0
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PPUSH
76239: CALL_OW 446
// end ;
76243: LD_VAR 0 2
76247: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76248: LD_INT 0
76250: PPUSH
76251: PPUSH
// if not driver or not IsInUnit ( driver ) then
76252: LD_VAR 0 1
76256: NOT
76257: PUSH
76258: LD_VAR 0 1
76262: PPUSH
76263: CALL_OW 310
76267: NOT
76268: OR
76269: IFFALSE 76273
// exit ;
76271: GO 76363
// vehicle := IsInUnit ( driver ) ;
76273: LD_ADDR_VAR 0 3
76277: PUSH
76278: LD_VAR 0 1
76282: PPUSH
76283: CALL_OW 310
76287: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76288: LD_VAR 0 1
76292: PPUSH
76293: LD_STRING \
76295: PUSH
76296: LD_INT 0
76298: PUSH
76299: LD_INT 0
76301: PUSH
76302: LD_INT 0
76304: PUSH
76305: LD_INT 0
76307: PUSH
76308: LD_INT 0
76310: PUSH
76311: LD_INT 0
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: LIST
76321: LIST
76322: PUSH
76323: LD_STRING E
76325: PUSH
76326: LD_INT 0
76328: PUSH
76329: LD_INT 0
76331: PUSH
76332: LD_VAR 0 3
76336: PUSH
76337: LD_INT 0
76339: PUSH
76340: LD_INT 0
76342: PUSH
76343: LD_INT 0
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: LIST
76350: LIST
76351: LIST
76352: LIST
76353: LIST
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PPUSH
76359: CALL_OW 447
// end ;
76363: LD_VAR 0 2
76367: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76368: LD_INT 0
76370: PPUSH
76371: PPUSH
76372: PPUSH
// tmp := [ ] ;
76373: LD_ADDR_VAR 0 5
76377: PUSH
76378: EMPTY
76379: ST_TO_ADDR
// for i in units do
76380: LD_ADDR_VAR 0 4
76384: PUSH
76385: LD_VAR 0 1
76389: PUSH
76390: FOR_IN
76391: IFFALSE 76429
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76393: LD_ADDR_VAR 0 5
76397: PUSH
76398: LD_VAR 0 5
76402: PPUSH
76403: LD_VAR 0 5
76407: PUSH
76408: LD_INT 1
76410: PLUS
76411: PPUSH
76412: LD_VAR 0 4
76416: PPUSH
76417: CALL_OW 256
76421: PPUSH
76422: CALL_OW 2
76426: ST_TO_ADDR
76427: GO 76390
76429: POP
76430: POP
// if not tmp then
76431: LD_VAR 0 5
76435: NOT
76436: IFFALSE 76440
// exit ;
76438: GO 76488
// if asc then
76440: LD_VAR 0 2
76444: IFFALSE 76468
// result := SortListByListAsc ( units , tmp ) else
76446: LD_ADDR_VAR 0 3
76450: PUSH
76451: LD_VAR 0 1
76455: PPUSH
76456: LD_VAR 0 5
76460: PPUSH
76461: CALL_OW 76
76465: ST_TO_ADDR
76466: GO 76488
// result := SortListByListDesc ( units , tmp ) ;
76468: LD_ADDR_VAR 0 3
76472: PUSH
76473: LD_VAR 0 1
76477: PPUSH
76478: LD_VAR 0 5
76482: PPUSH
76483: CALL_OW 77
76487: ST_TO_ADDR
// end ;
76488: LD_VAR 0 3
76492: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76493: LD_INT 0
76495: PPUSH
76496: PPUSH
// task := GetTaskList ( mech ) ;
76497: LD_ADDR_VAR 0 4
76501: PUSH
76502: LD_VAR 0 1
76506: PPUSH
76507: CALL_OW 437
76511: ST_TO_ADDR
// if not task then
76512: LD_VAR 0 4
76516: NOT
76517: IFFALSE 76521
// exit ;
76519: GO 76563
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76521: LD_ADDR_VAR 0 3
76525: PUSH
76526: LD_VAR 0 4
76530: PUSH
76531: LD_INT 1
76533: ARRAY
76534: PUSH
76535: LD_INT 1
76537: ARRAY
76538: PUSH
76539: LD_STRING r
76541: EQUAL
76542: PUSH
76543: LD_VAR 0 4
76547: PUSH
76548: LD_INT 1
76550: ARRAY
76551: PUSH
76552: LD_INT 4
76554: ARRAY
76555: PUSH
76556: LD_VAR 0 2
76560: EQUAL
76561: AND
76562: ST_TO_ADDR
// end ;
76563: LD_VAR 0 3
76567: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76568: LD_INT 0
76570: PPUSH
// SetDir ( unit , d ) ;
76571: LD_VAR 0 1
76575: PPUSH
76576: LD_VAR 0 4
76580: PPUSH
76581: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76585: LD_VAR 0 1
76589: PPUSH
76590: LD_VAR 0 2
76594: PPUSH
76595: LD_VAR 0 3
76599: PPUSH
76600: LD_VAR 0 5
76604: PPUSH
76605: CALL_OW 48
// end ;
76609: LD_VAR 0 6
76613: RET
// export function ToNaturalNumber ( number ) ; begin
76614: LD_INT 0
76616: PPUSH
// result := number div 1 ;
76617: LD_ADDR_VAR 0 2
76621: PUSH
76622: LD_VAR 0 1
76626: PUSH
76627: LD_INT 1
76629: DIV
76630: ST_TO_ADDR
// if number < 0 then
76631: LD_VAR 0 1
76635: PUSH
76636: LD_INT 0
76638: LESS
76639: IFFALSE 76649
// result := 0 ;
76641: LD_ADDR_VAR 0 2
76645: PUSH
76646: LD_INT 0
76648: ST_TO_ADDR
// end ;
76649: LD_VAR 0 2
76653: RET
// export function SortByClass ( units , class ) ; var un ; begin
76654: LD_INT 0
76656: PPUSH
76657: PPUSH
// if not units or not class then
76658: LD_VAR 0 1
76662: NOT
76663: PUSH
76664: LD_VAR 0 2
76668: NOT
76669: OR
76670: IFFALSE 76674
// exit ;
76672: GO 76769
// result := [ ] ;
76674: LD_ADDR_VAR 0 3
76678: PUSH
76679: EMPTY
76680: ST_TO_ADDR
// for un in units do
76681: LD_ADDR_VAR 0 4
76685: PUSH
76686: LD_VAR 0 1
76690: PUSH
76691: FOR_IN
76692: IFFALSE 76767
// if GetClass ( un ) = class then
76694: LD_VAR 0 4
76698: PPUSH
76699: CALL_OW 257
76703: PUSH
76704: LD_VAR 0 2
76708: EQUAL
76709: IFFALSE 76736
// result := Insert ( result , 1 , un ) else
76711: LD_ADDR_VAR 0 3
76715: PUSH
76716: LD_VAR 0 3
76720: PPUSH
76721: LD_INT 1
76723: PPUSH
76724: LD_VAR 0 4
76728: PPUSH
76729: CALL_OW 2
76733: ST_TO_ADDR
76734: GO 76765
// result := Replace ( result , result + 1 , un ) ;
76736: LD_ADDR_VAR 0 3
76740: PUSH
76741: LD_VAR 0 3
76745: PPUSH
76746: LD_VAR 0 3
76750: PUSH
76751: LD_INT 1
76753: PLUS
76754: PPUSH
76755: LD_VAR 0 4
76759: PPUSH
76760: CALL_OW 1
76764: ST_TO_ADDR
76765: GO 76691
76767: POP
76768: POP
// end ;
76769: LD_VAR 0 3
76773: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76774: LD_INT 0
76776: PPUSH
76777: PPUSH
76778: PPUSH
76779: PPUSH
76780: PPUSH
76781: PPUSH
76782: PPUSH
// result := [ ] ;
76783: LD_ADDR_VAR 0 4
76787: PUSH
76788: EMPTY
76789: ST_TO_ADDR
// if x - r < 0 then
76790: LD_VAR 0 1
76794: PUSH
76795: LD_VAR 0 3
76799: MINUS
76800: PUSH
76801: LD_INT 0
76803: LESS
76804: IFFALSE 76816
// min_x := 0 else
76806: LD_ADDR_VAR 0 8
76810: PUSH
76811: LD_INT 0
76813: ST_TO_ADDR
76814: GO 76832
// min_x := x - r ;
76816: LD_ADDR_VAR 0 8
76820: PUSH
76821: LD_VAR 0 1
76825: PUSH
76826: LD_VAR 0 3
76830: MINUS
76831: ST_TO_ADDR
// if y - r < 0 then
76832: LD_VAR 0 2
76836: PUSH
76837: LD_VAR 0 3
76841: MINUS
76842: PUSH
76843: LD_INT 0
76845: LESS
76846: IFFALSE 76858
// min_y := 0 else
76848: LD_ADDR_VAR 0 7
76852: PUSH
76853: LD_INT 0
76855: ST_TO_ADDR
76856: GO 76874
// min_y := y - r ;
76858: LD_ADDR_VAR 0 7
76862: PUSH
76863: LD_VAR 0 2
76867: PUSH
76868: LD_VAR 0 3
76872: MINUS
76873: ST_TO_ADDR
// max_x := x + r ;
76874: LD_ADDR_VAR 0 9
76878: PUSH
76879: LD_VAR 0 1
76883: PUSH
76884: LD_VAR 0 3
76888: PLUS
76889: ST_TO_ADDR
// max_y := y + r ;
76890: LD_ADDR_VAR 0 10
76894: PUSH
76895: LD_VAR 0 2
76899: PUSH
76900: LD_VAR 0 3
76904: PLUS
76905: ST_TO_ADDR
// for _x = min_x to max_x do
76906: LD_ADDR_VAR 0 5
76910: PUSH
76911: DOUBLE
76912: LD_VAR 0 8
76916: DEC
76917: ST_TO_ADDR
76918: LD_VAR 0 9
76922: PUSH
76923: FOR_TO
76924: IFFALSE 77025
// for _y = min_y to max_y do
76926: LD_ADDR_VAR 0 6
76930: PUSH
76931: DOUBLE
76932: LD_VAR 0 7
76936: DEC
76937: ST_TO_ADDR
76938: LD_VAR 0 10
76942: PUSH
76943: FOR_TO
76944: IFFALSE 77021
// begin if not ValidHex ( _x , _y ) then
76946: LD_VAR 0 5
76950: PPUSH
76951: LD_VAR 0 6
76955: PPUSH
76956: CALL_OW 488
76960: NOT
76961: IFFALSE 76965
// continue ;
76963: GO 76943
// if GetResourceTypeXY ( _x , _y ) then
76965: LD_VAR 0 5
76969: PPUSH
76970: LD_VAR 0 6
76974: PPUSH
76975: CALL_OW 283
76979: IFFALSE 77019
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76981: LD_ADDR_VAR 0 4
76985: PUSH
76986: LD_VAR 0 4
76990: PPUSH
76991: LD_VAR 0 4
76995: PUSH
76996: LD_INT 1
76998: PLUS
76999: PPUSH
77000: LD_VAR 0 5
77004: PUSH
77005: LD_VAR 0 6
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PPUSH
77014: CALL_OW 1
77018: ST_TO_ADDR
// end ;
77019: GO 76943
77021: POP
77022: POP
77023: GO 76923
77025: POP
77026: POP
// end ;
77027: LD_VAR 0 4
77031: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77032: LD_INT 0
77034: PPUSH
77035: PPUSH
77036: PPUSH
77037: PPUSH
77038: PPUSH
77039: PPUSH
77040: PPUSH
77041: PPUSH
// if not units then
77042: LD_VAR 0 1
77046: NOT
77047: IFFALSE 77051
// exit ;
77049: GO 77476
// result := UnitFilter ( units , [ f_ok ] ) ;
77051: LD_ADDR_VAR 0 3
77055: PUSH
77056: LD_VAR 0 1
77060: PPUSH
77061: LD_INT 50
77063: PUSH
77064: EMPTY
77065: LIST
77066: PPUSH
77067: CALL_OW 72
77071: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77072: LD_ADDR_VAR 0 8
77076: PUSH
77077: LD_VAR 0 1
77081: PUSH
77082: LD_INT 1
77084: ARRAY
77085: PPUSH
77086: CALL_OW 255
77090: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77091: LD_ADDR_VAR 0 10
77095: PUSH
77096: LD_INT 29
77098: PUSH
77099: LD_EXP 54
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: ST_TO_ADDR
// if not result then
77108: LD_VAR 0 3
77112: NOT
77113: IFFALSE 77117
// exit ;
77115: GO 77476
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77117: LD_ADDR_VAR 0 5
77121: PUSH
77122: LD_INT 81
77124: PUSH
77125: LD_VAR 0 8
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PPUSH
77134: CALL_OW 69
77138: ST_TO_ADDR
// for i in result do
77139: LD_ADDR_VAR 0 4
77143: PUSH
77144: LD_VAR 0 3
77148: PUSH
77149: FOR_IN
77150: IFFALSE 77474
// begin tag := GetTag ( i ) + 1 ;
77152: LD_ADDR_VAR 0 9
77156: PUSH
77157: LD_VAR 0 4
77161: PPUSH
77162: CALL_OW 110
77166: PUSH
77167: LD_INT 1
77169: PLUS
77170: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77171: LD_ADDR_VAR 0 7
77175: PUSH
77176: LD_VAR 0 4
77180: PPUSH
77181: CALL_OW 250
77185: PPUSH
77186: LD_VAR 0 4
77190: PPUSH
77191: CALL_OW 251
77195: PPUSH
77196: LD_INT 6
77198: PPUSH
77199: CALL 76774 0 3
77203: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77204: LD_VAR 0 7
77208: PUSH
77209: LD_VAR 0 4
77213: PPUSH
77214: CALL_OW 264
77218: PUSH
77219: LD_VAR 0 10
77223: IN
77224: NOT
77225: AND
77226: IFFALSE 77265
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77228: LD_VAR 0 4
77232: PPUSH
77233: LD_VAR 0 7
77237: PUSH
77238: LD_INT 1
77240: ARRAY
77241: PUSH
77242: LD_INT 1
77244: ARRAY
77245: PPUSH
77246: LD_VAR 0 7
77250: PUSH
77251: LD_INT 1
77253: ARRAY
77254: PUSH
77255: LD_INT 2
77257: ARRAY
77258: PPUSH
77259: CALL_OW 116
77263: GO 77472
// if path > tag then
77265: LD_VAR 0 2
77269: PUSH
77270: LD_VAR 0 9
77274: GREATER
77275: IFFALSE 77442
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77277: LD_ADDR_VAR 0 6
77281: PUSH
77282: LD_VAR 0 5
77286: PPUSH
77287: LD_INT 91
77289: PUSH
77290: LD_VAR 0 4
77294: PUSH
77295: LD_INT 12
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: LIST
77302: PPUSH
77303: CALL_OW 72
77307: ST_TO_ADDR
// if nearEnemy then
77308: LD_VAR 0 6
77312: IFFALSE 77340
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77314: LD_VAR 0 4
77318: PPUSH
77319: LD_VAR 0 6
77323: PPUSH
77324: LD_VAR 0 4
77328: PPUSH
77329: CALL_OW 74
77333: PPUSH
77334: CALL_OW 115
77338: GO 77440
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77340: LD_VAR 0 4
77344: PPUSH
77345: LD_VAR 0 2
77349: PUSH
77350: LD_VAR 0 9
77354: ARRAY
77355: PUSH
77356: LD_INT 1
77358: ARRAY
77359: PPUSH
77360: LD_VAR 0 2
77364: PUSH
77365: LD_VAR 0 9
77369: ARRAY
77370: PUSH
77371: LD_INT 2
77373: ARRAY
77374: PPUSH
77375: CALL_OW 297
77379: PUSH
77380: LD_INT 6
77382: GREATER
77383: IFFALSE 77426
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77385: LD_VAR 0 4
77389: PPUSH
77390: LD_VAR 0 2
77394: PUSH
77395: LD_VAR 0 9
77399: ARRAY
77400: PUSH
77401: LD_INT 1
77403: ARRAY
77404: PPUSH
77405: LD_VAR 0 2
77409: PUSH
77410: LD_VAR 0 9
77414: ARRAY
77415: PUSH
77416: LD_INT 2
77418: ARRAY
77419: PPUSH
77420: CALL_OW 114
77424: GO 77440
// SetTag ( i , tag ) ;
77426: LD_VAR 0 4
77430: PPUSH
77431: LD_VAR 0 9
77435: PPUSH
77436: CALL_OW 109
// end else
77440: GO 77472
// if enemy then
77442: LD_VAR 0 5
77446: IFFALSE 77472
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77448: LD_VAR 0 4
77452: PPUSH
77453: LD_VAR 0 5
77457: PPUSH
77458: LD_VAR 0 4
77462: PPUSH
77463: CALL_OW 74
77467: PPUSH
77468: CALL_OW 115
// end ;
77472: GO 77149
77474: POP
77475: POP
// end ;
77476: LD_VAR 0 3
77480: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77481: LD_INT 0
77483: PPUSH
77484: PPUSH
77485: PPUSH
// if not unit or IsInUnit ( unit ) then
77486: LD_VAR 0 1
77490: NOT
77491: PUSH
77492: LD_VAR 0 1
77496: PPUSH
77497: CALL_OW 310
77501: OR
77502: IFFALSE 77506
// exit ;
77504: GO 77597
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77506: LD_ADDR_VAR 0 4
77510: PUSH
77511: LD_VAR 0 1
77515: PPUSH
77516: CALL_OW 250
77520: PPUSH
77521: LD_VAR 0 2
77525: PPUSH
77526: LD_INT 1
77528: PPUSH
77529: CALL_OW 272
77533: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77534: LD_ADDR_VAR 0 5
77538: PUSH
77539: LD_VAR 0 1
77543: PPUSH
77544: CALL_OW 251
77548: PPUSH
77549: LD_VAR 0 2
77553: PPUSH
77554: LD_INT 1
77556: PPUSH
77557: CALL_OW 273
77561: ST_TO_ADDR
// if ValidHex ( x , y ) then
77562: LD_VAR 0 4
77566: PPUSH
77567: LD_VAR 0 5
77571: PPUSH
77572: CALL_OW 488
77576: IFFALSE 77597
// ComTurnXY ( unit , x , y ) ;
77578: LD_VAR 0 1
77582: PPUSH
77583: LD_VAR 0 4
77587: PPUSH
77588: LD_VAR 0 5
77592: PPUSH
77593: CALL_OW 118
// end ;
77597: LD_VAR 0 3
77601: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77602: LD_INT 0
77604: PPUSH
77605: PPUSH
// result := false ;
77606: LD_ADDR_VAR 0 3
77610: PUSH
77611: LD_INT 0
77613: ST_TO_ADDR
// if not units then
77614: LD_VAR 0 2
77618: NOT
77619: IFFALSE 77623
// exit ;
77621: GO 77668
// for i in units do
77623: LD_ADDR_VAR 0 4
77627: PUSH
77628: LD_VAR 0 2
77632: PUSH
77633: FOR_IN
77634: IFFALSE 77666
// if See ( side , i ) then
77636: LD_VAR 0 1
77640: PPUSH
77641: LD_VAR 0 4
77645: PPUSH
77646: CALL_OW 292
77650: IFFALSE 77664
// begin result := true ;
77652: LD_ADDR_VAR 0 3
77656: PUSH
77657: LD_INT 1
77659: ST_TO_ADDR
// exit ;
77660: POP
77661: POP
77662: GO 77668
// end ;
77664: GO 77633
77666: POP
77667: POP
// end ;
77668: LD_VAR 0 3
77672: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77673: LD_INT 0
77675: PPUSH
77676: PPUSH
77677: PPUSH
77678: PPUSH
// if not unit or not points then
77679: LD_VAR 0 1
77683: NOT
77684: PUSH
77685: LD_VAR 0 2
77689: NOT
77690: OR
77691: IFFALSE 77695
// exit ;
77693: GO 77785
// dist := 99999 ;
77695: LD_ADDR_VAR 0 5
77699: PUSH
77700: LD_INT 99999
77702: ST_TO_ADDR
// for i in points do
77703: LD_ADDR_VAR 0 4
77707: PUSH
77708: LD_VAR 0 2
77712: PUSH
77713: FOR_IN
77714: IFFALSE 77783
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77716: LD_ADDR_VAR 0 6
77720: PUSH
77721: LD_VAR 0 1
77725: PPUSH
77726: LD_VAR 0 4
77730: PUSH
77731: LD_INT 1
77733: ARRAY
77734: PPUSH
77735: LD_VAR 0 4
77739: PUSH
77740: LD_INT 2
77742: ARRAY
77743: PPUSH
77744: CALL_OW 297
77748: ST_TO_ADDR
// if tmpDist < dist then
77749: LD_VAR 0 6
77753: PUSH
77754: LD_VAR 0 5
77758: LESS
77759: IFFALSE 77781
// begin result := i ;
77761: LD_ADDR_VAR 0 3
77765: PUSH
77766: LD_VAR 0 4
77770: ST_TO_ADDR
// dist := tmpDist ;
77771: LD_ADDR_VAR 0 5
77775: PUSH
77776: LD_VAR 0 6
77780: ST_TO_ADDR
// end ; end ;
77781: GO 77713
77783: POP
77784: POP
// end ; end_of_file
77785: LD_VAR 0 3
77789: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77790: LD_VAR 0 1
77794: PUSH
77795: LD_INT 200
77797: DOUBLE
77798: GREATEREQUAL
77799: IFFALSE 77807
77801: LD_INT 299
77803: DOUBLE
77804: LESSEQUAL
77805: IFTRUE 77809
77807: GO 77841
77809: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77810: LD_VAR 0 1
77814: PPUSH
77815: LD_VAR 0 2
77819: PPUSH
77820: LD_VAR 0 3
77824: PPUSH
77825: LD_VAR 0 4
77829: PPUSH
77830: LD_VAR 0 5
77834: PPUSH
77835: CALL 33816 0 5
77839: GO 77918
77841: LD_INT 300
77843: DOUBLE
77844: GREATEREQUAL
77845: IFFALSE 77853
77847: LD_INT 399
77849: DOUBLE
77850: LESSEQUAL
77851: IFTRUE 77855
77853: GO 77917
77855: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77856: LD_VAR 0 1
77860: PPUSH
77861: LD_VAR 0 2
77865: PPUSH
77866: LD_VAR 0 3
77870: PPUSH
77871: LD_VAR 0 4
77875: PPUSH
77876: LD_VAR 0 5
77880: PPUSH
77881: LD_VAR 0 6
77885: PPUSH
77886: LD_VAR 0 7
77890: PPUSH
77891: LD_VAR 0 8
77895: PPUSH
77896: LD_VAR 0 9
77900: PPUSH
77901: LD_VAR 0 10
77905: PPUSH
77906: LD_VAR 0 11
77910: PPUSH
77911: CALL 31714 0 11
77915: GO 77918
77917: POP
// end ;
77918: PPOPN 11
77920: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77921: LD_VAR 0 1
77925: PPUSH
77926: LD_VAR 0 2
77930: PPUSH
77931: LD_VAR 0 3
77935: PPUSH
77936: LD_VAR 0 4
77940: PPUSH
77941: LD_VAR 0 5
77945: PPUSH
77946: CALL 33808 0 5
// end ; end_of_file
77950: PPOPN 5
77952: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77953: LD_VAR 0 1
77957: PPUSH
77958: LD_VAR 0 2
77962: PPUSH
77963: LD_VAR 0 3
77967: PPUSH
77968: LD_VAR 0 4
77972: PPUSH
77973: LD_VAR 0 5
77977: PPUSH
77978: LD_VAR 0 6
77982: PPUSH
77983: CALL 19909 0 6
// end ;
77987: PPOPN 6
77989: END
