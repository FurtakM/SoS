// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 40333 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 40333 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 40333 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 40333 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 40333 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 40333 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 40333 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 40333 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 40333 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 40333 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 40333 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 40333 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 40333 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: PUSH
10656: LD_EXP 5
10660: PUSH
10661: EMPTY
10662: LIST
10663: DIFF
10664: ST_TO_ADDR
// DialogueOn ;
10665: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_STRING D3-Sol1-1
10686: PPUSH
10687: LD_STRING D3-Sol1-1
10689: PPUSH
10690: CALL 4598 0 3
10694: DIFF
10695: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10696: LD_VAR 0 1
10700: PPUSH
10701: LD_STRING D3-Sol2-1
10703: PPUSH
10704: LD_STRING D3-Sol2-1
10706: PPUSH
10707: CALL 4598 0 3
// if Frank then
10711: LD_EXP 5
10715: IFFALSE 10729
// Say ( Frank , D3-Frank-1 ) ;
10717: LD_EXP 5
10721: PPUSH
10722: LD_STRING D3-Frank-1
10724: PPUSH
10725: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10729: LD_EXP 13
10733: PPUSH
10734: LD_STRING D3-Don-1
10736: PPUSH
10737: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10741: LD_EXP 13
10745: PPUSH
10746: LD_STRING D3-Don-1a
10748: PPUSH
10749: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10753: LD_EXP 1
10757: PPUSH
10758: LD_STRING D3-JMM-1
10760: PPUSH
10761: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10765: LD_EXP 13
10769: PPUSH
10770: LD_STRING D3-Don-2
10772: PPUSH
10773: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10777: LD_INT 22
10779: PUSH
10780: LD_INT 6
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: IFFALSE 10943
// begin Say ( JMM , D3-JMM-2 ) ;
10807: LD_EXP 1
10811: PPUSH
10812: LD_STRING D3-JMM-2
10814: PPUSH
10815: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10819: LD_EXP 13
10823: PPUSH
10824: LD_STRING D3-Don-3
10826: PPUSH
10827: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10831: LD_EXP 1
10835: PPUSH
10836: LD_STRING D3-JMM-3
10838: PPUSH
10839: CALL_OW 88
// if IsOK ( Frank ) then
10843: LD_EXP 5
10847: PPUSH
10848: CALL_OW 302
10852: IFFALSE 10866
// Say ( Frank , D3-Frank-3 ) ;
10854: LD_EXP 5
10858: PPUSH
10859: LD_STRING D3-Frank-3
10861: PPUSH
10862: CALL_OW 88
// DialogueOff ;
10866: CALL_OW 7
// if IsOk ( Frank ) then
10870: LD_EXP 5
10874: PPUSH
10875: CALL_OW 302
10879: IFFALSE 10941
// begin SetSide ( Frank , 0 ) ;
10881: LD_EXP 5
10885: PPUSH
10886: LD_INT 0
10888: PPUSH
10889: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10893: LD_EXP 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10905: LD_EXP 5
10909: PPUSH
10910: LD_STRING 04t_Frank
10912: PPUSH
10913: CALL_OW 38
// wait ( 0 0$3 ) ;
10917: LD_INT 105
10919: PPUSH
10920: CALL_OW 67
// frankScoutBase = 1 ;
10924: LD_ADDR_EXP 25
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10932: LD_EXP 5
10936: PPUSH
10937: CALL_OW 64
// end ; end else
10941: GO 11030
// begin Say ( JMM , D3-JMM-4 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D3-JMM-4
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// if IsOk ( Frank ) then
10959: LD_EXP 5
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11030
// begin SetSide ( Frank , 0 ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 0
10977: PPUSH
10978: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_INT 12
10989: PPUSH
10990: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10994: LD_EXP 5
10998: PPUSH
10999: LD_STRING 04t_Frank
11001: PPUSH
11002: CALL_OW 38
// wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// frankScoutBase = 1 ;
11013: LD_ADDR_EXP 25
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11021: LD_EXP 5
11025: PPUSH
11026: CALL_OW 64
// end ; end ; end ;
11030: PPOPN 1
11032: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11033: LD_EXP 13
11037: PPUSH
11038: CALL_OW 255
11042: PUSH
11043: LD_INT 4
11045: EQUAL
11046: PUSH
11047: LD_EXP 13
11051: PPUSH
11052: CALL_OW 302
11056: AND
11057: IFFALSE 11297
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
// begin wait ( 5 5$00 ) ;
11066: LD_INT 10500
11068: PPUSH
11069: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11073: LD_EXP 13
11077: PPUSH
11078: CALL_OW 255
11082: PUSH
11083: LD_INT 1
11085: EQUAL
11086: PUSH
11087: LD_EXP 13
11091: PPUSH
11092: CALL_OW 301
11096: OR
11097: IFFALSE 11101
// exit ;
11099: GO 11297
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11101: LD_EXP 13
11105: PPUSH
11106: LD_STRING D3b-Don-1
11108: PPUSH
11109: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11113: LD_ADDR_EXP 41
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11141: LD_INT 35
11143: PPUSH
11144: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11148: LD_VAR 0 2
11152: NOT
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_INT 6
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 101
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: OR
11183: IFFALSE 11141
// if not tmp then
11185: LD_VAR 0 2
11189: NOT
11190: IFFALSE 11194
// exit ;
11192: GO 11297
// for i in tmp do
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11224
// ComAgressiveMove ( i , 52 , 64 ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_INT 52
11214: PPUSH
11215: LD_INT 64
11217: PPUSH
11218: CALL_OW 114
11222: GO 11204
11224: POP
11225: POP
// wait ( 0 0$10 ) ;
11226: LD_INT 350
11228: PPUSH
11229: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: PUSH
11253: LD_EXP 5
11257: DIFF
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11276
// SetSide ( i , 1 ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 235
11274: GO 11259
11276: POP
11277: POP
// if IsLive ( Donaldson ) then
11278: LD_EXP 13
11282: PPUSH
11283: CALL_OW 300
11287: IFFALSE 11297
// saveDonaldson := 1 ;
11289: LD_ADDR_EXP 24
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// end ;
11297: PPOPN 2
11299: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 302
11309: PUSH
11310: LD_EXP 24
11314: NOT
11315: AND
11316: PUSH
11317: LD_EXP 41
11321: NOT
11322: AND
11323: PUSH
11324: LD_INT 26
11326: PPUSH
11327: LD_INT 22
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 70
11341: PUSH
11342: LD_EXP 13
11346: PPUSH
11347: LD_EXP 1
11351: PPUSH
11352: CALL_OW 296
11356: PUSH
11357: LD_INT 6
11359: LESS
11360: OR
11361: AND
11362: IFFALSE 11417
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin saveDonaldson := 1 ;
11370: LD_ADDR_EXP 24
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11378: LD_ADDR_VAR 0 1
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 4
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PPUSH
11393: CALL_OW 69
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11415
// SetSide ( i , 1 ) ;
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 235
11413: GO 11398
11415: POP
11416: POP
// end ;
11417: PPOPN 1
11419: END
// every 0 0$1 trigger frankScoutBase do
11420: LD_EXP 25
11424: IFFALSE 11789
11426: GO 11428
11428: DISABLE
// begin wait ( 2 2$30 ) ;
11429: LD_INT 5250
11431: PPUSH
11432: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11443: LD_INT 81
11445: PUSH
11446: LD_INT 4
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 92
11455: PUSH
11456: LD_INT 84
11458: PUSH
11459: LD_INT 28
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 69
11479: NOT
11480: IFFALSE 11436
// uc_side = 4 ;
11482: LD_ADDR_OWVAR 20
11486: PUSH
11487: LD_INT 4
11489: ST_TO_ADDR
// uc_nation = 1 ;
11490: LD_ADDR_OWVAR 21
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11498: LD_ADDR_EXP 5
11502: PUSH
11503: LD_STRING 04t_Frank
11505: PPUSH
11506: CALL_OW 34
11510: ST_TO_ADDR
// if not Frank then
11511: LD_EXP 5
11515: NOT
11516: IFFALSE 11520
// exit ;
11518: GO 11789
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11520: LD_EXP 5
11524: PPUSH
11525: LD_INT 13
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11535: LD_INT 35
11537: PPUSH
11538: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11542: LD_EXP 1
11546: PPUSH
11547: CALL_OW 310
11551: NOT
11552: PUSH
11553: LD_EXP 1
11557: PPUSH
11558: LD_INT 4
11560: PPUSH
11561: CALL_OW 296
11565: PUSH
11566: LD_INT 20
11568: LESS
11569: AND
11570: IFFALSE 11603
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11572: LD_EXP 5
11576: PPUSH
11577: LD_EXP 1
11581: PPUSH
11582: CALL_OW 250
11586: PPUSH
11587: LD_EXP 1
11591: PPUSH
11592: CALL_OW 251
11596: PPUSH
11597: CALL_OW 111
11601: GO 11618
// ComMoveXY ( Frank , 51 , 15 ) ;
11603: LD_EXP 5
11607: PPUSH
11608: LD_INT 51
11610: PPUSH
11611: LD_INT 15
11613: PPUSH
11614: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11618: LD_EXP 5
11622: PPUSH
11623: LD_EXP 1
11627: PPUSH
11628: CALL_OW 296
11632: PUSH
11633: LD_INT 10
11635: LESS
11636: IFFALSE 11535
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11638: LD_EXP 1
11642: PUSH
11643: LD_EXP 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 87
// DialogueOn ;
11656: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11660: LD_EXP 5
11664: PPUSH
11665: LD_STRING D3a-Frank-1
11667: PPUSH
11668: CALL_OW 88
// if Lisa then
11672: LD_EXP 4
11676: IFFALSE 11726
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11678: LD_EXP 4
11682: PPUSH
11683: LD_STRING D3a-Lisa-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11690: LD_EXP 5
11694: PPUSH
11695: LD_STRING D3a-Frank-2
11697: PPUSH
11698: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11702: LD_EXP 4
11706: PPUSH
11707: LD_STRING D3a-Lisa-2
11709: PPUSH
11710: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11714: LD_EXP 5
11718: PPUSH
11719: LD_STRING D3a-Frank-3
11721: PPUSH
11722: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11726: LD_EXP 1
11730: PPUSH
11731: LD_STRING D3a-JMM-3
11733: PPUSH
11734: CALL_OW 88
// DialogueOff ;
11738: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11742: LD_EXP 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 235
// InGameOn ;
11754: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11758: LD_INT 1
11760: PPUSH
11761: LD_INT 7
11763: PPUSH
11764: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11768: LD_INT 93
11770: PPUSH
11771: LD_INT 91
11773: PPUSH
11774: CALL_OW 84
// wait ( 0 0$5 ) ;
11778: LD_INT 175
11780: PPUSH
11781: CALL_OW 67
// InGameOff ;
11785: CALL_OW 9
// end ;
11789: END
// every 12 12$0 trigger Difficulty > 1 do
11790: LD_OWVAR 67
11794: PUSH
11795: LD_INT 1
11797: GREATER
11798: IFFALSE 11822
11800: GO 11802
11802: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11803: LD_INT 24
11805: PPUSH
11806: LD_INT 24
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: LD_INT 53
11817: PPUSH
11818: CALL_OW 185
11822: END
// every 18 18$0 do
11823: GO 11825
11825: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11826: LD_EXP 14
11830: PPUSH
11831: LD_STRING D4-Har-1
11833: PPUSH
11834: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11838: LD_EXP 1
11842: PPUSH
11843: LD_STRING D4-JMM-1
11845: PPUSH
11846: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11850: LD_EXP 14
11854: PPUSH
11855: LD_STRING D4-Har-2
11857: PPUSH
11858: CALL_OW 94
// case Query ( Q1 ) of 1 :
11862: LD_STRING Q1
11864: PPUSH
11865: CALL_OW 97
11869: PUSH
11870: LD_INT 1
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11937
11878: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_STRING D5-JMM-1
11886: PPUSH
11887: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11891: LD_EXP 14
11895: PPUSH
11896: LD_STRING D5-Har-1
11898: PPUSH
11899: CALL_OW 94
// timeToSupport = 10 10$0 ;
11903: LD_ADDR_EXP 28
11907: PUSH
11908: LD_INT 21000
11910: ST_TO_ADDR
// timerStatus = 2 ;
11911: LD_ADDR_EXP 29
11915: PUSH
11916: LD_INT 2
11918: ST_TO_ADDR
// startTimer = 1 ;
11919: LD_ADDR_EXP 30
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// harrAnswer = 1 ;
11927: LD_ADDR_EXP 26
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// end ; 2 :
11935: GO 12072
11937: LD_INT 2
11939: DOUBLE
11940: EQUAL
11941: IFTRUE 11945
11943: GO 12004
11945: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11946: LD_EXP 1
11950: PPUSH
11951: LD_STRING D5-JMM-2
11953: PPUSH
11954: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11958: LD_EXP 14
11962: PPUSH
11963: LD_STRING D5-Har-2
11965: PPUSH
11966: CALL_OW 94
// timeToSupport = 5 5$0 ;
11970: LD_ADDR_EXP 28
11974: PUSH
11975: LD_INT 10500
11977: ST_TO_ADDR
// timerStatus = 2 ;
11978: LD_ADDR_EXP 29
11982: PUSH
11983: LD_INT 2
11985: ST_TO_ADDR
// startTimer = 1 ;
11986: LD_ADDR_EXP 30
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// harrAnswer = 2 ;
11994: LD_ADDR_EXP 26
11998: PUSH
11999: LD_INT 2
12001: ST_TO_ADDR
// end ; 3 :
12002: GO 12072
12004: LD_INT 3
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12071
12012: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12013: LD_EXP 1
12017: PPUSH
12018: LD_STRING D5-JMM-3
12020: PPUSH
12021: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12025: LD_EXP 14
12029: PPUSH
12030: LD_STRING D5-Har-3
12032: PPUSH
12033: CALL_OW 94
// timeToSupport = 5 5$0 ;
12037: LD_ADDR_EXP 28
12041: PUSH
12042: LD_INT 10500
12044: ST_TO_ADDR
// timerStatus = 2 ;
12045: LD_ADDR_EXP 29
12049: PUSH
12050: LD_INT 2
12052: ST_TO_ADDR
// startTimer = 1 ;
12053: LD_ADDR_EXP 30
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// harrAnswer = 3 ;
12061: LD_ADDR_EXP 26
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// end ; end ;
12069: GO 12072
12071: POP
// end ;
12072: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12073: LD_EXP 29
12077: PUSH
12078: LD_INT 2
12080: EQUAL
12081: PUSH
12082: LD_EXP 28
12086: PUSH
12087: LD_INT 0
12089: EQUAL
12090: AND
12091: IFFALSE 12380
12093: GO 12095
12095: DISABLE
// begin timerStatus = 4 ;
12096: LD_ADDR_EXP 29
12100: PUSH
12101: LD_INT 4
12103: ST_TO_ADDR
// if harrAnswer = 1 then
12104: LD_EXP 26
12108: PUSH
12109: LD_INT 1
12111: EQUAL
12112: IFFALSE 12196
// begin PrepareHarrisonSupport ( 3 ) ;
12114: LD_INT 3
12116: PPUSH
12117: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12121: LD_INT 2100
12123: PPUSH
12124: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12128: LD_EXP 14
12132: PPUSH
12133: LD_STRING D7-Har-1
12135: PPUSH
12136: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12140: LD_STRING M2
12142: PPUSH
12143: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12147: LD_ADDR_EXP 27
12151: PUSH
12152: LD_INT 31500
12154: PUSH
12155: LD_INT 10500
12157: PUSH
12158: LD_INT 8400
12160: PUSH
12161: LD_INT 6300
12163: PUSH
12164: LD_INT 6300
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_OWVAR 67
12177: ARRAY
12178: PLUS
12179: ST_TO_ADDR
// startTimer = 1 ;
12180: LD_ADDR_EXP 30
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// timerStatus = 3 ;
12188: LD_ADDR_EXP 29
12192: PUSH
12193: LD_INT 3
12195: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12196: LD_EXP 26
12200: PUSH
12201: LD_INT 2
12203: EQUAL
12204: IFFALSE 12288
// begin PrepareHarrisonSupport ( 4 ) ;
12206: LD_INT 4
12208: PPUSH
12209: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12213: LD_INT 2100
12215: PPUSH
12216: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12220: LD_EXP 14
12224: PPUSH
12225: LD_STRING D7-Har-1
12227: PPUSH
12228: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12232: LD_STRING M2
12234: PPUSH
12235: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12239: LD_ADDR_EXP 27
12243: PUSH
12244: LD_INT 33600
12246: PUSH
12247: LD_INT 10500
12249: PUSH
12250: LD_INT 8400
12252: PUSH
12253: LD_INT 6300
12255: PUSH
12256: LD_INT 5250
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_OWVAR 67
12269: ARRAY
12270: PLUS
12271: ST_TO_ADDR
// startTimer = 1 ;
12272: LD_ADDR_EXP 30
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// timerStatus = 3 ;
12280: LD_ADDR_EXP 29
12284: PUSH
12285: LD_INT 3
12287: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12288: LD_EXP 26
12292: PUSH
12293: LD_INT 3
12295: EQUAL
12296: IFFALSE 12380
// begin PrepareHarrisonSupport ( 5 ) ;
12298: LD_INT 5
12300: PPUSH
12301: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12305: LD_INT 2100
12307: PPUSH
12308: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12312: LD_EXP 14
12316: PPUSH
12317: LD_STRING D7-Har-1
12319: PPUSH
12320: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12324: LD_STRING M2
12326: PPUSH
12327: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12331: LD_ADDR_EXP 27
12335: PUSH
12336: LD_INT 35700
12338: PUSH
12339: LD_INT 10500
12341: PUSH
12342: LD_INT 6300
12344: PUSH
12345: LD_INT 4200
12347: PUSH
12348: LD_INT 3150
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_OWVAR 67
12361: ARRAY
12362: PLUS
12363: ST_TO_ADDR
// startTimer = 1 ;
12364: LD_ADDR_EXP 30
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// timerStatus = 3 ;
12372: LD_ADDR_EXP 29
12376: PUSH
12377: LD_INT 3
12379: ST_TO_ADDR
// end ; end ;
12380: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12381: LD_EXP 27
12385: PUSH
12386: LD_INT 8400
12388: LESSEQUAL
12389: PUSH
12390: LD_EXP 29
12394: PUSH
12395: LD_INT 3
12397: EQUAL
12398: AND
12399: IFFALSE 12431
12401: GO 12403
12403: DISABLE
// begin DialogueOn ;
12404: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12408: LD_EXP 14
12412: PPUSH
12413: LD_STRING D7a-Har-1
12415: PPUSH
12416: CALL_OW 94
// DialogueOff ;
12420: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12424: LD_STRING M2a
12426: PPUSH
12427: CALL_OW 337
// end ;
12431: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12432: LD_EXP 27
12436: PUSH
12437: LD_INT 0
12439: LESSEQUAL
12440: PUSH
12441: LD_EXP 29
12445: PUSH
12446: LD_INT 3
12448: EQUAL
12449: AND
12450: PUSH
12451: LD_EXP 40
12455: NOT
12456: AND
12457: IFFALSE 12596
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: DIFF
12493: ST_TO_ADDR
// saveDonaldson = 2 ;
12494: LD_ADDR_EXP 24
12498: PUSH
12499: LD_INT 2
12501: ST_TO_ADDR
// DialogueOn ;
12502: CALL_OW 6
// if IsOk ( Donaldson ) then
12506: LD_EXP 13
12510: PPUSH
12511: CALL_OW 302
12515: IFFALSE 12531
// SayRadio ( Harisson , D8-Har-1 ) else
12517: LD_EXP 14
12521: PPUSH
12522: LD_STRING D8-Har-1
12524: PPUSH
12525: CALL_OW 94
12529: GO 12543
// SayRadio ( Harisson , D8-Har-1a ) ;
12531: LD_EXP 14
12535: PPUSH
12536: LD_STRING D8-Har-1a
12538: PPUSH
12539: CALL_OW 94
// DialogueOff ;
12543: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 4
12554: PPUSH
12555: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12559: LD_VAR 0 1
12563: PPUSH
12564: LD_INT 88
12566: PPUSH
12567: LD_INT 89
12569: PPUSH
12570: CALL_OW 114
// honor = 0 ;
12574: LD_ADDR_EXP 39
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12582: LD_INT 350
12584: PPUSH
12585: CALL_OW 67
// YouLost ( LostCommand ) ;
12589: LD_STRING LostCommand
12591: PPUSH
12592: CALL_OW 104
// end ;
12596: PPOPN 1
12598: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12599: LD_INT 22
12601: PUSH
12602: LD_INT 6
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 69
12627: PUSH
12628: LD_INT 0
12630: EQUAL
12631: PUSH
12632: LD_EXP 20
12636: PUSH
12637: LD_INT 0
12639: EQUAL
12640: AND
12641: PUSH
12642: LD_EXP 44
12646: PUSH
12647: LD_INT 1
12649: EQUAL
12650: AND
12651: IFFALSE 12745
12653: GO 12655
12655: DISABLE
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_INT 22
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 23
12687: PUSH
12688: LD_INT 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// for i in tmp do
12705: LD_ADDR_VAR 0 1
12709: PUSH
12710: LD_VAR 0 2
12714: PUSH
12715: FOR_IN
12716: IFFALSE 12743
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12718: LD_VAR 0 1
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 4
12728: PPUSH
12729: CALL_OW 12
12733: PPUSH
12734: LD_INT 500
12736: PPUSH
12737: CALL_OW 492
12741: GO 12715
12743: POP
12744: POP
// end ; end_of_file
12745: PPOPN 2
12747: END
// every 0 0$1 trigger AIEnable do
12748: LD_EXP 37
12752: IFFALSE 12846
12754: GO 12756
12756: DISABLE
// begin enable ;
12757: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12758: LD_INT 3
12760: PPUSH
12761: LD_INT 21
12763: PPUSH
12764: LD_INT 7
12766: PPUSH
12767: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12771: LD_INT 3
12773: PPUSH
12774: LD_INT 8
12776: PPUSH
12777: LD_INT 7
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12787: LD_EXP 20
12791: PUSH
12792: LD_INT 2
12794: EQUAL
12795: PUSH
12796: LD_INT 22
12798: PUSH
12799: LD_INT 6
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: AND
12811: IFFALSE 12846
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12813: LD_INT 6
12815: PPUSH
12816: LD_EXP 21
12820: PPUSH
12821: LD_INT 6
12823: PPUSH
12824: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12828: LD_INT 6
12830: PPUSH
12831: LD_INT 9
12833: PPUSH
12834: LD_INT 6
12836: PPUSH
12837: LD_EXP 22
12841: PPUSH
12842: CALL 6334 0 4
// end ; end ;
12846: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12847: LD_EXP 15
12851: PPUSH
12852: CALL_OW 310
12856: NOT
12857: PUSH
12858: LD_INT 21
12860: PPUSH
12861: CALL_OW 302
12865: AND
12866: PUSH
12867: LD_INT 21
12869: PPUSH
12870: CALL_OW 255
12874: PUSH
12875: LD_INT 3
12877: EQUAL
12878: AND
12879: IFFALSE 12896
12881: GO 12883
12883: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12884: LD_EXP 15
12888: PPUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 120
12896: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12897: LD_INT 22
12899: PUSH
12900: LD_INT 3
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 21
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: EMPTY
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: LD_INT 0
12935: EQUAL
12936: PUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 255
12944: PUSH
12945: LD_INT 3
12947: EQUAL
12948: AND
12949: PUSH
12950: LD_INT 21
12952: PPUSH
12953: CALL_OW 302
12957: AND
12958: PUSH
12959: LD_INT 21
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: IFFALSE 13192
12982: GO 12984
12984: DISABLE
// begin enable ;
12985: ENABLE
// if Difficulty = 1 then
12986: LD_OWVAR 67
12990: PUSH
12991: LD_INT 1
12993: EQUAL
12994: IFFALSE 13038
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12996: LD_INT 3
12998: PPUSH
12999: LD_INT 24
13001: PPUSH
13002: LD_OWVAR 67
13006: PUSH
13007: LD_INT 2
13009: PLUS
13010: PPUSH
13011: LD_INT 42
13013: PUSH
13014: LD_INT 44
13016: PUSH
13017: LD_INT 43
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_INT 21
13033: PPUSH
13034: CALL 6848 0 7
// if Difficulty = 2 then
13038: LD_OWVAR 67
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13113
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13048: LD_INT 3
13050: PPUSH
13051: LD_INT 24
13053: PPUSH
13054: LD_OWVAR 67
13058: PUSH
13059: LD_INT 2
13061: PLUS
13062: PPUSH
13063: LD_INT 44
13065: PUSH
13066: LD_INT 44
13068: PUSH
13069: LD_INT 43
13071: PUSH
13072: LD_INT 43
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_INT 21
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 1
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 12
13107: ARRAY
13108: PPUSH
13109: CALL 6848 0 7
// if Difficulty >= 3 then
13113: LD_OWVAR 67
13117: PUSH
13118: LD_INT 3
13120: GREATEREQUAL
13121: IFFALSE 13192
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13123: LD_INT 3
13125: PPUSH
13126: LD_INT 24
13128: PPUSH
13129: LD_OWVAR 67
13133: PUSH
13134: LD_INT 2
13136: PPUSH
13137: LD_INT 3
13139: PPUSH
13140: CALL_OW 12
13144: PLUS
13145: PPUSH
13146: LD_INT 44
13148: PUSH
13149: LD_INT 44
13151: PUSH
13152: LD_INT 43
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 2
13181: PPUSH
13182: CALL_OW 12
13186: ARRAY
13187: PPUSH
13188: CALL 6848 0 7
// end ;
13192: END
// every 0 0$1 do
13193: GO 13195
13195: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13196: LD_INT 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: LD_INT 3
13204: PPUSH
13205: CALL 5951 0 3
13209: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13210: LD_EXP 20
13214: PUSH
13215: LD_INT 1
13217: EQUAL
13218: IFFALSE 13365
13220: GO 13222
13222: DISABLE
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 6
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 21
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 34
13254: PUSH
13255: LD_INT 51
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13272: LD_VAR 0 2
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: LD_EXP 21
13285: PPUSH
13286: CALL_OW 250
13290: PUSH
13291: LD_INT 5
13293: MINUS
13294: PPUSH
13295: LD_EXP 21
13299: PPUSH
13300: CALL_OW 251
13304: PUSH
13305: LD_INT 5
13307: MINUS
13308: PPUSH
13309: CALL_OW 111
// wait ( 0 0$5 ) ;
13313: LD_INT 175
13315: PPUSH
13316: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13320: LD_VAR 0 2
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: LD_INT 41
13331: PPUSH
13332: LD_INT 52
13334: PPUSH
13335: CALL_OW 177
// wait ( 0 0$40 ) ;
13339: LD_INT 1400
13341: PPUSH
13342: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13346: LD_VAR 0 2
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: PPUSH
13355: LD_INT 41
13357: PPUSH
13358: LD_INT 44
13360: PPUSH
13361: CALL_OW 111
// end ;
13365: PPOPN 2
13367: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13368: LD_EXP 21
13372: PPUSH
13373: CALL_OW 274
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 275
13385: PUSH
13386: LD_INT 100
13388: GREATEREQUAL
13389: IFFALSE 13617
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 22
13404: PUSH
13405: LD_INT 6
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13442: LD_VAR 0 1
13446: PUSH
13447: LD_INT 1
13449: ARRAY
13450: PPUSH
13451: LD_INT 4
13453: PPUSH
13454: LD_INT 39
13456: PPUSH
13457: LD_INT 37
13459: PPUSH
13460: LD_INT 3
13462: PPUSH
13463: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PPUSH
13476: LD_INT 29
13478: PPUSH
13479: LD_INT 42
13481: PPUSH
13482: LD_INT 54
13484: PPUSH
13485: LD_INT 3
13487: PPUSH
13488: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13492: LD_VAR 0 1
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_INT 6
13503: PPUSH
13504: LD_INT 38
13506: PPUSH
13507: LD_INT 48
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13517: LD_VAR 0 1
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: LD_INT 32
13531: PPUSH
13532: LD_INT 38
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13542: LD_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PPUSH
13551: LD_INT 26
13553: PPUSH
13554: LD_INT 39
13556: PPUSH
13557: LD_INT 55
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: LD_INT 32
13578: PPUSH
13579: LD_INT 31
13581: PPUSH
13582: LD_INT 31
13584: PPUSH
13585: LD_INT 3
13587: PPUSH
13588: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 50
13606: PPUSH
13607: LD_INT 51
13609: PPUSH
13610: LD_INT 4
13612: PPUSH
13613: CALL_OW 205
// end ;
13617: PPOPN 1
13619: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13620: LD_EXP 46
13624: IFFALSE 14189
13626: GO 13628
13628: DISABLE
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
// begin enable ;
13634: ENABLE
// if not ruMobile then
13635: LD_EXP 46
13639: NOT
13640: IFFALSE 13644
// exit ;
13642: GO 14189
// for i in ruMobile do
13644: LD_ADDR_VAR 0 1
13648: PUSH
13649: LD_EXP 46
13653: PUSH
13654: FOR_IN
13655: IFFALSE 14187
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 302
13666: NOT
13667: PUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 255
13677: PUSH
13678: LD_INT 3
13680: NONEQUAL
13681: OR
13682: IFFALSE 13702
// begin ruMobile := ruMobile diff i ;
13684: LD_ADDR_EXP 46
13688: PUSH
13689: LD_EXP 46
13693: PUSH
13694: LD_VAR 0 1
13698: DIFF
13699: ST_TO_ADDR
// continue ;
13700: GO 13654
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 110
13711: NOT
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 110
13722: PUSH
13723: LD_INT 0
13725: EQUAL
13726: OR
13727: IFFALSE 13842
// begin if GetFuel ( i ) < 50 then
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 261
13738: PUSH
13739: LD_INT 50
13741: LESS
13742: IFFALSE 13801
// begin ComMoveXY ( i , 106 , 88 ) ;
13744: LD_VAR 0 1
13748: PPUSH
13749: LD_INT 106
13751: PPUSH
13752: LD_INT 88
13754: PPUSH
13755: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13759: LD_INT 35
13761: PPUSH
13762: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 297
13781: PUSH
13782: LD_INT 4
13784: LESS
13785: IFFALSE 13759
// SetFuel ( i , 100 ) ;
13787: LD_VAR 0 1
13791: PPUSH
13792: LD_INT 100
13794: PPUSH
13795: CALL_OW 240
// end else
13799: GO 13842
// if not IsInArea ( i , ruParking ) then
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 25
13808: PPUSH
13809: CALL_OW 308
13813: NOT
13814: IFFALSE 13830
// ComMoveToArea ( i , ruParking ) else
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 25
13823: PPUSH
13824: CALL_OW 113
13828: GO 13842
// SetTag ( i , 1 ) ;
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 110
13851: PUSH
13852: LD_INT 1
13854: EQUAL
13855: IFFALSE 13985
// begin if GetLives ( i ) < 650 then
13857: LD_VAR 0 1
13861: PPUSH
13862: CALL_OW 256
13866: PUSH
13867: LD_INT 650
13869: LESS
13870: IFFALSE 13962
// begin if not IsDrivenBy ( i ) then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 311
13881: NOT
13882: IFFALSE 13886
// continue ;
13884: GO 13654
// mech := IsDrivenBy ( i ) ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 311
13900: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13901: LD_VAR 0 2
13905: PPUSH
13906: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13924: LD_INT 35
13926: PPUSH
13927: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 256
13940: PUSH
13941: LD_INT 1000
13943: EQUAL
13944: IFFALSE 13924
// ComEnterUnit ( mech , i ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 120
// end else
13960: GO 13985
// if IsDrivenBy ( i ) then
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 311
13971: IFFALSE 13985
// SetTag ( i , 2 ) ;
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_INT 2
13980: PPUSH
13981: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 110
13994: PUSH
13995: LD_INT 2
13997: EQUAL
13998: IFFALSE 14185
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 24
14007: PPUSH
14008: LD_INT 81
14010: PUSH
14011: LD_INT 3
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 70
14022: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 256
14032: PUSH
14033: LD_INT 650
14035: LESS
14036: IFFALSE 14061
// begin ComStop ( i ) ;
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 141
// SetTag ( i , 0 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 0
14054: PPUSH
14055: CALL_OW 109
// continue ;
14059: GO 13654
// end ; if enemy then
14061: LD_VAR 0 3
14065: IFFALSE 14105
// begin if not HasTask ( i ) then
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 314
14076: NOT
14077: IFFALSE 14103
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14079: LD_VAR 0 1
14083: PPUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 74
14098: PPUSH
14099: CALL_OW 115
// end else
14103: GO 14185
// if ruMobile > 2 then
14105: LD_EXP 46
14109: PUSH
14110: LD_INT 2
14112: GREATER
14113: IFFALSE 14185
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: LD_INT 81
14122: PUSH
14123: LD_INT 3
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: ST_TO_ADDR
// if enemy then
14135: LD_VAR 0 3
14139: IFFALSE 14185
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_INT 95
14148: PUSH
14149: LD_INT 74
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 67
14158: PUSH
14159: LD_INT 59
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 55
14168: PUSH
14169: LD_INT 41
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL 80639 0 2
// end ; end ; end ;
14185: GO 13654
14187: POP
14188: POP
// end ; end_of_file
14189: PPOPN 3
14191: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: LD_INT 6
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 54
14241: PUSH
14242: EMPTY
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14260: LD_ADDR_VAR 0 7
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_INT 6
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 21
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 54
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14312: LD_ADDR_VAR 0 4
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_INT 6
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_INT 6
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: PPUSH
14397: CALL_OW 69
14401: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14402: LD_ADDR_VAR 0 8
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 6
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 34
14429: PUSH
14430: LD_INT 51
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 6
14459: EQUAL
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 266
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: AND
14475: IFFALSE 14495
// begin ruPDepot = building ;
14477: LD_ADDR_EXP 21
14481: PUSH
14482: LD_VAR 0 1
14486: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14487: LD_ADDR_EXP 20
14491: PUSH
14492: LD_INT 1
14494: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 4
14507: EQUAL
14508: PUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 255
14518: PUSH
14519: LD_INT 6
14521: EQUAL
14522: AND
14523: IFFALSE 14556
// for i in tmpSold do
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14554
// ComEnterUnit ( i , building ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 120
14552: GO 14535
14554: POP
14555: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 266
14565: PUSH
14566: LD_INT 6
14568: EQUAL
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 255
14579: PUSH
14580: LD_INT 6
14582: EQUAL
14583: AND
14584: IFFALSE 14642
// begin for i in tmpSci do
14586: LD_ADDR_VAR 0 2
14590: PUSH
14591: LD_VAR 0 6
14595: PUSH
14596: FOR_IN
14597: IFFALSE 14615
// ComEnterUnit ( i , building ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 120
14613: GO 14596
14615: POP
14616: POP
// ResAllTechs ( 6 , building , 3 ) ;
14617: LD_INT 6
14619: PPUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 3
14627: PPUSH
14628: CALL 5951 0 3
// ruPLab = building ;
14632: LD_ADDR_EXP 22
14636: PUSH
14637: LD_VAR 0 1
14641: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 266
14651: PUSH
14652: LD_INT 2
14654: EQUAL
14655: PUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 255
14665: PUSH
14666: LD_INT 6
14668: EQUAL
14669: AND
14670: IFFALSE 14721
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_VAR 0 8
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: CALL_OW 313
14690: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14691: LD_VAR 0 5
14695: PPUSH
14696: CALL_OW 121
// wait ( 0 0$1 ) ;
14700: LD_INT 35
14702: PPUSH
14703: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14707: LD_VAR 0 5
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 266
14730: PUSH
14731: LD_INT 32
14733: EQUAL
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 255
14744: PUSH
14745: LD_INT 6
14747: EQUAL
14748: AND
14749: IFFALSE 14801
// begin ComPlaceWeapon ( building , 42 ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_INT 42
14758: PPUSH
14759: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14763: LD_VAR 0 7
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: CALL_OW 122
// wait ( 0 0$1 ) ;
14776: LD_INT 35
14778: PPUSH
14779: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14783: LD_VAR 0 7
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 266
14810: PUSH
14811: LD_INT 31
14813: EQUAL
14814: PUSH
14815: LD_VAR 0 1
14819: PPUSH
14820: CALL_OW 255
14824: PUSH
14825: LD_INT 6
14827: EQUAL
14828: AND
14829: IFFALSE 14895
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14831: LD_VAR 0 7
14835: PUSH
14836: LD_INT 2
14838: ARRAY
14839: PPUSH
14840: CALL_OW 122
// wait ( 0 0$1 ) ;
14844: LD_INT 35
14846: PPUSH
14847: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14851: LD_VAR 0 7
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: PPUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14869: LD_VAR 0 4
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: PPUSH
14878: LD_EXP 21
14882: PPUSH
14883: CALL_OW 120
// baseReadyToBuild = 2 ;
14887: LD_ADDR_EXP 20
14891: PUSH
14892: LD_INT 2
14894: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14895: LD_VAR 0 1
14899: PPUSH
14900: CALL_OW 266
14904: PUSH
14905: LD_INT 32
14907: EQUAL
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 255
14918: PUSH
14919: LD_INT 1
14921: EQUAL
14922: AND
14923: PUSH
14924: LD_EXP 32
14928: PUSH
14929: LD_INT 0
14931: EQUAL
14932: AND
14933: IFFALSE 15178
// begin bunkerDialog = 1 ;
14935: LD_ADDR_EXP 32
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14943: LD_EXP 11
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14968
// Say ( Claptopn , D11-Eng1-1 ) else
14954: LD_EXP 11
14958: PPUSH
14959: LD_STRING D11-Eng1-1
14961: PPUSH
14962: CALL_OW 88
14966: GO 15164
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14968: LD_INT 22
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: PUSH
15019: LD_EXP 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: GREATER
15030: DIFF
15031: IFFALSE 15105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15033: LD_INT 22
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 21
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 25
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 26
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 69
15083: PUSH
15084: LD_EXP 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: DIFF
15092: PPUSH
15093: LD_STRING D11-Eng1-1
15095: PPUSH
15096: LD_STRING D11-Eng1-1
15098: PPUSH
15099: CALL 4598 0 3
15103: GO 15164
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15105: LD_INT 22
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 26
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: PUSH
15145: LD_EXP 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: DIFF
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: LD_STRING D11-Eng1-1
15159: PPUSH
15160: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15164: LD_EXP 33
15168: PUSH
15169: LD_INT 0
15171: EQUAL
15172: IFFALSE 15178
// EnergyDialog ;
15174: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15178: LD_VAR 0 1
15182: PPUSH
15183: CALL_OW 266
15187: PUSH
15188: LD_INT 29
15190: EQUAL
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 255
15201: PUSH
15202: LD_INT 1
15204: EQUAL
15205: AND
15206: IFFALSE 15216
// buildOil = 1 ;
15208: LD_ADDR_EXP 34
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 266
15225: PUSH
15226: LD_INT 26
15228: EQUAL
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: AND
15244: IFFALSE 15254
// buildPower = 1 ;
15246: LD_ADDR_EXP 35
15250: PUSH
15251: LD_INT 1
15253: ST_TO_ADDR
// end ;
15254: PPOPN 8
15256: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 266
15266: PUSH
15267: LD_INT 3
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 255
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: PUSH
15286: LD_EXP 31
15290: PUSH
15291: LD_INT 0
15293: EQUAL
15294: AND
15295: IFFALSE 15643
// begin factoryDialog = 1 ;
15297: LD_ADDR_EXP 31
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15305: LD_INT 47
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 321
15315: PUSH
15316: LD_INT 1
15318: EQUAL
15319: PUSH
15320: LD_INT 45
15322: PPUSH
15323: LD_INT 1
15325: PPUSH
15326: CALL_OW 321
15330: PUSH
15331: LD_INT 1
15333: EQUAL
15334: AND
15335: IFFALSE 15643
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15337: LD_INT 22
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 30
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 24
15369: PUSH
15370: LD_INT 1000
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: PUSH
15388: LD_INT 1
15390: ARRAY
15391: PPUSH
15392: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15396: LD_EXP 1
15400: PPUSH
15401: LD_STRING D9a-JMM-1
15403: PPUSH
15404: CALL_OW 88
// if IsOK ( Campell ) then
15408: LD_EXP 12
15412: PPUSH
15413: CALL_OW 302
15417: IFFALSE 15433
// Say ( Campell , D9a-Mech1-1 ) else
15419: LD_EXP 12
15423: PPUSH
15424: LD_STRING D9a-Mech1-1
15426: PPUSH
15427: CALL_OW 88
15431: GO 15629
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15433: LD_INT 22
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 25
15455: PUSH
15456: LD_INT 3
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 26
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PUSH
15484: LD_EXP 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: PUSH
15492: LD_INT 0
15494: GREATER
15495: DIFF
15496: IFFALSE 15570
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15498: LD_INT 22
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: PUSH
15549: LD_EXP 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: DIFF
15557: PPUSH
15558: LD_STRING D9a-Mech1-1
15560: PPUSH
15561: LD_STRING D9a-Mech1-1
15563: PPUSH
15564: CALL 4598 0 3
15568: GO 15629
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15570: LD_INT 22
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 26
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: PUSH
15610: LD_EXP 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: DIFF
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: LD_STRING D9a-Mech1-1
15624: PPUSH
15625: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15629: LD_EXP 33
15633: PUSH
15634: LD_INT 0
15636: EQUAL
15637: IFFALSE 15643
// EnergyDialog ;
15639: CALL 5003 0 0
// end ; end ; end ;
15643: PPOPN 1
15645: END
// on UnitDestroyed ( unit ) do var mech ;
15646: LD_INT 0
15648: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL 35605 0 1
// if unit = JMM then
15658: LD_VAR 0 1
15662: PUSH
15663: LD_EXP 1
15667: EQUAL
15668: IFFALSE 15677
// YouLost ( JMM ) ;
15670: LD_STRING JMM
15672: PPUSH
15673: CALL_OW 104
// if unit = ambdept0 then
15677: LD_VAR 0 1
15681: PUSH
15682: LD_INT 4
15684: EQUAL
15685: IFFALSE 15694
// YouLost ( Base ) ;
15687: LD_STRING Base
15689: PPUSH
15690: CALL_OW 104
// if unit in ruMobile then
15694: LD_VAR 0 1
15698: PUSH
15699: LD_EXP 46
15703: IN
15704: IFFALSE 15722
// ruMobile = ruMobile diff ruMobile ;
15706: LD_ADDR_EXP 46
15710: PUSH
15711: LD_EXP 46
15715: PUSH
15716: LD_EXP 46
15720: DIFF
15721: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 247
15731: PUSH
15732: LD_INT 1
15734: EQUAL
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 255
15745: PUSH
15746: LD_INT 1
15748: EQUAL
15749: AND
15750: IFFALSE 15766
// lostCounter = lostCounter + 1 ;
15752: LD_ADDR_EXP 38
15756: PUSH
15757: LD_EXP 38
15761: PUSH
15762: LD_INT 1
15764: PLUS
15765: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15766: LD_EXP 43
15770: PUSH
15771: LD_INT 24
15773: PPUSH
15774: CALL_OW 313
15778: PUSH
15779: LD_INT 6
15781: LESS
15782: AND
15783: PUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 257
15793: PUSH
15794: LD_INT 3
15796: EQUAL
15797: AND
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 255
15808: PUSH
15809: LD_INT 3
15811: EQUAL
15812: AND
15813: PUSH
15814: LD_INT 24
15816: PPUSH
15817: CALL_OW 302
15821: AND
15822: PUSH
15823: LD_INT 24
15825: PPUSH
15826: CALL_OW 255
15830: PUSH
15831: LD_INT 3
15833: EQUAL
15834: AND
15835: IFFALSE 15964
// begin ruMech := ruMech - 1 ;
15837: LD_ADDR_EXP 43
15841: PUSH
15842: LD_EXP 43
15846: PUSH
15847: LD_INT 1
15849: MINUS
15850: ST_TO_ADDR
// if ruMech = 0 then
15851: LD_EXP 43
15855: PUSH
15856: LD_INT 0
15858: EQUAL
15859: IFFALSE 15863
// exit ;
15861: GO 15964
// wait ( 0 0$40 ) ;
15863: LD_INT 1400
15865: PPUSH
15866: CALL_OW 67
// uc_side = 3 ;
15870: LD_ADDR_OWVAR 20
15874: PUSH
15875: LD_INT 3
15877: ST_TO_ADDR
// uc_nation = 3 ;
15878: LD_ADDR_OWVAR 21
15882: PUSH
15883: LD_INT 3
15885: ST_TO_ADDR
// hc_gallery :=  ;
15886: LD_ADDR_OWVAR 33
15890: PUSH
15891: LD_STRING 
15893: ST_TO_ADDR
// hc_name :=  ;
15894: LD_ADDR_OWVAR 26
15898: PUSH
15899: LD_STRING 
15901: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15902: LD_INT 0
15904: PPUSH
15905: LD_EXP 16
15909: PPUSH
15910: LD_EXP 17
15914: PPUSH
15915: CALL_OW 12
15919: PPUSH
15920: CALL_OW 383
// mech := CreateHuman ;
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: CALL_OW 44
15933: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 124
15941: PPUSH
15942: LD_INT 97
15944: PPUSH
15945: LD_INT 0
15947: PPUSH
15948: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15952: LD_VAR 0 2
15956: PPUSH
15957: LD_INT 24
15959: PPUSH
15960: CALL_OW 120
// end ; end ;
15964: PPOPN 2
15966: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15967: LD_INT 0
15969: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL 35725 0 2
// if GetSide ( vehicle ) = 1 then
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 255
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 16013
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15999: LD_ADDR_EXP 42
16003: PUSH
16004: LD_EXP 42
16008: PUSH
16009: LD_INT 1
16011: PLUS
16012: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 255
16022: PUSH
16023: LD_INT 3
16025: EQUAL
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 264
16036: PUSH
16037: LD_INT 42
16039: PUSH
16040: LD_INT 43
16042: PUSH
16043: LD_INT 44
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: IN
16051: AND
16052: IFFALSE 16070
// ruMobile := ruMobile union vehicle ;
16054: LD_ADDR_EXP 46
16058: PUSH
16059: LD_EXP 46
16063: PUSH
16064: LD_VAR 0 1
16068: UNION
16069: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 264
16079: PUSH
16080: LD_INT 53
16082: EQUAL
16083: IFFALSE 16219
// begin uc_side = 3 ;
16085: LD_ADDR_OWVAR 20
16089: PUSH
16090: LD_INT 3
16092: ST_TO_ADDR
// uc_nation = 3 ;
16093: LD_ADDR_OWVAR 21
16097: PUSH
16098: LD_INT 3
16100: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16101: LD_INT 0
16103: PPUSH
16104: LD_EXP 17
16108: PPUSH
16109: CALL_OW 383
// driver := CreateHuman ;
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: CALL_OW 44
16122: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_VAR 0 2
16132: PPUSH
16133: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_INT 21
16144: PPUSH
16145: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16149: LD_INT 35
16151: PPUSH
16152: CALL_OW 67
// until not HasTask ( vehicle ) ;
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 314
16165: NOT
16166: IFFALSE 16149
// driver := IsDrivenBy ( vehicle ) ;
16168: LD_ADDR_VAR 0 3
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 311
16182: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 104
16190: PPUSH
16191: LD_INT 73
16193: PPUSH
16194: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16198: LD_VAR 0 3
16202: PPUSH
16203: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_INT 24
16214: PPUSH
16215: CALL_OW 180
// end ; end ;
16219: PPOPN 3
16221: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 255
16231: PUSH
16232: LD_INT 3
16234: EQUAL
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 247
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: AND
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 264
16260: PUSH
16261: LD_INT 42
16263: PUSH
16264: LD_INT 43
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: IN
16275: AND
16276: IFFALSE 16325
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16278: LD_INT 24
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 265
16290: PPUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 262
16300: PPUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 263
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 264
16320: PPUSH
16321: CALL_OW 185
// end ;
16325: PPOPN 1
16327: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 255
16337: PUSH
16338: LD_INT 3
16340: EQUAL
16341: PUSH
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: LD_INT 3
16354: EQUAL
16355: AND
16356: PUSH
16357: LD_INT 24
16359: PPUSH
16360: CALL_OW 302
16364: AND
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 302
16375: NOT
16376: AND
16377: IFFALSE 16391
// ComEnterUnit ( human , rubfact0 ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 24
16386: PPUSH
16387: CALL_OW 120
// end ;
16391: PPOPN 2
16393: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 5 then
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 255
16403: PUSH
16404: LD_INT 5
16406: EQUAL
16407: IFFALSE 16481
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16409: LD_VAR 0 1
16413: PPUSH
16414: LD_INT 125
16416: PPUSH
16417: LD_INT 97
16419: PPUSH
16420: CALL_OW 111
// wait ( 0 0$1 ) ;
16424: LD_INT 35
16426: PPUSH
16427: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16431: LD_VAR 0 1
16435: PPUSH
16436: CALL_OW 301
16440: PUSH
16441: LD_VAR 0 1
16445: PPUSH
16446: LD_INT 125
16448: PPUSH
16449: LD_INT 97
16451: PPUSH
16452: CALL_OW 307
16456: OR
16457: IFFALSE 16409
// if IsDead ( driver ) then
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 301
16468: IFFALSE 16472
// exit ;
16470: GO 16481
// RemoveUnit ( driver ) ;
16472: LD_VAR 0 1
16476: PPUSH
16477: CALL_OW 64
// end ; end ;
16481: PPOPN 4
16483: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16484: LD_VAR 0 1
16488: PUSH
16489: LD_INT 24
16491: EQUAL
16492: PUSH
16493: LD_VAR 0 2
16497: PPUSH
16498: CALL_OW 256
16502: PUSH
16503: LD_INT 1000
16505: LESS
16506: AND
16507: IFFALSE 16521
// SetLives ( un , 1000 ) ;
16509: LD_VAR 0 2
16513: PPUSH
16514: LD_INT 1000
16516: PPUSH
16517: CALL_OW 234
// end ;
16521: PPOPN 2
16523: END
// on Command ( comandid ) do var i , j , tmp ;
16524: LD_INT 0
16526: PPUSH
16527: PPUSH
16528: PPUSH
// begin SOS_Command ( comandid ) ;
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL 35709 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16538: LD_INT 22
16540: PUSH
16541: LD_INT 4
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: NOT
16553: IFFALSE 16557
// exit ;
16555: GO 16722
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16557: LD_ADDR_VAR 0 2
16561: PUSH
16562: LD_INT 22
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 2
16574: PUSH
16575: LD_INT 21
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 21
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: PUSH
16609: FOR_IN
16610: IFFALSE 16720
// begin if GetTaskList ( i ) > 0 then
16612: LD_VAR 0 2
16616: PPUSH
16617: CALL_OW 437
16621: PUSH
16622: LD_INT 0
16624: GREATER
16625: IFFALSE 16718
// begin for j = 1 to GetTaskList ( i ) do
16627: LD_ADDR_VAR 0 3
16631: PUSH
16632: DOUBLE
16633: LD_INT 1
16635: DEC
16636: ST_TO_ADDR
16637: LD_VAR 0 2
16641: PPUSH
16642: CALL_OW 437
16646: PUSH
16647: FOR_TO
16648: IFFALSE 16716
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16650: LD_ADDR_VAR 0 4
16654: PUSH
16655: LD_VAR 0 2
16659: PPUSH
16660: CALL_OW 437
16664: PUSH
16665: LD_VAR 0 3
16669: ARRAY
16670: PUSH
16671: LD_INT 4
16673: ARRAY
16674: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16675: LD_VAR 0 4
16679: PPUSH
16680: CALL_OW 255
16684: PUSH
16685: LD_INT 4
16687: EQUAL
16688: PUSH
16689: LD_VAR 0 4
16693: PPUSH
16694: CALL_OW 255
16698: PUSH
16699: LD_INT 0
16701: EQUAL
16702: OR
16703: IFFALSE 16714
// ComStop ( i ) ;
16705: LD_VAR 0 2
16709: PPUSH
16710: CALL_OW 141
// end ;
16714: GO 16647
16716: POP
16717: POP
// end ; end ;
16718: GO 16609
16720: POP
16721: POP
// end ; end_of_file
16722: PPOPN 4
16724: END
// every 10 10$0 do
16725: GO 16727
16727: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16728: LD_INT 5
16730: PPUSH
16731: LD_INT 3
16733: PPUSH
16734: LD_INT 2
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 3
16742: PUSH
16743: LD_INT 4
16745: PUSH
16746: LD_INT 4
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: LD_OWVAR 67
16759: ARRAY
16760: PLUS
16761: PPUSH
16762: LD_INT 0
16764: PPUSH
16765: LD_EXP 16
16769: PPUSH
16770: LD_EXP 17
16774: PPUSH
16775: CALL_OW 12
16779: PPUSH
16780: LD_INT 4
16782: PPUSH
16783: LD_INT 14
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: LD_INT 2
16791: PPUSH
16792: CALL 6960 0 9
16796: END
// every 20 20$0 do
16797: GO 16799
16799: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16800: LD_INT 5
16802: PPUSH
16803: LD_INT 3
16805: PPUSH
16806: LD_INT 4
16808: PUSH
16809: LD_INT 2
16811: PUSH
16812: LD_INT 3
16814: PUSH
16815: LD_INT 4
16817: PUSH
16818: LD_INT 5
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: PUSH
16827: LD_OWVAR 67
16831: ARRAY
16832: PLUS
16833: PPUSH
16834: LD_INT 2
16836: PPUSH
16837: LD_EXP 16
16841: PPUSH
16842: LD_EXP 17
16846: PPUSH
16847: CALL_OW 12
16851: PPUSH
16852: LD_INT 4
16854: PPUSH
16855: LD_INT 14
16857: PPUSH
16858: LD_INT 1
16860: PPUSH
16861: LD_INT 1
16863: PPUSH
16864: CALL 6960 0 9
16868: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16869: GO 16871
16871: DISABLE
16872: LD_INT 0
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
// begin hex := [ 123 , 95 ] ;
16879: LD_ADDR_VAR 0 4
16883: PUSH
16884: LD_INT 123
16886: PUSH
16887: LD_INT 95
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: ST_TO_ADDR
// tmp := [ ] ;
16894: LD_ADDR_VAR 0 5
16898: PUSH
16899: EMPTY
16900: ST_TO_ADDR
// if Difficulty > 1 then
16901: LD_OWVAR 67
16905: PUSH
16906: LD_INT 1
16908: GREATER
16909: IFFALSE 16919
// specAttack := true ;
16911: LD_ADDR_EXP 47
16915: PUSH
16916: LD_INT 1
16918: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16919: LD_ADDR_VAR 0 1
16923: PUSH
16924: DOUBLE
16925: LD_INT 1
16927: DEC
16928: ST_TO_ADDR
16929: LD_INT 4
16931: PUSH
16932: LD_INT 5
16934: PUSH
16935: LD_INT 6
16937: PUSH
16938: LD_INT 7
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: LD_OWVAR 67
16951: ARRAY
16952: PUSH
16953: FOR_TO
16954: IFFALSE 17256
// begin uc_side := 5 ;
16956: LD_ADDR_OWVAR 20
16960: PUSH
16961: LD_INT 5
16963: ST_TO_ADDR
// uc_nation := 3 ;
16964: LD_ADDR_OWVAR 21
16968: PUSH
16969: LD_INT 3
16971: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16972: LD_ADDR_OWVAR 37
16976: PUSH
16977: LD_INT 21
16979: PUSH
16980: LD_INT 22
16982: PUSH
16983: LD_INT 23
16985: PUSH
16986: LD_INT 24
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: LD_VAR 0 1
16999: PUSH
17000: LD_OWVAR 67
17004: MOD
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: ARRAY
17010: ST_TO_ADDR
// vc_engine := engine_combustion ;
17011: LD_ADDR_OWVAR 39
17015: PUSH
17016: LD_INT 1
17018: ST_TO_ADDR
// vc_control := control_manual ;
17019: LD_ADDR_OWVAR 38
17023: PUSH
17024: LD_INT 1
17026: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
17027: LD_ADDR_OWVAR 40
17031: PUSH
17032: LD_INT 42
17034: PUSH
17035: LD_INT 43
17037: PUSH
17038: LD_INT 44
17040: PUSH
17041: LD_INT 44
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: PUSH
17050: LD_VAR 0 1
17054: PUSH
17055: LD_OWVAR 67
17059: MOD
17060: PUSH
17061: LD_INT 1
17063: PLUS
17064: ARRAY
17065: ST_TO_ADDR
// veh := CreateVehicle ;
17066: LD_ADDR_VAR 0 3
17070: PUSH
17071: CALL_OW 45
17075: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17076: LD_VAR 0 3
17080: PPUSH
17081: LD_INT 5
17083: PPUSH
17084: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17088: LD_INT 35
17090: PPUSH
17091: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17095: LD_VAR 0 4
17099: PUSH
17100: LD_INT 1
17102: ARRAY
17103: PPUSH
17104: LD_VAR 0 4
17108: PUSH
17109: LD_INT 2
17111: ARRAY
17112: PPUSH
17113: CALL_OW 428
17117: PUSH
17118: LD_INT 0
17120: EQUAL
17121: IFFALSE 17088
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17123: LD_VAR 0 3
17127: PPUSH
17128: LD_VAR 0 4
17132: PUSH
17133: LD_INT 1
17135: ARRAY
17136: PPUSH
17137: LD_VAR 0 4
17141: PUSH
17142: LD_INT 2
17144: ARRAY
17145: PPUSH
17146: LD_INT 0
17148: PPUSH
17149: CALL_OW 48
// uc_side := 5 ;
17153: LD_ADDR_OWVAR 20
17157: PUSH
17158: LD_INT 5
17160: ST_TO_ADDR
// uc_nation := 3 ;
17161: LD_ADDR_OWVAR 21
17165: PUSH
17166: LD_INT 3
17168: ST_TO_ADDR
// InitHC_All ( ) ;
17169: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17173: LD_INT 0
17175: PPUSH
17176: LD_INT 2
17178: PUSH
17179: LD_OWVAR 67
17183: PLUS
17184: PPUSH
17185: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17189: CALL_OW 44
17193: PPUSH
17194: LD_VAR 0 3
17198: PPUSH
17199: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_INT 101
17210: PPUSH
17211: LD_INT 77
17213: PPUSH
17214: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17218: LD_ADDR_VAR 0 5
17222: PUSH
17223: LD_VAR 0 5
17227: PPUSH
17228: LD_VAR 0 5
17232: PUSH
17233: LD_INT 1
17235: PLUS
17236: PPUSH
17237: LD_VAR 0 3
17241: PPUSH
17242: CALL_OW 1
17246: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17247: LD_INT 105
17249: PPUSH
17250: CALL_OW 67
// end ;
17254: GO 16953
17256: POP
17257: POP
// repeat wait ( 0 0$1 ) ;
17258: LD_INT 35
17260: PPUSH
17261: CALL_OW 67
// for i in tmp do
17265: LD_ADDR_VAR 0 1
17269: PUSH
17270: LD_VAR 0 5
17274: PUSH
17275: FOR_IN
17276: IFFALSE 17344
// if not IsOk ( i ) then
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 302
17287: NOT
17288: IFFALSE 17308
// tmp := tmp diff i else
17290: LD_ADDR_VAR 0 5
17294: PUSH
17295: LD_VAR 0 5
17299: PUSH
17300: LD_VAR 0 1
17304: DIFF
17305: ST_TO_ADDR
17306: GO 17342
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17308: LD_VAR 0 1
17312: PPUSH
17313: LD_INT 22
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: PPUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 74
17337: PPUSH
17338: CALL_OW 115
17342: GO 17275
17344: POP
17345: POP
// until not tmp ;
17346: LD_VAR 0 5
17350: NOT
17351: IFFALSE 17258
// end ;
17353: PPOPN 5
17355: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17356: LD_EXP 47
17360: IFFALSE 17738
17362: GO 17364
17364: DISABLE
17365: LD_INT 0
17367: PPUSH
17368: PPUSH
17369: PPUSH
17370: PPUSH
// begin wait ( 0 0$20 ) ;
17371: LD_INT 700
17373: PPUSH
17374: CALL_OW 67
// uc_side := 5 ;
17378: LD_ADDR_OWVAR 20
17382: PUSH
17383: LD_INT 5
17385: ST_TO_ADDR
// uc_nation := 3 ;
17386: LD_ADDR_OWVAR 21
17390: PUSH
17391: LD_INT 3
17393: ST_TO_ADDR
// InitHc ;
17394: CALL_OW 19
// hc_importance := 0 ;
17398: LD_ADDR_OWVAR 32
17402: PUSH
17403: LD_INT 0
17405: ST_TO_ADDR
// tmp := [ ] ;
17406: LD_ADDR_VAR 0 2
17410: PUSH
17411: EMPTY
17412: ST_TO_ADDR
// InitHC_All ( ) ;
17413: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17417: LD_INT 0
17419: PPUSH
17420: LD_INT 2
17422: PPUSH
17423: LD_INT 6
17425: PPUSH
17426: CALL_OW 380
// eng := CreateHuman ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: CALL_OW 44
17439: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17440: LD_VAR 0 4
17444: PPUSH
17445: LD_INT 78
17447: PPUSH
17448: LD_INT 2
17450: PPUSH
17451: LD_INT 4
17453: PPUSH
17454: LD_INT 0
17456: PPUSH
17457: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: DOUBLE
17467: LD_INT 1
17469: DEC
17470: ST_TO_ADDR
17471: LD_INT 3
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 4
17479: PUSH
17480: LD_INT 5
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_OWVAR 67
17493: ARRAY
17494: PUSH
17495: FOR_TO
17496: IFFALSE 17585
// begin InitHC_All ( ) ;
17498: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17502: LD_INT 0
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: LD_INT 4
17510: PUSH
17511: LD_INT 5
17513: PUSH
17514: LD_INT 6
17516: PUSH
17517: LD_INT 6
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: PUSH
17526: LD_OWVAR 67
17530: ARRAY
17531: PPUSH
17532: CALL_OW 380
// un := CreateHuman ;
17536: LD_ADDR_VAR 0 1
17540: PUSH
17541: CALL_OW 44
17545: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17546: LD_VAR 0 1
17550: PPUSH
17551: LD_INT 78
17553: PPUSH
17554: LD_INT 2
17556: PPUSH
17557: LD_INT 4
17559: PPUSH
17560: LD_INT 0
17562: PPUSH
17563: CALL_OW 50
// tmp := tmp ^ un ;
17567: LD_ADDR_VAR 0 2
17571: PUSH
17572: LD_VAR 0 2
17576: PUSH
17577: LD_VAR 0 1
17581: ADD
17582: ST_TO_ADDR
// end ;
17583: GO 17495
17585: POP
17586: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17587: LD_VAR 0 2
17591: PPUSH
17592: LD_INT 49
17594: PPUSH
17595: LD_INT 3
17597: PPUSH
17598: CALL_OW 111
// wait ( 0 0$2 ) ;
17602: LD_INT 70
17604: PPUSH
17605: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17609: LD_VAR 0 4
17613: PPUSH
17614: LD_INT 49
17616: PPUSH
17617: LD_INT 3
17619: PPUSH
17620: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17624: LD_VAR 0 4
17628: PPUSH
17629: LD_INT 4
17631: PPUSH
17632: CALL_OW 227
// wait ( 0 0$10 ) ;
17636: LD_INT 350
17638: PPUSH
17639: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17643: LD_INT 35
17645: PPUSH
17646: CALL_OW 67
// for i in tmp do
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: LD_VAR 0 2
17659: PUSH
17660: FOR_IN
17661: IFFALSE 17729
// if not IsOk ( i ) then
17663: LD_VAR 0 3
17667: PPUSH
17668: CALL_OW 302
17672: NOT
17673: IFFALSE 17693
// tmp := tmp diff i else
17675: LD_ADDR_VAR 0 2
17679: PUSH
17680: LD_VAR 0 2
17684: PUSH
17685: LD_VAR 0 3
17689: DIFF
17690: ST_TO_ADDR
17691: GO 17727
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 22
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PPUSH
17708: CALL_OW 69
17712: PPUSH
17713: LD_VAR 0 3
17717: PPUSH
17718: CALL_OW 74
17722: PPUSH
17723: CALL_OW 115
17727: GO 17660
17729: POP
17730: POP
// until not tmp ;
17731: LD_VAR 0 2
17735: NOT
17736: IFFALSE 17643
// end ; end_of_file
17738: PPOPN 4
17740: END
// every 0 0$1 trigger startTimer = 1 do
17741: LD_EXP 30
17745: PUSH
17746: LD_INT 1
17748: EQUAL
17749: IFFALSE 17879
17751: GO 17753
17753: DISABLE
// begin enable ;
17754: ENABLE
// if timerStatus = 1 then
17755: LD_EXP 29
17759: PUSH
17760: LD_INT 1
17762: EQUAL
17763: IFFALSE 17796
// begin timeToSupport = timeToSupport - 0 0$01 ;
17765: LD_ADDR_EXP 28
17769: PUSH
17770: LD_EXP 28
17774: PUSH
17775: LD_INT 35
17777: MINUS
17778: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17779: LD_ADDR_OWVAR 47
17783: PUSH
17784: LD_STRING #Am04-1
17786: PUSH
17787: LD_EXP 28
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: ST_TO_ADDR
// end ; if timerStatus = 2 then
17796: LD_EXP 29
17800: PUSH
17801: LD_INT 2
17803: EQUAL
17804: IFFALSE 17837
// begin timeToSupport = timeToSupport - 0 0$01 ;
17806: LD_ADDR_EXP 28
17810: PUSH
17811: LD_EXP 28
17815: PUSH
17816: LD_INT 35
17818: MINUS
17819: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17820: LD_ADDR_OWVAR 47
17824: PUSH
17825: LD_STRING #Am04-2
17827: PUSH
17828: LD_EXP 28
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: ST_TO_ADDR
// end ; if timerStatus = 3 then
17837: LD_EXP 29
17841: PUSH
17842: LD_INT 3
17844: EQUAL
17845: IFFALSE 17861
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17847: LD_ADDR_EXP 27
17851: PUSH
17852: LD_EXP 27
17856: PUSH
17857: LD_INT 35
17859: MINUS
17860: ST_TO_ADDR
// if timerStatus = 4 then
17861: LD_EXP 29
17865: PUSH
17866: LD_INT 4
17868: EQUAL
17869: IFFALSE 17879
// display_strings =  ;
17871: LD_ADDR_OWVAR 47
17875: PUSH
17876: LD_STRING 
17878: ST_TO_ADDR
// end ; end_of_file
17879: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17880: LD_EXP 15
17884: PPUSH
17885: CALL_OW 301
17889: PUSH
17890: LD_INT 22
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 21
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PPUSH
17914: CALL_OW 69
17918: PUSH
17919: LD_INT 14
17921: PUSH
17922: LD_INT 13
17924: PUSH
17925: LD_INT 12
17927: PUSH
17928: LD_INT 11
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: PUSH
17937: LD_OWVAR 67
17941: ARRAY
17942: LESS
17943: AND
17944: IFFALSE 18530
17946: GO 17948
17948: DISABLE
17949: LD_INT 0
17951: PPUSH
17952: PPUSH
17953: PPUSH
// begin AIEnable = 0 ;
17954: LD_ADDR_EXP 37
17958: PUSH
17959: LD_INT 0
17961: ST_TO_ADDR
// escapeAvalaible = 1 ;
17962: LD_ADDR_EXP 40
17966: PUSH
17967: LD_INT 1
17969: ST_TO_ADDR
// Video ( true ) ;
17970: LD_INT 1
17972: PPUSH
17973: CALL 78007 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17977: LD_INT 3
17979: PPUSH
17980: LD_INT 1
17982: PPUSH
17983: LD_INT 1
17985: PPUSH
17986: LD_INT 0
17988: PPUSH
17989: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17993: LD_INT 6
17995: PPUSH
17996: LD_INT 1
17998: PPUSH
17999: LD_INT 1
18001: PPUSH
18002: LD_INT 0
18004: PPUSH
18005: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18009: LD_INT 5
18011: PPUSH
18012: LD_INT 1
18014: PPUSH
18015: LD_INT 1
18017: PPUSH
18018: LD_INT 0
18020: PPUSH
18021: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18025: LD_INT 3
18027: PPUSH
18028: LD_INT 1
18030: PPUSH
18031: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18035: LD_INT 97
18037: PPUSH
18038: LD_INT 91
18040: PPUSH
18041: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18045: LD_INT 22
18047: PUSH
18048: LD_INT 3
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 21
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: PPUSH
18074: CALL_OW 121
// wait ( 0 0$01 ) ;
18078: LD_INT 35
18080: PPUSH
18081: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18085: LD_INT 22
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 21
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_INT 124
18116: PPUSH
18117: LD_INT 98
18119: PPUSH
18120: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18124: LD_INT 22
18126: PUSH
18127: LD_INT 5
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 21
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PPUSH
18148: CALL_OW 69
18152: PPUSH
18153: CALL_OW 121
// wait ( 0 0$01 ) ;
18157: LD_INT 35
18159: PPUSH
18160: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18164: LD_INT 22
18166: PUSH
18167: LD_INT 5
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 21
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PPUSH
18188: CALL_OW 69
18192: PPUSH
18193: LD_INT 124
18195: PPUSH
18196: LD_INT 98
18198: PPUSH
18199: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18203: LD_INT 22
18205: PUSH
18206: LD_INT 6
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 21
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PPUSH
18227: CALL_OW 69
18231: PPUSH
18232: CALL_OW 121
// wait ( 0 0$01 ) ;
18236: LD_INT 35
18238: PPUSH
18239: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18243: LD_INT 22
18245: PUSH
18246: LD_INT 6
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PPUSH
18267: CALL_OW 69
18271: PPUSH
18272: LD_INT 124
18274: PPUSH
18275: LD_INT 98
18277: PPUSH
18278: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18282: LD_INT 22
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 21
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PPUSH
18306: CALL_OW 69
18310: PPUSH
18311: LD_INT 124
18313: PPUSH
18314: LD_INT 96
18316: PPUSH
18317: CALL_OW 114
// wait ( 0 0$1 ) ;
18321: LD_INT 35
18323: PPUSH
18324: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18328: LD_INT 124
18330: PPUSH
18331: LD_INT 96
18333: PPUSH
18334: CALL_OW 84
// p := 0 0$0 ;
18338: LD_ADDR_VAR 0 3
18342: PUSH
18343: LD_INT 0
18345: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18346: LD_ADDR_VAR 0 2
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: LD_INT 22
18356: PUSH
18357: LD_INT 3
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 22
18366: PUSH
18367: LD_INT 6
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 21
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 69
18397: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18398: LD_INT 35
18400: PPUSH
18401: CALL_OW 67
// p := p + 0 0$1 ;
18405: LD_ADDR_VAR 0 3
18409: PUSH
18410: LD_VAR 0 3
18414: PUSH
18415: LD_INT 35
18417: PLUS
18418: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18419: LD_VAR 0 2
18423: PPUSH
18424: LD_INT 5
18426: PPUSH
18427: CALL_OW 113
// for i in tmp do
18431: LD_ADDR_VAR 0 1
18435: PUSH
18436: LD_VAR 0 2
18440: PUSH
18441: FOR_IN
18442: IFFALSE 18469
// if IsInArea ( tmp , RussianEscape ) then
18444: LD_VAR 0 2
18448: PPUSH
18449: LD_INT 5
18451: PPUSH
18452: CALL_OW 308
18456: IFFALSE 18467
// RemoveUnit ( i ) ;
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL_OW 64
18467: GO 18441
18469: POP
18470: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18471: LD_INT 23
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 21
18483: PUSH
18484: LD_INT 1
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 24
18493: PUSH
18494: LD_INT 250
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: LIST
18505: PPUSH
18506: CALL_OW 69
18510: PUSH
18511: LD_INT 0
18513: EQUAL
18514: PUSH
18515: LD_VAR 0 3
18519: PUSH
18520: LD_INT 245
18522: GREATEREQUAL
18523: OR
18524: IFFALSE 18398
// FinishMission ;
18526: CALL 18533 0 0
// end ;
18530: PPOPN 3
18532: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18533: LD_INT 0
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
// if not vehicleProduceCounter then
18540: LD_EXP 42
18544: NOT
18545: IFFALSE 18554
// SetAchievement ( ACH_INFANTRY ) ;
18547: LD_STRING ACH_INFANTRY
18549: PPUSH
18550: CALL_OW 543
// if tick <= 20 20$00 then
18554: LD_OWVAR 1
18558: PUSH
18559: LD_INT 42000
18561: LESSEQUAL
18562: IFFALSE 18578
// begin wait ( 3 ) ;
18564: LD_INT 3
18566: PPUSH
18567: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18571: LD_STRING ACH_ASPEED_4
18573: PPUSH
18574: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18578: LD_INT 22
18580: PPUSH
18581: CALL 19236 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18585: LD_INT 69
18587: PPUSH
18588: LD_INT 1
18590: PPUSH
18591: CALL_OW 321
18595: PPUSH
18596: LD_STRING GatlingInGamma
18598: PPUSH
18599: CALL_OW 39
// m1 := false ;
18603: LD_ADDR_VAR 0 3
18607: PUSH
18608: LD_INT 0
18610: ST_TO_ADDR
// m2 := false ;
18611: LD_ADDR_VAR 0 4
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// m3 := false ;
18619: LD_ADDR_VAR 0 5
18623: PUSH
18624: LD_INT 0
18626: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18627: LD_EXP 34
18631: PUSH
18632: LD_INT 1
18634: EQUAL
18635: PUSH
18636: LD_EXP 35
18640: PUSH
18641: LD_INT 1
18643: EQUAL
18644: AND
18645: IFFALSE 18667
// begin AddMedal ( oil , 1 ) ;
18647: LD_STRING oil
18649: PPUSH
18650: LD_INT 1
18652: PPUSH
18653: CALL_OW 101
// m1 := true ;
18657: LD_ADDR_VAR 0 3
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// end else
18665: GO 18760
// begin if buildOil = 1 and buildPower = 0 then
18667: LD_EXP 34
18671: PUSH
18672: LD_INT 1
18674: EQUAL
18675: PUSH
18676: LD_EXP 35
18680: PUSH
18681: LD_INT 0
18683: EQUAL
18684: AND
18685: IFFALSE 18698
// AddMedal ( oil , - 1 ) ;
18687: LD_STRING oil
18689: PPUSH
18690: LD_INT 1
18692: NEG
18693: PPUSH
18694: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18698: LD_EXP 34
18702: PUSH
18703: LD_INT 0
18705: EQUAL
18706: PUSH
18707: LD_EXP 35
18711: PUSH
18712: LD_INT 1
18714: EQUAL
18715: AND
18716: IFFALSE 18729
// AddMedal ( oil , - 2 ) ;
18718: LD_STRING oil
18720: PPUSH
18721: LD_INT 2
18723: NEG
18724: PPUSH
18725: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18729: LD_EXP 34
18733: PUSH
18734: LD_INT 0
18736: EQUAL
18737: PUSH
18738: LD_EXP 35
18742: PUSH
18743: LD_INT 0
18745: EQUAL
18746: AND
18747: IFFALSE 18760
// AddMedal ( oil , - 3 ) ;
18749: LD_STRING oil
18751: PPUSH
18752: LD_INT 3
18754: NEG
18755: PPUSH
18756: CALL_OW 101
// end ; if lostCounter > 3 then
18760: LD_EXP 38
18764: PUSH
18765: LD_INT 3
18767: GREATER
18768: IFFALSE 18783
// AddMedal ( deaths , - 1 ) else
18770: LD_STRING deaths
18772: PPUSH
18773: LD_INT 1
18775: NEG
18776: PPUSH
18777: CALL_OW 101
18781: GO 18801
// begin AddMedal ( deaths , 1 ) ;
18783: LD_STRING deaths
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 101
// m2 := true ;
18793: LD_ADDR_VAR 0 4
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// end ; if honor = 1 then
18801: LD_EXP 39
18805: PUSH
18806: LD_INT 1
18808: EQUAL
18809: IFFALSE 18831
// begin AddMedal ( honour , 1 ) ;
18811: LD_STRING honour
18813: PPUSH
18814: LD_INT 1
18816: PPUSH
18817: CALL_OW 101
// m3 := true ;
18821: LD_ADDR_VAR 0 5
18825: PUSH
18826: LD_INT 1
18828: ST_TO_ADDR
// end else
18829: GO 18842
// AddMedal ( honour , - 1 ) ;
18831: LD_STRING honour
18833: PPUSH
18834: LD_INT 1
18836: NEG
18837: PPUSH
18838: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18842: LD_VAR 0 3
18846: PUSH
18847: LD_VAR 0 4
18851: AND
18852: PUSH
18853: LD_VAR 0 5
18857: AND
18858: PUSH
18859: LD_OWVAR 67
18863: PUSH
18864: LD_INT 3
18866: GREATEREQUAL
18867: AND
18868: IFFALSE 18880
// SetAchievementEX ( ACH_AMER , 4 ) ;
18870: LD_STRING ACH_AMER
18872: PPUSH
18873: LD_INT 4
18875: PPUSH
18876: CALL_OW 564
// GiveMedals ( Main ) ;
18880: LD_STRING Main
18882: PPUSH
18883: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18887: LD_INT 22
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL_OW 69
18926: PPUSH
18927: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18931: LD_EXP 1
18935: PPUSH
18936: LD_EXP 48
18940: PUSH
18941: LD_STRING JMM
18943: STR
18944: PPUSH
18945: CALL_OW 38
// if IsOK ( Bobby ) then
18949: LD_EXP 2
18953: PPUSH
18954: CALL_OW 302
18958: IFFALSE 18978
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18960: LD_EXP 2
18964: PPUSH
18965: LD_EXP 48
18969: PUSH
18970: LD_STRING Bobby
18972: STR
18973: PPUSH
18974: CALL_OW 38
// if IsOK ( Cyrus ) then
18978: LD_EXP 3
18982: PPUSH
18983: CALL_OW 302
18987: IFFALSE 19007
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18989: LD_EXP 3
18993: PPUSH
18994: LD_EXP 48
18998: PUSH
18999: LD_STRING Cyrus
19001: STR
19002: PPUSH
19003: CALL_OW 38
// if IsOK ( Lisa ) then
19007: LD_EXP 4
19011: PPUSH
19012: CALL_OW 302
19016: IFFALSE 19036
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19018: LD_EXP 4
19022: PPUSH
19023: LD_EXP 48
19027: PUSH
19028: LD_STRING Lisa
19030: STR
19031: PPUSH
19032: CALL_OW 38
// if IsOK ( Brown ) then
19036: LD_EXP 7
19040: PPUSH
19041: CALL_OW 302
19045: IFFALSE 19072
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
19047: LD_STRING enableBioCharacter(BIO_JEFF)
19049: PPUSH
19050: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19054: LD_EXP 7
19058: PPUSH
19059: LD_EXP 48
19063: PUSH
19064: LD_STRING Brown
19066: STR
19067: PPUSH
19068: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
19072: LD_EXP 13
19076: PPUSH
19077: CALL_OW 301
19081: NOT
19082: IFFALSE 19109
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
19084: LD_STRING enableBioCharacter(BIO_LUCY)
19086: PPUSH
19087: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19091: LD_EXP 13
19095: PPUSH
19096: LD_EXP 48
19100: PUSH
19101: LD_STRING Donaldson
19103: STR
19104: PPUSH
19105: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19109: LD_EXP 5
19113: PPUSH
19114: CALL_OW 301
19118: NOT
19119: IFFALSE 19139
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19121: LD_EXP 5
19125: PPUSH
19126: LD_EXP 48
19130: PUSH
19131: LD_STRING Frank
19133: STR
19134: PPUSH
19135: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19139: LD_INT 50
19141: PUSH
19142: EMPTY
19143: LIST
19144: PUSH
19145: LD_INT 22
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 21
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: PUSH
19175: LD_EXP 1
19179: PUSH
19180: LD_EXP 2
19184: PUSH
19185: LD_EXP 3
19189: PUSH
19190: LD_EXP 4
19194: PUSH
19195: LD_EXP 7
19199: PUSH
19200: LD_EXP 13
19204: PUSH
19205: LD_EXP 5
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: DIFF
19219: PPUSH
19220: LD_STRING 04_other_survivors
19222: PPUSH
19223: CALL_OW 38
// YouWin ;
19227: CALL_OW 103
// end ;
19231: LD_VAR 0 1
19235: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19236: LD_INT 0
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
// gammaBase = [ ] ;
19242: LD_ADDR_VAR 0 4
19246: PUSH
19247: EMPTY
19248: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19249: LD_ADDR_VAR 0 5
19253: PUSH
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_INT 22
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 21
19271: PUSH
19272: LD_INT 3
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PPUSH
19283: CALL_OW 70
19287: ST_TO_ADDR
// for i in buildings do
19288: LD_ADDR_VAR 0 3
19292: PUSH
19293: LD_VAR 0 5
19297: PUSH
19298: FOR_IN
19299: IFFALSE 19636
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19301: LD_VAR 0 3
19305: PPUSH
19306: CALL_OW 266
19310: PUSH
19311: LD_INT 6
19313: PUSH
19314: LD_INT 7
19316: PUSH
19317: LD_INT 8
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: IN
19325: IFFALSE 19439
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19327: LD_ADDR_VAR 0 4
19331: PUSH
19332: LD_VAR 0 4
19336: PUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: CALL_OW 266
19346: PUSH
19347: LD_VAR 0 3
19351: PPUSH
19352: CALL_OW 250
19356: PUSH
19357: LD_VAR 0 3
19361: PPUSH
19362: CALL_OW 251
19366: PUSH
19367: LD_VAR 0 3
19371: PPUSH
19372: CALL_OW 254
19376: PUSH
19377: LD_VAR 0 3
19381: PPUSH
19382: CALL_OW 267
19386: PUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: CALL_OW 248
19396: PUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: CALL_OW 268
19409: PUSH
19410: LD_VAR 0 3
19414: PPUSH
19415: LD_INT 2
19417: PPUSH
19418: CALL_OW 268
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: ADD
19436: ST_TO_ADDR
19437: GO 19634
// if GetBType ( i ) in [ b_bunker ] then
19439: LD_VAR 0 3
19443: PPUSH
19444: CALL_OW 266
19448: PUSH
19449: LD_INT 32
19451: PUSH
19452: EMPTY
19453: LIST
19454: IN
19455: IFFALSE 19552
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19457: LD_ADDR_VAR 0 4
19461: PUSH
19462: LD_VAR 0 4
19466: PUSH
19467: LD_VAR 0 3
19471: PPUSH
19472: CALL_OW 266
19476: PUSH
19477: LD_VAR 0 3
19481: PPUSH
19482: CALL_OW 250
19486: PUSH
19487: LD_VAR 0 3
19491: PPUSH
19492: CALL_OW 251
19496: PUSH
19497: LD_VAR 0 3
19501: PPUSH
19502: CALL_OW 254
19506: PUSH
19507: LD_VAR 0 3
19511: PPUSH
19512: CALL_OW 267
19516: PUSH
19517: LD_VAR 0 3
19521: PPUSH
19522: CALL_OW 248
19526: PUSH
19527: LD_VAR 0 3
19531: PPUSH
19532: CALL_OW 269
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: ADD
19549: ST_TO_ADDR
19550: GO 19634
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19552: LD_ADDR_VAR 0 4
19556: PUSH
19557: LD_VAR 0 4
19561: PUSH
19562: LD_VAR 0 3
19566: PPUSH
19567: CALL_OW 266
19571: PUSH
19572: LD_VAR 0 3
19576: PPUSH
19577: CALL_OW 250
19581: PUSH
19582: LD_VAR 0 3
19586: PPUSH
19587: CALL_OW 251
19591: PUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: CALL_OW 254
19601: PUSH
19602: LD_VAR 0 3
19606: PPUSH
19607: CALL_OW 267
19611: PUSH
19612: LD_VAR 0 3
19616: PPUSH
19617: CALL_OW 248
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: ADD
19633: ST_TO_ADDR
// end ;
19634: GO 19298
19636: POP
19637: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19638: LD_VAR 0 4
19642: PPUSH
19643: LD_STRING GammaBase
19645: PPUSH
19646: CALL_OW 39
// end ; end_of_file
19650: LD_VAR 0 2
19654: RET
// every 1 1$15 do
19655: GO 19657
19657: DISABLE
// begin if supply <= 13 and supply > 7 then
19658: LD_EXP 36
19662: PUSH
19663: LD_INT 13
19665: LESSEQUAL
19666: PUSH
19667: LD_EXP 36
19671: PUSH
19672: LD_INT 7
19674: GREATER
19675: AND
19676: IFFALSE 19699
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19678: LD_INT 3
19680: PPUSH
19681: LD_INT 5
19683: PPUSH
19684: CALL_OW 12
19688: PPUSH
19689: LD_INT 18
19691: PPUSH
19692: LD_INT 1
19694: PPUSH
19695: CALL_OW 55
// if supply <= 7 and supply > 4 then
19699: LD_EXP 36
19703: PUSH
19704: LD_INT 7
19706: LESSEQUAL
19707: PUSH
19708: LD_EXP 36
19712: PUSH
19713: LD_INT 4
19715: GREATER
19716: AND
19717: IFFALSE 19740
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19719: LD_INT 3
19721: PPUSH
19722: LD_INT 5
19724: PPUSH
19725: CALL_OW 12
19729: PPUSH
19730: LD_INT 19
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 55
// if supply <= 4 and supply > 0 then
19740: LD_EXP 36
19744: PUSH
19745: LD_INT 4
19747: LESSEQUAL
19748: PUSH
19749: LD_EXP 36
19753: PUSH
19754: LD_INT 0
19756: GREATER
19757: AND
19758: IFFALSE 19781
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19760: LD_INT 3
19762: PPUSH
19763: LD_INT 5
19765: PPUSH
19766: CALL_OW 12
19770: PPUSH
19771: LD_INT 20
19773: PPUSH
19774: LD_INT 1
19776: PPUSH
19777: CALL_OW 55
// if supply then
19781: LD_EXP 36
19785: IFFALSE 19802
// begin supply = supply - 1 ;
19787: LD_ADDR_EXP 36
19791: PUSH
19792: LD_EXP 36
19796: PUSH
19797: LD_INT 1
19799: MINUS
19800: ST_TO_ADDR
// enable ;
19801: ENABLE
// end ; end ; end_of_file end_of_file
19802: END
// export globalGameSaveCounter ; every 0 0$1 do
19803: GO 19805
19805: DISABLE
// begin enable ;
19806: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19807: LD_STRING updateTimer(
19809: PUSH
19810: LD_OWVAR 1
19814: STR
19815: PUSH
19816: LD_STRING );
19818: STR
19819: PPUSH
19820: CALL_OW 559
// end ;
19824: END
// every 0 0$1 do
19825: GO 19827
19827: DISABLE
// begin globalGameSaveCounter := 0 ;
19828: LD_ADDR_EXP 50
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19836: LD_STRING setGameSaveCounter(0)
19838: PPUSH
19839: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19843: LD_STRING initStreamRollete();
19845: PPUSH
19846: CALL_OW 559
// InitStreamMode ;
19850: CALL 21176 0 0
// DefineStreamItems ( false ) ;
19854: LD_INT 0
19856: PPUSH
19857: CALL 21640 0 1
// end ;
19861: END
// export function SOS_MapStart ( ) ; begin
19862: LD_INT 0
19864: PPUSH
// if streamModeActive then
19865: LD_EXP 51
19869: IFFALSE 19878
// DefineStreamItems ( true ) ;
19871: LD_INT 1
19873: PPUSH
19874: CALL 21640 0 1
// UpdateLuaVariables ( ) ;
19878: CALL 19895 0 0
// UpdateFactoryWaypoints ( ) ;
19882: CALL 34509 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19886: CALL 34766 0 0
// end ;
19890: LD_VAR 0 1
19894: RET
// function UpdateLuaVariables ( ) ; begin
19895: LD_INT 0
19897: PPUSH
// if globalGameSaveCounter then
19898: LD_EXP 50
19902: IFFALSE 19936
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19904: LD_ADDR_EXP 50
19908: PUSH
19909: LD_EXP 50
19913: PPUSH
19914: CALL 79396 0 1
19918: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19919: LD_STRING setGameSaveCounter(
19921: PUSH
19922: LD_EXP 50
19926: STR
19927: PUSH
19928: LD_STRING )
19930: STR
19931: PPUSH
19932: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19936: LD_STRING setGameDifficulty(
19938: PUSH
19939: LD_OWVAR 67
19943: STR
19944: PUSH
19945: LD_STRING )
19947: STR
19948: PPUSH
19949: CALL_OW 559
// end ;
19953: LD_VAR 0 1
19957: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19958: LD_INT 0
19960: PPUSH
// if p2 = stream_mode then
19961: LD_VAR 0 2
19965: PUSH
19966: LD_INT 100
19968: EQUAL
19969: IFFALSE 20972
// begin if not StreamModeActive then
19971: LD_EXP 51
19975: NOT
19976: IFFALSE 19986
// StreamModeActive := true ;
19978: LD_ADDR_EXP 51
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 0 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 0
19993: EQUAL
19994: IFFALSE 20000
// InitStreamMode ;
19996: CALL 21176 0 0
// if p3 = 1 then
20000: LD_VAR 0 3
20004: PUSH
20005: LD_INT 1
20007: EQUAL
20008: IFFALSE 20018
// sRocket := true ;
20010: LD_ADDR_EXP 56
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// if p3 = 2 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 2
20025: EQUAL
20026: IFFALSE 20036
// sSpeed := true ;
20028: LD_ADDR_EXP 55
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 3 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 3
20043: EQUAL
20044: IFFALSE 20054
// sEngine := true ;
20046: LD_ADDR_EXP 57
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if p3 = 4 then
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 4
20061: EQUAL
20062: IFFALSE 20072
// sSpec := true ;
20064: LD_ADDR_EXP 54
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// if p3 = 5 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_INT 5
20079: EQUAL
20080: IFFALSE 20090
// sLevel := true ;
20082: LD_ADDR_EXP 58
20086: PUSH
20087: LD_INT 1
20089: ST_TO_ADDR
// if p3 = 6 then
20090: LD_VAR 0 3
20094: PUSH
20095: LD_INT 6
20097: EQUAL
20098: IFFALSE 20108
// sArmoury := true ;
20100: LD_ADDR_EXP 59
20104: PUSH
20105: LD_INT 1
20107: ST_TO_ADDR
// if p3 = 7 then
20108: LD_VAR 0 3
20112: PUSH
20113: LD_INT 7
20115: EQUAL
20116: IFFALSE 20126
// sRadar := true ;
20118: LD_ADDR_EXP 60
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if p3 = 8 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 8
20133: EQUAL
20134: IFFALSE 20144
// sBunker := true ;
20136: LD_ADDR_EXP 61
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if p3 = 9 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 9
20151: EQUAL
20152: IFFALSE 20162
// sHack := true ;
20154: LD_ADDR_EXP 62
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 10 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 10
20169: EQUAL
20170: IFFALSE 20180
// sFire := true ;
20172: LD_ADDR_EXP 63
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 11 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 11
20187: EQUAL
20188: IFFALSE 20198
// sRefresh := true ;
20190: LD_ADDR_EXP 64
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 12 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 12
20205: EQUAL
20206: IFFALSE 20216
// sExp := true ;
20208: LD_ADDR_EXP 65
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 13 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 13
20223: EQUAL
20224: IFFALSE 20234
// sDepot := true ;
20226: LD_ADDR_EXP 66
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 14 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 14
20241: EQUAL
20242: IFFALSE 20252
// sFlag := true ;
20244: LD_ADDR_EXP 67
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 15 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 15
20259: EQUAL
20260: IFFALSE 20270
// sKamikadze := true ;
20262: LD_ADDR_EXP 75
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 16 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 16
20277: EQUAL
20278: IFFALSE 20288
// sTroll := true ;
20280: LD_ADDR_EXP 76
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 17 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 17
20295: EQUAL
20296: IFFALSE 20306
// sSlow := true ;
20298: LD_ADDR_EXP 77
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 18 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 18
20313: EQUAL
20314: IFFALSE 20324
// sLack := true ;
20316: LD_ADDR_EXP 78
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 19 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 19
20331: EQUAL
20332: IFFALSE 20342
// sTank := true ;
20334: LD_ADDR_EXP 80
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 20 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 20
20349: EQUAL
20350: IFFALSE 20360
// sRemote := true ;
20352: LD_ADDR_EXP 81
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 21 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 21
20367: EQUAL
20368: IFFALSE 20378
// sPowell := true ;
20370: LD_ADDR_EXP 82
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 22 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 22
20385: EQUAL
20386: IFFALSE 20396
// sTeleport := true ;
20388: LD_ADDR_EXP 85
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 23 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 23
20403: EQUAL
20404: IFFALSE 20414
// sOilTower := true ;
20406: LD_ADDR_EXP 87
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 24 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 24
20421: EQUAL
20422: IFFALSE 20432
// sShovel := true ;
20424: LD_ADDR_EXP 88
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 25 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 25
20439: EQUAL
20440: IFFALSE 20450
// sSheik := true ;
20442: LD_ADDR_EXP 89
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 26 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 26
20457: EQUAL
20458: IFFALSE 20468
// sEarthquake := true ;
20460: LD_ADDR_EXP 91
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 27 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 27
20475: EQUAL
20476: IFFALSE 20486
// sAI := true ;
20478: LD_ADDR_EXP 92
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 28 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 28
20493: EQUAL
20494: IFFALSE 20504
// sCargo := true ;
20496: LD_ADDR_EXP 95
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 29 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 29
20511: EQUAL
20512: IFFALSE 20522
// sDLaser := true ;
20514: LD_ADDR_EXP 96
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 30 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 30
20529: EQUAL
20530: IFFALSE 20540
// sExchange := true ;
20532: LD_ADDR_EXP 97
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 31 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 31
20547: EQUAL
20548: IFFALSE 20558
// sFac := true ;
20550: LD_ADDR_EXP 98
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 32 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 32
20565: EQUAL
20566: IFFALSE 20576
// sPower := true ;
20568: LD_ADDR_EXP 99
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 33 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 33
20583: EQUAL
20584: IFFALSE 20594
// sRandom := true ;
20586: LD_ADDR_EXP 100
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 34 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 34
20601: EQUAL
20602: IFFALSE 20612
// sShield := true ;
20604: LD_ADDR_EXP 101
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// if p3 = 35 then
20612: LD_VAR 0 3
20616: PUSH
20617: LD_INT 35
20619: EQUAL
20620: IFFALSE 20630
// sTime := true ;
20622: LD_ADDR_EXP 102
20626: PUSH
20627: LD_INT 1
20629: ST_TO_ADDR
// if p3 = 36 then
20630: LD_VAR 0 3
20634: PUSH
20635: LD_INT 36
20637: EQUAL
20638: IFFALSE 20648
// sTools := true ;
20640: LD_ADDR_EXP 103
20644: PUSH
20645: LD_INT 1
20647: ST_TO_ADDR
// if p3 = 101 then
20648: LD_VAR 0 3
20652: PUSH
20653: LD_INT 101
20655: EQUAL
20656: IFFALSE 20666
// sSold := true ;
20658: LD_ADDR_EXP 68
20662: PUSH
20663: LD_INT 1
20665: ST_TO_ADDR
// if p3 = 102 then
20666: LD_VAR 0 3
20670: PUSH
20671: LD_INT 102
20673: EQUAL
20674: IFFALSE 20684
// sDiff := true ;
20676: LD_ADDR_EXP 69
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// if p3 = 103 then
20684: LD_VAR 0 3
20688: PUSH
20689: LD_INT 103
20691: EQUAL
20692: IFFALSE 20702
// sFog := true ;
20694: LD_ADDR_EXP 72
20698: PUSH
20699: LD_INT 1
20701: ST_TO_ADDR
// if p3 = 104 then
20702: LD_VAR 0 3
20706: PUSH
20707: LD_INT 104
20709: EQUAL
20710: IFFALSE 20720
// sReset := true ;
20712: LD_ADDR_EXP 73
20716: PUSH
20717: LD_INT 1
20719: ST_TO_ADDR
// if p3 = 105 then
20720: LD_VAR 0 3
20724: PUSH
20725: LD_INT 105
20727: EQUAL
20728: IFFALSE 20738
// sSun := true ;
20730: LD_ADDR_EXP 74
20734: PUSH
20735: LD_INT 1
20737: ST_TO_ADDR
// if p3 = 106 then
20738: LD_VAR 0 3
20742: PUSH
20743: LD_INT 106
20745: EQUAL
20746: IFFALSE 20756
// sTiger := true ;
20748: LD_ADDR_EXP 70
20752: PUSH
20753: LD_INT 1
20755: ST_TO_ADDR
// if p3 = 107 then
20756: LD_VAR 0 3
20760: PUSH
20761: LD_INT 107
20763: EQUAL
20764: IFFALSE 20774
// sBomb := true ;
20766: LD_ADDR_EXP 71
20770: PUSH
20771: LD_INT 1
20773: ST_TO_ADDR
// if p3 = 108 then
20774: LD_VAR 0 3
20778: PUSH
20779: LD_INT 108
20781: EQUAL
20782: IFFALSE 20792
// sWound := true ;
20784: LD_ADDR_EXP 79
20788: PUSH
20789: LD_INT 1
20791: ST_TO_ADDR
// if p3 = 109 then
20792: LD_VAR 0 3
20796: PUSH
20797: LD_INT 109
20799: EQUAL
20800: IFFALSE 20810
// sBetray := true ;
20802: LD_ADDR_EXP 83
20806: PUSH
20807: LD_INT 1
20809: ST_TO_ADDR
// if p3 = 110 then
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 110
20817: EQUAL
20818: IFFALSE 20828
// sContamin := true ;
20820: LD_ADDR_EXP 84
20824: PUSH
20825: LD_INT 1
20827: ST_TO_ADDR
// if p3 = 111 then
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 111
20835: EQUAL
20836: IFFALSE 20846
// sOil := true ;
20838: LD_ADDR_EXP 86
20842: PUSH
20843: LD_INT 1
20845: ST_TO_ADDR
// if p3 = 112 then
20846: LD_VAR 0 3
20850: PUSH
20851: LD_INT 112
20853: EQUAL
20854: IFFALSE 20864
// sStu := true ;
20856: LD_ADDR_EXP 90
20860: PUSH
20861: LD_INT 1
20863: ST_TO_ADDR
// if p3 = 113 then
20864: LD_VAR 0 3
20868: PUSH
20869: LD_INT 113
20871: EQUAL
20872: IFFALSE 20882
// sBazooka := true ;
20874: LD_ADDR_EXP 93
20878: PUSH
20879: LD_INT 1
20881: ST_TO_ADDR
// if p3 = 114 then
20882: LD_VAR 0 3
20886: PUSH
20887: LD_INT 114
20889: EQUAL
20890: IFFALSE 20900
// sMortar := true ;
20892: LD_ADDR_EXP 94
20896: PUSH
20897: LD_INT 1
20899: ST_TO_ADDR
// if p3 = 115 then
20900: LD_VAR 0 3
20904: PUSH
20905: LD_INT 115
20907: EQUAL
20908: IFFALSE 20918
// sRanger := true ;
20910: LD_ADDR_EXP 104
20914: PUSH
20915: LD_INT 1
20917: ST_TO_ADDR
// if p3 = 116 then
20918: LD_VAR 0 3
20922: PUSH
20923: LD_INT 116
20925: EQUAL
20926: IFFALSE 20936
// sComputer := true ;
20928: LD_ADDR_EXP 105
20932: PUSH
20933: LD_INT 1
20935: ST_TO_ADDR
// if p3 = 117 then
20936: LD_VAR 0 3
20940: PUSH
20941: LD_INT 117
20943: EQUAL
20944: IFFALSE 20954
// s30 := true ;
20946: LD_ADDR_EXP 106
20950: PUSH
20951: LD_INT 1
20953: ST_TO_ADDR
// if p3 = 118 then
20954: LD_VAR 0 3
20958: PUSH
20959: LD_INT 118
20961: EQUAL
20962: IFFALSE 20972
// s60 := true ;
20964: LD_ADDR_EXP 107
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// end ; if p2 = hack_mode then
20972: LD_VAR 0 2
20976: PUSH
20977: LD_INT 101
20979: EQUAL
20980: IFFALSE 21108
// begin case p3 of 1 :
20982: LD_VAR 0 3
20986: PUSH
20987: LD_INT 1
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21002
20995: POP
// hHackUnlimitedResources ; 2 :
20996: CALL 33255 0 0
21000: GO 21108
21002: LD_INT 2
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21017
21010: POP
// hHackSetLevel10 ; 3 :
21011: CALL 33388 0 0
21015: GO 21108
21017: LD_INT 3
21019: DOUBLE
21020: EQUAL
21021: IFTRUE 21025
21023: GO 21032
21025: POP
// hHackSetLevel10YourUnits ; 4 :
21026: CALL 33473 0 0
21030: GO 21108
21032: LD_INT 4
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21047
21040: POP
// hHackInvincible ; 5 :
21041: CALL 33921 0 0
21045: GO 21108
21047: LD_INT 5
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21062
21055: POP
// hHackInvisible ; 6 :
21056: CALL 34032 0 0
21060: GO 21108
21062: LD_INT 6
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 21077
21070: POP
// hHackChangeYourSide ; 7 :
21071: CALL 34089 0 0
21075: GO 21108
21077: LD_INT 7
21079: DOUBLE
21080: EQUAL
21081: IFTRUE 21085
21083: GO 21092
21085: POP
// hHackChangeUnitSide ; 8 :
21086: CALL 34131 0 0
21090: GO 21108
21092: LD_INT 8
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21107
21100: POP
// hHackFog ; end ;
21101: CALL 34232 0 0
21105: GO 21108
21107: POP
// end ; if p2 = game_save_mode then
21108: LD_VAR 0 2
21112: PUSH
21113: LD_INT 102
21115: EQUAL
21116: IFFALSE 21171
// begin if p3 = 1 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 1
21125: EQUAL
21126: IFFALSE 21138
// globalGameSaveCounter := p4 ;
21128: LD_ADDR_EXP 50
21132: PUSH
21133: LD_VAR 0 4
21137: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21138: LD_VAR 0 3
21142: PUSH
21143: LD_INT 2
21145: EQUAL
21146: PUSH
21147: LD_EXP 50
21151: AND
21152: IFFALSE 21171
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21154: LD_STRING setGameSaveCounter(
21156: PUSH
21157: LD_EXP 50
21161: STR
21162: PUSH
21163: LD_STRING )
21165: STR
21166: PPUSH
21167: CALL_OW 559
// end ; end ;
21171: LD_VAR 0 7
21175: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21176: LD_INT 0
21178: PPUSH
// streamModeActive := false ;
21179: LD_ADDR_EXP 51
21183: PUSH
21184: LD_INT 0
21186: ST_TO_ADDR
// normalCounter := 36 ;
21187: LD_ADDR_EXP 52
21191: PUSH
21192: LD_INT 36
21194: ST_TO_ADDR
// hardcoreCounter := 18 ;
21195: LD_ADDR_EXP 53
21199: PUSH
21200: LD_INT 18
21202: ST_TO_ADDR
// sRocket := false ;
21203: LD_ADDR_EXP 56
21207: PUSH
21208: LD_INT 0
21210: ST_TO_ADDR
// sSpeed := false ;
21211: LD_ADDR_EXP 55
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
// sEngine := false ;
21219: LD_ADDR_EXP 57
21223: PUSH
21224: LD_INT 0
21226: ST_TO_ADDR
// sSpec := false ;
21227: LD_ADDR_EXP 54
21231: PUSH
21232: LD_INT 0
21234: ST_TO_ADDR
// sLevel := false ;
21235: LD_ADDR_EXP 58
21239: PUSH
21240: LD_INT 0
21242: ST_TO_ADDR
// sArmoury := false ;
21243: LD_ADDR_EXP 59
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// sRadar := false ;
21251: LD_ADDR_EXP 60
21255: PUSH
21256: LD_INT 0
21258: ST_TO_ADDR
// sBunker := false ;
21259: LD_ADDR_EXP 61
21263: PUSH
21264: LD_INT 0
21266: ST_TO_ADDR
// sHack := false ;
21267: LD_ADDR_EXP 62
21271: PUSH
21272: LD_INT 0
21274: ST_TO_ADDR
// sFire := false ;
21275: LD_ADDR_EXP 63
21279: PUSH
21280: LD_INT 0
21282: ST_TO_ADDR
// sRefresh := false ;
21283: LD_ADDR_EXP 64
21287: PUSH
21288: LD_INT 0
21290: ST_TO_ADDR
// sExp := false ;
21291: LD_ADDR_EXP 65
21295: PUSH
21296: LD_INT 0
21298: ST_TO_ADDR
// sDepot := false ;
21299: LD_ADDR_EXP 66
21303: PUSH
21304: LD_INT 0
21306: ST_TO_ADDR
// sFlag := false ;
21307: LD_ADDR_EXP 67
21311: PUSH
21312: LD_INT 0
21314: ST_TO_ADDR
// sKamikadze := false ;
21315: LD_ADDR_EXP 75
21319: PUSH
21320: LD_INT 0
21322: ST_TO_ADDR
// sTroll := false ;
21323: LD_ADDR_EXP 76
21327: PUSH
21328: LD_INT 0
21330: ST_TO_ADDR
// sSlow := false ;
21331: LD_ADDR_EXP 77
21335: PUSH
21336: LD_INT 0
21338: ST_TO_ADDR
// sLack := false ;
21339: LD_ADDR_EXP 78
21343: PUSH
21344: LD_INT 0
21346: ST_TO_ADDR
// sTank := false ;
21347: LD_ADDR_EXP 80
21351: PUSH
21352: LD_INT 0
21354: ST_TO_ADDR
// sRemote := false ;
21355: LD_ADDR_EXP 81
21359: PUSH
21360: LD_INT 0
21362: ST_TO_ADDR
// sPowell := false ;
21363: LD_ADDR_EXP 82
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
// sTeleport := false ;
21371: LD_ADDR_EXP 85
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
// sOilTower := false ;
21379: LD_ADDR_EXP 87
21383: PUSH
21384: LD_INT 0
21386: ST_TO_ADDR
// sShovel := false ;
21387: LD_ADDR_EXP 88
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
// sSheik := false ;
21395: LD_ADDR_EXP 89
21399: PUSH
21400: LD_INT 0
21402: ST_TO_ADDR
// sEarthquake := false ;
21403: LD_ADDR_EXP 91
21407: PUSH
21408: LD_INT 0
21410: ST_TO_ADDR
// sAI := false ;
21411: LD_ADDR_EXP 92
21415: PUSH
21416: LD_INT 0
21418: ST_TO_ADDR
// sCargo := false ;
21419: LD_ADDR_EXP 95
21423: PUSH
21424: LD_INT 0
21426: ST_TO_ADDR
// sDLaser := false ;
21427: LD_ADDR_EXP 96
21431: PUSH
21432: LD_INT 0
21434: ST_TO_ADDR
// sExchange := false ;
21435: LD_ADDR_EXP 97
21439: PUSH
21440: LD_INT 0
21442: ST_TO_ADDR
// sFac := false ;
21443: LD_ADDR_EXP 98
21447: PUSH
21448: LD_INT 0
21450: ST_TO_ADDR
// sPower := false ;
21451: LD_ADDR_EXP 99
21455: PUSH
21456: LD_INT 0
21458: ST_TO_ADDR
// sRandom := false ;
21459: LD_ADDR_EXP 100
21463: PUSH
21464: LD_INT 0
21466: ST_TO_ADDR
// sShield := false ;
21467: LD_ADDR_EXP 101
21471: PUSH
21472: LD_INT 0
21474: ST_TO_ADDR
// sTime := false ;
21475: LD_ADDR_EXP 102
21479: PUSH
21480: LD_INT 0
21482: ST_TO_ADDR
// sTools := false ;
21483: LD_ADDR_EXP 103
21487: PUSH
21488: LD_INT 0
21490: ST_TO_ADDR
// sSold := false ;
21491: LD_ADDR_EXP 68
21495: PUSH
21496: LD_INT 0
21498: ST_TO_ADDR
// sDiff := false ;
21499: LD_ADDR_EXP 69
21503: PUSH
21504: LD_INT 0
21506: ST_TO_ADDR
// sFog := false ;
21507: LD_ADDR_EXP 72
21511: PUSH
21512: LD_INT 0
21514: ST_TO_ADDR
// sReset := false ;
21515: LD_ADDR_EXP 73
21519: PUSH
21520: LD_INT 0
21522: ST_TO_ADDR
// sSun := false ;
21523: LD_ADDR_EXP 74
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// sTiger := false ;
21531: LD_ADDR_EXP 70
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// sBomb := false ;
21539: LD_ADDR_EXP 71
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// sWound := false ;
21547: LD_ADDR_EXP 79
21551: PUSH
21552: LD_INT 0
21554: ST_TO_ADDR
// sBetray := false ;
21555: LD_ADDR_EXP 83
21559: PUSH
21560: LD_INT 0
21562: ST_TO_ADDR
// sContamin := false ;
21563: LD_ADDR_EXP 84
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// sOil := false ;
21571: LD_ADDR_EXP 86
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// sStu := false ;
21579: LD_ADDR_EXP 90
21583: PUSH
21584: LD_INT 0
21586: ST_TO_ADDR
// sBazooka := false ;
21587: LD_ADDR_EXP 93
21591: PUSH
21592: LD_INT 0
21594: ST_TO_ADDR
// sMortar := false ;
21595: LD_ADDR_EXP 94
21599: PUSH
21600: LD_INT 0
21602: ST_TO_ADDR
// sRanger := false ;
21603: LD_ADDR_EXP 104
21607: PUSH
21608: LD_INT 0
21610: ST_TO_ADDR
// sComputer := false ;
21611: LD_ADDR_EXP 105
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
// s30 := false ;
21619: LD_ADDR_EXP 106
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// s60 := false ;
21627: LD_ADDR_EXP 107
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
// end ;
21635: LD_VAR 0 1
21639: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21640: LD_INT 0
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
// result := [ ] ;
21649: LD_ADDR_VAR 0 2
21653: PUSH
21654: EMPTY
21655: ST_TO_ADDR
// if campaign_id = 1 then
21656: LD_OWVAR 69
21660: PUSH
21661: LD_INT 1
21663: EQUAL
21664: IFFALSE 24830
// begin case mission_number of 1 :
21666: LD_OWVAR 70
21670: PUSH
21671: LD_INT 1
21673: DOUBLE
21674: EQUAL
21675: IFTRUE 21679
21677: GO 21755
21679: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21680: LD_ADDR_VAR 0 2
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 4
21690: PUSH
21691: LD_INT 11
21693: PUSH
21694: LD_INT 12
21696: PUSH
21697: LD_INT 15
21699: PUSH
21700: LD_INT 16
21702: PUSH
21703: LD_INT 22
21705: PUSH
21706: LD_INT 23
21708: PUSH
21709: LD_INT 26
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 101
21725: PUSH
21726: LD_INT 102
21728: PUSH
21729: LD_INT 106
21731: PUSH
21732: LD_INT 116
21734: PUSH
21735: LD_INT 117
21737: PUSH
21738: LD_INT 118
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: ST_TO_ADDR
21753: GO 24828
21755: LD_INT 2
21757: DOUBLE
21758: EQUAL
21759: IFTRUE 21763
21761: GO 21847
21763: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21764: LD_ADDR_VAR 0 2
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: LD_INT 4
21774: PUSH
21775: LD_INT 11
21777: PUSH
21778: LD_INT 12
21780: PUSH
21781: LD_INT 15
21783: PUSH
21784: LD_INT 16
21786: PUSH
21787: LD_INT 22
21789: PUSH
21790: LD_INT 23
21792: PUSH
21793: LD_INT 26
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 101
21809: PUSH
21810: LD_INT 102
21812: PUSH
21813: LD_INT 105
21815: PUSH
21816: LD_INT 106
21818: PUSH
21819: LD_INT 108
21821: PUSH
21822: LD_INT 116
21824: PUSH
21825: LD_INT 117
21827: PUSH
21828: LD_INT 118
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: ST_TO_ADDR
21845: GO 24828
21847: LD_INT 3
21849: DOUBLE
21850: EQUAL
21851: IFTRUE 21855
21853: GO 21943
21855: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21856: LD_ADDR_VAR 0 2
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: LD_INT 4
21866: PUSH
21867: LD_INT 5
21869: PUSH
21870: LD_INT 11
21872: PUSH
21873: LD_INT 12
21875: PUSH
21876: LD_INT 15
21878: PUSH
21879: LD_INT 16
21881: PUSH
21882: LD_INT 22
21884: PUSH
21885: LD_INT 26
21887: PUSH
21888: LD_INT 36
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 101
21905: PUSH
21906: LD_INT 102
21908: PUSH
21909: LD_INT 105
21911: PUSH
21912: LD_INT 106
21914: PUSH
21915: LD_INT 108
21917: PUSH
21918: LD_INT 116
21920: PUSH
21921: LD_INT 117
21923: PUSH
21924: LD_INT 118
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: ST_TO_ADDR
21941: GO 24828
21943: LD_INT 4
21945: DOUBLE
21946: EQUAL
21947: IFTRUE 21951
21949: GO 22047
21951: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21952: LD_ADDR_VAR 0 2
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: LD_INT 4
21962: PUSH
21963: LD_INT 5
21965: PUSH
21966: LD_INT 8
21968: PUSH
21969: LD_INT 11
21971: PUSH
21972: LD_INT 12
21974: PUSH
21975: LD_INT 15
21977: PUSH
21978: LD_INT 16
21980: PUSH
21981: LD_INT 22
21983: PUSH
21984: LD_INT 23
21986: PUSH
21987: LD_INT 26
21989: PUSH
21990: LD_INT 36
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 101
22009: PUSH
22010: LD_INT 102
22012: PUSH
22013: LD_INT 105
22015: PUSH
22016: LD_INT 106
22018: PUSH
22019: LD_INT 108
22021: PUSH
22022: LD_INT 116
22024: PUSH
22025: LD_INT 117
22027: PUSH
22028: LD_INT 118
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: ST_TO_ADDR
22045: GO 24828
22047: LD_INT 5
22049: DOUBLE
22050: EQUAL
22051: IFTRUE 22055
22053: GO 22167
22055: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22056: LD_ADDR_VAR 0 2
22060: PUSH
22061: LD_INT 2
22063: PUSH
22064: LD_INT 4
22066: PUSH
22067: LD_INT 5
22069: PUSH
22070: LD_INT 6
22072: PUSH
22073: LD_INT 8
22075: PUSH
22076: LD_INT 11
22078: PUSH
22079: LD_INT 12
22081: PUSH
22082: LD_INT 15
22084: PUSH
22085: LD_INT 16
22087: PUSH
22088: LD_INT 22
22090: PUSH
22091: LD_INT 23
22093: PUSH
22094: LD_INT 25
22096: PUSH
22097: LD_INT 26
22099: PUSH
22100: LD_INT 36
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 101
22121: PUSH
22122: LD_INT 102
22124: PUSH
22125: LD_INT 105
22127: PUSH
22128: LD_INT 106
22130: PUSH
22131: LD_INT 108
22133: PUSH
22134: LD_INT 109
22136: PUSH
22137: LD_INT 112
22139: PUSH
22140: LD_INT 116
22142: PUSH
22143: LD_INT 117
22145: PUSH
22146: LD_INT 118
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: ST_TO_ADDR
22165: GO 24828
22167: LD_INT 6
22169: DOUBLE
22170: EQUAL
22171: IFTRUE 22175
22173: GO 22307
22175: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22176: LD_ADDR_VAR 0 2
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 4
22186: PUSH
22187: LD_INT 5
22189: PUSH
22190: LD_INT 6
22192: PUSH
22193: LD_INT 8
22195: PUSH
22196: LD_INT 11
22198: PUSH
22199: LD_INT 12
22201: PUSH
22202: LD_INT 15
22204: PUSH
22205: LD_INT 16
22207: PUSH
22208: LD_INT 20
22210: PUSH
22211: LD_INT 21
22213: PUSH
22214: LD_INT 22
22216: PUSH
22217: LD_INT 23
22219: PUSH
22220: LD_INT 25
22222: PUSH
22223: LD_INT 26
22225: PUSH
22226: LD_INT 30
22228: PUSH
22229: LD_INT 31
22231: PUSH
22232: LD_INT 32
22234: PUSH
22235: LD_INT 36
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 101
22261: PUSH
22262: LD_INT 102
22264: PUSH
22265: LD_INT 105
22267: PUSH
22268: LD_INT 106
22270: PUSH
22271: LD_INT 108
22273: PUSH
22274: LD_INT 109
22276: PUSH
22277: LD_INT 112
22279: PUSH
22280: LD_INT 116
22282: PUSH
22283: LD_INT 117
22285: PUSH
22286: LD_INT 118
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: ST_TO_ADDR
22305: GO 24828
22307: LD_INT 7
22309: DOUBLE
22310: EQUAL
22311: IFTRUE 22315
22313: GO 22427
22315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22316: LD_ADDR_VAR 0 2
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 4
22326: PUSH
22327: LD_INT 5
22329: PUSH
22330: LD_INT 7
22332: PUSH
22333: LD_INT 11
22335: PUSH
22336: LD_INT 12
22338: PUSH
22339: LD_INT 15
22341: PUSH
22342: LD_INT 16
22344: PUSH
22345: LD_INT 20
22347: PUSH
22348: LD_INT 21
22350: PUSH
22351: LD_INT 22
22353: PUSH
22354: LD_INT 23
22356: PUSH
22357: LD_INT 25
22359: PUSH
22360: LD_INT 26
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 101
22381: PUSH
22382: LD_INT 102
22384: PUSH
22385: LD_INT 103
22387: PUSH
22388: LD_INT 105
22390: PUSH
22391: LD_INT 106
22393: PUSH
22394: LD_INT 108
22396: PUSH
22397: LD_INT 112
22399: PUSH
22400: LD_INT 116
22402: PUSH
22403: LD_INT 117
22405: PUSH
22406: LD_INT 118
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: ST_TO_ADDR
22425: GO 24828
22427: LD_INT 8
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22575
22435: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22436: LD_ADDR_VAR 0 2
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: LD_INT 4
22446: PUSH
22447: LD_INT 5
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: LD_INT 7
22455: PUSH
22456: LD_INT 8
22458: PUSH
22459: LD_INT 11
22461: PUSH
22462: LD_INT 12
22464: PUSH
22465: LD_INT 15
22467: PUSH
22468: LD_INT 16
22470: PUSH
22471: LD_INT 20
22473: PUSH
22474: LD_INT 21
22476: PUSH
22477: LD_INT 22
22479: PUSH
22480: LD_INT 23
22482: PUSH
22483: LD_INT 25
22485: PUSH
22486: LD_INT 26
22488: PUSH
22489: LD_INT 30
22491: PUSH
22492: LD_INT 31
22494: PUSH
22495: LD_INT 32
22497: PUSH
22498: LD_INT 36
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 101
22525: PUSH
22526: LD_INT 102
22528: PUSH
22529: LD_INT 103
22531: PUSH
22532: LD_INT 105
22534: PUSH
22535: LD_INT 106
22537: PUSH
22538: LD_INT 108
22540: PUSH
22541: LD_INT 109
22543: PUSH
22544: LD_INT 112
22546: PUSH
22547: LD_INT 116
22549: PUSH
22550: LD_INT 117
22552: PUSH
22553: LD_INT 118
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: ST_TO_ADDR
22573: GO 24828
22575: LD_INT 9
22577: DOUBLE
22578: EQUAL
22579: IFTRUE 22583
22581: GO 22731
22583: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 4
22594: PUSH
22595: LD_INT 5
22597: PUSH
22598: LD_INT 6
22600: PUSH
22601: LD_INT 7
22603: PUSH
22604: LD_INT 8
22606: PUSH
22607: LD_INT 11
22609: PUSH
22610: LD_INT 12
22612: PUSH
22613: LD_INT 15
22615: PUSH
22616: LD_INT 16
22618: PUSH
22619: LD_INT 20
22621: PUSH
22622: LD_INT 21
22624: PUSH
22625: LD_INT 22
22627: PUSH
22628: LD_INT 23
22630: PUSH
22631: LD_INT 25
22633: PUSH
22634: LD_INT 26
22636: PUSH
22637: LD_INT 28
22639: PUSH
22640: LD_INT 30
22642: PUSH
22643: LD_INT 31
22645: PUSH
22646: LD_INT 32
22648: PUSH
22649: LD_INT 36
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 101
22677: PUSH
22678: LD_INT 102
22680: PUSH
22681: LD_INT 103
22683: PUSH
22684: LD_INT 105
22686: PUSH
22687: LD_INT 106
22689: PUSH
22690: LD_INT 108
22692: PUSH
22693: LD_INT 109
22695: PUSH
22696: LD_INT 112
22698: PUSH
22699: LD_INT 114
22701: PUSH
22702: LD_INT 116
22704: PUSH
22705: LD_INT 117
22707: PUSH
22708: LD_INT 118
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: ST_TO_ADDR
22729: GO 24828
22731: LD_INT 10
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22935
22739: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22740: LD_ADDR_VAR 0 2
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 4
22750: PUSH
22751: LD_INT 5
22753: PUSH
22754: LD_INT 6
22756: PUSH
22757: LD_INT 7
22759: PUSH
22760: LD_INT 8
22762: PUSH
22763: LD_INT 9
22765: PUSH
22766: LD_INT 10
22768: PUSH
22769: LD_INT 11
22771: PUSH
22772: LD_INT 12
22774: PUSH
22775: LD_INT 13
22777: PUSH
22778: LD_INT 14
22780: PUSH
22781: LD_INT 15
22783: PUSH
22784: LD_INT 16
22786: PUSH
22787: LD_INT 17
22789: PUSH
22790: LD_INT 18
22792: PUSH
22793: LD_INT 19
22795: PUSH
22796: LD_INT 20
22798: PUSH
22799: LD_INT 21
22801: PUSH
22802: LD_INT 22
22804: PUSH
22805: LD_INT 23
22807: PUSH
22808: LD_INT 24
22810: PUSH
22811: LD_INT 25
22813: PUSH
22814: LD_INT 26
22816: PUSH
22817: LD_INT 28
22819: PUSH
22820: LD_INT 30
22822: PUSH
22823: LD_INT 31
22825: PUSH
22826: LD_INT 32
22828: PUSH
22829: LD_INT 36
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 101
22865: PUSH
22866: LD_INT 102
22868: PUSH
22869: LD_INT 103
22871: PUSH
22872: LD_INT 104
22874: PUSH
22875: LD_INT 105
22877: PUSH
22878: LD_INT 106
22880: PUSH
22881: LD_INT 107
22883: PUSH
22884: LD_INT 108
22886: PUSH
22887: LD_INT 109
22889: PUSH
22890: LD_INT 110
22892: PUSH
22893: LD_INT 111
22895: PUSH
22896: LD_INT 112
22898: PUSH
22899: LD_INT 114
22901: PUSH
22902: LD_INT 116
22904: PUSH
22905: LD_INT 117
22907: PUSH
22908: LD_INT 118
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: ST_TO_ADDR
22933: GO 24828
22935: LD_INT 11
22937: DOUBLE
22938: EQUAL
22939: IFTRUE 22943
22941: GO 23147
22943: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22944: LD_ADDR_VAR 0 2
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 3
22954: PUSH
22955: LD_INT 4
22957: PUSH
22958: LD_INT 5
22960: PUSH
22961: LD_INT 6
22963: PUSH
22964: LD_INT 7
22966: PUSH
22967: LD_INT 8
22969: PUSH
22970: LD_INT 9
22972: PUSH
22973: LD_INT 10
22975: PUSH
22976: LD_INT 11
22978: PUSH
22979: LD_INT 12
22981: PUSH
22982: LD_INT 13
22984: PUSH
22985: LD_INT 14
22987: PUSH
22988: LD_INT 15
22990: PUSH
22991: LD_INT 16
22993: PUSH
22994: LD_INT 17
22996: PUSH
22997: LD_INT 18
22999: PUSH
23000: LD_INT 19
23002: PUSH
23003: LD_INT 20
23005: PUSH
23006: LD_INT 21
23008: PUSH
23009: LD_INT 22
23011: PUSH
23012: LD_INT 23
23014: PUSH
23015: LD_INT 24
23017: PUSH
23018: LD_INT 25
23020: PUSH
23021: LD_INT 26
23023: PUSH
23024: LD_INT 28
23026: PUSH
23027: LD_INT 30
23029: PUSH
23030: LD_INT 31
23032: PUSH
23033: LD_INT 32
23035: PUSH
23036: LD_INT 34
23038: PUSH
23039: LD_INT 36
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 101
23077: PUSH
23078: LD_INT 102
23080: PUSH
23081: LD_INT 103
23083: PUSH
23084: LD_INT 104
23086: PUSH
23087: LD_INT 105
23089: PUSH
23090: LD_INT 106
23092: PUSH
23093: LD_INT 107
23095: PUSH
23096: LD_INT 108
23098: PUSH
23099: LD_INT 109
23101: PUSH
23102: LD_INT 110
23104: PUSH
23105: LD_INT 111
23107: PUSH
23108: LD_INT 112
23110: PUSH
23111: LD_INT 114
23113: PUSH
23114: LD_INT 116
23116: PUSH
23117: LD_INT 117
23119: PUSH
23120: LD_INT 118
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: ST_TO_ADDR
23145: GO 24828
23147: LD_INT 12
23149: DOUBLE
23150: EQUAL
23151: IFTRUE 23155
23153: GO 23375
23155: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23156: LD_ADDR_VAR 0 2
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 3
23169: PUSH
23170: LD_INT 4
23172: PUSH
23173: LD_INT 5
23175: PUSH
23176: LD_INT 6
23178: PUSH
23179: LD_INT 7
23181: PUSH
23182: LD_INT 8
23184: PUSH
23185: LD_INT 9
23187: PUSH
23188: LD_INT 10
23190: PUSH
23191: LD_INT 11
23193: PUSH
23194: LD_INT 12
23196: PUSH
23197: LD_INT 13
23199: PUSH
23200: LD_INT 14
23202: PUSH
23203: LD_INT 15
23205: PUSH
23206: LD_INT 16
23208: PUSH
23209: LD_INT 17
23211: PUSH
23212: LD_INT 18
23214: PUSH
23215: LD_INT 19
23217: PUSH
23218: LD_INT 20
23220: PUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 22
23226: PUSH
23227: LD_INT 23
23229: PUSH
23230: LD_INT 24
23232: PUSH
23233: LD_INT 25
23235: PUSH
23236: LD_INT 26
23238: PUSH
23239: LD_INT 27
23241: PUSH
23242: LD_INT 28
23244: PUSH
23245: LD_INT 30
23247: PUSH
23248: LD_INT 31
23250: PUSH
23251: LD_INT 32
23253: PUSH
23254: LD_INT 33
23256: PUSH
23257: LD_INT 34
23259: PUSH
23260: LD_INT 36
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 101
23301: PUSH
23302: LD_INT 102
23304: PUSH
23305: LD_INT 103
23307: PUSH
23308: LD_INT 104
23310: PUSH
23311: LD_INT 105
23313: PUSH
23314: LD_INT 106
23316: PUSH
23317: LD_INT 107
23319: PUSH
23320: LD_INT 108
23322: PUSH
23323: LD_INT 109
23325: PUSH
23326: LD_INT 110
23328: PUSH
23329: LD_INT 111
23331: PUSH
23332: LD_INT 112
23334: PUSH
23335: LD_INT 113
23337: PUSH
23338: LD_INT 114
23340: PUSH
23341: LD_INT 116
23343: PUSH
23344: LD_INT 117
23346: PUSH
23347: LD_INT 118
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: ST_TO_ADDR
23373: GO 24828
23375: LD_INT 13
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23591
23383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23384: LD_ADDR_VAR 0 2
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: LD_INT 3
23397: PUSH
23398: LD_INT 4
23400: PUSH
23401: LD_INT 5
23403: PUSH
23404: LD_INT 8
23406: PUSH
23407: LD_INT 9
23409: PUSH
23410: LD_INT 10
23412: PUSH
23413: LD_INT 11
23415: PUSH
23416: LD_INT 12
23418: PUSH
23419: LD_INT 14
23421: PUSH
23422: LD_INT 15
23424: PUSH
23425: LD_INT 16
23427: PUSH
23428: LD_INT 17
23430: PUSH
23431: LD_INT 18
23433: PUSH
23434: LD_INT 19
23436: PUSH
23437: LD_INT 20
23439: PUSH
23440: LD_INT 21
23442: PUSH
23443: LD_INT 22
23445: PUSH
23446: LD_INT 23
23448: PUSH
23449: LD_INT 24
23451: PUSH
23452: LD_INT 25
23454: PUSH
23455: LD_INT 26
23457: PUSH
23458: LD_INT 27
23460: PUSH
23461: LD_INT 28
23463: PUSH
23464: LD_INT 30
23466: PUSH
23467: LD_INT 31
23469: PUSH
23470: LD_INT 32
23472: PUSH
23473: LD_INT 33
23475: PUSH
23476: LD_INT 34
23478: PUSH
23479: LD_INT 36
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 101
23517: PUSH
23518: LD_INT 102
23520: PUSH
23521: LD_INT 103
23523: PUSH
23524: LD_INT 104
23526: PUSH
23527: LD_INT 105
23529: PUSH
23530: LD_INT 106
23532: PUSH
23533: LD_INT 107
23535: PUSH
23536: LD_INT 108
23538: PUSH
23539: LD_INT 109
23541: PUSH
23542: LD_INT 110
23544: PUSH
23545: LD_INT 111
23547: PUSH
23548: LD_INT 112
23550: PUSH
23551: LD_INT 113
23553: PUSH
23554: LD_INT 114
23556: PUSH
23557: LD_INT 116
23559: PUSH
23560: LD_INT 117
23562: PUSH
23563: LD_INT 118
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: ST_TO_ADDR
23589: GO 24828
23591: LD_INT 14
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23823
23599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23600: LD_ADDR_VAR 0 2
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: LD_INT 3
23613: PUSH
23614: LD_INT 4
23616: PUSH
23617: LD_INT 5
23619: PUSH
23620: LD_INT 6
23622: PUSH
23623: LD_INT 7
23625: PUSH
23626: LD_INT 8
23628: PUSH
23629: LD_INT 9
23631: PUSH
23632: LD_INT 10
23634: PUSH
23635: LD_INT 11
23637: PUSH
23638: LD_INT 12
23640: PUSH
23641: LD_INT 13
23643: PUSH
23644: LD_INT 14
23646: PUSH
23647: LD_INT 15
23649: PUSH
23650: LD_INT 16
23652: PUSH
23653: LD_INT 17
23655: PUSH
23656: LD_INT 18
23658: PUSH
23659: LD_INT 19
23661: PUSH
23662: LD_INT 20
23664: PUSH
23665: LD_INT 21
23667: PUSH
23668: LD_INT 22
23670: PUSH
23671: LD_INT 23
23673: PUSH
23674: LD_INT 24
23676: PUSH
23677: LD_INT 25
23679: PUSH
23680: LD_INT 26
23682: PUSH
23683: LD_INT 27
23685: PUSH
23686: LD_INT 28
23688: PUSH
23689: LD_INT 29
23691: PUSH
23692: LD_INT 30
23694: PUSH
23695: LD_INT 31
23697: PUSH
23698: LD_INT 32
23700: PUSH
23701: LD_INT 33
23703: PUSH
23704: LD_INT 34
23706: PUSH
23707: LD_INT 36
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 101
23749: PUSH
23750: LD_INT 102
23752: PUSH
23753: LD_INT 103
23755: PUSH
23756: LD_INT 104
23758: PUSH
23759: LD_INT 105
23761: PUSH
23762: LD_INT 106
23764: PUSH
23765: LD_INT 107
23767: PUSH
23768: LD_INT 108
23770: PUSH
23771: LD_INT 109
23773: PUSH
23774: LD_INT 110
23776: PUSH
23777: LD_INT 111
23779: PUSH
23780: LD_INT 112
23782: PUSH
23783: LD_INT 113
23785: PUSH
23786: LD_INT 114
23788: PUSH
23789: LD_INT 116
23791: PUSH
23792: LD_INT 117
23794: PUSH
23795: LD_INT 118
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: ST_TO_ADDR
23821: GO 24828
23823: LD_INT 15
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 24055
23831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23832: LD_ADDR_VAR 0 2
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: LD_INT 2
23842: PUSH
23843: LD_INT 3
23845: PUSH
23846: LD_INT 4
23848: PUSH
23849: LD_INT 5
23851: PUSH
23852: LD_INT 6
23854: PUSH
23855: LD_INT 7
23857: PUSH
23858: LD_INT 8
23860: PUSH
23861: LD_INT 9
23863: PUSH
23864: LD_INT 10
23866: PUSH
23867: LD_INT 11
23869: PUSH
23870: LD_INT 12
23872: PUSH
23873: LD_INT 13
23875: PUSH
23876: LD_INT 14
23878: PUSH
23879: LD_INT 15
23881: PUSH
23882: LD_INT 16
23884: PUSH
23885: LD_INT 17
23887: PUSH
23888: LD_INT 18
23890: PUSH
23891: LD_INT 19
23893: PUSH
23894: LD_INT 20
23896: PUSH
23897: LD_INT 21
23899: PUSH
23900: LD_INT 22
23902: PUSH
23903: LD_INT 23
23905: PUSH
23906: LD_INT 24
23908: PUSH
23909: LD_INT 25
23911: PUSH
23912: LD_INT 26
23914: PUSH
23915: LD_INT 27
23917: PUSH
23918: LD_INT 28
23920: PUSH
23921: LD_INT 29
23923: PUSH
23924: LD_INT 30
23926: PUSH
23927: LD_INT 31
23929: PUSH
23930: LD_INT 32
23932: PUSH
23933: LD_INT 33
23935: PUSH
23936: LD_INT 34
23938: PUSH
23939: LD_INT 36
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 101
23981: PUSH
23982: LD_INT 102
23984: PUSH
23985: LD_INT 103
23987: PUSH
23988: LD_INT 104
23990: PUSH
23991: LD_INT 105
23993: PUSH
23994: LD_INT 106
23996: PUSH
23997: LD_INT 107
23999: PUSH
24000: LD_INT 108
24002: PUSH
24003: LD_INT 109
24005: PUSH
24006: LD_INT 110
24008: PUSH
24009: LD_INT 111
24011: PUSH
24012: LD_INT 112
24014: PUSH
24015: LD_INT 113
24017: PUSH
24018: LD_INT 114
24020: PUSH
24021: LD_INT 116
24023: PUSH
24024: LD_INT 117
24026: PUSH
24027: LD_INT 118
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: ST_TO_ADDR
24053: GO 24828
24055: LD_INT 16
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24199
24063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24064: LD_ADDR_VAR 0 2
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 4
24074: PUSH
24075: LD_INT 5
24077: PUSH
24078: LD_INT 7
24080: PUSH
24081: LD_INT 11
24083: PUSH
24084: LD_INT 12
24086: PUSH
24087: LD_INT 15
24089: PUSH
24090: LD_INT 16
24092: PUSH
24093: LD_INT 20
24095: PUSH
24096: LD_INT 21
24098: PUSH
24099: LD_INT 22
24101: PUSH
24102: LD_INT 23
24104: PUSH
24105: LD_INT 25
24107: PUSH
24108: LD_INT 26
24110: PUSH
24111: LD_INT 30
24113: PUSH
24114: LD_INT 31
24116: PUSH
24117: LD_INT 32
24119: PUSH
24120: LD_INT 33
24122: PUSH
24123: LD_INT 34
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 101
24149: PUSH
24150: LD_INT 102
24152: PUSH
24153: LD_INT 103
24155: PUSH
24156: LD_INT 106
24158: PUSH
24159: LD_INT 108
24161: PUSH
24162: LD_INT 112
24164: PUSH
24165: LD_INT 113
24167: PUSH
24168: LD_INT 114
24170: PUSH
24171: LD_INT 116
24173: PUSH
24174: LD_INT 117
24176: PUSH
24177: LD_INT 118
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: ST_TO_ADDR
24197: GO 24828
24199: LD_INT 17
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24431
24207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24208: LD_ADDR_VAR 0 2
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: LD_INT 4
24224: PUSH
24225: LD_INT 5
24227: PUSH
24228: LD_INT 6
24230: PUSH
24231: LD_INT 7
24233: PUSH
24234: LD_INT 8
24236: PUSH
24237: LD_INT 9
24239: PUSH
24240: LD_INT 10
24242: PUSH
24243: LD_INT 11
24245: PUSH
24246: LD_INT 12
24248: PUSH
24249: LD_INT 13
24251: PUSH
24252: LD_INT 14
24254: PUSH
24255: LD_INT 15
24257: PUSH
24258: LD_INT 16
24260: PUSH
24261: LD_INT 17
24263: PUSH
24264: LD_INT 18
24266: PUSH
24267: LD_INT 19
24269: PUSH
24270: LD_INT 20
24272: PUSH
24273: LD_INT 21
24275: PUSH
24276: LD_INT 22
24278: PUSH
24279: LD_INT 23
24281: PUSH
24282: LD_INT 24
24284: PUSH
24285: LD_INT 25
24287: PUSH
24288: LD_INT 26
24290: PUSH
24291: LD_INT 27
24293: PUSH
24294: LD_INT 28
24296: PUSH
24297: LD_INT 29
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 31
24305: PUSH
24306: LD_INT 32
24308: PUSH
24309: LD_INT 33
24311: PUSH
24312: LD_INT 34
24314: PUSH
24315: LD_INT 36
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 101
24357: PUSH
24358: LD_INT 102
24360: PUSH
24361: LD_INT 103
24363: PUSH
24364: LD_INT 104
24366: PUSH
24367: LD_INT 105
24369: PUSH
24370: LD_INT 106
24372: PUSH
24373: LD_INT 107
24375: PUSH
24376: LD_INT 108
24378: PUSH
24379: LD_INT 109
24381: PUSH
24382: LD_INT 110
24384: PUSH
24385: LD_INT 111
24387: PUSH
24388: LD_INT 112
24390: PUSH
24391: LD_INT 113
24393: PUSH
24394: LD_INT 114
24396: PUSH
24397: LD_INT 116
24399: PUSH
24400: LD_INT 117
24402: PUSH
24403: LD_INT 118
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: ST_TO_ADDR
24429: GO 24828
24431: LD_INT 18
24433: DOUBLE
24434: EQUAL
24435: IFTRUE 24439
24437: GO 24587
24439: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24440: LD_ADDR_VAR 0 2
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: LD_INT 4
24450: PUSH
24451: LD_INT 5
24453: PUSH
24454: LD_INT 7
24456: PUSH
24457: LD_INT 11
24459: PUSH
24460: LD_INT 12
24462: PUSH
24463: LD_INT 15
24465: PUSH
24466: LD_INT 16
24468: PUSH
24469: LD_INT 20
24471: PUSH
24472: LD_INT 21
24474: PUSH
24475: LD_INT 22
24477: PUSH
24478: LD_INT 23
24480: PUSH
24481: LD_INT 25
24483: PUSH
24484: LD_INT 26
24486: PUSH
24487: LD_INT 30
24489: PUSH
24490: LD_INT 31
24492: PUSH
24493: LD_INT 32
24495: PUSH
24496: LD_INT 33
24498: PUSH
24499: LD_INT 34
24501: PUSH
24502: LD_INT 35
24504: PUSH
24505: LD_INT 36
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 101
24533: PUSH
24534: LD_INT 102
24536: PUSH
24537: LD_INT 103
24539: PUSH
24540: LD_INT 106
24542: PUSH
24543: LD_INT 108
24545: PUSH
24546: LD_INT 112
24548: PUSH
24549: LD_INT 113
24551: PUSH
24552: LD_INT 114
24554: PUSH
24555: LD_INT 115
24557: PUSH
24558: LD_INT 116
24560: PUSH
24561: LD_INT 117
24563: PUSH
24564: LD_INT 118
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: ST_TO_ADDR
24585: GO 24828
24587: LD_INT 19
24589: DOUBLE
24590: EQUAL
24591: IFTRUE 24595
24593: GO 24827
24595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24596: LD_ADDR_VAR 0 2
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 3
24609: PUSH
24610: LD_INT 4
24612: PUSH
24613: LD_INT 5
24615: PUSH
24616: LD_INT 6
24618: PUSH
24619: LD_INT 7
24621: PUSH
24622: LD_INT 8
24624: PUSH
24625: LD_INT 9
24627: PUSH
24628: LD_INT 10
24630: PUSH
24631: LD_INT 11
24633: PUSH
24634: LD_INT 12
24636: PUSH
24637: LD_INT 13
24639: PUSH
24640: LD_INT 14
24642: PUSH
24643: LD_INT 15
24645: PUSH
24646: LD_INT 16
24648: PUSH
24649: LD_INT 17
24651: PUSH
24652: LD_INT 18
24654: PUSH
24655: LD_INT 19
24657: PUSH
24658: LD_INT 20
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 22
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 24
24672: PUSH
24673: LD_INT 25
24675: PUSH
24676: LD_INT 26
24678: PUSH
24679: LD_INT 27
24681: PUSH
24682: LD_INT 28
24684: PUSH
24685: LD_INT 29
24687: PUSH
24688: LD_INT 30
24690: PUSH
24691: LD_INT 31
24693: PUSH
24694: LD_INT 32
24696: PUSH
24697: LD_INT 33
24699: PUSH
24700: LD_INT 34
24702: PUSH
24703: LD_INT 35
24705: PUSH
24706: LD_INT 36
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 101
24749: PUSH
24750: LD_INT 102
24752: PUSH
24753: LD_INT 103
24755: PUSH
24756: LD_INT 104
24758: PUSH
24759: LD_INT 105
24761: PUSH
24762: LD_INT 106
24764: PUSH
24765: LD_INT 107
24767: PUSH
24768: LD_INT 108
24770: PUSH
24771: LD_INT 109
24773: PUSH
24774: LD_INT 110
24776: PUSH
24777: LD_INT 111
24779: PUSH
24780: LD_INT 112
24782: PUSH
24783: LD_INT 113
24785: PUSH
24786: LD_INT 114
24788: PUSH
24789: LD_INT 115
24791: PUSH
24792: LD_INT 116
24794: PUSH
24795: LD_INT 117
24797: PUSH
24798: LD_INT 118
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: ST_TO_ADDR
24825: GO 24828
24827: POP
// end else
24828: GO 25059
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24830: LD_ADDR_VAR 0 2
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: LD_INT 4
24846: PUSH
24847: LD_INT 5
24849: PUSH
24850: LD_INT 6
24852: PUSH
24853: LD_INT 7
24855: PUSH
24856: LD_INT 8
24858: PUSH
24859: LD_INT 9
24861: PUSH
24862: LD_INT 10
24864: PUSH
24865: LD_INT 11
24867: PUSH
24868: LD_INT 12
24870: PUSH
24871: LD_INT 13
24873: PUSH
24874: LD_INT 14
24876: PUSH
24877: LD_INT 15
24879: PUSH
24880: LD_INT 16
24882: PUSH
24883: LD_INT 17
24885: PUSH
24886: LD_INT 18
24888: PUSH
24889: LD_INT 19
24891: PUSH
24892: LD_INT 20
24894: PUSH
24895: LD_INT 21
24897: PUSH
24898: LD_INT 22
24900: PUSH
24901: LD_INT 23
24903: PUSH
24904: LD_INT 24
24906: PUSH
24907: LD_INT 25
24909: PUSH
24910: LD_INT 26
24912: PUSH
24913: LD_INT 27
24915: PUSH
24916: LD_INT 28
24918: PUSH
24919: LD_INT 29
24921: PUSH
24922: LD_INT 30
24924: PUSH
24925: LD_INT 31
24927: PUSH
24928: LD_INT 32
24930: PUSH
24931: LD_INT 33
24933: PUSH
24934: LD_INT 34
24936: PUSH
24937: LD_INT 35
24939: PUSH
24940: LD_INT 36
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 101
24983: PUSH
24984: LD_INT 102
24986: PUSH
24987: LD_INT 103
24989: PUSH
24990: LD_INT 104
24992: PUSH
24993: LD_INT 105
24995: PUSH
24996: LD_INT 106
24998: PUSH
24999: LD_INT 107
25001: PUSH
25002: LD_INT 108
25004: PUSH
25005: LD_INT 109
25007: PUSH
25008: LD_INT 110
25010: PUSH
25011: LD_INT 111
25013: PUSH
25014: LD_INT 112
25016: PUSH
25017: LD_INT 113
25019: PUSH
25020: LD_INT 114
25022: PUSH
25023: LD_INT 115
25025: PUSH
25026: LD_INT 116
25028: PUSH
25029: LD_INT 117
25031: PUSH
25032: LD_INT 118
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: ST_TO_ADDR
// if result then
25059: LD_VAR 0 2
25063: IFFALSE 25849
// begin normal :=  ;
25065: LD_ADDR_VAR 0 5
25069: PUSH
25070: LD_STRING 
25072: ST_TO_ADDR
// hardcore :=  ;
25073: LD_ADDR_VAR 0 6
25077: PUSH
25078: LD_STRING 
25080: ST_TO_ADDR
// active :=  ;
25081: LD_ADDR_VAR 0 7
25085: PUSH
25086: LD_STRING 
25088: ST_TO_ADDR
// for i = 1 to normalCounter do
25089: LD_ADDR_VAR 0 8
25093: PUSH
25094: DOUBLE
25095: LD_INT 1
25097: DEC
25098: ST_TO_ADDR
25099: LD_EXP 52
25103: PUSH
25104: FOR_TO
25105: IFFALSE 25206
// begin tmp := 0 ;
25107: LD_ADDR_VAR 0 3
25111: PUSH
25112: LD_STRING 0
25114: ST_TO_ADDR
// if result [ 1 ] then
25115: LD_VAR 0 2
25119: PUSH
25120: LD_INT 1
25122: ARRAY
25123: IFFALSE 25188
// if result [ 1 ] [ 1 ] = i then
25125: LD_VAR 0 2
25129: PUSH
25130: LD_INT 1
25132: ARRAY
25133: PUSH
25134: LD_INT 1
25136: ARRAY
25137: PUSH
25138: LD_VAR 0 8
25142: EQUAL
25143: IFFALSE 25188
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25145: LD_ADDR_VAR 0 2
25149: PUSH
25150: LD_VAR 0 2
25154: PPUSH
25155: LD_INT 1
25157: PPUSH
25158: LD_VAR 0 2
25162: PUSH
25163: LD_INT 1
25165: ARRAY
25166: PPUSH
25167: LD_INT 1
25169: PPUSH
25170: CALL_OW 3
25174: PPUSH
25175: CALL_OW 1
25179: ST_TO_ADDR
// tmp := 1 ;
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_STRING 1
25187: ST_TO_ADDR
// end ; normal := normal & tmp ;
25188: LD_ADDR_VAR 0 5
25192: PUSH
25193: LD_VAR 0 5
25197: PUSH
25198: LD_VAR 0 3
25202: STR
25203: ST_TO_ADDR
// end ;
25204: GO 25104
25206: POP
25207: POP
// for i = 1 to hardcoreCounter do
25208: LD_ADDR_VAR 0 8
25212: PUSH
25213: DOUBLE
25214: LD_INT 1
25216: DEC
25217: ST_TO_ADDR
25218: LD_EXP 53
25222: PUSH
25223: FOR_TO
25224: IFFALSE 25329
// begin tmp := 0 ;
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_STRING 0
25233: ST_TO_ADDR
// if result [ 2 ] then
25234: LD_VAR 0 2
25238: PUSH
25239: LD_INT 2
25241: ARRAY
25242: IFFALSE 25311
// if result [ 2 ] [ 1 ] = 100 + i then
25244: LD_VAR 0 2
25248: PUSH
25249: LD_INT 2
25251: ARRAY
25252: PUSH
25253: LD_INT 1
25255: ARRAY
25256: PUSH
25257: LD_INT 100
25259: PUSH
25260: LD_VAR 0 8
25264: PLUS
25265: EQUAL
25266: IFFALSE 25311
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25268: LD_ADDR_VAR 0 2
25272: PUSH
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_INT 2
25280: PPUSH
25281: LD_VAR 0 2
25285: PUSH
25286: LD_INT 2
25288: ARRAY
25289: PPUSH
25290: LD_INT 1
25292: PPUSH
25293: CALL_OW 3
25297: PPUSH
25298: CALL_OW 1
25302: ST_TO_ADDR
// tmp := 1 ;
25303: LD_ADDR_VAR 0 3
25307: PUSH
25308: LD_STRING 1
25310: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25311: LD_ADDR_VAR 0 6
25315: PUSH
25316: LD_VAR 0 6
25320: PUSH
25321: LD_VAR 0 3
25325: STR
25326: ST_TO_ADDR
// end ;
25327: GO 25223
25329: POP
25330: POP
// if isGameLoad then
25331: LD_VAR 0 1
25335: IFFALSE 25810
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25337: LD_ADDR_VAR 0 4
25341: PUSH
25342: LD_EXP 56
25346: PUSH
25347: LD_EXP 55
25351: PUSH
25352: LD_EXP 57
25356: PUSH
25357: LD_EXP 54
25361: PUSH
25362: LD_EXP 58
25366: PUSH
25367: LD_EXP 59
25371: PUSH
25372: LD_EXP 60
25376: PUSH
25377: LD_EXP 61
25381: PUSH
25382: LD_EXP 62
25386: PUSH
25387: LD_EXP 63
25391: PUSH
25392: LD_EXP 64
25396: PUSH
25397: LD_EXP 65
25401: PUSH
25402: LD_EXP 66
25406: PUSH
25407: LD_EXP 67
25411: PUSH
25412: LD_EXP 75
25416: PUSH
25417: LD_EXP 76
25421: PUSH
25422: LD_EXP 77
25426: PUSH
25427: LD_EXP 78
25431: PUSH
25432: LD_EXP 80
25436: PUSH
25437: LD_EXP 81
25441: PUSH
25442: LD_EXP 82
25446: PUSH
25447: LD_EXP 85
25451: PUSH
25452: LD_EXP 87
25456: PUSH
25457: LD_EXP 88
25461: PUSH
25462: LD_EXP 89
25466: PUSH
25467: LD_EXP 91
25471: PUSH
25472: LD_EXP 92
25476: PUSH
25477: LD_EXP 95
25481: PUSH
25482: LD_EXP 96
25486: PUSH
25487: LD_EXP 97
25491: PUSH
25492: LD_EXP 98
25496: PUSH
25497: LD_EXP 99
25501: PUSH
25502: LD_EXP 100
25506: PUSH
25507: LD_EXP 101
25511: PUSH
25512: LD_EXP 102
25516: PUSH
25517: LD_EXP 103
25521: PUSH
25522: LD_EXP 68
25526: PUSH
25527: LD_EXP 69
25531: PUSH
25532: LD_EXP 72
25536: PUSH
25537: LD_EXP 73
25541: PUSH
25542: LD_EXP 74
25546: PUSH
25547: LD_EXP 70
25551: PUSH
25552: LD_EXP 71
25556: PUSH
25557: LD_EXP 79
25561: PUSH
25562: LD_EXP 83
25566: PUSH
25567: LD_EXP 84
25571: PUSH
25572: LD_EXP 86
25576: PUSH
25577: LD_EXP 90
25581: PUSH
25582: LD_EXP 93
25586: PUSH
25587: LD_EXP 94
25591: PUSH
25592: LD_EXP 104
25596: PUSH
25597: LD_EXP 105
25601: PUSH
25602: LD_EXP 106
25606: PUSH
25607: LD_EXP 107
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: ST_TO_ADDR
// tmp :=  ;
25668: LD_ADDR_VAR 0 3
25672: PUSH
25673: LD_STRING 
25675: ST_TO_ADDR
// for i = 1 to normalCounter do
25676: LD_ADDR_VAR 0 8
25680: PUSH
25681: DOUBLE
25682: LD_INT 1
25684: DEC
25685: ST_TO_ADDR
25686: LD_EXP 52
25690: PUSH
25691: FOR_TO
25692: IFFALSE 25728
// begin if flags [ i ] then
25694: LD_VAR 0 4
25698: PUSH
25699: LD_VAR 0 8
25703: ARRAY
25704: IFFALSE 25726
// tmp := tmp & i & ; ;
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_VAR 0 3
25715: PUSH
25716: LD_VAR 0 8
25720: STR
25721: PUSH
25722: LD_STRING ;
25724: STR
25725: ST_TO_ADDR
// end ;
25726: GO 25691
25728: POP
25729: POP
// for i = 1 to hardcoreCounter do
25730: LD_ADDR_VAR 0 8
25734: PUSH
25735: DOUBLE
25736: LD_INT 1
25738: DEC
25739: ST_TO_ADDR
25740: LD_EXP 53
25744: PUSH
25745: FOR_TO
25746: IFFALSE 25792
// begin if flags [ normalCounter + i ] then
25748: LD_VAR 0 4
25752: PUSH
25753: LD_EXP 52
25757: PUSH
25758: LD_VAR 0 8
25762: PLUS
25763: ARRAY
25764: IFFALSE 25790
// tmp := tmp & ( 100 + i ) & ; ;
25766: LD_ADDR_VAR 0 3
25770: PUSH
25771: LD_VAR 0 3
25775: PUSH
25776: LD_INT 100
25778: PUSH
25779: LD_VAR 0 8
25783: PLUS
25784: STR
25785: PUSH
25786: LD_STRING ;
25788: STR
25789: ST_TO_ADDR
// end ;
25790: GO 25745
25792: POP
25793: POP
// if tmp then
25794: LD_VAR 0 3
25798: IFFALSE 25810
// active := tmp ;
25800: LD_ADDR_VAR 0 7
25804: PUSH
25805: LD_VAR 0 3
25809: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25810: LD_STRING getStreamItemsFromMission("
25812: PUSH
25813: LD_VAR 0 5
25817: STR
25818: PUSH
25819: LD_STRING ","
25821: STR
25822: PUSH
25823: LD_VAR 0 6
25827: STR
25828: PUSH
25829: LD_STRING ","
25831: STR
25832: PUSH
25833: LD_VAR 0 7
25837: STR
25838: PUSH
25839: LD_STRING ")
25841: STR
25842: PPUSH
25843: CALL_OW 559
// end else
25847: GO 25856
// ToLua ( getStreamItemsFromMission("","","") ) ;
25849: LD_STRING getStreamItemsFromMission("","","")
25851: PPUSH
25852: CALL_OW 559
// end ;
25856: LD_VAR 0 2
25860: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25861: LD_EXP 51
25865: PUSH
25866: LD_EXP 56
25870: AND
25871: IFFALSE 25995
25873: GO 25875
25875: DISABLE
25876: LD_INT 0
25878: PPUSH
25879: PPUSH
// begin enable ;
25880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25881: LD_ADDR_VAR 0 2
25885: PUSH
25886: LD_INT 22
25888: PUSH
25889: LD_OWVAR 2
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: LD_INT 34
25903: PUSH
25904: LD_INT 7
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 34
25913: PUSH
25914: LD_INT 45
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 34
25923: PUSH
25924: LD_INT 28
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 34
25933: PUSH
25934: LD_INT 47
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PPUSH
25952: CALL_OW 69
25956: ST_TO_ADDR
// if not tmp then
25957: LD_VAR 0 2
25961: NOT
25962: IFFALSE 25966
// exit ;
25964: GO 25995
// for i in tmp do
25966: LD_ADDR_VAR 0 1
25970: PUSH
25971: LD_VAR 0 2
25975: PUSH
25976: FOR_IN
25977: IFFALSE 25993
// begin SetLives ( i , 0 ) ;
25979: LD_VAR 0 1
25983: PPUSH
25984: LD_INT 0
25986: PPUSH
25987: CALL_OW 234
// end ;
25991: GO 25976
25993: POP
25994: POP
// end ;
25995: PPOPN 2
25997: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25998: LD_EXP 51
26002: PUSH
26003: LD_EXP 57
26007: AND
26008: IFFALSE 26092
26010: GO 26012
26012: DISABLE
26013: LD_INT 0
26015: PPUSH
26016: PPUSH
// begin enable ;
26017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26018: LD_ADDR_VAR 0 2
26022: PUSH
26023: LD_INT 22
26025: PUSH
26026: LD_OWVAR 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 32
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PPUSH
26049: CALL_OW 69
26053: ST_TO_ADDR
// if not tmp then
26054: LD_VAR 0 2
26058: NOT
26059: IFFALSE 26063
// exit ;
26061: GO 26092
// for i in tmp do
26063: LD_ADDR_VAR 0 1
26067: PUSH
26068: LD_VAR 0 2
26072: PUSH
26073: FOR_IN
26074: IFFALSE 26090
// begin SetLives ( i , 0 ) ;
26076: LD_VAR 0 1
26080: PPUSH
26081: LD_INT 0
26083: PPUSH
26084: CALL_OW 234
// end ;
26088: GO 26073
26090: POP
26091: POP
// end ;
26092: PPOPN 2
26094: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26095: LD_EXP 51
26099: PUSH
26100: LD_EXP 54
26104: AND
26105: IFFALSE 26198
26107: GO 26109
26109: DISABLE
26110: LD_INT 0
26112: PPUSH
// begin enable ;
26113: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26114: LD_ADDR_VAR 0 1
26118: PUSH
26119: LD_INT 22
26121: PUSH
26122: LD_OWVAR 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 25
26136: PUSH
26137: LD_INT 5
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 25
26146: PUSH
26147: LD_INT 9
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 25
26156: PUSH
26157: LD_INT 8
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PPUSH
26174: CALL_OW 69
26178: PUSH
26179: FOR_IN
26180: IFFALSE 26196
// begin SetClass ( i , 1 ) ;
26182: LD_VAR 0 1
26186: PPUSH
26187: LD_INT 1
26189: PPUSH
26190: CALL_OW 336
// end ;
26194: GO 26179
26196: POP
26197: POP
// end ;
26198: PPOPN 1
26200: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26201: LD_EXP 51
26205: PUSH
26206: LD_EXP 55
26210: AND
26211: PUSH
26212: LD_OWVAR 65
26216: PUSH
26217: LD_INT 7
26219: LESS
26220: AND
26221: IFFALSE 26235
26223: GO 26225
26225: DISABLE
// begin enable ;
26226: ENABLE
// game_speed := 7 ;
26227: LD_ADDR_OWVAR 65
26231: PUSH
26232: LD_INT 7
26234: ST_TO_ADDR
// end ;
26235: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26236: LD_EXP 51
26240: PUSH
26241: LD_EXP 58
26245: AND
26246: IFFALSE 26448
26248: GO 26250
26250: DISABLE
26251: LD_INT 0
26253: PPUSH
26254: PPUSH
26255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26256: LD_ADDR_VAR 0 3
26260: PUSH
26261: LD_INT 81
26263: PUSH
26264: LD_OWVAR 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 21
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PPUSH
26287: CALL_OW 69
26291: ST_TO_ADDR
// if not tmp then
26292: LD_VAR 0 3
26296: NOT
26297: IFFALSE 26301
// exit ;
26299: GO 26448
// if tmp > 5 then
26301: LD_VAR 0 3
26305: PUSH
26306: LD_INT 5
26308: GREATER
26309: IFFALSE 26321
// k := 5 else
26311: LD_ADDR_VAR 0 2
26315: PUSH
26316: LD_INT 5
26318: ST_TO_ADDR
26319: GO 26331
// k := tmp ;
26321: LD_ADDR_VAR 0 2
26325: PUSH
26326: LD_VAR 0 3
26330: ST_TO_ADDR
// for i := 1 to k do
26331: LD_ADDR_VAR 0 1
26335: PUSH
26336: DOUBLE
26337: LD_INT 1
26339: DEC
26340: ST_TO_ADDR
26341: LD_VAR 0 2
26345: PUSH
26346: FOR_TO
26347: IFFALSE 26446
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26349: LD_VAR 0 3
26353: PUSH
26354: LD_VAR 0 1
26358: ARRAY
26359: PPUSH
26360: LD_VAR 0 1
26364: PUSH
26365: LD_INT 4
26367: MOD
26368: PUSH
26369: LD_INT 1
26371: PLUS
26372: PPUSH
26373: CALL_OW 259
26377: PUSH
26378: LD_INT 10
26380: LESS
26381: IFFALSE 26444
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26383: LD_VAR 0 3
26387: PUSH
26388: LD_VAR 0 1
26392: ARRAY
26393: PPUSH
26394: LD_VAR 0 1
26398: PUSH
26399: LD_INT 4
26401: MOD
26402: PUSH
26403: LD_INT 1
26405: PLUS
26406: PPUSH
26407: LD_VAR 0 3
26411: PUSH
26412: LD_VAR 0 1
26416: ARRAY
26417: PPUSH
26418: LD_VAR 0 1
26422: PUSH
26423: LD_INT 4
26425: MOD
26426: PUSH
26427: LD_INT 1
26429: PLUS
26430: PPUSH
26431: CALL_OW 259
26435: PUSH
26436: LD_INT 1
26438: PLUS
26439: PPUSH
26440: CALL_OW 237
26444: GO 26346
26446: POP
26447: POP
// end ;
26448: PPOPN 3
26450: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26451: LD_EXP 51
26455: PUSH
26456: LD_EXP 59
26460: AND
26461: IFFALSE 26481
26463: GO 26465
26465: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26466: LD_INT 4
26468: PPUSH
26469: LD_OWVAR 2
26473: PPUSH
26474: LD_INT 0
26476: PPUSH
26477: CALL_OW 324
26481: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26482: LD_EXP 51
26486: PUSH
26487: LD_EXP 88
26491: AND
26492: IFFALSE 26512
26494: GO 26496
26496: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26497: LD_INT 19
26499: PPUSH
26500: LD_OWVAR 2
26504: PPUSH
26505: LD_INT 0
26507: PPUSH
26508: CALL_OW 324
26512: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26513: LD_EXP 51
26517: PUSH
26518: LD_EXP 60
26522: AND
26523: IFFALSE 26625
26525: GO 26527
26527: DISABLE
26528: LD_INT 0
26530: PPUSH
26531: PPUSH
// begin enable ;
26532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26533: LD_ADDR_VAR 0 2
26537: PUSH
26538: LD_INT 22
26540: PUSH
26541: LD_OWVAR 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: PUSH
26553: LD_INT 34
26555: PUSH
26556: LD_INT 11
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 34
26565: PUSH
26566: LD_INT 30
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL_OW 69
26586: ST_TO_ADDR
// if not tmp then
26587: LD_VAR 0 2
26591: NOT
26592: IFFALSE 26596
// exit ;
26594: GO 26625
// for i in tmp do
26596: LD_ADDR_VAR 0 1
26600: PUSH
26601: LD_VAR 0 2
26605: PUSH
26606: FOR_IN
26607: IFFALSE 26623
// begin SetLives ( i , 0 ) ;
26609: LD_VAR 0 1
26613: PPUSH
26614: LD_INT 0
26616: PPUSH
26617: CALL_OW 234
// end ;
26621: GO 26606
26623: POP
26624: POP
// end ;
26625: PPOPN 2
26627: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26628: LD_EXP 51
26632: PUSH
26633: LD_EXP 61
26637: AND
26638: IFFALSE 26658
26640: GO 26642
26642: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26643: LD_INT 32
26645: PPUSH
26646: LD_OWVAR 2
26650: PPUSH
26651: LD_INT 0
26653: PPUSH
26654: CALL_OW 324
26658: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26659: LD_EXP 51
26663: PUSH
26664: LD_EXP 62
26668: AND
26669: IFFALSE 26850
26671: GO 26673
26673: DISABLE
26674: LD_INT 0
26676: PPUSH
26677: PPUSH
26678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26679: LD_ADDR_VAR 0 2
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_OWVAR 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 33
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PPUSH
26710: CALL_OW 69
26714: ST_TO_ADDR
// if not tmp then
26715: LD_VAR 0 2
26719: NOT
26720: IFFALSE 26724
// exit ;
26722: GO 26850
// side := 0 ;
26724: LD_ADDR_VAR 0 3
26728: PUSH
26729: LD_INT 0
26731: ST_TO_ADDR
// for i := 1 to 8 do
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: DOUBLE
26738: LD_INT 1
26740: DEC
26741: ST_TO_ADDR
26742: LD_INT 8
26744: PUSH
26745: FOR_TO
26746: IFFALSE 26794
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26748: LD_OWVAR 2
26752: PUSH
26753: LD_VAR 0 1
26757: NONEQUAL
26758: PUSH
26759: LD_OWVAR 2
26763: PPUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 81
26773: PUSH
26774: LD_INT 2
26776: EQUAL
26777: AND
26778: IFFALSE 26792
// begin side := i ;
26780: LD_ADDR_VAR 0 3
26784: PUSH
26785: LD_VAR 0 1
26789: ST_TO_ADDR
// break ;
26790: GO 26794
// end ;
26792: GO 26745
26794: POP
26795: POP
// if not side then
26796: LD_VAR 0 3
26800: NOT
26801: IFFALSE 26805
// exit ;
26803: GO 26850
// for i := 1 to tmp do
26805: LD_ADDR_VAR 0 1
26809: PUSH
26810: DOUBLE
26811: LD_INT 1
26813: DEC
26814: ST_TO_ADDR
26815: LD_VAR 0 2
26819: PUSH
26820: FOR_TO
26821: IFFALSE 26848
// if Prob ( 60 ) then
26823: LD_INT 60
26825: PPUSH
26826: CALL_OW 13
26830: IFFALSE 26846
// SetSide ( i , side ) ;
26832: LD_VAR 0 1
26836: PPUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 235
26846: GO 26820
26848: POP
26849: POP
// end ;
26850: PPOPN 3
26852: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26853: LD_EXP 51
26857: PUSH
26858: LD_EXP 64
26862: AND
26863: IFFALSE 26982
26865: GO 26867
26867: DISABLE
26868: LD_INT 0
26870: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26871: LD_ADDR_VAR 0 1
26875: PUSH
26876: LD_INT 22
26878: PUSH
26879: LD_OWVAR 2
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 21
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: LD_INT 23
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: LIST
26919: PPUSH
26920: CALL_OW 69
26924: PUSH
26925: FOR_IN
26926: IFFALSE 26980
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26928: LD_VAR 0 1
26932: PPUSH
26933: CALL_OW 257
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 3
26946: PUSH
26947: LD_INT 4
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: IN
26956: IFFALSE 26978
// SetClass ( un , rand ( 1 , 4 ) ) ;
26958: LD_VAR 0 1
26962: PPUSH
26963: LD_INT 1
26965: PPUSH
26966: LD_INT 4
26968: PPUSH
26969: CALL_OW 12
26973: PPUSH
26974: CALL_OW 336
26978: GO 26925
26980: POP
26981: POP
// end ;
26982: PPOPN 1
26984: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26985: LD_EXP 51
26989: PUSH
26990: LD_EXP 63
26994: AND
26995: IFFALSE 27074
26997: GO 26999
26999: DISABLE
27000: LD_INT 0
27002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27003: LD_ADDR_VAR 0 1
27007: PUSH
27008: LD_INT 22
27010: PUSH
27011: LD_OWVAR 2
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 21
27022: PUSH
27023: LD_INT 3
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 69
27038: ST_TO_ADDR
// if not tmp then
27039: LD_VAR 0 1
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27074
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27048: LD_VAR 0 1
27052: PUSH
27053: LD_INT 1
27055: PPUSH
27056: LD_VAR 0 1
27060: PPUSH
27061: CALL_OW 12
27065: ARRAY
27066: PPUSH
27067: LD_INT 100
27069: PPUSH
27070: CALL_OW 234
// end ;
27074: PPOPN 1
27076: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27077: LD_EXP 51
27081: PUSH
27082: LD_EXP 65
27086: AND
27087: IFFALSE 27185
27089: GO 27091
27091: DISABLE
27092: LD_INT 0
27094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27095: LD_ADDR_VAR 0 1
27099: PUSH
27100: LD_INT 22
27102: PUSH
27103: LD_OWVAR 2
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 21
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PPUSH
27126: CALL_OW 69
27130: ST_TO_ADDR
// if not tmp then
27131: LD_VAR 0 1
27135: NOT
27136: IFFALSE 27140
// exit ;
27138: GO 27185
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27140: LD_VAR 0 1
27144: PUSH
27145: LD_INT 1
27147: PPUSH
27148: LD_VAR 0 1
27152: PPUSH
27153: CALL_OW 12
27157: ARRAY
27158: PPUSH
27159: LD_INT 1
27161: PPUSH
27162: LD_INT 4
27164: PPUSH
27165: CALL_OW 12
27169: PPUSH
27170: LD_INT 3000
27172: PPUSH
27173: LD_INT 9000
27175: PPUSH
27176: CALL_OW 12
27180: PPUSH
27181: CALL_OW 492
// end ;
27185: PPOPN 1
27187: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27188: LD_EXP 51
27192: PUSH
27193: LD_EXP 66
27197: AND
27198: IFFALSE 27218
27200: GO 27202
27202: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27203: LD_INT 1
27205: PPUSH
27206: LD_OWVAR 2
27210: PPUSH
27211: LD_INT 0
27213: PPUSH
27214: CALL_OW 324
27218: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27219: LD_EXP 51
27223: PUSH
27224: LD_EXP 67
27228: AND
27229: IFFALSE 27312
27231: GO 27233
27233: DISABLE
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27238: LD_ADDR_VAR 0 2
27242: PUSH
27243: LD_INT 22
27245: PUSH
27246: LD_OWVAR 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 21
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 69
27273: ST_TO_ADDR
// if not tmp then
27274: LD_VAR 0 2
27278: NOT
27279: IFFALSE 27283
// exit ;
27281: GO 27312
// for i in tmp do
27283: LD_ADDR_VAR 0 1
27287: PUSH
27288: LD_VAR 0 2
27292: PUSH
27293: FOR_IN
27294: IFFALSE 27310
// SetBLevel ( i , 10 ) ;
27296: LD_VAR 0 1
27300: PPUSH
27301: LD_INT 10
27303: PPUSH
27304: CALL_OW 241
27308: GO 27293
27310: POP
27311: POP
// end ;
27312: PPOPN 2
27314: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27315: LD_EXP 51
27319: PUSH
27320: LD_EXP 68
27324: AND
27325: IFFALSE 27436
27327: GO 27329
27329: DISABLE
27330: LD_INT 0
27332: PPUSH
27333: PPUSH
27334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27335: LD_ADDR_VAR 0 3
27339: PUSH
27340: LD_INT 22
27342: PUSH
27343: LD_OWVAR 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 25
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 69
27370: ST_TO_ADDR
// if not tmp then
27371: LD_VAR 0 3
27375: NOT
27376: IFFALSE 27380
// exit ;
27378: GO 27436
// un := tmp [ rand ( 1 , tmp ) ] ;
27380: LD_ADDR_VAR 0 2
27384: PUSH
27385: LD_VAR 0 3
27389: PUSH
27390: LD_INT 1
27392: PPUSH
27393: LD_VAR 0 3
27397: PPUSH
27398: CALL_OW 12
27402: ARRAY
27403: ST_TO_ADDR
// if Crawls ( un ) then
27404: LD_VAR 0 2
27408: PPUSH
27409: CALL_OW 318
27413: IFFALSE 27424
// ComWalk ( un ) ;
27415: LD_VAR 0 2
27419: PPUSH
27420: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27424: LD_VAR 0 2
27428: PPUSH
27429: LD_INT 5
27431: PPUSH
27432: CALL_OW 336
// end ;
27436: PPOPN 3
27438: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27439: LD_EXP 51
27443: PUSH
27444: LD_EXP 69
27448: AND
27449: PUSH
27450: LD_OWVAR 67
27454: PUSH
27455: LD_INT 4
27457: LESS
27458: AND
27459: IFFALSE 27478
27461: GO 27463
27463: DISABLE
// begin Difficulty := Difficulty + 1 ;
27464: LD_ADDR_OWVAR 67
27468: PUSH
27469: LD_OWVAR 67
27473: PUSH
27474: LD_INT 1
27476: PLUS
27477: ST_TO_ADDR
// end ;
27478: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27479: LD_EXP 51
27483: PUSH
27484: LD_EXP 70
27488: AND
27489: IFFALSE 27592
27491: GO 27493
27493: DISABLE
27494: LD_INT 0
27496: PPUSH
// begin for i := 1 to 5 do
27497: LD_ADDR_VAR 0 1
27501: PUSH
27502: DOUBLE
27503: LD_INT 1
27505: DEC
27506: ST_TO_ADDR
27507: LD_INT 5
27509: PUSH
27510: FOR_TO
27511: IFFALSE 27590
// begin uc_nation := nation_nature ;
27513: LD_ADDR_OWVAR 21
27517: PUSH
27518: LD_INT 0
27520: ST_TO_ADDR
// uc_side := 0 ;
27521: LD_ADDR_OWVAR 20
27525: PUSH
27526: LD_INT 0
27528: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27529: LD_ADDR_OWVAR 29
27533: PUSH
27534: LD_INT 12
27536: PUSH
27537: LD_INT 12
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// hc_agressivity := 20 ;
27544: LD_ADDR_OWVAR 35
27548: PUSH
27549: LD_INT 20
27551: ST_TO_ADDR
// hc_class := class_tiger ;
27552: LD_ADDR_OWVAR 28
27556: PUSH
27557: LD_INT 14
27559: ST_TO_ADDR
// hc_gallery :=  ;
27560: LD_ADDR_OWVAR 33
27564: PUSH
27565: LD_STRING 
27567: ST_TO_ADDR
// hc_name :=  ;
27568: LD_ADDR_OWVAR 26
27572: PUSH
27573: LD_STRING 
27575: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27576: CALL_OW 44
27580: PPUSH
27581: LD_INT 0
27583: PPUSH
27584: CALL_OW 51
// end ;
27588: GO 27510
27590: POP
27591: POP
// end ;
27592: PPOPN 1
27594: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27595: LD_EXP 51
27599: PUSH
27600: LD_EXP 71
27604: AND
27605: IFFALSE 27614
27607: GO 27609
27609: DISABLE
// StreamSibBomb ;
27610: CALL 27615 0 0
27614: END
// export function StreamSibBomb ; var i , x , y ; begin
27615: LD_INT 0
27617: PPUSH
27618: PPUSH
27619: PPUSH
27620: PPUSH
// result := false ;
27621: LD_ADDR_VAR 0 1
27625: PUSH
27626: LD_INT 0
27628: ST_TO_ADDR
// for i := 1 to 16 do
27629: LD_ADDR_VAR 0 2
27633: PUSH
27634: DOUBLE
27635: LD_INT 1
27637: DEC
27638: ST_TO_ADDR
27639: LD_INT 16
27641: PUSH
27642: FOR_TO
27643: IFFALSE 27842
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_INT 10
27652: PUSH
27653: LD_INT 20
27655: PUSH
27656: LD_INT 30
27658: PUSH
27659: LD_INT 40
27661: PUSH
27662: LD_INT 50
27664: PUSH
27665: LD_INT 60
27667: PUSH
27668: LD_INT 70
27670: PUSH
27671: LD_INT 80
27673: PUSH
27674: LD_INT 90
27676: PUSH
27677: LD_INT 100
27679: PUSH
27680: LD_INT 110
27682: PUSH
27683: LD_INT 120
27685: PUSH
27686: LD_INT 130
27688: PUSH
27689: LD_INT 140
27691: PUSH
27692: LD_INT 150
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PPUSH
27715: LD_INT 15
27717: PPUSH
27718: CALL_OW 12
27722: ARRAY
27723: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27724: LD_ADDR_VAR 0 4
27728: PUSH
27729: LD_INT 10
27731: PUSH
27732: LD_INT 20
27734: PUSH
27735: LD_INT 30
27737: PUSH
27738: LD_INT 40
27740: PUSH
27741: LD_INT 50
27743: PUSH
27744: LD_INT 60
27746: PUSH
27747: LD_INT 70
27749: PUSH
27750: LD_INT 80
27752: PUSH
27753: LD_INT 90
27755: PUSH
27756: LD_INT 100
27758: PUSH
27759: LD_INT 110
27761: PUSH
27762: LD_INT 120
27764: PUSH
27765: LD_INT 130
27767: PUSH
27768: LD_INT 140
27770: PUSH
27771: LD_INT 150
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PPUSH
27794: LD_INT 15
27796: PPUSH
27797: CALL_OW 12
27801: ARRAY
27802: ST_TO_ADDR
// if ValidHex ( x , y ) then
27803: LD_VAR 0 3
27807: PPUSH
27808: LD_VAR 0 4
27812: PPUSH
27813: CALL_OW 488
27817: IFFALSE 27840
// begin result := [ x , y ] ;
27819: LD_ADDR_VAR 0 1
27823: PUSH
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 4
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// break ;
27838: GO 27842
// end ; end ;
27840: GO 27642
27842: POP
27843: POP
// if result then
27844: LD_VAR 0 1
27848: IFFALSE 27908
// begin ToLua ( playSibBomb() ) ;
27850: LD_STRING playSibBomb()
27852: PPUSH
27853: CALL_OW 559
// wait ( 0 0$14 ) ;
27857: LD_INT 490
27859: PPUSH
27860: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27864: LD_VAR 0 1
27868: PUSH
27869: LD_INT 1
27871: ARRAY
27872: PPUSH
27873: LD_VAR 0 1
27877: PUSH
27878: LD_INT 2
27880: ARRAY
27881: PPUSH
27882: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27886: LD_VAR 0 1
27890: PUSH
27891: LD_INT 1
27893: ARRAY
27894: PPUSH
27895: LD_VAR 0 1
27899: PUSH
27900: LD_INT 2
27902: ARRAY
27903: PPUSH
27904: CALL_OW 429
// end ; end ;
27908: LD_VAR 0 1
27912: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27913: LD_EXP 51
27917: PUSH
27918: LD_EXP 73
27922: AND
27923: IFFALSE 27935
27925: GO 27927
27927: DISABLE
// YouLost (  ) ;
27928: LD_STRING 
27930: PPUSH
27931: CALL_OW 104
27935: END
// every 0 0$1 trigger StreamModeActive and sFog do
27936: LD_EXP 51
27940: PUSH
27941: LD_EXP 72
27945: AND
27946: IFFALSE 27960
27948: GO 27950
27950: DISABLE
// FogOff ( your_side ) ;
27951: LD_OWVAR 2
27955: PPUSH
27956: CALL_OW 344
27960: END
// every 0 0$1 trigger StreamModeActive and sSun do
27961: LD_EXP 51
27965: PUSH
27966: LD_EXP 74
27970: AND
27971: IFFALSE 27999
27973: GO 27975
27975: DISABLE
// begin solar_recharge_percent := 0 ;
27976: LD_ADDR_OWVAR 79
27980: PUSH
27981: LD_INT 0
27983: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27984: LD_INT 10500
27986: PPUSH
27987: CALL_OW 67
// solar_recharge_percent := 100 ;
27991: LD_ADDR_OWVAR 79
27995: PUSH
27996: LD_INT 100
27998: ST_TO_ADDR
// end ;
27999: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28000: LD_EXP 51
28004: PUSH
28005: LD_EXP 75
28009: AND
28010: IFFALSE 28249
28012: GO 28014
28014: DISABLE
28015: LD_INT 0
28017: PPUSH
28018: PPUSH
28019: PPUSH
// begin tmp := [ ] ;
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: EMPTY
28026: ST_TO_ADDR
// for i := 1 to 6 do
28027: LD_ADDR_VAR 0 1
28031: PUSH
28032: DOUBLE
28033: LD_INT 1
28035: DEC
28036: ST_TO_ADDR
28037: LD_INT 6
28039: PUSH
28040: FOR_TO
28041: IFFALSE 28146
// begin uc_nation := nation_nature ;
28043: LD_ADDR_OWVAR 21
28047: PUSH
28048: LD_INT 0
28050: ST_TO_ADDR
// uc_side := 0 ;
28051: LD_ADDR_OWVAR 20
28055: PUSH
28056: LD_INT 0
28058: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28059: LD_ADDR_OWVAR 29
28063: PUSH
28064: LD_INT 12
28066: PUSH
28067: LD_INT 12
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: ST_TO_ADDR
// hc_agressivity := 20 ;
28074: LD_ADDR_OWVAR 35
28078: PUSH
28079: LD_INT 20
28081: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28082: LD_ADDR_OWVAR 28
28086: PUSH
28087: LD_INT 17
28089: ST_TO_ADDR
// hc_gallery :=  ;
28090: LD_ADDR_OWVAR 33
28094: PUSH
28095: LD_STRING 
28097: ST_TO_ADDR
// hc_name :=  ;
28098: LD_ADDR_OWVAR 26
28102: PUSH
28103: LD_STRING 
28105: ST_TO_ADDR
// un := CreateHuman ;
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: CALL_OW 44
28115: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28116: LD_VAR 0 2
28120: PPUSH
28121: LD_INT 1
28123: PPUSH
28124: CALL_OW 51
// tmp := tmp ^ un ;
28128: LD_ADDR_VAR 0 3
28132: PUSH
28133: LD_VAR 0 3
28137: PUSH
28138: LD_VAR 0 2
28142: ADD
28143: ST_TO_ADDR
// end ;
28144: GO 28040
28146: POP
28147: POP
// repeat wait ( 0 0$1 ) ;
28148: LD_INT 35
28150: PPUSH
28151: CALL_OW 67
// for un in tmp do
28155: LD_ADDR_VAR 0 2
28159: PUSH
28160: LD_VAR 0 3
28164: PUSH
28165: FOR_IN
28166: IFFALSE 28240
// begin if IsDead ( un ) then
28168: LD_VAR 0 2
28172: PPUSH
28173: CALL_OW 301
28177: IFFALSE 28197
// begin tmp := tmp diff un ;
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_VAR 0 3
28188: PUSH
28189: LD_VAR 0 2
28193: DIFF
28194: ST_TO_ADDR
// continue ;
28195: GO 28165
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28197: LD_VAR 0 2
28201: PPUSH
28202: LD_INT 3
28204: PUSH
28205: LD_INT 22
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PPUSH
28219: CALL_OW 69
28223: PPUSH
28224: LD_VAR 0 2
28228: PPUSH
28229: CALL_OW 74
28233: PPUSH
28234: CALL_OW 115
// end ;
28238: GO 28165
28240: POP
28241: POP
// until not tmp ;
28242: LD_VAR 0 3
28246: NOT
28247: IFFALSE 28148
// end ;
28249: PPOPN 3
28251: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28252: LD_EXP 51
28256: PUSH
28257: LD_EXP 76
28261: AND
28262: IFFALSE 28316
28264: GO 28266
28266: DISABLE
// begin ToLua ( displayTroll(); ) ;
28267: LD_STRING displayTroll();
28269: PPUSH
28270: CALL_OW 559
// wait ( 3 3$00 ) ;
28274: LD_INT 6300
28276: PPUSH
28277: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28281: LD_STRING hideTroll();
28283: PPUSH
28284: CALL_OW 559
// wait ( 1 1$00 ) ;
28288: LD_INT 2100
28290: PPUSH
28291: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28295: LD_STRING displayTroll();
28297: PPUSH
28298: CALL_OW 559
// wait ( 1 1$00 ) ;
28302: LD_INT 2100
28304: PPUSH
28305: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28309: LD_STRING hideTroll();
28311: PPUSH
28312: CALL_OW 559
// end ;
28316: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28317: LD_EXP 51
28321: PUSH
28322: LD_EXP 77
28326: AND
28327: IFFALSE 28390
28329: GO 28331
28331: DISABLE
28332: LD_INT 0
28334: PPUSH
// begin p := 0 ;
28335: LD_ADDR_VAR 0 1
28339: PUSH
28340: LD_INT 0
28342: ST_TO_ADDR
// repeat game_speed := 1 ;
28343: LD_ADDR_OWVAR 65
28347: PUSH
28348: LD_INT 1
28350: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28351: LD_INT 35
28353: PPUSH
28354: CALL_OW 67
// p := p + 1 ;
28358: LD_ADDR_VAR 0 1
28362: PUSH
28363: LD_VAR 0 1
28367: PUSH
28368: LD_INT 1
28370: PLUS
28371: ST_TO_ADDR
// until p >= 60 ;
28372: LD_VAR 0 1
28376: PUSH
28377: LD_INT 60
28379: GREATEREQUAL
28380: IFFALSE 28343
// game_speed := 4 ;
28382: LD_ADDR_OWVAR 65
28386: PUSH
28387: LD_INT 4
28389: ST_TO_ADDR
// end ;
28390: PPOPN 1
28392: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28393: LD_EXP 51
28397: PUSH
28398: LD_EXP 78
28402: AND
28403: IFFALSE 28549
28405: GO 28407
28407: DISABLE
28408: LD_INT 0
28410: PPUSH
28411: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28412: LD_ADDR_VAR 0 1
28416: PUSH
28417: LD_INT 22
28419: PUSH
28420: LD_OWVAR 2
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: LD_INT 30
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 30
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: ST_TO_ADDR
// if not depot then
28466: LD_VAR 0 1
28470: NOT
28471: IFFALSE 28475
// exit ;
28473: GO 28549
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28475: LD_ADDR_VAR 0 2
28479: PUSH
28480: LD_VAR 0 1
28484: PUSH
28485: LD_INT 1
28487: PPUSH
28488: LD_VAR 0 1
28492: PPUSH
28493: CALL_OW 12
28497: ARRAY
28498: PPUSH
28499: CALL_OW 274
28503: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 1
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28519: LD_VAR 0 2
28523: PPUSH
28524: LD_INT 2
28526: PPUSH
28527: LD_INT 0
28529: PPUSH
28530: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28534: LD_VAR 0 2
28538: PPUSH
28539: LD_INT 3
28541: PPUSH
28542: LD_INT 0
28544: PPUSH
28545: CALL_OW 277
// end ;
28549: PPOPN 2
28551: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28552: LD_EXP 51
28556: PUSH
28557: LD_EXP 79
28561: AND
28562: IFFALSE 28659
28564: GO 28566
28566: DISABLE
28567: LD_INT 0
28569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: LD_INT 22
28577: PUSH
28578: LD_OWVAR 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 21
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: LD_INT 23
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: PPUSH
28619: CALL_OW 69
28623: ST_TO_ADDR
// if not tmp then
28624: LD_VAR 0 1
28628: NOT
28629: IFFALSE 28633
// exit ;
28631: GO 28659
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28633: LD_VAR 0 1
28637: PUSH
28638: LD_INT 1
28640: PPUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 12
28650: ARRAY
28651: PPUSH
28652: LD_INT 200
28654: PPUSH
28655: CALL_OW 234
// end ;
28659: PPOPN 1
28661: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28662: LD_EXP 51
28666: PUSH
28667: LD_EXP 80
28671: AND
28672: IFFALSE 28751
28674: GO 28676
28676: DISABLE
28677: LD_INT 0
28679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28680: LD_ADDR_VAR 0 1
28684: PUSH
28685: LD_INT 22
28687: PUSH
28688: LD_OWVAR 2
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 21
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: ST_TO_ADDR
// if not tmp then
28716: LD_VAR 0 1
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28751
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28725: LD_VAR 0 1
28729: PUSH
28730: LD_INT 1
28732: PPUSH
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 12
28742: ARRAY
28743: PPUSH
28744: LD_INT 60
28746: PPUSH
28747: CALL_OW 234
// end ;
28751: PPOPN 1
28753: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28754: LD_EXP 51
28758: PUSH
28759: LD_EXP 81
28763: AND
28764: IFFALSE 28863
28766: GO 28768
28768: DISABLE
28769: LD_INT 0
28771: PPUSH
28772: PPUSH
// begin enable ;
28773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28774: LD_ADDR_VAR 0 1
28778: PUSH
28779: LD_INT 22
28781: PUSH
28782: LD_OWVAR 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 61
28793: PUSH
28794: EMPTY
28795: LIST
28796: PUSH
28797: LD_INT 33
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: PPUSH
28812: CALL_OW 69
28816: ST_TO_ADDR
// if not tmp then
28817: LD_VAR 0 1
28821: NOT
28822: IFFALSE 28826
// exit ;
28824: GO 28863
// for i in tmp do
28826: LD_ADDR_VAR 0 2
28830: PUSH
28831: LD_VAR 0 1
28835: PUSH
28836: FOR_IN
28837: IFFALSE 28861
// if IsControledBy ( i ) then
28839: LD_VAR 0 2
28843: PPUSH
28844: CALL_OW 312
28848: IFFALSE 28859
// ComUnlink ( i ) ;
28850: LD_VAR 0 2
28854: PPUSH
28855: CALL_OW 136
28859: GO 28836
28861: POP
28862: POP
// end ;
28863: PPOPN 2
28865: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28866: LD_EXP 51
28870: PUSH
28871: LD_EXP 82
28875: AND
28876: IFFALSE 29016
28878: GO 28880
28880: DISABLE
28881: LD_INT 0
28883: PPUSH
28884: PPUSH
// begin ToLua ( displayPowell(); ) ;
28885: LD_STRING displayPowell();
28887: PPUSH
28888: CALL_OW 559
// uc_side := 0 ;
28892: LD_ADDR_OWVAR 20
28896: PUSH
28897: LD_INT 0
28899: ST_TO_ADDR
// uc_nation := 2 ;
28900: LD_ADDR_OWVAR 21
28904: PUSH
28905: LD_INT 2
28907: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28908: LD_ADDR_OWVAR 37
28912: PUSH
28913: LD_INT 14
28915: ST_TO_ADDR
// vc_engine := engine_siberite ;
28916: LD_ADDR_OWVAR 39
28920: PUSH
28921: LD_INT 3
28923: ST_TO_ADDR
// vc_control := control_apeman ;
28924: LD_ADDR_OWVAR 38
28928: PUSH
28929: LD_INT 5
28931: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28932: LD_ADDR_OWVAR 40
28936: PUSH
28937: LD_INT 29
28939: ST_TO_ADDR
// un := CreateVehicle ;
28940: LD_ADDR_VAR 0 2
28944: PUSH
28945: CALL_OW 45
28949: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28950: LD_VAR 0 2
28954: PPUSH
28955: LD_INT 1
28957: PPUSH
28958: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28962: LD_INT 35
28964: PPUSH
28965: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28969: LD_VAR 0 2
28973: PPUSH
28974: LD_INT 22
28976: PUSH
28977: LD_OWVAR 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PPUSH
28986: CALL_OW 69
28990: PPUSH
28991: LD_VAR 0 2
28995: PPUSH
28996: CALL_OW 74
29000: PPUSH
29001: CALL_OW 115
// until IsDead ( un ) ;
29005: LD_VAR 0 2
29009: PPUSH
29010: CALL_OW 301
29014: IFFALSE 28962
// end ;
29016: PPOPN 2
29018: END
// every 0 0$1 trigger StreamModeActive and sStu do
29019: LD_EXP 51
29023: PUSH
29024: LD_EXP 90
29028: AND
29029: IFFALSE 29045
29031: GO 29033
29033: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29034: LD_STRING displayStucuk();
29036: PPUSH
29037: CALL_OW 559
// ResetFog ;
29041: CALL_OW 335
// end ;
29045: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29046: LD_EXP 51
29050: PUSH
29051: LD_EXP 83
29055: AND
29056: IFFALSE 29197
29058: GO 29060
29060: DISABLE
29061: LD_INT 0
29063: PPUSH
29064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29065: LD_ADDR_VAR 0 2
29069: PUSH
29070: LD_INT 22
29072: PUSH
29073: LD_OWVAR 2
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 21
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PPUSH
29096: CALL_OW 69
29100: ST_TO_ADDR
// if not tmp then
29101: LD_VAR 0 2
29105: NOT
29106: IFFALSE 29110
// exit ;
29108: GO 29197
// un := tmp [ rand ( 1 , tmp ) ] ;
29110: LD_ADDR_VAR 0 1
29114: PUSH
29115: LD_VAR 0 2
29119: PUSH
29120: LD_INT 1
29122: PPUSH
29123: LD_VAR 0 2
29127: PPUSH
29128: CALL_OW 12
29132: ARRAY
29133: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29134: LD_VAR 0 1
29138: PPUSH
29139: LD_INT 0
29141: PPUSH
29142: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29146: LD_VAR 0 1
29150: PPUSH
29151: LD_OWVAR 3
29155: PUSH
29156: LD_VAR 0 1
29160: DIFF
29161: PPUSH
29162: LD_VAR 0 1
29166: PPUSH
29167: CALL_OW 74
29171: PPUSH
29172: CALL_OW 115
// wait ( 0 0$20 ) ;
29176: LD_INT 700
29178: PPUSH
29179: CALL_OW 67
// SetSide ( un , your_side ) ;
29183: LD_VAR 0 1
29187: PPUSH
29188: LD_OWVAR 2
29192: PPUSH
29193: CALL_OW 235
// end ;
29197: PPOPN 2
29199: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29200: LD_EXP 51
29204: PUSH
29205: LD_EXP 84
29209: AND
29210: IFFALSE 29316
29212: GO 29214
29214: DISABLE
29215: LD_INT 0
29217: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29218: LD_ADDR_VAR 0 1
29222: PUSH
29223: LD_INT 22
29225: PUSH
29226: LD_OWVAR 2
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: LD_INT 30
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 30
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PPUSH
29267: CALL_OW 69
29271: ST_TO_ADDR
// if not depot then
29272: LD_VAR 0 1
29276: NOT
29277: IFFALSE 29281
// exit ;
29279: GO 29316
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29281: LD_VAR 0 1
29285: PUSH
29286: LD_INT 1
29288: ARRAY
29289: PPUSH
29290: CALL_OW 250
29294: PPUSH
29295: LD_VAR 0 1
29299: PUSH
29300: LD_INT 1
29302: ARRAY
29303: PPUSH
29304: CALL_OW 251
29308: PPUSH
29309: LD_INT 70
29311: PPUSH
29312: CALL_OW 495
// end ;
29316: PPOPN 1
29318: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29319: LD_EXP 51
29323: PUSH
29324: LD_EXP 85
29328: AND
29329: IFFALSE 29540
29331: GO 29333
29333: DISABLE
29334: LD_INT 0
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29341: LD_ADDR_VAR 0 5
29345: PUSH
29346: LD_INT 22
29348: PUSH
29349: LD_OWVAR 2
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 21
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PPUSH
29372: CALL_OW 69
29376: ST_TO_ADDR
// if not tmp then
29377: LD_VAR 0 5
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 29540
// for i in tmp do
29386: LD_ADDR_VAR 0 1
29390: PUSH
29391: LD_VAR 0 5
29395: PUSH
29396: FOR_IN
29397: IFFALSE 29538
// begin d := rand ( 0 , 5 ) ;
29399: LD_ADDR_VAR 0 4
29403: PUSH
29404: LD_INT 0
29406: PPUSH
29407: LD_INT 5
29409: PPUSH
29410: CALL_OW 12
29414: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29415: LD_ADDR_VAR 0 2
29419: PUSH
29420: LD_VAR 0 1
29424: PPUSH
29425: CALL_OW 250
29429: PPUSH
29430: LD_VAR 0 4
29434: PPUSH
29435: LD_INT 3
29437: PPUSH
29438: LD_INT 12
29440: PPUSH
29441: CALL_OW 12
29445: PPUSH
29446: CALL_OW 272
29450: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL_OW 251
29465: PPUSH
29466: LD_VAR 0 4
29470: PPUSH
29471: LD_INT 3
29473: PPUSH
29474: LD_INT 12
29476: PPUSH
29477: CALL_OW 12
29481: PPUSH
29482: CALL_OW 273
29486: ST_TO_ADDR
// if ValidHex ( x , y ) then
29487: LD_VAR 0 2
29491: PPUSH
29492: LD_VAR 0 3
29496: PPUSH
29497: CALL_OW 488
29501: IFFALSE 29536
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29503: LD_VAR 0 1
29507: PPUSH
29508: LD_VAR 0 2
29512: PPUSH
29513: LD_VAR 0 3
29517: PPUSH
29518: LD_INT 3
29520: PPUSH
29521: LD_INT 6
29523: PPUSH
29524: CALL_OW 12
29528: PPUSH
29529: LD_INT 1
29531: PPUSH
29532: CALL_OW 483
// end ;
29536: GO 29396
29538: POP
29539: POP
// end ;
29540: PPOPN 5
29542: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29543: LD_EXP 51
29547: PUSH
29548: LD_EXP 86
29552: AND
29553: IFFALSE 29647
29555: GO 29557
29557: DISABLE
29558: LD_INT 0
29560: PPUSH
29561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29562: LD_ADDR_VAR 0 2
29566: PUSH
29567: LD_INT 22
29569: PUSH
29570: LD_OWVAR 2
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 32
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 21
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: PPUSH
29604: CALL_OW 69
29608: ST_TO_ADDR
// if not tmp then
29609: LD_VAR 0 2
29613: NOT
29614: IFFALSE 29618
// exit ;
29616: GO 29647
// for i in tmp do
29618: LD_ADDR_VAR 0 1
29622: PUSH
29623: LD_VAR 0 2
29627: PUSH
29628: FOR_IN
29629: IFFALSE 29645
// SetFuel ( i , 0 ) ;
29631: LD_VAR 0 1
29635: PPUSH
29636: LD_INT 0
29638: PPUSH
29639: CALL_OW 240
29643: GO 29628
29645: POP
29646: POP
// end ;
29647: PPOPN 2
29649: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29650: LD_EXP 51
29654: PUSH
29655: LD_EXP 87
29659: AND
29660: IFFALSE 29726
29662: GO 29664
29664: DISABLE
29665: LD_INT 0
29667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29668: LD_ADDR_VAR 0 1
29672: PUSH
29673: LD_INT 22
29675: PUSH
29676: LD_OWVAR 2
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 30
29687: PUSH
29688: LD_INT 29
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PPUSH
29699: CALL_OW 69
29703: ST_TO_ADDR
// if not tmp then
29704: LD_VAR 0 1
29708: NOT
29709: IFFALSE 29713
// exit ;
29711: GO 29726
// DestroyUnit ( tmp [ 1 ] ) ;
29713: LD_VAR 0 1
29717: PUSH
29718: LD_INT 1
29720: ARRAY
29721: PPUSH
29722: CALL_OW 65
// end ;
29726: PPOPN 1
29728: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29729: LD_EXP 51
29733: PUSH
29734: LD_EXP 89
29738: AND
29739: IFFALSE 29868
29741: GO 29743
29743: DISABLE
29744: LD_INT 0
29746: PPUSH
// begin uc_side := 0 ;
29747: LD_ADDR_OWVAR 20
29751: PUSH
29752: LD_INT 0
29754: ST_TO_ADDR
// uc_nation := nation_arabian ;
29755: LD_ADDR_OWVAR 21
29759: PUSH
29760: LD_INT 2
29762: ST_TO_ADDR
// hc_gallery :=  ;
29763: LD_ADDR_OWVAR 33
29767: PUSH
29768: LD_STRING 
29770: ST_TO_ADDR
// hc_name :=  ;
29771: LD_ADDR_OWVAR 26
29775: PUSH
29776: LD_STRING 
29778: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29779: LD_INT 1
29781: PPUSH
29782: LD_INT 11
29784: PPUSH
29785: LD_INT 10
29787: PPUSH
29788: CALL_OW 380
// un := CreateHuman ;
29792: LD_ADDR_VAR 0 1
29796: PUSH
29797: CALL_OW 44
29801: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29802: LD_VAR 0 1
29806: PPUSH
29807: LD_INT 1
29809: PPUSH
29810: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29814: LD_INT 35
29816: PPUSH
29817: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29821: LD_VAR 0 1
29825: PPUSH
29826: LD_INT 22
29828: PUSH
29829: LD_OWVAR 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: CALL_OW 69
29842: PPUSH
29843: LD_VAR 0 1
29847: PPUSH
29848: CALL_OW 74
29852: PPUSH
29853: CALL_OW 115
// until IsDead ( un ) ;
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 301
29866: IFFALSE 29814
// end ;
29868: PPOPN 1
29870: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29871: LD_EXP 51
29875: PUSH
29876: LD_EXP 91
29880: AND
29881: IFFALSE 29893
29883: GO 29885
29885: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29886: LD_STRING earthquake(getX(game), 0, 32)
29888: PPUSH
29889: CALL_OW 559
29893: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29894: LD_EXP 51
29898: PUSH
29899: LD_EXP 92
29903: AND
29904: IFFALSE 29995
29906: GO 29908
29908: DISABLE
29909: LD_INT 0
29911: PPUSH
// begin enable ;
29912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29913: LD_ADDR_VAR 0 1
29917: PUSH
29918: LD_INT 22
29920: PUSH
29921: LD_OWVAR 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 21
29932: PUSH
29933: LD_INT 2
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 33
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: PPUSH
29955: CALL_OW 69
29959: ST_TO_ADDR
// if not tmp then
29960: LD_VAR 0 1
29964: NOT
29965: IFFALSE 29969
// exit ;
29967: GO 29995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29969: LD_VAR 0 1
29973: PUSH
29974: LD_INT 1
29976: PPUSH
29977: LD_VAR 0 1
29981: PPUSH
29982: CALL_OW 12
29986: ARRAY
29987: PPUSH
29988: LD_INT 1
29990: PPUSH
29991: CALL_OW 234
// end ;
29995: PPOPN 1
29997: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29998: LD_EXP 51
30002: PUSH
30003: LD_EXP 93
30007: AND
30008: IFFALSE 30149
30010: GO 30012
30012: DISABLE
30013: LD_INT 0
30015: PPUSH
30016: PPUSH
30017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_INT 22
30025: PUSH
30026: LD_OWVAR 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 25
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 69
30053: ST_TO_ADDR
// if not tmp then
30054: LD_VAR 0 3
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30149
// un := tmp [ rand ( 1 , tmp ) ] ;
30063: LD_ADDR_VAR 0 2
30067: PUSH
30068: LD_VAR 0 3
30072: PUSH
30073: LD_INT 1
30075: PPUSH
30076: LD_VAR 0 3
30080: PPUSH
30081: CALL_OW 12
30085: ARRAY
30086: ST_TO_ADDR
// if Crawls ( un ) then
30087: LD_VAR 0 2
30091: PPUSH
30092: CALL_OW 318
30096: IFFALSE 30107
// ComWalk ( un ) ;
30098: LD_VAR 0 2
30102: PPUSH
30103: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30107: LD_VAR 0 2
30111: PPUSH
30112: LD_INT 9
30114: PPUSH
30115: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30119: LD_INT 28
30121: PPUSH
30122: LD_OWVAR 2
30126: PPUSH
30127: LD_INT 2
30129: PPUSH
30130: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30134: LD_INT 29
30136: PPUSH
30137: LD_OWVAR 2
30141: PPUSH
30142: LD_INT 2
30144: PPUSH
30145: CALL_OW 322
// end ;
30149: PPOPN 3
30151: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30152: LD_EXP 51
30156: PUSH
30157: LD_EXP 94
30161: AND
30162: IFFALSE 30273
30164: GO 30166
30166: DISABLE
30167: LD_INT 0
30169: PPUSH
30170: PPUSH
30171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30172: LD_ADDR_VAR 0 3
30176: PUSH
30177: LD_INT 22
30179: PUSH
30180: LD_OWVAR 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 25
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PPUSH
30203: CALL_OW 69
30207: ST_TO_ADDR
// if not tmp then
30208: LD_VAR 0 3
30212: NOT
30213: IFFALSE 30217
// exit ;
30215: GO 30273
// un := tmp [ rand ( 1 , tmp ) ] ;
30217: LD_ADDR_VAR 0 2
30221: PUSH
30222: LD_VAR 0 3
30226: PUSH
30227: LD_INT 1
30229: PPUSH
30230: LD_VAR 0 3
30234: PPUSH
30235: CALL_OW 12
30239: ARRAY
30240: ST_TO_ADDR
// if Crawls ( un ) then
30241: LD_VAR 0 2
30245: PPUSH
30246: CALL_OW 318
30250: IFFALSE 30261
// ComWalk ( un ) ;
30252: LD_VAR 0 2
30256: PPUSH
30257: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30261: LD_VAR 0 2
30265: PPUSH
30266: LD_INT 8
30268: PPUSH
30269: CALL_OW 336
// end ;
30273: PPOPN 3
30275: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30276: LD_EXP 51
30280: PUSH
30281: LD_EXP 95
30285: AND
30286: IFFALSE 30430
30288: GO 30290
30290: DISABLE
30291: LD_INT 0
30293: PPUSH
30294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30295: LD_ADDR_VAR 0 2
30299: PUSH
30300: LD_INT 22
30302: PUSH
30303: LD_OWVAR 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 21
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 34
30327: PUSH
30328: LD_INT 12
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 34
30337: PUSH
30338: LD_INT 51
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 34
30347: PUSH
30348: LD_INT 32
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: PPUSH
30366: CALL_OW 69
30370: ST_TO_ADDR
// if not tmp then
30371: LD_VAR 0 2
30375: NOT
30376: IFFALSE 30380
// exit ;
30378: GO 30430
// for i in tmp do
30380: LD_ADDR_VAR 0 1
30384: PUSH
30385: LD_VAR 0 2
30389: PUSH
30390: FOR_IN
30391: IFFALSE 30428
// if GetCargo ( i , mat_artifact ) = 0 then
30393: LD_VAR 0 1
30397: PPUSH
30398: LD_INT 4
30400: PPUSH
30401: CALL_OW 289
30405: PUSH
30406: LD_INT 0
30408: EQUAL
30409: IFFALSE 30426
// SetCargo ( i , mat_siberit , 100 ) ;
30411: LD_VAR 0 1
30415: PPUSH
30416: LD_INT 3
30418: PPUSH
30419: LD_INT 100
30421: PPUSH
30422: CALL_OW 290
30426: GO 30390
30428: POP
30429: POP
// end ;
30430: PPOPN 2
30432: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30433: LD_EXP 51
30437: PUSH
30438: LD_EXP 96
30442: AND
30443: IFFALSE 30626
30445: GO 30447
30447: DISABLE
30448: LD_INT 0
30450: PPUSH
30451: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30452: LD_ADDR_VAR 0 2
30456: PUSH
30457: LD_INT 22
30459: PUSH
30460: LD_OWVAR 2
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 69
30473: ST_TO_ADDR
// if not tmp then
30474: LD_VAR 0 2
30478: NOT
30479: IFFALSE 30483
// exit ;
30481: GO 30626
// for i := 1 to 2 do
30483: LD_ADDR_VAR 0 1
30487: PUSH
30488: DOUBLE
30489: LD_INT 1
30491: DEC
30492: ST_TO_ADDR
30493: LD_INT 2
30495: PUSH
30496: FOR_TO
30497: IFFALSE 30624
// begin uc_side := your_side ;
30499: LD_ADDR_OWVAR 20
30503: PUSH
30504: LD_OWVAR 2
30508: ST_TO_ADDR
// uc_nation := nation_american ;
30509: LD_ADDR_OWVAR 21
30513: PUSH
30514: LD_INT 1
30516: ST_TO_ADDR
// vc_chassis := us_morphling ;
30517: LD_ADDR_OWVAR 37
30521: PUSH
30522: LD_INT 5
30524: ST_TO_ADDR
// vc_engine := engine_siberite ;
30525: LD_ADDR_OWVAR 39
30529: PUSH
30530: LD_INT 3
30532: ST_TO_ADDR
// vc_control := control_computer ;
30533: LD_ADDR_OWVAR 38
30537: PUSH
30538: LD_INT 3
30540: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30541: LD_ADDR_OWVAR 40
30545: PUSH
30546: LD_INT 10
30548: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30549: LD_VAR 0 2
30553: PUSH
30554: LD_INT 1
30556: ARRAY
30557: PPUSH
30558: CALL_OW 310
30562: NOT
30563: IFFALSE 30610
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30565: CALL_OW 45
30569: PPUSH
30570: LD_VAR 0 2
30574: PUSH
30575: LD_INT 1
30577: ARRAY
30578: PPUSH
30579: CALL_OW 250
30583: PPUSH
30584: LD_VAR 0 2
30588: PUSH
30589: LD_INT 1
30591: ARRAY
30592: PPUSH
30593: CALL_OW 251
30597: PPUSH
30598: LD_INT 12
30600: PPUSH
30601: LD_INT 1
30603: PPUSH
30604: CALL_OW 50
30608: GO 30622
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30610: CALL_OW 45
30614: PPUSH
30615: LD_INT 1
30617: PPUSH
30618: CALL_OW 51
// end ;
30622: GO 30496
30624: POP
30625: POP
// end ;
30626: PPOPN 2
30628: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30629: LD_EXP 51
30633: PUSH
30634: LD_EXP 97
30638: AND
30639: IFFALSE 30861
30641: GO 30643
30643: DISABLE
30644: LD_INT 0
30646: PPUSH
30647: PPUSH
30648: PPUSH
30649: PPUSH
30650: PPUSH
30651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30652: LD_ADDR_VAR 0 6
30656: PUSH
30657: LD_INT 22
30659: PUSH
30660: LD_OWVAR 2
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 21
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 3
30681: PUSH
30682: LD_INT 23
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: PPUSH
30701: CALL_OW 69
30705: ST_TO_ADDR
// if not tmp then
30706: LD_VAR 0 6
30710: NOT
30711: IFFALSE 30715
// exit ;
30713: GO 30861
// s1 := rand ( 1 , 4 ) ;
30715: LD_ADDR_VAR 0 2
30719: PUSH
30720: LD_INT 1
30722: PPUSH
30723: LD_INT 4
30725: PPUSH
30726: CALL_OW 12
30730: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30731: LD_ADDR_VAR 0 4
30735: PUSH
30736: LD_VAR 0 6
30740: PUSH
30741: LD_INT 1
30743: ARRAY
30744: PPUSH
30745: LD_VAR 0 2
30749: PPUSH
30750: CALL_OW 259
30754: ST_TO_ADDR
// if s1 = 1 then
30755: LD_VAR 0 2
30759: PUSH
30760: LD_INT 1
30762: EQUAL
30763: IFFALSE 30783
// s2 := rand ( 2 , 4 ) else
30765: LD_ADDR_VAR 0 3
30769: PUSH
30770: LD_INT 2
30772: PPUSH
30773: LD_INT 4
30775: PPUSH
30776: CALL_OW 12
30780: ST_TO_ADDR
30781: GO 30791
// s2 := 1 ;
30783: LD_ADDR_VAR 0 3
30787: PUSH
30788: LD_INT 1
30790: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30791: LD_ADDR_VAR 0 5
30795: PUSH
30796: LD_VAR 0 6
30800: PUSH
30801: LD_INT 1
30803: ARRAY
30804: PPUSH
30805: LD_VAR 0 3
30809: PPUSH
30810: CALL_OW 259
30814: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30815: LD_VAR 0 6
30819: PUSH
30820: LD_INT 1
30822: ARRAY
30823: PPUSH
30824: LD_VAR 0 2
30828: PPUSH
30829: LD_VAR 0 5
30833: PPUSH
30834: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30838: LD_VAR 0 6
30842: PUSH
30843: LD_INT 1
30845: ARRAY
30846: PPUSH
30847: LD_VAR 0 3
30851: PPUSH
30852: LD_VAR 0 4
30856: PPUSH
30857: CALL_OW 237
// end ;
30861: PPOPN 6
30863: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30864: LD_EXP 51
30868: PUSH
30869: LD_EXP 98
30873: AND
30874: IFFALSE 30953
30876: GO 30878
30878: DISABLE
30879: LD_INT 0
30881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30882: LD_ADDR_VAR 0 1
30886: PUSH
30887: LD_INT 22
30889: PUSH
30890: LD_OWVAR 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 30
30901: PUSH
30902: LD_INT 3
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PPUSH
30913: CALL_OW 69
30917: ST_TO_ADDR
// if not tmp then
30918: LD_VAR 0 1
30922: NOT
30923: IFFALSE 30927
// exit ;
30925: GO 30953
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30927: LD_VAR 0 1
30931: PUSH
30932: LD_INT 1
30934: PPUSH
30935: LD_VAR 0 1
30939: PPUSH
30940: CALL_OW 12
30944: ARRAY
30945: PPUSH
30946: LD_INT 1
30948: PPUSH
30949: CALL_OW 234
// end ;
30953: PPOPN 1
30955: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30956: LD_EXP 51
30960: PUSH
30961: LD_EXP 99
30965: AND
30966: IFFALSE 31078
30968: GO 30970
30970: DISABLE
30971: LD_INT 0
30973: PPUSH
30974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30975: LD_ADDR_VAR 0 2
30979: PUSH
30980: LD_INT 22
30982: PUSH
30983: LD_OWVAR 2
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: LD_INT 30
30997: PUSH
30998: LD_INT 27
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 30
31007: PUSH
31008: LD_INT 26
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 30
31017: PUSH
31018: LD_INT 28
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 69
31039: ST_TO_ADDR
// if not tmp then
31040: LD_VAR 0 2
31044: NOT
31045: IFFALSE 31049
// exit ;
31047: GO 31078
// for i in tmp do
31049: LD_ADDR_VAR 0 1
31053: PUSH
31054: LD_VAR 0 2
31058: PUSH
31059: FOR_IN
31060: IFFALSE 31076
// SetLives ( i , 1 ) ;
31062: LD_VAR 0 1
31066: PPUSH
31067: LD_INT 1
31069: PPUSH
31070: CALL_OW 234
31074: GO 31059
31076: POP
31077: POP
// end ;
31078: PPOPN 2
31080: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31081: LD_EXP 51
31085: PUSH
31086: LD_EXP 100
31090: AND
31091: IFFALSE 31378
31093: GO 31095
31095: DISABLE
31096: LD_INT 0
31098: PPUSH
31099: PPUSH
31100: PPUSH
// begin i := rand ( 1 , 7 ) ;
31101: LD_ADDR_VAR 0 1
31105: PUSH
31106: LD_INT 1
31108: PPUSH
31109: LD_INT 7
31111: PPUSH
31112: CALL_OW 12
31116: ST_TO_ADDR
// case i of 1 :
31117: LD_VAR 0 1
31121: PUSH
31122: LD_INT 1
31124: DOUBLE
31125: EQUAL
31126: IFTRUE 31130
31128: GO 31140
31130: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31131: LD_STRING earthquake(getX(game), 0, 32)
31133: PPUSH
31134: CALL_OW 559
31138: GO 31378
31140: LD_INT 2
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31148
31146: GO 31162
31148: POP
// begin ToLua ( displayStucuk(); ) ;
31149: LD_STRING displayStucuk();
31151: PPUSH
31152: CALL_OW 559
// ResetFog ;
31156: CALL_OW 335
// end ; 3 :
31160: GO 31378
31162: LD_INT 3
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31274
31170: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31171: LD_ADDR_VAR 0 2
31175: PUSH
31176: LD_INT 22
31178: PUSH
31179: LD_OWVAR 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 25
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PPUSH
31202: CALL_OW 69
31206: ST_TO_ADDR
// if not tmp then
31207: LD_VAR 0 2
31211: NOT
31212: IFFALSE 31216
// exit ;
31214: GO 31378
// un := tmp [ rand ( 1 , tmp ) ] ;
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_VAR 0 2
31225: PUSH
31226: LD_INT 1
31228: PPUSH
31229: LD_VAR 0 2
31233: PPUSH
31234: CALL_OW 12
31238: ARRAY
31239: ST_TO_ADDR
// if Crawls ( un ) then
31240: LD_VAR 0 3
31244: PPUSH
31245: CALL_OW 318
31249: IFFALSE 31260
// ComWalk ( un ) ;
31251: LD_VAR 0 3
31255: PPUSH
31256: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31260: LD_VAR 0 3
31264: PPUSH
31265: LD_INT 8
31267: PPUSH
31268: CALL_OW 336
// end ; 4 :
31272: GO 31378
31274: LD_INT 4
31276: DOUBLE
31277: EQUAL
31278: IFTRUE 31282
31280: GO 31356
31282: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31283: LD_ADDR_VAR 0 2
31287: PUSH
31288: LD_INT 22
31290: PUSH
31291: LD_OWVAR 2
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 30
31302: PUSH
31303: LD_INT 29
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PPUSH
31314: CALL_OW 69
31318: ST_TO_ADDR
// if not tmp then
31319: LD_VAR 0 2
31323: NOT
31324: IFFALSE 31328
// exit ;
31326: GO 31378
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31328: LD_VAR 0 2
31332: PUSH
31333: LD_INT 1
31335: ARRAY
31336: PPUSH
31337: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31341: LD_VAR 0 2
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: CALL_OW 65
// end ; 5 .. 7 :
31354: GO 31378
31356: LD_INT 5
31358: DOUBLE
31359: GREATEREQUAL
31360: IFFALSE 31368
31362: LD_INT 7
31364: DOUBLE
31365: LESSEQUAL
31366: IFTRUE 31370
31368: GO 31377
31370: POP
// StreamSibBomb ; end ;
31371: CALL 27615 0 0
31375: GO 31378
31377: POP
// end ;
31378: PPOPN 3
31380: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31381: LD_EXP 51
31385: PUSH
31386: LD_EXP 101
31390: AND
31391: IFFALSE 31547
31393: GO 31395
31395: DISABLE
31396: LD_INT 0
31398: PPUSH
31399: PPUSH
31400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31401: LD_ADDR_VAR 0 2
31405: PUSH
31406: LD_INT 81
31408: PUSH
31409: LD_OWVAR 2
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: LD_INT 21
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 21
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PPUSH
31450: CALL_OW 69
31454: ST_TO_ADDR
// if not tmp then
31455: LD_VAR 0 2
31459: NOT
31460: IFFALSE 31464
// exit ;
31462: GO 31547
// p := 0 ;
31464: LD_ADDR_VAR 0 3
31468: PUSH
31469: LD_INT 0
31471: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31472: LD_INT 35
31474: PPUSH
31475: CALL_OW 67
// p := p + 1 ;
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_VAR 0 3
31488: PUSH
31489: LD_INT 1
31491: PLUS
31492: ST_TO_ADDR
// for i in tmp do
31493: LD_ADDR_VAR 0 1
31497: PUSH
31498: LD_VAR 0 2
31502: PUSH
31503: FOR_IN
31504: IFFALSE 31535
// if GetLives ( i ) < 1000 then
31506: LD_VAR 0 1
31510: PPUSH
31511: CALL_OW 256
31515: PUSH
31516: LD_INT 1000
31518: LESS
31519: IFFALSE 31533
// SetLives ( i , 1000 ) ;
31521: LD_VAR 0 1
31525: PPUSH
31526: LD_INT 1000
31528: PPUSH
31529: CALL_OW 234
31533: GO 31503
31535: POP
31536: POP
// until p > 20 ;
31537: LD_VAR 0 3
31541: PUSH
31542: LD_INT 20
31544: GREATER
31545: IFFALSE 31472
// end ;
31547: PPOPN 3
31549: END
// every 0 0$1 trigger StreamModeActive and sTime do
31550: LD_EXP 51
31554: PUSH
31555: LD_EXP 102
31559: AND
31560: IFFALSE 31595
31562: GO 31564
31564: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31565: LD_INT 28
31567: PPUSH
31568: LD_OWVAR 2
31572: PPUSH
31573: LD_INT 2
31575: PPUSH
31576: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31580: LD_INT 30
31582: PPUSH
31583: LD_OWVAR 2
31587: PPUSH
31588: LD_INT 2
31590: PPUSH
31591: CALL_OW 322
// end ;
31595: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31596: LD_EXP 51
31600: PUSH
31601: LD_EXP 103
31605: AND
31606: IFFALSE 31727
31608: GO 31610
31610: DISABLE
31611: LD_INT 0
31613: PPUSH
31614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31615: LD_ADDR_VAR 0 2
31619: PUSH
31620: LD_INT 22
31622: PUSH
31623: LD_OWVAR 2
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 21
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 3
31644: PUSH
31645: LD_INT 23
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: PPUSH
31664: CALL_OW 69
31668: ST_TO_ADDR
// if not tmp then
31669: LD_VAR 0 2
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31727
// for i in tmp do
31678: LD_ADDR_VAR 0 1
31682: PUSH
31683: LD_VAR 0 2
31687: PUSH
31688: FOR_IN
31689: IFFALSE 31725
// begin if Crawls ( i ) then
31691: LD_VAR 0 1
31695: PPUSH
31696: CALL_OW 318
31700: IFFALSE 31711
// ComWalk ( i ) ;
31702: LD_VAR 0 1
31706: PPUSH
31707: CALL_OW 138
// SetClass ( i , 2 ) ;
31711: LD_VAR 0 1
31715: PPUSH
31716: LD_INT 2
31718: PPUSH
31719: CALL_OW 336
// end ;
31723: GO 31688
31725: POP
31726: POP
// end ;
31727: PPOPN 2
31729: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31730: LD_EXP 51
31734: PUSH
31735: LD_EXP 104
31739: AND
31740: IFFALSE 32028
31742: GO 31744
31744: DISABLE
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31750: LD_OWVAR 2
31754: PPUSH
31755: LD_INT 9
31757: PPUSH
31758: LD_INT 1
31760: PPUSH
31761: LD_INT 1
31763: PPUSH
31764: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31768: LD_INT 9
31770: PPUSH
31771: LD_OWVAR 2
31775: PPUSH
31776: CALL_OW 343
// uc_side := 9 ;
31780: LD_ADDR_OWVAR 20
31784: PUSH
31785: LD_INT 9
31787: ST_TO_ADDR
// uc_nation := 2 ;
31788: LD_ADDR_OWVAR 21
31792: PUSH
31793: LD_INT 2
31795: ST_TO_ADDR
// hc_name := Dark Warrior ;
31796: LD_ADDR_OWVAR 26
31800: PUSH
31801: LD_STRING Dark Warrior
31803: ST_TO_ADDR
// hc_gallery :=  ;
31804: LD_ADDR_OWVAR 33
31808: PUSH
31809: LD_STRING 
31811: ST_TO_ADDR
// hc_noskilllimit := true ;
31812: LD_ADDR_OWVAR 76
31816: PUSH
31817: LD_INT 1
31819: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31820: LD_ADDR_OWVAR 31
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_INT 30
31830: PUSH
31831: LD_INT 30
31833: PUSH
31834: LD_INT 30
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// un := CreateHuman ;
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: CALL_OW 44
31852: ST_TO_ADDR
// hc_noskilllimit := false ;
31853: LD_ADDR_OWVAR 76
31857: PUSH
31858: LD_INT 0
31860: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31861: LD_VAR 0 3
31865: PPUSH
31866: LD_INT 1
31868: PPUSH
31869: CALL_OW 51
// ToLua ( playRanger() ) ;
31873: LD_STRING playRanger()
31875: PPUSH
31876: CALL_OW 559
// p := 0 ;
31880: LD_ADDR_VAR 0 2
31884: PUSH
31885: LD_INT 0
31887: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31888: LD_INT 35
31890: PPUSH
31891: CALL_OW 67
// p := p + 1 ;
31895: LD_ADDR_VAR 0 2
31899: PUSH
31900: LD_VAR 0 2
31904: PUSH
31905: LD_INT 1
31907: PLUS
31908: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31909: LD_VAR 0 3
31913: PPUSH
31914: CALL_OW 256
31918: PUSH
31919: LD_INT 1000
31921: LESS
31922: IFFALSE 31936
// SetLives ( un , 1000 ) ;
31924: LD_VAR 0 3
31928: PPUSH
31929: LD_INT 1000
31931: PPUSH
31932: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31936: LD_VAR 0 3
31940: PPUSH
31941: LD_INT 81
31943: PUSH
31944: LD_OWVAR 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 91
31955: PUSH
31956: LD_VAR 0 3
31960: PUSH
31961: LD_INT 30
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PPUSH
31973: CALL_OW 69
31977: PPUSH
31978: LD_VAR 0 3
31982: PPUSH
31983: CALL_OW 74
31987: PPUSH
31988: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31992: LD_VAR 0 2
31996: PUSH
31997: LD_INT 80
31999: GREATER
32000: PUSH
32001: LD_VAR 0 3
32005: PPUSH
32006: CALL_OW 301
32010: OR
32011: IFFALSE 31888
// if un then
32013: LD_VAR 0 3
32017: IFFALSE 32028
// RemoveUnit ( un ) ;
32019: LD_VAR 0 3
32023: PPUSH
32024: CALL_OW 64
// end ;
32028: PPOPN 3
32030: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32031: LD_EXP 105
32035: IFFALSE 32151
32037: GO 32039
32039: DISABLE
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
32044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32045: LD_ADDR_VAR 0 2
32049: PUSH
32050: LD_INT 81
32052: PUSH
32053: LD_OWVAR 2
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 21
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PPUSH
32076: CALL_OW 69
32080: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32081: LD_STRING playComputer()
32083: PPUSH
32084: CALL_OW 559
// if not tmp then
32088: LD_VAR 0 2
32092: NOT
32093: IFFALSE 32097
// exit ;
32095: GO 32151
// for i in tmp do
32097: LD_ADDR_VAR 0 1
32101: PUSH
32102: LD_VAR 0 2
32106: PUSH
32107: FOR_IN
32108: IFFALSE 32149
// for j := 1 to 4 do
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: DOUBLE
32116: LD_INT 1
32118: DEC
32119: ST_TO_ADDR
32120: LD_INT 4
32122: PUSH
32123: FOR_TO
32124: IFFALSE 32145
// SetSkill ( i , j , 10 ) ;
32126: LD_VAR 0 1
32130: PPUSH
32131: LD_VAR 0 3
32135: PPUSH
32136: LD_INT 10
32138: PPUSH
32139: CALL_OW 237
32143: GO 32123
32145: POP
32146: POP
32147: GO 32107
32149: POP
32150: POP
// end ;
32151: PPOPN 3
32153: END
// every 0 0$1 trigger s30 do var i , tmp ;
32154: LD_EXP 106
32158: IFFALSE 32227
32160: GO 32162
32162: DISABLE
32163: LD_INT 0
32165: PPUSH
32166: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32167: LD_ADDR_VAR 0 2
32171: PUSH
32172: LD_INT 22
32174: PUSH
32175: LD_OWVAR 2
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PPUSH
32184: CALL_OW 69
32188: ST_TO_ADDR
// if not tmp then
32189: LD_VAR 0 2
32193: NOT
32194: IFFALSE 32198
// exit ;
32196: GO 32227
// for i in tmp do
32198: LD_ADDR_VAR 0 1
32202: PUSH
32203: LD_VAR 0 2
32207: PUSH
32208: FOR_IN
32209: IFFALSE 32225
// SetLives ( i , 300 ) ;
32211: LD_VAR 0 1
32215: PPUSH
32216: LD_INT 300
32218: PPUSH
32219: CALL_OW 234
32223: GO 32208
32225: POP
32226: POP
// end ;
32227: PPOPN 2
32229: END
// every 0 0$1 trigger s60 do var i , tmp ;
32230: LD_EXP 107
32234: IFFALSE 32303
32236: GO 32238
32238: DISABLE
32239: LD_INT 0
32241: PPUSH
32242: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32243: LD_ADDR_VAR 0 2
32247: PUSH
32248: LD_INT 22
32250: PUSH
32251: LD_OWVAR 2
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PPUSH
32260: CALL_OW 69
32264: ST_TO_ADDR
// if not tmp then
32265: LD_VAR 0 2
32269: NOT
32270: IFFALSE 32274
// exit ;
32272: GO 32303
// for i in tmp do
32274: LD_ADDR_VAR 0 1
32278: PUSH
32279: LD_VAR 0 2
32283: PUSH
32284: FOR_IN
32285: IFFALSE 32301
// SetLives ( i , 600 ) ;
32287: LD_VAR 0 1
32291: PPUSH
32292: LD_INT 600
32294: PPUSH
32295: CALL_OW 234
32299: GO 32284
32301: POP
32302: POP
// end ;
32303: PPOPN 2
32305: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32306: LD_INT 0
32308: PPUSH
// case cmd of 301 :
32309: LD_VAR 0 1
32313: PUSH
32314: LD_INT 301
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32354
32322: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32323: LD_VAR 0 6
32327: PPUSH
32328: LD_VAR 0 7
32332: PPUSH
32333: LD_VAR 0 8
32337: PPUSH
32338: LD_VAR 0 4
32342: PPUSH
32343: LD_VAR 0 5
32347: PPUSH
32348: CALL 33563 0 5
32352: GO 32475
32354: LD_INT 302
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32399
32362: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32363: LD_VAR 0 6
32367: PPUSH
32368: LD_VAR 0 7
32372: PPUSH
32373: LD_VAR 0 8
32377: PPUSH
32378: LD_VAR 0 9
32382: PPUSH
32383: LD_VAR 0 4
32387: PPUSH
32388: LD_VAR 0 5
32392: PPUSH
32393: CALL 33654 0 6
32397: GO 32475
32399: LD_INT 303
32401: DOUBLE
32402: EQUAL
32403: IFTRUE 32407
32405: GO 32444
32407: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32408: LD_VAR 0 6
32412: PPUSH
32413: LD_VAR 0 7
32417: PPUSH
32418: LD_VAR 0 8
32422: PPUSH
32423: LD_VAR 0 9
32427: PPUSH
32428: LD_VAR 0 4
32432: PPUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: CALL 32480 0 6
32442: GO 32475
32444: LD_INT 304
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32452
32450: GO 32474
32452: POP
// hHackTeleport ( unit , x , y ) ; end ;
32453: LD_VAR 0 2
32457: PPUSH
32458: LD_VAR 0 4
32462: PPUSH
32463: LD_VAR 0 5
32467: PPUSH
32468: CALL 34247 0 3
32472: GO 32475
32474: POP
// end ;
32475: LD_VAR 0 12
32479: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32480: LD_INT 0
32482: PPUSH
32483: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32484: LD_VAR 0 1
32488: PUSH
32489: LD_INT 1
32491: LESS
32492: PUSH
32493: LD_VAR 0 1
32497: PUSH
32498: LD_INT 3
32500: GREATER
32501: OR
32502: PUSH
32503: LD_VAR 0 5
32507: PPUSH
32508: LD_VAR 0 6
32512: PPUSH
32513: CALL_OW 428
32517: OR
32518: IFFALSE 32522
// exit ;
32520: GO 33250
// uc_side := your_side ;
32522: LD_ADDR_OWVAR 20
32526: PUSH
32527: LD_OWVAR 2
32531: ST_TO_ADDR
// uc_nation := nation ;
32532: LD_ADDR_OWVAR 21
32536: PUSH
32537: LD_VAR 0 1
32541: ST_TO_ADDR
// bc_level = 1 ;
32542: LD_ADDR_OWVAR 43
32546: PUSH
32547: LD_INT 1
32549: ST_TO_ADDR
// case btype of 1 :
32550: LD_VAR 0 2
32554: PUSH
32555: LD_INT 1
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32574
32563: POP
// bc_type := b_depot ; 2 :
32564: LD_ADDR_OWVAR 42
32568: PUSH
32569: LD_INT 0
32571: ST_TO_ADDR
32572: GO 33194
32574: LD_INT 2
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32593
32582: POP
// bc_type := b_warehouse ; 3 :
32583: LD_ADDR_OWVAR 42
32587: PUSH
32588: LD_INT 1
32590: ST_TO_ADDR
32591: GO 33194
32593: LD_INT 3
32595: DOUBLE
32596: EQUAL
32597: IFTRUE 32601
32599: GO 32612
32601: POP
// bc_type := b_lab ; 4 .. 9 :
32602: LD_ADDR_OWVAR 42
32606: PUSH
32607: LD_INT 6
32609: ST_TO_ADDR
32610: GO 33194
32612: LD_INT 4
32614: DOUBLE
32615: GREATEREQUAL
32616: IFFALSE 32624
32618: LD_INT 9
32620: DOUBLE
32621: LESSEQUAL
32622: IFTRUE 32626
32624: GO 32686
32626: POP
// begin bc_type := b_lab_half ;
32627: LD_ADDR_OWVAR 42
32631: PUSH
32632: LD_INT 7
32634: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32635: LD_ADDR_OWVAR 44
32639: PUSH
32640: LD_INT 10
32642: PUSH
32643: LD_INT 11
32645: PUSH
32646: LD_INT 12
32648: PUSH
32649: LD_INT 15
32651: PUSH
32652: LD_INT 14
32654: PUSH
32655: LD_INT 13
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: LD_VAR 0 2
32670: PUSH
32671: LD_INT 3
32673: MINUS
32674: ARRAY
32675: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32676: LD_ADDR_OWVAR 45
32680: PUSH
32681: LD_INT 9
32683: ST_TO_ADDR
// end ; 10 .. 13 :
32684: GO 33194
32686: LD_INT 10
32688: DOUBLE
32689: GREATEREQUAL
32690: IFFALSE 32698
32692: LD_INT 13
32694: DOUBLE
32695: LESSEQUAL
32696: IFTRUE 32700
32698: GO 32777
32700: POP
// begin bc_type := b_lab_full ;
32701: LD_ADDR_OWVAR 42
32705: PUSH
32706: LD_INT 8
32708: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32709: LD_ADDR_OWVAR 44
32713: PUSH
32714: LD_INT 10
32716: PUSH
32717: LD_INT 12
32719: PUSH
32720: LD_INT 14
32722: PUSH
32723: LD_INT 13
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: PUSH
32732: LD_VAR 0 2
32736: PUSH
32737: LD_INT 9
32739: MINUS
32740: ARRAY
32741: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32742: LD_ADDR_OWVAR 45
32746: PUSH
32747: LD_INT 11
32749: PUSH
32750: LD_INT 15
32752: PUSH
32753: LD_INT 12
32755: PUSH
32756: LD_INT 15
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: LD_VAR 0 2
32769: PUSH
32770: LD_INT 9
32772: MINUS
32773: ARRAY
32774: ST_TO_ADDR
// end ; 14 :
32775: GO 33194
32777: LD_INT 14
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32785
32783: GO 32796
32785: POP
// bc_type := b_workshop ; 15 :
32786: LD_ADDR_OWVAR 42
32790: PUSH
32791: LD_INT 2
32793: ST_TO_ADDR
32794: GO 33194
32796: LD_INT 15
32798: DOUBLE
32799: EQUAL
32800: IFTRUE 32804
32802: GO 32815
32804: POP
// bc_type := b_factory ; 16 :
32805: LD_ADDR_OWVAR 42
32809: PUSH
32810: LD_INT 3
32812: ST_TO_ADDR
32813: GO 33194
32815: LD_INT 16
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 32834
32823: POP
// bc_type := b_ext_gun ; 17 :
32824: LD_ADDR_OWVAR 42
32828: PUSH
32829: LD_INT 17
32831: ST_TO_ADDR
32832: GO 33194
32834: LD_INT 17
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32842
32840: GO 32870
32842: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32843: LD_ADDR_OWVAR 42
32847: PUSH
32848: LD_INT 19
32850: PUSH
32851: LD_INT 23
32853: PUSH
32854: LD_INT 19
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: PUSH
32862: LD_VAR 0 1
32866: ARRAY
32867: ST_TO_ADDR
32868: GO 33194
32870: LD_INT 18
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32889
32878: POP
// bc_type := b_ext_radar ; 19 :
32879: LD_ADDR_OWVAR 42
32883: PUSH
32884: LD_INT 20
32886: ST_TO_ADDR
32887: GO 33194
32889: LD_INT 19
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32908
32897: POP
// bc_type := b_ext_radio ; 20 :
32898: LD_ADDR_OWVAR 42
32902: PUSH
32903: LD_INT 22
32905: ST_TO_ADDR
32906: GO 33194
32908: LD_INT 20
32910: DOUBLE
32911: EQUAL
32912: IFTRUE 32916
32914: GO 32927
32916: POP
// bc_type := b_ext_siberium ; 21 :
32917: LD_ADDR_OWVAR 42
32921: PUSH
32922: LD_INT 21
32924: ST_TO_ADDR
32925: GO 33194
32927: LD_INT 21
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 32946
32935: POP
// bc_type := b_ext_computer ; 22 :
32936: LD_ADDR_OWVAR 42
32940: PUSH
32941: LD_INT 24
32943: ST_TO_ADDR
32944: GO 33194
32946: LD_INT 22
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32954
32952: GO 32965
32954: POP
// bc_type := b_ext_track ; 23 :
32955: LD_ADDR_OWVAR 42
32959: PUSH
32960: LD_INT 16
32962: ST_TO_ADDR
32963: GO 33194
32965: LD_INT 23
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 32984
32973: POP
// bc_type := b_ext_laser ; 24 :
32974: LD_ADDR_OWVAR 42
32978: PUSH
32979: LD_INT 25
32981: ST_TO_ADDR
32982: GO 33194
32984: LD_INT 24
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33003
32992: POP
// bc_type := b_control_tower ; 25 :
32993: LD_ADDR_OWVAR 42
32997: PUSH
32998: LD_INT 36
33000: ST_TO_ADDR
33001: GO 33194
33003: LD_INT 25
33005: DOUBLE
33006: EQUAL
33007: IFTRUE 33011
33009: GO 33022
33011: POP
// bc_type := b_breastwork ; 26 :
33012: LD_ADDR_OWVAR 42
33016: PUSH
33017: LD_INT 31
33019: ST_TO_ADDR
33020: GO 33194
33022: LD_INT 26
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33041
33030: POP
// bc_type := b_bunker ; 27 :
33031: LD_ADDR_OWVAR 42
33035: PUSH
33036: LD_INT 32
33038: ST_TO_ADDR
33039: GO 33194
33041: LD_INT 27
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33060
33049: POP
// bc_type := b_turret ; 28 :
33050: LD_ADDR_OWVAR 42
33054: PUSH
33055: LD_INT 33
33057: ST_TO_ADDR
33058: GO 33194
33060: LD_INT 28
33062: DOUBLE
33063: EQUAL
33064: IFTRUE 33068
33066: GO 33079
33068: POP
// bc_type := b_armoury ; 29 :
33069: LD_ADDR_OWVAR 42
33073: PUSH
33074: LD_INT 4
33076: ST_TO_ADDR
33077: GO 33194
33079: LD_INT 29
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33087
33085: GO 33098
33087: POP
// bc_type := b_barracks ; 30 :
33088: LD_ADDR_OWVAR 42
33092: PUSH
33093: LD_INT 5
33095: ST_TO_ADDR
33096: GO 33194
33098: LD_INT 30
33100: DOUBLE
33101: EQUAL
33102: IFTRUE 33106
33104: GO 33117
33106: POP
// bc_type := b_solar_power ; 31 :
33107: LD_ADDR_OWVAR 42
33111: PUSH
33112: LD_INT 27
33114: ST_TO_ADDR
33115: GO 33194
33117: LD_INT 31
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33125
33123: GO 33136
33125: POP
// bc_type := b_oil_power ; 32 :
33126: LD_ADDR_OWVAR 42
33130: PUSH
33131: LD_INT 26
33133: ST_TO_ADDR
33134: GO 33194
33136: LD_INT 32
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33155
33144: POP
// bc_type := b_siberite_power ; 33 :
33145: LD_ADDR_OWVAR 42
33149: PUSH
33150: LD_INT 28
33152: ST_TO_ADDR
33153: GO 33194
33155: LD_INT 33
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33163
33161: GO 33174
33163: POP
// bc_type := b_oil_mine ; 34 :
33164: LD_ADDR_OWVAR 42
33168: PUSH
33169: LD_INT 29
33171: ST_TO_ADDR
33172: GO 33194
33174: LD_INT 34
33176: DOUBLE
33177: EQUAL
33178: IFTRUE 33182
33180: GO 33193
33182: POP
// bc_type := b_siberite_mine ; end ;
33183: LD_ADDR_OWVAR 42
33187: PUSH
33188: LD_INT 30
33190: ST_TO_ADDR
33191: GO 33194
33193: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33194: LD_ADDR_VAR 0 8
33198: PUSH
33199: LD_VAR 0 5
33203: PPUSH
33204: LD_VAR 0 6
33208: PPUSH
33209: LD_VAR 0 3
33213: PPUSH
33214: CALL_OW 47
33218: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33219: LD_OWVAR 42
33223: PUSH
33224: LD_INT 32
33226: PUSH
33227: LD_INT 33
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: IN
33234: IFFALSE 33250
// PlaceWeaponTurret ( b , weapon ) ;
33236: LD_VAR 0 8
33240: PPUSH
33241: LD_VAR 0 4
33245: PPUSH
33246: CALL_OW 431
// end ;
33250: LD_VAR 0 7
33254: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33255: LD_INT 0
33257: PPUSH
33258: PPUSH
33259: PPUSH
33260: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33261: LD_ADDR_VAR 0 4
33265: PUSH
33266: LD_INT 22
33268: PUSH
33269: LD_OWVAR 2
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: LD_INT 30
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 30
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PPUSH
33310: CALL_OW 69
33314: ST_TO_ADDR
// if not tmp then
33315: LD_VAR 0 4
33319: NOT
33320: IFFALSE 33324
// exit ;
33322: GO 33383
// for i in tmp do
33324: LD_ADDR_VAR 0 2
33328: PUSH
33329: LD_VAR 0 4
33333: PUSH
33334: FOR_IN
33335: IFFALSE 33381
// for j = 1 to 3 do
33337: LD_ADDR_VAR 0 3
33341: PUSH
33342: DOUBLE
33343: LD_INT 1
33345: DEC
33346: ST_TO_ADDR
33347: LD_INT 3
33349: PUSH
33350: FOR_TO
33351: IFFALSE 33377
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33353: LD_VAR 0 2
33357: PPUSH
33358: CALL_OW 274
33362: PPUSH
33363: LD_VAR 0 3
33367: PPUSH
33368: LD_INT 99999
33370: PPUSH
33371: CALL_OW 277
33375: GO 33350
33377: POP
33378: POP
33379: GO 33334
33381: POP
33382: POP
// end ;
33383: LD_VAR 0 1
33387: RET
// export function hHackSetLevel10 ; var i , j ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33393: LD_ADDR_VAR 0 2
33397: PUSH
33398: LD_INT 21
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PPUSH
33408: CALL_OW 69
33412: PUSH
33413: FOR_IN
33414: IFFALSE 33466
// if IsSelected ( i ) then
33416: LD_VAR 0 2
33420: PPUSH
33421: CALL_OW 306
33425: IFFALSE 33464
// begin for j := 1 to 4 do
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: DOUBLE
33433: LD_INT 1
33435: DEC
33436: ST_TO_ADDR
33437: LD_INT 4
33439: PUSH
33440: FOR_TO
33441: IFFALSE 33462
// SetSkill ( i , j , 10 ) ;
33443: LD_VAR 0 2
33447: PPUSH
33448: LD_VAR 0 3
33452: PPUSH
33453: LD_INT 10
33455: PPUSH
33456: CALL_OW 237
33460: GO 33440
33462: POP
33463: POP
// end ;
33464: GO 33413
33466: POP
33467: POP
// end ;
33468: LD_VAR 0 1
33472: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33473: LD_INT 0
33475: PPUSH
33476: PPUSH
33477: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33478: LD_ADDR_VAR 0 2
33482: PUSH
33483: LD_INT 22
33485: PUSH
33486: LD_OWVAR 2
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 21
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PPUSH
33509: CALL_OW 69
33513: PUSH
33514: FOR_IN
33515: IFFALSE 33556
// begin for j := 1 to 4 do
33517: LD_ADDR_VAR 0 3
33521: PUSH
33522: DOUBLE
33523: LD_INT 1
33525: DEC
33526: ST_TO_ADDR
33527: LD_INT 4
33529: PUSH
33530: FOR_TO
33531: IFFALSE 33552
// SetSkill ( i , j , 10 ) ;
33533: LD_VAR 0 2
33537: PPUSH
33538: LD_VAR 0 3
33542: PPUSH
33543: LD_INT 10
33545: PPUSH
33546: CALL_OW 237
33550: GO 33530
33552: POP
33553: POP
// end ;
33554: GO 33514
33556: POP
33557: POP
// end ;
33558: LD_VAR 0 1
33562: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33563: LD_INT 0
33565: PPUSH
// uc_side := your_side ;
33566: LD_ADDR_OWVAR 20
33570: PUSH
33571: LD_OWVAR 2
33575: ST_TO_ADDR
// uc_nation := nation ;
33576: LD_ADDR_OWVAR 21
33580: PUSH
33581: LD_VAR 0 1
33585: ST_TO_ADDR
// InitHc ;
33586: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33590: LD_INT 0
33592: PPUSH
33593: LD_VAR 0 2
33597: PPUSH
33598: LD_VAR 0 3
33602: PPUSH
33603: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33607: LD_VAR 0 4
33611: PPUSH
33612: LD_VAR 0 5
33616: PPUSH
33617: CALL_OW 428
33621: PUSH
33622: LD_INT 0
33624: EQUAL
33625: IFFALSE 33649
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33627: CALL_OW 44
33631: PPUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: LD_VAR 0 5
33641: PPUSH
33642: LD_INT 1
33644: PPUSH
33645: CALL_OW 48
// end ;
33649: LD_VAR 0 6
33653: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33654: LD_INT 0
33656: PPUSH
33657: PPUSH
// uc_side := your_side ;
33658: LD_ADDR_OWVAR 20
33662: PUSH
33663: LD_OWVAR 2
33667: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33668: LD_VAR 0 1
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 3
33681: PUSH
33682: LD_INT 4
33684: PUSH
33685: LD_INT 5
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: IN
33695: IFFALSE 33707
// uc_nation := nation_american else
33697: LD_ADDR_OWVAR 21
33701: PUSH
33702: LD_INT 1
33704: ST_TO_ADDR
33705: GO 33750
// if chassis in [ 11 , 12 , 13 , 14 ] then
33707: LD_VAR 0 1
33711: PUSH
33712: LD_INT 11
33714: PUSH
33715: LD_INT 12
33717: PUSH
33718: LD_INT 13
33720: PUSH
33721: LD_INT 14
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: IN
33730: IFFALSE 33742
// uc_nation := nation_arabian else
33732: LD_ADDR_OWVAR 21
33736: PUSH
33737: LD_INT 2
33739: ST_TO_ADDR
33740: GO 33750
// uc_nation := nation_russian ;
33742: LD_ADDR_OWVAR 21
33746: PUSH
33747: LD_INT 3
33749: ST_TO_ADDR
// vc_chassis := chassis ;
33750: LD_ADDR_OWVAR 37
33754: PUSH
33755: LD_VAR 0 1
33759: ST_TO_ADDR
// vc_engine := engine ;
33760: LD_ADDR_OWVAR 39
33764: PUSH
33765: LD_VAR 0 2
33769: ST_TO_ADDR
// vc_control := control ;
33770: LD_ADDR_OWVAR 38
33774: PUSH
33775: LD_VAR 0 3
33779: ST_TO_ADDR
// vc_weapon := weapon ;
33780: LD_ADDR_OWVAR 40
33784: PUSH
33785: LD_VAR 0 4
33789: ST_TO_ADDR
// un := CreateVehicle ;
33790: LD_ADDR_VAR 0 8
33794: PUSH
33795: CALL_OW 45
33799: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33800: LD_VAR 0 8
33804: PPUSH
33805: LD_INT 0
33807: PPUSH
33808: LD_INT 5
33810: PPUSH
33811: CALL_OW 12
33815: PPUSH
33816: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33820: LD_VAR 0 8
33824: PPUSH
33825: LD_VAR 0 5
33829: PPUSH
33830: LD_VAR 0 6
33834: PPUSH
33835: LD_INT 1
33837: PPUSH
33838: CALL_OW 48
// end ;
33842: LD_VAR 0 7
33846: RET
// export hInvincible ; every 1 do
33847: GO 33849
33849: DISABLE
// hInvincible := [ ] ;
33850: LD_ADDR_EXP 108
33854: PUSH
33855: EMPTY
33856: ST_TO_ADDR
33857: END
// every 10 do var i ;
33858: GO 33860
33860: DISABLE
33861: LD_INT 0
33863: PPUSH
// begin enable ;
33864: ENABLE
// if not hInvincible then
33865: LD_EXP 108
33869: NOT
33870: IFFALSE 33874
// exit ;
33872: GO 33918
// for i in hInvincible do
33874: LD_ADDR_VAR 0 1
33878: PUSH
33879: LD_EXP 108
33883: PUSH
33884: FOR_IN
33885: IFFALSE 33916
// if GetLives ( i ) < 1000 then
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 256
33896: PUSH
33897: LD_INT 1000
33899: LESS
33900: IFFALSE 33914
// SetLives ( i , 1000 ) ;
33902: LD_VAR 0 1
33906: PPUSH
33907: LD_INT 1000
33909: PPUSH
33910: CALL_OW 234
33914: GO 33884
33916: POP
33917: POP
// end ;
33918: PPOPN 1
33920: END
// export function hHackInvincible ; var i ; begin
33921: LD_INT 0
33923: PPUSH
33924: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33925: LD_ADDR_VAR 0 2
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: LD_INT 21
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 21
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: PPUSH
33958: CALL_OW 69
33962: PUSH
33963: FOR_IN
33964: IFFALSE 34025
// if IsSelected ( i ) then
33966: LD_VAR 0 2
33970: PPUSH
33971: CALL_OW 306
33975: IFFALSE 34023
// begin if i in hInvincible then
33977: LD_VAR 0 2
33981: PUSH
33982: LD_EXP 108
33986: IN
33987: IFFALSE 34007
// hInvincible := hInvincible diff i else
33989: LD_ADDR_EXP 108
33993: PUSH
33994: LD_EXP 108
33998: PUSH
33999: LD_VAR 0 2
34003: DIFF
34004: ST_TO_ADDR
34005: GO 34023
// hInvincible := hInvincible union i ;
34007: LD_ADDR_EXP 108
34011: PUSH
34012: LD_EXP 108
34016: PUSH
34017: LD_VAR 0 2
34021: UNION
34022: ST_TO_ADDR
// end ;
34023: GO 33963
34025: POP
34026: POP
// end ;
34027: LD_VAR 0 1
34031: RET
// export function hHackInvisible ; var i , j ; begin
34032: LD_INT 0
34034: PPUSH
34035: PPUSH
34036: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34037: LD_ADDR_VAR 0 2
34041: PUSH
34042: LD_INT 21
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PPUSH
34052: CALL_OW 69
34056: PUSH
34057: FOR_IN
34058: IFFALSE 34082
// if IsSelected ( i ) then
34060: LD_VAR 0 2
34064: PPUSH
34065: CALL_OW 306
34069: IFFALSE 34080
// ComForceInvisible ( i ) ;
34071: LD_VAR 0 2
34075: PPUSH
34076: CALL_OW 496
34080: GO 34057
34082: POP
34083: POP
// end ;
34084: LD_VAR 0 1
34088: RET
// export function hHackChangeYourSide ; begin
34089: LD_INT 0
34091: PPUSH
// if your_side = 8 then
34092: LD_OWVAR 2
34096: PUSH
34097: LD_INT 8
34099: EQUAL
34100: IFFALSE 34112
// your_side := 0 else
34102: LD_ADDR_OWVAR 2
34106: PUSH
34107: LD_INT 0
34109: ST_TO_ADDR
34110: GO 34126
// your_side := your_side + 1 ;
34112: LD_ADDR_OWVAR 2
34116: PUSH
34117: LD_OWVAR 2
34121: PUSH
34122: LD_INT 1
34124: PLUS
34125: ST_TO_ADDR
// end ;
34126: LD_VAR 0 1
34130: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34131: LD_INT 0
34133: PPUSH
34134: PPUSH
34135: PPUSH
// for i in all_units do
34136: LD_ADDR_VAR 0 2
34140: PUSH
34141: LD_OWVAR 3
34145: PUSH
34146: FOR_IN
34147: IFFALSE 34225
// if IsSelected ( i ) then
34149: LD_VAR 0 2
34153: PPUSH
34154: CALL_OW 306
34158: IFFALSE 34223
// begin j := GetSide ( i ) ;
34160: LD_ADDR_VAR 0 3
34164: PUSH
34165: LD_VAR 0 2
34169: PPUSH
34170: CALL_OW 255
34174: ST_TO_ADDR
// if j = 8 then
34175: LD_VAR 0 3
34179: PUSH
34180: LD_INT 8
34182: EQUAL
34183: IFFALSE 34195
// j := 0 else
34185: LD_ADDR_VAR 0 3
34189: PUSH
34190: LD_INT 0
34192: ST_TO_ADDR
34193: GO 34209
// j := j + 1 ;
34195: LD_ADDR_VAR 0 3
34199: PUSH
34200: LD_VAR 0 3
34204: PUSH
34205: LD_INT 1
34207: PLUS
34208: ST_TO_ADDR
// SetSide ( i , j ) ;
34209: LD_VAR 0 2
34213: PPUSH
34214: LD_VAR 0 3
34218: PPUSH
34219: CALL_OW 235
// end ;
34223: GO 34146
34225: POP
34226: POP
// end ;
34227: LD_VAR 0 1
34231: RET
// export function hHackFog ; begin
34232: LD_INT 0
34234: PPUSH
// FogOff ( true ) ;
34235: LD_INT 1
34237: PPUSH
34238: CALL_OW 344
// end ;
34242: LD_VAR 0 1
34246: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34247: LD_INT 0
34249: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34250: LD_VAR 0 1
34254: PPUSH
34255: LD_VAR 0 2
34259: PPUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: LD_INT 1
34267: PPUSH
34268: LD_INT 1
34270: PPUSH
34271: CALL_OW 483
// CenterOnXY ( x , y ) ;
34275: LD_VAR 0 2
34279: PPUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL_OW 84
// end ;
34289: LD_VAR 0 4
34293: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34294: LD_INT 0
34296: PPUSH
34297: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34298: LD_VAR 0 1
34302: NOT
34303: PUSH
34304: LD_VAR 0 2
34308: PPUSH
34309: LD_VAR 0 3
34313: PPUSH
34314: CALL_OW 488
34318: NOT
34319: OR
34320: PUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: CALL_OW 266
34330: PUSH
34331: LD_INT 3
34333: NONEQUAL
34334: PUSH
34335: LD_VAR 0 1
34339: PPUSH
34340: CALL_OW 247
34344: PUSH
34345: LD_INT 1
34347: EQUAL
34348: NOT
34349: AND
34350: OR
34351: IFFALSE 34355
// exit ;
34353: GO 34504
// if GetType ( factory ) = unit_human then
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 247
34364: PUSH
34365: LD_INT 1
34367: EQUAL
34368: IFFALSE 34385
// factory := IsInUnit ( factory ) ;
34370: LD_ADDR_VAR 0 1
34374: PUSH
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 310
34384: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34385: LD_VAR 0 1
34389: PPUSH
34390: CALL_OW 266
34394: PUSH
34395: LD_INT 3
34397: NONEQUAL
34398: IFFALSE 34402
// exit ;
34400: GO 34504
// if HexInfo ( x , y ) = factory then
34402: LD_VAR 0 2
34406: PPUSH
34407: LD_VAR 0 3
34411: PPUSH
34412: CALL_OW 428
34416: PUSH
34417: LD_VAR 0 1
34421: EQUAL
34422: IFFALSE 34449
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34424: LD_ADDR_EXP 109
34428: PUSH
34429: LD_EXP 109
34433: PPUSH
34434: LD_VAR 0 1
34438: PPUSH
34439: LD_INT 0
34441: PPUSH
34442: CALL_OW 1
34446: ST_TO_ADDR
34447: GO 34500
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34449: LD_ADDR_EXP 109
34453: PUSH
34454: LD_EXP 109
34458: PPUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_VAR 0 1
34468: PPUSH
34469: CALL_OW 255
34473: PUSH
34474: LD_VAR 0 1
34478: PUSH
34479: LD_VAR 0 2
34483: PUSH
34484: LD_VAR 0 3
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: PPUSH
34495: CALL_OW 1
34499: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34500: CALL 34509 0 0
// end ;
34504: LD_VAR 0 4
34508: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34509: LD_INT 0
34511: PPUSH
34512: PPUSH
34513: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34514: LD_STRING resetFactoryWaypoint();
34516: PPUSH
34517: CALL_OW 559
// if factoryWaypoints then
34521: LD_EXP 109
34525: IFFALSE 34651
// begin list := PrepareArray ( factoryWaypoints ) ;
34527: LD_ADDR_VAR 0 3
34531: PUSH
34532: LD_EXP 109
34536: PPUSH
34537: CALL 81793 0 1
34541: ST_TO_ADDR
// for i := 1 to list do
34542: LD_ADDR_VAR 0 2
34546: PUSH
34547: DOUBLE
34548: LD_INT 1
34550: DEC
34551: ST_TO_ADDR
34552: LD_VAR 0 3
34556: PUSH
34557: FOR_TO
34558: IFFALSE 34649
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34560: LD_STRING setFactoryWaypointXY(
34562: PUSH
34563: LD_VAR 0 3
34567: PUSH
34568: LD_VAR 0 2
34572: ARRAY
34573: PUSH
34574: LD_INT 1
34576: ARRAY
34577: STR
34578: PUSH
34579: LD_STRING ,
34581: STR
34582: PUSH
34583: LD_VAR 0 3
34587: PUSH
34588: LD_VAR 0 2
34592: ARRAY
34593: PUSH
34594: LD_INT 2
34596: ARRAY
34597: STR
34598: PUSH
34599: LD_STRING ,
34601: STR
34602: PUSH
34603: LD_VAR 0 3
34607: PUSH
34608: LD_VAR 0 2
34612: ARRAY
34613: PUSH
34614: LD_INT 3
34616: ARRAY
34617: STR
34618: PUSH
34619: LD_STRING ,
34621: STR
34622: PUSH
34623: LD_VAR 0 3
34627: PUSH
34628: LD_VAR 0 2
34632: ARRAY
34633: PUSH
34634: LD_INT 4
34636: ARRAY
34637: STR
34638: PUSH
34639: LD_STRING )
34641: STR
34642: PPUSH
34643: CALL_OW 559
34647: GO 34557
34649: POP
34650: POP
// end ; end ;
34651: LD_VAR 0 1
34655: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34656: LD_INT 0
34658: PPUSH
// if HexInfo ( x , y ) = warehouse then
34659: LD_VAR 0 2
34663: PPUSH
34664: LD_VAR 0 3
34668: PPUSH
34669: CALL_OW 428
34673: PUSH
34674: LD_VAR 0 1
34678: EQUAL
34679: IFFALSE 34706
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34681: LD_ADDR_EXP 110
34685: PUSH
34686: LD_EXP 110
34690: PPUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: LD_INT 0
34698: PPUSH
34699: CALL_OW 1
34703: ST_TO_ADDR
34704: GO 34757
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34706: LD_ADDR_EXP 110
34710: PUSH
34711: LD_EXP 110
34715: PPUSH
34716: LD_VAR 0 1
34720: PPUSH
34721: LD_VAR 0 1
34725: PPUSH
34726: CALL_OW 255
34730: PUSH
34731: LD_VAR 0 1
34735: PUSH
34736: LD_VAR 0 2
34740: PUSH
34741: LD_VAR 0 3
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: PPUSH
34752: CALL_OW 1
34756: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34757: CALL 34766 0 0
// end ;
34761: LD_VAR 0 4
34765: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34766: LD_INT 0
34768: PPUSH
34769: PPUSH
34770: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34771: LD_STRING resetWarehouseGatheringPoints();
34773: PPUSH
34774: CALL_OW 559
// if warehouseGatheringPoints then
34778: LD_EXP 110
34782: IFFALSE 34908
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34784: LD_ADDR_VAR 0 3
34788: PUSH
34789: LD_EXP 110
34793: PPUSH
34794: CALL 81793 0 1
34798: ST_TO_ADDR
// for i := 1 to list do
34799: LD_ADDR_VAR 0 2
34803: PUSH
34804: DOUBLE
34805: LD_INT 1
34807: DEC
34808: ST_TO_ADDR
34809: LD_VAR 0 3
34813: PUSH
34814: FOR_TO
34815: IFFALSE 34906
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34817: LD_STRING setWarehouseGatheringPointXY(
34819: PUSH
34820: LD_VAR 0 3
34824: PUSH
34825: LD_VAR 0 2
34829: ARRAY
34830: PUSH
34831: LD_INT 1
34833: ARRAY
34834: STR
34835: PUSH
34836: LD_STRING ,
34838: STR
34839: PUSH
34840: LD_VAR 0 3
34844: PUSH
34845: LD_VAR 0 2
34849: ARRAY
34850: PUSH
34851: LD_INT 2
34853: ARRAY
34854: STR
34855: PUSH
34856: LD_STRING ,
34858: STR
34859: PUSH
34860: LD_VAR 0 3
34864: PUSH
34865: LD_VAR 0 2
34869: ARRAY
34870: PUSH
34871: LD_INT 3
34873: ARRAY
34874: STR
34875: PUSH
34876: LD_STRING ,
34878: STR
34879: PUSH
34880: LD_VAR 0 3
34884: PUSH
34885: LD_VAR 0 2
34889: ARRAY
34890: PUSH
34891: LD_INT 4
34893: ARRAY
34894: STR
34895: PUSH
34896: LD_STRING )
34898: STR
34899: PPUSH
34900: CALL_OW 559
34904: GO 34814
34906: POP
34907: POP
// end ; end ;
34908: LD_VAR 0 1
34912: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34913: LD_EXP 110
34917: IFFALSE 35602
34919: GO 34921
34921: DISABLE
34922: LD_INT 0
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
// begin enable ;
34933: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34934: LD_ADDR_VAR 0 3
34938: PUSH
34939: LD_EXP 110
34943: PPUSH
34944: CALL 81793 0 1
34948: ST_TO_ADDR
// if not list then
34949: LD_VAR 0 3
34953: NOT
34954: IFFALSE 34958
// exit ;
34956: GO 35602
// for i := 1 to list do
34958: LD_ADDR_VAR 0 1
34962: PUSH
34963: DOUBLE
34964: LD_INT 1
34966: DEC
34967: ST_TO_ADDR
34968: LD_VAR 0 3
34972: PUSH
34973: FOR_TO
34974: IFFALSE 35600
// begin depot := list [ i ] [ 2 ] ;
34976: LD_ADDR_VAR 0 8
34980: PUSH
34981: LD_VAR 0 3
34985: PUSH
34986: LD_VAR 0 1
34990: ARRAY
34991: PUSH
34992: LD_INT 2
34994: ARRAY
34995: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34996: LD_ADDR_VAR 0 5
35000: PUSH
35001: LD_VAR 0 3
35005: PUSH
35006: LD_VAR 0 1
35010: ARRAY
35011: PUSH
35012: LD_INT 1
35014: ARRAY
35015: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35016: LD_VAR 0 8
35020: PPUSH
35021: CALL_OW 301
35025: PUSH
35026: LD_VAR 0 5
35030: PUSH
35031: LD_VAR 0 8
35035: PPUSH
35036: CALL_OW 255
35040: NONEQUAL
35041: OR
35042: IFFALSE 35071
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35044: LD_ADDR_EXP 110
35048: PUSH
35049: LD_EXP 110
35053: PPUSH
35054: LD_VAR 0 8
35058: PPUSH
35059: LD_INT 0
35061: PPUSH
35062: CALL_OW 1
35066: ST_TO_ADDR
// exit ;
35067: POP
35068: POP
35069: GO 35602
// end ; x := list [ i ] [ 3 ] ;
35071: LD_ADDR_VAR 0 6
35075: PUSH
35076: LD_VAR 0 3
35080: PUSH
35081: LD_VAR 0 1
35085: ARRAY
35086: PUSH
35087: LD_INT 3
35089: ARRAY
35090: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35091: LD_ADDR_VAR 0 7
35095: PUSH
35096: LD_VAR 0 3
35100: PUSH
35101: LD_VAR 0 1
35105: ARRAY
35106: PUSH
35107: LD_INT 4
35109: ARRAY
35110: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35111: LD_ADDR_VAR 0 9
35115: PUSH
35116: LD_VAR 0 6
35120: PPUSH
35121: LD_VAR 0 7
35125: PPUSH
35126: LD_INT 16
35128: PPUSH
35129: CALL 80381 0 3
35133: ST_TO_ADDR
// if not cratesNearbyPoint then
35134: LD_VAR 0 9
35138: NOT
35139: IFFALSE 35145
// exit ;
35141: POP
35142: POP
35143: GO 35602
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35145: LD_ADDR_VAR 0 4
35149: PUSH
35150: LD_INT 22
35152: PUSH
35153: LD_VAR 0 5
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 3
35164: PUSH
35165: LD_INT 60
35167: PUSH
35168: EMPTY
35169: LIST
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 91
35177: PUSH
35178: LD_VAR 0 8
35182: PUSH
35183: LD_INT 6
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 25
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 25
35206: PUSH
35207: LD_INT 16
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: PPUSH
35225: CALL_OW 69
35229: PUSH
35230: LD_VAR 0 8
35234: PPUSH
35235: CALL_OW 313
35239: PPUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 60
35245: PUSH
35246: EMPTY
35247: LIST
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: LD_INT 25
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 25
35268: PUSH
35269: LD_INT 16
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PPUSH
35285: CALL_OW 72
35289: UNION
35290: ST_TO_ADDR
// if tmp then
35291: LD_VAR 0 4
35295: IFFALSE 35375
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: LD_VAR 0 4
35306: PPUSH
35307: LD_INT 3
35309: PPUSH
35310: CALL 78350 0 2
35314: ST_TO_ADDR
// for j in tmp do
35315: LD_ADDR_VAR 0 2
35319: PUSH
35320: LD_VAR 0 4
35324: PUSH
35325: FOR_IN
35326: IFFALSE 35369
// begin if IsInUnit ( j ) then
35328: LD_VAR 0 2
35332: PPUSH
35333: CALL_OW 310
35337: IFFALSE 35348
// ComExit ( j ) ;
35339: LD_VAR 0 2
35343: PPUSH
35344: CALL 78433 0 1
// AddComCollect ( j , x , y ) ;
35348: LD_VAR 0 2
35352: PPUSH
35353: LD_VAR 0 6
35357: PPUSH
35358: LD_VAR 0 7
35362: PPUSH
35363: CALL_OW 177
// end ;
35367: GO 35325
35369: POP
35370: POP
// exit ;
35371: POP
35372: POP
35373: GO 35602
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35375: LD_ADDR_VAR 0 4
35379: PUSH
35380: LD_INT 22
35382: PUSH
35383: LD_VAR 0 5
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 91
35394: PUSH
35395: LD_VAR 0 8
35399: PUSH
35400: LD_INT 8
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 34
35413: PUSH
35414: LD_INT 12
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 34
35423: PUSH
35424: LD_INT 51
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 34
35433: PUSH
35434: LD_INT 32
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 34
35443: PUSH
35444: LD_INT 89
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: LIST
35462: PPUSH
35463: CALL_OW 69
35467: ST_TO_ADDR
// if tmp then
35468: LD_VAR 0 4
35472: IFFALSE 35598
// begin for j in tmp do
35474: LD_ADDR_VAR 0 2
35478: PUSH
35479: LD_VAR 0 4
35483: PUSH
35484: FOR_IN
35485: IFFALSE 35596
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35487: LD_VAR 0 2
35491: PPUSH
35492: CALL_OW 262
35496: PUSH
35497: LD_INT 3
35499: EQUAL
35500: PUSH
35501: LD_VAR 0 2
35505: PPUSH
35506: CALL_OW 261
35510: PUSH
35511: LD_INT 20
35513: GREATER
35514: OR
35515: PUSH
35516: LD_VAR 0 2
35520: PPUSH
35521: CALL_OW 314
35525: NOT
35526: AND
35527: PUSH
35528: LD_VAR 0 2
35532: PPUSH
35533: CALL_OW 263
35537: PUSH
35538: LD_INT 1
35540: NONEQUAL
35541: PUSH
35542: LD_VAR 0 2
35546: PPUSH
35547: CALL_OW 311
35551: OR
35552: AND
35553: IFFALSE 35594
// begin ComCollect ( j , x , y ) ;
35555: LD_VAR 0 2
35559: PPUSH
35560: LD_VAR 0 6
35564: PPUSH
35565: LD_VAR 0 7
35569: PPUSH
35570: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35574: LD_VAR 0 2
35578: PPUSH
35579: LD_VAR 0 8
35583: PPUSH
35584: CALL_OW 172
// exit ;
35588: POP
35589: POP
35590: POP
35591: POP
35592: GO 35602
// end ;
35594: GO 35484
35596: POP
35597: POP
// end ; end ;
35598: GO 34973
35600: POP
35601: POP
// end ; end_of_file
35602: PPOPN 9
35604: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35605: LD_INT 0
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35611: LD_VAR 0 1
35615: PPUSH
35616: CALL_OW 264
35620: PUSH
35621: LD_INT 91
35623: EQUAL
35624: IFFALSE 35696
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35626: LD_INT 68
35628: PPUSH
35629: LD_VAR 0 1
35633: PPUSH
35634: CALL_OW 255
35638: PPUSH
35639: CALL_OW 321
35643: PUSH
35644: LD_INT 2
35646: EQUAL
35647: IFFALSE 35659
// eff := 70 else
35649: LD_ADDR_VAR 0 4
35653: PUSH
35654: LD_INT 70
35656: ST_TO_ADDR
35657: GO 35667
// eff := 30 ;
35659: LD_ADDR_VAR 0 4
35663: PUSH
35664: LD_INT 30
35666: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35667: LD_VAR 0 1
35671: PPUSH
35672: CALL_OW 250
35676: PPUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 251
35686: PPUSH
35687: LD_VAR 0 4
35691: PPUSH
35692: CALL_OW 495
// end ; end ;
35696: LD_VAR 0 2
35700: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35701: LD_INT 0
35703: PPUSH
// end ;
35704: LD_VAR 0 4
35708: RET
// export function SOS_Command ( cmd ) ; begin
35709: LD_INT 0
35711: PPUSH
// end ;
35712: LD_VAR 0 2
35716: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35717: LD_INT 0
35719: PPUSH
// end ;
35720: LD_VAR 0 6
35724: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35725: LD_INT 0
35727: PPUSH
35728: PPUSH
// if not vehicle or not factory then
35729: LD_VAR 0 1
35733: NOT
35734: PUSH
35735: LD_VAR 0 2
35739: NOT
35740: OR
35741: IFFALSE 35745
// exit ;
35743: GO 35976
// if factoryWaypoints >= factory then
35745: LD_EXP 109
35749: PUSH
35750: LD_VAR 0 2
35754: GREATEREQUAL
35755: IFFALSE 35976
// if factoryWaypoints [ factory ] then
35757: LD_EXP 109
35761: PUSH
35762: LD_VAR 0 2
35766: ARRAY
35767: IFFALSE 35976
// begin if GetControl ( vehicle ) = control_manual then
35769: LD_VAR 0 1
35773: PPUSH
35774: CALL_OW 263
35778: PUSH
35779: LD_INT 1
35781: EQUAL
35782: IFFALSE 35863
// begin driver := IsDrivenBy ( vehicle ) ;
35784: LD_ADDR_VAR 0 4
35788: PUSH
35789: LD_VAR 0 1
35793: PPUSH
35794: CALL_OW 311
35798: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35799: LD_VAR 0 4
35803: PPUSH
35804: LD_EXP 109
35808: PUSH
35809: LD_VAR 0 2
35813: ARRAY
35814: PUSH
35815: LD_INT 3
35817: ARRAY
35818: PPUSH
35819: LD_EXP 109
35823: PUSH
35824: LD_VAR 0 2
35828: ARRAY
35829: PUSH
35830: LD_INT 4
35832: ARRAY
35833: PPUSH
35834: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35838: LD_VAR 0 4
35842: PPUSH
35843: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35847: LD_VAR 0 4
35851: PPUSH
35852: LD_VAR 0 2
35856: PPUSH
35857: CALL_OW 180
// end else
35861: GO 35976
// if GetControl ( vehicle ) = control_remote then
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 263
35872: PUSH
35873: LD_INT 2
35875: EQUAL
35876: IFFALSE 35937
// begin wait ( 0 0$2 ) ;
35878: LD_INT 70
35880: PPUSH
35881: CALL_OW 67
// if Connect ( vehicle ) then
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL 48641 0 1
35894: IFFALSE 35935
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35896: LD_VAR 0 1
35900: PPUSH
35901: LD_EXP 109
35905: PUSH
35906: LD_VAR 0 2
35910: ARRAY
35911: PUSH
35912: LD_INT 3
35914: ARRAY
35915: PPUSH
35916: LD_EXP 109
35920: PUSH
35921: LD_VAR 0 2
35925: ARRAY
35926: PUSH
35927: LD_INT 4
35929: ARRAY
35930: PPUSH
35931: CALL_OW 171
// end else
35935: GO 35976
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35937: LD_VAR 0 1
35941: PPUSH
35942: LD_EXP 109
35946: PUSH
35947: LD_VAR 0 2
35951: ARRAY
35952: PUSH
35953: LD_INT 3
35955: ARRAY
35956: PPUSH
35957: LD_EXP 109
35961: PUSH
35962: LD_VAR 0 2
35966: ARRAY
35967: PUSH
35968: LD_INT 4
35970: ARRAY
35971: PPUSH
35972: CALL_OW 171
// end ; end ;
35976: LD_VAR 0 3
35980: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35981: LD_INT 0
35983: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35984: LD_VAR 0 1
35988: PUSH
35989: LD_INT 250
35991: EQUAL
35992: PUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: CALL_OW 264
36002: PUSH
36003: LD_INT 81
36005: EQUAL
36006: AND
36007: IFFALSE 36028
// MinerPlaceMine ( unit , x , y ) ;
36009: LD_VAR 0 2
36013: PPUSH
36014: LD_VAR 0 4
36018: PPUSH
36019: LD_VAR 0 5
36023: PPUSH
36024: CALL 38852 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36028: LD_VAR 0 1
36032: PUSH
36033: LD_INT 251
36035: EQUAL
36036: PUSH
36037: LD_VAR 0 2
36041: PPUSH
36042: CALL_OW 264
36046: PUSH
36047: LD_INT 81
36049: EQUAL
36050: AND
36051: IFFALSE 36072
// MinerDetonateMine ( unit , x , y ) ;
36053: LD_VAR 0 2
36057: PPUSH
36058: LD_VAR 0 4
36062: PPUSH
36063: LD_VAR 0 5
36067: PPUSH
36068: CALL 39127 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36072: LD_VAR 0 1
36076: PUSH
36077: LD_INT 252
36079: EQUAL
36080: PUSH
36081: LD_VAR 0 2
36085: PPUSH
36086: CALL_OW 264
36090: PUSH
36091: LD_INT 81
36093: EQUAL
36094: AND
36095: IFFALSE 36116
// MinerCreateMinefield ( unit , x , y ) ;
36097: LD_VAR 0 2
36101: PPUSH
36102: LD_VAR 0 4
36106: PPUSH
36107: LD_VAR 0 5
36111: PPUSH
36112: CALL 39544 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36116: LD_VAR 0 1
36120: PUSH
36121: LD_INT 253
36123: EQUAL
36124: PUSH
36125: LD_VAR 0 2
36129: PPUSH
36130: CALL_OW 257
36134: PUSH
36135: LD_INT 5
36137: EQUAL
36138: AND
36139: IFFALSE 36160
// ComBinocular ( unit , x , y ) ;
36141: LD_VAR 0 2
36145: PPUSH
36146: LD_VAR 0 4
36150: PPUSH
36151: LD_VAR 0 5
36155: PPUSH
36156: CALL 39913 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36160: LD_VAR 0 1
36164: PUSH
36165: LD_INT 254
36167: EQUAL
36168: PUSH
36169: LD_VAR 0 2
36173: PPUSH
36174: CALL_OW 264
36178: PUSH
36179: LD_INT 99
36181: EQUAL
36182: AND
36183: PUSH
36184: LD_VAR 0 3
36188: PPUSH
36189: CALL_OW 263
36193: PUSH
36194: LD_INT 3
36196: EQUAL
36197: AND
36198: IFFALSE 36214
// HackDestroyVehicle ( unit , selectedUnit ) ;
36200: LD_VAR 0 2
36204: PPUSH
36205: LD_VAR 0 3
36209: PPUSH
36210: CALL 38216 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36214: LD_VAR 0 1
36218: PUSH
36219: LD_INT 255
36221: EQUAL
36222: PUSH
36223: LD_VAR 0 2
36227: PPUSH
36228: CALL_OW 264
36232: PUSH
36233: LD_INT 14
36235: PUSH
36236: LD_INT 53
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: IN
36243: AND
36244: PUSH
36245: LD_VAR 0 4
36249: PPUSH
36250: LD_VAR 0 5
36254: PPUSH
36255: CALL_OW 488
36259: AND
36260: IFFALSE 36284
// CutTreeXYR ( unit , x , y , 12 ) ;
36262: LD_VAR 0 2
36266: PPUSH
36267: LD_VAR 0 4
36271: PPUSH
36272: LD_VAR 0 5
36276: PPUSH
36277: LD_INT 12
36279: PPUSH
36280: CALL 36379 0 4
// if cmd = 256 then
36284: LD_VAR 0 1
36288: PUSH
36289: LD_INT 256
36291: EQUAL
36292: IFFALSE 36313
// SetFactoryWaypoint ( unit , x , y ) ;
36294: LD_VAR 0 2
36298: PPUSH
36299: LD_VAR 0 4
36303: PPUSH
36304: LD_VAR 0 5
36308: PPUSH
36309: CALL 34294 0 3
// if cmd = 257 then
36313: LD_VAR 0 1
36317: PUSH
36318: LD_INT 257
36320: EQUAL
36321: IFFALSE 36342
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36323: LD_VAR 0 2
36327: PPUSH
36328: LD_VAR 0 4
36332: PPUSH
36333: LD_VAR 0 5
36337: PPUSH
36338: CALL 34656 0 3
// if cmd = 258 then
36342: LD_VAR 0 1
36346: PUSH
36347: LD_INT 258
36349: EQUAL
36350: IFFALSE 36374
// BurnTreeXYR ( unit , x , y , 8 ) ;
36352: LD_VAR 0 2
36356: PPUSH
36357: LD_VAR 0 4
36361: PPUSH
36362: LD_VAR 0 5
36366: PPUSH
36367: LD_INT 8
36369: PPUSH
36370: CALL 36773 0 4
// end ;
36374: LD_VAR 0 6
36378: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36379: LD_INT 0
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36390: LD_VAR 0 1
36394: PPUSH
36395: CALL_OW 302
36399: NOT
36400: PUSH
36401: LD_VAR 0 2
36405: PPUSH
36406: LD_VAR 0 3
36410: PPUSH
36411: CALL_OW 488
36415: NOT
36416: OR
36417: PUSH
36418: LD_VAR 0 4
36422: NOT
36423: OR
36424: IFFALSE 36428
// exit ;
36426: GO 36768
// list := [ ] ;
36428: LD_ADDR_VAR 0 13
36432: PUSH
36433: EMPTY
36434: ST_TO_ADDR
// if x - r < 0 then
36435: LD_VAR 0 2
36439: PUSH
36440: LD_VAR 0 4
36444: MINUS
36445: PUSH
36446: LD_INT 0
36448: LESS
36449: IFFALSE 36461
// min_x := 0 else
36451: LD_ADDR_VAR 0 7
36455: PUSH
36456: LD_INT 0
36458: ST_TO_ADDR
36459: GO 36477
// min_x := x - r ;
36461: LD_ADDR_VAR 0 7
36465: PUSH
36466: LD_VAR 0 2
36470: PUSH
36471: LD_VAR 0 4
36475: MINUS
36476: ST_TO_ADDR
// if y - r < 0 then
36477: LD_VAR 0 3
36481: PUSH
36482: LD_VAR 0 4
36486: MINUS
36487: PUSH
36488: LD_INT 0
36490: LESS
36491: IFFALSE 36503
// min_y := 0 else
36493: LD_ADDR_VAR 0 8
36497: PUSH
36498: LD_INT 0
36500: ST_TO_ADDR
36501: GO 36519
// min_y := y - r ;
36503: LD_ADDR_VAR 0 8
36507: PUSH
36508: LD_VAR 0 3
36512: PUSH
36513: LD_VAR 0 4
36517: MINUS
36518: ST_TO_ADDR
// max_x := x + r ;
36519: LD_ADDR_VAR 0 9
36523: PUSH
36524: LD_VAR 0 2
36528: PUSH
36529: LD_VAR 0 4
36533: PLUS
36534: ST_TO_ADDR
// max_y := y + r ;
36535: LD_ADDR_VAR 0 10
36539: PUSH
36540: LD_VAR 0 3
36544: PUSH
36545: LD_VAR 0 4
36549: PLUS
36550: ST_TO_ADDR
// for _x = min_x to max_x do
36551: LD_ADDR_VAR 0 11
36555: PUSH
36556: DOUBLE
36557: LD_VAR 0 7
36561: DEC
36562: ST_TO_ADDR
36563: LD_VAR 0 9
36567: PUSH
36568: FOR_TO
36569: IFFALSE 36686
// for _y = min_y to max_y do
36571: LD_ADDR_VAR 0 12
36575: PUSH
36576: DOUBLE
36577: LD_VAR 0 8
36581: DEC
36582: ST_TO_ADDR
36583: LD_VAR 0 10
36587: PUSH
36588: FOR_TO
36589: IFFALSE 36682
// begin if not ValidHex ( _x , _y ) then
36591: LD_VAR 0 11
36595: PPUSH
36596: LD_VAR 0 12
36600: PPUSH
36601: CALL_OW 488
36605: NOT
36606: IFFALSE 36610
// continue ;
36608: GO 36588
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36610: LD_VAR 0 11
36614: PPUSH
36615: LD_VAR 0 12
36619: PPUSH
36620: CALL_OW 351
36624: PUSH
36625: LD_VAR 0 11
36629: PPUSH
36630: LD_VAR 0 12
36634: PPUSH
36635: CALL_OW 554
36639: AND
36640: IFFALSE 36680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36642: LD_ADDR_VAR 0 13
36646: PUSH
36647: LD_VAR 0 13
36651: PPUSH
36652: LD_VAR 0 13
36656: PUSH
36657: LD_INT 1
36659: PLUS
36660: PPUSH
36661: LD_VAR 0 11
36665: PUSH
36666: LD_VAR 0 12
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PPUSH
36675: CALL_OW 2
36679: ST_TO_ADDR
// end ;
36680: GO 36588
36682: POP
36683: POP
36684: GO 36568
36686: POP
36687: POP
// if not list then
36688: LD_VAR 0 13
36692: NOT
36693: IFFALSE 36697
// exit ;
36695: GO 36768
// for i in list do
36697: LD_ADDR_VAR 0 6
36701: PUSH
36702: LD_VAR 0 13
36706: PUSH
36707: FOR_IN
36708: IFFALSE 36766
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36710: LD_VAR 0 1
36714: PPUSH
36715: LD_STRING M
36717: PUSH
36718: LD_VAR 0 6
36722: PUSH
36723: LD_INT 1
36725: ARRAY
36726: PUSH
36727: LD_VAR 0 6
36731: PUSH
36732: LD_INT 2
36734: ARRAY
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: PUSH
36757: EMPTY
36758: LIST
36759: PPUSH
36760: CALL_OW 447
36764: GO 36707
36766: POP
36767: POP
// end ;
36768: LD_VAR 0 5
36772: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36773: LD_INT 0
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
36779: PPUSH
36780: PPUSH
36781: PPUSH
36782: PPUSH
36783: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 302
36793: NOT
36794: PUSH
36795: LD_VAR 0 2
36799: PPUSH
36800: LD_VAR 0 3
36804: PPUSH
36805: CALL_OW 488
36809: NOT
36810: OR
36811: PUSH
36812: LD_VAR 0 4
36816: NOT
36817: OR
36818: IFFALSE 36822
// exit ;
36820: GO 37170
// list := [ ] ;
36822: LD_ADDR_VAR 0 13
36826: PUSH
36827: EMPTY
36828: ST_TO_ADDR
// if x - r < 0 then
36829: LD_VAR 0 2
36833: PUSH
36834: LD_VAR 0 4
36838: MINUS
36839: PUSH
36840: LD_INT 0
36842: LESS
36843: IFFALSE 36855
// min_x := 0 else
36845: LD_ADDR_VAR 0 7
36849: PUSH
36850: LD_INT 0
36852: ST_TO_ADDR
36853: GO 36871
// min_x := x - r ;
36855: LD_ADDR_VAR 0 7
36859: PUSH
36860: LD_VAR 0 2
36864: PUSH
36865: LD_VAR 0 4
36869: MINUS
36870: ST_TO_ADDR
// if y - r < 0 then
36871: LD_VAR 0 3
36875: PUSH
36876: LD_VAR 0 4
36880: MINUS
36881: PUSH
36882: LD_INT 0
36884: LESS
36885: IFFALSE 36897
// min_y := 0 else
36887: LD_ADDR_VAR 0 8
36891: PUSH
36892: LD_INT 0
36894: ST_TO_ADDR
36895: GO 36913
// min_y := y - r ;
36897: LD_ADDR_VAR 0 8
36901: PUSH
36902: LD_VAR 0 3
36906: PUSH
36907: LD_VAR 0 4
36911: MINUS
36912: ST_TO_ADDR
// max_x := x + r ;
36913: LD_ADDR_VAR 0 9
36917: PUSH
36918: LD_VAR 0 2
36922: PUSH
36923: LD_VAR 0 4
36927: PLUS
36928: ST_TO_ADDR
// max_y := y + r ;
36929: LD_ADDR_VAR 0 10
36933: PUSH
36934: LD_VAR 0 3
36938: PUSH
36939: LD_VAR 0 4
36943: PLUS
36944: ST_TO_ADDR
// for _x = min_x to max_x do
36945: LD_ADDR_VAR 0 11
36949: PUSH
36950: DOUBLE
36951: LD_VAR 0 7
36955: DEC
36956: ST_TO_ADDR
36957: LD_VAR 0 9
36961: PUSH
36962: FOR_TO
36963: IFFALSE 37080
// for _y = min_y to max_y do
36965: LD_ADDR_VAR 0 12
36969: PUSH
36970: DOUBLE
36971: LD_VAR 0 8
36975: DEC
36976: ST_TO_ADDR
36977: LD_VAR 0 10
36981: PUSH
36982: FOR_TO
36983: IFFALSE 37076
// begin if not ValidHex ( _x , _y ) then
36985: LD_VAR 0 11
36989: PPUSH
36990: LD_VAR 0 12
36994: PPUSH
36995: CALL_OW 488
36999: NOT
37000: IFFALSE 37004
// continue ;
37002: GO 36982
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37004: LD_VAR 0 11
37008: PPUSH
37009: LD_VAR 0 12
37013: PPUSH
37014: CALL_OW 351
37018: PUSH
37019: LD_VAR 0 11
37023: PPUSH
37024: LD_VAR 0 12
37028: PPUSH
37029: CALL_OW 554
37033: AND
37034: IFFALSE 37074
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37036: LD_ADDR_VAR 0 13
37040: PUSH
37041: LD_VAR 0 13
37045: PPUSH
37046: LD_VAR 0 13
37050: PUSH
37051: LD_INT 1
37053: PLUS
37054: PPUSH
37055: LD_VAR 0 11
37059: PUSH
37060: LD_VAR 0 12
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PPUSH
37069: CALL_OW 2
37073: ST_TO_ADDR
// end ;
37074: GO 36982
37076: POP
37077: POP
37078: GO 36962
37080: POP
37081: POP
// if not list then
37082: LD_VAR 0 13
37086: NOT
37087: IFFALSE 37091
// exit ;
37089: GO 37170
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37091: LD_ADDR_VAR 0 13
37095: PUSH
37096: LD_VAR 0 1
37100: PPUSH
37101: LD_VAR 0 13
37105: PPUSH
37106: LD_INT 1
37108: PPUSH
37109: LD_INT 1
37111: PPUSH
37112: CALL 45783 0 4
37116: ST_TO_ADDR
// ComStop ( flame ) ;
37117: LD_VAR 0 1
37121: PPUSH
37122: CALL_OW 141
// for i in list do
37126: LD_ADDR_VAR 0 6
37130: PUSH
37131: LD_VAR 0 13
37135: PUSH
37136: FOR_IN
37137: IFFALSE 37168
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37139: LD_VAR 0 1
37143: PPUSH
37144: LD_VAR 0 6
37148: PUSH
37149: LD_INT 1
37151: ARRAY
37152: PPUSH
37153: LD_VAR 0 6
37157: PUSH
37158: LD_INT 2
37160: ARRAY
37161: PPUSH
37162: CALL_OW 176
37166: GO 37136
37168: POP
37169: POP
// end ;
37170: LD_VAR 0 5
37174: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37175: LD_EXP 112
37179: NOT
37180: IFFALSE 37230
37182: GO 37184
37184: DISABLE
// begin initHack := true ;
37185: LD_ADDR_EXP 112
37189: PUSH
37190: LD_INT 1
37192: ST_TO_ADDR
// hackTanks := [ ] ;
37193: LD_ADDR_EXP 113
37197: PUSH
37198: EMPTY
37199: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37200: LD_ADDR_EXP 114
37204: PUSH
37205: EMPTY
37206: ST_TO_ADDR
// hackLimit := 3 ;
37207: LD_ADDR_EXP 115
37211: PUSH
37212: LD_INT 3
37214: ST_TO_ADDR
// hackDist := 12 ;
37215: LD_ADDR_EXP 116
37219: PUSH
37220: LD_INT 12
37222: ST_TO_ADDR
// hackCounter := [ ] ;
37223: LD_ADDR_EXP 117
37227: PUSH
37228: EMPTY
37229: ST_TO_ADDR
// end ;
37230: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37231: LD_EXP 112
37235: PUSH
37236: LD_INT 34
37238: PUSH
37239: LD_INT 99
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PPUSH
37246: CALL_OW 69
37250: AND
37251: IFFALSE 37504
37253: GO 37255
37255: DISABLE
37256: LD_INT 0
37258: PPUSH
37259: PPUSH
// begin enable ;
37260: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37261: LD_ADDR_VAR 0 1
37265: PUSH
37266: LD_INT 34
37268: PUSH
37269: LD_INT 99
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PPUSH
37276: CALL_OW 69
37280: PUSH
37281: FOR_IN
37282: IFFALSE 37502
// begin if not i in hackTanks then
37284: LD_VAR 0 1
37288: PUSH
37289: LD_EXP 113
37293: IN
37294: NOT
37295: IFFALSE 37378
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37297: LD_ADDR_EXP 113
37301: PUSH
37302: LD_EXP 113
37306: PPUSH
37307: LD_EXP 113
37311: PUSH
37312: LD_INT 1
37314: PLUS
37315: PPUSH
37316: LD_VAR 0 1
37320: PPUSH
37321: CALL_OW 1
37325: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37326: LD_ADDR_EXP 114
37330: PUSH
37331: LD_EXP 114
37335: PPUSH
37336: LD_EXP 114
37340: PUSH
37341: LD_INT 1
37343: PLUS
37344: PPUSH
37345: EMPTY
37346: PPUSH
37347: CALL_OW 1
37351: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37352: LD_ADDR_EXP 117
37356: PUSH
37357: LD_EXP 117
37361: PPUSH
37362: LD_EXP 117
37366: PUSH
37367: LD_INT 1
37369: PLUS
37370: PPUSH
37371: EMPTY
37372: PPUSH
37373: CALL_OW 1
37377: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37378: LD_VAR 0 1
37382: PPUSH
37383: CALL_OW 302
37387: NOT
37388: IFFALSE 37401
// begin HackUnlinkAll ( i ) ;
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL 37507 0 1
// continue ;
37399: GO 37281
// end ; HackCheckCapturedStatus ( i ) ;
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL 37950 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37410: LD_ADDR_VAR 0 2
37414: PUSH
37415: LD_INT 81
37417: PUSH
37418: LD_VAR 0 1
37422: PPUSH
37423: CALL_OW 255
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 33
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 91
37444: PUSH
37445: LD_VAR 0 1
37449: PUSH
37450: LD_EXP 116
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 50
37462: PUSH
37463: EMPTY
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: PPUSH
37472: CALL_OW 69
37476: ST_TO_ADDR
// if not tmp then
37477: LD_VAR 0 2
37481: NOT
37482: IFFALSE 37486
// continue ;
37484: GO 37281
// HackLink ( i , tmp ) ;
37486: LD_VAR 0 1
37490: PPUSH
37491: LD_VAR 0 2
37495: PPUSH
37496: CALL 37643 0 2
// end ;
37500: GO 37281
37502: POP
37503: POP
// end ;
37504: PPOPN 2
37506: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37507: LD_INT 0
37509: PPUSH
37510: PPUSH
37511: PPUSH
// if not hack in hackTanks then
37512: LD_VAR 0 1
37516: PUSH
37517: LD_EXP 113
37521: IN
37522: NOT
37523: IFFALSE 37527
// exit ;
37525: GO 37638
// index := GetElementIndex ( hackTanks , hack ) ;
37527: LD_ADDR_VAR 0 4
37531: PUSH
37532: LD_EXP 113
37536: PPUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL 45080 0 2
37546: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37547: LD_EXP 114
37551: PUSH
37552: LD_VAR 0 4
37556: ARRAY
37557: IFFALSE 37638
// begin for i in hackTanksCaptured [ index ] do
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_EXP 114
37568: PUSH
37569: LD_VAR 0 4
37573: ARRAY
37574: PUSH
37575: FOR_IN
37576: IFFALSE 37602
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37578: LD_VAR 0 3
37582: PUSH
37583: LD_INT 1
37585: ARRAY
37586: PPUSH
37587: LD_VAR 0 3
37591: PUSH
37592: LD_INT 2
37594: ARRAY
37595: PPUSH
37596: CALL_OW 235
37600: GO 37575
37602: POP
37603: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37604: LD_ADDR_EXP 114
37608: PUSH
37609: LD_EXP 114
37613: PPUSH
37614: LD_VAR 0 4
37618: PPUSH
37619: EMPTY
37620: PPUSH
37621: CALL_OW 1
37625: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37626: LD_VAR 0 1
37630: PPUSH
37631: LD_INT 0
37633: PPUSH
37634: CALL_OW 505
// end ; end ;
37638: LD_VAR 0 2
37642: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37643: LD_INT 0
37645: PPUSH
37646: PPUSH
37647: PPUSH
// if not hack in hackTanks or not vehicles then
37648: LD_VAR 0 1
37652: PUSH
37653: LD_EXP 113
37657: IN
37658: NOT
37659: PUSH
37660: LD_VAR 0 2
37664: NOT
37665: OR
37666: IFFALSE 37670
// exit ;
37668: GO 37945
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37670: LD_ADDR_VAR 0 2
37674: PUSH
37675: LD_VAR 0 1
37679: PPUSH
37680: LD_VAR 0 2
37684: PPUSH
37685: LD_INT 1
37687: PPUSH
37688: LD_INT 1
37690: PPUSH
37691: CALL 45730 0 4
37695: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37696: LD_ADDR_VAR 0 5
37700: PUSH
37701: LD_EXP 113
37705: PPUSH
37706: LD_VAR 0 1
37710: PPUSH
37711: CALL 45080 0 2
37715: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37716: LD_EXP 114
37720: PUSH
37721: LD_VAR 0 5
37725: ARRAY
37726: PUSH
37727: LD_EXP 115
37731: LESS
37732: IFFALSE 37921
// begin for i := 1 to vehicles do
37734: LD_ADDR_VAR 0 4
37738: PUSH
37739: DOUBLE
37740: LD_INT 1
37742: DEC
37743: ST_TO_ADDR
37744: LD_VAR 0 2
37748: PUSH
37749: FOR_TO
37750: IFFALSE 37919
// begin if hackTanksCaptured [ index ] = hackLimit then
37752: LD_EXP 114
37756: PUSH
37757: LD_VAR 0 5
37761: ARRAY
37762: PUSH
37763: LD_EXP 115
37767: EQUAL
37768: IFFALSE 37772
// break ;
37770: GO 37919
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37772: LD_ADDR_EXP 117
37776: PUSH
37777: LD_EXP 117
37781: PPUSH
37782: LD_VAR 0 5
37786: PPUSH
37787: LD_EXP 117
37791: PUSH
37792: LD_VAR 0 5
37796: ARRAY
37797: PUSH
37798: LD_INT 1
37800: PLUS
37801: PPUSH
37802: CALL_OW 1
37806: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37807: LD_ADDR_EXP 114
37811: PUSH
37812: LD_EXP 114
37816: PPUSH
37817: LD_VAR 0 5
37821: PUSH
37822: LD_EXP 114
37826: PUSH
37827: LD_VAR 0 5
37831: ARRAY
37832: PUSH
37833: LD_INT 1
37835: PLUS
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PPUSH
37841: LD_VAR 0 2
37845: PUSH
37846: LD_VAR 0 4
37850: ARRAY
37851: PUSH
37852: LD_VAR 0 2
37856: PUSH
37857: LD_VAR 0 4
37861: ARRAY
37862: PPUSH
37863: CALL_OW 255
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PPUSH
37872: CALL 45295 0 3
37876: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37877: LD_VAR 0 2
37881: PUSH
37882: LD_VAR 0 4
37886: ARRAY
37887: PPUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 255
37897: PPUSH
37898: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37902: LD_VAR 0 2
37906: PUSH
37907: LD_VAR 0 4
37911: ARRAY
37912: PPUSH
37913: CALL_OW 141
// end ;
37917: GO 37749
37919: POP
37920: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37921: LD_VAR 0 1
37925: PPUSH
37926: LD_EXP 114
37930: PUSH
37931: LD_VAR 0 5
37935: ARRAY
37936: PUSH
37937: LD_INT 0
37939: PLUS
37940: PPUSH
37941: CALL_OW 505
// end ;
37945: LD_VAR 0 3
37949: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
37954: PPUSH
37955: PPUSH
// if not hack in hackTanks then
37956: LD_VAR 0 1
37960: PUSH
37961: LD_EXP 113
37965: IN
37966: NOT
37967: IFFALSE 37971
// exit ;
37969: GO 38211
// index := GetElementIndex ( hackTanks , hack ) ;
37971: LD_ADDR_VAR 0 4
37975: PUSH
37976: LD_EXP 113
37980: PPUSH
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL 45080 0 2
37990: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37991: LD_ADDR_VAR 0 3
37995: PUSH
37996: DOUBLE
37997: LD_EXP 114
38001: PUSH
38002: LD_VAR 0 4
38006: ARRAY
38007: INC
38008: ST_TO_ADDR
38009: LD_INT 1
38011: PUSH
38012: FOR_DOWNTO
38013: IFFALSE 38185
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38015: LD_ADDR_VAR 0 5
38019: PUSH
38020: LD_EXP 114
38024: PUSH
38025: LD_VAR 0 4
38029: ARRAY
38030: PUSH
38031: LD_VAR 0 3
38035: ARRAY
38036: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38037: LD_VAR 0 5
38041: PUSH
38042: LD_INT 1
38044: ARRAY
38045: PPUSH
38046: CALL_OW 302
38050: NOT
38051: PUSH
38052: LD_VAR 0 5
38056: PUSH
38057: LD_INT 1
38059: ARRAY
38060: PPUSH
38061: CALL_OW 255
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 255
38075: NONEQUAL
38076: OR
38077: IFFALSE 38183
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38079: LD_VAR 0 5
38083: PUSH
38084: LD_INT 1
38086: ARRAY
38087: PPUSH
38088: CALL_OW 305
38092: PUSH
38093: LD_VAR 0 5
38097: PUSH
38098: LD_INT 1
38100: ARRAY
38101: PPUSH
38102: CALL_OW 255
38106: PUSH
38107: LD_VAR 0 1
38111: PPUSH
38112: CALL_OW 255
38116: EQUAL
38117: AND
38118: IFFALSE 38142
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38120: LD_VAR 0 5
38124: PUSH
38125: LD_INT 1
38127: ARRAY
38128: PPUSH
38129: LD_VAR 0 5
38133: PUSH
38134: LD_INT 2
38136: ARRAY
38137: PPUSH
38138: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38142: LD_ADDR_EXP 114
38146: PUSH
38147: LD_EXP 114
38151: PPUSH
38152: LD_VAR 0 4
38156: PPUSH
38157: LD_EXP 114
38161: PUSH
38162: LD_VAR 0 4
38166: ARRAY
38167: PPUSH
38168: LD_VAR 0 3
38172: PPUSH
38173: CALL_OW 3
38177: PPUSH
38178: CALL_OW 1
38182: ST_TO_ADDR
// end ; end ;
38183: GO 38012
38185: POP
38186: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38187: LD_VAR 0 1
38191: PPUSH
38192: LD_EXP 114
38196: PUSH
38197: LD_VAR 0 4
38201: ARRAY
38202: PUSH
38203: LD_INT 0
38205: PLUS
38206: PPUSH
38207: CALL_OW 505
// end ;
38211: LD_VAR 0 2
38215: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38216: LD_INT 0
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
// if not hack in hackTanks then
38222: LD_VAR 0 1
38226: PUSH
38227: LD_EXP 113
38231: IN
38232: NOT
38233: IFFALSE 38237
// exit ;
38235: GO 38322
// index := GetElementIndex ( hackTanks , hack ) ;
38237: LD_ADDR_VAR 0 5
38241: PUSH
38242: LD_EXP 113
38246: PPUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: CALL 45080 0 2
38256: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38257: LD_ADDR_VAR 0 4
38261: PUSH
38262: DOUBLE
38263: LD_INT 1
38265: DEC
38266: ST_TO_ADDR
38267: LD_EXP 114
38271: PUSH
38272: LD_VAR 0 5
38276: ARRAY
38277: PUSH
38278: FOR_TO
38279: IFFALSE 38320
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38281: LD_EXP 114
38285: PUSH
38286: LD_VAR 0 5
38290: ARRAY
38291: PUSH
38292: LD_VAR 0 4
38296: ARRAY
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PUSH
38302: LD_VAR 0 2
38306: EQUAL
38307: IFFALSE 38318
// KillUnit ( vehicle ) ;
38309: LD_VAR 0 2
38313: PPUSH
38314: CALL_OW 66
38318: GO 38278
38320: POP
38321: POP
// end ;
38322: LD_VAR 0 3
38326: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38327: LD_EXP 118
38331: NOT
38332: IFFALSE 38367
38334: GO 38336
38336: DISABLE
// begin initMiner := true ;
38337: LD_ADDR_EXP 118
38341: PUSH
38342: LD_INT 1
38344: ST_TO_ADDR
// minersList := [ ] ;
38345: LD_ADDR_EXP 119
38349: PUSH
38350: EMPTY
38351: ST_TO_ADDR
// minerMinesList := [ ] ;
38352: LD_ADDR_EXP 120
38356: PUSH
38357: EMPTY
38358: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38359: LD_ADDR_EXP 121
38363: PUSH
38364: LD_INT 5
38366: ST_TO_ADDR
// end ;
38367: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38368: LD_EXP 118
38372: PUSH
38373: LD_INT 34
38375: PUSH
38376: LD_INT 81
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PPUSH
38383: CALL_OW 69
38387: AND
38388: IFFALSE 38849
38390: GO 38392
38392: DISABLE
38393: LD_INT 0
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
// begin enable ;
38399: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38400: LD_ADDR_VAR 0 1
38404: PUSH
38405: LD_INT 34
38407: PUSH
38408: LD_INT 81
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PPUSH
38415: CALL_OW 69
38419: PUSH
38420: FOR_IN
38421: IFFALSE 38493
// begin if not i in minersList then
38423: LD_VAR 0 1
38427: PUSH
38428: LD_EXP 119
38432: IN
38433: NOT
38434: IFFALSE 38491
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38436: LD_ADDR_EXP 119
38440: PUSH
38441: LD_EXP 119
38445: PPUSH
38446: LD_EXP 119
38450: PUSH
38451: LD_INT 1
38453: PLUS
38454: PPUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 1
38464: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38465: LD_ADDR_EXP 120
38469: PUSH
38470: LD_EXP 120
38474: PPUSH
38475: LD_EXP 120
38479: PUSH
38480: LD_INT 1
38482: PLUS
38483: PPUSH
38484: EMPTY
38485: PPUSH
38486: CALL_OW 1
38490: ST_TO_ADDR
// end end ;
38491: GO 38420
38493: POP
38494: POP
// for i := minerMinesList downto 1 do
38495: LD_ADDR_VAR 0 1
38499: PUSH
38500: DOUBLE
38501: LD_EXP 120
38505: INC
38506: ST_TO_ADDR
38507: LD_INT 1
38509: PUSH
38510: FOR_DOWNTO
38511: IFFALSE 38847
// begin if IsLive ( minersList [ i ] ) then
38513: LD_EXP 119
38517: PUSH
38518: LD_VAR 0 1
38522: ARRAY
38523: PPUSH
38524: CALL_OW 300
38528: IFFALSE 38556
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38530: LD_EXP 119
38534: PUSH
38535: LD_VAR 0 1
38539: ARRAY
38540: PPUSH
38541: LD_EXP 120
38545: PUSH
38546: LD_VAR 0 1
38550: ARRAY
38551: PPUSH
38552: CALL_OW 505
// if not minerMinesList [ i ] then
38556: LD_EXP 120
38560: PUSH
38561: LD_VAR 0 1
38565: ARRAY
38566: NOT
38567: IFFALSE 38571
// continue ;
38569: GO 38510
// for j := minerMinesList [ i ] downto 1 do
38571: LD_ADDR_VAR 0 2
38575: PUSH
38576: DOUBLE
38577: LD_EXP 120
38581: PUSH
38582: LD_VAR 0 1
38586: ARRAY
38587: INC
38588: ST_TO_ADDR
38589: LD_INT 1
38591: PUSH
38592: FOR_DOWNTO
38593: IFFALSE 38843
// begin side := GetSide ( minersList [ i ] ) ;
38595: LD_ADDR_VAR 0 3
38599: PUSH
38600: LD_EXP 119
38604: PUSH
38605: LD_VAR 0 1
38609: ARRAY
38610: PPUSH
38611: CALL_OW 255
38615: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38616: LD_ADDR_VAR 0 4
38620: PUSH
38621: LD_EXP 120
38625: PUSH
38626: LD_VAR 0 1
38630: ARRAY
38631: PUSH
38632: LD_VAR 0 2
38636: ARRAY
38637: PUSH
38638: LD_INT 1
38640: ARRAY
38641: PPUSH
38642: LD_EXP 120
38646: PUSH
38647: LD_VAR 0 1
38651: ARRAY
38652: PUSH
38653: LD_VAR 0 2
38657: ARRAY
38658: PUSH
38659: LD_INT 2
38661: ARRAY
38662: PPUSH
38663: CALL_OW 428
38667: ST_TO_ADDR
// if not tmp then
38668: LD_VAR 0 4
38672: NOT
38673: IFFALSE 38677
// continue ;
38675: GO 38592
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38677: LD_VAR 0 4
38681: PUSH
38682: LD_INT 81
38684: PUSH
38685: LD_VAR 0 3
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PPUSH
38694: CALL_OW 69
38698: IN
38699: PUSH
38700: LD_EXP 120
38704: PUSH
38705: LD_VAR 0 1
38709: ARRAY
38710: PUSH
38711: LD_VAR 0 2
38715: ARRAY
38716: PUSH
38717: LD_INT 1
38719: ARRAY
38720: PPUSH
38721: LD_EXP 120
38725: PUSH
38726: LD_VAR 0 1
38730: ARRAY
38731: PUSH
38732: LD_VAR 0 2
38736: ARRAY
38737: PUSH
38738: LD_INT 2
38740: ARRAY
38741: PPUSH
38742: CALL_OW 458
38746: AND
38747: IFFALSE 38841
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38749: LD_EXP 120
38753: PUSH
38754: LD_VAR 0 1
38758: ARRAY
38759: PUSH
38760: LD_VAR 0 2
38764: ARRAY
38765: PUSH
38766: LD_INT 1
38768: ARRAY
38769: PPUSH
38770: LD_EXP 120
38774: PUSH
38775: LD_VAR 0 1
38779: ARRAY
38780: PUSH
38781: LD_VAR 0 2
38785: ARRAY
38786: PUSH
38787: LD_INT 2
38789: ARRAY
38790: PPUSH
38791: LD_VAR 0 3
38795: PPUSH
38796: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38800: LD_ADDR_EXP 120
38804: PUSH
38805: LD_EXP 120
38809: PPUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: LD_EXP 120
38819: PUSH
38820: LD_VAR 0 1
38824: ARRAY
38825: PPUSH
38826: LD_VAR 0 2
38830: PPUSH
38831: CALL_OW 3
38835: PPUSH
38836: CALL_OW 1
38840: ST_TO_ADDR
// end ; end ;
38841: GO 38592
38843: POP
38844: POP
// end ;
38845: GO 38510
38847: POP
38848: POP
// end ;
38849: PPOPN 4
38851: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38852: LD_INT 0
38854: PPUSH
38855: PPUSH
// result := false ;
38856: LD_ADDR_VAR 0 4
38860: PUSH
38861: LD_INT 0
38863: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38864: LD_VAR 0 1
38868: PPUSH
38869: CALL_OW 264
38873: PUSH
38874: LD_INT 81
38876: EQUAL
38877: NOT
38878: IFFALSE 38882
// exit ;
38880: GO 39122
// index := GetElementIndex ( minersList , unit ) ;
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: LD_EXP 119
38891: PPUSH
38892: LD_VAR 0 1
38896: PPUSH
38897: CALL 45080 0 2
38901: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38902: LD_EXP 120
38906: PUSH
38907: LD_VAR 0 5
38911: ARRAY
38912: PUSH
38913: LD_EXP 121
38917: GREATEREQUAL
38918: IFFALSE 38922
// exit ;
38920: GO 39122
// ComMoveXY ( unit , x , y ) ;
38922: LD_VAR 0 1
38926: PPUSH
38927: LD_VAR 0 2
38931: PPUSH
38932: LD_VAR 0 3
38936: PPUSH
38937: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38941: LD_INT 35
38943: PPUSH
38944: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38948: LD_VAR 0 1
38952: PPUSH
38953: LD_VAR 0 2
38957: PPUSH
38958: LD_VAR 0 3
38962: PPUSH
38963: CALL 76832 0 3
38967: NOT
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 314
38978: AND
38979: IFFALSE 38983
// exit ;
38981: GO 39122
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38983: LD_VAR 0 2
38987: PPUSH
38988: LD_VAR 0 3
38992: PPUSH
38993: CALL_OW 428
38997: PUSH
38998: LD_VAR 0 1
39002: EQUAL
39003: PUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL_OW 314
39013: NOT
39014: AND
39015: IFFALSE 38941
// PlaySoundXY ( x , y , PlantMine ) ;
39017: LD_VAR 0 2
39021: PPUSH
39022: LD_VAR 0 3
39026: PPUSH
39027: LD_STRING PlantMine
39029: PPUSH
39030: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39034: LD_VAR 0 2
39038: PPUSH
39039: LD_VAR 0 3
39043: PPUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: CALL_OW 255
39053: PPUSH
39054: LD_INT 0
39056: PPUSH
39057: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39061: LD_ADDR_EXP 120
39065: PUSH
39066: LD_EXP 120
39070: PPUSH
39071: LD_VAR 0 5
39075: PUSH
39076: LD_EXP 120
39080: PUSH
39081: LD_VAR 0 5
39085: ARRAY
39086: PUSH
39087: LD_INT 1
39089: PLUS
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PPUSH
39095: LD_VAR 0 2
39099: PUSH
39100: LD_VAR 0 3
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PPUSH
39109: CALL 45295 0 3
39113: ST_TO_ADDR
// result := true ;
39114: LD_ADDR_VAR 0 4
39118: PUSH
39119: LD_INT 1
39121: ST_TO_ADDR
// end ;
39122: LD_VAR 0 4
39126: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39127: LD_INT 0
39129: PPUSH
39130: PPUSH
39131: PPUSH
// if not unit in minersList then
39132: LD_VAR 0 1
39136: PUSH
39137: LD_EXP 119
39141: IN
39142: NOT
39143: IFFALSE 39147
// exit ;
39145: GO 39539
// index := GetElementIndex ( minersList , unit ) ;
39147: LD_ADDR_VAR 0 6
39151: PUSH
39152: LD_EXP 119
39156: PPUSH
39157: LD_VAR 0 1
39161: PPUSH
39162: CALL 45080 0 2
39166: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39167: LD_ADDR_VAR 0 5
39171: PUSH
39172: DOUBLE
39173: LD_EXP 120
39177: PUSH
39178: LD_VAR 0 6
39182: ARRAY
39183: INC
39184: ST_TO_ADDR
39185: LD_INT 1
39187: PUSH
39188: FOR_DOWNTO
39189: IFFALSE 39350
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39191: LD_EXP 120
39195: PUSH
39196: LD_VAR 0 6
39200: ARRAY
39201: PUSH
39202: LD_VAR 0 5
39206: ARRAY
39207: PUSH
39208: LD_INT 1
39210: ARRAY
39211: PUSH
39212: LD_VAR 0 2
39216: EQUAL
39217: PUSH
39218: LD_EXP 120
39222: PUSH
39223: LD_VAR 0 6
39227: ARRAY
39228: PUSH
39229: LD_VAR 0 5
39233: ARRAY
39234: PUSH
39235: LD_INT 2
39237: ARRAY
39238: PUSH
39239: LD_VAR 0 3
39243: EQUAL
39244: AND
39245: IFFALSE 39348
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39247: LD_EXP 120
39251: PUSH
39252: LD_VAR 0 6
39256: ARRAY
39257: PUSH
39258: LD_VAR 0 5
39262: ARRAY
39263: PUSH
39264: LD_INT 1
39266: ARRAY
39267: PPUSH
39268: LD_EXP 120
39272: PUSH
39273: LD_VAR 0 6
39277: ARRAY
39278: PUSH
39279: LD_VAR 0 5
39283: ARRAY
39284: PUSH
39285: LD_INT 2
39287: ARRAY
39288: PPUSH
39289: LD_VAR 0 1
39293: PPUSH
39294: CALL_OW 255
39298: PPUSH
39299: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39303: LD_ADDR_EXP 120
39307: PUSH
39308: LD_EXP 120
39312: PPUSH
39313: LD_VAR 0 6
39317: PPUSH
39318: LD_EXP 120
39322: PUSH
39323: LD_VAR 0 6
39327: ARRAY
39328: PPUSH
39329: LD_VAR 0 5
39333: PPUSH
39334: CALL_OW 3
39338: PPUSH
39339: CALL_OW 1
39343: ST_TO_ADDR
// exit ;
39344: POP
39345: POP
39346: GO 39539
// end ; end ;
39348: GO 39188
39350: POP
39351: POP
// for i := minerMinesList [ index ] downto 1 do
39352: LD_ADDR_VAR 0 5
39356: PUSH
39357: DOUBLE
39358: LD_EXP 120
39362: PUSH
39363: LD_VAR 0 6
39367: ARRAY
39368: INC
39369: ST_TO_ADDR
39370: LD_INT 1
39372: PUSH
39373: FOR_DOWNTO
39374: IFFALSE 39537
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39376: LD_EXP 120
39380: PUSH
39381: LD_VAR 0 6
39385: ARRAY
39386: PUSH
39387: LD_VAR 0 5
39391: ARRAY
39392: PUSH
39393: LD_INT 1
39395: ARRAY
39396: PPUSH
39397: LD_EXP 120
39401: PUSH
39402: LD_VAR 0 6
39406: ARRAY
39407: PUSH
39408: LD_VAR 0 5
39412: ARRAY
39413: PUSH
39414: LD_INT 2
39416: ARRAY
39417: PPUSH
39418: LD_VAR 0 2
39422: PPUSH
39423: LD_VAR 0 3
39427: PPUSH
39428: CALL_OW 298
39432: PUSH
39433: LD_INT 6
39435: LESS
39436: IFFALSE 39535
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39438: LD_EXP 120
39442: PUSH
39443: LD_VAR 0 6
39447: ARRAY
39448: PUSH
39449: LD_VAR 0 5
39453: ARRAY
39454: PUSH
39455: LD_INT 1
39457: ARRAY
39458: PPUSH
39459: LD_EXP 120
39463: PUSH
39464: LD_VAR 0 6
39468: ARRAY
39469: PUSH
39470: LD_VAR 0 5
39474: ARRAY
39475: PUSH
39476: LD_INT 2
39478: ARRAY
39479: PPUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL_OW 255
39489: PPUSH
39490: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39494: LD_ADDR_EXP 120
39498: PUSH
39499: LD_EXP 120
39503: PPUSH
39504: LD_VAR 0 6
39508: PPUSH
39509: LD_EXP 120
39513: PUSH
39514: LD_VAR 0 6
39518: ARRAY
39519: PPUSH
39520: LD_VAR 0 5
39524: PPUSH
39525: CALL_OW 3
39529: PPUSH
39530: CALL_OW 1
39534: ST_TO_ADDR
// end ; end ;
39535: GO 39373
39537: POP
39538: POP
// end ;
39539: LD_VAR 0 4
39543: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39544: LD_INT 0
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39555: LD_VAR 0 1
39559: PPUSH
39560: CALL_OW 264
39564: PUSH
39565: LD_INT 81
39567: EQUAL
39568: NOT
39569: PUSH
39570: LD_VAR 0 1
39574: PUSH
39575: LD_EXP 119
39579: IN
39580: NOT
39581: OR
39582: IFFALSE 39586
// exit ;
39584: GO 39908
// index := GetElementIndex ( minersList , unit ) ;
39586: LD_ADDR_VAR 0 6
39590: PUSH
39591: LD_EXP 119
39595: PPUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: CALL 45080 0 2
39605: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39606: LD_ADDR_VAR 0 8
39610: PUSH
39611: LD_EXP 121
39615: PUSH
39616: LD_EXP 120
39620: PUSH
39621: LD_VAR 0 6
39625: ARRAY
39626: MINUS
39627: ST_TO_ADDR
// if not minesFreeAmount then
39628: LD_VAR 0 8
39632: NOT
39633: IFFALSE 39637
// exit ;
39635: GO 39908
// tmp := [ ] ;
39637: LD_ADDR_VAR 0 7
39641: PUSH
39642: EMPTY
39643: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39644: LD_ADDR_VAR 0 5
39648: PUSH
39649: DOUBLE
39650: LD_INT 1
39652: DEC
39653: ST_TO_ADDR
39654: LD_VAR 0 8
39658: PUSH
39659: FOR_TO
39660: IFFALSE 39855
// begin _d := rand ( 0 , 5 ) ;
39662: LD_ADDR_VAR 0 11
39666: PUSH
39667: LD_INT 0
39669: PPUSH
39670: LD_INT 5
39672: PPUSH
39673: CALL_OW 12
39677: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39678: LD_ADDR_VAR 0 12
39682: PUSH
39683: LD_INT 2
39685: PPUSH
39686: LD_INT 6
39688: PPUSH
39689: CALL_OW 12
39693: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39694: LD_ADDR_VAR 0 9
39698: PUSH
39699: LD_VAR 0 2
39703: PPUSH
39704: LD_VAR 0 11
39708: PPUSH
39709: LD_VAR 0 12
39713: PPUSH
39714: CALL_OW 272
39718: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39719: LD_ADDR_VAR 0 10
39723: PUSH
39724: LD_VAR 0 3
39728: PPUSH
39729: LD_VAR 0 11
39733: PPUSH
39734: LD_VAR 0 12
39738: PPUSH
39739: CALL_OW 273
39743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39744: LD_VAR 0 9
39748: PPUSH
39749: LD_VAR 0 10
39753: PPUSH
39754: CALL_OW 488
39758: PUSH
39759: LD_VAR 0 9
39763: PUSH
39764: LD_VAR 0 10
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_VAR 0 7
39777: IN
39778: NOT
39779: AND
39780: PUSH
39781: LD_VAR 0 9
39785: PPUSH
39786: LD_VAR 0 10
39790: PPUSH
39791: CALL_OW 458
39795: NOT
39796: AND
39797: IFFALSE 39839
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39799: LD_ADDR_VAR 0 7
39803: PUSH
39804: LD_VAR 0 7
39808: PPUSH
39809: LD_VAR 0 7
39813: PUSH
39814: LD_INT 1
39816: PLUS
39817: PPUSH
39818: LD_VAR 0 9
39822: PUSH
39823: LD_VAR 0 10
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PPUSH
39832: CALL_OW 1
39836: ST_TO_ADDR
39837: GO 39853
// i := i - 1 ;
39839: LD_ADDR_VAR 0 5
39843: PUSH
39844: LD_VAR 0 5
39848: PUSH
39849: LD_INT 1
39851: MINUS
39852: ST_TO_ADDR
// end ;
39853: GO 39659
39855: POP
39856: POP
// for i in tmp do
39857: LD_ADDR_VAR 0 5
39861: PUSH
39862: LD_VAR 0 7
39866: PUSH
39867: FOR_IN
39868: IFFALSE 39906
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39870: LD_VAR 0 1
39874: PPUSH
39875: LD_VAR 0 5
39879: PUSH
39880: LD_INT 1
39882: ARRAY
39883: PPUSH
39884: LD_VAR 0 5
39888: PUSH
39889: LD_INT 2
39891: ARRAY
39892: PPUSH
39893: CALL 38852 0 3
39897: NOT
39898: IFFALSE 39904
// exit ;
39900: POP
39901: POP
39902: GO 39908
39904: GO 39867
39906: POP
39907: POP
// end ;
39908: LD_VAR 0 4
39912: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39913: LD_INT 0
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
// if not GetClass ( unit ) = class_sniper then
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 257
39931: PUSH
39932: LD_INT 5
39934: EQUAL
39935: NOT
39936: IFFALSE 39940
// exit ;
39938: GO 40328
// dist := 8 ;
39940: LD_ADDR_VAR 0 5
39944: PUSH
39945: LD_INT 8
39947: ST_TO_ADDR
// viewRange := 12 ;
39948: LD_ADDR_VAR 0 7
39952: PUSH
39953: LD_INT 12
39955: ST_TO_ADDR
// side := GetSide ( unit ) ;
39956: LD_ADDR_VAR 0 6
39960: PUSH
39961: LD_VAR 0 1
39965: PPUSH
39966: CALL_OW 255
39970: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39971: LD_INT 61
39973: PPUSH
39974: LD_VAR 0 6
39978: PPUSH
39979: CALL_OW 321
39983: PUSH
39984: LD_INT 2
39986: EQUAL
39987: IFFALSE 39997
// viewRange := 16 ;
39989: LD_ADDR_VAR 0 7
39993: PUSH
39994: LD_INT 16
39996: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39997: LD_VAR 0 1
40001: PPUSH
40002: LD_VAR 0 2
40006: PPUSH
40007: LD_VAR 0 3
40011: PPUSH
40012: CALL_OW 297
40016: PUSH
40017: LD_VAR 0 5
40021: GREATER
40022: IFFALSE 40101
// begin ComMoveXY ( unit , x , y ) ;
40024: LD_VAR 0 1
40028: PPUSH
40029: LD_VAR 0 2
40033: PPUSH
40034: LD_VAR 0 3
40038: PPUSH
40039: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40043: LD_INT 35
40045: PPUSH
40046: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40050: LD_VAR 0 1
40054: PPUSH
40055: LD_VAR 0 2
40059: PPUSH
40060: LD_VAR 0 3
40064: PPUSH
40065: CALL 76832 0 3
40069: NOT
40070: IFFALSE 40074
// exit ;
40072: GO 40328
// until GetDistUnitXY ( unit , x , y ) < dist ;
40074: LD_VAR 0 1
40078: PPUSH
40079: LD_VAR 0 2
40083: PPUSH
40084: LD_VAR 0 3
40088: PPUSH
40089: CALL_OW 297
40093: PUSH
40094: LD_VAR 0 5
40098: LESS
40099: IFFALSE 40043
// end ; ComTurnXY ( unit , x , y ) ;
40101: LD_VAR 0 1
40105: PPUSH
40106: LD_VAR 0 2
40110: PPUSH
40111: LD_VAR 0 3
40115: PPUSH
40116: CALL_OW 118
// wait ( 5 ) ;
40120: LD_INT 5
40122: PPUSH
40123: CALL_OW 67
// _d := GetDir ( unit ) ;
40127: LD_ADDR_VAR 0 10
40131: PUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 254
40141: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40142: LD_ADDR_VAR 0 8
40146: PUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: CALL_OW 250
40156: PPUSH
40157: LD_VAR 0 10
40161: PPUSH
40162: LD_VAR 0 5
40166: PPUSH
40167: CALL_OW 272
40171: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40172: LD_ADDR_VAR 0 9
40176: PUSH
40177: LD_VAR 0 1
40181: PPUSH
40182: CALL_OW 251
40186: PPUSH
40187: LD_VAR 0 10
40191: PPUSH
40192: LD_VAR 0 5
40196: PPUSH
40197: CALL_OW 273
40201: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40202: LD_VAR 0 8
40206: PPUSH
40207: LD_VAR 0 9
40211: PPUSH
40212: CALL_OW 488
40216: NOT
40217: IFFALSE 40221
// exit ;
40219: GO 40328
// ComAnimCustom ( unit , 1 ) ;
40221: LD_VAR 0 1
40225: PPUSH
40226: LD_INT 1
40228: PPUSH
40229: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40233: LD_VAR 0 8
40237: PPUSH
40238: LD_VAR 0 9
40242: PPUSH
40243: LD_VAR 0 6
40247: PPUSH
40248: LD_VAR 0 7
40252: PPUSH
40253: CALL_OW 330
// repeat wait ( 1 ) ;
40257: LD_INT 1
40259: PPUSH
40260: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40264: LD_VAR 0 1
40268: PPUSH
40269: CALL_OW 316
40273: PUSH
40274: LD_VAR 0 1
40278: PPUSH
40279: CALL_OW 314
40283: OR
40284: PUSH
40285: LD_VAR 0 1
40289: PPUSH
40290: CALL_OW 302
40294: NOT
40295: OR
40296: PUSH
40297: LD_VAR 0 1
40301: PPUSH
40302: CALL_OW 301
40306: OR
40307: IFFALSE 40257
// RemoveSeeing ( _x , _y , side ) ;
40309: LD_VAR 0 8
40313: PPUSH
40314: LD_VAR 0 9
40318: PPUSH
40319: LD_VAR 0 6
40323: PPUSH
40324: CALL_OW 331
// end ; end_of_file
40328: LD_VAR 0 4
40332: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40333: LD_INT 0
40335: PPUSH
40336: PPUSH
// if exist_mode then
40337: LD_VAR 0 2
40341: IFFALSE 40366
// unit := CreateCharacter ( prefix & ident ) else
40343: LD_ADDR_VAR 0 5
40347: PUSH
40348: LD_VAR 0 3
40352: PUSH
40353: LD_VAR 0 1
40357: STR
40358: PPUSH
40359: CALL_OW 34
40363: ST_TO_ADDR
40364: GO 40381
// unit := NewCharacter ( ident ) ;
40366: LD_ADDR_VAR 0 5
40370: PUSH
40371: LD_VAR 0 1
40375: PPUSH
40376: CALL_OW 25
40380: ST_TO_ADDR
// result := unit ;
40381: LD_ADDR_VAR 0 4
40385: PUSH
40386: LD_VAR 0 5
40390: ST_TO_ADDR
// end ;
40391: LD_VAR 0 4
40395: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
// if not side or not nation then
40400: LD_VAR 0 1
40404: NOT
40405: PUSH
40406: LD_VAR 0 2
40410: NOT
40411: OR
40412: IFFALSE 40416
// exit ;
40414: GO 41184
// case nation of nation_american :
40416: LD_VAR 0 2
40420: PUSH
40421: LD_INT 1
40423: DOUBLE
40424: EQUAL
40425: IFTRUE 40429
40427: GO 40643
40429: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40430: LD_ADDR_VAR 0 4
40434: PUSH
40435: LD_INT 35
40437: PUSH
40438: LD_INT 45
40440: PUSH
40441: LD_INT 46
40443: PUSH
40444: LD_INT 47
40446: PUSH
40447: LD_INT 82
40449: PUSH
40450: LD_INT 83
40452: PUSH
40453: LD_INT 84
40455: PUSH
40456: LD_INT 85
40458: PUSH
40459: LD_INT 86
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 6
40470: PUSH
40471: LD_INT 15
40473: PUSH
40474: LD_INT 16
40476: PUSH
40477: LD_INT 7
40479: PUSH
40480: LD_INT 12
40482: PUSH
40483: LD_INT 13
40485: PUSH
40486: LD_INT 10
40488: PUSH
40489: LD_INT 14
40491: PUSH
40492: LD_INT 20
40494: PUSH
40495: LD_INT 21
40497: PUSH
40498: LD_INT 22
40500: PUSH
40501: LD_INT 25
40503: PUSH
40504: LD_INT 32
40506: PUSH
40507: LD_INT 27
40509: PUSH
40510: LD_INT 36
40512: PUSH
40513: LD_INT 69
40515: PUSH
40516: LD_INT 39
40518: PUSH
40519: LD_INT 34
40521: PUSH
40522: LD_INT 40
40524: PUSH
40525: LD_INT 48
40527: PUSH
40528: LD_INT 49
40530: PUSH
40531: LD_INT 50
40533: PUSH
40534: LD_INT 51
40536: PUSH
40537: LD_INT 52
40539: PUSH
40540: LD_INT 53
40542: PUSH
40543: LD_INT 54
40545: PUSH
40546: LD_INT 55
40548: PUSH
40549: LD_INT 56
40551: PUSH
40552: LD_INT 57
40554: PUSH
40555: LD_INT 58
40557: PUSH
40558: LD_INT 59
40560: PUSH
40561: LD_INT 60
40563: PUSH
40564: LD_INT 61
40566: PUSH
40567: LD_INT 62
40569: PUSH
40570: LD_INT 80
40572: PUSH
40573: LD_INT 82
40575: PUSH
40576: LD_INT 83
40578: PUSH
40579: LD_INT 84
40581: PUSH
40582: LD_INT 85
40584: PUSH
40585: LD_INT 86
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: ST_TO_ADDR
40641: GO 41108
40643: LD_INT 2
40645: DOUBLE
40646: EQUAL
40647: IFTRUE 40651
40649: GO 40877
40651: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40652: LD_ADDR_VAR 0 4
40656: PUSH
40657: LD_INT 35
40659: PUSH
40660: LD_INT 45
40662: PUSH
40663: LD_INT 46
40665: PUSH
40666: LD_INT 47
40668: PUSH
40669: LD_INT 82
40671: PUSH
40672: LD_INT 83
40674: PUSH
40675: LD_INT 84
40677: PUSH
40678: LD_INT 85
40680: PUSH
40681: LD_INT 87
40683: PUSH
40684: LD_INT 70
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 11
40692: PUSH
40693: LD_INT 3
40695: PUSH
40696: LD_INT 4
40698: PUSH
40699: LD_INT 5
40701: PUSH
40702: LD_INT 6
40704: PUSH
40705: LD_INT 15
40707: PUSH
40708: LD_INT 18
40710: PUSH
40711: LD_INT 7
40713: PUSH
40714: LD_INT 17
40716: PUSH
40717: LD_INT 8
40719: PUSH
40720: LD_INT 20
40722: PUSH
40723: LD_INT 21
40725: PUSH
40726: LD_INT 22
40728: PUSH
40729: LD_INT 72
40731: PUSH
40732: LD_INT 26
40734: PUSH
40735: LD_INT 69
40737: PUSH
40738: LD_INT 39
40740: PUSH
40741: LD_INT 40
40743: PUSH
40744: LD_INT 41
40746: PUSH
40747: LD_INT 42
40749: PUSH
40750: LD_INT 43
40752: PUSH
40753: LD_INT 48
40755: PUSH
40756: LD_INT 49
40758: PUSH
40759: LD_INT 50
40761: PUSH
40762: LD_INT 51
40764: PUSH
40765: LD_INT 52
40767: PUSH
40768: LD_INT 53
40770: PUSH
40771: LD_INT 54
40773: PUSH
40774: LD_INT 55
40776: PUSH
40777: LD_INT 56
40779: PUSH
40780: LD_INT 60
40782: PUSH
40783: LD_INT 61
40785: PUSH
40786: LD_INT 62
40788: PUSH
40789: LD_INT 66
40791: PUSH
40792: LD_INT 67
40794: PUSH
40795: LD_INT 68
40797: PUSH
40798: LD_INT 81
40800: PUSH
40801: LD_INT 82
40803: PUSH
40804: LD_INT 83
40806: PUSH
40807: LD_INT 84
40809: PUSH
40810: LD_INT 85
40812: PUSH
40813: LD_INT 87
40815: PUSH
40816: LD_INT 88
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
40875: GO 41108
40877: LD_INT 3
40879: DOUBLE
40880: EQUAL
40881: IFTRUE 40885
40883: GO 41107
40885: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40886: LD_ADDR_VAR 0 4
40890: PUSH
40891: LD_INT 46
40893: PUSH
40894: LD_INT 47
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: LD_INT 82
40905: PUSH
40906: LD_INT 83
40908: PUSH
40909: LD_INT 84
40911: PUSH
40912: LD_INT 85
40914: PUSH
40915: LD_INT 86
40917: PUSH
40918: LD_INT 11
40920: PUSH
40921: LD_INT 9
40923: PUSH
40924: LD_INT 20
40926: PUSH
40927: LD_INT 19
40929: PUSH
40930: LD_INT 21
40932: PUSH
40933: LD_INT 24
40935: PUSH
40936: LD_INT 22
40938: PUSH
40939: LD_INT 25
40941: PUSH
40942: LD_INT 28
40944: PUSH
40945: LD_INT 29
40947: PUSH
40948: LD_INT 30
40950: PUSH
40951: LD_INT 31
40953: PUSH
40954: LD_INT 37
40956: PUSH
40957: LD_INT 38
40959: PUSH
40960: LD_INT 32
40962: PUSH
40963: LD_INT 27
40965: PUSH
40966: LD_INT 33
40968: PUSH
40969: LD_INT 69
40971: PUSH
40972: LD_INT 39
40974: PUSH
40975: LD_INT 34
40977: PUSH
40978: LD_INT 40
40980: PUSH
40981: LD_INT 71
40983: PUSH
40984: LD_INT 23
40986: PUSH
40987: LD_INT 44
40989: PUSH
40990: LD_INT 48
40992: PUSH
40993: LD_INT 49
40995: PUSH
40996: LD_INT 50
40998: PUSH
40999: LD_INT 51
41001: PUSH
41002: LD_INT 52
41004: PUSH
41005: LD_INT 53
41007: PUSH
41008: LD_INT 54
41010: PUSH
41011: LD_INT 55
41013: PUSH
41014: LD_INT 56
41016: PUSH
41017: LD_INT 57
41019: PUSH
41020: LD_INT 58
41022: PUSH
41023: LD_INT 59
41025: PUSH
41026: LD_INT 63
41028: PUSH
41029: LD_INT 64
41031: PUSH
41032: LD_INT 65
41034: PUSH
41035: LD_INT 82
41037: PUSH
41038: LD_INT 83
41040: PUSH
41041: LD_INT 84
41043: PUSH
41044: LD_INT 85
41046: PUSH
41047: LD_INT 86
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
41105: GO 41108
41107: POP
// if state > - 1 and state < 3 then
41108: LD_VAR 0 3
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: GREATER
41117: PUSH
41118: LD_VAR 0 3
41122: PUSH
41123: LD_INT 3
41125: LESS
41126: AND
41127: IFFALSE 41184
// for i in result do
41129: LD_ADDR_VAR 0 5
41133: PUSH
41134: LD_VAR 0 4
41138: PUSH
41139: FOR_IN
41140: IFFALSE 41182
// if GetTech ( i , side ) <> state then
41142: LD_VAR 0 5
41146: PPUSH
41147: LD_VAR 0 1
41151: PPUSH
41152: CALL_OW 321
41156: PUSH
41157: LD_VAR 0 3
41161: NONEQUAL
41162: IFFALSE 41180
// result := result diff i ;
41164: LD_ADDR_VAR 0 4
41168: PUSH
41169: LD_VAR 0 4
41173: PUSH
41174: LD_VAR 0 5
41178: DIFF
41179: ST_TO_ADDR
41180: GO 41139
41182: POP
41183: POP
// end ;
41184: LD_VAR 0 4
41188: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41189: LD_INT 0
41191: PPUSH
41192: PPUSH
41193: PPUSH
// result := true ;
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: LD_INT 1
41201: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41202: LD_ADDR_VAR 0 5
41206: PUSH
41207: LD_VAR 0 2
41211: PPUSH
41212: CALL_OW 480
41216: ST_TO_ADDR
// if not tmp then
41217: LD_VAR 0 5
41221: NOT
41222: IFFALSE 41226
// exit ;
41224: GO 41275
// for i in tmp do
41226: LD_ADDR_VAR 0 4
41230: PUSH
41231: LD_VAR 0 5
41235: PUSH
41236: FOR_IN
41237: IFFALSE 41273
// if GetTech ( i , side ) <> state_researched then
41239: LD_VAR 0 4
41243: PPUSH
41244: LD_VAR 0 1
41248: PPUSH
41249: CALL_OW 321
41253: PUSH
41254: LD_INT 2
41256: NONEQUAL
41257: IFFALSE 41271
// begin result := false ;
41259: LD_ADDR_VAR 0 3
41263: PUSH
41264: LD_INT 0
41266: ST_TO_ADDR
// exit ;
41267: POP
41268: POP
41269: GO 41275
// end ;
41271: GO 41236
41273: POP
41274: POP
// end ;
41275: LD_VAR 0 3
41279: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41295: LD_VAR 0 1
41299: NOT
41300: PUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 257
41310: PUSH
41311: LD_INT 9
41313: NONEQUAL
41314: OR
41315: IFFALSE 41319
// exit ;
41317: GO 41892
// side := GetSide ( unit ) ;
41319: LD_ADDR_VAR 0 9
41323: PUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: CALL_OW 255
41333: ST_TO_ADDR
// tech_space := tech_spacanom ;
41334: LD_ADDR_VAR 0 12
41338: PUSH
41339: LD_INT 29
41341: ST_TO_ADDR
// tech_time := tech_taurad ;
41342: LD_ADDR_VAR 0 13
41346: PUSH
41347: LD_INT 28
41349: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41350: LD_ADDR_VAR 0 11
41354: PUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 310
41364: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41365: LD_VAR 0 11
41369: PPUSH
41370: CALL_OW 247
41374: PUSH
41375: LD_INT 2
41377: EQUAL
41378: IFFALSE 41382
// exit ;
41380: GO 41892
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41382: LD_ADDR_VAR 0 8
41386: PUSH
41387: LD_INT 81
41389: PUSH
41390: LD_VAR 0 9
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: LD_INT 21
41404: PUSH
41405: LD_INT 3
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PPUSH
41420: CALL_OW 69
41424: ST_TO_ADDR
// if not tmp then
41425: LD_VAR 0 8
41429: NOT
41430: IFFALSE 41434
// exit ;
41432: GO 41892
// if in_unit then
41434: LD_VAR 0 11
41438: IFFALSE 41462
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41440: LD_ADDR_VAR 0 10
41444: PUSH
41445: LD_VAR 0 8
41449: PPUSH
41450: LD_VAR 0 11
41454: PPUSH
41455: CALL_OW 74
41459: ST_TO_ADDR
41460: GO 41482
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41462: LD_ADDR_VAR 0 10
41466: PUSH
41467: LD_VAR 0 8
41471: PPUSH
41472: LD_VAR 0 1
41476: PPUSH
41477: CALL_OW 74
41481: ST_TO_ADDR
// if not enemy then
41482: LD_VAR 0 10
41486: NOT
41487: IFFALSE 41491
// exit ;
41489: GO 41892
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41491: LD_VAR 0 11
41495: PUSH
41496: LD_VAR 0 11
41500: PPUSH
41501: LD_VAR 0 10
41505: PPUSH
41506: CALL_OW 296
41510: PUSH
41511: LD_INT 13
41513: GREATER
41514: AND
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_VAR 0 10
41525: PPUSH
41526: CALL_OW 296
41530: PUSH
41531: LD_INT 12
41533: GREATER
41534: OR
41535: IFFALSE 41539
// exit ;
41537: GO 41892
// missile := [ 1 ] ;
41539: LD_ADDR_VAR 0 14
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41550: LD_VAR 0 9
41554: PPUSH
41555: LD_VAR 0 12
41559: PPUSH
41560: CALL_OW 325
41564: IFFALSE 41593
// missile := Replace ( missile , missile + 1 , 2 ) ;
41566: LD_ADDR_VAR 0 14
41570: PUSH
41571: LD_VAR 0 14
41575: PPUSH
41576: LD_VAR 0 14
41580: PUSH
41581: LD_INT 1
41583: PLUS
41584: PPUSH
41585: LD_INT 2
41587: PPUSH
41588: CALL_OW 1
41592: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41593: LD_VAR 0 9
41597: PPUSH
41598: LD_VAR 0 13
41602: PPUSH
41603: CALL_OW 325
41607: PUSH
41608: LD_VAR 0 10
41612: PPUSH
41613: CALL_OW 255
41617: PPUSH
41618: LD_VAR 0 13
41622: PPUSH
41623: CALL_OW 325
41627: NOT
41628: AND
41629: IFFALSE 41658
// missile := Replace ( missile , missile + 1 , 3 ) ;
41631: LD_ADDR_VAR 0 14
41635: PUSH
41636: LD_VAR 0 14
41640: PPUSH
41641: LD_VAR 0 14
41645: PUSH
41646: LD_INT 1
41648: PLUS
41649: PPUSH
41650: LD_INT 3
41652: PPUSH
41653: CALL_OW 1
41657: ST_TO_ADDR
// if missile < 2 then
41658: LD_VAR 0 14
41662: PUSH
41663: LD_INT 2
41665: LESS
41666: IFFALSE 41670
// exit ;
41668: GO 41892
// x := GetX ( enemy ) ;
41670: LD_ADDR_VAR 0 4
41674: PUSH
41675: LD_VAR 0 10
41679: PPUSH
41680: CALL_OW 250
41684: ST_TO_ADDR
// y := GetY ( enemy ) ;
41685: LD_ADDR_VAR 0 5
41689: PUSH
41690: LD_VAR 0 10
41694: PPUSH
41695: CALL_OW 251
41699: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41700: LD_ADDR_VAR 0 6
41704: PUSH
41705: LD_VAR 0 4
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PPUSH
41714: LD_INT 1
41716: PPUSH
41717: CALL_OW 12
41721: PLUS
41722: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41723: LD_ADDR_VAR 0 7
41727: PUSH
41728: LD_VAR 0 5
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PPUSH
41737: LD_INT 1
41739: PPUSH
41740: CALL_OW 12
41744: PLUS
41745: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41746: LD_VAR 0 6
41750: PPUSH
41751: LD_VAR 0 7
41755: PPUSH
41756: CALL_OW 488
41760: NOT
41761: IFFALSE 41783
// begin _x := x ;
41763: LD_ADDR_VAR 0 6
41767: PUSH
41768: LD_VAR 0 4
41772: ST_TO_ADDR
// _y := y ;
41773: LD_ADDR_VAR 0 7
41777: PUSH
41778: LD_VAR 0 5
41782: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41783: LD_ADDR_VAR 0 3
41787: PUSH
41788: LD_INT 1
41790: PPUSH
41791: LD_VAR 0 14
41795: PPUSH
41796: CALL_OW 12
41800: ST_TO_ADDR
// case i of 1 :
41801: LD_VAR 0 3
41805: PUSH
41806: LD_INT 1
41808: DOUBLE
41809: EQUAL
41810: IFTRUE 41814
41812: GO 41831
41814: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41815: LD_VAR 0 1
41819: PPUSH
41820: LD_VAR 0 10
41824: PPUSH
41825: CALL_OW 115
41829: GO 41892
41831: LD_INT 2
41833: DOUBLE
41834: EQUAL
41835: IFTRUE 41839
41837: GO 41861
41839: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41840: LD_VAR 0 1
41844: PPUSH
41845: LD_VAR 0 6
41849: PPUSH
41850: LD_VAR 0 7
41854: PPUSH
41855: CALL_OW 153
41859: GO 41892
41861: LD_INT 3
41863: DOUBLE
41864: EQUAL
41865: IFTRUE 41869
41867: GO 41891
41869: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41870: LD_VAR 0 1
41874: PPUSH
41875: LD_VAR 0 6
41879: PPUSH
41880: LD_VAR 0 7
41884: PPUSH
41885: CALL_OW 154
41889: GO 41892
41891: POP
// end ;
41892: LD_VAR 0 2
41896: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41897: LD_INT 0
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
// if not unit or not building then
41905: LD_VAR 0 1
41909: NOT
41910: PUSH
41911: LD_VAR 0 2
41915: NOT
41916: OR
41917: IFFALSE 41921
// exit ;
41919: GO 42079
// x := GetX ( building ) ;
41921: LD_ADDR_VAR 0 5
41925: PUSH
41926: LD_VAR 0 2
41930: PPUSH
41931: CALL_OW 250
41935: ST_TO_ADDR
// y := GetY ( building ) ;
41936: LD_ADDR_VAR 0 6
41940: PUSH
41941: LD_VAR 0 2
41945: PPUSH
41946: CALL_OW 251
41950: ST_TO_ADDR
// for i = 0 to 5 do
41951: LD_ADDR_VAR 0 4
41955: PUSH
41956: DOUBLE
41957: LD_INT 0
41959: DEC
41960: ST_TO_ADDR
41961: LD_INT 5
41963: PUSH
41964: FOR_TO
41965: IFFALSE 42077
// begin _x := ShiftX ( x , i , 3 ) ;
41967: LD_ADDR_VAR 0 7
41971: PUSH
41972: LD_VAR 0 5
41976: PPUSH
41977: LD_VAR 0 4
41981: PPUSH
41982: LD_INT 3
41984: PPUSH
41985: CALL_OW 272
41989: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41990: LD_ADDR_VAR 0 8
41994: PUSH
41995: LD_VAR 0 6
41999: PPUSH
42000: LD_VAR 0 4
42004: PPUSH
42005: LD_INT 3
42007: PPUSH
42008: CALL_OW 273
42012: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42013: LD_VAR 0 7
42017: PPUSH
42018: LD_VAR 0 8
42022: PPUSH
42023: CALL_OW 488
42027: NOT
42028: IFFALSE 42032
// continue ;
42030: GO 41964
// if HexInfo ( _x , _y ) = 0 then
42032: LD_VAR 0 7
42036: PPUSH
42037: LD_VAR 0 8
42041: PPUSH
42042: CALL_OW 428
42046: PUSH
42047: LD_INT 0
42049: EQUAL
42050: IFFALSE 42075
// begin ComMoveXY ( unit , _x , _y ) ;
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_VAR 0 7
42061: PPUSH
42062: LD_VAR 0 8
42066: PPUSH
42067: CALL_OW 111
// exit ;
42071: POP
42072: POP
42073: GO 42079
// end ; end ;
42075: GO 41964
42077: POP
42078: POP
// end ;
42079: LD_VAR 0 3
42083: RET
// export function ScanBase ( side , base_area ) ; begin
42084: LD_INT 0
42086: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42087: LD_ADDR_VAR 0 3
42091: PUSH
42092: LD_VAR 0 2
42096: PPUSH
42097: LD_INT 81
42099: PUSH
42100: LD_VAR 0 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PPUSH
42109: CALL_OW 70
42113: ST_TO_ADDR
// end ;
42114: LD_VAR 0 3
42118: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42119: LD_INT 0
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
// result := false ;
42125: LD_ADDR_VAR 0 2
42129: PUSH
42130: LD_INT 0
42132: ST_TO_ADDR
// side := GetSide ( unit ) ;
42133: LD_ADDR_VAR 0 3
42137: PUSH
42138: LD_VAR 0 1
42142: PPUSH
42143: CALL_OW 255
42147: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42148: LD_ADDR_VAR 0 4
42152: PUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: CALL_OW 248
42162: ST_TO_ADDR
// case nat of 1 :
42163: LD_VAR 0 4
42167: PUSH
42168: LD_INT 1
42170: DOUBLE
42171: EQUAL
42172: IFTRUE 42176
42174: GO 42187
42176: POP
// tech := tech_lassight ; 2 :
42177: LD_ADDR_VAR 0 5
42181: PUSH
42182: LD_INT 12
42184: ST_TO_ADDR
42185: GO 42226
42187: LD_INT 2
42189: DOUBLE
42190: EQUAL
42191: IFTRUE 42195
42193: GO 42206
42195: POP
// tech := tech_mortar ; 3 :
42196: LD_ADDR_VAR 0 5
42200: PUSH
42201: LD_INT 41
42203: ST_TO_ADDR
42204: GO 42226
42206: LD_INT 3
42208: DOUBLE
42209: EQUAL
42210: IFTRUE 42214
42212: GO 42225
42214: POP
// tech := tech_bazooka ; end ;
42215: LD_ADDR_VAR 0 5
42219: PUSH
42220: LD_INT 44
42222: ST_TO_ADDR
42223: GO 42226
42225: POP
// if Researched ( side , tech ) then
42226: LD_VAR 0 3
42230: PPUSH
42231: LD_VAR 0 5
42235: PPUSH
42236: CALL_OW 325
42240: IFFALSE 42267
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42242: LD_ADDR_VAR 0 2
42246: PUSH
42247: LD_INT 5
42249: PUSH
42250: LD_INT 8
42252: PUSH
42253: LD_INT 9
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: PUSH
42261: LD_VAR 0 4
42265: ARRAY
42266: ST_TO_ADDR
// end ;
42267: LD_VAR 0 2
42271: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42272: LD_INT 0
42274: PPUSH
42275: PPUSH
42276: PPUSH
// if not mines then
42277: LD_VAR 0 2
42281: NOT
42282: IFFALSE 42286
// exit ;
42284: GO 42430
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42286: LD_ADDR_VAR 0 5
42290: PUSH
42291: LD_INT 81
42293: PUSH
42294: LD_VAR 0 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 3
42305: PUSH
42306: LD_INT 21
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PPUSH
42324: CALL_OW 69
42328: ST_TO_ADDR
// for i in mines do
42329: LD_ADDR_VAR 0 4
42333: PUSH
42334: LD_VAR 0 2
42338: PUSH
42339: FOR_IN
42340: IFFALSE 42428
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42342: LD_VAR 0 4
42346: PUSH
42347: LD_INT 1
42349: ARRAY
42350: PPUSH
42351: LD_VAR 0 4
42355: PUSH
42356: LD_INT 2
42358: ARRAY
42359: PPUSH
42360: CALL_OW 458
42364: NOT
42365: IFFALSE 42369
// continue ;
42367: GO 42339
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42369: LD_VAR 0 4
42373: PUSH
42374: LD_INT 1
42376: ARRAY
42377: PPUSH
42378: LD_VAR 0 4
42382: PUSH
42383: LD_INT 2
42385: ARRAY
42386: PPUSH
42387: CALL_OW 428
42391: PUSH
42392: LD_VAR 0 5
42396: IN
42397: IFFALSE 42426
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42399: LD_VAR 0 4
42403: PUSH
42404: LD_INT 1
42406: ARRAY
42407: PPUSH
42408: LD_VAR 0 4
42412: PUSH
42413: LD_INT 2
42415: ARRAY
42416: PPUSH
42417: LD_VAR 0 1
42421: PPUSH
42422: CALL_OW 456
// end ;
42426: GO 42339
42428: POP
42429: POP
// end ;
42430: LD_VAR 0 3
42434: RET
// export function Count ( array ) ; begin
42435: LD_INT 0
42437: PPUSH
// result := array + 0 ;
42438: LD_ADDR_VAR 0 2
42442: PUSH
42443: LD_VAR 0 1
42447: PUSH
42448: LD_INT 0
42450: PLUS
42451: ST_TO_ADDR
// end ;
42452: LD_VAR 0 2
42456: RET
// export function IsEmpty ( building ) ; begin
42457: LD_INT 0
42459: PPUSH
// if not building then
42460: LD_VAR 0 1
42464: NOT
42465: IFFALSE 42469
// exit ;
42467: GO 42512
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42469: LD_ADDR_VAR 0 2
42473: PUSH
42474: LD_VAR 0 1
42478: PUSH
42479: LD_INT 22
42481: PUSH
42482: LD_VAR 0 1
42486: PPUSH
42487: CALL_OW 255
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 58
42498: PUSH
42499: EMPTY
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PPUSH
42506: CALL_OW 69
42510: IN
42511: ST_TO_ADDR
// end ;
42512: LD_VAR 0 2
42516: RET
// export function IsNotFull ( building ) ; var places ; begin
42517: LD_INT 0
42519: PPUSH
42520: PPUSH
// if not building then
42521: LD_VAR 0 1
42525: NOT
42526: IFFALSE 42530
// exit ;
42528: GO 42558
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42530: LD_ADDR_VAR 0 2
42534: PUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: LD_INT 3
42542: PUSH
42543: LD_INT 62
42545: PUSH
42546: EMPTY
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PPUSH
42553: CALL_OW 72
42557: ST_TO_ADDR
// end ;
42558: LD_VAR 0 2
42562: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42563: LD_INT 0
42565: PPUSH
42566: PPUSH
42567: PPUSH
42568: PPUSH
// tmp := [ ] ;
42569: LD_ADDR_VAR 0 3
42573: PUSH
42574: EMPTY
42575: ST_TO_ADDR
// list := [ ] ;
42576: LD_ADDR_VAR 0 5
42580: PUSH
42581: EMPTY
42582: ST_TO_ADDR
// for i = 16 to 25 do
42583: LD_ADDR_VAR 0 4
42587: PUSH
42588: DOUBLE
42589: LD_INT 16
42591: DEC
42592: ST_TO_ADDR
42593: LD_INT 25
42595: PUSH
42596: FOR_TO
42597: IFFALSE 42670
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42599: LD_ADDR_VAR 0 3
42603: PUSH
42604: LD_VAR 0 3
42608: PUSH
42609: LD_INT 22
42611: PUSH
42612: LD_VAR 0 1
42616: PPUSH
42617: CALL_OW 255
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 91
42628: PUSH
42629: LD_VAR 0 1
42633: PUSH
42634: LD_INT 6
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 30
42644: PUSH
42645: LD_VAR 0 4
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: PPUSH
42662: CALL_OW 69
42666: ADD
42667: ST_TO_ADDR
42668: GO 42596
42670: POP
42671: POP
// for i = 1 to tmp do
42672: LD_ADDR_VAR 0 4
42676: PUSH
42677: DOUBLE
42678: LD_INT 1
42680: DEC
42681: ST_TO_ADDR
42682: LD_VAR 0 3
42686: PUSH
42687: FOR_TO
42688: IFFALSE 42776
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42690: LD_ADDR_VAR 0 5
42694: PUSH
42695: LD_VAR 0 5
42699: PUSH
42700: LD_VAR 0 3
42704: PUSH
42705: LD_VAR 0 4
42709: ARRAY
42710: PPUSH
42711: CALL_OW 266
42715: PUSH
42716: LD_VAR 0 3
42720: PUSH
42721: LD_VAR 0 4
42725: ARRAY
42726: PPUSH
42727: CALL_OW 250
42731: PUSH
42732: LD_VAR 0 3
42736: PUSH
42737: LD_VAR 0 4
42741: ARRAY
42742: PPUSH
42743: CALL_OW 251
42747: PUSH
42748: LD_VAR 0 3
42752: PUSH
42753: LD_VAR 0 4
42757: ARRAY
42758: PPUSH
42759: CALL_OW 254
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: PUSH
42770: EMPTY
42771: LIST
42772: ADD
42773: ST_TO_ADDR
42774: GO 42687
42776: POP
42777: POP
// result := list ;
42778: LD_ADDR_VAR 0 2
42782: PUSH
42783: LD_VAR 0 5
42787: ST_TO_ADDR
// end ;
42788: LD_VAR 0 2
42792: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42793: LD_INT 0
42795: PPUSH
42796: PPUSH
42797: PPUSH
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
// if not factory then
42802: LD_VAR 0 1
42806: NOT
42807: IFFALSE 42811
// exit ;
42809: GO 43404
// if control = control_apeman then
42811: LD_VAR 0 4
42815: PUSH
42816: LD_INT 5
42818: EQUAL
42819: IFFALSE 42928
// begin tmp := UnitsInside ( factory ) ;
42821: LD_ADDR_VAR 0 8
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: CALL_OW 313
42835: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42836: LD_VAR 0 8
42840: PPUSH
42841: LD_INT 25
42843: PUSH
42844: LD_INT 12
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PPUSH
42851: CALL_OW 72
42855: NOT
42856: IFFALSE 42866
// control := control_manual ;
42858: LD_ADDR_VAR 0 4
42862: PUSH
42863: LD_INT 1
42865: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42866: LD_ADDR_VAR 0 8
42870: PUSH
42871: LD_VAR 0 1
42875: PPUSH
42876: CALL 42563 0 1
42880: ST_TO_ADDR
// if tmp then
42881: LD_VAR 0 8
42885: IFFALSE 42928
// begin for i in tmp do
42887: LD_ADDR_VAR 0 7
42891: PUSH
42892: LD_VAR 0 8
42896: PUSH
42897: FOR_IN
42898: IFFALSE 42926
// if i [ 1 ] = b_ext_radio then
42900: LD_VAR 0 7
42904: PUSH
42905: LD_INT 1
42907: ARRAY
42908: PUSH
42909: LD_INT 22
42911: EQUAL
42912: IFFALSE 42924
// begin control := control_remote ;
42914: LD_ADDR_VAR 0 4
42918: PUSH
42919: LD_INT 2
42921: ST_TO_ADDR
// break ;
42922: GO 42926
// end ;
42924: GO 42897
42926: POP
42927: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42928: LD_VAR 0 1
42932: PPUSH
42933: LD_VAR 0 2
42937: PPUSH
42938: LD_VAR 0 3
42942: PPUSH
42943: LD_VAR 0 4
42947: PPUSH
42948: LD_VAR 0 5
42952: PPUSH
42953: CALL_OW 448
42957: IFFALSE 42992
// begin result := [ chassis , engine , control , weapon ] ;
42959: LD_ADDR_VAR 0 6
42963: PUSH
42964: LD_VAR 0 2
42968: PUSH
42969: LD_VAR 0 3
42973: PUSH
42974: LD_VAR 0 4
42978: PUSH
42979: LD_VAR 0 5
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
// exit ;
42990: GO 43404
// end ; _chassis := AvailableChassisList ( factory ) ;
42992: LD_ADDR_VAR 0 9
42996: PUSH
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 475
43006: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43007: LD_ADDR_VAR 0 11
43011: PUSH
43012: LD_VAR 0 1
43016: PPUSH
43017: CALL_OW 476
43021: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43022: LD_ADDR_VAR 0 12
43026: PUSH
43027: LD_VAR 0 1
43031: PPUSH
43032: CALL_OW 477
43036: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43037: LD_ADDR_VAR 0 10
43041: PUSH
43042: LD_VAR 0 1
43046: PPUSH
43047: CALL_OW 478
43051: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43052: LD_VAR 0 9
43056: NOT
43057: PUSH
43058: LD_VAR 0 11
43062: NOT
43063: OR
43064: PUSH
43065: LD_VAR 0 12
43069: NOT
43070: OR
43071: PUSH
43072: LD_VAR 0 10
43076: NOT
43077: OR
43078: IFFALSE 43113
// begin result := [ chassis , engine , control , weapon ] ;
43080: LD_ADDR_VAR 0 6
43084: PUSH
43085: LD_VAR 0 2
43089: PUSH
43090: LD_VAR 0 3
43094: PUSH
43095: LD_VAR 0 4
43099: PUSH
43100: LD_VAR 0 5
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// exit ;
43111: GO 43404
// end ; if not chassis in _chassis then
43113: LD_VAR 0 2
43117: PUSH
43118: LD_VAR 0 9
43122: IN
43123: NOT
43124: IFFALSE 43150
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43126: LD_ADDR_VAR 0 2
43130: PUSH
43131: LD_VAR 0 9
43135: PUSH
43136: LD_INT 1
43138: PPUSH
43139: LD_VAR 0 9
43143: PPUSH
43144: CALL_OW 12
43148: ARRAY
43149: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43150: LD_VAR 0 2
43154: PPUSH
43155: LD_VAR 0 3
43159: PPUSH
43160: CALL 43409 0 2
43164: NOT
43165: IFFALSE 43224
// repeat engine := _engine [ 1 ] ;
43167: LD_ADDR_VAR 0 3
43171: PUSH
43172: LD_VAR 0 11
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43181: LD_ADDR_VAR 0 11
43185: PUSH
43186: LD_VAR 0 11
43190: PPUSH
43191: LD_INT 1
43193: PPUSH
43194: CALL_OW 3
43198: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43199: LD_VAR 0 2
43203: PPUSH
43204: LD_VAR 0 3
43208: PPUSH
43209: CALL 43409 0 2
43213: PUSH
43214: LD_VAR 0 11
43218: PUSH
43219: EMPTY
43220: EQUAL
43221: OR
43222: IFFALSE 43167
// if not control in _control then
43224: LD_VAR 0 4
43228: PUSH
43229: LD_VAR 0 12
43233: IN
43234: NOT
43235: IFFALSE 43261
// control := _control [ rand ( 1 , _control ) ] ;
43237: LD_ADDR_VAR 0 4
43241: PUSH
43242: LD_VAR 0 12
43246: PUSH
43247: LD_INT 1
43249: PPUSH
43250: LD_VAR 0 12
43254: PPUSH
43255: CALL_OW 12
43259: ARRAY
43260: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43261: LD_VAR 0 2
43265: PPUSH
43266: LD_VAR 0 5
43270: PPUSH
43271: CALL 43629 0 2
43275: NOT
43276: IFFALSE 43335
// repeat weapon := _weapon [ 1 ] ;
43278: LD_ADDR_VAR 0 5
43282: PUSH
43283: LD_VAR 0 10
43287: PUSH
43288: LD_INT 1
43290: ARRAY
43291: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43292: LD_ADDR_VAR 0 10
43296: PUSH
43297: LD_VAR 0 10
43301: PPUSH
43302: LD_INT 1
43304: PPUSH
43305: CALL_OW 3
43309: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43310: LD_VAR 0 2
43314: PPUSH
43315: LD_VAR 0 5
43319: PPUSH
43320: CALL 43629 0 2
43324: PUSH
43325: LD_VAR 0 10
43329: PUSH
43330: EMPTY
43331: EQUAL
43332: OR
43333: IFFALSE 43278
// result := [ ] ;
43335: LD_ADDR_VAR 0 6
43339: PUSH
43340: EMPTY
43341: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43342: LD_VAR 0 1
43346: PPUSH
43347: LD_VAR 0 2
43351: PPUSH
43352: LD_VAR 0 3
43356: PPUSH
43357: LD_VAR 0 4
43361: PPUSH
43362: LD_VAR 0 5
43366: PPUSH
43367: CALL_OW 448
43371: IFFALSE 43404
// result := [ chassis , engine , control , weapon ] ;
43373: LD_ADDR_VAR 0 6
43377: PUSH
43378: LD_VAR 0 2
43382: PUSH
43383: LD_VAR 0 3
43387: PUSH
43388: LD_VAR 0 4
43392: PUSH
43393: LD_VAR 0 5
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// end ;
43404: LD_VAR 0 6
43408: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43409: LD_INT 0
43411: PPUSH
// if not chassis or not engine then
43412: LD_VAR 0 1
43416: NOT
43417: PUSH
43418: LD_VAR 0 2
43422: NOT
43423: OR
43424: IFFALSE 43428
// exit ;
43426: GO 43624
// case engine of engine_solar :
43428: LD_VAR 0 2
43432: PUSH
43433: LD_INT 2
43435: DOUBLE
43436: EQUAL
43437: IFTRUE 43441
43439: GO 43479
43441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43442: LD_ADDR_VAR 0 3
43446: PUSH
43447: LD_INT 11
43449: PUSH
43450: LD_INT 12
43452: PUSH
43453: LD_INT 13
43455: PUSH
43456: LD_INT 14
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
43477: GO 43608
43479: LD_INT 1
43481: DOUBLE
43482: EQUAL
43483: IFTRUE 43487
43485: GO 43549
43487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_INT 11
43495: PUSH
43496: LD_INT 12
43498: PUSH
43499: LD_INT 13
43501: PUSH
43502: LD_INT 14
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 3
43513: PUSH
43514: LD_INT 4
43516: PUSH
43517: LD_INT 5
43519: PUSH
43520: LD_INT 21
43522: PUSH
43523: LD_INT 23
43525: PUSH
43526: LD_INT 22
43528: PUSH
43529: LD_INT 24
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
43547: GO 43608
43549: LD_INT 3
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43557
43555: GO 43607
43557: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43558: LD_ADDR_VAR 0 3
43562: PUSH
43563: LD_INT 13
43565: PUSH
43566: LD_INT 14
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: LD_INT 4
43577: PUSH
43578: LD_INT 5
43580: PUSH
43581: LD_INT 21
43583: PUSH
43584: LD_INT 22
43586: PUSH
43587: LD_INT 23
43589: PUSH
43590: LD_INT 24
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: ST_TO_ADDR
43605: GO 43608
43607: POP
// result := ( chassis in result ) ;
43608: LD_ADDR_VAR 0 3
43612: PUSH
43613: LD_VAR 0 1
43617: PUSH
43618: LD_VAR 0 3
43622: IN
43623: ST_TO_ADDR
// end ;
43624: LD_VAR 0 3
43628: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43629: LD_INT 0
43631: PPUSH
// if not chassis or not weapon then
43632: LD_VAR 0 1
43636: NOT
43637: PUSH
43638: LD_VAR 0 2
43642: NOT
43643: OR
43644: IFFALSE 43648
// exit ;
43646: GO 44708
// case weapon of us_machine_gun :
43648: LD_VAR 0 2
43652: PUSH
43653: LD_INT 2
43655: DOUBLE
43656: EQUAL
43657: IFTRUE 43661
43659: GO 43691
43661: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43662: LD_ADDR_VAR 0 3
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: LD_INT 4
43678: PUSH
43679: LD_INT 5
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
43689: GO 44692
43691: LD_INT 3
43693: DOUBLE
43694: EQUAL
43695: IFTRUE 43699
43697: GO 43729
43699: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: LD_INT 4
43716: PUSH
43717: LD_INT 5
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: ST_TO_ADDR
43727: GO 44692
43729: LD_INT 11
43731: DOUBLE
43732: EQUAL
43733: IFTRUE 43737
43735: GO 43767
43737: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43738: LD_ADDR_VAR 0 3
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: LD_INT 4
43754: PUSH
43755: LD_INT 5
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
43765: GO 44692
43767: LD_INT 4
43769: DOUBLE
43770: EQUAL
43771: IFTRUE 43775
43773: GO 43801
43775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43776: LD_ADDR_VAR 0 3
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: LD_INT 4
43789: PUSH
43790: LD_INT 5
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: ST_TO_ADDR
43799: GO 44692
43801: LD_INT 5
43803: DOUBLE
43804: EQUAL
43805: IFTRUE 43809
43807: GO 43835
43809: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43810: LD_ADDR_VAR 0 3
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: LD_INT 4
43823: PUSH
43824: LD_INT 5
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
43833: GO 44692
43835: LD_INT 9
43837: DOUBLE
43838: EQUAL
43839: IFTRUE 43843
43841: GO 43869
43843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43844: LD_ADDR_VAR 0 3
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: LD_INT 3
43854: PUSH
43855: LD_INT 4
43857: PUSH
43858: LD_INT 5
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: ST_TO_ADDR
43867: GO 44692
43869: LD_INT 7
43871: DOUBLE
43872: EQUAL
43873: IFTRUE 43877
43875: GO 43903
43877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43878: LD_ADDR_VAR 0 3
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: LD_INT 4
43891: PUSH
43892: LD_INT 5
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: ST_TO_ADDR
43901: GO 44692
43903: LD_INT 12
43905: DOUBLE
43906: EQUAL
43907: IFTRUE 43911
43909: GO 43937
43911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43912: LD_ADDR_VAR 0 3
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 3
43922: PUSH
43923: LD_INT 4
43925: PUSH
43926: LD_INT 5
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
43935: GO 44692
43937: LD_INT 13
43939: DOUBLE
43940: EQUAL
43941: IFTRUE 43945
43943: GO 43971
43945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43946: LD_ADDR_VAR 0 3
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 3
43956: PUSH
43957: LD_INT 4
43959: PUSH
43960: LD_INT 5
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: ST_TO_ADDR
43969: GO 44692
43971: LD_INT 14
43973: DOUBLE
43974: EQUAL
43975: IFTRUE 43979
43977: GO 43997
43979: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43980: LD_ADDR_VAR 0 3
43984: PUSH
43985: LD_INT 4
43987: PUSH
43988: LD_INT 5
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: ST_TO_ADDR
43995: GO 44692
43997: LD_INT 6
43999: DOUBLE
44000: EQUAL
44001: IFTRUE 44005
44003: GO 44023
44005: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44006: LD_ADDR_VAR 0 3
44010: PUSH
44011: LD_INT 4
44013: PUSH
44014: LD_INT 5
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: ST_TO_ADDR
44021: GO 44692
44023: LD_INT 10
44025: DOUBLE
44026: EQUAL
44027: IFTRUE 44031
44029: GO 44049
44031: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44032: LD_ADDR_VAR 0 3
44036: PUSH
44037: LD_INT 4
44039: PUSH
44040: LD_INT 5
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: ST_TO_ADDR
44047: GO 44692
44049: LD_INT 22
44051: DOUBLE
44052: EQUAL
44053: IFTRUE 44057
44055: GO 44083
44057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44058: LD_ADDR_VAR 0 3
44062: PUSH
44063: LD_INT 11
44065: PUSH
44066: LD_INT 12
44068: PUSH
44069: LD_INT 13
44071: PUSH
44072: LD_INT 14
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
44081: GO 44692
44083: LD_INT 23
44085: DOUBLE
44086: EQUAL
44087: IFTRUE 44091
44089: GO 44117
44091: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44092: LD_ADDR_VAR 0 3
44096: PUSH
44097: LD_INT 11
44099: PUSH
44100: LD_INT 12
44102: PUSH
44103: LD_INT 13
44105: PUSH
44106: LD_INT 14
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: ST_TO_ADDR
44115: GO 44692
44117: LD_INT 24
44119: DOUBLE
44120: EQUAL
44121: IFTRUE 44125
44123: GO 44151
44125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44126: LD_ADDR_VAR 0 3
44130: PUSH
44131: LD_INT 11
44133: PUSH
44134: LD_INT 12
44136: PUSH
44137: LD_INT 13
44139: PUSH
44140: LD_INT 14
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: ST_TO_ADDR
44149: GO 44692
44151: LD_INT 30
44153: DOUBLE
44154: EQUAL
44155: IFTRUE 44159
44157: GO 44185
44159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44160: LD_ADDR_VAR 0 3
44164: PUSH
44165: LD_INT 11
44167: PUSH
44168: LD_INT 12
44170: PUSH
44171: LD_INT 13
44173: PUSH
44174: LD_INT 14
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: ST_TO_ADDR
44183: GO 44692
44185: LD_INT 25
44187: DOUBLE
44188: EQUAL
44189: IFTRUE 44193
44191: GO 44211
44193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44194: LD_ADDR_VAR 0 3
44198: PUSH
44199: LD_INT 13
44201: PUSH
44202: LD_INT 14
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: ST_TO_ADDR
44209: GO 44692
44211: LD_INT 27
44213: DOUBLE
44214: EQUAL
44215: IFTRUE 44219
44217: GO 44237
44219: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44220: LD_ADDR_VAR 0 3
44224: PUSH
44225: LD_INT 13
44227: PUSH
44228: LD_INT 14
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: ST_TO_ADDR
44235: GO 44692
44237: LD_INT 92
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44245
44243: GO 44271
44245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44246: LD_ADDR_VAR 0 3
44250: PUSH
44251: LD_INT 11
44253: PUSH
44254: LD_INT 12
44256: PUSH
44257: LD_INT 13
44259: PUSH
44260: LD_INT 14
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
44269: GO 44692
44271: LD_INT 28
44273: DOUBLE
44274: EQUAL
44275: IFTRUE 44279
44277: GO 44297
44279: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44280: LD_ADDR_VAR 0 3
44284: PUSH
44285: LD_INT 13
44287: PUSH
44288: LD_INT 14
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: ST_TO_ADDR
44295: GO 44692
44297: LD_INT 29
44299: DOUBLE
44300: EQUAL
44301: IFTRUE 44305
44303: GO 44323
44305: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44306: LD_ADDR_VAR 0 3
44310: PUSH
44311: LD_INT 13
44313: PUSH
44314: LD_INT 14
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: ST_TO_ADDR
44321: GO 44692
44323: LD_INT 31
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44331
44329: GO 44349
44331: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_INT 13
44339: PUSH
44340: LD_INT 14
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: ST_TO_ADDR
44347: GO 44692
44349: LD_INT 26
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44357
44355: GO 44375
44357: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44358: LD_ADDR_VAR 0 3
44362: PUSH
44363: LD_INT 13
44365: PUSH
44366: LD_INT 14
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: ST_TO_ADDR
44373: GO 44692
44375: LD_INT 42
44377: DOUBLE
44378: EQUAL
44379: IFTRUE 44383
44381: GO 44409
44383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: LD_INT 21
44391: PUSH
44392: LD_INT 22
44394: PUSH
44395: LD_INT 23
44397: PUSH
44398: LD_INT 24
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
44407: GO 44692
44409: LD_INT 43
44411: DOUBLE
44412: EQUAL
44413: IFTRUE 44417
44415: GO 44443
44417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_INT 21
44425: PUSH
44426: LD_INT 22
44428: PUSH
44429: LD_INT 23
44431: PUSH
44432: LD_INT 24
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: ST_TO_ADDR
44441: GO 44692
44443: LD_INT 44
44445: DOUBLE
44446: EQUAL
44447: IFTRUE 44451
44449: GO 44477
44451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44452: LD_ADDR_VAR 0 3
44456: PUSH
44457: LD_INT 21
44459: PUSH
44460: LD_INT 22
44462: PUSH
44463: LD_INT 23
44465: PUSH
44466: LD_INT 24
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: ST_TO_ADDR
44475: GO 44692
44477: LD_INT 45
44479: DOUBLE
44480: EQUAL
44481: IFTRUE 44485
44483: GO 44511
44485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44486: LD_ADDR_VAR 0 3
44490: PUSH
44491: LD_INT 21
44493: PUSH
44494: LD_INT 22
44496: PUSH
44497: LD_INT 23
44499: PUSH
44500: LD_INT 24
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
44509: GO 44692
44511: LD_INT 49
44513: DOUBLE
44514: EQUAL
44515: IFTRUE 44519
44517: GO 44545
44519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44520: LD_ADDR_VAR 0 3
44524: PUSH
44525: LD_INT 21
44527: PUSH
44528: LD_INT 22
44530: PUSH
44531: LD_INT 23
44533: PUSH
44534: LD_INT 24
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: ST_TO_ADDR
44543: GO 44692
44545: LD_INT 51
44547: DOUBLE
44548: EQUAL
44549: IFTRUE 44553
44551: GO 44579
44553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44554: LD_ADDR_VAR 0 3
44558: PUSH
44559: LD_INT 21
44561: PUSH
44562: LD_INT 22
44564: PUSH
44565: LD_INT 23
44567: PUSH
44568: LD_INT 24
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: ST_TO_ADDR
44577: GO 44692
44579: LD_INT 52
44581: DOUBLE
44582: EQUAL
44583: IFTRUE 44587
44585: GO 44613
44587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44588: LD_ADDR_VAR 0 3
44592: PUSH
44593: LD_INT 21
44595: PUSH
44596: LD_INT 22
44598: PUSH
44599: LD_INT 23
44601: PUSH
44602: LD_INT 24
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: ST_TO_ADDR
44611: GO 44692
44613: LD_INT 53
44615: DOUBLE
44616: EQUAL
44617: IFTRUE 44621
44619: GO 44639
44621: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44622: LD_ADDR_VAR 0 3
44626: PUSH
44627: LD_INT 23
44629: PUSH
44630: LD_INT 24
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: ST_TO_ADDR
44637: GO 44692
44639: LD_INT 46
44641: DOUBLE
44642: EQUAL
44643: IFTRUE 44647
44645: GO 44665
44647: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44648: LD_ADDR_VAR 0 3
44652: PUSH
44653: LD_INT 23
44655: PUSH
44656: LD_INT 24
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: ST_TO_ADDR
44663: GO 44692
44665: LD_INT 47
44667: DOUBLE
44668: EQUAL
44669: IFTRUE 44673
44671: GO 44691
44673: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44674: LD_ADDR_VAR 0 3
44678: PUSH
44679: LD_INT 23
44681: PUSH
44682: LD_INT 24
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: ST_TO_ADDR
44689: GO 44692
44691: POP
// result := ( chassis in result ) ;
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_VAR 0 1
44701: PUSH
44702: LD_VAR 0 3
44706: IN
44707: ST_TO_ADDR
// end ;
44708: LD_VAR 0 3
44712: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44713: LD_INT 0
44715: PPUSH
44716: PPUSH
44717: PPUSH
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
// result := array ;
44722: LD_ADDR_VAR 0 5
44726: PUSH
44727: LD_VAR 0 1
44731: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44732: LD_VAR 0 1
44736: NOT
44737: PUSH
44738: LD_VAR 0 2
44742: NOT
44743: OR
44744: PUSH
44745: LD_VAR 0 3
44749: NOT
44750: OR
44751: PUSH
44752: LD_VAR 0 2
44756: PUSH
44757: LD_VAR 0 1
44761: GREATER
44762: OR
44763: PUSH
44764: LD_VAR 0 3
44768: PUSH
44769: LD_VAR 0 1
44773: GREATER
44774: OR
44775: IFFALSE 44779
// exit ;
44777: GO 45075
// if direction then
44779: LD_VAR 0 4
44783: IFFALSE 44847
// begin d := 1 ;
44785: LD_ADDR_VAR 0 9
44789: PUSH
44790: LD_INT 1
44792: ST_TO_ADDR
// if i_from > i_to then
44793: LD_VAR 0 2
44797: PUSH
44798: LD_VAR 0 3
44802: GREATER
44803: IFFALSE 44829
// length := ( array - i_from ) + i_to else
44805: LD_ADDR_VAR 0 11
44809: PUSH
44810: LD_VAR 0 1
44814: PUSH
44815: LD_VAR 0 2
44819: MINUS
44820: PUSH
44821: LD_VAR 0 3
44825: PLUS
44826: ST_TO_ADDR
44827: GO 44845
// length := i_to - i_from ;
44829: LD_ADDR_VAR 0 11
44833: PUSH
44834: LD_VAR 0 3
44838: PUSH
44839: LD_VAR 0 2
44843: MINUS
44844: ST_TO_ADDR
// end else
44845: GO 44908
// begin d := - 1 ;
44847: LD_ADDR_VAR 0 9
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: ST_TO_ADDR
// if i_from > i_to then
44856: LD_VAR 0 2
44860: PUSH
44861: LD_VAR 0 3
44865: GREATER
44866: IFFALSE 44886
// length := i_from - i_to else
44868: LD_ADDR_VAR 0 11
44872: PUSH
44873: LD_VAR 0 2
44877: PUSH
44878: LD_VAR 0 3
44882: MINUS
44883: ST_TO_ADDR
44884: GO 44908
// length := ( array - i_to ) + i_from ;
44886: LD_ADDR_VAR 0 11
44890: PUSH
44891: LD_VAR 0 1
44895: PUSH
44896: LD_VAR 0 3
44900: MINUS
44901: PUSH
44902: LD_VAR 0 2
44906: PLUS
44907: ST_TO_ADDR
// end ; if not length then
44908: LD_VAR 0 11
44912: NOT
44913: IFFALSE 44917
// exit ;
44915: GO 45075
// tmp := array ;
44917: LD_ADDR_VAR 0 10
44921: PUSH
44922: LD_VAR 0 1
44926: ST_TO_ADDR
// for i = 1 to length do
44927: LD_ADDR_VAR 0 6
44931: PUSH
44932: DOUBLE
44933: LD_INT 1
44935: DEC
44936: ST_TO_ADDR
44937: LD_VAR 0 11
44941: PUSH
44942: FOR_TO
44943: IFFALSE 45063
// begin for j = 1 to array do
44945: LD_ADDR_VAR 0 7
44949: PUSH
44950: DOUBLE
44951: LD_INT 1
44953: DEC
44954: ST_TO_ADDR
44955: LD_VAR 0 1
44959: PUSH
44960: FOR_TO
44961: IFFALSE 45049
// begin k := j + d ;
44963: LD_ADDR_VAR 0 8
44967: PUSH
44968: LD_VAR 0 7
44972: PUSH
44973: LD_VAR 0 9
44977: PLUS
44978: ST_TO_ADDR
// if k > array then
44979: LD_VAR 0 8
44983: PUSH
44984: LD_VAR 0 1
44988: GREATER
44989: IFFALSE 44999
// k := 1 ;
44991: LD_ADDR_VAR 0 8
44995: PUSH
44996: LD_INT 1
44998: ST_TO_ADDR
// if not k then
44999: LD_VAR 0 8
45003: NOT
45004: IFFALSE 45016
// k := array ;
45006: LD_ADDR_VAR 0 8
45010: PUSH
45011: LD_VAR 0 1
45015: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45016: LD_ADDR_VAR 0 10
45020: PUSH
45021: LD_VAR 0 10
45025: PPUSH
45026: LD_VAR 0 8
45030: PPUSH
45031: LD_VAR 0 1
45035: PUSH
45036: LD_VAR 0 7
45040: ARRAY
45041: PPUSH
45042: CALL_OW 1
45046: ST_TO_ADDR
// end ;
45047: GO 44960
45049: POP
45050: POP
// array := tmp ;
45051: LD_ADDR_VAR 0 1
45055: PUSH
45056: LD_VAR 0 10
45060: ST_TO_ADDR
// end ;
45061: GO 44942
45063: POP
45064: POP
// result := array ;
45065: LD_ADDR_VAR 0 5
45069: PUSH
45070: LD_VAR 0 1
45074: ST_TO_ADDR
// end ;
45075: LD_VAR 0 5
45079: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45080: LD_INT 0
45082: PPUSH
45083: PPUSH
// result := 0 ;
45084: LD_ADDR_VAR 0 3
45088: PUSH
45089: LD_INT 0
45091: ST_TO_ADDR
// if not array or not value in array then
45092: LD_VAR 0 1
45096: NOT
45097: PUSH
45098: LD_VAR 0 2
45102: PUSH
45103: LD_VAR 0 1
45107: IN
45108: NOT
45109: OR
45110: IFFALSE 45114
// exit ;
45112: GO 45168
// for i = 1 to array do
45114: LD_ADDR_VAR 0 4
45118: PUSH
45119: DOUBLE
45120: LD_INT 1
45122: DEC
45123: ST_TO_ADDR
45124: LD_VAR 0 1
45128: PUSH
45129: FOR_TO
45130: IFFALSE 45166
// if value = array [ i ] then
45132: LD_VAR 0 2
45136: PUSH
45137: LD_VAR 0 1
45141: PUSH
45142: LD_VAR 0 4
45146: ARRAY
45147: EQUAL
45148: IFFALSE 45164
// begin result := i ;
45150: LD_ADDR_VAR 0 3
45154: PUSH
45155: LD_VAR 0 4
45159: ST_TO_ADDR
// exit ;
45160: POP
45161: POP
45162: GO 45168
// end ;
45164: GO 45129
45166: POP
45167: POP
// end ;
45168: LD_VAR 0 3
45172: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45173: LD_INT 0
45175: PPUSH
// vc_chassis := chassis ;
45176: LD_ADDR_OWVAR 37
45180: PUSH
45181: LD_VAR 0 1
45185: ST_TO_ADDR
// vc_engine := engine ;
45186: LD_ADDR_OWVAR 39
45190: PUSH
45191: LD_VAR 0 2
45195: ST_TO_ADDR
// vc_control := control ;
45196: LD_ADDR_OWVAR 38
45200: PUSH
45201: LD_VAR 0 3
45205: ST_TO_ADDR
// vc_weapon := weapon ;
45206: LD_ADDR_OWVAR 40
45210: PUSH
45211: LD_VAR 0 4
45215: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45216: LD_ADDR_OWVAR 41
45220: PUSH
45221: LD_VAR 0 5
45225: ST_TO_ADDR
// end ;
45226: LD_VAR 0 6
45230: RET
// export function WantPlant ( unit ) ; var task ; begin
45231: LD_INT 0
45233: PPUSH
45234: PPUSH
// result := false ;
45235: LD_ADDR_VAR 0 2
45239: PUSH
45240: LD_INT 0
45242: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45243: LD_ADDR_VAR 0 3
45247: PUSH
45248: LD_VAR 0 1
45252: PPUSH
45253: CALL_OW 437
45257: ST_TO_ADDR
// if task then
45258: LD_VAR 0 3
45262: IFFALSE 45290
// if task [ 1 ] [ 1 ] = p then
45264: LD_VAR 0 3
45268: PUSH
45269: LD_INT 1
45271: ARRAY
45272: PUSH
45273: LD_INT 1
45275: ARRAY
45276: PUSH
45277: LD_STRING p
45279: EQUAL
45280: IFFALSE 45290
// result := true ;
45282: LD_ADDR_VAR 0 2
45286: PUSH
45287: LD_INT 1
45289: ST_TO_ADDR
// end ;
45290: LD_VAR 0 2
45294: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45295: LD_INT 0
45297: PPUSH
45298: PPUSH
45299: PPUSH
45300: PPUSH
// if pos < 1 then
45301: LD_VAR 0 2
45305: PUSH
45306: LD_INT 1
45308: LESS
45309: IFFALSE 45313
// exit ;
45311: GO 45616
// if pos = 1 then
45313: LD_VAR 0 2
45317: PUSH
45318: LD_INT 1
45320: EQUAL
45321: IFFALSE 45354
// result := Replace ( arr , pos [ 1 ] , value ) else
45323: LD_ADDR_VAR 0 4
45327: PUSH
45328: LD_VAR 0 1
45332: PPUSH
45333: LD_VAR 0 2
45337: PUSH
45338: LD_INT 1
45340: ARRAY
45341: PPUSH
45342: LD_VAR 0 3
45346: PPUSH
45347: CALL_OW 1
45351: ST_TO_ADDR
45352: GO 45616
// begin tmp := arr ;
45354: LD_ADDR_VAR 0 6
45358: PUSH
45359: LD_VAR 0 1
45363: ST_TO_ADDR
// s_arr := [ tmp ] ;
45364: LD_ADDR_VAR 0 7
45368: PUSH
45369: LD_VAR 0 6
45373: PUSH
45374: EMPTY
45375: LIST
45376: ST_TO_ADDR
// for i = 1 to pos - 1 do
45377: LD_ADDR_VAR 0 5
45381: PUSH
45382: DOUBLE
45383: LD_INT 1
45385: DEC
45386: ST_TO_ADDR
45387: LD_VAR 0 2
45391: PUSH
45392: LD_INT 1
45394: MINUS
45395: PUSH
45396: FOR_TO
45397: IFFALSE 45442
// begin tmp := tmp [ pos [ i ] ] ;
45399: LD_ADDR_VAR 0 6
45403: PUSH
45404: LD_VAR 0 6
45408: PUSH
45409: LD_VAR 0 2
45413: PUSH
45414: LD_VAR 0 5
45418: ARRAY
45419: ARRAY
45420: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45421: LD_ADDR_VAR 0 7
45425: PUSH
45426: LD_VAR 0 7
45430: PUSH
45431: LD_VAR 0 6
45435: PUSH
45436: EMPTY
45437: LIST
45438: ADD
45439: ST_TO_ADDR
// end ;
45440: GO 45396
45442: POP
45443: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45444: LD_ADDR_VAR 0 6
45448: PUSH
45449: LD_VAR 0 6
45453: PPUSH
45454: LD_VAR 0 2
45458: PUSH
45459: LD_VAR 0 2
45463: ARRAY
45464: PPUSH
45465: LD_VAR 0 3
45469: PPUSH
45470: CALL_OW 1
45474: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45475: LD_ADDR_VAR 0 7
45479: PUSH
45480: LD_VAR 0 7
45484: PPUSH
45485: LD_VAR 0 7
45489: PPUSH
45490: LD_VAR 0 6
45494: PPUSH
45495: CALL_OW 1
45499: ST_TO_ADDR
// for i = s_arr downto 2 do
45500: LD_ADDR_VAR 0 5
45504: PUSH
45505: DOUBLE
45506: LD_VAR 0 7
45510: INC
45511: ST_TO_ADDR
45512: LD_INT 2
45514: PUSH
45515: FOR_DOWNTO
45516: IFFALSE 45600
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45518: LD_ADDR_VAR 0 6
45522: PUSH
45523: LD_VAR 0 7
45527: PUSH
45528: LD_VAR 0 5
45532: PUSH
45533: LD_INT 1
45535: MINUS
45536: ARRAY
45537: PPUSH
45538: LD_VAR 0 2
45542: PUSH
45543: LD_VAR 0 5
45547: PUSH
45548: LD_INT 1
45550: MINUS
45551: ARRAY
45552: PPUSH
45553: LD_VAR 0 7
45557: PUSH
45558: LD_VAR 0 5
45562: ARRAY
45563: PPUSH
45564: CALL_OW 1
45568: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45569: LD_ADDR_VAR 0 7
45573: PUSH
45574: LD_VAR 0 7
45578: PPUSH
45579: LD_VAR 0 5
45583: PUSH
45584: LD_INT 1
45586: MINUS
45587: PPUSH
45588: LD_VAR 0 6
45592: PPUSH
45593: CALL_OW 1
45597: ST_TO_ADDR
// end ;
45598: GO 45515
45600: POP
45601: POP
// result := s_arr [ 1 ] ;
45602: LD_ADDR_VAR 0 4
45606: PUSH
45607: LD_VAR 0 7
45611: PUSH
45612: LD_INT 1
45614: ARRAY
45615: ST_TO_ADDR
// end ; end ;
45616: LD_VAR 0 4
45620: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45621: LD_INT 0
45623: PPUSH
45624: PPUSH
// if not list then
45625: LD_VAR 0 1
45629: NOT
45630: IFFALSE 45634
// exit ;
45632: GO 45725
// i := list [ pos1 ] ;
45634: LD_ADDR_VAR 0 5
45638: PUSH
45639: LD_VAR 0 1
45643: PUSH
45644: LD_VAR 0 2
45648: ARRAY
45649: ST_TO_ADDR
// if not i then
45650: LD_VAR 0 5
45654: NOT
45655: IFFALSE 45659
// exit ;
45657: GO 45725
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45659: LD_ADDR_VAR 0 1
45663: PUSH
45664: LD_VAR 0 1
45668: PPUSH
45669: LD_VAR 0 2
45673: PPUSH
45674: LD_VAR 0 1
45678: PUSH
45679: LD_VAR 0 3
45683: ARRAY
45684: PPUSH
45685: CALL_OW 1
45689: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45690: LD_ADDR_VAR 0 1
45694: PUSH
45695: LD_VAR 0 1
45699: PPUSH
45700: LD_VAR 0 3
45704: PPUSH
45705: LD_VAR 0 5
45709: PPUSH
45710: CALL_OW 1
45714: ST_TO_ADDR
// result := list ;
45715: LD_ADDR_VAR 0 4
45719: PUSH
45720: LD_VAR 0 1
45724: ST_TO_ADDR
// end ;
45725: LD_VAR 0 4
45729: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45730: LD_INT 0
45732: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45733: LD_ADDR_VAR 0 5
45737: PUSH
45738: LD_VAR 0 1
45742: PPUSH
45743: CALL_OW 250
45747: PPUSH
45748: LD_VAR 0 1
45752: PPUSH
45753: CALL_OW 251
45757: PPUSH
45758: LD_VAR 0 2
45762: PPUSH
45763: LD_VAR 0 3
45767: PPUSH
45768: LD_VAR 0 4
45772: PPUSH
45773: CALL 46151 0 5
45777: ST_TO_ADDR
// end ;
45778: LD_VAR 0 5
45782: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45783: LD_INT 0
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
// if not list or not unit then
45789: LD_VAR 0 2
45793: NOT
45794: PUSH
45795: LD_VAR 0 1
45799: NOT
45800: OR
45801: IFFALSE 45805
// exit ;
45803: GO 46146
// result := [ ] ;
45805: LD_ADDR_VAR 0 5
45809: PUSH
45810: EMPTY
45811: ST_TO_ADDR
// for i in list do
45812: LD_ADDR_VAR 0 6
45816: PUSH
45817: LD_VAR 0 2
45821: PUSH
45822: FOR_IN
45823: IFFALSE 46041
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45825: LD_ADDR_VAR 0 8
45829: PUSH
45830: LD_VAR 0 1
45834: PPUSH
45835: LD_VAR 0 6
45839: PUSH
45840: LD_INT 1
45842: ARRAY
45843: PPUSH
45844: LD_VAR 0 6
45848: PUSH
45849: LD_INT 2
45851: ARRAY
45852: PPUSH
45853: CALL_OW 297
45857: ST_TO_ADDR
// if not Count ( result ) then
45858: LD_VAR 0 5
45862: PPUSH
45863: CALL 42435 0 1
45867: NOT
45868: IFFALSE 45901
// begin result := Join ( result , [ i , tmp ] ) ;
45870: LD_ADDR_VAR 0 5
45874: PUSH
45875: LD_VAR 0 5
45879: PPUSH
45880: LD_VAR 0 6
45884: PUSH
45885: LD_VAR 0 8
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PPUSH
45894: CALL 78035 0 2
45898: ST_TO_ADDR
// continue ;
45899: GO 45822
// end ; if result [ result ] [ 2 ] <= tmp then
45901: LD_VAR 0 5
45905: PUSH
45906: LD_VAR 0 5
45910: ARRAY
45911: PUSH
45912: LD_INT 2
45914: ARRAY
45915: PUSH
45916: LD_VAR 0 8
45920: LESSEQUAL
45921: IFFALSE 45954
// result := Join ( result , [ i , tmp ] ) else
45923: LD_ADDR_VAR 0 5
45927: PUSH
45928: LD_VAR 0 5
45932: PPUSH
45933: LD_VAR 0 6
45937: PUSH
45938: LD_VAR 0 8
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PPUSH
45947: CALL 78035 0 2
45951: ST_TO_ADDR
45952: GO 46039
// begin for j := 1 to Count ( result ) do
45954: LD_ADDR_VAR 0 7
45958: PUSH
45959: DOUBLE
45960: LD_INT 1
45962: DEC
45963: ST_TO_ADDR
45964: LD_VAR 0 5
45968: PPUSH
45969: CALL 42435 0 1
45973: PUSH
45974: FOR_TO
45975: IFFALSE 46037
// begin if tmp < result [ j ] [ 2 ] then
45977: LD_VAR 0 8
45981: PUSH
45982: LD_VAR 0 5
45986: PUSH
45987: LD_VAR 0 7
45991: ARRAY
45992: PUSH
45993: LD_INT 2
45995: ARRAY
45996: LESS
45997: IFFALSE 46035
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45999: LD_ADDR_VAR 0 5
46003: PUSH
46004: LD_VAR 0 5
46008: PPUSH
46009: LD_VAR 0 7
46013: PPUSH
46014: LD_VAR 0 6
46018: PUSH
46019: LD_VAR 0 8
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PPUSH
46028: CALL_OW 2
46032: ST_TO_ADDR
// break ;
46033: GO 46037
// end ; end ;
46035: GO 45974
46037: POP
46038: POP
// end ; end ;
46039: GO 45822
46041: POP
46042: POP
// if result and not asc then
46043: LD_VAR 0 5
46047: PUSH
46048: LD_VAR 0 3
46052: NOT
46053: AND
46054: IFFALSE 46071
// result := ReverseArray ( result ) ;
46056: LD_ADDR_VAR 0 5
46060: PUSH
46061: LD_VAR 0 5
46065: PPUSH
46066: CALL 73311 0 1
46070: ST_TO_ADDR
// tmp := [ ] ;
46071: LD_ADDR_VAR 0 8
46075: PUSH
46076: EMPTY
46077: ST_TO_ADDR
// if mode then
46078: LD_VAR 0 4
46082: IFFALSE 46146
// begin for i := 1 to result do
46084: LD_ADDR_VAR 0 6
46088: PUSH
46089: DOUBLE
46090: LD_INT 1
46092: DEC
46093: ST_TO_ADDR
46094: LD_VAR 0 5
46098: PUSH
46099: FOR_TO
46100: IFFALSE 46134
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46102: LD_ADDR_VAR 0 8
46106: PUSH
46107: LD_VAR 0 8
46111: PPUSH
46112: LD_VAR 0 5
46116: PUSH
46117: LD_VAR 0 6
46121: ARRAY
46122: PUSH
46123: LD_INT 1
46125: ARRAY
46126: PPUSH
46127: CALL 78035 0 2
46131: ST_TO_ADDR
46132: GO 46099
46134: POP
46135: POP
// result := tmp ;
46136: LD_ADDR_VAR 0 5
46140: PUSH
46141: LD_VAR 0 8
46145: ST_TO_ADDR
// end ; end ;
46146: LD_VAR 0 5
46150: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46151: LD_INT 0
46153: PPUSH
46154: PPUSH
46155: PPUSH
46156: PPUSH
// if not list then
46157: LD_VAR 0 3
46161: NOT
46162: IFFALSE 46166
// exit ;
46164: GO 46554
// result := [ ] ;
46166: LD_ADDR_VAR 0 6
46170: PUSH
46171: EMPTY
46172: ST_TO_ADDR
// for i in list do
46173: LD_ADDR_VAR 0 7
46177: PUSH
46178: LD_VAR 0 3
46182: PUSH
46183: FOR_IN
46184: IFFALSE 46386
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46186: LD_ADDR_VAR 0 9
46190: PUSH
46191: LD_VAR 0 7
46195: PPUSH
46196: LD_VAR 0 1
46200: PPUSH
46201: LD_VAR 0 2
46205: PPUSH
46206: CALL_OW 297
46210: ST_TO_ADDR
// if not result then
46211: LD_VAR 0 6
46215: NOT
46216: IFFALSE 46242
// result := [ [ i , tmp ] ] else
46218: LD_ADDR_VAR 0 6
46222: PUSH
46223: LD_VAR 0 7
46227: PUSH
46228: LD_VAR 0 9
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: ST_TO_ADDR
46240: GO 46384
// begin if result [ result ] [ 2 ] < tmp then
46242: LD_VAR 0 6
46246: PUSH
46247: LD_VAR 0 6
46251: ARRAY
46252: PUSH
46253: LD_INT 2
46255: ARRAY
46256: PUSH
46257: LD_VAR 0 9
46261: LESS
46262: IFFALSE 46304
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46264: LD_ADDR_VAR 0 6
46268: PUSH
46269: LD_VAR 0 6
46273: PPUSH
46274: LD_VAR 0 6
46278: PUSH
46279: LD_INT 1
46281: PLUS
46282: PPUSH
46283: LD_VAR 0 7
46287: PUSH
46288: LD_VAR 0 9
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PPUSH
46297: CALL_OW 2
46301: ST_TO_ADDR
46302: GO 46384
// for j = 1 to result do
46304: LD_ADDR_VAR 0 8
46308: PUSH
46309: DOUBLE
46310: LD_INT 1
46312: DEC
46313: ST_TO_ADDR
46314: LD_VAR 0 6
46318: PUSH
46319: FOR_TO
46320: IFFALSE 46382
// begin if tmp < result [ j ] [ 2 ] then
46322: LD_VAR 0 9
46326: PUSH
46327: LD_VAR 0 6
46331: PUSH
46332: LD_VAR 0 8
46336: ARRAY
46337: PUSH
46338: LD_INT 2
46340: ARRAY
46341: LESS
46342: IFFALSE 46380
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46344: LD_ADDR_VAR 0 6
46348: PUSH
46349: LD_VAR 0 6
46353: PPUSH
46354: LD_VAR 0 8
46358: PPUSH
46359: LD_VAR 0 7
46363: PUSH
46364: LD_VAR 0 9
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PPUSH
46373: CALL_OW 2
46377: ST_TO_ADDR
// break ;
46378: GO 46382
// end ; end ;
46380: GO 46319
46382: POP
46383: POP
// end ; end ;
46384: GO 46183
46386: POP
46387: POP
// if result and not asc then
46388: LD_VAR 0 6
46392: PUSH
46393: LD_VAR 0 4
46397: NOT
46398: AND
46399: IFFALSE 46474
// begin tmp := result ;
46401: LD_ADDR_VAR 0 9
46405: PUSH
46406: LD_VAR 0 6
46410: ST_TO_ADDR
// for i = tmp downto 1 do
46411: LD_ADDR_VAR 0 7
46415: PUSH
46416: DOUBLE
46417: LD_VAR 0 9
46421: INC
46422: ST_TO_ADDR
46423: LD_INT 1
46425: PUSH
46426: FOR_DOWNTO
46427: IFFALSE 46472
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46429: LD_ADDR_VAR 0 6
46433: PUSH
46434: LD_VAR 0 6
46438: PPUSH
46439: LD_VAR 0 9
46443: PUSH
46444: LD_VAR 0 7
46448: MINUS
46449: PUSH
46450: LD_INT 1
46452: PLUS
46453: PPUSH
46454: LD_VAR 0 9
46458: PUSH
46459: LD_VAR 0 7
46463: ARRAY
46464: PPUSH
46465: CALL_OW 1
46469: ST_TO_ADDR
46470: GO 46426
46472: POP
46473: POP
// end ; tmp := [ ] ;
46474: LD_ADDR_VAR 0 9
46478: PUSH
46479: EMPTY
46480: ST_TO_ADDR
// if mode then
46481: LD_VAR 0 5
46485: IFFALSE 46554
// begin for i = 1 to result do
46487: LD_ADDR_VAR 0 7
46491: PUSH
46492: DOUBLE
46493: LD_INT 1
46495: DEC
46496: ST_TO_ADDR
46497: LD_VAR 0 6
46501: PUSH
46502: FOR_TO
46503: IFFALSE 46542
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46505: LD_ADDR_VAR 0 9
46509: PUSH
46510: LD_VAR 0 9
46514: PPUSH
46515: LD_VAR 0 7
46519: PPUSH
46520: LD_VAR 0 6
46524: PUSH
46525: LD_VAR 0 7
46529: ARRAY
46530: PUSH
46531: LD_INT 1
46533: ARRAY
46534: PPUSH
46535: CALL_OW 1
46539: ST_TO_ADDR
46540: GO 46502
46542: POP
46543: POP
// result := tmp ;
46544: LD_ADDR_VAR 0 6
46548: PUSH
46549: LD_VAR 0 9
46553: ST_TO_ADDR
// end ; end ;
46554: LD_VAR 0 6
46558: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46559: LD_INT 0
46561: PPUSH
46562: PPUSH
46563: PPUSH
46564: PPUSH
46565: PPUSH
46566: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46567: LD_ADDR_VAR 0 5
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: ST_TO_ADDR
// if not x or not y then
46589: LD_VAR 0 2
46593: NOT
46594: PUSH
46595: LD_VAR 0 3
46599: NOT
46600: OR
46601: IFFALSE 46605
// exit ;
46603: GO 48255
// if not range then
46605: LD_VAR 0 4
46609: NOT
46610: IFFALSE 46620
// range := 10 ;
46612: LD_ADDR_VAR 0 4
46616: PUSH
46617: LD_INT 10
46619: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46620: LD_ADDR_VAR 0 8
46624: PUSH
46625: LD_INT 81
46627: PUSH
46628: LD_VAR 0 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 92
46639: PUSH
46640: LD_VAR 0 2
46644: PUSH
46645: LD_VAR 0 3
46649: PUSH
46650: LD_VAR 0 4
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: LD_INT 21
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: PPUSH
46683: CALL_OW 69
46687: ST_TO_ADDR
// if not tmp then
46688: LD_VAR 0 8
46692: NOT
46693: IFFALSE 46697
// exit ;
46695: GO 48255
// for i in tmp do
46697: LD_ADDR_VAR 0 6
46701: PUSH
46702: LD_VAR 0 8
46706: PUSH
46707: FOR_IN
46708: IFFALSE 48230
// begin points := [ 0 , 0 , 0 ] ;
46710: LD_ADDR_VAR 0 9
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// bpoints := 1 ;
46729: LD_ADDR_VAR 0 10
46733: PUSH
46734: LD_INT 1
46736: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46737: LD_VAR 0 6
46741: PPUSH
46742: CALL_OW 247
46746: PUSH
46747: LD_INT 1
46749: DOUBLE
46750: EQUAL
46751: IFTRUE 46755
46753: GO 47333
46755: POP
// begin if GetClass ( i ) = 1 then
46756: LD_VAR 0 6
46760: PPUSH
46761: CALL_OW 257
46765: PUSH
46766: LD_INT 1
46768: EQUAL
46769: IFFALSE 46790
// points := [ 10 , 5 , 3 ] ;
46771: LD_ADDR_VAR 0 9
46775: PUSH
46776: LD_INT 10
46778: PUSH
46779: LD_INT 5
46781: PUSH
46782: LD_INT 3
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46790: LD_VAR 0 6
46794: PPUSH
46795: CALL_OW 257
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: LD_INT 4
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: IN
46814: IFFALSE 46835
// points := [ 3 , 2 , 1 ] ;
46816: LD_ADDR_VAR 0 9
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: LIST
46834: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46835: LD_VAR 0 6
46839: PPUSH
46840: CALL_OW 257
46844: PUSH
46845: LD_INT 5
46847: EQUAL
46848: IFFALSE 46869
// points := [ 130 , 5 , 2 ] ;
46850: LD_ADDR_VAR 0 9
46854: PUSH
46855: LD_INT 130
46857: PUSH
46858: LD_INT 5
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46869: LD_VAR 0 6
46873: PPUSH
46874: CALL_OW 257
46878: PUSH
46879: LD_INT 8
46881: EQUAL
46882: IFFALSE 46903
// points := [ 35 , 35 , 30 ] ;
46884: LD_ADDR_VAR 0 9
46888: PUSH
46889: LD_INT 35
46891: PUSH
46892: LD_INT 35
46894: PUSH
46895: LD_INT 30
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46903: LD_VAR 0 6
46907: PPUSH
46908: CALL_OW 257
46912: PUSH
46913: LD_INT 9
46915: EQUAL
46916: IFFALSE 46937
// points := [ 20 , 55 , 40 ] ;
46918: LD_ADDR_VAR 0 9
46922: PUSH
46923: LD_INT 20
46925: PUSH
46926: LD_INT 55
46928: PUSH
46929: LD_INT 40
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46937: LD_VAR 0 6
46941: PPUSH
46942: CALL_OW 257
46946: PUSH
46947: LD_INT 12
46949: PUSH
46950: LD_INT 16
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: IN
46957: IFFALSE 46978
// points := [ 5 , 3 , 2 ] ;
46959: LD_ADDR_VAR 0 9
46963: PUSH
46964: LD_INT 5
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46978: LD_VAR 0 6
46982: PPUSH
46983: CALL_OW 257
46987: PUSH
46988: LD_INT 17
46990: EQUAL
46991: IFFALSE 47012
// points := [ 100 , 50 , 75 ] ;
46993: LD_ADDR_VAR 0 9
46997: PUSH
46998: LD_INT 100
47000: PUSH
47001: LD_INT 50
47003: PUSH
47004: LD_INT 75
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47012: LD_VAR 0 6
47016: PPUSH
47017: CALL_OW 257
47021: PUSH
47022: LD_INT 15
47024: EQUAL
47025: IFFALSE 47046
// points := [ 10 , 5 , 3 ] ;
47027: LD_ADDR_VAR 0 9
47031: PUSH
47032: LD_INT 10
47034: PUSH
47035: LD_INT 5
47037: PUSH
47038: LD_INT 3
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47046: LD_VAR 0 6
47050: PPUSH
47051: CALL_OW 257
47055: PUSH
47056: LD_INT 14
47058: EQUAL
47059: IFFALSE 47080
// points := [ 10 , 0 , 0 ] ;
47061: LD_ADDR_VAR 0 9
47065: PUSH
47066: LD_INT 10
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47080: LD_VAR 0 6
47084: PPUSH
47085: CALL_OW 257
47089: PUSH
47090: LD_INT 11
47092: EQUAL
47093: IFFALSE 47114
// points := [ 30 , 10 , 5 ] ;
47095: LD_ADDR_VAR 0 9
47099: PUSH
47100: LD_INT 30
47102: PUSH
47103: LD_INT 10
47105: PUSH
47106: LD_INT 5
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47114: LD_VAR 0 1
47118: PPUSH
47119: LD_INT 5
47121: PPUSH
47122: CALL_OW 321
47126: PUSH
47127: LD_INT 2
47129: EQUAL
47130: IFFALSE 47147
// bpoints := bpoints * 1.8 ;
47132: LD_ADDR_VAR 0 10
47136: PUSH
47137: LD_VAR 0 10
47141: PUSH
47142: LD_REAL  1.80000000000000E+0000
47145: MUL
47146: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47147: LD_VAR 0 6
47151: PPUSH
47152: CALL_OW 257
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: LD_INT 4
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: IN
47175: PUSH
47176: LD_VAR 0 1
47180: PPUSH
47181: LD_INT 51
47183: PPUSH
47184: CALL_OW 321
47188: PUSH
47189: LD_INT 2
47191: EQUAL
47192: AND
47193: IFFALSE 47210
// bpoints := bpoints * 1.2 ;
47195: LD_ADDR_VAR 0 10
47199: PUSH
47200: LD_VAR 0 10
47204: PUSH
47205: LD_REAL  1.20000000000000E+0000
47208: MUL
47209: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47210: LD_VAR 0 6
47214: PPUSH
47215: CALL_OW 257
47219: PUSH
47220: LD_INT 5
47222: PUSH
47223: LD_INT 7
47225: PUSH
47226: LD_INT 9
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: IN
47234: PUSH
47235: LD_VAR 0 1
47239: PPUSH
47240: LD_INT 52
47242: PPUSH
47243: CALL_OW 321
47247: PUSH
47248: LD_INT 2
47250: EQUAL
47251: AND
47252: IFFALSE 47269
// bpoints := bpoints * 1.5 ;
47254: LD_ADDR_VAR 0 10
47258: PUSH
47259: LD_VAR 0 10
47263: PUSH
47264: LD_REAL  1.50000000000000E+0000
47267: MUL
47268: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47269: LD_VAR 0 1
47273: PPUSH
47274: LD_INT 66
47276: PPUSH
47277: CALL_OW 321
47281: PUSH
47282: LD_INT 2
47284: EQUAL
47285: IFFALSE 47302
// bpoints := bpoints * 1.1 ;
47287: LD_ADDR_VAR 0 10
47291: PUSH
47292: LD_VAR 0 10
47296: PUSH
47297: LD_REAL  1.10000000000000E+0000
47300: MUL
47301: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47302: LD_ADDR_VAR 0 10
47306: PUSH
47307: LD_VAR 0 10
47311: PUSH
47312: LD_VAR 0 6
47316: PPUSH
47317: LD_INT 1
47319: PPUSH
47320: CALL_OW 259
47324: PUSH
47325: LD_REAL  1.15000000000000E+0000
47328: MUL
47329: MUL
47330: ST_TO_ADDR
// end ; unit_vehicle :
47331: GO 48159
47333: LD_INT 2
47335: DOUBLE
47336: EQUAL
47337: IFTRUE 47341
47339: GO 48147
47341: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47342: LD_VAR 0 6
47346: PPUSH
47347: CALL_OW 264
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 42
47357: PUSH
47358: LD_INT 24
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: IN
47366: IFFALSE 47387
// points := [ 25 , 5 , 3 ] ;
47368: LD_ADDR_VAR 0 9
47372: PUSH
47373: LD_INT 25
47375: PUSH
47376: LD_INT 5
47378: PUSH
47379: LD_INT 3
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47387: LD_VAR 0 6
47391: PPUSH
47392: CALL_OW 264
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: LD_INT 43
47402: PUSH
47403: LD_INT 25
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: IN
47411: IFFALSE 47432
// points := [ 40 , 15 , 5 ] ;
47413: LD_ADDR_VAR 0 9
47417: PUSH
47418: LD_INT 40
47420: PUSH
47421: LD_INT 15
47423: PUSH
47424: LD_INT 5
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47432: LD_VAR 0 6
47436: PPUSH
47437: CALL_OW 264
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 23
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: IN
47452: IFFALSE 47473
// points := [ 7 , 25 , 8 ] ;
47454: LD_ADDR_VAR 0 9
47458: PUSH
47459: LD_INT 7
47461: PUSH
47462: LD_INT 25
47464: PUSH
47465: LD_INT 8
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47473: LD_VAR 0 6
47477: PPUSH
47478: CALL_OW 264
47482: PUSH
47483: LD_INT 5
47485: PUSH
47486: LD_INT 27
47488: PUSH
47489: LD_INT 44
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: IN
47497: IFFALSE 47518
// points := [ 14 , 50 , 16 ] ;
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_INT 14
47506: PUSH
47507: LD_INT 50
47509: PUSH
47510: LD_INT 16
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 264
47527: PUSH
47528: LD_INT 6
47530: PUSH
47531: LD_INT 46
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: IN
47538: IFFALSE 47559
// points := [ 32 , 120 , 70 ] ;
47540: LD_ADDR_VAR 0 9
47544: PUSH
47545: LD_INT 32
47547: PUSH
47548: LD_INT 120
47550: PUSH
47551: LD_INT 70
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47559: LD_VAR 0 6
47563: PPUSH
47564: CALL_OW 264
47568: PUSH
47569: LD_INT 7
47571: PUSH
47572: LD_INT 28
47574: PUSH
47575: LD_INT 45
47577: PUSH
47578: LD_INT 92
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: IN
47587: IFFALSE 47608
// points := [ 35 , 20 , 45 ] ;
47589: LD_ADDR_VAR 0 9
47593: PUSH
47594: LD_INT 35
47596: PUSH
47597: LD_INT 20
47599: PUSH
47600: LD_INT 45
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47608: LD_VAR 0 6
47612: PPUSH
47613: CALL_OW 264
47617: PUSH
47618: LD_INT 47
47620: PUSH
47621: EMPTY
47622: LIST
47623: IN
47624: IFFALSE 47645
// points := [ 67 , 45 , 75 ] ;
47626: LD_ADDR_VAR 0 9
47630: PUSH
47631: LD_INT 67
47633: PUSH
47634: LD_INT 45
47636: PUSH
47637: LD_INT 75
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47645: LD_VAR 0 6
47649: PPUSH
47650: CALL_OW 264
47654: PUSH
47655: LD_INT 26
47657: PUSH
47658: EMPTY
47659: LIST
47660: IN
47661: IFFALSE 47682
// points := [ 120 , 30 , 80 ] ;
47663: LD_ADDR_VAR 0 9
47667: PUSH
47668: LD_INT 120
47670: PUSH
47671: LD_INT 30
47673: PUSH
47674: LD_INT 80
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47682: LD_VAR 0 6
47686: PPUSH
47687: CALL_OW 264
47691: PUSH
47692: LD_INT 22
47694: PUSH
47695: EMPTY
47696: LIST
47697: IN
47698: IFFALSE 47719
// points := [ 40 , 1 , 1 ] ;
47700: LD_ADDR_VAR 0 9
47704: PUSH
47705: LD_INT 40
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47719: LD_VAR 0 6
47723: PPUSH
47724: CALL_OW 264
47728: PUSH
47729: LD_INT 29
47731: PUSH
47732: EMPTY
47733: LIST
47734: IN
47735: IFFALSE 47756
// points := [ 70 , 200 , 400 ] ;
47737: LD_ADDR_VAR 0 9
47741: PUSH
47742: LD_INT 70
47744: PUSH
47745: LD_INT 200
47747: PUSH
47748: LD_INT 400
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47756: LD_VAR 0 6
47760: PPUSH
47761: CALL_OW 264
47765: PUSH
47766: LD_INT 14
47768: PUSH
47769: LD_INT 53
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: IN
47776: IFFALSE 47797
// points := [ 40 , 10 , 20 ] ;
47778: LD_ADDR_VAR 0 9
47782: PUSH
47783: LD_INT 40
47785: PUSH
47786: LD_INT 10
47788: PUSH
47789: LD_INT 20
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47797: LD_VAR 0 6
47801: PPUSH
47802: CALL_OW 264
47806: PUSH
47807: LD_INT 9
47809: PUSH
47810: EMPTY
47811: LIST
47812: IN
47813: IFFALSE 47834
// points := [ 5 , 70 , 20 ] ;
47815: LD_ADDR_VAR 0 9
47819: PUSH
47820: LD_INT 5
47822: PUSH
47823: LD_INT 70
47825: PUSH
47826: LD_INT 20
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47834: LD_VAR 0 6
47838: PPUSH
47839: CALL_OW 264
47843: PUSH
47844: LD_INT 10
47846: PUSH
47847: EMPTY
47848: LIST
47849: IN
47850: IFFALSE 47871
// points := [ 35 , 110 , 70 ] ;
47852: LD_ADDR_VAR 0 9
47856: PUSH
47857: LD_INT 35
47859: PUSH
47860: LD_INT 110
47862: PUSH
47863: LD_INT 70
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47871: LD_VAR 0 6
47875: PPUSH
47876: CALL_OW 265
47880: PUSH
47881: LD_INT 25
47883: EQUAL
47884: IFFALSE 47905
// points := [ 80 , 65 , 100 ] ;
47886: LD_ADDR_VAR 0 9
47890: PUSH
47891: LD_INT 80
47893: PUSH
47894: LD_INT 65
47896: PUSH
47897: LD_INT 100
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47905: LD_VAR 0 6
47909: PPUSH
47910: CALL_OW 263
47914: PUSH
47915: LD_INT 1
47917: EQUAL
47918: IFFALSE 47953
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47920: LD_ADDR_VAR 0 10
47924: PUSH
47925: LD_VAR 0 10
47929: PUSH
47930: LD_VAR 0 6
47934: PPUSH
47935: CALL_OW 311
47939: PPUSH
47940: LD_INT 3
47942: PPUSH
47943: CALL_OW 259
47947: PUSH
47948: LD_INT 4
47950: MUL
47951: MUL
47952: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47953: LD_VAR 0 6
47957: PPUSH
47958: CALL_OW 263
47962: PUSH
47963: LD_INT 2
47965: EQUAL
47966: IFFALSE 48017
// begin j := IsControledBy ( i ) ;
47968: LD_ADDR_VAR 0 7
47972: PUSH
47973: LD_VAR 0 6
47977: PPUSH
47978: CALL_OW 312
47982: ST_TO_ADDR
// if j then
47983: LD_VAR 0 7
47987: IFFALSE 48017
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47989: LD_ADDR_VAR 0 10
47993: PUSH
47994: LD_VAR 0 10
47998: PUSH
47999: LD_VAR 0 7
48003: PPUSH
48004: LD_INT 3
48006: PPUSH
48007: CALL_OW 259
48011: PUSH
48012: LD_INT 3
48014: MUL
48015: MUL
48016: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48017: LD_VAR 0 6
48021: PPUSH
48022: CALL_OW 264
48026: PUSH
48027: LD_INT 5
48029: PUSH
48030: LD_INT 6
48032: PUSH
48033: LD_INT 46
48035: PUSH
48036: LD_INT 44
48038: PUSH
48039: LD_INT 47
48041: PUSH
48042: LD_INT 45
48044: PUSH
48045: LD_INT 28
48047: PUSH
48048: LD_INT 7
48050: PUSH
48051: LD_INT 27
48053: PUSH
48054: LD_INT 29
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: IN
48069: PUSH
48070: LD_VAR 0 1
48074: PPUSH
48075: LD_INT 52
48077: PPUSH
48078: CALL_OW 321
48082: PUSH
48083: LD_INT 2
48085: EQUAL
48086: AND
48087: IFFALSE 48104
// bpoints := bpoints * 1.2 ;
48089: LD_ADDR_VAR 0 10
48093: PUSH
48094: LD_VAR 0 10
48098: PUSH
48099: LD_REAL  1.20000000000000E+0000
48102: MUL
48103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48104: LD_VAR 0 6
48108: PPUSH
48109: CALL_OW 264
48113: PUSH
48114: LD_INT 6
48116: PUSH
48117: LD_INT 46
48119: PUSH
48120: LD_INT 47
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: IN
48128: IFFALSE 48145
// bpoints := bpoints * 1.2 ;
48130: LD_ADDR_VAR 0 10
48134: PUSH
48135: LD_VAR 0 10
48139: PUSH
48140: LD_REAL  1.20000000000000E+0000
48143: MUL
48144: ST_TO_ADDR
// end ; unit_building :
48145: GO 48159
48147: LD_INT 3
48149: DOUBLE
48150: EQUAL
48151: IFTRUE 48155
48153: GO 48158
48155: POP
// ; end ;
48156: GO 48159
48158: POP
// for j = 1 to 3 do
48159: LD_ADDR_VAR 0 7
48163: PUSH
48164: DOUBLE
48165: LD_INT 1
48167: DEC
48168: ST_TO_ADDR
48169: LD_INT 3
48171: PUSH
48172: FOR_TO
48173: IFFALSE 48226
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48175: LD_ADDR_VAR 0 5
48179: PUSH
48180: LD_VAR 0 5
48184: PPUSH
48185: LD_VAR 0 7
48189: PPUSH
48190: LD_VAR 0 5
48194: PUSH
48195: LD_VAR 0 7
48199: ARRAY
48200: PUSH
48201: LD_VAR 0 9
48205: PUSH
48206: LD_VAR 0 7
48210: ARRAY
48211: PUSH
48212: LD_VAR 0 10
48216: MUL
48217: PLUS
48218: PPUSH
48219: CALL_OW 1
48223: ST_TO_ADDR
48224: GO 48172
48226: POP
48227: POP
// end ;
48228: GO 46707
48230: POP
48231: POP
// result := Replace ( result , 4 , tmp ) ;
48232: LD_ADDR_VAR 0 5
48236: PUSH
48237: LD_VAR 0 5
48241: PPUSH
48242: LD_INT 4
48244: PPUSH
48245: LD_VAR 0 8
48249: PPUSH
48250: CALL_OW 1
48254: ST_TO_ADDR
// end ;
48255: LD_VAR 0 5
48259: RET
// export function DangerAtRange ( unit , range ) ; begin
48260: LD_INT 0
48262: PPUSH
// if not unit then
48263: LD_VAR 0 1
48267: NOT
48268: IFFALSE 48272
// exit ;
48270: GO 48317
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48272: LD_ADDR_VAR 0 3
48276: PUSH
48277: LD_VAR 0 1
48281: PPUSH
48282: CALL_OW 255
48286: PPUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 250
48296: PPUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 251
48306: PPUSH
48307: LD_VAR 0 2
48311: PPUSH
48312: CALL 46559 0 4
48316: ST_TO_ADDR
// end ;
48317: LD_VAR 0 3
48321: RET
// export function DangerInArea ( side , area ) ; begin
48322: LD_INT 0
48324: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48325: LD_ADDR_VAR 0 3
48329: PUSH
48330: LD_VAR 0 2
48334: PPUSH
48335: LD_INT 81
48337: PUSH
48338: LD_VAR 0 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PPUSH
48347: CALL_OW 70
48351: ST_TO_ADDR
// end ;
48352: LD_VAR 0 3
48356: RET
// export function IsExtension ( b ) ; begin
48357: LD_INT 0
48359: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48360: LD_ADDR_VAR 0 2
48364: PUSH
48365: LD_VAR 0 1
48369: PUSH
48370: LD_INT 23
48372: PUSH
48373: LD_INT 20
48375: PUSH
48376: LD_INT 22
48378: PUSH
48379: LD_INT 17
48381: PUSH
48382: LD_INT 24
48384: PUSH
48385: LD_INT 21
48387: PUSH
48388: LD_INT 19
48390: PUSH
48391: LD_INT 16
48393: PUSH
48394: LD_INT 25
48396: PUSH
48397: LD_INT 18
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: IN
48412: ST_TO_ADDR
// end ;
48413: LD_VAR 0 2
48417: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48418: LD_INT 0
48420: PPUSH
48421: PPUSH
48422: PPUSH
// result := [ ] ;
48423: LD_ADDR_VAR 0 4
48427: PUSH
48428: EMPTY
48429: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48430: LD_ADDR_VAR 0 5
48434: PUSH
48435: LD_VAR 0 2
48439: PPUSH
48440: LD_INT 21
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PPUSH
48450: CALL_OW 70
48454: ST_TO_ADDR
// if not tmp then
48455: LD_VAR 0 5
48459: NOT
48460: IFFALSE 48464
// exit ;
48462: GO 48528
// if checkLink then
48464: LD_VAR 0 3
48468: IFFALSE 48518
// begin for i in tmp do
48470: LD_ADDR_VAR 0 6
48474: PUSH
48475: LD_VAR 0 5
48479: PUSH
48480: FOR_IN
48481: IFFALSE 48516
// if GetBase ( i ) <> base then
48483: LD_VAR 0 6
48487: PPUSH
48488: CALL_OW 274
48492: PUSH
48493: LD_VAR 0 1
48497: NONEQUAL
48498: IFFALSE 48514
// ComLinkToBase ( base , i ) ;
48500: LD_VAR 0 1
48504: PPUSH
48505: LD_VAR 0 6
48509: PPUSH
48510: CALL_OW 169
48514: GO 48480
48516: POP
48517: POP
// end ; result := tmp ;
48518: LD_ADDR_VAR 0 4
48522: PUSH
48523: LD_VAR 0 5
48527: ST_TO_ADDR
// end ;
48528: LD_VAR 0 4
48532: RET
// export function ComComplete ( units , b ) ; var i ; begin
48533: LD_INT 0
48535: PPUSH
48536: PPUSH
// if not units then
48537: LD_VAR 0 1
48541: NOT
48542: IFFALSE 48546
// exit ;
48544: GO 48636
// for i in units do
48546: LD_ADDR_VAR 0 4
48550: PUSH
48551: LD_VAR 0 1
48555: PUSH
48556: FOR_IN
48557: IFFALSE 48634
// if BuildingStatus ( b ) = bs_build then
48559: LD_VAR 0 2
48563: PPUSH
48564: CALL_OW 461
48568: PUSH
48569: LD_INT 1
48571: EQUAL
48572: IFFALSE 48632
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48574: LD_VAR 0 4
48578: PPUSH
48579: LD_STRING h
48581: PUSH
48582: LD_VAR 0 2
48586: PPUSH
48587: CALL_OW 250
48591: PUSH
48592: LD_VAR 0 2
48596: PPUSH
48597: CALL_OW 251
48601: PUSH
48602: LD_VAR 0 2
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: PPUSH
48628: CALL_OW 446
48632: GO 48556
48634: POP
48635: POP
// end ;
48636: LD_VAR 0 3
48640: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48641: LD_INT 0
48643: PPUSH
48644: PPUSH
48645: PPUSH
48646: PPUSH
48647: PPUSH
48648: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48649: LD_VAR 0 1
48653: NOT
48654: PUSH
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 263
48664: PUSH
48665: LD_INT 2
48667: NONEQUAL
48668: OR
48669: IFFALSE 48673
// exit ;
48671: GO 48989
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48673: LD_ADDR_VAR 0 6
48677: PUSH
48678: LD_INT 22
48680: PUSH
48681: LD_VAR 0 1
48685: PPUSH
48686: CALL_OW 255
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: LD_INT 30
48700: PUSH
48701: LD_INT 36
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 34
48710: PUSH
48711: LD_INT 31
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PPUSH
48727: CALL_OW 69
48731: ST_TO_ADDR
// if not tmp then
48732: LD_VAR 0 6
48736: NOT
48737: IFFALSE 48741
// exit ;
48739: GO 48989
// result := [ ] ;
48741: LD_ADDR_VAR 0 2
48745: PUSH
48746: EMPTY
48747: ST_TO_ADDR
// for i in tmp do
48748: LD_ADDR_VAR 0 3
48752: PUSH
48753: LD_VAR 0 6
48757: PUSH
48758: FOR_IN
48759: IFFALSE 48830
// begin t := UnitsInside ( i ) ;
48761: LD_ADDR_VAR 0 4
48765: PUSH
48766: LD_VAR 0 3
48770: PPUSH
48771: CALL_OW 313
48775: ST_TO_ADDR
// if t then
48776: LD_VAR 0 4
48780: IFFALSE 48828
// for j in t do
48782: LD_ADDR_VAR 0 7
48786: PUSH
48787: LD_VAR 0 4
48791: PUSH
48792: FOR_IN
48793: IFFALSE 48826
// result := Replace ( result , result + 1 , j ) ;
48795: LD_ADDR_VAR 0 2
48799: PUSH
48800: LD_VAR 0 2
48804: PPUSH
48805: LD_VAR 0 2
48809: PUSH
48810: LD_INT 1
48812: PLUS
48813: PPUSH
48814: LD_VAR 0 7
48818: PPUSH
48819: CALL_OW 1
48823: ST_TO_ADDR
48824: GO 48792
48826: POP
48827: POP
// end ;
48828: GO 48758
48830: POP
48831: POP
// if not result then
48832: LD_VAR 0 2
48836: NOT
48837: IFFALSE 48841
// exit ;
48839: GO 48989
// mech := result [ 1 ] ;
48841: LD_ADDR_VAR 0 5
48845: PUSH
48846: LD_VAR 0 2
48850: PUSH
48851: LD_INT 1
48853: ARRAY
48854: ST_TO_ADDR
// if result > 1 then
48855: LD_VAR 0 2
48859: PUSH
48860: LD_INT 1
48862: GREATER
48863: IFFALSE 48975
// begin for i = 2 to result do
48865: LD_ADDR_VAR 0 3
48869: PUSH
48870: DOUBLE
48871: LD_INT 2
48873: DEC
48874: ST_TO_ADDR
48875: LD_VAR 0 2
48879: PUSH
48880: FOR_TO
48881: IFFALSE 48973
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48883: LD_ADDR_VAR 0 4
48887: PUSH
48888: LD_VAR 0 2
48892: PUSH
48893: LD_VAR 0 3
48897: ARRAY
48898: PPUSH
48899: LD_INT 3
48901: PPUSH
48902: CALL_OW 259
48906: PUSH
48907: LD_VAR 0 2
48911: PUSH
48912: LD_VAR 0 3
48916: ARRAY
48917: PPUSH
48918: CALL_OW 432
48922: MINUS
48923: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48924: LD_VAR 0 4
48928: PUSH
48929: LD_VAR 0 5
48933: PPUSH
48934: LD_INT 3
48936: PPUSH
48937: CALL_OW 259
48941: PUSH
48942: LD_VAR 0 5
48946: PPUSH
48947: CALL_OW 432
48951: MINUS
48952: GREATEREQUAL
48953: IFFALSE 48971
// mech := result [ i ] ;
48955: LD_ADDR_VAR 0 5
48959: PUSH
48960: LD_VAR 0 2
48964: PUSH
48965: LD_VAR 0 3
48969: ARRAY
48970: ST_TO_ADDR
// end ;
48971: GO 48880
48973: POP
48974: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48975: LD_VAR 0 1
48979: PPUSH
48980: LD_VAR 0 5
48984: PPUSH
48985: CALL_OW 135
// end ;
48989: LD_VAR 0 2
48993: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48994: LD_INT 0
48996: PPUSH
48997: PPUSH
48998: PPUSH
48999: PPUSH
49000: PPUSH
49001: PPUSH
49002: PPUSH
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
// result := [ ] ;
49009: LD_ADDR_VAR 0 7
49013: PUSH
49014: EMPTY
49015: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49016: LD_VAR 0 1
49020: PPUSH
49021: CALL_OW 266
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: IN
49036: NOT
49037: IFFALSE 49041
// exit ;
49039: GO 50675
// if name then
49041: LD_VAR 0 3
49045: IFFALSE 49061
// SetBName ( base_dep , name ) ;
49047: LD_VAR 0 1
49051: PPUSH
49052: LD_VAR 0 3
49056: PPUSH
49057: CALL_OW 500
// base := GetBase ( base_dep ) ;
49061: LD_ADDR_VAR 0 15
49065: PUSH
49066: LD_VAR 0 1
49070: PPUSH
49071: CALL_OW 274
49075: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49076: LD_ADDR_VAR 0 16
49080: PUSH
49081: LD_VAR 0 1
49085: PPUSH
49086: CALL_OW 255
49090: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49091: LD_ADDR_VAR 0 17
49095: PUSH
49096: LD_VAR 0 1
49100: PPUSH
49101: CALL_OW 248
49105: ST_TO_ADDR
// if sources then
49106: LD_VAR 0 5
49110: IFFALSE 49157
// for i = 1 to 3 do
49112: LD_ADDR_VAR 0 8
49116: PUSH
49117: DOUBLE
49118: LD_INT 1
49120: DEC
49121: ST_TO_ADDR
49122: LD_INT 3
49124: PUSH
49125: FOR_TO
49126: IFFALSE 49155
// AddResourceType ( base , i , sources [ i ] ) ;
49128: LD_VAR 0 15
49132: PPUSH
49133: LD_VAR 0 8
49137: PPUSH
49138: LD_VAR 0 5
49142: PUSH
49143: LD_VAR 0 8
49147: ARRAY
49148: PPUSH
49149: CALL_OW 276
49153: GO 49125
49155: POP
49156: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49157: LD_ADDR_VAR 0 18
49161: PUSH
49162: LD_VAR 0 15
49166: PPUSH
49167: LD_VAR 0 2
49171: PPUSH
49172: LD_INT 1
49174: PPUSH
49175: CALL 48418 0 3
49179: ST_TO_ADDR
// InitHc ;
49180: CALL_OW 19
// InitUc ;
49184: CALL_OW 18
// uc_side := side ;
49188: LD_ADDR_OWVAR 20
49192: PUSH
49193: LD_VAR 0 16
49197: ST_TO_ADDR
// uc_nation := nation ;
49198: LD_ADDR_OWVAR 21
49202: PUSH
49203: LD_VAR 0 17
49207: ST_TO_ADDR
// if buildings then
49208: LD_VAR 0 18
49212: IFFALSE 50534
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49214: LD_ADDR_VAR 0 19
49218: PUSH
49219: LD_VAR 0 18
49223: PPUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 30
49229: PUSH
49230: LD_INT 29
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 30
49239: PUSH
49240: LD_INT 30
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: PPUSH
49252: CALL_OW 72
49256: ST_TO_ADDR
// if tmp then
49257: LD_VAR 0 19
49261: IFFALSE 49309
// for i in tmp do
49263: LD_ADDR_VAR 0 8
49267: PUSH
49268: LD_VAR 0 19
49272: PUSH
49273: FOR_IN
49274: IFFALSE 49307
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49276: LD_VAR 0 8
49280: PPUSH
49281: CALL_OW 250
49285: PPUSH
49286: LD_VAR 0 8
49290: PPUSH
49291: CALL_OW 251
49295: PPUSH
49296: LD_VAR 0 16
49300: PPUSH
49301: CALL_OW 441
49305: GO 49273
49307: POP
49308: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49309: LD_VAR 0 18
49313: PPUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 30
49319: PUSH
49320: LD_INT 32
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 30
49329: PUSH
49330: LD_INT 33
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: PPUSH
49342: CALL_OW 72
49346: IFFALSE 49434
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49348: LD_ADDR_VAR 0 8
49352: PUSH
49353: LD_VAR 0 18
49357: PPUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 30
49363: PUSH
49364: LD_INT 32
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 30
49373: PUSH
49374: LD_INT 33
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: PPUSH
49386: CALL_OW 72
49390: PUSH
49391: FOR_IN
49392: IFFALSE 49432
// begin if not GetBWeapon ( i ) then
49394: LD_VAR 0 8
49398: PPUSH
49399: CALL_OW 269
49403: NOT
49404: IFFALSE 49430
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49406: LD_VAR 0 8
49410: PPUSH
49411: LD_VAR 0 8
49415: PPUSH
49416: LD_VAR 0 2
49420: PPUSH
49421: CALL 50680 0 2
49425: PPUSH
49426: CALL_OW 431
// end ;
49430: GO 49391
49432: POP
49433: POP
// end ; for i = 1 to personel do
49434: LD_ADDR_VAR 0 8
49438: PUSH
49439: DOUBLE
49440: LD_INT 1
49442: DEC
49443: ST_TO_ADDR
49444: LD_VAR 0 6
49448: PUSH
49449: FOR_TO
49450: IFFALSE 50514
// begin if i > 4 then
49452: LD_VAR 0 8
49456: PUSH
49457: LD_INT 4
49459: GREATER
49460: IFFALSE 49464
// break ;
49462: GO 50514
// case i of 1 :
49464: LD_VAR 0 8
49468: PUSH
49469: LD_INT 1
49471: DOUBLE
49472: EQUAL
49473: IFTRUE 49477
49475: GO 49557
49477: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49478: LD_ADDR_VAR 0 12
49482: PUSH
49483: LD_VAR 0 18
49487: PPUSH
49488: LD_INT 22
49490: PUSH
49491: LD_VAR 0 16
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 58
49502: PUSH
49503: EMPTY
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 30
49511: PUSH
49512: LD_INT 32
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 30
49521: PUSH
49522: LD_INT 4
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 30
49531: PUSH
49532: LD_INT 5
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: PPUSH
49550: CALL_OW 72
49554: ST_TO_ADDR
49555: GO 49779
49557: LD_INT 2
49559: DOUBLE
49560: EQUAL
49561: IFTRUE 49565
49563: GO 49627
49565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49566: LD_ADDR_VAR 0 12
49570: PUSH
49571: LD_VAR 0 18
49575: PPUSH
49576: LD_INT 22
49578: PUSH
49579: LD_VAR 0 16
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: LD_INT 30
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 30
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PPUSH
49620: CALL_OW 72
49624: ST_TO_ADDR
49625: GO 49779
49627: LD_INT 3
49629: DOUBLE
49630: EQUAL
49631: IFTRUE 49635
49633: GO 49697
49635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49636: LD_ADDR_VAR 0 12
49640: PUSH
49641: LD_VAR 0 18
49645: PPUSH
49646: LD_INT 22
49648: PUSH
49649: LD_VAR 0 16
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 30
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 30
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PPUSH
49690: CALL_OW 72
49694: ST_TO_ADDR
49695: GO 49779
49697: LD_INT 4
49699: DOUBLE
49700: EQUAL
49701: IFTRUE 49705
49703: GO 49778
49705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49706: LD_ADDR_VAR 0 12
49710: PUSH
49711: LD_VAR 0 18
49715: PPUSH
49716: LD_INT 22
49718: PUSH
49719: LD_VAR 0 16
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 30
49733: PUSH
49734: LD_INT 6
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 30
49743: PUSH
49744: LD_INT 7
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 30
49753: PUSH
49754: LD_INT 8
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PPUSH
49771: CALL_OW 72
49775: ST_TO_ADDR
49776: GO 49779
49778: POP
// if i = 1 then
49779: LD_VAR 0 8
49783: PUSH
49784: LD_INT 1
49786: EQUAL
49787: IFFALSE 49898
// begin tmp := [ ] ;
49789: LD_ADDR_VAR 0 19
49793: PUSH
49794: EMPTY
49795: ST_TO_ADDR
// for j in f do
49796: LD_ADDR_VAR 0 9
49800: PUSH
49801: LD_VAR 0 12
49805: PUSH
49806: FOR_IN
49807: IFFALSE 49880
// if GetBType ( j ) = b_bunker then
49809: LD_VAR 0 9
49813: PPUSH
49814: CALL_OW 266
49818: PUSH
49819: LD_INT 32
49821: EQUAL
49822: IFFALSE 49849
// tmp := Insert ( tmp , 1 , j ) else
49824: LD_ADDR_VAR 0 19
49828: PUSH
49829: LD_VAR 0 19
49833: PPUSH
49834: LD_INT 1
49836: PPUSH
49837: LD_VAR 0 9
49841: PPUSH
49842: CALL_OW 2
49846: ST_TO_ADDR
49847: GO 49878
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49849: LD_ADDR_VAR 0 19
49853: PUSH
49854: LD_VAR 0 19
49858: PPUSH
49859: LD_VAR 0 19
49863: PUSH
49864: LD_INT 1
49866: PLUS
49867: PPUSH
49868: LD_VAR 0 9
49872: PPUSH
49873: CALL_OW 2
49877: ST_TO_ADDR
49878: GO 49806
49880: POP
49881: POP
// if tmp then
49882: LD_VAR 0 19
49886: IFFALSE 49898
// f := tmp ;
49888: LD_ADDR_VAR 0 12
49892: PUSH
49893: LD_VAR 0 19
49897: ST_TO_ADDR
// end ; x := personel [ i ] ;
49898: LD_ADDR_VAR 0 13
49902: PUSH
49903: LD_VAR 0 6
49907: PUSH
49908: LD_VAR 0 8
49912: ARRAY
49913: ST_TO_ADDR
// if x = - 1 then
49914: LD_VAR 0 13
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: EQUAL
49923: IFFALSE 50132
// begin for j in f do
49925: LD_ADDR_VAR 0 9
49929: PUSH
49930: LD_VAR 0 12
49934: PUSH
49935: FOR_IN
49936: IFFALSE 50128
// repeat InitHc ;
49938: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49942: LD_VAR 0 9
49946: PPUSH
49947: CALL_OW 266
49951: PUSH
49952: LD_INT 5
49954: EQUAL
49955: IFFALSE 50025
// begin if UnitsInside ( j ) < 3 then
49957: LD_VAR 0 9
49961: PPUSH
49962: CALL_OW 313
49966: PUSH
49967: LD_INT 3
49969: LESS
49970: IFFALSE 50006
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49972: LD_INT 0
49974: PPUSH
49975: LD_INT 5
49977: PUSH
49978: LD_INT 8
49980: PUSH
49981: LD_INT 9
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: LIST
49988: PUSH
49989: LD_VAR 0 17
49993: ARRAY
49994: PPUSH
49995: LD_VAR 0 4
49999: PPUSH
50000: CALL_OW 380
50004: GO 50023
// PrepareHuman ( false , i , skill ) ;
50006: LD_INT 0
50008: PPUSH
50009: LD_VAR 0 8
50013: PPUSH
50014: LD_VAR 0 4
50018: PPUSH
50019: CALL_OW 380
// end else
50023: GO 50042
// PrepareHuman ( false , i , skill ) ;
50025: LD_INT 0
50027: PPUSH
50028: LD_VAR 0 8
50032: PPUSH
50033: LD_VAR 0 4
50037: PPUSH
50038: CALL_OW 380
// un := CreateHuman ;
50042: LD_ADDR_VAR 0 14
50046: PUSH
50047: CALL_OW 44
50051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50052: LD_ADDR_VAR 0 7
50056: PUSH
50057: LD_VAR 0 7
50061: PPUSH
50062: LD_INT 1
50064: PPUSH
50065: LD_VAR 0 14
50069: PPUSH
50070: CALL_OW 2
50074: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50075: LD_VAR 0 14
50079: PPUSH
50080: LD_VAR 0 9
50084: PPUSH
50085: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50089: LD_VAR 0 9
50093: PPUSH
50094: CALL_OW 313
50098: PUSH
50099: LD_INT 6
50101: EQUAL
50102: PUSH
50103: LD_VAR 0 9
50107: PPUSH
50108: CALL_OW 266
50112: PUSH
50113: LD_INT 32
50115: PUSH
50116: LD_INT 31
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: IN
50123: OR
50124: IFFALSE 49938
50126: GO 49935
50128: POP
50129: POP
// end else
50130: GO 50512
// for j = 1 to x do
50132: LD_ADDR_VAR 0 9
50136: PUSH
50137: DOUBLE
50138: LD_INT 1
50140: DEC
50141: ST_TO_ADDR
50142: LD_VAR 0 13
50146: PUSH
50147: FOR_TO
50148: IFFALSE 50510
// begin InitHc ;
50150: CALL_OW 19
// if not f then
50154: LD_VAR 0 12
50158: NOT
50159: IFFALSE 50248
// begin PrepareHuman ( false , i , skill ) ;
50161: LD_INT 0
50163: PPUSH
50164: LD_VAR 0 8
50168: PPUSH
50169: LD_VAR 0 4
50173: PPUSH
50174: CALL_OW 380
// un := CreateHuman ;
50178: LD_ADDR_VAR 0 14
50182: PUSH
50183: CALL_OW 44
50187: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50188: LD_ADDR_VAR 0 7
50192: PUSH
50193: LD_VAR 0 7
50197: PPUSH
50198: LD_INT 1
50200: PPUSH
50201: LD_VAR 0 14
50205: PPUSH
50206: CALL_OW 2
50210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50211: LD_VAR 0 14
50215: PPUSH
50216: LD_VAR 0 1
50220: PPUSH
50221: CALL_OW 250
50225: PPUSH
50226: LD_VAR 0 1
50230: PPUSH
50231: CALL_OW 251
50235: PPUSH
50236: LD_INT 10
50238: PPUSH
50239: LD_INT 0
50241: PPUSH
50242: CALL_OW 50
// continue ;
50246: GO 50147
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50248: LD_VAR 0 12
50252: PUSH
50253: LD_INT 1
50255: ARRAY
50256: PPUSH
50257: CALL_OW 313
50261: PUSH
50262: LD_VAR 0 12
50266: PUSH
50267: LD_INT 1
50269: ARRAY
50270: PPUSH
50271: CALL_OW 266
50275: PUSH
50276: LD_INT 32
50278: PUSH
50279: LD_INT 31
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: IN
50286: AND
50287: PUSH
50288: LD_VAR 0 12
50292: PUSH
50293: LD_INT 1
50295: ARRAY
50296: PPUSH
50297: CALL_OW 313
50301: PUSH
50302: LD_INT 6
50304: EQUAL
50305: OR
50306: IFFALSE 50326
// f := Delete ( f , 1 ) ;
50308: LD_ADDR_VAR 0 12
50312: PUSH
50313: LD_VAR 0 12
50317: PPUSH
50318: LD_INT 1
50320: PPUSH
50321: CALL_OW 3
50325: ST_TO_ADDR
// if not f then
50326: LD_VAR 0 12
50330: NOT
50331: IFFALSE 50349
// begin x := x + 2 ;
50333: LD_ADDR_VAR 0 13
50337: PUSH
50338: LD_VAR 0 13
50342: PUSH
50343: LD_INT 2
50345: PLUS
50346: ST_TO_ADDR
// continue ;
50347: GO 50147
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50349: LD_VAR 0 12
50353: PUSH
50354: LD_INT 1
50356: ARRAY
50357: PPUSH
50358: CALL_OW 266
50362: PUSH
50363: LD_INT 5
50365: EQUAL
50366: IFFALSE 50440
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50368: LD_VAR 0 12
50372: PUSH
50373: LD_INT 1
50375: ARRAY
50376: PPUSH
50377: CALL_OW 313
50381: PUSH
50382: LD_INT 3
50384: LESS
50385: IFFALSE 50421
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50387: LD_INT 0
50389: PPUSH
50390: LD_INT 5
50392: PUSH
50393: LD_INT 8
50395: PUSH
50396: LD_INT 9
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: PUSH
50404: LD_VAR 0 17
50408: ARRAY
50409: PPUSH
50410: LD_VAR 0 4
50414: PPUSH
50415: CALL_OW 380
50419: GO 50438
// PrepareHuman ( false , i , skill ) ;
50421: LD_INT 0
50423: PPUSH
50424: LD_VAR 0 8
50428: PPUSH
50429: LD_VAR 0 4
50433: PPUSH
50434: CALL_OW 380
// end else
50438: GO 50457
// PrepareHuman ( false , i , skill ) ;
50440: LD_INT 0
50442: PPUSH
50443: LD_VAR 0 8
50447: PPUSH
50448: LD_VAR 0 4
50452: PPUSH
50453: CALL_OW 380
// un := CreateHuman ;
50457: LD_ADDR_VAR 0 14
50461: PUSH
50462: CALL_OW 44
50466: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50467: LD_ADDR_VAR 0 7
50471: PUSH
50472: LD_VAR 0 7
50476: PPUSH
50477: LD_INT 1
50479: PPUSH
50480: LD_VAR 0 14
50484: PPUSH
50485: CALL_OW 2
50489: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50490: LD_VAR 0 14
50494: PPUSH
50495: LD_VAR 0 12
50499: PUSH
50500: LD_INT 1
50502: ARRAY
50503: PPUSH
50504: CALL_OW 52
// end ;
50508: GO 50147
50510: POP
50511: POP
// end ;
50512: GO 49449
50514: POP
50515: POP
// result := result ^ buildings ;
50516: LD_ADDR_VAR 0 7
50520: PUSH
50521: LD_VAR 0 7
50525: PUSH
50526: LD_VAR 0 18
50530: ADD
50531: ST_TO_ADDR
// end else
50532: GO 50675
// begin for i = 1 to personel do
50534: LD_ADDR_VAR 0 8
50538: PUSH
50539: DOUBLE
50540: LD_INT 1
50542: DEC
50543: ST_TO_ADDR
50544: LD_VAR 0 6
50548: PUSH
50549: FOR_TO
50550: IFFALSE 50673
// begin if i > 4 then
50552: LD_VAR 0 8
50556: PUSH
50557: LD_INT 4
50559: GREATER
50560: IFFALSE 50564
// break ;
50562: GO 50673
// x := personel [ i ] ;
50564: LD_ADDR_VAR 0 13
50568: PUSH
50569: LD_VAR 0 6
50573: PUSH
50574: LD_VAR 0 8
50578: ARRAY
50579: ST_TO_ADDR
// if x = - 1 then
50580: LD_VAR 0 13
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: EQUAL
50589: IFFALSE 50593
// continue ;
50591: GO 50549
// PrepareHuman ( false , i , skill ) ;
50593: LD_INT 0
50595: PPUSH
50596: LD_VAR 0 8
50600: PPUSH
50601: LD_VAR 0 4
50605: PPUSH
50606: CALL_OW 380
// un := CreateHuman ;
50610: LD_ADDR_VAR 0 14
50614: PUSH
50615: CALL_OW 44
50619: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50620: LD_VAR 0 14
50624: PPUSH
50625: LD_VAR 0 1
50629: PPUSH
50630: CALL_OW 250
50634: PPUSH
50635: LD_VAR 0 1
50639: PPUSH
50640: CALL_OW 251
50644: PPUSH
50645: LD_INT 10
50647: PPUSH
50648: LD_INT 0
50650: PPUSH
50651: CALL_OW 50
// result := result ^ un ;
50655: LD_ADDR_VAR 0 7
50659: PUSH
50660: LD_VAR 0 7
50664: PUSH
50665: LD_VAR 0 14
50669: ADD
50670: ST_TO_ADDR
// end ;
50671: GO 50549
50673: POP
50674: POP
// end ; end ;
50675: LD_VAR 0 7
50679: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50680: LD_INT 0
50682: PPUSH
50683: PPUSH
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
// result := false ;
50698: LD_ADDR_VAR 0 3
50702: PUSH
50703: LD_INT 0
50705: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50706: LD_VAR 0 1
50710: NOT
50711: PUSH
50712: LD_VAR 0 1
50716: PPUSH
50717: CALL_OW 266
50721: PUSH
50722: LD_INT 32
50724: PUSH
50725: LD_INT 33
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: IN
50732: NOT
50733: OR
50734: IFFALSE 50738
// exit ;
50736: GO 51847
// nat := GetNation ( tower ) ;
50738: LD_ADDR_VAR 0 12
50742: PUSH
50743: LD_VAR 0 1
50747: PPUSH
50748: CALL_OW 248
50752: ST_TO_ADDR
// side := GetSide ( tower ) ;
50753: LD_ADDR_VAR 0 16
50757: PUSH
50758: LD_VAR 0 1
50762: PPUSH
50763: CALL_OW 255
50767: ST_TO_ADDR
// x := GetX ( tower ) ;
50768: LD_ADDR_VAR 0 10
50772: PUSH
50773: LD_VAR 0 1
50777: PPUSH
50778: CALL_OW 250
50782: ST_TO_ADDR
// y := GetY ( tower ) ;
50783: LD_ADDR_VAR 0 11
50787: PUSH
50788: LD_VAR 0 1
50792: PPUSH
50793: CALL_OW 251
50797: ST_TO_ADDR
// if not x or not y then
50798: LD_VAR 0 10
50802: NOT
50803: PUSH
50804: LD_VAR 0 11
50808: NOT
50809: OR
50810: IFFALSE 50814
// exit ;
50812: GO 51847
// weapon := 0 ;
50814: LD_ADDR_VAR 0 18
50818: PUSH
50819: LD_INT 0
50821: ST_TO_ADDR
// fac_list := [ ] ;
50822: LD_ADDR_VAR 0 17
50826: PUSH
50827: EMPTY
50828: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50829: LD_ADDR_VAR 0 6
50833: PUSH
50834: LD_VAR 0 1
50838: PPUSH
50839: CALL_OW 274
50843: PPUSH
50844: LD_VAR 0 2
50848: PPUSH
50849: LD_INT 0
50851: PPUSH
50852: CALL 48418 0 3
50856: PPUSH
50857: LD_INT 30
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PPUSH
50867: CALL_OW 72
50871: ST_TO_ADDR
// if not factories then
50872: LD_VAR 0 6
50876: NOT
50877: IFFALSE 50881
// exit ;
50879: GO 51847
// for i in factories do
50881: LD_ADDR_VAR 0 8
50885: PUSH
50886: LD_VAR 0 6
50890: PUSH
50891: FOR_IN
50892: IFFALSE 50917
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50894: LD_ADDR_VAR 0 17
50898: PUSH
50899: LD_VAR 0 17
50903: PUSH
50904: LD_VAR 0 8
50908: PPUSH
50909: CALL_OW 478
50913: UNION
50914: ST_TO_ADDR
50915: GO 50891
50917: POP
50918: POP
// if not fac_list then
50919: LD_VAR 0 17
50923: NOT
50924: IFFALSE 50928
// exit ;
50926: GO 51847
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50928: LD_ADDR_VAR 0 5
50932: PUSH
50933: LD_INT 4
50935: PUSH
50936: LD_INT 5
50938: PUSH
50939: LD_INT 9
50941: PUSH
50942: LD_INT 10
50944: PUSH
50945: LD_INT 6
50947: PUSH
50948: LD_INT 7
50950: PUSH
50951: LD_INT 11
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 27
50965: PUSH
50966: LD_INT 28
50968: PUSH
50969: LD_INT 26
50971: PUSH
50972: LD_INT 30
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 43
50983: PUSH
50984: LD_INT 44
50986: PUSH
50987: LD_INT 46
50989: PUSH
50990: LD_INT 45
50992: PUSH
50993: LD_INT 47
50995: PUSH
50996: LD_INT 49
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: PUSH
51012: LD_VAR 0 12
51016: ARRAY
51017: ST_TO_ADDR
// list := list isect fac_list ;
51018: LD_ADDR_VAR 0 5
51022: PUSH
51023: LD_VAR 0 5
51027: PUSH
51028: LD_VAR 0 17
51032: ISECT
51033: ST_TO_ADDR
// if not list then
51034: LD_VAR 0 5
51038: NOT
51039: IFFALSE 51043
// exit ;
51041: GO 51847
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51043: LD_VAR 0 12
51047: PUSH
51048: LD_INT 3
51050: EQUAL
51051: PUSH
51052: LD_INT 49
51054: PUSH
51055: LD_VAR 0 5
51059: IN
51060: AND
51061: PUSH
51062: LD_INT 31
51064: PPUSH
51065: LD_VAR 0 16
51069: PPUSH
51070: CALL_OW 321
51074: PUSH
51075: LD_INT 2
51077: EQUAL
51078: AND
51079: IFFALSE 51139
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51081: LD_INT 22
51083: PUSH
51084: LD_VAR 0 16
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 35
51095: PUSH
51096: LD_INT 49
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 91
51105: PUSH
51106: LD_VAR 0 1
51110: PUSH
51111: LD_INT 10
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: PPUSH
51124: CALL_OW 69
51128: NOT
51129: IFFALSE 51139
// weapon := ru_time_lapser ;
51131: LD_ADDR_VAR 0 18
51135: PUSH
51136: LD_INT 49
51138: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51139: LD_VAR 0 12
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: IN
51154: PUSH
51155: LD_INT 11
51157: PUSH
51158: LD_VAR 0 5
51162: IN
51163: PUSH
51164: LD_INT 30
51166: PUSH
51167: LD_VAR 0 5
51171: IN
51172: OR
51173: AND
51174: PUSH
51175: LD_INT 6
51177: PPUSH
51178: LD_VAR 0 16
51182: PPUSH
51183: CALL_OW 321
51187: PUSH
51188: LD_INT 2
51190: EQUAL
51191: AND
51192: IFFALSE 51357
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51194: LD_INT 22
51196: PUSH
51197: LD_VAR 0 16
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 35
51211: PUSH
51212: LD_INT 11
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 35
51221: PUSH
51222: LD_INT 30
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 91
51236: PUSH
51237: LD_VAR 0 1
51241: PUSH
51242: LD_INT 18
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: LIST
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: PPUSH
51255: CALL_OW 69
51259: NOT
51260: PUSH
51261: LD_INT 22
51263: PUSH
51264: LD_VAR 0 16
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 30
51278: PUSH
51279: LD_INT 32
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 30
51288: PUSH
51289: LD_INT 33
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 91
51303: PUSH
51304: LD_VAR 0 1
51308: PUSH
51309: LD_INT 12
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: LIST
51321: PUSH
51322: EMPTY
51323: LIST
51324: PPUSH
51325: CALL_OW 69
51329: PUSH
51330: LD_INT 2
51332: GREATER
51333: AND
51334: IFFALSE 51357
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51336: LD_ADDR_VAR 0 18
51340: PUSH
51341: LD_INT 11
51343: PUSH
51344: LD_INT 30
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_VAR 0 12
51355: ARRAY
51356: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51357: LD_VAR 0 18
51361: NOT
51362: PUSH
51363: LD_INT 40
51365: PPUSH
51366: LD_VAR 0 16
51370: PPUSH
51371: CALL_OW 321
51375: PUSH
51376: LD_INT 2
51378: EQUAL
51379: AND
51380: PUSH
51381: LD_INT 7
51383: PUSH
51384: LD_VAR 0 5
51388: IN
51389: PUSH
51390: LD_INT 28
51392: PUSH
51393: LD_VAR 0 5
51397: IN
51398: OR
51399: PUSH
51400: LD_INT 45
51402: PUSH
51403: LD_VAR 0 5
51407: IN
51408: OR
51409: AND
51410: IFFALSE 51664
// begin hex := GetHexInfo ( x , y ) ;
51412: LD_ADDR_VAR 0 4
51416: PUSH
51417: LD_VAR 0 10
51421: PPUSH
51422: LD_VAR 0 11
51426: PPUSH
51427: CALL_OW 546
51431: ST_TO_ADDR
// if hex [ 1 ] then
51432: LD_VAR 0 4
51436: PUSH
51437: LD_INT 1
51439: ARRAY
51440: IFFALSE 51444
// exit ;
51442: GO 51847
// height := hex [ 2 ] ;
51444: LD_ADDR_VAR 0 15
51448: PUSH
51449: LD_VAR 0 4
51453: PUSH
51454: LD_INT 2
51456: ARRAY
51457: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51458: LD_ADDR_VAR 0 14
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 3
51471: PUSH
51472: LD_INT 5
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// for i in tmp do
51481: LD_ADDR_VAR 0 8
51485: PUSH
51486: LD_VAR 0 14
51490: PUSH
51491: FOR_IN
51492: IFFALSE 51662
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51494: LD_ADDR_VAR 0 9
51498: PUSH
51499: LD_VAR 0 10
51503: PPUSH
51504: LD_VAR 0 8
51508: PPUSH
51509: LD_INT 5
51511: PPUSH
51512: CALL_OW 272
51516: PUSH
51517: LD_VAR 0 11
51521: PPUSH
51522: LD_VAR 0 8
51526: PPUSH
51527: LD_INT 5
51529: PPUSH
51530: CALL_OW 273
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51539: LD_VAR 0 9
51543: PUSH
51544: LD_INT 1
51546: ARRAY
51547: PPUSH
51548: LD_VAR 0 9
51552: PUSH
51553: LD_INT 2
51555: ARRAY
51556: PPUSH
51557: CALL_OW 488
51561: IFFALSE 51660
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51563: LD_ADDR_VAR 0 4
51567: PUSH
51568: LD_VAR 0 9
51572: PUSH
51573: LD_INT 1
51575: ARRAY
51576: PPUSH
51577: LD_VAR 0 9
51581: PUSH
51582: LD_INT 2
51584: ARRAY
51585: PPUSH
51586: CALL_OW 546
51590: ST_TO_ADDR
// if hex [ 1 ] then
51591: LD_VAR 0 4
51595: PUSH
51596: LD_INT 1
51598: ARRAY
51599: IFFALSE 51603
// continue ;
51601: GO 51491
// h := hex [ 2 ] ;
51603: LD_ADDR_VAR 0 13
51607: PUSH
51608: LD_VAR 0 4
51612: PUSH
51613: LD_INT 2
51615: ARRAY
51616: ST_TO_ADDR
// if h + 7 < height then
51617: LD_VAR 0 13
51621: PUSH
51622: LD_INT 7
51624: PLUS
51625: PUSH
51626: LD_VAR 0 15
51630: LESS
51631: IFFALSE 51660
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51633: LD_ADDR_VAR 0 18
51637: PUSH
51638: LD_INT 7
51640: PUSH
51641: LD_INT 28
51643: PUSH
51644: LD_INT 45
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: LIST
51651: PUSH
51652: LD_VAR 0 12
51656: ARRAY
51657: ST_TO_ADDR
// break ;
51658: GO 51662
// end ; end ; end ;
51660: GO 51491
51662: POP
51663: POP
// end ; if not weapon then
51664: LD_VAR 0 18
51668: NOT
51669: IFFALSE 51729
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51671: LD_ADDR_VAR 0 5
51675: PUSH
51676: LD_VAR 0 5
51680: PUSH
51681: LD_INT 11
51683: PUSH
51684: LD_INT 30
51686: PUSH
51687: LD_INT 49
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: LIST
51694: DIFF
51695: ST_TO_ADDR
// if not list then
51696: LD_VAR 0 5
51700: NOT
51701: IFFALSE 51705
// exit ;
51703: GO 51847
// weapon := list [ rand ( 1 , list ) ] ;
51705: LD_ADDR_VAR 0 18
51709: PUSH
51710: LD_VAR 0 5
51714: PUSH
51715: LD_INT 1
51717: PPUSH
51718: LD_VAR 0 5
51722: PPUSH
51723: CALL_OW 12
51727: ARRAY
51728: ST_TO_ADDR
// end ; if weapon then
51729: LD_VAR 0 18
51733: IFFALSE 51847
// begin tmp := CostOfWeapon ( weapon ) ;
51735: LD_ADDR_VAR 0 14
51739: PUSH
51740: LD_VAR 0 18
51744: PPUSH
51745: CALL_OW 451
51749: ST_TO_ADDR
// j := GetBase ( tower ) ;
51750: LD_ADDR_VAR 0 9
51754: PUSH
51755: LD_VAR 0 1
51759: PPUSH
51760: CALL_OW 274
51764: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51765: LD_VAR 0 9
51769: PPUSH
51770: LD_INT 1
51772: PPUSH
51773: CALL_OW 275
51777: PUSH
51778: LD_VAR 0 14
51782: PUSH
51783: LD_INT 1
51785: ARRAY
51786: GREATEREQUAL
51787: PUSH
51788: LD_VAR 0 9
51792: PPUSH
51793: LD_INT 2
51795: PPUSH
51796: CALL_OW 275
51800: PUSH
51801: LD_VAR 0 14
51805: PUSH
51806: LD_INT 2
51808: ARRAY
51809: GREATEREQUAL
51810: AND
51811: PUSH
51812: LD_VAR 0 9
51816: PPUSH
51817: LD_INT 3
51819: PPUSH
51820: CALL_OW 275
51824: PUSH
51825: LD_VAR 0 14
51829: PUSH
51830: LD_INT 3
51832: ARRAY
51833: GREATEREQUAL
51834: AND
51835: IFFALSE 51847
// result := weapon ;
51837: LD_ADDR_VAR 0 3
51841: PUSH
51842: LD_VAR 0 18
51846: ST_TO_ADDR
// end ; end ;
51847: LD_VAR 0 3
51851: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51852: LD_INT 0
51854: PPUSH
51855: PPUSH
// result := true ;
51856: LD_ADDR_VAR 0 3
51860: PUSH
51861: LD_INT 1
51863: ST_TO_ADDR
// if array1 = array2 then
51864: LD_VAR 0 1
51868: PUSH
51869: LD_VAR 0 2
51873: EQUAL
51874: IFFALSE 51934
// begin for i = 1 to array1 do
51876: LD_ADDR_VAR 0 4
51880: PUSH
51881: DOUBLE
51882: LD_INT 1
51884: DEC
51885: ST_TO_ADDR
51886: LD_VAR 0 1
51890: PUSH
51891: FOR_TO
51892: IFFALSE 51930
// if array1 [ i ] <> array2 [ i ] then
51894: LD_VAR 0 1
51898: PUSH
51899: LD_VAR 0 4
51903: ARRAY
51904: PUSH
51905: LD_VAR 0 2
51909: PUSH
51910: LD_VAR 0 4
51914: ARRAY
51915: NONEQUAL
51916: IFFALSE 51928
// begin result := false ;
51918: LD_ADDR_VAR 0 3
51922: PUSH
51923: LD_INT 0
51925: ST_TO_ADDR
// break ;
51926: GO 51930
// end ;
51928: GO 51891
51930: POP
51931: POP
// end else
51932: GO 51942
// result := false ;
51934: LD_ADDR_VAR 0 3
51938: PUSH
51939: LD_INT 0
51941: ST_TO_ADDR
// end ;
51942: LD_VAR 0 3
51946: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51947: LD_INT 0
51949: PPUSH
51950: PPUSH
// if not array1 or not array2 then
51951: LD_VAR 0 1
51955: NOT
51956: PUSH
51957: LD_VAR 0 2
51961: NOT
51962: OR
51963: IFFALSE 51967
// exit ;
51965: GO 52031
// result := true ;
51967: LD_ADDR_VAR 0 3
51971: PUSH
51972: LD_INT 1
51974: ST_TO_ADDR
// for i = 1 to array1 do
51975: LD_ADDR_VAR 0 4
51979: PUSH
51980: DOUBLE
51981: LD_INT 1
51983: DEC
51984: ST_TO_ADDR
51985: LD_VAR 0 1
51989: PUSH
51990: FOR_TO
51991: IFFALSE 52029
// if array1 [ i ] <> array2 [ i ] then
51993: LD_VAR 0 1
51997: PUSH
51998: LD_VAR 0 4
52002: ARRAY
52003: PUSH
52004: LD_VAR 0 2
52008: PUSH
52009: LD_VAR 0 4
52013: ARRAY
52014: NONEQUAL
52015: IFFALSE 52027
// begin result := false ;
52017: LD_ADDR_VAR 0 3
52021: PUSH
52022: LD_INT 0
52024: ST_TO_ADDR
// break ;
52025: GO 52029
// end ;
52027: GO 51990
52029: POP
52030: POP
// end ;
52031: LD_VAR 0 3
52035: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52036: LD_INT 0
52038: PPUSH
52039: PPUSH
52040: PPUSH
// pom := GetBase ( fac ) ;
52041: LD_ADDR_VAR 0 5
52045: PUSH
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 274
52055: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52056: LD_ADDR_VAR 0 4
52060: PUSH
52061: LD_VAR 0 2
52065: PUSH
52066: LD_INT 1
52068: ARRAY
52069: PPUSH
52070: LD_VAR 0 2
52074: PUSH
52075: LD_INT 2
52077: ARRAY
52078: PPUSH
52079: LD_VAR 0 2
52083: PUSH
52084: LD_INT 3
52086: ARRAY
52087: PPUSH
52088: LD_VAR 0 2
52092: PUSH
52093: LD_INT 4
52095: ARRAY
52096: PPUSH
52097: CALL_OW 449
52101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52102: LD_ADDR_VAR 0 3
52106: PUSH
52107: LD_VAR 0 5
52111: PPUSH
52112: LD_INT 1
52114: PPUSH
52115: CALL_OW 275
52119: PUSH
52120: LD_VAR 0 4
52124: PUSH
52125: LD_INT 1
52127: ARRAY
52128: GREATEREQUAL
52129: PUSH
52130: LD_VAR 0 5
52134: PPUSH
52135: LD_INT 2
52137: PPUSH
52138: CALL_OW 275
52142: PUSH
52143: LD_VAR 0 4
52147: PUSH
52148: LD_INT 2
52150: ARRAY
52151: GREATEREQUAL
52152: AND
52153: PUSH
52154: LD_VAR 0 5
52158: PPUSH
52159: LD_INT 3
52161: PPUSH
52162: CALL_OW 275
52166: PUSH
52167: LD_VAR 0 4
52171: PUSH
52172: LD_INT 3
52174: ARRAY
52175: GREATEREQUAL
52176: AND
52177: ST_TO_ADDR
// end ;
52178: LD_VAR 0 3
52182: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52183: LD_INT 0
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
// pom := GetBase ( building ) ;
52189: LD_ADDR_VAR 0 3
52193: PUSH
52194: LD_VAR 0 1
52198: PPUSH
52199: CALL_OW 274
52203: ST_TO_ADDR
// if not pom then
52204: LD_VAR 0 3
52208: NOT
52209: IFFALSE 52213
// exit ;
52211: GO 52383
// btype := GetBType ( building ) ;
52213: LD_ADDR_VAR 0 5
52217: PUSH
52218: LD_VAR 0 1
52222: PPUSH
52223: CALL_OW 266
52227: ST_TO_ADDR
// if btype = b_armoury then
52228: LD_VAR 0 5
52232: PUSH
52233: LD_INT 4
52235: EQUAL
52236: IFFALSE 52246
// btype := b_barracks ;
52238: LD_ADDR_VAR 0 5
52242: PUSH
52243: LD_INT 5
52245: ST_TO_ADDR
// if btype = b_depot then
52246: LD_VAR 0 5
52250: PUSH
52251: LD_INT 0
52253: EQUAL
52254: IFFALSE 52264
// btype := b_warehouse ;
52256: LD_ADDR_VAR 0 5
52260: PUSH
52261: LD_INT 1
52263: ST_TO_ADDR
// if btype = b_workshop then
52264: LD_VAR 0 5
52268: PUSH
52269: LD_INT 2
52271: EQUAL
52272: IFFALSE 52282
// btype := b_factory ;
52274: LD_ADDR_VAR 0 5
52278: PUSH
52279: LD_INT 3
52281: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52282: LD_ADDR_VAR 0 4
52286: PUSH
52287: LD_VAR 0 5
52291: PPUSH
52292: LD_VAR 0 1
52296: PPUSH
52297: CALL_OW 248
52301: PPUSH
52302: CALL_OW 450
52306: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52307: LD_ADDR_VAR 0 2
52311: PUSH
52312: LD_VAR 0 3
52316: PPUSH
52317: LD_INT 1
52319: PPUSH
52320: CALL_OW 275
52324: PUSH
52325: LD_VAR 0 4
52329: PUSH
52330: LD_INT 1
52332: ARRAY
52333: GREATEREQUAL
52334: PUSH
52335: LD_VAR 0 3
52339: PPUSH
52340: LD_INT 2
52342: PPUSH
52343: CALL_OW 275
52347: PUSH
52348: LD_VAR 0 4
52352: PUSH
52353: LD_INT 2
52355: ARRAY
52356: GREATEREQUAL
52357: AND
52358: PUSH
52359: LD_VAR 0 3
52363: PPUSH
52364: LD_INT 3
52366: PPUSH
52367: CALL_OW 275
52371: PUSH
52372: LD_VAR 0 4
52376: PUSH
52377: LD_INT 3
52379: ARRAY
52380: GREATEREQUAL
52381: AND
52382: ST_TO_ADDR
// end ;
52383: LD_VAR 0 2
52387: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52388: LD_INT 0
52390: PPUSH
52391: PPUSH
52392: PPUSH
// pom := GetBase ( building ) ;
52393: LD_ADDR_VAR 0 4
52397: PUSH
52398: LD_VAR 0 1
52402: PPUSH
52403: CALL_OW 274
52407: ST_TO_ADDR
// if not pom then
52408: LD_VAR 0 4
52412: NOT
52413: IFFALSE 52417
// exit ;
52415: GO 52518
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52417: LD_ADDR_VAR 0 5
52421: PUSH
52422: LD_VAR 0 2
52426: PPUSH
52427: LD_VAR 0 1
52431: PPUSH
52432: CALL_OW 248
52436: PPUSH
52437: CALL_OW 450
52441: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52442: LD_ADDR_VAR 0 3
52446: PUSH
52447: LD_VAR 0 4
52451: PPUSH
52452: LD_INT 1
52454: PPUSH
52455: CALL_OW 275
52459: PUSH
52460: LD_VAR 0 5
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: GREATEREQUAL
52469: PUSH
52470: LD_VAR 0 4
52474: PPUSH
52475: LD_INT 2
52477: PPUSH
52478: CALL_OW 275
52482: PUSH
52483: LD_VAR 0 5
52487: PUSH
52488: LD_INT 2
52490: ARRAY
52491: GREATEREQUAL
52492: AND
52493: PUSH
52494: LD_VAR 0 4
52498: PPUSH
52499: LD_INT 3
52501: PPUSH
52502: CALL_OW 275
52506: PUSH
52507: LD_VAR 0 5
52511: PUSH
52512: LD_INT 3
52514: ARRAY
52515: GREATEREQUAL
52516: AND
52517: ST_TO_ADDR
// end ;
52518: LD_VAR 0 3
52522: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52523: LD_INT 0
52525: PPUSH
52526: PPUSH
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
52534: PPUSH
52535: PPUSH
// result := false ;
52536: LD_ADDR_VAR 0 8
52540: PUSH
52541: LD_INT 0
52543: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52544: LD_VAR 0 5
52548: NOT
52549: PUSH
52550: LD_VAR 0 1
52554: NOT
52555: OR
52556: PUSH
52557: LD_VAR 0 2
52561: NOT
52562: OR
52563: PUSH
52564: LD_VAR 0 3
52568: NOT
52569: OR
52570: IFFALSE 52574
// exit ;
52572: GO 53388
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52574: LD_ADDR_VAR 0 14
52578: PUSH
52579: LD_VAR 0 1
52583: PPUSH
52584: LD_VAR 0 2
52588: PPUSH
52589: LD_VAR 0 3
52593: PPUSH
52594: LD_VAR 0 4
52598: PPUSH
52599: LD_VAR 0 5
52603: PUSH
52604: LD_INT 1
52606: ARRAY
52607: PPUSH
52608: CALL_OW 248
52612: PPUSH
52613: LD_INT 0
52615: PPUSH
52616: CALL 54641 0 6
52620: ST_TO_ADDR
// if not hexes then
52621: LD_VAR 0 14
52625: NOT
52626: IFFALSE 52630
// exit ;
52628: GO 53388
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52630: LD_ADDR_VAR 0 17
52634: PUSH
52635: LD_VAR 0 5
52639: PPUSH
52640: LD_INT 22
52642: PUSH
52643: LD_VAR 0 13
52647: PPUSH
52648: CALL_OW 255
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 30
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 30
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PPUSH
52689: CALL_OW 72
52693: ST_TO_ADDR
// for i = 1 to hexes do
52694: LD_ADDR_VAR 0 9
52698: PUSH
52699: DOUBLE
52700: LD_INT 1
52702: DEC
52703: ST_TO_ADDR
52704: LD_VAR 0 14
52708: PUSH
52709: FOR_TO
52710: IFFALSE 53386
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52712: LD_ADDR_VAR 0 13
52716: PUSH
52717: LD_VAR 0 14
52721: PUSH
52722: LD_VAR 0 9
52726: ARRAY
52727: PUSH
52728: LD_INT 1
52730: ARRAY
52731: PPUSH
52732: LD_VAR 0 14
52736: PUSH
52737: LD_VAR 0 9
52741: ARRAY
52742: PUSH
52743: LD_INT 2
52745: ARRAY
52746: PPUSH
52747: CALL_OW 428
52751: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52752: LD_VAR 0 14
52756: PUSH
52757: LD_VAR 0 9
52761: ARRAY
52762: PUSH
52763: LD_INT 1
52765: ARRAY
52766: PPUSH
52767: LD_VAR 0 14
52771: PUSH
52772: LD_VAR 0 9
52776: ARRAY
52777: PUSH
52778: LD_INT 2
52780: ARRAY
52781: PPUSH
52782: CALL_OW 351
52786: PUSH
52787: LD_VAR 0 14
52791: PUSH
52792: LD_VAR 0 9
52796: ARRAY
52797: PUSH
52798: LD_INT 1
52800: ARRAY
52801: PPUSH
52802: LD_VAR 0 14
52806: PUSH
52807: LD_VAR 0 9
52811: ARRAY
52812: PUSH
52813: LD_INT 2
52815: ARRAY
52816: PPUSH
52817: CALL_OW 488
52821: NOT
52822: OR
52823: PUSH
52824: LD_VAR 0 13
52828: PPUSH
52829: CALL_OW 247
52833: PUSH
52834: LD_INT 3
52836: EQUAL
52837: OR
52838: IFFALSE 52844
// exit ;
52840: POP
52841: POP
52842: GO 53388
// if not tmp then
52844: LD_VAR 0 13
52848: NOT
52849: IFFALSE 52853
// continue ;
52851: GO 52709
// result := true ;
52853: LD_ADDR_VAR 0 8
52857: PUSH
52858: LD_INT 1
52860: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52861: LD_VAR 0 6
52865: PUSH
52866: LD_VAR 0 13
52870: PPUSH
52871: CALL_OW 247
52875: PUSH
52876: LD_INT 2
52878: EQUAL
52879: AND
52880: PUSH
52881: LD_VAR 0 13
52885: PPUSH
52886: CALL_OW 263
52890: PUSH
52891: LD_INT 1
52893: EQUAL
52894: AND
52895: IFFALSE 53059
// begin if IsDrivenBy ( tmp ) then
52897: LD_VAR 0 13
52901: PPUSH
52902: CALL_OW 311
52906: IFFALSE 52910
// continue ;
52908: GO 52709
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52910: LD_VAR 0 6
52914: PPUSH
52915: LD_INT 3
52917: PUSH
52918: LD_INT 60
52920: PUSH
52921: EMPTY
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 3
52930: PUSH
52931: LD_INT 55
52933: PUSH
52934: EMPTY
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PPUSH
52945: CALL_OW 72
52949: IFFALSE 53057
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52951: LD_ADDR_VAR 0 18
52955: PUSH
52956: LD_VAR 0 6
52960: PPUSH
52961: LD_INT 3
52963: PUSH
52964: LD_INT 60
52966: PUSH
52967: EMPTY
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 3
52976: PUSH
52977: LD_INT 55
52979: PUSH
52980: EMPTY
52981: LIST
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PPUSH
52991: CALL_OW 72
52995: PUSH
52996: LD_INT 1
52998: ARRAY
52999: ST_TO_ADDR
// if IsInUnit ( driver ) then
53000: LD_VAR 0 18
53004: PPUSH
53005: CALL_OW 310
53009: IFFALSE 53020
// ComExit ( driver ) ;
53011: LD_VAR 0 18
53015: PPUSH
53016: CALL 78433 0 1
// AddComEnterUnit ( driver , tmp ) ;
53020: LD_VAR 0 18
53024: PPUSH
53025: LD_VAR 0 13
53029: PPUSH
53030: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53034: LD_VAR 0 18
53038: PPUSH
53039: LD_VAR 0 7
53043: PPUSH
53044: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53048: LD_VAR 0 18
53052: PPUSH
53053: CALL_OW 181
// end ; continue ;
53057: GO 52709
// end ; if not cleaners or not tmp in cleaners then
53059: LD_VAR 0 6
53063: NOT
53064: PUSH
53065: LD_VAR 0 13
53069: PUSH
53070: LD_VAR 0 6
53074: IN
53075: NOT
53076: OR
53077: IFFALSE 53384
// begin if dep then
53079: LD_VAR 0 17
53083: IFFALSE 53219
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53085: LD_ADDR_VAR 0 16
53089: PUSH
53090: LD_VAR 0 17
53094: PUSH
53095: LD_INT 1
53097: ARRAY
53098: PPUSH
53099: CALL_OW 250
53103: PPUSH
53104: LD_VAR 0 17
53108: PUSH
53109: LD_INT 1
53111: ARRAY
53112: PPUSH
53113: CALL_OW 254
53117: PPUSH
53118: LD_INT 5
53120: PPUSH
53121: CALL_OW 272
53125: PUSH
53126: LD_VAR 0 17
53130: PUSH
53131: LD_INT 1
53133: ARRAY
53134: PPUSH
53135: CALL_OW 251
53139: PPUSH
53140: LD_VAR 0 17
53144: PUSH
53145: LD_INT 1
53147: ARRAY
53148: PPUSH
53149: CALL_OW 254
53153: PPUSH
53154: LD_INT 5
53156: PPUSH
53157: CALL_OW 273
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53166: LD_VAR 0 16
53170: PUSH
53171: LD_INT 1
53173: ARRAY
53174: PPUSH
53175: LD_VAR 0 16
53179: PUSH
53180: LD_INT 2
53182: ARRAY
53183: PPUSH
53184: CALL_OW 488
53188: IFFALSE 53219
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53190: LD_VAR 0 13
53194: PPUSH
53195: LD_VAR 0 16
53199: PUSH
53200: LD_INT 1
53202: ARRAY
53203: PPUSH
53204: LD_VAR 0 16
53208: PUSH
53209: LD_INT 2
53211: ARRAY
53212: PPUSH
53213: CALL_OW 111
// continue ;
53217: GO 52709
// end ; end ; r := GetDir ( tmp ) ;
53219: LD_ADDR_VAR 0 15
53223: PUSH
53224: LD_VAR 0 13
53228: PPUSH
53229: CALL_OW 254
53233: ST_TO_ADDR
// if r = 5 then
53234: LD_VAR 0 15
53238: PUSH
53239: LD_INT 5
53241: EQUAL
53242: IFFALSE 53252
// r := 0 ;
53244: LD_ADDR_VAR 0 15
53248: PUSH
53249: LD_INT 0
53251: ST_TO_ADDR
// for j = r to 5 do
53252: LD_ADDR_VAR 0 10
53256: PUSH
53257: DOUBLE
53258: LD_VAR 0 15
53262: DEC
53263: ST_TO_ADDR
53264: LD_INT 5
53266: PUSH
53267: FOR_TO
53268: IFFALSE 53382
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53270: LD_ADDR_VAR 0 11
53274: PUSH
53275: LD_VAR 0 13
53279: PPUSH
53280: CALL_OW 250
53284: PPUSH
53285: LD_VAR 0 10
53289: PPUSH
53290: LD_INT 2
53292: PPUSH
53293: CALL_OW 272
53297: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53298: LD_ADDR_VAR 0 12
53302: PUSH
53303: LD_VAR 0 13
53307: PPUSH
53308: CALL_OW 251
53312: PPUSH
53313: LD_VAR 0 10
53317: PPUSH
53318: LD_INT 2
53320: PPUSH
53321: CALL_OW 273
53325: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53326: LD_VAR 0 11
53330: PPUSH
53331: LD_VAR 0 12
53335: PPUSH
53336: CALL_OW 488
53340: PUSH
53341: LD_VAR 0 11
53345: PPUSH
53346: LD_VAR 0 12
53350: PPUSH
53351: CALL_OW 428
53355: NOT
53356: AND
53357: IFFALSE 53380
// begin ComMoveXY ( tmp , _x , _y ) ;
53359: LD_VAR 0 13
53363: PPUSH
53364: LD_VAR 0 11
53368: PPUSH
53369: LD_VAR 0 12
53373: PPUSH
53374: CALL_OW 111
// break ;
53378: GO 53382
// end ; end ;
53380: GO 53267
53382: POP
53383: POP
// end ; end ;
53384: GO 52709
53386: POP
53387: POP
// end ;
53388: LD_VAR 0 8
53392: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53393: LD_INT 0
53395: PPUSH
// result := true ;
53396: LD_ADDR_VAR 0 3
53400: PUSH
53401: LD_INT 1
53403: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53404: LD_VAR 0 2
53408: PUSH
53409: LD_INT 24
53411: DOUBLE
53412: EQUAL
53413: IFTRUE 53423
53415: LD_INT 33
53417: DOUBLE
53418: EQUAL
53419: IFTRUE 53423
53421: GO 53448
53423: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53424: LD_ADDR_VAR 0 3
53428: PUSH
53429: LD_INT 32
53431: PPUSH
53432: LD_VAR 0 1
53436: PPUSH
53437: CALL_OW 321
53441: PUSH
53442: LD_INT 2
53444: EQUAL
53445: ST_TO_ADDR
53446: GO 53764
53448: LD_INT 20
53450: DOUBLE
53451: EQUAL
53452: IFTRUE 53456
53454: GO 53481
53456: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53457: LD_ADDR_VAR 0 3
53461: PUSH
53462: LD_INT 6
53464: PPUSH
53465: LD_VAR 0 1
53469: PPUSH
53470: CALL_OW 321
53474: PUSH
53475: LD_INT 2
53477: EQUAL
53478: ST_TO_ADDR
53479: GO 53764
53481: LD_INT 22
53483: DOUBLE
53484: EQUAL
53485: IFTRUE 53495
53487: LD_INT 36
53489: DOUBLE
53490: EQUAL
53491: IFTRUE 53495
53493: GO 53520
53495: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53496: LD_ADDR_VAR 0 3
53500: PUSH
53501: LD_INT 15
53503: PPUSH
53504: LD_VAR 0 1
53508: PPUSH
53509: CALL_OW 321
53513: PUSH
53514: LD_INT 2
53516: EQUAL
53517: ST_TO_ADDR
53518: GO 53764
53520: LD_INT 30
53522: DOUBLE
53523: EQUAL
53524: IFTRUE 53528
53526: GO 53553
53528: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53529: LD_ADDR_VAR 0 3
53533: PUSH
53534: LD_INT 20
53536: PPUSH
53537: LD_VAR 0 1
53541: PPUSH
53542: CALL_OW 321
53546: PUSH
53547: LD_INT 2
53549: EQUAL
53550: ST_TO_ADDR
53551: GO 53764
53553: LD_INT 28
53555: DOUBLE
53556: EQUAL
53557: IFTRUE 53567
53559: LD_INT 21
53561: DOUBLE
53562: EQUAL
53563: IFTRUE 53567
53565: GO 53592
53567: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53568: LD_ADDR_VAR 0 3
53572: PUSH
53573: LD_INT 21
53575: PPUSH
53576: LD_VAR 0 1
53580: PPUSH
53581: CALL_OW 321
53585: PUSH
53586: LD_INT 2
53588: EQUAL
53589: ST_TO_ADDR
53590: GO 53764
53592: LD_INT 16
53594: DOUBLE
53595: EQUAL
53596: IFTRUE 53600
53598: GO 53625
53600: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53601: LD_ADDR_VAR 0 3
53605: PUSH
53606: LD_INT 84
53608: PPUSH
53609: LD_VAR 0 1
53613: PPUSH
53614: CALL_OW 321
53618: PUSH
53619: LD_INT 2
53621: EQUAL
53622: ST_TO_ADDR
53623: GO 53764
53625: LD_INT 19
53627: DOUBLE
53628: EQUAL
53629: IFTRUE 53639
53631: LD_INT 23
53633: DOUBLE
53634: EQUAL
53635: IFTRUE 53639
53637: GO 53664
53639: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53640: LD_ADDR_VAR 0 3
53644: PUSH
53645: LD_INT 83
53647: PPUSH
53648: LD_VAR 0 1
53652: PPUSH
53653: CALL_OW 321
53657: PUSH
53658: LD_INT 2
53660: EQUAL
53661: ST_TO_ADDR
53662: GO 53764
53664: LD_INT 17
53666: DOUBLE
53667: EQUAL
53668: IFTRUE 53672
53670: GO 53697
53672: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53673: LD_ADDR_VAR 0 3
53677: PUSH
53678: LD_INT 39
53680: PPUSH
53681: LD_VAR 0 1
53685: PPUSH
53686: CALL_OW 321
53690: PUSH
53691: LD_INT 2
53693: EQUAL
53694: ST_TO_ADDR
53695: GO 53764
53697: LD_INT 18
53699: DOUBLE
53700: EQUAL
53701: IFTRUE 53705
53703: GO 53730
53705: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53706: LD_ADDR_VAR 0 3
53710: PUSH
53711: LD_INT 40
53713: PPUSH
53714: LD_VAR 0 1
53718: PPUSH
53719: CALL_OW 321
53723: PUSH
53724: LD_INT 2
53726: EQUAL
53727: ST_TO_ADDR
53728: GO 53764
53730: LD_INT 27
53732: DOUBLE
53733: EQUAL
53734: IFTRUE 53738
53736: GO 53763
53738: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53739: LD_ADDR_VAR 0 3
53743: PUSH
53744: LD_INT 35
53746: PPUSH
53747: LD_VAR 0 1
53751: PPUSH
53752: CALL_OW 321
53756: PUSH
53757: LD_INT 2
53759: EQUAL
53760: ST_TO_ADDR
53761: GO 53764
53763: POP
// end ;
53764: LD_VAR 0 3
53768: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53769: LD_INT 0
53771: PPUSH
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
53781: PPUSH
// result := false ;
53782: LD_ADDR_VAR 0 6
53786: PUSH
53787: LD_INT 0
53789: ST_TO_ADDR
// if btype = b_depot then
53790: LD_VAR 0 2
53794: PUSH
53795: LD_INT 0
53797: EQUAL
53798: IFFALSE 53810
// begin result := true ;
53800: LD_ADDR_VAR 0 6
53804: PUSH
53805: LD_INT 1
53807: ST_TO_ADDR
// exit ;
53808: GO 54636
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53810: LD_VAR 0 1
53814: NOT
53815: PUSH
53816: LD_VAR 0 1
53820: PPUSH
53821: CALL_OW 266
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: IN
53836: NOT
53837: OR
53838: PUSH
53839: LD_VAR 0 2
53843: NOT
53844: OR
53845: PUSH
53846: LD_VAR 0 5
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: LD_INT 5
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: IN
53877: NOT
53878: OR
53879: PUSH
53880: LD_VAR 0 3
53884: PPUSH
53885: LD_VAR 0 4
53889: PPUSH
53890: CALL_OW 488
53894: NOT
53895: OR
53896: IFFALSE 53900
// exit ;
53898: GO 54636
// side := GetSide ( depot ) ;
53900: LD_ADDR_VAR 0 9
53904: PUSH
53905: LD_VAR 0 1
53909: PPUSH
53910: CALL_OW 255
53914: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53915: LD_VAR 0 9
53919: PPUSH
53920: LD_VAR 0 2
53924: PPUSH
53925: CALL 53393 0 2
53929: NOT
53930: IFFALSE 53934
// exit ;
53932: GO 54636
// pom := GetBase ( depot ) ;
53934: LD_ADDR_VAR 0 10
53938: PUSH
53939: LD_VAR 0 1
53943: PPUSH
53944: CALL_OW 274
53948: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53949: LD_ADDR_VAR 0 11
53953: PUSH
53954: LD_VAR 0 2
53958: PPUSH
53959: LD_VAR 0 1
53963: PPUSH
53964: CALL_OW 248
53968: PPUSH
53969: CALL_OW 450
53973: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53974: LD_VAR 0 10
53978: PPUSH
53979: LD_INT 1
53981: PPUSH
53982: CALL_OW 275
53986: PUSH
53987: LD_VAR 0 11
53991: PUSH
53992: LD_INT 1
53994: ARRAY
53995: GREATEREQUAL
53996: PUSH
53997: LD_VAR 0 10
54001: PPUSH
54002: LD_INT 2
54004: PPUSH
54005: CALL_OW 275
54009: PUSH
54010: LD_VAR 0 11
54014: PUSH
54015: LD_INT 2
54017: ARRAY
54018: GREATEREQUAL
54019: AND
54020: PUSH
54021: LD_VAR 0 10
54025: PPUSH
54026: LD_INT 3
54028: PPUSH
54029: CALL_OW 275
54033: PUSH
54034: LD_VAR 0 11
54038: PUSH
54039: LD_INT 3
54041: ARRAY
54042: GREATEREQUAL
54043: AND
54044: NOT
54045: IFFALSE 54049
// exit ;
54047: GO 54636
// if GetBType ( depot ) = b_depot then
54049: LD_VAR 0 1
54053: PPUSH
54054: CALL_OW 266
54058: PUSH
54059: LD_INT 0
54061: EQUAL
54062: IFFALSE 54074
// dist := 28 else
54064: LD_ADDR_VAR 0 14
54068: PUSH
54069: LD_INT 28
54071: ST_TO_ADDR
54072: GO 54082
// dist := 36 ;
54074: LD_ADDR_VAR 0 14
54078: PUSH
54079: LD_INT 36
54081: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54082: LD_VAR 0 1
54086: PPUSH
54087: LD_VAR 0 3
54091: PPUSH
54092: LD_VAR 0 4
54096: PPUSH
54097: CALL_OW 297
54101: PUSH
54102: LD_VAR 0 14
54106: GREATER
54107: IFFALSE 54111
// exit ;
54109: GO 54636
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54111: LD_ADDR_VAR 0 12
54115: PUSH
54116: LD_VAR 0 2
54120: PPUSH
54121: LD_VAR 0 3
54125: PPUSH
54126: LD_VAR 0 4
54130: PPUSH
54131: LD_VAR 0 5
54135: PPUSH
54136: LD_VAR 0 1
54140: PPUSH
54141: CALL_OW 248
54145: PPUSH
54146: LD_INT 0
54148: PPUSH
54149: CALL 54641 0 6
54153: ST_TO_ADDR
// if not hexes then
54154: LD_VAR 0 12
54158: NOT
54159: IFFALSE 54163
// exit ;
54161: GO 54636
// hex := GetHexInfo ( x , y ) ;
54163: LD_ADDR_VAR 0 15
54167: PUSH
54168: LD_VAR 0 3
54172: PPUSH
54173: LD_VAR 0 4
54177: PPUSH
54178: CALL_OW 546
54182: ST_TO_ADDR
// if hex [ 1 ] then
54183: LD_VAR 0 15
54187: PUSH
54188: LD_INT 1
54190: ARRAY
54191: IFFALSE 54195
// exit ;
54193: GO 54636
// height := hex [ 2 ] ;
54195: LD_ADDR_VAR 0 13
54199: PUSH
54200: LD_VAR 0 15
54204: PUSH
54205: LD_INT 2
54207: ARRAY
54208: ST_TO_ADDR
// for i = 1 to hexes do
54209: LD_ADDR_VAR 0 7
54213: PUSH
54214: DOUBLE
54215: LD_INT 1
54217: DEC
54218: ST_TO_ADDR
54219: LD_VAR 0 12
54223: PUSH
54224: FOR_TO
54225: IFFALSE 54555
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54227: LD_VAR 0 12
54231: PUSH
54232: LD_VAR 0 7
54236: ARRAY
54237: PUSH
54238: LD_INT 1
54240: ARRAY
54241: PPUSH
54242: LD_VAR 0 12
54246: PUSH
54247: LD_VAR 0 7
54251: ARRAY
54252: PUSH
54253: LD_INT 2
54255: ARRAY
54256: PPUSH
54257: CALL_OW 488
54261: NOT
54262: PUSH
54263: LD_VAR 0 12
54267: PUSH
54268: LD_VAR 0 7
54272: ARRAY
54273: PUSH
54274: LD_INT 1
54276: ARRAY
54277: PPUSH
54278: LD_VAR 0 12
54282: PUSH
54283: LD_VAR 0 7
54287: ARRAY
54288: PUSH
54289: LD_INT 2
54291: ARRAY
54292: PPUSH
54293: CALL_OW 428
54297: PUSH
54298: LD_INT 0
54300: GREATER
54301: OR
54302: PUSH
54303: LD_VAR 0 12
54307: PUSH
54308: LD_VAR 0 7
54312: ARRAY
54313: PUSH
54314: LD_INT 1
54316: ARRAY
54317: PPUSH
54318: LD_VAR 0 12
54322: PUSH
54323: LD_VAR 0 7
54327: ARRAY
54328: PUSH
54329: LD_INT 2
54331: ARRAY
54332: PPUSH
54333: CALL_OW 351
54337: OR
54338: IFFALSE 54344
// exit ;
54340: POP
54341: POP
54342: GO 54636
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54344: LD_ADDR_VAR 0 8
54348: PUSH
54349: LD_VAR 0 12
54353: PUSH
54354: LD_VAR 0 7
54358: ARRAY
54359: PUSH
54360: LD_INT 1
54362: ARRAY
54363: PPUSH
54364: LD_VAR 0 12
54368: PUSH
54369: LD_VAR 0 7
54373: ARRAY
54374: PUSH
54375: LD_INT 2
54377: ARRAY
54378: PPUSH
54379: CALL_OW 546
54383: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54384: LD_VAR 0 8
54388: PUSH
54389: LD_INT 1
54391: ARRAY
54392: PUSH
54393: LD_VAR 0 8
54397: PUSH
54398: LD_INT 2
54400: ARRAY
54401: PUSH
54402: LD_VAR 0 13
54406: PUSH
54407: LD_INT 2
54409: PLUS
54410: GREATER
54411: OR
54412: PUSH
54413: LD_VAR 0 8
54417: PUSH
54418: LD_INT 2
54420: ARRAY
54421: PUSH
54422: LD_VAR 0 13
54426: PUSH
54427: LD_INT 2
54429: MINUS
54430: LESS
54431: OR
54432: PUSH
54433: LD_VAR 0 8
54437: PUSH
54438: LD_INT 3
54440: ARRAY
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 8
54447: PUSH
54448: LD_INT 9
54450: PUSH
54451: LD_INT 10
54453: PUSH
54454: LD_INT 11
54456: PUSH
54457: LD_INT 12
54459: PUSH
54460: LD_INT 13
54462: PUSH
54463: LD_INT 16
54465: PUSH
54466: LD_INT 17
54468: PUSH
54469: LD_INT 18
54471: PUSH
54472: LD_INT 19
54474: PUSH
54475: LD_INT 20
54477: PUSH
54478: LD_INT 21
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: IN
54496: NOT
54497: OR
54498: PUSH
54499: LD_VAR 0 8
54503: PUSH
54504: LD_INT 5
54506: ARRAY
54507: NOT
54508: OR
54509: PUSH
54510: LD_VAR 0 8
54514: PUSH
54515: LD_INT 6
54517: ARRAY
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 7
54527: PUSH
54528: LD_INT 9
54530: PUSH
54531: LD_INT 10
54533: PUSH
54534: LD_INT 11
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: IN
54545: NOT
54546: OR
54547: IFFALSE 54553
// exit ;
54549: POP
54550: POP
54551: GO 54636
// end ;
54553: GO 54224
54555: POP
54556: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54557: LD_VAR 0 9
54561: PPUSH
54562: LD_VAR 0 3
54566: PPUSH
54567: LD_VAR 0 4
54571: PPUSH
54572: LD_INT 20
54574: PPUSH
54575: CALL 46559 0 4
54579: PUSH
54580: LD_INT 4
54582: ARRAY
54583: IFFALSE 54587
// exit ;
54585: GO 54636
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54587: LD_VAR 0 2
54591: PUSH
54592: LD_INT 29
54594: PUSH
54595: LD_INT 30
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: IN
54602: PUSH
54603: LD_VAR 0 3
54607: PPUSH
54608: LD_VAR 0 4
54612: PPUSH
54613: LD_VAR 0 9
54617: PPUSH
54618: CALL_OW 440
54622: NOT
54623: AND
54624: IFFALSE 54628
// exit ;
54626: GO 54636
// result := true ;
54628: LD_ADDR_VAR 0 6
54632: PUSH
54633: LD_INT 1
54635: ST_TO_ADDR
// end ;
54636: LD_VAR 0 6
54640: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54641: LD_INT 0
54643: PPUSH
54644: PPUSH
54645: PPUSH
54646: PPUSH
54647: PPUSH
54648: PPUSH
54649: PPUSH
54650: PPUSH
54651: PPUSH
54652: PPUSH
54653: PPUSH
54654: PPUSH
54655: PPUSH
54656: PPUSH
54657: PPUSH
54658: PPUSH
54659: PPUSH
54660: PPUSH
54661: PPUSH
54662: PPUSH
54663: PPUSH
54664: PPUSH
54665: PPUSH
54666: PPUSH
54667: PPUSH
54668: PPUSH
54669: PPUSH
54670: PPUSH
54671: PPUSH
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
54676: PPUSH
54677: PPUSH
54678: PPUSH
54679: PPUSH
54680: PPUSH
54681: PPUSH
54682: PPUSH
54683: PPUSH
54684: PPUSH
54685: PPUSH
54686: PPUSH
54687: PPUSH
54688: PPUSH
54689: PPUSH
54690: PPUSH
54691: PPUSH
54692: PPUSH
54693: PPUSH
54694: PPUSH
54695: PPUSH
54696: PPUSH
54697: PPUSH
54698: PPUSH
54699: PPUSH
54700: PPUSH
// result = [ ] ;
54701: LD_ADDR_VAR 0 7
54705: PUSH
54706: EMPTY
54707: ST_TO_ADDR
// temp_list = [ ] ;
54708: LD_ADDR_VAR 0 9
54712: PUSH
54713: EMPTY
54714: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54715: LD_VAR 0 4
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: LD_INT 4
54734: PUSH
54735: LD_INT 5
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: IN
54746: NOT
54747: PUSH
54748: LD_VAR 0 1
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: IN
54763: PUSH
54764: LD_VAR 0 5
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: IN
54783: NOT
54784: AND
54785: OR
54786: IFFALSE 54790
// exit ;
54788: GO 73181
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54790: LD_VAR 0 1
54794: PUSH
54795: LD_INT 6
54797: PUSH
54798: LD_INT 7
54800: PUSH
54801: LD_INT 8
54803: PUSH
54804: LD_INT 13
54806: PUSH
54807: LD_INT 12
54809: PUSH
54810: LD_INT 15
54812: PUSH
54813: LD_INT 11
54815: PUSH
54816: LD_INT 14
54818: PUSH
54819: LD_INT 10
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: IN
54833: IFFALSE 54843
// btype = b_lab ;
54835: LD_ADDR_VAR 0 1
54839: PUSH
54840: LD_INT 6
54842: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54843: LD_VAR 0 6
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: IN
54862: NOT
54863: PUSH
54864: LD_VAR 0 1
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: LD_INT 6
54883: PUSH
54884: LD_INT 36
54886: PUSH
54887: LD_INT 4
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: LD_INT 31
54895: PUSH
54896: LD_INT 32
54898: PUSH
54899: LD_INT 33
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: IN
54915: NOT
54916: PUSH
54917: LD_VAR 0 6
54921: PUSH
54922: LD_INT 1
54924: EQUAL
54925: AND
54926: OR
54927: PUSH
54928: LD_VAR 0 1
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 3
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: IN
54943: NOT
54944: PUSH
54945: LD_VAR 0 6
54949: PUSH
54950: LD_INT 2
54952: EQUAL
54953: AND
54954: OR
54955: IFFALSE 54965
// mode = 0 ;
54957: LD_ADDR_VAR 0 6
54961: PUSH
54962: LD_INT 0
54964: ST_TO_ADDR
// case mode of 0 :
54965: LD_VAR 0 6
54969: PUSH
54970: LD_INT 0
54972: DOUBLE
54973: EQUAL
54974: IFTRUE 54978
54976: GO 66431
54978: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54979: LD_ADDR_VAR 0 11
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 3
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 3
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55172: LD_ADDR_VAR 0 12
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55368: LD_ADDR_VAR 0 13
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55567: LD_ADDR_VAR 0 14
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55763: LD_ADDR_VAR 0 15
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55956: LD_ADDR_VAR 0 16
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 3
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56149: LD_ADDR_VAR 0 17
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56379: LD_ADDR_VAR 0 18
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 2
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56609: LD_ADDR_VAR 0 19
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56839: LD_ADDR_VAR 0 20
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 2
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57069: LD_ADDR_VAR 0 21
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 2
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57299: LD_ADDR_VAR 0 22
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57529: LD_ADDR_VAR 0 23
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 3
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57809: LD_ADDR_VAR 0 24
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 2
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58085: LD_ADDR_VAR 0 25
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 2
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 3
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58359: LD_ADDR_VAR 0 26
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: NEG
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 3
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58635: LD_ADDR_VAR 0 27
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58915: LD_ADDR_VAR 0 28
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 3
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 3
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 3
59150: NEG
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59197: LD_ADDR_VAR 0 29
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: NEG
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 3
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59476: LD_ADDR_VAR 0 30
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59754: LD_ADDR_VAR 0 31
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 3
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60032: LD_ADDR_VAR 0 32
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60310: LD_ADDR_VAR 0 33
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: LD_INT 3
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: NEG
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60589: LD_ADDR_VAR 0 34
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 2
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 2
60745: NEG
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: LD_INT 3
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 3
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60869: LD_ADDR_VAR 0 35
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60981: LD_ADDR_VAR 0 36
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61093: LD_ADDR_VAR 0 37
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61205: LD_ADDR_VAR 0 38
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61317: LD_ADDR_VAR 0 39
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61429: LD_ADDR_VAR 0 40
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61541: LD_ADDR_VAR 0 41
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 1
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 3
61815: NEG
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: LD_INT 2
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: LD_INT 3
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61891: LD_ADDR_VAR 0 42
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: LD_INT 2
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: LD_INT 3
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 2
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 3
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 3
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 3
62200: NEG
62201: PUSH
62202: LD_INT 3
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62241: LD_ADDR_VAR 0 43
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 2
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 3
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: LD_INT 3
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 3
62537: NEG
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62589: LD_ADDR_VAR 0 44
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 3
62863: NEG
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 3
62874: NEG
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: NEG
62899: PUSH
62900: LD_INT 3
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62939: LD_ADDR_VAR 0 45
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 2
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 2
63129: NEG
63130: PUSH
63131: LD_INT 3
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: LD_INT 3
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 3
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 3
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 3
63236: NEG
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 3
63248: NEG
63249: PUSH
63250: LD_INT 3
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63289: LD_ADDR_VAR 0 46
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 1
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 2
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 3
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 3
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 3
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: LD_INT 3
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: NEG
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63637: LD_ADDR_VAR 0 47
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 2
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63788: LD_ADDR_VAR 0 48
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: LD_INT 1
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63935: LD_ADDR_VAR 0 49
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64079: LD_ADDR_VAR 0 50
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: NEG
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: LD_INT 2
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 2
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: NEG
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64223: LD_ADDR_VAR 0 51
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: LD_INT 0
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: NEG
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64370: LD_ADDR_VAR 0 52
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 2
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 2
64474: NEG
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64521: LD_ADDR_VAR 0 53
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: LD_INT 2
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 2
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 2
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: LD_INT 2
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64751: LD_ADDR_VAR 0 54
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 2
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 2
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 2
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: NEG
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64981: LD_ADDR_VAR 0 55
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: LD_INT 1
65054: NEG
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 2
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: LD_INT 2
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 2
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 2
65168: NEG
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: LD_INT 2
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65211: LD_ADDR_VAR 0 56
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 1
65269: NEG
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 2
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 2
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 2
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 2
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 2
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: NEG
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 2
65398: NEG
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65441: LD_ADDR_VAR 0 57
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: NEG
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: LD_INT 2
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 2
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 2
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 2
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 2
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: NEG
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 2
65628: NEG
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: LD_INT 2
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65671: LD_ADDR_VAR 0 58
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 1
65691: NEG
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 1
65729: NEG
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 2
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 2
65806: PUSH
65807: LD_INT 2
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 2
65847: NEG
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 2
65858: NEG
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 2
65870: NEG
65871: PUSH
65872: LD_INT 2
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65901: LD_ADDR_VAR 0 59
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 0
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 1
65959: NEG
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65989: LD_ADDR_VAR 0 60
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 1
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66077: LD_ADDR_VAR 0 61
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66165: LD_ADDR_VAR 0 62
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66253: LD_ADDR_VAR 0 63
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: LD_INT 1
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66341: LD_ADDR_VAR 0 64
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: ST_TO_ADDR
// end ; 1 :
66429: GO 72326
66431: LD_INT 1
66433: DOUBLE
66434: EQUAL
66435: IFTRUE 66439
66437: GO 69062
66439: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66440: LD_ADDR_VAR 0 11
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 3
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 3
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 1
66470: PUSH
66471: LD_INT 2
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: LIST
66483: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66484: LD_ADDR_VAR 0 12
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 3
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66525: LD_ADDR_VAR 0 13
66529: PUSH
66530: LD_INT 3
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: LD_INT 3
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: LIST
66564: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66565: LD_ADDR_VAR 0 14
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 3
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66606: LD_ADDR_VAR 0 15
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 3
66624: NEG
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66650: LD_ADDR_VAR 0 16
66654: PUSH
66655: LD_INT 2
66657: NEG
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 3
66669: NEG
66670: PUSH
66671: LD_INT 2
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 3
66681: NEG
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66696: LD_ADDR_VAR 0 17
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: LD_INT 3
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: LD_INT 2
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: LIST
66739: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66740: LD_ADDR_VAR 0 18
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: PUSH
66759: LD_INT 0
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66781: LD_ADDR_VAR 0 19
66785: PUSH
66786: LD_INT 3
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: LD_INT 3
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: LIST
66820: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66821: LD_ADDR_VAR 0 20
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: LD_INT 3
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: LD_INT 3
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66862: LD_ADDR_VAR 0 21
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 3
66880: NEG
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 3
66891: NEG
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66906: LD_ADDR_VAR 0 22
66910: PUSH
66911: LD_INT 2
66913: NEG
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 3
66925: NEG
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: NEG
66938: PUSH
66939: LD_INT 3
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66952: LD_ADDR_VAR 0 23
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: LD_INT 3
66962: NEG
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: LD_INT 4
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 3
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: LIST
66995: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66996: LD_ADDR_VAR 0 24
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 3
67013: PUSH
67014: LD_INT 1
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: LIST
67036: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67037: LD_ADDR_VAR 0 25
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: LD_INT 3
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 4
67054: PUSH
67055: LD_INT 3
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: LD_INT 4
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67077: LD_ADDR_VAR 0 26
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: LD_INT 3
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 1
67094: PUSH
67095: LD_INT 4
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67118: LD_ADDR_VAR 0 27
67122: PUSH
67123: LD_INT 3
67125: NEG
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: NEG
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 4
67147: NEG
67148: PUSH
67149: LD_INT 1
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: LIST
67161: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67162: LD_ADDR_VAR 0 28
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: LD_INT 3
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 3
67181: NEG
67182: PUSH
67183: LD_INT 4
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 4
67193: NEG
67194: PUSH
67195: LD_INT 3
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67208: LD_ADDR_VAR 0 29
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: LD_INT 3
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: LD_INT 4
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 0
67261: PUSH
67262: LD_INT 4
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 1
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 5
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: LD_INT 5
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: LD_INT 4
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: NEG
67318: PUSH
67319: LD_INT 6
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_INT 6
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 5
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67363: LD_ADDR_VAR 0 30
67367: PUSH
67368: LD_INT 2
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 3
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: LD_INT 1
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 3
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 4
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 4
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 4
67432: PUSH
67433: LD_INT 1
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 5
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 5
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 6
67474: PUSH
67475: LD_INT 0
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 6
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67506: LD_ADDR_VAR 0 31
67510: PUSH
67511: LD_INT 3
67513: PUSH
67514: LD_INT 2
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: LD_INT 3
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 4
67553: PUSH
67554: LD_INT 4
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 5
67573: PUSH
67574: LD_INT 4
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 5
67583: PUSH
67584: LD_INT 5
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 4
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 6
67603: PUSH
67604: LD_INT 5
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 6
67613: PUSH
67614: LD_INT 6
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 5
67623: PUSH
67624: LD_INT 6
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67645: LD_ADDR_VAR 0 32
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: LD_INT 3
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 3
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: LD_INT 2
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 1
67683: PUSH
67684: LD_INT 4
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: LD_INT 4
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 5
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 1
67734: NEG
67735: PUSH
67736: LD_INT 4
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 1
67745: PUSH
67746: LD_INT 6
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 0
67755: PUSH
67756: LD_INT 6
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: NEG
67766: PUSH
67767: LD_INT 5
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67788: LD_ADDR_VAR 0 33
67792: PUSH
67793: LD_INT 2
67795: NEG
67796: PUSH
67797: LD_INT 1
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 3
67806: NEG
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 3
67817: NEG
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 4
67840: NEG
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 4
67851: NEG
67852: PUSH
67853: LD_INT 1
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 4
67863: NEG
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 5
67874: NEG
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 5
67885: NEG
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 5
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 6
67908: NEG
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 6
67919: NEG
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67943: LD_ADDR_VAR 0 34
67947: PUSH
67948: LD_INT 2
67950: NEG
67951: PUSH
67952: LD_INT 3
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 3
67962: NEG
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 3
67974: NEG
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: LD_INT 4
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 4
67998: NEG
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 4
68010: NEG
68011: PUSH
68012: LD_INT 4
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 4
68022: NEG
68023: PUSH
68024: LD_INT 5
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 5
68034: NEG
68035: PUSH
68036: LD_INT 4
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 5
68046: NEG
68047: PUSH
68048: LD_INT 5
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 5
68058: NEG
68059: PUSH
68060: LD_INT 6
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 6
68070: NEG
68071: PUSH
68072: LD_INT 5
68074: NEG
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 6
68082: NEG
68083: PUSH
68084: LD_INT 6
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68106: LD_ADDR_VAR 0 41
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: LD_INT 2
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: LD_INT 3
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: LD_INT 2
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: LIST
68149: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68150: LD_ADDR_VAR 0 42
68154: PUSH
68155: LD_INT 2
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: LD_INT 1
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 3
68178: PUSH
68179: LD_INT 1
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: LIST
68190: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68191: LD_ADDR_VAR 0 43
68195: PUSH
68196: LD_INT 2
68198: PUSH
68199: LD_INT 2
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 3
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68231: LD_ADDR_VAR 0 44
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 2
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: LD_INT 3
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 1
68258: NEG
68259: PUSH
68260: LD_INT 2
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68272: LD_ADDR_VAR 0 45
68276: PUSH
68277: LD_INT 2
68279: NEG
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 2
68290: NEG
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: LD_INT 1
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: LIST
68315: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68316: LD_ADDR_VAR 0 46
68320: PUSH
68321: LD_INT 2
68323: NEG
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 2
68335: NEG
68336: PUSH
68337: LD_INT 3
68339: NEG
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: LD_INT 2
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: LIST
68361: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68362: LD_ADDR_VAR 0 47
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: LD_INT 3
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 1
68381: NEG
68382: PUSH
68383: LD_INT 3
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68395: LD_ADDR_VAR 0 48
68399: PUSH
68400: LD_INT 1
68402: PUSH
68403: LD_INT 2
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 2
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68426: LD_ADDR_VAR 0 49
68430: PUSH
68431: LD_INT 3
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 3
68443: PUSH
68444: LD_INT 2
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68455: LD_ADDR_VAR 0 50
68459: PUSH
68460: LD_INT 2
68462: PUSH
68463: LD_INT 3
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: LD_INT 3
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68484: LD_ADDR_VAR 0 51
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: LD_INT 2
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: LD_INT 1
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68515: LD_ADDR_VAR 0 52
68519: PUSH
68520: LD_INT 3
68522: NEG
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: LD_INT 2
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68548: LD_ADDR_VAR 0 53
68552: PUSH
68553: LD_INT 1
68555: NEG
68556: PUSH
68557: LD_INT 3
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 3
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: LIST
68591: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68592: LD_ADDR_VAR 0 54
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: LD_INT 1
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 3
68610: PUSH
68611: LD_INT 0
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 3
68620: PUSH
68621: LD_INT 1
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68633: LD_ADDR_VAR 0 55
68637: PUSH
68638: LD_INT 3
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 3
68650: PUSH
68651: LD_INT 3
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 2
68660: PUSH
68661: LD_INT 3
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: LIST
68672: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68673: LD_ADDR_VAR 0 56
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: LD_INT 3
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 1
68700: NEG
68701: PUSH
68702: LD_INT 2
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68714: LD_ADDR_VAR 0 57
68718: PUSH
68719: LD_INT 2
68721: NEG
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: NEG
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 3
68743: NEG
68744: PUSH
68745: LD_INT 1
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68758: LD_ADDR_VAR 0 58
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: LD_INT 3
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 3
68777: NEG
68778: PUSH
68779: LD_INT 2
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68804: LD_ADDR_VAR 0 59
68808: PUSH
68809: LD_INT 1
68811: NEG
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: LD_INT 2
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: LIST
68847: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68848: LD_ADDR_VAR 0 60
68852: PUSH
68853: LD_INT 1
68855: PUSH
68856: LD_INT 1
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 2
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: LIST
68888: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68889: LD_ADDR_VAR 0 61
68893: PUSH
68894: LD_INT 2
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 2
68906: PUSH
68907: LD_INT 2
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: LIST
68928: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68929: LD_ADDR_VAR 0 62
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: LD_INT 2
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: LD_INT 2
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 1
68956: NEG
68957: PUSH
68958: LD_INT 1
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68970: LD_ADDR_VAR 0 63
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: LD_INT 1
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: NEG
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 2
68999: NEG
69000: PUSH
69001: LD_INT 1
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: LIST
69013: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69014: LD_ADDR_VAR 0 64
69018: PUSH
69019: LD_INT 1
69021: NEG
69022: PUSH
69023: LD_INT 2
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: LD_INT 1
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 2
69045: NEG
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: LIST
69059: ST_TO_ADDR
// end ; 2 :
69060: GO 72326
69062: LD_INT 2
69064: DOUBLE
69065: EQUAL
69066: IFTRUE 69070
69068: GO 72325
69070: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69071: LD_ADDR_VAR 0 29
69075: PUSH
69076: LD_INT 4
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 4
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 5
69099: PUSH
69100: LD_INT 0
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 5
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 4
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 5
69161: PUSH
69162: LD_INT 2
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 3
69171: PUSH
69172: LD_INT 3
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 3
69181: PUSH
69182: LD_INT 2
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 4
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 4
69201: PUSH
69202: LD_INT 4
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 3
69211: PUSH
69212: LD_INT 4
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 3
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 2
69231: PUSH
69232: LD_INT 2
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 4
69241: PUSH
69242: LD_INT 2
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 2
69251: PUSH
69252: LD_INT 4
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: LD_INT 4
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: LD_INT 3
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: LD_INT 4
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: LD_INT 5
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: LD_INT 5
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: PUSH
69313: LD_INT 4
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 1
69322: NEG
69323: PUSH
69324: LD_INT 3
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 2
69333: PUSH
69334: LD_INT 5
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 2
69343: NEG
69344: PUSH
69345: LD_INT 3
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 3
69354: NEG
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 3
69365: NEG
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 2
69377: NEG
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 2
69388: NEG
69389: PUSH
69390: LD_INT 1
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 3
69399: NEG
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 4
69410: NEG
69411: PUSH
69412: LD_INT 0
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 4
69421: NEG
69422: PUSH
69423: LD_INT 1
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 4
69433: NEG
69434: PUSH
69435: LD_INT 2
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 2
69445: NEG
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 4
69456: NEG
69457: PUSH
69458: LD_INT 4
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 4
69468: NEG
69469: PUSH
69470: LD_INT 5
69472: NEG
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 3
69480: NEG
69481: PUSH
69482: LD_INT 4
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 3
69492: NEG
69493: PUSH
69494: LD_INT 3
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 4
69504: NEG
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 5
69516: NEG
69517: PUSH
69518: LD_INT 4
69520: NEG
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 5
69528: NEG
69529: PUSH
69530: LD_INT 5
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 3
69540: NEG
69541: PUSH
69542: LD_INT 5
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 5
69552: NEG
69553: PUSH
69554: LD_INT 3
69556: NEG
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69609: LD_ADDR_VAR 0 30
69613: PUSH
69614: LD_INT 4
69616: PUSH
69617: LD_INT 4
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 4
69626: PUSH
69627: LD_INT 3
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 5
69636: PUSH
69637: LD_INT 4
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 5
69646: PUSH
69647: LD_INT 5
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 4
69656: PUSH
69657: LD_INT 5
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 3
69666: PUSH
69667: LD_INT 4
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 3
69676: PUSH
69677: LD_INT 3
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 5
69686: PUSH
69687: LD_INT 3
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 3
69696: PUSH
69697: LD_INT 5
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: LD_INT 3
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: LD_INT 2
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 1
69726: PUSH
69727: LD_INT 3
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: LD_INT 4
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_INT 4
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 1
69756: NEG
69757: PUSH
69758: LD_INT 3
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: LD_INT 2
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 2
69778: PUSH
69779: LD_INT 4
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 2
69788: NEG
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 4
69799: NEG
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 4
69810: NEG
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 3
69822: NEG
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 3
69833: NEG
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 4
69844: NEG
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 5
69855: NEG
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 5
69866: NEG
69867: PUSH
69868: LD_INT 1
69870: NEG
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 5
69878: NEG
69879: PUSH
69880: LD_INT 2
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 3
69890: NEG
69891: PUSH
69892: LD_INT 2
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 3
69901: NEG
69902: PUSH
69903: LD_INT 3
69905: NEG
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 3
69913: NEG
69914: PUSH
69915: LD_INT 4
69917: NEG
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 2
69925: NEG
69926: PUSH
69927: LD_INT 3
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 2
69937: NEG
69938: PUSH
69939: LD_INT 2
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 3
69949: NEG
69950: PUSH
69951: LD_INT 2
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 4
69961: NEG
69962: PUSH
69963: LD_INT 3
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 4
69973: NEG
69974: PUSH
69975: LD_INT 4
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 2
69985: NEG
69986: PUSH
69987: LD_INT 4
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 4
69997: NEG
69998: PUSH
69999: LD_INT 2
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: LD_INT 4
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: LD_INT 5
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 1
70031: PUSH
70032: LD_INT 4
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: LD_INT 3
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: LD_INT 3
70056: NEG
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 1
70064: NEG
70065: PUSH
70066: LD_INT 4
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 1
70076: NEG
70077: PUSH
70078: LD_INT 5
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 2
70088: PUSH
70089: LD_INT 3
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 2
70099: NEG
70100: PUSH
70101: LD_INT 5
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70156: LD_ADDR_VAR 0 31
70160: PUSH
70161: LD_INT 0
70163: PUSH
70164: LD_INT 4
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 1
70183: PUSH
70184: LD_INT 4
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: LD_INT 5
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: LD_INT 5
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: LD_INT 4
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: NEG
70225: PUSH
70226: LD_INT 3
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 2
70235: PUSH
70236: LD_INT 5
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 2
70245: NEG
70246: PUSH
70247: LD_INT 3
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 3
70256: NEG
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 3
70267: NEG
70268: PUSH
70269: LD_INT 1
70271: NEG
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 2
70279: NEG
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 2
70290: NEG
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: NEG
70302: PUSH
70303: LD_INT 1
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 4
70312: NEG
70313: PUSH
70314: LD_INT 0
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 4
70323: NEG
70324: PUSH
70325: LD_INT 1
70327: NEG
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 4
70335: NEG
70336: PUSH
70337: LD_INT 2
70339: NEG
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 2
70347: NEG
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 4
70358: NEG
70359: PUSH
70360: LD_INT 4
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 4
70370: NEG
70371: PUSH
70372: LD_INT 5
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 3
70382: NEG
70383: PUSH
70384: LD_INT 4
70386: NEG
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 3
70394: NEG
70395: PUSH
70396: LD_INT 3
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 4
70406: NEG
70407: PUSH
70408: LD_INT 3
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 5
70418: NEG
70419: PUSH
70420: LD_INT 4
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 5
70430: NEG
70431: PUSH
70432: LD_INT 5
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: NEG
70443: PUSH
70444: LD_INT 5
70446: NEG
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 5
70454: NEG
70455: PUSH
70456: LD_INT 3
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 0
70466: PUSH
70467: LD_INT 3
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: LD_INT 4
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 1
70488: PUSH
70489: LD_INT 3
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 1
70499: PUSH
70500: LD_INT 2
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: LD_INT 2
70513: NEG
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 1
70521: NEG
70522: PUSH
70523: LD_INT 3
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 1
70533: NEG
70534: PUSH
70535: LD_INT 4
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 2
70545: PUSH
70546: LD_INT 2
70548: NEG
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 2
70556: NEG
70557: PUSH
70558: LD_INT 4
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 4
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 5
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 5
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 4
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 3
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 3
70629: PUSH
70630: LD_INT 1
70632: NEG
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 3
70640: PUSH
70641: LD_INT 2
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 5
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70706: LD_ADDR_VAR 0 32
70710: PUSH
70711: LD_INT 4
70713: NEG
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 4
70724: NEG
70725: PUSH
70726: LD_INT 1
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 3
70736: NEG
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 3
70747: NEG
70748: PUSH
70749: LD_INT 1
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 4
70758: NEG
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 5
70769: NEG
70770: PUSH
70771: LD_INT 0
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 5
70780: NEG
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 5
70792: NEG
70793: PUSH
70794: LD_INT 2
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 3
70804: NEG
70805: PUSH
70806: LD_INT 2
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 3
70815: NEG
70816: PUSH
70817: LD_INT 3
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 3
70827: NEG
70828: PUSH
70829: LD_INT 4
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 2
70839: NEG
70840: PUSH
70841: LD_INT 3
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 2
70851: NEG
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: NEG
70864: PUSH
70865: LD_INT 2
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 4
70875: NEG
70876: PUSH
70877: LD_INT 3
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 4
70887: NEG
70888: PUSH
70889: LD_INT 4
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 2
70899: NEG
70900: PUSH
70901: LD_INT 4
70903: NEG
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 4
70911: NEG
70912: PUSH
70913: LD_INT 2
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 4
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 5
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: LD_INT 4
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: PUSH
70957: LD_INT 3
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: LD_INT 3
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 1
70978: NEG
70979: PUSH
70980: LD_INT 4
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: LD_INT 5
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 2
71002: PUSH
71003: LD_INT 3
71005: NEG
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 2
71013: NEG
71014: PUSH
71015: LD_INT 5
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 3
71025: PUSH
71026: LD_INT 0
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 3
71035: PUSH
71036: LD_INT 1
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 4
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 4
71056: PUSH
71057: LD_INT 1
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 3
71066: PUSH
71067: LD_INT 1
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 2
71076: PUSH
71077: LD_INT 0
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 2
71086: PUSH
71087: LD_INT 1
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: LD_INT 2
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 4
71108: PUSH
71109: LD_INT 2
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 4
71118: PUSH
71119: LD_INT 4
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 4
71128: PUSH
71129: LD_INT 3
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 5
71138: PUSH
71139: LD_INT 4
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 5
71148: PUSH
71149: LD_INT 5
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 4
71158: PUSH
71159: LD_INT 5
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 3
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 3
71178: PUSH
71179: LD_INT 3
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 5
71188: PUSH
71189: LD_INT 3
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 3
71198: PUSH
71199: LD_INT 5
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71253: LD_ADDR_VAR 0 33
71257: PUSH
71258: LD_INT 4
71260: NEG
71261: PUSH
71262: LD_INT 4
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 4
71272: NEG
71273: PUSH
71274: LD_INT 5
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 3
71284: NEG
71285: PUSH
71286: LD_INT 4
71288: NEG
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 3
71296: NEG
71297: PUSH
71298: LD_INT 3
71300: NEG
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 4
71308: NEG
71309: PUSH
71310: LD_INT 3
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 5
71320: NEG
71321: PUSH
71322: LD_INT 4
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 5
71332: NEG
71333: PUSH
71334: LD_INT 5
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 3
71344: NEG
71345: PUSH
71346: LD_INT 5
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 5
71356: NEG
71357: PUSH
71358: LD_INT 3
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: LD_INT 3
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: LD_INT 4
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 1
71390: PUSH
71391: LD_INT 3
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: PUSH
71402: LD_INT 2
71404: NEG
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: LD_INT 2
71415: NEG
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 1
71423: NEG
71424: PUSH
71425: LD_INT 3
71427: NEG
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 1
71435: NEG
71436: PUSH
71437: LD_INT 4
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 2
71458: NEG
71459: PUSH
71460: LD_INT 4
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 4
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 4
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 5
71491: PUSH
71492: LD_INT 0
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 5
71501: PUSH
71502: LD_INT 1
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 4
71511: PUSH
71512: LD_INT 1
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 3
71521: PUSH
71522: LD_INT 0
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 3
71531: PUSH
71532: LD_INT 1
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 3
71542: PUSH
71543: LD_INT 2
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 5
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 3
71563: PUSH
71564: LD_INT 3
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 3
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 4
71583: PUSH
71584: LD_INT 3
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 4
71593: PUSH
71594: LD_INT 4
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 3
71603: PUSH
71604: LD_INT 4
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: LD_INT 3
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 2
71623: PUSH
71624: LD_INT 2
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 4
71633: PUSH
71634: LD_INT 2
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 2
71643: PUSH
71644: LD_INT 4
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 0
71653: PUSH
71654: LD_INT 4
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: LD_INT 3
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 1
71673: PUSH
71674: LD_INT 4
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: LD_INT 5
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 0
71693: PUSH
71694: LD_INT 5
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 1
71703: NEG
71704: PUSH
71705: LD_INT 4
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 1
71714: NEG
71715: PUSH
71716: LD_INT 3
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 2
71725: PUSH
71726: LD_INT 5
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 2
71735: NEG
71736: PUSH
71737: LD_INT 3
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71791: LD_ADDR_VAR 0 34
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: LD_INT 4
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: LD_INT 5
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: PUSH
71821: LD_INT 4
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: LD_INT 3
71834: NEG
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 0
71842: PUSH
71843: LD_INT 3
71845: NEG
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 1
71853: NEG
71854: PUSH
71855: LD_INT 4
71857: NEG
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 1
71865: NEG
71866: PUSH
71867: LD_INT 5
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 2
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 2
71888: NEG
71889: PUSH
71890: LD_INT 5
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 3
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 3
71910: PUSH
71911: LD_INT 1
71913: NEG
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 4
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 4
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 3
71941: PUSH
71942: LD_INT 1
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 2
71951: PUSH
71952: LD_INT 0
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 2
71961: PUSH
71962: LD_INT 1
71964: NEG
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 2
71972: PUSH
71973: LD_INT 2
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 4
71983: PUSH
71984: LD_INT 2
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 4
71993: PUSH
71994: LD_INT 4
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 4
72003: PUSH
72004: LD_INT 3
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 5
72013: PUSH
72014: LD_INT 4
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 5
72023: PUSH
72024: LD_INT 5
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 4
72033: PUSH
72034: LD_INT 5
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 3
72043: PUSH
72044: LD_INT 4
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 3
72053: PUSH
72054: LD_INT 3
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 5
72063: PUSH
72064: LD_INT 3
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 3
72073: PUSH
72074: LD_INT 5
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 0
72083: PUSH
72084: LD_INT 3
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 0
72093: PUSH
72094: LD_INT 2
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 1
72103: PUSH
72104: LD_INT 3
72106: PUSH
72107: EMPTY
72108: LIST
72109: LIST
72110: PUSH
72111: LD_INT 1
72113: PUSH
72114: LD_INT 4
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 0
72123: PUSH
72124: LD_INT 4
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 1
72133: NEG
72134: PUSH
72135: LD_INT 3
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 1
72144: NEG
72145: PUSH
72146: LD_INT 2
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 2
72155: PUSH
72156: LD_INT 4
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 2
72165: NEG
72166: PUSH
72167: LD_INT 2
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 4
72176: NEG
72177: PUSH
72178: LD_INT 0
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 4
72187: NEG
72188: PUSH
72189: LD_INT 1
72191: NEG
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 3
72199: NEG
72200: PUSH
72201: LD_INT 0
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 3
72210: NEG
72211: PUSH
72212: LD_INT 1
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 4
72221: NEG
72222: PUSH
72223: LD_INT 1
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 5
72232: NEG
72233: PUSH
72234: LD_INT 0
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PUSH
72241: LD_INT 5
72243: NEG
72244: PUSH
72245: LD_INT 1
72247: NEG
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 5
72255: NEG
72256: PUSH
72257: LD_INT 2
72259: NEG
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 3
72267: NEG
72268: PUSH
72269: LD_INT 2
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: ST_TO_ADDR
// end ; end ;
72323: GO 72326
72325: POP
// case btype of b_depot , b_warehouse :
72326: LD_VAR 0 1
72330: PUSH
72331: LD_INT 0
72333: DOUBLE
72334: EQUAL
72335: IFTRUE 72345
72337: LD_INT 1
72339: DOUBLE
72340: EQUAL
72341: IFTRUE 72345
72343: GO 72546
72345: POP
// case nation of nation_american :
72346: LD_VAR 0 5
72350: PUSH
72351: LD_INT 1
72353: DOUBLE
72354: EQUAL
72355: IFTRUE 72359
72357: GO 72415
72359: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72360: LD_ADDR_VAR 0 9
72364: PUSH
72365: LD_VAR 0 11
72369: PUSH
72370: LD_VAR 0 12
72374: PUSH
72375: LD_VAR 0 13
72379: PUSH
72380: LD_VAR 0 14
72384: PUSH
72385: LD_VAR 0 15
72389: PUSH
72390: LD_VAR 0 16
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: PUSH
72403: LD_VAR 0 4
72407: PUSH
72408: LD_INT 1
72410: PLUS
72411: ARRAY
72412: ST_TO_ADDR
72413: GO 72544
72415: LD_INT 2
72417: DOUBLE
72418: EQUAL
72419: IFTRUE 72423
72421: GO 72479
72423: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72424: LD_ADDR_VAR 0 9
72428: PUSH
72429: LD_VAR 0 17
72433: PUSH
72434: LD_VAR 0 18
72438: PUSH
72439: LD_VAR 0 19
72443: PUSH
72444: LD_VAR 0 20
72448: PUSH
72449: LD_VAR 0 21
72453: PUSH
72454: LD_VAR 0 22
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: PUSH
72467: LD_VAR 0 4
72471: PUSH
72472: LD_INT 1
72474: PLUS
72475: ARRAY
72476: ST_TO_ADDR
72477: GO 72544
72479: LD_INT 3
72481: DOUBLE
72482: EQUAL
72483: IFTRUE 72487
72485: GO 72543
72487: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72488: LD_ADDR_VAR 0 9
72492: PUSH
72493: LD_VAR 0 23
72497: PUSH
72498: LD_VAR 0 24
72502: PUSH
72503: LD_VAR 0 25
72507: PUSH
72508: LD_VAR 0 26
72512: PUSH
72513: LD_VAR 0 27
72517: PUSH
72518: LD_VAR 0 28
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: PUSH
72531: LD_VAR 0 4
72535: PUSH
72536: LD_INT 1
72538: PLUS
72539: ARRAY
72540: ST_TO_ADDR
72541: GO 72544
72543: POP
72544: GO 73099
72546: LD_INT 2
72548: DOUBLE
72549: EQUAL
72550: IFTRUE 72560
72552: LD_INT 3
72554: DOUBLE
72555: EQUAL
72556: IFTRUE 72560
72558: GO 72616
72560: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72561: LD_ADDR_VAR 0 9
72565: PUSH
72566: LD_VAR 0 29
72570: PUSH
72571: LD_VAR 0 30
72575: PUSH
72576: LD_VAR 0 31
72580: PUSH
72581: LD_VAR 0 32
72585: PUSH
72586: LD_VAR 0 33
72590: PUSH
72591: LD_VAR 0 34
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: PUSH
72604: LD_VAR 0 4
72608: PUSH
72609: LD_INT 1
72611: PLUS
72612: ARRAY
72613: ST_TO_ADDR
72614: GO 73099
72616: LD_INT 16
72618: DOUBLE
72619: EQUAL
72620: IFTRUE 72678
72622: LD_INT 17
72624: DOUBLE
72625: EQUAL
72626: IFTRUE 72678
72628: LD_INT 18
72630: DOUBLE
72631: EQUAL
72632: IFTRUE 72678
72634: LD_INT 19
72636: DOUBLE
72637: EQUAL
72638: IFTRUE 72678
72640: LD_INT 22
72642: DOUBLE
72643: EQUAL
72644: IFTRUE 72678
72646: LD_INT 20
72648: DOUBLE
72649: EQUAL
72650: IFTRUE 72678
72652: LD_INT 21
72654: DOUBLE
72655: EQUAL
72656: IFTRUE 72678
72658: LD_INT 23
72660: DOUBLE
72661: EQUAL
72662: IFTRUE 72678
72664: LD_INT 24
72666: DOUBLE
72667: EQUAL
72668: IFTRUE 72678
72670: LD_INT 25
72672: DOUBLE
72673: EQUAL
72674: IFTRUE 72678
72676: GO 72734
72678: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72679: LD_ADDR_VAR 0 9
72683: PUSH
72684: LD_VAR 0 35
72688: PUSH
72689: LD_VAR 0 36
72693: PUSH
72694: LD_VAR 0 37
72698: PUSH
72699: LD_VAR 0 38
72703: PUSH
72704: LD_VAR 0 39
72708: PUSH
72709: LD_VAR 0 40
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: PUSH
72722: LD_VAR 0 4
72726: PUSH
72727: LD_INT 1
72729: PLUS
72730: ARRAY
72731: ST_TO_ADDR
72732: GO 73099
72734: LD_INT 6
72736: DOUBLE
72737: EQUAL
72738: IFTRUE 72790
72740: LD_INT 7
72742: DOUBLE
72743: EQUAL
72744: IFTRUE 72790
72746: LD_INT 8
72748: DOUBLE
72749: EQUAL
72750: IFTRUE 72790
72752: LD_INT 13
72754: DOUBLE
72755: EQUAL
72756: IFTRUE 72790
72758: LD_INT 12
72760: DOUBLE
72761: EQUAL
72762: IFTRUE 72790
72764: LD_INT 15
72766: DOUBLE
72767: EQUAL
72768: IFTRUE 72790
72770: LD_INT 11
72772: DOUBLE
72773: EQUAL
72774: IFTRUE 72790
72776: LD_INT 14
72778: DOUBLE
72779: EQUAL
72780: IFTRUE 72790
72782: LD_INT 10
72784: DOUBLE
72785: EQUAL
72786: IFTRUE 72790
72788: GO 72846
72790: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72791: LD_ADDR_VAR 0 9
72795: PUSH
72796: LD_VAR 0 41
72800: PUSH
72801: LD_VAR 0 42
72805: PUSH
72806: LD_VAR 0 43
72810: PUSH
72811: LD_VAR 0 44
72815: PUSH
72816: LD_VAR 0 45
72820: PUSH
72821: LD_VAR 0 46
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: PUSH
72834: LD_VAR 0 4
72838: PUSH
72839: LD_INT 1
72841: PLUS
72842: ARRAY
72843: ST_TO_ADDR
72844: GO 73099
72846: LD_INT 36
72848: DOUBLE
72849: EQUAL
72850: IFTRUE 72854
72852: GO 72910
72854: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72855: LD_ADDR_VAR 0 9
72859: PUSH
72860: LD_VAR 0 47
72864: PUSH
72865: LD_VAR 0 48
72869: PUSH
72870: LD_VAR 0 49
72874: PUSH
72875: LD_VAR 0 50
72879: PUSH
72880: LD_VAR 0 51
72884: PUSH
72885: LD_VAR 0 52
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: PUSH
72898: LD_VAR 0 4
72902: PUSH
72903: LD_INT 1
72905: PLUS
72906: ARRAY
72907: ST_TO_ADDR
72908: GO 73099
72910: LD_INT 4
72912: DOUBLE
72913: EQUAL
72914: IFTRUE 72936
72916: LD_INT 5
72918: DOUBLE
72919: EQUAL
72920: IFTRUE 72936
72922: LD_INT 34
72924: DOUBLE
72925: EQUAL
72926: IFTRUE 72936
72928: LD_INT 37
72930: DOUBLE
72931: EQUAL
72932: IFTRUE 72936
72934: GO 72992
72936: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72937: LD_ADDR_VAR 0 9
72941: PUSH
72942: LD_VAR 0 53
72946: PUSH
72947: LD_VAR 0 54
72951: PUSH
72952: LD_VAR 0 55
72956: PUSH
72957: LD_VAR 0 56
72961: PUSH
72962: LD_VAR 0 57
72966: PUSH
72967: LD_VAR 0 58
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: PUSH
72980: LD_VAR 0 4
72984: PUSH
72985: LD_INT 1
72987: PLUS
72988: ARRAY
72989: ST_TO_ADDR
72990: GO 73099
72992: LD_INT 31
72994: DOUBLE
72995: EQUAL
72996: IFTRUE 73042
72998: LD_INT 32
73000: DOUBLE
73001: EQUAL
73002: IFTRUE 73042
73004: LD_INT 33
73006: DOUBLE
73007: EQUAL
73008: IFTRUE 73042
73010: LD_INT 27
73012: DOUBLE
73013: EQUAL
73014: IFTRUE 73042
73016: LD_INT 26
73018: DOUBLE
73019: EQUAL
73020: IFTRUE 73042
73022: LD_INT 28
73024: DOUBLE
73025: EQUAL
73026: IFTRUE 73042
73028: LD_INT 29
73030: DOUBLE
73031: EQUAL
73032: IFTRUE 73042
73034: LD_INT 30
73036: DOUBLE
73037: EQUAL
73038: IFTRUE 73042
73040: GO 73098
73042: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73043: LD_ADDR_VAR 0 9
73047: PUSH
73048: LD_VAR 0 59
73052: PUSH
73053: LD_VAR 0 60
73057: PUSH
73058: LD_VAR 0 61
73062: PUSH
73063: LD_VAR 0 62
73067: PUSH
73068: LD_VAR 0 63
73072: PUSH
73073: LD_VAR 0 64
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: PUSH
73086: LD_VAR 0 4
73090: PUSH
73091: LD_INT 1
73093: PLUS
73094: ARRAY
73095: ST_TO_ADDR
73096: GO 73099
73098: POP
// temp_list2 = [ ] ;
73099: LD_ADDR_VAR 0 10
73103: PUSH
73104: EMPTY
73105: ST_TO_ADDR
// for i in temp_list do
73106: LD_ADDR_VAR 0 8
73110: PUSH
73111: LD_VAR 0 9
73115: PUSH
73116: FOR_IN
73117: IFFALSE 73169
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73119: LD_ADDR_VAR 0 10
73123: PUSH
73124: LD_VAR 0 10
73128: PUSH
73129: LD_VAR 0 8
73133: PUSH
73134: LD_INT 1
73136: ARRAY
73137: PUSH
73138: LD_VAR 0 2
73142: PLUS
73143: PUSH
73144: LD_VAR 0 8
73148: PUSH
73149: LD_INT 2
73151: ARRAY
73152: PUSH
73153: LD_VAR 0 3
73157: PLUS
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: EMPTY
73164: LIST
73165: ADD
73166: ST_TO_ADDR
73167: GO 73116
73169: POP
73170: POP
// result = temp_list2 ;
73171: LD_ADDR_VAR 0 7
73175: PUSH
73176: LD_VAR 0 10
73180: ST_TO_ADDR
// end ;
73181: LD_VAR 0 7
73185: RET
// export function EnemyInRange ( unit , dist ) ; begin
73186: LD_INT 0
73188: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73189: LD_ADDR_VAR 0 3
73193: PUSH
73194: LD_VAR 0 1
73198: PPUSH
73199: CALL_OW 255
73203: PPUSH
73204: LD_VAR 0 1
73208: PPUSH
73209: CALL_OW 250
73213: PPUSH
73214: LD_VAR 0 1
73218: PPUSH
73219: CALL_OW 251
73223: PPUSH
73224: LD_VAR 0 2
73228: PPUSH
73229: CALL 46559 0 4
73233: PUSH
73234: LD_INT 4
73236: ARRAY
73237: ST_TO_ADDR
// end ;
73238: LD_VAR 0 3
73242: RET
// export function PlayerSeeMe ( unit ) ; begin
73243: LD_INT 0
73245: PPUSH
// result := See ( your_side , unit ) ;
73246: LD_ADDR_VAR 0 2
73250: PUSH
73251: LD_OWVAR 2
73255: PPUSH
73256: LD_VAR 0 1
73260: PPUSH
73261: CALL_OW 292
73265: ST_TO_ADDR
// end ;
73266: LD_VAR 0 2
73270: RET
// export function ReverseDir ( unit ) ; begin
73271: LD_INT 0
73273: PPUSH
// if not unit then
73274: LD_VAR 0 1
73278: NOT
73279: IFFALSE 73283
// exit ;
73281: GO 73306
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73283: LD_ADDR_VAR 0 2
73287: PUSH
73288: LD_VAR 0 1
73292: PPUSH
73293: CALL_OW 254
73297: PUSH
73298: LD_INT 3
73300: PLUS
73301: PUSH
73302: LD_INT 6
73304: MOD
73305: ST_TO_ADDR
// end ;
73306: LD_VAR 0 2
73310: RET
// export function ReverseArray ( array ) ; var i ; begin
73311: LD_INT 0
73313: PPUSH
73314: PPUSH
// if not array then
73315: LD_VAR 0 1
73319: NOT
73320: IFFALSE 73324
// exit ;
73322: GO 73379
// result := [ ] ;
73324: LD_ADDR_VAR 0 2
73328: PUSH
73329: EMPTY
73330: ST_TO_ADDR
// for i := array downto 1 do
73331: LD_ADDR_VAR 0 3
73335: PUSH
73336: DOUBLE
73337: LD_VAR 0 1
73341: INC
73342: ST_TO_ADDR
73343: LD_INT 1
73345: PUSH
73346: FOR_DOWNTO
73347: IFFALSE 73377
// result := Join ( result , array [ i ] ) ;
73349: LD_ADDR_VAR 0 2
73353: PUSH
73354: LD_VAR 0 2
73358: PPUSH
73359: LD_VAR 0 1
73363: PUSH
73364: LD_VAR 0 3
73368: ARRAY
73369: PPUSH
73370: CALL 78035 0 2
73374: ST_TO_ADDR
73375: GO 73346
73377: POP
73378: POP
// end ;
73379: LD_VAR 0 2
73383: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73384: LD_INT 0
73386: PPUSH
73387: PPUSH
73388: PPUSH
73389: PPUSH
73390: PPUSH
73391: PPUSH
// if not unit or not hexes then
73392: LD_VAR 0 1
73396: NOT
73397: PUSH
73398: LD_VAR 0 2
73402: NOT
73403: OR
73404: IFFALSE 73408
// exit ;
73406: GO 73531
// dist := 9999 ;
73408: LD_ADDR_VAR 0 5
73412: PUSH
73413: LD_INT 9999
73415: ST_TO_ADDR
// for i = 1 to hexes do
73416: LD_ADDR_VAR 0 4
73420: PUSH
73421: DOUBLE
73422: LD_INT 1
73424: DEC
73425: ST_TO_ADDR
73426: LD_VAR 0 2
73430: PUSH
73431: FOR_TO
73432: IFFALSE 73519
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73434: LD_ADDR_VAR 0 6
73438: PUSH
73439: LD_VAR 0 1
73443: PPUSH
73444: LD_VAR 0 2
73448: PUSH
73449: LD_VAR 0 4
73453: ARRAY
73454: PUSH
73455: LD_INT 1
73457: ARRAY
73458: PPUSH
73459: LD_VAR 0 2
73463: PUSH
73464: LD_VAR 0 4
73468: ARRAY
73469: PUSH
73470: LD_INT 2
73472: ARRAY
73473: PPUSH
73474: CALL_OW 297
73478: ST_TO_ADDR
// if tdist < dist then
73479: LD_VAR 0 6
73483: PUSH
73484: LD_VAR 0 5
73488: LESS
73489: IFFALSE 73517
// begin hex := hexes [ i ] ;
73491: LD_ADDR_VAR 0 8
73495: PUSH
73496: LD_VAR 0 2
73500: PUSH
73501: LD_VAR 0 4
73505: ARRAY
73506: ST_TO_ADDR
// dist := tdist ;
73507: LD_ADDR_VAR 0 5
73511: PUSH
73512: LD_VAR 0 6
73516: ST_TO_ADDR
// end ; end ;
73517: GO 73431
73519: POP
73520: POP
// result := hex ;
73521: LD_ADDR_VAR 0 3
73525: PUSH
73526: LD_VAR 0 8
73530: ST_TO_ADDR
// end ;
73531: LD_VAR 0 3
73535: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73536: LD_INT 0
73538: PPUSH
73539: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73540: LD_VAR 0 1
73544: NOT
73545: PUSH
73546: LD_VAR 0 1
73550: PUSH
73551: LD_INT 21
73553: PUSH
73554: LD_INT 2
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 23
73563: PUSH
73564: LD_INT 2
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PPUSH
73575: CALL_OW 69
73579: IN
73580: NOT
73581: OR
73582: IFFALSE 73586
// exit ;
73584: GO 73633
// for i = 1 to 3 do
73586: LD_ADDR_VAR 0 3
73590: PUSH
73591: DOUBLE
73592: LD_INT 1
73594: DEC
73595: ST_TO_ADDR
73596: LD_INT 3
73598: PUSH
73599: FOR_TO
73600: IFFALSE 73631
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73602: LD_VAR 0 1
73606: PPUSH
73607: CALL_OW 250
73611: PPUSH
73612: LD_VAR 0 1
73616: PPUSH
73617: CALL_OW 251
73621: PPUSH
73622: LD_INT 1
73624: PPUSH
73625: CALL_OW 453
73629: GO 73599
73631: POP
73632: POP
// end ;
73633: LD_VAR 0 2
73637: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73638: LD_INT 0
73640: PPUSH
73641: PPUSH
73642: PPUSH
73643: PPUSH
73644: PPUSH
73645: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73646: LD_VAR 0 1
73650: NOT
73651: PUSH
73652: LD_VAR 0 2
73656: NOT
73657: OR
73658: PUSH
73659: LD_VAR 0 1
73663: PPUSH
73664: CALL_OW 314
73668: OR
73669: IFFALSE 73673
// exit ;
73671: GO 74140
// if GetLives ( i ) < 250 then
73673: LD_VAR 0 4
73677: PPUSH
73678: CALL_OW 256
73682: PUSH
73683: LD_INT 250
73685: LESS
73686: IFFALSE 73699
// begin ComAutodestruct ( i ) ;
73688: LD_VAR 0 4
73692: PPUSH
73693: CALL 73536 0 1
// exit ;
73697: GO 74140
// end ; x := GetX ( enemy_unit ) ;
73699: LD_ADDR_VAR 0 7
73703: PUSH
73704: LD_VAR 0 2
73708: PPUSH
73709: CALL_OW 250
73713: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73714: LD_ADDR_VAR 0 8
73718: PUSH
73719: LD_VAR 0 2
73723: PPUSH
73724: CALL_OW 251
73728: ST_TO_ADDR
// if not x or not y then
73729: LD_VAR 0 7
73733: NOT
73734: PUSH
73735: LD_VAR 0 8
73739: NOT
73740: OR
73741: IFFALSE 73745
// exit ;
73743: GO 74140
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73745: LD_ADDR_VAR 0 6
73749: PUSH
73750: LD_VAR 0 7
73754: PPUSH
73755: LD_INT 0
73757: PPUSH
73758: LD_INT 4
73760: PPUSH
73761: CALL_OW 272
73765: PUSH
73766: LD_VAR 0 8
73770: PPUSH
73771: LD_INT 0
73773: PPUSH
73774: LD_INT 4
73776: PPUSH
73777: CALL_OW 273
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_VAR 0 7
73790: PPUSH
73791: LD_INT 1
73793: PPUSH
73794: LD_INT 4
73796: PPUSH
73797: CALL_OW 272
73801: PUSH
73802: LD_VAR 0 8
73806: PPUSH
73807: LD_INT 1
73809: PPUSH
73810: LD_INT 4
73812: PPUSH
73813: CALL_OW 273
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: PUSH
73822: LD_VAR 0 7
73826: PPUSH
73827: LD_INT 2
73829: PPUSH
73830: LD_INT 4
73832: PPUSH
73833: CALL_OW 272
73837: PUSH
73838: LD_VAR 0 8
73842: PPUSH
73843: LD_INT 2
73845: PPUSH
73846: LD_INT 4
73848: PPUSH
73849: CALL_OW 273
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_VAR 0 7
73862: PPUSH
73863: LD_INT 3
73865: PPUSH
73866: LD_INT 4
73868: PPUSH
73869: CALL_OW 272
73873: PUSH
73874: LD_VAR 0 8
73878: PPUSH
73879: LD_INT 3
73881: PPUSH
73882: LD_INT 4
73884: PPUSH
73885: CALL_OW 273
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_VAR 0 7
73898: PPUSH
73899: LD_INT 4
73901: PPUSH
73902: LD_INT 4
73904: PPUSH
73905: CALL_OW 272
73909: PUSH
73910: LD_VAR 0 8
73914: PPUSH
73915: LD_INT 4
73917: PPUSH
73918: LD_INT 4
73920: PPUSH
73921: CALL_OW 273
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_VAR 0 7
73934: PPUSH
73935: LD_INT 5
73937: PPUSH
73938: LD_INT 4
73940: PPUSH
73941: CALL_OW 272
73945: PUSH
73946: LD_VAR 0 8
73950: PPUSH
73951: LD_INT 5
73953: PPUSH
73954: LD_INT 4
73956: PPUSH
73957: CALL_OW 273
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: ST_TO_ADDR
// for i = tmp downto 1 do
73974: LD_ADDR_VAR 0 4
73978: PUSH
73979: DOUBLE
73980: LD_VAR 0 6
73984: INC
73985: ST_TO_ADDR
73986: LD_INT 1
73988: PUSH
73989: FOR_DOWNTO
73990: IFFALSE 74091
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73992: LD_VAR 0 6
73996: PUSH
73997: LD_VAR 0 4
74001: ARRAY
74002: PUSH
74003: LD_INT 1
74005: ARRAY
74006: PPUSH
74007: LD_VAR 0 6
74011: PUSH
74012: LD_VAR 0 4
74016: ARRAY
74017: PUSH
74018: LD_INT 2
74020: ARRAY
74021: PPUSH
74022: CALL_OW 488
74026: NOT
74027: PUSH
74028: LD_VAR 0 6
74032: PUSH
74033: LD_VAR 0 4
74037: ARRAY
74038: PUSH
74039: LD_INT 1
74041: ARRAY
74042: PPUSH
74043: LD_VAR 0 6
74047: PUSH
74048: LD_VAR 0 4
74052: ARRAY
74053: PUSH
74054: LD_INT 2
74056: ARRAY
74057: PPUSH
74058: CALL_OW 428
74062: PUSH
74063: LD_INT 0
74065: NONEQUAL
74066: OR
74067: IFFALSE 74089
// tmp := Delete ( tmp , i ) ;
74069: LD_ADDR_VAR 0 6
74073: PUSH
74074: LD_VAR 0 6
74078: PPUSH
74079: LD_VAR 0 4
74083: PPUSH
74084: CALL_OW 3
74088: ST_TO_ADDR
74089: GO 73989
74091: POP
74092: POP
// j := GetClosestHex ( unit , tmp ) ;
74093: LD_ADDR_VAR 0 5
74097: PUSH
74098: LD_VAR 0 1
74102: PPUSH
74103: LD_VAR 0 6
74107: PPUSH
74108: CALL 73384 0 2
74112: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74113: LD_VAR 0 1
74117: PPUSH
74118: LD_VAR 0 5
74122: PUSH
74123: LD_INT 1
74125: ARRAY
74126: PPUSH
74127: LD_VAR 0 5
74131: PUSH
74132: LD_INT 2
74134: ARRAY
74135: PPUSH
74136: CALL_OW 111
// end ;
74140: LD_VAR 0 3
74144: RET
// export function PrepareApemanSoldier ( ) ; begin
74145: LD_INT 0
74147: PPUSH
// uc_nation := 0 ;
74148: LD_ADDR_OWVAR 21
74152: PUSH
74153: LD_INT 0
74155: ST_TO_ADDR
// hc_sex := sex_male ;
74156: LD_ADDR_OWVAR 27
74160: PUSH
74161: LD_INT 1
74163: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74164: LD_ADDR_OWVAR 28
74168: PUSH
74169: LD_INT 15
74171: ST_TO_ADDR
// hc_gallery :=  ;
74172: LD_ADDR_OWVAR 33
74176: PUSH
74177: LD_STRING 
74179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74180: LD_ADDR_OWVAR 31
74184: PUSH
74185: LD_INT 0
74187: PPUSH
74188: LD_INT 3
74190: PPUSH
74191: CALL_OW 12
74195: PUSH
74196: LD_INT 0
74198: PPUSH
74199: LD_INT 3
74201: PPUSH
74202: CALL_OW 12
74206: PUSH
74207: LD_INT 0
74209: PUSH
74210: LD_INT 0
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: ST_TO_ADDR
// end ;
74219: LD_VAR 0 1
74223: RET
// export function PrepareApemanEngineer ( ) ; begin
74224: LD_INT 0
74226: PPUSH
// uc_nation := 0 ;
74227: LD_ADDR_OWVAR 21
74231: PUSH
74232: LD_INT 0
74234: ST_TO_ADDR
// hc_sex := sex_male ;
74235: LD_ADDR_OWVAR 27
74239: PUSH
74240: LD_INT 1
74242: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74243: LD_ADDR_OWVAR 28
74247: PUSH
74248: LD_INT 16
74250: ST_TO_ADDR
// hc_gallery :=  ;
74251: LD_ADDR_OWVAR 33
74255: PUSH
74256: LD_STRING 
74258: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74259: LD_ADDR_OWVAR 31
74263: PUSH
74264: LD_INT 0
74266: PPUSH
74267: LD_INT 3
74269: PPUSH
74270: CALL_OW 12
74274: PUSH
74275: LD_INT 0
74277: PPUSH
74278: LD_INT 3
74280: PPUSH
74281: CALL_OW 12
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: LD_INT 0
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: ST_TO_ADDR
// end ;
74298: LD_VAR 0 1
74302: RET
// export function PrepareApeman ( agressivity ) ; begin
74303: LD_INT 0
74305: PPUSH
// uc_side := 0 ;
74306: LD_ADDR_OWVAR 20
74310: PUSH
74311: LD_INT 0
74313: ST_TO_ADDR
// uc_nation := 0 ;
74314: LD_ADDR_OWVAR 21
74318: PUSH
74319: LD_INT 0
74321: ST_TO_ADDR
// hc_sex := sex_male ;
74322: LD_ADDR_OWVAR 27
74326: PUSH
74327: LD_INT 1
74329: ST_TO_ADDR
// hc_class := class_apeman ;
74330: LD_ADDR_OWVAR 28
74334: PUSH
74335: LD_INT 12
74337: ST_TO_ADDR
// hc_gallery :=  ;
74338: LD_ADDR_OWVAR 33
74342: PUSH
74343: LD_STRING 
74345: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74346: LD_ADDR_OWVAR 35
74350: PUSH
74351: LD_VAR 0 1
74355: NEG
74356: PPUSH
74357: LD_VAR 0 1
74361: PPUSH
74362: CALL_OW 12
74366: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74367: LD_ADDR_OWVAR 31
74371: PUSH
74372: LD_INT 0
74374: PPUSH
74375: LD_INT 3
74377: PPUSH
74378: CALL_OW 12
74382: PUSH
74383: LD_INT 0
74385: PPUSH
74386: LD_INT 3
74388: PPUSH
74389: CALL_OW 12
74393: PUSH
74394: LD_INT 0
74396: PUSH
74397: LD_INT 0
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: ST_TO_ADDR
// end ;
74406: LD_VAR 0 2
74410: RET
// export function PrepareTiger ( agressivity ) ; begin
74411: LD_INT 0
74413: PPUSH
// uc_side := 0 ;
74414: LD_ADDR_OWVAR 20
74418: PUSH
74419: LD_INT 0
74421: ST_TO_ADDR
// uc_nation := 0 ;
74422: LD_ADDR_OWVAR 21
74426: PUSH
74427: LD_INT 0
74429: ST_TO_ADDR
// hc_class := class_tiger ;
74430: LD_ADDR_OWVAR 28
74434: PUSH
74435: LD_INT 14
74437: ST_TO_ADDR
// hc_gallery :=  ;
74438: LD_ADDR_OWVAR 33
74442: PUSH
74443: LD_STRING 
74445: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74446: LD_ADDR_OWVAR 35
74450: PUSH
74451: LD_VAR 0 1
74455: NEG
74456: PPUSH
74457: LD_VAR 0 1
74461: PPUSH
74462: CALL_OW 12
74466: ST_TO_ADDR
// end ;
74467: LD_VAR 0 2
74471: RET
// export function PrepareEnchidna ( ) ; begin
74472: LD_INT 0
74474: PPUSH
// uc_side := 0 ;
74475: LD_ADDR_OWVAR 20
74479: PUSH
74480: LD_INT 0
74482: ST_TO_ADDR
// uc_nation := 0 ;
74483: LD_ADDR_OWVAR 21
74487: PUSH
74488: LD_INT 0
74490: ST_TO_ADDR
// hc_class := class_baggie ;
74491: LD_ADDR_OWVAR 28
74495: PUSH
74496: LD_INT 13
74498: ST_TO_ADDR
// hc_gallery :=  ;
74499: LD_ADDR_OWVAR 33
74503: PUSH
74504: LD_STRING 
74506: ST_TO_ADDR
// end ;
74507: LD_VAR 0 1
74511: RET
// export function PrepareFrog ( ) ; begin
74512: LD_INT 0
74514: PPUSH
// uc_side := 0 ;
74515: LD_ADDR_OWVAR 20
74519: PUSH
74520: LD_INT 0
74522: ST_TO_ADDR
// uc_nation := 0 ;
74523: LD_ADDR_OWVAR 21
74527: PUSH
74528: LD_INT 0
74530: ST_TO_ADDR
// hc_class := class_frog ;
74531: LD_ADDR_OWVAR 28
74535: PUSH
74536: LD_INT 19
74538: ST_TO_ADDR
// hc_gallery :=  ;
74539: LD_ADDR_OWVAR 33
74543: PUSH
74544: LD_STRING 
74546: ST_TO_ADDR
// end ;
74547: LD_VAR 0 1
74551: RET
// export function PrepareFish ( ) ; begin
74552: LD_INT 0
74554: PPUSH
// uc_side := 0 ;
74555: LD_ADDR_OWVAR 20
74559: PUSH
74560: LD_INT 0
74562: ST_TO_ADDR
// uc_nation := 0 ;
74563: LD_ADDR_OWVAR 21
74567: PUSH
74568: LD_INT 0
74570: ST_TO_ADDR
// hc_class := class_fish ;
74571: LD_ADDR_OWVAR 28
74575: PUSH
74576: LD_INT 20
74578: ST_TO_ADDR
// hc_gallery :=  ;
74579: LD_ADDR_OWVAR 33
74583: PUSH
74584: LD_STRING 
74586: ST_TO_ADDR
// end ;
74587: LD_VAR 0 1
74591: RET
// export function PrepareBird ( ) ; begin
74592: LD_INT 0
74594: PPUSH
// uc_side := 0 ;
74595: LD_ADDR_OWVAR 20
74599: PUSH
74600: LD_INT 0
74602: ST_TO_ADDR
// uc_nation := 0 ;
74603: LD_ADDR_OWVAR 21
74607: PUSH
74608: LD_INT 0
74610: ST_TO_ADDR
// hc_class := class_phororhacos ;
74611: LD_ADDR_OWVAR 28
74615: PUSH
74616: LD_INT 18
74618: ST_TO_ADDR
// hc_gallery :=  ;
74619: LD_ADDR_OWVAR 33
74623: PUSH
74624: LD_STRING 
74626: ST_TO_ADDR
// end ;
74627: LD_VAR 0 1
74631: RET
// export function PrepareHorse ( ) ; begin
74632: LD_INT 0
74634: PPUSH
// uc_side := 0 ;
74635: LD_ADDR_OWVAR 20
74639: PUSH
74640: LD_INT 0
74642: ST_TO_ADDR
// uc_nation := 0 ;
74643: LD_ADDR_OWVAR 21
74647: PUSH
74648: LD_INT 0
74650: ST_TO_ADDR
// hc_class := class_horse ;
74651: LD_ADDR_OWVAR 28
74655: PUSH
74656: LD_INT 21
74658: ST_TO_ADDR
// hc_gallery :=  ;
74659: LD_ADDR_OWVAR 33
74663: PUSH
74664: LD_STRING 
74666: ST_TO_ADDR
// end ;
74667: LD_VAR 0 1
74671: RET
// export function PrepareMastodont ( ) ; begin
74672: LD_INT 0
74674: PPUSH
// uc_side := 0 ;
74675: LD_ADDR_OWVAR 20
74679: PUSH
74680: LD_INT 0
74682: ST_TO_ADDR
// uc_nation := 0 ;
74683: LD_ADDR_OWVAR 21
74687: PUSH
74688: LD_INT 0
74690: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74691: LD_ADDR_OWVAR 37
74695: PUSH
74696: LD_INT 31
74698: ST_TO_ADDR
// vc_control := control_rider ;
74699: LD_ADDR_OWVAR 38
74703: PUSH
74704: LD_INT 4
74706: ST_TO_ADDR
// end ;
74707: LD_VAR 0 1
74711: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74712: LD_INT 0
74714: PPUSH
74715: PPUSH
74716: PPUSH
// uc_side = 0 ;
74717: LD_ADDR_OWVAR 20
74721: PUSH
74722: LD_INT 0
74724: ST_TO_ADDR
// uc_nation = 0 ;
74725: LD_ADDR_OWVAR 21
74729: PUSH
74730: LD_INT 0
74732: ST_TO_ADDR
// InitHc_All ( ) ;
74733: CALL_OW 584
// InitVc ;
74737: CALL_OW 20
// if mastodonts then
74741: LD_VAR 0 6
74745: IFFALSE 74812
// for i = 1 to mastodonts do
74747: LD_ADDR_VAR 0 11
74751: PUSH
74752: DOUBLE
74753: LD_INT 1
74755: DEC
74756: ST_TO_ADDR
74757: LD_VAR 0 6
74761: PUSH
74762: FOR_TO
74763: IFFALSE 74810
// begin vc_chassis := 31 ;
74765: LD_ADDR_OWVAR 37
74769: PUSH
74770: LD_INT 31
74772: ST_TO_ADDR
// vc_control := control_rider ;
74773: LD_ADDR_OWVAR 38
74777: PUSH
74778: LD_INT 4
74780: ST_TO_ADDR
// animal := CreateVehicle ;
74781: LD_ADDR_VAR 0 12
74785: PUSH
74786: CALL_OW 45
74790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74791: LD_VAR 0 12
74795: PPUSH
74796: LD_VAR 0 8
74800: PPUSH
74801: LD_INT 0
74803: PPUSH
74804: CALL 76940 0 3
// end ;
74808: GO 74762
74810: POP
74811: POP
// if horses then
74812: LD_VAR 0 5
74816: IFFALSE 74883
// for i = 1 to horses do
74818: LD_ADDR_VAR 0 11
74822: PUSH
74823: DOUBLE
74824: LD_INT 1
74826: DEC
74827: ST_TO_ADDR
74828: LD_VAR 0 5
74832: PUSH
74833: FOR_TO
74834: IFFALSE 74881
// begin hc_class := 21 ;
74836: LD_ADDR_OWVAR 28
74840: PUSH
74841: LD_INT 21
74843: ST_TO_ADDR
// hc_gallery :=  ;
74844: LD_ADDR_OWVAR 33
74848: PUSH
74849: LD_STRING 
74851: ST_TO_ADDR
// animal := CreateHuman ;
74852: LD_ADDR_VAR 0 12
74856: PUSH
74857: CALL_OW 44
74861: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74862: LD_VAR 0 12
74866: PPUSH
74867: LD_VAR 0 8
74871: PPUSH
74872: LD_INT 0
74874: PPUSH
74875: CALL 76940 0 3
// end ;
74879: GO 74833
74881: POP
74882: POP
// if birds then
74883: LD_VAR 0 1
74887: IFFALSE 74954
// for i = 1 to birds do
74889: LD_ADDR_VAR 0 11
74893: PUSH
74894: DOUBLE
74895: LD_INT 1
74897: DEC
74898: ST_TO_ADDR
74899: LD_VAR 0 1
74903: PUSH
74904: FOR_TO
74905: IFFALSE 74952
// begin hc_class := 18 ;
74907: LD_ADDR_OWVAR 28
74911: PUSH
74912: LD_INT 18
74914: ST_TO_ADDR
// hc_gallery =  ;
74915: LD_ADDR_OWVAR 33
74919: PUSH
74920: LD_STRING 
74922: ST_TO_ADDR
// animal := CreateHuman ;
74923: LD_ADDR_VAR 0 12
74927: PUSH
74928: CALL_OW 44
74932: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74933: LD_VAR 0 12
74937: PPUSH
74938: LD_VAR 0 8
74942: PPUSH
74943: LD_INT 0
74945: PPUSH
74946: CALL 76940 0 3
// end ;
74950: GO 74904
74952: POP
74953: POP
// if tigers then
74954: LD_VAR 0 2
74958: IFFALSE 75042
// for i = 1 to tigers do
74960: LD_ADDR_VAR 0 11
74964: PUSH
74965: DOUBLE
74966: LD_INT 1
74968: DEC
74969: ST_TO_ADDR
74970: LD_VAR 0 2
74974: PUSH
74975: FOR_TO
74976: IFFALSE 75040
// begin hc_class = class_tiger ;
74978: LD_ADDR_OWVAR 28
74982: PUSH
74983: LD_INT 14
74985: ST_TO_ADDR
// hc_gallery =  ;
74986: LD_ADDR_OWVAR 33
74990: PUSH
74991: LD_STRING 
74993: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74994: LD_ADDR_OWVAR 35
74998: PUSH
74999: LD_INT 7
75001: NEG
75002: PPUSH
75003: LD_INT 7
75005: PPUSH
75006: CALL_OW 12
75010: ST_TO_ADDR
// animal := CreateHuman ;
75011: LD_ADDR_VAR 0 12
75015: PUSH
75016: CALL_OW 44
75020: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75021: LD_VAR 0 12
75025: PPUSH
75026: LD_VAR 0 8
75030: PPUSH
75031: LD_INT 0
75033: PPUSH
75034: CALL 76940 0 3
// end ;
75038: GO 74975
75040: POP
75041: POP
// if apemans then
75042: LD_VAR 0 3
75046: IFFALSE 75169
// for i = 1 to apemans do
75048: LD_ADDR_VAR 0 11
75052: PUSH
75053: DOUBLE
75054: LD_INT 1
75056: DEC
75057: ST_TO_ADDR
75058: LD_VAR 0 3
75062: PUSH
75063: FOR_TO
75064: IFFALSE 75167
// begin hc_class = class_apeman ;
75066: LD_ADDR_OWVAR 28
75070: PUSH
75071: LD_INT 12
75073: ST_TO_ADDR
// hc_gallery =  ;
75074: LD_ADDR_OWVAR 33
75078: PUSH
75079: LD_STRING 
75081: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75082: LD_ADDR_OWVAR 35
75086: PUSH
75087: LD_INT 2
75089: NEG
75090: PPUSH
75091: LD_INT 2
75093: PPUSH
75094: CALL_OW 12
75098: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75099: LD_ADDR_OWVAR 31
75103: PUSH
75104: LD_INT 1
75106: PPUSH
75107: LD_INT 3
75109: PPUSH
75110: CALL_OW 12
75114: PUSH
75115: LD_INT 1
75117: PPUSH
75118: LD_INT 3
75120: PPUSH
75121: CALL_OW 12
75125: PUSH
75126: LD_INT 0
75128: PUSH
75129: LD_INT 0
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: ST_TO_ADDR
// animal := CreateHuman ;
75138: LD_ADDR_VAR 0 12
75142: PUSH
75143: CALL_OW 44
75147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75148: LD_VAR 0 12
75152: PPUSH
75153: LD_VAR 0 8
75157: PPUSH
75158: LD_INT 0
75160: PPUSH
75161: CALL 76940 0 3
// end ;
75165: GO 75063
75167: POP
75168: POP
// if enchidnas then
75169: LD_VAR 0 4
75173: IFFALSE 75240
// for i = 1 to enchidnas do
75175: LD_ADDR_VAR 0 11
75179: PUSH
75180: DOUBLE
75181: LD_INT 1
75183: DEC
75184: ST_TO_ADDR
75185: LD_VAR 0 4
75189: PUSH
75190: FOR_TO
75191: IFFALSE 75238
// begin hc_class = 13 ;
75193: LD_ADDR_OWVAR 28
75197: PUSH
75198: LD_INT 13
75200: ST_TO_ADDR
// hc_gallery =  ;
75201: LD_ADDR_OWVAR 33
75205: PUSH
75206: LD_STRING 
75208: ST_TO_ADDR
// animal := CreateHuman ;
75209: LD_ADDR_VAR 0 12
75213: PUSH
75214: CALL_OW 44
75218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75219: LD_VAR 0 12
75223: PPUSH
75224: LD_VAR 0 8
75228: PPUSH
75229: LD_INT 0
75231: PPUSH
75232: CALL 76940 0 3
// end ;
75236: GO 75190
75238: POP
75239: POP
// if fishes then
75240: LD_VAR 0 7
75244: IFFALSE 75311
// for i = 1 to fishes do
75246: LD_ADDR_VAR 0 11
75250: PUSH
75251: DOUBLE
75252: LD_INT 1
75254: DEC
75255: ST_TO_ADDR
75256: LD_VAR 0 7
75260: PUSH
75261: FOR_TO
75262: IFFALSE 75309
// begin hc_class = 20 ;
75264: LD_ADDR_OWVAR 28
75268: PUSH
75269: LD_INT 20
75271: ST_TO_ADDR
// hc_gallery =  ;
75272: LD_ADDR_OWVAR 33
75276: PUSH
75277: LD_STRING 
75279: ST_TO_ADDR
// animal := CreateHuman ;
75280: LD_ADDR_VAR 0 12
75284: PUSH
75285: CALL_OW 44
75289: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75290: LD_VAR 0 12
75294: PPUSH
75295: LD_VAR 0 9
75299: PPUSH
75300: LD_INT 0
75302: PPUSH
75303: CALL 76940 0 3
// end ;
75307: GO 75261
75309: POP
75310: POP
// end ;
75311: LD_VAR 0 10
75315: RET
// export function WantHeal ( sci , unit ) ; begin
75316: LD_INT 0
75318: PPUSH
// if GetTaskList ( sci ) > 0 then
75319: LD_VAR 0 1
75323: PPUSH
75324: CALL_OW 437
75328: PUSH
75329: LD_INT 0
75331: GREATER
75332: IFFALSE 75402
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75334: LD_VAR 0 1
75338: PPUSH
75339: CALL_OW 437
75343: PUSH
75344: LD_INT 1
75346: ARRAY
75347: PUSH
75348: LD_INT 1
75350: ARRAY
75351: PUSH
75352: LD_STRING l
75354: EQUAL
75355: PUSH
75356: LD_VAR 0 1
75360: PPUSH
75361: CALL_OW 437
75365: PUSH
75366: LD_INT 1
75368: ARRAY
75369: PUSH
75370: LD_INT 4
75372: ARRAY
75373: PUSH
75374: LD_VAR 0 2
75378: EQUAL
75379: AND
75380: IFFALSE 75392
// result := true else
75382: LD_ADDR_VAR 0 3
75386: PUSH
75387: LD_INT 1
75389: ST_TO_ADDR
75390: GO 75400
// result := false ;
75392: LD_ADDR_VAR 0 3
75396: PUSH
75397: LD_INT 0
75399: ST_TO_ADDR
// end else
75400: GO 75410
// result := false ;
75402: LD_ADDR_VAR 0 3
75406: PUSH
75407: LD_INT 0
75409: ST_TO_ADDR
// end ;
75410: LD_VAR 0 3
75414: RET
// export function HealTarget ( sci ) ; begin
75415: LD_INT 0
75417: PPUSH
// if not sci then
75418: LD_VAR 0 1
75422: NOT
75423: IFFALSE 75427
// exit ;
75425: GO 75492
// result := 0 ;
75427: LD_ADDR_VAR 0 2
75431: PUSH
75432: LD_INT 0
75434: ST_TO_ADDR
// if GetTaskList ( sci ) then
75435: LD_VAR 0 1
75439: PPUSH
75440: CALL_OW 437
75444: IFFALSE 75492
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75446: LD_VAR 0 1
75450: PPUSH
75451: CALL_OW 437
75455: PUSH
75456: LD_INT 1
75458: ARRAY
75459: PUSH
75460: LD_INT 1
75462: ARRAY
75463: PUSH
75464: LD_STRING l
75466: EQUAL
75467: IFFALSE 75492
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75469: LD_ADDR_VAR 0 2
75473: PUSH
75474: LD_VAR 0 1
75478: PPUSH
75479: CALL_OW 437
75483: PUSH
75484: LD_INT 1
75486: ARRAY
75487: PUSH
75488: LD_INT 4
75490: ARRAY
75491: ST_TO_ADDR
// end ;
75492: LD_VAR 0 2
75496: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75497: LD_INT 0
75499: PPUSH
75500: PPUSH
75501: PPUSH
75502: PPUSH
// if not base_units then
75503: LD_VAR 0 1
75507: NOT
75508: IFFALSE 75512
// exit ;
75510: GO 75599
// result := false ;
75512: LD_ADDR_VAR 0 2
75516: PUSH
75517: LD_INT 0
75519: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75520: LD_ADDR_VAR 0 5
75524: PUSH
75525: LD_VAR 0 1
75529: PPUSH
75530: LD_INT 21
75532: PUSH
75533: LD_INT 3
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PPUSH
75540: CALL_OW 72
75544: ST_TO_ADDR
// if not tmp then
75545: LD_VAR 0 5
75549: NOT
75550: IFFALSE 75554
// exit ;
75552: GO 75599
// for i in tmp do
75554: LD_ADDR_VAR 0 3
75558: PUSH
75559: LD_VAR 0 5
75563: PUSH
75564: FOR_IN
75565: IFFALSE 75597
// begin result := EnemyInRange ( i , 22 ) ;
75567: LD_ADDR_VAR 0 2
75571: PUSH
75572: LD_VAR 0 3
75576: PPUSH
75577: LD_INT 22
75579: PPUSH
75580: CALL 73186 0 2
75584: ST_TO_ADDR
// if result then
75585: LD_VAR 0 2
75589: IFFALSE 75595
// exit ;
75591: POP
75592: POP
75593: GO 75599
// end ;
75595: GO 75564
75597: POP
75598: POP
// end ;
75599: LD_VAR 0 2
75603: RET
// export function FilterByTag ( units , tag ) ; begin
75604: LD_INT 0
75606: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75607: LD_ADDR_VAR 0 3
75611: PUSH
75612: LD_VAR 0 1
75616: PPUSH
75617: LD_INT 120
75619: PUSH
75620: LD_VAR 0 2
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PPUSH
75629: CALL_OW 72
75633: ST_TO_ADDR
// end ;
75634: LD_VAR 0 3
75638: RET
// export function IsDriver ( un ) ; begin
75639: LD_INT 0
75641: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75642: LD_ADDR_VAR 0 2
75646: PUSH
75647: LD_VAR 0 1
75651: PUSH
75652: LD_INT 55
75654: PUSH
75655: EMPTY
75656: LIST
75657: PPUSH
75658: CALL_OW 69
75662: IN
75663: ST_TO_ADDR
// end ;
75664: LD_VAR 0 2
75668: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75669: LD_INT 0
75671: PPUSH
75672: PPUSH
// list := [ ] ;
75673: LD_ADDR_VAR 0 5
75677: PUSH
75678: EMPTY
75679: ST_TO_ADDR
// case d of 0 :
75680: LD_VAR 0 3
75684: PUSH
75685: LD_INT 0
75687: DOUBLE
75688: EQUAL
75689: IFTRUE 75693
75691: GO 75826
75693: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75694: LD_ADDR_VAR 0 5
75698: PUSH
75699: LD_VAR 0 1
75703: PUSH
75704: LD_INT 4
75706: MINUS
75707: PUSH
75708: LD_VAR 0 2
75712: PUSH
75713: LD_INT 4
75715: MINUS
75716: PUSH
75717: LD_INT 2
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: LIST
75724: PUSH
75725: LD_VAR 0 1
75729: PUSH
75730: LD_INT 3
75732: MINUS
75733: PUSH
75734: LD_VAR 0 2
75738: PUSH
75739: LD_INT 1
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: LIST
75746: PUSH
75747: LD_VAR 0 1
75751: PUSH
75752: LD_INT 4
75754: PLUS
75755: PUSH
75756: LD_VAR 0 2
75760: PUSH
75761: LD_INT 4
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: LIST
75768: PUSH
75769: LD_VAR 0 1
75773: PUSH
75774: LD_INT 3
75776: PLUS
75777: PUSH
75778: LD_VAR 0 2
75782: PUSH
75783: LD_INT 3
75785: PLUS
75786: PUSH
75787: LD_INT 5
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: LIST
75794: PUSH
75795: LD_VAR 0 1
75799: PUSH
75800: LD_VAR 0 2
75804: PUSH
75805: LD_INT 4
75807: PLUS
75808: PUSH
75809: LD_INT 0
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: LIST
75816: PUSH
75817: EMPTY
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: ST_TO_ADDR
// end ; 1 :
75824: GO 76524
75826: LD_INT 1
75828: DOUBLE
75829: EQUAL
75830: IFTRUE 75834
75832: GO 75967
75834: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75835: LD_ADDR_VAR 0 5
75839: PUSH
75840: LD_VAR 0 1
75844: PUSH
75845: LD_VAR 0 2
75849: PUSH
75850: LD_INT 4
75852: MINUS
75853: PUSH
75854: LD_INT 3
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: LIST
75861: PUSH
75862: LD_VAR 0 1
75866: PUSH
75867: LD_INT 3
75869: MINUS
75870: PUSH
75871: LD_VAR 0 2
75875: PUSH
75876: LD_INT 3
75878: MINUS
75879: PUSH
75880: LD_INT 2
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: LIST
75887: PUSH
75888: LD_VAR 0 1
75892: PUSH
75893: LD_INT 4
75895: MINUS
75896: PUSH
75897: LD_VAR 0 2
75901: PUSH
75902: LD_INT 1
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: LIST
75909: PUSH
75910: LD_VAR 0 1
75914: PUSH
75915: LD_VAR 0 2
75919: PUSH
75920: LD_INT 3
75922: PLUS
75923: PUSH
75924: LD_INT 0
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: LIST
75931: PUSH
75932: LD_VAR 0 1
75936: PUSH
75937: LD_INT 4
75939: PLUS
75940: PUSH
75941: LD_VAR 0 2
75945: PUSH
75946: LD_INT 4
75948: PLUS
75949: PUSH
75950: LD_INT 5
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: LIST
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: ST_TO_ADDR
// end ; 2 :
75965: GO 76524
75967: LD_INT 2
75969: DOUBLE
75970: EQUAL
75971: IFTRUE 75975
75973: GO 76104
75975: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75976: LD_ADDR_VAR 0 5
75980: PUSH
75981: LD_VAR 0 1
75985: PUSH
75986: LD_VAR 0 2
75990: PUSH
75991: LD_INT 3
75993: MINUS
75994: PUSH
75995: LD_INT 3
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: LIST
76002: PUSH
76003: LD_VAR 0 1
76007: PUSH
76008: LD_INT 4
76010: PLUS
76011: PUSH
76012: LD_VAR 0 2
76016: PUSH
76017: LD_INT 4
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: LIST
76024: PUSH
76025: LD_VAR 0 1
76029: PUSH
76030: LD_VAR 0 2
76034: PUSH
76035: LD_INT 4
76037: PLUS
76038: PUSH
76039: LD_INT 0
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: LIST
76046: PUSH
76047: LD_VAR 0 1
76051: PUSH
76052: LD_INT 3
76054: MINUS
76055: PUSH
76056: LD_VAR 0 2
76060: PUSH
76061: LD_INT 1
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: LIST
76068: PUSH
76069: LD_VAR 0 1
76073: PUSH
76074: LD_INT 4
76076: MINUS
76077: PUSH
76078: LD_VAR 0 2
76082: PUSH
76083: LD_INT 4
76085: MINUS
76086: PUSH
76087: LD_INT 2
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: LIST
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: ST_TO_ADDR
// end ; 3 :
76102: GO 76524
76104: LD_INT 3
76106: DOUBLE
76107: EQUAL
76108: IFTRUE 76112
76110: GO 76245
76112: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76113: LD_ADDR_VAR 0 5
76117: PUSH
76118: LD_VAR 0 1
76122: PUSH
76123: LD_INT 3
76125: PLUS
76126: PUSH
76127: LD_VAR 0 2
76131: PUSH
76132: LD_INT 4
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: LIST
76139: PUSH
76140: LD_VAR 0 1
76144: PUSH
76145: LD_INT 4
76147: PLUS
76148: PUSH
76149: LD_VAR 0 2
76153: PUSH
76154: LD_INT 4
76156: PLUS
76157: PUSH
76158: LD_INT 5
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: LIST
76165: PUSH
76166: LD_VAR 0 1
76170: PUSH
76171: LD_INT 4
76173: MINUS
76174: PUSH
76175: LD_VAR 0 2
76179: PUSH
76180: LD_INT 1
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: LIST
76187: PUSH
76188: LD_VAR 0 1
76192: PUSH
76193: LD_VAR 0 2
76197: PUSH
76198: LD_INT 4
76200: MINUS
76201: PUSH
76202: LD_INT 3
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: LIST
76209: PUSH
76210: LD_VAR 0 1
76214: PUSH
76215: LD_INT 3
76217: MINUS
76218: PUSH
76219: LD_VAR 0 2
76223: PUSH
76224: LD_INT 3
76226: MINUS
76227: PUSH
76228: LD_INT 2
76230: PUSH
76231: EMPTY
76232: LIST
76233: LIST
76234: LIST
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: ST_TO_ADDR
// end ; 4 :
76243: GO 76524
76245: LD_INT 4
76247: DOUBLE
76248: EQUAL
76249: IFTRUE 76253
76251: GO 76386
76253: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76254: LD_ADDR_VAR 0 5
76258: PUSH
76259: LD_VAR 0 1
76263: PUSH
76264: LD_VAR 0 2
76268: PUSH
76269: LD_INT 4
76271: PLUS
76272: PUSH
76273: LD_INT 0
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: LIST
76280: PUSH
76281: LD_VAR 0 1
76285: PUSH
76286: LD_INT 3
76288: PLUS
76289: PUSH
76290: LD_VAR 0 2
76294: PUSH
76295: LD_INT 3
76297: PLUS
76298: PUSH
76299: LD_INT 5
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: LIST
76306: PUSH
76307: LD_VAR 0 1
76311: PUSH
76312: LD_INT 4
76314: PLUS
76315: PUSH
76316: LD_VAR 0 2
76320: PUSH
76321: LD_INT 4
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: LIST
76328: PUSH
76329: LD_VAR 0 1
76333: PUSH
76334: LD_VAR 0 2
76338: PUSH
76339: LD_INT 3
76341: MINUS
76342: PUSH
76343: LD_INT 3
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: LIST
76350: PUSH
76351: LD_VAR 0 1
76355: PUSH
76356: LD_INT 4
76358: MINUS
76359: PUSH
76360: LD_VAR 0 2
76364: PUSH
76365: LD_INT 4
76367: MINUS
76368: PUSH
76369: LD_INT 2
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: LIST
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: ST_TO_ADDR
// end ; 5 :
76384: GO 76524
76386: LD_INT 5
76388: DOUBLE
76389: EQUAL
76390: IFTRUE 76394
76392: GO 76523
76394: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76395: LD_ADDR_VAR 0 5
76399: PUSH
76400: LD_VAR 0 1
76404: PUSH
76405: LD_INT 4
76407: MINUS
76408: PUSH
76409: LD_VAR 0 2
76413: PUSH
76414: LD_INT 1
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: LIST
76421: PUSH
76422: LD_VAR 0 1
76426: PUSH
76427: LD_VAR 0 2
76431: PUSH
76432: LD_INT 4
76434: MINUS
76435: PUSH
76436: LD_INT 3
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: LIST
76443: PUSH
76444: LD_VAR 0 1
76448: PUSH
76449: LD_INT 4
76451: PLUS
76452: PUSH
76453: LD_VAR 0 2
76457: PUSH
76458: LD_INT 4
76460: PLUS
76461: PUSH
76462: LD_INT 5
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: LIST
76469: PUSH
76470: LD_VAR 0 1
76474: PUSH
76475: LD_INT 3
76477: PLUS
76478: PUSH
76479: LD_VAR 0 2
76483: PUSH
76484: LD_INT 4
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: LIST
76491: PUSH
76492: LD_VAR 0 1
76496: PUSH
76497: LD_VAR 0 2
76501: PUSH
76502: LD_INT 3
76504: PLUS
76505: PUSH
76506: LD_INT 0
76508: PUSH
76509: EMPTY
76510: LIST
76511: LIST
76512: LIST
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: ST_TO_ADDR
// end ; end ;
76521: GO 76524
76523: POP
// result := list ;
76524: LD_ADDR_VAR 0 4
76528: PUSH
76529: LD_VAR 0 5
76533: ST_TO_ADDR
// end ;
76534: LD_VAR 0 4
76538: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76539: LD_INT 0
76541: PPUSH
76542: PPUSH
76543: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76544: LD_VAR 0 1
76548: NOT
76549: PUSH
76550: LD_VAR 0 2
76554: PUSH
76555: LD_INT 1
76557: PUSH
76558: LD_INT 2
76560: PUSH
76561: LD_INT 3
76563: PUSH
76564: LD_INT 4
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: LIST
76571: LIST
76572: IN
76573: NOT
76574: OR
76575: IFFALSE 76579
// exit ;
76577: GO 76662
// tmp := [ ] ;
76579: LD_ADDR_VAR 0 5
76583: PUSH
76584: EMPTY
76585: ST_TO_ADDR
// for i in units do
76586: LD_ADDR_VAR 0 4
76590: PUSH
76591: LD_VAR 0 1
76595: PUSH
76596: FOR_IN
76597: IFFALSE 76631
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76599: LD_ADDR_VAR 0 5
76603: PUSH
76604: LD_VAR 0 5
76608: PPUSH
76609: LD_VAR 0 4
76613: PPUSH
76614: LD_VAR 0 2
76618: PPUSH
76619: CALL_OW 259
76623: PPUSH
76624: CALL 78035 0 2
76628: ST_TO_ADDR
76629: GO 76596
76631: POP
76632: POP
// if not tmp then
76633: LD_VAR 0 5
76637: NOT
76638: IFFALSE 76642
// exit ;
76640: GO 76662
// result := SortListByListDesc ( units , tmp ) ;
76642: LD_ADDR_VAR 0 3
76646: PUSH
76647: LD_VAR 0 1
76651: PPUSH
76652: LD_VAR 0 5
76656: PPUSH
76657: CALL_OW 77
76661: ST_TO_ADDR
// end ;
76662: LD_VAR 0 3
76666: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76667: LD_INT 0
76669: PPUSH
76670: PPUSH
76671: PPUSH
// result := false ;
76672: LD_ADDR_VAR 0 3
76676: PUSH
76677: LD_INT 0
76679: ST_TO_ADDR
// if not building then
76680: LD_VAR 0 2
76684: NOT
76685: IFFALSE 76689
// exit ;
76687: GO 76827
// x := GetX ( building ) ;
76689: LD_ADDR_VAR 0 4
76693: PUSH
76694: LD_VAR 0 2
76698: PPUSH
76699: CALL_OW 250
76703: ST_TO_ADDR
// y := GetY ( building ) ;
76704: LD_ADDR_VAR 0 5
76708: PUSH
76709: LD_VAR 0 2
76713: PPUSH
76714: CALL_OW 251
76718: ST_TO_ADDR
// if not x or not y then
76719: LD_VAR 0 4
76723: NOT
76724: PUSH
76725: LD_VAR 0 5
76729: NOT
76730: OR
76731: IFFALSE 76735
// exit ;
76733: GO 76827
// if GetTaskList ( unit ) then
76735: LD_VAR 0 1
76739: PPUSH
76740: CALL_OW 437
76744: IFFALSE 76827
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76746: LD_STRING e
76748: PUSH
76749: LD_VAR 0 1
76753: PPUSH
76754: CALL_OW 437
76758: PUSH
76759: LD_INT 1
76761: ARRAY
76762: PUSH
76763: LD_INT 1
76765: ARRAY
76766: EQUAL
76767: PUSH
76768: LD_VAR 0 4
76772: PUSH
76773: LD_VAR 0 1
76777: PPUSH
76778: CALL_OW 437
76782: PUSH
76783: LD_INT 1
76785: ARRAY
76786: PUSH
76787: LD_INT 2
76789: ARRAY
76790: EQUAL
76791: AND
76792: PUSH
76793: LD_VAR 0 5
76797: PUSH
76798: LD_VAR 0 1
76802: PPUSH
76803: CALL_OW 437
76807: PUSH
76808: LD_INT 1
76810: ARRAY
76811: PUSH
76812: LD_INT 3
76814: ARRAY
76815: EQUAL
76816: AND
76817: IFFALSE 76827
// result := true end ;
76819: LD_ADDR_VAR 0 3
76823: PUSH
76824: LD_INT 1
76826: ST_TO_ADDR
// end ;
76827: LD_VAR 0 3
76831: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76832: LD_INT 0
76834: PPUSH
// result := false ;
76835: LD_ADDR_VAR 0 4
76839: PUSH
76840: LD_INT 0
76842: ST_TO_ADDR
// if GetTaskList ( unit ) then
76843: LD_VAR 0 1
76847: PPUSH
76848: CALL_OW 437
76852: IFFALSE 76935
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76854: LD_STRING M
76856: PUSH
76857: LD_VAR 0 1
76861: PPUSH
76862: CALL_OW 437
76866: PUSH
76867: LD_INT 1
76869: ARRAY
76870: PUSH
76871: LD_INT 1
76873: ARRAY
76874: EQUAL
76875: PUSH
76876: LD_VAR 0 2
76880: PUSH
76881: LD_VAR 0 1
76885: PPUSH
76886: CALL_OW 437
76890: PUSH
76891: LD_INT 1
76893: ARRAY
76894: PUSH
76895: LD_INT 2
76897: ARRAY
76898: EQUAL
76899: AND
76900: PUSH
76901: LD_VAR 0 3
76905: PUSH
76906: LD_VAR 0 1
76910: PPUSH
76911: CALL_OW 437
76915: PUSH
76916: LD_INT 1
76918: ARRAY
76919: PUSH
76920: LD_INT 3
76922: ARRAY
76923: EQUAL
76924: AND
76925: IFFALSE 76935
// result := true ;
76927: LD_ADDR_VAR 0 4
76931: PUSH
76932: LD_INT 1
76934: ST_TO_ADDR
// end ; end ;
76935: LD_VAR 0 4
76939: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76940: LD_INT 0
76942: PPUSH
76943: PPUSH
76944: PPUSH
76945: PPUSH
// if not unit or not area then
76946: LD_VAR 0 1
76950: NOT
76951: PUSH
76952: LD_VAR 0 2
76956: NOT
76957: OR
76958: IFFALSE 76962
// exit ;
76960: GO 77138
// tmp := AreaToList ( area , i ) ;
76962: LD_ADDR_VAR 0 6
76966: PUSH
76967: LD_VAR 0 2
76971: PPUSH
76972: LD_VAR 0 5
76976: PPUSH
76977: CALL_OW 517
76981: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76982: LD_ADDR_VAR 0 5
76986: PUSH
76987: DOUBLE
76988: LD_INT 1
76990: DEC
76991: ST_TO_ADDR
76992: LD_VAR 0 6
76996: PUSH
76997: LD_INT 1
76999: ARRAY
77000: PUSH
77001: FOR_TO
77002: IFFALSE 77136
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77004: LD_ADDR_VAR 0 7
77008: PUSH
77009: LD_VAR 0 6
77013: PUSH
77014: LD_INT 1
77016: ARRAY
77017: PUSH
77018: LD_VAR 0 5
77022: ARRAY
77023: PUSH
77024: LD_VAR 0 6
77028: PUSH
77029: LD_INT 2
77031: ARRAY
77032: PUSH
77033: LD_VAR 0 5
77037: ARRAY
77038: PUSH
77039: EMPTY
77040: LIST
77041: LIST
77042: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77043: LD_INT 92
77045: PUSH
77046: LD_VAR 0 7
77050: PUSH
77051: LD_INT 1
77053: ARRAY
77054: PUSH
77055: LD_VAR 0 7
77059: PUSH
77060: LD_INT 2
77062: ARRAY
77063: PUSH
77064: LD_INT 2
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: PPUSH
77073: CALL_OW 69
77077: PUSH
77078: LD_INT 0
77080: EQUAL
77081: IFFALSE 77134
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77083: LD_VAR 0 1
77087: PPUSH
77088: LD_VAR 0 7
77092: PUSH
77093: LD_INT 1
77095: ARRAY
77096: PPUSH
77097: LD_VAR 0 7
77101: PUSH
77102: LD_INT 2
77104: ARRAY
77105: PPUSH
77106: LD_VAR 0 3
77110: PPUSH
77111: CALL_OW 48
// result := IsPlaced ( unit ) ;
77115: LD_ADDR_VAR 0 4
77119: PUSH
77120: LD_VAR 0 1
77124: PPUSH
77125: CALL_OW 305
77129: ST_TO_ADDR
// exit ;
77130: POP
77131: POP
77132: GO 77138
// end ; end ;
77134: GO 77001
77136: POP
77137: POP
// end ;
77138: LD_VAR 0 4
77142: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77143: LD_INT 0
77145: PPUSH
77146: PPUSH
77147: PPUSH
// if not side or side > 8 then
77148: LD_VAR 0 1
77152: NOT
77153: PUSH
77154: LD_VAR 0 1
77158: PUSH
77159: LD_INT 8
77161: GREATER
77162: OR
77163: IFFALSE 77167
// exit ;
77165: GO 77354
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77167: LD_ADDR_VAR 0 4
77171: PUSH
77172: LD_INT 22
77174: PUSH
77175: LD_VAR 0 1
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: LD_INT 21
77186: PUSH
77187: LD_INT 3
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: PPUSH
77198: CALL_OW 69
77202: ST_TO_ADDR
// if not tmp then
77203: LD_VAR 0 4
77207: NOT
77208: IFFALSE 77212
// exit ;
77210: GO 77354
// enable_addtolog := true ;
77212: LD_ADDR_OWVAR 81
77216: PUSH
77217: LD_INT 1
77219: ST_TO_ADDR
// AddToLog ( [ ) ;
77220: LD_STRING [
77222: PPUSH
77223: CALL_OW 561
// for i in tmp do
77227: LD_ADDR_VAR 0 3
77231: PUSH
77232: LD_VAR 0 4
77236: PUSH
77237: FOR_IN
77238: IFFALSE 77345
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77240: LD_STRING [
77242: PUSH
77243: LD_VAR 0 3
77247: PPUSH
77248: CALL_OW 266
77252: STR
77253: PUSH
77254: LD_STRING , 
77256: STR
77257: PUSH
77258: LD_VAR 0 3
77262: PPUSH
77263: CALL_OW 250
77267: STR
77268: PUSH
77269: LD_STRING , 
77271: STR
77272: PUSH
77273: LD_VAR 0 3
77277: PPUSH
77278: CALL_OW 251
77282: STR
77283: PUSH
77284: LD_STRING , 
77286: STR
77287: PUSH
77288: LD_VAR 0 3
77292: PPUSH
77293: CALL_OW 254
77297: STR
77298: PUSH
77299: LD_STRING , 
77301: STR
77302: PUSH
77303: LD_VAR 0 3
77307: PPUSH
77308: LD_INT 1
77310: PPUSH
77311: CALL_OW 268
77315: STR
77316: PUSH
77317: LD_STRING , 
77319: STR
77320: PUSH
77321: LD_VAR 0 3
77325: PPUSH
77326: LD_INT 2
77328: PPUSH
77329: CALL_OW 268
77333: STR
77334: PUSH
77335: LD_STRING ],
77337: STR
77338: PPUSH
77339: CALL_OW 561
// end ;
77343: GO 77237
77345: POP
77346: POP
// AddToLog ( ]; ) ;
77347: LD_STRING ];
77349: PPUSH
77350: CALL_OW 561
// end ;
77354: LD_VAR 0 2
77358: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77359: LD_INT 0
77361: PPUSH
77362: PPUSH
77363: PPUSH
77364: PPUSH
77365: PPUSH
// if not area or not rate or not max then
77366: LD_VAR 0 1
77370: NOT
77371: PUSH
77372: LD_VAR 0 2
77376: NOT
77377: OR
77378: PUSH
77379: LD_VAR 0 4
77383: NOT
77384: OR
77385: IFFALSE 77389
// exit ;
77387: GO 77578
// while 1 do
77389: LD_INT 1
77391: IFFALSE 77578
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77393: LD_ADDR_VAR 0 9
77397: PUSH
77398: LD_VAR 0 1
77402: PPUSH
77403: LD_INT 1
77405: PPUSH
77406: CALL_OW 287
77410: PUSH
77411: LD_INT 10
77413: MUL
77414: ST_TO_ADDR
// r := rate / 10 ;
77415: LD_ADDR_VAR 0 7
77419: PUSH
77420: LD_VAR 0 2
77424: PUSH
77425: LD_INT 10
77427: DIVREAL
77428: ST_TO_ADDR
// time := 1 1$00 ;
77429: LD_ADDR_VAR 0 8
77433: PUSH
77434: LD_INT 2100
77436: ST_TO_ADDR
// if amount < min then
77437: LD_VAR 0 9
77441: PUSH
77442: LD_VAR 0 3
77446: LESS
77447: IFFALSE 77465
// r := r * 2 else
77449: LD_ADDR_VAR 0 7
77453: PUSH
77454: LD_VAR 0 7
77458: PUSH
77459: LD_INT 2
77461: MUL
77462: ST_TO_ADDR
77463: GO 77491
// if amount > max then
77465: LD_VAR 0 9
77469: PUSH
77470: LD_VAR 0 4
77474: GREATER
77475: IFFALSE 77491
// r := r / 2 ;
77477: LD_ADDR_VAR 0 7
77481: PUSH
77482: LD_VAR 0 7
77486: PUSH
77487: LD_INT 2
77489: DIVREAL
77490: ST_TO_ADDR
// time := time / r ;
77491: LD_ADDR_VAR 0 8
77495: PUSH
77496: LD_VAR 0 8
77500: PUSH
77501: LD_VAR 0 7
77505: DIVREAL
77506: ST_TO_ADDR
// if time < 0 then
77507: LD_VAR 0 8
77511: PUSH
77512: LD_INT 0
77514: LESS
77515: IFFALSE 77532
// time := time * - 1 ;
77517: LD_ADDR_VAR 0 8
77521: PUSH
77522: LD_VAR 0 8
77526: PUSH
77527: LD_INT 1
77529: NEG
77530: MUL
77531: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77532: LD_VAR 0 8
77536: PUSH
77537: LD_INT 35
77539: PPUSH
77540: LD_INT 875
77542: PPUSH
77543: CALL_OW 12
77547: PLUS
77548: PPUSH
77549: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77553: LD_INT 1
77555: PPUSH
77556: LD_INT 5
77558: PPUSH
77559: CALL_OW 12
77563: PPUSH
77564: LD_VAR 0 1
77568: PPUSH
77569: LD_INT 1
77571: PPUSH
77572: CALL_OW 55
// end ;
77576: GO 77389
// end ;
77578: LD_VAR 0 5
77582: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77583: LD_INT 0
77585: PPUSH
77586: PPUSH
77587: PPUSH
77588: PPUSH
77589: PPUSH
77590: PPUSH
77591: PPUSH
77592: PPUSH
// if not turrets or not factories then
77593: LD_VAR 0 1
77597: NOT
77598: PUSH
77599: LD_VAR 0 2
77603: NOT
77604: OR
77605: IFFALSE 77609
// exit ;
77607: GO 77916
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77609: LD_ADDR_VAR 0 10
77613: PUSH
77614: LD_INT 5
77616: PUSH
77617: LD_INT 6
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: LD_INT 2
77626: PUSH
77627: LD_INT 4
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 3
77636: PUSH
77637: LD_INT 5
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: LIST
77648: PUSH
77649: LD_INT 24
77651: PUSH
77652: LD_INT 25
77654: PUSH
77655: EMPTY
77656: LIST
77657: LIST
77658: PUSH
77659: LD_INT 23
77661: PUSH
77662: LD_INT 27
77664: PUSH
77665: EMPTY
77666: LIST
77667: LIST
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 42
77675: PUSH
77676: LD_INT 43
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: PUSH
77683: LD_INT 44
77685: PUSH
77686: LD_INT 46
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PUSH
77693: LD_INT 45
77695: PUSH
77696: LD_INT 47
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: LIST
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: LIST
77712: ST_TO_ADDR
// result := [ ] ;
77713: LD_ADDR_VAR 0 3
77717: PUSH
77718: EMPTY
77719: ST_TO_ADDR
// for i in turrets do
77720: LD_ADDR_VAR 0 4
77724: PUSH
77725: LD_VAR 0 1
77729: PUSH
77730: FOR_IN
77731: IFFALSE 77914
// begin nat := GetNation ( i ) ;
77733: LD_ADDR_VAR 0 7
77737: PUSH
77738: LD_VAR 0 4
77742: PPUSH
77743: CALL_OW 248
77747: ST_TO_ADDR
// weapon := 0 ;
77748: LD_ADDR_VAR 0 8
77752: PUSH
77753: LD_INT 0
77755: ST_TO_ADDR
// if not nat then
77756: LD_VAR 0 7
77760: NOT
77761: IFFALSE 77765
// continue ;
77763: GO 77730
// for j in list [ nat ] do
77765: LD_ADDR_VAR 0 5
77769: PUSH
77770: LD_VAR 0 10
77774: PUSH
77775: LD_VAR 0 7
77779: ARRAY
77780: PUSH
77781: FOR_IN
77782: IFFALSE 77823
// if GetBWeapon ( i ) = j [ 1 ] then
77784: LD_VAR 0 4
77788: PPUSH
77789: CALL_OW 269
77793: PUSH
77794: LD_VAR 0 5
77798: PUSH
77799: LD_INT 1
77801: ARRAY
77802: EQUAL
77803: IFFALSE 77821
// begin weapon := j [ 2 ] ;
77805: LD_ADDR_VAR 0 8
77809: PUSH
77810: LD_VAR 0 5
77814: PUSH
77815: LD_INT 2
77817: ARRAY
77818: ST_TO_ADDR
// break ;
77819: GO 77823
// end ;
77821: GO 77781
77823: POP
77824: POP
// if not weapon then
77825: LD_VAR 0 8
77829: NOT
77830: IFFALSE 77834
// continue ;
77832: GO 77730
// for k in factories do
77834: LD_ADDR_VAR 0 6
77838: PUSH
77839: LD_VAR 0 2
77843: PUSH
77844: FOR_IN
77845: IFFALSE 77910
// begin weapons := AvailableWeaponList ( k ) ;
77847: LD_ADDR_VAR 0 9
77851: PUSH
77852: LD_VAR 0 6
77856: PPUSH
77857: CALL_OW 478
77861: ST_TO_ADDR
// if not weapons then
77862: LD_VAR 0 9
77866: NOT
77867: IFFALSE 77871
// continue ;
77869: GO 77844
// if weapon in weapons then
77871: LD_VAR 0 8
77875: PUSH
77876: LD_VAR 0 9
77880: IN
77881: IFFALSE 77908
// begin result := [ i , weapon ] ;
77883: LD_ADDR_VAR 0 3
77887: PUSH
77888: LD_VAR 0 4
77892: PUSH
77893: LD_VAR 0 8
77897: PUSH
77898: EMPTY
77899: LIST
77900: LIST
77901: ST_TO_ADDR
// exit ;
77902: POP
77903: POP
77904: POP
77905: POP
77906: GO 77916
// end ; end ;
77908: GO 77844
77910: POP
77911: POP
// end ;
77912: GO 77730
77914: POP
77915: POP
// end ;
77916: LD_VAR 0 3
77920: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77921: LD_INT 0
77923: PPUSH
// if not side or side > 8 then
77924: LD_VAR 0 3
77928: NOT
77929: PUSH
77930: LD_VAR 0 3
77934: PUSH
77935: LD_INT 8
77937: GREATER
77938: OR
77939: IFFALSE 77943
// exit ;
77941: GO 78002
// if not range then
77943: LD_VAR 0 4
77947: NOT
77948: IFFALSE 77959
// range := - 12 ;
77950: LD_ADDR_VAR 0 4
77954: PUSH
77955: LD_INT 12
77957: NEG
77958: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77959: LD_VAR 0 1
77963: PPUSH
77964: LD_VAR 0 2
77968: PPUSH
77969: LD_VAR 0 3
77973: PPUSH
77974: LD_VAR 0 4
77978: PPUSH
77979: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77983: LD_VAR 0 1
77987: PPUSH
77988: LD_VAR 0 2
77992: PPUSH
77993: LD_VAR 0 3
77997: PPUSH
77998: CALL_OW 331
// end ;
78002: LD_VAR 0 5
78006: RET
// export function Video ( mode ) ; begin
78007: LD_INT 0
78009: PPUSH
// ingame_video = mode ;
78010: LD_ADDR_OWVAR 52
78014: PUSH
78015: LD_VAR 0 1
78019: ST_TO_ADDR
// interface_hidden = mode ;
78020: LD_ADDR_OWVAR 54
78024: PUSH
78025: LD_VAR 0 1
78029: ST_TO_ADDR
// end ;
78030: LD_VAR 0 2
78034: RET
// export function Join ( array , element ) ; begin
78035: LD_INT 0
78037: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78038: LD_ADDR_VAR 0 3
78042: PUSH
78043: LD_VAR 0 1
78047: PPUSH
78048: LD_VAR 0 1
78052: PUSH
78053: LD_INT 1
78055: PLUS
78056: PPUSH
78057: LD_VAR 0 2
78061: PPUSH
78062: CALL_OW 1
78066: ST_TO_ADDR
// end ;
78067: LD_VAR 0 3
78071: RET
// export function JoinUnion ( array , element ) ; begin
78072: LD_INT 0
78074: PPUSH
// result := array union element ;
78075: LD_ADDR_VAR 0 3
78079: PUSH
78080: LD_VAR 0 1
78084: PUSH
78085: LD_VAR 0 2
78089: UNION
78090: ST_TO_ADDR
// end ;
78091: LD_VAR 0 3
78095: RET
// export function GetBehemoths ( side ) ; begin
78096: LD_INT 0
78098: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78099: LD_ADDR_VAR 0 2
78103: PUSH
78104: LD_INT 22
78106: PUSH
78107: LD_VAR 0 1
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: LD_INT 31
78118: PUSH
78119: LD_INT 25
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PPUSH
78130: CALL_OW 69
78134: ST_TO_ADDR
// end ;
78135: LD_VAR 0 2
78139: RET
// export function Shuffle ( array ) ; var i , index ; begin
78140: LD_INT 0
78142: PPUSH
78143: PPUSH
78144: PPUSH
// result := [ ] ;
78145: LD_ADDR_VAR 0 2
78149: PUSH
78150: EMPTY
78151: ST_TO_ADDR
// if not array then
78152: LD_VAR 0 1
78156: NOT
78157: IFFALSE 78161
// exit ;
78159: GO 78260
// Randomize ;
78161: CALL_OW 10
// for i = array downto 1 do
78165: LD_ADDR_VAR 0 3
78169: PUSH
78170: DOUBLE
78171: LD_VAR 0 1
78175: INC
78176: ST_TO_ADDR
78177: LD_INT 1
78179: PUSH
78180: FOR_DOWNTO
78181: IFFALSE 78258
// begin index := rand ( 1 , array ) ;
78183: LD_ADDR_VAR 0 4
78187: PUSH
78188: LD_INT 1
78190: PPUSH
78191: LD_VAR 0 1
78195: PPUSH
78196: CALL_OW 12
78200: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78201: LD_ADDR_VAR 0 2
78205: PUSH
78206: LD_VAR 0 2
78210: PPUSH
78211: LD_VAR 0 2
78215: PUSH
78216: LD_INT 1
78218: PLUS
78219: PPUSH
78220: LD_VAR 0 1
78224: PUSH
78225: LD_VAR 0 4
78229: ARRAY
78230: PPUSH
78231: CALL_OW 2
78235: ST_TO_ADDR
// array := Delete ( array , index ) ;
78236: LD_ADDR_VAR 0 1
78240: PUSH
78241: LD_VAR 0 1
78245: PPUSH
78246: LD_VAR 0 4
78250: PPUSH
78251: CALL_OW 3
78255: ST_TO_ADDR
// end ;
78256: GO 78180
78258: POP
78259: POP
// end ;
78260: LD_VAR 0 2
78264: RET
// export function GetBaseMaterials ( base ) ; begin
78265: LD_INT 0
78267: PPUSH
// result := [ 0 , 0 , 0 ] ;
78268: LD_ADDR_VAR 0 2
78272: PUSH
78273: LD_INT 0
78275: PUSH
78276: LD_INT 0
78278: PUSH
78279: LD_INT 0
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: LIST
78286: ST_TO_ADDR
// if not base then
78287: LD_VAR 0 1
78291: NOT
78292: IFFALSE 78296
// exit ;
78294: GO 78345
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78296: LD_ADDR_VAR 0 2
78300: PUSH
78301: LD_VAR 0 1
78305: PPUSH
78306: LD_INT 1
78308: PPUSH
78309: CALL_OW 275
78313: PUSH
78314: LD_VAR 0 1
78318: PPUSH
78319: LD_INT 2
78321: PPUSH
78322: CALL_OW 275
78326: PUSH
78327: LD_VAR 0 1
78331: PPUSH
78332: LD_INT 3
78334: PPUSH
78335: CALL_OW 275
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: LIST
78344: ST_TO_ADDR
// end ;
78345: LD_VAR 0 2
78349: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78350: LD_INT 0
78352: PPUSH
78353: PPUSH
// result := array ;
78354: LD_ADDR_VAR 0 3
78358: PUSH
78359: LD_VAR 0 1
78363: ST_TO_ADDR
// if size >= result then
78364: LD_VAR 0 2
78368: PUSH
78369: LD_VAR 0 3
78373: GREATEREQUAL
78374: IFFALSE 78378
// exit ;
78376: GO 78428
// if size then
78378: LD_VAR 0 2
78382: IFFALSE 78428
// for i := array downto size do
78384: LD_ADDR_VAR 0 4
78388: PUSH
78389: DOUBLE
78390: LD_VAR 0 1
78394: INC
78395: ST_TO_ADDR
78396: LD_VAR 0 2
78400: PUSH
78401: FOR_DOWNTO
78402: IFFALSE 78426
// result := Delete ( result , result ) ;
78404: LD_ADDR_VAR 0 3
78408: PUSH
78409: LD_VAR 0 3
78413: PPUSH
78414: LD_VAR 0 3
78418: PPUSH
78419: CALL_OW 3
78423: ST_TO_ADDR
78424: GO 78401
78426: POP
78427: POP
// end ;
78428: LD_VAR 0 3
78432: RET
// export function ComExit ( unit ) ; var tmp ; begin
78433: LD_INT 0
78435: PPUSH
78436: PPUSH
// if not IsInUnit ( unit ) then
78437: LD_VAR 0 1
78441: PPUSH
78442: CALL_OW 310
78446: NOT
78447: IFFALSE 78451
// exit ;
78449: GO 78511
// tmp := IsInUnit ( unit ) ;
78451: LD_ADDR_VAR 0 3
78455: PUSH
78456: LD_VAR 0 1
78460: PPUSH
78461: CALL_OW 310
78465: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78466: LD_VAR 0 3
78470: PPUSH
78471: CALL_OW 247
78475: PUSH
78476: LD_INT 2
78478: EQUAL
78479: IFFALSE 78492
// ComExitVehicle ( unit ) else
78481: LD_VAR 0 1
78485: PPUSH
78486: CALL_OW 121
78490: GO 78501
// ComExitBuilding ( unit ) ;
78492: LD_VAR 0 1
78496: PPUSH
78497: CALL_OW 122
// result := tmp ;
78501: LD_ADDR_VAR 0 2
78505: PUSH
78506: LD_VAR 0 3
78510: ST_TO_ADDR
// end ;
78511: LD_VAR 0 2
78515: RET
// export function ComExitAll ( units ) ; var i ; begin
78516: LD_INT 0
78518: PPUSH
78519: PPUSH
// if not units then
78520: LD_VAR 0 1
78524: NOT
78525: IFFALSE 78529
// exit ;
78527: GO 78555
// for i in units do
78529: LD_ADDR_VAR 0 3
78533: PUSH
78534: LD_VAR 0 1
78538: PUSH
78539: FOR_IN
78540: IFFALSE 78553
// ComExit ( i ) ;
78542: LD_VAR 0 3
78546: PPUSH
78547: CALL 78433 0 1
78551: GO 78539
78553: POP
78554: POP
// end ;
78555: LD_VAR 0 2
78559: RET
// export function ResetHc ; begin
78560: LD_INT 0
78562: PPUSH
// InitHc ;
78563: CALL_OW 19
// hc_importance := 0 ;
78567: LD_ADDR_OWVAR 32
78571: PUSH
78572: LD_INT 0
78574: ST_TO_ADDR
// end ;
78575: LD_VAR 0 1
78579: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78580: LD_INT 0
78582: PPUSH
78583: PPUSH
78584: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78585: LD_ADDR_VAR 0 6
78589: PUSH
78590: LD_VAR 0 1
78594: PUSH
78595: LD_VAR 0 3
78599: PLUS
78600: PUSH
78601: LD_INT 2
78603: DIV
78604: ST_TO_ADDR
// if _x < 0 then
78605: LD_VAR 0 6
78609: PUSH
78610: LD_INT 0
78612: LESS
78613: IFFALSE 78630
// _x := _x * - 1 ;
78615: LD_ADDR_VAR 0 6
78619: PUSH
78620: LD_VAR 0 6
78624: PUSH
78625: LD_INT 1
78627: NEG
78628: MUL
78629: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78630: LD_ADDR_VAR 0 7
78634: PUSH
78635: LD_VAR 0 2
78639: PUSH
78640: LD_VAR 0 4
78644: PLUS
78645: PUSH
78646: LD_INT 2
78648: DIV
78649: ST_TO_ADDR
// if _y < 0 then
78650: LD_VAR 0 7
78654: PUSH
78655: LD_INT 0
78657: LESS
78658: IFFALSE 78675
// _y := _y * - 1 ;
78660: LD_ADDR_VAR 0 7
78664: PUSH
78665: LD_VAR 0 7
78669: PUSH
78670: LD_INT 1
78672: NEG
78673: MUL
78674: ST_TO_ADDR
// result := [ _x , _y ] ;
78675: LD_ADDR_VAR 0 5
78679: PUSH
78680: LD_VAR 0 6
78684: PUSH
78685: LD_VAR 0 7
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: ST_TO_ADDR
// end ;
78694: LD_VAR 0 5
78698: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78699: LD_INT 0
78701: PPUSH
78702: PPUSH
78703: PPUSH
78704: PPUSH
// task := GetTaskList ( unit ) ;
78705: LD_ADDR_VAR 0 7
78709: PUSH
78710: LD_VAR 0 1
78714: PPUSH
78715: CALL_OW 437
78719: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78720: LD_VAR 0 7
78724: NOT
78725: PUSH
78726: LD_VAR 0 1
78730: PPUSH
78731: LD_VAR 0 2
78735: PPUSH
78736: CALL_OW 308
78740: NOT
78741: AND
78742: IFFALSE 78746
// exit ;
78744: GO 78864
// if IsInArea ( unit , area ) then
78746: LD_VAR 0 1
78750: PPUSH
78751: LD_VAR 0 2
78755: PPUSH
78756: CALL_OW 308
78760: IFFALSE 78778
// begin ComMoveToArea ( unit , goAway ) ;
78762: LD_VAR 0 1
78766: PPUSH
78767: LD_VAR 0 3
78771: PPUSH
78772: CALL_OW 113
// exit ;
78776: GO 78864
// end ; if task [ 1 ] [ 1 ] <> M then
78778: LD_VAR 0 7
78782: PUSH
78783: LD_INT 1
78785: ARRAY
78786: PUSH
78787: LD_INT 1
78789: ARRAY
78790: PUSH
78791: LD_STRING M
78793: NONEQUAL
78794: IFFALSE 78798
// exit ;
78796: GO 78864
// x := task [ 1 ] [ 2 ] ;
78798: LD_ADDR_VAR 0 5
78802: PUSH
78803: LD_VAR 0 7
78807: PUSH
78808: LD_INT 1
78810: ARRAY
78811: PUSH
78812: LD_INT 2
78814: ARRAY
78815: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78816: LD_ADDR_VAR 0 6
78820: PUSH
78821: LD_VAR 0 7
78825: PUSH
78826: LD_INT 1
78828: ARRAY
78829: PUSH
78830: LD_INT 3
78832: ARRAY
78833: ST_TO_ADDR
// if InArea ( x , y , area ) then
78834: LD_VAR 0 5
78838: PPUSH
78839: LD_VAR 0 6
78843: PPUSH
78844: LD_VAR 0 2
78848: PPUSH
78849: CALL_OW 309
78853: IFFALSE 78864
// ComStop ( unit ) ;
78855: LD_VAR 0 1
78859: PPUSH
78860: CALL_OW 141
// end ;
78864: LD_VAR 0 4
78868: RET
// export function Abs ( value ) ; begin
78869: LD_INT 0
78871: PPUSH
// result := value ;
78872: LD_ADDR_VAR 0 2
78876: PUSH
78877: LD_VAR 0 1
78881: ST_TO_ADDR
// if value < 0 then
78882: LD_VAR 0 1
78886: PUSH
78887: LD_INT 0
78889: LESS
78890: IFFALSE 78907
// result := value * - 1 ;
78892: LD_ADDR_VAR 0 2
78896: PUSH
78897: LD_VAR 0 1
78901: PUSH
78902: LD_INT 1
78904: NEG
78905: MUL
78906: ST_TO_ADDR
// end ;
78907: LD_VAR 0 2
78911: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78912: LD_INT 0
78914: PPUSH
78915: PPUSH
78916: PPUSH
78917: PPUSH
78918: PPUSH
78919: PPUSH
78920: PPUSH
78921: PPUSH
// if not unit or not building then
78922: LD_VAR 0 1
78926: NOT
78927: PUSH
78928: LD_VAR 0 2
78932: NOT
78933: OR
78934: IFFALSE 78938
// exit ;
78936: GO 79164
// x := GetX ( building ) ;
78938: LD_ADDR_VAR 0 4
78942: PUSH
78943: LD_VAR 0 2
78947: PPUSH
78948: CALL_OW 250
78952: ST_TO_ADDR
// y := GetY ( building ) ;
78953: LD_ADDR_VAR 0 6
78957: PUSH
78958: LD_VAR 0 2
78962: PPUSH
78963: CALL_OW 251
78967: ST_TO_ADDR
// d := GetDir ( building ) ;
78968: LD_ADDR_VAR 0 8
78972: PUSH
78973: LD_VAR 0 2
78977: PPUSH
78978: CALL_OW 254
78982: ST_TO_ADDR
// r := 4 ;
78983: LD_ADDR_VAR 0 9
78987: PUSH
78988: LD_INT 4
78990: ST_TO_ADDR
// for i := 1 to 5 do
78991: LD_ADDR_VAR 0 10
78995: PUSH
78996: DOUBLE
78997: LD_INT 1
78999: DEC
79000: ST_TO_ADDR
79001: LD_INT 5
79003: PUSH
79004: FOR_TO
79005: IFFALSE 79162
// begin _x := ShiftX ( x , d , r + i ) ;
79007: LD_ADDR_VAR 0 5
79011: PUSH
79012: LD_VAR 0 4
79016: PPUSH
79017: LD_VAR 0 8
79021: PPUSH
79022: LD_VAR 0 9
79026: PUSH
79027: LD_VAR 0 10
79031: PLUS
79032: PPUSH
79033: CALL_OW 272
79037: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79038: LD_ADDR_VAR 0 7
79042: PUSH
79043: LD_VAR 0 6
79047: PPUSH
79048: LD_VAR 0 8
79052: PPUSH
79053: LD_VAR 0 9
79057: PUSH
79058: LD_VAR 0 10
79062: PLUS
79063: PPUSH
79064: CALL_OW 273
79068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79069: LD_VAR 0 5
79073: PPUSH
79074: LD_VAR 0 7
79078: PPUSH
79079: CALL_OW 488
79083: PUSH
79084: LD_VAR 0 5
79088: PPUSH
79089: LD_VAR 0 7
79093: PPUSH
79094: CALL_OW 428
79098: PPUSH
79099: CALL_OW 247
79103: PUSH
79104: LD_INT 3
79106: PUSH
79107: LD_INT 2
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: IN
79114: NOT
79115: AND
79116: IFFALSE 79160
// begin ComMoveXY ( unit , _x , _y ) ;
79118: LD_VAR 0 1
79122: PPUSH
79123: LD_VAR 0 5
79127: PPUSH
79128: LD_VAR 0 7
79132: PPUSH
79133: CALL_OW 111
// result := [ _x , _y ] ;
79137: LD_ADDR_VAR 0 3
79141: PUSH
79142: LD_VAR 0 5
79146: PUSH
79147: LD_VAR 0 7
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: ST_TO_ADDR
// exit ;
79156: POP
79157: POP
79158: GO 79164
// end ; end ;
79160: GO 79004
79162: POP
79163: POP
// end ;
79164: LD_VAR 0 3
79168: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79169: LD_INT 0
79171: PPUSH
79172: PPUSH
79173: PPUSH
// result := 0 ;
79174: LD_ADDR_VAR 0 3
79178: PUSH
79179: LD_INT 0
79181: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79182: LD_VAR 0 1
79186: PUSH
79187: LD_INT 0
79189: LESS
79190: PUSH
79191: LD_VAR 0 1
79195: PUSH
79196: LD_INT 8
79198: GREATER
79199: OR
79200: PUSH
79201: LD_VAR 0 2
79205: PUSH
79206: LD_INT 0
79208: LESS
79209: OR
79210: PUSH
79211: LD_VAR 0 2
79215: PUSH
79216: LD_INT 8
79218: GREATER
79219: OR
79220: IFFALSE 79224
// exit ;
79222: GO 79299
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79224: LD_ADDR_VAR 0 4
79228: PUSH
79229: LD_INT 22
79231: PUSH
79232: LD_VAR 0 2
79236: PUSH
79237: EMPTY
79238: LIST
79239: LIST
79240: PPUSH
79241: CALL_OW 69
79245: PUSH
79246: FOR_IN
79247: IFFALSE 79297
// begin un := UnitShoot ( i ) ;
79249: LD_ADDR_VAR 0 5
79253: PUSH
79254: LD_VAR 0 4
79258: PPUSH
79259: CALL_OW 504
79263: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79264: LD_VAR 0 5
79268: PPUSH
79269: CALL_OW 255
79273: PUSH
79274: LD_VAR 0 1
79278: EQUAL
79279: IFFALSE 79295
// begin result := un ;
79281: LD_ADDR_VAR 0 3
79285: PUSH
79286: LD_VAR 0 5
79290: ST_TO_ADDR
// exit ;
79291: POP
79292: POP
79293: GO 79299
// end ; end ;
79295: GO 79246
79297: POP
79298: POP
// end ;
79299: LD_VAR 0 3
79303: RET
// export function GetCargoBay ( units ) ; begin
79304: LD_INT 0
79306: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79307: LD_ADDR_VAR 0 2
79311: PUSH
79312: LD_VAR 0 1
79316: PPUSH
79317: LD_INT 2
79319: PUSH
79320: LD_INT 34
79322: PUSH
79323: LD_INT 12
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: PUSH
79330: LD_INT 34
79332: PUSH
79333: LD_INT 51
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: PUSH
79340: LD_INT 34
79342: PUSH
79343: LD_INT 32
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: PUSH
79350: LD_INT 34
79352: PUSH
79353: LD_INT 89
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: LIST
79364: LIST
79365: LIST
79366: PPUSH
79367: CALL_OW 72
79371: ST_TO_ADDR
// end ;
79372: LD_VAR 0 2
79376: RET
// export function Negate ( value ) ; begin
79377: LD_INT 0
79379: PPUSH
// result := not value ;
79380: LD_ADDR_VAR 0 2
79384: PUSH
79385: LD_VAR 0 1
79389: NOT
79390: ST_TO_ADDR
// end ;
79391: LD_VAR 0 2
79395: RET
// export function Inc ( value ) ; begin
79396: LD_INT 0
79398: PPUSH
// result := value + 1 ;
79399: LD_ADDR_VAR 0 2
79403: PUSH
79404: LD_VAR 0 1
79408: PUSH
79409: LD_INT 1
79411: PLUS
79412: ST_TO_ADDR
// end ;
79413: LD_VAR 0 2
79417: RET
// export function Dec ( value ) ; begin
79418: LD_INT 0
79420: PPUSH
// result := value - 1 ;
79421: LD_ADDR_VAR 0 2
79425: PUSH
79426: LD_VAR 0 1
79430: PUSH
79431: LD_INT 1
79433: MINUS
79434: ST_TO_ADDR
// end ;
79435: LD_VAR 0 2
79439: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79440: LD_INT 0
79442: PPUSH
79443: PPUSH
79444: PPUSH
79445: PPUSH
79446: PPUSH
79447: PPUSH
79448: PPUSH
79449: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79450: LD_VAR 0 1
79454: PPUSH
79455: LD_VAR 0 2
79459: PPUSH
79460: CALL_OW 488
79464: NOT
79465: PUSH
79466: LD_VAR 0 3
79470: PPUSH
79471: LD_VAR 0 4
79475: PPUSH
79476: CALL_OW 488
79480: NOT
79481: OR
79482: IFFALSE 79495
// begin result := - 1 ;
79484: LD_ADDR_VAR 0 5
79488: PUSH
79489: LD_INT 1
79491: NEG
79492: ST_TO_ADDR
// exit ;
79493: GO 79730
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79495: LD_ADDR_VAR 0 12
79499: PUSH
79500: LD_VAR 0 1
79504: PPUSH
79505: LD_VAR 0 2
79509: PPUSH
79510: LD_VAR 0 3
79514: PPUSH
79515: LD_VAR 0 4
79519: PPUSH
79520: CALL 78580 0 4
79524: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79525: LD_ADDR_VAR 0 11
79529: PUSH
79530: LD_VAR 0 1
79534: PPUSH
79535: LD_VAR 0 2
79539: PPUSH
79540: LD_VAR 0 12
79544: PUSH
79545: LD_INT 1
79547: ARRAY
79548: PPUSH
79549: LD_VAR 0 12
79553: PUSH
79554: LD_INT 2
79556: ARRAY
79557: PPUSH
79558: CALL_OW 298
79562: ST_TO_ADDR
// distance := 9999 ;
79563: LD_ADDR_VAR 0 10
79567: PUSH
79568: LD_INT 9999
79570: ST_TO_ADDR
// for i := 0 to 5 do
79571: LD_ADDR_VAR 0 6
79575: PUSH
79576: DOUBLE
79577: LD_INT 0
79579: DEC
79580: ST_TO_ADDR
79581: LD_INT 5
79583: PUSH
79584: FOR_TO
79585: IFFALSE 79728
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79587: LD_ADDR_VAR 0 7
79591: PUSH
79592: LD_VAR 0 1
79596: PPUSH
79597: LD_VAR 0 6
79601: PPUSH
79602: LD_VAR 0 11
79606: PPUSH
79607: CALL_OW 272
79611: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79612: LD_ADDR_VAR 0 8
79616: PUSH
79617: LD_VAR 0 2
79621: PPUSH
79622: LD_VAR 0 6
79626: PPUSH
79627: LD_VAR 0 11
79631: PPUSH
79632: CALL_OW 273
79636: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79637: LD_VAR 0 7
79641: PPUSH
79642: LD_VAR 0 8
79646: PPUSH
79647: CALL_OW 488
79651: NOT
79652: IFFALSE 79656
// continue ;
79654: GO 79584
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79656: LD_ADDR_VAR 0 9
79660: PUSH
79661: LD_VAR 0 12
79665: PUSH
79666: LD_INT 1
79668: ARRAY
79669: PPUSH
79670: LD_VAR 0 12
79674: PUSH
79675: LD_INT 2
79677: ARRAY
79678: PPUSH
79679: LD_VAR 0 7
79683: PPUSH
79684: LD_VAR 0 8
79688: PPUSH
79689: CALL_OW 298
79693: ST_TO_ADDR
// if tmp < distance then
79694: LD_VAR 0 9
79698: PUSH
79699: LD_VAR 0 10
79703: LESS
79704: IFFALSE 79726
// begin result := i ;
79706: LD_ADDR_VAR 0 5
79710: PUSH
79711: LD_VAR 0 6
79715: ST_TO_ADDR
// distance := tmp ;
79716: LD_ADDR_VAR 0 10
79720: PUSH
79721: LD_VAR 0 9
79725: ST_TO_ADDR
// end ; end ;
79726: GO 79584
79728: POP
79729: POP
// end ;
79730: LD_VAR 0 5
79734: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79735: LD_INT 0
79737: PPUSH
79738: PPUSH
// if not driver or not IsInUnit ( driver ) then
79739: LD_VAR 0 1
79743: NOT
79744: PUSH
79745: LD_VAR 0 1
79749: PPUSH
79750: CALL_OW 310
79754: NOT
79755: OR
79756: IFFALSE 79760
// exit ;
79758: GO 79850
// vehicle := IsInUnit ( driver ) ;
79760: LD_ADDR_VAR 0 3
79764: PUSH
79765: LD_VAR 0 1
79769: PPUSH
79770: CALL_OW 310
79774: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79775: LD_VAR 0 1
79779: PPUSH
79780: LD_STRING \
79782: PUSH
79783: LD_INT 0
79785: PUSH
79786: LD_INT 0
79788: PUSH
79789: LD_INT 0
79791: PUSH
79792: LD_INT 0
79794: PUSH
79795: LD_INT 0
79797: PUSH
79798: LD_INT 0
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: LIST
79805: LIST
79806: LIST
79807: LIST
79808: LIST
79809: PUSH
79810: LD_STRING E
79812: PUSH
79813: LD_INT 0
79815: PUSH
79816: LD_INT 0
79818: PUSH
79819: LD_VAR 0 3
79823: PUSH
79824: LD_INT 0
79826: PUSH
79827: LD_INT 0
79829: PUSH
79830: LD_INT 0
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: LIST
79839: LIST
79840: LIST
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PPUSH
79846: CALL_OW 446
// end ;
79850: LD_VAR 0 2
79854: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79855: LD_INT 0
79857: PPUSH
79858: PPUSH
// if not driver or not IsInUnit ( driver ) then
79859: LD_VAR 0 1
79863: NOT
79864: PUSH
79865: LD_VAR 0 1
79869: PPUSH
79870: CALL_OW 310
79874: NOT
79875: OR
79876: IFFALSE 79880
// exit ;
79878: GO 79970
// vehicle := IsInUnit ( driver ) ;
79880: LD_ADDR_VAR 0 3
79884: PUSH
79885: LD_VAR 0 1
79889: PPUSH
79890: CALL_OW 310
79894: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79895: LD_VAR 0 1
79899: PPUSH
79900: LD_STRING \
79902: PUSH
79903: LD_INT 0
79905: PUSH
79906: LD_INT 0
79908: PUSH
79909: LD_INT 0
79911: PUSH
79912: LD_INT 0
79914: PUSH
79915: LD_INT 0
79917: PUSH
79918: LD_INT 0
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: LIST
79925: LIST
79926: LIST
79927: LIST
79928: LIST
79929: PUSH
79930: LD_STRING E
79932: PUSH
79933: LD_INT 0
79935: PUSH
79936: LD_INT 0
79938: PUSH
79939: LD_VAR 0 3
79943: PUSH
79944: LD_INT 0
79946: PUSH
79947: LD_INT 0
79949: PUSH
79950: LD_INT 0
79952: PUSH
79953: EMPTY
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: LIST
79961: PUSH
79962: EMPTY
79963: LIST
79964: LIST
79965: PPUSH
79966: CALL_OW 447
// end ;
79970: LD_VAR 0 2
79974: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79975: LD_INT 0
79977: PPUSH
79978: PPUSH
79979: PPUSH
// tmp := [ ] ;
79980: LD_ADDR_VAR 0 5
79984: PUSH
79985: EMPTY
79986: ST_TO_ADDR
// for i in units do
79987: LD_ADDR_VAR 0 4
79991: PUSH
79992: LD_VAR 0 1
79996: PUSH
79997: FOR_IN
79998: IFFALSE 80036
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80000: LD_ADDR_VAR 0 5
80004: PUSH
80005: LD_VAR 0 5
80009: PPUSH
80010: LD_VAR 0 5
80014: PUSH
80015: LD_INT 1
80017: PLUS
80018: PPUSH
80019: LD_VAR 0 4
80023: PPUSH
80024: CALL_OW 256
80028: PPUSH
80029: CALL_OW 2
80033: ST_TO_ADDR
80034: GO 79997
80036: POP
80037: POP
// if not tmp then
80038: LD_VAR 0 5
80042: NOT
80043: IFFALSE 80047
// exit ;
80045: GO 80095
// if asc then
80047: LD_VAR 0 2
80051: IFFALSE 80075
// result := SortListByListAsc ( units , tmp ) else
80053: LD_ADDR_VAR 0 3
80057: PUSH
80058: LD_VAR 0 1
80062: PPUSH
80063: LD_VAR 0 5
80067: PPUSH
80068: CALL_OW 76
80072: ST_TO_ADDR
80073: GO 80095
// result := SortListByListDesc ( units , tmp ) ;
80075: LD_ADDR_VAR 0 3
80079: PUSH
80080: LD_VAR 0 1
80084: PPUSH
80085: LD_VAR 0 5
80089: PPUSH
80090: CALL_OW 77
80094: ST_TO_ADDR
// end ;
80095: LD_VAR 0 3
80099: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80100: LD_INT 0
80102: PPUSH
80103: PPUSH
// task := GetTaskList ( mech ) ;
80104: LD_ADDR_VAR 0 4
80108: PUSH
80109: LD_VAR 0 1
80113: PPUSH
80114: CALL_OW 437
80118: ST_TO_ADDR
// if not task then
80119: LD_VAR 0 4
80123: NOT
80124: IFFALSE 80128
// exit ;
80126: GO 80170
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80128: LD_ADDR_VAR 0 3
80132: PUSH
80133: LD_VAR 0 4
80137: PUSH
80138: LD_INT 1
80140: ARRAY
80141: PUSH
80142: LD_INT 1
80144: ARRAY
80145: PUSH
80146: LD_STRING r
80148: EQUAL
80149: PUSH
80150: LD_VAR 0 4
80154: PUSH
80155: LD_INT 1
80157: ARRAY
80158: PUSH
80159: LD_INT 4
80161: ARRAY
80162: PUSH
80163: LD_VAR 0 2
80167: EQUAL
80168: AND
80169: ST_TO_ADDR
// end ;
80170: LD_VAR 0 3
80174: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80175: LD_INT 0
80177: PPUSH
// SetDir ( unit , d ) ;
80178: LD_VAR 0 1
80182: PPUSH
80183: LD_VAR 0 4
80187: PPUSH
80188: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80192: LD_VAR 0 1
80196: PPUSH
80197: LD_VAR 0 2
80201: PPUSH
80202: LD_VAR 0 3
80206: PPUSH
80207: LD_VAR 0 5
80211: PPUSH
80212: CALL_OW 48
// end ;
80216: LD_VAR 0 6
80220: RET
// export function ToNaturalNumber ( number ) ; begin
80221: LD_INT 0
80223: PPUSH
// result := number div 1 ;
80224: LD_ADDR_VAR 0 2
80228: PUSH
80229: LD_VAR 0 1
80233: PUSH
80234: LD_INT 1
80236: DIV
80237: ST_TO_ADDR
// if number < 0 then
80238: LD_VAR 0 1
80242: PUSH
80243: LD_INT 0
80245: LESS
80246: IFFALSE 80256
// result := 0 ;
80248: LD_ADDR_VAR 0 2
80252: PUSH
80253: LD_INT 0
80255: ST_TO_ADDR
// end ;
80256: LD_VAR 0 2
80260: RET
// export function SortByClass ( units , class ) ; var un ; begin
80261: LD_INT 0
80263: PPUSH
80264: PPUSH
// if not units or not class then
80265: LD_VAR 0 1
80269: NOT
80270: PUSH
80271: LD_VAR 0 2
80275: NOT
80276: OR
80277: IFFALSE 80281
// exit ;
80279: GO 80376
// result := [ ] ;
80281: LD_ADDR_VAR 0 3
80285: PUSH
80286: EMPTY
80287: ST_TO_ADDR
// for un in units do
80288: LD_ADDR_VAR 0 4
80292: PUSH
80293: LD_VAR 0 1
80297: PUSH
80298: FOR_IN
80299: IFFALSE 80374
// if GetClass ( un ) = class then
80301: LD_VAR 0 4
80305: PPUSH
80306: CALL_OW 257
80310: PUSH
80311: LD_VAR 0 2
80315: EQUAL
80316: IFFALSE 80343
// result := Insert ( result , 1 , un ) else
80318: LD_ADDR_VAR 0 3
80322: PUSH
80323: LD_VAR 0 3
80327: PPUSH
80328: LD_INT 1
80330: PPUSH
80331: LD_VAR 0 4
80335: PPUSH
80336: CALL_OW 2
80340: ST_TO_ADDR
80341: GO 80372
// result := Replace ( result , result + 1 , un ) ;
80343: LD_ADDR_VAR 0 3
80347: PUSH
80348: LD_VAR 0 3
80352: PPUSH
80353: LD_VAR 0 3
80357: PUSH
80358: LD_INT 1
80360: PLUS
80361: PPUSH
80362: LD_VAR 0 4
80366: PPUSH
80367: CALL_OW 1
80371: ST_TO_ADDR
80372: GO 80298
80374: POP
80375: POP
// end ;
80376: LD_VAR 0 3
80380: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80381: LD_INT 0
80383: PPUSH
80384: PPUSH
80385: PPUSH
80386: PPUSH
80387: PPUSH
80388: PPUSH
80389: PPUSH
// result := [ ] ;
80390: LD_ADDR_VAR 0 4
80394: PUSH
80395: EMPTY
80396: ST_TO_ADDR
// if x - r < 0 then
80397: LD_VAR 0 1
80401: PUSH
80402: LD_VAR 0 3
80406: MINUS
80407: PUSH
80408: LD_INT 0
80410: LESS
80411: IFFALSE 80423
// min_x := 0 else
80413: LD_ADDR_VAR 0 8
80417: PUSH
80418: LD_INT 0
80420: ST_TO_ADDR
80421: GO 80439
// min_x := x - r ;
80423: LD_ADDR_VAR 0 8
80427: PUSH
80428: LD_VAR 0 1
80432: PUSH
80433: LD_VAR 0 3
80437: MINUS
80438: ST_TO_ADDR
// if y - r < 0 then
80439: LD_VAR 0 2
80443: PUSH
80444: LD_VAR 0 3
80448: MINUS
80449: PUSH
80450: LD_INT 0
80452: LESS
80453: IFFALSE 80465
// min_y := 0 else
80455: LD_ADDR_VAR 0 7
80459: PUSH
80460: LD_INT 0
80462: ST_TO_ADDR
80463: GO 80481
// min_y := y - r ;
80465: LD_ADDR_VAR 0 7
80469: PUSH
80470: LD_VAR 0 2
80474: PUSH
80475: LD_VAR 0 3
80479: MINUS
80480: ST_TO_ADDR
// max_x := x + r ;
80481: LD_ADDR_VAR 0 9
80485: PUSH
80486: LD_VAR 0 1
80490: PUSH
80491: LD_VAR 0 3
80495: PLUS
80496: ST_TO_ADDR
// max_y := y + r ;
80497: LD_ADDR_VAR 0 10
80501: PUSH
80502: LD_VAR 0 2
80506: PUSH
80507: LD_VAR 0 3
80511: PLUS
80512: ST_TO_ADDR
// for _x = min_x to max_x do
80513: LD_ADDR_VAR 0 5
80517: PUSH
80518: DOUBLE
80519: LD_VAR 0 8
80523: DEC
80524: ST_TO_ADDR
80525: LD_VAR 0 9
80529: PUSH
80530: FOR_TO
80531: IFFALSE 80632
// for _y = min_y to max_y do
80533: LD_ADDR_VAR 0 6
80537: PUSH
80538: DOUBLE
80539: LD_VAR 0 7
80543: DEC
80544: ST_TO_ADDR
80545: LD_VAR 0 10
80549: PUSH
80550: FOR_TO
80551: IFFALSE 80628
// begin if not ValidHex ( _x , _y ) then
80553: LD_VAR 0 5
80557: PPUSH
80558: LD_VAR 0 6
80562: PPUSH
80563: CALL_OW 488
80567: NOT
80568: IFFALSE 80572
// continue ;
80570: GO 80550
// if GetResourceTypeXY ( _x , _y ) then
80572: LD_VAR 0 5
80576: PPUSH
80577: LD_VAR 0 6
80581: PPUSH
80582: CALL_OW 283
80586: IFFALSE 80626
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80588: LD_ADDR_VAR 0 4
80592: PUSH
80593: LD_VAR 0 4
80597: PPUSH
80598: LD_VAR 0 4
80602: PUSH
80603: LD_INT 1
80605: PLUS
80606: PPUSH
80607: LD_VAR 0 5
80611: PUSH
80612: LD_VAR 0 6
80616: PUSH
80617: EMPTY
80618: LIST
80619: LIST
80620: PPUSH
80621: CALL_OW 1
80625: ST_TO_ADDR
// end ;
80626: GO 80550
80628: POP
80629: POP
80630: GO 80530
80632: POP
80633: POP
// end ;
80634: LD_VAR 0 4
80638: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80639: LD_INT 0
80641: PPUSH
80642: PPUSH
80643: PPUSH
80644: PPUSH
80645: PPUSH
80646: PPUSH
80647: PPUSH
80648: PPUSH
// if not units then
80649: LD_VAR 0 1
80653: NOT
80654: IFFALSE 80658
// exit ;
80656: GO 81182
// result := UnitFilter ( units , [ f_ok ] ) ;
80658: LD_ADDR_VAR 0 3
80662: PUSH
80663: LD_VAR 0 1
80667: PPUSH
80668: LD_INT 50
80670: PUSH
80671: EMPTY
80672: LIST
80673: PPUSH
80674: CALL_OW 72
80678: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80679: LD_ADDR_VAR 0 8
80683: PUSH
80684: LD_VAR 0 1
80688: PUSH
80689: LD_INT 1
80691: ARRAY
80692: PPUSH
80693: CALL_OW 255
80697: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80698: LD_ADDR_VAR 0 10
80702: PUSH
80703: LD_INT 29
80705: PUSH
80706: LD_INT 91
80708: PUSH
80709: LD_INT 49
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: LIST
80716: ST_TO_ADDR
// if not result then
80717: LD_VAR 0 3
80721: NOT
80722: IFFALSE 80726
// exit ;
80724: GO 81182
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80726: LD_ADDR_VAR 0 5
80730: PUSH
80731: LD_INT 81
80733: PUSH
80734: LD_VAR 0 8
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PPUSH
80743: CALL_OW 69
80747: ST_TO_ADDR
// for i in result do
80748: LD_ADDR_VAR 0 4
80752: PUSH
80753: LD_VAR 0 3
80757: PUSH
80758: FOR_IN
80759: IFFALSE 81180
// begin tag := GetTag ( i ) + 1 ;
80761: LD_ADDR_VAR 0 9
80765: PUSH
80766: LD_VAR 0 4
80770: PPUSH
80771: CALL_OW 110
80775: PUSH
80776: LD_INT 1
80778: PLUS
80779: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80780: LD_ADDR_VAR 0 7
80784: PUSH
80785: LD_VAR 0 4
80789: PPUSH
80790: CALL_OW 250
80794: PPUSH
80795: LD_VAR 0 4
80799: PPUSH
80800: CALL_OW 251
80804: PPUSH
80805: LD_INT 6
80807: PPUSH
80808: CALL 80381 0 3
80812: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80813: LD_VAR 0 4
80817: PPUSH
80818: CALL_OW 247
80822: PUSH
80823: LD_INT 2
80825: EQUAL
80826: PUSH
80827: LD_VAR 0 7
80831: AND
80832: PUSH
80833: LD_VAR 0 4
80837: PPUSH
80838: CALL_OW 264
80842: PUSH
80843: LD_VAR 0 10
80847: IN
80848: NOT
80849: AND
80850: IFFALSE 80889
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80852: LD_VAR 0 4
80856: PPUSH
80857: LD_VAR 0 7
80861: PUSH
80862: LD_INT 1
80864: ARRAY
80865: PUSH
80866: LD_INT 1
80868: ARRAY
80869: PPUSH
80870: LD_VAR 0 7
80874: PUSH
80875: LD_INT 1
80877: ARRAY
80878: PUSH
80879: LD_INT 2
80881: ARRAY
80882: PPUSH
80883: CALL_OW 116
80887: GO 81178
// if path > tag then
80889: LD_VAR 0 2
80893: PUSH
80894: LD_VAR 0 9
80898: GREATER
80899: IFFALSE 81107
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80901: LD_ADDR_VAR 0 6
80905: PUSH
80906: LD_VAR 0 5
80910: PPUSH
80911: LD_INT 91
80913: PUSH
80914: LD_VAR 0 4
80918: PUSH
80919: LD_INT 8
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: LIST
80926: PPUSH
80927: CALL_OW 72
80931: ST_TO_ADDR
// if nearEnemy then
80932: LD_VAR 0 6
80936: IFFALSE 81005
// begin if GetWeapon ( i ) = ru_time_lapser then
80938: LD_VAR 0 4
80942: PPUSH
80943: CALL_OW 264
80947: PUSH
80948: LD_INT 49
80950: EQUAL
80951: IFFALSE 80979
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80953: LD_VAR 0 4
80957: PPUSH
80958: LD_VAR 0 6
80962: PPUSH
80963: LD_VAR 0 4
80967: PPUSH
80968: CALL_OW 74
80972: PPUSH
80973: CALL_OW 112
80977: GO 81003
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80979: LD_VAR 0 4
80983: PPUSH
80984: LD_VAR 0 6
80988: PPUSH
80989: LD_VAR 0 4
80993: PPUSH
80994: CALL_OW 74
80998: PPUSH
80999: CALL 82107 0 2
// end else
81003: GO 81105
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81005: LD_VAR 0 4
81009: PPUSH
81010: LD_VAR 0 2
81014: PUSH
81015: LD_VAR 0 9
81019: ARRAY
81020: PUSH
81021: LD_INT 1
81023: ARRAY
81024: PPUSH
81025: LD_VAR 0 2
81029: PUSH
81030: LD_VAR 0 9
81034: ARRAY
81035: PUSH
81036: LD_INT 2
81038: ARRAY
81039: PPUSH
81040: CALL_OW 297
81044: PUSH
81045: LD_INT 6
81047: GREATER
81048: IFFALSE 81091
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81050: LD_VAR 0 4
81054: PPUSH
81055: LD_VAR 0 2
81059: PUSH
81060: LD_VAR 0 9
81064: ARRAY
81065: PUSH
81066: LD_INT 1
81068: ARRAY
81069: PPUSH
81070: LD_VAR 0 2
81074: PUSH
81075: LD_VAR 0 9
81079: ARRAY
81080: PUSH
81081: LD_INT 2
81083: ARRAY
81084: PPUSH
81085: CALL_OW 114
81089: GO 81105
// SetTag ( i , tag ) ;
81091: LD_VAR 0 4
81095: PPUSH
81096: LD_VAR 0 9
81100: PPUSH
81101: CALL_OW 109
// end else
81105: GO 81178
// if enemy then
81107: LD_VAR 0 5
81111: IFFALSE 81178
// begin if GetWeapon ( i ) = ru_time_lapser then
81113: LD_VAR 0 4
81117: PPUSH
81118: CALL_OW 264
81122: PUSH
81123: LD_INT 49
81125: EQUAL
81126: IFFALSE 81154
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81128: LD_VAR 0 4
81132: PPUSH
81133: LD_VAR 0 5
81137: PPUSH
81138: LD_VAR 0 4
81142: PPUSH
81143: CALL_OW 74
81147: PPUSH
81148: CALL_OW 112
81152: GO 81178
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81154: LD_VAR 0 4
81158: PPUSH
81159: LD_VAR 0 5
81163: PPUSH
81164: LD_VAR 0 4
81168: PPUSH
81169: CALL_OW 74
81173: PPUSH
81174: CALL 82107 0 2
// end ; end ;
81178: GO 80758
81180: POP
81181: POP
// end ;
81182: LD_VAR 0 3
81186: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81187: LD_INT 0
81189: PPUSH
81190: PPUSH
81191: PPUSH
// if not unit or IsInUnit ( unit ) then
81192: LD_VAR 0 1
81196: NOT
81197: PUSH
81198: LD_VAR 0 1
81202: PPUSH
81203: CALL_OW 310
81207: OR
81208: IFFALSE 81212
// exit ;
81210: GO 81303
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81212: LD_ADDR_VAR 0 4
81216: PUSH
81217: LD_VAR 0 1
81221: PPUSH
81222: CALL_OW 250
81226: PPUSH
81227: LD_VAR 0 2
81231: PPUSH
81232: LD_INT 1
81234: PPUSH
81235: CALL_OW 272
81239: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81240: LD_ADDR_VAR 0 5
81244: PUSH
81245: LD_VAR 0 1
81249: PPUSH
81250: CALL_OW 251
81254: PPUSH
81255: LD_VAR 0 2
81259: PPUSH
81260: LD_INT 1
81262: PPUSH
81263: CALL_OW 273
81267: ST_TO_ADDR
// if ValidHex ( x , y ) then
81268: LD_VAR 0 4
81272: PPUSH
81273: LD_VAR 0 5
81277: PPUSH
81278: CALL_OW 488
81282: IFFALSE 81303
// ComTurnXY ( unit , x , y ) ;
81284: LD_VAR 0 1
81288: PPUSH
81289: LD_VAR 0 4
81293: PPUSH
81294: LD_VAR 0 5
81298: PPUSH
81299: CALL_OW 118
// end ;
81303: LD_VAR 0 3
81307: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81308: LD_INT 0
81310: PPUSH
81311: PPUSH
// result := false ;
81312: LD_ADDR_VAR 0 3
81316: PUSH
81317: LD_INT 0
81319: ST_TO_ADDR
// if not units then
81320: LD_VAR 0 2
81324: NOT
81325: IFFALSE 81329
// exit ;
81327: GO 81374
// for i in units do
81329: LD_ADDR_VAR 0 4
81333: PUSH
81334: LD_VAR 0 2
81338: PUSH
81339: FOR_IN
81340: IFFALSE 81372
// if See ( side , i ) then
81342: LD_VAR 0 1
81346: PPUSH
81347: LD_VAR 0 4
81351: PPUSH
81352: CALL_OW 292
81356: IFFALSE 81370
// begin result := true ;
81358: LD_ADDR_VAR 0 3
81362: PUSH
81363: LD_INT 1
81365: ST_TO_ADDR
// exit ;
81366: POP
81367: POP
81368: GO 81374
// end ;
81370: GO 81339
81372: POP
81373: POP
// end ;
81374: LD_VAR 0 3
81378: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81379: LD_INT 0
81381: PPUSH
81382: PPUSH
81383: PPUSH
81384: PPUSH
// if not unit or not points then
81385: LD_VAR 0 1
81389: NOT
81390: PUSH
81391: LD_VAR 0 2
81395: NOT
81396: OR
81397: IFFALSE 81401
// exit ;
81399: GO 81491
// dist := 99999 ;
81401: LD_ADDR_VAR 0 5
81405: PUSH
81406: LD_INT 99999
81408: ST_TO_ADDR
// for i in points do
81409: LD_ADDR_VAR 0 4
81413: PUSH
81414: LD_VAR 0 2
81418: PUSH
81419: FOR_IN
81420: IFFALSE 81489
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81422: LD_ADDR_VAR 0 6
81426: PUSH
81427: LD_VAR 0 1
81431: PPUSH
81432: LD_VAR 0 4
81436: PUSH
81437: LD_INT 1
81439: ARRAY
81440: PPUSH
81441: LD_VAR 0 4
81445: PUSH
81446: LD_INT 2
81448: ARRAY
81449: PPUSH
81450: CALL_OW 297
81454: ST_TO_ADDR
// if tmpDist < dist then
81455: LD_VAR 0 6
81459: PUSH
81460: LD_VAR 0 5
81464: LESS
81465: IFFALSE 81487
// begin result := i ;
81467: LD_ADDR_VAR 0 3
81471: PUSH
81472: LD_VAR 0 4
81476: ST_TO_ADDR
// dist := tmpDist ;
81477: LD_ADDR_VAR 0 5
81481: PUSH
81482: LD_VAR 0 6
81486: ST_TO_ADDR
// end ; end ;
81487: GO 81419
81489: POP
81490: POP
// end ;
81491: LD_VAR 0 3
81495: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81496: LD_INT 0
81498: PPUSH
// uc_side := side ;
81499: LD_ADDR_OWVAR 20
81503: PUSH
81504: LD_VAR 0 1
81508: ST_TO_ADDR
// uc_nation := 3 ;
81509: LD_ADDR_OWVAR 21
81513: PUSH
81514: LD_INT 3
81516: ST_TO_ADDR
// vc_chassis := 25 ;
81517: LD_ADDR_OWVAR 37
81521: PUSH
81522: LD_INT 25
81524: ST_TO_ADDR
// vc_engine := engine_siberite ;
81525: LD_ADDR_OWVAR 39
81529: PUSH
81530: LD_INT 3
81532: ST_TO_ADDR
// vc_control := control_computer ;
81533: LD_ADDR_OWVAR 38
81537: PUSH
81538: LD_INT 3
81540: ST_TO_ADDR
// vc_weapon := 59 ;
81541: LD_ADDR_OWVAR 40
81545: PUSH
81546: LD_INT 59
81548: ST_TO_ADDR
// result := CreateVehicle ;
81549: LD_ADDR_VAR 0 5
81553: PUSH
81554: CALL_OW 45
81558: ST_TO_ADDR
// SetDir ( result , d ) ;
81559: LD_VAR 0 5
81563: PPUSH
81564: LD_VAR 0 4
81568: PPUSH
81569: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81573: LD_VAR 0 5
81577: PPUSH
81578: LD_VAR 0 2
81582: PPUSH
81583: LD_VAR 0 3
81587: PPUSH
81588: LD_INT 0
81590: PPUSH
81591: CALL_OW 48
// end ;
81595: LD_VAR 0 5
81599: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81600: LD_INT 0
81602: PPUSH
81603: PPUSH
81604: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81605: LD_ADDR_VAR 0 2
81609: PUSH
81610: LD_INT 0
81612: PUSH
81613: LD_INT 0
81615: PUSH
81616: LD_INT 0
81618: PUSH
81619: LD_INT 0
81621: PUSH
81622: EMPTY
81623: LIST
81624: LIST
81625: LIST
81626: LIST
81627: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81628: LD_VAR 0 1
81632: NOT
81633: PUSH
81634: LD_VAR 0 1
81638: PPUSH
81639: CALL_OW 264
81643: PUSH
81644: LD_INT 12
81646: PUSH
81647: LD_INT 51
81649: PUSH
81650: LD_INT 32
81652: PUSH
81653: LD_INT 89
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: LIST
81660: LIST
81661: IN
81662: NOT
81663: OR
81664: IFFALSE 81668
// exit ;
81666: GO 81766
// for i := 1 to 3 do
81668: LD_ADDR_VAR 0 3
81672: PUSH
81673: DOUBLE
81674: LD_INT 1
81676: DEC
81677: ST_TO_ADDR
81678: LD_INT 3
81680: PUSH
81681: FOR_TO
81682: IFFALSE 81764
// begin tmp := GetCargo ( cargo , i ) ;
81684: LD_ADDR_VAR 0 4
81688: PUSH
81689: LD_VAR 0 1
81693: PPUSH
81694: LD_VAR 0 3
81698: PPUSH
81699: CALL_OW 289
81703: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81704: LD_ADDR_VAR 0 2
81708: PUSH
81709: LD_VAR 0 2
81713: PPUSH
81714: LD_VAR 0 3
81718: PPUSH
81719: LD_VAR 0 4
81723: PPUSH
81724: CALL_OW 1
81728: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81729: LD_ADDR_VAR 0 2
81733: PUSH
81734: LD_VAR 0 2
81738: PPUSH
81739: LD_INT 4
81741: PPUSH
81742: LD_VAR 0 2
81746: PUSH
81747: LD_INT 4
81749: ARRAY
81750: PUSH
81751: LD_VAR 0 4
81755: PLUS
81756: PPUSH
81757: CALL_OW 1
81761: ST_TO_ADDR
// end ;
81762: GO 81681
81764: POP
81765: POP
// end ;
81766: LD_VAR 0 2
81770: RET
// export function Length ( array ) ; begin
81771: LD_INT 0
81773: PPUSH
// result := array + 0 ;
81774: LD_ADDR_VAR 0 2
81778: PUSH
81779: LD_VAR 0 1
81783: PUSH
81784: LD_INT 0
81786: PLUS
81787: ST_TO_ADDR
// end ;
81788: LD_VAR 0 2
81792: RET
// export function PrepareArray ( array ) ; begin
81793: LD_INT 0
81795: PPUSH
// result := array diff 0 ;
81796: LD_ADDR_VAR 0 2
81800: PUSH
81801: LD_VAR 0 1
81805: PUSH
81806: LD_INT 0
81808: DIFF
81809: ST_TO_ADDR
// if not result [ 1 ] then
81810: LD_VAR 0 2
81814: PUSH
81815: LD_INT 1
81817: ARRAY
81818: NOT
81819: IFFALSE 81839
// result := Delete ( result , 1 ) ;
81821: LD_ADDR_VAR 0 2
81825: PUSH
81826: LD_VAR 0 2
81830: PPUSH
81831: LD_INT 1
81833: PPUSH
81834: CALL_OW 3
81838: ST_TO_ADDR
// end ;
81839: LD_VAR 0 2
81843: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81844: LD_INT 0
81846: PPUSH
81847: PPUSH
81848: PPUSH
81849: PPUSH
// sibRocketRange := 25 ;
81850: LD_ADDR_VAR 0 6
81854: PUSH
81855: LD_INT 25
81857: ST_TO_ADDR
// result := false ;
81858: LD_ADDR_VAR 0 4
81862: PUSH
81863: LD_INT 0
81865: ST_TO_ADDR
// for i := 0 to 5 do
81866: LD_ADDR_VAR 0 5
81870: PUSH
81871: DOUBLE
81872: LD_INT 0
81874: DEC
81875: ST_TO_ADDR
81876: LD_INT 5
81878: PUSH
81879: FOR_TO
81880: IFFALSE 81947
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81882: LD_VAR 0 1
81886: PPUSH
81887: LD_VAR 0 5
81891: PPUSH
81892: LD_VAR 0 6
81896: PPUSH
81897: CALL_OW 272
81901: PPUSH
81902: LD_VAR 0 2
81906: PPUSH
81907: LD_VAR 0 5
81911: PPUSH
81912: LD_VAR 0 6
81916: PPUSH
81917: CALL_OW 273
81921: PPUSH
81922: LD_VAR 0 3
81926: PPUSH
81927: CALL_OW 309
81931: IFFALSE 81945
// begin result := true ;
81933: LD_ADDR_VAR 0 4
81937: PUSH
81938: LD_INT 1
81940: ST_TO_ADDR
// exit ;
81941: POP
81942: POP
81943: GO 81949
// end ;
81945: GO 81879
81947: POP
81948: POP
// end ;
81949: LD_VAR 0 4
81953: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81954: LD_INT 0
81956: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81957: LD_VAR 0 1
81961: PPUSH
81962: LD_VAR 0 2
81966: PPUSH
81967: LD_INT 0
81969: PPUSH
81970: LD_INT 0
81972: PPUSH
81973: LD_INT 1
81975: PPUSH
81976: LD_INT 0
81978: PPUSH
81979: CALL_OW 587
// end ;
81983: LD_VAR 0 3
81987: RET
// export function CenterOnNow ( unit ) ; begin
81988: LD_INT 0
81990: PPUSH
// result := IsInUnit ( unit ) ;
81991: LD_ADDR_VAR 0 2
81995: PUSH
81996: LD_VAR 0 1
82000: PPUSH
82001: CALL_OW 310
82005: ST_TO_ADDR
// if not result then
82006: LD_VAR 0 2
82010: NOT
82011: IFFALSE 82023
// result := unit ;
82013: LD_ADDR_VAR 0 2
82017: PUSH
82018: LD_VAR 0 1
82022: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82023: LD_VAR 0 1
82027: PPUSH
82028: CALL_OW 87
// end ;
82032: LD_VAR 0 2
82036: RET
// export function ComMoveHex ( unit , hex ) ; begin
82037: LD_INT 0
82039: PPUSH
// if not hex then
82040: LD_VAR 0 2
82044: NOT
82045: IFFALSE 82049
// exit ;
82047: GO 82102
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82049: LD_VAR 0 2
82053: PUSH
82054: LD_INT 1
82056: ARRAY
82057: PPUSH
82058: LD_VAR 0 2
82062: PUSH
82063: LD_INT 2
82065: ARRAY
82066: PPUSH
82067: CALL_OW 428
82071: IFFALSE 82075
// exit ;
82073: GO 82102
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82075: LD_VAR 0 1
82079: PPUSH
82080: LD_VAR 0 2
82084: PUSH
82085: LD_INT 1
82087: ARRAY
82088: PPUSH
82089: LD_VAR 0 2
82093: PUSH
82094: LD_INT 2
82096: ARRAY
82097: PPUSH
82098: CALL_OW 111
// end ;
82102: LD_VAR 0 3
82106: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82107: LD_INT 0
82109: PPUSH
82110: PPUSH
82111: PPUSH
// if not unit or not enemy then
82112: LD_VAR 0 1
82116: NOT
82117: PUSH
82118: LD_VAR 0 2
82122: NOT
82123: OR
82124: IFFALSE 82128
// exit ;
82126: GO 82252
// x := GetX ( enemy ) ;
82128: LD_ADDR_VAR 0 4
82132: PUSH
82133: LD_VAR 0 2
82137: PPUSH
82138: CALL_OW 250
82142: ST_TO_ADDR
// y := GetY ( enemy ) ;
82143: LD_ADDR_VAR 0 5
82147: PUSH
82148: LD_VAR 0 2
82152: PPUSH
82153: CALL_OW 251
82157: ST_TO_ADDR
// if ValidHex ( x , y ) then
82158: LD_VAR 0 4
82162: PPUSH
82163: LD_VAR 0 5
82167: PPUSH
82168: CALL_OW 488
82172: IFFALSE 82252
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82174: LD_VAR 0 2
82178: PPUSH
82179: CALL_OW 247
82183: PUSH
82184: LD_INT 3
82186: PUSH
82187: LD_INT 2
82189: PUSH
82190: EMPTY
82191: LIST
82192: LIST
82193: IN
82194: PUSH
82195: LD_VAR 0 1
82199: PPUSH
82200: CALL_OW 255
82204: PPUSH
82205: LD_VAR 0 2
82209: PPUSH
82210: CALL_OW 292
82214: AND
82215: IFFALSE 82233
// ComAttackUnit ( unit , enemy ) else
82217: LD_VAR 0 1
82221: PPUSH
82222: LD_VAR 0 2
82226: PPUSH
82227: CALL_OW 115
82231: GO 82252
// ComAgressiveMove ( unit , x , y ) ;
82233: LD_VAR 0 1
82237: PPUSH
82238: LD_VAR 0 4
82242: PPUSH
82243: LD_VAR 0 5
82247: PPUSH
82248: CALL_OW 114
// end ; end_of_file
82252: LD_VAR 0 3
82256: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82257: LD_VAR 0 1
82261: PUSH
82262: LD_INT 200
82264: DOUBLE
82265: GREATEREQUAL
82266: IFFALSE 82274
82268: LD_INT 299
82270: DOUBLE
82271: LESSEQUAL
82272: IFTRUE 82276
82274: GO 82308
82276: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82277: LD_VAR 0 1
82281: PPUSH
82282: LD_VAR 0 2
82286: PPUSH
82287: LD_VAR 0 3
82291: PPUSH
82292: LD_VAR 0 4
82296: PPUSH
82297: LD_VAR 0 5
82301: PPUSH
82302: CALL 35981 0 5
82306: GO 82385
82308: LD_INT 300
82310: DOUBLE
82311: GREATEREQUAL
82312: IFFALSE 82320
82314: LD_INT 399
82316: DOUBLE
82317: LESSEQUAL
82318: IFTRUE 82322
82320: GO 82384
82322: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82323: LD_VAR 0 1
82327: PPUSH
82328: LD_VAR 0 2
82332: PPUSH
82333: LD_VAR 0 3
82337: PPUSH
82338: LD_VAR 0 4
82342: PPUSH
82343: LD_VAR 0 5
82347: PPUSH
82348: LD_VAR 0 6
82352: PPUSH
82353: LD_VAR 0 7
82357: PPUSH
82358: LD_VAR 0 8
82362: PPUSH
82363: LD_VAR 0 9
82367: PPUSH
82368: LD_VAR 0 10
82372: PPUSH
82373: LD_VAR 0 11
82377: PPUSH
82378: CALL 32306 0 11
82382: GO 82385
82384: POP
// end ;
82385: PPOPN 11
82387: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82388: LD_VAR 0 1
82392: PPUSH
82393: LD_VAR 0 2
82397: PPUSH
82398: LD_VAR 0 3
82402: PPUSH
82403: LD_VAR 0 4
82407: PPUSH
82408: LD_VAR 0 5
82412: PPUSH
82413: CALL 35717 0 5
// end ; end_of_file
82417: PPOPN 5
82419: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82420: LD_VAR 0 1
82424: PPUSH
82425: LD_VAR 0 2
82429: PPUSH
82430: LD_VAR 0 3
82434: PPUSH
82435: LD_VAR 0 4
82439: PPUSH
82440: LD_VAR 0 5
82444: PPUSH
82445: LD_VAR 0 6
82449: PPUSH
82450: CALL 19958 0 6
// end ;
82454: PPOPN 6
82456: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82457: LD_INT 0
82459: PPUSH
// begin if not units then
82460: LD_VAR 0 1
82464: NOT
82465: IFFALSE 82469
// exit ;
82467: GO 82469
// end ;
82469: PPOPN 7
82471: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82472: CALL 19862 0 0
// end ;
82476: PPOPN 1
82478: END
