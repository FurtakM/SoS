// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4355 0 0
// PrepareRussianBase ;
 241: CALL 2721 0 0
// PrepareRussianCommander ;
 245: CALL 2672 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3957 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3957 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3957 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3957 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3957 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3957 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3957 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3957 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3957 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3957 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3957 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3957 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3957 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3957 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// if Frank then
1082: LD_EXP 5
1086: IFFALSE 1103
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1088: LD_EXP 5
1092: PPUSH
1093: LD_INT 10
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// uc_nation = 1 ;
1103: LD_ADDR_OWVAR 21
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// uc_side = 4 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 4
1118: ST_TO_ADDR
// hc_class := 3 ;
1119: LD_ADDR_OWVAR 28
1123: PUSH
1124: LD_INT 3
1126: ST_TO_ADDR
// hc_sex := sex_male ;
1127: LD_ADDR_OWVAR 27
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1135: LD_ADDR_OWVAR 33
1139: PUSH
1140: LD_STRING SecondCharsGal
1142: ST_TO_ADDR
// hc_face_number := 53 ;
1143: LD_ADDR_OWVAR 34
1147: PUSH
1148: LD_INT 53
1150: ST_TO_ADDR
// hc_name := Freddie Warner ;
1151: LD_ADDR_OWVAR 26
1155: PUSH
1156: LD_STRING Freddie Warner
1158: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1159: LD_ADDR_OWVAR 29
1163: PUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 11
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1174: LD_ADDR_OWVAR 30
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1197: LD_ADDR_OWVAR 31
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: LD_INT 0
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// un = CreateHuman ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: LD_INT 10
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// hc_class := 1 ;
1245: LD_ADDR_OWVAR 28
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1261: LD_ADDR_OWVAR 33
1265: PUSH
1266: LD_STRING SecondCharsGal
1268: ST_TO_ADDR
// hc_face_number := 56 ;
1269: LD_ADDR_OWVAR 34
1273: PUSH
1274: LD_INT 56
1276: ST_TO_ADDR
// hc_name := Mel Brennan ;
1277: LD_ADDR_OWVAR 26
1281: PUSH
1282: LD_STRING Mel Brennan
1284: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1285: LD_ADDR_OWVAR 29
1289: PUSH
1290: LD_INT 12
1292: PUSH
1293: LD_INT 11
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1300: LD_ADDR_OWVAR 30
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: LD_INT 0
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1323: LD_ADDR_OWVAR 31
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 0
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: ST_TO_ADDR
// un = CreateHuman ;
1346: LD_ADDR_VAR 0 3
1350: PUSH
1351: CALL_OW 44
1355: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1356: LD_VAR 0 3
1360: PPUSH
1361: LD_INT 10
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 49
// hc_class := 1 ;
1371: LD_ADDR_OWVAR 28
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// hc_sex := sex_male ;
1379: LD_ADDR_OWVAR 27
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1387: LD_ADDR_OWVAR 33
1391: PUSH
1392: LD_STRING AmGalRemake
1394: ST_TO_ADDR
// hc_face_number := 5 ;
1395: LD_ADDR_OWVAR 34
1399: PUSH
1400: LD_INT 5
1402: ST_TO_ADDR
// hc_name := Bob Joplin ;
1403: LD_ADDR_OWVAR 26
1407: PUSH
1408: LD_STRING Bob Joplin
1410: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1411: LD_ADDR_OWVAR 29
1415: PUSH
1416: LD_INT 10
1418: PUSH
1419: LD_INT 11
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1426: LD_ADDR_OWVAR 30
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 0
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// un = CreateHuman ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: CALL_OW 44
1481: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1482: LD_VAR 0 3
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
// hc_class := 3 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// hc_sex := sex_female ;
1505: LD_ADDR_OWVAR 27
1509: PUSH
1510: LD_INT 2
1512: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1513: LD_ADDR_OWVAR 33
1517: PUSH
1518: LD_STRING AmGalRemake
1520: ST_TO_ADDR
// hc_face_number := 8 ;
1521: LD_ADDR_OWVAR 34
1525: PUSH
1526: LD_INT 8
1528: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1529: LD_ADDR_OWVAR 26
1533: PUSH
1534: LD_STRING Elizabeth Whitney
1536: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1537: LD_ADDR_OWVAR 29
1541: PUSH
1542: LD_INT 9
1544: PUSH
1545: LD_INT 11
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1552: LD_ADDR_OWVAR 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1575: LD_ADDR_OWVAR 31
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: ST_TO_ADDR
// un = CreateHuman ;
1598: LD_ADDR_VAR 0 3
1602: PUSH
1603: CALL_OW 44
1607: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1608: LD_VAR 0 3
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// InitHc ;
1623: CALL_OW 19
// end ;
1627: LD_VAR 0 1
1631: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
// uc_nation = 1 ;
1638: LD_ADDR_OWVAR 21
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// uc_side = 1 ;
1646: LD_ADDR_OWVAR 20
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1654: LD_ADDR_OWVAR 37
1658: PUSH
1659: LD_INT 2
1661: ST_TO_ADDR
// vc_engine := engine_combustion ;
1662: LD_ADDR_OWVAR 39
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// vc_control := control_manual ;
1670: LD_ADDR_OWVAR 38
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1678: LD_ADDR_OWVAR 41
1682: PUSH
1683: LD_INT 65
1685: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1686: LD_ADDR_OWVAR 40
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: LD_INT 3
1696: PUSH
1697: LD_INT 4
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_OWVAR 67
1709: ARRAY
1710: ST_TO_ADDR
// veh := CreateVehicle ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: CALL_OW 45
1720: ST_TO_ADDR
// if HexInfo ( 17 , 4 ) = 0 then
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 4
1726: PPUSH
1727: CALL_OW 428
1731: PUSH
1732: LD_INT 0
1734: EQUAL
1735: IFFALSE 1757
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1737: LD_VAR 0 5
1741: PPUSH
1742: LD_INT 17
1744: PPUSH
1745: LD_INT 4
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 48
1755: GO 1775
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_INT 23
1764: PPUSH
1765: LD_INT 10
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 48
// SetDir ( veh , 2 ) ;
1775: LD_VAR 0 5
1779: PPUSH
1780: LD_INT 2
1782: PPUSH
1783: CALL_OW 233
// hc_class := 1 ;
1787: LD_ADDR_OWVAR 28
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// hc_sex := sex_male ;
1795: LD_ADDR_OWVAR 27
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1803: LD_ADDR_OWVAR 33
1807: PUSH
1808: LD_STRING SecondCharsGal
1810: ST_TO_ADDR
// hc_face_number := 59 ;
1811: LD_ADDR_OWVAR 34
1815: PUSH
1816: LD_INT 59
1818: ST_TO_ADDR
// hc_name := Max Gray ;
1819: LD_ADDR_OWVAR 26
1823: PUSH
1824: LD_STRING Max Gray
1826: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1827: LD_ADDR_OWVAR 29
1831: PUSH
1832: LD_INT 9
1834: PUSH
1835: LD_INT 11
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1842: LD_ADDR_OWVAR 30
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1865: LD_ADDR_OWVAR 31
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
// un = CreateHuman ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: CALL_OW 44
1897: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1898: LD_VAR 0 4
1902: PPUSH
1903: LD_INT 11
1905: PPUSH
1906: LD_INT 0
1908: PPUSH
1909: CALL_OW 49
// hc_class := 1 ;
1913: LD_ADDR_OWVAR 28
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// hc_sex := sex_male ;
1921: LD_ADDR_OWVAR 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1929: LD_ADDR_OWVAR 33
1933: PUSH
1934: LD_STRING SecondCharsGal
1936: ST_TO_ADDR
// hc_face_number := 54 ;
1937: LD_ADDR_OWVAR 34
1941: PUSH
1942: LD_INT 54
1944: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1945: LD_ADDR_OWVAR 26
1949: PUSH
1950: LD_STRING Luigi Ghbellin
1952: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1953: LD_ADDR_OWVAR 29
1957: PUSH
1958: LD_INT 11
1960: PUSH
1961: LD_INT 11
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1968: LD_ADDR_OWVAR 30
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1991: LD_ADDR_OWVAR 31
1995: PUSH
1996: LD_INT 1
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// un = CreateHuman ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 44
2023: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 11
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 49
// hc_class := 3 ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// hc_sex := sex_male ;
2047: LD_ADDR_OWVAR 27
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2055: LD_ADDR_OWVAR 33
2059: PUSH
2060: LD_STRING AmGalRemake
2062: ST_TO_ADDR
// hc_face_number := 6 ;
2063: LD_ADDR_OWVAR 34
2067: PUSH
2068: LD_INT 6
2070: ST_TO_ADDR
// hc_name := Leon Carter ;
2071: LD_ADDR_OWVAR 26
2075: PUSH
2076: LD_STRING Leon Carter
2078: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2079: LD_ADDR_OWVAR 29
2083: PUSH
2084: LD_INT 10
2086: PUSH
2087: LD_INT 9
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
2094: LD_ADDR_OWVAR 30
2098: PUSH
2099: LD_INT 0
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 1
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
2117: LD_ADDR_OWVAR 31
2121: PUSH
2122: LD_INT 0
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: ST_TO_ADDR
// un = CreateHuman ;
2140: LD_ADDR_VAR 0 4
2144: PUSH
2145: CALL_OW 44
2149: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2150: LD_VAR 0 4
2154: PPUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: CALL_OW 52
// if count = 4 then
2164: LD_VAR 0 1
2168: PUSH
2169: LD_INT 4
2171: EQUAL
2172: IFFALSE 2300
// begin hc_class := 1 ;
2174: LD_ADDR_OWVAR 28
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// hc_sex := sex_male ;
2182: LD_ADDR_OWVAR 27
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2190: LD_ADDR_OWVAR 33
2194: PUSH
2195: LD_STRING SecondCharsGal
2197: ST_TO_ADDR
// hc_face_number := 34 ;
2198: LD_ADDR_OWVAR 34
2202: PUSH
2203: LD_INT 34
2205: ST_TO_ADDR
// hc_name := Ian Hill ;
2206: LD_ADDR_OWVAR 26
2210: PUSH
2211: LD_STRING Ian Hill
2213: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2214: LD_ADDR_OWVAR 29
2218: PUSH
2219: LD_INT 10
2221: PUSH
2222: LD_INT 12
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2229: LD_ADDR_OWVAR 30
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 0
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2252: LD_ADDR_OWVAR 31
2256: PUSH
2257: LD_INT 2
2259: PUSH
2260: LD_INT 0
2262: PUSH
2263: LD_INT 1
2265: PUSH
2266: LD_INT 0
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: ST_TO_ADDR
// un = CreateHuman ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: CALL_OW 44
2284: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2285: LD_VAR 0 4
2289: PPUSH
2290: LD_INT 11
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: CALL_OW 49
// end ; if count = 5 then
2300: LD_VAR 0 1
2304: PUSH
2305: LD_INT 5
2307: EQUAL
2308: IFFALSE 2562
// begin hc_class := 1 ;
2310: LD_ADDR_OWVAR 28
2314: PUSH
2315: LD_INT 1
2317: ST_TO_ADDR
// hc_sex := sex_male ;
2318: LD_ADDR_OWVAR 27
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2326: LD_ADDR_OWVAR 33
2330: PUSH
2331: LD_STRING SecondCharsGal
2333: ST_TO_ADDR
// hc_face_number := 34 ;
2334: LD_ADDR_OWVAR 34
2338: PUSH
2339: LD_INT 34
2341: ST_TO_ADDR
// hc_name := Ian Hill ;
2342: LD_ADDR_OWVAR 26
2346: PUSH
2347: LD_STRING Ian Hill
2349: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2350: LD_ADDR_OWVAR 29
2354: PUSH
2355: LD_INT 10
2357: PUSH
2358: LD_INT 12
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2365: LD_ADDR_OWVAR 30
2369: PUSH
2370: LD_INT 0
2372: PUSH
2373: LD_INT 0
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: LD_INT 0
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2388: LD_ADDR_OWVAR 31
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: LD_INT 0
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: LD_INT 0
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: ST_TO_ADDR
// un = CreateHuman ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: LD_INT 11
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 49
// hc_class := 1 ;
2436: LD_ADDR_OWVAR 28
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// hc_sex := sex_female ;
2444: LD_ADDR_OWVAR 27
2448: PUSH
2449: LD_INT 2
2451: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2452: LD_ADDR_OWVAR 33
2456: PUSH
2457: LD_STRING SecondCharsGal
2459: ST_TO_ADDR
// hc_face_number := 41 ;
2460: LD_ADDR_OWVAR 34
2464: PUSH
2465: LD_INT 41
2467: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2468: LD_ADDR_OWVAR 26
2472: PUSH
2473: LD_STRING Kate Wadsworth
2475: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2476: LD_ADDR_OWVAR 29
2480: PUSH
2481: LD_INT 9
2483: PUSH
2484: LD_INT 9
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2491: LD_ADDR_OWVAR 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: LD_INT 2
2501: PUSH
2502: LD_INT 0
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2514: LD_ADDR_OWVAR 31
2518: PUSH
2519: LD_INT 2
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// un = CreateHuman ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: CALL_OW 44
2546: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2547: LD_VAR 0 4
2551: PPUSH
2552: LD_INT 11
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2562: LD_INT 11
2564: PPUSH
2565: LD_INT 22
2567: PUSH
2568: LD_INT 1
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PUSH
2575: LD_INT 21
2577: PUSH
2578: LD_INT 1
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 26
2587: PUSH
2588: LD_INT 1
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 70
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2613: LD_INT 11
2615: PPUSH
2616: LD_INT 22
2618: PUSH
2619: LD_INT 1
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 21
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 26
2638: PUSH
2639: LD_INT 1
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: PPUSH
2651: CALL_OW 70
2655: PUSH
2656: LD_INT 1
2658: ARRAY
2659: PPUSH
2660: LD_STRING D6-Sol3-1
2662: PPUSH
2663: CALL_OW 88
// end ; end_of_file
2667: LD_VAR 0 2
2671: RET
// export function PrepareRussianCommander ; begin
2672: LD_INT 0
2674: PPUSH
// uc_side = 3 ;
2675: LD_ADDR_OWVAR 20
2679: PUSH
2680: LD_INT 3
2682: ST_TO_ADDR
// uc_nation = 3 ;
2683: LD_ADDR_OWVAR 21
2687: PUSH
2688: LD_INT 3
2690: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2691: LD_ADDR_EXP 15
2695: PUSH
2696: LD_STRING Stolypin
2698: PPUSH
2699: CALL_OW 25
2703: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2704: LD_EXP 15
2708: PPUSH
2709: LD_INT 21
2711: PPUSH
2712: CALL_OW 52
// end ;
2716: LD_VAR 0 1
2720: RET
// export function PrepareRussianBase ; var i ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2725: LD_INT 3
2727: PPUSH
2728: LD_INT 3
2730: PPUSH
2731: LD_INT 22
2733: PPUSH
2734: LD_EXP 16
2738: PPUSH
2739: LD_EXP 17
2743: PPUSH
2744: CALL_OW 12
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 2
2754: PPUSH
2755: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2759: LD_INT 3
2761: PPUSH
2762: LD_INT 3
2764: PPUSH
2765: LD_INT 21
2767: PPUSH
2768: LD_EXP 16
2772: PPUSH
2773: LD_EXP 17
2777: PPUSH
2778: CALL_OW 12
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: LD_INT 3
2788: PPUSH
2789: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2793: LD_INT 3
2795: PPUSH
2796: LD_INT 3
2798: PPUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_EXP 16
2806: PPUSH
2807: LD_EXP 17
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: LD_INT 4
2819: PPUSH
2820: LD_INT 2
2822: PPUSH
2823: CALL 4020 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 3
2832: PPUSH
2833: LD_INT 24
2835: PPUSH
2836: LD_EXP 16
2840: PPUSH
2841: LD_EXP 17
2845: PPUSH
2846: CALL_OW 12
2850: PPUSH
2851: LD_INT 3
2853: PPUSH
2854: LD_INT 6
2856: PPUSH
2857: CALL 4020 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2861: LD_ADDR_VAR 0 2
2865: PUSH
2866: LD_INT 22
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: LD_INT 30
2878: PUSH
2879: LD_INT 32
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PPUSH
2890: CALL_OW 69
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2936
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2898: LD_INT 3
2900: PPUSH
2901: LD_INT 3
2903: PPUSH
2904: LD_VAR 0 2
2908: PPUSH
2909: LD_EXP 16
2913: PPUSH
2914: LD_EXP 17
2918: PPUSH
2919: CALL_OW 12
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: LD_INT 1
2929: PPUSH
2930: CALL 4020 0 6
2934: GO 2895
2936: POP
2937: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 30
2955: PUSH
2956: LD_INT 31
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: PUSH
2972: FOR_IN
2973: IFFALSE 3001
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2975: LD_EXP 16
2979: PPUSH
2980: LD_EXP 17
2984: PPUSH
2985: CALL_OW 12
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: CALL 4130 0 2
2999: GO 2972
3001: POP
3002: POP
// end ;
3003: LD_VAR 0 1
3007: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3008: LD_INT 0
3010: PPUSH
3011: PPUSH
3012: PPUSH
3013: PPUSH
// uc_side = 6 ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_INT 6
3021: ST_TO_ADDR
// uc_nation = 3 ;
3022: LD_ADDR_OWVAR 21
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3030: LD_ADDR_VAR 0 2
3034: PUSH
3035: DOUBLE
3036: LD_INT 1
3038: DEC
3039: ST_TO_ADDR
3040: LD_INT 1
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: CALL_OW 12
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: PUSH
3062: LD_OWVAR 67
3066: ARRAY
3067: PUSH
3068: FOR_TO
3069: IFFALSE 3229
// begin vc_engine = 1 ;
3071: LD_ADDR_OWVAR 39
3075: PUSH
3076: LD_INT 1
3078: ST_TO_ADDR
// vc_control = 1 ;
3079: LD_ADDR_OWVAR 38
3083: PUSH
3084: LD_INT 1
3086: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3087: LD_ADDR_OWVAR 40
3091: PUSH
3092: LD_INT 42
3094: PUSH
3095: LD_INT 42
3097: PUSH
3098: LD_INT 43
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: PUSH
3106: LD_OWVAR 67
3110: ARRAY
3111: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3112: LD_ADDR_OWVAR 37
3116: PUSH
3117: LD_INT 21
3119: PUSH
3120: LD_INT 22
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PUSH
3131: LD_OWVAR 67
3135: ARRAY
3136: ST_TO_ADDR
// veh = CreateVehicle ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 45
3146: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 49
// hc_gallery =  ;
3162: LD_ADDR_OWVAR 33
3166: PUSH
3167: LD_STRING 
3169: ST_TO_ADDR
// hc_name =  ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING 
3177: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3178: LD_INT 0
3180: PPUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_EXP 16
3188: PPUSH
3189: LD_EXP 17
3193: PPUSH
3194: CALL_OW 12
3198: PPUSH
3199: CALL_OW 380
// un = CreateHuman ;
3203: LD_ADDR_VAR 0 4
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 3
3222: PPUSH
3223: CALL_OW 52
// end ;
3227: GO 3068
3229: POP
3230: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3231: LD_INT 0
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: LD_EXP 16
3241: PPUSH
3242: LD_EXP 17
3246: PPUSH
3247: CALL_OW 12
3251: PUSH
3252: LD_INT 2
3254: PLUS
3255: PPUSH
3256: CALL_OW 380
// un = CreateHuman ;
3260: LD_ADDR_VAR 0 4
3264: PUSH
3265: CALL_OW 44
3269: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3270: LD_VAR 0 4
3274: PPUSH
3275: LD_INT 3
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 4
3290: PPUSH
3291: LD_EXP 16
3295: PPUSH
3296: LD_EXP 17
3300: PPUSH
3301: CALL_OW 12
3305: PUSH
3306: LD_INT 2
3308: PLUS
3309: PPUSH
3310: CALL_OW 380
// un = CreateHuman ;
3314: LD_ADDR_VAR 0 4
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3324: LD_VAR 0 4
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: DOUBLE
3345: LD_INT 1
3347: DEC
3348: ST_TO_ADDR
3349: LD_INT 2
3351: PUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 3
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: LIST
3362: PUSH
3363: LD_OWVAR 67
3367: ARRAY
3368: PUSH
3369: LD_INT 1
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: CALL_OW 12
3379: PLUS
3380: PUSH
3381: FOR_TO
3382: IFFALSE 3452
// begin hc_gallery =  ;
3384: LD_ADDR_OWVAR 33
3388: PUSH
3389: LD_STRING 
3391: ST_TO_ADDR
// hc_name =  ;
3392: LD_ADDR_OWVAR 26
3396: PUSH
3397: LD_STRING 
3399: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_EXP 16
3410: PPUSH
3411: LD_EXP 17
3415: PPUSH
3416: CALL_OW 12
3420: PPUSH
3421: CALL_OW 380
// un = CreateHuman ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: CALL_OW 44
3434: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3435: LD_VAR 0 4
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 0
3445: PPUSH
3446: CALL_OW 49
// end ;
3450: GO 3381
3452: POP
3453: POP
// vc_engine = 1 ;
3454: LD_ADDR_OWVAR 39
3458: PUSH
3459: LD_INT 1
3461: ST_TO_ADDR
// vc_control = 1 ;
3462: LD_ADDR_OWVAR 38
3466: PUSH
3467: LD_INT 1
3469: ST_TO_ADDR
// vc_weapon = 51 ;
3470: LD_ADDR_OWVAR 40
3474: PUSH
3475: LD_INT 51
3477: ST_TO_ADDR
// vc_chassis = 22 ;
3478: LD_ADDR_OWVAR 37
3482: PUSH
3483: LD_INT 22
3485: ST_TO_ADDR
// veh = CreateVehicle ;
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: CALL_OW 45
3495: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3496: LD_VAR 0 3
3500: PPUSH
3501: LD_INT 3
3503: PPUSH
3504: LD_INT 0
3506: PPUSH
3507: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_INT 1
3518: PPUSH
3519: LD_INT 100
3521: PPUSH
3522: CALL_OW 290
// hc_gallery =  ;
3526: LD_ADDR_OWVAR 33
3530: PUSH
3531: LD_STRING 
3533: ST_TO_ADDR
// hc_name =  ;
3534: LD_ADDR_OWVAR 26
3538: PUSH
3539: LD_STRING 
3541: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3542: LD_INT 0
3544: PPUSH
3545: LD_INT 3
3547: PPUSH
3548: LD_EXP 16
3552: PPUSH
3553: LD_EXP 17
3557: PPUSH
3558: CALL_OW 12
3562: PPUSH
3563: CALL_OW 380
// un = CreateHuman ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 3
3586: PPUSH
3587: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: LD_INT 22
3598: PUSH
3599: LD_INT 6
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 1
3608: PUSH
3609: LD_INT 3
3611: PUSH
3612: LD_INT 25
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 3
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PPUSH
3652: CALL_OW 69
3656: PUSH
3657: FOR_IN
3658: IFFALSE 3677
// ComAgressiveMove ( i , 45 , 46 ) ;
3660: LD_VAR 0 2
3664: PPUSH
3665: LD_INT 45
3667: PPUSH
3668: LD_INT 46
3670: PPUSH
3671: CALL_OW 114
3675: GO 3657
3677: POP
3678: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3679: LD_ADDR_VAR 0 2
3683: PUSH
3684: LD_INT 22
3686: PUSH
3687: LD_INT 6
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 25
3696: PUSH
3697: LD_INT 2
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PPUSH
3708: CALL_OW 69
3712: PUSH
3713: FOR_IN
3714: IFFALSE 3745
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3716: LD_ADDR_EXP 21
3720: PUSH
3721: LD_VAR 0 2
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: LD_INT 48
3731: PPUSH
3732: LD_INT 55
3734: PPUSH
3735: LD_INT 5
3737: PPUSH
3738: CALL_OW 145
3742: ST_TO_ADDR
3743: GO 3713
3745: POP
3746: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3747: LD_ADDR_VAR 0 2
3751: PUSH
3752: LD_INT 22
3754: PUSH
3755: LD_INT 6
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: LD_INT 25
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: PPUSH
3776: CALL_OW 69
3780: PUSH
3781: FOR_IN
3782: IFFALSE 3801
// ComMoveXY ( i , 39 , 55 ) ;
3784: LD_VAR 0 2
3788: PPUSH
3789: LD_INT 39
3791: PPUSH
3792: LD_INT 55
3794: PPUSH
3795: CALL_OW 111
3799: GO 3781
3801: POP
3802: POP
// end ;
3803: LD_VAR 0 1
3807: RET
// export function PrepareFirstAttack ; var i , un ; begin
3808: LD_INT 0
3810: PPUSH
3811: PPUSH
3812: PPUSH
// uc_side = 5 ;
3813: LD_ADDR_OWVAR 20
3817: PUSH
3818: LD_INT 5
3820: ST_TO_ADDR
// uc_nation = 3 ;
3821: LD_ADDR_OWVAR 21
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// for i := 1 to 4 do
3829: LD_ADDR_VAR 0 2
3833: PUSH
3834: DOUBLE
3835: LD_INT 1
3837: DEC
3838: ST_TO_ADDR
3839: LD_INT 4
3841: PUSH
3842: FOR_TO
3843: IFFALSE 3942
// begin hc_gallery =  ;
3845: LD_ADDR_OWVAR 33
3849: PUSH
3850: LD_STRING 
3852: ST_TO_ADDR
// hc_name =  ;
3853: LD_ADDR_OWVAR 26
3857: PUSH
3858: LD_STRING 
3860: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3861: LD_INT 0
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_EXP 16
3871: PPUSH
3872: LD_EXP 17
3876: PPUSH
3877: CALL_OW 12
3881: PPUSH
3882: CALL_OW 380
// un = CreateHuman ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 44
3895: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_EXP 1
3920: PPUSH
3921: CALL_OW 250
3925: PPUSH
3926: LD_EXP 1
3930: PPUSH
3931: CALL_OW 251
3935: PPUSH
3936: CALL_OW 114
// end ;
3940: GO 3842
3942: POP
3943: POP
// firstRussianAttack = 1 ;
3944: LD_ADDR_EXP 23
3948: PUSH
3949: LD_INT 1
3951: ST_TO_ADDR
// end ; end_of_file
3952: LD_VAR 0 1
3956: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3957: LD_INT 0
3959: PPUSH
3960: PPUSH
// if exist_mode then
3961: LD_VAR 0 2
3965: IFFALSE 3990
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: LD_EXP 45
3976: PUSH
3977: LD_VAR 0 1
3981: STR
3982: PPUSH
3983: CALL_OW 34
3987: ST_TO_ADDR
// end else
3988: GO 4005
// begin unit := NewCharacter ( ident ) ;
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 25
4004: ST_TO_ADDR
// end ; result := unit ;
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_VAR 0 4
4014: ST_TO_ADDR
// end ;
4015: LD_VAR 0 3
4019: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4020: LD_INT 0
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
// for i = 1 to count do
4026: LD_ADDR_VAR 0 8
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_VAR 0 6
4040: PUSH
4041: FOR_TO
4042: IFFALSE 4123
// begin uc_side = side ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_VAR 0 1
4053: ST_TO_ADDR
// uc_nation = nation ;
4054: LD_ADDR_OWVAR 21
4058: PUSH
4059: LD_VAR 0 2
4063: ST_TO_ADDR
// hc_gallery =  ;
4064: LD_ADDR_OWVAR 33
4068: PUSH
4069: LD_STRING 
4071: ST_TO_ADDR
// hc_name =  ;
4072: LD_ADDR_OWVAR 26
4076: PUSH
4077: LD_STRING 
4079: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4080: LD_INT 0
4082: PPUSH
4083: LD_VAR 0 5
4087: PPUSH
4088: LD_VAR 0 4
4092: PPUSH
4093: CALL_OW 380
// un = CreateHuman ;
4097: LD_ADDR_VAR 0 10
4101: PUSH
4102: CALL_OW 44
4106: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4107: LD_VAR 0 10
4111: PPUSH
4112: LD_VAR 0 3
4116: PPUSH
4117: CALL_OW 52
// end ;
4121: GO 4041
4123: POP
4124: POP
// end ;
4125: LD_VAR 0 7
4129: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4130: LD_INT 0
4132: PPUSH
4133: PPUSH
4134: PPUSH
// uc_side := GetSide ( b ) ;
4135: LD_ADDR_OWVAR 20
4139: PUSH
4140: LD_VAR 0 2
4144: PPUSH
4145: CALL_OW 255
4149: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4150: LD_ADDR_OWVAR 21
4154: PUSH
4155: LD_VAR 0 2
4159: PPUSH
4160: CALL_OW 248
4164: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4165: LD_INT 0
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: LD_VAR 0 1
4175: PPUSH
4176: CALL_OW 380
// un = CreateHuman ;
4180: LD_ADDR_VAR 0 4
4184: PUSH
4185: CALL_OW 44
4189: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_VAR 0 2
4199: PPUSH
4200: CALL_OW 254
4204: PUSH
4205: LD_INT 3
4207: MINUS
4208: ST_TO_ADDR
// if dir < 0 then
4209: LD_VAR 0 5
4213: PUSH
4214: LD_INT 0
4216: LESS
4217: IFFALSE 4233
// dir := 6 + dir ;
4219: LD_ADDR_VAR 0 5
4223: PUSH
4224: LD_INT 6
4226: PUSH
4227: LD_VAR 0 5
4231: PLUS
4232: ST_TO_ADDR
// SetDir ( un , dir ) ;
4233: LD_VAR 0 4
4237: PPUSH
4238: LD_VAR 0 5
4242: PPUSH
4243: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_VAR 0 2
4256: PPUSH
4257: CALL_OW 52
// end ;
4261: LD_VAR 0 3
4265: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4266: LD_INT 0
4268: PPUSH
4269: PPUSH
4270: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_VAR 0 1
4280: PUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 12
4293: ARRAY
4294: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4295: LD_VAR 0 6
4299: PPUSH
4300: CALL_OW 258
4304: PUSH
4305: LD_INT 1
4307: EQUAL
4308: IFFALSE 4326
// Say ( speaker , dialogMID ) else
4310: LD_VAR 0 6
4314: PPUSH
4315: LD_VAR 0 2
4319: PPUSH
4320: CALL_OW 88
4324: GO 4340
// Say ( speaker , dialogFID ) ;
4326: LD_VAR 0 6
4330: PPUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 88
// result := speaker ;
4340: LD_ADDR_VAR 0 4
4344: PUSH
4345: LD_VAR 0 6
4349: ST_TO_ADDR
// end ;
4350: LD_VAR 0 4
4354: RET
// export function PrepareDifficulty ; var tmp ; begin
4355: LD_INT 0
4357: PPUSH
4358: PPUSH
// if Difficulty = 1 then
4359: LD_OWVAR 67
4363: PUSH
4364: LD_INT 1
4366: EQUAL
4367: IFFALSE 4385
// begin RuSoldMinLevel = 0 ;
4369: LD_ADDR_EXP 16
4373: PUSH
4374: LD_INT 0
4376: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4377: LD_ADDR_EXP 17
4381: PUSH
4382: LD_INT 2
4384: ST_TO_ADDR
// end ; if Difficulty = 2 then
4385: LD_OWVAR 67
4389: PUSH
4390: LD_INT 2
4392: EQUAL
4393: IFFALSE 4501
// begin RuSoldMinLevel = 1 ;
4395: LD_ADDR_EXP 16
4399: PUSH
4400: LD_INT 1
4402: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4403: LD_ADDR_EXP 17
4407: PUSH
4408: LD_INT 2
4410: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4411: LD_INT 14
4413: PPUSH
4414: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4418: LD_INT 23
4420: PPUSH
4421: CALL_OW 64
// uc_nation = 3 ;
4425: LD_ADDR_OWVAR 21
4429: PUSH
4430: LD_INT 3
4432: ST_TO_ADDR
// uc_side = 3 ;
4433: LD_ADDR_OWVAR 20
4437: PUSH
4438: LD_INT 3
4440: ST_TO_ADDR
// bc_level = 5 ;
4441: LD_ADDR_OWVAR 43
4445: PUSH
4446: LD_INT 5
4448: ST_TO_ADDR
// bc_type = 32 ;
4449: LD_ADDR_OWVAR 42
4453: PUSH
4454: LD_INT 32
4456: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4457: LD_ADDR_VAR 0 2
4461: PUSH
4462: LD_INT 76
4464: PPUSH
4465: LD_INT 91
4467: PPUSH
4468: LD_INT 2
4470: PPUSH
4471: CALL_OW 47
4475: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4476: LD_VAR 0 2
4480: PPUSH
4481: LD_INT 43
4483: PPUSH
4484: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4488: LD_INT 51
4490: PPUSH
4491: LD_INT 3
4493: PPUSH
4494: LD_INT 1
4496: PPUSH
4497: CALL_OW 322
// end ; if Difficulty = 3 then
4501: LD_OWVAR 67
4505: PUSH
4506: LD_INT 3
4508: EQUAL
4509: IFFALSE 4685
// begin RuSoldMinLevel = 1 ;
4511: LD_ADDR_EXP 16
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4519: LD_ADDR_EXP 17
4523: PUSH
4524: LD_INT 3
4526: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4527: LD_INT 13
4529: PPUSH
4530: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4534: LD_INT 14
4536: PPUSH
4537: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4541: LD_INT 26
4543: PPUSH
4544: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4548: LD_INT 23
4550: PPUSH
4551: CALL_OW 64
// uc_nation = 3 ;
4555: LD_ADDR_OWVAR 21
4559: PUSH
4560: LD_INT 3
4562: ST_TO_ADDR
// uc_side = 3 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 3
4570: ST_TO_ADDR
// bc_level = 5 ;
4571: LD_ADDR_OWVAR 43
4575: PUSH
4576: LD_INT 5
4578: ST_TO_ADDR
// bc_type = 32 ;
4579: LD_ADDR_OWVAR 42
4583: PUSH
4584: LD_INT 32
4586: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4587: LD_ADDR_VAR 0 2
4591: PUSH
4592: LD_INT 76
4594: PPUSH
4595: LD_INT 91
4597: PPUSH
4598: LD_INT 2
4600: PPUSH
4601: CALL_OW 47
4605: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4606: LD_VAR 0 2
4610: PPUSH
4611: LD_INT 44
4613: PPUSH
4614: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 83
4625: PPUSH
4626: LD_INT 84
4628: PPUSH
4629: LD_INT 2
4631: PPUSH
4632: CALL_OW 47
4636: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_INT 43
4644: PPUSH
4645: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4649: LD_INT 51
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4662: LD_INT 52
4664: PPUSH
4665: LD_INT 3
4667: PPUSH
4668: LD_INT 1
4670: PPUSH
4671: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4675: LD_INT 25
4677: PPUSH
4678: LD_INT 44
4680: PPUSH
4681: CALL_OW 431
// end ; end ;
4685: LD_VAR 0 1
4689: RET
// export function EnergyDialog ; begin
4690: LD_INT 0
4692: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4693: LD_INT 46
4695: PPUSH
4696: LD_INT 1
4698: PPUSH
4699: CALL_OW 321
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: PUSH
4708: LD_INT 35
4710: PPUSH
4711: LD_INT 1
4713: PPUSH
4714: CALL_OW 321
4718: PUSH
4719: LD_INT 1
4721: EQUAL
4722: AND
4723: IFFALSE 4747
// begin Say ( JMM , D9c-JMM-1 ) ;
4725: LD_EXP 1
4729: PPUSH
4730: LD_STRING D9c-JMM-1
4732: PPUSH
4733: CALL_OW 88
// energyVDialog = 1 ;
4737: LD_ADDR_EXP 33
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// end else
4745: GO 4901
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4747: LD_INT 35
4749: PPUSH
4750: LD_INT 1
4752: PPUSH
4753: CALL_OW 321
4757: PUSH
4758: LD_INT 2
4760: EQUAL
4761: PUSH
4762: LD_EXP 33
4766: PUSH
4767: LD_INT 0
4769: EQUAL
4770: AND
4771: IFFALSE 4793
// begin Say ( JMM , D9c-JMM-1a ) ;
4773: LD_EXP 1
4777: PPUSH
4778: LD_STRING D9c-JMM-1a
4780: PPUSH
4781: CALL_OW 88
// energyVDialog = 1 ;
4785: LD_ADDR_EXP 33
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4793: LD_INT 46
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 321
4803: PUSH
4804: LD_INT 2
4806: EQUAL
4807: PUSH
4808: LD_EXP 33
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: AND
4817: IFFALSE 4839
// begin Say ( JMM , D9c-JMM-1b ) ;
4819: LD_EXP 1
4823: PPUSH
4824: LD_STRING D9c-JMM-1b
4826: PPUSH
4827: CALL_OW 88
// energyVDialog = 1 ;
4831: LD_ADDR_EXP 33
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4839: LD_INT 46
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: CALL_OW 321
4849: PUSH
4850: LD_INT 2
4852: EQUAL
4853: PUSH
4854: LD_INT 21
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: CALL_OW 321
4864: PUSH
4865: LD_INT 2
4867: EQUAL
4868: AND
4869: PUSH
4870: LD_EXP 33
4874: PUSH
4875: LD_INT 0
4877: EQUAL
4878: AND
4879: IFFALSE 4901
// begin Say ( JMM , D9c-JMM-1c ) ;
4881: LD_EXP 1
4885: PPUSH
4886: LD_STRING D9c-JMM-1c
4888: PPUSH
4889: CALL_OW 88
// energyVDialog = 1 ;
4893: LD_ADDR_EXP 33
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// end ; end ; end ;
4901: LD_VAR 0 1
4905: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
4911: PPUSH
4912: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4913: LD_VAR 0 1
4917: NOT
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 256
4928: PUSH
4929: LD_INT 250
4931: LESS
4932: OR
4933: PUSH
4934: LD_VAR 0 1
4938: PPUSH
4939: CALL_OW 314
4943: PUSH
4944: LD_VAR 0 1
4948: PPUSH
4949: CALL_OW 261
4953: PUSH
4954: LD_INT 20
4956: GREATER
4957: AND
4958: OR
4959: IFFALSE 4963
// exit ;
4961: GO 5328
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4963: LD_VAR 0 1
4967: PPUSH
4968: CALL_OW 261
4972: PUSH
4973: LD_INT 20
4975: LESS
4976: PUSH
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL_OW 110
4986: PUSH
4987: LD_INT 21
4989: EQUAL
4990: NOT
4991: AND
4992: IFFALSE 5019
// begin ComStop ( bulldozer ) ;
4994: LD_VAR 0 1
4998: PPUSH
4999: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5003: LD_VAR 0 1
5007: PPUSH
5008: LD_INT 21
5010: PPUSH
5011: CALL_OW 109
// exit ;
5015: GO 5328
// end else
5017: GO 5046
// if GetFuel ( bulldozer ) > 20 then
5019: LD_VAR 0 1
5023: PPUSH
5024: CALL_OW 261
5028: PUSH
5029: LD_INT 20
5031: GREATER
5032: IFFALSE 5046
// SetTag ( bulldozer , 0 ) ;
5034: LD_VAR 0 1
5038: PPUSH
5039: LD_INT 0
5041: PPUSH
5042: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5046: LD_ADDR_VAR 0 5
5050: PUSH
5051: LD_VAR 0 2
5055: PPUSH
5056: CALL_OW 353
5060: ST_TO_ADDR
// tmp := [ ] ;
5061: LD_ADDR_VAR 0 6
5065: PUSH
5066: EMPTY
5067: ST_TO_ADDR
// for i = 1 to list do
5068: LD_ADDR_VAR 0 4
5072: PUSH
5073: DOUBLE
5074: LD_INT 1
5076: DEC
5077: ST_TO_ADDR
5078: LD_VAR 0 5
5082: PUSH
5083: FOR_TO
5084: IFFALSE 5182
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5086: LD_VAR 0 5
5090: PUSH
5091: LD_VAR 0 4
5095: ARRAY
5096: PUSH
5097: LD_INT 1
5099: ARRAY
5100: PPUSH
5101: LD_VAR 0 5
5105: PUSH
5106: LD_VAR 0 4
5110: ARRAY
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 554
5120: IFFALSE 5180
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5122: LD_ADDR_VAR 0 6
5126: PUSH
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_VAR 0 6
5136: PUSH
5137: LD_INT 1
5139: PLUS
5140: PPUSH
5141: LD_VAR 0 5
5145: PUSH
5146: LD_VAR 0 4
5150: ARRAY
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PUSH
5156: LD_VAR 0 5
5160: PUSH
5161: LD_VAR 0 4
5165: ARRAY
5166: PUSH
5167: LD_INT 2
5169: ARRAY
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PPUSH
5175: CALL_OW 1
5179: ST_TO_ADDR
// end ;
5180: GO 5083
5182: POP
5183: POP
// ComStop ( bulldozer ) ;
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5193: LD_ADDR_VAR 0 7
5197: PUSH
5198: LD_VAR 0 1
5202: PPUSH
5203: CALL_OW 250
5207: PUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: CALL_OW 251
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: ST_TO_ADDR
// for i = tmp downto 1 do
5222: LD_ADDR_VAR 0 4
5226: PUSH
5227: DOUBLE
5228: LD_VAR 0 6
5232: INC
5233: ST_TO_ADDR
5234: LD_INT 1
5236: PUSH
5237: FOR_DOWNTO
5238: IFFALSE 5326
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5240: LD_ADDR_VAR 0 7
5244: PUSH
5245: LD_VAR 0 7
5249: PUSH
5250: LD_INT 1
5252: ARRAY
5253: PPUSH
5254: LD_VAR 0 7
5258: PUSH
5259: LD_INT 2
5261: ARRAY
5262: PPUSH
5263: LD_VAR 0 6
5267: PPUSH
5268: CALL 5429 0 3
5272: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5273: LD_VAR 0 1
5277: PPUSH
5278: LD_VAR 0 7
5282: PUSH
5283: LD_INT 1
5285: ARRAY
5286: PPUSH
5287: LD_VAR 0 7
5291: PUSH
5292: LD_INT 2
5294: ARRAY
5295: PPUSH
5296: CALL 5333 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5300: LD_ADDR_VAR 0 6
5304: PUSH
5305: LD_VAR 0 6
5309: PPUSH
5310: LD_VAR 0 7
5314: PUSH
5315: LD_INT 3
5317: ARRAY
5318: PPUSH
5319: CALL_OW 3
5323: ST_TO_ADDR
// end ;
5324: GO 5237
5326: POP
5327: POP
// end ;
5328: LD_VAR 0 3
5332: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5333: LD_INT 0
5335: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5336: LD_VAR 0 2
5340: PPUSH
5341: LD_VAR 0 3
5345: PPUSH
5346: CALL_OW 351
5350: PUSH
5351: LD_VAR 0 2
5355: PPUSH
5356: LD_VAR 0 3
5360: PPUSH
5361: CALL_OW 554
5365: AND
5366: PUSH
5367: LD_VAR 0 2
5371: PPUSH
5372: LD_VAR 0 3
5376: PPUSH
5377: CALL_OW 488
5381: AND
5382: PUSH
5383: LD_VAR 0 2
5387: PPUSH
5388: LD_VAR 0 3
5392: PPUSH
5393: CALL_OW 428
5397: PUSH
5398: LD_INT 1
5400: NEG
5401: EQUAL
5402: AND
5403: IFFALSE 5424
// AddComMoveXY ( bulldozer , x , y ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_VAR 0 2
5414: PPUSH
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 171
// end ;
5424: LD_VAR 0 4
5428: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5429: LD_INT 0
5431: PPUSH
5432: PPUSH
5433: PPUSH
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
// dist := 99999 ;
5438: LD_ADDR_VAR 0 6
5442: PUSH
5443: LD_INT 99999
5445: ST_TO_ADDR
// for i = 1 to list do
5446: LD_ADDR_VAR 0 5
5450: PUSH
5451: DOUBLE
5452: LD_INT 1
5454: DEC
5455: ST_TO_ADDR
5456: LD_VAR 0 3
5460: PUSH
5461: FOR_TO
5462: IFFALSE 5600
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: LD_VAR 0 2
5478: PPUSH
5479: LD_VAR 0 3
5483: PUSH
5484: LD_VAR 0 5
5488: ARRAY
5489: PUSH
5490: LD_INT 1
5492: ARRAY
5493: PPUSH
5494: LD_VAR 0 3
5498: PUSH
5499: LD_VAR 0 5
5503: ARRAY
5504: PUSH
5505: LD_INT 2
5507: ARRAY
5508: PPUSH
5509: CALL_OW 298
5513: ST_TO_ADDR
// if d = 0 then
5514: LD_VAR 0 7
5518: PUSH
5519: LD_INT 0
5521: EQUAL
5522: IFFALSE 5526
// continue ;
5524: GO 5461
// if d < dist then
5526: LD_VAR 0 7
5530: PUSH
5531: LD_VAR 0 6
5535: LESS
5536: IFFALSE 5598
// begin _x := list [ i ] [ 1 ] ;
5538: LD_ADDR_VAR 0 8
5542: PUSH
5543: LD_VAR 0 3
5547: PUSH
5548: LD_VAR 0 5
5552: ARRAY
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5558: LD_ADDR_VAR 0 9
5562: PUSH
5563: LD_VAR 0 3
5567: PUSH
5568: LD_VAR 0 5
5572: ARRAY
5573: PUSH
5574: LD_INT 2
5576: ARRAY
5577: ST_TO_ADDR
// _i := i ;
5578: LD_ADDR_VAR 0 10
5582: PUSH
5583: LD_VAR 0 5
5587: ST_TO_ADDR
// dist := d ;
5588: LD_ADDR_VAR 0 6
5592: PUSH
5593: LD_VAR 0 7
5597: ST_TO_ADDR
// end ; end ;
5598: GO 5461
5600: POP
5601: POP
// result := [ _x , _y , _i , dist ] ;
5602: LD_ADDR_VAR 0 4
5606: PUSH
5607: LD_VAR 0 8
5611: PUSH
5612: LD_VAR 0 9
5616: PUSH
5617: LD_VAR 0 10
5621: PUSH
5622: LD_VAR 0 6
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: ST_TO_ADDR
// end ;
5633: LD_VAR 0 4
5637: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5638: LD_INT 0
5640: PPUSH
5641: PPUSH
5642: PPUSH
5643: PPUSH
// for i = 1 to 72 do
5644: LD_ADDR_VAR 0 5
5648: PUSH
5649: DOUBLE
5650: LD_INT 1
5652: DEC
5653: ST_TO_ADDR
5654: LD_INT 72
5656: PUSH
5657: FOR_TO
5658: IFFALSE 5716
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5660: LD_VAR 0 5
5664: PPUSH
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 321
5674: PUSH
5675: LD_INT 1
5677: EQUAL
5678: PUSH
5679: LD_VAR 0 5
5683: PPUSH
5684: LD_VAR 0 3
5688: PPUSH
5689: CALL_OW 482
5693: PUSH
5694: LD_INT 1
5696: EQUAL
5697: AND
5698: IFFALSE 5714
// AddComResearch ( lab , i ) ;
5700: LD_VAR 0 2
5704: PPUSH
5705: LD_VAR 0 5
5709: PPUSH
5710: CALL_OW 184
5714: GO 5657
5716: POP
5717: POP
// end ;
5718: LD_VAR 0 4
5722: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5731: LD_ADDR_VAR 0 7
5735: PUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: CALL_OW 313
5745: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5746: LD_ADDR_VAR 0 8
5750: PUSH
5751: LD_VAR 0 3
5755: PPUSH
5756: LD_INT 22
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 25
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 24
5780: PUSH
5781: LD_INT 750
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: LD_INT 54
5793: PUSH
5794: EMPTY
5795: LIST
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: PPUSH
5807: CALL_OW 70
5811: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_VAR 0 3
5821: PPUSH
5822: LD_INT 22
5824: PUSH
5825: LD_VAR 0 1
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 21
5836: PUSH
5837: LD_INT 3
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 3
5846: PUSH
5847: LD_INT 24
5849: PUSH
5850: LD_INT 1000
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: PPUSH
5869: CALL_OW 70
5873: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5874: LD_VAR 0 5
5878: NOT
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_VAR 0 1
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 2
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 24
5904: PUSH
5905: LD_INT 250
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: PPUSH
5917: CALL_OW 69
5921: NOT
5922: AND
5923: IFFALSE 5927
// exit ;
5925: GO 6039
// if buildings_list > 0 and engineerOkInside then
5927: LD_VAR 0 5
5931: PUSH
5932: LD_INT 0
5934: GREATER
5935: PUSH
5936: LD_VAR 0 7
5940: AND
5941: IFFALSE 5967
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
5943: LD_VAR 0 7
5947: PPUSH
5948: LD_INT 25
5950: PUSH
5951: LD_INT 2
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PPUSH
5958: CALL_OW 72
5962: PPUSH
5963: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5967: LD_VAR 0 5
5971: PUSH
5972: LD_INT 0
5974: GREATER
5975: PUSH
5976: LD_VAR 0 8
5980: PUSH
5981: LD_INT 0
5983: GREATER
5984: AND
5985: IFFALSE 6005
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5987: LD_VAR 0 8
5991: PPUSH
5992: LD_VAR 0 5
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6005: LD_VAR 0 5
6009: PUSH
6010: LD_INT 0
6012: EQUAL
6013: PUSH
6014: LD_VAR 0 8
6018: PUSH
6019: LD_INT 0
6021: GREATER
6022: AND
6023: IFFALSE 6039
// ComEnterUnit ( engineerOkOutside , building ) ;
6025: LD_VAR 0 8
6029: PPUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: CALL_OW 120
// end ;
6039: LD_VAR 0 4
6043: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6044: LD_INT 0
6046: PPUSH
6047: PPUSH
6048: PPUSH
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
6053: PPUSH
6054: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6055: LD_ADDR_VAR 0 6
6059: PUSH
6060: LD_INT 22
6062: PUSH
6063: LD_VAR 0 1
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 25
6074: PUSH
6075: LD_INT 4
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 23
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: LD_INT 251
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: PPUSH
6108: CALL_OW 69
6112: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6113: LD_ADDR_VAR 0 7
6117: PUSH
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_VAR 0 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 23
6137: PUSH
6138: LD_INT 2
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 25
6147: PUSH
6148: LD_INT 4
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 50
6157: PUSH
6158: EMPTY
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 70
6171: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6172: LD_ADDR_VAR 0 10
6176: PUSH
6177: LD_VAR 0 3
6181: PPUSH
6182: LD_INT 22
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 21
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 3
6206: PUSH
6207: LD_INT 25
6209: PUSH
6210: LD_INT 3
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: LD_INT 24
6226: PUSH
6227: LD_INT 750
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PPUSH
6244: CALL_OW 70
6248: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6249: LD_ADDR_VAR 0 11
6253: PUSH
6254: LD_VAR 0 2
6258: PPUSH
6259: LD_INT 22
6261: PUSH
6262: LD_VAR 0 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 21
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 3
6283: PUSH
6284: LD_INT 25
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 3
6300: PUSH
6301: LD_INT 24
6303: PUSH
6304: LD_INT 1000
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: PPUSH
6321: CALL_OW 70
6325: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6326: LD_VAR 0 10
6330: NOT
6331: PUSH
6332: LD_VAR 0 11
6336: NOT
6337: AND
6338: PUSH
6339: LD_VAR 0 6
6343: NOT
6344: AND
6345: IFFALSE 6349
// exit ;
6347: GO 6583
// if damageUnits > 0 and sci_list > 0 then
6349: LD_VAR 0 10
6353: PUSH
6354: LD_INT 0
6356: GREATER
6357: PUSH
6358: LD_VAR 0 6
6362: PUSH
6363: LD_INT 0
6365: GREATER
6366: AND
6367: IFFALSE 6383
// ComMoveToArea ( damageUnits , healArea ) ;
6369: LD_VAR 0 10
6373: PPUSH
6374: LD_VAR 0 2
6378: PPUSH
6379: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6383: LD_VAR 0 11
6387: PUSH
6388: LD_INT 0
6390: GREATER
6391: PUSH
6392: LD_VAR 0 6
6396: PUSH
6397: LD_INT 0
6399: GREATER
6400: AND
6401: IFFALSE 6412
// ComExitBuilding ( sci_list ) ;
6403: LD_VAR 0 6
6407: PPUSH
6408: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6412: LD_VAR 0 11
6416: PUSH
6417: LD_INT 0
6419: GREATER
6420: PUSH
6421: LD_VAR 0 7
6425: PUSH
6426: LD_INT 0
6428: GREATER
6429: AND
6430: IFFALSE 6450
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6432: LD_VAR 0 7
6436: PPUSH
6437: LD_VAR 0 11
6441: PUSH
6442: LD_INT 1
6444: ARRAY
6445: PPUSH
6446: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6450: LD_VAR 0 10
6454: PUSH
6455: LD_INT 0
6457: EQUAL
6458: PUSH
6459: LD_VAR 0 11
6463: PUSH
6464: LD_INT 0
6466: EQUAL
6467: AND
6468: PUSH
6469: LD_VAR 0 7
6473: PUSH
6474: LD_INT 0
6476: GREATER
6477: AND
6478: IFFALSE 6583
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6480: LD_ADDR_VAR 0 12
6484: PUSH
6485: LD_INT 22
6487: PUSH
6488: LD_VAR 0 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 21
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 30
6509: PUSH
6510: LD_INT 8
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: PPUSH
6522: CALL_OW 69
6526: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6527: LD_ADDR_VAR 0 13
6531: PUSH
6532: LD_INT 1
6534: PPUSH
6535: LD_VAR 0 12
6539: PPUSH
6540: CALL_OW 12
6544: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6545: LD_VAR 0 7
6549: PPUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 60
6555: PUSH
6556: EMPTY
6557: LIST
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PPUSH
6563: CALL_OW 72
6567: PPUSH
6568: LD_VAR 0 12
6572: PUSH
6573: LD_VAR 0 13
6577: ARRAY
6578: PPUSH
6579: CALL_OW 120
// end ; end ;
6583: LD_VAR 0 5
6587: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6588: LD_INT 0
6590: PPUSH
6591: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6592: LD_INT 22
6594: PUSH
6595: LD_VAR 0 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PPUSH
6618: CALL_OW 69
6622: PUSH
6623: LD_VAR 0 3
6627: LESSEQUAL
6628: IFFALSE 6695
// for i = 1 to vehCount do
6630: LD_ADDR_VAR 0 9
6634: PUSH
6635: DOUBLE
6636: LD_INT 1
6638: DEC
6639: ST_TO_ADDR
6640: LD_VAR 0 3
6644: PUSH
6645: FOR_TO
6646: IFFALSE 6693
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6648: LD_VAR 0 2
6652: PPUSH
6653: LD_VAR 0 7
6657: PPUSH
6658: LD_VAR 0 5
6662: PPUSH
6663: LD_VAR 0 6
6667: PPUSH
6668: LD_VAR 0 4
6672: PUSH
6673: LD_INT 1
6675: PPUSH
6676: LD_VAR 0 4
6680: PPUSH
6681: CALL_OW 12
6685: ARRAY
6686: PPUSH
6687: CALL_OW 185
6691: GO 6645
6693: POP
6694: POP
// end ;
6695: LD_VAR 0 8
6699: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6700: LD_INT 0
6702: PPUSH
6703: PPUSH
6704: PPUSH
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6709: LD_ADDR_VAR 0 8
6713: PUSH
6714: LD_INT 22
6716: PUSH
6717: LD_VAR 0 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 21
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 3
6738: PUSH
6739: LD_INT 34
6741: PUSH
6742: LD_INT 51
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 34
6751: PUSH
6752: LD_INT 53
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 34
6761: PUSH
6762: LD_INT 52
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 24
6777: PUSH
6778: LD_INT 650
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6796: LD_INT 22
6798: PUSH
6799: LD_VAR 0 1
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: LD_INT 21
6810: PUSH
6811: LD_INT 2
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: LD_INT 24
6820: PUSH
6821: LD_INT 1000
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: LD_INT 4
6843: PUSH
6844: LD_INT 5
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_OWVAR 67
6856: ARRAY
6857: GREATEREQUAL
6858: IFFALSE 7355
// repeat wait ( 0 0$1 ) ;
6860: LD_INT 35
6862: PPUSH
6863: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6867: LD_ADDR_VAR 0 8
6871: PUSH
6872: LD_INT 22
6874: PUSH
6875: LD_VAR 0 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 21
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 3
6896: PUSH
6897: LD_INT 34
6899: PUSH
6900: LD_INT 51
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 34
6909: PUSH
6910: LD_INT 53
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 34
6919: PUSH
6920: LD_INT 52
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 24
6935: PUSH
6936: LD_INT 650
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 69
6953: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6954: LD_INT 22
6956: PUSH
6957: LD_VAR 0 1
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 95
6968: PUSH
6969: LD_VAR 0 2
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 69
6986: NOT
6987: PUSH
6988: LD_VAR 0 11
6992: PUSH
6993: LD_INT 0
6995: EQUAL
6996: AND
6997: IFFALSE 7052
// for i := 1 to wayX do
6999: LD_ADDR_VAR 0 6
7003: PUSH
7004: DOUBLE
7005: LD_INT 1
7007: DEC
7008: ST_TO_ADDR
7009: LD_VAR 0 3
7013: PUSH
7014: FOR_TO
7015: IFFALSE 7050
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_VAR 0 3
7026: PUSH
7027: LD_VAR 0 6
7031: ARRAY
7032: PPUSH
7033: LD_VAR 0 4
7037: PUSH
7038: LD_VAR 0 6
7042: ARRAY
7043: PPUSH
7044: CALL_OW 174
7048: GO 7014
7050: POP
7051: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7052: LD_INT 22
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 95
7066: PUSH
7067: LD_VAR 0 2
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PPUSH
7080: CALL_OW 69
7084: IFFALSE 7308
// begin seeEnemy = 1 ;
7086: LD_ADDR_VAR 0 11
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// for j in vehiclesOK do
7094: LD_ADDR_VAR 0 7
7098: PUSH
7099: LD_VAR 0 8
7103: PUSH
7104: FOR_IN
7105: IFFALSE 7306
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7107: LD_ADDR_VAR 0 9
7111: PUSH
7112: LD_INT 81
7114: PUSH
7115: LD_VAR 0 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 101
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PPUSH
7138: CALL_OW 69
7142: PPUSH
7143: LD_VAR 0 7
7147: PPUSH
7148: CALL_OW 74
7152: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7153: LD_ADDR_VAR 0 10
7157: PUSH
7158: LD_INT 81
7160: PUSH
7161: LD_VAR 0 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 101
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 59
7185: PUSH
7186: EMPTY
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 1
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 21
7201: PUSH
7202: LD_INT 2
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: PPUSH
7223: CALL_OW 69
7227: PPUSH
7228: LD_VAR 0 7
7232: PPUSH
7233: CALL_OW 74
7237: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7238: LD_VAR 0 7
7242: PPUSH
7243: LD_VAR 0 9
7247: PPUSH
7248: CALL_OW 296
7252: PUSH
7253: LD_INT 8
7255: PLUS
7256: PUSH
7257: LD_VAR 0 7
7261: PPUSH
7262: LD_VAR 0 10
7266: PPUSH
7267: CALL_OW 296
7271: LESS
7272: IFFALSE 7290
// ComAttackUnit ( j , target1 ) else
7274: LD_VAR 0 7
7278: PPUSH
7279: LD_VAR 0 9
7283: PPUSH
7284: CALL_OW 115
7288: GO 7304
// ComAttackUnit ( j , target2 ) ;
7290: LD_VAR 0 7
7294: PPUSH
7295: LD_VAR 0 10
7299: PPUSH
7300: CALL_OW 115
// end ;
7304: GO 7104
7306: POP
7307: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7308: LD_INT 22
7310: PUSH
7311: LD_VAR 0 1
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 2
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 24
7332: PUSH
7333: LD_INT 1000
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 69
7349: PUSH
7350: LD_INT 0
7352: EQUAL
7353: IFFALSE 6860
// seeEnemy = 0 ;
7355: LD_ADDR_VAR 0 11
7359: PUSH
7360: LD_INT 0
7362: ST_TO_ADDR
// end ;
7363: LD_VAR 0 5
7367: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7368: LD_INT 0
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7374: LD_ADDR_VAR 0 8
7378: PUSH
7379: LD_INT 22
7381: PUSH
7382: LD_VAR 0 1
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 21
7393: PUSH
7394: LD_INT 2
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 3
7403: PUSH
7404: LD_INT 34
7406: PUSH
7407: LD_INT 51
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 34
7416: PUSH
7417: LD_INT 53
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 34
7426: PUSH
7427: LD_INT 52
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 3
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: LD_INT 650
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 69
7467: ST_TO_ADDR
// if damageVehicles > 0 then
7468: LD_VAR 0 8
7472: PUSH
7473: LD_INT 0
7475: GREATER
7476: IFFALSE 7497
// ComMoveXY ( damageVehicles , repX , repY ) ;
7478: LD_VAR 0 8
7482: PPUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: LD_VAR 0 4
7492: PPUSH
7493: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7497: LD_VAR 0 8
7501: PPUSH
7502: LD_INT 95
7504: PUSH
7505: LD_VAR 0 2
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: LD_INT 58
7519: PUSH
7520: EMPTY
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 72
7535: PUSH
7536: LD_INT 0
7538: GREATER
7539: IFFALSE 7606
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7541: LD_ADDR_VAR 0 6
7545: PUSH
7546: LD_VAR 0 8
7550: PPUSH
7551: LD_INT 95
7553: PUSH
7554: LD_VAR 0 2
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 3
7565: PUSH
7566: LD_INT 58
7568: PUSH
7569: EMPTY
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PPUSH
7580: CALL_OW 72
7584: PUSH
7585: FOR_IN
7586: IFFALSE 7604
// ComExitVehicle ( UnitsInside ( i ) ) ;
7588: LD_VAR 0 6
7592: PPUSH
7593: CALL_OW 313
7597: PPUSH
7598: CALL_OW 121
7602: GO 7585
7604: POP
7605: POP
// end ;
7606: LD_VAR 0 5
7610: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
7615: PPUSH
7616: PPUSH
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
7622: PPUSH
7623: PPUSH
// for i = 1 to medicCount do
7624: LD_ADDR_VAR 0 14
7628: PUSH
7629: DOUBLE
7630: LD_INT 1
7632: DEC
7633: ST_TO_ADDR
7634: LD_VAR 0 7
7638: PUSH
7639: FOR_TO
7640: IFFALSE 7722
// begin uc_side = side ;
7642: LD_ADDR_OWVAR 20
7646: PUSH
7647: LD_VAR 0 1
7651: ST_TO_ADDR
// uc_nation = nation ;
7652: LD_ADDR_OWVAR 21
7656: PUSH
7657: LD_VAR 0 2
7661: ST_TO_ADDR
// hc_name =  ;
7662: LD_ADDR_OWVAR 26
7666: PUSH
7667: LD_STRING 
7669: ST_TO_ADDR
// hc_gallery =  ;
7670: LD_ADDR_OWVAR 33
7674: PUSH
7675: LD_STRING 
7677: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7678: LD_INT 0
7680: PPUSH
7681: LD_INT 4
7683: PPUSH
7684: LD_VAR 0 8
7688: PPUSH
7689: CALL_OW 380
// un = CreateHuman ;
7693: LD_ADDR_VAR 0 16
7697: PUSH
7698: CALL_OW 44
7702: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7703: LD_VAR 0 16
7707: PPUSH
7708: LD_VAR 0 9
7712: PPUSH
7713: LD_INT 0
7715: PPUSH
7716: CALL_OW 49
// end ;
7720: GO 7639
7722: POP
7723: POP
// for i = 1 to soldierCount do
7724: LD_ADDR_VAR 0 14
7728: PUSH
7729: DOUBLE
7730: LD_INT 1
7732: DEC
7733: ST_TO_ADDR
7734: LD_VAR 0 3
7738: PUSH
7739: FOR_TO
7740: IFFALSE 7822
// begin uc_side = side ;
7742: LD_ADDR_OWVAR 20
7746: PUSH
7747: LD_VAR 0 1
7751: ST_TO_ADDR
// uc_nation = nation ;
7752: LD_ADDR_OWVAR 21
7756: PUSH
7757: LD_VAR 0 2
7761: ST_TO_ADDR
// hc_name =  ;
7762: LD_ADDR_OWVAR 26
7766: PUSH
7767: LD_STRING 
7769: ST_TO_ADDR
// hc_gallery =  ;
7770: LD_ADDR_OWVAR 33
7774: PUSH
7775: LD_STRING 
7777: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7778: LD_INT 0
7780: PPUSH
7781: LD_INT 1
7783: PPUSH
7784: LD_VAR 0 8
7788: PPUSH
7789: CALL_OW 380
// un = CreateHuman ;
7793: LD_ADDR_VAR 0 16
7797: PUSH
7798: CALL_OW 44
7802: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7803: LD_VAR 0 16
7807: PPUSH
7808: LD_VAR 0 9
7812: PPUSH
7813: LD_INT 0
7815: PPUSH
7816: CALL_OW 49
// end ;
7820: GO 7739
7822: POP
7823: POP
// for i = 1 to sniperCount do
7824: LD_ADDR_VAR 0 14
7828: PUSH
7829: DOUBLE
7830: LD_INT 1
7832: DEC
7833: ST_TO_ADDR
7834: LD_VAR 0 4
7838: PUSH
7839: FOR_TO
7840: IFFALSE 7922
// begin uc_side = side ;
7842: LD_ADDR_OWVAR 20
7846: PUSH
7847: LD_VAR 0 1
7851: ST_TO_ADDR
// uc_nation = nation ;
7852: LD_ADDR_OWVAR 21
7856: PUSH
7857: LD_VAR 0 2
7861: ST_TO_ADDR
// hc_name =  ;
7862: LD_ADDR_OWVAR 26
7866: PUSH
7867: LD_STRING 
7869: ST_TO_ADDR
// hc_gallery =  ;
7870: LD_ADDR_OWVAR 33
7874: PUSH
7875: LD_STRING 
7877: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7878: LD_INT 0
7880: PPUSH
7881: LD_INT 5
7883: PPUSH
7884: LD_VAR 0 8
7888: PPUSH
7889: CALL_OW 380
// un = CreateHuman ;
7893: LD_ADDR_VAR 0 16
7897: PUSH
7898: CALL_OW 44
7902: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7903: LD_VAR 0 16
7907: PPUSH
7908: LD_VAR 0 9
7912: PPUSH
7913: LD_INT 0
7915: PPUSH
7916: CALL_OW 49
// end ;
7920: GO 7839
7922: POP
7923: POP
// for i = 1 to bazookCount do
7924: LD_ADDR_VAR 0 14
7928: PUSH
7929: DOUBLE
7930: LD_INT 1
7932: DEC
7933: ST_TO_ADDR
7934: LD_VAR 0 5
7938: PUSH
7939: FOR_TO
7940: IFFALSE 8022
// begin uc_side = side ;
7942: LD_ADDR_OWVAR 20
7946: PUSH
7947: LD_VAR 0 1
7951: ST_TO_ADDR
// uc_nation = nation ;
7952: LD_ADDR_OWVAR 21
7956: PUSH
7957: LD_VAR 0 2
7961: ST_TO_ADDR
// hc_name =  ;
7962: LD_ADDR_OWVAR 26
7966: PUSH
7967: LD_STRING 
7969: ST_TO_ADDR
// hc_gallery =  ;
7970: LD_ADDR_OWVAR 33
7974: PUSH
7975: LD_STRING 
7977: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7978: LD_INT 0
7980: PPUSH
7981: LD_INT 9
7983: PPUSH
7984: LD_VAR 0 8
7988: PPUSH
7989: CALL_OW 380
// un = CreateHuman ;
7993: LD_ADDR_VAR 0 16
7997: PUSH
7998: CALL_OW 44
8002: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8003: LD_VAR 0 16
8007: PPUSH
8008: LD_VAR 0 9
8012: PPUSH
8013: LD_INT 0
8015: PPUSH
8016: CALL_OW 49
// end ;
8020: GO 7939
8022: POP
8023: POP
// for i = 1 to mortalCount do
8024: LD_ADDR_VAR 0 14
8028: PUSH
8029: DOUBLE
8030: LD_INT 1
8032: DEC
8033: ST_TO_ADDR
8034: LD_VAR 0 6
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8122
// begin uc_side = side ;
8042: LD_ADDR_OWVAR 20
8046: PUSH
8047: LD_VAR 0 1
8051: ST_TO_ADDR
// uc_nation = nation ;
8052: LD_ADDR_OWVAR 21
8056: PUSH
8057: LD_VAR 0 2
8061: ST_TO_ADDR
// hc_name =  ;
8062: LD_ADDR_OWVAR 26
8066: PUSH
8067: LD_STRING 
8069: ST_TO_ADDR
// hc_gallery =  ;
8070: LD_ADDR_OWVAR 33
8074: PUSH
8075: LD_STRING 
8077: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8078: LD_INT 0
8080: PPUSH
8081: LD_INT 8
8083: PPUSH
8084: LD_VAR 0 8
8088: PPUSH
8089: CALL_OW 380
// un = CreateHuman ;
8093: LD_ADDR_VAR 0 16
8097: PUSH
8098: CALL_OW 44
8102: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8103: LD_VAR 0 16
8107: PPUSH
8108: LD_VAR 0 9
8112: PPUSH
8113: LD_INT 0
8115: PPUSH
8116: CALL_OW 49
// end ;
8120: GO 8039
8122: POP
8123: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8124: LD_ADDR_VAR 0 19
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_VAR 0 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 2
8143: PUSH
8144: LD_INT 25
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 5
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 8
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 25
8176: PUSH
8177: LD_INT 9
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8200: LD_ADDR_VAR 0 18
8204: PUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 25
8219: PUSH
8220: LD_INT 4
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PPUSH
8231: CALL_OW 69
8235: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8236: LD_VAR 0 18
8240: PPUSH
8241: LD_VAR 0 10
8245: PPUSH
8246: CALL_OW 113
// if strategy = 1 then
8250: LD_VAR 0 12
8254: PUSH
8255: LD_INT 1
8257: EQUAL
8258: IFFALSE 8774
// begin repeat wait ( 0 0$3 ) ;
8260: LD_INT 105
8262: PPUSH
8263: CALL_OW 67
// for i in soldiersOK_list do
8267: LD_ADDR_VAR 0 14
8271: PUSH
8272: LD_VAR 0 19
8276: PUSH
8277: FOR_IN
8278: IFFALSE 8342
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8280: LD_VAR 0 14
8284: PPUSH
8285: LD_INT 91
8287: PPUSH
8288: LD_INT 63
8290: PPUSH
8291: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8295: LD_VAR 0 14
8299: PPUSH
8300: LD_INT 101
8302: PPUSH
8303: LD_INT 53
8305: PPUSH
8306: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8310: LD_VAR 0 14
8314: PPUSH
8315: LD_INT 75
8317: PPUSH
8318: LD_INT 23
8320: PPUSH
8321: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8325: LD_VAR 0 14
8329: PPUSH
8330: LD_INT 78
8332: PPUSH
8333: LD_INT 8
8335: PPUSH
8336: CALL_OW 174
// end ;
8340: GO 8277
8342: POP
8343: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8344: LD_INT 15
8346: PPUSH
8347: LD_INT 22
8349: PUSH
8350: LD_VAR 0 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PPUSH
8359: CALL_OW 70
8363: PUSH
8364: LD_INT 2
8366: GREATER
8367: IFFALSE 8260
// repeat wait ( 0 0$1 ) ;
8369: LD_INT 35
8371: PPUSH
8372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8376: LD_ADDR_VAR 0 17
8380: PUSH
8381: LD_INT 22
8383: PUSH
8384: LD_VAR 0 1
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: LD_INT 24
8401: PUSH
8402: LD_INT 550
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 24
8415: PUSH
8416: LD_INT 250
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PPUSH
8432: CALL_OW 69
8436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8437: LD_ADDR_VAR 0 19
8441: PUSH
8442: LD_INT 22
8444: PUSH
8445: LD_VAR 0 1
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 2
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 1
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 25
8469: PUSH
8470: LD_INT 5
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PUSH
8477: LD_INT 25
8479: PUSH
8480: LD_INT 8
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 25
8489: PUSH
8490: LD_INT 9
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 24
8506: PUSH
8507: LD_INT 1000
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: PPUSH
8519: CALL_OW 69
8523: ST_TO_ADDR
// if medicCount > 0 then
8524: LD_VAR 0 7
8528: PUSH
8529: LD_INT 0
8531: GREATER
8532: IFFALSE 8576
// begin if damageUnit_list > 0 then
8534: LD_VAR 0 17
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8576
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8544: LD_VAR 0 17
8548: PPUSH
8549: LD_VAR 0 10
8553: PPUSH
8554: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8558: LD_VAR 0 7
8562: PPUSH
8563: LD_VAR 0 17
8567: PUSH
8568: LD_INT 1
8570: ARRAY
8571: PPUSH
8572: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8576: LD_ADDR_VAR 0 14
8580: PUSH
8581: LD_VAR 0 19
8585: PUSH
8586: FOR_IN
8587: IFFALSE 8763
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8589: LD_ADDR_VAR 0 22
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_VAR 0 11
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 69
8610: PPUSH
8611: LD_VAR 0 14
8615: PPUSH
8616: CALL_OW 74
8620: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8621: LD_ADDR_VAR 0 23
8625: PUSH
8626: LD_INT 22
8628: PUSH
8629: LD_VAR 0 11
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 2
8640: PUSH
8641: LD_INT 59
8643: PUSH
8644: EMPTY
8645: LIST
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 1
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 2
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: PPUSH
8680: CALL_OW 69
8684: PPUSH
8685: LD_VAR 0 14
8689: PPUSH
8690: CALL_OW 74
8694: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8695: LD_VAR 0 14
8699: PPUSH
8700: LD_VAR 0 22
8704: PPUSH
8705: CALL_OW 296
8709: PUSH
8710: LD_INT 8
8712: PLUS
8713: PUSH
8714: LD_VAR 0 14
8718: PPUSH
8719: LD_VAR 0 23
8723: PPUSH
8724: CALL_OW 296
8728: LESS
8729: IFFALSE 8747
// begin ComAttackUnit ( i , target1 ) ;
8731: LD_VAR 0 14
8735: PPUSH
8736: LD_VAR 0 22
8740: PPUSH
8741: CALL_OW 115
// end else
8745: GO 8761
// begin ComAttackUnit ( i , target2 ) ;
8747: LD_VAR 0 14
8751: PPUSH
8752: LD_VAR 0 23
8756: PPUSH
8757: CALL_OW 115
// end ; end ;
8761: GO 8586
8763: POP
8764: POP
// until soldiersOK_list = [ ] ;
8765: LD_VAR 0 19
8769: PUSH
8770: EMPTY
8771: EQUAL
8772: IFFALSE 8369
// end ; if strategy = 2 then
8774: LD_VAR 0 12
8778: PUSH
8779: LD_INT 2
8781: EQUAL
8782: IFFALSE 9268
// begin repeat wait ( 0 0$1 ) ;
8784: LD_INT 35
8786: PPUSH
8787: CALL_OW 67
// for i in soldiersOK_list do
8791: LD_ADDR_VAR 0 14
8795: PUSH
8796: LD_VAR 0 19
8800: PUSH
8801: FOR_IN
8802: IFFALSE 8836
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8804: LD_VAR 0 14
8808: PPUSH
8809: LD_INT 91
8811: PPUSH
8812: LD_INT 63
8814: PPUSH
8815: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8819: LD_VAR 0 14
8823: PPUSH
8824: LD_INT 75
8826: PPUSH
8827: LD_INT 33
8829: PPUSH
8830: CALL_OW 174
// end ;
8834: GO 8801
8836: POP
8837: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8838: LD_INT 16
8840: PPUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PPUSH
8853: CALL_OW 70
8857: PUSH
8858: LD_INT 2
8860: GREATER
8861: IFFALSE 8784
// repeat wait ( 0 0$3 ) ;
8863: LD_INT 105
8865: PPUSH
8866: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8870: LD_ADDR_VAR 0 17
8874: PUSH
8875: LD_INT 22
8877: PUSH
8878: LD_VAR 0 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: LD_INT 24
8895: PUSH
8896: LD_INT 550
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 24
8909: PUSH
8910: LD_INT 250
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8931: LD_ADDR_VAR 0 19
8935: PUSH
8936: LD_INT 22
8938: PUSH
8939: LD_VAR 0 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: LD_INT 25
8953: PUSH
8954: LD_INT 1
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 5
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 25
8973: PUSH
8974: LD_INT 8
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 25
8983: PUSH
8984: LD_INT 9
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 24
9000: PUSH
9001: LD_INT 1000
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 69
9017: ST_TO_ADDR
// if medicCount > 0 then
9018: LD_VAR 0 7
9022: PUSH
9023: LD_INT 0
9025: GREATER
9026: IFFALSE 9070
// begin if damageUnit_list > 0 then
9028: LD_VAR 0 17
9032: PUSH
9033: LD_INT 0
9035: GREATER
9036: IFFALSE 9070
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9038: LD_VAR 0 17
9042: PPUSH
9043: LD_VAR 0 10
9047: PPUSH
9048: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9052: LD_VAR 0 7
9056: PPUSH
9057: LD_VAR 0 17
9061: PUSH
9062: LD_INT 1
9064: ARRAY
9065: PPUSH
9066: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9070: LD_ADDR_VAR 0 14
9074: PUSH
9075: LD_VAR 0 19
9079: PUSH
9080: FOR_IN
9081: IFFALSE 9257
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9083: LD_ADDR_VAR 0 22
9087: PUSH
9088: LD_INT 22
9090: PUSH
9091: LD_VAR 0 11
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 69
9104: PPUSH
9105: LD_VAR 0 14
9109: PPUSH
9110: CALL_OW 74
9114: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9115: LD_ADDR_VAR 0 23
9119: PUSH
9120: LD_INT 22
9122: PUSH
9123: LD_VAR 0 11
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: LD_INT 59
9137: PUSH
9138: EMPTY
9139: LIST
9140: PUSH
9141: LD_INT 21
9143: PUSH
9144: LD_INT 1
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 21
9153: PUSH
9154: LD_INT 2
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: PPUSH
9174: CALL_OW 69
9178: PPUSH
9179: LD_VAR 0 14
9183: PPUSH
9184: CALL_OW 74
9188: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9189: LD_VAR 0 14
9193: PPUSH
9194: LD_VAR 0 22
9198: PPUSH
9199: CALL_OW 296
9203: PUSH
9204: LD_INT 8
9206: PLUS
9207: PUSH
9208: LD_VAR 0 14
9212: PPUSH
9213: LD_VAR 0 23
9217: PPUSH
9218: CALL_OW 296
9222: LESS
9223: IFFALSE 9241
// begin ComAttackUnit ( i , target1 ) ;
9225: LD_VAR 0 14
9229: PPUSH
9230: LD_VAR 0 22
9234: PPUSH
9235: CALL_OW 115
// end else
9239: GO 9255
// begin ComAttackUnit ( i , target2 ) ;
9241: LD_VAR 0 14
9245: PPUSH
9246: LD_VAR 0 23
9250: PPUSH
9251: CALL_OW 115
// end ; end ;
9255: GO 9080
9257: POP
9258: POP
// until soldiersOK_list = [ ] ;
9259: LD_VAR 0 19
9263: PUSH
9264: EMPTY
9265: EQUAL
9266: IFFALSE 8863
// end ; if not soldiersOK_list and medic_list then
9268: LD_VAR 0 19
9272: NOT
9273: PUSH
9274: LD_VAR 0 18
9278: AND
9279: IFFALSE 9419
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9281: LD_ADDR_VAR 0 18
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_VAR 0 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 25
9300: PUSH
9301: LD_INT 4
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 50
9310: PUSH
9311: EMPTY
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: PPUSH
9319: CALL_OW 69
9323: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9324: LD_INT 35
9326: PPUSH
9327: CALL_OW 67
// for i in medic_list do
9331: LD_ADDR_VAR 0 14
9335: PUSH
9336: LD_VAR 0 18
9340: PUSH
9341: FOR_IN
9342: IFFALSE 9410
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9344: LD_VAR 0 14
9348: PPUSH
9349: CALL_OW 314
9353: NOT
9354: PUSH
9355: LD_VAR 0 14
9359: PPUSH
9360: LD_INT 4
9362: PPUSH
9363: CALL_OW 308
9367: NOT
9368: AND
9369: IFFALSE 9385
// ComMoveToArea ( i , RussianAttack ) else
9371: LD_VAR 0 14
9375: PPUSH
9376: LD_INT 4
9378: PPUSH
9379: CALL_OW 113
9383: GO 9408
// if IsInArea ( i , RussianAttack ) then
9385: LD_VAR 0 14
9389: PPUSH
9390: LD_INT 4
9392: PPUSH
9393: CALL_OW 308
9397: IFFALSE 9408
// RemoveUnit ( i ) ;
9399: LD_VAR 0 14
9403: PPUSH
9404: CALL_OW 64
9408: GO 9341
9410: POP
9411: POP
// until not medic_list ;
9412: LD_VAR 0 18
9416: NOT
9417: IFFALSE 9281
// end ; end ;
9419: LD_VAR 0 13
9423: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9424: LD_INT 0
9426: PPUSH
9427: PPUSH
9428: PPUSH
9429: PPUSH
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
// amChassisTab = [ ] ;
9437: LD_ADDR_VAR 0 19
9441: PUSH
9442: EMPTY
9443: ST_TO_ADDR
// arChassisTab = [ ] ;
9444: LD_ADDR_VAR 0 18
9448: PUSH
9449: EMPTY
9450: ST_TO_ADDR
// ruChassisTab = [ ] ;
9451: LD_ADDR_VAR 0 17
9455: PUSH
9456: EMPTY
9457: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9458: LD_INT 35
9460: PPUSH
9461: CALL_OW 67
// if nation = 1 then
9465: LD_VAR 0 5
9469: PUSH
9470: LD_INT 1
9472: EQUAL
9473: IFFALSE 9964
// begin uc_side = side ;
9475: LD_ADDR_OWVAR 20
9479: PUSH
9480: LD_VAR 0 2
9484: ST_TO_ADDR
// uc_nation = nation ;
9485: LD_ADDR_OWVAR 21
9489: PUSH
9490: LD_VAR 0 5
9494: ST_TO_ADDR
// vc_engine = vehengine ;
9495: LD_ADDR_OWVAR 39
9499: PUSH
9500: LD_VAR 0 6
9504: ST_TO_ADDR
// vc_control = vehcontrol ;
9505: LD_ADDR_OWVAR 38
9509: PUSH
9510: LD_VAR 0 7
9514: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9515: LD_ADDR_OWVAR 40
9519: PUSH
9520: LD_VAR 0 10
9524: PUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 10
9532: PPUSH
9533: CALL_OW 12
9537: ARRAY
9538: ST_TO_ADDR
// for j = 1 to AMWeapon do
9539: LD_ADDR_VAR 0 14
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_VAR 0 10
9553: PUSH
9554: FOR_TO
9555: IFFALSE 9856
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9557: LD_VAR 0 10
9561: PUSH
9562: LD_VAR 0 14
9566: ARRAY
9567: PUSH
9568: LD_INT 2
9570: EQUAL
9571: PUSH
9572: LD_VAR 0 10
9576: PUSH
9577: LD_VAR 0 14
9581: ARRAY
9582: PUSH
9583: LD_INT 3
9585: EQUAL
9586: OR
9587: IFFALSE 9640
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9589: LD_ADDR_VAR 0 19
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: LD_INT 4
9605: PUSH
9606: LD_INT 5
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9616: LD_ADDR_OWVAR 37
9620: PUSH
9621: LD_VAR 0 19
9625: PUSH
9626: LD_INT 1
9628: PPUSH
9629: LD_VAR 0 19
9633: PPUSH
9634: CALL_OW 12
9638: ARRAY
9639: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9640: LD_VAR 0 10
9644: PUSH
9645: LD_VAR 0 14
9649: ARRAY
9650: PUSH
9651: LD_INT 4
9653: EQUAL
9654: PUSH
9655: LD_VAR 0 10
9659: PUSH
9660: LD_VAR 0 14
9664: ARRAY
9665: PUSH
9666: LD_INT 5
9668: EQUAL
9669: OR
9670: PUSH
9671: LD_VAR 0 10
9675: PUSH
9676: LD_VAR 0 14
9680: ARRAY
9681: PUSH
9682: LD_INT 9
9684: EQUAL
9685: OR
9686: PUSH
9687: LD_VAR 0 10
9691: PUSH
9692: LD_VAR 0 14
9696: ARRAY
9697: PUSH
9698: LD_INT 11
9700: EQUAL
9701: OR
9702: PUSH
9703: LD_VAR 0 10
9707: PUSH
9708: LD_VAR 0 14
9712: ARRAY
9713: PUSH
9714: LD_INT 7
9716: EQUAL
9717: OR
9718: IFFALSE 9767
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9720: LD_ADDR_VAR 0 19
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: LD_INT 3
9730: PUSH
9731: LD_INT 4
9733: PUSH
9734: LD_INT 5
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9743: LD_ADDR_OWVAR 37
9747: PUSH
9748: LD_VAR 0 19
9752: PUSH
9753: LD_INT 1
9755: PPUSH
9756: LD_VAR 0 19
9760: PPUSH
9761: CALL_OW 12
9765: ARRAY
9766: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9767: LD_VAR 0 10
9771: PUSH
9772: LD_VAR 0 14
9776: ARRAY
9777: PUSH
9778: LD_INT 8
9780: EQUAL
9781: PUSH
9782: LD_VAR 0 10
9786: PUSH
9787: LD_VAR 0 14
9791: ARRAY
9792: PUSH
9793: LD_INT 6
9795: EQUAL
9796: OR
9797: PUSH
9798: LD_VAR 0 10
9802: PUSH
9803: LD_VAR 0 14
9807: ARRAY
9808: PUSH
9809: LD_INT 10
9811: EQUAL
9812: OR
9813: IFFALSE 9854
// begin amChassisTab = [ 4 , 5 ] ;
9815: LD_ADDR_VAR 0 19
9819: PUSH
9820: LD_INT 4
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9830: LD_ADDR_OWVAR 37
9834: PUSH
9835: LD_VAR 0 19
9839: PUSH
9840: LD_INT 1
9842: PPUSH
9843: LD_VAR 0 19
9847: PPUSH
9848: CALL_OW 12
9852: ARRAY
9853: ST_TO_ADDR
// end ; end ;
9854: GO 9554
9856: POP
9857: POP
// veh = CreateVehicle ;
9858: LD_ADDR_VAR 0 16
9862: PUSH
9863: CALL_OW 45
9867: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9868: LD_VAR 0 16
9872: PPUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: LD_INT 0
9880: PPUSH
9881: CALL_OW 49
// if vehControl = 1 then
9885: LD_VAR 0 7
9889: PUSH
9890: LD_INT 1
9892: EQUAL
9893: IFFALSE 9950
// begin hc_gallery =  ;
9895: LD_ADDR_OWVAR 33
9899: PUSH
9900: LD_STRING 
9902: ST_TO_ADDR
// hc_name =  ;
9903: LD_ADDR_OWVAR 26
9907: PUSH
9908: LD_STRING 
9910: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9911: LD_INT 0
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: LD_VAR 0 4
9921: PPUSH
9922: CALL_OW 380
// un = CreateHuman ;
9926: LD_ADDR_VAR 0 15
9930: PUSH
9931: CALL_OW 44
9935: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9936: LD_VAR 0 15
9940: PPUSH
9941: LD_VAR 0 16
9945: PPUSH
9946: CALL_OW 52
// end ; i = i + 1 ;
9950: LD_ADDR_VAR 0 13
9954: PUSH
9955: LD_VAR 0 13
9959: PUSH
9960: LD_INT 1
9962: PLUS
9963: ST_TO_ADDR
// end ; if nation = 2 then
9964: LD_VAR 0 5
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: IFFALSE 10396
// begin uc_side = side ;
9974: LD_ADDR_OWVAR 20
9978: PUSH
9979: LD_VAR 0 2
9983: ST_TO_ADDR
// uc_nation = nation ;
9984: LD_ADDR_OWVAR 21
9988: PUSH
9989: LD_VAR 0 5
9993: ST_TO_ADDR
// vc_engine = vehengine ;
9994: LD_ADDR_OWVAR 39
9998: PUSH
9999: LD_VAR 0 6
10003: ST_TO_ADDR
// vc_control = vehcontrol ;
10004: LD_ADDR_OWVAR 38
10008: PUSH
10009: LD_VAR 0 7
10013: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10014: LD_ADDR_OWVAR 40
10018: PUSH
10019: LD_VAR 0 9
10023: PUSH
10024: LD_INT 1
10026: PPUSH
10027: LD_VAR 0 9
10031: PPUSH
10032: CALL_OW 12
10036: ARRAY
10037: ST_TO_ADDR
// for j = 1 to ARWeapons do
10038: LD_ADDR_VAR 0 14
10042: PUSH
10043: DOUBLE
10044: LD_INT 1
10046: DEC
10047: ST_TO_ADDR
10048: LD_VAR 0 9
10052: PUSH
10053: FOR_TO
10054: IFFALSE 10288
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10056: LD_VAR 0 9
10060: PUSH
10061: LD_VAR 0 14
10065: ARRAY
10066: PUSH
10067: LD_INT 24
10069: EQUAL
10070: PUSH
10071: LD_VAR 0 9
10075: PUSH
10076: LD_VAR 0 14
10080: ARRAY
10081: PUSH
10082: LD_INT 22
10084: EQUAL
10085: OR
10086: PUSH
10087: LD_VAR 0 9
10091: PUSH
10092: LD_VAR 0 14
10096: ARRAY
10097: PUSH
10098: LD_INT 23
10100: EQUAL
10101: OR
10102: PUSH
10103: LD_VAR 0 9
10107: PUSH
10108: LD_VAR 0 14
10112: ARRAY
10113: PUSH
10114: LD_INT 30
10116: EQUAL
10117: OR
10118: IFFALSE 10167
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10120: LD_ADDR_VAR 0 18
10124: PUSH
10125: LD_INT 11
10127: PUSH
10128: LD_INT 12
10130: PUSH
10131: LD_INT 13
10133: PUSH
10134: LD_INT 14
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10143: LD_ADDR_OWVAR 37
10147: PUSH
10148: LD_VAR 0 18
10152: PUSH
10153: LD_INT 1
10155: PPUSH
10156: LD_VAR 0 18
10160: PPUSH
10161: CALL_OW 12
10165: ARRAY
10166: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10167: LD_VAR 0 9
10171: PUSH
10172: LD_VAR 0 14
10176: ARRAY
10177: PUSH
10178: LD_INT 29
10180: EQUAL
10181: PUSH
10182: LD_VAR 0 9
10186: PUSH
10187: LD_VAR 0 14
10191: ARRAY
10192: PUSH
10193: LD_INT 28
10195: EQUAL
10196: OR
10197: PUSH
10198: LD_VAR 0 9
10202: PUSH
10203: LD_VAR 0 14
10207: ARRAY
10208: PUSH
10209: LD_INT 27
10211: EQUAL
10212: OR
10213: PUSH
10214: LD_VAR 0 9
10218: PUSH
10219: LD_VAR 0 14
10223: ARRAY
10224: PUSH
10225: LD_INT 26
10227: EQUAL
10228: OR
10229: PUSH
10230: LD_VAR 0 9
10234: PUSH
10235: LD_VAR 0 14
10239: ARRAY
10240: PUSH
10241: LD_INT 25
10243: EQUAL
10244: OR
10245: IFFALSE 10286
// begin arChassisTab = [ 13 , 14 ] ;
10247: LD_ADDR_VAR 0 18
10251: PUSH
10252: LD_INT 13
10254: PUSH
10255: LD_INT 14
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10262: LD_ADDR_OWVAR 37
10266: PUSH
10267: LD_VAR 0 18
10271: PUSH
10272: LD_INT 1
10274: PPUSH
10275: LD_VAR 0 18
10279: PPUSH
10280: CALL_OW 12
10284: ARRAY
10285: ST_TO_ADDR
// end ; end ;
10286: GO 10053
10288: POP
10289: POP
// veh = CreateVehicle ;
10290: LD_ADDR_VAR 0 16
10294: PUSH
10295: CALL_OW 45
10299: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10300: LD_VAR 0 16
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// if vehcontrol = 1 then
10317: LD_VAR 0 7
10321: PUSH
10322: LD_INT 1
10324: EQUAL
10325: IFFALSE 10382
// begin hc_gallery =  ;
10327: LD_ADDR_OWVAR 33
10331: PUSH
10332: LD_STRING 
10334: ST_TO_ADDR
// hc_name =  ;
10335: LD_ADDR_OWVAR 26
10339: PUSH
10340: LD_STRING 
10342: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10343: LD_INT 0
10345: PPUSH
10346: LD_INT 3
10348: PPUSH
10349: LD_VAR 0 4
10353: PPUSH
10354: CALL_OW 380
// un = CreateHuman ;
10358: LD_ADDR_VAR 0 15
10362: PUSH
10363: CALL_OW 44
10367: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10368: LD_VAR 0 15
10372: PPUSH
10373: LD_VAR 0 16
10377: PPUSH
10378: CALL_OW 52
// end ; i = i + 1 ;
10382: LD_ADDR_VAR 0 13
10386: PUSH
10387: LD_VAR 0 13
10391: PUSH
10392: LD_INT 1
10394: PLUS
10395: ST_TO_ADDR
// end ; if nation = 3 then
10396: LD_VAR 0 5
10400: PUSH
10401: LD_INT 3
10403: EQUAL
10404: IFFALSE 10796
// begin uc_side = side ;
10406: LD_ADDR_OWVAR 20
10410: PUSH
10411: LD_VAR 0 2
10415: ST_TO_ADDR
// uc_nation = nation ;
10416: LD_ADDR_OWVAR 21
10420: PUSH
10421: LD_VAR 0 5
10425: ST_TO_ADDR
// vc_engine = vehengine ;
10426: LD_ADDR_OWVAR 39
10430: PUSH
10431: LD_VAR 0 6
10435: ST_TO_ADDR
// vc_control = vehcontrol ;
10436: LD_ADDR_OWVAR 38
10440: PUSH
10441: LD_VAR 0 7
10445: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10446: LD_ADDR_OWVAR 40
10450: PUSH
10451: LD_VAR 0 8
10455: PUSH
10456: LD_INT 1
10458: PPUSH
10459: LD_VAR 0 8
10463: PPUSH
10464: CALL_OW 12
10468: ARRAY
10469: ST_TO_ADDR
// for j = 1 to RuWeapons do
10470: LD_ADDR_VAR 0 14
10474: PUSH
10475: DOUBLE
10476: LD_INT 1
10478: DEC
10479: ST_TO_ADDR
10480: LD_VAR 0 8
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10688
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10488: LD_VAR 0 8
10492: PUSH
10493: LD_VAR 0 14
10497: ARRAY
10498: PUSH
10499: LD_INT 42
10501: EQUAL
10502: PUSH
10503: LD_VAR 0 8
10507: PUSH
10508: LD_VAR 0 14
10512: ARRAY
10513: PUSH
10514: LD_INT 43
10516: EQUAL
10517: OR
10518: PUSH
10519: LD_VAR 0 8
10523: PUSH
10524: LD_VAR 0 14
10528: ARRAY
10529: PUSH
10530: LD_INT 44
10532: EQUAL
10533: OR
10534: PUSH
10535: LD_VAR 0 8
10539: PUSH
10540: LD_VAR 0 14
10544: ARRAY
10545: PUSH
10546: LD_INT 45
10548: EQUAL
10549: OR
10550: PUSH
10551: LD_VAR 0 8
10555: PUSH
10556: LD_VAR 0 14
10560: ARRAY
10561: PUSH
10562: LD_INT 49
10564: EQUAL
10565: OR
10566: IFFALSE 10615
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10568: LD_ADDR_VAR 0 17
10572: PUSH
10573: LD_INT 21
10575: PUSH
10576: LD_INT 22
10578: PUSH
10579: LD_INT 23
10581: PUSH
10582: LD_INT 24
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10591: LD_ADDR_OWVAR 37
10595: PUSH
10596: LD_VAR 0 17
10600: PUSH
10601: LD_INT 1
10603: PPUSH
10604: LD_VAR 0 17
10608: PPUSH
10609: CALL_OW 12
10613: ARRAY
10614: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10615: LD_VAR 0 8
10619: PUSH
10620: LD_VAR 0 14
10624: ARRAY
10625: PUSH
10626: LD_INT 46
10628: EQUAL
10629: PUSH
10630: LD_VAR 0 8
10634: PUSH
10635: LD_VAR 0 14
10639: ARRAY
10640: PUSH
10641: LD_INT 47
10643: EQUAL
10644: OR
10645: IFFALSE 10686
// begin ruChassisTab = [ 23 , 24 ] ;
10647: LD_ADDR_VAR 0 17
10651: PUSH
10652: LD_INT 23
10654: PUSH
10655: LD_INT 24
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10662: LD_ADDR_OWVAR 37
10666: PUSH
10667: LD_VAR 0 17
10671: PUSH
10672: LD_INT 1
10674: PPUSH
10675: LD_VAR 0 17
10679: PPUSH
10680: CALL_OW 12
10684: ARRAY
10685: ST_TO_ADDR
// end ; end ;
10686: GO 10485
10688: POP
10689: POP
// veh = CreateVehicle ;
10690: LD_ADDR_VAR 0 16
10694: PUSH
10695: CALL_OW 45
10699: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10700: LD_VAR 0 16
10704: PPUSH
10705: LD_VAR 0 1
10709: PPUSH
10710: LD_INT 0
10712: PPUSH
10713: CALL_OW 49
// if vehcontrol = 1 then
10717: LD_VAR 0 7
10721: PUSH
10722: LD_INT 1
10724: EQUAL
10725: IFFALSE 10782
// begin hc_gallery =  ;
10727: LD_ADDR_OWVAR 33
10731: PUSH
10732: LD_STRING 
10734: ST_TO_ADDR
// hc_name =  ;
10735: LD_ADDR_OWVAR 26
10739: PUSH
10740: LD_STRING 
10742: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10743: LD_INT 0
10745: PPUSH
10746: LD_INT 3
10748: PPUSH
10749: LD_VAR 0 4
10753: PPUSH
10754: CALL_OW 380
// un = CreateHuman ;
10758: LD_ADDR_VAR 0 15
10762: PUSH
10763: CALL_OW 44
10767: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10768: LD_VAR 0 15
10772: PPUSH
10773: LD_VAR 0 16
10777: PPUSH
10778: CALL_OW 52
// end ; i = i + 1 ;
10782: LD_ADDR_VAR 0 13
10786: PUSH
10787: LD_VAR 0 13
10791: PUSH
10792: LD_INT 1
10794: PLUS
10795: ST_TO_ADDR
// end ; until i = vehCount ;
10796: LD_VAR 0 13
10800: PUSH
10801: LD_VAR 0 3
10805: EQUAL
10806: IFFALSE 9458
// repeat wait ( 0 0$1 ) ;
10808: LD_INT 35
10810: PPUSH
10811: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10815: LD_INT 22
10817: PUSH
10818: LD_VAR 0 2
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 21
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 24
10839: PUSH
10840: LD_INT 250
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: LD_INT 58
10852: PUSH
10853: EMPTY
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PPUSH
10866: CALL_OW 69
10870: PUSH
10871: LD_INT 0
10873: GREATER
10874: IFFALSE 11116
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10876: LD_ADDR_VAR 0 13
10880: PUSH
10881: LD_INT 22
10883: PUSH
10884: LD_VAR 0 2
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 21
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 24
10905: PUSH
10906: LD_INT 250
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: LD_INT 58
10918: PUSH
10919: EMPTY
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 69
10936: PUSH
10937: FOR_IN
10938: IFFALSE 11114
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10940: LD_ADDR_VAR 0 21
10944: PUSH
10945: LD_INT 22
10947: PUSH
10948: LD_VAR 0 11
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PPUSH
10957: CALL_OW 69
10961: PPUSH
10962: LD_VAR 0 13
10966: PPUSH
10967: CALL_OW 74
10971: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10972: LD_ADDR_VAR 0 22
10976: PUSH
10977: LD_INT 22
10979: PUSH
10980: LD_VAR 0 11
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 59
10994: PUSH
10995: EMPTY
10996: LIST
10997: PUSH
10998: LD_INT 21
11000: PUSH
11001: LD_INT 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 21
11010: PUSH
11011: LD_INT 2
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: PPUSH
11031: CALL_OW 69
11035: PPUSH
11036: LD_VAR 0 13
11040: PPUSH
11041: CALL_OW 74
11045: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11046: LD_VAR 0 13
11050: PPUSH
11051: LD_VAR 0 21
11055: PPUSH
11056: CALL_OW 296
11060: PUSH
11061: LD_INT 8
11063: PLUS
11064: PUSH
11065: LD_VAR 0 13
11069: PPUSH
11070: LD_VAR 0 22
11074: PPUSH
11075: CALL_OW 296
11079: LESS
11080: IFFALSE 11098
// begin ComAttackUnit ( i , target1 ) ;
11082: LD_VAR 0 13
11086: PPUSH
11087: LD_VAR 0 21
11091: PPUSH
11092: CALL_OW 115
// end else
11096: GO 11112
// begin ComAttackUnit ( i , target2 ) ;
11098: LD_VAR 0 13
11102: PPUSH
11103: LD_VAR 0 22
11107: PPUSH
11108: CALL_OW 115
// end ; end ;
11112: GO 10937
11114: POP
11115: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11116: LD_INT 22
11118: PUSH
11119: LD_VAR 0 2
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: LD_INT 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 24
11140: PUSH
11141: LD_INT 250
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 3
11150: PUSH
11151: LD_INT 58
11153: PUSH
11154: EMPTY
11155: LIST
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PPUSH
11167: CALL_OW 69
11171: PUSH
11172: LD_INT 0
11174: EQUAL
11175: IFFALSE 10808
// end ; end_of_file
11177: LD_VAR 0 12
11181: RET
// every 1 do var i , gammaSquad , startX , startY ;
11182: GO 11184
11184: DISABLE
11185: LD_INT 0
11187: PPUSH
11188: PPUSH
11189: PPUSH
11190: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11191: LD_ADDR_VAR 0 2
11195: PUSH
11196: LD_EXP 8
11200: PUSH
11201: LD_EXP 9
11205: PUSH
11206: LD_EXP 10
11210: PUSH
11211: LD_EXP 11
11215: PUSH
11216: LD_EXP 12
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11228: LD_ADDR_VAR 0 3
11232: PUSH
11233: LD_INT 46
11235: PUSH
11236: LD_INT 45
11238: PUSH
11239: LD_INT 44
11241: PUSH
11242: LD_INT 43
11244: PUSH
11245: LD_INT 42
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11255: LD_ADDR_VAR 0 4
11259: PUSH
11260: LD_INT 14
11262: PUSH
11263: LD_INT 12
11265: PUSH
11266: LD_INT 10
11268: PUSH
11269: LD_INT 8
11271: PUSH
11272: LD_INT 6
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11282: LD_INT 32
11284: PPUSH
11285: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11289: LD_INT 32
11291: PPUSH
11292: LD_INT 51
11294: PPUSH
11295: LD_INT 26
11297: PPUSH
11298: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11302: LD_INT 32
11304: PPUSH
11305: LD_INT 53
11307: PPUSH
11308: LD_INT 23
11310: PPUSH
11311: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11315: LD_INT 32
11317: PPUSH
11318: LD_INT 52
11320: PPUSH
11321: LD_INT 19
11323: PPUSH
11324: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11328: LD_INT 35
11330: PPUSH
11331: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11335: LD_INT 32
11337: PPUSH
11338: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11342: LD_INT 32
11344: PPUSH
11345: CALL_OW 250
11349: PUSH
11350: LD_INT 52
11352: EQUAL
11353: PUSH
11354: LD_INT 32
11356: PPUSH
11357: CALL_OW 251
11361: PUSH
11362: LD_INT 19
11364: EQUAL
11365: AND
11366: IFFALSE 11328
// ComExitVehicle ( JMM ) ;
11368: LD_EXP 1
11372: PPUSH
11373: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11377: LD_EXP 7
11381: PPUSH
11382: LD_EXP 1
11386: PPUSH
11387: CALL_OW 119
// wait ( 0 0$01 ) ;
11391: LD_INT 35
11393: PPUSH
11394: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11398: LD_EXP 1
11402: PPUSH
11403: LD_INT 46
11405: PPUSH
11406: LD_INT 10
11408: PPUSH
11409: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11413: LD_EXP 1
11417: PPUSH
11418: LD_EXP 7
11422: PPUSH
11423: CALL_OW 179
// wait ( 0 0$4 ) ;
11427: LD_INT 140
11429: PPUSH
11430: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11434: LD_EXP 1
11438: PPUSH
11439: LD_STRING D1-JMM-1
11441: PPUSH
11442: CALL_OW 88
// if not dialogue_skipped then
11446: LD_OWVAR 59
11450: NOT
11451: IFFALSE 12108
// begin for i := 1 to gammaSquad do
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: DOUBLE
11459: LD_INT 1
11461: DEC
11462: ST_TO_ADDR
11463: LD_VAR 0 2
11467: PUSH
11468: FOR_TO
11469: IFFALSE 11530
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11471: LD_VAR 0 2
11475: PUSH
11476: LD_VAR 0 1
11480: ARRAY
11481: PPUSH
11482: LD_VAR 0 3
11486: PUSH
11487: LD_VAR 0 1
11491: ARRAY
11492: PPUSH
11493: LD_VAR 0 4
11497: PUSH
11498: LD_VAR 0 1
11502: ARRAY
11503: PPUSH
11504: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11508: LD_VAR 0 2
11512: PUSH
11513: LD_VAR 0 1
11517: ARRAY
11518: PPUSH
11519: LD_EXP 1
11523: PPUSH
11524: CALL_OW 179
// end ;
11528: GO 11468
11530: POP
11531: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11532: LD_EXP 4
11536: PPUSH
11537: LD_INT 41
11539: PPUSH
11540: LD_INT 4
11542: PPUSH
11543: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11547: LD_EXP 4
11551: PPUSH
11552: LD_EXP 1
11556: PPUSH
11557: CALL_OW 179
// if Lisa = false and Bobby then
11561: LD_EXP 4
11565: PUSH
11566: LD_INT 0
11568: EQUAL
11569: PUSH
11570: LD_EXP 2
11574: AND
11575: IFFALSE 11606
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11577: LD_EXP 2
11581: PPUSH
11582: LD_INT 41
11584: PPUSH
11585: LD_INT 4
11587: PPUSH
11588: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11592: LD_EXP 2
11596: PPUSH
11597: LD_EXP 1
11601: PPUSH
11602: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11606: LD_EXP 4
11610: PUSH
11611: LD_INT 0
11613: EQUAL
11614: PUSH
11615: LD_EXP 2
11619: PUSH
11620: LD_INT 0
11622: EQUAL
11623: AND
11624: PUSH
11625: LD_EXP 3
11629: AND
11630: IFFALSE 11661
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11632: LD_EXP 3
11636: PPUSH
11637: LD_INT 41
11639: PPUSH
11640: LD_INT 4
11642: PPUSH
11643: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11647: LD_EXP 3
11651: PPUSH
11652: LD_EXP 1
11656: PPUSH
11657: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11661: LD_EXP 4
11665: PUSH
11666: LD_INT 0
11668: EQUAL
11669: PUSH
11670: LD_EXP 2
11674: PUSH
11675: LD_INT 0
11677: EQUAL
11678: AND
11679: PUSH
11680: LD_EXP 3
11684: PUSH
11685: LD_INT 0
11687: EQUAL
11688: AND
11689: IFFALSE 11720
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11691: LD_EXP 6
11695: PPUSH
11696: LD_INT 41
11698: PPUSH
11699: LD_INT 4
11701: PPUSH
11702: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11706: LD_EXP 6
11710: PPUSH
11711: LD_EXP 1
11715: PPUSH
11716: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11720: LD_EXP 7
11724: PPUSH
11725: LD_STRING D1-Brown-1
11727: PPUSH
11728: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11732: LD_EXP 1
11736: PPUSH
11737: LD_STRING D1-JMM-2
11739: PPUSH
11740: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11744: LD_EXP 7
11748: PPUSH
11749: LD_STRING D1-Brown-2
11751: PPUSH
11752: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11756: LD_EXP 1
11760: PPUSH
11761: LD_EXP 9
11765: PPUSH
11766: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11770: LD_EXP 9
11774: PPUSH
11775: LD_STRING D1-FSol1-2
11777: PPUSH
11778: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11782: LD_EXP 1
11786: PPUSH
11787: LD_EXP 8
11791: PPUSH
11792: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11796: LD_EXP 8
11800: PPUSH
11801: LD_STRING D1-Sol2-2
11803: PPUSH
11804: CALL_OW 88
// if Lisa then
11808: LD_EXP 4
11812: IFFALSE 11852
// begin ComTurnUnit ( JMM , Lisa ) ;
11814: LD_EXP 1
11818: PPUSH
11819: LD_EXP 4
11823: PPUSH
11824: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11828: LD_EXP 4
11832: PPUSH
11833: LD_STRING D1-Lisa-2
11835: PPUSH
11836: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11840: LD_EXP 1
11844: PPUSH
11845: LD_STRING D1-JMM-3
11847: PPUSH
11848: CALL_OW 88
// end ; if Bobby then
11852: LD_EXP 2
11856: IFFALSE 11896
// begin ComTurnUnit ( JMM , Bobby ) ;
11858: LD_EXP 1
11862: PPUSH
11863: LD_EXP 2
11867: PPUSH
11868: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11872: LD_EXP 2
11876: PPUSH
11877: LD_STRING D1-Bobby-2
11879: PPUSH
11880: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11884: LD_EXP 1
11888: PPUSH
11889: LD_STRING D1-JMM-3
11891: PPUSH
11892: CALL_OW 88
// end ; if Cyrus then
11896: LD_EXP 3
11900: IFFALSE 11940
// begin ComTurnUnit ( JMM , Cyrus ) ;
11902: LD_EXP 1
11906: PPUSH
11907: LD_EXP 3
11911: PPUSH
11912: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11916: LD_EXP 3
11920: PPUSH
11921: LD_STRING D1-Cyrus-2
11923: PPUSH
11924: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11928: LD_EXP 1
11932: PPUSH
11933: LD_STRING D1-JMM-3
11935: PPUSH
11936: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11940: LD_EXP 1
11944: PPUSH
11945: LD_EXP 7
11949: PPUSH
11950: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11954: LD_EXP 1
11958: PPUSH
11959: LD_STRING D1-JMM-3a
11961: PPUSH
11962: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11966: LD_EXP 7
11970: PPUSH
11971: LD_INT 38
11973: PPUSH
11974: LD_INT 5
11976: PPUSH
11977: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11981: LD_EXP 7
11985: PPUSH
11986: LD_EXP 1
11990: PPUSH
11991: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11995: LD_EXP 1
11999: PPUSH
12000: LD_INT 40
12002: PPUSH
12003: LD_INT 7
12005: PPUSH
12006: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12010: LD_EXP 1
12014: PPUSH
12015: LD_EXP 7
12019: PPUSH
12020: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12024: LD_EXP 7
12028: PPUSH
12029: LD_STRING D1-Brown-3
12031: PPUSH
12032: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12036: LD_EXP 14
12040: PPUSH
12041: LD_STRING D1-Har-3
12043: PPUSH
12044: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12048: LD_EXP 1
12052: PPUSH
12053: LD_STRING D1-JMM-4
12055: PPUSH
12056: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12060: LD_EXP 14
12064: PPUSH
12065: LD_STRING D1-Har-4
12067: PPUSH
12068: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12072: LD_EXP 1
12076: PPUSH
12077: LD_STRING D1-JMM-5
12079: PPUSH
12080: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12084: LD_EXP 14
12088: PPUSH
12089: LD_STRING D1-Har-5
12091: PPUSH
12092: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12096: LD_EXP 1
12100: PPUSH
12101: LD_STRING D1-JMM-6
12103: PPUSH
12104: CALL_OW 88
// end ; InGameOff ;
12108: CALL_OW 9
// PrepareRussianConvoy ;
12112: CALL 3008 0 0
// ChangeMissionObjectives ( M1 ) ;
12116: LD_STRING M1
12118: PPUSH
12119: CALL_OW 337
// SaveForQuickRestart ;
12123: CALL_OW 22
// timerStatus = 1 ;
12127: LD_ADDR_EXP 29
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// startTimer = 1 ;
12135: LD_ADDR_EXP 30
12139: PUSH
12140: LD_INT 1
12142: ST_TO_ADDR
// bonusAvalaible = 1 ;
12143: LD_ADDR_EXP 42
12147: PUSH
12148: LD_INT 1
12150: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12151: LD_INT 105
12153: PPUSH
12154: CALL_OW 67
// DialogueOn ;
12158: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12162: LD_EXP 12
12166: PPUSH
12167: LD_STRING D9-Mech1-1
12169: PPUSH
12170: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12174: LD_EXP 1
12178: PPUSH
12179: LD_STRING D9-JMM-1
12181: PPUSH
12182: CALL_OW 88
// DialogueOff ;
12186: CALL_OW 7
// end ;
12190: PPOPN 4
12192: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12193: LD_INT 47
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 321
12203: PUSH
12204: LD_INT 2
12206: EQUAL
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 3
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 30
12230: PUSH
12231: LD_INT 3
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 69
12247: PUSH
12248: LD_INT 0
12250: GREATER
12251: AND
12252: IFFALSE 12482
12254: GO 12256
12256: DISABLE
// begin if IsOk ( Campell ) then
12257: LD_EXP 12
12261: PPUSH
12262: CALL_OW 302
12266: IFFALSE 12282
// begin Say ( Campell , D10-Mech1-1 ) ;
12268: LD_EXP 12
12272: PPUSH
12273: LD_STRING D10-Mech1-1
12275: PPUSH
12276: CALL_OW 88
// end else
12280: GO 12482
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12282: LD_INT 22
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 1
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 3
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 26
12314: PUSH
12315: LD_INT 1
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PPUSH
12328: CALL_OW 69
12332: PUSH
12333: LD_EXP 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: PUSH
12341: LD_INT 0
12343: GREATER
12344: DIFF
12345: IFFALSE 12419
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12347: LD_INT 22
12349: PUSH
12350: LD_INT 1
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 21
12359: PUSH
12360: LD_INT 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 26
12379: PUSH
12380: LD_INT 1
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PPUSH
12393: CALL_OW 69
12397: PUSH
12398: LD_EXP 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: DIFF
12406: PPUSH
12407: LD_STRING D10-Mech1-1
12409: PPUSH
12410: LD_STRING D10-Mech1-1
12412: PPUSH
12413: CALL 4266 0 3
// end else
12417: GO 12482
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12419: LD_INT 22
12421: PUSH
12422: LD_INT 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 21
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 26
12441: PUSH
12442: LD_INT 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 1
12456: ARRAY
12457: PPUSH
12458: CALL_OW 69
12462: PUSH
12463: LD_EXP 1
12467: PUSH
12468: EMPTY
12469: LIST
12470: DIFF
12471: PPUSH
12472: LD_STRING D10-Mech1-1
12474: PPUSH
12475: LD_STRING D10-Mech1-1
12477: PPUSH
12478: CALL 4266 0 3
// end ; end ; end ;
12482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12483: LD_INT 22
12485: PUSH
12486: LD_INT 1
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 32
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: PUSH
12512: LD_INT 0
12514: GREATER
12515: PUSH
12516: LD_EXP 32
12520: PUSH
12521: LD_INT 0
12523: EQUAL
12524: AND
12525: IFFALSE 12765
12527: GO 12529
12529: DISABLE
// begin if IsOK ( Claptopn ) then
12530: LD_EXP 11
12534: PPUSH
12535: CALL_OW 302
12539: IFFALSE 12555
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12541: LD_EXP 11
12545: PPUSH
12546: LD_STRING D9b-Eng1-1
12548: PPUSH
12549: CALL_OW 88
// end else
12553: GO 12751
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12555: LD_INT 22
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 21
12567: PUSH
12568: LD_INT 1
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 25
12577: PUSH
12578: LD_INT 3
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: LD_INT 26
12587: PUSH
12588: LD_INT 1
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 69
12605: PUSH
12606: LD_EXP 1
12610: PUSH
12611: EMPTY
12612: LIST
12613: PUSH
12614: LD_INT 0
12616: GREATER
12617: DIFF
12618: IFFALSE 12692
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12620: LD_INT 22
12622: PUSH
12623: LD_INT 1
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 21
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 25
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 26
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: PUSH
12671: LD_EXP 1
12675: PUSH
12676: EMPTY
12677: LIST
12678: DIFF
12679: PPUSH
12680: LD_STRING D9b-Eng1-1
12682: PPUSH
12683: LD_STRING D9b-Eng1-11
12685: PPUSH
12686: CALL 4266 0 3
// end else
12690: GO 12751
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12692: LD_INT 22
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 21
12704: PUSH
12705: LD_INT 1
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 26
12714: PUSH
12715: LD_INT 1
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 69
12731: PUSH
12732: LD_EXP 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: DIFF
12740: PPUSH
12741: LD_STRING D9b-Eng1-1
12743: PPUSH
12744: LD_STRING D9b-Eng1-1
12746: PPUSH
12747: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
12751: LD_EXP 33
12755: PUSH
12756: LD_INT 0
12758: EQUAL
12759: IFFALSE 12765
// EnergyDialog ;
12761: CALL 4690 0 0
// end ;
12765: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12766: LD_EXP 34
12770: PUSH
12771: LD_INT 1
12773: EQUAL
12774: PUSH
12775: LD_EXP 35
12779: PUSH
12780: LD_INT 1
12782: EQUAL
12783: AND
12784: IFFALSE 12796
12786: GO 12788
12788: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12789: LD_STRING M1a
12791: PPUSH
12792: CALL_OW 337
12796: END
// every 3 3$0 do
12797: GO 12799
12799: DISABLE
// begin PrepareFirstAttack ;
12800: CALL 3808 0 0
// end ;
12804: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12805: LD_INT 22
12807: PUSH
12808: LD_INT 5
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 21
12817: PUSH
12818: LD_INT 1
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 3
12827: PUSH
12828: LD_INT 24
12830: PUSH
12831: LD_INT 250
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: PPUSH
12847: CALL_OW 69
12851: PUSH
12852: LD_INT 0
12854: GREATER
12855: PUSH
12856: LD_EXP 23
12860: PUSH
12861: LD_INT 1
12863: EQUAL
12864: AND
12865: IFFALSE 13166
12867: GO 12869
12869: DISABLE
12870: LD_INT 0
12872: PPUSH
// begin firstRussianAttack = 2 ;
12873: LD_ADDR_EXP 23
12877: PUSH
12878: LD_INT 2
12880: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12881: LD_INT 22
12883: PUSH
12884: LD_INT 5
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: PPUSH
12910: LD_INT 125
12912: PPUSH
12913: LD_INT 98
12915: PPUSH
12916: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12920: LD_INT 22
12922: PUSH
12923: LD_INT 1
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: PUSH
12949: LD_EXP 1
12953: PUSH
12954: LD_EXP 7
12958: PUSH
12959: LD_EXP 4
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: DIFF
12969: PPUSH
12970: LD_STRING DAtt1-Sol1-1
12972: PPUSH
12973: LD_STRING DAtt1-FSol1-1
12975: PPUSH
12976: CALL 4266 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12980: LD_EXP 1
12984: PPUSH
12985: LD_STRING DAtt1-JMM-1
12987: PPUSH
12988: CALL_OW 88
// if Lisa then
12992: LD_EXP 4
12996: IFFALSE 13012
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12998: LD_EXP 4
13002: PPUSH
13003: LD_STRING DAtt1a-Lisa-1
13005: PPUSH
13006: CALL_OW 88
// end else
13010: GO 13083
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13012: LD_INT 22
13014: PUSH
13015: LD_INT 1
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 21
13024: PUSH
13025: LD_INT 1
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 26
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 69
13051: PUSH
13052: LD_EXP 1
13056: PUSH
13057: LD_EXP 7
13061: PUSH
13062: LD_EXP 4
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: DIFF
13072: PPUSH
13073: LD_STRING DAtt1a-Sol1-1
13075: PPUSH
13076: LD_STRING DAtt1-FSol1-1
13078: PPUSH
13079: CALL 4266 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13083: LD_EXP 1
13087: PPUSH
13088: LD_STRING DAtt1a-JMM-1
13090: PPUSH
13091: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13095: LD_INT 22
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 21
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 26
13117: PUSH
13118: LD_INT 1
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PUSH
13135: LD_EXP 1
13139: PUSH
13140: LD_EXP 7
13144: PUSH
13145: LD_EXP 4
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: DIFF
13155: PPUSH
13156: LD_STRING DAtt1b-Sol1-1
13158: PPUSH
13159: LD_STRING DAtt1a-Sol1-1
13161: PPUSH
13162: CALL 4266 0 3
// end ;
13166: PPOPN 1
13168: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13169: LD_EXP 23
13173: PUSH
13174: LD_INT 2
13176: EQUAL
13177: IFFALSE 13239
13179: GO 13181
13181: DISABLE
13182: LD_INT 0
13184: PPUSH
// begin enable ;
13185: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13186: LD_ADDR_VAR 0 1
13190: PUSH
13191: LD_INT 5
13193: PPUSH
13194: LD_INT 22
13196: PUSH
13197: LD_INT 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 1
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: CALL_OW 70
13222: PUSH
13223: FOR_IN
13224: IFFALSE 13237
// RemoveUnit ( i ) ;
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 64
13235: GO 13223
13237: POP
13238: POP
// end ;
13239: PPOPN 1
13241: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13242: LD_INT 22
13244: PUSH
13245: LD_INT 5
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: PUSH
13260: LD_INT 0
13262: EQUAL
13263: PUSH
13264: LD_EXP 23
13268: PUSH
13269: LD_INT 2
13271: EQUAL
13272: AND
13273: IFFALSE 13286
13275: GO 13277
13277: DISABLE
// firstRussianAttack = 3 ;
13278: LD_ADDR_EXP 23
13282: PUSH
13283: LD_INT 3
13285: ST_TO_ADDR
13286: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13287: LD_EXP 28
13291: PUSH
13292: LD_INT 0
13294: EQUAL
13295: IFFALSE 13376
13297: GO 13299
13299: DISABLE
// begin timerStatus = 4 ;
13300: LD_ADDR_EXP 29
13304: PUSH
13305: LD_INT 4
13307: ST_TO_ADDR
// DialogueOn ;
13308: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13312: LD_EXP 13
13316: PPUSH
13317: LD_STRING D2-Don-1
13319: PPUSH
13320: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13324: LD_EXP 1
13328: PPUSH
13329: LD_STRING D2-JMM-1
13331: PPUSH
13332: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13336: LD_EXP 13
13340: PPUSH
13341: LD_STRING D2-Don-2
13343: PPUSH
13344: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13348: LD_EXP 1
13352: PPUSH
13353: LD_STRING D2-JMM-2
13355: PPUSH
13356: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13360: LD_EXP 13
13364: PPUSH
13365: LD_STRING D2-Don-3
13367: PPUSH
13368: CALL_OW 94
// DialogueOff ;
13372: CALL_OW 7
// end ;
13376: END
// every 12 12$0 do var tmp ;
13377: GO 13379
13379: DISABLE
13380: LD_INT 0
13382: PPUSH
// begin PrepareDonaldsonArmy ;
13383: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13387: LD_EXP 13
13391: PPUSH
13392: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_INT 4
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 21
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 26
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 25
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: PUSH
13452: LD_EXP 5
13456: PUSH
13457: EMPTY
13458: LIST
13459: DIFF
13460: ST_TO_ADDR
// DialogueOn ;
13461: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13465: LD_VAR 0 1
13469: PPUSH
13470: LD_STRING D3-Sol1-1
13472: PPUSH
13473: LD_STRING D3-Sol1-1
13475: PPUSH
13476: CALL 4266 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13480: LD_INT 22
13482: PUSH
13483: LD_INT 4
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 26
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 25
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PPUSH
13526: CALL_OW 69
13530: PPUSH
13531: LD_STRING D3-Sol2-1
13533: PPUSH
13534: LD_STRING D3-Sol2-1
13536: PPUSH
13537: CALL 4266 0 3
// if Frank then
13541: LD_EXP 5
13545: IFFALSE 13559
// Say ( Frank , D3-Frank-1 ) ;
13547: LD_EXP 5
13551: PPUSH
13552: LD_STRING D3-Frank-1
13554: PPUSH
13555: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13559: LD_EXP 13
13563: PPUSH
13564: LD_STRING D3-Don-1
13566: PPUSH
13567: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13571: LD_EXP 13
13575: PPUSH
13576: LD_STRING D3-Don-1a
13578: PPUSH
13579: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13583: LD_EXP 1
13587: PPUSH
13588: LD_STRING D3-JMM-1
13590: PPUSH
13591: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13595: LD_EXP 13
13599: PPUSH
13600: LD_STRING D3-Don-2
13602: PPUSH
13603: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13607: LD_INT 22
13609: PUSH
13610: LD_INT 6
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 21
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 69
13635: PUSH
13636: LD_INT 0
13638: GREATER
13639: IFFALSE 13777
// begin Say ( JMM , D3-JMM-2 ) ;
13641: LD_EXP 1
13645: PPUSH
13646: LD_STRING D3-JMM-2
13648: PPUSH
13649: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13653: LD_EXP 13
13657: PPUSH
13658: LD_STRING D3-Don-3
13660: PPUSH
13661: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13665: LD_EXP 1
13669: PPUSH
13670: LD_STRING D3-JMM-3
13672: PPUSH
13673: CALL_OW 88
// if IsOK ( Frank ) then
13677: LD_EXP 5
13681: PPUSH
13682: CALL_OW 302
13686: IFFALSE 13700
// Say ( Frank , D3-Frank-3 ) ;
13688: LD_EXP 5
13692: PPUSH
13693: LD_STRING D3-Frank-3
13695: PPUSH
13696: CALL_OW 88
// DialogueOff ;
13700: CALL_OW 7
// if IsOK ( Frank ) then
13704: LD_EXP 5
13708: PPUSH
13709: CALL_OW 302
13713: IFFALSE 13775
// begin SetSide ( Frank , 0 ) ;
13715: LD_EXP 5
13719: PPUSH
13720: LD_INT 0
13722: PPUSH
13723: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13727: LD_EXP 5
13731: PPUSH
13732: LD_INT 12
13734: PPUSH
13735: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13739: LD_EXP 5
13743: PPUSH
13744: LD_STRING 04t_Frank
13746: PPUSH
13747: CALL_OW 38
// Wait ( 0 0$3 ) ;
13751: LD_INT 105
13753: PPUSH
13754: CALL_OW 67
// frankScoutBase = 1 ;
13758: LD_ADDR_EXP 25
13762: PUSH
13763: LD_INT 1
13765: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13766: LD_EXP 5
13770: PPUSH
13771: CALL_OW 64
// end ; end else
13775: GO 13864
// begin Say ( JMM , D3-JMM-4 ) ;
13777: LD_EXP 1
13781: PPUSH
13782: LD_STRING D3-JMM-4
13784: PPUSH
13785: CALL_OW 88
// DialogueOff ;
13789: CALL_OW 7
// if IsOK ( Frank ) then
13793: LD_EXP 5
13797: PPUSH
13798: CALL_OW 302
13802: IFFALSE 13864
// begin SetSide ( Frank , 0 ) ;
13804: LD_EXP 5
13808: PPUSH
13809: LD_INT 0
13811: PPUSH
13812: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13816: LD_EXP 5
13820: PPUSH
13821: LD_INT 12
13823: PPUSH
13824: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13828: LD_EXP 5
13832: PPUSH
13833: LD_STRING 04t_Frank
13835: PPUSH
13836: CALL_OW 38
// Wait ( 0 0$3 ) ;
13840: LD_INT 105
13842: PPUSH
13843: CALL_OW 67
// frankScoutBase = 1 ;
13847: LD_ADDR_EXP 25
13851: PUSH
13852: LD_INT 1
13854: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13855: LD_EXP 5
13859: PPUSH
13860: CALL_OW 64
// end ; end ; end ;
13864: PPOPN 1
13866: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13867: LD_EXP 13
13871: PPUSH
13872: CALL_OW 255
13876: PUSH
13877: LD_INT 4
13879: EQUAL
13880: PUSH
13881: LD_EXP 13
13885: PPUSH
13886: CALL_OW 302
13890: AND
13891: IFFALSE 13916
13893: GO 13895
13895: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13896: LD_EXP 13
13900: PPUSH
13901: LD_STRING D3b-Don-1
13903: PPUSH
13904: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13908: LD_ADDR_EXP 41
13912: PUSH
13913: LD_INT 1
13915: ST_TO_ADDR
// end ;
13916: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13917: LD_EXP 24
13921: PUSH
13922: LD_INT 0
13924: EQUAL
13925: IFFALSE 14081
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
// begin enable ;
13934: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 22
13942: PUSH
13943: LD_INT 4
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: LD_INT 21
13952: PUSH
13953: LD_INT 1
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PPUSH
13964: CALL_OW 69
13968: PUSH
13969: FOR_IN
13970: IFFALSE 14079
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13972: LD_ADDR_VAR 0 2
13976: PUSH
13977: LD_INT 22
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 21
13989: PUSH
13990: LD_INT 1
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: PUSH
14006: FOR_IN
14007: IFFALSE 14075
// begin if GetDistUnits ( i , j ) < 7 then
14009: LD_VAR 0 1
14013: PPUSH
14014: LD_VAR 0 2
14018: PPUSH
14019: CALL_OW 296
14023: PUSH
14024: LD_INT 7
14026: LESS
14027: IFFALSE 14073
// begin saveDonaldson = 1 ;
14029: LD_ADDR_EXP 24
14033: PUSH
14034: LD_INT 1
14036: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14037: LD_INT 22
14039: PUSH
14040: LD_INT 4
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 21
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 69
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: CALL_OW 235
// end ; end ;
14073: GO 14006
14075: POP
14076: POP
// end ;
14077: GO 13969
14079: POP
14080: POP
// end ;
14081: PPOPN 2
14083: END
// every 0 0$1 trigger frankScoutBase do
14084: LD_EXP 25
14088: IFFALSE 14453
14090: GO 14092
14092: DISABLE
// begin wait ( 2 2$30 ) ;
14093: LD_INT 5250
14095: PPUSH
14096: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14100: LD_INT 35
14102: PPUSH
14103: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14107: LD_INT 81
14109: PUSH
14110: LD_INT 4
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 92
14119: PUSH
14120: LD_INT 84
14122: PUSH
14123: LD_INT 28
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PPUSH
14139: CALL_OW 69
14143: NOT
14144: IFFALSE 14100
// uc_side = 4 ;
14146: LD_ADDR_OWVAR 20
14150: PUSH
14151: LD_INT 4
14153: ST_TO_ADDR
// uc_nation = 1 ;
14154: LD_ADDR_OWVAR 21
14158: PUSH
14159: LD_INT 1
14161: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14162: LD_ADDR_EXP 5
14166: PUSH
14167: LD_STRING 04t_Frank
14169: PPUSH
14170: CALL_OW 34
14174: ST_TO_ADDR
// if not Frank then
14175: LD_EXP 5
14179: NOT
14180: IFFALSE 14184
// exit ;
14182: GO 14453
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14184: LD_EXP 5
14188: PPUSH
14189: LD_INT 13
14191: PPUSH
14192: LD_INT 0
14194: PPUSH
14195: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14199: LD_INT 35
14201: PPUSH
14202: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14206: LD_EXP 1
14210: PPUSH
14211: CALL_OW 310
14215: NOT
14216: PUSH
14217: LD_EXP 1
14221: PPUSH
14222: LD_INT 4
14224: PPUSH
14225: CALL_OW 296
14229: PUSH
14230: LD_INT 20
14232: LESS
14233: AND
14234: IFFALSE 14267
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14236: LD_EXP 5
14240: PPUSH
14241: LD_EXP 1
14245: PPUSH
14246: CALL_OW 250
14250: PPUSH
14251: LD_EXP 1
14255: PPUSH
14256: CALL_OW 251
14260: PPUSH
14261: CALL_OW 111
14265: GO 14282
// ComMoveXY ( Frank , 51 , 15 ) ;
14267: LD_EXP 5
14271: PPUSH
14272: LD_INT 51
14274: PPUSH
14275: LD_INT 15
14277: PPUSH
14278: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14282: LD_EXP 5
14286: PPUSH
14287: LD_EXP 1
14291: PPUSH
14292: CALL_OW 296
14296: PUSH
14297: LD_INT 10
14299: LESS
14300: IFFALSE 14199
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14302: LD_EXP 1
14306: PUSH
14307: LD_EXP 5
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 87
// DialogueOn ;
14320: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14324: LD_EXP 5
14328: PPUSH
14329: LD_STRING D3a-Frank-1
14331: PPUSH
14332: CALL_OW 88
// if Lisa then
14336: LD_EXP 4
14340: IFFALSE 14390
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14342: LD_EXP 4
14346: PPUSH
14347: LD_STRING D3a-Lisa-1
14349: PPUSH
14350: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14354: LD_EXP 5
14358: PPUSH
14359: LD_STRING D3a-Frank-2
14361: PPUSH
14362: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14366: LD_EXP 4
14370: PPUSH
14371: LD_STRING D3a-Lisa-2
14373: PPUSH
14374: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14378: LD_EXP 5
14382: PPUSH
14383: LD_STRING D3a-Frank-3
14385: PPUSH
14386: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14390: LD_EXP 1
14394: PPUSH
14395: LD_STRING D3a-JMM-3
14397: PPUSH
14398: CALL_OW 88
// DialogueOff ;
14402: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14406: LD_EXP 5
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: CALL_OW 235
// InGameOn ;
14418: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14422: LD_INT 1
14424: PPUSH
14425: LD_INT 7
14427: PPUSH
14428: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14432: LD_INT 93
14434: PPUSH
14435: LD_INT 91
14437: PPUSH
14438: CALL_OW 84
// wait ( 0 0$5 ) ;
14442: LD_INT 175
14444: PPUSH
14445: CALL_OW 67
// InGameOff ;
14449: CALL_OW 9
// end ;
14453: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14454: LD_OWVAR 67
14458: PUSH
14459: LD_INT 2
14461: EQUAL
14462: PUSH
14463: LD_OWVAR 67
14467: PUSH
14468: LD_INT 3
14470: EQUAL
14471: OR
14472: IFFALSE 14496
14474: GO 14476
14476: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14477: LD_INT 24
14479: PPUSH
14480: LD_INT 24
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: LD_INT 53
14491: PPUSH
14492: CALL_OW 125
14496: END
// every 18 18$0 do
14497: GO 14499
14499: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14500: LD_EXP 14
14504: PPUSH
14505: LD_STRING D4-Har-1
14507: PPUSH
14508: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14512: LD_EXP 1
14516: PPUSH
14517: LD_STRING D4-JMM-1
14519: PPUSH
14520: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14524: LD_EXP 14
14528: PPUSH
14529: LD_STRING D4-Har-2
14531: PPUSH
14532: CALL_OW 94
// case query ( Q1 ) of 1 :
14536: LD_STRING Q1
14538: PPUSH
14539: CALL_OW 97
14543: PUSH
14544: LD_INT 1
14546: DOUBLE
14547: EQUAL
14548: IFTRUE 14552
14550: GO 14611
14552: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14553: LD_EXP 1
14557: PPUSH
14558: LD_STRING D5-JMM-1
14560: PPUSH
14561: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14565: LD_EXP 14
14569: PPUSH
14570: LD_STRING D5-Har-1
14572: PPUSH
14573: CALL_OW 94
// timeToSupport = 10 10$0 ;
14577: LD_ADDR_EXP 28
14581: PUSH
14582: LD_INT 21000
14584: ST_TO_ADDR
// timerStatus = 2 ;
14585: LD_ADDR_EXP 29
14589: PUSH
14590: LD_INT 2
14592: ST_TO_ADDR
// startTimer = 1 ;
14593: LD_ADDR_EXP 30
14597: PUSH
14598: LD_INT 1
14600: ST_TO_ADDR
// harrAnswer = 1 ;
14601: LD_ADDR_EXP 26
14605: PUSH
14606: LD_INT 1
14608: ST_TO_ADDR
// end ; 2 :
14609: GO 14746
14611: LD_INT 2
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14678
14619: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14620: LD_EXP 1
14624: PPUSH
14625: LD_STRING D5-JMM-2
14627: PPUSH
14628: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14632: LD_EXP 14
14636: PPUSH
14637: LD_STRING D5-Har-2
14639: PPUSH
14640: CALL_OW 94
// timeToSupport = 5 5$0 ;
14644: LD_ADDR_EXP 28
14648: PUSH
14649: LD_INT 10500
14651: ST_TO_ADDR
// timerStatus = 2 ;
14652: LD_ADDR_EXP 29
14656: PUSH
14657: LD_INT 2
14659: ST_TO_ADDR
// startTimer = 1 ;
14660: LD_ADDR_EXP 30
14664: PUSH
14665: LD_INT 1
14667: ST_TO_ADDR
// harrAnswer = 2 ;
14668: LD_ADDR_EXP 26
14672: PUSH
14673: LD_INT 2
14675: ST_TO_ADDR
// end ; 3 :
14676: GO 14746
14678: LD_INT 3
14680: DOUBLE
14681: EQUAL
14682: IFTRUE 14686
14684: GO 14745
14686: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14687: LD_EXP 1
14691: PPUSH
14692: LD_STRING D5-JMM-3
14694: PPUSH
14695: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14699: LD_EXP 14
14703: PPUSH
14704: LD_STRING D5-Har-3
14706: PPUSH
14707: CALL_OW 94
// timeToSupport = 5 5$0 ;
14711: LD_ADDR_EXP 28
14715: PUSH
14716: LD_INT 10500
14718: ST_TO_ADDR
// timerStatus = 2 ;
14719: LD_ADDR_EXP 29
14723: PUSH
14724: LD_INT 2
14726: ST_TO_ADDR
// startTimer = 1 ;
14727: LD_ADDR_EXP 30
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// harrAnswer = 3 ;
14735: LD_ADDR_EXP 26
14739: PUSH
14740: LD_INT 3
14742: ST_TO_ADDR
// end ; end ;
14743: GO 14746
14745: POP
// end ;
14746: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14747: LD_EXP 29
14751: PUSH
14752: LD_INT 2
14754: EQUAL
14755: PUSH
14756: LD_EXP 28
14760: PUSH
14761: LD_INT 0
14763: EQUAL
14764: AND
14765: IFFALSE 15042
14767: GO 14769
14769: DISABLE
// begin timerStatus = 4 ;
14770: LD_ADDR_EXP 29
14774: PUSH
14775: LD_INT 4
14777: ST_TO_ADDR
// if harrAnswer = 1 then
14778: LD_EXP 26
14782: PUSH
14783: LD_INT 1
14785: EQUAL
14786: IFFALSE 14866
// begin PrepareHarrisonSupport ( 3 ) ;
14788: LD_INT 3
14790: PPUSH
14791: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14795: LD_INT 2100
14797: PPUSH
14798: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14802: LD_EXP 14
14806: PPUSH
14807: LD_STRING D7-Har-1
14809: PPUSH
14810: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14814: LD_STRING M2
14816: PPUSH
14817: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14821: LD_ADDR_EXP 27
14825: PUSH
14826: LD_INT 31500
14828: PUSH
14829: LD_INT 10500
14831: PUSH
14832: LD_INT 8400
14834: PUSH
14835: LD_INT 6300
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: LD_OWVAR 67
14847: ARRAY
14848: PLUS
14849: ST_TO_ADDR
// startTimer = 1 ;
14850: LD_ADDR_EXP 30
14854: PUSH
14855: LD_INT 1
14857: ST_TO_ADDR
// timerStatus = 3 ;
14858: LD_ADDR_EXP 29
14862: PUSH
14863: LD_INT 3
14865: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14866: LD_EXP 26
14870: PUSH
14871: LD_INT 2
14873: EQUAL
14874: IFFALSE 14954
// begin PrepareHarrisonSupport ( 4 ) ;
14876: LD_INT 4
14878: PPUSH
14879: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14883: LD_INT 2100
14885: PPUSH
14886: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14890: LD_EXP 14
14894: PPUSH
14895: LD_STRING D7-Har-1
14897: PPUSH
14898: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14902: LD_STRING M2
14904: PPUSH
14905: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14909: LD_ADDR_EXP 27
14913: PUSH
14914: LD_INT 27300
14916: PUSH
14917: LD_INT 8400
14919: PUSH
14920: LD_INT 8400
14922: PUSH
14923: LD_INT 6300
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: PUSH
14931: LD_OWVAR 67
14935: ARRAY
14936: PLUS
14937: ST_TO_ADDR
// startTimer = 1 ;
14938: LD_ADDR_EXP 30
14942: PUSH
14943: LD_INT 1
14945: ST_TO_ADDR
// timerStatus = 3 ;
14946: LD_ADDR_EXP 29
14950: PUSH
14951: LD_INT 3
14953: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14954: LD_EXP 26
14958: PUSH
14959: LD_INT 3
14961: EQUAL
14962: IFFALSE 15042
// begin PrepareHarrisonSupport ( 5 ) ;
14964: LD_INT 5
14966: PPUSH
14967: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14971: LD_INT 2100
14973: PPUSH
14974: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14978: LD_EXP 14
14982: PPUSH
14983: LD_STRING D7-Har-1
14985: PPUSH
14986: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14990: LD_STRING M2
14992: PPUSH
14993: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14997: LD_ADDR_EXP 27
15001: PUSH
15002: LD_INT 21000
15004: PUSH
15005: LD_INT 8400
15007: PUSH
15008: LD_INT 6300
15010: PUSH
15011: LD_INT 4200
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: PUSH
15019: LD_OWVAR 67
15023: ARRAY
15024: PLUS
15025: ST_TO_ADDR
// startTimer = 1 ;
15026: LD_ADDR_EXP 30
15030: PUSH
15031: LD_INT 1
15033: ST_TO_ADDR
// timerStatus = 3 ;
15034: LD_ADDR_EXP 29
15038: PUSH
15039: LD_INT 3
15041: ST_TO_ADDR
// end ; end ;
15042: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15043: LD_EXP 27
15047: PUSH
15048: LD_INT 8400
15050: LESSEQUAL
15051: PUSH
15052: LD_EXP 29
15056: PUSH
15057: LD_INT 3
15059: EQUAL
15060: AND
15061: IFFALSE 15093
15063: GO 15065
15065: DISABLE
// begin DialogueOn ;
15066: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15070: LD_EXP 14
15074: PPUSH
15075: LD_STRING D7a-Har-1
15077: PPUSH
15078: CALL_OW 94
// DialogueOff ;
15082: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15086: LD_STRING M2a
15088: PPUSH
15089: CALL_OW 337
// end ;
15093: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15094: LD_EXP 27
15098: PUSH
15099: LD_INT 0
15101: LESSEQUAL
15102: PUSH
15103: LD_EXP 29
15107: PUSH
15108: LD_INT 3
15110: EQUAL
15111: AND
15112: PUSH
15113: LD_EXP 40
15117: NOT
15118: AND
15119: IFFALSE 15258
15121: GO 15123
15123: DISABLE
15124: LD_INT 0
15126: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15127: LD_ADDR_VAR 0 1
15131: PUSH
15132: LD_INT 22
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PUSH
15147: LD_EXP 1
15151: PUSH
15152: EMPTY
15153: LIST
15154: DIFF
15155: ST_TO_ADDR
// saveDonaldson = 2 ;
15156: LD_ADDR_EXP 24
15160: PUSH
15161: LD_INT 2
15163: ST_TO_ADDR
// DialogueOn ;
15164: CALL_OW 6
// if IsOK ( Donaldson ) then
15168: LD_EXP 13
15172: PPUSH
15173: CALL_OW 302
15177: IFFALSE 15193
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15179: LD_EXP 14
15183: PPUSH
15184: LD_STRING D8-Har-1
15186: PPUSH
15187: CALL_OW 94
// end else
15191: GO 15205
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15193: LD_EXP 14
15197: PPUSH
15198: LD_STRING D8-Har-1a
15200: PPUSH
15201: CALL_OW 94
// end ; DialogueOff ;
15205: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15209: LD_VAR 0 1
15213: PPUSH
15214: LD_INT 4
15216: PPUSH
15217: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15221: LD_VAR 0 1
15225: PPUSH
15226: LD_INT 88
15228: PPUSH
15229: LD_INT 89
15231: PPUSH
15232: CALL_OW 114
// honor = 0 ;
15236: LD_ADDR_EXP 39
15240: PUSH
15241: LD_INT 0
15243: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15244: LD_INT 350
15246: PPUSH
15247: CALL_OW 67
// YouLost ( LostCommand ) ;
15251: LD_STRING LostCommand
15253: PPUSH
15254: CALL_OW 104
// end ;
15258: PPOPN 1
15260: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15261: LD_INT 22
15263: PUSH
15264: LD_INT 6
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 21
15273: PUSH
15274: LD_INT 1
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PPUSH
15285: CALL_OW 69
15289: PUSH
15290: LD_INT 0
15292: EQUAL
15293: PUSH
15294: LD_EXP 20
15298: PUSH
15299: LD_INT 0
15301: EQUAL
15302: AND
15303: PUSH
15304: LD_EXP 42
15308: PUSH
15309: LD_INT 1
15311: EQUAL
15312: AND
15313: IFFALSE 15407
15315: GO 15317
15317: DISABLE
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 21
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 23
15349: PUSH
15350: LD_INT 1
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 69
15366: ST_TO_ADDR
// for i in tmp do
15367: LD_ADDR_VAR 0 1
15371: PUSH
15372: LD_VAR 0 2
15376: PUSH
15377: FOR_IN
15378: IFFALSE 15405
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15380: LD_VAR 0 1
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: LD_INT 4
15390: PPUSH
15391: CALL_OW 12
15395: PPUSH
15396: LD_INT 500
15398: PPUSH
15399: CALL_OW 492
// end ;
15403: GO 15377
15405: POP
15406: POP
// end ; end_of_file
15407: PPOPN 2
15409: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15410: GO 15412
15412: DISABLE
15413: LD_INT 0
15415: PPUSH
// begin enemyWayX = [ ] ;
15416: LD_ADDR_EXP 46
15420: PUSH
15421: EMPTY
15422: ST_TO_ADDR
// enemyWayY = [ ] ;
15423: LD_ADDR_EXP 47
15427: PUSH
15428: EMPTY
15429: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15430: LD_ADDR_VAR 0 1
15434: PUSH
15435: LD_INT 1
15437: PPUSH
15438: LD_INT 3
15440: PPUSH
15441: CALL_OW 12
15445: ST_TO_ADDR
// if rnd = 1 then
15446: LD_VAR 0 1
15450: PUSH
15451: LD_INT 1
15453: EQUAL
15454: IFFALSE 15494
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15456: LD_ADDR_EXP 46
15460: PUSH
15461: LD_INT 73
15463: PUSH
15464: LD_INT 46
15466: PUSH
15467: LD_INT 29
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15475: LD_ADDR_EXP 47
15479: PUSH
15480: LD_INT 71
15482: PUSH
15483: LD_INT 43
15485: PUSH
15486: LD_INT 29
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: ST_TO_ADDR
// end ; if rnd = 2 then
15494: LD_VAR 0 1
15498: PUSH
15499: LD_INT 2
15501: EQUAL
15502: IFFALSE 15526
// begin enemyWayX = [ 64 ] ;
15504: LD_ADDR_EXP 46
15508: PUSH
15509: LD_INT 64
15511: PUSH
15512: EMPTY
15513: LIST
15514: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15515: LD_ADDR_EXP 47
15519: PUSH
15520: LD_INT 43
15522: PUSH
15523: EMPTY
15524: LIST
15525: ST_TO_ADDR
// end ; if rnd = 3 then
15526: LD_VAR 0 1
15530: PUSH
15531: LD_INT 3
15533: EQUAL
15534: IFFALSE 15558
// begin enemyWayX = [ 80 ] ;
15536: LD_ADDR_EXP 46
15540: PUSH
15541: LD_INT 80
15543: PUSH
15544: EMPTY
15545: LIST
15546: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15547: LD_ADDR_EXP 47
15551: PUSH
15552: LD_INT 28
15554: PUSH
15555: EMPTY
15556: LIST
15557: ST_TO_ADDR
// end ; enable ;
15558: ENABLE
// end ;
15559: PPOPN 1
15561: END
// every 0 0$1 trigger AIEnable = 1 do
15562: LD_EXP 37
15566: PUSH
15567: LD_INT 1
15569: EQUAL
15570: IFFALSE 15684
15572: GO 15574
15574: DISABLE
// begin enable ;
15575: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15576: LD_INT 3
15578: PPUSH
15579: LD_INT 21
15581: PPUSH
15582: LD_INT 7
15584: PPUSH
15585: CALL 5723 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15589: LD_INT 3
15591: PPUSH
15592: LD_INT 8
15594: PPUSH
15595: LD_INT 7
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL 6044 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15605: LD_INT 3
15607: PPUSH
15608: LD_INT 17
15610: PPUSH
15611: LD_INT 108
15613: PPUSH
15614: LD_INT 95
15616: PPUSH
15617: CALL 7368 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15621: LD_INT 3
15623: PPUSH
15624: LD_INT 23
15626: PPUSH
15627: LD_EXP 46
15631: PPUSH
15632: LD_EXP 47
15636: PPUSH
15637: CALL 6700 0 4
// if baseReadyToBuild = 2 then
15641: LD_EXP 20
15645: PUSH
15646: LD_INT 2
15648: EQUAL
15649: IFFALSE 15684
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15651: LD_INT 6
15653: PPUSH
15654: LD_EXP 21
15658: PPUSH
15659: LD_INT 6
15661: PPUSH
15662: CALL 5723 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15666: LD_INT 6
15668: PPUSH
15669: LD_INT 9
15671: PPUSH
15672: LD_INT 6
15674: PPUSH
15675: LD_EXP 22
15679: PPUSH
15680: CALL 6044 0 4
// end ; end ;
15684: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15685: LD_EXP 15
15689: PPUSH
15690: CALL_OW 310
15694: NOT
15695: PUSH
15696: LD_INT 21
15698: PPUSH
15699: CALL_OW 302
15703: AND
15704: PUSH
15705: LD_INT 21
15707: PPUSH
15708: CALL_OW 255
15712: PUSH
15713: LD_INT 3
15715: EQUAL
15716: AND
15717: IFFALSE 15735
15719: GO 15721
15721: DISABLE
// begin enable ;
15722: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15723: LD_EXP 15
15727: PPUSH
15728: LD_INT 21
15730: PPUSH
15731: CALL_OW 120
// end ;
15735: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15736: LD_INT 22
15738: PUSH
15739: LD_INT 3
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 21
15748: PUSH
15749: LD_INT 2
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 55
15758: PUSH
15759: EMPTY
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: PUSH
15772: LD_INT 0
15774: EQUAL
15775: PUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 255
15783: PUSH
15784: LD_INT 3
15786: EQUAL
15787: AND
15788: PUSH
15789: LD_INT 21
15791: PPUSH
15792: CALL_OW 302
15796: AND
15797: PUSH
15798: LD_INT 21
15800: PPUSH
15801: CALL_OW 255
15805: PUSH
15806: LD_INT 3
15808: EQUAL
15809: AND
15810: PUSH
15811: LD_INT 21
15813: PPUSH
15814: CALL_OW 302
15818: AND
15819: IFFALSE 16024
15821: GO 15823
15823: DISABLE
// begin enable ;
15824: ENABLE
// if Difficulty = 1 then
15825: LD_OWVAR 67
15829: PUSH
15830: LD_INT 1
15832: EQUAL
15833: IFFALSE 15877
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15835: LD_INT 3
15837: PPUSH
15838: LD_INT 24
15840: PPUSH
15841: LD_OWVAR 67
15845: PUSH
15846: LD_INT 2
15848: PLUS
15849: PPUSH
15850: LD_INT 42
15852: PUSH
15853: LD_INT 42
15855: PUSH
15856: LD_INT 43
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 21
15872: PPUSH
15873: CALL 6588 0 7
// if Difficulty = 2 then
15877: LD_OWVAR 67
15881: PUSH
15882: LD_INT 2
15884: EQUAL
15885: IFFALSE 15952
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15887: LD_INT 3
15889: PPUSH
15890: LD_INT 24
15892: PPUSH
15893: LD_OWVAR 67
15897: PUSH
15898: LD_INT 2
15900: PLUS
15901: PPUSH
15902: LD_INT 42
15904: PUSH
15905: LD_INT 42
15907: PUSH
15908: LD_INT 43
15910: PUSH
15911: LD_INT 43
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: PPUSH
15920: LD_INT 1
15922: PPUSH
15923: LD_INT 1
15925: PPUSH
15926: LD_INT 21
15928: PUSH
15929: LD_INT 22
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 1
15938: PPUSH
15939: LD_INT 2
15941: PPUSH
15942: CALL_OW 12
15946: ARRAY
15947: PPUSH
15948: CALL 6588 0 7
// if Difficulty = 3 then
15952: LD_OWVAR 67
15956: PUSH
15957: LD_INT 3
15959: EQUAL
15960: IFFALSE 16024
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15962: LD_INT 3
15964: PPUSH
15965: LD_INT 24
15967: PPUSH
15968: LD_OWVAR 67
15972: PUSH
15973: LD_INT 2
15975: PPUSH
15976: LD_INT 3
15978: PPUSH
15979: CALL_OW 12
15983: PLUS
15984: PPUSH
15985: LD_INT 43
15987: PUSH
15988: LD_INT 43
15990: PUSH
15991: LD_INT 43
15993: PUSH
15994: LD_INT 43
15996: PUSH
15997: LD_INT 44
15999: PUSH
16000: LD_INT 44
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: PPUSH
16011: LD_INT 1
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: LD_INT 22
16019: PPUSH
16020: CALL 6588 0 7
// end ;
16024: END
// every 0 0$1 do
16025: GO 16027
16027: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16028: LD_INT 3
16030: PPUSH
16031: LD_INT 1
16033: PPUSH
16034: LD_INT 3
16036: PPUSH
16037: CALL 5638 0 3
16041: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16042: LD_EXP 20
16046: PUSH
16047: LD_INT 1
16049: EQUAL
16050: IFFALSE 16197
16052: GO 16054
16054: DISABLE
16055: LD_INT 0
16057: PPUSH
16058: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16059: LD_ADDR_VAR 0 2
16063: PUSH
16064: LD_INT 22
16066: PUSH
16067: LD_INT 6
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 21
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 34
16086: PUSH
16087: LD_INT 51
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: LIST
16098: PPUSH
16099: CALL_OW 69
16103: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16104: LD_VAR 0 2
16108: PUSH
16109: LD_INT 1
16111: ARRAY
16112: PPUSH
16113: LD_EXP 21
16117: PPUSH
16118: CALL_OW 250
16122: PUSH
16123: LD_INT 5
16125: MINUS
16126: PPUSH
16127: LD_EXP 21
16131: PPUSH
16132: CALL_OW 251
16136: PUSH
16137: LD_INT 5
16139: MINUS
16140: PPUSH
16141: CALL_OW 111
// wait ( 0 0$5 ) ;
16145: LD_INT 175
16147: PPUSH
16148: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16152: LD_VAR 0 2
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: PPUSH
16161: LD_INT 41
16163: PPUSH
16164: LD_INT 52
16166: PPUSH
16167: CALL_OW 177
// wait ( 0 0$40 ) ;
16171: LD_INT 1400
16173: PPUSH
16174: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16178: LD_VAR 0 2
16182: PUSH
16183: LD_INT 1
16185: ARRAY
16186: PPUSH
16187: LD_INT 41
16189: PPUSH
16190: LD_INT 44
16192: PPUSH
16193: CALL_OW 111
// end ;
16197: PPOPN 2
16199: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16200: LD_EXP 21
16204: PPUSH
16205: CALL_OW 274
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 275
16217: PUSH
16218: LD_INT 100
16220: GREATEREQUAL
16221: IFFALSE 16449
16223: GO 16225
16225: DISABLE
16226: LD_INT 0
16228: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_INT 22
16236: PUSH
16237: LD_INT 6
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 21
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 25
16256: PUSH
16257: LD_INT 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16274: LD_VAR 0 1
16278: PUSH
16279: LD_INT 1
16281: ARRAY
16282: PPUSH
16283: LD_INT 4
16285: PPUSH
16286: LD_INT 39
16288: PPUSH
16289: LD_INT 37
16291: PPUSH
16292: LD_INT 3
16294: PPUSH
16295: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16299: LD_VAR 0 1
16303: PUSH
16304: LD_INT 1
16306: ARRAY
16307: PPUSH
16308: LD_INT 29
16310: PPUSH
16311: LD_INT 42
16313: PPUSH
16314: LD_INT 54
16316: PPUSH
16317: LD_INT 3
16319: PPUSH
16320: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16324: LD_VAR 0 1
16328: PUSH
16329: LD_INT 1
16331: ARRAY
16332: PPUSH
16333: LD_INT 6
16335: PPUSH
16336: LD_INT 38
16338: PPUSH
16339: LD_INT 48
16341: PPUSH
16342: LD_INT 0
16344: PPUSH
16345: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16349: LD_VAR 0 1
16353: PUSH
16354: LD_INT 1
16356: ARRAY
16357: PPUSH
16358: LD_INT 2
16360: PPUSH
16361: LD_INT 32
16363: PPUSH
16364: LD_INT 38
16366: PPUSH
16367: LD_INT 2
16369: PPUSH
16370: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16374: LD_VAR 0 1
16378: PUSH
16379: LD_INT 1
16381: ARRAY
16382: PPUSH
16383: LD_INT 26
16385: PPUSH
16386: LD_INT 39
16388: PPUSH
16389: LD_INT 55
16391: PPUSH
16392: LD_INT 3
16394: PPUSH
16395: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 1
16406: ARRAY
16407: PPUSH
16408: LD_INT 32
16410: PPUSH
16411: LD_INT 31
16413: PPUSH
16414: LD_INT 31
16416: PPUSH
16417: LD_INT 3
16419: PPUSH
16420: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16424: LD_VAR 0 1
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_INT 31
16435: PPUSH
16436: LD_INT 50
16438: PPUSH
16439: LD_INT 51
16441: PPUSH
16442: LD_INT 4
16444: PPUSH
16445: CALL_OW 205
// end ; end_of_file
16449: PPOPN 1
16451: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16461: LD_ADDR_VAR 0 3
16465: PUSH
16466: LD_INT 22
16468: PUSH
16469: LD_INT 6
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 21
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: LD_INT 54
16501: PUSH
16502: EMPTY
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16520: LD_ADDR_VAR 0 7
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_INT 6
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 21
16537: PUSH
16538: LD_INT 1
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 25
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 54
16557: PUSH
16558: EMPTY
16559: LIST
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL_OW 69
16571: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16572: LD_ADDR_VAR 0 4
16576: PUSH
16577: LD_INT 22
16579: PUSH
16580: LD_INT 6
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 25
16599: PUSH
16600: LD_INT 2
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16617: LD_ADDR_VAR 0 6
16621: PUSH
16622: LD_INT 22
16624: PUSH
16625: LD_INT 6
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 21
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 25
16644: PUSH
16645: LD_INT 4
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16662: LD_ADDR_VAR 0 8
16666: PUSH
16667: LD_INT 22
16669: PUSH
16670: LD_INT 6
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 2
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 34
16689: PUSH
16690: LD_INT 51
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PPUSH
16702: CALL_OW 69
16706: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16707: LD_VAR 0 1
16711: PPUSH
16712: CALL_OW 255
16716: PUSH
16717: LD_INT 6
16719: EQUAL
16720: PUSH
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 266
16730: PUSH
16731: LD_INT 0
16733: EQUAL
16734: AND
16735: IFFALSE 16755
// begin ruPDepot = building ;
16737: LD_ADDR_EXP 21
16741: PUSH
16742: LD_VAR 0 1
16746: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16747: LD_ADDR_EXP 20
16751: PUSH
16752: LD_INT 1
16754: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 266
16764: PUSH
16765: LD_INT 4
16767: EQUAL
16768: PUSH
16769: LD_VAR 0 1
16773: PPUSH
16774: CALL_OW 255
16778: PUSH
16779: LD_INT 6
16781: EQUAL
16782: AND
16783: IFFALSE 16816
// for i in tmpSold do
16785: LD_ADDR_VAR 0 2
16789: PUSH
16790: LD_VAR 0 3
16794: PUSH
16795: FOR_IN
16796: IFFALSE 16814
// ComEnterUnit ( i , building ) ;
16798: LD_VAR 0 2
16802: PPUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 120
16812: GO 16795
16814: POP
16815: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16816: LD_VAR 0 1
16820: PPUSH
16821: CALL_OW 266
16825: PUSH
16826: LD_INT 6
16828: EQUAL
16829: PUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 255
16839: PUSH
16840: LD_INT 6
16842: EQUAL
16843: AND
16844: IFFALSE 16902
// begin for i in tmpSci do
16846: LD_ADDR_VAR 0 2
16850: PUSH
16851: LD_VAR 0 6
16855: PUSH
16856: FOR_IN
16857: IFFALSE 16875
// ComEnterUnit ( i , building ) ;
16859: LD_VAR 0 2
16863: PPUSH
16864: LD_VAR 0 1
16868: PPUSH
16869: CALL_OW 120
16873: GO 16856
16875: POP
16876: POP
// ResAllTechs ( 6 , building , 3 ) ;
16877: LD_INT 6
16879: PPUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: LD_INT 3
16887: PPUSH
16888: CALL 5638 0 3
// ruPLab = building ;
16892: LD_ADDR_EXP 22
16896: PUSH
16897: LD_VAR 0 1
16901: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 266
16911: PUSH
16912: LD_INT 2
16914: EQUAL
16915: PUSH
16916: LD_VAR 0 1
16920: PPUSH
16921: CALL_OW 255
16925: PUSH
16926: LD_INT 6
16928: EQUAL
16929: AND
16930: IFFALSE 16981
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16932: LD_ADDR_VAR 0 5
16936: PUSH
16937: LD_VAR 0 8
16941: PUSH
16942: LD_INT 1
16944: ARRAY
16945: PPUSH
16946: CALL_OW 313
16950: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16951: LD_VAR 0 5
16955: PPUSH
16956: CALL_OW 121
// wait ( 0 0$1 ) ;
16960: LD_INT 35
16962: PPUSH
16963: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16967: LD_VAR 0 5
16971: PPUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16981: LD_VAR 0 1
16985: PPUSH
16986: CALL_OW 266
16990: PUSH
16991: LD_INT 32
16993: EQUAL
16994: PUSH
16995: LD_VAR 0 1
16999: PPUSH
17000: CALL_OW 255
17004: PUSH
17005: LD_INT 6
17007: EQUAL
17008: AND
17009: IFFALSE 17061
// begin ComPlaceWeapon ( building , 42 ) ;
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_INT 42
17018: PPUSH
17019: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17023: LD_VAR 0 7
17027: PUSH
17028: LD_INT 1
17030: ARRAY
17031: PPUSH
17032: CALL_OW 122
// wait ( 0 0$1 ) ;
17036: LD_INT 35
17038: PPUSH
17039: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17043: LD_VAR 0 7
17047: PUSH
17048: LD_INT 1
17050: ARRAY
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 266
17070: PUSH
17071: LD_INT 31
17073: EQUAL
17074: PUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 255
17084: PUSH
17085: LD_INT 6
17087: EQUAL
17088: AND
17089: IFFALSE 17155
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17091: LD_VAR 0 7
17095: PUSH
17096: LD_INT 2
17098: ARRAY
17099: PPUSH
17100: CALL_OW 122
// wait ( 0 0$1 ) ;
17104: LD_INT 35
17106: PPUSH
17107: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17111: LD_VAR 0 7
17115: PUSH
17116: LD_INT 2
17118: ARRAY
17119: PPUSH
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17129: LD_VAR 0 4
17133: PUSH
17134: LD_INT 1
17136: ARRAY
17137: PPUSH
17138: LD_EXP 21
17142: PPUSH
17143: CALL_OW 120
// baseReadyToBuild = 2 ;
17147: LD_ADDR_EXP 20
17151: PUSH
17152: LD_INT 2
17154: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 266
17164: PUSH
17165: LD_INT 32
17167: EQUAL
17168: PUSH
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 255
17178: PUSH
17179: LD_INT 1
17181: EQUAL
17182: AND
17183: PUSH
17184: LD_EXP 32
17188: PUSH
17189: LD_INT 0
17191: EQUAL
17192: AND
17193: IFFALSE 17438
// begin bunkerDialog = 1 ;
17195: LD_ADDR_EXP 32
17199: PUSH
17200: LD_INT 1
17202: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17203: LD_EXP 11
17207: PPUSH
17208: CALL_OW 302
17212: IFFALSE 17228
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17214: LD_EXP 11
17218: PPUSH
17219: LD_STRING D11-Eng1-1
17221: PPUSH
17222: CALL_OW 88
// end else
17226: GO 17424
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17228: LD_INT 22
17230: PUSH
17231: LD_INT 1
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 21
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 25
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 26
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 69
17278: PUSH
17279: LD_EXP 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: PUSH
17287: LD_INT 0
17289: GREATER
17290: DIFF
17291: IFFALSE 17365
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17293: LD_INT 22
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 21
17305: PUSH
17306: LD_INT 1
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 25
17315: PUSH
17316: LD_INT 2
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 26
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: PPUSH
17339: CALL_OW 69
17343: PUSH
17344: LD_EXP 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: DIFF
17352: PPUSH
17353: LD_STRING D11-Eng1-1
17355: PPUSH
17356: LD_STRING D11-Eng1-1
17358: PPUSH
17359: CALL 4266 0 3
// end else
17363: GO 17424
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17365: LD_INT 22
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 21
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 26
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: PUSH
17405: LD_EXP 1
17409: PUSH
17410: EMPTY
17411: LIST
17412: DIFF
17413: PPUSH
17414: LD_STRING D11-Eng1-1
17416: PPUSH
17417: LD_STRING D11-Eng1-1
17419: PPUSH
17420: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17424: LD_EXP 33
17428: PUSH
17429: LD_INT 0
17431: EQUAL
17432: IFFALSE 17438
// EnergyDialog ;
17434: CALL 4690 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 266
17447: PUSH
17448: LD_INT 29
17450: EQUAL
17451: PUSH
17452: LD_VAR 0 1
17456: PPUSH
17457: CALL_OW 255
17461: PUSH
17462: LD_INT 1
17464: EQUAL
17465: AND
17466: IFFALSE 17476
// buildOil = 1 ;
17468: LD_ADDR_EXP 34
17472: PUSH
17473: LD_INT 1
17475: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 266
17485: PUSH
17486: LD_INT 26
17488: EQUAL
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 255
17499: PUSH
17500: LD_INT 1
17502: EQUAL
17503: AND
17504: IFFALSE 17514
// buildPower = 1 ;
17506: LD_ADDR_EXP 35
17510: PUSH
17511: LD_INT 1
17513: ST_TO_ADDR
// end ;
17514: PPOPN 8
17516: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 266
17526: PUSH
17527: LD_INT 3
17529: EQUAL
17530: PUSH
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 255
17540: PUSH
17541: LD_INT 1
17543: EQUAL
17544: AND
17545: PUSH
17546: LD_EXP 31
17550: PUSH
17551: LD_INT 0
17553: EQUAL
17554: AND
17555: IFFALSE 17903
// begin factoryDialog = 1 ;
17557: LD_ADDR_EXP 31
17561: PUSH
17562: LD_INT 1
17564: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17565: LD_INT 22
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 21
17577: PUSH
17578: LD_INT 3
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 30
17587: PUSH
17588: LD_INT 3
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 24
17597: PUSH
17598: LD_INT 1000
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PPUSH
17611: CALL_OW 69
17615: PUSH
17616: LD_INT 1
17618: ARRAY
17619: PPUSH
17620: CALL_OW 87
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17624: LD_INT 47
17626: PPUSH
17627: LD_INT 1
17629: PPUSH
17630: CALL_OW 321
17634: PUSH
17635: LD_INT 1
17637: EQUAL
17638: PUSH
17639: LD_INT 45
17641: PPUSH
17642: LD_INT 1
17644: PPUSH
17645: CALL_OW 321
17649: PUSH
17650: LD_INT 1
17652: EQUAL
17653: AND
17654: IFFALSE 17903
// begin Say ( JMM , D9a-JMM-1 ) ;
17656: LD_EXP 1
17660: PPUSH
17661: LD_STRING D9a-JMM-1
17663: PPUSH
17664: CALL_OW 88
// if IsOK ( Campell ) then
17668: LD_EXP 12
17672: PPUSH
17673: CALL_OW 302
17677: IFFALSE 17693
// begin Say ( Campell , D9a-Mech1-1 ) ;
17679: LD_EXP 12
17683: PPUSH
17684: LD_STRING D9a-Mech1-1
17686: PPUSH
17687: CALL_OW 88
// end else
17691: GO 17889
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17693: LD_INT 22
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 25
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 26
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: PPUSH
17739: CALL_OW 69
17743: PUSH
17744: LD_EXP 1
17748: PUSH
17749: EMPTY
17750: LIST
17751: PUSH
17752: LD_INT 0
17754: GREATER
17755: DIFF
17756: IFFALSE 17830
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17758: LD_INT 22
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 21
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 26
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: PPUSH
17804: CALL_OW 69
17808: PUSH
17809: LD_EXP 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: DIFF
17817: PPUSH
17818: LD_STRING D9a-Mech1-1
17820: PPUSH
17821: LD_STRING D9a-Mech1-1
17823: PPUSH
17824: CALL 4266 0 3
// end else
17828: GO 17889
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17830: LD_INT 22
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 21
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 26
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 69
17869: PUSH
17870: LD_EXP 1
17874: PUSH
17875: EMPTY
17876: LIST
17877: DIFF
17878: PPUSH
17879: LD_STRING D9a-Mech1-1
17881: PPUSH
17882: LD_STRING D9a-Mech1-1
17884: PPUSH
17885: CALL 4266 0 3
// end ; end ; if energyVDialog = 0 then
17889: LD_EXP 33
17893: PUSH
17894: LD_INT 0
17896: EQUAL
17897: IFFALSE 17903
// EnergyDialog ;
17899: CALL 4690 0 0
// end ; end ; end ;
17903: PPOPN 1
17905: END
// on UnitDestroyed ( unit ) do var mech ;
17906: LD_INT 0
17908: PPUSH
// begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 247
17918: PUSH
17919: LD_INT 1
17921: EQUAL
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 255
17932: PUSH
17933: LD_INT 1
17935: EQUAL
17936: AND
17937: IFFALSE 17953
// lostCounter = lostCounter + 1 ;
17939: LD_ADDR_EXP 38
17943: PUSH
17944: LD_EXP 38
17948: PUSH
17949: LD_INT 1
17951: PLUS
17952: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 257
17962: PUSH
17963: LD_INT 3
17965: EQUAL
17966: PUSH
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: AND
17981: PUSH
17982: LD_INT 24
17984: PPUSH
17985: CALL_OW 302
17989: AND
17990: PUSH
17991: LD_INT 24
17993: PPUSH
17994: CALL_OW 255
17998: PUSH
17999: LD_INT 3
18001: EQUAL
18002: AND
18003: IFFALSE 18102
// begin uc_side = 3 ;
18005: LD_ADDR_OWVAR 20
18009: PUSH
18010: LD_INT 3
18012: ST_TO_ADDR
// uc_nation = 3 ;
18013: LD_ADDR_OWVAR 21
18017: PUSH
18018: LD_INT 3
18020: ST_TO_ADDR
// hc_gallery :=  ;
18021: LD_ADDR_OWVAR 33
18025: PUSH
18026: LD_STRING 
18028: ST_TO_ADDR
// hc_name :=  ;
18029: LD_ADDR_OWVAR 26
18033: PUSH
18034: LD_STRING 
18036: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
18037: LD_INT 0
18039: PPUSH
18040: LD_EXP 16
18044: PPUSH
18045: LD_EXP 17
18049: PPUSH
18050: CALL_OW 12
18054: PPUSH
18055: CALL_OW 383
// mech := CreateHuman ;
18059: LD_ADDR_VAR 0 2
18063: PUSH
18064: CALL_OW 44
18068: ST_TO_ADDR
// PlaceUnitXYR ( mech , 124 , 97 , 3 , false ) ;
18069: LD_VAR 0 2
18073: PPUSH
18074: LD_INT 124
18076: PPUSH
18077: LD_INT 97
18079: PPUSH
18080: LD_INT 3
18082: PPUSH
18083: LD_INT 0
18085: PPUSH
18086: CALL_OW 50
// ComEnterUnit ( mech , rubfact0 ) ;
18090: LD_VAR 0 2
18094: PPUSH
18095: LD_INT 24
18097: PPUSH
18098: CALL_OW 120
// end ; end ;
18102: PPOPN 2
18104: END
// on Contact ( side1 , side2 ) do var i , tmp ;
18105: LD_INT 0
18107: PPUSH
18108: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
18109: LD_ADDR_VAR 0 4
18113: PUSH
18114: LD_INT 22
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18129: LD_VAR 0 1
18133: PUSH
18134: LD_INT 1
18136: EQUAL
18137: PUSH
18138: LD_VAR 0 2
18142: PUSH
18143: LD_INT 6
18145: EQUAL
18146: AND
18147: PUSH
18148: LD_EXP 41
18152: PUSH
18153: LD_INT 1
18155: EQUAL
18156: AND
18157: IFFALSE 18212
// begin donaldsonCoopAttack = 0 ;
18159: LD_ADDR_EXP 41
18163: PUSH
18164: LD_INT 0
18166: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18167: LD_ADDR_VAR 0 3
18171: PUSH
18172: LD_INT 22
18174: PUSH
18175: LD_INT 4
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: PPUSH
18185: CALL_OW 69
18189: PUSH
18190: FOR_IN
18191: IFFALSE 18210
// ComAgressiveMove ( i , 52 , 64 ) ;
18193: LD_VAR 0 3
18197: PPUSH
18198: LD_INT 52
18200: PPUSH
18201: LD_INT 64
18203: PPUSH
18204: CALL_OW 114
18208: GO 18190
18210: POP
18211: POP
// end ; end ;
18212: PPOPN 4
18214: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
18215: LD_INT 0
18217: PPUSH
// begin if GetWeapon ( vehicle ) = 53 then
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 264
18227: PUSH
18228: LD_INT 53
18230: EQUAL
18231: IFFALSE 18363
// begin uc_side = 3 ;
18233: LD_ADDR_OWVAR 20
18237: PUSH
18238: LD_INT 3
18240: ST_TO_ADDR
// uc_nation = 3 ;
18241: LD_ADDR_OWVAR 21
18245: PUSH
18246: LD_INT 3
18248: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18249: LD_INT 0
18251: PPUSH
18252: LD_EXP 17
18256: PPUSH
18257: CALL_OW 383
// driver := CreateHuman ;
18261: LD_ADDR_VAR 0 3
18265: PUSH
18266: CALL_OW 44
18270: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
18271: LD_VAR 0 3
18275: PPUSH
18276: LD_VAR 0 2
18280: PPUSH
18281: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
18285: LD_VAR 0 1
18289: PPUSH
18290: LD_INT 21
18292: PPUSH
18293: CALL 4906 0 2
// AddComMoveXY ( vehicle , 104 , 73 ) ;
18297: LD_VAR 0 1
18301: PPUSH
18302: LD_INT 104
18304: PPUSH
18305: LD_INT 73
18307: PPUSH
18308: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18312: LD_VAR 0 3
18316: PPUSH
18317: CALL_OW 181
// AddComEnterUnit ( driver , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
18321: LD_VAR 0 3
18325: PPUSH
18326: LD_INT 22
18328: PUSH
18329: LD_INT 3
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 30
18338: PUSH
18339: LD_INT 3
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PPUSH
18350: CALL_OW 69
18354: PUSH
18355: LD_INT 1
18357: ARRAY
18358: PPUSH
18359: CALL_OW 180
// end ; end ;
18363: PPOPN 3
18365: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18366: LD_INT 0
18368: PPUSH
18369: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18370: LD_VAR 0 1
18374: PPUSH
18375: CALL_OW 255
18379: PUSH
18380: LD_INT 3
18382: EQUAL
18383: PUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 247
18393: PUSH
18394: LD_INT 2
18396: EQUAL
18397: AND
18398: IFFALSE 18492
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 264
18409: PUSH
18410: LD_INT 42
18412: EQUAL
18413: PUSH
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 264
18423: PUSH
18424: LD_INT 43
18426: EQUAL
18427: OR
18428: PUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 264
18438: PUSH
18439: LD_INT 44
18441: EQUAL
18442: OR
18443: IFFALSE 18492
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18445: LD_INT 24
18447: PPUSH
18448: LD_VAR 0 1
18452: PPUSH
18453: CALL_OW 265
18457: PPUSH
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL_OW 262
18467: PPUSH
18468: LD_VAR 0 1
18472: PPUSH
18473: CALL_OW 263
18477: PPUSH
18478: LD_VAR 0 1
18482: PPUSH
18483: CALL_OW 264
18487: PPUSH
18488: CALL_OW 185
// end ;
18492: PPOPN 3
18494: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 255
18504: PUSH
18505: LD_INT 3
18507: EQUAL
18508: PUSH
18509: LD_VAR 0 2
18513: PPUSH
18514: CALL_OW 255
18518: PUSH
18519: LD_INT 3
18521: EQUAL
18522: AND
18523: PUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL_OW 302
18533: AND
18534: IFFALSE 18576
// begin ComRepairVehicle ( human , vehicle ) ;
18536: LD_VAR 0 2
18540: PPUSH
18541: LD_VAR 0 1
18545: PPUSH
18546: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18550: LD_VAR 0 2
18554: PPUSH
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18564: LD_VAR 0 1
18568: PPUSH
18569: LD_INT 100
18571: PPUSH
18572: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 255
18585: PUSH
18586: LD_INT 3
18588: EQUAL
18589: PUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: CALL_OW 255
18599: PUSH
18600: LD_INT 3
18602: EQUAL
18603: AND
18604: PUSH
18605: LD_INT 24
18607: PPUSH
18608: CALL_OW 302
18612: AND
18613: PUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 302
18623: NOT
18624: AND
18625: IFFALSE 18639
// ComEnterUnit ( human , rubfact0 ) ;
18627: LD_VAR 0 2
18631: PPUSH
18632: LD_INT 24
18634: PPUSH
18635: CALL_OW 120
// end ;
18639: PPOPN 2
18641: END
// on Command ( comandid ) do var i , j , tmp ;
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
18646: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18647: LD_ADDR_VAR 0 2
18651: PUSH
18652: LD_INT 22
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 21
18677: PUSH
18678: LD_INT 2
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: LIST
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PPUSH
18694: CALL_OW 69
18698: PUSH
18699: FOR_IN
18700: IFFALSE 18810
// begin if GetTaskList ( i ) > 0 then
18702: LD_VAR 0 2
18706: PPUSH
18707: CALL_OW 437
18711: PUSH
18712: LD_INT 0
18714: GREATER
18715: IFFALSE 18808
// begin for j = 1 to GetTaskList ( i ) do
18717: LD_ADDR_VAR 0 3
18721: PUSH
18722: DOUBLE
18723: LD_INT 1
18725: DEC
18726: ST_TO_ADDR
18727: LD_VAR 0 2
18731: PPUSH
18732: CALL_OW 437
18736: PUSH
18737: FOR_TO
18738: IFFALSE 18806
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18740: LD_ADDR_VAR 0 4
18744: PUSH
18745: LD_VAR 0 2
18749: PPUSH
18750: CALL_OW 437
18754: PUSH
18755: LD_VAR 0 3
18759: ARRAY
18760: PUSH
18761: LD_INT 4
18763: ARRAY
18764: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18765: LD_VAR 0 4
18769: PPUSH
18770: CALL_OW 255
18774: PUSH
18775: LD_INT 4
18777: EQUAL
18778: PUSH
18779: LD_VAR 0 4
18783: PPUSH
18784: CALL_OW 255
18788: PUSH
18789: LD_INT 0
18791: EQUAL
18792: OR
18793: IFFALSE 18804
// ComStop ( i ) ;
18795: LD_VAR 0 2
18799: PPUSH
18800: CALL_OW 141
// end ;
18804: GO 18737
18806: POP
18807: POP
// end ; end ;
18808: GO 18699
18810: POP
18811: POP
// end ; end_of_file
18812: PPOPN 4
18814: END
// every 10 10$0 do
18815: GO 18817
18817: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 1 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18818: LD_INT 5
18820: PPUSH
18821: LD_INT 3
18823: PPUSH
18824: LD_INT 1
18826: PUSH
18827: LD_INT 2
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 4
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: PUSH
18841: LD_OWVAR 67
18845: ARRAY
18846: PLUS
18847: PPUSH
18848: LD_INT 0
18850: PPUSH
18851: LD_INT 0
18853: PPUSH
18854: LD_INT 0
18856: PPUSH
18857: LD_INT 0
18859: PPUSH
18860: LD_EXP 16
18864: PPUSH
18865: LD_EXP 17
18869: PPUSH
18870: CALL_OW 12
18874: PPUSH
18875: LD_INT 4
18877: PPUSH
18878: LD_INT 14
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: LD_INT 2
18886: PPUSH
18887: CALL 7611 0 12
// end ;
18891: END
// every 20 20$0 do
18892: GO 18894
18894: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18895: LD_INT 5
18897: PPUSH
18898: LD_INT 3
18900: PPUSH
18901: LD_INT 3
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: LD_INT 4
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: PUSH
18918: LD_OWVAR 67
18922: ARRAY
18923: PLUS
18924: PPUSH
18925: LD_INT 0
18927: PPUSH
18928: LD_INT 0
18930: PPUSH
18931: LD_INT 0
18933: PPUSH
18934: LD_INT 2
18936: PPUSH
18937: LD_EXP 16
18941: PPUSH
18942: LD_EXP 17
18946: PPUSH
18947: CALL_OW 12
18951: PPUSH
18952: LD_INT 4
18954: PPUSH
18955: LD_INT 14
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: LD_INT 1
18963: PPUSH
18964: CALL 7611 0 12
// end ;
18968: END
// every 25 25$0 do
18969: GO 18971
18971: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18972: LD_INT 4
18974: PPUSH
18975: LD_INT 5
18977: PPUSH
18978: LD_INT 3
18980: PUSH
18981: LD_INT 4
18983: PUSH
18984: LD_INT 5
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: PUSH
18992: LD_OWVAR 67
18996: ARRAY
18997: PPUSH
18998: LD_EXP 16
19002: PPUSH
19003: LD_EXP 17
19007: PPUSH
19008: CALL_OW 12
19012: PPUSH
19013: LD_INT 3
19015: PPUSH
19016: LD_INT 1
19018: PPUSH
19019: LD_INT 1
19021: PPUSH
19022: LD_INT 42
19024: PUSH
19025: LD_INT 42
19027: PUSH
19028: LD_INT 43
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 42
19038: PUSH
19039: LD_INT 43
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 43
19048: PUSH
19049: LD_INT 43
19051: PUSH
19052: LD_INT 43
19054: PUSH
19055: LD_INT 44
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_OWVAR 67
19073: ARRAY
19074: PPUSH
19075: EMPTY
19076: PPUSH
19077: EMPTY
19078: PPUSH
19079: LD_INT 1
19081: PPUSH
19082: CALL 9424 0 11
// end ; end_of_file
19086: END
// every 0 0$1 trigger startTimer = 1 do
19087: LD_EXP 30
19091: PUSH
19092: LD_INT 1
19094: EQUAL
19095: IFFALSE 19225
19097: GO 19099
19099: DISABLE
// begin enable ;
19100: ENABLE
// if timerStatus = 1 then
19101: LD_EXP 29
19105: PUSH
19106: LD_INT 1
19108: EQUAL
19109: IFFALSE 19142
// begin timeToSupport = timeToSupport - 0 0$01 ;
19111: LD_ADDR_EXP 28
19115: PUSH
19116: LD_EXP 28
19120: PUSH
19121: LD_INT 35
19123: MINUS
19124: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19125: LD_ADDR_OWVAR 47
19129: PUSH
19130: LD_STRING #Am04-1
19132: PUSH
19133: LD_EXP 28
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: ST_TO_ADDR
// end ; if timerStatus = 2 then
19142: LD_EXP 29
19146: PUSH
19147: LD_INT 2
19149: EQUAL
19150: IFFALSE 19183
// begin timeToSupport = timeToSupport - 0 0$01 ;
19152: LD_ADDR_EXP 28
19156: PUSH
19157: LD_EXP 28
19161: PUSH
19162: LD_INT 35
19164: MINUS
19165: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19166: LD_ADDR_OWVAR 47
19170: PUSH
19171: LD_STRING #Am04-2
19173: PUSH
19174: LD_EXP 28
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: ST_TO_ADDR
// end ; if timerStatus = 3 then
19183: LD_EXP 29
19187: PUSH
19188: LD_INT 3
19190: EQUAL
19191: IFFALSE 19207
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19193: LD_ADDR_EXP 27
19197: PUSH
19198: LD_EXP 27
19202: PUSH
19203: LD_INT 35
19205: MINUS
19206: ST_TO_ADDR
// end ; if timerStatus = 4 then
19207: LD_EXP 29
19211: PUSH
19212: LD_INT 4
19214: EQUAL
19215: IFFALSE 19225
// begin display_strings =  ;
19217: LD_ADDR_OWVAR 47
19221: PUSH
19222: LD_STRING 
19224: ST_TO_ADDR
// end ; end ; end_of_file
19225: END
// every 0 0$1 trigger IsDead ( JMM ) do
19226: LD_EXP 1
19230: PPUSH
19231: CALL_OW 301
19235: IFFALSE 19247
19237: GO 19239
19239: DISABLE
// YouLost ( JMM ) ;
19240: LD_STRING JMM
19242: PPUSH
19243: CALL_OW 104
19247: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19248: LD_INT 4
19250: PPUSH
19251: CALL_OW 301
19255: IFFALSE 19267
19257: GO 19259
19259: DISABLE
// YouLost ( Base ) ; end_of_file
19260: LD_STRING Base
19262: PPUSH
19263: CALL_OW 104
19267: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
19268: LD_EXP 15
19272: PPUSH
19273: CALL_OW 301
19277: PUSH
19278: LD_INT 22
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 21
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PPUSH
19302: CALL_OW 69
19306: PUSH
19307: LD_INT 14
19309: PUSH
19310: LD_INT 13
19312: PUSH
19313: LD_INT 12
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: PUSH
19321: LD_OWVAR 67
19325: ARRAY
19326: LESS
19327: AND
19328: IFFALSE 19799
19330: GO 19332
19332: DISABLE
19333: LD_INT 0
19335: PPUSH
19336: PPUSH
// begin AIEnable = 0 ;
19337: LD_ADDR_EXP 37
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// escapeAvalaible = 1 ;
19345: LD_ADDR_EXP 40
19349: PUSH
19350: LD_INT 1
19352: ST_TO_ADDR
// InGameOn ;
19353: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19357: LD_INT 3
19359: PPUSH
19360: LD_INT 1
19362: PPUSH
19363: LD_INT 1
19365: PPUSH
19366: LD_INT 0
19368: PPUSH
19369: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19373: LD_INT 6
19375: PPUSH
19376: LD_INT 1
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: LD_INT 0
19384: PPUSH
19385: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19389: LD_INT 5
19391: PPUSH
19392: LD_INT 1
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: LD_INT 0
19400: PPUSH
19401: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19405: LD_INT 3
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19415: LD_INT 97
19417: PPUSH
19418: LD_INT 91
19420: PPUSH
19421: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19425: LD_INT 22
19427: PUSH
19428: LD_INT 3
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 21
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 69
19453: PPUSH
19454: CALL_OW 121
// wait ( 0 0$01 ) ;
19458: LD_INT 35
19460: PPUSH
19461: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19465: LD_INT 22
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 21
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PPUSH
19489: CALL_OW 69
19493: PPUSH
19494: LD_INT 124
19496: PPUSH
19497: LD_INT 98
19499: PPUSH
19500: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19504: LD_INT 22
19506: PUSH
19507: LD_INT 5
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 21
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PPUSH
19528: CALL_OW 69
19532: PPUSH
19533: CALL_OW 121
// wait ( 0 0$01 ) ;
19537: LD_INT 35
19539: PPUSH
19540: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19544: LD_INT 22
19546: PUSH
19547: LD_INT 5
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 21
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PPUSH
19568: CALL_OW 69
19572: PPUSH
19573: LD_INT 124
19575: PPUSH
19576: LD_INT 98
19578: PPUSH
19579: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19583: LD_INT 22
19585: PUSH
19586: LD_INT 6
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 21
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PPUSH
19607: CALL_OW 69
19611: PPUSH
19612: CALL_OW 121
// wait ( 0 0$01 ) ;
19616: LD_INT 35
19618: PPUSH
19619: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19623: LD_INT 22
19625: PUSH
19626: LD_INT 6
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 21
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 69
19651: PPUSH
19652: LD_INT 124
19654: PPUSH
19655: LD_INT 98
19657: PPUSH
19658: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19662: LD_INT 22
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: PPUSH
19691: LD_INT 124
19693: PPUSH
19694: LD_INT 98
19696: PPUSH
19697: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19701: LD_INT 124
19703: PPUSH
19704: LD_INT 98
19706: PPUSH
19707: CALL_OW 84
// p := 0 0$0 ;
19711: LD_ADDR_VAR 0 2
19715: PUSH
19716: LD_INT 0
19718: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19719: LD_INT 35
19721: PPUSH
19722: CALL_OW 67
// p := p + 0 0$1 ;
19726: LD_ADDR_VAR 0 2
19730: PUSH
19731: LD_VAR 0 2
19735: PUSH
19736: LD_INT 35
19738: PLUS
19739: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19740: LD_INT 23
19742: PUSH
19743: LD_INT 3
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 21
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 24
19762: PUSH
19763: LD_INT 250
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: PPUSH
19775: CALL_OW 69
19779: PUSH
19780: LD_INT 0
19782: EQUAL
19783: PUSH
19784: LD_VAR 0 2
19788: PUSH
19789: LD_INT 245
19791: GREATEREQUAL
19792: OR
19793: IFFALSE 19719
// FinishMission ;
19795: CALL 19972 0 0
// end ;
19799: PPOPN 2
19801: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19802: LD_EXP 40
19806: PUSH
19807: LD_INT 1
19809: EQUAL
19810: IFFALSE 19969
19812: GO 19814
19814: DISABLE
19815: LD_INT 0
19817: PPUSH
// begin enable ;
19818: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19819: LD_ADDR_VAR 0 1
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 3
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PPUSH
19834: CALL_OW 69
19838: PUSH
19839: FOR_IN
19840: IFFALSE 19867
// if IsInArea ( i , RussianEscape ) then
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_INT 5
19849: PPUSH
19850: CALL_OW 308
19854: IFFALSE 19865
// RemoveUnit ( i ) ;
19856: LD_VAR 0 1
19860: PPUSH
19861: CALL_OW 64
19865: GO 19839
19867: POP
19868: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19869: LD_ADDR_VAR 0 1
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_INT 5
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 69
19888: PUSH
19889: FOR_IN
19890: IFFALSE 19917
// if IsInArea ( i , RussianEscape ) then
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_INT 5
19899: PPUSH
19900: CALL_OW 308
19904: IFFALSE 19915
// RemoveUnit ( i ) ;
19906: LD_VAR 0 1
19910: PPUSH
19911: CALL_OW 64
19915: GO 19889
19917: POP
19918: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19919: LD_ADDR_VAR 0 1
19923: PUSH
19924: LD_INT 22
19926: PUSH
19927: LD_INT 6
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PPUSH
19934: CALL_OW 69
19938: PUSH
19939: FOR_IN
19940: IFFALSE 19967
// if IsInArea ( i , RussianEscape ) then
19942: LD_VAR 0 1
19946: PPUSH
19947: LD_INT 5
19949: PPUSH
19950: CALL_OW 308
19954: IFFALSE 19965
// RemoveUnit ( i ) ;
19956: LD_VAR 0 1
19960: PPUSH
19961: CALL_OW 64
19965: GO 19939
19967: POP
19968: POP
// end ;
19969: PPOPN 1
19971: END
// export function FinishMission ; var tmp ; begin
19972: LD_INT 0
19974: PPUSH
19975: PPUSH
// SaveBase ( GammBaseArea ) ;
19976: LD_INT 22
19978: PPUSH
19979: CALL 20532 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19983: LD_INT 69
19985: PPUSH
19986: LD_INT 1
19988: PPUSH
19989: CALL_OW 321
19993: PPUSH
19994: LD_STRING GatlingInGamma
19996: PPUSH
19997: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
20001: LD_EXP 34
20005: PUSH
20006: LD_INT 1
20008: EQUAL
20009: PUSH
20010: LD_EXP 35
20014: PUSH
20015: LD_INT 1
20017: EQUAL
20018: AND
20019: IFFALSE 20033
// begin AddMedal ( oil , 1 ) ;
20021: LD_STRING oil
20023: PPUSH
20024: LD_INT 1
20026: PPUSH
20027: CALL_OW 101
// end else
20031: GO 20126
// begin if buildOil = 1 and buildPower = 0 then
20033: LD_EXP 34
20037: PUSH
20038: LD_INT 1
20040: EQUAL
20041: PUSH
20042: LD_EXP 35
20046: PUSH
20047: LD_INT 0
20049: EQUAL
20050: AND
20051: IFFALSE 20064
// AddMedal ( oil , - 1 ) ;
20053: LD_STRING oil
20055: PPUSH
20056: LD_INT 1
20058: NEG
20059: PPUSH
20060: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
20064: LD_EXP 34
20068: PUSH
20069: LD_INT 0
20071: EQUAL
20072: PUSH
20073: LD_EXP 35
20077: PUSH
20078: LD_INT 1
20080: EQUAL
20081: AND
20082: IFFALSE 20095
// AddMedal ( oil , - 2 ) ;
20084: LD_STRING oil
20086: PPUSH
20087: LD_INT 2
20089: NEG
20090: PPUSH
20091: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
20095: LD_EXP 34
20099: PUSH
20100: LD_INT 0
20102: EQUAL
20103: PUSH
20104: LD_EXP 35
20108: PUSH
20109: LD_INT 0
20111: EQUAL
20112: AND
20113: IFFALSE 20126
// AddMedal ( oil , - 3 ) ;
20115: LD_STRING oil
20117: PPUSH
20118: LD_INT 3
20120: NEG
20121: PPUSH
20122: CALL_OW 101
// end ; if lostCounter > 3 then
20126: LD_EXP 38
20130: PUSH
20131: LD_INT 3
20133: GREATER
20134: IFFALSE 20149
// begin AddMedal ( deaths , - 1 ) ;
20136: LD_STRING deaths
20138: PPUSH
20139: LD_INT 1
20141: NEG
20142: PPUSH
20143: CALL_OW 101
// end else
20147: GO 20159
// begin AddMedal ( deaths , 1 ) ;
20149: LD_STRING deaths
20151: PPUSH
20152: LD_INT 1
20154: PPUSH
20155: CALL_OW 101
// end ; if honor = 1 then
20159: LD_EXP 39
20163: PUSH
20164: LD_INT 1
20166: EQUAL
20167: IFFALSE 20181
// begin AddMedal ( honour , 1 ) ;
20169: LD_STRING honour
20171: PPUSH
20172: LD_INT 1
20174: PPUSH
20175: CALL_OW 101
// end else
20179: GO 20192
// begin AddMedal ( honour , - 1 ) ;
20181: LD_STRING honour
20183: PPUSH
20184: LD_INT 1
20186: NEG
20187: PPUSH
20188: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20192: LD_STRING Main
20194: PPUSH
20195: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20199: LD_INT 22
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 23
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 21
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: LIST
20233: PPUSH
20234: CALL_OW 69
20238: PPUSH
20239: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20243: LD_EXP 1
20247: PPUSH
20248: LD_EXP 44
20252: PUSH
20253: LD_STRING JMM
20255: STR
20256: PPUSH
20257: CALL_OW 38
// if IsOK ( Bobby ) then
20261: LD_EXP 2
20265: PPUSH
20266: CALL_OW 302
20270: IFFALSE 20290
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20272: LD_EXP 2
20276: PPUSH
20277: LD_EXP 44
20281: PUSH
20282: LD_STRING Bobby
20284: STR
20285: PPUSH
20286: CALL_OW 38
// if IsOK ( Cyrus ) then
20290: LD_EXP 3
20294: PPUSH
20295: CALL_OW 302
20299: IFFALSE 20319
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20301: LD_EXP 3
20305: PPUSH
20306: LD_EXP 44
20310: PUSH
20311: LD_STRING Cyrus
20313: STR
20314: PPUSH
20315: CALL_OW 38
// if IsOK ( Lisa ) then
20319: LD_EXP 4
20323: PPUSH
20324: CALL_OW 302
20328: IFFALSE 20348
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20330: LD_EXP 4
20334: PPUSH
20335: LD_EXP 44
20339: PUSH
20340: LD_STRING Lisa
20342: STR
20343: PPUSH
20344: CALL_OW 38
// if IsOK ( Brown ) then
20348: LD_EXP 7
20352: PPUSH
20353: CALL_OW 302
20357: IFFALSE 20377
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20359: LD_EXP 7
20363: PPUSH
20364: LD_EXP 44
20368: PUSH
20369: LD_STRING Brown
20371: STR
20372: PPUSH
20373: CALL_OW 38
// if IsOK ( Donaldson ) then
20377: LD_EXP 13
20381: PPUSH
20382: CALL_OW 302
20386: IFFALSE 20406
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20388: LD_EXP 13
20392: PPUSH
20393: LD_EXP 44
20397: PUSH
20398: LD_STRING Donaldson
20400: STR
20401: PPUSH
20402: CALL_OW 38
// if IsOK ( Frank ) then
20406: LD_EXP 5
20410: PPUSH
20411: CALL_OW 302
20415: IFFALSE 20435
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20417: LD_EXP 5
20421: PPUSH
20422: LD_EXP 44
20426: PUSH
20427: LD_STRING Frank
20429: STR
20430: PPUSH
20431: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20435: LD_INT 50
20437: PUSH
20438: EMPTY
20439: LIST
20440: PUSH
20441: LD_INT 22
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 21
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: PPUSH
20466: CALL_OW 69
20470: PUSH
20471: LD_EXP 1
20475: PUSH
20476: LD_EXP 2
20480: PUSH
20481: LD_EXP 3
20485: PUSH
20486: LD_EXP 4
20490: PUSH
20491: LD_EXP 7
20495: PUSH
20496: LD_EXP 13
20500: PUSH
20501: LD_EXP 5
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: DIFF
20515: PPUSH
20516: LD_STRING 04_other_survivors
20518: PPUSH
20519: CALL_OW 38
// YouWin ;
20523: CALL_OW 103
// end ;
20527: LD_VAR 0 1
20531: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
// gammaBase = [ ] ;
20538: LD_ADDR_VAR 0 4
20542: PUSH
20543: EMPTY
20544: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
20545: LD_ADDR_VAR 0 5
20549: PUSH
20550: LD_VAR 0 1
20554: PPUSH
20555: LD_INT 22
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 21
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 70
20583: ST_TO_ADDR
// for i in buildings do
20584: LD_ADDR_VAR 0 3
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: FOR_IN
20595: IFFALSE 20932
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20597: LD_VAR 0 3
20601: PPUSH
20602: CALL_OW 266
20606: PUSH
20607: LD_INT 6
20609: PUSH
20610: LD_INT 7
20612: PUSH
20613: LD_INT 8
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: IN
20621: IFFALSE 20735
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20623: LD_ADDR_VAR 0 4
20627: PUSH
20628: LD_VAR 0 4
20632: PUSH
20633: LD_VAR 0 3
20637: PPUSH
20638: CALL_OW 266
20642: PUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: CALL_OW 250
20652: PUSH
20653: LD_VAR 0 3
20657: PPUSH
20658: CALL_OW 251
20662: PUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: CALL_OW 254
20672: PUSH
20673: LD_VAR 0 3
20677: PPUSH
20678: CALL_OW 267
20682: PUSH
20683: LD_VAR 0 3
20687: PPUSH
20688: CALL_OW 248
20692: PUSH
20693: LD_VAR 0 3
20697: PPUSH
20698: LD_INT 1
20700: PPUSH
20701: CALL_OW 268
20705: PUSH
20706: LD_VAR 0 3
20710: PPUSH
20711: LD_INT 2
20713: PPUSH
20714: CALL_OW 268
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: PUSH
20729: EMPTY
20730: LIST
20731: ADD
20732: ST_TO_ADDR
20733: GO 20930
// if GetBType ( i ) in [ b_bunker ] then
20735: LD_VAR 0 3
20739: PPUSH
20740: CALL_OW 266
20744: PUSH
20745: LD_INT 32
20747: PUSH
20748: EMPTY
20749: LIST
20750: IN
20751: IFFALSE 20848
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20753: LD_ADDR_VAR 0 4
20757: PUSH
20758: LD_VAR 0 4
20762: PUSH
20763: LD_VAR 0 3
20767: PPUSH
20768: CALL_OW 266
20772: PUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL_OW 250
20782: PUSH
20783: LD_VAR 0 3
20787: PPUSH
20788: CALL_OW 251
20792: PUSH
20793: LD_VAR 0 3
20797: PPUSH
20798: CALL_OW 254
20802: PUSH
20803: LD_VAR 0 3
20807: PPUSH
20808: CALL_OW 267
20812: PUSH
20813: LD_VAR 0 3
20817: PPUSH
20818: CALL_OW 248
20822: PUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: CALL_OW 269
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: ADD
20845: ST_TO_ADDR
20846: GO 20930
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20848: LD_ADDR_VAR 0 4
20852: PUSH
20853: LD_VAR 0 4
20857: PUSH
20858: LD_VAR 0 3
20862: PPUSH
20863: CALL_OW 266
20867: PUSH
20868: LD_VAR 0 3
20872: PPUSH
20873: CALL_OW 250
20877: PUSH
20878: LD_VAR 0 3
20882: PPUSH
20883: CALL_OW 251
20887: PUSH
20888: LD_VAR 0 3
20892: PPUSH
20893: CALL_OW 254
20897: PUSH
20898: LD_VAR 0 3
20902: PPUSH
20903: CALL_OW 267
20907: PUSH
20908: LD_VAR 0 3
20912: PPUSH
20913: CALL_OW 248
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: PUSH
20926: EMPTY
20927: LIST
20928: ADD
20929: ST_TO_ADDR
// end ;
20930: GO 20594
20932: POP
20933: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20934: LD_VAR 0 4
20938: PPUSH
20939: LD_STRING GammaBase
20941: PPUSH
20942: CALL_OW 39
// end ; end_of_file
20946: LD_VAR 0 2
20950: RET
// every 1 1$15 do
20951: GO 20953
20953: DISABLE
// begin if supply <= 13 and supply > 7 then
20954: LD_EXP 36
20958: PUSH
20959: LD_INT 13
20961: LESSEQUAL
20962: PUSH
20963: LD_EXP 36
20967: PUSH
20968: LD_INT 7
20970: GREATER
20971: AND
20972: IFFALSE 20995
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20974: LD_INT 3
20976: PPUSH
20977: LD_INT 5
20979: PPUSH
20980: CALL_OW 12
20984: PPUSH
20985: LD_INT 18
20987: PPUSH
20988: LD_INT 1
20990: PPUSH
20991: CALL_OW 55
// if supply <= 7 and supply > 4 then
20995: LD_EXP 36
20999: PUSH
21000: LD_INT 7
21002: LESSEQUAL
21003: PUSH
21004: LD_EXP 36
21008: PUSH
21009: LD_INT 4
21011: GREATER
21012: AND
21013: IFFALSE 21036
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
21015: LD_INT 3
21017: PPUSH
21018: LD_INT 5
21020: PPUSH
21021: CALL_OW 12
21025: PPUSH
21026: LD_INT 19
21028: PPUSH
21029: LD_INT 1
21031: PPUSH
21032: CALL_OW 55
// if supply <= 4 and supply > 0 then
21036: LD_EXP 36
21040: PUSH
21041: LD_INT 4
21043: LESSEQUAL
21044: PUSH
21045: LD_EXP 36
21049: PUSH
21050: LD_INT 0
21052: GREATER
21053: AND
21054: IFFALSE 21077
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
21056: LD_INT 3
21058: PPUSH
21059: LD_INT 5
21061: PPUSH
21062: CALL_OW 12
21066: PPUSH
21067: LD_INT 20
21069: PPUSH
21070: LD_INT 1
21072: PPUSH
21073: CALL_OW 55
// if supply > 0 then
21077: LD_EXP 36
21081: PUSH
21082: LD_INT 0
21084: GREATER
21085: IFFALSE 21102
// begin supply = supply - 1 ;
21087: LD_ADDR_EXP 36
21091: PUSH
21092: LD_EXP 36
21096: PUSH
21097: LD_INT 1
21099: MINUS
21100: ST_TO_ADDR
// enable ;
21101: ENABLE
// end ; end ;
21102: END
