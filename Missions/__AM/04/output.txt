// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4707 0 0
// PrepareRussianBase ;
 289: CALL 2936 0 0
// PrepareRussianCommander ;
 293: CALL 2887 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: CALL 4309 0 2
 515: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 516: LD_ADDR_EXP 4
 520: PUSH
 521: LD_STRING Lisa
 523: PPUSH
 524: LD_INT 1
 526: PPUSH
 527: CALL 4309 0 2
 531: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 532: LD_ADDR_EXP 7
 536: PUSH
 537: LD_STRING Brown
 539: PPUSH
 540: LD_INT 0
 542: PPUSH
 543: CALL 4309 0 2
 547: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 548: LD_ADDR_EXP 8
 552: PUSH
 553: LD_STRING Dickens
 555: PPUSH
 556: LD_INT 0
 558: PPUSH
 559: CALL 4309 0 2
 563: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_STRING Woodruff
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL 4309 0 2
 579: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 580: LD_ADDR_EXP 12
 584: PUSH
 585: LD_STRING Campell
 587: PPUSH
 588: LD_INT 0
 590: PPUSH
 591: CALL 4309 0 2
 595: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 596: LD_ADDR_EXP 10
 600: PUSH
 601: LD_STRING Knight
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL 4309 0 2
 611: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 612: LD_ADDR_EXP 11
 616: PUSH
 617: LD_STRING Claptopn
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 4309 0 2
 627: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 628: LD_ADDR_EXP 14
 632: PUSH
 633: LD_STRING Harisson
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL 4309 0 2
 643: ST_TO_ADDR
// if Lisa = false then
 644: LD_EXP 4
 648: PUSH
 649: LD_INT 0
 651: EQUAL
 652: IFFALSE 670
// Bobby = PrepareUnit ( Bobby , true ) ;
 654: LD_ADDR_EXP 2
 658: PUSH
 659: LD_STRING Bobby
 661: PPUSH
 662: LD_INT 1
 664: PPUSH
 665: CALL 4309 0 2
 669: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 670: LD_EXP 4
 674: PUSH
 675: LD_INT 0
 677: EQUAL
 678: PUSH
 679: LD_EXP 2
 683: PUSH
 684: LD_INT 0
 686: EQUAL
 687: AND
 688: IFFALSE 706
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 690: LD_ADDR_EXP 3
 694: PUSH
 695: LD_STRING Cyrus
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 4309 0 2
 705: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 706: LD_EXP 4
 710: PUSH
 711: LD_INT 0
 713: EQUAL
 714: PUSH
 715: LD_EXP 2
 719: PUSH
 720: LD_INT 0
 722: EQUAL
 723: AND
 724: PUSH
 725: LD_EXP 3
 729: PUSH
 730: LD_INT 0
 732: EQUAL
 733: AND
 734: IFFALSE 833
// begin tmp = CreateCharacterSet ( 03_others ) ;
 736: LD_ADDR_VAR 0 3
 740: PUSH
 741: LD_STRING 03_others
 743: PPUSH
 744: CALL_OW 31
 748: ST_TO_ADDR
// if tmp then
 749: LD_VAR 0 3
 753: IFFALSE 810
// begin RandomBeforeMission = tmp [ 1 ] ;
 755: LD_ADDR_EXP 6
 759: PUSH
 760: LD_VAR 0 3
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 769: LD_STRING 03_others
 771: PPUSH
 772: CALL_OW 40
// if tmp > 1 then
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 1
 783: GREATER
 784: IFFALSE 808
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 786: LD_VAR 0 3
 790: PUSH
 791: LD_VAR 0 3
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: DIFF
 800: PPUSH
 801: LD_STRING 03_others
 803: PPUSH
 804: CALL_OW 38
// end else
 808: GO 833
// begin PrepareHuman ( false , 1 , 3 ) ;
 810: LD_INT 0
 812: PPUSH
 813: LD_INT 1
 815: PPUSH
 816: LD_INT 3
 818: PPUSH
 819: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 823: LD_ADDR_EXP 6
 827: PUSH
 828: CALL_OW 44
 832: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 833: LD_ADDR_OWVAR 20
 837: PUSH
 838: LD_INT 4
 840: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 841: LD_ADDR_EXP 13
 845: PUSH
 846: LD_STRING Donaldson
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL 4309 0 2
 856: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 857: LD_STRING 03_Frank
 859: PPUSH
 860: CALL_OW 28
 864: PUSH
 865: LD_INT 1
 867: EQUAL
 868: IFFALSE 912
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 870: LD_ADDR_EXP 5
 874: PUSH
 875: LD_STRING 03_Frank
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: CALL 4309 0 2
 885: ST_TO_ADDR
// if Frank = 0 then
 886: LD_EXP 5
 890: PUSH
 891: LD_INT 0
 893: EQUAL
 894: IFFALSE 912
// Frank = PrepareUnit ( Frank , false ) ;
 896: LD_ADDR_EXP 5
 900: PUSH
 901: LD_STRING Frank
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL 4309 0 2
 911: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 912: LD_EXP 1
 916: PPUSH
 917: LD_INT 32
 919: PPUSH
 920: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 924: LD_EXP 7
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 939: LD_EXP 7
 943: PPUSH
 944: LD_INT 32
 946: PPUSH
 947: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 951: LD_EXP 8
 955: PPUSH
 956: LD_INT 2
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 966: LD_EXP 9
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 981: LD_EXP 12
 985: PPUSH
 986: LD_INT 2
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 996: LD_EXP 10
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1011: LD_EXP 11
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: LD_INT 0
1021: PPUSH
1022: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1026: LD_EXP 4
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// if Lisa = false then
1041: LD_EXP 4
1045: PUSH
1046: LD_INT 0
1048: EQUAL
1049: IFFALSE 1066
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1051: LD_EXP 2
1055: PPUSH
1056: LD_INT 2
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 49
// if Lisa = false and Bobby = false then
1066: LD_EXP 4
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: PUSH
1075: LD_EXP 2
1079: PUSH
1080: LD_INT 0
1082: EQUAL
1083: AND
1084: IFFALSE 1101
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1086: LD_EXP 3
1090: PPUSH
1091: LD_INT 2
1093: PPUSH
1094: LD_INT 0
1096: PPUSH
1097: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1101: LD_EXP 4
1105: PUSH
1106: LD_INT 0
1108: EQUAL
1109: PUSH
1110: LD_EXP 2
1114: PUSH
1115: LD_INT 0
1117: EQUAL
1118: AND
1119: PUSH
1120: LD_EXP 3
1124: PUSH
1125: LD_INT 0
1127: EQUAL
1128: AND
1129: IFFALSE 1146
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1131: LD_EXP 6
1135: PPUSH
1136: LD_INT 2
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 49
// end ;
1146: LD_VAR 0 1
1150: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1151: LD_INT 0
1153: PPUSH
1154: PPUSH
1155: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1156: LD_EXP 13
1160: PPUSH
1161: LD_INT 10
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL_OW 49
// if Frank then
1171: LD_EXP 5
1175: IFFALSE 1192
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1177: LD_EXP 5
1181: PPUSH
1182: LD_INT 10
1184: PPUSH
1185: LD_INT 0
1187: PPUSH
1188: CALL_OW 49
// uc_nation = 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// uc_side = 4 ;
1200: LD_ADDR_OWVAR 20
1204: PUSH
1205: LD_INT 4
1207: ST_TO_ADDR
// hc_class := 3 ;
1208: LD_ADDR_OWVAR 28
1212: PUSH
1213: LD_INT 3
1215: ST_TO_ADDR
// hc_sex := sex_male ;
1216: LD_ADDR_OWVAR 27
1220: PUSH
1221: LD_INT 1
1223: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1224: LD_ADDR_OWVAR 33
1228: PUSH
1229: LD_STRING SecondCharsGal
1231: ST_TO_ADDR
// hc_face_number := 53 ;
1232: LD_ADDR_OWVAR 34
1236: PUSH
1237: LD_INT 53
1239: ST_TO_ADDR
// hc_name := Freddie Warner ;
1240: LD_ADDR_OWVAR 26
1244: PUSH
1245: LD_STRING Freddie Warner
1247: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1248: LD_ADDR_OWVAR 29
1252: PUSH
1253: LD_INT 8
1255: PUSH
1256: LD_INT 11
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1263: LD_ADDR_OWVAR 30
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: LD_INT 0
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: LD_INT 0
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1286: LD_ADDR_OWVAR 31
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 3
1299: PUSH
1300: LD_INT 2
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
// un = CreateHuman ;
1309: LD_ADDR_VAR 0 3
1313: PUSH
1314: CALL_OW 44
1318: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1319: LD_VAR 0 3
1323: PPUSH
1324: LD_INT 10
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: CALL_OW 49
// hc_class := 1 ;
1334: LD_ADDR_OWVAR 28
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// hc_sex := sex_male ;
1342: LD_ADDR_OWVAR 27
1346: PUSH
1347: LD_INT 1
1349: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1350: LD_ADDR_OWVAR 33
1354: PUSH
1355: LD_STRING SecondCharsGal
1357: ST_TO_ADDR
// hc_face_number := 56 ;
1358: LD_ADDR_OWVAR 34
1362: PUSH
1363: LD_INT 56
1365: ST_TO_ADDR
// hc_name := Mel Brennan ;
1366: LD_ADDR_OWVAR 26
1370: PUSH
1371: LD_STRING Mel Brennan
1373: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1374: LD_ADDR_OWVAR 29
1378: PUSH
1379: LD_INT 12
1381: PUSH
1382: LD_INT 11
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1389: LD_ADDR_OWVAR 30
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: LD_INT 1
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1412: LD_ADDR_OWVAR 31
1416: PUSH
1417: LD_INT 3
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 1
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: ST_TO_ADDR
// un = CreateHuman ;
1435: LD_ADDR_VAR 0 3
1439: PUSH
1440: CALL_OW 44
1444: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1445: LD_VAR 0 3
1449: PPUSH
1450: LD_INT 10
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL_OW 49
// hc_class := 1 ;
1460: LD_ADDR_OWVAR 28
1464: PUSH
1465: LD_INT 1
1467: ST_TO_ADDR
// hc_sex := sex_male ;
1468: LD_ADDR_OWVAR 27
1472: PUSH
1473: LD_INT 1
1475: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1476: LD_ADDR_OWVAR 33
1480: PUSH
1481: LD_STRING AmGalRemake
1483: ST_TO_ADDR
// hc_face_number := 5 ;
1484: LD_ADDR_OWVAR 34
1488: PUSH
1489: LD_INT 5
1491: ST_TO_ADDR
// hc_name := Bob Joplin ;
1492: LD_ADDR_OWVAR 26
1496: PUSH
1497: LD_STRING Bob Joplin
1499: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1500: LD_ADDR_OWVAR 29
1504: PUSH
1505: LD_INT 10
1507: PUSH
1508: LD_INT 11
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1515: LD_ADDR_OWVAR 30
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 1
1525: PUSH
1526: LD_INT 1
1528: PUSH
1529: LD_INT 0
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1538: LD_ADDR_OWVAR 31
1542: PUSH
1543: LD_INT 3
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: ST_TO_ADDR
// un = CreateHuman ;
1561: LD_ADDR_VAR 0 3
1565: PUSH
1566: CALL_OW 44
1570: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1571: LD_VAR 0 3
1575: PPUSH
1576: LD_INT 10
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 49
// hc_class := 3 ;
1586: LD_ADDR_OWVAR 28
1590: PUSH
1591: LD_INT 3
1593: ST_TO_ADDR
// hc_sex := sex_female ;
1594: LD_ADDR_OWVAR 27
1598: PUSH
1599: LD_INT 2
1601: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1602: LD_ADDR_OWVAR 33
1606: PUSH
1607: LD_STRING AmGalRemake
1609: ST_TO_ADDR
// hc_face_number := 8 ;
1610: LD_ADDR_OWVAR 34
1614: PUSH
1615: LD_INT 8
1617: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1618: LD_ADDR_OWVAR 26
1622: PUSH
1623: LD_STRING Elizabeth Whitney
1625: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1626: LD_ADDR_OWVAR 29
1630: PUSH
1631: LD_INT 9
1633: PUSH
1634: LD_INT 11
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1641: LD_ADDR_OWVAR 30
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: LD_INT 2
1654: PUSH
1655: LD_INT 0
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1664: LD_ADDR_OWVAR 31
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 2
1674: PUSH
1675: LD_INT 4
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: ST_TO_ADDR
// un = CreateHuman ;
1687: LD_ADDR_VAR 0 3
1691: PUSH
1692: CALL_OW 44
1696: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1697: LD_VAR 0 3
1701: PPUSH
1702: LD_INT 10
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: CALL_OW 49
// InitHc ;
1712: CALL_OW 19
// end ;
1716: LD_VAR 0 1
1720: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1721: LD_INT 0
1723: PPUSH
1724: PPUSH
1725: PPUSH
1726: PPUSH
// uc_nation = 1 ;
1727: LD_ADDR_OWVAR 21
1731: PUSH
1732: LD_INT 1
1734: ST_TO_ADDR
// uc_side = 1 ;
1735: LD_ADDR_OWVAR 20
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1743: LD_ADDR_OWVAR 37
1747: PUSH
1748: LD_INT 2
1750: ST_TO_ADDR
// vc_engine := engine_combustion ;
1751: LD_ADDR_OWVAR 39
1755: PUSH
1756: LD_INT 1
1758: ST_TO_ADDR
// vc_control := control_manual ;
1759: LD_ADDR_OWVAR 38
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 65
1774: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1775: LD_ADDR_OWVAR 40
1779: PUSH
1780: LD_INT 5
1782: PUSH
1783: LD_INT 3
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: LD_OWVAR 67
1798: ARRAY
1799: ST_TO_ADDR
// veh := CreateVehicle ;
1800: LD_ADDR_VAR 0 5
1804: PUSH
1805: CALL_OW 45
1809: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1810: LD_VAR 0 5
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1822: LD_INT 17
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: CALL_OW 428
1832: PUSH
1833: LD_INT 0
1835: EQUAL
1836: IFFALSE 1858
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1838: LD_VAR 0 5
1842: PPUSH
1843: LD_INT 17
1845: PPUSH
1846: LD_INT 4
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 48
1856: GO 1876
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1858: LD_VAR 0 5
1862: PPUSH
1863: LD_INT 23
1865: PPUSH
1866: LD_INT 10
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL_OW 48
// hc_class := 1 ;
1876: LD_ADDR_OWVAR 28
1880: PUSH
1881: LD_INT 1
1883: ST_TO_ADDR
// hc_sex := sex_male ;
1884: LD_ADDR_OWVAR 27
1888: PUSH
1889: LD_INT 1
1891: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1892: LD_ADDR_OWVAR 33
1896: PUSH
1897: LD_STRING SecondCharsGal
1899: ST_TO_ADDR
// hc_face_number := 59 ;
1900: LD_ADDR_OWVAR 34
1904: PUSH
1905: LD_INT 59
1907: ST_TO_ADDR
// hc_name := Max Gray ;
1908: LD_ADDR_OWVAR 26
1912: PUSH
1913: LD_STRING Max Gray
1915: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1916: LD_ADDR_OWVAR 29
1920: PUSH
1921: LD_INT 9
1923: PUSH
1924: LD_INT 11
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1931: LD_ADDR_OWVAR 30
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1954: LD_ADDR_OWVAR 31
1958: PUSH
1959: LD_INT 4
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 1
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// un = CreateHuman ;
1977: LD_ADDR_VAR 0 4
1981: PUSH
1982: CALL_OW 44
1986: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1987: LD_VAR 0 4
1991: PPUSH
1992: LD_INT 11
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 49
// hc_class := 2 ;
2002: LD_ADDR_OWVAR 28
2006: PUSH
2007: LD_INT 2
2009: ST_TO_ADDR
// hc_sex := sex_male ;
2010: LD_ADDR_OWVAR 27
2014: PUSH
2015: LD_INT 1
2017: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2018: LD_ADDR_OWVAR 33
2022: PUSH
2023: LD_STRING SecondCharsGal
2025: ST_TO_ADDR
// hc_face_number := 50 ;
2026: LD_ADDR_OWVAR 34
2030: PUSH
2031: LD_INT 50
2033: ST_TO_ADDR
// hc_name := Frank Hughes ;
2034: LD_ADDR_OWVAR 26
2038: PUSH
2039: LD_STRING Frank Hughes
2041: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2042: LD_ADDR_OWVAR 29
2046: PUSH
2047: LD_INT 10
2049: PUSH
2050: LD_INT 10
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2057: LD_ADDR_OWVAR 30
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: LD_INT 2
2067: PUSH
2068: LD_INT 0
2070: PUSH
2071: LD_INT 0
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2080: LD_ADDR_OWVAR 31
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: LD_INT 3
2090: PUSH
2091: LD_INT 0
2093: PUSH
2094: LD_INT 1
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: ST_TO_ADDR
// un = CreateHuman ;
2103: LD_ADDR_VAR 0 4
2107: PUSH
2108: CALL_OW 44
2112: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2113: LD_VAR 0 4
2117: PPUSH
2118: LD_INT 11
2120: PPUSH
2121: LD_INT 0
2123: PPUSH
2124: CALL_OW 49
// hc_class := 1 ;
2128: LD_ADDR_OWVAR 28
2132: PUSH
2133: LD_INT 1
2135: ST_TO_ADDR
// hc_sex := sex_male ;
2136: LD_ADDR_OWVAR 27
2140: PUSH
2141: LD_INT 1
2143: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2144: LD_ADDR_OWVAR 33
2148: PUSH
2149: LD_STRING SecondCharsGal
2151: ST_TO_ADDR
// hc_face_number := 54 ;
2152: LD_ADDR_OWVAR 34
2156: PUSH
2157: LD_INT 54
2159: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2160: LD_ADDR_OWVAR 26
2164: PUSH
2165: LD_STRING Luigi Ghbellin
2167: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2168: LD_ADDR_OWVAR 29
2172: PUSH
2173: LD_INT 11
2175: PUSH
2176: LD_INT 11
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2183: LD_ADDR_OWVAR 30
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: LD_INT 0
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 0
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2206: LD_ADDR_OWVAR 31
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: LD_INT 1
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// un = CreateHuman ;
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: CALL_OW 44
2238: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2239: LD_VAR 0 4
2243: PPUSH
2244: LD_INT 11
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
// hc_class := 3 ;
2254: LD_ADDR_OWVAR 28
2258: PUSH
2259: LD_INT 3
2261: ST_TO_ADDR
// hc_sex := sex_male ;
2262: LD_ADDR_OWVAR 27
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2270: LD_ADDR_OWVAR 33
2274: PUSH
2275: LD_STRING AmGalRemake
2277: ST_TO_ADDR
// hc_face_number := 6 ;
2278: LD_ADDR_OWVAR 34
2282: PUSH
2283: LD_INT 6
2285: ST_TO_ADDR
// hc_name := Leon Carter ;
2286: LD_ADDR_OWVAR 26
2290: PUSH
2291: LD_STRING Leon Carter
2293: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2294: LD_ADDR_OWVAR 29
2298: PUSH
2299: LD_INT 10
2301: PUSH
2302: LD_INT 9
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2309: LD_ADDR_OWVAR 30
2313: PUSH
2314: LD_INT 0
2316: PUSH
2317: LD_INT 1
2319: PUSH
2320: LD_INT 2
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2332: LD_ADDR_OWVAR 31
2336: PUSH
2337: LD_INT 0
2339: PUSH
2340: LD_INT 2
2342: PUSH
2343: LD_INT 3
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: ST_TO_ADDR
// un = CreateHuman ;
2355: LD_ADDR_VAR 0 4
2359: PUSH
2360: CALL_OW 44
2364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_VAR 0 5
2374: PPUSH
2375: CALL_OW 52
// if count = 4 then
2379: LD_VAR 0 1
2383: PUSH
2384: LD_INT 4
2386: EQUAL
2387: IFFALSE 2515
// begin hc_class := 1 ;
2389: LD_ADDR_OWVAR 28
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// hc_sex := sex_male ;
2397: LD_ADDR_OWVAR 27
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2405: LD_ADDR_OWVAR 33
2409: PUSH
2410: LD_STRING SecondCharsGal
2412: ST_TO_ADDR
// hc_face_number := 34 ;
2413: LD_ADDR_OWVAR 34
2417: PUSH
2418: LD_INT 34
2420: ST_TO_ADDR
// hc_name := Ian Hill ;
2421: LD_ADDR_OWVAR 26
2425: PUSH
2426: LD_STRING Ian Hill
2428: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2429: LD_ADDR_OWVAR 29
2433: PUSH
2434: LD_INT 10
2436: PUSH
2437: LD_INT 12
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2444: LD_ADDR_OWVAR 30
2448: PUSH
2449: LD_INT 1
2451: PUSH
2452: LD_INT 0
2454: PUSH
2455: LD_INT 0
2457: PUSH
2458: LD_INT 0
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2467: LD_ADDR_OWVAR 31
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: ST_TO_ADDR
// un = CreateHuman ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: CALL_OW 44
2499: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 11
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL_OW 49
// end ; if count = 5 then
2515: LD_VAR 0 1
2519: PUSH
2520: LD_INT 5
2522: EQUAL
2523: IFFALSE 2777
// begin hc_class := 1 ;
2525: LD_ADDR_OWVAR 28
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// hc_sex := sex_male ;
2533: LD_ADDR_OWVAR 27
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2541: LD_ADDR_OWVAR 33
2545: PUSH
2546: LD_STRING SecondCharsGal
2548: ST_TO_ADDR
// hc_face_number := 34 ;
2549: LD_ADDR_OWVAR 34
2553: PUSH
2554: LD_INT 34
2556: ST_TO_ADDR
// hc_name := Ian Hill ;
2557: LD_ADDR_OWVAR 26
2561: PUSH
2562: LD_STRING Ian Hill
2564: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2565: LD_ADDR_OWVAR 29
2569: PUSH
2570: LD_INT 10
2572: PUSH
2573: LD_INT 12
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2580: LD_ADDR_OWVAR 30
2584: PUSH
2585: LD_INT 1
2587: PUSH
2588: LD_INT 0
2590: PUSH
2591: LD_INT 0
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2603: LD_ADDR_OWVAR 31
2607: PUSH
2608: LD_INT 3
2610: PUSH
2611: LD_INT 1
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: ST_TO_ADDR
// un = CreateHuman ;
2626: LD_ADDR_VAR 0 4
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2636: LD_VAR 0 4
2640: PPUSH
2641: LD_INT 11
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: CALL_OW 49
// hc_class := 1 ;
2651: LD_ADDR_OWVAR 28
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// hc_sex := sex_female ;
2659: LD_ADDR_OWVAR 27
2663: PUSH
2664: LD_INT 2
2666: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2667: LD_ADDR_OWVAR 33
2671: PUSH
2672: LD_STRING SecondCharsGal
2674: ST_TO_ADDR
// hc_face_number := 41 ;
2675: LD_ADDR_OWVAR 34
2679: PUSH
2680: LD_INT 41
2682: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2683: LD_ADDR_OWVAR 26
2687: PUSH
2688: LD_STRING Kate Wadsworth
2690: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2691: LD_ADDR_OWVAR 29
2695: PUSH
2696: LD_INT 9
2698: PUSH
2699: LD_INT 9
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2706: LD_ADDR_OWVAR 30
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: LD_INT 2
2716: PUSH
2717: LD_INT 0
2719: PUSH
2720: LD_INT 0
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2729: LD_ADDR_OWVAR 31
2733: PUSH
2734: LD_INT 2
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 1
2742: PUSH
2743: LD_INT 0
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: ST_TO_ADDR
// un = CreateHuman ;
2752: LD_ADDR_VAR 0 4
2756: PUSH
2757: CALL_OW 44
2761: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2762: LD_VAR 0 4
2766: PPUSH
2767: LD_INT 11
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2777: LD_INT 11
2779: PPUSH
2780: LD_INT 22
2782: PUSH
2783: LD_INT 1
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 26
2802: PUSH
2803: LD_INT 1
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: PPUSH
2815: CALL_OW 70
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2828: LD_INT 11
2830: PPUSH
2831: LD_INT 22
2833: PUSH
2834: LD_INT 1
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 21
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 26
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: LIST
2865: PPUSH
2866: CALL_OW 70
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PPUSH
2875: LD_STRING D6-Sol3-1
2877: PPUSH
2878: CALL_OW 88
// end ; end_of_file
2882: LD_VAR 0 2
2886: RET
// export function PrepareRussianCommander ; begin
2887: LD_INT 0
2889: PPUSH
// uc_side = 3 ;
2890: LD_ADDR_OWVAR 20
2894: PUSH
2895: LD_INT 3
2897: ST_TO_ADDR
// uc_nation = 3 ;
2898: LD_ADDR_OWVAR 21
2902: PUSH
2903: LD_INT 3
2905: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2906: LD_ADDR_EXP 15
2910: PUSH
2911: LD_STRING Stolypin
2913: PPUSH
2914: CALL_OW 25
2918: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2919: LD_EXP 15
2923: PPUSH
2924: LD_INT 21
2926: PPUSH
2927: CALL_OW 52
// end ;
2931: LD_VAR 0 1
2935: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
// if Difficulty > 1 then
2942: LD_OWVAR 67
2946: PUSH
2947: LD_INT 1
2949: GREATER
2950: IFFALSE 3060
// begin uc_side := 3 ;
2952: LD_ADDR_OWVAR 20
2956: PUSH
2957: LD_INT 3
2959: ST_TO_ADDR
// uc_nation := 3 ;
2960: LD_ADDR_OWVAR 21
2964: PUSH
2965: LD_INT 3
2967: ST_TO_ADDR
// InitHc ;
2968: CALL_OW 19
// InitBc ;
2972: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
2976: LD_INT 0
2978: PPUSH
2979: LD_INT 1
2981: PPUSH
2982: LD_INT 4
2984: PPUSH
2985: CALL_OW 380
// bc_type := b_breastwork ;
2989: LD_ADDR_OWVAR 42
2993: PUSH
2994: LD_INT 31
2996: ST_TO_ADDR
// bc_level := 4 ;
2997: LD_ADDR_OWVAR 43
3001: PUSH
3002: LD_INT 4
3004: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 100
3012: PPUSH
3013: LD_INT 58
3015: PPUSH
3016: LD_INT 2
3018: PPUSH
3019: CALL_OW 47
3023: ST_TO_ADDR
// un := CreateHuman ;
3024: LD_ADDR_VAR 0 4
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 5
3041: PPUSH
3042: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_VAR 0 3
3055: PPUSH
3056: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3060: LD_INT 3
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: LD_INT 22
3068: PPUSH
3069: LD_EXP 16
3073: PPUSH
3074: LD_EXP 17
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 3
3089: PUSH
3090: LD_INT 4
3092: PUSH
3093: LD_INT 5
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_OWVAR 67
3105: ARRAY
3106: PPUSH
3107: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3111: LD_INT 3
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 21
3119: PPUSH
3120: LD_EXP 16
3124: PPUSH
3125: LD_EXP 17
3129: PPUSH
3130: CALL_OW 12
3134: PPUSH
3135: LD_INT 2
3137: PPUSH
3138: LD_INT 3
3140: PPUSH
3141: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3145: LD_INT 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: LD_EXP 16
3158: PPUSH
3159: LD_EXP 17
3163: PPUSH
3164: CALL_OW 12
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 24
3187: PPUSH
3188: LD_EXP 16
3192: PPUSH
3193: LD_EXP 17
3197: PPUSH
3198: CALL_OW 12
3202: PPUSH
3203: LD_INT 3
3205: PPUSH
3206: LD_INT 5
3208: PPUSH
3209: CALL 4372 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: LD_INT 22
3220: PUSH
3221: LD_INT 3
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 30
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PUSH
3247: FOR_IN
3248: IFFALSE 3288
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3250: LD_INT 3
3252: PPUSH
3253: LD_INT 3
3255: PPUSH
3256: LD_VAR 0 2
3260: PPUSH
3261: LD_EXP 16
3265: PPUSH
3266: LD_EXP 17
3270: PPUSH
3271: CALL_OW 12
3275: PPUSH
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 1
3281: PPUSH
3282: CALL 4372 0 6
3286: GO 3247
3288: POP
3289: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3290: LD_ADDR_VAR 0 2
3294: PUSH
3295: LD_INT 22
3297: PUSH
3298: LD_INT 3
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: LD_INT 30
3307: PUSH
3308: LD_INT 31
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PPUSH
3319: CALL_OW 69
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3353
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3327: LD_EXP 16
3331: PPUSH
3332: LD_EXP 17
3336: PPUSH
3337: CALL_OW 12
3341: PPUSH
3342: LD_VAR 0 2
3346: PPUSH
3347: CALL 4482 0 2
3351: GO 3324
3353: POP
3354: POP
// end ;
3355: LD_VAR 0 1
3359: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3360: LD_INT 0
3362: PPUSH
3363: PPUSH
3364: PPUSH
3365: PPUSH
// uc_side = 6 ;
3366: LD_ADDR_OWVAR 20
3370: PUSH
3371: LD_INT 6
3373: ST_TO_ADDR
// uc_nation = 3 ;
3374: LD_ADDR_OWVAR 21
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3382: LD_ADDR_VAR 0 2
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 1
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: LD_INT 1
3400: PPUSH
3401: LD_INT 2
3403: PPUSH
3404: CALL_OW 12
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_OWVAR 67
3418: ARRAY
3419: PUSH
3420: FOR_TO
3421: IFFALSE 3581
// begin vc_engine = 1 ;
3423: LD_ADDR_OWVAR 39
3427: PUSH
3428: LD_INT 1
3430: ST_TO_ADDR
// vc_control = 1 ;
3431: LD_ADDR_OWVAR 38
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3439: LD_ADDR_OWVAR 40
3443: PUSH
3444: LD_INT 42
3446: PUSH
3447: LD_INT 42
3449: PUSH
3450: LD_INT 43
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3464: LD_ADDR_OWVAR 37
3468: PUSH
3469: LD_INT 21
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 22
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_OWVAR 67
3487: ARRAY
3488: ST_TO_ADDR
// veh = CreateVehicle ;
3489: LD_ADDR_VAR 0 3
3493: PUSH
3494: CALL_OW 45
3498: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3499: LD_VAR 0 3
3503: PPUSH
3504: LD_INT 3
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// hc_gallery =  ;
3514: LD_ADDR_OWVAR 33
3518: PUSH
3519: LD_STRING 
3521: ST_TO_ADDR
// hc_name =  ;
3522: LD_ADDR_OWVAR 26
3526: PUSH
3527: LD_STRING 
3529: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3530: LD_INT 0
3532: PPUSH
3533: LD_INT 3
3535: PPUSH
3536: LD_EXP 16
3540: PPUSH
3541: LD_EXP 17
3545: PPUSH
3546: CALL_OW 12
3550: PPUSH
3551: CALL_OW 380
// un = CreateHuman ;
3555: LD_ADDR_VAR 0 4
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3565: LD_VAR 0 4
3569: PPUSH
3570: LD_VAR 0 3
3574: PPUSH
3575: CALL_OW 52
// end ;
3579: GO 3420
3581: POP
3582: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: LD_EXP 16
3593: PPUSH
3594: LD_EXP 17
3598: PPUSH
3599: CALL_OW 12
3603: PUSH
3604: LD_INT 2
3606: PLUS
3607: PPUSH
3608: CALL_OW 380
// un = CreateHuman ;
3612: LD_ADDR_VAR 0 4
3616: PUSH
3617: CALL_OW 44
3621: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3622: LD_VAR 0 4
3626: PPUSH
3627: LD_INT 3
3629: PPUSH
3630: LD_INT 0
3632: PPUSH
3633: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3637: LD_INT 0
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: LD_EXP 16
3647: PPUSH
3648: LD_EXP 17
3652: PPUSH
3653: CALL_OW 12
3657: PUSH
3658: LD_INT 2
3660: PLUS
3661: PPUSH
3662: CALL_OW 380
// un = CreateHuman ;
3666: LD_ADDR_VAR 0 4
3670: PUSH
3671: CALL_OW 44
3675: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3676: LD_VAR 0 4
3680: PPUSH
3681: LD_INT 3
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3691: LD_ADDR_VAR 0 2
3695: PUSH
3696: DOUBLE
3697: LD_INT 1
3699: DEC
3700: ST_TO_ADDR
3701: LD_INT 2
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_OWVAR 67
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: PPUSH
3724: LD_INT 3
3726: PPUSH
3727: CALL_OW 12
3731: PLUS
3732: PUSH
3733: FOR_TO
3734: IFFALSE 3804
// begin hc_gallery =  ;
3736: LD_ADDR_OWVAR 33
3740: PUSH
3741: LD_STRING 
3743: ST_TO_ADDR
// hc_name =  ;
3744: LD_ADDR_OWVAR 26
3748: PUSH
3749: LD_STRING 
3751: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3752: LD_INT 0
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_EXP 16
3762: PPUSH
3763: LD_EXP 17
3767: PPUSH
3768: CALL_OW 12
3772: PPUSH
3773: CALL_OW 380
// un = CreateHuman ;
3777: LD_ADDR_VAR 0 4
3781: PUSH
3782: CALL_OW 44
3786: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3787: LD_VAR 0 4
3791: PPUSH
3792: LD_INT 3
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: CALL_OW 49
// end ;
3802: GO 3733
3804: POP
3805: POP
// vc_engine = 1 ;
3806: LD_ADDR_OWVAR 39
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// vc_control = 1 ;
3814: LD_ADDR_OWVAR 38
3818: PUSH
3819: LD_INT 1
3821: ST_TO_ADDR
// vc_weapon = 51 ;
3822: LD_ADDR_OWVAR 40
3826: PUSH
3827: LD_INT 51
3829: ST_TO_ADDR
// vc_chassis = 22 ;
3830: LD_ADDR_OWVAR 37
3834: PUSH
3835: LD_INT 22
3837: ST_TO_ADDR
// veh = CreateVehicle ;
3838: LD_ADDR_VAR 0 3
3842: PUSH
3843: CALL_OW 45
3847: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3848: LD_VAR 0 3
3852: PPUSH
3853: LD_INT 3
3855: PPUSH
3856: LD_INT 0
3858: PPUSH
3859: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3863: LD_VAR 0 3
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: LD_INT 100
3873: PPUSH
3874: CALL_OW 290
// hc_gallery =  ;
3878: LD_ADDR_OWVAR 33
3882: PUSH
3883: LD_STRING 
3885: ST_TO_ADDR
// hc_name =  ;
3886: LD_ADDR_OWVAR 26
3890: PUSH
3891: LD_STRING 
3893: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3894: LD_INT 0
3896: PPUSH
3897: LD_INT 3
3899: PPUSH
3900: LD_EXP 16
3904: PPUSH
3905: LD_EXP 17
3909: PPUSH
3910: CALL_OW 12
3914: PPUSH
3915: CALL_OW 380
// un = CreateHuman ;
3919: LD_ADDR_VAR 0 4
3923: PUSH
3924: CALL_OW 44
3928: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_VAR 0 3
3938: PPUSH
3939: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3943: LD_ADDR_VAR 0 2
3947: PUSH
3948: LD_INT 22
3950: PUSH
3951: LD_INT 6
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 1
3960: PUSH
3961: LD_INT 3
3963: PUSH
3964: LD_INT 25
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 25
3983: PUSH
3984: LD_INT 4
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PPUSH
4004: CALL_OW 69
4008: PUSH
4009: FOR_IN
4010: IFFALSE 4029
// ComAgressiveMove ( i , 45 , 46 ) ;
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_INT 45
4019: PPUSH
4020: LD_INT 46
4022: PPUSH
4023: CALL_OW 114
4027: GO 4009
4029: POP
4030: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_INT 22
4038: PUSH
4039: LD_INT 6
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 25
4048: PUSH
4049: LD_INT 2
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4097
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4068: LD_ADDR_EXP 21
4072: PUSH
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_INT 0
4080: PPUSH
4081: LD_INT 48
4083: PPUSH
4084: LD_INT 55
4086: PPUSH
4087: LD_INT 5
4089: PPUSH
4090: CALL_OW 145
4094: ST_TO_ADDR
4095: GO 4065
4097: POP
4098: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4099: LD_ADDR_VAR 0 2
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 25
4116: PUSH
4117: LD_INT 4
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 69
4132: PUSH
4133: FOR_IN
4134: IFFALSE 4153
// ComMoveXY ( i , 39 , 55 ) ;
4136: LD_VAR 0 2
4140: PPUSH
4141: LD_INT 39
4143: PPUSH
4144: LD_INT 55
4146: PPUSH
4147: CALL_OW 111
4151: GO 4133
4153: POP
4154: POP
// end ;
4155: LD_VAR 0 1
4159: RET
// export function PrepareFirstAttack ; var i , un ; begin
4160: LD_INT 0
4162: PPUSH
4163: PPUSH
4164: PPUSH
// uc_side = 5 ;
4165: LD_ADDR_OWVAR 20
4169: PUSH
4170: LD_INT 5
4172: ST_TO_ADDR
// uc_nation = 3 ;
4173: LD_ADDR_OWVAR 21
4177: PUSH
4178: LD_INT 3
4180: ST_TO_ADDR
// for i := 1 to 4 do
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: DOUBLE
4187: LD_INT 1
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 4
4193: PUSH
4194: FOR_TO
4195: IFFALSE 4294
// begin hc_gallery =  ;
4197: LD_ADDR_OWVAR 33
4201: PUSH
4202: LD_STRING 
4204: ST_TO_ADDR
// hc_name =  ;
4205: LD_ADDR_OWVAR 26
4209: PUSH
4210: LD_STRING 
4212: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: LD_EXP 16
4223: PPUSH
4224: LD_EXP 17
4228: PPUSH
4229: CALL_OW 12
4233: PPUSH
4234: CALL_OW 380
// un = CreateHuman ;
4238: LD_ADDR_VAR 0 3
4242: PUSH
4243: CALL_OW 44
4247: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 4
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4263: LD_VAR 0 3
4267: PPUSH
4268: LD_EXP 1
4272: PPUSH
4273: CALL_OW 250
4277: PPUSH
4278: LD_EXP 1
4282: PPUSH
4283: CALL_OW 251
4287: PPUSH
4288: CALL_OW 114
// end ;
4292: GO 4194
4294: POP
4295: POP
// firstRussianAttack = 1 ;
4296: LD_ADDR_EXP 23
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// end ; end_of_file
4304: LD_VAR 0 1
4308: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4309: LD_INT 0
4311: PPUSH
4312: PPUSH
// if exist_mode then
4313: LD_VAR 0 2
4317: IFFALSE 4342
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4319: LD_ADDR_VAR 0 4
4323: PUSH
4324: LD_EXP 49
4328: PUSH
4329: LD_VAR 0 1
4333: STR
4334: PPUSH
4335: CALL_OW 34
4339: ST_TO_ADDR
// end else
4340: GO 4357
// begin unit := NewCharacter ( ident ) ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: CALL_OW 25
4356: ST_TO_ADDR
// end ; result := unit ;
4357: LD_ADDR_VAR 0 3
4361: PUSH
4362: LD_VAR 0 4
4366: ST_TO_ADDR
// end ;
4367: LD_VAR 0 3
4371: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
4377: PPUSH
// for i = 1 to count do
4378: LD_ADDR_VAR 0 8
4382: PUSH
4383: DOUBLE
4384: LD_INT 1
4386: DEC
4387: ST_TO_ADDR
4388: LD_VAR 0 6
4392: PUSH
4393: FOR_TO
4394: IFFALSE 4475
// begin uc_side = side ;
4396: LD_ADDR_OWVAR 20
4400: PUSH
4401: LD_VAR 0 1
4405: ST_TO_ADDR
// uc_nation = nation ;
4406: LD_ADDR_OWVAR 21
4410: PUSH
4411: LD_VAR 0 2
4415: ST_TO_ADDR
// hc_gallery =  ;
4416: LD_ADDR_OWVAR 33
4420: PUSH
4421: LD_STRING 
4423: ST_TO_ADDR
// hc_name =  ;
4424: LD_ADDR_OWVAR 26
4428: PUSH
4429: LD_STRING 
4431: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4432: LD_INT 0
4434: PPUSH
4435: LD_VAR 0 5
4439: PPUSH
4440: LD_VAR 0 4
4444: PPUSH
4445: CALL_OW 380
// un = CreateHuman ;
4449: LD_ADDR_VAR 0 10
4453: PUSH
4454: CALL_OW 44
4458: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4459: LD_VAR 0 10
4463: PPUSH
4464: LD_VAR 0 3
4468: PPUSH
4469: CALL_OW 52
// end ;
4473: GO 4393
4475: POP
4476: POP
// end ;
4477: LD_VAR 0 7
4481: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
4486: PPUSH
// uc_side := GetSide ( b ) ;
4487: LD_ADDR_OWVAR 20
4491: PUSH
4492: LD_VAR 0 2
4496: PPUSH
4497: CALL_OW 255
4501: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4502: LD_ADDR_OWVAR 21
4506: PUSH
4507: LD_VAR 0 2
4511: PPUSH
4512: CALL_OW 248
4516: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4517: LD_INT 0
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: LD_VAR 0 1
4527: PPUSH
4528: CALL_OW 380
// un = CreateHuman ;
4532: LD_ADDR_VAR 0 4
4536: PUSH
4537: CALL_OW 44
4541: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4542: LD_ADDR_VAR 0 5
4546: PUSH
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 254
4556: PUSH
4557: LD_INT 3
4559: MINUS
4560: ST_TO_ADDR
// if dir < 0 then
4561: LD_VAR 0 5
4565: PUSH
4566: LD_INT 0
4568: LESS
4569: IFFALSE 4585
// dir := 6 + dir ;
4571: LD_ADDR_VAR 0 5
4575: PUSH
4576: LD_INT 6
4578: PUSH
4579: LD_VAR 0 5
4583: PLUS
4584: ST_TO_ADDR
// SetDir ( un , dir ) ;
4585: LD_VAR 0 4
4589: PPUSH
4590: LD_VAR 0 5
4594: PPUSH
4595: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4599: LD_VAR 0 4
4603: PPUSH
4604: LD_VAR 0 2
4608: PPUSH
4609: CALL_OW 52
// end ;
4613: LD_VAR 0 3
4617: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4618: LD_INT 0
4620: PPUSH
4621: PPUSH
4622: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4623: LD_ADDR_VAR 0 6
4627: PUSH
4628: LD_VAR 0 1
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: CALL_OW 12
4645: ARRAY
4646: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4647: LD_VAR 0 6
4651: PPUSH
4652: CALL_OW 258
4656: PUSH
4657: LD_INT 1
4659: EQUAL
4660: IFFALSE 4678
// Say ( speaker , dialogMID ) else
4662: LD_VAR 0 6
4666: PPUSH
4667: LD_VAR 0 2
4671: PPUSH
4672: CALL_OW 88
4676: GO 4692
// Say ( speaker , dialogFID ) ;
4678: LD_VAR 0 6
4682: PPUSH
4683: LD_VAR 0 3
4687: PPUSH
4688: CALL_OW 88
// result := speaker ;
4692: LD_ADDR_VAR 0 4
4696: PUSH
4697: LD_VAR 0 6
4701: ST_TO_ADDR
// end ;
4702: LD_VAR 0 4
4706: RET
// export function PrepareDifficulty ; var tmp ; begin
4707: LD_INT 0
4709: PPUSH
4710: PPUSH
// if Difficulty = 1 then
4711: LD_OWVAR 67
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: IFFALSE 4737
// begin RuSoldMinLevel = 1 ;
4721: LD_ADDR_EXP 16
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4729: LD_ADDR_EXP 17
4733: PUSH
4734: LD_INT 2
4736: ST_TO_ADDR
// end ; if Difficulty = 2 then
4737: LD_OWVAR 67
4741: PUSH
4742: LD_INT 2
4744: EQUAL
4745: IFFALSE 4846
// begin RuSoldMinLevel = 2 ;
4747: LD_ADDR_EXP 16
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4755: LD_ADDR_EXP 17
4759: PUSH
4760: LD_INT 4
4762: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4763: LD_INT 23
4765: PPUSH
4766: CALL_OW 64
// uc_nation = 3 ;
4770: LD_ADDR_OWVAR 21
4774: PUSH
4775: LD_INT 3
4777: ST_TO_ADDR
// uc_side = 3 ;
4778: LD_ADDR_OWVAR 20
4782: PUSH
4783: LD_INT 3
4785: ST_TO_ADDR
// bc_level = 5 ;
4786: LD_ADDR_OWVAR 43
4790: PUSH
4791: LD_INT 5
4793: ST_TO_ADDR
// bc_type = 32 ;
4794: LD_ADDR_OWVAR 42
4798: PUSH
4799: LD_INT 32
4801: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4802: LD_ADDR_VAR 0 2
4806: PUSH
4807: LD_INT 76
4809: PPUSH
4810: LD_INT 91
4812: PPUSH
4813: LD_INT 2
4815: PPUSH
4816: CALL_OW 47
4820: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4821: LD_VAR 0 2
4825: PPUSH
4826: LD_INT 43
4828: PPUSH
4829: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4833: LD_INT 51
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: LD_INT 1
4841: PPUSH
4842: CALL_OW 322
// end ; if Difficulty = 3 then
4846: LD_OWVAR 67
4850: PUSH
4851: LD_INT 3
4853: EQUAL
4854: IFFALSE 5016
// begin RuSoldMinLevel = 3 ;
4856: LD_ADDR_EXP 16
4860: PUSH
4861: LD_INT 3
4863: ST_TO_ADDR
// RuSoldMaxLevel = 5 ;
4864: LD_ADDR_EXP 17
4868: PUSH
4869: LD_INT 5
4871: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4872: LD_INT 26
4874: PPUSH
4875: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4879: LD_INT 23
4881: PPUSH
4882: CALL_OW 64
// uc_nation = 3 ;
4886: LD_ADDR_OWVAR 21
4890: PUSH
4891: LD_INT 3
4893: ST_TO_ADDR
// uc_side = 3 ;
4894: LD_ADDR_OWVAR 20
4898: PUSH
4899: LD_INT 3
4901: ST_TO_ADDR
// bc_level = 5 ;
4902: LD_ADDR_OWVAR 43
4906: PUSH
4907: LD_INT 5
4909: ST_TO_ADDR
// bc_type = 32 ;
4910: LD_ADDR_OWVAR 42
4914: PUSH
4915: LD_INT 32
4917: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: LD_INT 76
4925: PPUSH
4926: LD_INT 91
4928: PPUSH
4929: LD_INT 2
4931: PPUSH
4932: CALL_OW 47
4936: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4937: LD_VAR 0 2
4941: PPUSH
4942: LD_INT 44
4944: PPUSH
4945: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_INT 83
4956: PPUSH
4957: LD_INT 84
4959: PPUSH
4960: LD_INT 2
4962: PPUSH
4963: CALL_OW 47
4967: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4968: LD_VAR 0 2
4972: PPUSH
4973: LD_INT 43
4975: PPUSH
4976: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4980: LD_INT 51
4982: PPUSH
4983: LD_INT 3
4985: PPUSH
4986: LD_INT 1
4988: PPUSH
4989: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4993: LD_INT 52
4995: PPUSH
4996: LD_INT 3
4998: PPUSH
4999: LD_INT 1
5001: PPUSH
5002: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5006: LD_INT 25
5008: PPUSH
5009: LD_INT 44
5011: PPUSH
5012: CALL_OW 431
// end ; end ;
5016: LD_VAR 0 1
5020: RET
// export function EnergyDialog ; begin
5021: LD_INT 0
5023: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5024: LD_INT 46
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: CALL_OW 321
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: PUSH
5039: LD_INT 35
5041: PPUSH
5042: LD_INT 1
5044: PPUSH
5045: CALL_OW 321
5049: PUSH
5050: LD_INT 1
5052: EQUAL
5053: AND
5054: IFFALSE 5078
// begin Say ( JMM , D9c-JMM-1 ) ;
5056: LD_EXP 1
5060: PPUSH
5061: LD_STRING D9c-JMM-1
5063: PPUSH
5064: CALL_OW 88
// energyVDialog = 1 ;
5068: LD_ADDR_EXP 33
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// end else
5076: GO 5232
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5078: LD_INT 35
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 321
5088: PUSH
5089: LD_INT 2
5091: EQUAL
5092: PUSH
5093: LD_EXP 33
5097: PUSH
5098: LD_INT 0
5100: EQUAL
5101: AND
5102: IFFALSE 5124
// begin Say ( JMM , D9c-JMM-1a ) ;
5104: LD_EXP 1
5108: PPUSH
5109: LD_STRING D9c-JMM-1a
5111: PPUSH
5112: CALL_OW 88
// energyVDialog = 1 ;
5116: LD_ADDR_EXP 33
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5124: LD_INT 46
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 321
5134: PUSH
5135: LD_INT 2
5137: EQUAL
5138: PUSH
5139: LD_EXP 33
5143: PUSH
5144: LD_INT 0
5146: EQUAL
5147: AND
5148: IFFALSE 5170
// begin Say ( JMM , D9c-JMM-1b ) ;
5150: LD_EXP 1
5154: PPUSH
5155: LD_STRING D9c-JMM-1b
5157: PPUSH
5158: CALL_OW 88
// energyVDialog = 1 ;
5162: LD_ADDR_EXP 33
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5170: LD_INT 46
5172: PPUSH
5173: LD_INT 1
5175: PPUSH
5176: CALL_OW 321
5180: PUSH
5181: LD_INT 2
5183: EQUAL
5184: PUSH
5185: LD_INT 21
5187: PPUSH
5188: LD_INT 1
5190: PPUSH
5191: CALL_OW 321
5195: PUSH
5196: LD_INT 2
5198: EQUAL
5199: AND
5200: PUSH
5201: LD_EXP 33
5205: PUSH
5206: LD_INT 0
5208: EQUAL
5209: AND
5210: IFFALSE 5232
// begin Say ( JMM , D9c-JMM-1c ) ;
5212: LD_EXP 1
5216: PPUSH
5217: LD_STRING D9c-JMM-1c
5219: PPUSH
5220: CALL_OW 88
// energyVDialog = 1 ;
5224: LD_ADDR_EXP 33
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// end ; end ; end ;
5232: LD_VAR 0 1
5236: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5244: LD_VAR 0 1
5248: NOT
5249: PUSH
5250: LD_VAR 0 1
5254: PPUSH
5255: CALL_OW 256
5259: PUSH
5260: LD_INT 250
5262: LESS
5263: OR
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 314
5274: PUSH
5275: LD_VAR 0 1
5279: PPUSH
5280: CALL_OW 261
5284: PUSH
5285: LD_INT 20
5287: GREATER
5288: AND
5289: OR
5290: IFFALSE 5294
// exit ;
5292: GO 5659
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 261
5303: PUSH
5304: LD_INT 20
5306: LESS
5307: PUSH
5308: LD_VAR 0 1
5312: PPUSH
5313: CALL_OW 110
5317: PUSH
5318: LD_INT 21
5320: EQUAL
5321: NOT
5322: AND
5323: IFFALSE 5350
// begin ComStop ( bulldozer ) ;
5325: LD_VAR 0 1
5329: PPUSH
5330: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5334: LD_VAR 0 1
5338: PPUSH
5339: LD_INT 21
5341: PPUSH
5342: CALL_OW 109
// exit ;
5346: GO 5659
// end else
5348: GO 5377
// if GetFuel ( bulldozer ) > 20 then
5350: LD_VAR 0 1
5354: PPUSH
5355: CALL_OW 261
5359: PUSH
5360: LD_INT 20
5362: GREATER
5363: IFFALSE 5377
// SetTag ( bulldozer , 0 ) ;
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_INT 0
5372: PPUSH
5373: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5377: LD_ADDR_VAR 0 5
5381: PUSH
5382: LD_VAR 0 2
5386: PPUSH
5387: CALL_OW 353
5391: ST_TO_ADDR
// tmp := [ ] ;
5392: LD_ADDR_VAR 0 6
5396: PUSH
5397: EMPTY
5398: ST_TO_ADDR
// for i = 1 to list do
5399: LD_ADDR_VAR 0 4
5403: PUSH
5404: DOUBLE
5405: LD_INT 1
5407: DEC
5408: ST_TO_ADDR
5409: LD_VAR 0 5
5413: PUSH
5414: FOR_TO
5415: IFFALSE 5513
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5417: LD_VAR 0 5
5421: PUSH
5422: LD_VAR 0 4
5426: ARRAY
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: LD_VAR 0 5
5436: PUSH
5437: LD_VAR 0 4
5441: ARRAY
5442: PUSH
5443: LD_INT 2
5445: ARRAY
5446: PPUSH
5447: CALL_OW 554
5451: IFFALSE 5511
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5453: LD_ADDR_VAR 0 6
5457: PUSH
5458: LD_VAR 0 6
5462: PPUSH
5463: LD_VAR 0 6
5467: PUSH
5468: LD_INT 1
5470: PLUS
5471: PPUSH
5472: LD_VAR 0 5
5476: PUSH
5477: LD_VAR 0 4
5481: ARRAY
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: PUSH
5487: LD_VAR 0 5
5491: PUSH
5492: LD_VAR 0 4
5496: ARRAY
5497: PUSH
5498: LD_INT 2
5500: ARRAY
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 1
5510: ST_TO_ADDR
// end ;
5511: GO 5414
5513: POP
5514: POP
// ComStop ( bulldozer ) ;
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5524: LD_ADDR_VAR 0 7
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 250
5538: PUSH
5539: LD_VAR 0 1
5543: PPUSH
5544: CALL_OW 251
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: ST_TO_ADDR
// for i = tmp downto 1 do
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: DOUBLE
5559: LD_VAR 0 6
5563: INC
5564: ST_TO_ADDR
5565: LD_INT 1
5567: PUSH
5568: FOR_DOWNTO
5569: IFFALSE 5657
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5571: LD_ADDR_VAR 0 7
5575: PUSH
5576: LD_VAR 0 7
5580: PUSH
5581: LD_INT 1
5583: ARRAY
5584: PPUSH
5585: LD_VAR 0 7
5589: PUSH
5590: LD_INT 2
5592: ARRAY
5593: PPUSH
5594: LD_VAR 0 6
5598: PPUSH
5599: CALL 5760 0 3
5603: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5604: LD_VAR 0 1
5608: PPUSH
5609: LD_VAR 0 7
5613: PUSH
5614: LD_INT 1
5616: ARRAY
5617: PPUSH
5618: LD_VAR 0 7
5622: PUSH
5623: LD_INT 2
5625: ARRAY
5626: PPUSH
5627: CALL 5664 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5631: LD_ADDR_VAR 0 6
5635: PUSH
5636: LD_VAR 0 6
5640: PPUSH
5641: LD_VAR 0 7
5645: PUSH
5646: LD_INT 3
5648: ARRAY
5649: PPUSH
5650: CALL_OW 3
5654: ST_TO_ADDR
// end ;
5655: GO 5568
5657: POP
5658: POP
// end ;
5659: LD_VAR 0 3
5663: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5664: LD_INT 0
5666: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5667: LD_VAR 0 2
5671: PPUSH
5672: LD_VAR 0 3
5676: PPUSH
5677: CALL_OW 351
5681: PUSH
5682: LD_VAR 0 2
5686: PPUSH
5687: LD_VAR 0 3
5691: PPUSH
5692: CALL_OW 554
5696: AND
5697: PUSH
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_VAR 0 3
5707: PPUSH
5708: CALL_OW 488
5712: AND
5713: PUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: CALL_OW 428
5728: PUSH
5729: LD_INT 1
5731: NEG
5732: EQUAL
5733: AND
5734: IFFALSE 5755
// AddComMoveXY ( bulldozer , x , y ) ;
5736: LD_VAR 0 1
5740: PPUSH
5741: LD_VAR 0 2
5745: PPUSH
5746: LD_VAR 0 3
5750: PPUSH
5751: CALL_OW 171
// end ;
5755: LD_VAR 0 4
5759: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5760: LD_INT 0
5762: PPUSH
5763: PPUSH
5764: PPUSH
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// dist := 99999 ;
5769: LD_ADDR_VAR 0 6
5773: PUSH
5774: LD_INT 99999
5776: ST_TO_ADDR
// for i = 1 to list do
5777: LD_ADDR_VAR 0 5
5781: PUSH
5782: DOUBLE
5783: LD_INT 1
5785: DEC
5786: ST_TO_ADDR
5787: LD_VAR 0 3
5791: PUSH
5792: FOR_TO
5793: IFFALSE 5931
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5795: LD_ADDR_VAR 0 7
5799: PUSH
5800: LD_VAR 0 1
5804: PPUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: LD_VAR 0 3
5814: PUSH
5815: LD_VAR 0 5
5819: ARRAY
5820: PUSH
5821: LD_INT 1
5823: ARRAY
5824: PPUSH
5825: LD_VAR 0 3
5829: PUSH
5830: LD_VAR 0 5
5834: ARRAY
5835: PUSH
5836: LD_INT 2
5838: ARRAY
5839: PPUSH
5840: CALL_OW 298
5844: ST_TO_ADDR
// if d = 0 then
5845: LD_VAR 0 7
5849: PUSH
5850: LD_INT 0
5852: EQUAL
5853: IFFALSE 5857
// continue ;
5855: GO 5792
// if d < dist then
5857: LD_VAR 0 7
5861: PUSH
5862: LD_VAR 0 6
5866: LESS
5867: IFFALSE 5929
// begin _x := list [ i ] [ 1 ] ;
5869: LD_ADDR_VAR 0 8
5873: PUSH
5874: LD_VAR 0 3
5878: PUSH
5879: LD_VAR 0 5
5883: ARRAY
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5889: LD_ADDR_VAR 0 9
5893: PUSH
5894: LD_VAR 0 3
5898: PUSH
5899: LD_VAR 0 5
5903: ARRAY
5904: PUSH
5905: LD_INT 2
5907: ARRAY
5908: ST_TO_ADDR
// _i := i ;
5909: LD_ADDR_VAR 0 10
5913: PUSH
5914: LD_VAR 0 5
5918: ST_TO_ADDR
// dist := d ;
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: LD_VAR 0 7
5928: ST_TO_ADDR
// end ; end ;
5929: GO 5792
5931: POP
5932: POP
// result := [ _x , _y , _i , dist ] ;
5933: LD_ADDR_VAR 0 4
5937: PUSH
5938: LD_VAR 0 8
5942: PUSH
5943: LD_VAR 0 9
5947: PUSH
5948: LD_VAR 0 10
5952: PUSH
5953: LD_VAR 0 6
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: ST_TO_ADDR
// end ;
5964: LD_VAR 0 4
5968: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5969: LD_INT 0
5971: PPUSH
5972: PPUSH
5973: PPUSH
5974: PPUSH
// for i = 1 to 72 do
5975: LD_ADDR_VAR 0 5
5979: PUSH
5980: DOUBLE
5981: LD_INT 1
5983: DEC
5984: ST_TO_ADDR
5985: LD_INT 72
5987: PUSH
5988: FOR_TO
5989: IFFALSE 6047
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5991: LD_VAR 0 5
5995: PPUSH
5996: LD_VAR 0 1
6000: PPUSH
6001: CALL_OW 321
6005: PUSH
6006: LD_INT 1
6008: EQUAL
6009: PUSH
6010: LD_VAR 0 5
6014: PPUSH
6015: LD_VAR 0 3
6019: PPUSH
6020: CALL_OW 482
6024: PUSH
6025: LD_INT 1
6027: EQUAL
6028: AND
6029: IFFALSE 6045
// AddComResearch ( lab , i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: LD_VAR 0 5
6040: PPUSH
6041: CALL_OW 184
6045: GO 5988
6047: POP
6048: POP
// end ;
6049: LD_VAR 0 4
6053: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6054: LD_INT 0
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6062: LD_ADDR_VAR 0 7
6066: PUSH
6067: LD_VAR 0 2
6071: PPUSH
6072: CALL_OW 313
6076: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6077: LD_ADDR_VAR 0 8
6081: PUSH
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_INT 22
6089: PUSH
6090: LD_VAR 0 1
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 2
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 24
6111: PUSH
6112: LD_INT 750
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 3
6121: PUSH
6122: LD_INT 54
6124: PUSH
6125: EMPTY
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 70
6142: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6143: LD_ADDR_VAR 0 5
6147: PUSH
6148: LD_VAR 0 3
6152: PPUSH
6153: LD_INT 22
6155: PUSH
6156: LD_VAR 0 1
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 21
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 24
6180: PUSH
6181: LD_INT 1000
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: PPUSH
6200: CALL_OW 70
6204: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6205: LD_VAR 0 5
6209: NOT
6210: PUSH
6211: LD_INT 22
6213: PUSH
6214: LD_VAR 0 1
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 2
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 24
6235: PUSH
6236: LD_INT 250
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: NOT
6253: AND
6254: IFFALSE 6258
// exit ;
6256: GO 6370
// if buildings_list > 0 and engineerOkInside then
6258: LD_VAR 0 5
6262: PUSH
6263: LD_INT 0
6265: GREATER
6266: PUSH
6267: LD_VAR 0 7
6271: AND
6272: IFFALSE 6298
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6274: LD_VAR 0 7
6278: PPUSH
6279: LD_INT 25
6281: PUSH
6282: LD_INT 2
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PPUSH
6289: CALL_OW 72
6293: PPUSH
6294: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6298: LD_VAR 0 5
6302: PUSH
6303: LD_INT 0
6305: GREATER
6306: PUSH
6307: LD_VAR 0 8
6311: PUSH
6312: LD_INT 0
6314: GREATER
6315: AND
6316: IFFALSE 6336
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6318: LD_VAR 0 8
6322: PPUSH
6323: LD_VAR 0 5
6327: PUSH
6328: LD_INT 1
6330: ARRAY
6331: PPUSH
6332: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6336: LD_VAR 0 5
6340: PUSH
6341: LD_INT 0
6343: EQUAL
6344: PUSH
6345: LD_VAR 0 8
6349: PUSH
6350: LD_INT 0
6352: GREATER
6353: AND
6354: IFFALSE 6370
// ComEnterUnit ( engineerOkOutside , building ) ;
6356: LD_VAR 0 8
6360: PPUSH
6361: LD_VAR 0 2
6365: PPUSH
6366: CALL_OW 120
// end ;
6370: LD_VAR 0 4
6374: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6375: LD_INT 0
6377: PPUSH
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
6383: PPUSH
6384: PPUSH
6385: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6386: LD_ADDR_VAR 0 6
6390: PUSH
6391: LD_INT 22
6393: PUSH
6394: LD_VAR 0 1
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: LD_INT 4
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 23
6415: PUSH
6416: LD_INT 2
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 24
6425: PUSH
6426: LD_INT 251
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PPUSH
6439: CALL_OW 69
6443: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6444: LD_ADDR_VAR 0 7
6448: PUSH
6449: LD_VAR 0 3
6453: PPUSH
6454: LD_INT 22
6456: PUSH
6457: LD_VAR 0 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 23
6468: PUSH
6469: LD_INT 2
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: LD_INT 25
6478: PUSH
6479: LD_INT 4
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PUSH
6486: LD_INT 50
6488: PUSH
6489: EMPTY
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: PPUSH
6498: CALL_OW 70
6502: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6503: LD_ADDR_VAR 0 10
6507: PUSH
6508: LD_VAR 0 3
6512: PPUSH
6513: LD_INT 22
6515: PUSH
6516: LD_VAR 0 1
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: LD_INT 21
6527: PUSH
6528: LD_INT 1
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 25
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 3
6554: PUSH
6555: LD_INT 24
6557: PUSH
6558: LD_INT 750
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6580: LD_ADDR_VAR 0 11
6584: PUSH
6585: LD_VAR 0 2
6589: PPUSH
6590: LD_INT 22
6592: PUSH
6593: LD_VAR 0 1
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 21
6604: PUSH
6605: LD_INT 1
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 3
6614: PUSH
6615: LD_INT 25
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 3
6631: PUSH
6632: LD_INT 24
6634: PUSH
6635: LD_INT 1000
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PPUSH
6652: CALL_OW 70
6656: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6657: LD_VAR 0 10
6661: NOT
6662: PUSH
6663: LD_VAR 0 11
6667: NOT
6668: AND
6669: PUSH
6670: LD_VAR 0 6
6674: NOT
6675: AND
6676: IFFALSE 6680
// exit ;
6678: GO 6914
// if damageUnits > 0 and sci_list > 0 then
6680: LD_VAR 0 10
6684: PUSH
6685: LD_INT 0
6687: GREATER
6688: PUSH
6689: LD_VAR 0 6
6693: PUSH
6694: LD_INT 0
6696: GREATER
6697: AND
6698: IFFALSE 6714
// ComMoveToArea ( damageUnits , healArea ) ;
6700: LD_VAR 0 10
6704: PPUSH
6705: LD_VAR 0 2
6709: PPUSH
6710: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6714: LD_VAR 0 11
6718: PUSH
6719: LD_INT 0
6721: GREATER
6722: PUSH
6723: LD_VAR 0 6
6727: PUSH
6728: LD_INT 0
6730: GREATER
6731: AND
6732: IFFALSE 6743
// ComExitBuilding ( sci_list ) ;
6734: LD_VAR 0 6
6738: PPUSH
6739: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6743: LD_VAR 0 11
6747: PUSH
6748: LD_INT 0
6750: GREATER
6751: PUSH
6752: LD_VAR 0 7
6756: PUSH
6757: LD_INT 0
6759: GREATER
6760: AND
6761: IFFALSE 6781
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6763: LD_VAR 0 7
6767: PPUSH
6768: LD_VAR 0 11
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: PPUSH
6777: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6781: LD_VAR 0 10
6785: PUSH
6786: LD_INT 0
6788: EQUAL
6789: PUSH
6790: LD_VAR 0 11
6794: PUSH
6795: LD_INT 0
6797: EQUAL
6798: AND
6799: PUSH
6800: LD_VAR 0 7
6804: PUSH
6805: LD_INT 0
6807: GREATER
6808: AND
6809: IFFALSE 6914
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6811: LD_ADDR_VAR 0 12
6815: PUSH
6816: LD_INT 22
6818: PUSH
6819: LD_VAR 0 1
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 21
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 30
6840: PUSH
6841: LD_INT 8
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: PPUSH
6853: CALL_OW 69
6857: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6858: LD_ADDR_VAR 0 13
6862: PUSH
6863: LD_INT 1
6865: PPUSH
6866: LD_VAR 0 12
6870: PPUSH
6871: CALL_OW 12
6875: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6876: LD_VAR 0 7
6880: PPUSH
6881: LD_INT 3
6883: PUSH
6884: LD_INT 60
6886: PUSH
6887: EMPTY
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PPUSH
6894: CALL_OW 72
6898: PPUSH
6899: LD_VAR 0 12
6903: PUSH
6904: LD_VAR 0 13
6908: ARRAY
6909: PPUSH
6910: CALL_OW 120
// end ; end ;
6914: LD_VAR 0 5
6918: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6919: LD_INT 0
6921: PPUSH
6922: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6923: LD_INT 22
6925: PUSH
6926: LD_VAR 0 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 69
6953: PUSH
6954: LD_VAR 0 3
6958: LESSEQUAL
6959: IFFALSE 7026
// for i = 1 to vehCount do
6961: LD_ADDR_VAR 0 9
6965: PUSH
6966: DOUBLE
6967: LD_INT 1
6969: DEC
6970: ST_TO_ADDR
6971: LD_VAR 0 3
6975: PUSH
6976: FOR_TO
6977: IFFALSE 7024
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 7
6988: PPUSH
6989: LD_VAR 0 5
6993: PPUSH
6994: LD_VAR 0 6
6998: PPUSH
6999: LD_VAR 0 4
7003: PUSH
7004: LD_INT 1
7006: PPUSH
7007: LD_VAR 0 4
7011: PPUSH
7012: CALL_OW 12
7016: ARRAY
7017: PPUSH
7018: CALL_OW 185
7022: GO 6976
7024: POP
7025: POP
// end ;
7026: LD_VAR 0 8
7030: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7040: LD_ADDR_VAR 0 8
7044: PUSH
7045: LD_INT 22
7047: PUSH
7048: LD_VAR 0 1
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 21
7059: PUSH
7060: LD_INT 2
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: LD_INT 34
7072: PUSH
7073: LD_INT 51
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 34
7082: PUSH
7083: LD_INT 53
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 34
7092: PUSH
7093: LD_INT 52
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 24
7108: PUSH
7109: LD_INT 650
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 1
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 21
7141: PUSH
7142: LD_INT 2
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 24
7151: PUSH
7152: LD_INT 1000
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: PPUSH
7164: CALL_OW 69
7168: PUSH
7169: LD_INT 3
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_OWVAR 67
7187: ARRAY
7188: GREATEREQUAL
7189: IFFALSE 7686
// repeat wait ( 0 0$1 ) ;
7191: LD_INT 35
7193: PPUSH
7194: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7198: LD_ADDR_VAR 0 8
7202: PUSH
7203: LD_INT 22
7205: PUSH
7206: LD_VAR 0 1
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 21
7217: PUSH
7218: LD_INT 2
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: LD_INT 34
7230: PUSH
7231: LD_INT 51
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 34
7240: PUSH
7241: LD_INT 53
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 34
7250: PUSH
7251: LD_INT 52
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 24
7266: PUSH
7267: LD_INT 650
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7285: LD_INT 22
7287: PUSH
7288: LD_VAR 0 1
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 95
7299: PUSH
7300: LD_VAR 0 2
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PPUSH
7313: CALL_OW 69
7317: NOT
7318: PUSH
7319: LD_VAR 0 11
7323: PUSH
7324: LD_INT 0
7326: EQUAL
7327: AND
7328: IFFALSE 7383
// for i := 1 to wayX do
7330: LD_ADDR_VAR 0 6
7334: PUSH
7335: DOUBLE
7336: LD_INT 1
7338: DEC
7339: ST_TO_ADDR
7340: LD_VAR 0 3
7344: PUSH
7345: FOR_TO
7346: IFFALSE 7381
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7348: LD_VAR 0 8
7352: PPUSH
7353: LD_VAR 0 3
7357: PUSH
7358: LD_VAR 0 6
7362: ARRAY
7363: PPUSH
7364: LD_VAR 0 4
7368: PUSH
7369: LD_VAR 0 6
7373: ARRAY
7374: PPUSH
7375: CALL_OW 174
7379: GO 7345
7381: POP
7382: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7383: LD_INT 22
7385: PUSH
7386: LD_VAR 0 1
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 95
7397: PUSH
7398: LD_VAR 0 2
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: IFFALSE 7639
// begin seeEnemy = 1 ;
7417: LD_ADDR_VAR 0 11
7421: PUSH
7422: LD_INT 1
7424: ST_TO_ADDR
// for j in vehiclesOK do
7425: LD_ADDR_VAR 0 7
7429: PUSH
7430: LD_VAR 0 8
7434: PUSH
7435: FOR_IN
7436: IFFALSE 7637
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7438: LD_ADDR_VAR 0 9
7442: PUSH
7443: LD_INT 81
7445: PUSH
7446: LD_VAR 0 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 101
7457: PUSH
7458: LD_INT 1
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 69
7473: PPUSH
7474: LD_VAR 0 7
7478: PPUSH
7479: CALL_OW 74
7483: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7484: LD_ADDR_VAR 0 10
7488: PUSH
7489: LD_INT 81
7491: PUSH
7492: LD_VAR 0 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 101
7503: PUSH
7504: LD_INT 1
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 2
7513: PUSH
7514: LD_INT 59
7516: PUSH
7517: EMPTY
7518: LIST
7519: PUSH
7520: LD_INT 21
7522: PUSH
7523: LD_INT 1
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 21
7532: PUSH
7533: LD_INT 2
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: PUSH
7551: EMPTY
7552: LIST
7553: PPUSH
7554: CALL_OW 69
7558: PPUSH
7559: LD_VAR 0 7
7563: PPUSH
7564: CALL_OW 74
7568: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7569: LD_VAR 0 7
7573: PPUSH
7574: LD_VAR 0 9
7578: PPUSH
7579: CALL_OW 296
7583: PUSH
7584: LD_INT 8
7586: PLUS
7587: PUSH
7588: LD_VAR 0 7
7592: PPUSH
7593: LD_VAR 0 10
7597: PPUSH
7598: CALL_OW 296
7602: LESS
7603: IFFALSE 7621
// ComAttackUnit ( j , target1 ) else
7605: LD_VAR 0 7
7609: PPUSH
7610: LD_VAR 0 9
7614: PPUSH
7615: CALL_OW 115
7619: GO 7635
// ComAttackUnit ( j , target2 ) ;
7621: LD_VAR 0 7
7625: PPUSH
7626: LD_VAR 0 10
7630: PPUSH
7631: CALL_OW 115
// end ;
7635: GO 7435
7637: POP
7638: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7639: LD_INT 22
7641: PUSH
7642: LD_VAR 0 1
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 21
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 24
7663: PUSH
7664: LD_INT 1000
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 0
7683: EQUAL
7684: IFFALSE 7191
// seeEnemy = 0 ;
7686: LD_ADDR_VAR 0 11
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// end ;
7694: LD_VAR 0 5
7698: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7699: LD_INT 0
7701: PPUSH
7702: PPUSH
7703: PPUSH
7704: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7705: LD_ADDR_VAR 0 8
7709: PUSH
7710: LD_INT 22
7712: PUSH
7713: LD_VAR 0 1
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 21
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_INT 3
7734: PUSH
7735: LD_INT 34
7737: PUSH
7738: LD_INT 51
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 34
7747: PUSH
7748: LD_INT 53
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 34
7757: PUSH
7758: LD_INT 52
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 3
7773: PUSH
7774: LD_INT 24
7776: PUSH
7777: LD_INT 650
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 69
7798: ST_TO_ADDR
// if damageVehicles > 0 then
7799: LD_VAR 0 8
7803: PUSH
7804: LD_INT 0
7806: GREATER
7807: IFFALSE 7828
// ComMoveXY ( damageVehicles , repX , repY ) ;
7809: LD_VAR 0 8
7813: PPUSH
7814: LD_VAR 0 3
7818: PPUSH
7819: LD_VAR 0 4
7823: PPUSH
7824: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7828: LD_VAR 0 8
7832: PPUSH
7833: LD_INT 95
7835: PUSH
7836: LD_VAR 0 2
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 3
7847: PUSH
7848: LD_INT 58
7850: PUSH
7851: EMPTY
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PPUSH
7862: CALL_OW 72
7866: PUSH
7867: LD_INT 0
7869: GREATER
7870: IFFALSE 7937
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7872: LD_ADDR_VAR 0 6
7876: PUSH
7877: LD_VAR 0 8
7881: PPUSH
7882: LD_INT 95
7884: PUSH
7885: LD_VAR 0 2
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: LD_INT 58
7899: PUSH
7900: EMPTY
7901: LIST
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PPUSH
7911: CALL_OW 72
7915: PUSH
7916: FOR_IN
7917: IFFALSE 7935
// ComExitVehicle ( UnitsInside ( i ) ) ;
7919: LD_VAR 0 6
7923: PPUSH
7924: CALL_OW 313
7928: PPUSH
7929: CALL_OW 121
7933: GO 7916
7935: POP
7936: POP
// end ;
7937: LD_VAR 0 5
7941: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
// for i = 1 to medicCount do
7955: LD_ADDR_VAR 0 14
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_VAR 0 7
7969: PUSH
7970: FOR_TO
7971: IFFALSE 8053
// begin uc_side = side ;
7973: LD_ADDR_OWVAR 20
7977: PUSH
7978: LD_VAR 0 1
7982: ST_TO_ADDR
// uc_nation = nation ;
7983: LD_ADDR_OWVAR 21
7987: PUSH
7988: LD_VAR 0 2
7992: ST_TO_ADDR
// hc_name =  ;
7993: LD_ADDR_OWVAR 26
7997: PUSH
7998: LD_STRING 
8000: ST_TO_ADDR
// hc_gallery =  ;
8001: LD_ADDR_OWVAR 33
8005: PUSH
8006: LD_STRING 
8008: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8009: LD_INT 0
8011: PPUSH
8012: LD_INT 4
8014: PPUSH
8015: LD_VAR 0 8
8019: PPUSH
8020: CALL_OW 380
// un = CreateHuman ;
8024: LD_ADDR_VAR 0 16
8028: PUSH
8029: CALL_OW 44
8033: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8034: LD_VAR 0 16
8038: PPUSH
8039: LD_VAR 0 9
8043: PPUSH
8044: LD_INT 0
8046: PPUSH
8047: CALL_OW 49
// end ;
8051: GO 7970
8053: POP
8054: POP
// for i = 1 to soldierCount do
8055: LD_ADDR_VAR 0 14
8059: PUSH
8060: DOUBLE
8061: LD_INT 1
8063: DEC
8064: ST_TO_ADDR
8065: LD_VAR 0 3
8069: PUSH
8070: FOR_TO
8071: IFFALSE 8153
// begin uc_side = side ;
8073: LD_ADDR_OWVAR 20
8077: PUSH
8078: LD_VAR 0 1
8082: ST_TO_ADDR
// uc_nation = nation ;
8083: LD_ADDR_OWVAR 21
8087: PUSH
8088: LD_VAR 0 2
8092: ST_TO_ADDR
// hc_name =  ;
8093: LD_ADDR_OWVAR 26
8097: PUSH
8098: LD_STRING 
8100: ST_TO_ADDR
// hc_gallery =  ;
8101: LD_ADDR_OWVAR 33
8105: PUSH
8106: LD_STRING 
8108: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8109: LD_INT 0
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: LD_VAR 0 8
8119: PPUSH
8120: CALL_OW 380
// un = CreateHuman ;
8124: LD_ADDR_VAR 0 16
8128: PUSH
8129: CALL_OW 44
8133: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8134: LD_VAR 0 16
8138: PPUSH
8139: LD_VAR 0 9
8143: PPUSH
8144: LD_INT 0
8146: PPUSH
8147: CALL_OW 49
// end ;
8151: GO 8070
8153: POP
8154: POP
// for i = 1 to sniperCount do
8155: LD_ADDR_VAR 0 14
8159: PUSH
8160: DOUBLE
8161: LD_INT 1
8163: DEC
8164: ST_TO_ADDR
8165: LD_VAR 0 4
8169: PUSH
8170: FOR_TO
8171: IFFALSE 8253
// begin uc_side = side ;
8173: LD_ADDR_OWVAR 20
8177: PUSH
8178: LD_VAR 0 1
8182: ST_TO_ADDR
// uc_nation = nation ;
8183: LD_ADDR_OWVAR 21
8187: PUSH
8188: LD_VAR 0 2
8192: ST_TO_ADDR
// hc_name =  ;
8193: LD_ADDR_OWVAR 26
8197: PUSH
8198: LD_STRING 
8200: ST_TO_ADDR
// hc_gallery =  ;
8201: LD_ADDR_OWVAR 33
8205: PUSH
8206: LD_STRING 
8208: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8209: LD_INT 0
8211: PPUSH
8212: LD_INT 5
8214: PPUSH
8215: LD_VAR 0 8
8219: PPUSH
8220: CALL_OW 380
// un = CreateHuman ;
8224: LD_ADDR_VAR 0 16
8228: PUSH
8229: CALL_OW 44
8233: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8234: LD_VAR 0 16
8238: PPUSH
8239: LD_VAR 0 9
8243: PPUSH
8244: LD_INT 0
8246: PPUSH
8247: CALL_OW 49
// end ;
8251: GO 8170
8253: POP
8254: POP
// for i = 1 to bazookCount do
8255: LD_ADDR_VAR 0 14
8259: PUSH
8260: DOUBLE
8261: LD_INT 1
8263: DEC
8264: ST_TO_ADDR
8265: LD_VAR 0 5
8269: PUSH
8270: FOR_TO
8271: IFFALSE 8353
// begin uc_side = side ;
8273: LD_ADDR_OWVAR 20
8277: PUSH
8278: LD_VAR 0 1
8282: ST_TO_ADDR
// uc_nation = nation ;
8283: LD_ADDR_OWVAR 21
8287: PUSH
8288: LD_VAR 0 2
8292: ST_TO_ADDR
// hc_name =  ;
8293: LD_ADDR_OWVAR 26
8297: PUSH
8298: LD_STRING 
8300: ST_TO_ADDR
// hc_gallery =  ;
8301: LD_ADDR_OWVAR 33
8305: PUSH
8306: LD_STRING 
8308: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8309: LD_INT 0
8311: PPUSH
8312: LD_INT 9
8314: PPUSH
8315: LD_VAR 0 8
8319: PPUSH
8320: CALL_OW 380
// un = CreateHuman ;
8324: LD_ADDR_VAR 0 16
8328: PUSH
8329: CALL_OW 44
8333: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8334: LD_VAR 0 16
8338: PPUSH
8339: LD_VAR 0 9
8343: PPUSH
8344: LD_INT 0
8346: PPUSH
8347: CALL_OW 49
// end ;
8351: GO 8270
8353: POP
8354: POP
// for i = 1 to mortalCount do
8355: LD_ADDR_VAR 0 14
8359: PUSH
8360: DOUBLE
8361: LD_INT 1
8363: DEC
8364: ST_TO_ADDR
8365: LD_VAR 0 6
8369: PUSH
8370: FOR_TO
8371: IFFALSE 8453
// begin uc_side = side ;
8373: LD_ADDR_OWVAR 20
8377: PUSH
8378: LD_VAR 0 1
8382: ST_TO_ADDR
// uc_nation = nation ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_VAR 0 2
8392: ST_TO_ADDR
// hc_name =  ;
8393: LD_ADDR_OWVAR 26
8397: PUSH
8398: LD_STRING 
8400: ST_TO_ADDR
// hc_gallery =  ;
8401: LD_ADDR_OWVAR 33
8405: PUSH
8406: LD_STRING 
8408: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8409: LD_INT 0
8411: PPUSH
8412: LD_INT 8
8414: PPUSH
8415: LD_VAR 0 8
8419: PPUSH
8420: CALL_OW 380
// un = CreateHuman ;
8424: LD_ADDR_VAR 0 16
8428: PUSH
8429: CALL_OW 44
8433: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8434: LD_VAR 0 16
8438: PPUSH
8439: LD_VAR 0 9
8443: PPUSH
8444: LD_INT 0
8446: PPUSH
8447: CALL_OW 49
// end ;
8451: GO 8370
8453: POP
8454: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8455: LD_ADDR_VAR 0 19
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_VAR 0 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: LD_INT 25
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 25
8487: PUSH
8488: LD_INT 5
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 25
8497: PUSH
8498: LD_INT 8
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 25
8507: PUSH
8508: LD_INT 9
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8531: LD_ADDR_VAR 0 18
8535: PUSH
8536: LD_INT 22
8538: PUSH
8539: LD_VAR 0 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 69
8566: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8567: LD_VAR 0 18
8571: PPUSH
8572: LD_VAR 0 10
8576: PPUSH
8577: CALL_OW 113
// if strategy = 1 then
8581: LD_VAR 0 12
8585: PUSH
8586: LD_INT 1
8588: EQUAL
8589: IFFALSE 9080
// begin for i in soldiersOK_list do
8591: LD_ADDR_VAR 0 14
8595: PUSH
8596: LD_VAR 0 19
8600: PUSH
8601: FOR_IN
8602: IFFALSE 8666
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8604: LD_VAR 0 14
8608: PPUSH
8609: LD_INT 91
8611: PPUSH
8612: LD_INT 63
8614: PPUSH
8615: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8619: LD_VAR 0 14
8623: PPUSH
8624: LD_INT 101
8626: PPUSH
8627: LD_INT 53
8629: PPUSH
8630: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8634: LD_VAR 0 14
8638: PPUSH
8639: LD_INT 75
8641: PPUSH
8642: LD_INT 23
8644: PPUSH
8645: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8649: LD_VAR 0 14
8653: PPUSH
8654: LD_INT 78
8656: PPUSH
8657: LD_INT 8
8659: PPUSH
8660: CALL_OW 174
// end ;
8664: GO 8601
8666: POP
8667: POP
// wait ( 0 0$30 ) ;
8668: LD_INT 1050
8670: PPUSH
8671: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8675: LD_INT 35
8677: PPUSH
8678: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8682: LD_ADDR_VAR 0 17
8686: PUSH
8687: LD_INT 22
8689: PUSH
8690: LD_VAR 0 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 1
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 24
8707: PUSH
8708: LD_INT 550
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 24
8721: PUSH
8722: LD_INT 250
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8743: LD_ADDR_VAR 0 19
8747: PUSH
8748: LD_INT 22
8750: PUSH
8751: LD_VAR 0 1
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 2
8762: PUSH
8763: LD_INT 25
8765: PUSH
8766: LD_INT 1
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 25
8775: PUSH
8776: LD_INT 5
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 8
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 9
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: PUSH
8810: LD_INT 24
8812: PUSH
8813: LD_INT 1000
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: PPUSH
8825: CALL_OW 69
8829: ST_TO_ADDR
// if medicCount > 0 then
8830: LD_VAR 0 7
8834: PUSH
8835: LD_INT 0
8837: GREATER
8838: IFFALSE 8882
// begin if damageUnit_list > 0 then
8840: LD_VAR 0 17
8844: PUSH
8845: LD_INT 0
8847: GREATER
8848: IFFALSE 8882
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8850: LD_VAR 0 17
8854: PPUSH
8855: LD_VAR 0 10
8859: PPUSH
8860: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8864: LD_VAR 0 7
8868: PPUSH
8869: LD_VAR 0 17
8873: PUSH
8874: LD_INT 1
8876: ARRAY
8877: PPUSH
8878: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8882: LD_ADDR_VAR 0 14
8886: PUSH
8887: LD_VAR 0 19
8891: PUSH
8892: FOR_IN
8893: IFFALSE 9069
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8895: LD_ADDR_VAR 0 22
8899: PUSH
8900: LD_INT 22
8902: PUSH
8903: LD_VAR 0 11
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PPUSH
8917: LD_VAR 0 14
8921: PPUSH
8922: CALL_OW 74
8926: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8927: LD_ADDR_VAR 0 23
8931: PUSH
8932: LD_INT 22
8934: PUSH
8935: LD_VAR 0 11
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 2
8946: PUSH
8947: LD_INT 59
8949: PUSH
8950: EMPTY
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 1
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 21
8965: PUSH
8966: LD_INT 2
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: PPUSH
8986: CALL_OW 69
8990: PPUSH
8991: LD_VAR 0 14
8995: PPUSH
8996: CALL_OW 74
9000: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9001: LD_VAR 0 14
9005: PPUSH
9006: LD_VAR 0 22
9010: PPUSH
9011: CALL_OW 296
9015: PUSH
9016: LD_INT 8
9018: PLUS
9019: PUSH
9020: LD_VAR 0 14
9024: PPUSH
9025: LD_VAR 0 23
9029: PPUSH
9030: CALL_OW 296
9034: LESS
9035: IFFALSE 9053
// begin ComAttackUnit ( i , target1 ) ;
9037: LD_VAR 0 14
9041: PPUSH
9042: LD_VAR 0 22
9046: PPUSH
9047: CALL_OW 115
// end else
9051: GO 9067
// begin ComAttackUnit ( i , target2 ) ;
9053: LD_VAR 0 14
9057: PPUSH
9058: LD_VAR 0 23
9062: PPUSH
9063: CALL_OW 115
// end ; end ;
9067: GO 8892
9069: POP
9070: POP
// until soldiersOK_list = [ ] ;
9071: LD_VAR 0 19
9075: PUSH
9076: EMPTY
9077: EQUAL
9078: IFFALSE 8675
// end ; if strategy = 2 then
9080: LD_VAR 0 12
9084: PUSH
9085: LD_INT 2
9087: EQUAL
9088: IFFALSE 9542
// begin for i in soldiersOK_list do
9090: LD_ADDR_VAR 0 14
9094: PUSH
9095: LD_VAR 0 19
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9135
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9103: LD_VAR 0 14
9107: PPUSH
9108: LD_INT 91
9110: PPUSH
9111: LD_INT 63
9113: PPUSH
9114: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9118: LD_VAR 0 14
9122: PPUSH
9123: LD_INT 75
9125: PPUSH
9126: LD_INT 33
9128: PPUSH
9129: CALL_OW 174
// end ;
9133: GO 9100
9135: POP
9136: POP
// repeat wait ( 0 0$3 ) ;
9137: LD_INT 105
9139: PPUSH
9140: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9144: LD_ADDR_VAR 0 17
9148: PUSH
9149: LD_INT 22
9151: PUSH
9152: LD_VAR 0 1
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 1
9163: PUSH
9164: LD_INT 3
9166: PUSH
9167: LD_INT 24
9169: PUSH
9170: LD_INT 550
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 24
9183: PUSH
9184: LD_INT 250
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PPUSH
9200: CALL_OW 69
9204: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9205: LD_ADDR_VAR 0 19
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 1
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 25
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 5
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 8
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 9
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 24
9274: PUSH
9275: LD_INT 1000
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: PPUSH
9287: CALL_OW 69
9291: ST_TO_ADDR
// if medicCount > 0 then
9292: LD_VAR 0 7
9296: PUSH
9297: LD_INT 0
9299: GREATER
9300: IFFALSE 9344
// begin if damageUnit_list > 0 then
9302: LD_VAR 0 17
9306: PUSH
9307: LD_INT 0
9309: GREATER
9310: IFFALSE 9344
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9312: LD_VAR 0 17
9316: PPUSH
9317: LD_VAR 0 10
9321: PPUSH
9322: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9326: LD_VAR 0 7
9330: PPUSH
9331: LD_VAR 0 17
9335: PUSH
9336: LD_INT 1
9338: ARRAY
9339: PPUSH
9340: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9344: LD_ADDR_VAR 0 14
9348: PUSH
9349: LD_VAR 0 19
9353: PUSH
9354: FOR_IN
9355: IFFALSE 9531
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9357: LD_ADDR_VAR 0 22
9361: PUSH
9362: LD_INT 22
9364: PUSH
9365: LD_VAR 0 11
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 69
9378: PPUSH
9379: LD_VAR 0 14
9383: PPUSH
9384: CALL_OW 74
9388: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9389: LD_ADDR_VAR 0 23
9393: PUSH
9394: LD_INT 22
9396: PUSH
9397: LD_VAR 0 11
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 2
9408: PUSH
9409: LD_INT 59
9411: PUSH
9412: EMPTY
9413: LIST
9414: PUSH
9415: LD_INT 21
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 21
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: PPUSH
9448: CALL_OW 69
9452: PPUSH
9453: LD_VAR 0 14
9457: PPUSH
9458: CALL_OW 74
9462: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9463: LD_VAR 0 14
9467: PPUSH
9468: LD_VAR 0 22
9472: PPUSH
9473: CALL_OW 296
9477: PUSH
9478: LD_INT 8
9480: PLUS
9481: PUSH
9482: LD_VAR 0 14
9486: PPUSH
9487: LD_VAR 0 23
9491: PPUSH
9492: CALL_OW 296
9496: LESS
9497: IFFALSE 9515
// begin ComAttackUnit ( i , target1 ) ;
9499: LD_VAR 0 14
9503: PPUSH
9504: LD_VAR 0 22
9508: PPUSH
9509: CALL_OW 115
// end else
9513: GO 9529
// begin ComAttackUnit ( i , target2 ) ;
9515: LD_VAR 0 14
9519: PPUSH
9520: LD_VAR 0 23
9524: PPUSH
9525: CALL_OW 115
// end ; end ;
9529: GO 9354
9531: POP
9532: POP
// until soldiersOK_list = [ ] ;
9533: LD_VAR 0 19
9537: PUSH
9538: EMPTY
9539: EQUAL
9540: IFFALSE 9137
// end ; if not soldiersOK_list and medic_list then
9542: LD_VAR 0 19
9546: NOT
9547: PUSH
9548: LD_VAR 0 18
9552: AND
9553: IFFALSE 9693
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9555: LD_ADDR_VAR 0 18
9559: PUSH
9560: LD_INT 22
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 25
9574: PUSH
9575: LD_INT 4
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 50
9584: PUSH
9585: EMPTY
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9598: LD_INT 35
9600: PPUSH
9601: CALL_OW 67
// for i in medic_list do
9605: LD_ADDR_VAR 0 14
9609: PUSH
9610: LD_VAR 0 18
9614: PUSH
9615: FOR_IN
9616: IFFALSE 9684
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9618: LD_VAR 0 14
9622: PPUSH
9623: CALL_OW 314
9627: NOT
9628: PUSH
9629: LD_VAR 0 14
9633: PPUSH
9634: LD_INT 4
9636: PPUSH
9637: CALL_OW 308
9641: NOT
9642: AND
9643: IFFALSE 9659
// ComMoveToArea ( i , RussianAttack ) else
9645: LD_VAR 0 14
9649: PPUSH
9650: LD_INT 4
9652: PPUSH
9653: CALL_OW 113
9657: GO 9682
// if IsInArea ( i , RussianAttack ) then
9659: LD_VAR 0 14
9663: PPUSH
9664: LD_INT 4
9666: PPUSH
9667: CALL_OW 308
9671: IFFALSE 9682
// RemoveUnit ( i ) ;
9673: LD_VAR 0 14
9677: PPUSH
9678: CALL_OW 64
9682: GO 9615
9684: POP
9685: POP
// until not medic_list ;
9686: LD_VAR 0 18
9690: NOT
9691: IFFALSE 9555
// end ; end ;
9693: LD_VAR 0 13
9697: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9698: LD_INT 0
9700: PPUSH
9701: PPUSH
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
9706: PPUSH
9707: PPUSH
9708: PPUSH
9709: PPUSH
9710: PPUSH
// amChassisTab = [ ] ;
9711: LD_ADDR_VAR 0 19
9715: PUSH
9716: EMPTY
9717: ST_TO_ADDR
// arChassisTab = [ ] ;
9718: LD_ADDR_VAR 0 18
9722: PUSH
9723: EMPTY
9724: ST_TO_ADDR
// ruChassisTab = [ ] ;
9725: LD_ADDR_VAR 0 17
9729: PUSH
9730: EMPTY
9731: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9732: LD_INT 35
9734: PPUSH
9735: CALL_OW 67
// if nation = 1 then
9739: LD_VAR 0 5
9743: PUSH
9744: LD_INT 1
9746: EQUAL
9747: IFFALSE 10238
// begin uc_side = side ;
9749: LD_ADDR_OWVAR 20
9753: PUSH
9754: LD_VAR 0 2
9758: ST_TO_ADDR
// uc_nation = nation ;
9759: LD_ADDR_OWVAR 21
9763: PUSH
9764: LD_VAR 0 5
9768: ST_TO_ADDR
// vc_engine = vehengine ;
9769: LD_ADDR_OWVAR 39
9773: PUSH
9774: LD_VAR 0 6
9778: ST_TO_ADDR
// vc_control = vehcontrol ;
9779: LD_ADDR_OWVAR 38
9783: PUSH
9784: LD_VAR 0 7
9788: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9789: LD_ADDR_OWVAR 40
9793: PUSH
9794: LD_VAR 0 10
9798: PUSH
9799: LD_INT 1
9801: PPUSH
9802: LD_VAR 0 10
9806: PPUSH
9807: CALL_OW 12
9811: ARRAY
9812: ST_TO_ADDR
// for j = 1 to AMWeapon do
9813: LD_ADDR_VAR 0 14
9817: PUSH
9818: DOUBLE
9819: LD_INT 1
9821: DEC
9822: ST_TO_ADDR
9823: LD_VAR 0 10
9827: PUSH
9828: FOR_TO
9829: IFFALSE 10130
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9831: LD_VAR 0 10
9835: PUSH
9836: LD_VAR 0 14
9840: ARRAY
9841: PUSH
9842: LD_INT 2
9844: EQUAL
9845: PUSH
9846: LD_VAR 0 10
9850: PUSH
9851: LD_VAR 0 14
9855: ARRAY
9856: PUSH
9857: LD_INT 3
9859: EQUAL
9860: OR
9861: IFFALSE 9914
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9863: LD_ADDR_VAR 0 19
9867: PUSH
9868: LD_INT 1
9870: PUSH
9871: LD_INT 2
9873: PUSH
9874: LD_INT 3
9876: PUSH
9877: LD_INT 4
9879: PUSH
9880: LD_INT 5
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9890: LD_ADDR_OWVAR 37
9894: PUSH
9895: LD_VAR 0 19
9899: PUSH
9900: LD_INT 1
9902: PPUSH
9903: LD_VAR 0 19
9907: PPUSH
9908: CALL_OW 12
9912: ARRAY
9913: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9914: LD_VAR 0 10
9918: PUSH
9919: LD_VAR 0 14
9923: ARRAY
9924: PUSH
9925: LD_INT 4
9927: EQUAL
9928: PUSH
9929: LD_VAR 0 10
9933: PUSH
9934: LD_VAR 0 14
9938: ARRAY
9939: PUSH
9940: LD_INT 5
9942: EQUAL
9943: OR
9944: PUSH
9945: LD_VAR 0 10
9949: PUSH
9950: LD_VAR 0 14
9954: ARRAY
9955: PUSH
9956: LD_INT 9
9958: EQUAL
9959: OR
9960: PUSH
9961: LD_VAR 0 10
9965: PUSH
9966: LD_VAR 0 14
9970: ARRAY
9971: PUSH
9972: LD_INT 11
9974: EQUAL
9975: OR
9976: PUSH
9977: LD_VAR 0 10
9981: PUSH
9982: LD_VAR 0 14
9986: ARRAY
9987: PUSH
9988: LD_INT 7
9990: EQUAL
9991: OR
9992: IFFALSE 10041
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9994: LD_ADDR_VAR 0 19
9998: PUSH
9999: LD_INT 2
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 4
10007: PUSH
10008: LD_INT 5
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10017: LD_ADDR_OWVAR 37
10021: PUSH
10022: LD_VAR 0 19
10026: PUSH
10027: LD_INT 1
10029: PPUSH
10030: LD_VAR 0 19
10034: PPUSH
10035: CALL_OW 12
10039: ARRAY
10040: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10041: LD_VAR 0 10
10045: PUSH
10046: LD_VAR 0 14
10050: ARRAY
10051: PUSH
10052: LD_INT 8
10054: EQUAL
10055: PUSH
10056: LD_VAR 0 10
10060: PUSH
10061: LD_VAR 0 14
10065: ARRAY
10066: PUSH
10067: LD_INT 6
10069: EQUAL
10070: OR
10071: PUSH
10072: LD_VAR 0 10
10076: PUSH
10077: LD_VAR 0 14
10081: ARRAY
10082: PUSH
10083: LD_INT 10
10085: EQUAL
10086: OR
10087: IFFALSE 10128
// begin amChassisTab = [ 4 , 5 ] ;
10089: LD_ADDR_VAR 0 19
10093: PUSH
10094: LD_INT 4
10096: PUSH
10097: LD_INT 5
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10104: LD_ADDR_OWVAR 37
10108: PUSH
10109: LD_VAR 0 19
10113: PUSH
10114: LD_INT 1
10116: PPUSH
10117: LD_VAR 0 19
10121: PPUSH
10122: CALL_OW 12
10126: ARRAY
10127: ST_TO_ADDR
// end ; end ;
10128: GO 9828
10130: POP
10131: POP
// veh = CreateVehicle ;
10132: LD_ADDR_VAR 0 16
10136: PUSH
10137: CALL_OW 45
10141: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10142: LD_VAR 0 16
10146: PPUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: LD_INT 0
10154: PPUSH
10155: CALL_OW 49
// if vehControl = 1 then
10159: LD_VAR 0 7
10163: PUSH
10164: LD_INT 1
10166: EQUAL
10167: IFFALSE 10224
// begin hc_gallery =  ;
10169: LD_ADDR_OWVAR 33
10173: PUSH
10174: LD_STRING 
10176: ST_TO_ADDR
// hc_name =  ;
10177: LD_ADDR_OWVAR 26
10181: PUSH
10182: LD_STRING 
10184: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10185: LD_INT 0
10187: PPUSH
10188: LD_INT 3
10190: PPUSH
10191: LD_VAR 0 4
10195: PPUSH
10196: CALL_OW 380
// un = CreateHuman ;
10200: LD_ADDR_VAR 0 15
10204: PUSH
10205: CALL_OW 44
10209: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10210: LD_VAR 0 15
10214: PPUSH
10215: LD_VAR 0 16
10219: PPUSH
10220: CALL_OW 52
// end ; i = i + 1 ;
10224: LD_ADDR_VAR 0 13
10228: PUSH
10229: LD_VAR 0 13
10233: PUSH
10234: LD_INT 1
10236: PLUS
10237: ST_TO_ADDR
// end ; if nation = 2 then
10238: LD_VAR 0 5
10242: PUSH
10243: LD_INT 2
10245: EQUAL
10246: IFFALSE 10670
// begin uc_side = side ;
10248: LD_ADDR_OWVAR 20
10252: PUSH
10253: LD_VAR 0 2
10257: ST_TO_ADDR
// uc_nation = nation ;
10258: LD_ADDR_OWVAR 21
10262: PUSH
10263: LD_VAR 0 5
10267: ST_TO_ADDR
// vc_engine = vehengine ;
10268: LD_ADDR_OWVAR 39
10272: PUSH
10273: LD_VAR 0 6
10277: ST_TO_ADDR
// vc_control = vehcontrol ;
10278: LD_ADDR_OWVAR 38
10282: PUSH
10283: LD_VAR 0 7
10287: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10288: LD_ADDR_OWVAR 40
10292: PUSH
10293: LD_VAR 0 9
10297: PUSH
10298: LD_INT 1
10300: PPUSH
10301: LD_VAR 0 9
10305: PPUSH
10306: CALL_OW 12
10310: ARRAY
10311: ST_TO_ADDR
// for j = 1 to ARWeapons do
10312: LD_ADDR_VAR 0 14
10316: PUSH
10317: DOUBLE
10318: LD_INT 1
10320: DEC
10321: ST_TO_ADDR
10322: LD_VAR 0 9
10326: PUSH
10327: FOR_TO
10328: IFFALSE 10562
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10330: LD_VAR 0 9
10334: PUSH
10335: LD_VAR 0 14
10339: ARRAY
10340: PUSH
10341: LD_INT 24
10343: EQUAL
10344: PUSH
10345: LD_VAR 0 9
10349: PUSH
10350: LD_VAR 0 14
10354: ARRAY
10355: PUSH
10356: LD_INT 22
10358: EQUAL
10359: OR
10360: PUSH
10361: LD_VAR 0 9
10365: PUSH
10366: LD_VAR 0 14
10370: ARRAY
10371: PUSH
10372: LD_INT 23
10374: EQUAL
10375: OR
10376: PUSH
10377: LD_VAR 0 9
10381: PUSH
10382: LD_VAR 0 14
10386: ARRAY
10387: PUSH
10388: LD_INT 30
10390: EQUAL
10391: OR
10392: IFFALSE 10441
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10394: LD_ADDR_VAR 0 18
10398: PUSH
10399: LD_INT 11
10401: PUSH
10402: LD_INT 12
10404: PUSH
10405: LD_INT 13
10407: PUSH
10408: LD_INT 14
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10417: LD_ADDR_OWVAR 37
10421: PUSH
10422: LD_VAR 0 18
10426: PUSH
10427: LD_INT 1
10429: PPUSH
10430: LD_VAR 0 18
10434: PPUSH
10435: CALL_OW 12
10439: ARRAY
10440: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10441: LD_VAR 0 9
10445: PUSH
10446: LD_VAR 0 14
10450: ARRAY
10451: PUSH
10452: LD_INT 29
10454: EQUAL
10455: PUSH
10456: LD_VAR 0 9
10460: PUSH
10461: LD_VAR 0 14
10465: ARRAY
10466: PUSH
10467: LD_INT 28
10469: EQUAL
10470: OR
10471: PUSH
10472: LD_VAR 0 9
10476: PUSH
10477: LD_VAR 0 14
10481: ARRAY
10482: PUSH
10483: LD_INT 27
10485: EQUAL
10486: OR
10487: PUSH
10488: LD_VAR 0 9
10492: PUSH
10493: LD_VAR 0 14
10497: ARRAY
10498: PUSH
10499: LD_INT 26
10501: EQUAL
10502: OR
10503: PUSH
10504: LD_VAR 0 9
10508: PUSH
10509: LD_VAR 0 14
10513: ARRAY
10514: PUSH
10515: LD_INT 25
10517: EQUAL
10518: OR
10519: IFFALSE 10560
// begin arChassisTab = [ 13 , 14 ] ;
10521: LD_ADDR_VAR 0 18
10525: PUSH
10526: LD_INT 13
10528: PUSH
10529: LD_INT 14
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10536: LD_ADDR_OWVAR 37
10540: PUSH
10541: LD_VAR 0 18
10545: PUSH
10546: LD_INT 1
10548: PPUSH
10549: LD_VAR 0 18
10553: PPUSH
10554: CALL_OW 12
10558: ARRAY
10559: ST_TO_ADDR
// end ; end ;
10560: GO 10327
10562: POP
10563: POP
// veh = CreateVehicle ;
10564: LD_ADDR_VAR 0 16
10568: PUSH
10569: CALL_OW 45
10573: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10574: LD_VAR 0 16
10578: PPUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_INT 0
10586: PPUSH
10587: CALL_OW 49
// if vehcontrol = 1 then
10591: LD_VAR 0 7
10595: PUSH
10596: LD_INT 1
10598: EQUAL
10599: IFFALSE 10656
// begin hc_gallery =  ;
10601: LD_ADDR_OWVAR 33
10605: PUSH
10606: LD_STRING 
10608: ST_TO_ADDR
// hc_name =  ;
10609: LD_ADDR_OWVAR 26
10613: PUSH
10614: LD_STRING 
10616: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10617: LD_INT 0
10619: PPUSH
10620: LD_INT 3
10622: PPUSH
10623: LD_VAR 0 4
10627: PPUSH
10628: CALL_OW 380
// un = CreateHuman ;
10632: LD_ADDR_VAR 0 15
10636: PUSH
10637: CALL_OW 44
10641: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10642: LD_VAR 0 15
10646: PPUSH
10647: LD_VAR 0 16
10651: PPUSH
10652: CALL_OW 52
// end ; i = i + 1 ;
10656: LD_ADDR_VAR 0 13
10660: PUSH
10661: LD_VAR 0 13
10665: PUSH
10666: LD_INT 1
10668: PLUS
10669: ST_TO_ADDR
// end ; if nation = 3 then
10670: LD_VAR 0 5
10674: PUSH
10675: LD_INT 3
10677: EQUAL
10678: IFFALSE 11070
// begin uc_side = side ;
10680: LD_ADDR_OWVAR 20
10684: PUSH
10685: LD_VAR 0 2
10689: ST_TO_ADDR
// uc_nation = nation ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_VAR 0 5
10699: ST_TO_ADDR
// vc_engine = vehengine ;
10700: LD_ADDR_OWVAR 39
10704: PUSH
10705: LD_VAR 0 6
10709: ST_TO_ADDR
// vc_control = vehcontrol ;
10710: LD_ADDR_OWVAR 38
10714: PUSH
10715: LD_VAR 0 7
10719: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10720: LD_ADDR_OWVAR 40
10724: PUSH
10725: LD_VAR 0 8
10729: PUSH
10730: LD_INT 1
10732: PPUSH
10733: LD_VAR 0 8
10737: PPUSH
10738: CALL_OW 12
10742: ARRAY
10743: ST_TO_ADDR
// for j = 1 to RuWeapons do
10744: LD_ADDR_VAR 0 14
10748: PUSH
10749: DOUBLE
10750: LD_INT 1
10752: DEC
10753: ST_TO_ADDR
10754: LD_VAR 0 8
10758: PUSH
10759: FOR_TO
10760: IFFALSE 10962
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10762: LD_VAR 0 8
10766: PUSH
10767: LD_VAR 0 14
10771: ARRAY
10772: PUSH
10773: LD_INT 42
10775: EQUAL
10776: PUSH
10777: LD_VAR 0 8
10781: PUSH
10782: LD_VAR 0 14
10786: ARRAY
10787: PUSH
10788: LD_INT 43
10790: EQUAL
10791: OR
10792: PUSH
10793: LD_VAR 0 8
10797: PUSH
10798: LD_VAR 0 14
10802: ARRAY
10803: PUSH
10804: LD_INT 44
10806: EQUAL
10807: OR
10808: PUSH
10809: LD_VAR 0 8
10813: PUSH
10814: LD_VAR 0 14
10818: ARRAY
10819: PUSH
10820: LD_INT 45
10822: EQUAL
10823: OR
10824: PUSH
10825: LD_VAR 0 8
10829: PUSH
10830: LD_VAR 0 14
10834: ARRAY
10835: PUSH
10836: LD_INT 49
10838: EQUAL
10839: OR
10840: IFFALSE 10889
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10842: LD_ADDR_VAR 0 17
10846: PUSH
10847: LD_INT 21
10849: PUSH
10850: LD_INT 22
10852: PUSH
10853: LD_INT 23
10855: PUSH
10856: LD_INT 24
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10865: LD_ADDR_OWVAR 37
10869: PUSH
10870: LD_VAR 0 17
10874: PUSH
10875: LD_INT 1
10877: PPUSH
10878: LD_VAR 0 17
10882: PPUSH
10883: CALL_OW 12
10887: ARRAY
10888: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10889: LD_VAR 0 8
10893: PUSH
10894: LD_VAR 0 14
10898: ARRAY
10899: PUSH
10900: LD_INT 46
10902: EQUAL
10903: PUSH
10904: LD_VAR 0 8
10908: PUSH
10909: LD_VAR 0 14
10913: ARRAY
10914: PUSH
10915: LD_INT 47
10917: EQUAL
10918: OR
10919: IFFALSE 10960
// begin ruChassisTab = [ 23 , 24 ] ;
10921: LD_ADDR_VAR 0 17
10925: PUSH
10926: LD_INT 23
10928: PUSH
10929: LD_INT 24
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10936: LD_ADDR_OWVAR 37
10940: PUSH
10941: LD_VAR 0 17
10945: PUSH
10946: LD_INT 1
10948: PPUSH
10949: LD_VAR 0 17
10953: PPUSH
10954: CALL_OW 12
10958: ARRAY
10959: ST_TO_ADDR
// end ; end ;
10960: GO 10759
10962: POP
10963: POP
// veh = CreateVehicle ;
10964: LD_ADDR_VAR 0 16
10968: PUSH
10969: CALL_OW 45
10973: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10974: LD_VAR 0 16
10978: PPUSH
10979: LD_VAR 0 1
10983: PPUSH
10984: LD_INT 0
10986: PPUSH
10987: CALL_OW 49
// if vehcontrol = 1 then
10991: LD_VAR 0 7
10995: PUSH
10996: LD_INT 1
10998: EQUAL
10999: IFFALSE 11056
// begin hc_gallery =  ;
11001: LD_ADDR_OWVAR 33
11005: PUSH
11006: LD_STRING 
11008: ST_TO_ADDR
// hc_name =  ;
11009: LD_ADDR_OWVAR 26
11013: PUSH
11014: LD_STRING 
11016: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11017: LD_INT 0
11019: PPUSH
11020: LD_INT 3
11022: PPUSH
11023: LD_VAR 0 4
11027: PPUSH
11028: CALL_OW 380
// un = CreateHuman ;
11032: LD_ADDR_VAR 0 15
11036: PUSH
11037: CALL_OW 44
11041: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11042: LD_VAR 0 15
11046: PPUSH
11047: LD_VAR 0 16
11051: PPUSH
11052: CALL_OW 52
// end ; i = i + 1 ;
11056: LD_ADDR_VAR 0 13
11060: PUSH
11061: LD_VAR 0 13
11065: PUSH
11066: LD_INT 1
11068: PLUS
11069: ST_TO_ADDR
// end ; until i = vehCount ;
11070: LD_VAR 0 13
11074: PUSH
11075: LD_VAR 0 3
11079: EQUAL
11080: IFFALSE 9732
// repeat wait ( 0 0$1 ) ;
11082: LD_INT 35
11084: PPUSH
11085: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11089: LD_INT 22
11091: PUSH
11092: LD_VAR 0 2
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 21
11103: PUSH
11104: LD_INT 2
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 24
11113: PUSH
11114: LD_INT 250
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 3
11123: PUSH
11124: LD_INT 58
11126: PUSH
11127: EMPTY
11128: LIST
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: PPUSH
11140: CALL_OW 69
11144: PUSH
11145: LD_INT 0
11147: GREATER
11148: IFFALSE 11390
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11150: LD_ADDR_VAR 0 13
11154: PUSH
11155: LD_INT 22
11157: PUSH
11158: LD_VAR 0 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 21
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 24
11179: PUSH
11180: LD_INT 250
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: LD_INT 58
11192: PUSH
11193: EMPTY
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 69
11210: PUSH
11211: FOR_IN
11212: IFFALSE 11388
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11214: LD_ADDR_VAR 0 21
11218: PUSH
11219: LD_INT 22
11221: PUSH
11222: LD_VAR 0 11
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PPUSH
11231: CALL_OW 69
11235: PPUSH
11236: LD_VAR 0 13
11240: PPUSH
11241: CALL_OW 74
11245: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11246: LD_ADDR_VAR 0 22
11250: PUSH
11251: LD_INT 22
11253: PUSH
11254: LD_VAR 0 11
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 2
11265: PUSH
11266: LD_INT 59
11268: PUSH
11269: EMPTY
11270: LIST
11271: PUSH
11272: LD_INT 21
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 21
11284: PUSH
11285: LD_INT 2
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: PPUSH
11305: CALL_OW 69
11309: PPUSH
11310: LD_VAR 0 13
11314: PPUSH
11315: CALL_OW 74
11319: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11320: LD_VAR 0 13
11324: PPUSH
11325: LD_VAR 0 21
11329: PPUSH
11330: CALL_OW 296
11334: PUSH
11335: LD_INT 8
11337: PLUS
11338: PUSH
11339: LD_VAR 0 13
11343: PPUSH
11344: LD_VAR 0 22
11348: PPUSH
11349: CALL_OW 296
11353: LESS
11354: IFFALSE 11372
// begin ComAttackUnit ( i , target1 ) ;
11356: LD_VAR 0 13
11360: PPUSH
11361: LD_VAR 0 21
11365: PPUSH
11366: CALL_OW 115
// end else
11370: GO 11386
// begin ComAttackUnit ( i , target2 ) ;
11372: LD_VAR 0 13
11376: PPUSH
11377: LD_VAR 0 22
11381: PPUSH
11382: CALL_OW 115
// end ; end ;
11386: GO 11211
11388: POP
11389: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11390: LD_INT 22
11392: PUSH
11393: LD_VAR 0 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 21
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 24
11414: PUSH
11415: LD_INT 250
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 3
11424: PUSH
11425: LD_INT 58
11427: PUSH
11428: EMPTY
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 69
11445: PUSH
11446: LD_INT 0
11448: EQUAL
11449: IFFALSE 11082
// end ; end_of_file
11451: LD_VAR 0 12
11455: RET
// every 1 do var i , gammaSquad , startX , startY ;
11456: GO 11458
11458: DISABLE
11459: LD_INT 0
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_EXP 8
11474: PUSH
11475: LD_EXP 9
11479: PUSH
11480: LD_EXP 10
11484: PUSH
11485: LD_EXP 11
11489: PUSH
11490: LD_EXP 12
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11502: LD_ADDR_VAR 0 3
11506: PUSH
11507: LD_INT 46
11509: PUSH
11510: LD_INT 45
11512: PUSH
11513: LD_INT 44
11515: PUSH
11516: LD_INT 43
11518: PUSH
11519: LD_INT 42
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: LD_INT 14
11536: PUSH
11537: LD_INT 12
11539: PUSH
11540: LD_INT 10
11542: PUSH
11543: LD_INT 8
11545: PUSH
11546: LD_INT 6
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11556: LD_EXP 11
11560: PPUSH
11561: LD_INT 31
11563: PPUSH
11564: LD_INT 59
11566: PPUSH
11567: LD_INT 19
11569: PPUSH
11570: LD_INT 5
11572: PPUSH
11573: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11577: LD_INT 32
11579: PPUSH
11580: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11584: LD_INT 32
11586: PPUSH
11587: LD_INT 51
11589: PPUSH
11590: LD_INT 26
11592: PPUSH
11593: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11597: LD_INT 32
11599: PPUSH
11600: LD_INT 53
11602: PPUSH
11603: LD_INT 23
11605: PPUSH
11606: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11610: LD_INT 32
11612: PPUSH
11613: LD_INT 52
11615: PPUSH
11616: LD_INT 19
11618: PPUSH
11619: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11623: LD_INT 35
11625: PPUSH
11626: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11630: LD_INT 32
11632: PPUSH
11633: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11637: LD_INT 32
11639: PPUSH
11640: CALL_OW 250
11644: PUSH
11645: LD_INT 52
11647: EQUAL
11648: PUSH
11649: LD_INT 32
11651: PPUSH
11652: CALL_OW 251
11656: PUSH
11657: LD_INT 19
11659: EQUAL
11660: AND
11661: IFFALSE 11623
// ComExitVehicle ( JMM ) ;
11663: LD_EXP 1
11667: PPUSH
11668: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11672: LD_EXP 7
11676: PPUSH
11677: LD_EXP 1
11681: PPUSH
11682: CALL_OW 119
// wait ( 0 0$01 ) ;
11686: LD_INT 35
11688: PPUSH
11689: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11693: LD_EXP 1
11697: PPUSH
11698: LD_INT 46
11700: PPUSH
11701: LD_INT 10
11703: PPUSH
11704: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11708: LD_EXP 1
11712: PPUSH
11713: LD_EXP 7
11717: PPUSH
11718: CALL_OW 179
// wait ( 0 0$4 ) ;
11722: LD_INT 140
11724: PPUSH
11725: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11729: LD_EXP 1
11733: PPUSH
11734: LD_STRING D1-JMM-1
11736: PPUSH
11737: CALL_OW 88
// if not dialogue_skipped then
11741: LD_OWVAR 59
11745: NOT
11746: IFFALSE 12403
// begin for i := 1 to gammaSquad do
11748: LD_ADDR_VAR 0 1
11752: PUSH
11753: DOUBLE
11754: LD_INT 1
11756: DEC
11757: ST_TO_ADDR
11758: LD_VAR 0 2
11762: PUSH
11763: FOR_TO
11764: IFFALSE 11825
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11766: LD_VAR 0 2
11770: PUSH
11771: LD_VAR 0 1
11775: ARRAY
11776: PPUSH
11777: LD_VAR 0 3
11781: PUSH
11782: LD_VAR 0 1
11786: ARRAY
11787: PPUSH
11788: LD_VAR 0 4
11792: PUSH
11793: LD_VAR 0 1
11797: ARRAY
11798: PPUSH
11799: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11803: LD_VAR 0 2
11807: PUSH
11808: LD_VAR 0 1
11812: ARRAY
11813: PPUSH
11814: LD_EXP 1
11818: PPUSH
11819: CALL_OW 179
// end ;
11823: GO 11763
11825: POP
11826: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11827: LD_EXP 4
11831: PPUSH
11832: LD_INT 41
11834: PPUSH
11835: LD_INT 4
11837: PPUSH
11838: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11842: LD_EXP 4
11846: PPUSH
11847: LD_EXP 1
11851: PPUSH
11852: CALL_OW 179
// if Lisa = false and Bobby then
11856: LD_EXP 4
11860: PUSH
11861: LD_INT 0
11863: EQUAL
11864: PUSH
11865: LD_EXP 2
11869: AND
11870: IFFALSE 11901
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11872: LD_EXP 2
11876: PPUSH
11877: LD_INT 41
11879: PPUSH
11880: LD_INT 4
11882: PPUSH
11883: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11887: LD_EXP 2
11891: PPUSH
11892: LD_EXP 1
11896: PPUSH
11897: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11901: LD_EXP 4
11905: PUSH
11906: LD_INT 0
11908: EQUAL
11909: PUSH
11910: LD_EXP 2
11914: PUSH
11915: LD_INT 0
11917: EQUAL
11918: AND
11919: PUSH
11920: LD_EXP 3
11924: AND
11925: IFFALSE 11956
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11927: LD_EXP 3
11931: PPUSH
11932: LD_INT 41
11934: PPUSH
11935: LD_INT 4
11937: PPUSH
11938: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11942: LD_EXP 3
11946: PPUSH
11947: LD_EXP 1
11951: PPUSH
11952: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11956: LD_EXP 4
11960: PUSH
11961: LD_INT 0
11963: EQUAL
11964: PUSH
11965: LD_EXP 2
11969: PUSH
11970: LD_INT 0
11972: EQUAL
11973: AND
11974: PUSH
11975: LD_EXP 3
11979: PUSH
11980: LD_INT 0
11982: EQUAL
11983: AND
11984: IFFALSE 12015
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11986: LD_EXP 6
11990: PPUSH
11991: LD_INT 41
11993: PPUSH
11994: LD_INT 4
11996: PPUSH
11997: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
12001: LD_EXP 6
12005: PPUSH
12006: LD_EXP 1
12010: PPUSH
12011: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
12015: LD_EXP 7
12019: PPUSH
12020: LD_STRING D1-Brown-1
12022: PPUSH
12023: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
12027: LD_EXP 1
12031: PPUSH
12032: LD_STRING D1-JMM-2
12034: PPUSH
12035: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12039: LD_EXP 7
12043: PPUSH
12044: LD_STRING D1-Brown-2
12046: PPUSH
12047: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12051: LD_EXP 1
12055: PPUSH
12056: LD_EXP 9
12060: PPUSH
12061: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12065: LD_EXP 9
12069: PPUSH
12070: LD_STRING D1-FSol1-2
12072: PPUSH
12073: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12077: LD_EXP 1
12081: PPUSH
12082: LD_EXP 8
12086: PPUSH
12087: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12091: LD_EXP 8
12095: PPUSH
12096: LD_STRING D1-Sol2-2
12098: PPUSH
12099: CALL_OW 88
// if Lisa then
12103: LD_EXP 4
12107: IFFALSE 12147
// begin ComTurnUnit ( JMM , Lisa ) ;
12109: LD_EXP 1
12113: PPUSH
12114: LD_EXP 4
12118: PPUSH
12119: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12123: LD_EXP 4
12127: PPUSH
12128: LD_STRING D1-Lisa-2
12130: PPUSH
12131: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12135: LD_EXP 1
12139: PPUSH
12140: LD_STRING D1-JMM-3
12142: PPUSH
12143: CALL_OW 88
// end ; if Bobby then
12147: LD_EXP 2
12151: IFFALSE 12191
// begin ComTurnUnit ( JMM , Bobby ) ;
12153: LD_EXP 1
12157: PPUSH
12158: LD_EXP 2
12162: PPUSH
12163: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12167: LD_EXP 2
12171: PPUSH
12172: LD_STRING D1-Bobby-2
12174: PPUSH
12175: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12179: LD_EXP 1
12183: PPUSH
12184: LD_STRING D1-JMM-3
12186: PPUSH
12187: CALL_OW 88
// end ; if Cyrus then
12191: LD_EXP 3
12195: IFFALSE 12235
// begin ComTurnUnit ( JMM , Cyrus ) ;
12197: LD_EXP 1
12201: PPUSH
12202: LD_EXP 3
12206: PPUSH
12207: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12211: LD_EXP 3
12215: PPUSH
12216: LD_STRING D1-Cyrus-2
12218: PPUSH
12219: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12223: LD_EXP 1
12227: PPUSH
12228: LD_STRING D1-JMM-3
12230: PPUSH
12231: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12235: LD_EXP 1
12239: PPUSH
12240: LD_EXP 7
12244: PPUSH
12245: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12249: LD_EXP 1
12253: PPUSH
12254: LD_STRING D1-JMM-3a
12256: PPUSH
12257: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12261: LD_EXP 7
12265: PPUSH
12266: LD_INT 38
12268: PPUSH
12269: LD_INT 5
12271: PPUSH
12272: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12276: LD_EXP 7
12280: PPUSH
12281: LD_EXP 1
12285: PPUSH
12286: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12290: LD_EXP 1
12294: PPUSH
12295: LD_INT 40
12297: PPUSH
12298: LD_INT 7
12300: PPUSH
12301: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12305: LD_EXP 1
12309: PPUSH
12310: LD_EXP 7
12314: PPUSH
12315: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12319: LD_EXP 7
12323: PPUSH
12324: LD_STRING D1-Brown-3
12326: PPUSH
12327: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12331: LD_EXP 14
12335: PPUSH
12336: LD_STRING D1-Har-3
12338: PPUSH
12339: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12343: LD_EXP 1
12347: PPUSH
12348: LD_STRING D1-JMM-4
12350: PPUSH
12351: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12355: LD_EXP 14
12359: PPUSH
12360: LD_STRING D1-Har-4
12362: PPUSH
12363: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12367: LD_EXP 1
12371: PPUSH
12372: LD_STRING D1-JMM-5
12374: PPUSH
12375: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12379: LD_EXP 14
12383: PPUSH
12384: LD_STRING D1-Har-5
12386: PPUSH
12387: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12391: LD_EXP 1
12395: PPUSH
12396: LD_STRING D1-JMM-6
12398: PPUSH
12399: CALL_OW 88
// end ; InGameOff ;
12403: CALL_OW 9
// PrepareRussianConvoy ;
12407: CALL 3360 0 0
// ChangeMissionObjectives ( M1 ) ;
12411: LD_STRING M1
12413: PPUSH
12414: CALL_OW 337
// SaveForQuickRestart ;
12418: CALL_OW 22
// timerStatus = 1 ;
12422: LD_ADDR_EXP 29
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// startTimer = 1 ;
12430: LD_ADDR_EXP 30
12434: PUSH
12435: LD_INT 1
12437: ST_TO_ADDR
// bonusAvalaible = 1 ;
12438: LD_ADDR_EXP 44
12442: PUSH
12443: LD_INT 1
12445: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12446: LD_INT 105
12448: PPUSH
12449: CALL_OW 67
// DialogueOn ;
12453: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12457: LD_EXP 12
12461: PPUSH
12462: LD_STRING D9-Mech1-1
12464: PPUSH
12465: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12469: LD_EXP 1
12473: PPUSH
12474: LD_STRING D9-JMM-1
12476: PPUSH
12477: CALL_OW 88
// DialogueOff ;
12481: CALL_OW 7
// end ;
12485: PPOPN 4
12487: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12488: LD_INT 47
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 321
12498: PUSH
12499: LD_INT 2
12501: EQUAL
12502: PUSH
12503: LD_EXP 31
12507: NOT
12508: AND
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_INT 1
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 21
12522: PUSH
12523: LD_INT 3
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 30
12532: PUSH
12533: LD_INT 3
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 57
12542: PUSH
12543: EMPTY
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: PUSH
12557: LD_INT 0
12559: GREATER
12560: AND
12561: IFFALSE 12799
12563: GO 12565
12565: DISABLE
// begin factoryDialog := true ;
12566: LD_ADDR_EXP 31
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// if IsOk ( Campell ) then
12574: LD_EXP 12
12578: PPUSH
12579: CALL_OW 302
12583: IFFALSE 12599
// begin Say ( Campell , D10-Mech1-1 ) ;
12585: LD_EXP 12
12589: PPUSH
12590: LD_STRING D10-Mech1-1
12592: PPUSH
12593: CALL_OW 88
// end else
12597: GO 12799
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12599: LD_INT 22
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 25
12621: PUSH
12622: LD_INT 3
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 26
12631: PUSH
12632: LD_INT 1
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: PUSH
12650: LD_EXP 1
12654: PUSH
12655: EMPTY
12656: LIST
12657: PUSH
12658: LD_INT 0
12660: GREATER
12661: DIFF
12662: IFFALSE 12736
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12664: LD_INT 22
12666: PUSH
12667: LD_INT 1
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 21
12676: PUSH
12677: LD_INT 1
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 26
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PPUSH
12710: CALL_OW 69
12714: PUSH
12715: LD_EXP 1
12719: PUSH
12720: EMPTY
12721: LIST
12722: DIFF
12723: PPUSH
12724: LD_STRING D10-Mech1-1
12726: PPUSH
12727: LD_STRING D10-Mech1-1
12729: PPUSH
12730: CALL 4618 0 3
// end else
12734: GO 12799
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12736: LD_INT 22
12738: PUSH
12739: LD_INT 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 21
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 26
12758: PUSH
12759: LD_INT 1
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 1
12773: ARRAY
12774: PPUSH
12775: CALL_OW 69
12779: PUSH
12780: LD_EXP 1
12784: PUSH
12785: EMPTY
12786: LIST
12787: DIFF
12788: PPUSH
12789: LD_STRING D10-Mech1-1
12791: PPUSH
12792: LD_STRING D10-Mech1-1
12794: PPUSH
12795: CALL 4618 0 3
// end ; end ; end ;
12799: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12800: LD_INT 22
12802: PUSH
12803: LD_INT 1
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 30
12812: PUSH
12813: LD_INT 32
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PPUSH
12824: CALL_OW 69
12828: PUSH
12829: LD_INT 0
12831: GREATER
12832: PUSH
12833: LD_EXP 32
12837: PUSH
12838: LD_INT 0
12840: EQUAL
12841: AND
12842: IFFALSE 13082
12844: GO 12846
12846: DISABLE
// begin if IsOK ( Claptopn ) then
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 302
12856: IFFALSE 12872
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12858: LD_EXP 11
12862: PPUSH
12863: LD_STRING D9b-Eng1-1
12865: PPUSH
12866: CALL_OW 88
// end else
12870: GO 13068
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12872: LD_INT 22
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 3
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 26
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: PPUSH
12918: CALL_OW 69
12922: PUSH
12923: LD_EXP 1
12927: PUSH
12928: EMPTY
12929: LIST
12930: PUSH
12931: LD_INT 0
12933: GREATER
12934: DIFF
12935: IFFALSE 13009
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12937: LD_INT 22
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 21
12949: PUSH
12950: LD_INT 1
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 25
12959: PUSH
12960: LD_INT 2
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 26
12969: PUSH
12970: LD_INT 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: PPUSH
12983: CALL_OW 69
12987: PUSH
12988: LD_EXP 1
12992: PUSH
12993: EMPTY
12994: LIST
12995: DIFF
12996: PPUSH
12997: LD_STRING D9b-Eng1-1
12999: PPUSH
13000: LD_STRING D9b-Eng1-11
13002: PPUSH
13003: CALL 4618 0 3
// end else
13007: GO 13068
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
13009: LD_INT 22
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 21
13021: PUSH
13022: LD_INT 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 26
13031: PUSH
13032: LD_INT 1
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: LIST
13043: PPUSH
13044: CALL_OW 69
13048: PUSH
13049: LD_EXP 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: DIFF
13057: PPUSH
13058: LD_STRING D9b-Eng1-1
13060: PPUSH
13061: LD_STRING D9b-Eng1-1
13063: PPUSH
13064: CALL 4618 0 3
// end ; end ; if energyVDialog = 0 then
13068: LD_EXP 33
13072: PUSH
13073: LD_INT 0
13075: EQUAL
13076: IFFALSE 13082
// EnergyDialog ;
13078: CALL 5021 0 0
// end ;
13082: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13083: LD_EXP 34
13087: PUSH
13088: LD_INT 1
13090: EQUAL
13091: PUSH
13092: LD_EXP 35
13096: PUSH
13097: LD_INT 1
13099: EQUAL
13100: AND
13101: IFFALSE 13113
13103: GO 13105
13105: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13106: LD_STRING M1a
13108: PPUSH
13109: CALL_OW 337
13113: END
// every 3 3$0 do
13114: GO 13116
13116: DISABLE
// begin PrepareFirstAttack ;
13117: CALL 4160 0 0
// end ;
13121: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13122: LD_INT 22
13124: PUSH
13125: LD_INT 5
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 21
13134: PUSH
13135: LD_INT 1
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 3
13144: PUSH
13145: LD_INT 24
13147: PUSH
13148: LD_INT 250
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 69
13168: PUSH
13169: LD_INT 0
13171: GREATER
13172: PUSH
13173: LD_EXP 23
13177: PUSH
13178: LD_INT 1
13180: EQUAL
13181: AND
13182: IFFALSE 13483
13184: GO 13186
13186: DISABLE
13187: LD_INT 0
13189: PPUSH
// begin firstRussianAttack = 2 ;
13190: LD_ADDR_EXP 23
13194: PUSH
13195: LD_INT 2
13197: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13198: LD_INT 22
13200: PUSH
13201: LD_INT 5
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 21
13210: PUSH
13211: LD_INT 1
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PPUSH
13222: CALL_OW 69
13226: PPUSH
13227: LD_INT 125
13229: PPUSH
13230: LD_INT 98
13232: PPUSH
13233: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13237: LD_INT 22
13239: PUSH
13240: LD_INT 1
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 21
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PPUSH
13261: CALL_OW 69
13265: PUSH
13266: LD_EXP 1
13270: PUSH
13271: LD_EXP 7
13275: PUSH
13276: LD_EXP 4
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: DIFF
13286: PPUSH
13287: LD_STRING DAtt1-Sol1-1
13289: PPUSH
13290: LD_STRING DAtt1-FSol1-1
13292: PPUSH
13293: CALL 4618 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13297: LD_EXP 1
13301: PPUSH
13302: LD_STRING DAtt1-JMM-1
13304: PPUSH
13305: CALL_OW 88
// if Lisa then
13309: LD_EXP 4
13313: IFFALSE 13329
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13315: LD_EXP 4
13319: PPUSH
13320: LD_STRING DAtt1a-Lisa-1
13322: PPUSH
13323: CALL_OW 88
// end else
13327: GO 13400
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13329: LD_INT 22
13331: PUSH
13332: LD_INT 1
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 21
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 26
13351: PUSH
13352: LD_INT 1
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: PPUSH
13364: CALL_OW 69
13368: PUSH
13369: LD_EXP 1
13373: PUSH
13374: LD_EXP 7
13378: PUSH
13379: LD_EXP 4
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: DIFF
13389: PPUSH
13390: LD_STRING DAtt1a-Sol1-1
13392: PPUSH
13393: LD_STRING DAtt1-FSol1-1
13395: PPUSH
13396: CALL 4618 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13400: LD_EXP 1
13404: PPUSH
13405: LD_STRING DAtt1a-JMM-1
13407: PPUSH
13408: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13412: LD_INT 22
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 21
13424: PUSH
13425: LD_INT 1
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 26
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: PUSH
13452: LD_EXP 1
13456: PUSH
13457: LD_EXP 7
13461: PUSH
13462: LD_EXP 4
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: DIFF
13472: PPUSH
13473: LD_STRING DAtt1b-Sol1-1
13475: PPUSH
13476: LD_STRING DAtt1a-Sol1-1
13478: PPUSH
13479: CALL 4618 0 3
// end ;
13483: PPOPN 1
13485: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13486: LD_EXP 23
13490: PUSH
13491: LD_INT 2
13493: EQUAL
13494: IFFALSE 13556
13496: GO 13498
13498: DISABLE
13499: LD_INT 0
13501: PPUSH
// begin enable ;
13502: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13503: LD_ADDR_VAR 0 1
13507: PUSH
13508: LD_INT 5
13510: PPUSH
13511: LD_INT 22
13513: PUSH
13514: LD_INT 5
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 21
13523: PUSH
13524: LD_INT 1
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 70
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13554
// RemoveUnit ( i ) ;
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 64
13552: GO 13540
13554: POP
13555: POP
// end ;
13556: PPOPN 1
13558: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13559: LD_INT 22
13561: PUSH
13562: LD_INT 5
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: EMPTY
13570: LIST
13571: PPUSH
13572: CALL_OW 69
13576: PUSH
13577: LD_INT 0
13579: EQUAL
13580: PUSH
13581: LD_EXP 23
13585: PUSH
13586: LD_INT 2
13588: EQUAL
13589: AND
13590: IFFALSE 13603
13592: GO 13594
13594: DISABLE
// firstRussianAttack = 3 ;
13595: LD_ADDR_EXP 23
13599: PUSH
13600: LD_INT 3
13602: ST_TO_ADDR
13603: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13604: LD_EXP 28
13608: PUSH
13609: LD_INT 0
13611: EQUAL
13612: IFFALSE 13693
13614: GO 13616
13616: DISABLE
// begin timerStatus = 4 ;
13617: LD_ADDR_EXP 29
13621: PUSH
13622: LD_INT 4
13624: ST_TO_ADDR
// DialogueOn ;
13625: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13629: LD_EXP 13
13633: PPUSH
13634: LD_STRING D2-Don-1
13636: PPUSH
13637: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13641: LD_EXP 1
13645: PPUSH
13646: LD_STRING D2-JMM-1
13648: PPUSH
13649: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13653: LD_EXP 13
13657: PPUSH
13658: LD_STRING D2-Don-2
13660: PPUSH
13661: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13665: LD_EXP 1
13669: PPUSH
13670: LD_STRING D2-JMM-2
13672: PPUSH
13673: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13677: LD_EXP 13
13681: PPUSH
13682: LD_STRING D2-Don-3
13684: PPUSH
13685: CALL_OW 94
// DialogueOff ;
13689: CALL_OW 7
// end ;
13693: END
// every 12 12$0 do var tmp ;
13694: GO 13696
13696: DISABLE
13697: LD_INT 0
13699: PPUSH
// begin PrepareDonaldsonArmy ;
13700: CALL 1151 0 0
// CenterNowOnUnits ( Donaldson ) ;
13704: LD_EXP 13
13708: PPUSH
13709: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13713: LD_INT 22
13715: PUSH
13716: LD_INT 6
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PPUSH
13723: CALL_OW 69
13727: NOT
13728: IFFALSE 13744
// begin wait ( 3 ) ;
13730: LD_INT 3
13732: PPUSH
13733: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13737: LD_STRING ACH_BASE
13739: PPUSH
13740: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13744: LD_ADDR_VAR 0 1
13748: PUSH
13749: LD_INT 22
13751: PUSH
13752: LD_INT 4
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 21
13761: PUSH
13762: LD_INT 1
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 26
13771: PUSH
13772: LD_INT 1
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 25
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_EXP 5
13804: PUSH
13805: EMPTY
13806: LIST
13807: DIFF
13808: ST_TO_ADDR
// DialogueOn ;
13809: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_STRING D3-Sol1-1
13820: PPUSH
13821: LD_STRING D3-Sol1-1
13823: PPUSH
13824: CALL 4618 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13828: LD_INT 22
13830: PUSH
13831: LD_INT 4
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 21
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 26
13850: PUSH
13851: LD_INT 1
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 3
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: PPUSH
13879: LD_STRING D3-Sol2-1
13881: PPUSH
13882: LD_STRING D3-Sol2-1
13884: PPUSH
13885: CALL 4618 0 3
// if Frank then
13889: LD_EXP 5
13893: IFFALSE 13907
// Say ( Frank , D3-Frank-1 ) ;
13895: LD_EXP 5
13899: PPUSH
13900: LD_STRING D3-Frank-1
13902: PPUSH
13903: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13907: LD_EXP 13
13911: PPUSH
13912: LD_STRING D3-Don-1
13914: PPUSH
13915: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13919: LD_EXP 13
13923: PPUSH
13924: LD_STRING D3-Don-1a
13926: PPUSH
13927: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13931: LD_EXP 1
13935: PPUSH
13936: LD_STRING D3-JMM-1
13938: PPUSH
13939: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13943: LD_EXP 13
13947: PPUSH
13948: LD_STRING D3-Don-2
13950: PPUSH
13951: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13955: LD_INT 22
13957: PUSH
13958: LD_INT 6
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 21
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 69
13983: PUSH
13984: LD_INT 0
13986: GREATER
13987: IFFALSE 14125
// begin Say ( JMM , D3-JMM-2 ) ;
13989: LD_EXP 1
13993: PPUSH
13994: LD_STRING D3-JMM-2
13996: PPUSH
13997: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
14001: LD_EXP 13
14005: PPUSH
14006: LD_STRING D3-Don-3
14008: PPUSH
14009: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
14013: LD_EXP 1
14017: PPUSH
14018: LD_STRING D3-JMM-3
14020: PPUSH
14021: CALL_OW 88
// if IsOK ( Frank ) then
14025: LD_EXP 5
14029: PPUSH
14030: CALL_OW 302
14034: IFFALSE 14048
// Say ( Frank , D3-Frank-3 ) ;
14036: LD_EXP 5
14040: PPUSH
14041: LD_STRING D3-Frank-3
14043: PPUSH
14044: CALL_OW 88
// DialogueOff ;
14048: CALL_OW 7
// if IsOK ( Frank ) then
14052: LD_EXP 5
14056: PPUSH
14057: CALL_OW 302
14061: IFFALSE 14123
// begin SetSide ( Frank , 0 ) ;
14063: LD_EXP 5
14067: PPUSH
14068: LD_INT 0
14070: PPUSH
14071: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14075: LD_EXP 5
14079: PPUSH
14080: LD_INT 12
14082: PPUSH
14083: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14087: LD_EXP 5
14091: PPUSH
14092: LD_STRING 04t_Frank
14094: PPUSH
14095: CALL_OW 38
// Wait ( 0 0$3 ) ;
14099: LD_INT 105
14101: PPUSH
14102: CALL_OW 67
// frankScoutBase = 1 ;
14106: LD_ADDR_EXP 25
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14114: LD_EXP 5
14118: PPUSH
14119: CALL_OW 64
// end ; end else
14123: GO 14212
// begin Say ( JMM , D3-JMM-4 ) ;
14125: LD_EXP 1
14129: PPUSH
14130: LD_STRING D3-JMM-4
14132: PPUSH
14133: CALL_OW 88
// DialogueOff ;
14137: CALL_OW 7
// if IsOK ( Frank ) then
14141: LD_EXP 5
14145: PPUSH
14146: CALL_OW 302
14150: IFFALSE 14212
// begin SetSide ( Frank , 0 ) ;
14152: LD_EXP 5
14156: PPUSH
14157: LD_INT 0
14159: PPUSH
14160: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14164: LD_EXP 5
14168: PPUSH
14169: LD_INT 12
14171: PPUSH
14172: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14176: LD_EXP 5
14180: PPUSH
14181: LD_STRING 04t_Frank
14183: PPUSH
14184: CALL_OW 38
// Wait ( 0 0$3 ) ;
14188: LD_INT 105
14190: PPUSH
14191: CALL_OW 67
// frankScoutBase = 1 ;
14195: LD_ADDR_EXP 25
14199: PUSH
14200: LD_INT 1
14202: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14203: LD_EXP 5
14207: PPUSH
14208: CALL_OW 64
// end ; end ; end ;
14212: PPOPN 1
14214: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14215: LD_EXP 13
14219: PPUSH
14220: CALL_OW 255
14224: PUSH
14225: LD_INT 4
14227: EQUAL
14228: PUSH
14229: LD_EXP 13
14233: PPUSH
14234: CALL_OW 302
14238: AND
14239: IFFALSE 14373
14241: GO 14243
14243: DISABLE
14244: LD_INT 0
14246: PPUSH
14247: PPUSH
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14248: LD_EXP 13
14252: PPUSH
14253: LD_STRING D3b-Don-1
14255: PPUSH
14256: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14260: LD_ADDR_EXP 41
14264: PUSH
14265: LD_INT 1
14267: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14268: LD_ADDR_VAR 0 2
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_INT 4
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14288: LD_INT 35
14290: PPUSH
14291: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14295: LD_VAR 0 2
14299: NOT
14300: PUSH
14301: LD_INT 22
14303: PUSH
14304: LD_INT 6
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 101
14313: PUSH
14314: LD_INT 1
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: OR
14330: IFFALSE 14288
// if not tmp then
14332: LD_VAR 0 2
14336: NOT
14337: IFFALSE 14341
// exit ;
14339: GO 14373
// for i in tmp do
14341: LD_ADDR_VAR 0 1
14345: PUSH
14346: LD_VAR 0 2
14350: PUSH
14351: FOR_IN
14352: IFFALSE 14371
// ComAgressiveMove ( i , 52 , 64 ) ;
14354: LD_VAR 0 1
14358: PPUSH
14359: LD_INT 52
14361: PPUSH
14362: LD_INT 64
14364: PPUSH
14365: CALL_OW 114
14369: GO 14351
14371: POP
14372: POP
// end ;
14373: PPOPN 2
14375: END
// every 0 0$1 trigger not saveDonaldson and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_dist , JMM , 9 ] ] ) diff Frank do var i ;
14376: LD_EXP 24
14380: NOT
14381: PUSH
14382: LD_INT 22
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 91
14404: PUSH
14405: LD_EXP 1
14409: PUSH
14410: LD_INT 9
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: PPUSH
14423: CALL_OW 69
14427: PUSH
14428: LD_EXP 5
14432: DIFF
14433: AND
14434: IFFALSE 14489
14436: GO 14438
14438: DISABLE
14439: LD_INT 0
14441: PPUSH
// begin saveDonaldson := 1 ;
14442: LD_ADDR_EXP 24
14446: PUSH
14447: LD_INT 1
14449: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14450: LD_ADDR_VAR 0 1
14454: PUSH
14455: LD_INT 22
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PPUSH
14465: CALL_OW 69
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14487
// SetSide ( i , 1 ) ;
14473: LD_VAR 0 1
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 235
14485: GO 14470
14487: POP
14488: POP
// end ;
14489: PPOPN 1
14491: END
// every 0 0$1 trigger frankScoutBase do
14492: LD_EXP 25
14496: IFFALSE 14861
14498: GO 14500
14500: DISABLE
// begin wait ( 2 2$30 ) ;
14501: LD_INT 5250
14503: PPUSH
14504: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14508: LD_INT 35
14510: PPUSH
14511: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14515: LD_INT 81
14517: PUSH
14518: LD_INT 4
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 92
14527: PUSH
14528: LD_INT 84
14530: PUSH
14531: LD_INT 28
14533: PUSH
14534: LD_INT 22
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PPUSH
14547: CALL_OW 69
14551: NOT
14552: IFFALSE 14508
// uc_side = 4 ;
14554: LD_ADDR_OWVAR 20
14558: PUSH
14559: LD_INT 4
14561: ST_TO_ADDR
// uc_nation = 1 ;
14562: LD_ADDR_OWVAR 21
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14570: LD_ADDR_EXP 5
14574: PUSH
14575: LD_STRING 04t_Frank
14577: PPUSH
14578: CALL_OW 34
14582: ST_TO_ADDR
// if not Frank then
14583: LD_EXP 5
14587: NOT
14588: IFFALSE 14592
// exit ;
14590: GO 14861
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14592: LD_EXP 5
14596: PPUSH
14597: LD_INT 13
14599: PPUSH
14600: LD_INT 0
14602: PPUSH
14603: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14607: LD_INT 35
14609: PPUSH
14610: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14614: LD_EXP 1
14618: PPUSH
14619: CALL_OW 310
14623: NOT
14624: PUSH
14625: LD_EXP 1
14629: PPUSH
14630: LD_INT 4
14632: PPUSH
14633: CALL_OW 296
14637: PUSH
14638: LD_INT 20
14640: LESS
14641: AND
14642: IFFALSE 14675
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14644: LD_EXP 5
14648: PPUSH
14649: LD_EXP 1
14653: PPUSH
14654: CALL_OW 250
14658: PPUSH
14659: LD_EXP 1
14663: PPUSH
14664: CALL_OW 251
14668: PPUSH
14669: CALL_OW 111
14673: GO 14690
// ComMoveXY ( Frank , 51 , 15 ) ;
14675: LD_EXP 5
14679: PPUSH
14680: LD_INT 51
14682: PPUSH
14683: LD_INT 15
14685: PPUSH
14686: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14690: LD_EXP 5
14694: PPUSH
14695: LD_EXP 1
14699: PPUSH
14700: CALL_OW 296
14704: PUSH
14705: LD_INT 10
14707: LESS
14708: IFFALSE 14607
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14710: LD_EXP 1
14714: PUSH
14715: LD_EXP 5
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 87
// DialogueOn ;
14728: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14732: LD_EXP 5
14736: PPUSH
14737: LD_STRING D3a-Frank-1
14739: PPUSH
14740: CALL_OW 88
// if Lisa then
14744: LD_EXP 4
14748: IFFALSE 14798
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14750: LD_EXP 4
14754: PPUSH
14755: LD_STRING D3a-Lisa-1
14757: PPUSH
14758: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14762: LD_EXP 5
14766: PPUSH
14767: LD_STRING D3a-Frank-2
14769: PPUSH
14770: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14774: LD_EXP 4
14778: PPUSH
14779: LD_STRING D3a-Lisa-2
14781: PPUSH
14782: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14786: LD_EXP 5
14790: PPUSH
14791: LD_STRING D3a-Frank-3
14793: PPUSH
14794: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14798: LD_EXP 1
14802: PPUSH
14803: LD_STRING D3a-JMM-3
14805: PPUSH
14806: CALL_OW 88
// DialogueOff ;
14810: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14814: LD_EXP 5
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: CALL_OW 235
// InGameOn ;
14826: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14830: LD_INT 1
14832: PPUSH
14833: LD_INT 7
14835: PPUSH
14836: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14840: LD_INT 93
14842: PPUSH
14843: LD_INT 91
14845: PPUSH
14846: CALL_OW 84
// wait ( 0 0$5 ) ;
14850: LD_INT 175
14852: PPUSH
14853: CALL_OW 67
// InGameOff ;
14857: CALL_OW 9
// end ;
14861: END
// every 12 12$0 trigger Difficulty > 1 do
14862: LD_OWVAR 67
14866: PUSH
14867: LD_INT 1
14869: GREATER
14870: IFFALSE 14894
14872: GO 14874
14874: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14875: LD_INT 24
14877: PPUSH
14878: LD_INT 24
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: LD_INT 53
14889: PPUSH
14890: CALL_OW 185
14894: END
// every 18 18$0 do
14895: GO 14897
14897: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14898: LD_EXP 14
14902: PPUSH
14903: LD_STRING D4-Har-1
14905: PPUSH
14906: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14910: LD_EXP 1
14914: PPUSH
14915: LD_STRING D4-JMM-1
14917: PPUSH
14918: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14922: LD_EXP 14
14926: PPUSH
14927: LD_STRING D4-Har-2
14929: PPUSH
14930: CALL_OW 94
// case query ( Q1 ) of 1 :
14934: LD_STRING Q1
14936: PPUSH
14937: CALL_OW 97
14941: PUSH
14942: LD_INT 1
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 15009
14950: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14951: LD_EXP 1
14955: PPUSH
14956: LD_STRING D5-JMM-1
14958: PPUSH
14959: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14963: LD_EXP 14
14967: PPUSH
14968: LD_STRING D5-Har-1
14970: PPUSH
14971: CALL_OW 94
// timeToSupport = 10 10$0 ;
14975: LD_ADDR_EXP 28
14979: PUSH
14980: LD_INT 21000
14982: ST_TO_ADDR
// timerStatus = 2 ;
14983: LD_ADDR_EXP 29
14987: PUSH
14988: LD_INT 2
14990: ST_TO_ADDR
// startTimer = 1 ;
14991: LD_ADDR_EXP 30
14995: PUSH
14996: LD_INT 1
14998: ST_TO_ADDR
// harrAnswer = 1 ;
14999: LD_ADDR_EXP 26
15003: PUSH
15004: LD_INT 1
15006: ST_TO_ADDR
// end ; 2 :
15007: GO 15144
15009: LD_INT 2
15011: DOUBLE
15012: EQUAL
15013: IFTRUE 15017
15015: GO 15076
15017: POP
// begin Say ( JMM , D5-JMM-2 ) ;
15018: LD_EXP 1
15022: PPUSH
15023: LD_STRING D5-JMM-2
15025: PPUSH
15026: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
15030: LD_EXP 14
15034: PPUSH
15035: LD_STRING D5-Har-2
15037: PPUSH
15038: CALL_OW 94
// timeToSupport = 5 5$0 ;
15042: LD_ADDR_EXP 28
15046: PUSH
15047: LD_INT 10500
15049: ST_TO_ADDR
// timerStatus = 2 ;
15050: LD_ADDR_EXP 29
15054: PUSH
15055: LD_INT 2
15057: ST_TO_ADDR
// startTimer = 1 ;
15058: LD_ADDR_EXP 30
15062: PUSH
15063: LD_INT 1
15065: ST_TO_ADDR
// harrAnswer = 2 ;
15066: LD_ADDR_EXP 26
15070: PUSH
15071: LD_INT 2
15073: ST_TO_ADDR
// end ; 3 :
15074: GO 15144
15076: LD_INT 3
15078: DOUBLE
15079: EQUAL
15080: IFTRUE 15084
15082: GO 15143
15084: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15085: LD_EXP 1
15089: PPUSH
15090: LD_STRING D5-JMM-3
15092: PPUSH
15093: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15097: LD_EXP 14
15101: PPUSH
15102: LD_STRING D5-Har-3
15104: PPUSH
15105: CALL_OW 94
// timeToSupport = 5 5$0 ;
15109: LD_ADDR_EXP 28
15113: PUSH
15114: LD_INT 10500
15116: ST_TO_ADDR
// timerStatus = 2 ;
15117: LD_ADDR_EXP 29
15121: PUSH
15122: LD_INT 2
15124: ST_TO_ADDR
// startTimer = 1 ;
15125: LD_ADDR_EXP 30
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// harrAnswer = 3 ;
15133: LD_ADDR_EXP 26
15137: PUSH
15138: LD_INT 3
15140: ST_TO_ADDR
// end ; end ;
15141: GO 15144
15143: POP
// end ;
15144: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15145: LD_EXP 29
15149: PUSH
15150: LD_INT 2
15152: EQUAL
15153: PUSH
15154: LD_EXP 28
15158: PUSH
15159: LD_INT 0
15161: EQUAL
15162: AND
15163: IFFALSE 15440
15165: GO 15167
15167: DISABLE
// begin timerStatus = 4 ;
15168: LD_ADDR_EXP 29
15172: PUSH
15173: LD_INT 4
15175: ST_TO_ADDR
// if harrAnswer = 1 then
15176: LD_EXP 26
15180: PUSH
15181: LD_INT 1
15183: EQUAL
15184: IFFALSE 15264
// begin PrepareHarrisonSupport ( 3 ) ;
15186: LD_INT 3
15188: PPUSH
15189: CALL 1721 0 1
// wait ( 1 1$0 ) ;
15193: LD_INT 2100
15195: PPUSH
15196: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15200: LD_EXP 14
15204: PPUSH
15205: LD_STRING D7-Har-1
15207: PPUSH
15208: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15212: LD_STRING M2
15214: PPUSH
15215: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15219: LD_ADDR_EXP 27
15223: PUSH
15224: LD_INT 31500
15226: PUSH
15227: LD_INT 10500
15229: PUSH
15230: LD_INT 8400
15232: PUSH
15233: LD_INT 6300
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: LD_OWVAR 67
15245: ARRAY
15246: PLUS
15247: ST_TO_ADDR
// startTimer = 1 ;
15248: LD_ADDR_EXP 30
15252: PUSH
15253: LD_INT 1
15255: ST_TO_ADDR
// timerStatus = 3 ;
15256: LD_ADDR_EXP 29
15260: PUSH
15261: LD_INT 3
15263: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15264: LD_EXP 26
15268: PUSH
15269: LD_INT 2
15271: EQUAL
15272: IFFALSE 15352
// begin PrepareHarrisonSupport ( 4 ) ;
15274: LD_INT 4
15276: PPUSH
15277: CALL 1721 0 1
// wait ( 1 1$0 ) ;
15281: LD_INT 2100
15283: PPUSH
15284: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15288: LD_EXP 14
15292: PPUSH
15293: LD_STRING D7-Har-1
15295: PPUSH
15296: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15300: LD_STRING M2
15302: PPUSH
15303: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15307: LD_ADDR_EXP 27
15311: PUSH
15312: LD_INT 33600
15314: PUSH
15315: LD_INT 10500
15317: PUSH
15318: LD_INT 8400
15320: PUSH
15321: LD_INT 6300
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: PUSH
15329: LD_OWVAR 67
15333: ARRAY
15334: PLUS
15335: ST_TO_ADDR
// startTimer = 1 ;
15336: LD_ADDR_EXP 30
15340: PUSH
15341: LD_INT 1
15343: ST_TO_ADDR
// timerStatus = 3 ;
15344: LD_ADDR_EXP 29
15348: PUSH
15349: LD_INT 3
15351: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15352: LD_EXP 26
15356: PUSH
15357: LD_INT 3
15359: EQUAL
15360: IFFALSE 15440
// begin PrepareHarrisonSupport ( 5 ) ;
15362: LD_INT 5
15364: PPUSH
15365: CALL 1721 0 1
// wait ( 1 1$0 ) ;
15369: LD_INT 2100
15371: PPUSH
15372: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15376: LD_EXP 14
15380: PPUSH
15381: LD_STRING D7-Har-1
15383: PPUSH
15384: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15388: LD_STRING M2
15390: PPUSH
15391: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15395: LD_ADDR_EXP 27
15399: PUSH
15400: LD_INT 35700
15402: PUSH
15403: LD_INT 10500
15405: PUSH
15406: LD_INT 6300
15408: PUSH
15409: LD_INT 4200
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: PUSH
15417: LD_OWVAR 67
15421: ARRAY
15422: PLUS
15423: ST_TO_ADDR
// startTimer = 1 ;
15424: LD_ADDR_EXP 30
15428: PUSH
15429: LD_INT 1
15431: ST_TO_ADDR
// timerStatus = 3 ;
15432: LD_ADDR_EXP 29
15436: PUSH
15437: LD_INT 3
15439: ST_TO_ADDR
// end ; end ;
15440: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15441: LD_EXP 27
15445: PUSH
15446: LD_INT 8400
15448: LESSEQUAL
15449: PUSH
15450: LD_EXP 29
15454: PUSH
15455: LD_INT 3
15457: EQUAL
15458: AND
15459: IFFALSE 15491
15461: GO 15463
15463: DISABLE
// begin DialogueOn ;
15464: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15468: LD_EXP 14
15472: PPUSH
15473: LD_STRING D7a-Har-1
15475: PPUSH
15476: CALL_OW 94
// DialogueOff ;
15480: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15484: LD_STRING M2a
15486: PPUSH
15487: CALL_OW 337
// end ;
15491: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15492: LD_EXP 27
15496: PUSH
15497: LD_INT 0
15499: LESSEQUAL
15500: PUSH
15501: LD_EXP 29
15505: PUSH
15506: LD_INT 3
15508: EQUAL
15509: AND
15510: PUSH
15511: LD_EXP 40
15515: NOT
15516: AND
15517: IFFALSE 15656
15519: GO 15521
15521: DISABLE
15522: LD_INT 0
15524: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15525: LD_ADDR_VAR 0 1
15529: PUSH
15530: LD_INT 22
15532: PUSH
15533: LD_INT 1
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: PUSH
15545: LD_EXP 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: DIFF
15553: ST_TO_ADDR
// saveDonaldson = 2 ;
15554: LD_ADDR_EXP 24
15558: PUSH
15559: LD_INT 2
15561: ST_TO_ADDR
// DialogueOn ;
15562: CALL_OW 6
// if IsOK ( Donaldson ) then
15566: LD_EXP 13
15570: PPUSH
15571: CALL_OW 302
15575: IFFALSE 15591
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15577: LD_EXP 14
15581: PPUSH
15582: LD_STRING D8-Har-1
15584: PPUSH
15585: CALL_OW 94
// end else
15589: GO 15603
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15591: LD_EXP 14
15595: PPUSH
15596: LD_STRING D8-Har-1a
15598: PPUSH
15599: CALL_OW 94
// end ; DialogueOff ;
15603: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15607: LD_VAR 0 1
15611: PPUSH
15612: LD_INT 4
15614: PPUSH
15615: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15619: LD_VAR 0 1
15623: PPUSH
15624: LD_INT 88
15626: PPUSH
15627: LD_INT 89
15629: PPUSH
15630: CALL_OW 114
// honor = 0 ;
15634: LD_ADDR_EXP 39
15638: PUSH
15639: LD_INT 0
15641: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15642: LD_INT 350
15644: PPUSH
15645: CALL_OW 67
// YouLost ( LostCommand ) ;
15649: LD_STRING LostCommand
15651: PPUSH
15652: CALL_OW 104
// end ;
15656: PPOPN 1
15658: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15659: LD_INT 22
15661: PUSH
15662: LD_INT 6
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 21
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 69
15687: PUSH
15688: LD_INT 0
15690: EQUAL
15691: PUSH
15692: LD_EXP 20
15696: PUSH
15697: LD_INT 0
15699: EQUAL
15700: AND
15701: PUSH
15702: LD_EXP 44
15706: PUSH
15707: LD_INT 1
15709: EQUAL
15710: AND
15711: IFFALSE 15805
15713: GO 15715
15715: DISABLE
15716: LD_INT 0
15718: PPUSH
15719: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15720: LD_ADDR_VAR 0 2
15724: PUSH
15725: LD_INT 22
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 21
15737: PUSH
15738: LD_INT 1
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 23
15747: PUSH
15748: LD_INT 1
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 69
15764: ST_TO_ADDR
// for i in tmp do
15765: LD_ADDR_VAR 0 1
15769: PUSH
15770: LD_VAR 0 2
15774: PUSH
15775: FOR_IN
15776: IFFALSE 15803
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15778: LD_VAR 0 1
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: LD_INT 4
15788: PPUSH
15789: CALL_OW 12
15793: PPUSH
15794: LD_INT 500
15796: PPUSH
15797: CALL_OW 492
// end ;
15801: GO 15775
15803: POP
15804: POP
// end ; end_of_file
15805: PPOPN 2
15807: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15808: GO 15810
15810: DISABLE
15811: LD_INT 0
15813: PPUSH
// begin enemyWayX = [ ] ;
15814: LD_ADDR_EXP 50
15818: PUSH
15819: EMPTY
15820: ST_TO_ADDR
// enemyWayY = [ ] ;
15821: LD_ADDR_EXP 51
15825: PUSH
15826: EMPTY
15827: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15828: LD_ADDR_VAR 0 1
15832: PUSH
15833: LD_INT 1
15835: PPUSH
15836: LD_INT 3
15838: PPUSH
15839: CALL_OW 12
15843: ST_TO_ADDR
// if rnd = 1 then
15844: LD_VAR 0 1
15848: PUSH
15849: LD_INT 1
15851: EQUAL
15852: IFFALSE 15892
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15854: LD_ADDR_EXP 50
15858: PUSH
15859: LD_INT 73
15861: PUSH
15862: LD_INT 46
15864: PUSH
15865: LD_INT 29
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15873: LD_ADDR_EXP 51
15877: PUSH
15878: LD_INT 71
15880: PUSH
15881: LD_INT 43
15883: PUSH
15884: LD_INT 29
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: ST_TO_ADDR
// end ; if rnd = 2 then
15892: LD_VAR 0 1
15896: PUSH
15897: LD_INT 2
15899: EQUAL
15900: IFFALSE 15924
// begin enemyWayX = [ 64 ] ;
15902: LD_ADDR_EXP 50
15906: PUSH
15907: LD_INT 64
15909: PUSH
15910: EMPTY
15911: LIST
15912: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15913: LD_ADDR_EXP 51
15917: PUSH
15918: LD_INT 43
15920: PUSH
15921: EMPTY
15922: LIST
15923: ST_TO_ADDR
// end ; if rnd = 3 then
15924: LD_VAR 0 1
15928: PUSH
15929: LD_INT 3
15931: EQUAL
15932: IFFALSE 15956
// begin enemyWayX = [ 80 ] ;
15934: LD_ADDR_EXP 50
15938: PUSH
15939: LD_INT 80
15941: PUSH
15942: EMPTY
15943: LIST
15944: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15945: LD_ADDR_EXP 51
15949: PUSH
15950: LD_INT 28
15952: PUSH
15953: EMPTY
15954: LIST
15955: ST_TO_ADDR
// end ; enable ;
15956: ENABLE
// end ;
15957: PPOPN 1
15959: END
// every 0 0$1 trigger AIEnable = 1 do
15960: LD_EXP 37
15964: PUSH
15965: LD_INT 1
15967: EQUAL
15968: IFFALSE 16082
15970: GO 15972
15972: DISABLE
// begin enable ;
15973: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15974: LD_INT 3
15976: PPUSH
15977: LD_INT 21
15979: PPUSH
15980: LD_INT 7
15982: PPUSH
15983: CALL 6054 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15987: LD_INT 3
15989: PPUSH
15990: LD_INT 8
15992: PPUSH
15993: LD_INT 7
15995: PPUSH
15996: LD_INT 1
15998: PPUSH
15999: CALL 6375 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
16003: LD_INT 3
16005: PPUSH
16006: LD_INT 17
16008: PPUSH
16009: LD_INT 108
16011: PPUSH
16012: LD_INT 95
16014: PPUSH
16015: CALL 7699 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
16019: LD_INT 3
16021: PPUSH
16022: LD_INT 23
16024: PPUSH
16025: LD_EXP 50
16029: PPUSH
16030: LD_EXP 51
16034: PPUSH
16035: CALL 7031 0 4
// if baseReadyToBuild = 2 then
16039: LD_EXP 20
16043: PUSH
16044: LD_INT 2
16046: EQUAL
16047: IFFALSE 16082
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16049: LD_INT 6
16051: PPUSH
16052: LD_EXP 21
16056: PPUSH
16057: LD_INT 6
16059: PPUSH
16060: CALL 6054 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16064: LD_INT 6
16066: PPUSH
16067: LD_INT 9
16069: PPUSH
16070: LD_INT 6
16072: PPUSH
16073: LD_EXP 22
16077: PPUSH
16078: CALL 6375 0 4
// end ; end ;
16082: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16083: LD_EXP 15
16087: PPUSH
16088: CALL_OW 310
16092: NOT
16093: PUSH
16094: LD_INT 21
16096: PPUSH
16097: CALL_OW 302
16101: AND
16102: PUSH
16103: LD_INT 21
16105: PPUSH
16106: CALL_OW 255
16110: PUSH
16111: LD_INT 3
16113: EQUAL
16114: AND
16115: IFFALSE 16133
16117: GO 16119
16119: DISABLE
// begin enable ;
16120: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16121: LD_EXP 15
16125: PPUSH
16126: LD_INT 21
16128: PPUSH
16129: CALL_OW 120
// end ;
16133: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16134: LD_INT 22
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 21
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 55
16156: PUSH
16157: EMPTY
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: PUSH
16170: LD_INT 0
16172: EQUAL
16173: PUSH
16174: LD_INT 1
16176: PPUSH
16177: CALL_OW 255
16181: PUSH
16182: LD_INT 3
16184: EQUAL
16185: AND
16186: PUSH
16187: LD_INT 21
16189: PPUSH
16190: CALL_OW 302
16194: AND
16195: PUSH
16196: LD_INT 21
16198: PPUSH
16199: CALL_OW 255
16203: PUSH
16204: LD_INT 3
16206: EQUAL
16207: AND
16208: PUSH
16209: LD_INT 21
16211: PPUSH
16212: CALL_OW 302
16216: AND
16217: IFFALSE 16429
16219: GO 16221
16221: DISABLE
// begin enable ;
16222: ENABLE
// if Difficulty = 1 then
16223: LD_OWVAR 67
16227: PUSH
16228: LD_INT 1
16230: EQUAL
16231: IFFALSE 16275
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16233: LD_INT 3
16235: PPUSH
16236: LD_INT 24
16238: PPUSH
16239: LD_OWVAR 67
16243: PUSH
16244: LD_INT 2
16246: PLUS
16247: PPUSH
16248: LD_INT 42
16250: PUSH
16251: LD_INT 44
16253: PUSH
16254: LD_INT 43
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: PPUSH
16262: LD_INT 1
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: LD_INT 21
16270: PPUSH
16271: CALL 6919 0 7
// if Difficulty = 2 then
16275: LD_OWVAR 67
16279: PUSH
16280: LD_INT 2
16282: EQUAL
16283: IFFALSE 16350
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16285: LD_INT 3
16287: PPUSH
16288: LD_INT 24
16290: PPUSH
16291: LD_OWVAR 67
16295: PUSH
16296: LD_INT 2
16298: PLUS
16299: PPUSH
16300: LD_INT 44
16302: PUSH
16303: LD_INT 44
16305: PUSH
16306: LD_INT 43
16308: PUSH
16309: LD_INT 43
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: PPUSH
16318: LD_INT 1
16320: PPUSH
16321: LD_INT 1
16323: PPUSH
16324: LD_INT 21
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 1
16336: PPUSH
16337: LD_INT 2
16339: PPUSH
16340: CALL_OW 12
16344: ARRAY
16345: PPUSH
16346: CALL 6919 0 7
// if Difficulty = 3 then
16350: LD_OWVAR 67
16354: PUSH
16355: LD_INT 3
16357: EQUAL
16358: IFFALSE 16429
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16360: LD_INT 3
16362: PPUSH
16363: LD_INT 24
16365: PPUSH
16366: LD_OWVAR 67
16370: PUSH
16371: LD_INT 2
16373: PPUSH
16374: LD_INT 3
16376: PPUSH
16377: CALL_OW 12
16381: PLUS
16382: PPUSH
16383: LD_INT 44
16385: PUSH
16386: LD_INT 44
16388: PUSH
16389: LD_INT 43
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: PPUSH
16397: LD_INT 1
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: LD_INT 22
16405: PUSH
16406: LD_INT 23
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 1
16415: PPUSH
16416: LD_INT 2
16418: PPUSH
16419: CALL_OW 12
16423: ARRAY
16424: PPUSH
16425: CALL 6919 0 7
// end ;
16429: END
// every 0 0$1 do
16430: GO 16432
16432: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16433: LD_INT 3
16435: PPUSH
16436: LD_INT 1
16438: PPUSH
16439: LD_INT 3
16441: PPUSH
16442: CALL 5969 0 3
16446: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16447: LD_EXP 20
16451: PUSH
16452: LD_INT 1
16454: EQUAL
16455: IFFALSE 16602
16457: GO 16459
16459: DISABLE
16460: LD_INT 0
16462: PPUSH
16463: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_INT 22
16471: PUSH
16472: LD_INT 6
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 21
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 34
16491: PUSH
16492: LD_INT 51
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: PPUSH
16504: CALL_OW 69
16508: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16509: LD_VAR 0 2
16513: PUSH
16514: LD_INT 1
16516: ARRAY
16517: PPUSH
16518: LD_EXP 21
16522: PPUSH
16523: CALL_OW 250
16527: PUSH
16528: LD_INT 5
16530: MINUS
16531: PPUSH
16532: LD_EXP 21
16536: PPUSH
16537: CALL_OW 251
16541: PUSH
16542: LD_INT 5
16544: MINUS
16545: PPUSH
16546: CALL_OW 111
// wait ( 0 0$5 ) ;
16550: LD_INT 175
16552: PPUSH
16553: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16557: LD_VAR 0 2
16561: PUSH
16562: LD_INT 1
16564: ARRAY
16565: PPUSH
16566: LD_INT 41
16568: PPUSH
16569: LD_INT 52
16571: PPUSH
16572: CALL_OW 177
// wait ( 0 0$40 ) ;
16576: LD_INT 1400
16578: PPUSH
16579: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16583: LD_VAR 0 2
16587: PUSH
16588: LD_INT 1
16590: ARRAY
16591: PPUSH
16592: LD_INT 41
16594: PPUSH
16595: LD_INT 44
16597: PPUSH
16598: CALL_OW 111
// end ;
16602: PPOPN 2
16604: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16605: LD_EXP 21
16609: PPUSH
16610: CALL_OW 274
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 275
16622: PUSH
16623: LD_INT 100
16625: GREATEREQUAL
16626: IFFALSE 16854
16628: GO 16630
16630: DISABLE
16631: LD_INT 0
16633: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16634: LD_ADDR_VAR 0 1
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_INT 6
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 21
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 25
16661: PUSH
16662: LD_INT 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16679: LD_VAR 0 1
16683: PUSH
16684: LD_INT 1
16686: ARRAY
16687: PPUSH
16688: LD_INT 4
16690: PPUSH
16691: LD_INT 39
16693: PPUSH
16694: LD_INT 37
16696: PPUSH
16697: LD_INT 3
16699: PPUSH
16700: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16704: LD_VAR 0 1
16708: PUSH
16709: LD_INT 1
16711: ARRAY
16712: PPUSH
16713: LD_INT 29
16715: PPUSH
16716: LD_INT 42
16718: PPUSH
16719: LD_INT 54
16721: PPUSH
16722: LD_INT 3
16724: PPUSH
16725: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16729: LD_VAR 0 1
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: LD_INT 6
16740: PPUSH
16741: LD_INT 38
16743: PPUSH
16744: LD_INT 48
16746: PPUSH
16747: LD_INT 0
16749: PPUSH
16750: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16754: LD_VAR 0 1
16758: PUSH
16759: LD_INT 1
16761: ARRAY
16762: PPUSH
16763: LD_INT 2
16765: PPUSH
16766: LD_INT 32
16768: PPUSH
16769: LD_INT 38
16771: PPUSH
16772: LD_INT 2
16774: PPUSH
16775: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16779: LD_VAR 0 1
16783: PUSH
16784: LD_INT 1
16786: ARRAY
16787: PPUSH
16788: LD_INT 26
16790: PPUSH
16791: LD_INT 39
16793: PPUSH
16794: LD_INT 55
16796: PPUSH
16797: LD_INT 3
16799: PPUSH
16800: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16804: LD_VAR 0 1
16808: PUSH
16809: LD_INT 1
16811: ARRAY
16812: PPUSH
16813: LD_INT 32
16815: PPUSH
16816: LD_INT 31
16818: PPUSH
16819: LD_INT 31
16821: PPUSH
16822: LD_INT 3
16824: PPUSH
16825: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16829: LD_VAR 0 1
16833: PUSH
16834: LD_INT 1
16836: ARRAY
16837: PPUSH
16838: LD_INT 31
16840: PPUSH
16841: LD_INT 50
16843: PPUSH
16844: LD_INT 51
16846: PPUSH
16847: LD_INT 4
16849: PPUSH
16850: CALL_OW 205
// end ;
16854: PPOPN 1
16856: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16857: LD_EXP 46
16861: IFFALSE 17418
16863: GO 16865
16865: DISABLE
16866: LD_INT 0
16868: PPUSH
16869: PPUSH
16870: PPUSH
// begin enable ;
16871: ENABLE
// if not ruMobile then
16872: LD_EXP 46
16876: NOT
16877: IFFALSE 16881
// exit ;
16879: GO 17418
// for i in ruMobile do
16881: LD_ADDR_VAR 0 1
16885: PUSH
16886: LD_EXP 46
16890: PUSH
16891: FOR_IN
16892: IFFALSE 17416
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16894: LD_VAR 0 1
16898: PPUSH
16899: CALL_OW 302
16903: NOT
16904: PUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 255
16914: PUSH
16915: LD_INT 3
16917: NONEQUAL
16918: OR
16919: IFFALSE 16939
// begin ruMobile := ruMobile diff i ;
16921: LD_ADDR_EXP 46
16925: PUSH
16926: LD_EXP 46
16930: PUSH
16931: LD_VAR 0 1
16935: DIFF
16936: ST_TO_ADDR
// continue ;
16937: GO 16891
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 110
16948: NOT
16949: PUSH
16950: LD_VAR 0 1
16954: PPUSH
16955: CALL_OW 110
16959: PUSH
16960: LD_INT 0
16962: EQUAL
16963: OR
16964: IFFALSE 17079
// begin if GetFuel ( i ) < 50 then
16966: LD_VAR 0 1
16970: PPUSH
16971: CALL_OW 261
16975: PUSH
16976: LD_INT 50
16978: LESS
16979: IFFALSE 17038
// begin ComMoveXY ( i , 106 , 88 ) ;
16981: LD_VAR 0 1
16985: PPUSH
16986: LD_INT 106
16988: PPUSH
16989: LD_INT 88
16991: PPUSH
16992: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16996: LD_INT 35
16998: PPUSH
16999: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
17003: LD_VAR 0 1
17007: PPUSH
17008: LD_INT 106
17010: PPUSH
17011: LD_INT 88
17013: PPUSH
17014: CALL_OW 297
17018: PUSH
17019: LD_INT 4
17021: LESS
17022: IFFALSE 16996
// SetFuel ( i , 100 ) ;
17024: LD_VAR 0 1
17028: PPUSH
17029: LD_INT 100
17031: PPUSH
17032: CALL_OW 240
// end else
17036: GO 17079
// if not IsInArea ( i , ruParking ) then
17038: LD_VAR 0 1
17042: PPUSH
17043: LD_INT 25
17045: PPUSH
17046: CALL_OW 308
17050: NOT
17051: IFFALSE 17067
// ComMoveToArea ( i , ruParking ) else
17053: LD_VAR 0 1
17057: PPUSH
17058: LD_INT 25
17060: PPUSH
17061: CALL_OW 113
17065: GO 17079
// SetTag ( i , 1 ) ;
17067: LD_VAR 0 1
17071: PPUSH
17072: LD_INT 1
17074: PPUSH
17075: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 110
17088: PUSH
17089: LD_INT 1
17091: EQUAL
17092: IFFALSE 17222
// begin if GetLives ( i ) < 1000 then
17094: LD_VAR 0 1
17098: PPUSH
17099: CALL_OW 256
17103: PUSH
17104: LD_INT 1000
17106: LESS
17107: IFFALSE 17199
// begin if not IsDrivenBy ( i ) then
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 311
17118: NOT
17119: IFFALSE 17123
// continue ;
17121: GO 16891
// mech := IsDrivenBy ( i ) ;
17123: LD_ADDR_VAR 0 2
17127: PUSH
17128: LD_VAR 0 1
17132: PPUSH
17133: CALL_OW 311
17137: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17138: LD_VAR 0 2
17142: PPUSH
17143: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17147: LD_VAR 0 2
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17161: LD_INT 35
17163: PPUSH
17164: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17168: LD_VAR 0 1
17172: PPUSH
17173: CALL_OW 256
17177: PUSH
17178: LD_INT 1000
17180: EQUAL
17181: IFFALSE 17161
// ComEnterUnit ( mech , i ) ;
17183: LD_VAR 0 2
17187: PPUSH
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 120
// end else
17197: GO 17222
// if IsDrivenBy ( i ) then
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 311
17208: IFFALSE 17222
// SetTag ( i , 2 ) ;
17210: LD_VAR 0 1
17214: PPUSH
17215: LD_INT 2
17217: PPUSH
17218: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 110
17231: PUSH
17232: LD_INT 2
17234: EQUAL
17235: IFFALSE 17414
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17237: LD_ADDR_VAR 0 3
17241: PUSH
17242: LD_INT 24
17244: PPUSH
17245: LD_INT 81
17247: PUSH
17248: LD_INT 3
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PPUSH
17255: CALL_OW 70
17259: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 256
17269: PUSH
17270: LD_INT 650
17272: LESS
17273: IFFALSE 17298
// begin ComStop ( i ) ;
17275: LD_VAR 0 1
17279: PPUSH
17280: CALL_OW 141
// SetTag ( i , 0 ) ;
17284: LD_VAR 0 1
17288: PPUSH
17289: LD_INT 0
17291: PPUSH
17292: CALL_OW 109
// continue ;
17296: GO 16891
// end ; if enemy then
17298: LD_VAR 0 3
17302: IFFALSE 17342
// begin if not HasTask ( i ) then
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 314
17313: NOT
17314: IFFALSE 17340
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17316: LD_VAR 0 1
17320: PPUSH
17321: LD_VAR 0 3
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 74
17335: PPUSH
17336: CALL_OW 115
// end else
17340: GO 17414
// if ruMobile > 2 then
17342: LD_EXP 46
17346: PUSH
17347: LD_INT 2
17349: GREATER
17350: IFFALSE 17414
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17352: LD_ADDR_VAR 0 3
17356: PUSH
17357: LD_INT 81
17359: PUSH
17360: LD_INT 3
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PPUSH
17367: CALL_OW 69
17371: ST_TO_ADDR
// if enemy then
17372: LD_VAR 0 3
17376: IFFALSE 17414
// if not HasTask ( i ) then
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 314
17387: NOT
17388: IFFALSE 17414
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17390: LD_VAR 0 1
17394: PPUSH
17395: LD_VAR 0 3
17399: PPUSH
17400: LD_VAR 0 1
17404: PPUSH
17405: CALL_OW 74
17409: PPUSH
17410: CALL_OW 115
// end ; end ; end ;
17414: GO 16891
17416: POP
17417: POP
// end ; end_of_file
17418: PPOPN 3
17420: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17421: LD_INT 0
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: LD_INT 22
17437: PUSH
17438: LD_INT 6
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 21
17447: PUSH
17448: LD_INT 1
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 25
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 3
17467: PUSH
17468: LD_INT 54
17470: PUSH
17471: EMPTY
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: PPUSH
17484: CALL_OW 69
17488: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17489: LD_ADDR_VAR 0 7
17493: PUSH
17494: LD_INT 22
17496: PUSH
17497: LD_INT 6
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 21
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 25
17516: PUSH
17517: LD_INT 1
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 54
17526: PUSH
17527: EMPTY
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: PPUSH
17536: CALL_OW 69
17540: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17541: LD_ADDR_VAR 0 4
17545: PUSH
17546: LD_INT 22
17548: PUSH
17549: LD_INT 6
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 21
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 25
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: PPUSH
17581: CALL_OW 69
17585: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17586: LD_ADDR_VAR 0 6
17590: PUSH
17591: LD_INT 22
17593: PUSH
17594: LD_INT 6
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 21
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 25
17613: PUSH
17614: LD_INT 4
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: LIST
17625: PPUSH
17626: CALL_OW 69
17630: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17631: LD_ADDR_VAR 0 8
17635: PUSH
17636: LD_INT 22
17638: PUSH
17639: LD_INT 6
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 21
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 34
17658: PUSH
17659: LD_INT 51
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: LIST
17670: PPUSH
17671: CALL_OW 69
17675: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 255
17685: PUSH
17686: LD_INT 6
17688: EQUAL
17689: PUSH
17690: LD_VAR 0 1
17694: PPUSH
17695: CALL_OW 266
17699: PUSH
17700: LD_INT 0
17702: EQUAL
17703: AND
17704: IFFALSE 17724
// begin ruPDepot = building ;
17706: LD_ADDR_EXP 21
17710: PUSH
17711: LD_VAR 0 1
17715: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17716: LD_ADDR_EXP 20
17720: PUSH
17721: LD_INT 1
17723: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 266
17733: PUSH
17734: LD_INT 4
17736: EQUAL
17737: PUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: CALL_OW 255
17747: PUSH
17748: LD_INT 6
17750: EQUAL
17751: AND
17752: IFFALSE 17785
// for i in tmpSold do
17754: LD_ADDR_VAR 0 2
17758: PUSH
17759: LD_VAR 0 3
17763: PUSH
17764: FOR_IN
17765: IFFALSE 17783
// ComEnterUnit ( i , building ) ;
17767: LD_VAR 0 2
17771: PPUSH
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL_OW 120
17781: GO 17764
17783: POP
17784: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 266
17794: PUSH
17795: LD_INT 6
17797: EQUAL
17798: PUSH
17799: LD_VAR 0 1
17803: PPUSH
17804: CALL_OW 255
17808: PUSH
17809: LD_INT 6
17811: EQUAL
17812: AND
17813: IFFALSE 17871
// begin for i in tmpSci do
17815: LD_ADDR_VAR 0 2
17819: PUSH
17820: LD_VAR 0 6
17824: PUSH
17825: FOR_IN
17826: IFFALSE 17844
// ComEnterUnit ( i , building ) ;
17828: LD_VAR 0 2
17832: PPUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 120
17842: GO 17825
17844: POP
17845: POP
// ResAllTechs ( 6 , building , 3 ) ;
17846: LD_INT 6
17848: PPUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: LD_INT 3
17856: PPUSH
17857: CALL 5969 0 3
// ruPLab = building ;
17861: LD_ADDR_EXP 22
17865: PUSH
17866: LD_VAR 0 1
17870: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 266
17880: PUSH
17881: LD_INT 2
17883: EQUAL
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 255
17894: PUSH
17895: LD_INT 6
17897: EQUAL
17898: AND
17899: IFFALSE 17950
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17901: LD_ADDR_VAR 0 5
17905: PUSH
17906: LD_VAR 0 8
17910: PUSH
17911: LD_INT 1
17913: ARRAY
17914: PPUSH
17915: CALL_OW 313
17919: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17920: LD_VAR 0 5
17924: PPUSH
17925: CALL_OW 121
// wait ( 0 0$1 ) ;
17929: LD_INT 35
17931: PPUSH
17932: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17936: LD_VAR 0 5
17940: PPUSH
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17950: LD_VAR 0 1
17954: PPUSH
17955: CALL_OW 266
17959: PUSH
17960: LD_INT 32
17962: EQUAL
17963: PUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 255
17973: PUSH
17974: LD_INT 6
17976: EQUAL
17977: AND
17978: IFFALSE 18030
// begin ComPlaceWeapon ( building , 42 ) ;
17980: LD_VAR 0 1
17984: PPUSH
17985: LD_INT 42
17987: PPUSH
17988: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17992: LD_VAR 0 7
17996: PUSH
17997: LD_INT 1
17999: ARRAY
18000: PPUSH
18001: CALL_OW 122
// wait ( 0 0$1 ) ;
18005: LD_INT 35
18007: PPUSH
18008: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
18012: LD_VAR 0 7
18016: PUSH
18017: LD_INT 1
18019: ARRAY
18020: PPUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
18030: LD_VAR 0 1
18034: PPUSH
18035: CALL_OW 266
18039: PUSH
18040: LD_INT 31
18042: EQUAL
18043: PUSH
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 255
18053: PUSH
18054: LD_INT 6
18056: EQUAL
18057: AND
18058: IFFALSE 18124
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18060: LD_VAR 0 7
18064: PUSH
18065: LD_INT 2
18067: ARRAY
18068: PPUSH
18069: CALL_OW 122
// wait ( 0 0$1 ) ;
18073: LD_INT 35
18075: PPUSH
18076: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18080: LD_VAR 0 7
18084: PUSH
18085: LD_INT 2
18087: ARRAY
18088: PPUSH
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18098: LD_VAR 0 4
18102: PUSH
18103: LD_INT 1
18105: ARRAY
18106: PPUSH
18107: LD_EXP 21
18111: PPUSH
18112: CALL_OW 120
// baseReadyToBuild = 2 ;
18116: LD_ADDR_EXP 20
18120: PUSH
18121: LD_INT 2
18123: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 266
18133: PUSH
18134: LD_INT 32
18136: EQUAL
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 255
18147: PUSH
18148: LD_INT 1
18150: EQUAL
18151: AND
18152: PUSH
18153: LD_EXP 32
18157: PUSH
18158: LD_INT 0
18160: EQUAL
18161: AND
18162: IFFALSE 18407
// begin bunkerDialog = 1 ;
18164: LD_ADDR_EXP 32
18168: PUSH
18169: LD_INT 1
18171: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18172: LD_EXP 11
18176: PPUSH
18177: CALL_OW 302
18181: IFFALSE 18197
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18183: LD_EXP 11
18187: PPUSH
18188: LD_STRING D11-Eng1-1
18190: PPUSH
18191: CALL_OW 88
// end else
18195: GO 18393
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18197: LD_INT 22
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 21
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 26
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: PPUSH
18243: CALL_OW 69
18247: PUSH
18248: LD_EXP 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: PUSH
18256: LD_INT 0
18258: GREATER
18259: DIFF
18260: IFFALSE 18334
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18262: LD_INT 22
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 21
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 25
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 26
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: PPUSH
18308: CALL_OW 69
18312: PUSH
18313: LD_EXP 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: DIFF
18321: PPUSH
18322: LD_STRING D11-Eng1-1
18324: PPUSH
18325: LD_STRING D11-Eng1-1
18327: PPUSH
18328: CALL 4618 0 3
// end else
18332: GO 18393
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18334: LD_INT 22
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 21
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 26
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: PPUSH
18369: CALL_OW 69
18373: PUSH
18374: LD_EXP 1
18378: PUSH
18379: EMPTY
18380: LIST
18381: DIFF
18382: PPUSH
18383: LD_STRING D11-Eng1-1
18385: PPUSH
18386: LD_STRING D11-Eng1-1
18388: PPUSH
18389: CALL 4618 0 3
// end ; end ; if energyVDialog = 0 then
18393: LD_EXP 33
18397: PUSH
18398: LD_INT 0
18400: EQUAL
18401: IFFALSE 18407
// EnergyDialog ;
18403: CALL 5021 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL_OW 266
18416: PUSH
18417: LD_INT 29
18419: EQUAL
18420: PUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 255
18430: PUSH
18431: LD_INT 1
18433: EQUAL
18434: AND
18435: IFFALSE 18445
// buildOil = 1 ;
18437: LD_ADDR_EXP 34
18441: PUSH
18442: LD_INT 1
18444: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 266
18454: PUSH
18455: LD_INT 26
18457: EQUAL
18458: PUSH
18459: LD_VAR 0 1
18463: PPUSH
18464: CALL_OW 255
18468: PUSH
18469: LD_INT 1
18471: EQUAL
18472: AND
18473: IFFALSE 18483
// buildPower = 1 ;
18475: LD_ADDR_EXP 35
18479: PUSH
18480: LD_INT 1
18482: ST_TO_ADDR
// end ;
18483: PPOPN 8
18485: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 266
18495: PUSH
18496: LD_INT 3
18498: EQUAL
18499: PUSH
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 255
18509: PUSH
18510: LD_INT 1
18512: EQUAL
18513: AND
18514: PUSH
18515: LD_EXP 31
18519: PUSH
18520: LD_INT 0
18522: EQUAL
18523: AND
18524: IFFALSE 18872
// begin factoryDialog = 1 ;
18526: LD_ADDR_EXP 31
18530: PUSH
18531: LD_INT 1
18533: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18534: LD_INT 47
18536: PPUSH
18537: LD_INT 1
18539: PPUSH
18540: CALL_OW 321
18544: PUSH
18545: LD_INT 1
18547: EQUAL
18548: PUSH
18549: LD_INT 45
18551: PPUSH
18552: LD_INT 1
18554: PPUSH
18555: CALL_OW 321
18559: PUSH
18560: LD_INT 1
18562: EQUAL
18563: AND
18564: IFFALSE 18872
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18566: LD_INT 22
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 21
18578: PUSH
18579: LD_INT 3
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 30
18588: PUSH
18589: LD_INT 3
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 24
18598: PUSH
18599: LD_INT 1000
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: PPUSH
18612: CALL_OW 69
18616: PUSH
18617: LD_INT 1
18619: ARRAY
18620: PPUSH
18621: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18625: LD_EXP 1
18629: PPUSH
18630: LD_STRING D9a-JMM-1
18632: PPUSH
18633: CALL_OW 88
// if IsOK ( Campell ) then
18637: LD_EXP 12
18641: PPUSH
18642: CALL_OW 302
18646: IFFALSE 18662
// begin Say ( Campell , D9a-Mech1-1 ) ;
18648: LD_EXP 12
18652: PPUSH
18653: LD_STRING D9a-Mech1-1
18655: PPUSH
18656: CALL_OW 88
// end else
18660: GO 18858
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18662: LD_INT 22
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 25
18684: PUSH
18685: LD_INT 3
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 26
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: PUSH
18713: LD_EXP 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: GREATER
18724: DIFF
18725: IFFALSE 18799
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18727: LD_INT 22
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 21
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 25
18749: PUSH
18750: LD_INT 3
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 26
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: PUSH
18778: LD_EXP 1
18782: PUSH
18783: EMPTY
18784: LIST
18785: DIFF
18786: PPUSH
18787: LD_STRING D9a-Mech1-1
18789: PPUSH
18790: LD_STRING D9a-Mech1-1
18792: PPUSH
18793: CALL 4618 0 3
// end else
18797: GO 18858
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18799: LD_INT 22
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 21
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 26
18821: PUSH
18822: LD_INT 1
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: PPUSH
18834: CALL_OW 69
18838: PUSH
18839: LD_EXP 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: DIFF
18847: PPUSH
18848: LD_STRING D9a-Mech1-1
18850: PPUSH
18851: LD_STRING D9a-Mech1-1
18853: PPUSH
18854: CALL 4618 0 3
// end ; end ; if energyVDialog = 0 then
18858: LD_EXP 33
18862: PUSH
18863: LD_INT 0
18865: EQUAL
18866: IFFALSE 18872
// EnergyDialog ;
18868: CALL 5021 0 0
// end ; end ; end ;
18872: PPOPN 1
18874: END
// on UnitDestroyed ( unit ) do var mech ;
18875: LD_INT 0
18877: PPUSH
// begin if unit = JMM then
18878: LD_VAR 0 1
18882: PUSH
18883: LD_EXP 1
18887: EQUAL
18888: IFFALSE 18897
// YouLost ( JMM ) ;
18890: LD_STRING JMM
18892: PPUSH
18893: CALL_OW 104
// if unit in ruMobile then
18897: LD_VAR 0 1
18901: PUSH
18902: LD_EXP 46
18906: IN
18907: IFFALSE 18925
// ruMobile = ruMobile diff ruMobile ;
18909: LD_ADDR_EXP 46
18913: PUSH
18914: LD_EXP 46
18918: PUSH
18919: LD_EXP 46
18923: DIFF
18924: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 247
18934: PUSH
18935: LD_INT 1
18937: EQUAL
18938: PUSH
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL_OW 255
18948: PUSH
18949: LD_INT 1
18951: EQUAL
18952: AND
18953: IFFALSE 18969
// lostCounter = lostCounter + 1 ;
18955: LD_ADDR_EXP 38
18959: PUSH
18960: LD_EXP 38
18964: PUSH
18965: LD_INT 1
18967: PLUS
18968: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18969: LD_EXP 43
18973: PUSH
18974: LD_INT 24
18976: PPUSH
18977: CALL_OW 313
18981: PUSH
18982: LD_INT 6
18984: LESS
18985: AND
18986: PUSH
18987: LD_VAR 0 1
18991: PPUSH
18992: CALL_OW 257
18996: PUSH
18997: LD_INT 3
18999: EQUAL
19000: AND
19001: PUSH
19002: LD_VAR 0 1
19006: PPUSH
19007: CALL_OW 255
19011: PUSH
19012: LD_INT 3
19014: EQUAL
19015: AND
19016: PUSH
19017: LD_INT 24
19019: PPUSH
19020: CALL_OW 302
19024: AND
19025: PUSH
19026: LD_INT 24
19028: PPUSH
19029: CALL_OW 255
19033: PUSH
19034: LD_INT 3
19036: EQUAL
19037: AND
19038: IFFALSE 19167
// begin ruMech := ruMech - 1 ;
19040: LD_ADDR_EXP 43
19044: PUSH
19045: LD_EXP 43
19049: PUSH
19050: LD_INT 1
19052: MINUS
19053: ST_TO_ADDR
// if ruMech = 0 then
19054: LD_EXP 43
19058: PUSH
19059: LD_INT 0
19061: EQUAL
19062: IFFALSE 19066
// exit ;
19064: GO 19167
// wait ( 0 0$40 ) ;
19066: LD_INT 1400
19068: PPUSH
19069: CALL_OW 67
// uc_side = 3 ;
19073: LD_ADDR_OWVAR 20
19077: PUSH
19078: LD_INT 3
19080: ST_TO_ADDR
// uc_nation = 3 ;
19081: LD_ADDR_OWVAR 21
19085: PUSH
19086: LD_INT 3
19088: ST_TO_ADDR
// hc_gallery :=  ;
19089: LD_ADDR_OWVAR 33
19093: PUSH
19094: LD_STRING 
19096: ST_TO_ADDR
// hc_name :=  ;
19097: LD_ADDR_OWVAR 26
19101: PUSH
19102: LD_STRING 
19104: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19105: LD_INT 0
19107: PPUSH
19108: LD_EXP 16
19112: PPUSH
19113: LD_EXP 17
19117: PPUSH
19118: CALL_OW 12
19122: PPUSH
19123: CALL_OW 383
// mech := CreateHuman ;
19127: LD_ADDR_VAR 0 2
19131: PUSH
19132: CALL_OW 44
19136: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19137: LD_VAR 0 2
19141: PPUSH
19142: LD_INT 124
19144: PPUSH
19145: LD_INT 97
19147: PPUSH
19148: LD_INT 0
19150: PPUSH
19151: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_INT 24
19162: PPUSH
19163: CALL_OW 120
// end ; end ;
19167: PPOPN 2
19169: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19170: LD_INT 0
19172: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19173: LD_VAR 0 1
19177: PPUSH
19178: CALL_OW 255
19182: PUSH
19183: LD_INT 1
19185: EQUAL
19186: IFFALSE 19202
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19188: LD_ADDR_EXP 42
19192: PUSH
19193: LD_EXP 42
19197: PUSH
19198: LD_INT 1
19200: PLUS
19201: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19202: LD_VAR 0 1
19206: PPUSH
19207: CALL_OW 255
19211: PUSH
19212: LD_INT 3
19214: EQUAL
19215: PUSH
19216: LD_VAR 0 1
19220: PPUSH
19221: CALL_OW 264
19225: PUSH
19226: LD_INT 42
19228: PUSH
19229: LD_INT 43
19231: PUSH
19232: LD_INT 44
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: IN
19240: AND
19241: IFFALSE 19259
// ruMobile := ruMobile union vehicle ;
19243: LD_ADDR_EXP 46
19247: PUSH
19248: LD_EXP 46
19252: PUSH
19253: LD_VAR 0 1
19257: UNION
19258: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19259: LD_VAR 0 1
19263: PPUSH
19264: CALL_OW 264
19268: PUSH
19269: LD_INT 53
19271: EQUAL
19272: IFFALSE 19408
// begin uc_side = 3 ;
19274: LD_ADDR_OWVAR 20
19278: PUSH
19279: LD_INT 3
19281: ST_TO_ADDR
// uc_nation = 3 ;
19282: LD_ADDR_OWVAR 21
19286: PUSH
19287: LD_INT 3
19289: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19290: LD_INT 0
19292: PPUSH
19293: LD_EXP 17
19297: PPUSH
19298: CALL_OW 383
// driver := CreateHuman ;
19302: LD_ADDR_VAR 0 3
19306: PUSH
19307: CALL_OW 44
19311: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19312: LD_VAR 0 3
19316: PPUSH
19317: LD_VAR 0 2
19321: PPUSH
19322: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_INT 21
19333: PPUSH
19334: CALL 5237 0 2
// repeat wait ( 0 0$1 ) ;
19338: LD_INT 35
19340: PPUSH
19341: CALL_OW 67
// until not HasTask ( vehicle ) ;
19345: LD_VAR 0 1
19349: PPUSH
19350: CALL_OW 314
19354: NOT
19355: IFFALSE 19338
// driver := IsDrivenBy ( vehicle ) ;
19357: LD_ADDR_VAR 0 3
19361: PUSH
19362: LD_VAR 0 1
19366: PPUSH
19367: CALL_OW 311
19371: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 104
19379: PPUSH
19380: LD_INT 73
19382: PPUSH
19383: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19387: LD_VAR 0 3
19391: PPUSH
19392: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19396: LD_VAR 0 3
19400: PPUSH
19401: LD_INT 24
19403: PPUSH
19404: CALL_OW 180
// end ; end ;
19408: PPOPN 3
19410: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 255
19424: PUSH
19425: LD_INT 3
19427: EQUAL
19428: PUSH
19429: LD_VAR 0 1
19433: PPUSH
19434: CALL_OW 247
19438: PUSH
19439: LD_INT 2
19441: EQUAL
19442: AND
19443: IFFALSE 19537
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19445: LD_VAR 0 1
19449: PPUSH
19450: CALL_OW 264
19454: PUSH
19455: LD_INT 42
19457: EQUAL
19458: PUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 264
19468: PUSH
19469: LD_INT 43
19471: EQUAL
19472: OR
19473: PUSH
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 264
19483: PUSH
19484: LD_INT 44
19486: EQUAL
19487: OR
19488: IFFALSE 19537
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19490: LD_INT 24
19492: PPUSH
19493: LD_VAR 0 1
19497: PPUSH
19498: CALL_OW 265
19502: PPUSH
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL_OW 262
19512: PPUSH
19513: LD_VAR 0 1
19517: PPUSH
19518: CALL_OW 263
19522: PPUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 264
19532: PPUSH
19533: CALL_OW 185
// end ;
19537: PPOPN 3
19539: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 255
19549: PUSH
19550: LD_INT 3
19552: EQUAL
19553: PUSH
19554: LD_VAR 0 2
19558: PPUSH
19559: CALL_OW 255
19563: PUSH
19564: LD_INT 3
19566: EQUAL
19567: AND
19568: PUSH
19569: LD_INT 24
19571: PPUSH
19572: CALL_OW 302
19576: AND
19577: PUSH
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 302
19587: NOT
19588: AND
19589: IFFALSE 19603
// ComEnterUnit ( human , rubfact0 ) ;
19591: LD_VAR 0 2
19595: PPUSH
19596: LD_INT 24
19598: PPUSH
19599: CALL_OW 120
// end ;
19603: PPOPN 2
19605: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19606: LD_VAR 0 1
19610: PUSH
19611: LD_INT 24
19613: EQUAL
19614: PUSH
19615: LD_VAR 0 2
19619: PPUSH
19620: CALL_OW 256
19624: PUSH
19625: LD_INT 1000
19627: LESS
19628: AND
19629: IFFALSE 19643
// SetLives ( un , 1000 ) ;
19631: LD_VAR 0 2
19635: PPUSH
19636: LD_INT 1000
19638: PPUSH
19639: CALL_OW 234
// end ;
19643: PPOPN 2
19645: END
// on Command ( comandid ) do var i , j , tmp ;
19646: LD_INT 0
19648: PPUSH
19649: PPUSH
19650: PPUSH
// begin SOS_Command ( comandid ) ;
19651: LD_VAR 0 1
19655: PPUSH
19656: CALL 33454 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19660: LD_INT 22
19662: PUSH
19663: LD_INT 4
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PPUSH
19670: CALL_OW 69
19674: NOT
19675: IFFALSE 19679
// exit ;
19677: GO 19844
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19679: LD_ADDR_VAR 0 2
19683: PUSH
19684: LD_INT 22
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: LD_INT 21
19699: PUSH
19700: LD_INT 1
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 21
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: PUSH
19731: FOR_IN
19732: IFFALSE 19842
// begin if GetTaskList ( i ) > 0 then
19734: LD_VAR 0 2
19738: PPUSH
19739: CALL_OW 437
19743: PUSH
19744: LD_INT 0
19746: GREATER
19747: IFFALSE 19840
// begin for j = 1 to GetTaskList ( i ) do
19749: LD_ADDR_VAR 0 3
19753: PUSH
19754: DOUBLE
19755: LD_INT 1
19757: DEC
19758: ST_TO_ADDR
19759: LD_VAR 0 2
19763: PPUSH
19764: CALL_OW 437
19768: PUSH
19769: FOR_TO
19770: IFFALSE 19838
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19772: LD_ADDR_VAR 0 4
19776: PUSH
19777: LD_VAR 0 2
19781: PPUSH
19782: CALL_OW 437
19786: PUSH
19787: LD_VAR 0 3
19791: ARRAY
19792: PUSH
19793: LD_INT 4
19795: ARRAY
19796: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19797: LD_VAR 0 4
19801: PPUSH
19802: CALL_OW 255
19806: PUSH
19807: LD_INT 4
19809: EQUAL
19810: PUSH
19811: LD_VAR 0 4
19815: PPUSH
19816: CALL_OW 255
19820: PUSH
19821: LD_INT 0
19823: EQUAL
19824: OR
19825: IFFALSE 19836
// ComStop ( i ) ;
19827: LD_VAR 0 2
19831: PPUSH
19832: CALL_OW 141
// end ;
19836: GO 19769
19838: POP
19839: POP
// end ; end ;
19840: GO 19731
19842: POP
19843: POP
// end ; end_of_file
19844: PPOPN 4
19846: END
// every 10 10$0 do
19847: GO 19849
19849: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19850: LD_INT 5
19852: PPUSH
19853: LD_INT 3
19855: PPUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: LD_INT 3
19864: PUSH
19865: LD_INT 4
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: PUSH
19873: LD_OWVAR 67
19877: ARRAY
19878: PLUS
19879: PPUSH
19880: LD_INT 0
19882: PPUSH
19883: LD_INT 0
19885: PPUSH
19886: LD_INT 0
19888: PPUSH
19889: LD_INT 0
19891: PPUSH
19892: LD_EXP 16
19896: PPUSH
19897: LD_EXP 17
19901: PPUSH
19902: CALL_OW 12
19906: PPUSH
19907: LD_INT 4
19909: PPUSH
19910: LD_INT 14
19912: PPUSH
19913: LD_INT 1
19915: PPUSH
19916: LD_INT 2
19918: PPUSH
19919: CALL 7942 0 12
// end ;
19923: END
// every 20 20$0 do
19924: GO 19926
19926: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19927: LD_INT 5
19929: PPUSH
19930: LD_INT 3
19932: PPUSH
19933: LD_INT 4
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: LD_INT 3
19941: PUSH
19942: LD_INT 4
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: PUSH
19950: LD_OWVAR 67
19954: ARRAY
19955: PLUS
19956: PPUSH
19957: LD_INT 0
19959: PPUSH
19960: LD_INT 0
19962: PPUSH
19963: LD_INT 0
19965: PPUSH
19966: LD_INT 2
19968: PPUSH
19969: LD_EXP 16
19973: PPUSH
19974: LD_EXP 17
19978: PPUSH
19979: CALL_OW 12
19983: PPUSH
19984: LD_INT 4
19986: PPUSH
19987: LD_INT 14
19989: PPUSH
19990: LD_INT 1
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: CALL 7942 0 12
// end ;
20000: END
// every 25 25$0 do
20001: GO 20003
20003: DISABLE
// begin if Difficulty > 1 then
20004: LD_OWVAR 67
20008: PUSH
20009: LD_INT 1
20011: GREATER
20012: IFFALSE 20022
// specAttack := true ;
20014: LD_ADDR_EXP 47
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
20022: LD_INT 4
20024: PPUSH
20025: LD_INT 5
20027: PPUSH
20028: LD_INT 4
20030: PUSH
20031: LD_INT 5
20033: PUSH
20034: LD_INT 6
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: LD_OWVAR 67
20046: ARRAY
20047: PPUSH
20048: LD_EXP 16
20052: PPUSH
20053: LD_EXP 17
20057: PPUSH
20058: CALL_OW 12
20062: PPUSH
20063: LD_INT 3
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: LD_INT 1
20071: PPUSH
20072: LD_INT 42
20074: PUSH
20075: LD_INT 42
20077: PUSH
20078: LD_INT 43
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 42
20088: PUSH
20089: LD_INT 43
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 43
20098: PUSH
20099: LD_INT 43
20101: PUSH
20102: LD_INT 43
20104: PUSH
20105: LD_INT 44
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: PUSH
20119: LD_OWVAR 67
20123: ARRAY
20124: PPUSH
20125: EMPTY
20126: PPUSH
20127: EMPTY
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: CALL 9698 0 11
// end ;
20136: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20137: LD_EXP 47
20141: IFFALSE 20504
20143: GO 20145
20145: DISABLE
20146: LD_INT 0
20148: PPUSH
20149: PPUSH
20150: PPUSH
20151: PPUSH
// begin wait ( 0 0$20 ) ;
20152: LD_INT 700
20154: PPUSH
20155: CALL_OW 67
// uc_side := 5 ;
20159: LD_ADDR_OWVAR 20
20163: PUSH
20164: LD_INT 5
20166: ST_TO_ADDR
// uc_nation := 3 ;
20167: LD_ADDR_OWVAR 21
20171: PUSH
20172: LD_INT 3
20174: ST_TO_ADDR
// InitHc ;
20175: CALL_OW 19
// hc_importance := 0 ;
20179: LD_ADDR_OWVAR 32
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// tmp := [ ] ;
20187: LD_ADDR_VAR 0 2
20191: PUSH
20192: EMPTY
20193: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20194: LD_INT 0
20196: PPUSH
20197: LD_INT 2
20199: PPUSH
20200: LD_INT 6
20202: PPUSH
20203: CALL_OW 380
// eng := CreateHuman ;
20207: LD_ADDR_VAR 0 4
20211: PUSH
20212: CALL_OW 44
20216: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20217: LD_VAR 0 4
20221: PPUSH
20222: LD_INT 78
20224: PPUSH
20225: LD_INT 2
20227: PPUSH
20228: LD_INT 4
20230: PPUSH
20231: LD_INT 0
20233: PPUSH
20234: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20238: LD_ADDR_VAR 0 3
20242: PUSH
20243: DOUBLE
20244: LD_INT 1
20246: DEC
20247: ST_TO_ADDR
20248: LD_INT 2
20250: PUSH
20251: LD_OWVAR 67
20255: PLUS
20256: PUSH
20257: FOR_TO
20258: IFFALSE 20339
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20260: LD_INT 0
20262: PPUSH
20263: LD_INT 1
20265: PPUSH
20266: LD_INT 4
20268: PUSH
20269: LD_INT 5
20271: PUSH
20272: LD_INT 6
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: PUSH
20280: LD_OWVAR 67
20284: ARRAY
20285: PPUSH
20286: CALL_OW 380
// un := CreateHuman ;
20290: LD_ADDR_VAR 0 1
20294: PUSH
20295: CALL_OW 44
20299: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_INT 78
20307: PPUSH
20308: LD_INT 2
20310: PPUSH
20311: LD_INT 4
20313: PPUSH
20314: LD_INT 0
20316: PPUSH
20317: CALL_OW 50
// tmp := tmp ^ un ;
20321: LD_ADDR_VAR 0 2
20325: PUSH
20326: LD_VAR 0 2
20330: PUSH
20331: LD_VAR 0 1
20335: ADD
20336: ST_TO_ADDR
// end ;
20337: GO 20257
20339: POP
20340: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20341: LD_VAR 0 2
20345: PPUSH
20346: LD_INT 49
20348: PPUSH
20349: LD_INT 3
20351: PPUSH
20352: CALL_OW 111
// wait ( 0 0$2 ) ;
20356: LD_INT 70
20358: PPUSH
20359: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20363: LD_VAR 0 4
20367: PPUSH
20368: LD_INT 49
20370: PPUSH
20371: LD_INT 3
20373: PPUSH
20374: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20378: LD_VAR 0 4
20382: PPUSH
20383: LD_INT 4
20385: PPUSH
20386: CALL_OW 227
// wait ( 0 0$10 ) ;
20390: LD_INT 350
20392: PPUSH
20393: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20397: LD_INT 35
20399: PPUSH
20400: CALL_OW 67
// for i in tmp do
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: LD_VAR 0 2
20413: PUSH
20414: FOR_IN
20415: IFFALSE 20495
// if not IsOk ( i ) then
20417: LD_VAR 0 3
20421: PPUSH
20422: CALL_OW 302
20426: NOT
20427: IFFALSE 20447
// tmp := tmp diff i else
20429: LD_ADDR_VAR 0 2
20433: PUSH
20434: LD_VAR 0 2
20438: PUSH
20439: LD_VAR 0 3
20443: DIFF
20444: ST_TO_ADDR
20445: GO 20493
// if not HasTask ( i ) then
20447: LD_VAR 0 3
20451: PPUSH
20452: CALL_OW 314
20456: NOT
20457: IFFALSE 20493
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20459: LD_VAR 0 3
20463: PPUSH
20464: LD_INT 22
20466: PUSH
20467: LD_INT 1
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PPUSH
20474: CALL_OW 69
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: CALL_OW 74
20488: PPUSH
20489: CALL_OW 115
20493: GO 20414
20495: POP
20496: POP
// until not tmp ;
20497: LD_VAR 0 2
20501: NOT
20502: IFFALSE 20397
// end ; end_of_file
20504: PPOPN 4
20506: END
// every 0 0$1 trigger startTimer = 1 do
20507: LD_EXP 30
20511: PUSH
20512: LD_INT 1
20514: EQUAL
20515: IFFALSE 20645
20517: GO 20519
20519: DISABLE
// begin enable ;
20520: ENABLE
// if timerStatus = 1 then
20521: LD_EXP 29
20525: PUSH
20526: LD_INT 1
20528: EQUAL
20529: IFFALSE 20562
// begin timeToSupport = timeToSupport - 0 0$01 ;
20531: LD_ADDR_EXP 28
20535: PUSH
20536: LD_EXP 28
20540: PUSH
20541: LD_INT 35
20543: MINUS
20544: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20545: LD_ADDR_OWVAR 47
20549: PUSH
20550: LD_STRING #Am04-1
20552: PUSH
20553: LD_EXP 28
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// end ; if timerStatus = 2 then
20562: LD_EXP 29
20566: PUSH
20567: LD_INT 2
20569: EQUAL
20570: IFFALSE 20603
// begin timeToSupport = timeToSupport - 0 0$01 ;
20572: LD_ADDR_EXP 28
20576: PUSH
20577: LD_EXP 28
20581: PUSH
20582: LD_INT 35
20584: MINUS
20585: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20586: LD_ADDR_OWVAR 47
20590: PUSH
20591: LD_STRING #Am04-2
20593: PUSH
20594: LD_EXP 28
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: ST_TO_ADDR
// end ; if timerStatus = 3 then
20603: LD_EXP 29
20607: PUSH
20608: LD_INT 3
20610: EQUAL
20611: IFFALSE 20627
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20613: LD_ADDR_EXP 27
20617: PUSH
20618: LD_EXP 27
20622: PUSH
20623: LD_INT 35
20625: MINUS
20626: ST_TO_ADDR
// end ; if timerStatus = 4 then
20627: LD_EXP 29
20631: PUSH
20632: LD_INT 4
20634: EQUAL
20635: IFFALSE 20645
// begin display_strings =  ;
20637: LD_ADDR_OWVAR 47
20641: PUSH
20642: LD_STRING 
20644: ST_TO_ADDR
// end ; end ; end_of_file
20645: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20646: LD_INT 4
20648: PPUSH
20649: CALL_OW 301
20653: IFFALSE 20665
20655: GO 20657
20657: DISABLE
// YouLost ( Base ) ; end_of_file
20658: LD_STRING Base
20660: PPUSH
20661: CALL_OW 104
20665: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20666: LD_EXP 15
20670: PPUSH
20671: CALL_OW 301
20675: PUSH
20676: LD_INT 22
20678: PUSH
20679: LD_INT 3
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 21
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 69
20704: PUSH
20705: LD_INT 14
20707: PUSH
20708: LD_INT 13
20710: PUSH
20711: LD_INT 12
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: PUSH
20719: LD_OWVAR 67
20723: ARRAY
20724: LESS
20725: AND
20726: IFFALSE 21309
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
20735: PPUSH
// begin AIEnable = 0 ;
20736: LD_ADDR_EXP 37
20740: PUSH
20741: LD_INT 0
20743: ST_TO_ADDR
// escapeAvalaible = 1 ;
20744: LD_ADDR_EXP 40
20748: PUSH
20749: LD_INT 1
20751: ST_TO_ADDR
// InGameOn ;
20752: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20756: LD_INT 3
20758: PPUSH
20759: LD_INT 1
20761: PPUSH
20762: LD_INT 1
20764: PPUSH
20765: LD_INT 0
20767: PPUSH
20768: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20772: LD_INT 6
20774: PPUSH
20775: LD_INT 1
20777: PPUSH
20778: LD_INT 1
20780: PPUSH
20781: LD_INT 0
20783: PPUSH
20784: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20788: LD_INT 5
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: LD_INT 1
20796: PPUSH
20797: LD_INT 0
20799: PPUSH
20800: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20804: LD_INT 3
20806: PPUSH
20807: LD_INT 1
20809: PPUSH
20810: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20814: LD_INT 97
20816: PPUSH
20817: LD_INT 91
20819: PPUSH
20820: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20824: LD_INT 22
20826: PUSH
20827: LD_INT 3
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 21
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PPUSH
20848: CALL_OW 69
20852: PPUSH
20853: CALL_OW 121
// wait ( 0 0$01 ) ;
20857: LD_INT 35
20859: PPUSH
20860: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20864: LD_INT 22
20866: PUSH
20867: LD_INT 3
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 21
20876: PUSH
20877: LD_INT 1
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PPUSH
20888: CALL_OW 69
20892: PPUSH
20893: LD_INT 124
20895: PPUSH
20896: LD_INT 98
20898: PPUSH
20899: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20903: LD_INT 22
20905: PUSH
20906: LD_INT 5
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 21
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PPUSH
20927: CALL_OW 69
20931: PPUSH
20932: CALL_OW 121
// wait ( 0 0$01 ) ;
20936: LD_INT 35
20938: PPUSH
20939: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20943: LD_INT 22
20945: PUSH
20946: LD_INT 5
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 21
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: PPUSH
20972: LD_INT 124
20974: PPUSH
20975: LD_INT 98
20977: PPUSH
20978: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20982: LD_INT 22
20984: PUSH
20985: LD_INT 6
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 21
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: PPUSH
21011: CALL_OW 121
// wait ( 0 0$01 ) ;
21015: LD_INT 35
21017: PPUSH
21018: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21022: LD_INT 22
21024: PUSH
21025: LD_INT 6
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 21
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PPUSH
21046: CALL_OW 69
21050: PPUSH
21051: LD_INT 124
21053: PPUSH
21054: LD_INT 98
21056: PPUSH
21057: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21061: LD_INT 22
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 21
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PPUSH
21085: CALL_OW 69
21089: PPUSH
21090: LD_INT 124
21092: PPUSH
21093: LD_INT 96
21095: PPUSH
21096: CALL_OW 114
// wait ( 0 0$1 ) ;
21100: LD_INT 35
21102: PPUSH
21103: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21107: LD_INT 124
21109: PPUSH
21110: LD_INT 96
21112: PPUSH
21113: CALL_OW 84
// p := 0 0$0 ;
21117: LD_ADDR_VAR 0 3
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21125: LD_ADDR_VAR 0 2
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: LD_INT 22
21135: PUSH
21136: LD_INT 3
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 22
21145: PUSH
21146: LD_INT 6
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PPUSH
21172: CALL_OW 69
21176: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21177: LD_INT 35
21179: PPUSH
21180: CALL_OW 67
// p := p + 0 0$1 ;
21184: LD_ADDR_VAR 0 3
21188: PUSH
21189: LD_VAR 0 3
21193: PUSH
21194: LD_INT 35
21196: PLUS
21197: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21198: LD_VAR 0 2
21202: PPUSH
21203: LD_INT 5
21205: PPUSH
21206: CALL_OW 113
// for i in tmp do
21210: LD_ADDR_VAR 0 1
21214: PUSH
21215: LD_VAR 0 2
21219: PUSH
21220: FOR_IN
21221: IFFALSE 21248
// if IsInArea ( tmp , RussianEscape ) then
21223: LD_VAR 0 2
21227: PPUSH
21228: LD_INT 5
21230: PPUSH
21231: CALL_OW 308
21235: IFFALSE 21246
// RemoveUnit ( i ) ;
21237: LD_VAR 0 1
21241: PPUSH
21242: CALL_OW 64
21246: GO 21220
21248: POP
21249: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21250: LD_INT 23
21252: PUSH
21253: LD_INT 3
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 21
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 24
21272: PUSH
21273: LD_INT 250
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: LIST
21284: PPUSH
21285: CALL_OW 69
21289: PUSH
21290: LD_INT 0
21292: EQUAL
21293: PUSH
21294: LD_VAR 0 3
21298: PUSH
21299: LD_INT 245
21301: GREATEREQUAL
21302: OR
21303: IFFALSE 21177
// FinishMission ;
21305: CALL 21312 0 0
// end ;
21309: PPOPN 3
21311: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
// if not vehicleProduceCounter then
21319: LD_EXP 42
21323: NOT
21324: IFFALSE 21333
// SetAchievement ( ACH_INFANTRY ) ;
21326: LD_STRING ACH_INFANTRY
21328: PPUSH
21329: CALL_OW 543
// if tick <= 20 20$00 then
21333: LD_OWVAR 1
21337: PUSH
21338: LD_INT 42000
21340: LESSEQUAL
21341: IFFALSE 21357
// begin wait ( 3 ) ;
21343: LD_INT 3
21345: PPUSH
21346: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21350: LD_STRING ACH_ASPEED_4
21352: PPUSH
21353: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21357: LD_INT 22
21359: PPUSH
21360: CALL 21999 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21364: LD_INT 69
21366: PPUSH
21367: LD_INT 1
21369: PPUSH
21370: CALL_OW 321
21374: PPUSH
21375: LD_STRING GatlingInGamma
21377: PPUSH
21378: CALL_OW 39
// m1 := false ;
21382: LD_ADDR_VAR 0 3
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// m2 := false ;
21390: LD_ADDR_VAR 0 4
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// m3 := false ;
21398: LD_ADDR_VAR 0 5
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21406: LD_EXP 34
21410: PUSH
21411: LD_INT 1
21413: EQUAL
21414: PUSH
21415: LD_EXP 35
21419: PUSH
21420: LD_INT 1
21422: EQUAL
21423: AND
21424: IFFALSE 21446
// begin AddMedal ( oil , 1 ) ;
21426: LD_STRING oil
21428: PPUSH
21429: LD_INT 1
21431: PPUSH
21432: CALL_OW 101
// m1 := true ;
21436: LD_ADDR_VAR 0 3
21440: PUSH
21441: LD_INT 1
21443: ST_TO_ADDR
// end else
21444: GO 21539
// begin if buildOil = 1 and buildPower = 0 then
21446: LD_EXP 34
21450: PUSH
21451: LD_INT 1
21453: EQUAL
21454: PUSH
21455: LD_EXP 35
21459: PUSH
21460: LD_INT 0
21462: EQUAL
21463: AND
21464: IFFALSE 21477
// AddMedal ( oil , - 1 ) ;
21466: LD_STRING oil
21468: PPUSH
21469: LD_INT 1
21471: NEG
21472: PPUSH
21473: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21477: LD_EXP 34
21481: PUSH
21482: LD_INT 0
21484: EQUAL
21485: PUSH
21486: LD_EXP 35
21490: PUSH
21491: LD_INT 1
21493: EQUAL
21494: AND
21495: IFFALSE 21508
// AddMedal ( oil , - 2 ) ;
21497: LD_STRING oil
21499: PPUSH
21500: LD_INT 2
21502: NEG
21503: PPUSH
21504: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21508: LD_EXP 34
21512: PUSH
21513: LD_INT 0
21515: EQUAL
21516: PUSH
21517: LD_EXP 35
21521: PUSH
21522: LD_INT 0
21524: EQUAL
21525: AND
21526: IFFALSE 21539
// AddMedal ( oil , - 3 ) ;
21528: LD_STRING oil
21530: PPUSH
21531: LD_INT 3
21533: NEG
21534: PPUSH
21535: CALL_OW 101
// end ; if lostCounter > 3 then
21539: LD_EXP 38
21543: PUSH
21544: LD_INT 3
21546: GREATER
21547: IFFALSE 21562
// AddMedal ( deaths , - 1 ) else
21549: LD_STRING deaths
21551: PPUSH
21552: LD_INT 1
21554: NEG
21555: PPUSH
21556: CALL_OW 101
21560: GO 21580
// begin AddMedal ( deaths , 1 ) ;
21562: LD_STRING deaths
21564: PPUSH
21565: LD_INT 1
21567: PPUSH
21568: CALL_OW 101
// m2 := true ;
21572: LD_ADDR_VAR 0 4
21576: PUSH
21577: LD_INT 1
21579: ST_TO_ADDR
// end ; if honor = 1 then
21580: LD_EXP 39
21584: PUSH
21585: LD_INT 1
21587: EQUAL
21588: IFFALSE 21610
// begin AddMedal ( honour , 1 ) ;
21590: LD_STRING honour
21592: PPUSH
21593: LD_INT 1
21595: PPUSH
21596: CALL_OW 101
// m3 := true ;
21600: LD_ADDR_VAR 0 5
21604: PUSH
21605: LD_INT 1
21607: ST_TO_ADDR
// end else
21608: GO 21621
// begin AddMedal ( honour , - 1 ) ;
21610: LD_STRING honour
21612: PPUSH
21613: LD_INT 1
21615: NEG
21616: PPUSH
21617: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21621: LD_VAR 0 3
21625: PUSH
21626: LD_VAR 0 4
21630: AND
21631: PUSH
21632: LD_VAR 0 5
21636: AND
21637: PUSH
21638: LD_OWVAR 67
21642: PUSH
21643: LD_INT 3
21645: EQUAL
21646: AND
21647: IFFALSE 21659
// SetAchievementEX ( ACH_AMER , 4 ) ;
21649: LD_STRING ACH_AMER
21651: PPUSH
21652: LD_INT 4
21654: PPUSH
21655: CALL_OW 564
// GiveMedals ( Main ) ;
21659: LD_STRING Main
21661: PPUSH
21662: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21666: LD_INT 22
21668: PUSH
21669: LD_INT 1
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 23
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: PPUSH
21701: CALL_OW 69
21705: PPUSH
21706: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21710: LD_EXP 1
21714: PPUSH
21715: LD_EXP 48
21719: PUSH
21720: LD_STRING JMM
21722: STR
21723: PPUSH
21724: CALL_OW 38
// if IsOK ( Bobby ) then
21728: LD_EXP 2
21732: PPUSH
21733: CALL_OW 302
21737: IFFALSE 21757
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21739: LD_EXP 2
21743: PPUSH
21744: LD_EXP 48
21748: PUSH
21749: LD_STRING Bobby
21751: STR
21752: PPUSH
21753: CALL_OW 38
// if IsOK ( Cyrus ) then
21757: LD_EXP 3
21761: PPUSH
21762: CALL_OW 302
21766: IFFALSE 21786
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21768: LD_EXP 3
21772: PPUSH
21773: LD_EXP 48
21777: PUSH
21778: LD_STRING Cyrus
21780: STR
21781: PPUSH
21782: CALL_OW 38
// if IsOK ( Lisa ) then
21786: LD_EXP 4
21790: PPUSH
21791: CALL_OW 302
21795: IFFALSE 21815
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21797: LD_EXP 4
21801: PPUSH
21802: LD_EXP 48
21806: PUSH
21807: LD_STRING Lisa
21809: STR
21810: PPUSH
21811: CALL_OW 38
// if IsOK ( Brown ) then
21815: LD_EXP 7
21819: PPUSH
21820: CALL_OW 302
21824: IFFALSE 21844
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21826: LD_EXP 7
21830: PPUSH
21831: LD_EXP 48
21835: PUSH
21836: LD_STRING Brown
21838: STR
21839: PPUSH
21840: CALL_OW 38
// if IsOK ( Donaldson ) then
21844: LD_EXP 13
21848: PPUSH
21849: CALL_OW 302
21853: IFFALSE 21873
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21855: LD_EXP 13
21859: PPUSH
21860: LD_EXP 48
21864: PUSH
21865: LD_STRING Donaldson
21867: STR
21868: PPUSH
21869: CALL_OW 38
// if IsOK ( Frank ) then
21873: LD_EXP 5
21877: PPUSH
21878: CALL_OW 302
21882: IFFALSE 21902
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21884: LD_EXP 5
21888: PPUSH
21889: LD_EXP 48
21893: PUSH
21894: LD_STRING Frank
21896: STR
21897: PPUSH
21898: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21902: LD_INT 50
21904: PUSH
21905: EMPTY
21906: LIST
21907: PUSH
21908: LD_INT 22
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 21
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: LIST
21932: PPUSH
21933: CALL_OW 69
21937: PUSH
21938: LD_EXP 1
21942: PUSH
21943: LD_EXP 2
21947: PUSH
21948: LD_EXP 3
21952: PUSH
21953: LD_EXP 4
21957: PUSH
21958: LD_EXP 7
21962: PUSH
21963: LD_EXP 13
21967: PUSH
21968: LD_EXP 5
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: DIFF
21982: PPUSH
21983: LD_STRING 04_other_survivors
21985: PPUSH
21986: CALL_OW 38
// YouWin ;
21990: CALL_OW 103
// end ;
21994: LD_VAR 0 1
21998: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21999: LD_INT 0
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
// gammaBase = [ ] ;
22005: LD_ADDR_VAR 0 4
22009: PUSH
22010: EMPTY
22011: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
22012: LD_ADDR_VAR 0 5
22016: PUSH
22017: LD_VAR 0 1
22021: PPUSH
22022: LD_INT 22
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 21
22034: PUSH
22035: LD_INT 3
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PPUSH
22046: CALL_OW 70
22050: ST_TO_ADDR
// for i in buildings do
22051: LD_ADDR_VAR 0 3
22055: PUSH
22056: LD_VAR 0 5
22060: PUSH
22061: FOR_IN
22062: IFFALSE 22399
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22064: LD_VAR 0 3
22068: PPUSH
22069: CALL_OW 266
22073: PUSH
22074: LD_INT 6
22076: PUSH
22077: LD_INT 7
22079: PUSH
22080: LD_INT 8
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: IN
22088: IFFALSE 22202
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22090: LD_ADDR_VAR 0 4
22094: PUSH
22095: LD_VAR 0 4
22099: PUSH
22100: LD_VAR 0 3
22104: PPUSH
22105: CALL_OW 266
22109: PUSH
22110: LD_VAR 0 3
22114: PPUSH
22115: CALL_OW 250
22119: PUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: CALL_OW 251
22129: PUSH
22130: LD_VAR 0 3
22134: PPUSH
22135: CALL_OW 254
22139: PUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: CALL_OW 267
22149: PUSH
22150: LD_VAR 0 3
22154: PPUSH
22155: CALL_OW 248
22159: PUSH
22160: LD_VAR 0 3
22164: PPUSH
22165: LD_INT 1
22167: PPUSH
22168: CALL_OW 268
22172: PUSH
22173: LD_VAR 0 3
22177: PPUSH
22178: LD_INT 2
22180: PPUSH
22181: CALL_OW 268
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: ADD
22199: ST_TO_ADDR
22200: GO 22397
// if GetBType ( i ) in [ b_bunker ] then
22202: LD_VAR 0 3
22206: PPUSH
22207: CALL_OW 266
22211: PUSH
22212: LD_INT 32
22214: PUSH
22215: EMPTY
22216: LIST
22217: IN
22218: IFFALSE 22315
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22220: LD_ADDR_VAR 0 4
22224: PUSH
22225: LD_VAR 0 4
22229: PUSH
22230: LD_VAR 0 3
22234: PPUSH
22235: CALL_OW 266
22239: PUSH
22240: LD_VAR 0 3
22244: PPUSH
22245: CALL_OW 250
22249: PUSH
22250: LD_VAR 0 3
22254: PPUSH
22255: CALL_OW 251
22259: PUSH
22260: LD_VAR 0 3
22264: PPUSH
22265: CALL_OW 254
22269: PUSH
22270: LD_VAR 0 3
22274: PPUSH
22275: CALL_OW 267
22279: PUSH
22280: LD_VAR 0 3
22284: PPUSH
22285: CALL_OW 248
22289: PUSH
22290: LD_VAR 0 3
22294: PPUSH
22295: CALL_OW 269
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: ADD
22312: ST_TO_ADDR
22313: GO 22397
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22315: LD_ADDR_VAR 0 4
22319: PUSH
22320: LD_VAR 0 4
22324: PUSH
22325: LD_VAR 0 3
22329: PPUSH
22330: CALL_OW 266
22334: PUSH
22335: LD_VAR 0 3
22339: PPUSH
22340: CALL_OW 250
22344: PUSH
22345: LD_VAR 0 3
22349: PPUSH
22350: CALL_OW 251
22354: PUSH
22355: LD_VAR 0 3
22359: PPUSH
22360: CALL_OW 254
22364: PUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: CALL_OW 267
22374: PUSH
22375: LD_VAR 0 3
22379: PPUSH
22380: CALL_OW 248
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: ADD
22396: ST_TO_ADDR
// end ;
22397: GO 22061
22399: POP
22400: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22401: LD_VAR 0 4
22405: PPUSH
22406: LD_STRING GammaBase
22408: PPUSH
22409: CALL_OW 39
// end ; end_of_file
22413: LD_VAR 0 2
22417: RET
// every 1 1$15 do
22418: GO 22420
22420: DISABLE
// begin if supply <= 13 and supply > 7 then
22421: LD_EXP 36
22425: PUSH
22426: LD_INT 13
22428: LESSEQUAL
22429: PUSH
22430: LD_EXP 36
22434: PUSH
22435: LD_INT 7
22437: GREATER
22438: AND
22439: IFFALSE 22462
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22441: LD_INT 3
22443: PPUSH
22444: LD_INT 5
22446: PPUSH
22447: CALL_OW 12
22451: PPUSH
22452: LD_INT 18
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: CALL_OW 55
// if supply <= 7 and supply > 4 then
22462: LD_EXP 36
22466: PUSH
22467: LD_INT 7
22469: LESSEQUAL
22470: PUSH
22471: LD_EXP 36
22475: PUSH
22476: LD_INT 4
22478: GREATER
22479: AND
22480: IFFALSE 22503
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22482: LD_INT 3
22484: PPUSH
22485: LD_INT 5
22487: PPUSH
22488: CALL_OW 12
22492: PPUSH
22493: LD_INT 19
22495: PPUSH
22496: LD_INT 1
22498: PPUSH
22499: CALL_OW 55
// if supply <= 4 and supply > 0 then
22503: LD_EXP 36
22507: PUSH
22508: LD_INT 4
22510: LESSEQUAL
22511: PUSH
22512: LD_EXP 36
22516: PUSH
22517: LD_INT 0
22519: GREATER
22520: AND
22521: IFFALSE 22544
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22523: LD_INT 3
22525: PPUSH
22526: LD_INT 5
22528: PPUSH
22529: CALL_OW 12
22533: PPUSH
22534: LD_INT 20
22536: PPUSH
22537: LD_INT 1
22539: PPUSH
22540: CALL_OW 55
// if supply > 0 then
22544: LD_EXP 36
22548: PUSH
22549: LD_INT 0
22551: GREATER
22552: IFFALSE 22569
// begin supply = supply - 1 ;
22554: LD_ADDR_EXP 36
22558: PUSH
22559: LD_EXP 36
22563: PUSH
22564: LD_INT 1
22566: MINUS
22567: ST_TO_ADDR
// enable ;
22568: ENABLE
// end ; end ; end_of_file
22569: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
22570: GO 22572
22572: DISABLE
// begin ru_radar := 98 ;
22573: LD_ADDR_EXP 52
22577: PUSH
22578: LD_INT 98
22580: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22581: LD_ADDR_EXP 53
22585: PUSH
22586: LD_INT 89
22588: ST_TO_ADDR
// us_hack := 99 ;
22589: LD_ADDR_EXP 54
22593: PUSH
22594: LD_INT 99
22596: ST_TO_ADDR
// us_artillery := 97 ;
22597: LD_ADDR_EXP 55
22601: PUSH
22602: LD_INT 97
22604: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22605: LD_ADDR_EXP 56
22609: PUSH
22610: LD_INT 91
22612: ST_TO_ADDR
// end ; end_of_file end_of_file
22613: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
22614: GO 22616
22616: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22617: LD_STRING initStreamRollete();
22619: PPUSH
22620: CALL_OW 559
// InitStreamMode ;
22624: CALL 22633 0 0
// DefineStreamItems ( ) ;
22628: CALL 23073 0 0
// end ;
22632: END
// function InitStreamMode ; begin
22633: LD_INT 0
22635: PPUSH
// streamModeActive := false ;
22636: LD_ADDR_EXP 57
22640: PUSH
22641: LD_INT 0
22643: ST_TO_ADDR
// normalCounter := 26 ;
22644: LD_ADDR_EXP 58
22648: PUSH
22649: LD_INT 26
22651: ST_TO_ADDR
// hardcoreCounter := 12 ;
22652: LD_ADDR_EXP 59
22656: PUSH
22657: LD_INT 12
22659: ST_TO_ADDR
// sRocket := false ;
22660: LD_ADDR_EXP 62
22664: PUSH
22665: LD_INT 0
22667: ST_TO_ADDR
// sSpeed := false ;
22668: LD_ADDR_EXP 61
22672: PUSH
22673: LD_INT 0
22675: ST_TO_ADDR
// sEngine := false ;
22676: LD_ADDR_EXP 63
22680: PUSH
22681: LD_INT 0
22683: ST_TO_ADDR
// sSpec := false ;
22684: LD_ADDR_EXP 60
22688: PUSH
22689: LD_INT 0
22691: ST_TO_ADDR
// sLevel := false ;
22692: LD_ADDR_EXP 64
22696: PUSH
22697: LD_INT 0
22699: ST_TO_ADDR
// sArmoury := false ;
22700: LD_ADDR_EXP 65
22704: PUSH
22705: LD_INT 0
22707: ST_TO_ADDR
// sRadar := false ;
22708: LD_ADDR_EXP 66
22712: PUSH
22713: LD_INT 0
22715: ST_TO_ADDR
// sBunker := false ;
22716: LD_ADDR_EXP 67
22720: PUSH
22721: LD_INT 0
22723: ST_TO_ADDR
// sHack := false ;
22724: LD_ADDR_EXP 68
22728: PUSH
22729: LD_INT 0
22731: ST_TO_ADDR
// sFire := false ;
22732: LD_ADDR_EXP 69
22736: PUSH
22737: LD_INT 0
22739: ST_TO_ADDR
// sRefresh := false ;
22740: LD_ADDR_EXP 70
22744: PUSH
22745: LD_INT 0
22747: ST_TO_ADDR
// sExp := false ;
22748: LD_ADDR_EXP 71
22752: PUSH
22753: LD_INT 0
22755: ST_TO_ADDR
// sDepot := false ;
22756: LD_ADDR_EXP 72
22760: PUSH
22761: LD_INT 0
22763: ST_TO_ADDR
// sFlag := false ;
22764: LD_ADDR_EXP 73
22768: PUSH
22769: LD_INT 0
22771: ST_TO_ADDR
// sKamikadze := false ;
22772: LD_ADDR_EXP 81
22776: PUSH
22777: LD_INT 0
22779: ST_TO_ADDR
// sTroll := false ;
22780: LD_ADDR_EXP 82
22784: PUSH
22785: LD_INT 0
22787: ST_TO_ADDR
// sSlow := false ;
22788: LD_ADDR_EXP 83
22792: PUSH
22793: LD_INT 0
22795: ST_TO_ADDR
// sLack := false ;
22796: LD_ADDR_EXP 84
22800: PUSH
22801: LD_INT 0
22803: ST_TO_ADDR
// sTank := false ;
22804: LD_ADDR_EXP 86
22808: PUSH
22809: LD_INT 0
22811: ST_TO_ADDR
// sRemote := false ;
22812: LD_ADDR_EXP 87
22816: PUSH
22817: LD_INT 0
22819: ST_TO_ADDR
// sPowell := false ;
22820: LD_ADDR_EXP 88
22824: PUSH
22825: LD_INT 0
22827: ST_TO_ADDR
// sTeleport := false ;
22828: LD_ADDR_EXP 91
22832: PUSH
22833: LD_INT 0
22835: ST_TO_ADDR
// sOilTower := false ;
22836: LD_ADDR_EXP 93
22840: PUSH
22841: LD_INT 0
22843: ST_TO_ADDR
// sShovel := false ;
22844: LD_ADDR_EXP 94
22848: PUSH
22849: LD_INT 0
22851: ST_TO_ADDR
// sSheik := false ;
22852: LD_ADDR_EXP 95
22856: PUSH
22857: LD_INT 0
22859: ST_TO_ADDR
// sEarthquake := false ;
22860: LD_ADDR_EXP 97
22864: PUSH
22865: LD_INT 0
22867: ST_TO_ADDR
// sAI := false ;
22868: LD_ADDR_EXP 98
22872: PUSH
22873: LD_INT 0
22875: ST_TO_ADDR
// sCargo := false ;
22876: LD_ADDR_EXP 101
22880: PUSH
22881: LD_INT 0
22883: ST_TO_ADDR
// sDLaser := false ;
22884: LD_ADDR_EXP 102
22888: PUSH
22889: LD_INT 0
22891: ST_TO_ADDR
// sExchange := false ;
22892: LD_ADDR_EXP 103
22896: PUSH
22897: LD_INT 0
22899: ST_TO_ADDR
// sFac := false ;
22900: LD_ADDR_EXP 104
22904: PUSH
22905: LD_INT 0
22907: ST_TO_ADDR
// sPower := false ;
22908: LD_ADDR_EXP 105
22912: PUSH
22913: LD_INT 0
22915: ST_TO_ADDR
// sRandom := false ;
22916: LD_ADDR_EXP 106
22920: PUSH
22921: LD_INT 0
22923: ST_TO_ADDR
// sShield := false ;
22924: LD_ADDR_EXP 107
22928: PUSH
22929: LD_INT 0
22931: ST_TO_ADDR
// sTime := false ;
22932: LD_ADDR_EXP 108
22936: PUSH
22937: LD_INT 0
22939: ST_TO_ADDR
// sTools := false ;
22940: LD_ADDR_EXP 109
22944: PUSH
22945: LD_INT 0
22947: ST_TO_ADDR
// sSold := false ;
22948: LD_ADDR_EXP 74
22952: PUSH
22953: LD_INT 0
22955: ST_TO_ADDR
// sDiff := false ;
22956: LD_ADDR_EXP 75
22960: PUSH
22961: LD_INT 0
22963: ST_TO_ADDR
// sFog := false ;
22964: LD_ADDR_EXP 78
22968: PUSH
22969: LD_INT 0
22971: ST_TO_ADDR
// sReset := false ;
22972: LD_ADDR_EXP 79
22976: PUSH
22977: LD_INT 0
22979: ST_TO_ADDR
// sSun := false ;
22980: LD_ADDR_EXP 80
22984: PUSH
22985: LD_INT 0
22987: ST_TO_ADDR
// sTiger := false ;
22988: LD_ADDR_EXP 76
22992: PUSH
22993: LD_INT 0
22995: ST_TO_ADDR
// sBomb := false ;
22996: LD_ADDR_EXP 77
23000: PUSH
23001: LD_INT 0
23003: ST_TO_ADDR
// sWound := false ;
23004: LD_ADDR_EXP 85
23008: PUSH
23009: LD_INT 0
23011: ST_TO_ADDR
// sBetray := false ;
23012: LD_ADDR_EXP 89
23016: PUSH
23017: LD_INT 0
23019: ST_TO_ADDR
// sContamin := false ;
23020: LD_ADDR_EXP 90
23024: PUSH
23025: LD_INT 0
23027: ST_TO_ADDR
// sOil := false ;
23028: LD_ADDR_EXP 92
23032: PUSH
23033: LD_INT 0
23035: ST_TO_ADDR
// sStu := false ;
23036: LD_ADDR_EXP 96
23040: PUSH
23041: LD_INT 0
23043: ST_TO_ADDR
// sBazooka := false ;
23044: LD_ADDR_EXP 99
23048: PUSH
23049: LD_INT 0
23051: ST_TO_ADDR
// sMortar := false ;
23052: LD_ADDR_EXP 100
23056: PUSH
23057: LD_INT 0
23059: ST_TO_ADDR
// sRanger := false ;
23060: LD_ADDR_EXP 110
23064: PUSH
23065: LD_INT 0
23067: ST_TO_ADDR
// end ;
23068: LD_VAR 0 1
23072: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
23073: LD_INT 0
23075: PPUSH
23076: PPUSH
23077: PPUSH
23078: PPUSH
23079: PPUSH
// result := [ ] ;
23080: LD_ADDR_VAR 0 1
23084: PUSH
23085: EMPTY
23086: ST_TO_ADDR
// if campaign_id = 1 then
23087: LD_OWVAR 69
23091: PUSH
23092: LD_INT 1
23094: EQUAL
23095: IFFALSE 26031
// begin case mission_number of 1 :
23097: LD_OWVAR 70
23101: PUSH
23102: LD_INT 1
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23174
23110: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
23111: LD_ADDR_VAR 0 1
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 4
23121: PUSH
23122: LD_INT 11
23124: PUSH
23125: LD_INT 12
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 16
23133: PUSH
23134: LD_INT 22
23136: PUSH
23137: LD_INT 23
23139: PUSH
23140: LD_INT 26
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 101
23156: PUSH
23157: LD_INT 102
23159: PUSH
23160: LD_INT 106
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: ST_TO_ADDR
23172: GO 26031
23174: LD_INT 2
23176: DOUBLE
23177: EQUAL
23178: IFTRUE 23182
23180: GO 23254
23182: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
23183: LD_ADDR_VAR 0 1
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: LD_INT 4
23193: PUSH
23194: LD_INT 11
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 15
23202: PUSH
23203: LD_INT 16
23205: PUSH
23206: LD_INT 22
23208: PUSH
23209: LD_INT 23
23211: PUSH
23212: LD_INT 26
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 101
23228: PUSH
23229: LD_INT 102
23231: PUSH
23232: LD_INT 105
23234: PUSH
23235: LD_INT 106
23237: PUSH
23238: LD_INT 108
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: ST_TO_ADDR
23252: GO 26031
23254: LD_INT 3
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23338
23262: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
23263: LD_ADDR_VAR 0 1
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 4
23273: PUSH
23274: LD_INT 5
23276: PUSH
23277: LD_INT 11
23279: PUSH
23280: LD_INT 12
23282: PUSH
23283: LD_INT 15
23285: PUSH
23286: LD_INT 16
23288: PUSH
23289: LD_INT 22
23291: PUSH
23292: LD_INT 26
23294: PUSH
23295: LD_INT 36
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 101
23312: PUSH
23313: LD_INT 102
23315: PUSH
23316: LD_INT 105
23318: PUSH
23319: LD_INT 106
23321: PUSH
23322: LD_INT 108
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: ST_TO_ADDR
23336: GO 26031
23338: LD_INT 4
23340: DOUBLE
23341: EQUAL
23342: IFTRUE 23346
23344: GO 23430
23346: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
23347: LD_ADDR_VAR 0 1
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: LD_INT 4
23357: PUSH
23358: LD_INT 5
23360: PUSH
23361: LD_INT 8
23363: PUSH
23364: LD_INT 11
23366: PUSH
23367: LD_INT 12
23369: PUSH
23370: LD_INT 15
23372: PUSH
23373: LD_INT 16
23375: PUSH
23376: LD_INT 22
23378: PUSH
23379: LD_INT 23
23381: PUSH
23382: LD_INT 26
23384: PUSH
23385: LD_INT 36
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 101
23404: PUSH
23405: LD_INT 102
23407: PUSH
23408: LD_INT 105
23410: PUSH
23411: LD_INT 106
23413: PUSH
23414: LD_INT 108
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: ST_TO_ADDR
23428: GO 26031
23430: LD_INT 5
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 23538
23438: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
23439: LD_ADDR_VAR 0 1
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 4
23449: PUSH
23450: LD_INT 5
23452: PUSH
23453: LD_INT 6
23455: PUSH
23456: LD_INT 8
23458: PUSH
23459: LD_INT 11
23461: PUSH
23462: LD_INT 12
23464: PUSH
23465: LD_INT 15
23467: PUSH
23468: LD_INT 16
23470: PUSH
23471: LD_INT 22
23473: PUSH
23474: LD_INT 23
23476: PUSH
23477: LD_INT 25
23479: PUSH
23480: LD_INT 26
23482: PUSH
23483: LD_INT 36
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 101
23504: PUSH
23505: LD_INT 102
23507: PUSH
23508: LD_INT 105
23510: PUSH
23511: LD_INT 106
23513: PUSH
23514: LD_INT 108
23516: PUSH
23517: LD_INT 109
23519: PUSH
23520: LD_INT 112
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: ST_TO_ADDR
23536: GO 26031
23538: LD_INT 6
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23666
23546: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
23547: LD_ADDR_VAR 0 1
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: LD_INT 4
23557: PUSH
23558: LD_INT 5
23560: PUSH
23561: LD_INT 6
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 11
23569: PUSH
23570: LD_INT 12
23572: PUSH
23573: LD_INT 15
23575: PUSH
23576: LD_INT 16
23578: PUSH
23579: LD_INT 20
23581: PUSH
23582: LD_INT 21
23584: PUSH
23585: LD_INT 22
23587: PUSH
23588: LD_INT 23
23590: PUSH
23591: LD_INT 25
23593: PUSH
23594: LD_INT 26
23596: PUSH
23597: LD_INT 30
23599: PUSH
23600: LD_INT 31
23602: PUSH
23603: LD_INT 32
23605: PUSH
23606: LD_INT 36
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 101
23632: PUSH
23633: LD_INT 102
23635: PUSH
23636: LD_INT 105
23638: PUSH
23639: LD_INT 106
23641: PUSH
23642: LD_INT 108
23644: PUSH
23645: LD_INT 109
23647: PUSH
23648: LD_INT 112
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: ST_TO_ADDR
23664: GO 26031
23666: LD_INT 7
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23774
23674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
23675: LD_ADDR_VAR 0 1
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 7
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 20
23706: PUSH
23707: LD_INT 21
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_INT 23
23715: PUSH
23716: LD_INT 25
23718: PUSH
23719: LD_INT 26
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 101
23740: PUSH
23741: LD_INT 102
23743: PUSH
23744: LD_INT 103
23746: PUSH
23747: LD_INT 105
23749: PUSH
23750: LD_INT 106
23752: PUSH
23753: LD_INT 108
23755: PUSH
23756: LD_INT 112
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: ST_TO_ADDR
23772: GO 26031
23774: LD_INT 8
23776: DOUBLE
23777: EQUAL
23778: IFTRUE 23782
23780: GO 23910
23782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
23783: LD_ADDR_VAR 0 1
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: LD_INT 4
23793: PUSH
23794: LD_INT 5
23796: PUSH
23797: LD_INT 6
23799: PUSH
23800: LD_INT 7
23802: PUSH
23803: LD_INT 8
23805: PUSH
23806: LD_INT 11
23808: PUSH
23809: LD_INT 12
23811: PUSH
23812: LD_INT 15
23814: PUSH
23815: LD_INT 16
23817: PUSH
23818: LD_INT 20
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 23
23829: PUSH
23830: LD_INT 25
23832: PUSH
23833: LD_INT 26
23835: PUSH
23836: LD_INT 30
23838: PUSH
23839: LD_INT 31
23841: PUSH
23842: LD_INT 32
23844: PUSH
23845: LD_INT 36
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 101
23872: PUSH
23873: LD_INT 102
23875: PUSH
23876: LD_INT 103
23878: PUSH
23879: LD_INT 105
23881: PUSH
23882: LD_INT 106
23884: PUSH
23885: LD_INT 108
23887: PUSH
23888: LD_INT 109
23890: PUSH
23891: LD_INT 112
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: ST_TO_ADDR
23908: GO 26031
23910: LD_INT 9
23912: DOUBLE
23913: EQUAL
23914: IFTRUE 23918
23916: GO 24054
23918: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
23919: LD_ADDR_VAR 0 1
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 4
23929: PUSH
23930: LD_INT 5
23932: PUSH
23933: LD_INT 6
23935: PUSH
23936: LD_INT 7
23938: PUSH
23939: LD_INT 8
23941: PUSH
23942: LD_INT 11
23944: PUSH
23945: LD_INT 12
23947: PUSH
23948: LD_INT 15
23950: PUSH
23951: LD_INT 16
23953: PUSH
23954: LD_INT 20
23956: PUSH
23957: LD_INT 21
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_INT 23
23965: PUSH
23966: LD_INT 25
23968: PUSH
23969: LD_INT 26
23971: PUSH
23972: LD_INT 28
23974: PUSH
23975: LD_INT 30
23977: PUSH
23978: LD_INT 31
23980: PUSH
23981: LD_INT 32
23983: PUSH
23984: LD_INT 36
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 101
24012: PUSH
24013: LD_INT 102
24015: PUSH
24016: LD_INT 103
24018: PUSH
24019: LD_INT 105
24021: PUSH
24022: LD_INT 106
24024: PUSH
24025: LD_INT 108
24027: PUSH
24028: LD_INT 109
24030: PUSH
24031: LD_INT 112
24033: PUSH
24034: LD_INT 114
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: ST_TO_ADDR
24052: GO 26031
24054: LD_INT 10
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24246
24062: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
24063: LD_ADDR_VAR 0 1
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 4
24073: PUSH
24074: LD_INT 5
24076: PUSH
24077: LD_INT 6
24079: PUSH
24080: LD_INT 7
24082: PUSH
24083: LD_INT 8
24085: PUSH
24086: LD_INT 9
24088: PUSH
24089: LD_INT 10
24091: PUSH
24092: LD_INT 11
24094: PUSH
24095: LD_INT 12
24097: PUSH
24098: LD_INT 13
24100: PUSH
24101: LD_INT 14
24103: PUSH
24104: LD_INT 15
24106: PUSH
24107: LD_INT 16
24109: PUSH
24110: LD_INT 17
24112: PUSH
24113: LD_INT 18
24115: PUSH
24116: LD_INT 19
24118: PUSH
24119: LD_INT 20
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 24
24133: PUSH
24134: LD_INT 25
24136: PUSH
24137: LD_INT 26
24139: PUSH
24140: LD_INT 28
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 31
24148: PUSH
24149: LD_INT 32
24151: PUSH
24152: LD_INT 36
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 101
24188: PUSH
24189: LD_INT 102
24191: PUSH
24192: LD_INT 103
24194: PUSH
24195: LD_INT 104
24197: PUSH
24198: LD_INT 105
24200: PUSH
24201: LD_INT 106
24203: PUSH
24204: LD_INT 107
24206: PUSH
24207: LD_INT 108
24209: PUSH
24210: LD_INT 109
24212: PUSH
24213: LD_INT 110
24215: PUSH
24216: LD_INT 111
24218: PUSH
24219: LD_INT 112
24221: PUSH
24222: LD_INT 114
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 26031
24246: LD_INT 11
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24446
24254: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
24255: LD_ADDR_VAR 0 1
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: LD_INT 6
24274: PUSH
24275: LD_INT 7
24277: PUSH
24278: LD_INT 8
24280: PUSH
24281: LD_INT 9
24283: PUSH
24284: LD_INT 10
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 13
24295: PUSH
24296: LD_INT 14
24298: PUSH
24299: LD_INT 15
24301: PUSH
24302: LD_INT 16
24304: PUSH
24305: LD_INT 17
24307: PUSH
24308: LD_INT 18
24310: PUSH
24311: LD_INT 19
24313: PUSH
24314: LD_INT 20
24316: PUSH
24317: LD_INT 21
24319: PUSH
24320: LD_INT 22
24322: PUSH
24323: LD_INT 23
24325: PUSH
24326: LD_INT 24
24328: PUSH
24329: LD_INT 25
24331: PUSH
24332: LD_INT 26
24334: PUSH
24335: LD_INT 28
24337: PUSH
24338: LD_INT 30
24340: PUSH
24341: LD_INT 31
24343: PUSH
24344: LD_INT 32
24346: PUSH
24347: LD_INT 34
24349: PUSH
24350: LD_INT 36
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 101
24388: PUSH
24389: LD_INT 102
24391: PUSH
24392: LD_INT 103
24394: PUSH
24395: LD_INT 104
24397: PUSH
24398: LD_INT 105
24400: PUSH
24401: LD_INT 106
24403: PUSH
24404: LD_INT 107
24406: PUSH
24407: LD_INT 108
24409: PUSH
24410: LD_INT 109
24412: PUSH
24413: LD_INT 110
24415: PUSH
24416: LD_INT 111
24418: PUSH
24419: LD_INT 112
24421: PUSH
24422: LD_INT 114
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: ST_TO_ADDR
24444: GO 26031
24446: LD_INT 12
24448: DOUBLE
24449: EQUAL
24450: IFTRUE 24454
24452: GO 24662
24454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
24455: LD_ADDR_VAR 0 1
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 3
24468: PUSH
24469: LD_INT 4
24471: PUSH
24472: LD_INT 5
24474: PUSH
24475: LD_INT 6
24477: PUSH
24478: LD_INT 7
24480: PUSH
24481: LD_INT 8
24483: PUSH
24484: LD_INT 9
24486: PUSH
24487: LD_INT 10
24489: PUSH
24490: LD_INT 11
24492: PUSH
24493: LD_INT 12
24495: PUSH
24496: LD_INT 13
24498: PUSH
24499: LD_INT 14
24501: PUSH
24502: LD_INT 15
24504: PUSH
24505: LD_INT 16
24507: PUSH
24508: LD_INT 17
24510: PUSH
24511: LD_INT 18
24513: PUSH
24514: LD_INT 19
24516: PUSH
24517: LD_INT 20
24519: PUSH
24520: LD_INT 21
24522: PUSH
24523: LD_INT 22
24525: PUSH
24526: LD_INT 23
24528: PUSH
24529: LD_INT 24
24531: PUSH
24532: LD_INT 25
24534: PUSH
24535: LD_INT 26
24537: PUSH
24538: LD_INT 27
24540: PUSH
24541: LD_INT 28
24543: PUSH
24544: LD_INT 30
24546: PUSH
24547: LD_INT 31
24549: PUSH
24550: LD_INT 32
24552: PUSH
24553: LD_INT 33
24555: PUSH
24556: LD_INT 34
24558: PUSH
24559: LD_INT 36
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 101
24600: PUSH
24601: LD_INT 102
24603: PUSH
24604: LD_INT 103
24606: PUSH
24607: LD_INT 104
24609: PUSH
24610: LD_INT 105
24612: PUSH
24613: LD_INT 106
24615: PUSH
24616: LD_INT 107
24618: PUSH
24619: LD_INT 108
24621: PUSH
24622: LD_INT 109
24624: PUSH
24625: LD_INT 110
24627: PUSH
24628: LD_INT 111
24630: PUSH
24631: LD_INT 112
24633: PUSH
24634: LD_INT 113
24636: PUSH
24637: LD_INT 114
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: ST_TO_ADDR
24660: GO 26031
24662: LD_INT 13
24664: DOUBLE
24665: EQUAL
24666: IFTRUE 24670
24668: GO 24866
24670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
24671: LD_ADDR_VAR 0 1
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: LD_INT 3
24684: PUSH
24685: LD_INT 4
24687: PUSH
24688: LD_INT 5
24690: PUSH
24691: LD_INT 8
24693: PUSH
24694: LD_INT 9
24696: PUSH
24697: LD_INT 10
24699: PUSH
24700: LD_INT 11
24702: PUSH
24703: LD_INT 12
24705: PUSH
24706: LD_INT 14
24708: PUSH
24709: LD_INT 15
24711: PUSH
24712: LD_INT 16
24714: PUSH
24715: LD_INT 17
24717: PUSH
24718: LD_INT 18
24720: PUSH
24721: LD_INT 19
24723: PUSH
24724: LD_INT 20
24726: PUSH
24727: LD_INT 21
24729: PUSH
24730: LD_INT 22
24732: PUSH
24733: LD_INT 23
24735: PUSH
24736: LD_INT 24
24738: PUSH
24739: LD_INT 25
24741: PUSH
24742: LD_INT 26
24744: PUSH
24745: LD_INT 27
24747: PUSH
24748: LD_INT 28
24750: PUSH
24751: LD_INT 30
24753: PUSH
24754: LD_INT 31
24756: PUSH
24757: LD_INT 32
24759: PUSH
24760: LD_INT 33
24762: PUSH
24763: LD_INT 34
24765: PUSH
24766: LD_INT 36
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 101
24804: PUSH
24805: LD_INT 102
24807: PUSH
24808: LD_INT 103
24810: PUSH
24811: LD_INT 104
24813: PUSH
24814: LD_INT 105
24816: PUSH
24817: LD_INT 106
24819: PUSH
24820: LD_INT 107
24822: PUSH
24823: LD_INT 108
24825: PUSH
24826: LD_INT 109
24828: PUSH
24829: LD_INT 110
24831: PUSH
24832: LD_INT 111
24834: PUSH
24835: LD_INT 112
24837: PUSH
24838: LD_INT 113
24840: PUSH
24841: LD_INT 114
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: ST_TO_ADDR
24864: GO 26031
24866: LD_INT 14
24868: DOUBLE
24869: EQUAL
24870: IFTRUE 24874
24872: GO 25086
24874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24875: LD_ADDR_VAR 0 1
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 3
24888: PUSH
24889: LD_INT 4
24891: PUSH
24892: LD_INT 5
24894: PUSH
24895: LD_INT 6
24897: PUSH
24898: LD_INT 7
24900: PUSH
24901: LD_INT 8
24903: PUSH
24904: LD_INT 9
24906: PUSH
24907: LD_INT 10
24909: PUSH
24910: LD_INT 11
24912: PUSH
24913: LD_INT 12
24915: PUSH
24916: LD_INT 13
24918: PUSH
24919: LD_INT 14
24921: PUSH
24922: LD_INT 15
24924: PUSH
24925: LD_INT 16
24927: PUSH
24928: LD_INT 17
24930: PUSH
24931: LD_INT 18
24933: PUSH
24934: LD_INT 19
24936: PUSH
24937: LD_INT 20
24939: PUSH
24940: LD_INT 21
24942: PUSH
24943: LD_INT 22
24945: PUSH
24946: LD_INT 23
24948: PUSH
24949: LD_INT 24
24951: PUSH
24952: LD_INT 25
24954: PUSH
24955: LD_INT 26
24957: PUSH
24958: LD_INT 27
24960: PUSH
24961: LD_INT 28
24963: PUSH
24964: LD_INT 29
24966: PUSH
24967: LD_INT 30
24969: PUSH
24970: LD_INT 31
24972: PUSH
24973: LD_INT 32
24975: PUSH
24976: LD_INT 33
24978: PUSH
24979: LD_INT 34
24981: PUSH
24982: LD_INT 36
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 101
25024: PUSH
25025: LD_INT 102
25027: PUSH
25028: LD_INT 103
25030: PUSH
25031: LD_INT 104
25033: PUSH
25034: LD_INT 105
25036: PUSH
25037: LD_INT 106
25039: PUSH
25040: LD_INT 107
25042: PUSH
25043: LD_INT 108
25045: PUSH
25046: LD_INT 109
25048: PUSH
25049: LD_INT 110
25051: PUSH
25052: LD_INT 111
25054: PUSH
25055: LD_INT 112
25057: PUSH
25058: LD_INT 113
25060: PUSH
25061: LD_INT 114
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: ST_TO_ADDR
25084: GO 26031
25086: LD_INT 15
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25306
25094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
25095: LD_ADDR_VAR 0 1
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: LD_INT 4
25111: PUSH
25112: LD_INT 5
25114: PUSH
25115: LD_INT 6
25117: PUSH
25118: LD_INT 7
25120: PUSH
25121: LD_INT 8
25123: PUSH
25124: LD_INT 9
25126: PUSH
25127: LD_INT 10
25129: PUSH
25130: LD_INT 11
25132: PUSH
25133: LD_INT 12
25135: PUSH
25136: LD_INT 13
25138: PUSH
25139: LD_INT 14
25141: PUSH
25142: LD_INT 15
25144: PUSH
25145: LD_INT 16
25147: PUSH
25148: LD_INT 17
25150: PUSH
25151: LD_INT 18
25153: PUSH
25154: LD_INT 19
25156: PUSH
25157: LD_INT 20
25159: PUSH
25160: LD_INT 21
25162: PUSH
25163: LD_INT 22
25165: PUSH
25166: LD_INT 23
25168: PUSH
25169: LD_INT 24
25171: PUSH
25172: LD_INT 25
25174: PUSH
25175: LD_INT 26
25177: PUSH
25178: LD_INT 27
25180: PUSH
25181: LD_INT 28
25183: PUSH
25184: LD_INT 29
25186: PUSH
25187: LD_INT 30
25189: PUSH
25190: LD_INT 31
25192: PUSH
25193: LD_INT 32
25195: PUSH
25196: LD_INT 33
25198: PUSH
25199: LD_INT 34
25201: PUSH
25202: LD_INT 36
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 101
25244: PUSH
25245: LD_INT 102
25247: PUSH
25248: LD_INT 103
25250: PUSH
25251: LD_INT 104
25253: PUSH
25254: LD_INT 105
25256: PUSH
25257: LD_INT 106
25259: PUSH
25260: LD_INT 107
25262: PUSH
25263: LD_INT 108
25265: PUSH
25266: LD_INT 109
25268: PUSH
25269: LD_INT 110
25271: PUSH
25272: LD_INT 111
25274: PUSH
25275: LD_INT 112
25277: PUSH
25278: LD_INT 113
25280: PUSH
25281: LD_INT 114
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: ST_TO_ADDR
25304: GO 26031
25306: LD_INT 16
25308: DOUBLE
25309: EQUAL
25310: IFTRUE 25314
25312: GO 25438
25314: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
25315: LD_ADDR_VAR 0 1
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 4
25325: PUSH
25326: LD_INT 5
25328: PUSH
25329: LD_INT 7
25331: PUSH
25332: LD_INT 11
25334: PUSH
25335: LD_INT 12
25337: PUSH
25338: LD_INT 15
25340: PUSH
25341: LD_INT 16
25343: PUSH
25344: LD_INT 20
25346: PUSH
25347: LD_INT 21
25349: PUSH
25350: LD_INT 22
25352: PUSH
25353: LD_INT 23
25355: PUSH
25356: LD_INT 25
25358: PUSH
25359: LD_INT 26
25361: PUSH
25362: LD_INT 30
25364: PUSH
25365: LD_INT 31
25367: PUSH
25368: LD_INT 32
25370: PUSH
25371: LD_INT 33
25373: PUSH
25374: LD_INT 34
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 101
25400: PUSH
25401: LD_INT 102
25403: PUSH
25404: LD_INT 103
25406: PUSH
25407: LD_INT 106
25409: PUSH
25410: LD_INT 108
25412: PUSH
25413: LD_INT 112
25415: PUSH
25416: LD_INT 113
25418: PUSH
25419: LD_INT 114
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: ST_TO_ADDR
25436: GO 26031
25438: LD_INT 17
25440: DOUBLE
25441: EQUAL
25442: IFTRUE 25446
25444: GO 25658
25446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
25447: LD_ADDR_VAR 0 1
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: LD_INT 4
25463: PUSH
25464: LD_INT 5
25466: PUSH
25467: LD_INT 6
25469: PUSH
25470: LD_INT 7
25472: PUSH
25473: LD_INT 8
25475: PUSH
25476: LD_INT 9
25478: PUSH
25479: LD_INT 10
25481: PUSH
25482: LD_INT 11
25484: PUSH
25485: LD_INT 12
25487: PUSH
25488: LD_INT 13
25490: PUSH
25491: LD_INT 14
25493: PUSH
25494: LD_INT 15
25496: PUSH
25497: LD_INT 16
25499: PUSH
25500: LD_INT 17
25502: PUSH
25503: LD_INT 18
25505: PUSH
25506: LD_INT 19
25508: PUSH
25509: LD_INT 20
25511: PUSH
25512: LD_INT 21
25514: PUSH
25515: LD_INT 22
25517: PUSH
25518: LD_INT 23
25520: PUSH
25521: LD_INT 24
25523: PUSH
25524: LD_INT 25
25526: PUSH
25527: LD_INT 26
25529: PUSH
25530: LD_INT 27
25532: PUSH
25533: LD_INT 28
25535: PUSH
25536: LD_INT 29
25538: PUSH
25539: LD_INT 30
25541: PUSH
25542: LD_INT 31
25544: PUSH
25545: LD_INT 32
25547: PUSH
25548: LD_INT 33
25550: PUSH
25551: LD_INT 34
25553: PUSH
25554: LD_INT 36
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 101
25596: PUSH
25597: LD_INT 102
25599: PUSH
25600: LD_INT 103
25602: PUSH
25603: LD_INT 104
25605: PUSH
25606: LD_INT 105
25608: PUSH
25609: LD_INT 106
25611: PUSH
25612: LD_INT 107
25614: PUSH
25615: LD_INT 108
25617: PUSH
25618: LD_INT 109
25620: PUSH
25621: LD_INT 110
25623: PUSH
25624: LD_INT 111
25626: PUSH
25627: LD_INT 112
25629: PUSH
25630: LD_INT 113
25632: PUSH
25633: LD_INT 114
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: ST_TO_ADDR
25656: GO 26031
25658: LD_INT 18
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25802
25666: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
25667: LD_ADDR_VAR 0 1
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: LD_INT 4
25677: PUSH
25678: LD_INT 5
25680: PUSH
25681: LD_INT 7
25683: PUSH
25684: LD_INT 11
25686: PUSH
25687: LD_INT 12
25689: PUSH
25690: LD_INT 15
25692: PUSH
25693: LD_INT 16
25695: PUSH
25696: LD_INT 20
25698: PUSH
25699: LD_INT 21
25701: PUSH
25702: LD_INT 22
25704: PUSH
25705: LD_INT 23
25707: PUSH
25708: LD_INT 25
25710: PUSH
25711: LD_INT 26
25713: PUSH
25714: LD_INT 30
25716: PUSH
25717: LD_INT 31
25719: PUSH
25720: LD_INT 32
25722: PUSH
25723: LD_INT 33
25725: PUSH
25726: LD_INT 34
25728: PUSH
25729: LD_INT 35
25731: PUSH
25732: LD_INT 36
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 101
25760: PUSH
25761: LD_INT 102
25763: PUSH
25764: LD_INT 103
25766: PUSH
25767: LD_INT 106
25769: PUSH
25770: LD_INT 108
25772: PUSH
25773: LD_INT 112
25775: PUSH
25776: LD_INT 113
25778: PUSH
25779: LD_INT 114
25781: PUSH
25782: LD_INT 115
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: ST_TO_ADDR
25800: GO 26031
25802: LD_INT 19
25804: DOUBLE
25805: EQUAL
25806: IFTRUE 25810
25808: GO 26030
25810: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25811: LD_ADDR_VAR 0 1
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: LD_INT 3
25824: PUSH
25825: LD_INT 4
25827: PUSH
25828: LD_INT 5
25830: PUSH
25831: LD_INT 6
25833: PUSH
25834: LD_INT 7
25836: PUSH
25837: LD_INT 8
25839: PUSH
25840: LD_INT 9
25842: PUSH
25843: LD_INT 10
25845: PUSH
25846: LD_INT 11
25848: PUSH
25849: LD_INT 12
25851: PUSH
25852: LD_INT 13
25854: PUSH
25855: LD_INT 14
25857: PUSH
25858: LD_INT 15
25860: PUSH
25861: LD_INT 16
25863: PUSH
25864: LD_INT 17
25866: PUSH
25867: LD_INT 18
25869: PUSH
25870: LD_INT 19
25872: PUSH
25873: LD_INT 20
25875: PUSH
25876: LD_INT 21
25878: PUSH
25879: LD_INT 22
25881: PUSH
25882: LD_INT 23
25884: PUSH
25885: LD_INT 24
25887: PUSH
25888: LD_INT 25
25890: PUSH
25891: LD_INT 26
25893: PUSH
25894: LD_INT 27
25896: PUSH
25897: LD_INT 28
25899: PUSH
25900: LD_INT 29
25902: PUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 31
25908: PUSH
25909: LD_INT 32
25911: PUSH
25912: LD_INT 33
25914: PUSH
25915: LD_INT 34
25917: PUSH
25918: LD_INT 35
25920: PUSH
25921: LD_INT 36
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 101
25964: PUSH
25965: LD_INT 102
25967: PUSH
25968: LD_INT 103
25970: PUSH
25971: LD_INT 104
25973: PUSH
25974: LD_INT 105
25976: PUSH
25977: LD_INT 106
25979: PUSH
25980: LD_INT 107
25982: PUSH
25983: LD_INT 108
25985: PUSH
25986: LD_INT 109
25988: PUSH
25989: LD_INT 110
25991: PUSH
25992: LD_INT 111
25994: PUSH
25995: LD_INT 112
25997: PUSH
25998: LD_INT 113
26000: PUSH
26001: LD_INT 114
26003: PUSH
26004: LD_INT 115
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: ST_TO_ADDR
26028: GO 26031
26030: POP
// end ; if result then
26031: LD_VAR 0 1
26035: IFFALSE 26324
// begin normal :=  ;
26037: LD_ADDR_VAR 0 3
26041: PUSH
26042: LD_STRING 
26044: ST_TO_ADDR
// hardcore :=  ;
26045: LD_ADDR_VAR 0 4
26049: PUSH
26050: LD_STRING 
26052: ST_TO_ADDR
// for i = 1 to normalCounter do
26053: LD_ADDR_VAR 0 5
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_EXP 58
26067: PUSH
26068: FOR_TO
26069: IFFALSE 26170
// begin tmp := 0 ;
26071: LD_ADDR_VAR 0 2
26075: PUSH
26076: LD_STRING 0
26078: ST_TO_ADDR
// if result [ 1 ] then
26079: LD_VAR 0 1
26083: PUSH
26084: LD_INT 1
26086: ARRAY
26087: IFFALSE 26152
// if result [ 1 ] [ 1 ] = i then
26089: LD_VAR 0 1
26093: PUSH
26094: LD_INT 1
26096: ARRAY
26097: PUSH
26098: LD_INT 1
26100: ARRAY
26101: PUSH
26102: LD_VAR 0 5
26106: EQUAL
26107: IFFALSE 26152
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26109: LD_ADDR_VAR 0 1
26113: PUSH
26114: LD_VAR 0 1
26118: PPUSH
26119: LD_INT 1
26121: PPUSH
26122: LD_VAR 0 1
26126: PUSH
26127: LD_INT 1
26129: ARRAY
26130: PPUSH
26131: LD_INT 1
26133: PPUSH
26134: CALL_OW 3
26138: PPUSH
26139: CALL_OW 1
26143: ST_TO_ADDR
// tmp := 1 ;
26144: LD_ADDR_VAR 0 2
26148: PUSH
26149: LD_STRING 1
26151: ST_TO_ADDR
// end ; normal := normal & tmp ;
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: LD_VAR 0 3
26161: PUSH
26162: LD_VAR 0 2
26166: STR
26167: ST_TO_ADDR
// end ;
26168: GO 26068
26170: POP
26171: POP
// for i = 1 to hardcoreCounter do
26172: LD_ADDR_VAR 0 5
26176: PUSH
26177: DOUBLE
26178: LD_INT 1
26180: DEC
26181: ST_TO_ADDR
26182: LD_EXP 59
26186: PUSH
26187: FOR_TO
26188: IFFALSE 26293
// begin tmp := 0 ;
26190: LD_ADDR_VAR 0 2
26194: PUSH
26195: LD_STRING 0
26197: ST_TO_ADDR
// if result [ 2 ] then
26198: LD_VAR 0 1
26202: PUSH
26203: LD_INT 2
26205: ARRAY
26206: IFFALSE 26275
// if result [ 2 ] [ 1 ] = 100 + i then
26208: LD_VAR 0 1
26212: PUSH
26213: LD_INT 2
26215: ARRAY
26216: PUSH
26217: LD_INT 1
26219: ARRAY
26220: PUSH
26221: LD_INT 100
26223: PUSH
26224: LD_VAR 0 5
26228: PLUS
26229: EQUAL
26230: IFFALSE 26275
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26232: LD_ADDR_VAR 0 1
26236: PUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: LD_INT 2
26244: PPUSH
26245: LD_VAR 0 1
26249: PUSH
26250: LD_INT 2
26252: ARRAY
26253: PPUSH
26254: LD_INT 1
26256: PPUSH
26257: CALL_OW 3
26261: PPUSH
26262: CALL_OW 1
26266: ST_TO_ADDR
// tmp := 1 ;
26267: LD_ADDR_VAR 0 2
26271: PUSH
26272: LD_STRING 1
26274: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26275: LD_ADDR_VAR 0 4
26279: PUSH
26280: LD_VAR 0 4
26284: PUSH
26285: LD_VAR 0 2
26289: STR
26290: ST_TO_ADDR
// end ;
26291: GO 26187
26293: POP
26294: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
26295: LD_STRING getStreamItemsFromMission("
26297: PUSH
26298: LD_VAR 0 3
26302: STR
26303: PUSH
26304: LD_STRING ","
26306: STR
26307: PUSH
26308: LD_VAR 0 4
26312: STR
26313: PUSH
26314: LD_STRING ")
26316: STR
26317: PPUSH
26318: CALL_OW 559
// end else
26322: GO 26331
// ToLua ( getStreamItemsFromMission("","") ) ;
26324: LD_STRING getStreamItemsFromMission("","")
26326: PPUSH
26327: CALL_OW 559
// end ;
26331: LD_VAR 0 1
26335: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
26336: LD_VAR 0 2
26340: PUSH
26341: LD_INT 100
26343: EQUAL
26344: IFFALSE 27293
// begin if not StreamModeActive then
26346: LD_EXP 57
26350: NOT
26351: IFFALSE 26361
// StreamModeActive := true ;
26353: LD_ADDR_EXP 57
26357: PUSH
26358: LD_INT 1
26360: ST_TO_ADDR
// if p3 = 0 then
26361: LD_VAR 0 3
26365: PUSH
26366: LD_INT 0
26368: EQUAL
26369: IFFALSE 26375
// InitStreamMode ;
26371: CALL 22633 0 0
// if p3 = 1 then
26375: LD_VAR 0 3
26379: PUSH
26380: LD_INT 1
26382: EQUAL
26383: IFFALSE 26393
// sRocket := true ;
26385: LD_ADDR_EXP 62
26389: PUSH
26390: LD_INT 1
26392: ST_TO_ADDR
// if p3 = 2 then
26393: LD_VAR 0 3
26397: PUSH
26398: LD_INT 2
26400: EQUAL
26401: IFFALSE 26411
// sSpeed := true ;
26403: LD_ADDR_EXP 61
26407: PUSH
26408: LD_INT 1
26410: ST_TO_ADDR
// if p3 = 3 then
26411: LD_VAR 0 3
26415: PUSH
26416: LD_INT 3
26418: EQUAL
26419: IFFALSE 26429
// sEngine := true ;
26421: LD_ADDR_EXP 63
26425: PUSH
26426: LD_INT 1
26428: ST_TO_ADDR
// if p3 = 4 then
26429: LD_VAR 0 3
26433: PUSH
26434: LD_INT 4
26436: EQUAL
26437: IFFALSE 26447
// sSpec := true ;
26439: LD_ADDR_EXP 60
26443: PUSH
26444: LD_INT 1
26446: ST_TO_ADDR
// if p3 = 5 then
26447: LD_VAR 0 3
26451: PUSH
26452: LD_INT 5
26454: EQUAL
26455: IFFALSE 26465
// sLevel := true ;
26457: LD_ADDR_EXP 64
26461: PUSH
26462: LD_INT 1
26464: ST_TO_ADDR
// if p3 = 6 then
26465: LD_VAR 0 3
26469: PUSH
26470: LD_INT 6
26472: EQUAL
26473: IFFALSE 26483
// sArmoury := true ;
26475: LD_ADDR_EXP 65
26479: PUSH
26480: LD_INT 1
26482: ST_TO_ADDR
// if p3 = 7 then
26483: LD_VAR 0 3
26487: PUSH
26488: LD_INT 7
26490: EQUAL
26491: IFFALSE 26501
// sRadar := true ;
26493: LD_ADDR_EXP 66
26497: PUSH
26498: LD_INT 1
26500: ST_TO_ADDR
// if p3 = 8 then
26501: LD_VAR 0 3
26505: PUSH
26506: LD_INT 8
26508: EQUAL
26509: IFFALSE 26519
// sBunker := true ;
26511: LD_ADDR_EXP 67
26515: PUSH
26516: LD_INT 1
26518: ST_TO_ADDR
// if p3 = 9 then
26519: LD_VAR 0 3
26523: PUSH
26524: LD_INT 9
26526: EQUAL
26527: IFFALSE 26537
// sHack := true ;
26529: LD_ADDR_EXP 68
26533: PUSH
26534: LD_INT 1
26536: ST_TO_ADDR
// if p3 = 10 then
26537: LD_VAR 0 3
26541: PUSH
26542: LD_INT 10
26544: EQUAL
26545: IFFALSE 26555
// sFire := true ;
26547: LD_ADDR_EXP 69
26551: PUSH
26552: LD_INT 1
26554: ST_TO_ADDR
// if p3 = 11 then
26555: LD_VAR 0 3
26559: PUSH
26560: LD_INT 11
26562: EQUAL
26563: IFFALSE 26573
// sRefresh := true ;
26565: LD_ADDR_EXP 70
26569: PUSH
26570: LD_INT 1
26572: ST_TO_ADDR
// if p3 = 12 then
26573: LD_VAR 0 3
26577: PUSH
26578: LD_INT 12
26580: EQUAL
26581: IFFALSE 26591
// sExp := true ;
26583: LD_ADDR_EXP 71
26587: PUSH
26588: LD_INT 1
26590: ST_TO_ADDR
// if p3 = 13 then
26591: LD_VAR 0 3
26595: PUSH
26596: LD_INT 13
26598: EQUAL
26599: IFFALSE 26609
// sDepot := true ;
26601: LD_ADDR_EXP 72
26605: PUSH
26606: LD_INT 1
26608: ST_TO_ADDR
// if p3 = 14 then
26609: LD_VAR 0 3
26613: PUSH
26614: LD_INT 14
26616: EQUAL
26617: IFFALSE 26627
// sFlag := true ;
26619: LD_ADDR_EXP 73
26623: PUSH
26624: LD_INT 1
26626: ST_TO_ADDR
// if p3 = 15 then
26627: LD_VAR 0 3
26631: PUSH
26632: LD_INT 15
26634: EQUAL
26635: IFFALSE 26645
// sKamikadze := true ;
26637: LD_ADDR_EXP 81
26641: PUSH
26642: LD_INT 1
26644: ST_TO_ADDR
// if p3 = 16 then
26645: LD_VAR 0 3
26649: PUSH
26650: LD_INT 16
26652: EQUAL
26653: IFFALSE 26663
// sTroll := true ;
26655: LD_ADDR_EXP 82
26659: PUSH
26660: LD_INT 1
26662: ST_TO_ADDR
// if p3 = 17 then
26663: LD_VAR 0 3
26667: PUSH
26668: LD_INT 17
26670: EQUAL
26671: IFFALSE 26681
// sSlow := true ;
26673: LD_ADDR_EXP 83
26677: PUSH
26678: LD_INT 1
26680: ST_TO_ADDR
// if p3 = 18 then
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 18
26688: EQUAL
26689: IFFALSE 26699
// sLack := true ;
26691: LD_ADDR_EXP 84
26695: PUSH
26696: LD_INT 1
26698: ST_TO_ADDR
// if p3 = 19 then
26699: LD_VAR 0 3
26703: PUSH
26704: LD_INT 19
26706: EQUAL
26707: IFFALSE 26717
// sTank := true ;
26709: LD_ADDR_EXP 86
26713: PUSH
26714: LD_INT 1
26716: ST_TO_ADDR
// if p3 = 20 then
26717: LD_VAR 0 3
26721: PUSH
26722: LD_INT 20
26724: EQUAL
26725: IFFALSE 26735
// sRemote := true ;
26727: LD_ADDR_EXP 87
26731: PUSH
26732: LD_INT 1
26734: ST_TO_ADDR
// if p3 = 21 then
26735: LD_VAR 0 3
26739: PUSH
26740: LD_INT 21
26742: EQUAL
26743: IFFALSE 26753
// sPowell := true ;
26745: LD_ADDR_EXP 88
26749: PUSH
26750: LD_INT 1
26752: ST_TO_ADDR
// if p3 = 22 then
26753: LD_VAR 0 3
26757: PUSH
26758: LD_INT 22
26760: EQUAL
26761: IFFALSE 26771
// sTeleport := true ;
26763: LD_ADDR_EXP 91
26767: PUSH
26768: LD_INT 1
26770: ST_TO_ADDR
// if p3 = 23 then
26771: LD_VAR 0 3
26775: PUSH
26776: LD_INT 23
26778: EQUAL
26779: IFFALSE 26789
// sOilTower := true ;
26781: LD_ADDR_EXP 93
26785: PUSH
26786: LD_INT 1
26788: ST_TO_ADDR
// if p3 = 24 then
26789: LD_VAR 0 3
26793: PUSH
26794: LD_INT 24
26796: EQUAL
26797: IFFALSE 26807
// sShovel := true ;
26799: LD_ADDR_EXP 94
26803: PUSH
26804: LD_INT 1
26806: ST_TO_ADDR
// if p3 = 25 then
26807: LD_VAR 0 3
26811: PUSH
26812: LD_INT 25
26814: EQUAL
26815: IFFALSE 26825
// sSheik := true ;
26817: LD_ADDR_EXP 95
26821: PUSH
26822: LD_INT 1
26824: ST_TO_ADDR
// if p3 = 26 then
26825: LD_VAR 0 3
26829: PUSH
26830: LD_INT 26
26832: EQUAL
26833: IFFALSE 26843
// sEarthquake := true ;
26835: LD_ADDR_EXP 97
26839: PUSH
26840: LD_INT 1
26842: ST_TO_ADDR
// if p3 = 27 then
26843: LD_VAR 0 3
26847: PUSH
26848: LD_INT 27
26850: EQUAL
26851: IFFALSE 26861
// sAI := true ;
26853: LD_ADDR_EXP 98
26857: PUSH
26858: LD_INT 1
26860: ST_TO_ADDR
// if p3 = 28 then
26861: LD_VAR 0 3
26865: PUSH
26866: LD_INT 28
26868: EQUAL
26869: IFFALSE 26879
// sCargo := true ;
26871: LD_ADDR_EXP 101
26875: PUSH
26876: LD_INT 1
26878: ST_TO_ADDR
// if p3 = 29 then
26879: LD_VAR 0 3
26883: PUSH
26884: LD_INT 29
26886: EQUAL
26887: IFFALSE 26897
// sDLaser := true ;
26889: LD_ADDR_EXP 102
26893: PUSH
26894: LD_INT 1
26896: ST_TO_ADDR
// if p3 = 30 then
26897: LD_VAR 0 3
26901: PUSH
26902: LD_INT 30
26904: EQUAL
26905: IFFALSE 26915
// sExchange := true ;
26907: LD_ADDR_EXP 103
26911: PUSH
26912: LD_INT 1
26914: ST_TO_ADDR
// if p3 = 31 then
26915: LD_VAR 0 3
26919: PUSH
26920: LD_INT 31
26922: EQUAL
26923: IFFALSE 26933
// sFac := true ;
26925: LD_ADDR_EXP 104
26929: PUSH
26930: LD_INT 1
26932: ST_TO_ADDR
// if p3 = 32 then
26933: LD_VAR 0 3
26937: PUSH
26938: LD_INT 32
26940: EQUAL
26941: IFFALSE 26951
// sPower := true ;
26943: LD_ADDR_EXP 105
26947: PUSH
26948: LD_INT 1
26950: ST_TO_ADDR
// if p3 = 33 then
26951: LD_VAR 0 3
26955: PUSH
26956: LD_INT 33
26958: EQUAL
26959: IFFALSE 26969
// sRandom := true ;
26961: LD_ADDR_EXP 106
26965: PUSH
26966: LD_INT 1
26968: ST_TO_ADDR
// if p3 = 34 then
26969: LD_VAR 0 3
26973: PUSH
26974: LD_INT 34
26976: EQUAL
26977: IFFALSE 26987
// sShield := true ;
26979: LD_ADDR_EXP 107
26983: PUSH
26984: LD_INT 1
26986: ST_TO_ADDR
// if p3 = 35 then
26987: LD_VAR 0 3
26991: PUSH
26992: LD_INT 35
26994: EQUAL
26995: IFFALSE 27005
// sTime := true ;
26997: LD_ADDR_EXP 108
27001: PUSH
27002: LD_INT 1
27004: ST_TO_ADDR
// if p3 = 36 then
27005: LD_VAR 0 3
27009: PUSH
27010: LD_INT 36
27012: EQUAL
27013: IFFALSE 27023
// sTools := true ;
27015: LD_ADDR_EXP 109
27019: PUSH
27020: LD_INT 1
27022: ST_TO_ADDR
// if p3 = 101 then
27023: LD_VAR 0 3
27027: PUSH
27028: LD_INT 101
27030: EQUAL
27031: IFFALSE 27041
// sSold := true ;
27033: LD_ADDR_EXP 74
27037: PUSH
27038: LD_INT 1
27040: ST_TO_ADDR
// if p3 = 102 then
27041: LD_VAR 0 3
27045: PUSH
27046: LD_INT 102
27048: EQUAL
27049: IFFALSE 27059
// sDiff := true ;
27051: LD_ADDR_EXP 75
27055: PUSH
27056: LD_INT 1
27058: ST_TO_ADDR
// if p3 = 103 then
27059: LD_VAR 0 3
27063: PUSH
27064: LD_INT 103
27066: EQUAL
27067: IFFALSE 27077
// sFog := true ;
27069: LD_ADDR_EXP 78
27073: PUSH
27074: LD_INT 1
27076: ST_TO_ADDR
// if p3 = 104 then
27077: LD_VAR 0 3
27081: PUSH
27082: LD_INT 104
27084: EQUAL
27085: IFFALSE 27095
// sReset := true ;
27087: LD_ADDR_EXP 79
27091: PUSH
27092: LD_INT 1
27094: ST_TO_ADDR
// if p3 = 105 then
27095: LD_VAR 0 3
27099: PUSH
27100: LD_INT 105
27102: EQUAL
27103: IFFALSE 27113
// sSun := true ;
27105: LD_ADDR_EXP 80
27109: PUSH
27110: LD_INT 1
27112: ST_TO_ADDR
// if p3 = 106 then
27113: LD_VAR 0 3
27117: PUSH
27118: LD_INT 106
27120: EQUAL
27121: IFFALSE 27131
// sTiger := true ;
27123: LD_ADDR_EXP 76
27127: PUSH
27128: LD_INT 1
27130: ST_TO_ADDR
// if p3 = 107 then
27131: LD_VAR 0 3
27135: PUSH
27136: LD_INT 107
27138: EQUAL
27139: IFFALSE 27149
// sBomb := true ;
27141: LD_ADDR_EXP 77
27145: PUSH
27146: LD_INT 1
27148: ST_TO_ADDR
// if p3 = 108 then
27149: LD_VAR 0 3
27153: PUSH
27154: LD_INT 108
27156: EQUAL
27157: IFFALSE 27167
// sWound := true ;
27159: LD_ADDR_EXP 85
27163: PUSH
27164: LD_INT 1
27166: ST_TO_ADDR
// if p3 = 109 then
27167: LD_VAR 0 3
27171: PUSH
27172: LD_INT 109
27174: EQUAL
27175: IFFALSE 27185
// sBetray := true ;
27177: LD_ADDR_EXP 89
27181: PUSH
27182: LD_INT 1
27184: ST_TO_ADDR
// if p3 = 110 then
27185: LD_VAR 0 3
27189: PUSH
27190: LD_INT 110
27192: EQUAL
27193: IFFALSE 27203
// sContamin := true ;
27195: LD_ADDR_EXP 90
27199: PUSH
27200: LD_INT 1
27202: ST_TO_ADDR
// if p3 = 111 then
27203: LD_VAR 0 3
27207: PUSH
27208: LD_INT 111
27210: EQUAL
27211: IFFALSE 27221
// sOil := true ;
27213: LD_ADDR_EXP 92
27217: PUSH
27218: LD_INT 1
27220: ST_TO_ADDR
// if p3 = 112 then
27221: LD_VAR 0 3
27225: PUSH
27226: LD_INT 112
27228: EQUAL
27229: IFFALSE 27239
// sStu := true ;
27231: LD_ADDR_EXP 96
27235: PUSH
27236: LD_INT 1
27238: ST_TO_ADDR
// if p3 = 113 then
27239: LD_VAR 0 3
27243: PUSH
27244: LD_INT 113
27246: EQUAL
27247: IFFALSE 27257
// sBazooka := true ;
27249: LD_ADDR_EXP 99
27253: PUSH
27254: LD_INT 1
27256: ST_TO_ADDR
// if p3 = 114 then
27257: LD_VAR 0 3
27261: PUSH
27262: LD_INT 114
27264: EQUAL
27265: IFFALSE 27275
// sMortar := true ;
27267: LD_ADDR_EXP 100
27271: PUSH
27272: LD_INT 1
27274: ST_TO_ADDR
// if p3 = 115 then
27275: LD_VAR 0 3
27279: PUSH
27280: LD_INT 115
27282: EQUAL
27283: IFFALSE 27293
// sRanger := true ;
27285: LD_ADDR_EXP 110
27289: PUSH
27290: LD_INT 1
27292: ST_TO_ADDR
// end ; end ;
27293: PPOPN 6
27295: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27296: LD_EXP 57
27300: PUSH
27301: LD_EXP 62
27305: AND
27306: IFFALSE 27430
27308: GO 27310
27310: DISABLE
27311: LD_INT 0
27313: PPUSH
27314: PPUSH
// begin enable ;
27315: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27316: LD_ADDR_VAR 0 2
27320: PUSH
27321: LD_INT 22
27323: PUSH
27324: LD_OWVAR 2
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 2
27335: PUSH
27336: LD_INT 34
27338: PUSH
27339: LD_INT 7
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 34
27348: PUSH
27349: LD_INT 45
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 34
27358: PUSH
27359: LD_INT 28
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 34
27368: PUSH
27369: LD_INT 47
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 69
27391: ST_TO_ADDR
// if not tmp then
27392: LD_VAR 0 2
27396: NOT
27397: IFFALSE 27401
// exit ;
27399: GO 27430
// for i in tmp do
27401: LD_ADDR_VAR 0 1
27405: PUSH
27406: LD_VAR 0 2
27410: PUSH
27411: FOR_IN
27412: IFFALSE 27428
// begin SetLives ( i , 0 ) ;
27414: LD_VAR 0 1
27418: PPUSH
27419: LD_INT 0
27421: PPUSH
27422: CALL_OW 234
// end ;
27426: GO 27411
27428: POP
27429: POP
// end ;
27430: PPOPN 2
27432: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27433: LD_EXP 57
27437: PUSH
27438: LD_EXP 63
27442: AND
27443: IFFALSE 27527
27445: GO 27447
27447: DISABLE
27448: LD_INT 0
27450: PPUSH
27451: PPUSH
// begin enable ;
27452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27453: LD_ADDR_VAR 0 2
27457: PUSH
27458: LD_INT 22
27460: PUSH
27461: LD_OWVAR 2
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 32
27472: PUSH
27473: LD_INT 3
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PPUSH
27484: CALL_OW 69
27488: ST_TO_ADDR
// if not tmp then
27489: LD_VAR 0 2
27493: NOT
27494: IFFALSE 27498
// exit ;
27496: GO 27527
// for i in tmp do
27498: LD_ADDR_VAR 0 1
27502: PUSH
27503: LD_VAR 0 2
27507: PUSH
27508: FOR_IN
27509: IFFALSE 27525
// begin SetLives ( i , 0 ) ;
27511: LD_VAR 0 1
27515: PPUSH
27516: LD_INT 0
27518: PPUSH
27519: CALL_OW 234
// end ;
27523: GO 27508
27525: POP
27526: POP
// end ;
27527: PPOPN 2
27529: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27530: LD_EXP 57
27534: PUSH
27535: LD_EXP 60
27539: AND
27540: IFFALSE 27633
27542: GO 27544
27544: DISABLE
27545: LD_INT 0
27547: PPUSH
// begin enable ;
27548: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27549: LD_ADDR_VAR 0 1
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_OWVAR 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: LD_INT 25
27571: PUSH
27572: LD_INT 5
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 25
27581: PUSH
27582: LD_INT 9
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 25
27591: PUSH
27592: LD_INT 8
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PPUSH
27609: CALL_OW 69
27613: PUSH
27614: FOR_IN
27615: IFFALSE 27631
// begin SetClass ( i , 1 ) ;
27617: LD_VAR 0 1
27621: PPUSH
27622: LD_INT 1
27624: PPUSH
27625: CALL_OW 336
// end ;
27629: GO 27614
27631: POP
27632: POP
// end ;
27633: PPOPN 1
27635: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27636: LD_EXP 57
27640: PUSH
27641: LD_EXP 61
27645: AND
27646: PUSH
27647: LD_OWVAR 65
27651: PUSH
27652: LD_INT 7
27654: LESS
27655: AND
27656: IFFALSE 27670
27658: GO 27660
27660: DISABLE
// begin enable ;
27661: ENABLE
// game_speed := 7 ;
27662: LD_ADDR_OWVAR 65
27666: PUSH
27667: LD_INT 7
27669: ST_TO_ADDR
// end ;
27670: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27671: LD_EXP 57
27675: PUSH
27676: LD_EXP 64
27680: AND
27681: IFFALSE 27883
27683: GO 27685
27685: DISABLE
27686: LD_INT 0
27688: PPUSH
27689: PPUSH
27690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27691: LD_ADDR_VAR 0 3
27695: PUSH
27696: LD_INT 81
27698: PUSH
27699: LD_OWVAR 2
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 21
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PPUSH
27722: CALL_OW 69
27726: ST_TO_ADDR
// if not tmp then
27727: LD_VAR 0 3
27731: NOT
27732: IFFALSE 27736
// exit ;
27734: GO 27883
// if tmp > 5 then
27736: LD_VAR 0 3
27740: PUSH
27741: LD_INT 5
27743: GREATER
27744: IFFALSE 27756
// k := 5 else
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: LD_INT 5
27753: ST_TO_ADDR
27754: GO 27766
// k := tmp ;
27756: LD_ADDR_VAR 0 2
27760: PUSH
27761: LD_VAR 0 3
27765: ST_TO_ADDR
// for i := 1 to k do
27766: LD_ADDR_VAR 0 1
27770: PUSH
27771: DOUBLE
27772: LD_INT 1
27774: DEC
27775: ST_TO_ADDR
27776: LD_VAR 0 2
27780: PUSH
27781: FOR_TO
27782: IFFALSE 27881
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27784: LD_VAR 0 3
27788: PUSH
27789: LD_VAR 0 1
27793: ARRAY
27794: PPUSH
27795: LD_VAR 0 1
27799: PUSH
27800: LD_INT 4
27802: MOD
27803: PUSH
27804: LD_INT 1
27806: PLUS
27807: PPUSH
27808: CALL_OW 259
27812: PUSH
27813: LD_INT 10
27815: LESS
27816: IFFALSE 27879
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27818: LD_VAR 0 3
27822: PUSH
27823: LD_VAR 0 1
27827: ARRAY
27828: PPUSH
27829: LD_VAR 0 1
27833: PUSH
27834: LD_INT 4
27836: MOD
27837: PUSH
27838: LD_INT 1
27840: PLUS
27841: PPUSH
27842: LD_VAR 0 3
27846: PUSH
27847: LD_VAR 0 1
27851: ARRAY
27852: PPUSH
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 4
27860: MOD
27861: PUSH
27862: LD_INT 1
27864: PLUS
27865: PPUSH
27866: CALL_OW 259
27870: PUSH
27871: LD_INT 1
27873: PLUS
27874: PPUSH
27875: CALL_OW 237
27879: GO 27781
27881: POP
27882: POP
// end ;
27883: PPOPN 3
27885: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27886: LD_EXP 57
27890: PUSH
27891: LD_EXP 65
27895: AND
27896: IFFALSE 27916
27898: GO 27900
27900: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27901: LD_INT 4
27903: PPUSH
27904: LD_OWVAR 2
27908: PPUSH
27909: LD_INT 0
27911: PPUSH
27912: CALL_OW 324
27916: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27917: LD_EXP 57
27921: PUSH
27922: LD_EXP 94
27926: AND
27927: IFFALSE 27947
27929: GO 27931
27931: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27932: LD_INT 19
27934: PPUSH
27935: LD_OWVAR 2
27939: PPUSH
27940: LD_INT 0
27942: PPUSH
27943: CALL_OW 324
27947: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27948: LD_EXP 57
27952: PUSH
27953: LD_EXP 66
27957: AND
27958: IFFALSE 28060
27960: GO 27962
27962: DISABLE
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
// begin enable ;
27967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27968: LD_ADDR_VAR 0 2
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_OWVAR 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: LD_INT 34
27990: PUSH
27991: LD_INT 11
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 34
28000: PUSH
28001: LD_INT 30
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PPUSH
28017: CALL_OW 69
28021: ST_TO_ADDR
// if not tmp then
28022: LD_VAR 0 2
28026: NOT
28027: IFFALSE 28031
// exit ;
28029: GO 28060
// for i in tmp do
28031: LD_ADDR_VAR 0 1
28035: PUSH
28036: LD_VAR 0 2
28040: PUSH
28041: FOR_IN
28042: IFFALSE 28058
// begin SetLives ( i , 0 ) ;
28044: LD_VAR 0 1
28048: PPUSH
28049: LD_INT 0
28051: PPUSH
28052: CALL_OW 234
// end ;
28056: GO 28041
28058: POP
28059: POP
// end ;
28060: PPOPN 2
28062: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28063: LD_EXP 57
28067: PUSH
28068: LD_EXP 67
28072: AND
28073: IFFALSE 28093
28075: GO 28077
28077: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28078: LD_INT 32
28080: PPUSH
28081: LD_OWVAR 2
28085: PPUSH
28086: LD_INT 0
28088: PPUSH
28089: CALL_OW 324
28093: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28094: LD_EXP 57
28098: PUSH
28099: LD_EXP 68
28103: AND
28104: IFFALSE 28285
28106: GO 28108
28108: DISABLE
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
28113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28114: LD_ADDR_VAR 0 2
28118: PUSH
28119: LD_INT 22
28121: PUSH
28122: LD_OWVAR 2
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 33
28133: PUSH
28134: LD_INT 3
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: ST_TO_ADDR
// if not tmp then
28150: LD_VAR 0 2
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28285
// side := 0 ;
28159: LD_ADDR_VAR 0 3
28163: PUSH
28164: LD_INT 0
28166: ST_TO_ADDR
// for i := 1 to 8 do
28167: LD_ADDR_VAR 0 1
28171: PUSH
28172: DOUBLE
28173: LD_INT 1
28175: DEC
28176: ST_TO_ADDR
28177: LD_INT 8
28179: PUSH
28180: FOR_TO
28181: IFFALSE 28229
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28183: LD_OWVAR 2
28187: PUSH
28188: LD_VAR 0 1
28192: NONEQUAL
28193: PUSH
28194: LD_OWVAR 2
28198: PPUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: CALL_OW 81
28208: PUSH
28209: LD_INT 2
28211: EQUAL
28212: AND
28213: IFFALSE 28227
// begin side := i ;
28215: LD_ADDR_VAR 0 3
28219: PUSH
28220: LD_VAR 0 1
28224: ST_TO_ADDR
// break ;
28225: GO 28229
// end ;
28227: GO 28180
28229: POP
28230: POP
// if not side then
28231: LD_VAR 0 3
28235: NOT
28236: IFFALSE 28240
// exit ;
28238: GO 28285
// for i := 1 to tmp do
28240: LD_ADDR_VAR 0 1
28244: PUSH
28245: DOUBLE
28246: LD_INT 1
28248: DEC
28249: ST_TO_ADDR
28250: LD_VAR 0 2
28254: PUSH
28255: FOR_TO
28256: IFFALSE 28283
// if Prob ( 60 ) then
28258: LD_INT 60
28260: PPUSH
28261: CALL_OW 13
28265: IFFALSE 28281
// SetSide ( i , side ) ;
28267: LD_VAR 0 1
28271: PPUSH
28272: LD_VAR 0 3
28276: PPUSH
28277: CALL_OW 235
28281: GO 28255
28283: POP
28284: POP
// end ;
28285: PPOPN 3
28287: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28288: LD_EXP 57
28292: PUSH
28293: LD_EXP 70
28297: AND
28298: IFFALSE 28417
28300: GO 28302
28302: DISABLE
28303: LD_INT 0
28305: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28306: LD_ADDR_VAR 0 1
28310: PUSH
28311: LD_INT 22
28313: PUSH
28314: LD_OWVAR 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 21
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: LD_INT 23
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: PPUSH
28355: CALL_OW 69
28359: PUSH
28360: FOR_IN
28361: IFFALSE 28415
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 257
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: LD_INT 3
28381: PUSH
28382: LD_INT 4
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: IN
28391: IFFALSE 28413
// SetClass ( un , rand ( 1 , 4 ) ) ;
28393: LD_VAR 0 1
28397: PPUSH
28398: LD_INT 1
28400: PPUSH
28401: LD_INT 4
28403: PPUSH
28404: CALL_OW 12
28408: PPUSH
28409: CALL_OW 336
28413: GO 28360
28415: POP
28416: POP
// end ;
28417: PPOPN 1
28419: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28420: LD_EXP 57
28424: PUSH
28425: LD_EXP 69
28429: AND
28430: IFFALSE 28509
28432: GO 28434
28434: DISABLE
28435: LD_INT 0
28437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28438: LD_ADDR_VAR 0 1
28442: PUSH
28443: LD_INT 22
28445: PUSH
28446: LD_OWVAR 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 21
28457: PUSH
28458: LD_INT 3
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PPUSH
28469: CALL_OW 69
28473: ST_TO_ADDR
// if not tmp then
28474: LD_VAR 0 1
28478: NOT
28479: IFFALSE 28483
// exit ;
28481: GO 28509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28483: LD_VAR 0 1
28487: PUSH
28488: LD_INT 1
28490: PPUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 12
28500: ARRAY
28501: PPUSH
28502: LD_INT 100
28504: PPUSH
28505: CALL_OW 234
// end ;
28509: PPOPN 1
28511: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28512: LD_EXP 57
28516: PUSH
28517: LD_EXP 71
28521: AND
28522: IFFALSE 28620
28524: GO 28526
28526: DISABLE
28527: LD_INT 0
28529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28530: LD_ADDR_VAR 0 1
28534: PUSH
28535: LD_INT 22
28537: PUSH
28538: LD_OWVAR 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 21
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PPUSH
28561: CALL_OW 69
28565: ST_TO_ADDR
// if not tmp then
28566: LD_VAR 0 1
28570: NOT
28571: IFFALSE 28575
// exit ;
28573: GO 28620
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28575: LD_VAR 0 1
28579: PUSH
28580: LD_INT 1
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 12
28592: ARRAY
28593: PPUSH
28594: LD_INT 1
28596: PPUSH
28597: LD_INT 4
28599: PPUSH
28600: CALL_OW 12
28604: PPUSH
28605: LD_INT 3000
28607: PPUSH
28608: LD_INT 9000
28610: PPUSH
28611: CALL_OW 12
28615: PPUSH
28616: CALL_OW 492
// end ;
28620: PPOPN 1
28622: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28623: LD_EXP 57
28627: PUSH
28628: LD_EXP 72
28632: AND
28633: IFFALSE 28653
28635: GO 28637
28637: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28638: LD_INT 1
28640: PPUSH
28641: LD_OWVAR 2
28645: PPUSH
28646: LD_INT 0
28648: PPUSH
28649: CALL_OW 324
28653: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28654: LD_EXP 57
28658: PUSH
28659: LD_EXP 73
28663: AND
28664: IFFALSE 28747
28666: GO 28668
28668: DISABLE
28669: LD_INT 0
28671: PPUSH
28672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28673: LD_ADDR_VAR 0 2
28677: PUSH
28678: LD_INT 22
28680: PUSH
28681: LD_OWVAR 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 21
28692: PUSH
28693: LD_INT 3
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 69
28708: ST_TO_ADDR
// if not tmp then
28709: LD_VAR 0 2
28713: NOT
28714: IFFALSE 28718
// exit ;
28716: GO 28747
// for i in tmp do
28718: LD_ADDR_VAR 0 1
28722: PUSH
28723: LD_VAR 0 2
28727: PUSH
28728: FOR_IN
28729: IFFALSE 28745
// SetBLevel ( i , 10 ) ;
28731: LD_VAR 0 1
28735: PPUSH
28736: LD_INT 10
28738: PPUSH
28739: CALL_OW 241
28743: GO 28728
28745: POP
28746: POP
// end ;
28747: PPOPN 2
28749: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28750: LD_EXP 57
28754: PUSH
28755: LD_EXP 74
28759: AND
28760: IFFALSE 28871
28762: GO 28764
28764: DISABLE
28765: LD_INT 0
28767: PPUSH
28768: PPUSH
28769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28770: LD_ADDR_VAR 0 3
28774: PUSH
28775: LD_INT 22
28777: PUSH
28778: LD_OWVAR 2
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 25
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// if not tmp then
28806: LD_VAR 0 3
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 28871
// un := tmp [ rand ( 1 , tmp ) ] ;
28815: LD_ADDR_VAR 0 2
28819: PUSH
28820: LD_VAR 0 3
28824: PUSH
28825: LD_INT 1
28827: PPUSH
28828: LD_VAR 0 3
28832: PPUSH
28833: CALL_OW 12
28837: ARRAY
28838: ST_TO_ADDR
// if Crawls ( un ) then
28839: LD_VAR 0 2
28843: PPUSH
28844: CALL_OW 318
28848: IFFALSE 28859
// ComWalk ( un ) ;
28850: LD_VAR 0 2
28854: PPUSH
28855: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28859: LD_VAR 0 2
28863: PPUSH
28864: LD_INT 5
28866: PPUSH
28867: CALL_OW 336
// end ;
28871: PPOPN 3
28873: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
28874: LD_EXP 57
28878: PUSH
28879: LD_EXP 75
28883: AND
28884: PUSH
28885: LD_OWVAR 67
28889: PUSH
28890: LD_INT 3
28892: LESS
28893: AND
28894: IFFALSE 28913
28896: GO 28898
28898: DISABLE
// Difficulty := Difficulty + 1 ;
28899: LD_ADDR_OWVAR 67
28903: PUSH
28904: LD_OWVAR 67
28908: PUSH
28909: LD_INT 1
28911: PLUS
28912: ST_TO_ADDR
28913: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28914: LD_EXP 57
28918: PUSH
28919: LD_EXP 76
28923: AND
28924: IFFALSE 29027
28926: GO 28928
28928: DISABLE
28929: LD_INT 0
28931: PPUSH
// begin for i := 1 to 5 do
28932: LD_ADDR_VAR 0 1
28936: PUSH
28937: DOUBLE
28938: LD_INT 1
28940: DEC
28941: ST_TO_ADDR
28942: LD_INT 5
28944: PUSH
28945: FOR_TO
28946: IFFALSE 29025
// begin uc_nation := nation_nature ;
28948: LD_ADDR_OWVAR 21
28952: PUSH
28953: LD_INT 0
28955: ST_TO_ADDR
// uc_side := 0 ;
28956: LD_ADDR_OWVAR 20
28960: PUSH
28961: LD_INT 0
28963: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28964: LD_ADDR_OWVAR 29
28968: PUSH
28969: LD_INT 12
28971: PUSH
28972: LD_INT 12
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: ST_TO_ADDR
// hc_agressivity := 20 ;
28979: LD_ADDR_OWVAR 35
28983: PUSH
28984: LD_INT 20
28986: ST_TO_ADDR
// hc_class := class_tiger ;
28987: LD_ADDR_OWVAR 28
28991: PUSH
28992: LD_INT 14
28994: ST_TO_ADDR
// hc_gallery :=  ;
28995: LD_ADDR_OWVAR 33
28999: PUSH
29000: LD_STRING 
29002: ST_TO_ADDR
// hc_name :=  ;
29003: LD_ADDR_OWVAR 26
29007: PUSH
29008: LD_STRING 
29010: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29011: CALL_OW 44
29015: PPUSH
29016: LD_INT 0
29018: PPUSH
29019: CALL_OW 51
// end ;
29023: GO 28945
29025: POP
29026: POP
// end ;
29027: PPOPN 1
29029: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29030: LD_EXP 57
29034: PUSH
29035: LD_EXP 77
29039: AND
29040: IFFALSE 29049
29042: GO 29044
29044: DISABLE
// StreamSibBomb ;
29045: CALL 29050 0 0
29049: END
// export function StreamSibBomb ; var i , x , y ; begin
29050: LD_INT 0
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
// result := false ;
29056: LD_ADDR_VAR 0 1
29060: PUSH
29061: LD_INT 0
29063: ST_TO_ADDR
// for i := 1 to 16 do
29064: LD_ADDR_VAR 0 2
29068: PUSH
29069: DOUBLE
29070: LD_INT 1
29072: DEC
29073: ST_TO_ADDR
29074: LD_INT 16
29076: PUSH
29077: FOR_TO
29078: IFFALSE 29277
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29080: LD_ADDR_VAR 0 3
29084: PUSH
29085: LD_INT 10
29087: PUSH
29088: LD_INT 20
29090: PUSH
29091: LD_INT 30
29093: PUSH
29094: LD_INT 40
29096: PUSH
29097: LD_INT 50
29099: PUSH
29100: LD_INT 60
29102: PUSH
29103: LD_INT 70
29105: PUSH
29106: LD_INT 80
29108: PUSH
29109: LD_INT 90
29111: PUSH
29112: LD_INT 100
29114: PUSH
29115: LD_INT 110
29117: PUSH
29118: LD_INT 120
29120: PUSH
29121: LD_INT 130
29123: PUSH
29124: LD_INT 140
29126: PUSH
29127: LD_INT 150
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 1
29149: PPUSH
29150: LD_INT 15
29152: PPUSH
29153: CALL_OW 12
29157: ARRAY
29158: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29159: LD_ADDR_VAR 0 4
29163: PUSH
29164: LD_INT 10
29166: PUSH
29167: LD_INT 20
29169: PUSH
29170: LD_INT 30
29172: PUSH
29173: LD_INT 40
29175: PUSH
29176: LD_INT 50
29178: PUSH
29179: LD_INT 60
29181: PUSH
29182: LD_INT 70
29184: PUSH
29185: LD_INT 80
29187: PUSH
29188: LD_INT 90
29190: PUSH
29191: LD_INT 100
29193: PUSH
29194: LD_INT 110
29196: PUSH
29197: LD_INT 120
29199: PUSH
29200: LD_INT 130
29202: PUSH
29203: LD_INT 140
29205: PUSH
29206: LD_INT 150
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: PPUSH
29229: LD_INT 15
29231: PPUSH
29232: CALL_OW 12
29236: ARRAY
29237: ST_TO_ADDR
// if ValidHex ( x , y ) then
29238: LD_VAR 0 3
29242: PPUSH
29243: LD_VAR 0 4
29247: PPUSH
29248: CALL_OW 488
29252: IFFALSE 29275
// begin result := [ x , y ] ;
29254: LD_ADDR_VAR 0 1
29258: PUSH
29259: LD_VAR 0 3
29263: PUSH
29264: LD_VAR 0 4
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: ST_TO_ADDR
// break ;
29273: GO 29277
// end ; end ;
29275: GO 29077
29277: POP
29278: POP
// if result then
29279: LD_VAR 0 1
29283: IFFALSE 29343
// begin ToLua ( playSibBomb() ) ;
29285: LD_STRING playSibBomb()
29287: PPUSH
29288: CALL_OW 559
// wait ( 0 0$14 ) ;
29292: LD_INT 490
29294: PPUSH
29295: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29299: LD_VAR 0 1
29303: PUSH
29304: LD_INT 1
29306: ARRAY
29307: PPUSH
29308: LD_VAR 0 1
29312: PUSH
29313: LD_INT 2
29315: ARRAY
29316: PPUSH
29317: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29321: LD_VAR 0 1
29325: PUSH
29326: LD_INT 1
29328: ARRAY
29329: PPUSH
29330: LD_VAR 0 1
29334: PUSH
29335: LD_INT 2
29337: ARRAY
29338: PPUSH
29339: CALL_OW 429
// end ; end ;
29343: LD_VAR 0 1
29347: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29348: LD_EXP 57
29352: PUSH
29353: LD_EXP 79
29357: AND
29358: IFFALSE 29370
29360: GO 29362
29362: DISABLE
// YouLost (  ) ;
29363: LD_STRING 
29365: PPUSH
29366: CALL_OW 104
29370: END
// every 0 0$1 trigger StreamModeActive and sFog do
29371: LD_EXP 57
29375: PUSH
29376: LD_EXP 78
29380: AND
29381: IFFALSE 29395
29383: GO 29385
29385: DISABLE
// FogOff ( your_side ) ;
29386: LD_OWVAR 2
29390: PPUSH
29391: CALL_OW 344
29395: END
// every 0 0$1 trigger StreamModeActive and sSun do
29396: LD_EXP 57
29400: PUSH
29401: LD_EXP 80
29405: AND
29406: IFFALSE 29434
29408: GO 29410
29410: DISABLE
// begin solar_recharge_percent := 0 ;
29411: LD_ADDR_OWVAR 79
29415: PUSH
29416: LD_INT 0
29418: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29419: LD_INT 10500
29421: PPUSH
29422: CALL_OW 67
// solar_recharge_percent := 100 ;
29426: LD_ADDR_OWVAR 79
29430: PUSH
29431: LD_INT 100
29433: ST_TO_ADDR
// end ;
29434: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29435: LD_EXP 57
29439: PUSH
29440: LD_EXP 81
29444: AND
29445: IFFALSE 29684
29447: GO 29449
29449: DISABLE
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
29454: PPUSH
// begin tmp := [ ] ;
29455: LD_ADDR_VAR 0 3
29459: PUSH
29460: EMPTY
29461: ST_TO_ADDR
// for i := 1 to 6 do
29462: LD_ADDR_VAR 0 1
29466: PUSH
29467: DOUBLE
29468: LD_INT 1
29470: DEC
29471: ST_TO_ADDR
29472: LD_INT 6
29474: PUSH
29475: FOR_TO
29476: IFFALSE 29581
// begin uc_nation := nation_nature ;
29478: LD_ADDR_OWVAR 21
29482: PUSH
29483: LD_INT 0
29485: ST_TO_ADDR
// uc_side := 0 ;
29486: LD_ADDR_OWVAR 20
29490: PUSH
29491: LD_INT 0
29493: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29494: LD_ADDR_OWVAR 29
29498: PUSH
29499: LD_INT 12
29501: PUSH
29502: LD_INT 12
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: ST_TO_ADDR
// hc_agressivity := 20 ;
29509: LD_ADDR_OWVAR 35
29513: PUSH
29514: LD_INT 20
29516: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29517: LD_ADDR_OWVAR 28
29521: PUSH
29522: LD_INT 17
29524: ST_TO_ADDR
// hc_gallery :=  ;
29525: LD_ADDR_OWVAR 33
29529: PUSH
29530: LD_STRING 
29532: ST_TO_ADDR
// hc_name :=  ;
29533: LD_ADDR_OWVAR 26
29537: PUSH
29538: LD_STRING 
29540: ST_TO_ADDR
// un := CreateHuman ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: CALL_OW 44
29550: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29551: LD_VAR 0 2
29555: PPUSH
29556: LD_INT 1
29558: PPUSH
29559: CALL_OW 51
// tmp := tmp ^ un ;
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_VAR 0 3
29572: PUSH
29573: LD_VAR 0 2
29577: ADD
29578: ST_TO_ADDR
// end ;
29579: GO 29475
29581: POP
29582: POP
// repeat wait ( 0 0$1 ) ;
29583: LD_INT 35
29585: PPUSH
29586: CALL_OW 67
// for un in tmp do
29590: LD_ADDR_VAR 0 2
29594: PUSH
29595: LD_VAR 0 3
29599: PUSH
29600: FOR_IN
29601: IFFALSE 29675
// begin if IsDead ( un ) then
29603: LD_VAR 0 2
29607: PPUSH
29608: CALL_OW 301
29612: IFFALSE 29632
// begin tmp := tmp diff un ;
29614: LD_ADDR_VAR 0 3
29618: PUSH
29619: LD_VAR 0 3
29623: PUSH
29624: LD_VAR 0 2
29628: DIFF
29629: ST_TO_ADDR
// continue ;
29630: GO 29600
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29632: LD_VAR 0 2
29636: PPUSH
29637: LD_INT 3
29639: PUSH
29640: LD_INT 22
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PPUSH
29654: CALL_OW 69
29658: PPUSH
29659: LD_VAR 0 2
29663: PPUSH
29664: CALL_OW 74
29668: PPUSH
29669: CALL_OW 115
// end ;
29673: GO 29600
29675: POP
29676: POP
// until not tmp ;
29677: LD_VAR 0 3
29681: NOT
29682: IFFALSE 29583
// end ;
29684: PPOPN 3
29686: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29687: LD_EXP 57
29691: PUSH
29692: LD_EXP 82
29696: AND
29697: IFFALSE 29751
29699: GO 29701
29701: DISABLE
// begin ToLua ( displayTroll(); ) ;
29702: LD_STRING displayTroll();
29704: PPUSH
29705: CALL_OW 559
// wait ( 3 3$00 ) ;
29709: LD_INT 6300
29711: PPUSH
29712: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29716: LD_STRING hideTroll();
29718: PPUSH
29719: CALL_OW 559
// wait ( 1 1$00 ) ;
29723: LD_INT 2100
29725: PPUSH
29726: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29730: LD_STRING displayTroll();
29732: PPUSH
29733: CALL_OW 559
// wait ( 1 1$00 ) ;
29737: LD_INT 2100
29739: PPUSH
29740: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29744: LD_STRING hideTroll();
29746: PPUSH
29747: CALL_OW 559
// end ;
29751: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29752: LD_EXP 57
29756: PUSH
29757: LD_EXP 83
29761: AND
29762: IFFALSE 29825
29764: GO 29766
29766: DISABLE
29767: LD_INT 0
29769: PPUSH
// begin p := 0 ;
29770: LD_ADDR_VAR 0 1
29774: PUSH
29775: LD_INT 0
29777: ST_TO_ADDR
// repeat game_speed := 1 ;
29778: LD_ADDR_OWVAR 65
29782: PUSH
29783: LD_INT 1
29785: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29786: LD_INT 35
29788: PPUSH
29789: CALL_OW 67
// p := p + 1 ;
29793: LD_ADDR_VAR 0 1
29797: PUSH
29798: LD_VAR 0 1
29802: PUSH
29803: LD_INT 1
29805: PLUS
29806: ST_TO_ADDR
// until p >= 60 ;
29807: LD_VAR 0 1
29811: PUSH
29812: LD_INT 60
29814: GREATEREQUAL
29815: IFFALSE 29778
// game_speed := 4 ;
29817: LD_ADDR_OWVAR 65
29821: PUSH
29822: LD_INT 4
29824: ST_TO_ADDR
// end ;
29825: PPOPN 1
29827: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29828: LD_EXP 57
29832: PUSH
29833: LD_EXP 84
29837: AND
29838: IFFALSE 29984
29840: GO 29842
29842: DISABLE
29843: LD_INT 0
29845: PPUSH
29846: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29847: LD_ADDR_VAR 0 1
29851: PUSH
29852: LD_INT 22
29854: PUSH
29855: LD_OWVAR 2
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: LD_INT 30
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 30
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PPUSH
29896: CALL_OW 69
29900: ST_TO_ADDR
// if not depot then
29901: LD_VAR 0 1
29905: NOT
29906: IFFALSE 29910
// exit ;
29908: GO 29984
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_VAR 0 1
29919: PUSH
29920: LD_INT 1
29922: PPUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 12
29932: ARRAY
29933: PPUSH
29934: CALL_OW 274
29938: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29939: LD_VAR 0 2
29943: PPUSH
29944: LD_INT 1
29946: PPUSH
29947: LD_INT 0
29949: PPUSH
29950: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29954: LD_VAR 0 2
29958: PPUSH
29959: LD_INT 2
29961: PPUSH
29962: LD_INT 0
29964: PPUSH
29965: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29969: LD_VAR 0 2
29973: PPUSH
29974: LD_INT 3
29976: PPUSH
29977: LD_INT 0
29979: PPUSH
29980: CALL_OW 277
// end ;
29984: PPOPN 2
29986: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29987: LD_EXP 57
29991: PUSH
29992: LD_EXP 85
29996: AND
29997: IFFALSE 30094
29999: GO 30001
30001: DISABLE
30002: LD_INT 0
30004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30005: LD_ADDR_VAR 0 1
30009: PUSH
30010: LD_INT 22
30012: PUSH
30013: LD_OWVAR 2
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 21
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: LD_INT 23
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: PPUSH
30054: CALL_OW 69
30058: ST_TO_ADDR
// if not tmp then
30059: LD_VAR 0 1
30063: NOT
30064: IFFALSE 30068
// exit ;
30066: GO 30094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30068: LD_VAR 0 1
30072: PUSH
30073: LD_INT 1
30075: PPUSH
30076: LD_VAR 0 1
30080: PPUSH
30081: CALL_OW 12
30085: ARRAY
30086: PPUSH
30087: LD_INT 200
30089: PPUSH
30090: CALL_OW 234
// end ;
30094: PPOPN 1
30096: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30097: LD_EXP 57
30101: PUSH
30102: LD_EXP 86
30106: AND
30107: IFFALSE 30186
30109: GO 30111
30111: DISABLE
30112: LD_INT 0
30114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30115: LD_ADDR_VAR 0 1
30119: PUSH
30120: LD_INT 22
30122: PUSH
30123: LD_OWVAR 2
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 21
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PPUSH
30146: CALL_OW 69
30150: ST_TO_ADDR
// if not tmp then
30151: LD_VAR 0 1
30155: NOT
30156: IFFALSE 30160
// exit ;
30158: GO 30186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30160: LD_VAR 0 1
30164: PUSH
30165: LD_INT 1
30167: PPUSH
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL_OW 12
30177: ARRAY
30178: PPUSH
30179: LD_INT 60
30181: PPUSH
30182: CALL_OW 234
// end ;
30186: PPOPN 1
30188: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30189: LD_EXP 57
30193: PUSH
30194: LD_EXP 87
30198: AND
30199: IFFALSE 30298
30201: GO 30203
30203: DISABLE
30204: LD_INT 0
30206: PPUSH
30207: PPUSH
// begin enable ;
30208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30209: LD_ADDR_VAR 0 1
30213: PUSH
30214: LD_INT 22
30216: PUSH
30217: LD_OWVAR 2
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 61
30228: PUSH
30229: EMPTY
30230: LIST
30231: PUSH
30232: LD_INT 33
30234: PUSH
30235: LD_INT 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 69
30251: ST_TO_ADDR
// if not tmp then
30252: LD_VAR 0 1
30256: NOT
30257: IFFALSE 30261
// exit ;
30259: GO 30298
// for i in tmp do
30261: LD_ADDR_VAR 0 2
30265: PUSH
30266: LD_VAR 0 1
30270: PUSH
30271: FOR_IN
30272: IFFALSE 30296
// if IsControledBy ( i ) then
30274: LD_VAR 0 2
30278: PPUSH
30279: CALL_OW 312
30283: IFFALSE 30294
// ComUnlink ( i ) ;
30285: LD_VAR 0 2
30289: PPUSH
30290: CALL_OW 136
30294: GO 30271
30296: POP
30297: POP
// end ;
30298: PPOPN 2
30300: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30301: LD_EXP 57
30305: PUSH
30306: LD_EXP 88
30310: AND
30311: IFFALSE 30451
30313: GO 30315
30315: DISABLE
30316: LD_INT 0
30318: PPUSH
30319: PPUSH
// begin ToLua ( displayPowell(); ) ;
30320: LD_STRING displayPowell();
30322: PPUSH
30323: CALL_OW 559
// uc_side := 0 ;
30327: LD_ADDR_OWVAR 20
30331: PUSH
30332: LD_INT 0
30334: ST_TO_ADDR
// uc_nation := 2 ;
30335: LD_ADDR_OWVAR 21
30339: PUSH
30340: LD_INT 2
30342: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30343: LD_ADDR_OWVAR 37
30347: PUSH
30348: LD_INT 14
30350: ST_TO_ADDR
// vc_engine := engine_siberite ;
30351: LD_ADDR_OWVAR 39
30355: PUSH
30356: LD_INT 3
30358: ST_TO_ADDR
// vc_control := control_apeman ;
30359: LD_ADDR_OWVAR 38
30363: PUSH
30364: LD_INT 5
30366: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30367: LD_ADDR_OWVAR 40
30371: PUSH
30372: LD_INT 29
30374: ST_TO_ADDR
// un := CreateVehicle ;
30375: LD_ADDR_VAR 0 2
30379: PUSH
30380: CALL_OW 45
30384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30385: LD_VAR 0 2
30389: PPUSH
30390: LD_INT 1
30392: PPUSH
30393: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30397: LD_INT 35
30399: PPUSH
30400: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30404: LD_VAR 0 2
30408: PPUSH
30409: LD_INT 22
30411: PUSH
30412: LD_OWVAR 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PPUSH
30421: CALL_OW 69
30425: PPUSH
30426: LD_VAR 0 2
30430: PPUSH
30431: CALL_OW 74
30435: PPUSH
30436: CALL_OW 115
// until IsDead ( un ) ;
30440: LD_VAR 0 2
30444: PPUSH
30445: CALL_OW 301
30449: IFFALSE 30397
// end ;
30451: PPOPN 2
30453: END
// every 0 0$1 trigger StreamModeActive and sStu do
30454: LD_EXP 57
30458: PUSH
30459: LD_EXP 96
30463: AND
30464: IFFALSE 30480
30466: GO 30468
30468: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30469: LD_STRING displayStucuk();
30471: PPUSH
30472: CALL_OW 559
// ResetFog ;
30476: CALL_OW 335
// end ;
30480: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30481: LD_EXP 57
30485: PUSH
30486: LD_EXP 89
30490: AND
30491: IFFALSE 30632
30493: GO 30495
30495: DISABLE
30496: LD_INT 0
30498: PPUSH
30499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30500: LD_ADDR_VAR 0 2
30504: PUSH
30505: LD_INT 22
30507: PUSH
30508: LD_OWVAR 2
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 21
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PPUSH
30531: CALL_OW 69
30535: ST_TO_ADDR
// if not tmp then
30536: LD_VAR 0 2
30540: NOT
30541: IFFALSE 30545
// exit ;
30543: GO 30632
// un := tmp [ rand ( 1 , tmp ) ] ;
30545: LD_ADDR_VAR 0 1
30549: PUSH
30550: LD_VAR 0 2
30554: PUSH
30555: LD_INT 1
30557: PPUSH
30558: LD_VAR 0 2
30562: PPUSH
30563: CALL_OW 12
30567: ARRAY
30568: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30569: LD_VAR 0 1
30573: PPUSH
30574: LD_INT 0
30576: PPUSH
30577: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30581: LD_VAR 0 1
30585: PPUSH
30586: LD_OWVAR 3
30590: PUSH
30591: LD_VAR 0 1
30595: DIFF
30596: PPUSH
30597: LD_VAR 0 1
30601: PPUSH
30602: CALL_OW 74
30606: PPUSH
30607: CALL_OW 115
// wait ( 0 0$20 ) ;
30611: LD_INT 700
30613: PPUSH
30614: CALL_OW 67
// SetSide ( un , your_side ) ;
30618: LD_VAR 0 1
30622: PPUSH
30623: LD_OWVAR 2
30627: PPUSH
30628: CALL_OW 235
// end ;
30632: PPOPN 2
30634: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30635: LD_EXP 57
30639: PUSH
30640: LD_EXP 90
30644: AND
30645: IFFALSE 30751
30647: GO 30649
30649: DISABLE
30650: LD_INT 0
30652: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30653: LD_ADDR_VAR 0 1
30657: PUSH
30658: LD_INT 22
30660: PUSH
30661: LD_OWVAR 2
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 30
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 30
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: LIST
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PPUSH
30702: CALL_OW 69
30706: ST_TO_ADDR
// if not depot then
30707: LD_VAR 0 1
30711: NOT
30712: IFFALSE 30716
// exit ;
30714: GO 30751
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30716: LD_VAR 0 1
30720: PUSH
30721: LD_INT 1
30723: ARRAY
30724: PPUSH
30725: CALL_OW 250
30729: PPUSH
30730: LD_VAR 0 1
30734: PUSH
30735: LD_INT 1
30737: ARRAY
30738: PPUSH
30739: CALL_OW 251
30743: PPUSH
30744: LD_INT 70
30746: PPUSH
30747: CALL_OW 495
// end ;
30751: PPOPN 1
30753: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30754: LD_EXP 57
30758: PUSH
30759: LD_EXP 91
30763: AND
30764: IFFALSE 30975
30766: GO 30768
30768: DISABLE
30769: LD_INT 0
30771: PPUSH
30772: PPUSH
30773: PPUSH
30774: PPUSH
30775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30776: LD_ADDR_VAR 0 5
30780: PUSH
30781: LD_INT 22
30783: PUSH
30784: LD_OWVAR 2
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 21
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PPUSH
30807: CALL_OW 69
30811: ST_TO_ADDR
// if not tmp then
30812: LD_VAR 0 5
30816: NOT
30817: IFFALSE 30821
// exit ;
30819: GO 30975
// for i in tmp do
30821: LD_ADDR_VAR 0 1
30825: PUSH
30826: LD_VAR 0 5
30830: PUSH
30831: FOR_IN
30832: IFFALSE 30973
// begin d := rand ( 0 , 5 ) ;
30834: LD_ADDR_VAR 0 4
30838: PUSH
30839: LD_INT 0
30841: PPUSH
30842: LD_INT 5
30844: PPUSH
30845: CALL_OW 12
30849: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL_OW 250
30864: PPUSH
30865: LD_VAR 0 4
30869: PPUSH
30870: LD_INT 3
30872: PPUSH
30873: LD_INT 12
30875: PPUSH
30876: CALL_OW 12
30880: PPUSH
30881: CALL_OW 272
30885: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30886: LD_ADDR_VAR 0 3
30890: PUSH
30891: LD_VAR 0 1
30895: PPUSH
30896: CALL_OW 251
30900: PPUSH
30901: LD_VAR 0 4
30905: PPUSH
30906: LD_INT 3
30908: PPUSH
30909: LD_INT 12
30911: PPUSH
30912: CALL_OW 12
30916: PPUSH
30917: CALL_OW 273
30921: ST_TO_ADDR
// if ValidHex ( x , y ) then
30922: LD_VAR 0 2
30926: PPUSH
30927: LD_VAR 0 3
30931: PPUSH
30932: CALL_OW 488
30936: IFFALSE 30971
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30938: LD_VAR 0 1
30942: PPUSH
30943: LD_VAR 0 2
30947: PPUSH
30948: LD_VAR 0 3
30952: PPUSH
30953: LD_INT 3
30955: PPUSH
30956: LD_INT 6
30958: PPUSH
30959: CALL_OW 12
30963: PPUSH
30964: LD_INT 1
30966: PPUSH
30967: CALL_OW 483
// end ;
30971: GO 30831
30973: POP
30974: POP
// end ;
30975: PPOPN 5
30977: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30978: LD_EXP 57
30982: PUSH
30983: LD_EXP 92
30987: AND
30988: IFFALSE 31082
30990: GO 30992
30992: DISABLE
30993: LD_INT 0
30995: PPUSH
30996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30997: LD_ADDR_VAR 0 2
31001: PUSH
31002: LD_INT 22
31004: PUSH
31005: LD_OWVAR 2
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 32
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 21
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: PPUSH
31039: CALL_OW 69
31043: ST_TO_ADDR
// if not tmp then
31044: LD_VAR 0 2
31048: NOT
31049: IFFALSE 31053
// exit ;
31051: GO 31082
// for i in tmp do
31053: LD_ADDR_VAR 0 1
31057: PUSH
31058: LD_VAR 0 2
31062: PUSH
31063: FOR_IN
31064: IFFALSE 31080
// SetFuel ( i , 0 ) ;
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_INT 0
31073: PPUSH
31074: CALL_OW 240
31078: GO 31063
31080: POP
31081: POP
// end ;
31082: PPOPN 2
31084: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31085: LD_EXP 57
31089: PUSH
31090: LD_EXP 93
31094: AND
31095: IFFALSE 31161
31097: GO 31099
31099: DISABLE
31100: LD_INT 0
31102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31103: LD_ADDR_VAR 0 1
31107: PUSH
31108: LD_INT 22
31110: PUSH
31111: LD_OWVAR 2
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 30
31122: PUSH
31123: LD_INT 29
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PPUSH
31134: CALL_OW 69
31138: ST_TO_ADDR
// if not tmp then
31139: LD_VAR 0 1
31143: NOT
31144: IFFALSE 31148
// exit ;
31146: GO 31161
// DestroyUnit ( tmp [ 1 ] ) ;
31148: LD_VAR 0 1
31152: PUSH
31153: LD_INT 1
31155: ARRAY
31156: PPUSH
31157: CALL_OW 65
// end ;
31161: PPOPN 1
31163: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31164: LD_EXP 57
31168: PUSH
31169: LD_EXP 95
31173: AND
31174: IFFALSE 31303
31176: GO 31178
31178: DISABLE
31179: LD_INT 0
31181: PPUSH
// begin uc_side := 0 ;
31182: LD_ADDR_OWVAR 20
31186: PUSH
31187: LD_INT 0
31189: ST_TO_ADDR
// uc_nation := nation_arabian ;
31190: LD_ADDR_OWVAR 21
31194: PUSH
31195: LD_INT 2
31197: ST_TO_ADDR
// hc_gallery :=  ;
31198: LD_ADDR_OWVAR 33
31202: PUSH
31203: LD_STRING 
31205: ST_TO_ADDR
// hc_name :=  ;
31206: LD_ADDR_OWVAR 26
31210: PUSH
31211: LD_STRING 
31213: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31214: LD_INT 1
31216: PPUSH
31217: LD_INT 11
31219: PPUSH
31220: LD_INT 10
31222: PPUSH
31223: CALL_OW 380
// un := CreateHuman ;
31227: LD_ADDR_VAR 0 1
31231: PUSH
31232: CALL_OW 44
31236: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31249: LD_INT 35
31251: PPUSH
31252: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31256: LD_VAR 0 1
31260: PPUSH
31261: LD_INT 22
31263: PUSH
31264: LD_OWVAR 2
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PPUSH
31273: CALL_OW 69
31277: PPUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 74
31287: PPUSH
31288: CALL_OW 115
// until IsDead ( un ) ;
31292: LD_VAR 0 1
31296: PPUSH
31297: CALL_OW 301
31301: IFFALSE 31249
// end ;
31303: PPOPN 1
31305: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31306: LD_EXP 57
31310: PUSH
31311: LD_EXP 97
31315: AND
31316: IFFALSE 31328
31318: GO 31320
31320: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31321: LD_STRING earthquake(getX(game), 0, 32)
31323: PPUSH
31324: CALL_OW 559
31328: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31329: LD_EXP 57
31333: PUSH
31334: LD_EXP 98
31338: AND
31339: IFFALSE 31430
31341: GO 31343
31343: DISABLE
31344: LD_INT 0
31346: PPUSH
// begin enable ;
31347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31348: LD_ADDR_VAR 0 1
31352: PUSH
31353: LD_INT 22
31355: PUSH
31356: LD_OWVAR 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 21
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 33
31377: PUSH
31378: LD_INT 3
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: PPUSH
31390: CALL_OW 69
31394: ST_TO_ADDR
// if not tmp then
31395: LD_VAR 0 1
31399: NOT
31400: IFFALSE 31404
// exit ;
31402: GO 31430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31404: LD_VAR 0 1
31408: PUSH
31409: LD_INT 1
31411: PPUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: CALL_OW 12
31421: ARRAY
31422: PPUSH
31423: LD_INT 1
31425: PPUSH
31426: CALL_OW 234
// end ;
31430: PPOPN 1
31432: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31433: LD_EXP 57
31437: PUSH
31438: LD_EXP 99
31442: AND
31443: IFFALSE 31584
31445: GO 31447
31447: DISABLE
31448: LD_INT 0
31450: PPUSH
31451: PPUSH
31452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31453: LD_ADDR_VAR 0 3
31457: PUSH
31458: LD_INT 22
31460: PUSH
31461: LD_OWVAR 2
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 25
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PPUSH
31484: CALL_OW 69
31488: ST_TO_ADDR
// if not tmp then
31489: LD_VAR 0 3
31493: NOT
31494: IFFALSE 31498
// exit ;
31496: GO 31584
// un := tmp [ rand ( 1 , tmp ) ] ;
31498: LD_ADDR_VAR 0 2
31502: PUSH
31503: LD_VAR 0 3
31507: PUSH
31508: LD_INT 1
31510: PPUSH
31511: LD_VAR 0 3
31515: PPUSH
31516: CALL_OW 12
31520: ARRAY
31521: ST_TO_ADDR
// if Crawls ( un ) then
31522: LD_VAR 0 2
31526: PPUSH
31527: CALL_OW 318
31531: IFFALSE 31542
// ComWalk ( un ) ;
31533: LD_VAR 0 2
31537: PPUSH
31538: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31542: LD_VAR 0 2
31546: PPUSH
31547: LD_INT 9
31549: PPUSH
31550: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31554: LD_INT 28
31556: PPUSH
31557: LD_OWVAR 2
31561: PPUSH
31562: LD_INT 2
31564: PPUSH
31565: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31569: LD_INT 29
31571: PPUSH
31572: LD_OWVAR 2
31576: PPUSH
31577: LD_INT 2
31579: PPUSH
31580: CALL_OW 322
// end ;
31584: PPOPN 3
31586: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31587: LD_EXP 57
31591: PUSH
31592: LD_EXP 100
31596: AND
31597: IFFALSE 31708
31599: GO 31601
31601: DISABLE
31602: LD_INT 0
31604: PPUSH
31605: PPUSH
31606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31607: LD_ADDR_VAR 0 3
31611: PUSH
31612: LD_INT 22
31614: PUSH
31615: LD_OWVAR 2
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 25
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PPUSH
31638: CALL_OW 69
31642: ST_TO_ADDR
// if not tmp then
31643: LD_VAR 0 3
31647: NOT
31648: IFFALSE 31652
// exit ;
31650: GO 31708
// un := tmp [ rand ( 1 , tmp ) ] ;
31652: LD_ADDR_VAR 0 2
31656: PUSH
31657: LD_VAR 0 3
31661: PUSH
31662: LD_INT 1
31664: PPUSH
31665: LD_VAR 0 3
31669: PPUSH
31670: CALL_OW 12
31674: ARRAY
31675: ST_TO_ADDR
// if Crawls ( un ) then
31676: LD_VAR 0 2
31680: PPUSH
31681: CALL_OW 318
31685: IFFALSE 31696
// ComWalk ( un ) ;
31687: LD_VAR 0 2
31691: PPUSH
31692: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31696: LD_VAR 0 2
31700: PPUSH
31701: LD_INT 8
31703: PPUSH
31704: CALL_OW 336
// end ;
31708: PPOPN 3
31710: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31711: LD_EXP 57
31715: PUSH
31716: LD_EXP 101
31720: AND
31721: IFFALSE 31865
31723: GO 31725
31725: DISABLE
31726: LD_INT 0
31728: PPUSH
31729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31730: LD_ADDR_VAR 0 2
31734: PUSH
31735: LD_INT 22
31737: PUSH
31738: LD_OWVAR 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 21
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 34
31762: PUSH
31763: LD_INT 12
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 34
31772: PUSH
31773: LD_INT 51
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 34
31782: PUSH
31783: LD_INT 32
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: PPUSH
31801: CALL_OW 69
31805: ST_TO_ADDR
// if not tmp then
31806: LD_VAR 0 2
31810: NOT
31811: IFFALSE 31815
// exit ;
31813: GO 31865
// for i in tmp do
31815: LD_ADDR_VAR 0 1
31819: PUSH
31820: LD_VAR 0 2
31824: PUSH
31825: FOR_IN
31826: IFFALSE 31863
// if GetCargo ( i , mat_artifact ) = 0 then
31828: LD_VAR 0 1
31832: PPUSH
31833: LD_INT 4
31835: PPUSH
31836: CALL_OW 289
31840: PUSH
31841: LD_INT 0
31843: EQUAL
31844: IFFALSE 31861
// SetCargo ( i , mat_siberit , 100 ) ;
31846: LD_VAR 0 1
31850: PPUSH
31851: LD_INT 3
31853: PPUSH
31854: LD_INT 100
31856: PPUSH
31857: CALL_OW 290
31861: GO 31825
31863: POP
31864: POP
// end ;
31865: PPOPN 2
31867: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31868: LD_EXP 57
31872: PUSH
31873: LD_EXP 102
31877: AND
31878: IFFALSE 32031
31880: GO 31882
31882: DISABLE
31883: LD_INT 0
31885: PPUSH
31886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31887: LD_ADDR_VAR 0 2
31891: PUSH
31892: LD_INT 22
31894: PUSH
31895: LD_OWVAR 2
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PPUSH
31904: CALL_OW 69
31908: ST_TO_ADDR
// if not tmp then
31909: LD_VAR 0 2
31913: NOT
31914: IFFALSE 31918
// exit ;
31916: GO 32031
// for i := 1 to 2 do
31918: LD_ADDR_VAR 0 1
31922: PUSH
31923: DOUBLE
31924: LD_INT 1
31926: DEC
31927: ST_TO_ADDR
31928: LD_INT 2
31930: PUSH
31931: FOR_TO
31932: IFFALSE 32029
// begin uc_side := your_side ;
31934: LD_ADDR_OWVAR 20
31938: PUSH
31939: LD_OWVAR 2
31943: ST_TO_ADDR
// uc_nation := nation_american ;
31944: LD_ADDR_OWVAR 21
31948: PUSH
31949: LD_INT 1
31951: ST_TO_ADDR
// vc_chassis := us_morphling ;
31952: LD_ADDR_OWVAR 37
31956: PUSH
31957: LD_INT 5
31959: ST_TO_ADDR
// vc_engine := engine_siberite ;
31960: LD_ADDR_OWVAR 39
31964: PUSH
31965: LD_INT 3
31967: ST_TO_ADDR
// vc_control := control_computer ;
31968: LD_ADDR_OWVAR 38
31972: PUSH
31973: LD_INT 3
31975: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31976: LD_ADDR_OWVAR 40
31980: PUSH
31981: LD_INT 10
31983: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
31984: CALL_OW 45
31988: PPUSH
31989: LD_VAR 0 2
31993: PUSH
31994: LD_INT 1
31996: ARRAY
31997: PPUSH
31998: CALL_OW 250
32002: PPUSH
32003: LD_VAR 0 2
32007: PUSH
32008: LD_INT 1
32010: ARRAY
32011: PPUSH
32012: CALL_OW 251
32016: PPUSH
32017: LD_INT 12
32019: PPUSH
32020: LD_INT 1
32022: PPUSH
32023: CALL_OW 50
// end ;
32027: GO 31931
32029: POP
32030: POP
// end ;
32031: PPOPN 2
32033: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32034: LD_EXP 57
32038: PUSH
32039: LD_EXP 103
32043: AND
32044: IFFALSE 32266
32046: GO 32048
32048: DISABLE
32049: LD_INT 0
32051: PPUSH
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32057: LD_ADDR_VAR 0 6
32061: PUSH
32062: LD_INT 22
32064: PUSH
32065: LD_OWVAR 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 21
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 3
32086: PUSH
32087: LD_INT 23
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: PPUSH
32106: CALL_OW 69
32110: ST_TO_ADDR
// if not tmp then
32111: LD_VAR 0 6
32115: NOT
32116: IFFALSE 32120
// exit ;
32118: GO 32266
// s1 := rand ( 1 , 4 ) ;
32120: LD_ADDR_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: PPUSH
32128: LD_INT 4
32130: PPUSH
32131: CALL_OW 12
32135: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32136: LD_ADDR_VAR 0 4
32140: PUSH
32141: LD_VAR 0 6
32145: PUSH
32146: LD_INT 1
32148: ARRAY
32149: PPUSH
32150: LD_VAR 0 2
32154: PPUSH
32155: CALL_OW 259
32159: ST_TO_ADDR
// if s1 = 1 then
32160: LD_VAR 0 2
32164: PUSH
32165: LD_INT 1
32167: EQUAL
32168: IFFALSE 32188
// s2 := rand ( 2 , 4 ) else
32170: LD_ADDR_VAR 0 3
32174: PUSH
32175: LD_INT 2
32177: PPUSH
32178: LD_INT 4
32180: PPUSH
32181: CALL_OW 12
32185: ST_TO_ADDR
32186: GO 32196
// s2 := 1 ;
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_INT 1
32195: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32196: LD_ADDR_VAR 0 5
32200: PUSH
32201: LD_VAR 0 6
32205: PUSH
32206: LD_INT 1
32208: ARRAY
32209: PPUSH
32210: LD_VAR 0 3
32214: PPUSH
32215: CALL_OW 259
32219: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32220: LD_VAR 0 6
32224: PUSH
32225: LD_INT 1
32227: ARRAY
32228: PPUSH
32229: LD_VAR 0 2
32233: PPUSH
32234: LD_VAR 0 5
32238: PPUSH
32239: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32243: LD_VAR 0 6
32247: PUSH
32248: LD_INT 1
32250: ARRAY
32251: PPUSH
32252: LD_VAR 0 3
32256: PPUSH
32257: LD_VAR 0 4
32261: PPUSH
32262: CALL_OW 237
// end ;
32266: PPOPN 6
32268: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32269: LD_EXP 57
32273: PUSH
32274: LD_EXP 104
32278: AND
32279: IFFALSE 32358
32281: GO 32283
32283: DISABLE
32284: LD_INT 0
32286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32287: LD_ADDR_VAR 0 1
32291: PUSH
32292: LD_INT 22
32294: PUSH
32295: LD_OWVAR 2
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 30
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PPUSH
32318: CALL_OW 69
32322: ST_TO_ADDR
// if not tmp then
32323: LD_VAR 0 1
32327: NOT
32328: IFFALSE 32332
// exit ;
32330: GO 32358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32332: LD_VAR 0 1
32336: PUSH
32337: LD_INT 1
32339: PPUSH
32340: LD_VAR 0 1
32344: PPUSH
32345: CALL_OW 12
32349: ARRAY
32350: PPUSH
32351: LD_INT 1
32353: PPUSH
32354: CALL_OW 234
// end ;
32358: PPOPN 1
32360: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32361: LD_EXP 57
32365: PUSH
32366: LD_EXP 105
32370: AND
32371: IFFALSE 32483
32373: GO 32375
32375: DISABLE
32376: LD_INT 0
32378: PPUSH
32379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32380: LD_ADDR_VAR 0 2
32384: PUSH
32385: LD_INT 22
32387: PUSH
32388: LD_OWVAR 2
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: PUSH
32400: LD_INT 30
32402: PUSH
32403: LD_INT 27
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 30
32412: PUSH
32413: LD_INT 26
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 30
32422: PUSH
32423: LD_INT 28
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PPUSH
32440: CALL_OW 69
32444: ST_TO_ADDR
// if not tmp then
32445: LD_VAR 0 2
32449: NOT
32450: IFFALSE 32454
// exit ;
32452: GO 32483
// for i in tmp do
32454: LD_ADDR_VAR 0 1
32458: PUSH
32459: LD_VAR 0 2
32463: PUSH
32464: FOR_IN
32465: IFFALSE 32481
// SetLives ( i , 1 ) ;
32467: LD_VAR 0 1
32471: PPUSH
32472: LD_INT 1
32474: PPUSH
32475: CALL_OW 234
32479: GO 32464
32481: POP
32482: POP
// end ;
32483: PPOPN 2
32485: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32486: LD_EXP 57
32490: PUSH
32491: LD_EXP 106
32495: AND
32496: IFFALSE 32770
32498: GO 32500
32500: DISABLE
32501: LD_INT 0
32503: PPUSH
32504: PPUSH
32505: PPUSH
// begin i := rand ( 1 , 7 ) ;
32506: LD_ADDR_VAR 0 1
32510: PUSH
32511: LD_INT 1
32513: PPUSH
32514: LD_INT 7
32516: PPUSH
32517: CALL_OW 12
32521: ST_TO_ADDR
// case i of 1 :
32522: LD_VAR 0 1
32526: PUSH
32527: LD_INT 1
32529: DOUBLE
32530: EQUAL
32531: IFTRUE 32535
32533: GO 32545
32535: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32536: LD_STRING earthquake(getX(game), 0, 32)
32538: PPUSH
32539: CALL_OW 559
32543: GO 32770
32545: LD_INT 2
32547: DOUBLE
32548: EQUAL
32549: IFTRUE 32553
32551: GO 32567
32553: POP
// begin ToLua ( displayStucuk(); ) ;
32554: LD_STRING displayStucuk();
32556: PPUSH
32557: CALL_OW 559
// ResetFog ;
32561: CALL_OW 335
// end ; 3 :
32565: GO 32770
32567: LD_INT 3
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32679
32575: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32576: LD_ADDR_VAR 0 2
32580: PUSH
32581: LD_INT 22
32583: PUSH
32584: LD_OWVAR 2
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 25
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PPUSH
32607: CALL_OW 69
32611: ST_TO_ADDR
// if not tmp then
32612: LD_VAR 0 2
32616: NOT
32617: IFFALSE 32621
// exit ;
32619: GO 32770
// un := tmp [ rand ( 1 , tmp ) ] ;
32621: LD_ADDR_VAR 0 3
32625: PUSH
32626: LD_VAR 0 2
32630: PUSH
32631: LD_INT 1
32633: PPUSH
32634: LD_VAR 0 2
32638: PPUSH
32639: CALL_OW 12
32643: ARRAY
32644: ST_TO_ADDR
// if Crawls ( un ) then
32645: LD_VAR 0 3
32649: PPUSH
32650: CALL_OW 318
32654: IFFALSE 32665
// ComWalk ( un ) ;
32656: LD_VAR 0 3
32660: PPUSH
32661: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32665: LD_VAR 0 3
32669: PPUSH
32670: LD_INT 8
32672: PPUSH
32673: CALL_OW 336
// end ; 4 :
32677: GO 32770
32679: LD_INT 4
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32687
32685: GO 32748
32687: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32688: LD_ADDR_VAR 0 2
32692: PUSH
32693: LD_INT 22
32695: PUSH
32696: LD_OWVAR 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 30
32707: PUSH
32708: LD_INT 29
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PPUSH
32719: CALL_OW 69
32723: ST_TO_ADDR
// if not tmp then
32724: LD_VAR 0 2
32728: NOT
32729: IFFALSE 32733
// exit ;
32731: GO 32770
// DestroyUnit ( tmp [ 1 ] ) ;
32733: LD_VAR 0 2
32737: PUSH
32738: LD_INT 1
32740: ARRAY
32741: PPUSH
32742: CALL_OW 65
// end ; 5 .. 7 :
32746: GO 32770
32748: LD_INT 5
32750: DOUBLE
32751: GREATEREQUAL
32752: IFFALSE 32760
32754: LD_INT 7
32756: DOUBLE
32757: LESSEQUAL
32758: IFTRUE 32762
32760: GO 32769
32762: POP
// StreamSibBomb ; end ;
32763: CALL 29050 0 0
32767: GO 32770
32769: POP
// end ;
32770: PPOPN 3
32772: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32773: LD_EXP 57
32777: PUSH
32778: LD_EXP 107
32782: AND
32783: IFFALSE 32939
32785: GO 32787
32787: DISABLE
32788: LD_INT 0
32790: PPUSH
32791: PPUSH
32792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32793: LD_ADDR_VAR 0 2
32797: PUSH
32798: LD_INT 81
32800: PUSH
32801: LD_OWVAR 2
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 2
32812: PUSH
32813: LD_INT 21
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 21
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PPUSH
32842: CALL_OW 69
32846: ST_TO_ADDR
// if not tmp then
32847: LD_VAR 0 2
32851: NOT
32852: IFFALSE 32856
// exit ;
32854: GO 32939
// p := 0 ;
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_INT 0
32863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32864: LD_INT 35
32866: PPUSH
32867: CALL_OW 67
// p := p + 1 ;
32871: LD_ADDR_VAR 0 3
32875: PUSH
32876: LD_VAR 0 3
32880: PUSH
32881: LD_INT 1
32883: PLUS
32884: ST_TO_ADDR
// for i in tmp do
32885: LD_ADDR_VAR 0 1
32889: PUSH
32890: LD_VAR 0 2
32894: PUSH
32895: FOR_IN
32896: IFFALSE 32927
// if GetLives ( i ) < 1000 then
32898: LD_VAR 0 1
32902: PPUSH
32903: CALL_OW 256
32907: PUSH
32908: LD_INT 1000
32910: LESS
32911: IFFALSE 32925
// SetLives ( i , 1000 ) ;
32913: LD_VAR 0 1
32917: PPUSH
32918: LD_INT 1000
32920: PPUSH
32921: CALL_OW 234
32925: GO 32895
32927: POP
32928: POP
// until p > 20 ;
32929: LD_VAR 0 3
32933: PUSH
32934: LD_INT 20
32936: GREATER
32937: IFFALSE 32864
// end ;
32939: PPOPN 3
32941: END
// every 0 0$1 trigger StreamModeActive and sTime do
32942: LD_EXP 57
32946: PUSH
32947: LD_EXP 108
32951: AND
32952: IFFALSE 32987
32954: GO 32956
32956: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32957: LD_INT 28
32959: PPUSH
32960: LD_OWVAR 2
32964: PPUSH
32965: LD_INT 2
32967: PPUSH
32968: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32972: LD_INT 30
32974: PPUSH
32975: LD_OWVAR 2
32979: PPUSH
32980: LD_INT 2
32982: PPUSH
32983: CALL_OW 322
// end ;
32987: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32988: LD_EXP 57
32992: PUSH
32993: LD_EXP 109
32997: AND
32998: IFFALSE 33119
33000: GO 33002
33002: DISABLE
33003: LD_INT 0
33005: PPUSH
33006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33007: LD_ADDR_VAR 0 2
33011: PUSH
33012: LD_INT 22
33014: PUSH
33015: LD_OWVAR 2
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 21
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 3
33036: PUSH
33037: LD_INT 23
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: PPUSH
33056: CALL_OW 69
33060: ST_TO_ADDR
// if not tmp then
33061: LD_VAR 0 2
33065: NOT
33066: IFFALSE 33070
// exit ;
33068: GO 33119
// for i in tmp do
33070: LD_ADDR_VAR 0 1
33074: PUSH
33075: LD_VAR 0 2
33079: PUSH
33080: FOR_IN
33081: IFFALSE 33117
// begin if Crawls ( i ) then
33083: LD_VAR 0 1
33087: PPUSH
33088: CALL_OW 318
33092: IFFALSE 33103
// ComWalk ( i ) ;
33094: LD_VAR 0 1
33098: PPUSH
33099: CALL_OW 138
// SetClass ( i , 2 ) ;
33103: LD_VAR 0 1
33107: PPUSH
33108: LD_INT 2
33110: PPUSH
33111: CALL_OW 336
// end ;
33115: GO 33080
33117: POP
33118: POP
// end ;
33119: PPOPN 2
33121: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33122: LD_EXP 57
33126: PUSH
33127: LD_EXP 110
33131: AND
33132: IFFALSE 33353
33134: GO 33136
33136: DISABLE
33137: LD_INT 0
33139: PPUSH
33140: PPUSH
33141: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33142: LD_OWVAR 2
33146: PPUSH
33147: LD_INT 9
33149: PPUSH
33150: LD_INT 1
33152: PPUSH
33153: LD_INT 1
33155: PPUSH
33156: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33160: LD_INT 9
33162: PPUSH
33163: LD_OWVAR 2
33167: PPUSH
33168: CALL_OW 343
// uc_side := 9 ;
33172: LD_ADDR_OWVAR 20
33176: PUSH
33177: LD_INT 9
33179: ST_TO_ADDR
// uc_nation := 2 ;
33180: LD_ADDR_OWVAR 21
33184: PUSH
33185: LD_INT 2
33187: ST_TO_ADDR
// hc_name := Dark Warrior ;
33188: LD_ADDR_OWVAR 26
33192: PUSH
33193: LD_STRING Dark Warrior
33195: ST_TO_ADDR
// hc_gallery :=  ;
33196: LD_ADDR_OWVAR 33
33200: PUSH
33201: LD_STRING 
33203: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
33204: LD_INT 1
33206: PPUSH
33207: LD_INT 1
33209: PPUSH
33210: LD_INT 10
33212: PPUSH
33213: CALL_OW 380
// un := CreateHuman ;
33217: LD_ADDR_VAR 0 3
33221: PUSH
33222: CALL_OW 44
33226: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33227: LD_VAR 0 3
33231: PPUSH
33232: LD_INT 1
33234: PPUSH
33235: CALL_OW 51
// p := 0 ;
33239: LD_ADDR_VAR 0 2
33243: PUSH
33244: LD_INT 0
33246: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33247: LD_INT 35
33249: PPUSH
33250: CALL_OW 67
// if GetLives ( un ) < 1000 then
33254: LD_VAR 0 3
33258: PPUSH
33259: CALL_OW 256
33263: PUSH
33264: LD_INT 1000
33266: LESS
33267: IFFALSE 33281
// SetLives ( un , 1000 ) ;
33269: LD_VAR 0 3
33273: PPUSH
33274: LD_INT 1000
33276: PPUSH
33277: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
33281: LD_VAR 0 3
33285: PPUSH
33286: LD_INT 81
33288: PUSH
33289: LD_OWVAR 2
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PPUSH
33298: CALL_OW 69
33302: PPUSH
33303: LD_VAR 0 3
33307: PPUSH
33308: CALL_OW 74
33312: PPUSH
33313: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33317: LD_VAR 0 2
33321: PUSH
33322: LD_INT 60
33324: GREATER
33325: PUSH
33326: LD_VAR 0 3
33330: PPUSH
33331: CALL_OW 301
33335: OR
33336: IFFALSE 33247
// if un then
33338: LD_VAR 0 3
33342: IFFALSE 33353
// RemoveUnit ( un ) ;
33344: LD_VAR 0 3
33348: PPUSH
33349: CALL_OW 64
// end ; end_of_file
33353: PPOPN 3
33355: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
33356: LD_INT 0
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33362: LD_VAR 0 1
33366: PPUSH
33367: CALL_OW 264
33371: PUSH
33372: LD_EXP 56
33376: EQUAL
33377: IFFALSE 33449
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33379: LD_INT 68
33381: PPUSH
33382: LD_VAR 0 1
33386: PPUSH
33387: CALL_OW 255
33391: PPUSH
33392: CALL_OW 321
33396: PUSH
33397: LD_INT 2
33399: EQUAL
33400: IFFALSE 33412
// eff := 70 else
33402: LD_ADDR_VAR 0 6
33406: PUSH
33407: LD_INT 70
33409: ST_TO_ADDR
33410: GO 33420
// eff := 30 ;
33412: LD_ADDR_VAR 0 6
33416: PUSH
33417: LD_INT 30
33419: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 250
33429: PPUSH
33430: LD_VAR 0 1
33434: PPUSH
33435: CALL_OW 251
33439: PPUSH
33440: LD_VAR 0 6
33444: PPUSH
33445: CALL_OW 495
// end ; end ;
33449: LD_VAR 0 4
33453: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
33454: LD_INT 0
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
33461: PPUSH
// if cmd = 124 then
33462: LD_VAR 0 1
33466: PUSH
33467: LD_INT 124
33469: EQUAL
33470: IFFALSE 33676
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
33472: LD_ADDR_VAR 0 5
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 34
33482: PUSH
33483: LD_INT 53
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 34
33492: PUSH
33493: LD_INT 14
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 69
33509: ST_TO_ADDR
// if not tmp then
33510: LD_VAR 0 5
33514: NOT
33515: IFFALSE 33519
// exit ;
33517: GO 33676
// for i in tmp do
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_VAR 0 5
33528: PUSH
33529: FOR_IN
33530: IFFALSE 33674
// begin taskList := GetTaskList ( i ) ;
33532: LD_ADDR_VAR 0 6
33536: PUSH
33537: LD_VAR 0 3
33541: PPUSH
33542: CALL_OW 437
33546: ST_TO_ADDR
// if not taskList then
33547: LD_VAR 0 6
33551: NOT
33552: IFFALSE 33556
// continue ;
33554: GO 33529
// for j = 1 to taskList do
33556: LD_ADDR_VAR 0 4
33560: PUSH
33561: DOUBLE
33562: LD_INT 1
33564: DEC
33565: ST_TO_ADDR
33566: LD_VAR 0 6
33570: PUSH
33571: FOR_TO
33572: IFFALSE 33670
// if taskList [ j ] [ 1 ] = | then
33574: LD_VAR 0 6
33578: PUSH
33579: LD_VAR 0 4
33583: ARRAY
33584: PUSH
33585: LD_INT 1
33587: ARRAY
33588: PUSH
33589: LD_STRING |
33591: EQUAL
33592: IFFALSE 33668
// begin _taskList := Delete ( taskList , 1 ) ;
33594: LD_ADDR_VAR 0 7
33598: PUSH
33599: LD_VAR 0 6
33603: PPUSH
33604: LD_INT 1
33606: PPUSH
33607: CALL_OW 3
33611: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
33612: LD_VAR 0 3
33616: PPUSH
33617: LD_VAR 0 7
33621: PPUSH
33622: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
33626: LD_VAR 0 3
33630: PPUSH
33631: LD_VAR 0 6
33635: PUSH
33636: LD_VAR 0 4
33640: ARRAY
33641: PUSH
33642: LD_INT 2
33644: ARRAY
33645: PPUSH
33646: LD_VAR 0 6
33650: PUSH
33651: LD_VAR 0 4
33655: ARRAY
33656: PUSH
33657: LD_INT 3
33659: ARRAY
33660: PPUSH
33661: LD_INT 8
33663: PPUSH
33664: CALL 33681 0 4
// end ;
33668: GO 33571
33670: POP
33671: POP
// end ;
33672: GO 33529
33674: POP
33675: POP
// end ; end ;
33676: LD_VAR 0 2
33680: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33681: LD_INT 0
33683: PPUSH
33684: PPUSH
33685: PPUSH
33686: PPUSH
33687: PPUSH
33688: PPUSH
33689: PPUSH
33690: PPUSH
33691: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33692: LD_VAR 0 1
33696: NOT
33697: PUSH
33698: LD_VAR 0 2
33702: PPUSH
33703: LD_VAR 0 3
33707: PPUSH
33708: CALL_OW 488
33712: NOT
33713: OR
33714: PUSH
33715: LD_VAR 0 4
33719: NOT
33720: OR
33721: IFFALSE 33725
// exit ;
33723: GO 34065
// list := [ ] ;
33725: LD_ADDR_VAR 0 13
33729: PUSH
33730: EMPTY
33731: ST_TO_ADDR
// if x - r < 0 then
33732: LD_VAR 0 2
33736: PUSH
33737: LD_VAR 0 4
33741: MINUS
33742: PUSH
33743: LD_INT 0
33745: LESS
33746: IFFALSE 33758
// min_x := 0 else
33748: LD_ADDR_VAR 0 7
33752: PUSH
33753: LD_INT 0
33755: ST_TO_ADDR
33756: GO 33774
// min_x := x - r ;
33758: LD_ADDR_VAR 0 7
33762: PUSH
33763: LD_VAR 0 2
33767: PUSH
33768: LD_VAR 0 4
33772: MINUS
33773: ST_TO_ADDR
// if y - r < 0 then
33774: LD_VAR 0 3
33778: PUSH
33779: LD_VAR 0 4
33783: MINUS
33784: PUSH
33785: LD_INT 0
33787: LESS
33788: IFFALSE 33800
// min_y := 0 else
33790: LD_ADDR_VAR 0 8
33794: PUSH
33795: LD_INT 0
33797: ST_TO_ADDR
33798: GO 33816
// min_y := y - r ;
33800: LD_ADDR_VAR 0 8
33804: PUSH
33805: LD_VAR 0 3
33809: PUSH
33810: LD_VAR 0 4
33814: MINUS
33815: ST_TO_ADDR
// max_x := x + r ;
33816: LD_ADDR_VAR 0 9
33820: PUSH
33821: LD_VAR 0 2
33825: PUSH
33826: LD_VAR 0 4
33830: PLUS
33831: ST_TO_ADDR
// max_y := y + r ;
33832: LD_ADDR_VAR 0 10
33836: PUSH
33837: LD_VAR 0 3
33841: PUSH
33842: LD_VAR 0 4
33846: PLUS
33847: ST_TO_ADDR
// for _x = min_x to max_x do
33848: LD_ADDR_VAR 0 11
33852: PUSH
33853: DOUBLE
33854: LD_VAR 0 7
33858: DEC
33859: ST_TO_ADDR
33860: LD_VAR 0 9
33864: PUSH
33865: FOR_TO
33866: IFFALSE 33983
// for _y = min_y to max_y do
33868: LD_ADDR_VAR 0 12
33872: PUSH
33873: DOUBLE
33874: LD_VAR 0 8
33878: DEC
33879: ST_TO_ADDR
33880: LD_VAR 0 10
33884: PUSH
33885: FOR_TO
33886: IFFALSE 33979
// begin if not ValidHex ( _x , _y ) then
33888: LD_VAR 0 11
33892: PPUSH
33893: LD_VAR 0 12
33897: PPUSH
33898: CALL_OW 488
33902: NOT
33903: IFFALSE 33907
// continue ;
33905: GO 33885
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33907: LD_VAR 0 11
33911: PPUSH
33912: LD_VAR 0 12
33916: PPUSH
33917: CALL_OW 351
33921: PUSH
33922: LD_VAR 0 11
33926: PPUSH
33927: LD_VAR 0 12
33931: PPUSH
33932: CALL_OW 554
33936: AND
33937: IFFALSE 33977
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33939: LD_ADDR_VAR 0 13
33943: PUSH
33944: LD_VAR 0 13
33948: PPUSH
33949: LD_VAR 0 13
33953: PUSH
33954: LD_INT 1
33956: PLUS
33957: PPUSH
33958: LD_VAR 0 11
33962: PUSH
33963: LD_VAR 0 12
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PPUSH
33972: CALL_OW 2
33976: ST_TO_ADDR
// end ;
33977: GO 33885
33979: POP
33980: POP
33981: GO 33865
33983: POP
33984: POP
// if not list then
33985: LD_VAR 0 13
33989: NOT
33990: IFFALSE 33994
// exit ;
33992: GO 34065
// for i in list do
33994: LD_ADDR_VAR 0 6
33998: PUSH
33999: LD_VAR 0 13
34003: PUSH
34004: FOR_IN
34005: IFFALSE 34063
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34007: LD_VAR 0 1
34011: PPUSH
34012: LD_STRING M
34014: PUSH
34015: LD_VAR 0 6
34019: PUSH
34020: LD_INT 1
34022: ARRAY
34023: PUSH
34024: LD_VAR 0 6
34028: PUSH
34029: LD_INT 2
34031: ARRAY
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: PUSH
34054: EMPTY
34055: LIST
34056: PPUSH
34057: CALL_OW 447
34061: GO 34004
34063: POP
34064: POP
// end ;
34065: LD_VAR 0 5
34069: RET
