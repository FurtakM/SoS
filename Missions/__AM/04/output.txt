// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4670 0 0
// PrepareRussianBase ;
 289: CALL 2962 0 0
// PrepareRussianCommander ;
 293: CALL 2913 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_EXP 49
 515: PPUSH
 516: CALL 39838 0 3
 520: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 521: LD_ADDR_EXP 4
 525: PUSH
 526: LD_STRING Lisa
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_EXP 49
 536: PPUSH
 537: CALL 39838 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 49
 557: PPUSH
 558: CALL 39838 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 49
 578: PPUSH
 579: CALL 39838 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 49
 599: PPUSH
 600: CALL 39838 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 49
 620: PPUSH
 621: CALL 39838 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 49
 641: PPUSH
 642: CALL 39838 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 49
 662: PPUSH
 663: CALL 39838 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 49
 683: PPUSH
 684: CALL 39838 0 3
 688: ST_TO_ADDR
// if Lisa = false then
 689: LD_EXP 4
 693: PUSH
 694: LD_INT 0
 696: EQUAL
 697: IFFALSE 720
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 699: LD_ADDR_EXP 2
 703: PUSH
 704: LD_STRING Bobby
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_EXP 49
 714: PPUSH
 715: CALL 39838 0 3
 719: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 720: LD_EXP 4
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: PUSH
 729: LD_EXP 2
 733: PUSH
 734: LD_INT 0
 736: EQUAL
 737: AND
 738: IFFALSE 761
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_STRING Cyrus
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_EXP 49
 755: PPUSH
 756: CALL 39838 0 3
 760: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 761: LD_EXP 4
 765: PUSH
 766: LD_INT 0
 768: EQUAL
 769: PUSH
 770: LD_EXP 2
 774: PUSH
 775: LD_INT 0
 777: EQUAL
 778: AND
 779: PUSH
 780: LD_EXP 3
 784: PUSH
 785: LD_INT 0
 787: EQUAL
 788: AND
 789: IFFALSE 888
// begin tmp = CreateCharacterSet ( 03_others ) ;
 791: LD_ADDR_VAR 0 3
 795: PUSH
 796: LD_STRING 03_others
 798: PPUSH
 799: CALL_OW 31
 803: ST_TO_ADDR
// if tmp then
 804: LD_VAR 0 3
 808: IFFALSE 865
// begin RandomBeforeMission = tmp [ 1 ] ;
 810: LD_ADDR_EXP 6
 814: PUSH
 815: LD_VAR 0 3
 819: PUSH
 820: LD_INT 1
 822: ARRAY
 823: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 824: LD_STRING 03_others
 826: PPUSH
 827: CALL_OW 40
// if tmp > 1 then
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 1
 838: GREATER
 839: IFFALSE 863
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: DIFF
 855: PPUSH
 856: LD_STRING 03_others
 858: PPUSH
 859: CALL_OW 38
// end else
 863: GO 888
// begin PrepareHuman ( false , 1 , 3 ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 3
 873: PPUSH
 874: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 878: LD_ADDR_EXP 6
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 888: LD_ADDR_OWVAR 20
 892: PUSH
 893: LD_INT 4
 895: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 896: LD_ADDR_EXP 13
 900: PUSH
 901: LD_STRING Donaldson
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: LD_EXP 49
 911: PPUSH
 912: CALL 39838 0 3
 916: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 917: LD_ADDR_EXP 5
 921: PUSH
 922: LD_STRING Frank
 924: PPUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_EXP 49
 932: PPUSH
 933: CALL 39838 0 3
 937: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 938: LD_EXP 1
 942: PPUSH
 943: LD_INT 32
 945: PPUSH
 946: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 950: LD_EXP 7
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 965: LD_EXP 7
 969: PPUSH
 970: LD_INT 32
 972: PPUSH
 973: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 977: LD_EXP 8
 981: PPUSH
 982: LD_INT 2
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 992: LD_EXP 9
 996: PPUSH
 997: LD_INT 2
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1007: LD_EXP 12
1011: PPUSH
1012: LD_INT 2
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1022: LD_EXP 10
1026: PPUSH
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1037: LD_EXP 11
1041: PPUSH
1042: LD_INT 2
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1052: LD_EXP 4
1056: PPUSH
1057: LD_INT 2
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 49
// if Lisa = false then
1067: LD_EXP 4
1071: PUSH
1072: LD_INT 0
1074: EQUAL
1075: IFFALSE 1092
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1077: LD_EXP 2
1081: PPUSH
1082: LD_INT 2
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL_OW 49
// if Lisa = false and Bobby = false then
1092: LD_EXP 4
1096: PUSH
1097: LD_INT 0
1099: EQUAL
1100: PUSH
1101: LD_EXP 2
1105: PUSH
1106: LD_INT 0
1108: EQUAL
1109: AND
1110: IFFALSE 1127
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1112: LD_EXP 3
1116: PPUSH
1117: LD_INT 2
1119: PPUSH
1120: LD_INT 0
1122: PPUSH
1123: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1127: LD_EXP 4
1131: PUSH
1132: LD_INT 0
1134: EQUAL
1135: PUSH
1136: LD_EXP 2
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: PUSH
1146: LD_EXP 3
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: IFFALSE 1172
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1157: LD_EXP 6
1161: PPUSH
1162: LD_INT 2
1164: PPUSH
1165: LD_INT 0
1167: PPUSH
1168: CALL_OW 49
// end ;
1172: LD_VAR 0 1
1176: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1177: LD_INT 0
1179: PPUSH
1180: PPUSH
1181: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1182: LD_EXP 13
1186: PPUSH
1187: LD_INT 10
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: CALL_OW 49
// if Frank then
1197: LD_EXP 5
1201: IFFALSE 1218
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1203: LD_EXP 5
1207: PPUSH
1208: LD_INT 10
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// uc_nation = 1 ;
1218: LD_ADDR_OWVAR 21
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// uc_side = 4 ;
1226: LD_ADDR_OWVAR 20
1230: PUSH
1231: LD_INT 4
1233: ST_TO_ADDR
// hc_class := 3 ;
1234: LD_ADDR_OWVAR 28
1238: PUSH
1239: LD_INT 3
1241: ST_TO_ADDR
// hc_sex := sex_male ;
1242: LD_ADDR_OWVAR 27
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1250: LD_ADDR_OWVAR 33
1254: PUSH
1255: LD_STRING SecondCharsGal
1257: ST_TO_ADDR
// hc_face_number := 53 ;
1258: LD_ADDR_OWVAR 34
1262: PUSH
1263: LD_INT 53
1265: ST_TO_ADDR
// hc_name := Freddie Warner ;
1266: LD_ADDR_OWVAR 26
1270: PUSH
1271: LD_STRING Freddie Warner
1273: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1274: LD_ADDR_OWVAR 29
1278: PUSH
1279: LD_INT 8
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1289: LD_ADDR_OWVAR 30
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 0
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1312: LD_ADDR_OWVAR 31
1316: PUSH
1317: LD_INT 1
1319: PUSH
1320: LD_INT 0
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: ST_TO_ADDR
// un = CreateHuman ;
1335: LD_ADDR_VAR 0 3
1339: PUSH
1340: CALL_OW 44
1344: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1345: LD_VAR 0 3
1349: PPUSH
1350: LD_INT 10
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// hc_class := 1 ;
1360: LD_ADDR_OWVAR 28
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
// hc_sex := sex_male ;
1368: LD_ADDR_OWVAR 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1376: LD_ADDR_OWVAR 33
1380: PUSH
1381: LD_STRING SecondCharsGal
1383: ST_TO_ADDR
// hc_face_number := 56 ;
1384: LD_ADDR_OWVAR 34
1388: PUSH
1389: LD_INT 56
1391: ST_TO_ADDR
// hc_name := Mel Brennan ;
1392: LD_ADDR_OWVAR 26
1396: PUSH
1397: LD_STRING Mel Brennan
1399: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1400: LD_ADDR_OWVAR 29
1404: PUSH
1405: LD_INT 12
1407: PUSH
1408: LD_INT 11
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1415: LD_ADDR_OWVAR 30
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 1
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1438: LD_ADDR_OWVAR 31
1442: PUSH
1443: LD_INT 3
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: ST_TO_ADDR
// un = CreateHuman ;
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1471: LD_VAR 0 3
1475: PPUSH
1476: LD_INT 10
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 49
// hc_class := 1 ;
1486: LD_ADDR_OWVAR 28
1490: PUSH
1491: LD_INT 1
1493: ST_TO_ADDR
// hc_sex := sex_male ;
1494: LD_ADDR_OWVAR 27
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1502: LD_ADDR_OWVAR 33
1506: PUSH
1507: LD_STRING AmGalRemake
1509: ST_TO_ADDR
// hc_face_number := 5 ;
1510: LD_ADDR_OWVAR 34
1514: PUSH
1515: LD_INT 5
1517: ST_TO_ADDR
// hc_name := Bob Joplin ;
1518: LD_ADDR_OWVAR 26
1522: PUSH
1523: LD_STRING Bob Joplin
1525: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1526: LD_ADDR_OWVAR 29
1530: PUSH
1531: LD_INT 10
1533: PUSH
1534: LD_INT 11
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1541: LD_ADDR_OWVAR 30
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1564: LD_ADDR_OWVAR 31
1568: PUSH
1569: LD_INT 3
1571: PUSH
1572: LD_INT 1
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// un = CreateHuman ;
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: CALL_OW 44
1596: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_INT 10
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// hc_class := 3 ;
1612: LD_ADDR_OWVAR 28
1616: PUSH
1617: LD_INT 3
1619: ST_TO_ADDR
// hc_sex := sex_female ;
1620: LD_ADDR_OWVAR 27
1624: PUSH
1625: LD_INT 2
1627: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1628: LD_ADDR_OWVAR 33
1632: PUSH
1633: LD_STRING AmGalRemake
1635: ST_TO_ADDR
// hc_face_number := 8 ;
1636: LD_ADDR_OWVAR 34
1640: PUSH
1641: LD_INT 8
1643: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1644: LD_ADDR_OWVAR 26
1648: PUSH
1649: LD_STRING Elizabeth Whitney
1651: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1652: LD_ADDR_OWVAR 29
1656: PUSH
1657: LD_INT 9
1659: PUSH
1660: LD_INT 11
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1667: LD_ADDR_OWVAR 30
1671: PUSH
1672: LD_INT 0
1674: PUSH
1675: LD_INT 0
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1690: LD_ADDR_OWVAR 31
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// un = CreateHuman ;
1713: LD_ADDR_VAR 0 3
1717: PUSH
1718: CALL_OW 44
1722: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1723: LD_VAR 0 3
1727: PPUSH
1728: LD_INT 10
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 49
// InitHc ;
1738: CALL_OW 19
// end ;
1742: LD_VAR 0 1
1746: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1747: LD_INT 0
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// uc_side = 1 ;
1761: LD_ADDR_OWVAR 20
1765: PUSH
1766: LD_INT 1
1768: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 2
1776: ST_TO_ADDR
// vc_engine := engine_combustion ;
1777: LD_ADDR_OWVAR 39
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_control := control_manual ;
1785: LD_ADDR_OWVAR 38
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1793: LD_ADDR_OWVAR 41
1797: PUSH
1798: LD_INT 65
1800: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 5
1808: PUSH
1809: LD_INT 3
1811: PUSH
1812: LD_INT 4
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_OWVAR 67
1824: ARRAY
1825: ST_TO_ADDR
// veh := CreateVehicle ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: CALL_OW 45
1835: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1836: LD_VAR 0 5
1840: PPUSH
1841: LD_INT 2
1843: PPUSH
1844: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1848: LD_INT 17
1850: PPUSH
1851: LD_INT 4
1853: PPUSH
1854: CALL_OW 428
1858: PUSH
1859: LD_INT 0
1861: EQUAL
1862: IFFALSE 1884
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1864: LD_VAR 0 5
1868: PPUSH
1869: LD_INT 17
1871: PPUSH
1872: LD_INT 4
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 48
1882: GO 1902
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1884: LD_VAR 0 5
1888: PPUSH
1889: LD_INT 23
1891: PPUSH
1892: LD_INT 10
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 48
// hc_class := 1 ;
1902: LD_ADDR_OWVAR 28
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// hc_sex := sex_male ;
1910: LD_ADDR_OWVAR 27
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1918: LD_ADDR_OWVAR 33
1922: PUSH
1923: LD_STRING SecondCharsGal
1925: ST_TO_ADDR
// hc_face_number := 59 ;
1926: LD_ADDR_OWVAR 34
1930: PUSH
1931: LD_INT 59
1933: ST_TO_ADDR
// hc_name := Max Gray ;
1934: LD_ADDR_OWVAR 26
1938: PUSH
1939: LD_STRING Max Gray
1941: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1942: LD_ADDR_OWVAR 29
1946: PUSH
1947: LD_INT 9
1949: PUSH
1950: LD_INT 11
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1957: LD_ADDR_OWVAR 30
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1980: LD_ADDR_OWVAR 31
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 1
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: LD_INT 0
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: ST_TO_ADDR
// un = CreateHuman ;
2003: LD_ADDR_VAR 0 4
2007: PUSH
2008: CALL_OW 44
2012: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 11
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// hc_class := 2 ;
2028: LD_ADDR_OWVAR 28
2032: PUSH
2033: LD_INT 2
2035: ST_TO_ADDR
// hc_sex := sex_male ;
2036: LD_ADDR_OWVAR 27
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2044: LD_ADDR_OWVAR 33
2048: PUSH
2049: LD_STRING SecondCharsGal
2051: ST_TO_ADDR
// hc_face_number := 50 ;
2052: LD_ADDR_OWVAR 34
2056: PUSH
2057: LD_INT 50
2059: ST_TO_ADDR
// hc_name := Frank Hughes ;
2060: LD_ADDR_OWVAR 26
2064: PUSH
2065: LD_STRING Frank Hughes
2067: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2068: LD_ADDR_OWVAR 29
2072: PUSH
2073: LD_INT 10
2075: PUSH
2076: LD_INT 10
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2083: LD_ADDR_OWVAR 30
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: LD_INT 0
2096: PUSH
2097: LD_INT 0
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2106: LD_ADDR_OWVAR 31
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: LD_INT 0
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// un = CreateHuman ;
2129: LD_ADDR_VAR 0 4
2133: PUSH
2134: CALL_OW 44
2138: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_INT 11
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: CALL_OW 49
// hc_class := 1 ;
2154: LD_ADDR_OWVAR 28
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// hc_sex := sex_male ;
2162: LD_ADDR_OWVAR 27
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2170: LD_ADDR_OWVAR 33
2174: PUSH
2175: LD_STRING SecondCharsGal
2177: ST_TO_ADDR
// hc_face_number := 54 ;
2178: LD_ADDR_OWVAR 34
2182: PUSH
2183: LD_INT 54
2185: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2186: LD_ADDR_OWVAR 26
2190: PUSH
2191: LD_STRING Luigi Ghbellin
2193: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2194: LD_ADDR_OWVAR 29
2198: PUSH
2199: LD_INT 11
2201: PUSH
2202: LD_INT 11
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2209: LD_ADDR_OWVAR 30
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 0
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2232: LD_ADDR_OWVAR 31
2236: PUSH
2237: LD_INT 2
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: LD_INT 1
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: ST_TO_ADDR
// un = CreateHuman ;
2255: LD_ADDR_VAR 0 4
2259: PUSH
2260: CALL_OW 44
2264: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2265: LD_VAR 0 4
2269: PPUSH
2270: LD_INT 11
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 49
// hc_class := 3 ;
2280: LD_ADDR_OWVAR 28
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// hc_sex := sex_male ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2296: LD_ADDR_OWVAR 33
2300: PUSH
2301: LD_STRING AmGalRemake
2303: ST_TO_ADDR
// hc_face_number := 6 ;
2304: LD_ADDR_OWVAR 34
2308: PUSH
2309: LD_INT 6
2311: ST_TO_ADDR
// hc_name := Leon Carter ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_STRING Leon Carter
2319: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2320: LD_ADDR_OWVAR 29
2324: PUSH
2325: LD_INT 10
2327: PUSH
2328: LD_INT 9
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2335: LD_ADDR_OWVAR 30
2339: PUSH
2340: LD_INT 0
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2358: LD_ADDR_OWVAR 31
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 3
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// un = CreateHuman ;
2381: LD_ADDR_VAR 0 4
2385: PUSH
2386: CALL_OW 44
2390: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2391: LD_VAR 0 4
2395: PPUSH
2396: LD_VAR 0 5
2400: PPUSH
2401: CALL_OW 52
// if count = 4 then
2405: LD_VAR 0 1
2409: PUSH
2410: LD_INT 4
2412: EQUAL
2413: IFFALSE 2541
// begin hc_class := 1 ;
2415: LD_ADDR_OWVAR 28
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
// hc_sex := sex_male ;
2423: LD_ADDR_OWVAR 27
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2431: LD_ADDR_OWVAR 33
2435: PUSH
2436: LD_STRING SecondCharsGal
2438: ST_TO_ADDR
// hc_face_number := 34 ;
2439: LD_ADDR_OWVAR 34
2443: PUSH
2444: LD_INT 34
2446: ST_TO_ADDR
// hc_name := Ian Hill ;
2447: LD_ADDR_OWVAR 26
2451: PUSH
2452: LD_STRING Ian Hill
2454: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2455: LD_ADDR_OWVAR 29
2459: PUSH
2460: LD_INT 10
2462: PUSH
2463: LD_INT 12
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2470: LD_ADDR_OWVAR 30
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2493: LD_ADDR_OWVAR 31
2497: PUSH
2498: LD_INT 3
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: LD_INT 1
2506: PUSH
2507: LD_INT 0
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: ST_TO_ADDR
// un = CreateHuman ;
2516: LD_ADDR_VAR 0 4
2520: PUSH
2521: CALL_OW 44
2525: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_INT 11
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: CALL_OW 49
// end ; if count = 5 then
2541: LD_VAR 0 1
2545: PUSH
2546: LD_INT 5
2548: EQUAL
2549: IFFALSE 2803
// begin hc_class := 1 ;
2551: LD_ADDR_OWVAR 28
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// hc_sex := sex_male ;
2559: LD_ADDR_OWVAR 27
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING SecondCharsGal
2574: ST_TO_ADDR
// hc_face_number := 34 ;
2575: LD_ADDR_OWVAR 34
2579: PUSH
2580: LD_INT 34
2582: ST_TO_ADDR
// hc_name := Ian Hill ;
2583: LD_ADDR_OWVAR 26
2587: PUSH
2588: LD_STRING Ian Hill
2590: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2591: LD_ADDR_OWVAR 29
2595: PUSH
2596: LD_INT 10
2598: PUSH
2599: LD_INT 12
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2606: LD_ADDR_OWVAR 30
2610: PUSH
2611: LD_INT 1
2613: PUSH
2614: LD_INT 0
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2629: LD_ADDR_OWVAR 31
2633: PUSH
2634: LD_INT 3
2636: PUSH
2637: LD_INT 1
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: ST_TO_ADDR
// un = CreateHuman ;
2652: LD_ADDR_VAR 0 4
2656: PUSH
2657: CALL_OW 44
2661: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2662: LD_VAR 0 4
2666: PPUSH
2667: LD_INT 11
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 49
// hc_class := 1 ;
2677: LD_ADDR_OWVAR 28
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// hc_sex := sex_female ;
2685: LD_ADDR_OWVAR 27
2689: PUSH
2690: LD_INT 2
2692: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2693: LD_ADDR_OWVAR 33
2697: PUSH
2698: LD_STRING SecondCharsGal
2700: ST_TO_ADDR
// hc_face_number := 41 ;
2701: LD_ADDR_OWVAR 34
2705: PUSH
2706: LD_INT 41
2708: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2709: LD_ADDR_OWVAR 26
2713: PUSH
2714: LD_STRING Kate Wadsworth
2716: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2717: LD_ADDR_OWVAR 29
2721: PUSH
2722: LD_INT 9
2724: PUSH
2725: LD_INT 9
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2732: LD_ADDR_OWVAR 30
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 2
2742: PUSH
2743: LD_INT 0
2745: PUSH
2746: LD_INT 0
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2755: LD_ADDR_OWVAR 31
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: LD_INT 3
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: ST_TO_ADDR
// un = CreateHuman ;
2778: LD_ADDR_VAR 0 4
2782: PUSH
2783: CALL_OW 44
2787: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2788: LD_VAR 0 4
2792: PPUSH
2793: LD_INT 11
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2803: LD_INT 11
2805: PPUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 21
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 26
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 70
2845: PUSH
2846: LD_INT 1
2848: ARRAY
2849: PPUSH
2850: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2854: LD_INT 11
2856: PPUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 26
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PPUSH
2892: CALL_OW 70
2896: PUSH
2897: LD_INT 1
2899: ARRAY
2900: PPUSH
2901: LD_STRING D6-Sol3-1
2903: PPUSH
2904: CALL_OW 88
// end ; end_of_file
2908: LD_VAR 0 2
2912: RET
// export function PrepareRussianCommander ; begin
2913: LD_INT 0
2915: PPUSH
// uc_side = 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation = 3 ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 3
2931: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2932: LD_ADDR_EXP 15
2936: PUSH
2937: LD_STRING Stolypin
2939: PPUSH
2940: CALL_OW 25
2944: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_INT 21
2952: PPUSH
2953: CALL_OW 52
// end ;
2957: LD_VAR 0 1
2961: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// if Difficulty > 1 then
2968: LD_OWVAR 67
2972: PUSH
2973: LD_INT 1
2975: GREATER
2976: IFFALSE 3086
// begin uc_side := 3 ;
2978: LD_ADDR_OWVAR 20
2982: PUSH
2983: LD_INT 3
2985: ST_TO_ADDR
// uc_nation := 3 ;
2986: LD_ADDR_OWVAR 21
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// InitHc ;
2994: CALL_OW 19
// InitBc ;
2998: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3002: LD_INT 0
3004: PPUSH
3005: LD_INT 1
3007: PPUSH
3008: LD_INT 4
3010: PPUSH
3011: CALL_OW 380
// bc_type := b_breastwork ;
3015: LD_ADDR_OWVAR 42
3019: PUSH
3020: LD_INT 31
3022: ST_TO_ADDR
// bc_level := 4 ;
3023: LD_ADDR_OWVAR 43
3027: PUSH
3028: LD_INT 4
3030: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3031: LD_ADDR_VAR 0 3
3035: PUSH
3036: LD_INT 100
3038: PPUSH
3039: LD_INT 58
3041: PPUSH
3042: LD_INT 2
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// un := CreateHuman ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_INT 5
3067: PPUSH
3068: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3072: LD_VAR 0 4
3076: PPUSH
3077: LD_VAR 0 3
3081: PPUSH
3082: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3086: LD_INT 3
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 22
3094: PPUSH
3095: LD_EXP 16
3099: PPUSH
3100: LD_EXP 17
3104: PPUSH
3105: CALL_OW 12
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 4
3118: PUSH
3119: LD_INT 5
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: PUSH
3127: LD_OWVAR 67
3131: ARRAY
3132: PPUSH
3133: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 3
3142: PPUSH
3143: LD_INT 21
3145: PPUSH
3146: LD_EXP 16
3150: PPUSH
3151: LD_EXP 17
3155: PPUSH
3156: CALL_OW 12
3160: PPUSH
3161: LD_INT 2
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3171: LD_INT 3
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_INT 1
3179: PPUSH
3180: LD_EXP 16
3184: PPUSH
3185: LD_EXP 17
3189: PPUSH
3190: CALL_OW 12
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3205: LD_INT 3
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: LD_INT 24
3213: PPUSH
3214: LD_EXP 16
3218: PPUSH
3219: LD_EXP 17
3223: PPUSH
3224: CALL_OW 12
3228: PPUSH
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 5
3234: PPUSH
3235: CALL 4335 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_INT 22
3246: PUSH
3247: LD_INT 3
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: LD_INT 30
3256: PUSH
3257: LD_INT 32
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PPUSH
3268: CALL_OW 69
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3314
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3276: LD_INT 3
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_EXP 16
3291: PPUSH
3292: LD_EXP 17
3296: PPUSH
3297: CALL_OW 12
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL 4335 0 6
3312: GO 3273
3314: POP
3315: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3316: LD_ADDR_VAR 0 2
3320: PUSH
3321: LD_INT 22
3323: PUSH
3324: LD_INT 3
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 30
3333: PUSH
3334: LD_INT 31
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3379
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3353: LD_EXP 16
3357: PPUSH
3358: LD_EXP 17
3362: PPUSH
3363: CALL_OW 12
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 4445 0 2
3377: GO 3350
3379: POP
3380: POP
// end ;
3381: LD_VAR 0 1
3385: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3386: LD_INT 0
3388: PPUSH
3389: PPUSH
3390: PPUSH
3391: PPUSH
// uc_side = 6 ;
3392: LD_ADDR_OWVAR 20
3396: PUSH
3397: LD_INT 6
3399: ST_TO_ADDR
// uc_nation = 3 ;
3400: LD_ADDR_OWVAR 21
3404: PUSH
3405: LD_INT 3
3407: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: DOUBLE
3414: LD_INT 1
3416: DEC
3417: ST_TO_ADDR
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 1
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 12
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_OWVAR 67
3444: ARRAY
3445: PUSH
3446: FOR_TO
3447: IFFALSE 3607
// begin vc_engine = 1 ;
3449: LD_ADDR_OWVAR 39
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// vc_control = 1 ;
3457: LD_ADDR_OWVAR 38
3461: PUSH
3462: LD_INT 1
3464: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3465: LD_ADDR_OWVAR 40
3469: PUSH
3470: LD_INT 42
3472: PUSH
3473: LD_INT 42
3475: PUSH
3476: LD_INT 43
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_OWVAR 67
3488: ARRAY
3489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3490: LD_ADDR_OWVAR 37
3494: PUSH
3495: LD_INT 21
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_OWVAR 67
3513: ARRAY
3514: ST_TO_ADDR
// veh = CreateVehicle ;
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: CALL_OW 45
3524: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3525: LD_VAR 0 3
3529: PPUSH
3530: LD_INT 3
3532: PPUSH
3533: LD_INT 0
3535: PPUSH
3536: CALL_OW 49
// hc_gallery =  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name =  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 3
3561: PPUSH
3562: LD_EXP 16
3566: PPUSH
3567: LD_EXP 17
3571: PPUSH
3572: CALL_OW 12
3576: PPUSH
3577: CALL_OW 380
// un = CreateHuman ;
3581: LD_ADDR_VAR 0 4
3585: PUSH
3586: CALL_OW 44
3590: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: CALL_OW 52
// end ;
3605: GO 3446
3607: POP
3608: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3609: LD_INT 0
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_EXP 16
3619: PPUSH
3620: LD_EXP 17
3624: PPUSH
3625: CALL_OW 12
3629: PUSH
3630: LD_INT 2
3632: PLUS
3633: PPUSH
3634: CALL_OW 380
// un = CreateHuman ;
3638: LD_ADDR_VAR 0 4
3642: PUSH
3643: CALL_OW 44
3647: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3648: LD_VAR 0 4
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: LD_INT 0
3658: PPUSH
3659: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3663: LD_INT 0
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_EXP 16
3673: PPUSH
3674: LD_EXP 17
3678: PPUSH
3679: CALL_OW 12
3683: PUSH
3684: LD_INT 2
3686: PLUS
3687: PPUSH
3688: CALL_OW 380
// un = CreateHuman ;
3692: LD_ADDR_VAR 0 4
3696: PUSH
3697: CALL_OW 44
3701: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3702: LD_VAR 0 4
3706: PPUSH
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3717: LD_ADDR_VAR 0 2
3721: PUSH
3722: DOUBLE
3723: LD_INT 1
3725: DEC
3726: ST_TO_ADDR
3727: LD_INT 2
3729: PUSH
3730: LD_INT 3
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 12
3757: PLUS
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3830
// begin hc_gallery =  ;
3762: LD_ADDR_OWVAR 33
3766: PUSH
3767: LD_STRING 
3769: ST_TO_ADDR
// hc_name =  ;
3770: LD_ADDR_OWVAR 26
3774: PUSH
3775: LD_STRING 
3777: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3778: LD_INT 0
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: LD_EXP 16
3788: PPUSH
3789: LD_EXP 17
3793: PPUSH
3794: CALL_OW 12
3798: PPUSH
3799: CALL_OW 380
// un = CreateHuman ;
3803: LD_ADDR_VAR 0 4
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3813: LD_VAR 0 4
3817: PPUSH
3818: LD_INT 3
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 49
// end ;
3828: GO 3759
3830: POP
3831: POP
// vc_engine = 1 ;
3832: LD_ADDR_OWVAR 39
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// vc_control = 1 ;
3840: LD_ADDR_OWVAR 38
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// vc_weapon = 51 ;
3848: LD_ADDR_OWVAR 40
3852: PUSH
3853: LD_INT 51
3855: ST_TO_ADDR
// vc_chassis = 22 ;
3856: LD_ADDR_OWVAR 37
3860: PUSH
3861: LD_INT 22
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3874: LD_VAR 0 3
3878: PPUSH
3879: LD_INT 3
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 100
3899: PPUSH
3900: CALL_OW 290
// hc_gallery =  ;
3904: LD_ADDR_OWVAR 33
3908: PUSH
3909: LD_STRING 
3911: ST_TO_ADDR
// hc_name =  ;
3912: LD_ADDR_OWVAR 26
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3920: LD_INT 0
3922: PPUSH
3923: LD_INT 3
3925: PPUSH
3926: LD_EXP 16
3930: PPUSH
3931: LD_EXP 17
3935: PPUSH
3936: CALL_OW 12
3940: PPUSH
3941: CALL_OW 380
// un = CreateHuman ;
3945: LD_ADDR_VAR 0 4
3949: PUSH
3950: CALL_OW 44
3954: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3955: LD_VAR 0 4
3959: PPUSH
3960: LD_VAR 0 3
3964: PPUSH
3965: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_INT 22
3976: PUSH
3977: LD_INT 6
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 25
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 3
4006: PUSH
4007: LD_INT 25
4009: PUSH
4010: LD_INT 4
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4055
// ComAgressiveMove ( i , 45 , 46 ) ;
4038: LD_VAR 0 2
4042: PPUSH
4043: LD_INT 45
4045: PPUSH
4046: LD_INT 46
4048: PPUSH
4049: CALL_OW 114
4053: GO 4035
4055: POP
4056: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 6
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 25
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4123
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4094: LD_ADDR_EXP 21
4098: PUSH
4099: LD_VAR 0 2
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: LD_INT 48
4109: PPUSH
4110: LD_INT 55
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL_OW 145
4120: ST_TO_ADDR
4121: GO 4091
4123: POP
4124: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: LD_INT 22
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PPUSH
4154: CALL_OW 69
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4179
// ComMoveXY ( i , 39 , 55 ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: LD_INT 39
4169: PPUSH
4170: LD_INT 55
4172: PPUSH
4173: CALL_OW 111
4177: GO 4159
4179: POP
4180: POP
// end ;
4181: LD_VAR 0 1
4185: RET
// export function PrepareFirstAttack ; var i , un ; begin
4186: LD_INT 0
4188: PPUSH
4189: PPUSH
4190: PPUSH
// uc_side = 5 ;
4191: LD_ADDR_OWVAR 20
4195: PUSH
4196: LD_INT 5
4198: ST_TO_ADDR
// uc_nation = 3 ;
4199: LD_ADDR_OWVAR 21
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// for i := 1 to 4 do
4207: LD_ADDR_VAR 0 2
4211: PUSH
4212: DOUBLE
4213: LD_INT 1
4215: DEC
4216: ST_TO_ADDR
4217: LD_INT 4
4219: PUSH
4220: FOR_TO
4221: IFFALSE 4320
// begin hc_gallery =  ;
4223: LD_ADDR_OWVAR 33
4227: PUSH
4228: LD_STRING 
4230: ST_TO_ADDR
// hc_name =  ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4239: LD_INT 0
4241: PPUSH
4242: LD_INT 1
4244: PPUSH
4245: LD_EXP 16
4249: PPUSH
4250: LD_EXP 17
4254: PPUSH
4255: CALL_OW 12
4259: PPUSH
4260: CALL_OW 380
// un = CreateHuman ;
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: CALL_OW 44
4273: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_INT 4
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 250
4303: PPUSH
4304: LD_EXP 1
4308: PPUSH
4309: CALL_OW 251
4313: PPUSH
4314: CALL_OW 114
// end ;
4318: GO 4220
4320: POP
4321: POP
// firstRussianAttack = 1 ;
4322: LD_ADDR_EXP 23
4326: PUSH
4327: LD_INT 1
4329: ST_TO_ADDR
// end ; end_of_file
4330: LD_VAR 0 1
4334: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4335: LD_INT 0
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
// for i = 1 to count do
4341: LD_ADDR_VAR 0 8
4345: PUSH
4346: DOUBLE
4347: LD_INT 1
4349: DEC
4350: ST_TO_ADDR
4351: LD_VAR 0 6
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4438
// begin uc_side = side ;
4359: LD_ADDR_OWVAR 20
4363: PUSH
4364: LD_VAR 0 1
4368: ST_TO_ADDR
// uc_nation = nation ;
4369: LD_ADDR_OWVAR 21
4373: PUSH
4374: LD_VAR 0 2
4378: ST_TO_ADDR
// hc_gallery =  ;
4379: LD_ADDR_OWVAR 33
4383: PUSH
4384: LD_STRING 
4386: ST_TO_ADDR
// hc_name =  ;
4387: LD_ADDR_OWVAR 26
4391: PUSH
4392: LD_STRING 
4394: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4395: LD_INT 0
4397: PPUSH
4398: LD_VAR 0 5
4402: PPUSH
4403: LD_VAR 0 4
4407: PPUSH
4408: CALL_OW 380
// un = CreateHuman ;
4412: LD_ADDR_VAR 0 10
4416: PUSH
4417: CALL_OW 44
4421: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4422: LD_VAR 0 10
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: CALL_OW 52
// end ;
4436: GO 4356
4438: POP
4439: POP
// end ;
4440: LD_VAR 0 7
4444: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4445: LD_INT 0
4447: PPUSH
4448: PPUSH
4449: PPUSH
// uc_side := GetSide ( b ) ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_VAR 0 2
4459: PPUSH
4460: CALL_OW 255
4464: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_VAR 0 2
4474: PPUSH
4475: CALL_OW 248
4479: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 1
4485: PPUSH
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 380
// un = CreateHuman ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4505: LD_ADDR_VAR 0 5
4509: PUSH
4510: LD_VAR 0 2
4514: PPUSH
4515: CALL_OW 254
4519: PUSH
4520: LD_INT 3
4522: MINUS
4523: ST_TO_ADDR
// if dir < 0 then
4524: LD_VAR 0 5
4528: PUSH
4529: LD_INT 0
4531: LESS
4532: IFFALSE 4548
// dir := 6 + dir ;
4534: LD_ADDR_VAR 0 5
4538: PUSH
4539: LD_INT 6
4541: PUSH
4542: LD_VAR 0 5
4546: PLUS
4547: ST_TO_ADDR
// SetDir ( un , dir ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_VAR 0 5
4557: PPUSH
4558: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4562: LD_VAR 0 4
4566: PPUSH
4567: LD_VAR 0 2
4571: PPUSH
4572: CALL_OW 52
// end ;
4576: LD_VAR 0 3
4580: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4586: LD_ADDR_VAR 0 6
4590: PUSH
4591: LD_VAR 0 1
4595: PUSH
4596: LD_INT 1
4598: PPUSH
4599: LD_VAR 0 1
4603: PPUSH
4604: CALL_OW 12
4608: ARRAY
4609: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4610: LD_VAR 0 6
4614: PPUSH
4615: CALL_OW 258
4619: PUSH
4620: LD_INT 1
4622: EQUAL
4623: IFFALSE 4641
// Say ( speaker , dialogMID ) else
4625: LD_VAR 0 6
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: CALL_OW 88
4639: GO 4655
// Say ( speaker , dialogFID ) ;
4641: LD_VAR 0 6
4645: PPUSH
4646: LD_VAR 0 3
4650: PPUSH
4651: CALL_OW 88
// result := speaker ;
4655: LD_ADDR_VAR 0 4
4659: PUSH
4660: LD_VAR 0 6
4664: ST_TO_ADDR
// end ;
4665: LD_VAR 0 4
4669: RET
// export function PrepareDifficulty ; var tmp ; begin
4670: LD_INT 0
4672: PPUSH
4673: PPUSH
// if Difficulty = 1 then
4674: LD_OWVAR 67
4678: PUSH
4679: LD_INT 1
4681: EQUAL
4682: IFFALSE 4700
// begin RuSoldMinLevel = 1 ;
4684: LD_ADDR_EXP 16
4688: PUSH
4689: LD_INT 1
4691: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4692: LD_ADDR_EXP 17
4696: PUSH
4697: LD_INT 2
4699: ST_TO_ADDR
// end ; if Difficulty = 2 then
4700: LD_OWVAR 67
4704: PUSH
4705: LD_INT 2
4707: EQUAL
4708: IFFALSE 4809
// begin RuSoldMinLevel = 2 ;
4710: LD_ADDR_EXP 16
4714: PUSH
4715: LD_INT 2
4717: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4718: LD_ADDR_EXP 17
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4726: LD_INT 23
4728: PPUSH
4729: CALL_OW 64
// uc_nation = 3 ;
4733: LD_ADDR_OWVAR 21
4737: PUSH
4738: LD_INT 3
4740: ST_TO_ADDR
// uc_side = 3 ;
4741: LD_ADDR_OWVAR 20
4745: PUSH
4746: LD_INT 3
4748: ST_TO_ADDR
// bc_level = 5 ;
4749: LD_ADDR_OWVAR 43
4753: PUSH
4754: LD_INT 5
4756: ST_TO_ADDR
// bc_type = 32 ;
4757: LD_ADDR_OWVAR 42
4761: PUSH
4762: LD_INT 32
4764: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: LD_INT 76
4772: PPUSH
4773: LD_INT 91
4775: PPUSH
4776: LD_INT 2
4778: PPUSH
4779: CALL_OW 47
4783: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4784: LD_VAR 0 2
4788: PPUSH
4789: LD_INT 43
4791: PPUSH
4792: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4796: LD_INT 51
4798: PPUSH
4799: LD_INT 3
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 322
// end ; if Difficulty = 3 then
4809: LD_OWVAR 67
4813: PUSH
4814: LD_INT 3
4816: EQUAL
4817: IFFALSE 4979
// begin RuSoldMinLevel = 2 ;
4819: LD_ADDR_EXP 16
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4827: LD_ADDR_EXP 17
4831: PUSH
4832: LD_INT 4
4834: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4835: LD_INT 26
4837: PPUSH
4838: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4842: LD_INT 23
4844: PPUSH
4845: CALL_OW 64
// uc_nation = 3 ;
4849: LD_ADDR_OWVAR 21
4853: PUSH
4854: LD_INT 3
4856: ST_TO_ADDR
// uc_side = 3 ;
4857: LD_ADDR_OWVAR 20
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// bc_level = 5 ;
4865: LD_ADDR_OWVAR 43
4869: PUSH
4870: LD_INT 5
4872: ST_TO_ADDR
// bc_type = 32 ;
4873: LD_ADDR_OWVAR 42
4877: PUSH
4878: LD_INT 32
4880: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: LD_INT 76
4888: PPUSH
4889: LD_INT 91
4891: PPUSH
4892: LD_INT 2
4894: PPUSH
4895: CALL_OW 47
4899: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4900: LD_VAR 0 2
4904: PPUSH
4905: LD_INT 44
4907: PPUSH
4908: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4912: LD_ADDR_VAR 0 2
4916: PUSH
4917: LD_INT 83
4919: PPUSH
4920: LD_INT 84
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: CALL_OW 47
4930: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4931: LD_VAR 0 2
4935: PPUSH
4936: LD_INT 43
4938: PPUSH
4939: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4943: LD_INT 51
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4956: LD_INT 52
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4969: LD_INT 25
4971: PPUSH
4972: LD_INT 44
4974: PPUSH
4975: CALL_OW 431
// end ; end ;
4979: LD_VAR 0 1
4983: RET
// export function EnergyDialog ; begin
4984: LD_INT 0
4986: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4987: LD_INT 46
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: CALL_OW 321
4997: PUSH
4998: LD_INT 1
5000: EQUAL
5001: PUSH
5002: LD_INT 35
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 321
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5041
// begin Say ( JMM , D9c-JMM-1 ) ;
5019: LD_EXP 1
5023: PPUSH
5024: LD_STRING D9c-JMM-1
5026: PPUSH
5027: CALL_OW 88
// energyVDialog = 1 ;
5031: LD_ADDR_EXP 33
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// end else
5039: GO 5195
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5041: LD_INT 35
5043: PPUSH
5044: LD_INT 1
5046: PPUSH
5047: CALL_OW 321
5051: PUSH
5052: LD_INT 2
5054: EQUAL
5055: PUSH
5056: LD_EXP 33
5060: PUSH
5061: LD_INT 0
5063: EQUAL
5064: AND
5065: IFFALSE 5087
// begin Say ( JMM , D9c-JMM-1a ) ;
5067: LD_EXP 1
5071: PPUSH
5072: LD_STRING D9c-JMM-1a
5074: PPUSH
5075: CALL_OW 88
// energyVDialog = 1 ;
5079: LD_ADDR_EXP 33
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5087: LD_INT 46
5089: PPUSH
5090: LD_INT 1
5092: PPUSH
5093: CALL_OW 321
5097: PUSH
5098: LD_INT 2
5100: EQUAL
5101: PUSH
5102: LD_EXP 33
5106: PUSH
5107: LD_INT 0
5109: EQUAL
5110: AND
5111: IFFALSE 5133
// begin Say ( JMM , D9c-JMM-1b ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D9c-JMM-1b
5120: PPUSH
5121: CALL_OW 88
// energyVDialog = 1 ;
5125: LD_ADDR_EXP 33
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5133: LD_INT 46
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 321
5143: PUSH
5144: LD_INT 2
5146: EQUAL
5147: PUSH
5148: LD_INT 21
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: CALL_OW 321
5158: PUSH
5159: LD_INT 2
5161: EQUAL
5162: AND
5163: PUSH
5164: LD_EXP 33
5168: PUSH
5169: LD_INT 0
5171: EQUAL
5172: AND
5173: IFFALSE 5195
// begin Say ( JMM , D9c-JMM-1c ) ;
5175: LD_EXP 1
5179: PPUSH
5180: LD_STRING D9c-JMM-1c
5182: PPUSH
5183: CALL_OW 88
// energyVDialog = 1 ;
5187: LD_ADDR_EXP 33
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// end ; end ; end ;
5195: LD_VAR 0 1
5199: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5200: LD_INT 0
5202: PPUSH
5203: PPUSH
5204: PPUSH
5205: PPUSH
5206: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5207: LD_VAR 0 1
5211: NOT
5212: PUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 256
5222: PUSH
5223: LD_INT 250
5225: LESS
5226: OR
5227: PUSH
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 314
5237: PUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 261
5247: PUSH
5248: LD_INT 20
5250: GREATER
5251: AND
5252: OR
5253: IFFALSE 5257
// exit ;
5255: GO 5622
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: LESS
5270: PUSH
5271: LD_VAR 0 1
5275: PPUSH
5276: CALL_OW 110
5280: PUSH
5281: LD_INT 21
5283: EQUAL
5284: NOT
5285: AND
5286: IFFALSE 5313
// begin ComStop ( bulldozer ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 21
5304: PPUSH
5305: CALL_OW 109
// exit ;
5309: GO 5622
// end else
5311: GO 5340
// if GetFuel ( bulldozer ) > 20 then
5313: LD_VAR 0 1
5317: PPUSH
5318: CALL_OW 261
5322: PUSH
5323: LD_INT 20
5325: GREATER
5326: IFFALSE 5340
// SetTag ( bulldozer , 0 ) ;
5328: LD_VAR 0 1
5332: PPUSH
5333: LD_INT 0
5335: PPUSH
5336: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5340: LD_ADDR_VAR 0 5
5344: PUSH
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 353
5354: ST_TO_ADDR
// tmp := [ ] ;
5355: LD_ADDR_VAR 0 6
5359: PUSH
5360: EMPTY
5361: ST_TO_ADDR
// for i = 1 to list do
5362: LD_ADDR_VAR 0 4
5366: PUSH
5367: DOUBLE
5368: LD_INT 1
5370: DEC
5371: ST_TO_ADDR
5372: LD_VAR 0 5
5376: PUSH
5377: FOR_TO
5378: IFFALSE 5476
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5380: LD_VAR 0 5
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: PUSH
5391: LD_INT 1
5393: ARRAY
5394: PPUSH
5395: LD_VAR 0 5
5399: PUSH
5400: LD_VAR 0 4
5404: ARRAY
5405: PUSH
5406: LD_INT 2
5408: ARRAY
5409: PPUSH
5410: CALL_OW 554
5414: IFFALSE 5474
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5416: LD_ADDR_VAR 0 6
5420: PUSH
5421: LD_VAR 0 6
5425: PPUSH
5426: LD_VAR 0 6
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: PPUSH
5435: LD_VAR 0 5
5439: PUSH
5440: LD_VAR 0 4
5444: ARRAY
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PUSH
5450: LD_VAR 0 5
5454: PUSH
5455: LD_VAR 0 4
5459: ARRAY
5460: PUSH
5461: LD_INT 2
5463: ARRAY
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 1
5473: ST_TO_ADDR
// end ;
5474: GO 5377
5476: POP
5477: POP
// ComStop ( bulldozer ) ;
5478: LD_VAR 0 1
5482: PPUSH
5483: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5487: LD_ADDR_VAR 0 7
5491: PUSH
5492: LD_VAR 0 1
5496: PPUSH
5497: CALL_OW 250
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 251
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: ST_TO_ADDR
// for i = tmp downto 1 do
5516: LD_ADDR_VAR 0 4
5520: PUSH
5521: DOUBLE
5522: LD_VAR 0 6
5526: INC
5527: ST_TO_ADDR
5528: LD_INT 1
5530: PUSH
5531: FOR_DOWNTO
5532: IFFALSE 5620
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5534: LD_ADDR_VAR 0 7
5538: PUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 7
5552: PUSH
5553: LD_INT 2
5555: ARRAY
5556: PPUSH
5557: LD_VAR 0 6
5561: PPUSH
5562: CALL 5723 0 3
5566: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5567: LD_VAR 0 1
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 1
5579: ARRAY
5580: PPUSH
5581: LD_VAR 0 7
5585: PUSH
5586: LD_INT 2
5588: ARRAY
5589: PPUSH
5590: CALL 5627 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5594: LD_ADDR_VAR 0 6
5598: PUSH
5599: LD_VAR 0 6
5603: PPUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 3
5611: ARRAY
5612: PPUSH
5613: CALL_OW 3
5617: ST_TO_ADDR
// end ;
5618: GO 5531
5620: POP
5621: POP
// end ;
5622: LD_VAR 0 3
5626: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5627: LD_INT 0
5629: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5630: LD_VAR 0 2
5634: PPUSH
5635: LD_VAR 0 3
5639: PPUSH
5640: CALL_OW 351
5644: PUSH
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_VAR 0 3
5654: PPUSH
5655: CALL_OW 554
5659: AND
5660: PUSH
5661: LD_VAR 0 2
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: CALL_OW 488
5675: AND
5676: PUSH
5677: LD_VAR 0 2
5681: PPUSH
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 428
5691: PUSH
5692: LD_INT 1
5694: NEG
5695: EQUAL
5696: AND
5697: IFFALSE 5718
// AddComMoveXY ( bulldozer , x , y ) ;
5699: LD_VAR 0 1
5703: PPUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 171
// end ;
5718: LD_VAR 0 4
5722: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
5731: PPUSH
// dist := 99999 ;
5732: LD_ADDR_VAR 0 6
5736: PUSH
5737: LD_INT 99999
5739: ST_TO_ADDR
// for i = 1 to list do
5740: LD_ADDR_VAR 0 5
5744: PUSH
5745: DOUBLE
5746: LD_INT 1
5748: DEC
5749: ST_TO_ADDR
5750: LD_VAR 0 3
5754: PUSH
5755: FOR_TO
5756: IFFALSE 5894
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5758: LD_ADDR_VAR 0 7
5762: PUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PUSH
5778: LD_VAR 0 5
5782: ARRAY
5783: PUSH
5784: LD_INT 1
5786: ARRAY
5787: PPUSH
5788: LD_VAR 0 3
5792: PUSH
5793: LD_VAR 0 5
5797: ARRAY
5798: PUSH
5799: LD_INT 2
5801: ARRAY
5802: PPUSH
5803: CALL_OW 298
5807: ST_TO_ADDR
// if d = 0 then
5808: LD_VAR 0 7
5812: PUSH
5813: LD_INT 0
5815: EQUAL
5816: IFFALSE 5820
// continue ;
5818: GO 5755
// if d < dist then
5820: LD_VAR 0 7
5824: PUSH
5825: LD_VAR 0 6
5829: LESS
5830: IFFALSE 5892
// begin _x := list [ i ] [ 1 ] ;
5832: LD_ADDR_VAR 0 8
5836: PUSH
5837: LD_VAR 0 3
5841: PUSH
5842: LD_VAR 0 5
5846: ARRAY
5847: PUSH
5848: LD_INT 1
5850: ARRAY
5851: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5852: LD_ADDR_VAR 0 9
5856: PUSH
5857: LD_VAR 0 3
5861: PUSH
5862: LD_VAR 0 5
5866: ARRAY
5867: PUSH
5868: LD_INT 2
5870: ARRAY
5871: ST_TO_ADDR
// _i := i ;
5872: LD_ADDR_VAR 0 10
5876: PUSH
5877: LD_VAR 0 5
5881: ST_TO_ADDR
// dist := d ;
5882: LD_ADDR_VAR 0 6
5886: PUSH
5887: LD_VAR 0 7
5891: ST_TO_ADDR
// end ; end ;
5892: GO 5755
5894: POP
5895: POP
// result := [ _x , _y , _i , dist ] ;
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: LD_VAR 0 8
5905: PUSH
5906: LD_VAR 0 9
5910: PUSH
5911: LD_VAR 0 10
5915: PUSH
5916: LD_VAR 0 6
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: ST_TO_ADDR
// end ;
5927: LD_VAR 0 4
5931: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5932: LD_INT 0
5934: PPUSH
5935: PPUSH
5936: PPUSH
5937: PPUSH
// for i = 1 to 72 do
5938: LD_ADDR_VAR 0 5
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 72
5950: PUSH
5951: FOR_TO
5952: IFFALSE 6010
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5954: LD_VAR 0 5
5958: PPUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: CALL_OW 321
5968: PUSH
5969: LD_INT 1
5971: EQUAL
5972: PUSH
5973: LD_VAR 0 5
5977: PPUSH
5978: LD_VAR 0 3
5982: PPUSH
5983: CALL_OW 482
5987: PUSH
5988: LD_INT 1
5990: EQUAL
5991: AND
5992: IFFALSE 6008
// AddComResearch ( lab , i ) ;
5994: LD_VAR 0 2
5998: PPUSH
5999: LD_VAR 0 5
6003: PPUSH
6004: CALL_OW 184
6008: GO 5951
6010: POP
6011: POP
// end ;
6012: LD_VAR 0 4
6016: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
6023: PPUSH
6024: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: CALL_OW 313
6039: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6040: LD_ADDR_VAR 0 8
6044: PUSH
6045: LD_VAR 0 3
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_VAR 0 1
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 24
6074: PUSH
6075: LD_INT 750
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 54
6087: PUSH
6088: EMPTY
6089: LIST
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 70
6105: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6106: LD_ADDR_VAR 0 5
6110: PUSH
6111: LD_VAR 0 3
6115: PPUSH
6116: LD_INT 22
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: LD_INT 1000
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: PUSH
6160: EMPTY
6161: LIST
6162: PPUSH
6163: CALL_OW 70
6167: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6168: LD_VAR 0 5
6172: NOT
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 25
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 24
6198: PUSH
6199: LD_INT 250
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 69
6215: NOT
6216: AND
6217: IFFALSE 6221
// exit ;
6219: GO 6333
// if buildings_list > 0 and engineerOkInside then
6221: LD_VAR 0 5
6225: PUSH
6226: LD_INT 0
6228: GREATER
6229: PUSH
6230: LD_VAR 0 7
6234: AND
6235: IFFALSE 6261
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6237: LD_VAR 0 7
6241: PPUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: PPUSH
6257: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6261: LD_VAR 0 5
6265: PUSH
6266: LD_INT 0
6268: GREATER
6269: PUSH
6270: LD_VAR 0 8
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: PUSH
6313: LD_INT 0
6315: GREATER
6316: AND
6317: IFFALSE 6333
// ComEnterUnit ( engineerOkOutside , building ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 2
6328: PPUSH
6329: CALL_OW 120
// end ;
6333: LD_VAR 0 4
6337: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: LD_INT 22
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 23
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 24
6388: PUSH
6389: LD_INT 251
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 69
6406: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6407: LD_ADDR_VAR 0 7
6411: PUSH
6412: LD_VAR 0 3
6416: PPUSH
6417: LD_INT 22
6419: PUSH
6420: LD_VAR 0 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 23
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 25
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 50
6451: PUSH
6452: EMPTY
6453: LIST
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PPUSH
6461: CALL_OW 70
6465: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6466: LD_ADDR_VAR 0 10
6470: PUSH
6471: LD_VAR 0 3
6475: PPUSH
6476: LD_INT 22
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 24
6520: PUSH
6521: LD_INT 750
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 70
6542: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6543: LD_ADDR_VAR 0 11
6547: PUSH
6548: LD_VAR 0 2
6552: PPUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 21
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 24
6597: PUSH
6598: LD_INT 1000
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 70
6619: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6620: LD_VAR 0 10
6624: NOT
6625: PUSH
6626: LD_VAR 0 11
6630: NOT
6631: AND
6632: PUSH
6633: LD_VAR 0 6
6637: NOT
6638: AND
6639: IFFALSE 6643
// exit ;
6641: GO 6877
// if damageUnits > 0 and sci_list > 0 then
6643: LD_VAR 0 10
6647: PUSH
6648: LD_INT 0
6650: GREATER
6651: PUSH
6652: LD_VAR 0 6
6656: PUSH
6657: LD_INT 0
6659: GREATER
6660: AND
6661: IFFALSE 6677
// ComMoveToArea ( damageUnits , healArea ) ;
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 2
6672: PPUSH
6673: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6677: LD_VAR 0 11
6681: PUSH
6682: LD_INT 0
6684: GREATER
6685: PUSH
6686: LD_VAR 0 6
6690: PUSH
6691: LD_INT 0
6693: GREATER
6694: AND
6695: IFFALSE 6706
// ComExitBuilding ( sci_list ) ;
6697: LD_VAR 0 6
6701: PPUSH
6702: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6706: LD_VAR 0 11
6710: PUSH
6711: LD_INT 0
6713: GREATER
6714: PUSH
6715: LD_VAR 0 7
6719: PUSH
6720: LD_INT 0
6722: GREATER
6723: AND
6724: IFFALSE 6744
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6726: LD_VAR 0 7
6730: PPUSH
6731: LD_VAR 0 11
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PPUSH
6740: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6744: LD_VAR 0 10
6748: PUSH
6749: LD_INT 0
6751: EQUAL
6752: PUSH
6753: LD_VAR 0 11
6757: PUSH
6758: LD_INT 0
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 7
6767: PUSH
6768: LD_INT 0
6770: GREATER
6771: AND
6772: IFFALSE 6877
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6774: LD_ADDR_VAR 0 12
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_VAR 0 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 30
6803: PUSH
6804: LD_INT 8
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6821: LD_ADDR_VAR 0 13
6825: PUSH
6826: LD_INT 1
6828: PPUSH
6829: LD_VAR 0 12
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6839: LD_VAR 0 7
6843: PPUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 60
6849: PUSH
6850: EMPTY
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 72
6861: PPUSH
6862: LD_VAR 0 12
6866: PUSH
6867: LD_VAR 0 13
6871: ARRAY
6872: PPUSH
6873: CALL_OW 120
// end ; end ;
6877: LD_VAR 0 5
6881: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6886: LD_INT 22
6888: PUSH
6889: LD_VAR 0 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 2
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: PUSH
6917: LD_VAR 0 3
6921: LESSEQUAL
6922: IFFALSE 6989
// for i = 1 to vehCount do
6924: LD_ADDR_VAR 0 9
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 3
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6987
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6942: LD_VAR 0 2
6946: PPUSH
6947: LD_VAR 0 7
6951: PPUSH
6952: LD_VAR 0 5
6956: PPUSH
6957: LD_VAR 0 6
6961: PPUSH
6962: LD_VAR 0 4
6966: PUSH
6967: LD_INT 1
6969: PPUSH
6970: LD_VAR 0 4
6974: PPUSH
6975: CALL_OW 12
6979: ARRAY
6980: PPUSH
6981: CALL_OW 185
6985: GO 6939
6987: POP
6988: POP
// end ;
6989: LD_VAR 0 8
6993: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6994: LD_INT 0
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
7002: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7003: LD_ADDR_VAR 0 8
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_VAR 0 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 34
7035: PUSH
7036: LD_INT 51
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 34
7045: PUSH
7046: LD_INT 53
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 34
7055: PUSH
7056: LD_INT 52
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 24
7071: PUSH
7072: LD_INT 650
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7090: LD_INT 22
7092: PUSH
7093: LD_VAR 0 1
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 21
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: LD_INT 1000
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: PPUSH
7127: CALL_OW 69
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_OWVAR 67
7150: ARRAY
7151: GREATEREQUAL
7152: IFFALSE 7649
// repeat wait ( 0 0$1 ) ;
7154: LD_INT 35
7156: PPUSH
7157: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7161: LD_ADDR_VAR 0 8
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: LD_INT 34
7193: PUSH
7194: LD_INT 51
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 34
7203: PUSH
7204: LD_INT 53
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 34
7213: PUSH
7214: LD_INT 52
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 650
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 69
7247: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7248: LD_INT 22
7250: PUSH
7251: LD_VAR 0 1
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 95
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PPUSH
7276: CALL_OW 69
7280: NOT
7281: PUSH
7282: LD_VAR 0 11
7286: PUSH
7287: LD_INT 0
7289: EQUAL
7290: AND
7291: IFFALSE 7346
// for i := 1 to wayX do
7293: LD_ADDR_VAR 0 6
7297: PUSH
7298: DOUBLE
7299: LD_INT 1
7301: DEC
7302: ST_TO_ADDR
7303: LD_VAR 0 3
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7344
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7311: LD_VAR 0 8
7315: PPUSH
7316: LD_VAR 0 3
7320: PUSH
7321: LD_VAR 0 6
7325: ARRAY
7326: PPUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_VAR 0 6
7336: ARRAY
7337: PPUSH
7338: CALL_OW 174
7342: GO 7308
7344: POP
7345: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7346: LD_INT 22
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 95
7360: PUSH
7361: LD_VAR 0 2
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: IFFALSE 7602
// begin seeEnemy = 1 ;
7380: LD_ADDR_VAR 0 11
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for j in vehiclesOK do
7388: LD_ADDR_VAR 0 7
7392: PUSH
7393: LD_VAR 0 8
7397: PUSH
7398: FOR_IN
7399: IFFALSE 7600
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7401: LD_ADDR_VAR 0 9
7405: PUSH
7406: LD_INT 81
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 101
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: PPUSH
7437: LD_VAR 0 7
7441: PPUSH
7442: CALL_OW 74
7446: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7447: LD_ADDR_VAR 0 10
7451: PUSH
7452: LD_INT 81
7454: PUSH
7455: LD_VAR 0 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 101
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: LD_INT 59
7479: PUSH
7480: EMPTY
7481: LIST
7482: PUSH
7483: LD_INT 21
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: PPUSH
7517: CALL_OW 69
7521: PPUSH
7522: LD_VAR 0 7
7526: PPUSH
7527: CALL_OW 74
7531: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7532: LD_VAR 0 7
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 296
7546: PUSH
7547: LD_INT 8
7549: PLUS
7550: PUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: LD_VAR 0 10
7560: PPUSH
7561: CALL_OW 296
7565: LESS
7566: IFFALSE 7584
// ComAttackUnit ( j , target1 ) else
7568: LD_VAR 0 7
7572: PPUSH
7573: LD_VAR 0 9
7577: PPUSH
7578: CALL_OW 115
7582: GO 7598
// ComAttackUnit ( j , target2 ) ;
7584: LD_VAR 0 7
7588: PPUSH
7589: LD_VAR 0 10
7593: PPUSH
7594: CALL_OW 115
// end ;
7598: GO 7398
7600: POP
7601: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7602: LD_INT 22
7604: PUSH
7605: LD_VAR 0 1
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 21
7616: PUSH
7617: LD_INT 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 24
7626: PUSH
7627: LD_INT 1000
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: PUSH
7644: LD_INT 0
7646: EQUAL
7647: IFFALSE 7154
// seeEnemy = 0 ;
7649: LD_ADDR_VAR 0 11
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// end ;
7657: LD_VAR 0 5
7661: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_VAR 0 1
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: LD_INT 34
7700: PUSH
7701: LD_INT 51
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 34
7710: PUSH
7711: LD_INT 53
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 34
7720: PUSH
7721: LD_INT 52
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 3
7736: PUSH
7737: LD_INT 24
7739: PUSH
7740: LD_INT 650
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: PPUSH
7757: CALL_OW 69
7761: ST_TO_ADDR
// if damageVehicles > 0 then
7762: LD_VAR 0 8
7766: PUSH
7767: LD_INT 0
7769: GREATER
7770: IFFALSE 7791
// ComMoveXY ( damageVehicles , repX , repY ) ;
7772: LD_VAR 0 8
7776: PPUSH
7777: LD_VAR 0 3
7781: PPUSH
7782: LD_VAR 0 4
7786: PPUSH
7787: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7791: LD_VAR 0 8
7795: PPUSH
7796: LD_INT 95
7798: PUSH
7799: LD_VAR 0 2
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_INT 58
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: PUSH
7830: LD_INT 0
7832: GREATER
7833: IFFALSE 7900
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7835: LD_ADDR_VAR 0 6
7839: PUSH
7840: LD_VAR 0 8
7844: PPUSH
7845: LD_INT 95
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 58
7862: PUSH
7863: EMPTY
7864: LIST
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 72
7878: PUSH
7879: FOR_IN
7880: IFFALSE 7898
// ComExitVehicle ( UnitsInside ( i ) ) ;
7882: LD_VAR 0 6
7886: PPUSH
7887: CALL_OW 313
7891: PPUSH
7892: CALL_OW 121
7896: GO 7879
7898: POP
7899: POP
// end ;
7900: LD_VAR 0 5
7904: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7905: LD_INT 0
7907: PPUSH
7908: PPUSH
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
// for i = 1 to medicCount do
7918: LD_ADDR_VAR 0 14
7922: PUSH
7923: DOUBLE
7924: LD_INT 1
7926: DEC
7927: ST_TO_ADDR
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_TO
7934: IFFALSE 8016
// begin uc_side = side ;
7936: LD_ADDR_OWVAR 20
7940: PUSH
7941: LD_VAR 0 1
7945: ST_TO_ADDR
// uc_nation = nation ;
7946: LD_ADDR_OWVAR 21
7950: PUSH
7951: LD_VAR 0 2
7955: ST_TO_ADDR
// hc_name =  ;
7956: LD_ADDR_OWVAR 26
7960: PUSH
7961: LD_STRING 
7963: ST_TO_ADDR
// hc_gallery =  ;
7964: LD_ADDR_OWVAR 33
7968: PUSH
7969: LD_STRING 
7971: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7972: LD_INT 0
7974: PPUSH
7975: LD_INT 4
7977: PPUSH
7978: LD_VAR 0 8
7982: PPUSH
7983: CALL_OW 380
// un = CreateHuman ;
7987: LD_ADDR_VAR 0 16
7991: PUSH
7992: CALL_OW 44
7996: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7997: LD_VAR 0 16
8001: PPUSH
8002: LD_VAR 0 9
8006: PPUSH
8007: LD_INT 0
8009: PPUSH
8010: CALL_OW 49
// end ;
8014: GO 7933
8016: POP
8017: POP
// for i = 1 to soldierCount do
8018: LD_ADDR_VAR 0 14
8022: PUSH
8023: DOUBLE
8024: LD_INT 1
8026: DEC
8027: ST_TO_ADDR
8028: LD_VAR 0 3
8032: PUSH
8033: FOR_TO
8034: IFFALSE 8116
// begin uc_side = side ;
8036: LD_ADDR_OWVAR 20
8040: PUSH
8041: LD_VAR 0 1
8045: ST_TO_ADDR
// uc_nation = nation ;
8046: LD_ADDR_OWVAR 21
8050: PUSH
8051: LD_VAR 0 2
8055: ST_TO_ADDR
// hc_name =  ;
8056: LD_ADDR_OWVAR 26
8060: PUSH
8061: LD_STRING 
8063: ST_TO_ADDR
// hc_gallery =  ;
8064: LD_ADDR_OWVAR 33
8068: PUSH
8069: LD_STRING 
8071: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8072: LD_INT 0
8074: PPUSH
8075: LD_INT 1
8077: PPUSH
8078: LD_VAR 0 8
8082: PPUSH
8083: CALL_OW 380
// un = CreateHuman ;
8087: LD_ADDR_VAR 0 16
8091: PUSH
8092: CALL_OW 44
8096: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8097: LD_VAR 0 16
8101: PPUSH
8102: LD_VAR 0 9
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 49
// end ;
8114: GO 8033
8116: POP
8117: POP
// for i = 1 to sniperCount do
8118: LD_ADDR_VAR 0 14
8122: PUSH
8123: DOUBLE
8124: LD_INT 1
8126: DEC
8127: ST_TO_ADDR
8128: LD_VAR 0 4
8132: PUSH
8133: FOR_TO
8134: IFFALSE 8216
// begin uc_side = side ;
8136: LD_ADDR_OWVAR 20
8140: PUSH
8141: LD_VAR 0 1
8145: ST_TO_ADDR
// uc_nation = nation ;
8146: LD_ADDR_OWVAR 21
8150: PUSH
8151: LD_VAR 0 2
8155: ST_TO_ADDR
// hc_name =  ;
8156: LD_ADDR_OWVAR 26
8160: PUSH
8161: LD_STRING 
8163: ST_TO_ADDR
// hc_gallery =  ;
8164: LD_ADDR_OWVAR 33
8168: PUSH
8169: LD_STRING 
8171: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8172: LD_INT 0
8174: PPUSH
8175: LD_INT 5
8177: PPUSH
8178: LD_VAR 0 8
8182: PPUSH
8183: CALL_OW 380
// un = CreateHuman ;
8187: LD_ADDR_VAR 0 16
8191: PUSH
8192: CALL_OW 44
8196: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8197: LD_VAR 0 16
8201: PPUSH
8202: LD_VAR 0 9
8206: PPUSH
8207: LD_INT 0
8209: PPUSH
8210: CALL_OW 49
// end ;
8214: GO 8133
8216: POP
8217: POP
// for i = 1 to bazookCount do
8218: LD_ADDR_VAR 0 14
8222: PUSH
8223: DOUBLE
8224: LD_INT 1
8226: DEC
8227: ST_TO_ADDR
8228: LD_VAR 0 5
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8316
// begin uc_side = side ;
8236: LD_ADDR_OWVAR 20
8240: PUSH
8241: LD_VAR 0 1
8245: ST_TO_ADDR
// uc_nation = nation ;
8246: LD_ADDR_OWVAR 21
8250: PUSH
8251: LD_VAR 0 2
8255: ST_TO_ADDR
// hc_name =  ;
8256: LD_ADDR_OWVAR 26
8260: PUSH
8261: LD_STRING 
8263: ST_TO_ADDR
// hc_gallery =  ;
8264: LD_ADDR_OWVAR 33
8268: PUSH
8269: LD_STRING 
8271: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8272: LD_INT 0
8274: PPUSH
8275: LD_INT 9
8277: PPUSH
8278: LD_VAR 0 8
8282: PPUSH
8283: CALL_OW 380
// un = CreateHuman ;
8287: LD_ADDR_VAR 0 16
8291: PUSH
8292: CALL_OW 44
8296: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8297: LD_VAR 0 16
8301: PPUSH
8302: LD_VAR 0 9
8306: PPUSH
8307: LD_INT 0
8309: PPUSH
8310: CALL_OW 49
// end ;
8314: GO 8233
8316: POP
8317: POP
// for i = 1 to mortalCount do
8318: LD_ADDR_VAR 0 14
8322: PUSH
8323: DOUBLE
8324: LD_INT 1
8326: DEC
8327: ST_TO_ADDR
8328: LD_VAR 0 6
8332: PUSH
8333: FOR_TO
8334: IFFALSE 8416
// begin uc_side = side ;
8336: LD_ADDR_OWVAR 20
8340: PUSH
8341: LD_VAR 0 1
8345: ST_TO_ADDR
// uc_nation = nation ;
8346: LD_ADDR_OWVAR 21
8350: PUSH
8351: LD_VAR 0 2
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// hc_gallery =  ;
8364: LD_ADDR_OWVAR 33
8368: PUSH
8369: LD_STRING 
8371: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 8
8377: PPUSH
8378: LD_VAR 0 8
8382: PPUSH
8383: CALL_OW 380
// un = CreateHuman ;
8387: LD_ADDR_VAR 0 16
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8397: LD_VAR 0 16
8401: PPUSH
8402: LD_VAR 0 9
8406: PPUSH
8407: LD_INT 0
8409: PPUSH
8410: CALL_OW 49
// end ;
8414: GO 8333
8416: POP
8417: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8418: LD_ADDR_VAR 0 19
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_VAR 0 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 25
8440: PUSH
8441: LD_INT 1
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 25
8450: PUSH
8451: LD_INT 5
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 25
8460: PUSH
8461: LD_INT 8
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 25
8470: PUSH
8471: LD_INT 9
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8494: LD_ADDR_VAR 0 18
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 4
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8530: LD_VAR 0 18
8534: PPUSH
8535: LD_VAR 0 10
8539: PPUSH
8540: CALL_OW 113
// if strategy = 1 then
8544: LD_VAR 0 12
8548: PUSH
8549: LD_INT 1
8551: EQUAL
8552: IFFALSE 9043
// begin for i in soldiersOK_list do
8554: LD_ADDR_VAR 0 14
8558: PUSH
8559: LD_VAR 0 19
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8629
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8567: LD_VAR 0 14
8571: PPUSH
8572: LD_INT 91
8574: PPUSH
8575: LD_INT 63
8577: PPUSH
8578: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8582: LD_VAR 0 14
8586: PPUSH
8587: LD_INT 101
8589: PPUSH
8590: LD_INT 53
8592: PPUSH
8593: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8597: LD_VAR 0 14
8601: PPUSH
8602: LD_INT 75
8604: PPUSH
8605: LD_INT 23
8607: PPUSH
8608: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8612: LD_VAR 0 14
8616: PPUSH
8617: LD_INT 78
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: CALL_OW 174
// end ;
8627: GO 8564
8629: POP
8630: POP
// wait ( 0 0$30 ) ;
8631: LD_INT 1050
8633: PPUSH
8634: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8638: LD_INT 35
8640: PPUSH
8641: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8645: LD_ADDR_VAR 0 17
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_VAR 0 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: LD_INT 3
8667: PUSH
8668: LD_INT 24
8670: PUSH
8671: LD_INT 550
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: LD_INT 250
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8706: LD_ADDR_VAR 0 19
8710: PUSH
8711: LD_INT 22
8713: PUSH
8714: LD_VAR 0 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: LD_INT 25
8728: PUSH
8729: LD_INT 1
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 5
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 25
8748: PUSH
8749: LD_INT 8
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 9
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 24
8775: PUSH
8776: LD_INT 1000
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: ST_TO_ADDR
// if medicCount > 0 then
8793: LD_VAR 0 7
8797: PUSH
8798: LD_INT 0
8800: GREATER
8801: IFFALSE 8845
// begin if damageUnit_list > 0 then
8803: LD_VAR 0 17
8807: PUSH
8808: LD_INT 0
8810: GREATER
8811: IFFALSE 8845
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8813: LD_VAR 0 17
8817: PPUSH
8818: LD_VAR 0 10
8822: PPUSH
8823: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8827: LD_VAR 0 7
8831: PPUSH
8832: LD_VAR 0 17
8836: PUSH
8837: LD_INT 1
8839: ARRAY
8840: PPUSH
8841: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8845: LD_ADDR_VAR 0 14
8849: PUSH
8850: LD_VAR 0 19
8854: PUSH
8855: FOR_IN
8856: IFFALSE 9032
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8858: LD_ADDR_VAR 0 22
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_VAR 0 11
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 69
8879: PPUSH
8880: LD_VAR 0 14
8884: PPUSH
8885: CALL_OW 74
8889: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8890: LD_ADDR_VAR 0 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_VAR 0 11
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 2
8909: PUSH
8910: LD_INT 59
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: PPUSH
8954: LD_VAR 0 14
8958: PPUSH
8959: CALL_OW 74
8963: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8964: LD_VAR 0 14
8968: PPUSH
8969: LD_VAR 0 22
8973: PPUSH
8974: CALL_OW 296
8978: PUSH
8979: LD_INT 8
8981: PLUS
8982: PUSH
8983: LD_VAR 0 14
8987: PPUSH
8988: LD_VAR 0 23
8992: PPUSH
8993: CALL_OW 296
8997: LESS
8998: IFFALSE 9016
// begin ComAttackUnit ( i , target1 ) ;
9000: LD_VAR 0 14
9004: PPUSH
9005: LD_VAR 0 22
9009: PPUSH
9010: CALL_OW 115
// end else
9014: GO 9030
// begin ComAttackUnit ( i , target2 ) ;
9016: LD_VAR 0 14
9020: PPUSH
9021: LD_VAR 0 23
9025: PPUSH
9026: CALL_OW 115
// end ; end ;
9030: GO 8855
9032: POP
9033: POP
// until soldiersOK_list = [ ] ;
9034: LD_VAR 0 19
9038: PUSH
9039: EMPTY
9040: EQUAL
9041: IFFALSE 8638
// end ; if strategy = 2 then
9043: LD_VAR 0 12
9047: PUSH
9048: LD_INT 2
9050: EQUAL
9051: IFFALSE 9505
// begin for i in soldiersOK_list do
9053: LD_ADDR_VAR 0 14
9057: PUSH
9058: LD_VAR 0 19
9062: PUSH
9063: FOR_IN
9064: IFFALSE 9098
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9066: LD_VAR 0 14
9070: PPUSH
9071: LD_INT 91
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9081: LD_VAR 0 14
9085: PPUSH
9086: LD_INT 75
9088: PPUSH
9089: LD_INT 33
9091: PPUSH
9092: CALL_OW 174
// end ;
9096: GO 9063
9098: POP
9099: POP
// repeat wait ( 0 0$3 ) ;
9100: LD_INT 105
9102: PPUSH
9103: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9107: LD_ADDR_VAR 0 17
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_VAR 0 1
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 1
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: LD_INT 24
9132: PUSH
9133: LD_INT 550
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 24
9146: PUSH
9147: LD_INT 250
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9168: LD_ADDR_VAR 0 19
9172: PUSH
9173: LD_INT 22
9175: PUSH
9176: LD_VAR 0 1
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 2
9187: PUSH
9188: LD_INT 25
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 25
9200: PUSH
9201: LD_INT 5
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 25
9210: PUSH
9211: LD_INT 8
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 25
9220: PUSH
9221: LD_INT 9
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 24
9237: PUSH
9238: LD_INT 1000
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 69
9254: ST_TO_ADDR
// if medicCount > 0 then
9255: LD_VAR 0 7
9259: PUSH
9260: LD_INT 0
9262: GREATER
9263: IFFALSE 9307
// begin if damageUnit_list > 0 then
9265: LD_VAR 0 17
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9307
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9275: LD_VAR 0 17
9279: PPUSH
9280: LD_VAR 0 10
9284: PPUSH
9285: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_VAR 0 17
9298: PUSH
9299: LD_INT 1
9301: ARRAY
9302: PPUSH
9303: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9307: LD_ADDR_VAR 0 14
9311: PUSH
9312: LD_VAR 0 19
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9494
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9320: LD_ADDR_VAR 0 22
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_VAR 0 11
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 69
9341: PPUSH
9342: LD_VAR 0 14
9346: PPUSH
9347: CALL_OW 74
9351: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9352: LD_ADDR_VAR 0 23
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 11
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 2
9371: PUSH
9372: LD_INT 59
9374: PUSH
9375: EMPTY
9376: LIST
9377: PUSH
9378: LD_INT 21
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 21
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: PPUSH
9411: CALL_OW 69
9415: PPUSH
9416: LD_VAR 0 14
9420: PPUSH
9421: CALL_OW 74
9425: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9426: LD_VAR 0 14
9430: PPUSH
9431: LD_VAR 0 22
9435: PPUSH
9436: CALL_OW 296
9440: PUSH
9441: LD_INT 8
9443: PLUS
9444: PUSH
9445: LD_VAR 0 14
9449: PPUSH
9450: LD_VAR 0 23
9454: PPUSH
9455: CALL_OW 296
9459: LESS
9460: IFFALSE 9478
// begin ComAttackUnit ( i , target1 ) ;
9462: LD_VAR 0 14
9466: PPUSH
9467: LD_VAR 0 22
9471: PPUSH
9472: CALL_OW 115
// end else
9476: GO 9492
// begin ComAttackUnit ( i , target2 ) ;
9478: LD_VAR 0 14
9482: PPUSH
9483: LD_VAR 0 23
9487: PPUSH
9488: CALL_OW 115
// end ; end ;
9492: GO 9317
9494: POP
9495: POP
// until soldiersOK_list = [ ] ;
9496: LD_VAR 0 19
9500: PUSH
9501: EMPTY
9502: EQUAL
9503: IFFALSE 9100
// end ; if not soldiersOK_list and medic_list then
9505: LD_VAR 0 19
9509: NOT
9510: PUSH
9511: LD_VAR 0 18
9515: AND
9516: IFFALSE 9656
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9518: LD_ADDR_VAR 0 18
9522: PUSH
9523: LD_INT 22
9525: PUSH
9526: LD_VAR 0 1
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 25
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 50
9547: PUSH
9548: EMPTY
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9561: LD_INT 35
9563: PPUSH
9564: CALL_OW 67
// for i in medic_list do
9568: LD_ADDR_VAR 0 14
9572: PUSH
9573: LD_VAR 0 18
9577: PUSH
9578: FOR_IN
9579: IFFALSE 9647
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9581: LD_VAR 0 14
9585: PPUSH
9586: CALL_OW 314
9590: NOT
9591: PUSH
9592: LD_VAR 0 14
9596: PPUSH
9597: LD_INT 4
9599: PPUSH
9600: CALL_OW 308
9604: NOT
9605: AND
9606: IFFALSE 9622
// ComMoveToArea ( i , RussianAttack ) else
9608: LD_VAR 0 14
9612: PPUSH
9613: LD_INT 4
9615: PPUSH
9616: CALL_OW 113
9620: GO 9645
// if IsInArea ( i , RussianAttack ) then
9622: LD_VAR 0 14
9626: PPUSH
9627: LD_INT 4
9629: PPUSH
9630: CALL_OW 308
9634: IFFALSE 9645
// RemoveUnit ( i ) ;
9636: LD_VAR 0 14
9640: PPUSH
9641: CALL_OW 64
9645: GO 9578
9647: POP
9648: POP
// until not medic_list ;
9649: LD_VAR 0 18
9653: NOT
9654: IFFALSE 9518
// end ; end ;
9656: LD_VAR 0 13
9660: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// amChassisTab = [ ] ;
9674: LD_ADDR_VAR 0 19
9678: PUSH
9679: EMPTY
9680: ST_TO_ADDR
// arChassisTab = [ ] ;
9681: LD_ADDR_VAR 0 18
9685: PUSH
9686: EMPTY
9687: ST_TO_ADDR
// ruChassisTab = [ ] ;
9688: LD_ADDR_VAR 0 17
9692: PUSH
9693: EMPTY
9694: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9695: LD_INT 35
9697: PPUSH
9698: CALL_OW 67
// if nation = 1 then
9702: LD_VAR 0 5
9706: PUSH
9707: LD_INT 1
9709: EQUAL
9710: IFFALSE 10201
// begin uc_side = side ;
9712: LD_ADDR_OWVAR 20
9716: PUSH
9717: LD_VAR 0 2
9721: ST_TO_ADDR
// uc_nation = nation ;
9722: LD_ADDR_OWVAR 21
9726: PUSH
9727: LD_VAR 0 5
9731: ST_TO_ADDR
// vc_engine = vehengine ;
9732: LD_ADDR_OWVAR 39
9736: PUSH
9737: LD_VAR 0 6
9741: ST_TO_ADDR
// vc_control = vehcontrol ;
9742: LD_ADDR_OWVAR 38
9746: PUSH
9747: LD_VAR 0 7
9751: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9752: LD_ADDR_OWVAR 40
9756: PUSH
9757: LD_VAR 0 10
9761: PUSH
9762: LD_INT 1
9764: PPUSH
9765: LD_VAR 0 10
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: ST_TO_ADDR
// for j = 1 to AMWeapon do
9776: LD_ADDR_VAR 0 14
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_VAR 0 10
9790: PUSH
9791: FOR_TO
9792: IFFALSE 10093
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9794: LD_VAR 0 10
9798: PUSH
9799: LD_VAR 0 14
9803: ARRAY
9804: PUSH
9805: LD_INT 2
9807: EQUAL
9808: PUSH
9809: LD_VAR 0 10
9813: PUSH
9814: LD_VAR 0 14
9818: ARRAY
9819: PUSH
9820: LD_INT 3
9822: EQUAL
9823: OR
9824: IFFALSE 9877
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9826: LD_ADDR_VAR 0 19
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: LD_INT 4
9842: PUSH
9843: LD_INT 5
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9853: LD_ADDR_OWVAR 37
9857: PUSH
9858: LD_VAR 0 19
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_VAR 0 19
9870: PPUSH
9871: CALL_OW 12
9875: ARRAY
9876: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9877: LD_VAR 0 10
9881: PUSH
9882: LD_VAR 0 14
9886: ARRAY
9887: PUSH
9888: LD_INT 4
9890: EQUAL
9891: PUSH
9892: LD_VAR 0 10
9896: PUSH
9897: LD_VAR 0 14
9901: ARRAY
9902: PUSH
9903: LD_INT 5
9905: EQUAL
9906: OR
9907: PUSH
9908: LD_VAR 0 10
9912: PUSH
9913: LD_VAR 0 14
9917: ARRAY
9918: PUSH
9919: LD_INT 9
9921: EQUAL
9922: OR
9923: PUSH
9924: LD_VAR 0 10
9928: PUSH
9929: LD_VAR 0 14
9933: ARRAY
9934: PUSH
9935: LD_INT 11
9937: EQUAL
9938: OR
9939: PUSH
9940: LD_VAR 0 10
9944: PUSH
9945: LD_VAR 0 14
9949: ARRAY
9950: PUSH
9951: LD_INT 7
9953: EQUAL
9954: OR
9955: IFFALSE 10004
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9957: LD_ADDR_VAR 0 19
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9980: LD_ADDR_OWVAR 37
9984: PUSH
9985: LD_VAR 0 19
9989: PUSH
9990: LD_INT 1
9992: PPUSH
9993: LD_VAR 0 19
9997: PPUSH
9998: CALL_OW 12
10002: ARRAY
10003: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10004: LD_VAR 0 10
10008: PUSH
10009: LD_VAR 0 14
10013: ARRAY
10014: PUSH
10015: LD_INT 8
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 10
10023: PUSH
10024: LD_VAR 0 14
10028: ARRAY
10029: PUSH
10030: LD_INT 6
10032: EQUAL
10033: OR
10034: PUSH
10035: LD_VAR 0 10
10039: PUSH
10040: LD_VAR 0 14
10044: ARRAY
10045: PUSH
10046: LD_INT 10
10048: EQUAL
10049: OR
10050: IFFALSE 10091
// begin amChassisTab = [ 4 , 5 ] ;
10052: LD_ADDR_VAR 0 19
10056: PUSH
10057: LD_INT 4
10059: PUSH
10060: LD_INT 5
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10067: LD_ADDR_OWVAR 37
10071: PUSH
10072: LD_VAR 0 19
10076: PUSH
10077: LD_INT 1
10079: PPUSH
10080: LD_VAR 0 19
10084: PPUSH
10085: CALL_OW 12
10089: ARRAY
10090: ST_TO_ADDR
// end ; end ;
10091: GO 9791
10093: POP
10094: POP
// veh = CreateVehicle ;
10095: LD_ADDR_VAR 0 16
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10105: LD_VAR 0 16
10109: PPUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: CALL_OW 49
// if vehControl = 1 then
10122: LD_VAR 0 7
10126: PUSH
10127: LD_INT 1
10129: EQUAL
10130: IFFALSE 10187
// begin hc_gallery =  ;
10132: LD_ADDR_OWVAR 33
10136: PUSH
10137: LD_STRING 
10139: ST_TO_ADDR
// hc_name =  ;
10140: LD_ADDR_OWVAR 26
10144: PUSH
10145: LD_STRING 
10147: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10148: LD_INT 0
10150: PPUSH
10151: LD_INT 3
10153: PPUSH
10154: LD_VAR 0 4
10158: PPUSH
10159: CALL_OW 380
// un = CreateHuman ;
10163: LD_ADDR_VAR 0 15
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10173: LD_VAR 0 15
10177: PPUSH
10178: LD_VAR 0 16
10182: PPUSH
10183: CALL_OW 52
// end ; i = i + 1 ;
10187: LD_ADDR_VAR 0 13
10191: PUSH
10192: LD_VAR 0 13
10196: PUSH
10197: LD_INT 1
10199: PLUS
10200: ST_TO_ADDR
// end ; if nation = 2 then
10201: LD_VAR 0 5
10205: PUSH
10206: LD_INT 2
10208: EQUAL
10209: IFFALSE 10633
// begin uc_side = side ;
10211: LD_ADDR_OWVAR 20
10215: PUSH
10216: LD_VAR 0 2
10220: ST_TO_ADDR
// uc_nation = nation ;
10221: LD_ADDR_OWVAR 21
10225: PUSH
10226: LD_VAR 0 5
10230: ST_TO_ADDR
// vc_engine = vehengine ;
10231: LD_ADDR_OWVAR 39
10235: PUSH
10236: LD_VAR 0 6
10240: ST_TO_ADDR
// vc_control = vehcontrol ;
10241: LD_ADDR_OWVAR 38
10245: PUSH
10246: LD_VAR 0 7
10250: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10251: LD_ADDR_OWVAR 40
10255: PUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_VAR 0 9
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: ST_TO_ADDR
// for j = 1 to ARWeapons do
10275: LD_ADDR_VAR 0 14
10279: PUSH
10280: DOUBLE
10281: LD_INT 1
10283: DEC
10284: ST_TO_ADDR
10285: LD_VAR 0 9
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10525
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10293: LD_VAR 0 9
10297: PUSH
10298: LD_VAR 0 14
10302: ARRAY
10303: PUSH
10304: LD_INT 24
10306: EQUAL
10307: PUSH
10308: LD_VAR 0 9
10312: PUSH
10313: LD_VAR 0 14
10317: ARRAY
10318: PUSH
10319: LD_INT 22
10321: EQUAL
10322: OR
10323: PUSH
10324: LD_VAR 0 9
10328: PUSH
10329: LD_VAR 0 14
10333: ARRAY
10334: PUSH
10335: LD_INT 23
10337: EQUAL
10338: OR
10339: PUSH
10340: LD_VAR 0 9
10344: PUSH
10345: LD_VAR 0 14
10349: ARRAY
10350: PUSH
10351: LD_INT 30
10353: EQUAL
10354: OR
10355: IFFALSE 10404
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10357: LD_ADDR_VAR 0 18
10361: PUSH
10362: LD_INT 11
10364: PUSH
10365: LD_INT 12
10367: PUSH
10368: LD_INT 13
10370: PUSH
10371: LD_INT 14
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10380: LD_ADDR_OWVAR 37
10384: PUSH
10385: LD_VAR 0 18
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_VAR 0 18
10397: PPUSH
10398: CALL_OW 12
10402: ARRAY
10403: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10404: LD_VAR 0 9
10408: PUSH
10409: LD_VAR 0 14
10413: ARRAY
10414: PUSH
10415: LD_INT 29
10417: EQUAL
10418: PUSH
10419: LD_VAR 0 9
10423: PUSH
10424: LD_VAR 0 14
10428: ARRAY
10429: PUSH
10430: LD_INT 28
10432: EQUAL
10433: OR
10434: PUSH
10435: LD_VAR 0 9
10439: PUSH
10440: LD_VAR 0 14
10444: ARRAY
10445: PUSH
10446: LD_INT 27
10448: EQUAL
10449: OR
10450: PUSH
10451: LD_VAR 0 9
10455: PUSH
10456: LD_VAR 0 14
10460: ARRAY
10461: PUSH
10462: LD_INT 26
10464: EQUAL
10465: OR
10466: PUSH
10467: LD_VAR 0 9
10471: PUSH
10472: LD_VAR 0 14
10476: ARRAY
10477: PUSH
10478: LD_INT 25
10480: EQUAL
10481: OR
10482: IFFALSE 10523
// begin arChassisTab = [ 13 , 14 ] ;
10484: LD_ADDR_VAR 0 18
10488: PUSH
10489: LD_INT 13
10491: PUSH
10492: LD_INT 14
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10499: LD_ADDR_OWVAR 37
10503: PUSH
10504: LD_VAR 0 18
10508: PUSH
10509: LD_INT 1
10511: PPUSH
10512: LD_VAR 0 18
10516: PPUSH
10517: CALL_OW 12
10521: ARRAY
10522: ST_TO_ADDR
// end ; end ;
10523: GO 10290
10525: POP
10526: POP
// veh = CreateVehicle ;
10527: LD_ADDR_VAR 0 16
10531: PUSH
10532: CALL_OW 45
10536: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10537: LD_VAR 0 16
10541: PPUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_INT 0
10549: PPUSH
10550: CALL_OW 49
// if vehcontrol = 1 then
10554: LD_VAR 0 7
10558: PUSH
10559: LD_INT 1
10561: EQUAL
10562: IFFALSE 10619
// begin hc_gallery =  ;
10564: LD_ADDR_OWVAR 33
10568: PUSH
10569: LD_STRING 
10571: ST_TO_ADDR
// hc_name =  ;
10572: LD_ADDR_OWVAR 26
10576: PUSH
10577: LD_STRING 
10579: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10580: LD_INT 0
10582: PPUSH
10583: LD_INT 3
10585: PPUSH
10586: LD_VAR 0 4
10590: PPUSH
10591: CALL_OW 380
// un = CreateHuman ;
10595: LD_ADDR_VAR 0 15
10599: PUSH
10600: CALL_OW 44
10604: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10605: LD_VAR 0 15
10609: PPUSH
10610: LD_VAR 0 16
10614: PPUSH
10615: CALL_OW 52
// end ; i = i + 1 ;
10619: LD_ADDR_VAR 0 13
10623: PUSH
10624: LD_VAR 0 13
10628: PUSH
10629: LD_INT 1
10631: PLUS
10632: ST_TO_ADDR
// end ; if nation = 3 then
10633: LD_VAR 0 5
10637: PUSH
10638: LD_INT 3
10640: EQUAL
10641: IFFALSE 11033
// begin uc_side = side ;
10643: LD_ADDR_OWVAR 20
10647: PUSH
10648: LD_VAR 0 2
10652: ST_TO_ADDR
// uc_nation = nation ;
10653: LD_ADDR_OWVAR 21
10657: PUSH
10658: LD_VAR 0 5
10662: ST_TO_ADDR
// vc_engine = vehengine ;
10663: LD_ADDR_OWVAR 39
10667: PUSH
10668: LD_VAR 0 6
10672: ST_TO_ADDR
// vc_control = vehcontrol ;
10673: LD_ADDR_OWVAR 38
10677: PUSH
10678: LD_VAR 0 7
10682: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10683: LD_ADDR_OWVAR 40
10687: PUSH
10688: LD_VAR 0 8
10692: PUSH
10693: LD_INT 1
10695: PPUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: CALL_OW 12
10705: ARRAY
10706: ST_TO_ADDR
// for j = 1 to RuWeapons do
10707: LD_ADDR_VAR 0 14
10711: PUSH
10712: DOUBLE
10713: LD_INT 1
10715: DEC
10716: ST_TO_ADDR
10717: LD_VAR 0 8
10721: PUSH
10722: FOR_TO
10723: IFFALSE 10925
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10725: LD_VAR 0 8
10729: PUSH
10730: LD_VAR 0 14
10734: ARRAY
10735: PUSH
10736: LD_INT 42
10738: EQUAL
10739: PUSH
10740: LD_VAR 0 8
10744: PUSH
10745: LD_VAR 0 14
10749: ARRAY
10750: PUSH
10751: LD_INT 43
10753: EQUAL
10754: OR
10755: PUSH
10756: LD_VAR 0 8
10760: PUSH
10761: LD_VAR 0 14
10765: ARRAY
10766: PUSH
10767: LD_INT 44
10769: EQUAL
10770: OR
10771: PUSH
10772: LD_VAR 0 8
10776: PUSH
10777: LD_VAR 0 14
10781: ARRAY
10782: PUSH
10783: LD_INT 45
10785: EQUAL
10786: OR
10787: PUSH
10788: LD_VAR 0 8
10792: PUSH
10793: LD_VAR 0 14
10797: ARRAY
10798: PUSH
10799: LD_INT 49
10801: EQUAL
10802: OR
10803: IFFALSE 10852
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10805: LD_ADDR_VAR 0 17
10809: PUSH
10810: LD_INT 21
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 23
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10828: LD_ADDR_OWVAR 37
10832: PUSH
10833: LD_VAR 0 17
10837: PUSH
10838: LD_INT 1
10840: PPUSH
10841: LD_VAR 0 17
10845: PPUSH
10846: CALL_OW 12
10850: ARRAY
10851: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10852: LD_VAR 0 8
10856: PUSH
10857: LD_VAR 0 14
10861: ARRAY
10862: PUSH
10863: LD_INT 46
10865: EQUAL
10866: PUSH
10867: LD_VAR 0 8
10871: PUSH
10872: LD_VAR 0 14
10876: ARRAY
10877: PUSH
10878: LD_INT 47
10880: EQUAL
10881: OR
10882: IFFALSE 10923
// begin ruChassisTab = [ 23 , 24 ] ;
10884: LD_ADDR_VAR 0 17
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 24
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10899: LD_ADDR_OWVAR 37
10903: PUSH
10904: LD_VAR 0 17
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_VAR 0 17
10916: PPUSH
10917: CALL_OW 12
10921: ARRAY
10922: ST_TO_ADDR
// end ; end ;
10923: GO 10722
10925: POP
10926: POP
// veh = CreateVehicle ;
10927: LD_ADDR_VAR 0 16
10931: PUSH
10932: CALL_OW 45
10936: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10937: LD_VAR 0 16
10941: PPUSH
10942: LD_VAR 0 1
10946: PPUSH
10947: LD_INT 0
10949: PPUSH
10950: CALL_OW 49
// if vehcontrol = 1 then
10954: LD_VAR 0 7
10958: PUSH
10959: LD_INT 1
10961: EQUAL
10962: IFFALSE 11019
// begin hc_gallery =  ;
10964: LD_ADDR_OWVAR 33
10968: PUSH
10969: LD_STRING 
10971: ST_TO_ADDR
// hc_name =  ;
10972: LD_ADDR_OWVAR 26
10976: PUSH
10977: LD_STRING 
10979: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10980: LD_INT 0
10982: PPUSH
10983: LD_INT 3
10985: PPUSH
10986: LD_VAR 0 4
10990: PPUSH
10991: CALL_OW 380
// un = CreateHuman ;
10995: LD_ADDR_VAR 0 15
10999: PUSH
11000: CALL_OW 44
11004: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11005: LD_VAR 0 15
11009: PPUSH
11010: LD_VAR 0 16
11014: PPUSH
11015: CALL_OW 52
// end ; i = i + 1 ;
11019: LD_ADDR_VAR 0 13
11023: PUSH
11024: LD_VAR 0 13
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ST_TO_ADDR
// end ; until i = vehCount ;
11033: LD_VAR 0 13
11037: PUSH
11038: LD_VAR 0 3
11042: EQUAL
11043: IFFALSE 9695
// repeat wait ( 0 0$1 ) ;
11045: LD_INT 35
11047: PPUSH
11048: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11052: LD_INT 22
11054: PUSH
11055: LD_VAR 0 2
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 24
11076: PUSH
11077: LD_INT 250
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: LD_INT 58
11089: PUSH
11090: EMPTY
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 69
11107: PUSH
11108: LD_INT 0
11110: GREATER
11111: IFFALSE 11353
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11113: LD_ADDR_VAR 0 13
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_VAR 0 2
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 21
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 24
11142: PUSH
11143: LD_INT 250
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 3
11152: PUSH
11153: LD_INT 58
11155: PUSH
11156: EMPTY
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11351
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11177: LD_ADDR_VAR 0 21
11181: PUSH
11182: LD_INT 22
11184: PUSH
11185: LD_VAR 0 11
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: PPUSH
11199: LD_VAR 0 13
11203: PPUSH
11204: CALL_OW 74
11208: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11209: LD_ADDR_VAR 0 22
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 59
11231: PUSH
11232: EMPTY
11233: LIST
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 21
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: PPUSH
11273: LD_VAR 0 13
11277: PPUSH
11278: CALL_OW 74
11282: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11283: LD_VAR 0 13
11287: PPUSH
11288: LD_VAR 0 21
11292: PPUSH
11293: CALL_OW 296
11297: PUSH
11298: LD_INT 8
11300: PLUS
11301: PUSH
11302: LD_VAR 0 13
11306: PPUSH
11307: LD_VAR 0 22
11311: PPUSH
11312: CALL_OW 296
11316: LESS
11317: IFFALSE 11335
// begin ComAttackUnit ( i , target1 ) ;
11319: LD_VAR 0 13
11323: PPUSH
11324: LD_VAR 0 21
11328: PPUSH
11329: CALL_OW 115
// end else
11333: GO 11349
// begin ComAttackUnit ( i , target2 ) ;
11335: LD_VAR 0 13
11339: PPUSH
11340: LD_VAR 0 22
11344: PPUSH
11345: CALL_OW 115
// end ; end ;
11349: GO 11174
11351: POP
11352: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11353: LD_INT 22
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 24
11377: PUSH
11378: LD_INT 250
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: LD_INT 58
11390: PUSH
11391: EMPTY
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PPUSH
11404: CALL_OW 69
11408: PUSH
11409: LD_INT 0
11411: EQUAL
11412: IFFALSE 11045
// end ; end_of_file
11414: LD_VAR 0 12
11418: RET
// every 1 do var i , gammaSquad , startX , startY ;
11419: GO 11421
11421: DISABLE
11422: LD_INT 0
11424: PPUSH
11425: PPUSH
11426: PPUSH
11427: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: LD_EXP 8
11437: PUSH
11438: LD_EXP 9
11442: PUSH
11443: LD_EXP 10
11447: PUSH
11448: LD_EXP 11
11452: PUSH
11453: LD_EXP 12
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11465: LD_ADDR_VAR 0 3
11469: PUSH
11470: LD_INT 46
11472: PUSH
11473: LD_INT 45
11475: PUSH
11476: LD_INT 44
11478: PUSH
11479: LD_INT 43
11481: PUSH
11482: LD_INT 42
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_INT 14
11499: PUSH
11500: LD_INT 12
11502: PUSH
11503: LD_INT 10
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: LD_INT 6
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11519: LD_EXP 11
11523: PPUSH
11524: LD_INT 31
11526: PPUSH
11527: LD_INT 59
11529: PPUSH
11530: LD_INT 19
11532: PPUSH
11533: LD_INT 5
11535: PPUSH
11536: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11540: LD_INT 32
11542: PPUSH
11543: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11547: LD_INT 32
11549: PPUSH
11550: LD_INT 51
11552: PPUSH
11553: LD_INT 26
11555: PPUSH
11556: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11560: LD_INT 32
11562: PPUSH
11563: LD_INT 53
11565: PPUSH
11566: LD_INT 23
11568: PPUSH
11569: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11573: LD_INT 32
11575: PPUSH
11576: LD_INT 52
11578: PPUSH
11579: LD_INT 19
11581: PPUSH
11582: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11586: LD_INT 35
11588: PPUSH
11589: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11593: LD_INT 32
11595: PPUSH
11596: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11600: LD_INT 32
11602: PPUSH
11603: CALL_OW 250
11607: PUSH
11608: LD_INT 52
11610: EQUAL
11611: PUSH
11612: LD_INT 32
11614: PPUSH
11615: CALL_OW 251
11619: PUSH
11620: LD_INT 19
11622: EQUAL
11623: AND
11624: IFFALSE 11586
// ComExitVehicle ( JMM ) ;
11626: LD_EXP 1
11630: PPUSH
11631: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11635: LD_EXP 7
11639: PPUSH
11640: LD_EXP 1
11644: PPUSH
11645: CALL_OW 119
// wait ( 0 0$01 ) ;
11649: LD_INT 35
11651: PPUSH
11652: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11656: LD_EXP 1
11660: PPUSH
11661: LD_INT 46
11663: PPUSH
11664: LD_INT 10
11666: PPUSH
11667: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11671: LD_EXP 1
11675: PPUSH
11676: LD_EXP 7
11680: PPUSH
11681: CALL_OW 179
// wait ( 0 0$4 ) ;
11685: LD_INT 140
11687: PPUSH
11688: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11692: LD_EXP 1
11696: PPUSH
11697: LD_STRING D1-JMM-1
11699: PPUSH
11700: CALL_OW 88
// if not dialogue_skipped then
11704: LD_OWVAR 59
11708: NOT
11709: IFFALSE 12366
// begin for i := 1 to gammaSquad do
11711: LD_ADDR_VAR 0 1
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 2
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11788
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11729: LD_VAR 0 2
11733: PUSH
11734: LD_VAR 0 1
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 3
11744: PUSH
11745: LD_VAR 0 1
11749: ARRAY
11750: PPUSH
11751: LD_VAR 0 4
11755: PUSH
11756: LD_VAR 0 1
11760: ARRAY
11761: PPUSH
11762: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11766: LD_VAR 0 2
11770: PUSH
11771: LD_VAR 0 1
11775: ARRAY
11776: PPUSH
11777: LD_EXP 1
11781: PPUSH
11782: CALL_OW 179
// end ;
11786: GO 11726
11788: POP
11789: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11790: LD_EXP 4
11794: PPUSH
11795: LD_INT 41
11797: PPUSH
11798: LD_INT 4
11800: PPUSH
11801: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11805: LD_EXP 4
11809: PPUSH
11810: LD_EXP 1
11814: PPUSH
11815: CALL_OW 179
// if Lisa = false and Bobby then
11819: LD_EXP 4
11823: PUSH
11824: LD_INT 0
11826: EQUAL
11827: PUSH
11828: LD_EXP 2
11832: AND
11833: IFFALSE 11864
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11835: LD_EXP 2
11839: PPUSH
11840: LD_INT 41
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11850: LD_EXP 2
11854: PPUSH
11855: LD_EXP 1
11859: PPUSH
11860: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11864: LD_EXP 4
11868: PUSH
11869: LD_INT 0
11871: EQUAL
11872: PUSH
11873: LD_EXP 2
11877: PUSH
11878: LD_INT 0
11880: EQUAL
11881: AND
11882: PUSH
11883: LD_EXP 3
11887: AND
11888: IFFALSE 11919
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11890: LD_EXP 3
11894: PPUSH
11895: LD_INT 41
11897: PPUSH
11898: LD_INT 4
11900: PPUSH
11901: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11905: LD_EXP 3
11909: PPUSH
11910: LD_EXP 1
11914: PPUSH
11915: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11919: LD_EXP 4
11923: PUSH
11924: LD_INT 0
11926: EQUAL
11927: PUSH
11928: LD_EXP 2
11932: PUSH
11933: LD_INT 0
11935: EQUAL
11936: AND
11937: PUSH
11938: LD_EXP 3
11942: PUSH
11943: LD_INT 0
11945: EQUAL
11946: AND
11947: IFFALSE 11978
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11949: LD_EXP 6
11953: PPUSH
11954: LD_INT 41
11956: PPUSH
11957: LD_INT 4
11959: PPUSH
11960: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11964: LD_EXP 6
11968: PPUSH
11969: LD_EXP 1
11973: PPUSH
11974: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11978: LD_EXP 7
11982: PPUSH
11983: LD_STRING D1-Brown-1
11985: PPUSH
11986: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11990: LD_EXP 1
11994: PPUSH
11995: LD_STRING D1-JMM-2
11997: PPUSH
11998: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12002: LD_EXP 7
12006: PPUSH
12007: LD_STRING D1-Brown-2
12009: PPUSH
12010: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12014: LD_EXP 1
12018: PPUSH
12019: LD_EXP 9
12023: PPUSH
12024: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12028: LD_EXP 9
12032: PPUSH
12033: LD_STRING D1-FSol1-2
12035: PPUSH
12036: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12040: LD_EXP 1
12044: PPUSH
12045: LD_EXP 8
12049: PPUSH
12050: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12054: LD_EXP 8
12058: PPUSH
12059: LD_STRING D1-Sol2-2
12061: PPUSH
12062: CALL_OW 88
// if Lisa then
12066: LD_EXP 4
12070: IFFALSE 12110
// begin ComTurnUnit ( JMM , Lisa ) ;
12072: LD_EXP 1
12076: PPUSH
12077: LD_EXP 4
12081: PPUSH
12082: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12086: LD_EXP 4
12090: PPUSH
12091: LD_STRING D1-Lisa-2
12093: PPUSH
12094: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12098: LD_EXP 1
12102: PPUSH
12103: LD_STRING D1-JMM-3
12105: PPUSH
12106: CALL_OW 88
// end ; if Bobby then
12110: LD_EXP 2
12114: IFFALSE 12154
// begin ComTurnUnit ( JMM , Bobby ) ;
12116: LD_EXP 1
12120: PPUSH
12121: LD_EXP 2
12125: PPUSH
12126: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12130: LD_EXP 2
12134: PPUSH
12135: LD_STRING D1-Bobby-2
12137: PPUSH
12138: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12142: LD_EXP 1
12146: PPUSH
12147: LD_STRING D1-JMM-3
12149: PPUSH
12150: CALL_OW 88
// end ; if Cyrus then
12154: LD_EXP 3
12158: IFFALSE 12198
// begin ComTurnUnit ( JMM , Cyrus ) ;
12160: LD_EXP 1
12164: PPUSH
12165: LD_EXP 3
12169: PPUSH
12170: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12174: LD_EXP 3
12178: PPUSH
12179: LD_STRING D1-Cyrus-2
12181: PPUSH
12182: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12186: LD_EXP 1
12190: PPUSH
12191: LD_STRING D1-JMM-3
12193: PPUSH
12194: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12198: LD_EXP 1
12202: PPUSH
12203: LD_EXP 7
12207: PPUSH
12208: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12212: LD_EXP 1
12216: PPUSH
12217: LD_STRING D1-JMM-3a
12219: PPUSH
12220: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12224: LD_EXP 7
12228: PPUSH
12229: LD_INT 38
12231: PPUSH
12232: LD_INT 5
12234: PPUSH
12235: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12239: LD_EXP 7
12243: PPUSH
12244: LD_EXP 1
12248: PPUSH
12249: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12253: LD_EXP 1
12257: PPUSH
12258: LD_INT 40
12260: PPUSH
12261: LD_INT 7
12263: PPUSH
12264: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12268: LD_EXP 1
12272: PPUSH
12273: LD_EXP 7
12277: PPUSH
12278: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12282: LD_EXP 7
12286: PPUSH
12287: LD_STRING D1-Brown-3
12289: PPUSH
12290: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12294: LD_EXP 14
12298: PPUSH
12299: LD_STRING D1-Har-3
12301: PPUSH
12302: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12306: LD_EXP 1
12310: PPUSH
12311: LD_STRING D1-JMM-4
12313: PPUSH
12314: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12318: LD_EXP 14
12322: PPUSH
12323: LD_STRING D1-Har-4
12325: PPUSH
12326: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12330: LD_EXP 1
12334: PPUSH
12335: LD_STRING D1-JMM-5
12337: PPUSH
12338: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12342: LD_EXP 14
12346: PPUSH
12347: LD_STRING D1-Har-5
12349: PPUSH
12350: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12354: LD_EXP 1
12358: PPUSH
12359: LD_STRING D1-JMM-6
12361: PPUSH
12362: CALL_OW 88
// end ; InGameOff ;
12366: CALL_OW 9
// PrepareRussianConvoy ;
12370: CALL 3386 0 0
// ChangeMissionObjectives ( M1 ) ;
12374: LD_STRING M1
12376: PPUSH
12377: CALL_OW 337
// SaveForQuickRestart ;
12381: CALL_OW 22
// timerStatus = 1 ;
12385: LD_ADDR_EXP 29
12389: PUSH
12390: LD_INT 1
12392: ST_TO_ADDR
// startTimer = 1 ;
12393: LD_ADDR_EXP 30
12397: PUSH
12398: LD_INT 1
12400: ST_TO_ADDR
// bonusAvalaible = 1 ;
12401: LD_ADDR_EXP 44
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12409: LD_INT 105
12411: PPUSH
12412: CALL_OW 67
// DialogueOn ;
12416: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12420: LD_EXP 12
12424: PPUSH
12425: LD_STRING D9-Mech1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING D9-JMM-1
12439: PPUSH
12440: CALL_OW 88
// DialogueOff ;
12444: CALL_OW 7
// end ;
12448: PPOPN 4
12450: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12451: LD_INT 47
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 321
12461: PUSH
12462: LD_INT 2
12464: EQUAL
12465: PUSH
12466: LD_EXP 31
12470: NOT
12471: AND
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 21
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 57
12505: PUSH
12506: EMPTY
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: PUSH
12520: LD_INT 0
12522: GREATER
12523: AND
12524: IFFALSE 12762
12526: GO 12528
12528: DISABLE
// begin factoryDialog := true ;
12529: LD_ADDR_EXP 31
12533: PUSH
12534: LD_INT 1
12536: ST_TO_ADDR
// if IsOk ( Campell ) then
12537: LD_EXP 12
12541: PPUSH
12542: CALL_OW 302
12546: IFFALSE 12562
// begin Say ( Campell , D10-Mech1-1 ) ;
12548: LD_EXP 12
12552: PPUSH
12553: LD_STRING D10-Mech1-1
12555: PPUSH
12556: CALL_OW 88
// end else
12560: GO 12762
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12562: LD_INT 22
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 25
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 26
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PUSH
12613: LD_EXP 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: PUSH
12621: LD_INT 0
12623: GREATER
12624: DIFF
12625: IFFALSE 12699
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12627: LD_INT 22
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 25
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 26
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: PUSH
12678: LD_EXP 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: DIFF
12686: PPUSH
12687: LD_STRING D10-Mech1-1
12689: PPUSH
12690: LD_STRING D10-Mech1-1
12692: PPUSH
12693: CALL 4581 0 3
// end else
12697: GO 12762
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 26
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 1
12736: ARRAY
12737: PPUSH
12738: CALL_OW 69
12742: PUSH
12743: LD_EXP 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: DIFF
12751: PPUSH
12752: LD_STRING D10-Mech1-1
12754: PPUSH
12755: LD_STRING D10-Mech1-1
12757: PPUSH
12758: CALL 4581 0 3
// end ; end ; end ;
12762: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12763: LD_INT 22
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 30
12775: PUSH
12776: LD_INT 32
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: PUSH
12792: LD_INT 0
12794: GREATER
12795: PUSH
12796: LD_EXP 32
12800: PUSH
12801: LD_INT 0
12803: EQUAL
12804: AND
12805: IFFALSE 13045
12807: GO 12809
12809: DISABLE
// begin if IsOK ( Claptopn ) then
12810: LD_EXP 11
12814: PPUSH
12815: CALL_OW 302
12819: IFFALSE 12835
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12821: LD_EXP 11
12825: PPUSH
12826: LD_STRING D9b-Eng1-1
12828: PPUSH
12829: CALL_OW 88
// end else
12833: GO 13031
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12835: LD_INT 22
12837: PUSH
12838: LD_INT 1
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 1
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: LD_INT 3
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 26
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PUSH
12886: LD_EXP 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: PUSH
12894: LD_INT 0
12896: GREATER
12897: DIFF
12898: IFFALSE 12972
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12900: LD_INT 22
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 21
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 26
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: PUSH
12951: LD_EXP 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: DIFF
12959: PPUSH
12960: LD_STRING D9b-Eng1-1
12962: PPUSH
12963: LD_STRING D9b-Eng1-11
12965: PPUSH
12966: CALL 4581 0 3
// end else
12970: GO 13031
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12972: LD_INT 22
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 21
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: PUSH
13012: LD_EXP 1
13016: PUSH
13017: EMPTY
13018: LIST
13019: DIFF
13020: PPUSH
13021: LD_STRING D9b-Eng1-1
13023: PPUSH
13024: LD_STRING D9b-Eng1-1
13026: PPUSH
13027: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
13031: LD_EXP 33
13035: PUSH
13036: LD_INT 0
13038: EQUAL
13039: IFFALSE 13045
// EnergyDialog ;
13041: CALL 4984 0 0
// end ;
13045: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13046: LD_EXP 34
13050: PUSH
13051: LD_INT 1
13053: EQUAL
13054: PUSH
13055: LD_EXP 35
13059: PUSH
13060: LD_INT 1
13062: EQUAL
13063: AND
13064: IFFALSE 13076
13066: GO 13068
13068: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13069: LD_STRING M1a
13071: PPUSH
13072: CALL_OW 337
13076: END
// every 3 3$0 do
13077: GO 13079
13079: DISABLE
// begin PrepareFirstAttack ;
13080: CALL 4186 0 0
// end ;
13084: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13085: LD_INT 22
13087: PUSH
13088: LD_INT 5
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 21
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 3
13107: PUSH
13108: LD_INT 24
13110: PUSH
13111: LD_INT 250
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 69
13131: PUSH
13132: LD_INT 0
13134: GREATER
13135: PUSH
13136: LD_EXP 23
13140: PUSH
13141: LD_INT 1
13143: EQUAL
13144: AND
13145: IFFALSE 13446
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
// begin firstRussianAttack = 2 ;
13153: LD_ADDR_EXP 23
13157: PUSH
13158: LD_INT 2
13160: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13161: LD_INT 22
13163: PUSH
13164: LD_INT 5
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 21
13173: PUSH
13174: LD_INT 1
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PPUSH
13190: LD_INT 125
13192: PPUSH
13193: LD_INT 98
13195: PPUSH
13196: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13200: LD_INT 22
13202: PUSH
13203: LD_INT 1
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 21
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: PUSH
13229: LD_EXP 1
13233: PUSH
13234: LD_EXP 7
13238: PUSH
13239: LD_EXP 4
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: DIFF
13249: PPUSH
13250: LD_STRING DAtt1-Sol1-1
13252: PPUSH
13253: LD_STRING DAtt1-FSol1-1
13255: PPUSH
13256: CALL 4581 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13260: LD_EXP 1
13264: PPUSH
13265: LD_STRING DAtt1-JMM-1
13267: PPUSH
13268: CALL_OW 88
// if Lisa then
13272: LD_EXP 4
13276: IFFALSE 13292
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13278: LD_EXP 4
13282: PPUSH
13283: LD_STRING DAtt1a-Lisa-1
13285: PPUSH
13286: CALL_OW 88
// end else
13290: GO 13363
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13292: LD_INT 22
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 26
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PUSH
13332: LD_EXP 1
13336: PUSH
13337: LD_EXP 7
13341: PUSH
13342: LD_EXP 4
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: DIFF
13352: PPUSH
13353: LD_STRING DAtt1a-Sol1-1
13355: PPUSH
13356: LD_STRING DAtt1-FSol1-1
13358: PPUSH
13359: CALL 4581 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13363: LD_EXP 1
13367: PPUSH
13368: LD_STRING DAtt1a-JMM-1
13370: PPUSH
13371: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13375: LD_INT 22
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: PUSH
13415: LD_EXP 1
13419: PUSH
13420: LD_EXP 7
13424: PUSH
13425: LD_EXP 4
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: DIFF
13435: PPUSH
13436: LD_STRING DAtt1b-Sol1-1
13438: PPUSH
13439: LD_STRING DAtt1a-Sol1-1
13441: PPUSH
13442: CALL 4581 0 3
// end ;
13446: PPOPN 1
13448: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13449: LD_EXP 23
13453: PUSH
13454: LD_INT 2
13456: EQUAL
13457: IFFALSE 13519
13459: GO 13461
13461: DISABLE
13462: LD_INT 0
13464: PPUSH
// begin enable ;
13465: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: LD_INT 5
13473: PPUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 70
13502: PUSH
13503: FOR_IN
13504: IFFALSE 13517
// RemoveUnit ( i ) ;
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 64
13515: GO 13503
13517: POP
13518: POP
// end ;
13519: PPOPN 1
13521: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13522: LD_INT 22
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: PPUSH
13535: CALL_OW 69
13539: PUSH
13540: LD_INT 0
13542: EQUAL
13543: PUSH
13544: LD_EXP 23
13548: PUSH
13549: LD_INT 2
13551: EQUAL
13552: AND
13553: IFFALSE 13566
13555: GO 13557
13557: DISABLE
// firstRussianAttack = 3 ;
13558: LD_ADDR_EXP 23
13562: PUSH
13563: LD_INT 3
13565: ST_TO_ADDR
13566: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13567: LD_EXP 28
13571: PUSH
13572: LD_INT 0
13574: EQUAL
13575: IFFALSE 13656
13577: GO 13579
13579: DISABLE
// begin timerStatus = 4 ;
13580: LD_ADDR_EXP 29
13584: PUSH
13585: LD_INT 4
13587: ST_TO_ADDR
// DialogueOn ;
13588: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13592: LD_EXP 13
13596: PPUSH
13597: LD_STRING D2-Don-1
13599: PPUSH
13600: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13604: LD_EXP 1
13608: PPUSH
13609: LD_STRING D2-JMM-1
13611: PPUSH
13612: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13616: LD_EXP 13
13620: PPUSH
13621: LD_STRING D2-Don-2
13623: PPUSH
13624: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13628: LD_EXP 1
13632: PPUSH
13633: LD_STRING D2-JMM-2
13635: PPUSH
13636: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13640: LD_EXP 13
13644: PPUSH
13645: LD_STRING D2-Don-3
13647: PPUSH
13648: CALL_OW 94
// DialogueOff ;
13652: CALL_OW 7
// end ;
13656: END
// every 12 12$0 do var tmp ;
13657: GO 13659
13659: DISABLE
13660: LD_INT 0
13662: PPUSH
// begin PrepareDonaldsonArmy ;
13663: CALL 1177 0 0
// CenterNowOnUnits ( Donaldson ) ;
13667: LD_EXP 13
13671: PPUSH
13672: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13676: LD_INT 22
13678: PUSH
13679: LD_INT 6
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: NOT
13691: IFFALSE 13707
// begin wait ( 3 ) ;
13693: LD_INT 3
13695: PPUSH
13696: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13700: LD_STRING ACH_BASE
13702: PPUSH
13703: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 21
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 26
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 25
13744: PUSH
13745: LD_INT 1
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: PUSH
13763: LD_EXP 5
13767: PUSH
13768: EMPTY
13769: LIST
13770: DIFF
13771: ST_TO_ADDR
// DialogueOn ;
13772: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_STRING D3-Sol1-1
13783: PPUSH
13784: LD_STRING D3-Sol1-1
13786: PPUSH
13787: CALL 4581 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13791: LD_INT 22
13793: PUSH
13794: LD_INT 4
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 26
13813: PUSH
13814: LD_INT 1
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 25
13823: PUSH
13824: LD_INT 3
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: PPUSH
13842: LD_STRING D3-Sol2-1
13844: PPUSH
13845: LD_STRING D3-Sol2-1
13847: PPUSH
13848: CALL 4581 0 3
// if Frank then
13852: LD_EXP 5
13856: IFFALSE 13870
// Say ( Frank , D3-Frank-1 ) ;
13858: LD_EXP 5
13862: PPUSH
13863: LD_STRING D3-Frank-1
13865: PPUSH
13866: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13870: LD_EXP 13
13874: PPUSH
13875: LD_STRING D3-Don-1
13877: PPUSH
13878: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13882: LD_EXP 13
13886: PPUSH
13887: LD_STRING D3-Don-1a
13889: PPUSH
13890: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13894: LD_EXP 1
13898: PPUSH
13899: LD_STRING D3-JMM-1
13901: PPUSH
13902: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13906: LD_EXP 13
13910: PPUSH
13911: LD_STRING D3-Don-2
13913: PPUSH
13914: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13918: LD_INT 22
13920: PUSH
13921: LD_INT 6
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 21
13930: PUSH
13931: LD_INT 1
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 69
13946: PUSH
13947: LD_INT 0
13949: GREATER
13950: IFFALSE 14088
// begin Say ( JMM , D3-JMM-2 ) ;
13952: LD_EXP 1
13956: PPUSH
13957: LD_STRING D3-JMM-2
13959: PPUSH
13960: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13964: LD_EXP 13
13968: PPUSH
13969: LD_STRING D3-Don-3
13971: PPUSH
13972: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13976: LD_EXP 1
13980: PPUSH
13981: LD_STRING D3-JMM-3
13983: PPUSH
13984: CALL_OW 88
// if IsOK ( Frank ) then
13988: LD_EXP 5
13992: PPUSH
13993: CALL_OW 302
13997: IFFALSE 14011
// Say ( Frank , D3-Frank-3 ) ;
13999: LD_EXP 5
14003: PPUSH
14004: LD_STRING D3-Frank-3
14006: PPUSH
14007: CALL_OW 88
// DialogueOff ;
14011: CALL_OW 7
// if IsOK ( Frank ) then
14015: LD_EXP 5
14019: PPUSH
14020: CALL_OW 302
14024: IFFALSE 14086
// begin SetSide ( Frank , 0 ) ;
14026: LD_EXP 5
14030: PPUSH
14031: LD_INT 0
14033: PPUSH
14034: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14038: LD_EXP 5
14042: PPUSH
14043: LD_INT 12
14045: PPUSH
14046: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14050: LD_EXP 5
14054: PPUSH
14055: LD_STRING 04t_Frank
14057: PPUSH
14058: CALL_OW 38
// Wait ( 0 0$3 ) ;
14062: LD_INT 105
14064: PPUSH
14065: CALL_OW 67
// frankScoutBase = 1 ;
14069: LD_ADDR_EXP 25
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14077: LD_EXP 5
14081: PPUSH
14082: CALL_OW 64
// end ; end else
14086: GO 14175
// begin Say ( JMM , D3-JMM-4 ) ;
14088: LD_EXP 1
14092: PPUSH
14093: LD_STRING D3-JMM-4
14095: PPUSH
14096: CALL_OW 88
// DialogueOff ;
14100: CALL_OW 7
// if IsOK ( Frank ) then
14104: LD_EXP 5
14108: PPUSH
14109: CALL_OW 302
14113: IFFALSE 14175
// begin SetSide ( Frank , 0 ) ;
14115: LD_EXP 5
14119: PPUSH
14120: LD_INT 0
14122: PPUSH
14123: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14127: LD_EXP 5
14131: PPUSH
14132: LD_INT 12
14134: PPUSH
14135: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14139: LD_EXP 5
14143: PPUSH
14144: LD_STRING 04t_Frank
14146: PPUSH
14147: CALL_OW 38
// Wait ( 0 0$3 ) ;
14151: LD_INT 105
14153: PPUSH
14154: CALL_OW 67
// frankScoutBase = 1 ;
14158: LD_ADDR_EXP 25
14162: PUSH
14163: LD_INT 1
14165: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14166: LD_EXP 5
14170: PPUSH
14171: CALL_OW 64
// end ; end ; end ;
14175: PPOPN 1
14177: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14178: LD_EXP 13
14182: PPUSH
14183: CALL_OW 255
14187: PUSH
14188: LD_INT 4
14190: EQUAL
14191: PUSH
14192: LD_EXP 13
14196: PPUSH
14197: CALL_OW 302
14201: AND
14202: IFFALSE 14336
14204: GO 14206
14206: DISABLE
14207: LD_INT 0
14209: PPUSH
14210: PPUSH
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14211: LD_EXP 13
14215: PPUSH
14216: LD_STRING D3b-Don-1
14218: PPUSH
14219: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14223: LD_ADDR_EXP 41
14227: PUSH
14228: LD_INT 1
14230: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_INT 22
14238: PUSH
14239: LD_INT 4
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PPUSH
14246: CALL_OW 69
14250: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14251: LD_INT 35
14253: PPUSH
14254: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14258: LD_VAR 0 2
14262: NOT
14263: PUSH
14264: LD_INT 22
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 101
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PPUSH
14288: CALL_OW 69
14292: OR
14293: IFFALSE 14251
// if not tmp then
14295: LD_VAR 0 2
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14336
// for i in tmp do
14304: LD_ADDR_VAR 0 1
14308: PUSH
14309: LD_VAR 0 2
14313: PUSH
14314: FOR_IN
14315: IFFALSE 14334
// ComAgressiveMove ( i , 52 , 64 ) ;
14317: LD_VAR 0 1
14321: PPUSH
14322: LD_INT 52
14324: PPUSH
14325: LD_INT 64
14327: PPUSH
14328: CALL_OW 114
14332: GO 14314
14334: POP
14335: POP
// end ;
14336: PPOPN 2
14338: END
// every 0 0$1 trigger not saveDonaldson and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_dist , JMM , 9 ] ] ) diff Frank do var i ;
14339: LD_EXP 24
14343: NOT
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_INT 4
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 1
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 91
14367: PUSH
14368: LD_EXP 1
14372: PUSH
14373: LD_INT 9
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: PUSH
14391: LD_EXP 5
14395: DIFF
14396: AND
14397: IFFALSE 14452
14399: GO 14401
14401: DISABLE
14402: LD_INT 0
14404: PPUSH
// begin saveDonaldson := 1 ;
14405: LD_ADDR_EXP 24
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14413: LD_ADDR_VAR 0 1
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_INT 4
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 69
14432: PUSH
14433: FOR_IN
14434: IFFALSE 14450
// SetSide ( i , 1 ) ;
14436: LD_VAR 0 1
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 235
14448: GO 14433
14450: POP
14451: POP
// end ;
14452: PPOPN 1
14454: END
// every 0 0$1 trigger frankScoutBase do
14455: LD_EXP 25
14459: IFFALSE 14824
14461: GO 14463
14463: DISABLE
// begin wait ( 2 2$30 ) ;
14464: LD_INT 5250
14466: PPUSH
14467: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14471: LD_INT 35
14473: PPUSH
14474: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14478: LD_INT 81
14480: PUSH
14481: LD_INT 4
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 92
14490: PUSH
14491: LD_INT 84
14493: PUSH
14494: LD_INT 28
14496: PUSH
14497: LD_INT 22
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 69
14514: NOT
14515: IFFALSE 14471
// uc_side = 4 ;
14517: LD_ADDR_OWVAR 20
14521: PUSH
14522: LD_INT 4
14524: ST_TO_ADDR
// uc_nation = 1 ;
14525: LD_ADDR_OWVAR 21
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14533: LD_ADDR_EXP 5
14537: PUSH
14538: LD_STRING 04t_Frank
14540: PPUSH
14541: CALL_OW 34
14545: ST_TO_ADDR
// if not Frank then
14546: LD_EXP 5
14550: NOT
14551: IFFALSE 14555
// exit ;
14553: GO 14824
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14555: LD_EXP 5
14559: PPUSH
14560: LD_INT 13
14562: PPUSH
14563: LD_INT 0
14565: PPUSH
14566: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14570: LD_INT 35
14572: PPUSH
14573: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14577: LD_EXP 1
14581: PPUSH
14582: CALL_OW 310
14586: NOT
14587: PUSH
14588: LD_EXP 1
14592: PPUSH
14593: LD_INT 4
14595: PPUSH
14596: CALL_OW 296
14600: PUSH
14601: LD_INT 20
14603: LESS
14604: AND
14605: IFFALSE 14638
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14607: LD_EXP 5
14611: PPUSH
14612: LD_EXP 1
14616: PPUSH
14617: CALL_OW 250
14621: PPUSH
14622: LD_EXP 1
14626: PPUSH
14627: CALL_OW 251
14631: PPUSH
14632: CALL_OW 111
14636: GO 14653
// ComMoveXY ( Frank , 51 , 15 ) ;
14638: LD_EXP 5
14642: PPUSH
14643: LD_INT 51
14645: PPUSH
14646: LD_INT 15
14648: PPUSH
14649: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14653: LD_EXP 5
14657: PPUSH
14658: LD_EXP 1
14662: PPUSH
14663: CALL_OW 296
14667: PUSH
14668: LD_INT 10
14670: LESS
14671: IFFALSE 14570
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14673: LD_EXP 1
14677: PUSH
14678: LD_EXP 5
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 87
// DialogueOn ;
14691: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14695: LD_EXP 5
14699: PPUSH
14700: LD_STRING D3a-Frank-1
14702: PPUSH
14703: CALL_OW 88
// if Lisa then
14707: LD_EXP 4
14711: IFFALSE 14761
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14713: LD_EXP 4
14717: PPUSH
14718: LD_STRING D3a-Lisa-1
14720: PPUSH
14721: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14725: LD_EXP 5
14729: PPUSH
14730: LD_STRING D3a-Frank-2
14732: PPUSH
14733: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14737: LD_EXP 4
14741: PPUSH
14742: LD_STRING D3a-Lisa-2
14744: PPUSH
14745: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14749: LD_EXP 5
14753: PPUSH
14754: LD_STRING D3a-Frank-3
14756: PPUSH
14757: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14761: LD_EXP 1
14765: PPUSH
14766: LD_STRING D3a-JMM-3
14768: PPUSH
14769: CALL_OW 88
// DialogueOff ;
14773: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14777: LD_EXP 5
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: CALL_OW 235
// InGameOn ;
14789: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 7
14798: PPUSH
14799: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14803: LD_INT 93
14805: PPUSH
14806: LD_INT 91
14808: PPUSH
14809: CALL_OW 84
// wait ( 0 0$5 ) ;
14813: LD_INT 175
14815: PPUSH
14816: CALL_OW 67
// InGameOff ;
14820: CALL_OW 9
// end ;
14824: END
// every 12 12$0 trigger Difficulty > 1 do
14825: LD_OWVAR 67
14829: PUSH
14830: LD_INT 1
14832: GREATER
14833: IFFALSE 14857
14835: GO 14837
14837: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14838: LD_INT 24
14840: PPUSH
14841: LD_INT 24
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: LD_INT 53
14852: PPUSH
14853: CALL_OW 185
14857: END
// every 18 18$0 do
14858: GO 14860
14860: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14861: LD_EXP 14
14865: PPUSH
14866: LD_STRING D4-Har-1
14868: PPUSH
14869: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14873: LD_EXP 1
14877: PPUSH
14878: LD_STRING D4-JMM-1
14880: PPUSH
14881: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14885: LD_EXP 14
14889: PPUSH
14890: LD_STRING D4-Har-2
14892: PPUSH
14893: CALL_OW 94
// case query ( Q1 ) of 1 :
14897: LD_STRING Q1
14899: PPUSH
14900: CALL_OW 97
14904: PUSH
14905: LD_INT 1
14907: DOUBLE
14908: EQUAL
14909: IFTRUE 14913
14911: GO 14972
14913: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14914: LD_EXP 1
14918: PPUSH
14919: LD_STRING D5-JMM-1
14921: PPUSH
14922: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14926: LD_EXP 14
14930: PPUSH
14931: LD_STRING D5-Har-1
14933: PPUSH
14934: CALL_OW 94
// timeToSupport = 10 10$0 ;
14938: LD_ADDR_EXP 28
14942: PUSH
14943: LD_INT 21000
14945: ST_TO_ADDR
// timerStatus = 2 ;
14946: LD_ADDR_EXP 29
14950: PUSH
14951: LD_INT 2
14953: ST_TO_ADDR
// startTimer = 1 ;
14954: LD_ADDR_EXP 30
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// harrAnswer = 1 ;
14962: LD_ADDR_EXP 26
14966: PUSH
14967: LD_INT 1
14969: ST_TO_ADDR
// end ; 2 :
14970: GO 15107
14972: LD_INT 2
14974: DOUBLE
14975: EQUAL
14976: IFTRUE 14980
14978: GO 15039
14980: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14981: LD_EXP 1
14985: PPUSH
14986: LD_STRING D5-JMM-2
14988: PPUSH
14989: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14993: LD_EXP 14
14997: PPUSH
14998: LD_STRING D5-Har-2
15000: PPUSH
15001: CALL_OW 94
// timeToSupport = 5 5$0 ;
15005: LD_ADDR_EXP 28
15009: PUSH
15010: LD_INT 10500
15012: ST_TO_ADDR
// timerStatus = 2 ;
15013: LD_ADDR_EXP 29
15017: PUSH
15018: LD_INT 2
15020: ST_TO_ADDR
// startTimer = 1 ;
15021: LD_ADDR_EXP 30
15025: PUSH
15026: LD_INT 1
15028: ST_TO_ADDR
// harrAnswer = 2 ;
15029: LD_ADDR_EXP 26
15033: PUSH
15034: LD_INT 2
15036: ST_TO_ADDR
// end ; 3 :
15037: GO 15107
15039: LD_INT 3
15041: DOUBLE
15042: EQUAL
15043: IFTRUE 15047
15045: GO 15106
15047: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15048: LD_EXP 1
15052: PPUSH
15053: LD_STRING D5-JMM-3
15055: PPUSH
15056: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15060: LD_EXP 14
15064: PPUSH
15065: LD_STRING D5-Har-3
15067: PPUSH
15068: CALL_OW 94
// timeToSupport = 5 5$0 ;
15072: LD_ADDR_EXP 28
15076: PUSH
15077: LD_INT 10500
15079: ST_TO_ADDR
// timerStatus = 2 ;
15080: LD_ADDR_EXP 29
15084: PUSH
15085: LD_INT 2
15087: ST_TO_ADDR
// startTimer = 1 ;
15088: LD_ADDR_EXP 30
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// harrAnswer = 3 ;
15096: LD_ADDR_EXP 26
15100: PUSH
15101: LD_INT 3
15103: ST_TO_ADDR
// end ; end ;
15104: GO 15107
15106: POP
// end ;
15107: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15108: LD_EXP 29
15112: PUSH
15113: LD_INT 2
15115: EQUAL
15116: PUSH
15117: LD_EXP 28
15121: PUSH
15122: LD_INT 0
15124: EQUAL
15125: AND
15126: IFFALSE 15403
15128: GO 15130
15130: DISABLE
// begin timerStatus = 4 ;
15131: LD_ADDR_EXP 29
15135: PUSH
15136: LD_INT 4
15138: ST_TO_ADDR
// if harrAnswer = 1 then
15139: LD_EXP 26
15143: PUSH
15144: LD_INT 1
15146: EQUAL
15147: IFFALSE 15227
// begin PrepareHarrisonSupport ( 3 ) ;
15149: LD_INT 3
15151: PPUSH
15152: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15156: LD_INT 2100
15158: PPUSH
15159: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15163: LD_EXP 14
15167: PPUSH
15168: LD_STRING D7-Har-1
15170: PPUSH
15171: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15175: LD_STRING M2
15177: PPUSH
15178: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15182: LD_ADDR_EXP 27
15186: PUSH
15187: LD_INT 31500
15189: PUSH
15190: LD_INT 10500
15192: PUSH
15193: LD_INT 8400
15195: PUSH
15196: LD_INT 6300
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: LD_OWVAR 67
15208: ARRAY
15209: PLUS
15210: ST_TO_ADDR
// startTimer = 1 ;
15211: LD_ADDR_EXP 30
15215: PUSH
15216: LD_INT 1
15218: ST_TO_ADDR
// timerStatus = 3 ;
15219: LD_ADDR_EXP 29
15223: PUSH
15224: LD_INT 3
15226: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15227: LD_EXP 26
15231: PUSH
15232: LD_INT 2
15234: EQUAL
15235: IFFALSE 15315
// begin PrepareHarrisonSupport ( 4 ) ;
15237: LD_INT 4
15239: PPUSH
15240: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15244: LD_INT 2100
15246: PPUSH
15247: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15251: LD_EXP 14
15255: PPUSH
15256: LD_STRING D7-Har-1
15258: PPUSH
15259: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15263: LD_STRING M2
15265: PPUSH
15266: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15270: LD_ADDR_EXP 27
15274: PUSH
15275: LD_INT 33600
15277: PUSH
15278: LD_INT 10500
15280: PUSH
15281: LD_INT 8400
15283: PUSH
15284: LD_INT 6300
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: PUSH
15292: LD_OWVAR 67
15296: ARRAY
15297: PLUS
15298: ST_TO_ADDR
// startTimer = 1 ;
15299: LD_ADDR_EXP 30
15303: PUSH
15304: LD_INT 1
15306: ST_TO_ADDR
// timerStatus = 3 ;
15307: LD_ADDR_EXP 29
15311: PUSH
15312: LD_INT 3
15314: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15315: LD_EXP 26
15319: PUSH
15320: LD_INT 3
15322: EQUAL
15323: IFFALSE 15403
// begin PrepareHarrisonSupport ( 5 ) ;
15325: LD_INT 5
15327: PPUSH
15328: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15332: LD_INT 2100
15334: PPUSH
15335: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15339: LD_EXP 14
15343: PPUSH
15344: LD_STRING D7-Har-1
15346: PPUSH
15347: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15351: LD_STRING M2
15353: PPUSH
15354: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15358: LD_ADDR_EXP 27
15362: PUSH
15363: LD_INT 35700
15365: PUSH
15366: LD_INT 10500
15368: PUSH
15369: LD_INT 6300
15371: PUSH
15372: LD_INT 4200
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: LD_OWVAR 67
15384: ARRAY
15385: PLUS
15386: ST_TO_ADDR
// startTimer = 1 ;
15387: LD_ADDR_EXP 30
15391: PUSH
15392: LD_INT 1
15394: ST_TO_ADDR
// timerStatus = 3 ;
15395: LD_ADDR_EXP 29
15399: PUSH
15400: LD_INT 3
15402: ST_TO_ADDR
// end ; end ;
15403: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15404: LD_EXP 27
15408: PUSH
15409: LD_INT 8400
15411: LESSEQUAL
15412: PUSH
15413: LD_EXP 29
15417: PUSH
15418: LD_INT 3
15420: EQUAL
15421: AND
15422: IFFALSE 15454
15424: GO 15426
15426: DISABLE
// begin DialogueOn ;
15427: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15431: LD_EXP 14
15435: PPUSH
15436: LD_STRING D7a-Har-1
15438: PPUSH
15439: CALL_OW 94
// DialogueOff ;
15443: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15447: LD_STRING M2a
15449: PPUSH
15450: CALL_OW 337
// end ;
15454: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15455: LD_EXP 27
15459: PUSH
15460: LD_INT 0
15462: LESSEQUAL
15463: PUSH
15464: LD_EXP 29
15468: PUSH
15469: LD_INT 3
15471: EQUAL
15472: AND
15473: PUSH
15474: LD_EXP 40
15478: NOT
15479: AND
15480: IFFALSE 15619
15482: GO 15484
15484: DISABLE
15485: LD_INT 0
15487: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15488: LD_ADDR_VAR 0 1
15492: PUSH
15493: LD_INT 22
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PPUSH
15503: CALL_OW 69
15507: PUSH
15508: LD_EXP 1
15512: PUSH
15513: EMPTY
15514: LIST
15515: DIFF
15516: ST_TO_ADDR
// saveDonaldson = 2 ;
15517: LD_ADDR_EXP 24
15521: PUSH
15522: LD_INT 2
15524: ST_TO_ADDR
// DialogueOn ;
15525: CALL_OW 6
// if IsOK ( Donaldson ) then
15529: LD_EXP 13
15533: PPUSH
15534: CALL_OW 302
15538: IFFALSE 15554
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15540: LD_EXP 14
15544: PPUSH
15545: LD_STRING D8-Har-1
15547: PPUSH
15548: CALL_OW 94
// end else
15552: GO 15566
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15554: LD_EXP 14
15558: PPUSH
15559: LD_STRING D8-Har-1a
15561: PPUSH
15562: CALL_OW 94
// end ; DialogueOff ;
15566: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15570: LD_VAR 0 1
15574: PPUSH
15575: LD_INT 4
15577: PPUSH
15578: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15582: LD_VAR 0 1
15586: PPUSH
15587: LD_INT 88
15589: PPUSH
15590: LD_INT 89
15592: PPUSH
15593: CALL_OW 114
// honor = 0 ;
15597: LD_ADDR_EXP 39
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15605: LD_INT 350
15607: PPUSH
15608: CALL_OW 67
// YouLost ( LostCommand ) ;
15612: LD_STRING LostCommand
15614: PPUSH
15615: CALL_OW 104
// end ;
15619: PPOPN 1
15621: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15622: LD_INT 22
15624: PUSH
15625: LD_INT 6
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 1
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: PUSH
15655: LD_EXP 20
15659: PUSH
15660: LD_INT 0
15662: EQUAL
15663: AND
15664: PUSH
15665: LD_EXP 44
15669: PUSH
15670: LD_INT 1
15672: EQUAL
15673: AND
15674: IFFALSE 15768
15676: GO 15678
15678: DISABLE
15679: LD_INT 0
15681: PPUSH
15682: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 21
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 23
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 69
15727: ST_TO_ADDR
// for i in tmp do
15728: LD_ADDR_VAR 0 1
15732: PUSH
15733: LD_VAR 0 2
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15766
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 4
15751: PPUSH
15752: CALL_OW 12
15756: PPUSH
15757: LD_INT 500
15759: PPUSH
15760: CALL_OW 492
// end ;
15764: GO 15738
15766: POP
15767: POP
// end ; end_of_file
15768: PPOPN 2
15770: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15771: GO 15773
15773: DISABLE
15774: LD_INT 0
15776: PPUSH
// begin enemyWayX = [ ] ;
15777: LD_ADDR_EXP 50
15781: PUSH
15782: EMPTY
15783: ST_TO_ADDR
// enemyWayY = [ ] ;
15784: LD_ADDR_EXP 51
15788: PUSH
15789: EMPTY
15790: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15791: LD_ADDR_VAR 0 1
15795: PUSH
15796: LD_INT 1
15798: PPUSH
15799: LD_INT 3
15801: PPUSH
15802: CALL_OW 12
15806: ST_TO_ADDR
// if rnd = 1 then
15807: LD_VAR 0 1
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: IFFALSE 15855
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15817: LD_ADDR_EXP 50
15821: PUSH
15822: LD_INT 73
15824: PUSH
15825: LD_INT 46
15827: PUSH
15828: LD_INT 29
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15836: LD_ADDR_EXP 51
15840: PUSH
15841: LD_INT 71
15843: PUSH
15844: LD_INT 43
15846: PUSH
15847: LD_INT 29
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: ST_TO_ADDR
// end ; if rnd = 2 then
15855: LD_VAR 0 1
15859: PUSH
15860: LD_INT 2
15862: EQUAL
15863: IFFALSE 15887
// begin enemyWayX = [ 64 ] ;
15865: LD_ADDR_EXP 50
15869: PUSH
15870: LD_INT 64
15872: PUSH
15873: EMPTY
15874: LIST
15875: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15876: LD_ADDR_EXP 51
15880: PUSH
15881: LD_INT 43
15883: PUSH
15884: EMPTY
15885: LIST
15886: ST_TO_ADDR
// end ; if rnd = 3 then
15887: LD_VAR 0 1
15891: PUSH
15892: LD_INT 3
15894: EQUAL
15895: IFFALSE 15919
// begin enemyWayX = [ 80 ] ;
15897: LD_ADDR_EXP 50
15901: PUSH
15902: LD_INT 80
15904: PUSH
15905: EMPTY
15906: LIST
15907: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15908: LD_ADDR_EXP 51
15912: PUSH
15913: LD_INT 28
15915: PUSH
15916: EMPTY
15917: LIST
15918: ST_TO_ADDR
// end ; enable ;
15919: ENABLE
// end ;
15920: PPOPN 1
15922: END
// every 0 0$1 trigger AIEnable = 1 do
15923: LD_EXP 37
15927: PUSH
15928: LD_INT 1
15930: EQUAL
15931: IFFALSE 16045
15933: GO 15935
15935: DISABLE
// begin enable ;
15936: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15937: LD_INT 3
15939: PPUSH
15940: LD_INT 21
15942: PPUSH
15943: LD_INT 7
15945: PPUSH
15946: CALL 6017 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15950: LD_INT 3
15952: PPUSH
15953: LD_INT 8
15955: PPUSH
15956: LD_INT 7
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL 6338 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15966: LD_INT 3
15968: PPUSH
15969: LD_INT 17
15971: PPUSH
15972: LD_INT 108
15974: PPUSH
15975: LD_INT 95
15977: PPUSH
15978: CALL 7662 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15982: LD_INT 3
15984: PPUSH
15985: LD_INT 23
15987: PPUSH
15988: LD_EXP 50
15992: PPUSH
15993: LD_EXP 51
15997: PPUSH
15998: CALL 6994 0 4
// if baseReadyToBuild = 2 then
16002: LD_EXP 20
16006: PUSH
16007: LD_INT 2
16009: EQUAL
16010: IFFALSE 16045
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16012: LD_INT 6
16014: PPUSH
16015: LD_EXP 21
16019: PPUSH
16020: LD_INT 6
16022: PPUSH
16023: CALL 6017 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16027: LD_INT 6
16029: PPUSH
16030: LD_INT 9
16032: PPUSH
16033: LD_INT 6
16035: PPUSH
16036: LD_EXP 22
16040: PPUSH
16041: CALL 6338 0 4
// end ; end ;
16045: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16046: LD_EXP 15
16050: PPUSH
16051: CALL_OW 310
16055: NOT
16056: PUSH
16057: LD_INT 21
16059: PPUSH
16060: CALL_OW 302
16064: AND
16065: PUSH
16066: LD_INT 21
16068: PPUSH
16069: CALL_OW 255
16073: PUSH
16074: LD_INT 3
16076: EQUAL
16077: AND
16078: IFFALSE 16096
16080: GO 16082
16082: DISABLE
// begin enable ;
16083: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16084: LD_EXP 15
16088: PPUSH
16089: LD_INT 21
16091: PPUSH
16092: CALL_OW 120
// end ;
16096: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16097: LD_INT 22
16099: PUSH
16100: LD_INT 3
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 2
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 55
16119: PUSH
16120: EMPTY
16121: LIST
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: PPUSH
16128: CALL_OW 69
16132: PUSH
16133: LD_INT 0
16135: EQUAL
16136: PUSH
16137: LD_INT 1
16139: PPUSH
16140: CALL_OW 255
16144: PUSH
16145: LD_INT 3
16147: EQUAL
16148: AND
16149: PUSH
16150: LD_INT 21
16152: PPUSH
16153: CALL_OW 302
16157: AND
16158: PUSH
16159: LD_INT 21
16161: PPUSH
16162: CALL_OW 255
16166: PUSH
16167: LD_INT 3
16169: EQUAL
16170: AND
16171: PUSH
16172: LD_INT 21
16174: PPUSH
16175: CALL_OW 302
16179: AND
16180: IFFALSE 16392
16182: GO 16184
16184: DISABLE
// begin enable ;
16185: ENABLE
// if Difficulty = 1 then
16186: LD_OWVAR 67
16190: PUSH
16191: LD_INT 1
16193: EQUAL
16194: IFFALSE 16238
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16196: LD_INT 3
16198: PPUSH
16199: LD_INT 24
16201: PPUSH
16202: LD_OWVAR 67
16206: PUSH
16207: LD_INT 2
16209: PLUS
16210: PPUSH
16211: LD_INT 42
16213: PUSH
16214: LD_INT 44
16216: PUSH
16217: LD_INT 43
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: LIST
16224: PPUSH
16225: LD_INT 1
16227: PPUSH
16228: LD_INT 1
16230: PPUSH
16231: LD_INT 21
16233: PPUSH
16234: CALL 6882 0 7
// if Difficulty = 2 then
16238: LD_OWVAR 67
16242: PUSH
16243: LD_INT 2
16245: EQUAL
16246: IFFALSE 16313
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16248: LD_INT 3
16250: PPUSH
16251: LD_INT 24
16253: PPUSH
16254: LD_OWVAR 67
16258: PUSH
16259: LD_INT 2
16261: PLUS
16262: PPUSH
16263: LD_INT 44
16265: PUSH
16266: LD_INT 44
16268: PUSH
16269: LD_INT 43
16271: PUSH
16272: LD_INT 43
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: LD_INT 21
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 1
16299: PPUSH
16300: LD_INT 2
16302: PPUSH
16303: CALL_OW 12
16307: ARRAY
16308: PPUSH
16309: CALL 6882 0 7
// if Difficulty = 3 then
16313: LD_OWVAR 67
16317: PUSH
16318: LD_INT 3
16320: EQUAL
16321: IFFALSE 16392
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16323: LD_INT 3
16325: PPUSH
16326: LD_INT 24
16328: PPUSH
16329: LD_OWVAR 67
16333: PUSH
16334: LD_INT 2
16336: PPUSH
16337: LD_INT 3
16339: PPUSH
16340: CALL_OW 12
16344: PLUS
16345: PPUSH
16346: LD_INT 44
16348: PUSH
16349: LD_INT 44
16351: PUSH
16352: LD_INT 43
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: LD_INT 1
16365: PPUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 23
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 1
16378: PPUSH
16379: LD_INT 2
16381: PPUSH
16382: CALL_OW 12
16386: ARRAY
16387: PPUSH
16388: CALL 6882 0 7
// end ;
16392: END
// every 0 0$1 do
16393: GO 16395
16395: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16396: LD_INT 3
16398: PPUSH
16399: LD_INT 1
16401: PPUSH
16402: LD_INT 3
16404: PPUSH
16405: CALL 5932 0 3
16409: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16410: LD_EXP 20
16414: PUSH
16415: LD_INT 1
16417: EQUAL
16418: IFFALSE 16565
16420: GO 16422
16422: DISABLE
16423: LD_INT 0
16425: PPUSH
16426: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16427: LD_ADDR_VAR 0 2
16431: PUSH
16432: LD_INT 22
16434: PUSH
16435: LD_INT 6
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 21
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 34
16454: PUSH
16455: LD_INT 51
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: PPUSH
16467: CALL_OW 69
16471: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16472: LD_VAR 0 2
16476: PUSH
16477: LD_INT 1
16479: ARRAY
16480: PPUSH
16481: LD_EXP 21
16485: PPUSH
16486: CALL_OW 250
16490: PUSH
16491: LD_INT 5
16493: MINUS
16494: PPUSH
16495: LD_EXP 21
16499: PPUSH
16500: CALL_OW 251
16504: PUSH
16505: LD_INT 5
16507: MINUS
16508: PPUSH
16509: CALL_OW 111
// wait ( 0 0$5 ) ;
16513: LD_INT 175
16515: PPUSH
16516: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16520: LD_VAR 0 2
16524: PUSH
16525: LD_INT 1
16527: ARRAY
16528: PPUSH
16529: LD_INT 41
16531: PPUSH
16532: LD_INT 52
16534: PPUSH
16535: CALL_OW 177
// wait ( 0 0$40 ) ;
16539: LD_INT 1400
16541: PPUSH
16542: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16546: LD_VAR 0 2
16550: PUSH
16551: LD_INT 1
16553: ARRAY
16554: PPUSH
16555: LD_INT 41
16557: PPUSH
16558: LD_INT 44
16560: PPUSH
16561: CALL_OW 111
// end ;
16565: PPOPN 2
16567: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16568: LD_EXP 21
16572: PPUSH
16573: CALL_OW 274
16577: PPUSH
16578: LD_INT 1
16580: PPUSH
16581: CALL_OW 275
16585: PUSH
16586: LD_INT 100
16588: GREATEREQUAL
16589: IFFALSE 16817
16591: GO 16593
16593: DISABLE
16594: LD_INT 0
16596: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16597: LD_ADDR_VAR 0 1
16601: PUSH
16602: LD_INT 22
16604: PUSH
16605: LD_INT 6
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 21
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 25
16624: PUSH
16625: LD_INT 2
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: PPUSH
16637: CALL_OW 69
16641: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16642: LD_VAR 0 1
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PPUSH
16651: LD_INT 4
16653: PPUSH
16654: LD_INT 39
16656: PPUSH
16657: LD_INT 37
16659: PPUSH
16660: LD_INT 3
16662: PPUSH
16663: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16667: LD_VAR 0 1
16671: PUSH
16672: LD_INT 1
16674: ARRAY
16675: PPUSH
16676: LD_INT 29
16678: PPUSH
16679: LD_INT 42
16681: PPUSH
16682: LD_INT 54
16684: PPUSH
16685: LD_INT 3
16687: PPUSH
16688: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16692: LD_VAR 0 1
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: LD_INT 6
16703: PPUSH
16704: LD_INT 38
16706: PPUSH
16707: LD_INT 48
16709: PPUSH
16710: LD_INT 0
16712: PPUSH
16713: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16717: LD_VAR 0 1
16721: PUSH
16722: LD_INT 1
16724: ARRAY
16725: PPUSH
16726: LD_INT 2
16728: PPUSH
16729: LD_INT 32
16731: PPUSH
16732: LD_INT 38
16734: PPUSH
16735: LD_INT 2
16737: PPUSH
16738: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16742: LD_VAR 0 1
16746: PUSH
16747: LD_INT 1
16749: ARRAY
16750: PPUSH
16751: LD_INT 26
16753: PPUSH
16754: LD_INT 39
16756: PPUSH
16757: LD_INT 55
16759: PPUSH
16760: LD_INT 3
16762: PPUSH
16763: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16767: LD_VAR 0 1
16771: PUSH
16772: LD_INT 1
16774: ARRAY
16775: PPUSH
16776: LD_INT 32
16778: PPUSH
16779: LD_INT 31
16781: PPUSH
16782: LD_INT 31
16784: PPUSH
16785: LD_INT 3
16787: PPUSH
16788: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16792: LD_VAR 0 1
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: LD_INT 31
16803: PPUSH
16804: LD_INT 50
16806: PPUSH
16807: LD_INT 51
16809: PPUSH
16810: LD_INT 4
16812: PPUSH
16813: CALL_OW 205
// end ;
16817: PPOPN 1
16819: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16820: LD_EXP 46
16824: IFFALSE 17381
16826: GO 16828
16828: DISABLE
16829: LD_INT 0
16831: PPUSH
16832: PPUSH
16833: PPUSH
// begin enable ;
16834: ENABLE
// if not ruMobile then
16835: LD_EXP 46
16839: NOT
16840: IFFALSE 16844
// exit ;
16842: GO 17381
// for i in ruMobile do
16844: LD_ADDR_VAR 0 1
16848: PUSH
16849: LD_EXP 46
16853: PUSH
16854: FOR_IN
16855: IFFALSE 17379
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16857: LD_VAR 0 1
16861: PPUSH
16862: CALL_OW 302
16866: NOT
16867: PUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 255
16877: PUSH
16878: LD_INT 3
16880: NONEQUAL
16881: OR
16882: IFFALSE 16902
// begin ruMobile := ruMobile diff i ;
16884: LD_ADDR_EXP 46
16888: PUSH
16889: LD_EXP 46
16893: PUSH
16894: LD_VAR 0 1
16898: DIFF
16899: ST_TO_ADDR
// continue ;
16900: GO 16854
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 110
16911: NOT
16912: PUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 110
16922: PUSH
16923: LD_INT 0
16925: EQUAL
16926: OR
16927: IFFALSE 17042
// begin if GetFuel ( i ) < 50 then
16929: LD_VAR 0 1
16933: PPUSH
16934: CALL_OW 261
16938: PUSH
16939: LD_INT 50
16941: LESS
16942: IFFALSE 17001
// begin ComMoveXY ( i , 106 , 88 ) ;
16944: LD_VAR 0 1
16948: PPUSH
16949: LD_INT 106
16951: PPUSH
16952: LD_INT 88
16954: PPUSH
16955: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16959: LD_INT 35
16961: PPUSH
16962: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
16966: LD_VAR 0 1
16970: PPUSH
16971: LD_INT 106
16973: PPUSH
16974: LD_INT 88
16976: PPUSH
16977: CALL_OW 297
16981: PUSH
16982: LD_INT 4
16984: LESS
16985: IFFALSE 16959
// SetFuel ( i , 100 ) ;
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_INT 100
16994: PPUSH
16995: CALL_OW 240
// end else
16999: GO 17042
// if not IsInArea ( i , ruParking ) then
17001: LD_VAR 0 1
17005: PPUSH
17006: LD_INT 25
17008: PPUSH
17009: CALL_OW 308
17013: NOT
17014: IFFALSE 17030
// ComMoveToArea ( i , ruParking ) else
17016: LD_VAR 0 1
17020: PPUSH
17021: LD_INT 25
17023: PPUSH
17024: CALL_OW 113
17028: GO 17042
// SetTag ( i , 1 ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_INT 1
17037: PPUSH
17038: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 110
17051: PUSH
17052: LD_INT 1
17054: EQUAL
17055: IFFALSE 17185
// begin if GetLives ( i ) < 1000 then
17057: LD_VAR 0 1
17061: PPUSH
17062: CALL_OW 256
17066: PUSH
17067: LD_INT 1000
17069: LESS
17070: IFFALSE 17162
// begin if not IsDrivenBy ( i ) then
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 311
17081: NOT
17082: IFFALSE 17086
// continue ;
17084: GO 16854
// mech := IsDrivenBy ( i ) ;
17086: LD_ADDR_VAR 0 2
17090: PUSH
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 311
17100: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17101: LD_VAR 0 2
17105: PPUSH
17106: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17110: LD_VAR 0 2
17114: PPUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17124: LD_INT 35
17126: PPUSH
17127: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 256
17140: PUSH
17141: LD_INT 1000
17143: EQUAL
17144: IFFALSE 17124
// ComEnterUnit ( mech , i ) ;
17146: LD_VAR 0 2
17150: PPUSH
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 120
// end else
17160: GO 17185
// if IsDrivenBy ( i ) then
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 311
17171: IFFALSE 17185
// SetTag ( i , 2 ) ;
17173: LD_VAR 0 1
17177: PPUSH
17178: LD_INT 2
17180: PPUSH
17181: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 110
17194: PUSH
17195: LD_INT 2
17197: EQUAL
17198: IFFALSE 17377
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: LD_INT 24
17207: PPUSH
17208: LD_INT 81
17210: PUSH
17211: LD_INT 3
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 70
17222: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 256
17232: PUSH
17233: LD_INT 650
17235: LESS
17236: IFFALSE 17261
// begin ComStop ( i ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 141
// SetTag ( i , 0 ) ;
17247: LD_VAR 0 1
17251: PPUSH
17252: LD_INT 0
17254: PPUSH
17255: CALL_OW 109
// continue ;
17259: GO 16854
// end ; if enemy then
17261: LD_VAR 0 3
17265: IFFALSE 17305
// begin if not HasTask ( i ) then
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 314
17276: NOT
17277: IFFALSE 17303
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_VAR 0 1
17293: PPUSH
17294: CALL_OW 74
17298: PPUSH
17299: CALL_OW 115
// end else
17303: GO 17377
// if ruMobile > 2 then
17305: LD_EXP 46
17309: PUSH
17310: LD_INT 2
17312: GREATER
17313: IFFALSE 17377
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17315: LD_ADDR_VAR 0 3
17319: PUSH
17320: LD_INT 81
17322: PUSH
17323: LD_INT 3
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL_OW 69
17334: ST_TO_ADDR
// if enemy then
17335: LD_VAR 0 3
17339: IFFALSE 17377
// if not HasTask ( i ) then
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL_OW 314
17350: NOT
17351: IFFALSE 17377
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17353: LD_VAR 0 1
17357: PPUSH
17358: LD_VAR 0 3
17362: PPUSH
17363: LD_VAR 0 1
17367: PPUSH
17368: CALL_OW 74
17372: PPUSH
17373: CALL_OW 115
// end ; end ; end ;
17377: GO 16854
17379: POP
17380: POP
// end ; end_of_file
17381: PPOPN 3
17383: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17384: LD_INT 0
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17393: LD_ADDR_VAR 0 3
17397: PUSH
17398: LD_INT 22
17400: PUSH
17401: LD_INT 6
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 21
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 25
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 3
17430: PUSH
17431: LD_INT 54
17433: PUSH
17434: EMPTY
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL_OW 69
17451: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17452: LD_ADDR_VAR 0 7
17456: PUSH
17457: LD_INT 22
17459: PUSH
17460: LD_INT 6
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 21
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 25
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 54
17489: PUSH
17490: EMPTY
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: PPUSH
17499: CALL_OW 69
17503: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17504: LD_ADDR_VAR 0 4
17508: PUSH
17509: LD_INT 22
17511: PUSH
17512: LD_INT 6
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 21
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 25
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17549: LD_ADDR_VAR 0 6
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_INT 6
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 25
17576: PUSH
17577: LD_INT 4
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: PPUSH
17589: CALL_OW 69
17593: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17594: LD_ADDR_VAR 0 8
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_INT 6
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 21
17611: PUSH
17612: LD_INT 2
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 34
17621: PUSH
17622: LD_INT 51
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 69
17638: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL_OW 255
17648: PUSH
17649: LD_INT 6
17651: EQUAL
17652: PUSH
17653: LD_VAR 0 1
17657: PPUSH
17658: CALL_OW 266
17662: PUSH
17663: LD_INT 0
17665: EQUAL
17666: AND
17667: IFFALSE 17687
// begin ruPDepot = building ;
17669: LD_ADDR_EXP 21
17673: PUSH
17674: LD_VAR 0 1
17678: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17679: LD_ADDR_EXP 20
17683: PUSH
17684: LD_INT 1
17686: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 4
17699: EQUAL
17700: PUSH
17701: LD_VAR 0 1
17705: PPUSH
17706: CALL_OW 255
17710: PUSH
17711: LD_INT 6
17713: EQUAL
17714: AND
17715: IFFALSE 17748
// for i in tmpSold do
17717: LD_ADDR_VAR 0 2
17721: PUSH
17722: LD_VAR 0 3
17726: PUSH
17727: FOR_IN
17728: IFFALSE 17746
// ComEnterUnit ( i , building ) ;
17730: LD_VAR 0 2
17734: PPUSH
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 120
17744: GO 17727
17746: POP
17747: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 266
17757: PUSH
17758: LD_INT 6
17760: EQUAL
17761: PUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: CALL_OW 255
17771: PUSH
17772: LD_INT 6
17774: EQUAL
17775: AND
17776: IFFALSE 17834
// begin for i in tmpSci do
17778: LD_ADDR_VAR 0 2
17782: PUSH
17783: LD_VAR 0 6
17787: PUSH
17788: FOR_IN
17789: IFFALSE 17807
// ComEnterUnit ( i , building ) ;
17791: LD_VAR 0 2
17795: PPUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 120
17805: GO 17788
17807: POP
17808: POP
// ResAllTechs ( 6 , building , 3 ) ;
17809: LD_INT 6
17811: PPUSH
17812: LD_VAR 0 1
17816: PPUSH
17817: LD_INT 3
17819: PPUSH
17820: CALL 5932 0 3
// ruPLab = building ;
17824: LD_ADDR_EXP 22
17828: PUSH
17829: LD_VAR 0 1
17833: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17834: LD_VAR 0 1
17838: PPUSH
17839: CALL_OW 266
17843: PUSH
17844: LD_INT 2
17846: EQUAL
17847: PUSH
17848: LD_VAR 0 1
17852: PPUSH
17853: CALL_OW 255
17857: PUSH
17858: LD_INT 6
17860: EQUAL
17861: AND
17862: IFFALSE 17913
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17864: LD_ADDR_VAR 0 5
17868: PUSH
17869: LD_VAR 0 8
17873: PUSH
17874: LD_INT 1
17876: ARRAY
17877: PPUSH
17878: CALL_OW 313
17882: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17883: LD_VAR 0 5
17887: PPUSH
17888: CALL_OW 121
// wait ( 0 0$1 ) ;
17892: LD_INT 35
17894: PPUSH
17895: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17899: LD_VAR 0 5
17903: PPUSH
17904: LD_VAR 0 1
17908: PPUSH
17909: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 266
17922: PUSH
17923: LD_INT 32
17925: EQUAL
17926: PUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 255
17936: PUSH
17937: LD_INT 6
17939: EQUAL
17940: AND
17941: IFFALSE 17993
// begin ComPlaceWeapon ( building , 42 ) ;
17943: LD_VAR 0 1
17947: PPUSH
17948: LD_INT 42
17950: PPUSH
17951: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17955: LD_VAR 0 7
17959: PUSH
17960: LD_INT 1
17962: ARRAY
17963: PPUSH
17964: CALL_OW 122
// wait ( 0 0$1 ) ;
17968: LD_INT 35
17970: PPUSH
17971: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17975: LD_VAR 0 7
17979: PUSH
17980: LD_INT 1
17982: ARRAY
17983: PPUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 266
18002: PUSH
18003: LD_INT 31
18005: EQUAL
18006: PUSH
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 255
18016: PUSH
18017: LD_INT 6
18019: EQUAL
18020: AND
18021: IFFALSE 18087
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18023: LD_VAR 0 7
18027: PUSH
18028: LD_INT 2
18030: ARRAY
18031: PPUSH
18032: CALL_OW 122
// wait ( 0 0$1 ) ;
18036: LD_INT 35
18038: PPUSH
18039: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18043: LD_VAR 0 7
18047: PUSH
18048: LD_INT 2
18050: ARRAY
18051: PPUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18061: LD_VAR 0 4
18065: PUSH
18066: LD_INT 1
18068: ARRAY
18069: PPUSH
18070: LD_EXP 21
18074: PPUSH
18075: CALL_OW 120
// baseReadyToBuild = 2 ;
18079: LD_ADDR_EXP 20
18083: PUSH
18084: LD_INT 2
18086: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18087: LD_VAR 0 1
18091: PPUSH
18092: CALL_OW 266
18096: PUSH
18097: LD_INT 32
18099: EQUAL
18100: PUSH
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 255
18110: PUSH
18111: LD_INT 1
18113: EQUAL
18114: AND
18115: PUSH
18116: LD_EXP 32
18120: PUSH
18121: LD_INT 0
18123: EQUAL
18124: AND
18125: IFFALSE 18370
// begin bunkerDialog = 1 ;
18127: LD_ADDR_EXP 32
18131: PUSH
18132: LD_INT 1
18134: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18135: LD_EXP 11
18139: PPUSH
18140: CALL_OW 302
18144: IFFALSE 18160
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18146: LD_EXP 11
18150: PPUSH
18151: LD_STRING D11-Eng1-1
18153: PPUSH
18154: CALL_OW 88
// end else
18158: GO 18356
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18160: LD_INT 22
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 21
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 25
18182: PUSH
18183: LD_INT 3
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 26
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: PUSH
18211: LD_EXP 1
18215: PUSH
18216: EMPTY
18217: LIST
18218: PUSH
18219: LD_INT 0
18221: GREATER
18222: DIFF
18223: IFFALSE 18297
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18225: LD_INT 22
18227: PUSH
18228: LD_INT 1
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 21
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 25
18247: PUSH
18248: LD_INT 2
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 26
18257: PUSH
18258: LD_INT 1
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PUSH
18276: LD_EXP 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: DIFF
18284: PPUSH
18285: LD_STRING D11-Eng1-1
18287: PPUSH
18288: LD_STRING D11-Eng1-1
18290: PPUSH
18291: CALL 4581 0 3
// end else
18295: GO 18356
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18297: LD_INT 22
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 21
18309: PUSH
18310: LD_INT 1
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 26
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: PUSH
18337: LD_EXP 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: DIFF
18345: PPUSH
18346: LD_STRING D11-Eng1-1
18348: PPUSH
18349: LD_STRING D11-Eng1-1
18351: PPUSH
18352: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18356: LD_EXP 33
18360: PUSH
18361: LD_INT 0
18363: EQUAL
18364: IFFALSE 18370
// EnergyDialog ;
18366: CALL 4984 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18370: LD_VAR 0 1
18374: PPUSH
18375: CALL_OW 266
18379: PUSH
18380: LD_INT 29
18382: EQUAL
18383: PUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 255
18393: PUSH
18394: LD_INT 1
18396: EQUAL
18397: AND
18398: IFFALSE 18408
// buildOil = 1 ;
18400: LD_ADDR_EXP 34
18404: PUSH
18405: LD_INT 1
18407: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18408: LD_VAR 0 1
18412: PPUSH
18413: CALL_OW 266
18417: PUSH
18418: LD_INT 26
18420: EQUAL
18421: PUSH
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 255
18431: PUSH
18432: LD_INT 1
18434: EQUAL
18435: AND
18436: IFFALSE 18446
// buildPower = 1 ;
18438: LD_ADDR_EXP 35
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// end ;
18446: PPOPN 8
18448: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 266
18458: PUSH
18459: LD_INT 3
18461: EQUAL
18462: PUSH
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 1
18475: EQUAL
18476: AND
18477: PUSH
18478: LD_EXP 31
18482: PUSH
18483: LD_INT 0
18485: EQUAL
18486: AND
18487: IFFALSE 18835
// begin factoryDialog = 1 ;
18489: LD_ADDR_EXP 31
18493: PUSH
18494: LD_INT 1
18496: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18497: LD_INT 47
18499: PPUSH
18500: LD_INT 1
18502: PPUSH
18503: CALL_OW 321
18507: PUSH
18508: LD_INT 1
18510: EQUAL
18511: PUSH
18512: LD_INT 45
18514: PPUSH
18515: LD_INT 1
18517: PPUSH
18518: CALL_OW 321
18522: PUSH
18523: LD_INT 1
18525: EQUAL
18526: AND
18527: IFFALSE 18835
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18529: LD_INT 22
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 21
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 30
18551: PUSH
18552: LD_INT 3
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 24
18561: PUSH
18562: LD_INT 1000
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: PPUSH
18575: CALL_OW 69
18579: PUSH
18580: LD_INT 1
18582: ARRAY
18583: PPUSH
18584: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18588: LD_EXP 1
18592: PPUSH
18593: LD_STRING D9a-JMM-1
18595: PPUSH
18596: CALL_OW 88
// if IsOK ( Campell ) then
18600: LD_EXP 12
18604: PPUSH
18605: CALL_OW 302
18609: IFFALSE 18625
// begin Say ( Campell , D9a-Mech1-1 ) ;
18611: LD_EXP 12
18615: PPUSH
18616: LD_STRING D9a-Mech1-1
18618: PPUSH
18619: CALL_OW 88
// end else
18623: GO 18821
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18625: LD_INT 22
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 21
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 3
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 26
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_EXP 1
18680: PUSH
18681: EMPTY
18682: LIST
18683: PUSH
18684: LD_INT 0
18686: GREATER
18687: DIFF
18688: IFFALSE 18762
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18690: LD_INT 22
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 25
18712: PUSH
18713: LD_INT 3
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 26
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PPUSH
18736: CALL_OW 69
18740: PUSH
18741: LD_EXP 1
18745: PUSH
18746: EMPTY
18747: LIST
18748: DIFF
18749: PPUSH
18750: LD_STRING D9a-Mech1-1
18752: PPUSH
18753: LD_STRING D9a-Mech1-1
18755: PPUSH
18756: CALL 4581 0 3
// end else
18760: GO 18821
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18762: LD_INT 22
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 21
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 26
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: PPUSH
18797: CALL_OW 69
18801: PUSH
18802: LD_EXP 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: DIFF
18810: PPUSH
18811: LD_STRING D9a-Mech1-1
18813: PPUSH
18814: LD_STRING D9a-Mech1-1
18816: PPUSH
18817: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18821: LD_EXP 33
18825: PUSH
18826: LD_INT 0
18828: EQUAL
18829: IFFALSE 18835
// EnergyDialog ;
18831: CALL 4984 0 0
// end ; end ; end ;
18835: PPOPN 1
18837: END
// on UnitDestroyed ( unit ) do var mech ;
18838: LD_INT 0
18840: PPUSH
// begin if unit = JMM then
18841: LD_VAR 0 1
18845: PUSH
18846: LD_EXP 1
18850: EQUAL
18851: IFFALSE 18860
// YouLost ( JMM ) ;
18853: LD_STRING JMM
18855: PPUSH
18856: CALL_OW 104
// if unit in ruMobile then
18860: LD_VAR 0 1
18864: PUSH
18865: LD_EXP 46
18869: IN
18870: IFFALSE 18888
// ruMobile = ruMobile diff ruMobile ;
18872: LD_ADDR_EXP 46
18876: PUSH
18877: LD_EXP 46
18881: PUSH
18882: LD_EXP 46
18886: DIFF
18887: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL_OW 247
18897: PUSH
18898: LD_INT 1
18900: EQUAL
18901: PUSH
18902: LD_VAR 0 1
18906: PPUSH
18907: CALL_OW 255
18911: PUSH
18912: LD_INT 1
18914: EQUAL
18915: AND
18916: IFFALSE 18932
// lostCounter = lostCounter + 1 ;
18918: LD_ADDR_EXP 38
18922: PUSH
18923: LD_EXP 38
18927: PUSH
18928: LD_INT 1
18930: PLUS
18931: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18932: LD_EXP 43
18936: PUSH
18937: LD_INT 24
18939: PPUSH
18940: CALL_OW 313
18944: PUSH
18945: LD_INT 6
18947: LESS
18948: AND
18949: PUSH
18950: LD_VAR 0 1
18954: PPUSH
18955: CALL_OW 257
18959: PUSH
18960: LD_INT 3
18962: EQUAL
18963: AND
18964: PUSH
18965: LD_VAR 0 1
18969: PPUSH
18970: CALL_OW 255
18974: PUSH
18975: LD_INT 3
18977: EQUAL
18978: AND
18979: PUSH
18980: LD_INT 24
18982: PPUSH
18983: CALL_OW 302
18987: AND
18988: PUSH
18989: LD_INT 24
18991: PPUSH
18992: CALL_OW 255
18996: PUSH
18997: LD_INT 3
18999: EQUAL
19000: AND
19001: IFFALSE 19130
// begin ruMech := ruMech - 1 ;
19003: LD_ADDR_EXP 43
19007: PUSH
19008: LD_EXP 43
19012: PUSH
19013: LD_INT 1
19015: MINUS
19016: ST_TO_ADDR
// if ruMech = 0 then
19017: LD_EXP 43
19021: PUSH
19022: LD_INT 0
19024: EQUAL
19025: IFFALSE 19029
// exit ;
19027: GO 19130
// wait ( 0 0$40 ) ;
19029: LD_INT 1400
19031: PPUSH
19032: CALL_OW 67
// uc_side = 3 ;
19036: LD_ADDR_OWVAR 20
19040: PUSH
19041: LD_INT 3
19043: ST_TO_ADDR
// uc_nation = 3 ;
19044: LD_ADDR_OWVAR 21
19048: PUSH
19049: LD_INT 3
19051: ST_TO_ADDR
// hc_gallery :=  ;
19052: LD_ADDR_OWVAR 33
19056: PUSH
19057: LD_STRING 
19059: ST_TO_ADDR
// hc_name :=  ;
19060: LD_ADDR_OWVAR 26
19064: PUSH
19065: LD_STRING 
19067: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19068: LD_INT 0
19070: PPUSH
19071: LD_EXP 16
19075: PPUSH
19076: LD_EXP 17
19080: PPUSH
19081: CALL_OW 12
19085: PPUSH
19086: CALL_OW 383
// mech := CreateHuman ;
19090: LD_ADDR_VAR 0 2
19094: PUSH
19095: CALL_OW 44
19099: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19100: LD_VAR 0 2
19104: PPUSH
19105: LD_INT 124
19107: PPUSH
19108: LD_INT 97
19110: PPUSH
19111: LD_INT 0
19113: PPUSH
19114: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19118: LD_VAR 0 2
19122: PPUSH
19123: LD_INT 24
19125: PPUSH
19126: CALL_OW 120
// end ; end ;
19130: PPOPN 2
19132: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19133: LD_INT 0
19135: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19136: LD_VAR 0 1
19140: PPUSH
19141: CALL_OW 255
19145: PUSH
19146: LD_INT 1
19148: EQUAL
19149: IFFALSE 19165
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19151: LD_ADDR_EXP 42
19155: PUSH
19156: LD_EXP 42
19160: PUSH
19161: LD_INT 1
19163: PLUS
19164: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19165: LD_VAR 0 1
19169: PPUSH
19170: CALL_OW 255
19174: PUSH
19175: LD_INT 3
19177: EQUAL
19178: PUSH
19179: LD_VAR 0 1
19183: PPUSH
19184: CALL_OW 264
19188: PUSH
19189: LD_INT 42
19191: PUSH
19192: LD_INT 43
19194: PUSH
19195: LD_INT 44
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: LIST
19202: IN
19203: AND
19204: IFFALSE 19222
// ruMobile := ruMobile union vehicle ;
19206: LD_ADDR_EXP 46
19210: PUSH
19211: LD_EXP 46
19215: PUSH
19216: LD_VAR 0 1
19220: UNION
19221: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19222: LD_VAR 0 1
19226: PPUSH
19227: CALL_OW 264
19231: PUSH
19232: LD_INT 53
19234: EQUAL
19235: IFFALSE 19371
// begin uc_side = 3 ;
19237: LD_ADDR_OWVAR 20
19241: PUSH
19242: LD_INT 3
19244: ST_TO_ADDR
// uc_nation = 3 ;
19245: LD_ADDR_OWVAR 21
19249: PUSH
19250: LD_INT 3
19252: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19253: LD_INT 0
19255: PPUSH
19256: LD_EXP 17
19260: PPUSH
19261: CALL_OW 383
// driver := CreateHuman ;
19265: LD_ADDR_VAR 0 3
19269: PUSH
19270: CALL_OW 44
19274: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19275: LD_VAR 0 3
19279: PPUSH
19280: LD_VAR 0 2
19284: PPUSH
19285: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19289: LD_VAR 0 1
19293: PPUSH
19294: LD_INT 21
19296: PPUSH
19297: CALL 5200 0 2
// repeat wait ( 0 0$1 ) ;
19301: LD_INT 35
19303: PPUSH
19304: CALL_OW 67
// until not HasTask ( vehicle ) ;
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 314
19317: NOT
19318: IFFALSE 19301
// driver := IsDrivenBy ( vehicle ) ;
19320: LD_ADDR_VAR 0 3
19324: PUSH
19325: LD_VAR 0 1
19329: PPUSH
19330: CALL_OW 311
19334: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19335: LD_VAR 0 3
19339: PPUSH
19340: LD_INT 104
19342: PPUSH
19343: LD_INT 73
19345: PPUSH
19346: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19350: LD_VAR 0 3
19354: PPUSH
19355: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19359: LD_VAR 0 3
19363: PPUSH
19364: LD_INT 24
19366: PPUSH
19367: CALL_OW 180
// end ; end ;
19371: PPOPN 3
19373: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19378: LD_VAR 0 1
19382: PPUSH
19383: CALL_OW 255
19387: PUSH
19388: LD_INT 3
19390: EQUAL
19391: PUSH
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 247
19401: PUSH
19402: LD_INT 2
19404: EQUAL
19405: AND
19406: IFFALSE 19500
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19408: LD_VAR 0 1
19412: PPUSH
19413: CALL_OW 264
19417: PUSH
19418: LD_INT 42
19420: EQUAL
19421: PUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 264
19431: PUSH
19432: LD_INT 43
19434: EQUAL
19435: OR
19436: PUSH
19437: LD_VAR 0 1
19441: PPUSH
19442: CALL_OW 264
19446: PUSH
19447: LD_INT 44
19449: EQUAL
19450: OR
19451: IFFALSE 19500
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19453: LD_INT 24
19455: PPUSH
19456: LD_VAR 0 1
19460: PPUSH
19461: CALL_OW 265
19465: PPUSH
19466: LD_VAR 0 1
19470: PPUSH
19471: CALL_OW 262
19475: PPUSH
19476: LD_VAR 0 1
19480: PPUSH
19481: CALL_OW 263
19485: PPUSH
19486: LD_VAR 0 1
19490: PPUSH
19491: CALL_OW 264
19495: PPUSH
19496: CALL_OW 185
// end ;
19500: PPOPN 3
19502: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19503: LD_VAR 0 1
19507: PPUSH
19508: CALL_OW 255
19512: PUSH
19513: LD_INT 3
19515: EQUAL
19516: PUSH
19517: LD_VAR 0 2
19521: PPUSH
19522: CALL_OW 255
19526: PUSH
19527: LD_INT 3
19529: EQUAL
19530: AND
19531: PUSH
19532: LD_INT 24
19534: PPUSH
19535: CALL_OW 302
19539: AND
19540: PUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL_OW 302
19550: NOT
19551: AND
19552: IFFALSE 19566
// ComEnterUnit ( human , rubfact0 ) ;
19554: LD_VAR 0 2
19558: PPUSH
19559: LD_INT 24
19561: PPUSH
19562: CALL_OW 120
// end ;
19566: PPOPN 2
19568: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19569: LD_VAR 0 1
19573: PUSH
19574: LD_INT 24
19576: EQUAL
19577: PUSH
19578: LD_VAR 0 2
19582: PPUSH
19583: CALL_OW 256
19587: PUSH
19588: LD_INT 1000
19590: LESS
19591: AND
19592: IFFALSE 19606
// SetLives ( un , 1000 ) ;
19594: LD_VAR 0 2
19598: PPUSH
19599: LD_INT 1000
19601: PPUSH
19602: CALL_OW 234
// end ;
19606: PPOPN 2
19608: END
// on Command ( comandid ) do var i , j , tmp ;
19609: LD_INT 0
19611: PPUSH
19612: PPUSH
19613: PPUSH
// begin SOS_Command ( comandid ) ;
19614: LD_VAR 0 1
19618: PPUSH
19619: CALL 35955 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19623: LD_INT 22
19625: PUSH
19626: LD_INT 4
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 69
19637: NOT
19638: IFFALSE 19642
// exit ;
19640: GO 19807
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19642: LD_ADDR_VAR 0 2
19646: PUSH
19647: LD_INT 22
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 21
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 21
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PPUSH
19689: CALL_OW 69
19693: PUSH
19694: FOR_IN
19695: IFFALSE 19805
// begin if GetTaskList ( i ) > 0 then
19697: LD_VAR 0 2
19701: PPUSH
19702: CALL_OW 437
19706: PUSH
19707: LD_INT 0
19709: GREATER
19710: IFFALSE 19803
// begin for j = 1 to GetTaskList ( i ) do
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: DOUBLE
19718: LD_INT 1
19720: DEC
19721: ST_TO_ADDR
19722: LD_VAR 0 2
19726: PPUSH
19727: CALL_OW 437
19731: PUSH
19732: FOR_TO
19733: IFFALSE 19801
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19735: LD_ADDR_VAR 0 4
19739: PUSH
19740: LD_VAR 0 2
19744: PPUSH
19745: CALL_OW 437
19749: PUSH
19750: LD_VAR 0 3
19754: ARRAY
19755: PUSH
19756: LD_INT 4
19758: ARRAY
19759: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19760: LD_VAR 0 4
19764: PPUSH
19765: CALL_OW 255
19769: PUSH
19770: LD_INT 4
19772: EQUAL
19773: PUSH
19774: LD_VAR 0 4
19778: PPUSH
19779: CALL_OW 255
19783: PUSH
19784: LD_INT 0
19786: EQUAL
19787: OR
19788: IFFALSE 19799
// ComStop ( i ) ;
19790: LD_VAR 0 2
19794: PPUSH
19795: CALL_OW 141
// end ;
19799: GO 19732
19801: POP
19802: POP
// end ; end ;
19803: GO 19694
19805: POP
19806: POP
// end ; end_of_file
19807: PPOPN 4
19809: END
// every 10 10$0 do
19810: GO 19812
19812: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19813: LD_INT 5
19815: PPUSH
19816: LD_INT 3
19818: PPUSH
19819: LD_INT 2
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 3
19827: PUSH
19828: LD_INT 4
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: PUSH
19836: LD_OWVAR 67
19840: ARRAY
19841: PLUS
19842: PPUSH
19843: LD_INT 0
19845: PPUSH
19846: LD_INT 0
19848: PPUSH
19849: LD_INT 0
19851: PPUSH
19852: LD_INT 0
19854: PPUSH
19855: LD_EXP 16
19859: PPUSH
19860: LD_EXP 17
19864: PPUSH
19865: CALL_OW 12
19869: PPUSH
19870: LD_INT 4
19872: PPUSH
19873: LD_INT 14
19875: PPUSH
19876: LD_INT 1
19878: PPUSH
19879: LD_INT 2
19881: PPUSH
19882: CALL 7905 0 12
// end ;
19886: END
// every 20 20$0 do
19887: GO 19889
19889: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19890: LD_INT 5
19892: PPUSH
19893: LD_INT 3
19895: PPUSH
19896: LD_INT 4
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 3
19904: PUSH
19905: LD_INT 4
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: PUSH
19913: LD_OWVAR 67
19917: ARRAY
19918: PLUS
19919: PPUSH
19920: LD_INT 0
19922: PPUSH
19923: LD_INT 0
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: LD_INT 2
19931: PPUSH
19932: LD_EXP 16
19936: PPUSH
19937: LD_EXP 17
19941: PPUSH
19942: CALL_OW 12
19946: PPUSH
19947: LD_INT 4
19949: PPUSH
19950: LD_INT 14
19952: PPUSH
19953: LD_INT 1
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: CALL 7905 0 12
// end ;
19963: END
// every 25 25$0 do
19964: GO 19966
19966: DISABLE
// begin if Difficulty > 1 then
19967: LD_OWVAR 67
19971: PUSH
19972: LD_INT 1
19974: GREATER
19975: IFFALSE 19985
// specAttack := true ;
19977: LD_ADDR_EXP 47
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19985: LD_INT 4
19987: PPUSH
19988: LD_INT 5
19990: PPUSH
19991: LD_INT 4
19993: PUSH
19994: LD_INT 5
19996: PUSH
19997: LD_INT 6
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: PUSH
20005: LD_OWVAR 67
20009: ARRAY
20010: PPUSH
20011: LD_EXP 16
20015: PPUSH
20016: LD_EXP 17
20020: PPUSH
20021: CALL_OW 12
20025: PPUSH
20026: LD_INT 3
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: LD_INT 1
20034: PPUSH
20035: LD_INT 42
20037: PUSH
20038: LD_INT 42
20040: PUSH
20041: LD_INT 43
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 42
20051: PUSH
20052: LD_INT 43
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 43
20061: PUSH
20062: LD_INT 43
20064: PUSH
20065: LD_INT 43
20067: PUSH
20068: LD_INT 44
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: LIST
20081: PUSH
20082: LD_OWVAR 67
20086: ARRAY
20087: PPUSH
20088: EMPTY
20089: PPUSH
20090: EMPTY
20091: PPUSH
20092: LD_INT 1
20094: PPUSH
20095: CALL 9661 0 11
// end ;
20099: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20100: LD_EXP 47
20104: IFFALSE 20467
20106: GO 20108
20108: DISABLE
20109: LD_INT 0
20111: PPUSH
20112: PPUSH
20113: PPUSH
20114: PPUSH
// begin wait ( 0 0$20 ) ;
20115: LD_INT 700
20117: PPUSH
20118: CALL_OW 67
// uc_side := 5 ;
20122: LD_ADDR_OWVAR 20
20126: PUSH
20127: LD_INT 5
20129: ST_TO_ADDR
// uc_nation := 3 ;
20130: LD_ADDR_OWVAR 21
20134: PUSH
20135: LD_INT 3
20137: ST_TO_ADDR
// InitHc ;
20138: CALL_OW 19
// hc_importance := 0 ;
20142: LD_ADDR_OWVAR 32
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// tmp := [ ] ;
20150: LD_ADDR_VAR 0 2
20154: PUSH
20155: EMPTY
20156: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20157: LD_INT 0
20159: PPUSH
20160: LD_INT 2
20162: PPUSH
20163: LD_INT 6
20165: PPUSH
20166: CALL_OW 380
// eng := CreateHuman ;
20170: LD_ADDR_VAR 0 4
20174: PUSH
20175: CALL_OW 44
20179: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20180: LD_VAR 0 4
20184: PPUSH
20185: LD_INT 78
20187: PPUSH
20188: LD_INT 2
20190: PPUSH
20191: LD_INT 4
20193: PPUSH
20194: LD_INT 0
20196: PPUSH
20197: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20201: LD_ADDR_VAR 0 3
20205: PUSH
20206: DOUBLE
20207: LD_INT 1
20209: DEC
20210: ST_TO_ADDR
20211: LD_INT 2
20213: PUSH
20214: LD_OWVAR 67
20218: PLUS
20219: PUSH
20220: FOR_TO
20221: IFFALSE 20302
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20223: LD_INT 0
20225: PPUSH
20226: LD_INT 1
20228: PPUSH
20229: LD_INT 4
20231: PUSH
20232: LD_INT 5
20234: PUSH
20235: LD_INT 6
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: PUSH
20243: LD_OWVAR 67
20247: ARRAY
20248: PPUSH
20249: CALL_OW 380
// un := CreateHuman ;
20253: LD_ADDR_VAR 0 1
20257: PUSH
20258: CALL_OW 44
20262: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_INT 78
20270: PPUSH
20271: LD_INT 2
20273: PPUSH
20274: LD_INT 4
20276: PPUSH
20277: LD_INT 0
20279: PPUSH
20280: CALL_OW 50
// tmp := tmp ^ un ;
20284: LD_ADDR_VAR 0 2
20288: PUSH
20289: LD_VAR 0 2
20293: PUSH
20294: LD_VAR 0 1
20298: ADD
20299: ST_TO_ADDR
// end ;
20300: GO 20220
20302: POP
20303: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20304: LD_VAR 0 2
20308: PPUSH
20309: LD_INT 49
20311: PPUSH
20312: LD_INT 3
20314: PPUSH
20315: CALL_OW 111
// wait ( 0 0$2 ) ;
20319: LD_INT 70
20321: PPUSH
20322: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20326: LD_VAR 0 4
20330: PPUSH
20331: LD_INT 49
20333: PPUSH
20334: LD_INT 3
20336: PPUSH
20337: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20341: LD_VAR 0 4
20345: PPUSH
20346: LD_INT 4
20348: PPUSH
20349: CALL_OW 227
// wait ( 0 0$10 ) ;
20353: LD_INT 350
20355: PPUSH
20356: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20360: LD_INT 35
20362: PPUSH
20363: CALL_OW 67
// for i in tmp do
20367: LD_ADDR_VAR 0 3
20371: PUSH
20372: LD_VAR 0 2
20376: PUSH
20377: FOR_IN
20378: IFFALSE 20458
// if not IsOk ( i ) then
20380: LD_VAR 0 3
20384: PPUSH
20385: CALL_OW 302
20389: NOT
20390: IFFALSE 20410
// tmp := tmp diff i else
20392: LD_ADDR_VAR 0 2
20396: PUSH
20397: LD_VAR 0 2
20401: PUSH
20402: LD_VAR 0 3
20406: DIFF
20407: ST_TO_ADDR
20408: GO 20456
// if not HasTask ( i ) then
20410: LD_VAR 0 3
20414: PPUSH
20415: CALL_OW 314
20419: NOT
20420: IFFALSE 20456
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20422: LD_VAR 0 3
20426: PPUSH
20427: LD_INT 22
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PPUSH
20437: CALL_OW 69
20441: PPUSH
20442: LD_VAR 0 3
20446: PPUSH
20447: CALL_OW 74
20451: PPUSH
20452: CALL_OW 115
20456: GO 20377
20458: POP
20459: POP
// until not tmp ;
20460: LD_VAR 0 2
20464: NOT
20465: IFFALSE 20360
// end ; end_of_file
20467: PPOPN 4
20469: END
// every 0 0$1 trigger startTimer = 1 do
20470: LD_EXP 30
20474: PUSH
20475: LD_INT 1
20477: EQUAL
20478: IFFALSE 20608
20480: GO 20482
20482: DISABLE
// begin enable ;
20483: ENABLE
// if timerStatus = 1 then
20484: LD_EXP 29
20488: PUSH
20489: LD_INT 1
20491: EQUAL
20492: IFFALSE 20525
// begin timeToSupport = timeToSupport - 0 0$01 ;
20494: LD_ADDR_EXP 28
20498: PUSH
20499: LD_EXP 28
20503: PUSH
20504: LD_INT 35
20506: MINUS
20507: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20508: LD_ADDR_OWVAR 47
20512: PUSH
20513: LD_STRING #Am04-1
20515: PUSH
20516: LD_EXP 28
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
// end ; if timerStatus = 2 then
20525: LD_EXP 29
20529: PUSH
20530: LD_INT 2
20532: EQUAL
20533: IFFALSE 20566
// begin timeToSupport = timeToSupport - 0 0$01 ;
20535: LD_ADDR_EXP 28
20539: PUSH
20540: LD_EXP 28
20544: PUSH
20545: LD_INT 35
20547: MINUS
20548: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20549: LD_ADDR_OWVAR 47
20553: PUSH
20554: LD_STRING #Am04-2
20556: PUSH
20557: LD_EXP 28
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: ST_TO_ADDR
// end ; if timerStatus = 3 then
20566: LD_EXP 29
20570: PUSH
20571: LD_INT 3
20573: EQUAL
20574: IFFALSE 20590
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20576: LD_ADDR_EXP 27
20580: PUSH
20581: LD_EXP 27
20585: PUSH
20586: LD_INT 35
20588: MINUS
20589: ST_TO_ADDR
// end ; if timerStatus = 4 then
20590: LD_EXP 29
20594: PUSH
20595: LD_INT 4
20597: EQUAL
20598: IFFALSE 20608
// begin display_strings =  ;
20600: LD_ADDR_OWVAR 47
20604: PUSH
20605: LD_STRING 
20607: ST_TO_ADDR
// end ; end ; end_of_file
20608: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20609: LD_INT 4
20611: PPUSH
20612: CALL_OW 301
20616: IFFALSE 20628
20618: GO 20620
20620: DISABLE
// YouLost ( Base ) ; end_of_file
20621: LD_STRING Base
20623: PPUSH
20624: CALL_OW 104
20628: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20629: LD_EXP 15
20633: PPUSH
20634: CALL_OW 301
20638: PUSH
20639: LD_INT 22
20641: PUSH
20642: LD_INT 3
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 21
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PPUSH
20663: CALL_OW 69
20667: PUSH
20668: LD_INT 14
20670: PUSH
20671: LD_INT 13
20673: PUSH
20674: LD_INT 12
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: LIST
20681: PUSH
20682: LD_OWVAR 67
20686: ARRAY
20687: LESS
20688: AND
20689: IFFALSE 21275
20691: GO 20693
20693: DISABLE
20694: LD_INT 0
20696: PPUSH
20697: PPUSH
20698: PPUSH
// begin AIEnable = 0 ;
20699: LD_ADDR_EXP 37
20703: PUSH
20704: LD_INT 0
20706: ST_TO_ADDR
// escapeAvalaible = 1 ;
20707: LD_ADDR_EXP 40
20711: PUSH
20712: LD_INT 1
20714: ST_TO_ADDR
// Video ( true ) ;
20715: LD_INT 1
20717: PPUSH
20718: CALL 75799 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20722: LD_INT 3
20724: PPUSH
20725: LD_INT 1
20727: PPUSH
20728: LD_INT 1
20730: PPUSH
20731: LD_INT 0
20733: PPUSH
20734: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20738: LD_INT 6
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: LD_INT 1
20746: PPUSH
20747: LD_INT 0
20749: PPUSH
20750: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20754: LD_INT 5
20756: PPUSH
20757: LD_INT 1
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: LD_INT 0
20765: PPUSH
20766: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20770: LD_INT 3
20772: PPUSH
20773: LD_INT 1
20775: PPUSH
20776: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20780: LD_INT 97
20782: PPUSH
20783: LD_INT 91
20785: PPUSH
20786: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20790: LD_INT 22
20792: PUSH
20793: LD_INT 3
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 21
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 69
20818: PPUSH
20819: CALL_OW 121
// wait ( 0 0$01 ) ;
20823: LD_INT 35
20825: PPUSH
20826: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20830: LD_INT 22
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 21
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: PPUSH
20859: LD_INT 124
20861: PPUSH
20862: LD_INT 98
20864: PPUSH
20865: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20869: LD_INT 22
20871: PUSH
20872: LD_INT 5
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PPUSH
20893: CALL_OW 69
20897: PPUSH
20898: CALL_OW 121
// wait ( 0 0$01 ) ;
20902: LD_INT 35
20904: PPUSH
20905: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20909: LD_INT 22
20911: PUSH
20912: LD_INT 5
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 21
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL_OW 69
20937: PPUSH
20938: LD_INT 124
20940: PPUSH
20941: LD_INT 98
20943: PPUSH
20944: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20948: LD_INT 22
20950: PUSH
20951: LD_INT 6
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 21
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PPUSH
20972: CALL_OW 69
20976: PPUSH
20977: CALL_OW 121
// wait ( 0 0$01 ) ;
20981: LD_INT 35
20983: PPUSH
20984: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20988: LD_INT 22
20990: PUSH
20991: LD_INT 6
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 21
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PPUSH
21012: CALL_OW 69
21016: PPUSH
21017: LD_INT 124
21019: PPUSH
21020: LD_INT 98
21022: PPUSH
21023: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21027: LD_INT 22
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 21
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PPUSH
21051: CALL_OW 69
21055: PPUSH
21056: LD_INT 124
21058: PPUSH
21059: LD_INT 96
21061: PPUSH
21062: CALL_OW 114
// wait ( 0 0$1 ) ;
21066: LD_INT 35
21068: PPUSH
21069: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21073: LD_INT 124
21075: PPUSH
21076: LD_INT 96
21078: PPUSH
21079: CALL_OW 84
// p := 0 0$0 ;
21083: LD_ADDR_VAR 0 3
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21091: LD_ADDR_VAR 0 2
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 22
21101: PUSH
21102: LD_INT 3
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 22
21111: PUSH
21112: LD_INT 6
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PPUSH
21138: CALL_OW 69
21142: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21143: LD_INT 35
21145: PPUSH
21146: CALL_OW 67
// p := p + 0 0$1 ;
21150: LD_ADDR_VAR 0 3
21154: PUSH
21155: LD_VAR 0 3
21159: PUSH
21160: LD_INT 35
21162: PLUS
21163: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21164: LD_VAR 0 2
21168: PPUSH
21169: LD_INT 5
21171: PPUSH
21172: CALL_OW 113
// for i in tmp do
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: LD_VAR 0 2
21185: PUSH
21186: FOR_IN
21187: IFFALSE 21214
// if IsInArea ( tmp , RussianEscape ) then
21189: LD_VAR 0 2
21193: PPUSH
21194: LD_INT 5
21196: PPUSH
21197: CALL_OW 308
21201: IFFALSE 21212
// RemoveUnit ( i ) ;
21203: LD_VAR 0 1
21207: PPUSH
21208: CALL_OW 64
21212: GO 21186
21214: POP
21215: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21216: LD_INT 23
21218: PUSH
21219: LD_INT 3
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 21
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 24
21238: PUSH
21239: LD_INT 250
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: PPUSH
21251: CALL_OW 69
21255: PUSH
21256: LD_INT 0
21258: EQUAL
21259: PUSH
21260: LD_VAR 0 3
21264: PUSH
21265: LD_INT 245
21267: GREATEREQUAL
21268: OR
21269: IFFALSE 21143
// FinishMission ;
21271: CALL 21278 0 0
// end ;
21275: PPOPN 3
21277: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21278: LD_INT 0
21280: PPUSH
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
// if not vehicleProduceCounter then
21285: LD_EXP 42
21289: NOT
21290: IFFALSE 21299
// SetAchievement ( ACH_INFANTRY ) ;
21292: LD_STRING ACH_INFANTRY
21294: PPUSH
21295: CALL_OW 543
// if tick <= 20 20$00 then
21299: LD_OWVAR 1
21303: PUSH
21304: LD_INT 42000
21306: LESSEQUAL
21307: IFFALSE 21323
// begin wait ( 3 ) ;
21309: LD_INT 3
21311: PPUSH
21312: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21316: LD_STRING ACH_ASPEED_4
21318: PPUSH
21319: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21323: LD_INT 22
21325: PPUSH
21326: CALL 21967 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21330: LD_INT 69
21332: PPUSH
21333: LD_INT 1
21335: PPUSH
21336: CALL_OW 321
21340: PPUSH
21341: LD_STRING GatlingInGamma
21343: PPUSH
21344: CALL_OW 39
// m1 := false ;
21348: LD_ADDR_VAR 0 3
21352: PUSH
21353: LD_INT 0
21355: ST_TO_ADDR
// m2 := false ;
21356: LD_ADDR_VAR 0 4
21360: PUSH
21361: LD_INT 0
21363: ST_TO_ADDR
// m3 := false ;
21364: LD_ADDR_VAR 0 5
21368: PUSH
21369: LD_INT 0
21371: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21372: LD_EXP 34
21376: PUSH
21377: LD_INT 1
21379: EQUAL
21380: PUSH
21381: LD_EXP 35
21385: PUSH
21386: LD_INT 1
21388: EQUAL
21389: AND
21390: IFFALSE 21412
// begin AddMedal ( oil , 1 ) ;
21392: LD_STRING oil
21394: PPUSH
21395: LD_INT 1
21397: PPUSH
21398: CALL_OW 101
// m1 := true ;
21402: LD_ADDR_VAR 0 3
21406: PUSH
21407: LD_INT 1
21409: ST_TO_ADDR
// end else
21410: GO 21505
// begin if buildOil = 1 and buildPower = 0 then
21412: LD_EXP 34
21416: PUSH
21417: LD_INT 1
21419: EQUAL
21420: PUSH
21421: LD_EXP 35
21425: PUSH
21426: LD_INT 0
21428: EQUAL
21429: AND
21430: IFFALSE 21443
// AddMedal ( oil , - 1 ) ;
21432: LD_STRING oil
21434: PPUSH
21435: LD_INT 1
21437: NEG
21438: PPUSH
21439: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21443: LD_EXP 34
21447: PUSH
21448: LD_INT 0
21450: EQUAL
21451: PUSH
21452: LD_EXP 35
21456: PUSH
21457: LD_INT 1
21459: EQUAL
21460: AND
21461: IFFALSE 21474
// AddMedal ( oil , - 2 ) ;
21463: LD_STRING oil
21465: PPUSH
21466: LD_INT 2
21468: NEG
21469: PPUSH
21470: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21474: LD_EXP 34
21478: PUSH
21479: LD_INT 0
21481: EQUAL
21482: PUSH
21483: LD_EXP 35
21487: PUSH
21488: LD_INT 0
21490: EQUAL
21491: AND
21492: IFFALSE 21505
// AddMedal ( oil , - 3 ) ;
21494: LD_STRING oil
21496: PPUSH
21497: LD_INT 3
21499: NEG
21500: PPUSH
21501: CALL_OW 101
// end ; if lostCounter > 3 then
21505: LD_EXP 38
21509: PUSH
21510: LD_INT 3
21512: GREATER
21513: IFFALSE 21528
// AddMedal ( deaths , - 1 ) else
21515: LD_STRING deaths
21517: PPUSH
21518: LD_INT 1
21520: NEG
21521: PPUSH
21522: CALL_OW 101
21526: GO 21546
// begin AddMedal ( deaths , 1 ) ;
21528: LD_STRING deaths
21530: PPUSH
21531: LD_INT 1
21533: PPUSH
21534: CALL_OW 101
// m2 := true ;
21538: LD_ADDR_VAR 0 4
21542: PUSH
21543: LD_INT 1
21545: ST_TO_ADDR
// end ; if honor = 1 then
21546: LD_EXP 39
21550: PUSH
21551: LD_INT 1
21553: EQUAL
21554: IFFALSE 21576
// begin AddMedal ( honour , 1 ) ;
21556: LD_STRING honour
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: CALL_OW 101
// m3 := true ;
21566: LD_ADDR_VAR 0 5
21570: PUSH
21571: LD_INT 1
21573: ST_TO_ADDR
// end else
21574: GO 21587
// begin AddMedal ( honour , - 1 ) ;
21576: LD_STRING honour
21578: PPUSH
21579: LD_INT 1
21581: NEG
21582: PPUSH
21583: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21587: LD_VAR 0 3
21591: PUSH
21592: LD_VAR 0 4
21596: AND
21597: PUSH
21598: LD_VAR 0 5
21602: AND
21603: PUSH
21604: LD_OWVAR 67
21608: PUSH
21609: LD_INT 3
21611: EQUAL
21612: AND
21613: IFFALSE 21625
// SetAchievementEX ( ACH_AMER , 4 ) ;
21615: LD_STRING ACH_AMER
21617: PPUSH
21618: LD_INT 4
21620: PPUSH
21621: CALL_OW 564
// GiveMedals ( Main ) ;
21625: LD_STRING Main
21627: PPUSH
21628: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21632: LD_INT 22
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 23
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 21
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 69
21671: PPUSH
21672: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21676: LD_EXP 1
21680: PPUSH
21681: LD_EXP 48
21685: PUSH
21686: LD_STRING JMM
21688: STR
21689: PPUSH
21690: CALL_OW 38
// if IsOK ( Bobby ) then
21694: LD_EXP 2
21698: PPUSH
21699: CALL_OW 302
21703: IFFALSE 21723
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21705: LD_EXP 2
21709: PPUSH
21710: LD_EXP 48
21714: PUSH
21715: LD_STRING Bobby
21717: STR
21718: PPUSH
21719: CALL_OW 38
// if IsOK ( Cyrus ) then
21723: LD_EXP 3
21727: PPUSH
21728: CALL_OW 302
21732: IFFALSE 21752
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21734: LD_EXP 3
21738: PPUSH
21739: LD_EXP 48
21743: PUSH
21744: LD_STRING Cyrus
21746: STR
21747: PPUSH
21748: CALL_OW 38
// if IsOK ( Lisa ) then
21752: LD_EXP 4
21756: PPUSH
21757: CALL_OW 302
21761: IFFALSE 21781
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21763: LD_EXP 4
21767: PPUSH
21768: LD_EXP 48
21772: PUSH
21773: LD_STRING Lisa
21775: STR
21776: PPUSH
21777: CALL_OW 38
// if IsOK ( Brown ) then
21781: LD_EXP 7
21785: PPUSH
21786: CALL_OW 302
21790: IFFALSE 21810
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21792: LD_EXP 7
21796: PPUSH
21797: LD_EXP 48
21801: PUSH
21802: LD_STRING Brown
21804: STR
21805: PPUSH
21806: CALL_OW 38
// if not IsDead ( Donaldson ) then
21810: LD_EXP 13
21814: PPUSH
21815: CALL_OW 301
21819: NOT
21820: IFFALSE 21840
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21822: LD_EXP 13
21826: PPUSH
21827: LD_EXP 48
21831: PUSH
21832: LD_STRING Donaldson
21834: STR
21835: PPUSH
21836: CALL_OW 38
// if not IsDead ( Frank ) then
21840: LD_EXP 5
21844: PPUSH
21845: CALL_OW 301
21849: NOT
21850: IFFALSE 21870
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21852: LD_EXP 5
21856: PPUSH
21857: LD_EXP 48
21861: PUSH
21862: LD_STRING Frank
21864: STR
21865: PPUSH
21866: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21870: LD_INT 50
21872: PUSH
21873: EMPTY
21874: LIST
21875: PUSH
21876: LD_INT 22
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 21
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: PPUSH
21901: CALL_OW 69
21905: PUSH
21906: LD_EXP 1
21910: PUSH
21911: LD_EXP 2
21915: PUSH
21916: LD_EXP 3
21920: PUSH
21921: LD_EXP 4
21925: PUSH
21926: LD_EXP 7
21930: PUSH
21931: LD_EXP 13
21935: PUSH
21936: LD_EXP 5
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: DIFF
21950: PPUSH
21951: LD_STRING 04_other_survivors
21953: PPUSH
21954: CALL_OW 38
// YouWin ;
21958: CALL_OW 103
// end ;
21962: LD_VAR 0 1
21966: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21967: LD_INT 0
21969: PPUSH
21970: PPUSH
21971: PPUSH
21972: PPUSH
// gammaBase = [ ] ;
21973: LD_ADDR_VAR 0 4
21977: PUSH
21978: EMPTY
21979: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
21980: LD_ADDR_VAR 0 5
21984: PUSH
21985: LD_VAR 0 1
21989: PPUSH
21990: LD_INT 22
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 21
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PPUSH
22014: CALL_OW 70
22018: ST_TO_ADDR
// for i in buildings do
22019: LD_ADDR_VAR 0 3
22023: PUSH
22024: LD_VAR 0 5
22028: PUSH
22029: FOR_IN
22030: IFFALSE 22367
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22032: LD_VAR 0 3
22036: PPUSH
22037: CALL_OW 266
22041: PUSH
22042: LD_INT 6
22044: PUSH
22045: LD_INT 7
22047: PUSH
22048: LD_INT 8
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: IN
22056: IFFALSE 22170
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22058: LD_ADDR_VAR 0 4
22062: PUSH
22063: LD_VAR 0 4
22067: PUSH
22068: LD_VAR 0 3
22072: PPUSH
22073: CALL_OW 266
22077: PUSH
22078: LD_VAR 0 3
22082: PPUSH
22083: CALL_OW 250
22087: PUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: CALL_OW 251
22097: PUSH
22098: LD_VAR 0 3
22102: PPUSH
22103: CALL_OW 254
22107: PUSH
22108: LD_VAR 0 3
22112: PPUSH
22113: CALL_OW 267
22117: PUSH
22118: LD_VAR 0 3
22122: PPUSH
22123: CALL_OW 248
22127: PUSH
22128: LD_VAR 0 3
22132: PPUSH
22133: LD_INT 1
22135: PPUSH
22136: CALL_OW 268
22140: PUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: LD_INT 2
22148: PPUSH
22149: CALL_OW 268
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: ADD
22167: ST_TO_ADDR
22168: GO 22365
// if GetBType ( i ) in [ b_bunker ] then
22170: LD_VAR 0 3
22174: PPUSH
22175: CALL_OW 266
22179: PUSH
22180: LD_INT 32
22182: PUSH
22183: EMPTY
22184: LIST
22185: IN
22186: IFFALSE 22283
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22188: LD_ADDR_VAR 0 4
22192: PUSH
22193: LD_VAR 0 4
22197: PUSH
22198: LD_VAR 0 3
22202: PPUSH
22203: CALL_OW 266
22207: PUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: CALL_OW 250
22217: PUSH
22218: LD_VAR 0 3
22222: PPUSH
22223: CALL_OW 251
22227: PUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: CALL_OW 254
22237: PUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: CALL_OW 267
22247: PUSH
22248: LD_VAR 0 3
22252: PPUSH
22253: CALL_OW 248
22257: PUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL_OW 269
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: ADD
22280: ST_TO_ADDR
22281: GO 22365
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22283: LD_ADDR_VAR 0 4
22287: PUSH
22288: LD_VAR 0 4
22292: PUSH
22293: LD_VAR 0 3
22297: PPUSH
22298: CALL_OW 266
22302: PUSH
22303: LD_VAR 0 3
22307: PPUSH
22308: CALL_OW 250
22312: PUSH
22313: LD_VAR 0 3
22317: PPUSH
22318: CALL_OW 251
22322: PUSH
22323: LD_VAR 0 3
22327: PPUSH
22328: CALL_OW 254
22332: PUSH
22333: LD_VAR 0 3
22337: PPUSH
22338: CALL_OW 267
22342: PUSH
22343: LD_VAR 0 3
22347: PPUSH
22348: CALL_OW 248
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: ADD
22364: ST_TO_ADDR
// end ;
22365: GO 22029
22367: POP
22368: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22369: LD_VAR 0 4
22373: PPUSH
22374: LD_STRING GammaBase
22376: PPUSH
22377: CALL_OW 39
// end ; end_of_file
22381: LD_VAR 0 2
22385: RET
// every 1 1$15 do
22386: GO 22388
22388: DISABLE
// begin if supply <= 13 and supply > 7 then
22389: LD_EXP 36
22393: PUSH
22394: LD_INT 13
22396: LESSEQUAL
22397: PUSH
22398: LD_EXP 36
22402: PUSH
22403: LD_INT 7
22405: GREATER
22406: AND
22407: IFFALSE 22430
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22409: LD_INT 3
22411: PPUSH
22412: LD_INT 5
22414: PPUSH
22415: CALL_OW 12
22419: PPUSH
22420: LD_INT 18
22422: PPUSH
22423: LD_INT 1
22425: PPUSH
22426: CALL_OW 55
// if supply <= 7 and supply > 4 then
22430: LD_EXP 36
22434: PUSH
22435: LD_INT 7
22437: LESSEQUAL
22438: PUSH
22439: LD_EXP 36
22443: PUSH
22444: LD_INT 4
22446: GREATER
22447: AND
22448: IFFALSE 22471
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22450: LD_INT 3
22452: PPUSH
22453: LD_INT 5
22455: PPUSH
22456: CALL_OW 12
22460: PPUSH
22461: LD_INT 19
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL_OW 55
// if supply <= 4 and supply > 0 then
22471: LD_EXP 36
22475: PUSH
22476: LD_INT 4
22478: LESSEQUAL
22479: PUSH
22480: LD_EXP 36
22484: PUSH
22485: LD_INT 0
22487: GREATER
22488: AND
22489: IFFALSE 22512
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22491: LD_INT 3
22493: PPUSH
22494: LD_INT 5
22496: PPUSH
22497: CALL_OW 12
22501: PPUSH
22502: LD_INT 20
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: CALL_OW 55
// if supply > 0 then
22512: LD_EXP 36
22516: PUSH
22517: LD_INT 0
22519: GREATER
22520: IFFALSE 22537
// begin supply = supply - 1 ;
22522: LD_ADDR_EXP 36
22526: PUSH
22527: LD_EXP 36
22531: PUSH
22532: LD_INT 1
22534: MINUS
22535: ST_TO_ADDR
// enable ;
22536: ENABLE
// end ; end ; end_of_file
22537: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22538: LD_INT 0
22540: PPUSH
// ar_miner := 81 ;
22541: LD_ADDR_EXP 59
22545: PUSH
22546: LD_INT 81
22548: ST_TO_ADDR
// ar_crane := 88 ;
22549: LD_ADDR_EXP 58
22553: PUSH
22554: LD_INT 88
22556: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22557: LD_ADDR_EXP 53
22561: PUSH
22562: LD_INT 89
22564: ST_TO_ADDR
// us_hack := 99 ;
22565: LD_ADDR_EXP 54
22569: PUSH
22570: LD_INT 99
22572: ST_TO_ADDR
// us_artillery := 97 ;
22573: LD_ADDR_EXP 55
22577: PUSH
22578: LD_INT 97
22580: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22581: LD_ADDR_EXP 56
22585: PUSH
22586: LD_INT 91
22588: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22589: LD_ADDR_EXP 57
22593: PUSH
22594: LD_INT 92
22596: ST_TO_ADDR
// ru_radar := 98 ;
22597: LD_ADDR_EXP 52
22601: PUSH
22602: LD_INT 98
22604: ST_TO_ADDR
// tech_Artillery := 80 ;
22605: LD_ADDR_EXP 60
22609: PUSH
22610: LD_INT 80
22612: ST_TO_ADDR
// tech_RadMat := 81 ;
22613: LD_ADDR_EXP 61
22617: PUSH
22618: LD_INT 81
22620: ST_TO_ADDR
// tech_BasicTools := 82 ;
22621: LD_ADDR_EXP 62
22625: PUSH
22626: LD_INT 82
22628: ST_TO_ADDR
// tech_Cargo := 83 ;
22629: LD_ADDR_EXP 63
22633: PUSH
22634: LD_INT 83
22636: ST_TO_ADDR
// tech_Track := 84 ;
22637: LD_ADDR_EXP 64
22641: PUSH
22642: LD_INT 84
22644: ST_TO_ADDR
// tech_Crane := 85 ;
22645: LD_ADDR_EXP 65
22649: PUSH
22650: LD_INT 85
22652: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22653: LD_ADDR_EXP 66
22657: PUSH
22658: LD_INT 86
22660: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22661: LD_ADDR_EXP 67
22665: PUSH
22666: LD_INT 87
22668: ST_TO_ADDR
// end ;
22669: LD_VAR 0 1
22673: RET
// every 1 do
22674: GO 22676
22676: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22677: CALL 22538 0 0
22681: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
22682: LD_VAR 0 2
22686: PUSH
22687: LD_INT 100
22689: EQUAL
22690: IFFALSE 23639
// begin if not StreamModeActive then
22692: LD_EXP 68
22696: NOT
22697: IFFALSE 22707
// StreamModeActive := true ;
22699: LD_ADDR_EXP 68
22703: PUSH
22704: LD_INT 1
22706: ST_TO_ADDR
// if p3 = 0 then
22707: LD_VAR 0 3
22711: PUSH
22712: LD_INT 0
22714: EQUAL
22715: IFFALSE 22721
// InitStreamMode ;
22717: CALL 23797 0 0
// if p3 = 1 then
22721: LD_VAR 0 3
22725: PUSH
22726: LD_INT 1
22728: EQUAL
22729: IFFALSE 22739
// sRocket := true ;
22731: LD_ADDR_EXP 73
22735: PUSH
22736: LD_INT 1
22738: ST_TO_ADDR
// if p3 = 2 then
22739: LD_VAR 0 3
22743: PUSH
22744: LD_INT 2
22746: EQUAL
22747: IFFALSE 22757
// sSpeed := true ;
22749: LD_ADDR_EXP 72
22753: PUSH
22754: LD_INT 1
22756: ST_TO_ADDR
// if p3 = 3 then
22757: LD_VAR 0 3
22761: PUSH
22762: LD_INT 3
22764: EQUAL
22765: IFFALSE 22775
// sEngine := true ;
22767: LD_ADDR_EXP 74
22771: PUSH
22772: LD_INT 1
22774: ST_TO_ADDR
// if p3 = 4 then
22775: LD_VAR 0 3
22779: PUSH
22780: LD_INT 4
22782: EQUAL
22783: IFFALSE 22793
// sSpec := true ;
22785: LD_ADDR_EXP 71
22789: PUSH
22790: LD_INT 1
22792: ST_TO_ADDR
// if p3 = 5 then
22793: LD_VAR 0 3
22797: PUSH
22798: LD_INT 5
22800: EQUAL
22801: IFFALSE 22811
// sLevel := true ;
22803: LD_ADDR_EXP 75
22807: PUSH
22808: LD_INT 1
22810: ST_TO_ADDR
// if p3 = 6 then
22811: LD_VAR 0 3
22815: PUSH
22816: LD_INT 6
22818: EQUAL
22819: IFFALSE 22829
// sArmoury := true ;
22821: LD_ADDR_EXP 76
22825: PUSH
22826: LD_INT 1
22828: ST_TO_ADDR
// if p3 = 7 then
22829: LD_VAR 0 3
22833: PUSH
22834: LD_INT 7
22836: EQUAL
22837: IFFALSE 22847
// sRadar := true ;
22839: LD_ADDR_EXP 77
22843: PUSH
22844: LD_INT 1
22846: ST_TO_ADDR
// if p3 = 8 then
22847: LD_VAR 0 3
22851: PUSH
22852: LD_INT 8
22854: EQUAL
22855: IFFALSE 22865
// sBunker := true ;
22857: LD_ADDR_EXP 78
22861: PUSH
22862: LD_INT 1
22864: ST_TO_ADDR
// if p3 = 9 then
22865: LD_VAR 0 3
22869: PUSH
22870: LD_INT 9
22872: EQUAL
22873: IFFALSE 22883
// sHack := true ;
22875: LD_ADDR_EXP 79
22879: PUSH
22880: LD_INT 1
22882: ST_TO_ADDR
// if p3 = 10 then
22883: LD_VAR 0 3
22887: PUSH
22888: LD_INT 10
22890: EQUAL
22891: IFFALSE 22901
// sFire := true ;
22893: LD_ADDR_EXP 80
22897: PUSH
22898: LD_INT 1
22900: ST_TO_ADDR
// if p3 = 11 then
22901: LD_VAR 0 3
22905: PUSH
22906: LD_INT 11
22908: EQUAL
22909: IFFALSE 22919
// sRefresh := true ;
22911: LD_ADDR_EXP 81
22915: PUSH
22916: LD_INT 1
22918: ST_TO_ADDR
// if p3 = 12 then
22919: LD_VAR 0 3
22923: PUSH
22924: LD_INT 12
22926: EQUAL
22927: IFFALSE 22937
// sExp := true ;
22929: LD_ADDR_EXP 82
22933: PUSH
22934: LD_INT 1
22936: ST_TO_ADDR
// if p3 = 13 then
22937: LD_VAR 0 3
22941: PUSH
22942: LD_INT 13
22944: EQUAL
22945: IFFALSE 22955
// sDepot := true ;
22947: LD_ADDR_EXP 83
22951: PUSH
22952: LD_INT 1
22954: ST_TO_ADDR
// if p3 = 14 then
22955: LD_VAR 0 3
22959: PUSH
22960: LD_INT 14
22962: EQUAL
22963: IFFALSE 22973
// sFlag := true ;
22965: LD_ADDR_EXP 84
22969: PUSH
22970: LD_INT 1
22972: ST_TO_ADDR
// if p3 = 15 then
22973: LD_VAR 0 3
22977: PUSH
22978: LD_INT 15
22980: EQUAL
22981: IFFALSE 22991
// sKamikadze := true ;
22983: LD_ADDR_EXP 92
22987: PUSH
22988: LD_INT 1
22990: ST_TO_ADDR
// if p3 = 16 then
22991: LD_VAR 0 3
22995: PUSH
22996: LD_INT 16
22998: EQUAL
22999: IFFALSE 23009
// sTroll := true ;
23001: LD_ADDR_EXP 93
23005: PUSH
23006: LD_INT 1
23008: ST_TO_ADDR
// if p3 = 17 then
23009: LD_VAR 0 3
23013: PUSH
23014: LD_INT 17
23016: EQUAL
23017: IFFALSE 23027
// sSlow := true ;
23019: LD_ADDR_EXP 94
23023: PUSH
23024: LD_INT 1
23026: ST_TO_ADDR
// if p3 = 18 then
23027: LD_VAR 0 3
23031: PUSH
23032: LD_INT 18
23034: EQUAL
23035: IFFALSE 23045
// sLack := true ;
23037: LD_ADDR_EXP 95
23041: PUSH
23042: LD_INT 1
23044: ST_TO_ADDR
// if p3 = 19 then
23045: LD_VAR 0 3
23049: PUSH
23050: LD_INT 19
23052: EQUAL
23053: IFFALSE 23063
// sTank := true ;
23055: LD_ADDR_EXP 97
23059: PUSH
23060: LD_INT 1
23062: ST_TO_ADDR
// if p3 = 20 then
23063: LD_VAR 0 3
23067: PUSH
23068: LD_INT 20
23070: EQUAL
23071: IFFALSE 23081
// sRemote := true ;
23073: LD_ADDR_EXP 98
23077: PUSH
23078: LD_INT 1
23080: ST_TO_ADDR
// if p3 = 21 then
23081: LD_VAR 0 3
23085: PUSH
23086: LD_INT 21
23088: EQUAL
23089: IFFALSE 23099
// sPowell := true ;
23091: LD_ADDR_EXP 99
23095: PUSH
23096: LD_INT 1
23098: ST_TO_ADDR
// if p3 = 22 then
23099: LD_VAR 0 3
23103: PUSH
23104: LD_INT 22
23106: EQUAL
23107: IFFALSE 23117
// sTeleport := true ;
23109: LD_ADDR_EXP 102
23113: PUSH
23114: LD_INT 1
23116: ST_TO_ADDR
// if p3 = 23 then
23117: LD_VAR 0 3
23121: PUSH
23122: LD_INT 23
23124: EQUAL
23125: IFFALSE 23135
// sOilTower := true ;
23127: LD_ADDR_EXP 104
23131: PUSH
23132: LD_INT 1
23134: ST_TO_ADDR
// if p3 = 24 then
23135: LD_VAR 0 3
23139: PUSH
23140: LD_INT 24
23142: EQUAL
23143: IFFALSE 23153
// sShovel := true ;
23145: LD_ADDR_EXP 105
23149: PUSH
23150: LD_INT 1
23152: ST_TO_ADDR
// if p3 = 25 then
23153: LD_VAR 0 3
23157: PUSH
23158: LD_INT 25
23160: EQUAL
23161: IFFALSE 23171
// sSheik := true ;
23163: LD_ADDR_EXP 106
23167: PUSH
23168: LD_INT 1
23170: ST_TO_ADDR
// if p3 = 26 then
23171: LD_VAR 0 3
23175: PUSH
23176: LD_INT 26
23178: EQUAL
23179: IFFALSE 23189
// sEarthquake := true ;
23181: LD_ADDR_EXP 108
23185: PUSH
23186: LD_INT 1
23188: ST_TO_ADDR
// if p3 = 27 then
23189: LD_VAR 0 3
23193: PUSH
23194: LD_INT 27
23196: EQUAL
23197: IFFALSE 23207
// sAI := true ;
23199: LD_ADDR_EXP 109
23203: PUSH
23204: LD_INT 1
23206: ST_TO_ADDR
// if p3 = 28 then
23207: LD_VAR 0 3
23211: PUSH
23212: LD_INT 28
23214: EQUAL
23215: IFFALSE 23225
// sCargo := true ;
23217: LD_ADDR_EXP 112
23221: PUSH
23222: LD_INT 1
23224: ST_TO_ADDR
// if p3 = 29 then
23225: LD_VAR 0 3
23229: PUSH
23230: LD_INT 29
23232: EQUAL
23233: IFFALSE 23243
// sDLaser := true ;
23235: LD_ADDR_EXP 113
23239: PUSH
23240: LD_INT 1
23242: ST_TO_ADDR
// if p3 = 30 then
23243: LD_VAR 0 3
23247: PUSH
23248: LD_INT 30
23250: EQUAL
23251: IFFALSE 23261
// sExchange := true ;
23253: LD_ADDR_EXP 114
23257: PUSH
23258: LD_INT 1
23260: ST_TO_ADDR
// if p3 = 31 then
23261: LD_VAR 0 3
23265: PUSH
23266: LD_INT 31
23268: EQUAL
23269: IFFALSE 23279
// sFac := true ;
23271: LD_ADDR_EXP 115
23275: PUSH
23276: LD_INT 1
23278: ST_TO_ADDR
// if p3 = 32 then
23279: LD_VAR 0 3
23283: PUSH
23284: LD_INT 32
23286: EQUAL
23287: IFFALSE 23297
// sPower := true ;
23289: LD_ADDR_EXP 116
23293: PUSH
23294: LD_INT 1
23296: ST_TO_ADDR
// if p3 = 33 then
23297: LD_VAR 0 3
23301: PUSH
23302: LD_INT 33
23304: EQUAL
23305: IFFALSE 23315
// sRandom := true ;
23307: LD_ADDR_EXP 117
23311: PUSH
23312: LD_INT 1
23314: ST_TO_ADDR
// if p3 = 34 then
23315: LD_VAR 0 3
23319: PUSH
23320: LD_INT 34
23322: EQUAL
23323: IFFALSE 23333
// sShield := true ;
23325: LD_ADDR_EXP 118
23329: PUSH
23330: LD_INT 1
23332: ST_TO_ADDR
// if p3 = 35 then
23333: LD_VAR 0 3
23337: PUSH
23338: LD_INT 35
23340: EQUAL
23341: IFFALSE 23351
// sTime := true ;
23343: LD_ADDR_EXP 119
23347: PUSH
23348: LD_INT 1
23350: ST_TO_ADDR
// if p3 = 36 then
23351: LD_VAR 0 3
23355: PUSH
23356: LD_INT 36
23358: EQUAL
23359: IFFALSE 23369
// sTools := true ;
23361: LD_ADDR_EXP 120
23365: PUSH
23366: LD_INT 1
23368: ST_TO_ADDR
// if p3 = 101 then
23369: LD_VAR 0 3
23373: PUSH
23374: LD_INT 101
23376: EQUAL
23377: IFFALSE 23387
// sSold := true ;
23379: LD_ADDR_EXP 85
23383: PUSH
23384: LD_INT 1
23386: ST_TO_ADDR
// if p3 = 102 then
23387: LD_VAR 0 3
23391: PUSH
23392: LD_INT 102
23394: EQUAL
23395: IFFALSE 23405
// sDiff := true ;
23397: LD_ADDR_EXP 86
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// if p3 = 103 then
23405: LD_VAR 0 3
23409: PUSH
23410: LD_INT 103
23412: EQUAL
23413: IFFALSE 23423
// sFog := true ;
23415: LD_ADDR_EXP 89
23419: PUSH
23420: LD_INT 1
23422: ST_TO_ADDR
// if p3 = 104 then
23423: LD_VAR 0 3
23427: PUSH
23428: LD_INT 104
23430: EQUAL
23431: IFFALSE 23441
// sReset := true ;
23433: LD_ADDR_EXP 90
23437: PUSH
23438: LD_INT 1
23440: ST_TO_ADDR
// if p3 = 105 then
23441: LD_VAR 0 3
23445: PUSH
23446: LD_INT 105
23448: EQUAL
23449: IFFALSE 23459
// sSun := true ;
23451: LD_ADDR_EXP 91
23455: PUSH
23456: LD_INT 1
23458: ST_TO_ADDR
// if p3 = 106 then
23459: LD_VAR 0 3
23463: PUSH
23464: LD_INT 106
23466: EQUAL
23467: IFFALSE 23477
// sTiger := true ;
23469: LD_ADDR_EXP 87
23473: PUSH
23474: LD_INT 1
23476: ST_TO_ADDR
// if p3 = 107 then
23477: LD_VAR 0 3
23481: PUSH
23482: LD_INT 107
23484: EQUAL
23485: IFFALSE 23495
// sBomb := true ;
23487: LD_ADDR_EXP 88
23491: PUSH
23492: LD_INT 1
23494: ST_TO_ADDR
// if p3 = 108 then
23495: LD_VAR 0 3
23499: PUSH
23500: LD_INT 108
23502: EQUAL
23503: IFFALSE 23513
// sWound := true ;
23505: LD_ADDR_EXP 96
23509: PUSH
23510: LD_INT 1
23512: ST_TO_ADDR
// if p3 = 109 then
23513: LD_VAR 0 3
23517: PUSH
23518: LD_INT 109
23520: EQUAL
23521: IFFALSE 23531
// sBetray := true ;
23523: LD_ADDR_EXP 100
23527: PUSH
23528: LD_INT 1
23530: ST_TO_ADDR
// if p3 = 110 then
23531: LD_VAR 0 3
23535: PUSH
23536: LD_INT 110
23538: EQUAL
23539: IFFALSE 23549
// sContamin := true ;
23541: LD_ADDR_EXP 101
23545: PUSH
23546: LD_INT 1
23548: ST_TO_ADDR
// if p3 = 111 then
23549: LD_VAR 0 3
23553: PUSH
23554: LD_INT 111
23556: EQUAL
23557: IFFALSE 23567
// sOil := true ;
23559: LD_ADDR_EXP 103
23563: PUSH
23564: LD_INT 1
23566: ST_TO_ADDR
// if p3 = 112 then
23567: LD_VAR 0 3
23571: PUSH
23572: LD_INT 112
23574: EQUAL
23575: IFFALSE 23585
// sStu := true ;
23577: LD_ADDR_EXP 107
23581: PUSH
23582: LD_INT 1
23584: ST_TO_ADDR
// if p3 = 113 then
23585: LD_VAR 0 3
23589: PUSH
23590: LD_INT 113
23592: EQUAL
23593: IFFALSE 23603
// sBazooka := true ;
23595: LD_ADDR_EXP 110
23599: PUSH
23600: LD_INT 1
23602: ST_TO_ADDR
// if p3 = 114 then
23603: LD_VAR 0 3
23607: PUSH
23608: LD_INT 114
23610: EQUAL
23611: IFFALSE 23621
// sMortar := true ;
23613: LD_ADDR_EXP 111
23617: PUSH
23618: LD_INT 1
23620: ST_TO_ADDR
// if p3 = 115 then
23621: LD_VAR 0 3
23625: PUSH
23626: LD_INT 115
23628: EQUAL
23629: IFFALSE 23639
// sRanger := true ;
23631: LD_ADDR_EXP 121
23635: PUSH
23636: LD_INT 1
23638: ST_TO_ADDR
// end ; if p2 = 101 then
23639: LD_VAR 0 2
23643: PUSH
23644: LD_INT 101
23646: EQUAL
23647: IFFALSE 23775
// begin case p3 of 1 :
23649: LD_VAR 0 3
23653: PUSH
23654: LD_INT 1
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23669
23662: POP
// hHackUnlimitedResources ; 2 :
23663: CALL 34810 0 0
23667: GO 23775
23669: LD_INT 2
23671: DOUBLE
23672: EQUAL
23673: IFTRUE 23677
23675: GO 23684
23677: POP
// hHackSetLevel10 ; 3 :
23678: CALL 34943 0 0
23682: GO 23775
23684: LD_INT 3
23686: DOUBLE
23687: EQUAL
23688: IFTRUE 23692
23690: GO 23699
23692: POP
// hHackSetLevel10YourUnits ; 4 :
23693: CALL 35028 0 0
23697: GO 23775
23699: LD_INT 4
23701: DOUBLE
23702: EQUAL
23703: IFTRUE 23707
23705: GO 23714
23707: POP
// hHackInvincible ; 5 :
23708: CALL 35476 0 0
23712: GO 23775
23714: LD_INT 5
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23722
23720: GO 23729
23722: POP
// hHackInvisible ; 6 :
23723: CALL 35587 0 0
23727: GO 23775
23729: LD_INT 6
23731: DOUBLE
23732: EQUAL
23733: IFTRUE 23737
23735: GO 23744
23737: POP
// hHackChangeYourSide ; 7 :
23738: CALL 35644 0 0
23742: GO 23775
23744: LD_INT 7
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23759
23752: POP
// hHackChangeUnitSide ; 8 :
23753: CALL 35686 0 0
23757: GO 23775
23759: LD_INT 8
23761: DOUBLE
23762: EQUAL
23763: IFTRUE 23767
23765: GO 23774
23767: POP
// hHackFog ; end ;
23768: CALL 35787 0 0
23772: GO 23775
23774: POP
// end ; end ;
23775: PPOPN 6
23777: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
23778: GO 23780
23780: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
23781: LD_STRING initStreamRollete();
23783: PPUSH
23784: CALL_OW 559
// InitStreamMode ;
23788: CALL 23797 0 0
// DefineStreamItems ( ) ;
23792: CALL 24237 0 0
// end ;
23796: END
// function InitStreamMode ; begin
23797: LD_INT 0
23799: PPUSH
// streamModeActive := false ;
23800: LD_ADDR_EXP 68
23804: PUSH
23805: LD_INT 0
23807: ST_TO_ADDR
// normalCounter := 36 ;
23808: LD_ADDR_EXP 69
23812: PUSH
23813: LD_INT 36
23815: ST_TO_ADDR
// hardcoreCounter := 16 ;
23816: LD_ADDR_EXP 70
23820: PUSH
23821: LD_INT 16
23823: ST_TO_ADDR
// sRocket := false ;
23824: LD_ADDR_EXP 73
23828: PUSH
23829: LD_INT 0
23831: ST_TO_ADDR
// sSpeed := false ;
23832: LD_ADDR_EXP 72
23836: PUSH
23837: LD_INT 0
23839: ST_TO_ADDR
// sEngine := false ;
23840: LD_ADDR_EXP 74
23844: PUSH
23845: LD_INT 0
23847: ST_TO_ADDR
// sSpec := false ;
23848: LD_ADDR_EXP 71
23852: PUSH
23853: LD_INT 0
23855: ST_TO_ADDR
// sLevel := false ;
23856: LD_ADDR_EXP 75
23860: PUSH
23861: LD_INT 0
23863: ST_TO_ADDR
// sArmoury := false ;
23864: LD_ADDR_EXP 76
23868: PUSH
23869: LD_INT 0
23871: ST_TO_ADDR
// sRadar := false ;
23872: LD_ADDR_EXP 77
23876: PUSH
23877: LD_INT 0
23879: ST_TO_ADDR
// sBunker := false ;
23880: LD_ADDR_EXP 78
23884: PUSH
23885: LD_INT 0
23887: ST_TO_ADDR
// sHack := false ;
23888: LD_ADDR_EXP 79
23892: PUSH
23893: LD_INT 0
23895: ST_TO_ADDR
// sFire := false ;
23896: LD_ADDR_EXP 80
23900: PUSH
23901: LD_INT 0
23903: ST_TO_ADDR
// sRefresh := false ;
23904: LD_ADDR_EXP 81
23908: PUSH
23909: LD_INT 0
23911: ST_TO_ADDR
// sExp := false ;
23912: LD_ADDR_EXP 82
23916: PUSH
23917: LD_INT 0
23919: ST_TO_ADDR
// sDepot := false ;
23920: LD_ADDR_EXP 83
23924: PUSH
23925: LD_INT 0
23927: ST_TO_ADDR
// sFlag := false ;
23928: LD_ADDR_EXP 84
23932: PUSH
23933: LD_INT 0
23935: ST_TO_ADDR
// sKamikadze := false ;
23936: LD_ADDR_EXP 92
23940: PUSH
23941: LD_INT 0
23943: ST_TO_ADDR
// sTroll := false ;
23944: LD_ADDR_EXP 93
23948: PUSH
23949: LD_INT 0
23951: ST_TO_ADDR
// sSlow := false ;
23952: LD_ADDR_EXP 94
23956: PUSH
23957: LD_INT 0
23959: ST_TO_ADDR
// sLack := false ;
23960: LD_ADDR_EXP 95
23964: PUSH
23965: LD_INT 0
23967: ST_TO_ADDR
// sTank := false ;
23968: LD_ADDR_EXP 97
23972: PUSH
23973: LD_INT 0
23975: ST_TO_ADDR
// sRemote := false ;
23976: LD_ADDR_EXP 98
23980: PUSH
23981: LD_INT 0
23983: ST_TO_ADDR
// sPowell := false ;
23984: LD_ADDR_EXP 99
23988: PUSH
23989: LD_INT 0
23991: ST_TO_ADDR
// sTeleport := false ;
23992: LD_ADDR_EXP 102
23996: PUSH
23997: LD_INT 0
23999: ST_TO_ADDR
// sOilTower := false ;
24000: LD_ADDR_EXP 104
24004: PUSH
24005: LD_INT 0
24007: ST_TO_ADDR
// sShovel := false ;
24008: LD_ADDR_EXP 105
24012: PUSH
24013: LD_INT 0
24015: ST_TO_ADDR
// sSheik := false ;
24016: LD_ADDR_EXP 106
24020: PUSH
24021: LD_INT 0
24023: ST_TO_ADDR
// sEarthquake := false ;
24024: LD_ADDR_EXP 108
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// sAI := false ;
24032: LD_ADDR_EXP 109
24036: PUSH
24037: LD_INT 0
24039: ST_TO_ADDR
// sCargo := false ;
24040: LD_ADDR_EXP 112
24044: PUSH
24045: LD_INT 0
24047: ST_TO_ADDR
// sDLaser := false ;
24048: LD_ADDR_EXP 113
24052: PUSH
24053: LD_INT 0
24055: ST_TO_ADDR
// sExchange := false ;
24056: LD_ADDR_EXP 114
24060: PUSH
24061: LD_INT 0
24063: ST_TO_ADDR
// sFac := false ;
24064: LD_ADDR_EXP 115
24068: PUSH
24069: LD_INT 0
24071: ST_TO_ADDR
// sPower := false ;
24072: LD_ADDR_EXP 116
24076: PUSH
24077: LD_INT 0
24079: ST_TO_ADDR
// sRandom := false ;
24080: LD_ADDR_EXP 117
24084: PUSH
24085: LD_INT 0
24087: ST_TO_ADDR
// sShield := false ;
24088: LD_ADDR_EXP 118
24092: PUSH
24093: LD_INT 0
24095: ST_TO_ADDR
// sTime := false ;
24096: LD_ADDR_EXP 119
24100: PUSH
24101: LD_INT 0
24103: ST_TO_ADDR
// sTools := false ;
24104: LD_ADDR_EXP 120
24108: PUSH
24109: LD_INT 0
24111: ST_TO_ADDR
// sSold := false ;
24112: LD_ADDR_EXP 85
24116: PUSH
24117: LD_INT 0
24119: ST_TO_ADDR
// sDiff := false ;
24120: LD_ADDR_EXP 86
24124: PUSH
24125: LD_INT 0
24127: ST_TO_ADDR
// sFog := false ;
24128: LD_ADDR_EXP 89
24132: PUSH
24133: LD_INT 0
24135: ST_TO_ADDR
// sReset := false ;
24136: LD_ADDR_EXP 90
24140: PUSH
24141: LD_INT 0
24143: ST_TO_ADDR
// sSun := false ;
24144: LD_ADDR_EXP 91
24148: PUSH
24149: LD_INT 0
24151: ST_TO_ADDR
// sTiger := false ;
24152: LD_ADDR_EXP 87
24156: PUSH
24157: LD_INT 0
24159: ST_TO_ADDR
// sBomb := false ;
24160: LD_ADDR_EXP 88
24164: PUSH
24165: LD_INT 0
24167: ST_TO_ADDR
// sWound := false ;
24168: LD_ADDR_EXP 96
24172: PUSH
24173: LD_INT 0
24175: ST_TO_ADDR
// sBetray := false ;
24176: LD_ADDR_EXP 100
24180: PUSH
24181: LD_INT 0
24183: ST_TO_ADDR
// sContamin := false ;
24184: LD_ADDR_EXP 101
24188: PUSH
24189: LD_INT 0
24191: ST_TO_ADDR
// sOil := false ;
24192: LD_ADDR_EXP 103
24196: PUSH
24197: LD_INT 0
24199: ST_TO_ADDR
// sStu := false ;
24200: LD_ADDR_EXP 107
24204: PUSH
24205: LD_INT 0
24207: ST_TO_ADDR
// sBazooka := false ;
24208: LD_ADDR_EXP 110
24212: PUSH
24213: LD_INT 0
24215: ST_TO_ADDR
// sMortar := false ;
24216: LD_ADDR_EXP 111
24220: PUSH
24221: LD_INT 0
24223: ST_TO_ADDR
// sRanger := false ;
24224: LD_ADDR_EXP 121
24228: PUSH
24229: LD_INT 0
24231: ST_TO_ADDR
// end ;
24232: LD_VAR 0 1
24236: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24237: LD_INT 0
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
// result := [ ] ;
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: EMPTY
24250: ST_TO_ADDR
// if campaign_id = 1 then
24251: LD_OWVAR 69
24255: PUSH
24256: LD_INT 1
24258: EQUAL
24259: IFFALSE 27197
// begin case mission_number of 1 :
24261: LD_OWVAR 70
24265: PUSH
24266: LD_INT 1
24268: DOUBLE
24269: EQUAL
24270: IFTRUE 24274
24272: GO 24338
24274: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24275: LD_ADDR_VAR 0 1
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 4
24285: PUSH
24286: LD_INT 11
24288: PUSH
24289: LD_INT 12
24291: PUSH
24292: LD_INT 15
24294: PUSH
24295: LD_INT 16
24297: PUSH
24298: LD_INT 22
24300: PUSH
24301: LD_INT 23
24303: PUSH
24304: LD_INT 26
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 101
24320: PUSH
24321: LD_INT 102
24323: PUSH
24324: LD_INT 106
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: LIST
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: ST_TO_ADDR
24336: GO 27195
24338: LD_INT 2
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24418
24346: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24347: LD_ADDR_VAR 0 1
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: LD_INT 4
24357: PUSH
24358: LD_INT 11
24360: PUSH
24361: LD_INT 12
24363: PUSH
24364: LD_INT 15
24366: PUSH
24367: LD_INT 16
24369: PUSH
24370: LD_INT 22
24372: PUSH
24373: LD_INT 23
24375: PUSH
24376: LD_INT 26
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 101
24392: PUSH
24393: LD_INT 102
24395: PUSH
24396: LD_INT 105
24398: PUSH
24399: LD_INT 106
24401: PUSH
24402: LD_INT 108
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: ST_TO_ADDR
24416: GO 27195
24418: LD_INT 3
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24502
24426: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
24427: LD_ADDR_VAR 0 1
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 4
24437: PUSH
24438: LD_INT 5
24440: PUSH
24441: LD_INT 11
24443: PUSH
24444: LD_INT 12
24446: PUSH
24447: LD_INT 15
24449: PUSH
24450: LD_INT 16
24452: PUSH
24453: LD_INT 22
24455: PUSH
24456: LD_INT 26
24458: PUSH
24459: LD_INT 36
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 101
24476: PUSH
24477: LD_INT 102
24479: PUSH
24480: LD_INT 105
24482: PUSH
24483: LD_INT 106
24485: PUSH
24486: LD_INT 108
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: ST_TO_ADDR
24500: GO 27195
24502: LD_INT 4
24504: DOUBLE
24505: EQUAL
24506: IFTRUE 24510
24508: GO 24594
24510: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
24511: LD_ADDR_VAR 0 1
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 4
24521: PUSH
24522: LD_INT 5
24524: PUSH
24525: LD_INT 8
24527: PUSH
24528: LD_INT 11
24530: PUSH
24531: LD_INT 12
24533: PUSH
24534: LD_INT 15
24536: PUSH
24537: LD_INT 16
24539: PUSH
24540: LD_INT 22
24542: PUSH
24543: LD_INT 23
24545: PUSH
24546: LD_INT 26
24548: PUSH
24549: LD_INT 36
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 101
24568: PUSH
24569: LD_INT 102
24571: PUSH
24572: LD_INT 105
24574: PUSH
24575: LD_INT 106
24577: PUSH
24578: LD_INT 108
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: ST_TO_ADDR
24592: GO 27195
24594: LD_INT 5
24596: DOUBLE
24597: EQUAL
24598: IFTRUE 24602
24600: GO 24702
24602: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
24603: LD_ADDR_VAR 0 1
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: LD_INT 4
24613: PUSH
24614: LD_INT 5
24616: PUSH
24617: LD_INT 6
24619: PUSH
24620: LD_INT 8
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 15
24631: PUSH
24632: LD_INT 16
24634: PUSH
24635: LD_INT 22
24637: PUSH
24638: LD_INT 23
24640: PUSH
24641: LD_INT 25
24643: PUSH
24644: LD_INT 26
24646: PUSH
24647: LD_INT 36
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 101
24668: PUSH
24669: LD_INT 102
24671: PUSH
24672: LD_INT 105
24674: PUSH
24675: LD_INT 106
24677: PUSH
24678: LD_INT 108
24680: PUSH
24681: LD_INT 109
24683: PUSH
24684: LD_INT 112
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: ST_TO_ADDR
24700: GO 27195
24702: LD_INT 6
24704: DOUBLE
24705: EQUAL
24706: IFTRUE 24710
24708: GO 24830
24710: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
24711: LD_ADDR_VAR 0 1
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: LD_INT 4
24721: PUSH
24722: LD_INT 5
24724: PUSH
24725: LD_INT 6
24727: PUSH
24728: LD_INT 8
24730: PUSH
24731: LD_INT 11
24733: PUSH
24734: LD_INT 12
24736: PUSH
24737: LD_INT 15
24739: PUSH
24740: LD_INT 16
24742: PUSH
24743: LD_INT 20
24745: PUSH
24746: LD_INT 21
24748: PUSH
24749: LD_INT 22
24751: PUSH
24752: LD_INT 23
24754: PUSH
24755: LD_INT 25
24757: PUSH
24758: LD_INT 26
24760: PUSH
24761: LD_INT 30
24763: PUSH
24764: LD_INT 31
24766: PUSH
24767: LD_INT 32
24769: PUSH
24770: LD_INT 36
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 101
24796: PUSH
24797: LD_INT 102
24799: PUSH
24800: LD_INT 105
24802: PUSH
24803: LD_INT 106
24805: PUSH
24806: LD_INT 108
24808: PUSH
24809: LD_INT 109
24811: PUSH
24812: LD_INT 112
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: ST_TO_ADDR
24828: GO 27195
24830: LD_INT 7
24832: DOUBLE
24833: EQUAL
24834: IFTRUE 24838
24836: GO 24938
24838: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
24839: LD_ADDR_VAR 0 1
24843: PUSH
24844: LD_INT 2
24846: PUSH
24847: LD_INT 4
24849: PUSH
24850: LD_INT 5
24852: PUSH
24853: LD_INT 7
24855: PUSH
24856: LD_INT 11
24858: PUSH
24859: LD_INT 12
24861: PUSH
24862: LD_INT 15
24864: PUSH
24865: LD_INT 16
24867: PUSH
24868: LD_INT 20
24870: PUSH
24871: LD_INT 21
24873: PUSH
24874: LD_INT 22
24876: PUSH
24877: LD_INT 23
24879: PUSH
24880: LD_INT 25
24882: PUSH
24883: LD_INT 26
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 101
24904: PUSH
24905: LD_INT 102
24907: PUSH
24908: LD_INT 103
24910: PUSH
24911: LD_INT 105
24913: PUSH
24914: LD_INT 106
24916: PUSH
24917: LD_INT 108
24919: PUSH
24920: LD_INT 112
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: ST_TO_ADDR
24936: GO 27195
24938: LD_INT 8
24940: DOUBLE
24941: EQUAL
24942: IFTRUE 24946
24944: GO 25074
24946: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
24947: LD_ADDR_VAR 0 1
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: LD_INT 4
24957: PUSH
24958: LD_INT 5
24960: PUSH
24961: LD_INT 6
24963: PUSH
24964: LD_INT 7
24966: PUSH
24967: LD_INT 8
24969: PUSH
24970: LD_INT 11
24972: PUSH
24973: LD_INT 12
24975: PUSH
24976: LD_INT 15
24978: PUSH
24979: LD_INT 16
24981: PUSH
24982: LD_INT 20
24984: PUSH
24985: LD_INT 21
24987: PUSH
24988: LD_INT 22
24990: PUSH
24991: LD_INT 23
24993: PUSH
24994: LD_INT 25
24996: PUSH
24997: LD_INT 26
24999: PUSH
25000: LD_INT 30
25002: PUSH
25003: LD_INT 31
25005: PUSH
25006: LD_INT 32
25008: PUSH
25009: LD_INT 36
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 101
25036: PUSH
25037: LD_INT 102
25039: PUSH
25040: LD_INT 103
25042: PUSH
25043: LD_INT 105
25045: PUSH
25046: LD_INT 106
25048: PUSH
25049: LD_INT 108
25051: PUSH
25052: LD_INT 109
25054: PUSH
25055: LD_INT 112
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: ST_TO_ADDR
25072: GO 27195
25074: LD_INT 9
25076: DOUBLE
25077: EQUAL
25078: IFTRUE 25082
25080: GO 25218
25082: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25083: LD_ADDR_VAR 0 1
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 4
25093: PUSH
25094: LD_INT 5
25096: PUSH
25097: LD_INT 6
25099: PUSH
25100: LD_INT 7
25102: PUSH
25103: LD_INT 8
25105: PUSH
25106: LD_INT 11
25108: PUSH
25109: LD_INT 12
25111: PUSH
25112: LD_INT 15
25114: PUSH
25115: LD_INT 16
25117: PUSH
25118: LD_INT 20
25120: PUSH
25121: LD_INT 21
25123: PUSH
25124: LD_INT 22
25126: PUSH
25127: LD_INT 23
25129: PUSH
25130: LD_INT 25
25132: PUSH
25133: LD_INT 26
25135: PUSH
25136: LD_INT 28
25138: PUSH
25139: LD_INT 30
25141: PUSH
25142: LD_INT 31
25144: PUSH
25145: LD_INT 32
25147: PUSH
25148: LD_INT 36
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 101
25176: PUSH
25177: LD_INT 102
25179: PUSH
25180: LD_INT 103
25182: PUSH
25183: LD_INT 105
25185: PUSH
25186: LD_INT 106
25188: PUSH
25189: LD_INT 108
25191: PUSH
25192: LD_INT 109
25194: PUSH
25195: LD_INT 112
25197: PUSH
25198: LD_INT 114
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: ST_TO_ADDR
25216: GO 27195
25218: LD_INT 10
25220: DOUBLE
25221: EQUAL
25222: IFTRUE 25226
25224: GO 25410
25226: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25227: LD_ADDR_VAR 0 1
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: LD_INT 4
25237: PUSH
25238: LD_INT 5
25240: PUSH
25241: LD_INT 6
25243: PUSH
25244: LD_INT 7
25246: PUSH
25247: LD_INT 8
25249: PUSH
25250: LD_INT 9
25252: PUSH
25253: LD_INT 10
25255: PUSH
25256: LD_INT 11
25258: PUSH
25259: LD_INT 12
25261: PUSH
25262: LD_INT 13
25264: PUSH
25265: LD_INT 14
25267: PUSH
25268: LD_INT 15
25270: PUSH
25271: LD_INT 16
25273: PUSH
25274: LD_INT 17
25276: PUSH
25277: LD_INT 18
25279: PUSH
25280: LD_INT 19
25282: PUSH
25283: LD_INT 20
25285: PUSH
25286: LD_INT 21
25288: PUSH
25289: LD_INT 22
25291: PUSH
25292: LD_INT 23
25294: PUSH
25295: LD_INT 24
25297: PUSH
25298: LD_INT 25
25300: PUSH
25301: LD_INT 26
25303: PUSH
25304: LD_INT 28
25306: PUSH
25307: LD_INT 30
25309: PUSH
25310: LD_INT 31
25312: PUSH
25313: LD_INT 32
25315: PUSH
25316: LD_INT 36
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 101
25352: PUSH
25353: LD_INT 102
25355: PUSH
25356: LD_INT 103
25358: PUSH
25359: LD_INT 104
25361: PUSH
25362: LD_INT 105
25364: PUSH
25365: LD_INT 106
25367: PUSH
25368: LD_INT 107
25370: PUSH
25371: LD_INT 108
25373: PUSH
25374: LD_INT 109
25376: PUSH
25377: LD_INT 110
25379: PUSH
25380: LD_INT 111
25382: PUSH
25383: LD_INT 112
25385: PUSH
25386: LD_INT 114
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: ST_TO_ADDR
25408: GO 27195
25410: LD_INT 11
25412: DOUBLE
25413: EQUAL
25414: IFTRUE 25418
25416: GO 25610
25418: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
25419: LD_ADDR_VAR 0 1
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: LD_INT 4
25432: PUSH
25433: LD_INT 5
25435: PUSH
25436: LD_INT 6
25438: PUSH
25439: LD_INT 7
25441: PUSH
25442: LD_INT 8
25444: PUSH
25445: LD_INT 9
25447: PUSH
25448: LD_INT 10
25450: PUSH
25451: LD_INT 11
25453: PUSH
25454: LD_INT 12
25456: PUSH
25457: LD_INT 13
25459: PUSH
25460: LD_INT 14
25462: PUSH
25463: LD_INT 15
25465: PUSH
25466: LD_INT 16
25468: PUSH
25469: LD_INT 17
25471: PUSH
25472: LD_INT 18
25474: PUSH
25475: LD_INT 19
25477: PUSH
25478: LD_INT 20
25480: PUSH
25481: LD_INT 21
25483: PUSH
25484: LD_INT 22
25486: PUSH
25487: LD_INT 23
25489: PUSH
25490: LD_INT 24
25492: PUSH
25493: LD_INT 25
25495: PUSH
25496: LD_INT 26
25498: PUSH
25499: LD_INT 28
25501: PUSH
25502: LD_INT 30
25504: PUSH
25505: LD_INT 31
25507: PUSH
25508: LD_INT 32
25510: PUSH
25511: LD_INT 34
25513: PUSH
25514: LD_INT 36
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 101
25552: PUSH
25553: LD_INT 102
25555: PUSH
25556: LD_INT 103
25558: PUSH
25559: LD_INT 104
25561: PUSH
25562: LD_INT 105
25564: PUSH
25565: LD_INT 106
25567: PUSH
25568: LD_INT 107
25570: PUSH
25571: LD_INT 108
25573: PUSH
25574: LD_INT 109
25576: PUSH
25577: LD_INT 110
25579: PUSH
25580: LD_INT 111
25582: PUSH
25583: LD_INT 112
25585: PUSH
25586: LD_INT 114
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: ST_TO_ADDR
25608: GO 27195
25610: LD_INT 12
25612: DOUBLE
25613: EQUAL
25614: IFTRUE 25618
25616: GO 25826
25618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 3
25632: PUSH
25633: LD_INT 4
25635: PUSH
25636: LD_INT 5
25638: PUSH
25639: LD_INT 6
25641: PUSH
25642: LD_INT 7
25644: PUSH
25645: LD_INT 8
25647: PUSH
25648: LD_INT 9
25650: PUSH
25651: LD_INT 10
25653: PUSH
25654: LD_INT 11
25656: PUSH
25657: LD_INT 12
25659: PUSH
25660: LD_INT 13
25662: PUSH
25663: LD_INT 14
25665: PUSH
25666: LD_INT 15
25668: PUSH
25669: LD_INT 16
25671: PUSH
25672: LD_INT 17
25674: PUSH
25675: LD_INT 18
25677: PUSH
25678: LD_INT 19
25680: PUSH
25681: LD_INT 20
25683: PUSH
25684: LD_INT 21
25686: PUSH
25687: LD_INT 22
25689: PUSH
25690: LD_INT 23
25692: PUSH
25693: LD_INT 24
25695: PUSH
25696: LD_INT 25
25698: PUSH
25699: LD_INT 26
25701: PUSH
25702: LD_INT 27
25704: PUSH
25705: LD_INT 28
25707: PUSH
25708: LD_INT 30
25710: PUSH
25711: LD_INT 31
25713: PUSH
25714: LD_INT 32
25716: PUSH
25717: LD_INT 33
25719: PUSH
25720: LD_INT 34
25722: PUSH
25723: LD_INT 36
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 101
25764: PUSH
25765: LD_INT 102
25767: PUSH
25768: LD_INT 103
25770: PUSH
25771: LD_INT 104
25773: PUSH
25774: LD_INT 105
25776: PUSH
25777: LD_INT 106
25779: PUSH
25780: LD_INT 107
25782: PUSH
25783: LD_INT 108
25785: PUSH
25786: LD_INT 109
25788: PUSH
25789: LD_INT 110
25791: PUSH
25792: LD_INT 111
25794: PUSH
25795: LD_INT 112
25797: PUSH
25798: LD_INT 113
25800: PUSH
25801: LD_INT 114
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: ST_TO_ADDR
25824: GO 27195
25826: LD_INT 13
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 26030
25834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
25835: LD_ADDR_VAR 0 1
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 3
25848: PUSH
25849: LD_INT 4
25851: PUSH
25852: LD_INT 5
25854: PUSH
25855: LD_INT 8
25857: PUSH
25858: LD_INT 9
25860: PUSH
25861: LD_INT 10
25863: PUSH
25864: LD_INT 11
25866: PUSH
25867: LD_INT 12
25869: PUSH
25870: LD_INT 14
25872: PUSH
25873: LD_INT 15
25875: PUSH
25876: LD_INT 16
25878: PUSH
25879: LD_INT 17
25881: PUSH
25882: LD_INT 18
25884: PUSH
25885: LD_INT 19
25887: PUSH
25888: LD_INT 20
25890: PUSH
25891: LD_INT 21
25893: PUSH
25894: LD_INT 22
25896: PUSH
25897: LD_INT 23
25899: PUSH
25900: LD_INT 24
25902: PUSH
25903: LD_INT 25
25905: PUSH
25906: LD_INT 26
25908: PUSH
25909: LD_INT 27
25911: PUSH
25912: LD_INT 28
25914: PUSH
25915: LD_INT 30
25917: PUSH
25918: LD_INT 31
25920: PUSH
25921: LD_INT 32
25923: PUSH
25924: LD_INT 33
25926: PUSH
25927: LD_INT 34
25929: PUSH
25930: LD_INT 36
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 101
25968: PUSH
25969: LD_INT 102
25971: PUSH
25972: LD_INT 103
25974: PUSH
25975: LD_INT 104
25977: PUSH
25978: LD_INT 105
25980: PUSH
25981: LD_INT 106
25983: PUSH
25984: LD_INT 107
25986: PUSH
25987: LD_INT 108
25989: PUSH
25990: LD_INT 109
25992: PUSH
25993: LD_INT 110
25995: PUSH
25996: LD_INT 111
25998: PUSH
25999: LD_INT 112
26001: PUSH
26002: LD_INT 113
26004: PUSH
26005: LD_INT 114
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: ST_TO_ADDR
26028: GO 27195
26030: LD_INT 14
26032: DOUBLE
26033: EQUAL
26034: IFTRUE 26038
26036: GO 26250
26038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26039: LD_ADDR_VAR 0 1
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 3
26052: PUSH
26053: LD_INT 4
26055: PUSH
26056: LD_INT 5
26058: PUSH
26059: LD_INT 6
26061: PUSH
26062: LD_INT 7
26064: PUSH
26065: LD_INT 8
26067: PUSH
26068: LD_INT 9
26070: PUSH
26071: LD_INT 10
26073: PUSH
26074: LD_INT 11
26076: PUSH
26077: LD_INT 12
26079: PUSH
26080: LD_INT 13
26082: PUSH
26083: LD_INT 14
26085: PUSH
26086: LD_INT 15
26088: PUSH
26089: LD_INT 16
26091: PUSH
26092: LD_INT 17
26094: PUSH
26095: LD_INT 18
26097: PUSH
26098: LD_INT 19
26100: PUSH
26101: LD_INT 20
26103: PUSH
26104: LD_INT 21
26106: PUSH
26107: LD_INT 22
26109: PUSH
26110: LD_INT 23
26112: PUSH
26113: LD_INT 24
26115: PUSH
26116: LD_INT 25
26118: PUSH
26119: LD_INT 26
26121: PUSH
26122: LD_INT 27
26124: PUSH
26125: LD_INT 28
26127: PUSH
26128: LD_INT 29
26130: PUSH
26131: LD_INT 30
26133: PUSH
26134: LD_INT 31
26136: PUSH
26137: LD_INT 32
26139: PUSH
26140: LD_INT 33
26142: PUSH
26143: LD_INT 34
26145: PUSH
26146: LD_INT 36
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 101
26188: PUSH
26189: LD_INT 102
26191: PUSH
26192: LD_INT 103
26194: PUSH
26195: LD_INT 104
26197: PUSH
26198: LD_INT 105
26200: PUSH
26201: LD_INT 106
26203: PUSH
26204: LD_INT 107
26206: PUSH
26207: LD_INT 108
26209: PUSH
26210: LD_INT 109
26212: PUSH
26213: LD_INT 110
26215: PUSH
26216: LD_INT 111
26218: PUSH
26219: LD_INT 112
26221: PUSH
26222: LD_INT 113
26224: PUSH
26225: LD_INT 114
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: ST_TO_ADDR
26248: GO 27195
26250: LD_INT 15
26252: DOUBLE
26253: EQUAL
26254: IFTRUE 26258
26256: GO 26470
26258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26259: LD_ADDR_VAR 0 1
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: LD_INT 3
26272: PUSH
26273: LD_INT 4
26275: PUSH
26276: LD_INT 5
26278: PUSH
26279: LD_INT 6
26281: PUSH
26282: LD_INT 7
26284: PUSH
26285: LD_INT 8
26287: PUSH
26288: LD_INT 9
26290: PUSH
26291: LD_INT 10
26293: PUSH
26294: LD_INT 11
26296: PUSH
26297: LD_INT 12
26299: PUSH
26300: LD_INT 13
26302: PUSH
26303: LD_INT 14
26305: PUSH
26306: LD_INT 15
26308: PUSH
26309: LD_INT 16
26311: PUSH
26312: LD_INT 17
26314: PUSH
26315: LD_INT 18
26317: PUSH
26318: LD_INT 19
26320: PUSH
26321: LD_INT 20
26323: PUSH
26324: LD_INT 21
26326: PUSH
26327: LD_INT 22
26329: PUSH
26330: LD_INT 23
26332: PUSH
26333: LD_INT 24
26335: PUSH
26336: LD_INT 25
26338: PUSH
26339: LD_INT 26
26341: PUSH
26342: LD_INT 27
26344: PUSH
26345: LD_INT 28
26347: PUSH
26348: LD_INT 29
26350: PUSH
26351: LD_INT 30
26353: PUSH
26354: LD_INT 31
26356: PUSH
26357: LD_INT 32
26359: PUSH
26360: LD_INT 33
26362: PUSH
26363: LD_INT 34
26365: PUSH
26366: LD_INT 36
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 101
26408: PUSH
26409: LD_INT 102
26411: PUSH
26412: LD_INT 103
26414: PUSH
26415: LD_INT 104
26417: PUSH
26418: LD_INT 105
26420: PUSH
26421: LD_INT 106
26423: PUSH
26424: LD_INT 107
26426: PUSH
26427: LD_INT 108
26429: PUSH
26430: LD_INT 109
26432: PUSH
26433: LD_INT 110
26435: PUSH
26436: LD_INT 111
26438: PUSH
26439: LD_INT 112
26441: PUSH
26442: LD_INT 113
26444: PUSH
26445: LD_INT 114
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: ST_TO_ADDR
26468: GO 27195
26470: LD_INT 16
26472: DOUBLE
26473: EQUAL
26474: IFTRUE 26478
26476: GO 26602
26478: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
26479: LD_ADDR_VAR 0 1
26483: PUSH
26484: LD_INT 2
26486: PUSH
26487: LD_INT 4
26489: PUSH
26490: LD_INT 5
26492: PUSH
26493: LD_INT 7
26495: PUSH
26496: LD_INT 11
26498: PUSH
26499: LD_INT 12
26501: PUSH
26502: LD_INT 15
26504: PUSH
26505: LD_INT 16
26507: PUSH
26508: LD_INT 20
26510: PUSH
26511: LD_INT 21
26513: PUSH
26514: LD_INT 22
26516: PUSH
26517: LD_INT 23
26519: PUSH
26520: LD_INT 25
26522: PUSH
26523: LD_INT 26
26525: PUSH
26526: LD_INT 30
26528: PUSH
26529: LD_INT 31
26531: PUSH
26532: LD_INT 32
26534: PUSH
26535: LD_INT 33
26537: PUSH
26538: LD_INT 34
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 101
26564: PUSH
26565: LD_INT 102
26567: PUSH
26568: LD_INT 103
26570: PUSH
26571: LD_INT 106
26573: PUSH
26574: LD_INT 108
26576: PUSH
26577: LD_INT 112
26579: PUSH
26580: LD_INT 113
26582: PUSH
26583: LD_INT 114
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: ST_TO_ADDR
26600: GO 27195
26602: LD_INT 17
26604: DOUBLE
26605: EQUAL
26606: IFTRUE 26610
26608: GO 26822
26610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
26611: LD_ADDR_VAR 0 1
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 4
26627: PUSH
26628: LD_INT 5
26630: PUSH
26631: LD_INT 6
26633: PUSH
26634: LD_INT 7
26636: PUSH
26637: LD_INT 8
26639: PUSH
26640: LD_INT 9
26642: PUSH
26643: LD_INT 10
26645: PUSH
26646: LD_INT 11
26648: PUSH
26649: LD_INT 12
26651: PUSH
26652: LD_INT 13
26654: PUSH
26655: LD_INT 14
26657: PUSH
26658: LD_INT 15
26660: PUSH
26661: LD_INT 16
26663: PUSH
26664: LD_INT 17
26666: PUSH
26667: LD_INT 18
26669: PUSH
26670: LD_INT 19
26672: PUSH
26673: LD_INT 20
26675: PUSH
26676: LD_INT 21
26678: PUSH
26679: LD_INT 22
26681: PUSH
26682: LD_INT 23
26684: PUSH
26685: LD_INT 24
26687: PUSH
26688: LD_INT 25
26690: PUSH
26691: LD_INT 26
26693: PUSH
26694: LD_INT 27
26696: PUSH
26697: LD_INT 28
26699: PUSH
26700: LD_INT 29
26702: PUSH
26703: LD_INT 30
26705: PUSH
26706: LD_INT 31
26708: PUSH
26709: LD_INT 32
26711: PUSH
26712: LD_INT 33
26714: PUSH
26715: LD_INT 34
26717: PUSH
26718: LD_INT 36
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 101
26760: PUSH
26761: LD_INT 102
26763: PUSH
26764: LD_INT 103
26766: PUSH
26767: LD_INT 104
26769: PUSH
26770: LD_INT 105
26772: PUSH
26773: LD_INT 106
26775: PUSH
26776: LD_INT 107
26778: PUSH
26779: LD_INT 108
26781: PUSH
26782: LD_INT 109
26784: PUSH
26785: LD_INT 110
26787: PUSH
26788: LD_INT 111
26790: PUSH
26791: LD_INT 112
26793: PUSH
26794: LD_INT 113
26796: PUSH
26797: LD_INT 114
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: ST_TO_ADDR
26820: GO 27195
26822: LD_INT 18
26824: DOUBLE
26825: EQUAL
26826: IFTRUE 26830
26828: GO 26966
26830: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
26831: LD_ADDR_VAR 0 1
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: LD_INT 4
26841: PUSH
26842: LD_INT 5
26844: PUSH
26845: LD_INT 7
26847: PUSH
26848: LD_INT 11
26850: PUSH
26851: LD_INT 12
26853: PUSH
26854: LD_INT 15
26856: PUSH
26857: LD_INT 16
26859: PUSH
26860: LD_INT 20
26862: PUSH
26863: LD_INT 21
26865: PUSH
26866: LD_INT 22
26868: PUSH
26869: LD_INT 23
26871: PUSH
26872: LD_INT 25
26874: PUSH
26875: LD_INT 26
26877: PUSH
26878: LD_INT 30
26880: PUSH
26881: LD_INT 31
26883: PUSH
26884: LD_INT 32
26886: PUSH
26887: LD_INT 33
26889: PUSH
26890: LD_INT 34
26892: PUSH
26893: LD_INT 35
26895: PUSH
26896: LD_INT 36
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 101
26924: PUSH
26925: LD_INT 102
26927: PUSH
26928: LD_INT 103
26930: PUSH
26931: LD_INT 106
26933: PUSH
26934: LD_INT 108
26936: PUSH
26937: LD_INT 112
26939: PUSH
26940: LD_INT 113
26942: PUSH
26943: LD_INT 114
26945: PUSH
26946: LD_INT 115
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: ST_TO_ADDR
26964: GO 27195
26966: LD_INT 19
26968: DOUBLE
26969: EQUAL
26970: IFTRUE 26974
26972: GO 27194
26974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
26975: LD_ADDR_VAR 0 1
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: LD_INT 3
26988: PUSH
26989: LD_INT 4
26991: PUSH
26992: LD_INT 5
26994: PUSH
26995: LD_INT 6
26997: PUSH
26998: LD_INT 7
27000: PUSH
27001: LD_INT 8
27003: PUSH
27004: LD_INT 9
27006: PUSH
27007: LD_INT 10
27009: PUSH
27010: LD_INT 11
27012: PUSH
27013: LD_INT 12
27015: PUSH
27016: LD_INT 13
27018: PUSH
27019: LD_INT 14
27021: PUSH
27022: LD_INT 15
27024: PUSH
27025: LD_INT 16
27027: PUSH
27028: LD_INT 17
27030: PUSH
27031: LD_INT 18
27033: PUSH
27034: LD_INT 19
27036: PUSH
27037: LD_INT 20
27039: PUSH
27040: LD_INT 21
27042: PUSH
27043: LD_INT 22
27045: PUSH
27046: LD_INT 23
27048: PUSH
27049: LD_INT 24
27051: PUSH
27052: LD_INT 25
27054: PUSH
27055: LD_INT 26
27057: PUSH
27058: LD_INT 27
27060: PUSH
27061: LD_INT 28
27063: PUSH
27064: LD_INT 29
27066: PUSH
27067: LD_INT 30
27069: PUSH
27070: LD_INT 31
27072: PUSH
27073: LD_INT 32
27075: PUSH
27076: LD_INT 33
27078: PUSH
27079: LD_INT 34
27081: PUSH
27082: LD_INT 35
27084: PUSH
27085: LD_INT 36
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 101
27128: PUSH
27129: LD_INT 102
27131: PUSH
27132: LD_INT 103
27134: PUSH
27135: LD_INT 104
27137: PUSH
27138: LD_INT 105
27140: PUSH
27141: LD_INT 106
27143: PUSH
27144: LD_INT 107
27146: PUSH
27147: LD_INT 108
27149: PUSH
27150: LD_INT 109
27152: PUSH
27153: LD_INT 110
27155: PUSH
27156: LD_INT 111
27158: PUSH
27159: LD_INT 112
27161: PUSH
27162: LD_INT 113
27164: PUSH
27165: LD_INT 114
27167: PUSH
27168: LD_INT 115
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: ST_TO_ADDR
27192: GO 27195
27194: POP
// end else
27195: GO 27414
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27197: LD_ADDR_VAR 0 1
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: LD_INT 4
27213: PUSH
27214: LD_INT 5
27216: PUSH
27217: LD_INT 6
27219: PUSH
27220: LD_INT 7
27222: PUSH
27223: LD_INT 8
27225: PUSH
27226: LD_INT 9
27228: PUSH
27229: LD_INT 10
27231: PUSH
27232: LD_INT 11
27234: PUSH
27235: LD_INT 12
27237: PUSH
27238: LD_INT 13
27240: PUSH
27241: LD_INT 14
27243: PUSH
27244: LD_INT 15
27246: PUSH
27247: LD_INT 16
27249: PUSH
27250: LD_INT 17
27252: PUSH
27253: LD_INT 18
27255: PUSH
27256: LD_INT 19
27258: PUSH
27259: LD_INT 20
27261: PUSH
27262: LD_INT 21
27264: PUSH
27265: LD_INT 22
27267: PUSH
27268: LD_INT 23
27270: PUSH
27271: LD_INT 24
27273: PUSH
27274: LD_INT 25
27276: PUSH
27277: LD_INT 26
27279: PUSH
27280: LD_INT 27
27282: PUSH
27283: LD_INT 28
27285: PUSH
27286: LD_INT 29
27288: PUSH
27289: LD_INT 30
27291: PUSH
27292: LD_INT 31
27294: PUSH
27295: LD_INT 32
27297: PUSH
27298: LD_INT 33
27300: PUSH
27301: LD_INT 34
27303: PUSH
27304: LD_INT 35
27306: PUSH
27307: LD_INT 36
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 101
27350: PUSH
27351: LD_INT 102
27353: PUSH
27354: LD_INT 103
27356: PUSH
27357: LD_INT 104
27359: PUSH
27360: LD_INT 105
27362: PUSH
27363: LD_INT 106
27365: PUSH
27366: LD_INT 107
27368: PUSH
27369: LD_INT 108
27371: PUSH
27372: LD_INT 109
27374: PUSH
27375: LD_INT 110
27377: PUSH
27378: LD_INT 111
27380: PUSH
27381: LD_INT 112
27383: PUSH
27384: LD_INT 113
27386: PUSH
27387: LD_INT 114
27389: PUSH
27390: LD_INT 115
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: ST_TO_ADDR
// if result then
27414: LD_VAR 0 1
27418: IFFALSE 27707
// begin normal :=  ;
27420: LD_ADDR_VAR 0 3
27424: PUSH
27425: LD_STRING 
27427: ST_TO_ADDR
// hardcore :=  ;
27428: LD_ADDR_VAR 0 4
27432: PUSH
27433: LD_STRING 
27435: ST_TO_ADDR
// for i = 1 to normalCounter do
27436: LD_ADDR_VAR 0 5
27440: PUSH
27441: DOUBLE
27442: LD_INT 1
27444: DEC
27445: ST_TO_ADDR
27446: LD_EXP 69
27450: PUSH
27451: FOR_TO
27452: IFFALSE 27553
// begin tmp := 0 ;
27454: LD_ADDR_VAR 0 2
27458: PUSH
27459: LD_STRING 0
27461: ST_TO_ADDR
// if result [ 1 ] then
27462: LD_VAR 0 1
27466: PUSH
27467: LD_INT 1
27469: ARRAY
27470: IFFALSE 27535
// if result [ 1 ] [ 1 ] = i then
27472: LD_VAR 0 1
27476: PUSH
27477: LD_INT 1
27479: ARRAY
27480: PUSH
27481: LD_INT 1
27483: ARRAY
27484: PUSH
27485: LD_VAR 0 5
27489: EQUAL
27490: IFFALSE 27535
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27492: LD_ADDR_VAR 0 1
27496: PUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: LD_INT 1
27504: PPUSH
27505: LD_VAR 0 1
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: PPUSH
27514: LD_INT 1
27516: PPUSH
27517: CALL_OW 3
27521: PPUSH
27522: CALL_OW 1
27526: ST_TO_ADDR
// tmp := 1 ;
27527: LD_ADDR_VAR 0 2
27531: PUSH
27532: LD_STRING 1
27534: ST_TO_ADDR
// end ; normal := normal & tmp ;
27535: LD_ADDR_VAR 0 3
27539: PUSH
27540: LD_VAR 0 3
27544: PUSH
27545: LD_VAR 0 2
27549: STR
27550: ST_TO_ADDR
// end ;
27551: GO 27451
27553: POP
27554: POP
// for i = 1 to hardcoreCounter do
27555: LD_ADDR_VAR 0 5
27559: PUSH
27560: DOUBLE
27561: LD_INT 1
27563: DEC
27564: ST_TO_ADDR
27565: LD_EXP 70
27569: PUSH
27570: FOR_TO
27571: IFFALSE 27676
// begin tmp := 0 ;
27573: LD_ADDR_VAR 0 2
27577: PUSH
27578: LD_STRING 0
27580: ST_TO_ADDR
// if result [ 2 ] then
27581: LD_VAR 0 1
27585: PUSH
27586: LD_INT 2
27588: ARRAY
27589: IFFALSE 27658
// if result [ 2 ] [ 1 ] = 100 + i then
27591: LD_VAR 0 1
27595: PUSH
27596: LD_INT 2
27598: ARRAY
27599: PUSH
27600: LD_INT 1
27602: ARRAY
27603: PUSH
27604: LD_INT 100
27606: PUSH
27607: LD_VAR 0 5
27611: PLUS
27612: EQUAL
27613: IFFALSE 27658
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27615: LD_ADDR_VAR 0 1
27619: PUSH
27620: LD_VAR 0 1
27624: PPUSH
27625: LD_INT 2
27627: PPUSH
27628: LD_VAR 0 1
27632: PUSH
27633: LD_INT 2
27635: ARRAY
27636: PPUSH
27637: LD_INT 1
27639: PPUSH
27640: CALL_OW 3
27644: PPUSH
27645: CALL_OW 1
27649: ST_TO_ADDR
// tmp := 1 ;
27650: LD_ADDR_VAR 0 2
27654: PUSH
27655: LD_STRING 1
27657: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27658: LD_ADDR_VAR 0 4
27662: PUSH
27663: LD_VAR 0 4
27667: PUSH
27668: LD_VAR 0 2
27672: STR
27673: ST_TO_ADDR
// end ;
27674: GO 27570
27676: POP
27677: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
27678: LD_STRING getStreamItemsFromMission("
27680: PUSH
27681: LD_VAR 0 3
27685: STR
27686: PUSH
27687: LD_STRING ","
27689: STR
27690: PUSH
27691: LD_VAR 0 4
27695: STR
27696: PUSH
27697: LD_STRING ")
27699: STR
27700: PPUSH
27701: CALL_OW 559
// end else
27705: GO 27714
// ToLua ( getStreamItemsFromMission("","") ) ;
27707: LD_STRING getStreamItemsFromMission("","")
27709: PPUSH
27710: CALL_OW 559
// end ;
27714: LD_VAR 0 1
27718: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27719: LD_EXP 68
27723: PUSH
27724: LD_EXP 73
27728: AND
27729: IFFALSE 27853
27731: GO 27733
27733: DISABLE
27734: LD_INT 0
27736: PPUSH
27737: PPUSH
// begin enable ;
27738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27739: LD_ADDR_VAR 0 2
27743: PUSH
27744: LD_INT 22
27746: PUSH
27747: LD_OWVAR 2
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 34
27761: PUSH
27762: LD_INT 7
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 34
27771: PUSH
27772: LD_INT 45
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 34
27781: PUSH
27782: LD_INT 28
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 34
27791: PUSH
27792: LD_INT 47
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PPUSH
27810: CALL_OW 69
27814: ST_TO_ADDR
// if not tmp then
27815: LD_VAR 0 2
27819: NOT
27820: IFFALSE 27824
// exit ;
27822: GO 27853
// for i in tmp do
27824: LD_ADDR_VAR 0 1
27828: PUSH
27829: LD_VAR 0 2
27833: PUSH
27834: FOR_IN
27835: IFFALSE 27851
// begin SetLives ( i , 0 ) ;
27837: LD_VAR 0 1
27841: PPUSH
27842: LD_INT 0
27844: PPUSH
27845: CALL_OW 234
// end ;
27849: GO 27834
27851: POP
27852: POP
// end ;
27853: PPOPN 2
27855: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27856: LD_EXP 68
27860: PUSH
27861: LD_EXP 74
27865: AND
27866: IFFALSE 27950
27868: GO 27870
27870: DISABLE
27871: LD_INT 0
27873: PPUSH
27874: PPUSH
// begin enable ;
27875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27876: LD_ADDR_VAR 0 2
27880: PUSH
27881: LD_INT 22
27883: PUSH
27884: LD_OWVAR 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 32
27895: PUSH
27896: LD_INT 3
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PPUSH
27907: CALL_OW 69
27911: ST_TO_ADDR
// if not tmp then
27912: LD_VAR 0 2
27916: NOT
27917: IFFALSE 27921
// exit ;
27919: GO 27950
// for i in tmp do
27921: LD_ADDR_VAR 0 1
27925: PUSH
27926: LD_VAR 0 2
27930: PUSH
27931: FOR_IN
27932: IFFALSE 27948
// begin SetLives ( i , 0 ) ;
27934: LD_VAR 0 1
27938: PPUSH
27939: LD_INT 0
27941: PPUSH
27942: CALL_OW 234
// end ;
27946: GO 27931
27948: POP
27949: POP
// end ;
27950: PPOPN 2
27952: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27953: LD_EXP 68
27957: PUSH
27958: LD_EXP 71
27962: AND
27963: IFFALSE 28056
27965: GO 27967
27967: DISABLE
27968: LD_INT 0
27970: PPUSH
// begin enable ;
27971: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27972: LD_ADDR_VAR 0 1
27976: PUSH
27977: LD_INT 22
27979: PUSH
27980: LD_OWVAR 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: LD_INT 25
27994: PUSH
27995: LD_INT 5
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 25
28004: PUSH
28005: LD_INT 9
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 25
28014: PUSH
28015: LD_INT 8
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL_OW 69
28036: PUSH
28037: FOR_IN
28038: IFFALSE 28054
// begin SetClass ( i , 1 ) ;
28040: LD_VAR 0 1
28044: PPUSH
28045: LD_INT 1
28047: PPUSH
28048: CALL_OW 336
// end ;
28052: GO 28037
28054: POP
28055: POP
// end ;
28056: PPOPN 1
28058: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28059: LD_EXP 68
28063: PUSH
28064: LD_EXP 72
28068: AND
28069: PUSH
28070: LD_OWVAR 65
28074: PUSH
28075: LD_INT 7
28077: LESS
28078: AND
28079: IFFALSE 28093
28081: GO 28083
28083: DISABLE
// begin enable ;
28084: ENABLE
// game_speed := 7 ;
28085: LD_ADDR_OWVAR 65
28089: PUSH
28090: LD_INT 7
28092: ST_TO_ADDR
// end ;
28093: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28094: LD_EXP 68
28098: PUSH
28099: LD_EXP 75
28103: AND
28104: IFFALSE 28306
28106: GO 28108
28108: DISABLE
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
28113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28114: LD_ADDR_VAR 0 3
28118: PUSH
28119: LD_INT 81
28121: PUSH
28122: LD_OWVAR 2
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 21
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: ST_TO_ADDR
// if not tmp then
28150: LD_VAR 0 3
28154: NOT
28155: IFFALSE 28159
// exit ;
28157: GO 28306
// if tmp > 5 then
28159: LD_VAR 0 3
28163: PUSH
28164: LD_INT 5
28166: GREATER
28167: IFFALSE 28179
// k := 5 else
28169: LD_ADDR_VAR 0 2
28173: PUSH
28174: LD_INT 5
28176: ST_TO_ADDR
28177: GO 28189
// k := tmp ;
28179: LD_ADDR_VAR 0 2
28183: PUSH
28184: LD_VAR 0 3
28188: ST_TO_ADDR
// for i := 1 to k do
28189: LD_ADDR_VAR 0 1
28193: PUSH
28194: DOUBLE
28195: LD_INT 1
28197: DEC
28198: ST_TO_ADDR
28199: LD_VAR 0 2
28203: PUSH
28204: FOR_TO
28205: IFFALSE 28304
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28207: LD_VAR 0 3
28211: PUSH
28212: LD_VAR 0 1
28216: ARRAY
28217: PPUSH
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 4
28225: MOD
28226: PUSH
28227: LD_INT 1
28229: PLUS
28230: PPUSH
28231: CALL_OW 259
28235: PUSH
28236: LD_INT 10
28238: LESS
28239: IFFALSE 28302
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28241: LD_VAR 0 3
28245: PUSH
28246: LD_VAR 0 1
28250: ARRAY
28251: PPUSH
28252: LD_VAR 0 1
28256: PUSH
28257: LD_INT 4
28259: MOD
28260: PUSH
28261: LD_INT 1
28263: PLUS
28264: PPUSH
28265: LD_VAR 0 3
28269: PUSH
28270: LD_VAR 0 1
28274: ARRAY
28275: PPUSH
28276: LD_VAR 0 1
28280: PUSH
28281: LD_INT 4
28283: MOD
28284: PUSH
28285: LD_INT 1
28287: PLUS
28288: PPUSH
28289: CALL_OW 259
28293: PUSH
28294: LD_INT 1
28296: PLUS
28297: PPUSH
28298: CALL_OW 237
28302: GO 28204
28304: POP
28305: POP
// end ;
28306: PPOPN 3
28308: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28309: LD_EXP 68
28313: PUSH
28314: LD_EXP 76
28318: AND
28319: IFFALSE 28339
28321: GO 28323
28323: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28324: LD_INT 4
28326: PPUSH
28327: LD_OWVAR 2
28331: PPUSH
28332: LD_INT 0
28334: PPUSH
28335: CALL_OW 324
28339: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28340: LD_EXP 68
28344: PUSH
28345: LD_EXP 105
28349: AND
28350: IFFALSE 28370
28352: GO 28354
28354: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28355: LD_INT 19
28357: PPUSH
28358: LD_OWVAR 2
28362: PPUSH
28363: LD_INT 0
28365: PPUSH
28366: CALL_OW 324
28370: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28371: LD_EXP 68
28375: PUSH
28376: LD_EXP 77
28380: AND
28381: IFFALSE 28483
28383: GO 28385
28385: DISABLE
28386: LD_INT 0
28388: PPUSH
28389: PPUSH
// begin enable ;
28390: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28391: LD_ADDR_VAR 0 2
28395: PUSH
28396: LD_INT 22
28398: PUSH
28399: LD_OWVAR 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: LD_INT 34
28413: PUSH
28414: LD_INT 11
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 34
28423: PUSH
28424: LD_INT 30
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 69
28444: ST_TO_ADDR
// if not tmp then
28445: LD_VAR 0 2
28449: NOT
28450: IFFALSE 28454
// exit ;
28452: GO 28483
// for i in tmp do
28454: LD_ADDR_VAR 0 1
28458: PUSH
28459: LD_VAR 0 2
28463: PUSH
28464: FOR_IN
28465: IFFALSE 28481
// begin SetLives ( i , 0 ) ;
28467: LD_VAR 0 1
28471: PPUSH
28472: LD_INT 0
28474: PPUSH
28475: CALL_OW 234
// end ;
28479: GO 28464
28481: POP
28482: POP
// end ;
28483: PPOPN 2
28485: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28486: LD_EXP 68
28490: PUSH
28491: LD_EXP 78
28495: AND
28496: IFFALSE 28516
28498: GO 28500
28500: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28501: LD_INT 32
28503: PPUSH
28504: LD_OWVAR 2
28508: PPUSH
28509: LD_INT 0
28511: PPUSH
28512: CALL_OW 324
28516: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28517: LD_EXP 68
28521: PUSH
28522: LD_EXP 79
28526: AND
28527: IFFALSE 28708
28529: GO 28531
28531: DISABLE
28532: LD_INT 0
28534: PPUSH
28535: PPUSH
28536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28537: LD_ADDR_VAR 0 2
28541: PUSH
28542: LD_INT 22
28544: PUSH
28545: LD_OWVAR 2
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 33
28556: PUSH
28557: LD_INT 3
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PPUSH
28568: CALL_OW 69
28572: ST_TO_ADDR
// if not tmp then
28573: LD_VAR 0 2
28577: NOT
28578: IFFALSE 28582
// exit ;
28580: GO 28708
// side := 0 ;
28582: LD_ADDR_VAR 0 3
28586: PUSH
28587: LD_INT 0
28589: ST_TO_ADDR
// for i := 1 to 8 do
28590: LD_ADDR_VAR 0 1
28594: PUSH
28595: DOUBLE
28596: LD_INT 1
28598: DEC
28599: ST_TO_ADDR
28600: LD_INT 8
28602: PUSH
28603: FOR_TO
28604: IFFALSE 28652
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28606: LD_OWVAR 2
28610: PUSH
28611: LD_VAR 0 1
28615: NONEQUAL
28616: PUSH
28617: LD_OWVAR 2
28621: PPUSH
28622: LD_VAR 0 1
28626: PPUSH
28627: CALL_OW 81
28631: PUSH
28632: LD_INT 2
28634: EQUAL
28635: AND
28636: IFFALSE 28650
// begin side := i ;
28638: LD_ADDR_VAR 0 3
28642: PUSH
28643: LD_VAR 0 1
28647: ST_TO_ADDR
// break ;
28648: GO 28652
// end ;
28650: GO 28603
28652: POP
28653: POP
// if not side then
28654: LD_VAR 0 3
28658: NOT
28659: IFFALSE 28663
// exit ;
28661: GO 28708
// for i := 1 to tmp do
28663: LD_ADDR_VAR 0 1
28667: PUSH
28668: DOUBLE
28669: LD_INT 1
28671: DEC
28672: ST_TO_ADDR
28673: LD_VAR 0 2
28677: PUSH
28678: FOR_TO
28679: IFFALSE 28706
// if Prob ( 60 ) then
28681: LD_INT 60
28683: PPUSH
28684: CALL_OW 13
28688: IFFALSE 28704
// SetSide ( i , side ) ;
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_VAR 0 3
28699: PPUSH
28700: CALL_OW 235
28704: GO 28678
28706: POP
28707: POP
// end ;
28708: PPOPN 3
28710: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28711: LD_EXP 68
28715: PUSH
28716: LD_EXP 81
28720: AND
28721: IFFALSE 28840
28723: GO 28725
28725: DISABLE
28726: LD_INT 0
28728: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28729: LD_ADDR_VAR 0 1
28733: PUSH
28734: LD_INT 22
28736: PUSH
28737: LD_OWVAR 2
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 21
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 3
28758: PUSH
28759: LD_INT 23
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 69
28782: PUSH
28783: FOR_IN
28784: IFFALSE 28838
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 257
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: LD_INT 3
28804: PUSH
28805: LD_INT 4
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: IN
28814: IFFALSE 28836
// SetClass ( un , rand ( 1 , 4 ) ) ;
28816: LD_VAR 0 1
28820: PPUSH
28821: LD_INT 1
28823: PPUSH
28824: LD_INT 4
28826: PPUSH
28827: CALL_OW 12
28831: PPUSH
28832: CALL_OW 336
28836: GO 28783
28838: POP
28839: POP
// end ;
28840: PPOPN 1
28842: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28843: LD_EXP 68
28847: PUSH
28848: LD_EXP 80
28852: AND
28853: IFFALSE 28932
28855: GO 28857
28857: DISABLE
28858: LD_INT 0
28860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28861: LD_ADDR_VAR 0 1
28865: PUSH
28866: LD_INT 22
28868: PUSH
28869: LD_OWVAR 2
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 21
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PPUSH
28892: CALL_OW 69
28896: ST_TO_ADDR
// if not tmp then
28897: LD_VAR 0 1
28901: NOT
28902: IFFALSE 28906
// exit ;
28904: GO 28932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28906: LD_VAR 0 1
28910: PUSH
28911: LD_INT 1
28913: PPUSH
28914: LD_VAR 0 1
28918: PPUSH
28919: CALL_OW 12
28923: ARRAY
28924: PPUSH
28925: LD_INT 100
28927: PPUSH
28928: CALL_OW 234
// end ;
28932: PPOPN 1
28934: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28935: LD_EXP 68
28939: PUSH
28940: LD_EXP 82
28944: AND
28945: IFFALSE 29043
28947: GO 28949
28949: DISABLE
28950: LD_INT 0
28952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28953: LD_ADDR_VAR 0 1
28957: PUSH
28958: LD_INT 22
28960: PUSH
28961: LD_OWVAR 2
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 21
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PPUSH
28984: CALL_OW 69
28988: ST_TO_ADDR
// if not tmp then
28989: LD_VAR 0 1
28993: NOT
28994: IFFALSE 28998
// exit ;
28996: GO 29043
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28998: LD_VAR 0 1
29002: PUSH
29003: LD_INT 1
29005: PPUSH
29006: LD_VAR 0 1
29010: PPUSH
29011: CALL_OW 12
29015: ARRAY
29016: PPUSH
29017: LD_INT 1
29019: PPUSH
29020: LD_INT 4
29022: PPUSH
29023: CALL_OW 12
29027: PPUSH
29028: LD_INT 3000
29030: PPUSH
29031: LD_INT 9000
29033: PPUSH
29034: CALL_OW 12
29038: PPUSH
29039: CALL_OW 492
// end ;
29043: PPOPN 1
29045: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29046: LD_EXP 68
29050: PUSH
29051: LD_EXP 83
29055: AND
29056: IFFALSE 29076
29058: GO 29060
29060: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29061: LD_INT 1
29063: PPUSH
29064: LD_OWVAR 2
29068: PPUSH
29069: LD_INT 0
29071: PPUSH
29072: CALL_OW 324
29076: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29077: LD_EXP 68
29081: PUSH
29082: LD_EXP 84
29086: AND
29087: IFFALSE 29170
29089: GO 29091
29091: DISABLE
29092: LD_INT 0
29094: PPUSH
29095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29096: LD_ADDR_VAR 0 2
29100: PUSH
29101: LD_INT 22
29103: PUSH
29104: LD_OWVAR 2
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 21
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PPUSH
29127: CALL_OW 69
29131: ST_TO_ADDR
// if not tmp then
29132: LD_VAR 0 2
29136: NOT
29137: IFFALSE 29141
// exit ;
29139: GO 29170
// for i in tmp do
29141: LD_ADDR_VAR 0 1
29145: PUSH
29146: LD_VAR 0 2
29150: PUSH
29151: FOR_IN
29152: IFFALSE 29168
// SetBLevel ( i , 10 ) ;
29154: LD_VAR 0 1
29158: PPUSH
29159: LD_INT 10
29161: PPUSH
29162: CALL_OW 241
29166: GO 29151
29168: POP
29169: POP
// end ;
29170: PPOPN 2
29172: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29173: LD_EXP 68
29177: PUSH
29178: LD_EXP 85
29182: AND
29183: IFFALSE 29294
29185: GO 29187
29187: DISABLE
29188: LD_INT 0
29190: PPUSH
29191: PPUSH
29192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29193: LD_ADDR_VAR 0 3
29197: PUSH
29198: LD_INT 22
29200: PUSH
29201: LD_OWVAR 2
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 25
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PPUSH
29224: CALL_OW 69
29228: ST_TO_ADDR
// if not tmp then
29229: LD_VAR 0 3
29233: NOT
29234: IFFALSE 29238
// exit ;
29236: GO 29294
// un := tmp [ rand ( 1 , tmp ) ] ;
29238: LD_ADDR_VAR 0 2
29242: PUSH
29243: LD_VAR 0 3
29247: PUSH
29248: LD_INT 1
29250: PPUSH
29251: LD_VAR 0 3
29255: PPUSH
29256: CALL_OW 12
29260: ARRAY
29261: ST_TO_ADDR
// if Crawls ( un ) then
29262: LD_VAR 0 2
29266: PPUSH
29267: CALL_OW 318
29271: IFFALSE 29282
// ComWalk ( un ) ;
29273: LD_VAR 0 2
29277: PPUSH
29278: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29282: LD_VAR 0 2
29286: PPUSH
29287: LD_INT 5
29289: PPUSH
29290: CALL_OW 336
// end ;
29294: PPOPN 3
29296: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29297: LD_EXP 68
29301: PUSH
29302: LD_EXP 86
29306: AND
29307: PUSH
29308: LD_OWVAR 67
29312: PUSH
29313: LD_INT 3
29315: LESS
29316: AND
29317: IFFALSE 29336
29319: GO 29321
29321: DISABLE
// Difficulty := Difficulty + 1 ;
29322: LD_ADDR_OWVAR 67
29326: PUSH
29327: LD_OWVAR 67
29331: PUSH
29332: LD_INT 1
29334: PLUS
29335: ST_TO_ADDR
29336: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29337: LD_EXP 68
29341: PUSH
29342: LD_EXP 87
29346: AND
29347: IFFALSE 29450
29349: GO 29351
29351: DISABLE
29352: LD_INT 0
29354: PPUSH
// begin for i := 1 to 5 do
29355: LD_ADDR_VAR 0 1
29359: PUSH
29360: DOUBLE
29361: LD_INT 1
29363: DEC
29364: ST_TO_ADDR
29365: LD_INT 5
29367: PUSH
29368: FOR_TO
29369: IFFALSE 29448
// begin uc_nation := nation_nature ;
29371: LD_ADDR_OWVAR 21
29375: PUSH
29376: LD_INT 0
29378: ST_TO_ADDR
// uc_side := 0 ;
29379: LD_ADDR_OWVAR 20
29383: PUSH
29384: LD_INT 0
29386: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29387: LD_ADDR_OWVAR 29
29391: PUSH
29392: LD_INT 12
29394: PUSH
29395: LD_INT 12
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// hc_agressivity := 20 ;
29402: LD_ADDR_OWVAR 35
29406: PUSH
29407: LD_INT 20
29409: ST_TO_ADDR
// hc_class := class_tiger ;
29410: LD_ADDR_OWVAR 28
29414: PUSH
29415: LD_INT 14
29417: ST_TO_ADDR
// hc_gallery :=  ;
29418: LD_ADDR_OWVAR 33
29422: PUSH
29423: LD_STRING 
29425: ST_TO_ADDR
// hc_name :=  ;
29426: LD_ADDR_OWVAR 26
29430: PUSH
29431: LD_STRING 
29433: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29434: CALL_OW 44
29438: PPUSH
29439: LD_INT 0
29441: PPUSH
29442: CALL_OW 51
// end ;
29446: GO 29368
29448: POP
29449: POP
// end ;
29450: PPOPN 1
29452: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29453: LD_EXP 68
29457: PUSH
29458: LD_EXP 88
29462: AND
29463: IFFALSE 29472
29465: GO 29467
29467: DISABLE
// StreamSibBomb ;
29468: CALL 29473 0 0
29472: END
// export function StreamSibBomb ; var i , x , y ; begin
29473: LD_INT 0
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
// result := false ;
29479: LD_ADDR_VAR 0 1
29483: PUSH
29484: LD_INT 0
29486: ST_TO_ADDR
// for i := 1 to 16 do
29487: LD_ADDR_VAR 0 2
29491: PUSH
29492: DOUBLE
29493: LD_INT 1
29495: DEC
29496: ST_TO_ADDR
29497: LD_INT 16
29499: PUSH
29500: FOR_TO
29501: IFFALSE 29700
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 10
29510: PUSH
29511: LD_INT 20
29513: PUSH
29514: LD_INT 30
29516: PUSH
29517: LD_INT 40
29519: PUSH
29520: LD_INT 50
29522: PUSH
29523: LD_INT 60
29525: PUSH
29526: LD_INT 70
29528: PUSH
29529: LD_INT 80
29531: PUSH
29532: LD_INT 90
29534: PUSH
29535: LD_INT 100
29537: PUSH
29538: LD_INT 110
29540: PUSH
29541: LD_INT 120
29543: PUSH
29544: LD_INT 130
29546: PUSH
29547: LD_INT 140
29549: PUSH
29550: LD_INT 150
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PPUSH
29573: LD_INT 15
29575: PPUSH
29576: CALL_OW 12
29580: ARRAY
29581: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29582: LD_ADDR_VAR 0 4
29586: PUSH
29587: LD_INT 10
29589: PUSH
29590: LD_INT 20
29592: PUSH
29593: LD_INT 30
29595: PUSH
29596: LD_INT 40
29598: PUSH
29599: LD_INT 50
29601: PUSH
29602: LD_INT 60
29604: PUSH
29605: LD_INT 70
29607: PUSH
29608: LD_INT 80
29610: PUSH
29611: LD_INT 90
29613: PUSH
29614: LD_INT 100
29616: PUSH
29617: LD_INT 110
29619: PUSH
29620: LD_INT 120
29622: PUSH
29623: LD_INT 130
29625: PUSH
29626: LD_INT 140
29628: PUSH
29629: LD_INT 150
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: PPUSH
29652: LD_INT 15
29654: PPUSH
29655: CALL_OW 12
29659: ARRAY
29660: ST_TO_ADDR
// if ValidHex ( x , y ) then
29661: LD_VAR 0 3
29665: PPUSH
29666: LD_VAR 0 4
29670: PPUSH
29671: CALL_OW 488
29675: IFFALSE 29698
// begin result := [ x , y ] ;
29677: LD_ADDR_VAR 0 1
29681: PUSH
29682: LD_VAR 0 3
29686: PUSH
29687: LD_VAR 0 4
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// break ;
29696: GO 29700
// end ; end ;
29698: GO 29500
29700: POP
29701: POP
// if result then
29702: LD_VAR 0 1
29706: IFFALSE 29766
// begin ToLua ( playSibBomb() ) ;
29708: LD_STRING playSibBomb()
29710: PPUSH
29711: CALL_OW 559
// wait ( 0 0$14 ) ;
29715: LD_INT 490
29717: PPUSH
29718: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29722: LD_VAR 0 1
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: PPUSH
29731: LD_VAR 0 1
29735: PUSH
29736: LD_INT 2
29738: ARRAY
29739: PPUSH
29740: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29744: LD_VAR 0 1
29748: PUSH
29749: LD_INT 1
29751: ARRAY
29752: PPUSH
29753: LD_VAR 0 1
29757: PUSH
29758: LD_INT 2
29760: ARRAY
29761: PPUSH
29762: CALL_OW 429
// end ; end ;
29766: LD_VAR 0 1
29770: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29771: LD_EXP 68
29775: PUSH
29776: LD_EXP 90
29780: AND
29781: IFFALSE 29793
29783: GO 29785
29785: DISABLE
// YouLost (  ) ;
29786: LD_STRING 
29788: PPUSH
29789: CALL_OW 104
29793: END
// every 0 0$1 trigger StreamModeActive and sFog do
29794: LD_EXP 68
29798: PUSH
29799: LD_EXP 89
29803: AND
29804: IFFALSE 29818
29806: GO 29808
29808: DISABLE
// FogOff ( your_side ) ;
29809: LD_OWVAR 2
29813: PPUSH
29814: CALL_OW 344
29818: END
// every 0 0$1 trigger StreamModeActive and sSun do
29819: LD_EXP 68
29823: PUSH
29824: LD_EXP 91
29828: AND
29829: IFFALSE 29857
29831: GO 29833
29833: DISABLE
// begin solar_recharge_percent := 0 ;
29834: LD_ADDR_OWVAR 79
29838: PUSH
29839: LD_INT 0
29841: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29842: LD_INT 10500
29844: PPUSH
29845: CALL_OW 67
// solar_recharge_percent := 100 ;
29849: LD_ADDR_OWVAR 79
29853: PUSH
29854: LD_INT 100
29856: ST_TO_ADDR
// end ;
29857: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29858: LD_EXP 68
29862: PUSH
29863: LD_EXP 92
29867: AND
29868: IFFALSE 30107
29870: GO 29872
29872: DISABLE
29873: LD_INT 0
29875: PPUSH
29876: PPUSH
29877: PPUSH
// begin tmp := [ ] ;
29878: LD_ADDR_VAR 0 3
29882: PUSH
29883: EMPTY
29884: ST_TO_ADDR
// for i := 1 to 6 do
29885: LD_ADDR_VAR 0 1
29889: PUSH
29890: DOUBLE
29891: LD_INT 1
29893: DEC
29894: ST_TO_ADDR
29895: LD_INT 6
29897: PUSH
29898: FOR_TO
29899: IFFALSE 30004
// begin uc_nation := nation_nature ;
29901: LD_ADDR_OWVAR 21
29905: PUSH
29906: LD_INT 0
29908: ST_TO_ADDR
// uc_side := 0 ;
29909: LD_ADDR_OWVAR 20
29913: PUSH
29914: LD_INT 0
29916: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29917: LD_ADDR_OWVAR 29
29921: PUSH
29922: LD_INT 12
29924: PUSH
29925: LD_INT 12
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: ST_TO_ADDR
// hc_agressivity := 20 ;
29932: LD_ADDR_OWVAR 35
29936: PUSH
29937: LD_INT 20
29939: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29940: LD_ADDR_OWVAR 28
29944: PUSH
29945: LD_INT 17
29947: ST_TO_ADDR
// hc_gallery :=  ;
29948: LD_ADDR_OWVAR 33
29952: PUSH
29953: LD_STRING 
29955: ST_TO_ADDR
// hc_name :=  ;
29956: LD_ADDR_OWVAR 26
29960: PUSH
29961: LD_STRING 
29963: ST_TO_ADDR
// un := CreateHuman ;
29964: LD_ADDR_VAR 0 2
29968: PUSH
29969: CALL_OW 44
29973: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29974: LD_VAR 0 2
29978: PPUSH
29979: LD_INT 1
29981: PPUSH
29982: CALL_OW 51
// tmp := tmp ^ un ;
29986: LD_ADDR_VAR 0 3
29990: PUSH
29991: LD_VAR 0 3
29995: PUSH
29996: LD_VAR 0 2
30000: ADD
30001: ST_TO_ADDR
// end ;
30002: GO 29898
30004: POP
30005: POP
// repeat wait ( 0 0$1 ) ;
30006: LD_INT 35
30008: PPUSH
30009: CALL_OW 67
// for un in tmp do
30013: LD_ADDR_VAR 0 2
30017: PUSH
30018: LD_VAR 0 3
30022: PUSH
30023: FOR_IN
30024: IFFALSE 30098
// begin if IsDead ( un ) then
30026: LD_VAR 0 2
30030: PPUSH
30031: CALL_OW 301
30035: IFFALSE 30055
// begin tmp := tmp diff un ;
30037: LD_ADDR_VAR 0 3
30041: PUSH
30042: LD_VAR 0 3
30046: PUSH
30047: LD_VAR 0 2
30051: DIFF
30052: ST_TO_ADDR
// continue ;
30053: GO 30023
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30055: LD_VAR 0 2
30059: PPUSH
30060: LD_INT 3
30062: PUSH
30063: LD_INT 22
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PPUSH
30077: CALL_OW 69
30081: PPUSH
30082: LD_VAR 0 2
30086: PPUSH
30087: CALL_OW 74
30091: PPUSH
30092: CALL_OW 115
// end ;
30096: GO 30023
30098: POP
30099: POP
// until not tmp ;
30100: LD_VAR 0 3
30104: NOT
30105: IFFALSE 30006
// end ;
30107: PPOPN 3
30109: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30110: LD_EXP 68
30114: PUSH
30115: LD_EXP 93
30119: AND
30120: IFFALSE 30174
30122: GO 30124
30124: DISABLE
// begin ToLua ( displayTroll(); ) ;
30125: LD_STRING displayTroll();
30127: PPUSH
30128: CALL_OW 559
// wait ( 3 3$00 ) ;
30132: LD_INT 6300
30134: PPUSH
30135: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30139: LD_STRING hideTroll();
30141: PPUSH
30142: CALL_OW 559
// wait ( 1 1$00 ) ;
30146: LD_INT 2100
30148: PPUSH
30149: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30153: LD_STRING displayTroll();
30155: PPUSH
30156: CALL_OW 559
// wait ( 1 1$00 ) ;
30160: LD_INT 2100
30162: PPUSH
30163: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30167: LD_STRING hideTroll();
30169: PPUSH
30170: CALL_OW 559
// end ;
30174: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30175: LD_EXP 68
30179: PUSH
30180: LD_EXP 94
30184: AND
30185: IFFALSE 30248
30187: GO 30189
30189: DISABLE
30190: LD_INT 0
30192: PPUSH
// begin p := 0 ;
30193: LD_ADDR_VAR 0 1
30197: PUSH
30198: LD_INT 0
30200: ST_TO_ADDR
// repeat game_speed := 1 ;
30201: LD_ADDR_OWVAR 65
30205: PUSH
30206: LD_INT 1
30208: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30209: LD_INT 35
30211: PPUSH
30212: CALL_OW 67
// p := p + 1 ;
30216: LD_ADDR_VAR 0 1
30220: PUSH
30221: LD_VAR 0 1
30225: PUSH
30226: LD_INT 1
30228: PLUS
30229: ST_TO_ADDR
// until p >= 60 ;
30230: LD_VAR 0 1
30234: PUSH
30235: LD_INT 60
30237: GREATEREQUAL
30238: IFFALSE 30201
// game_speed := 4 ;
30240: LD_ADDR_OWVAR 65
30244: PUSH
30245: LD_INT 4
30247: ST_TO_ADDR
// end ;
30248: PPOPN 1
30250: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30251: LD_EXP 68
30255: PUSH
30256: LD_EXP 95
30260: AND
30261: IFFALSE 30407
30263: GO 30265
30265: DISABLE
30266: LD_INT 0
30268: PPUSH
30269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30270: LD_ADDR_VAR 0 1
30274: PUSH
30275: LD_INT 22
30277: PUSH
30278: LD_OWVAR 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: PUSH
30290: LD_INT 30
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 30
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: CALL_OW 69
30323: ST_TO_ADDR
// if not depot then
30324: LD_VAR 0 1
30328: NOT
30329: IFFALSE 30333
// exit ;
30331: GO 30407
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30333: LD_ADDR_VAR 0 2
30337: PUSH
30338: LD_VAR 0 1
30342: PUSH
30343: LD_INT 1
30345: PPUSH
30346: LD_VAR 0 1
30350: PPUSH
30351: CALL_OW 12
30355: ARRAY
30356: PPUSH
30357: CALL_OW 274
30361: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30362: LD_VAR 0 2
30366: PPUSH
30367: LD_INT 1
30369: PPUSH
30370: LD_INT 0
30372: PPUSH
30373: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30377: LD_VAR 0 2
30381: PPUSH
30382: LD_INT 2
30384: PPUSH
30385: LD_INT 0
30387: PPUSH
30388: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30392: LD_VAR 0 2
30396: PPUSH
30397: LD_INT 3
30399: PPUSH
30400: LD_INT 0
30402: PPUSH
30403: CALL_OW 277
// end ;
30407: PPOPN 2
30409: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30410: LD_EXP 68
30414: PUSH
30415: LD_EXP 96
30419: AND
30420: IFFALSE 30517
30422: GO 30424
30424: DISABLE
30425: LD_INT 0
30427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30428: LD_ADDR_VAR 0 1
30432: PUSH
30433: LD_INT 22
30435: PUSH
30436: LD_OWVAR 2
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 21
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: LD_INT 23
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: PPUSH
30477: CALL_OW 69
30481: ST_TO_ADDR
// if not tmp then
30482: LD_VAR 0 1
30486: NOT
30487: IFFALSE 30491
// exit ;
30489: GO 30517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30491: LD_VAR 0 1
30495: PUSH
30496: LD_INT 1
30498: PPUSH
30499: LD_VAR 0 1
30503: PPUSH
30504: CALL_OW 12
30508: ARRAY
30509: PPUSH
30510: LD_INT 200
30512: PPUSH
30513: CALL_OW 234
// end ;
30517: PPOPN 1
30519: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30520: LD_EXP 68
30524: PUSH
30525: LD_EXP 97
30529: AND
30530: IFFALSE 30609
30532: GO 30534
30534: DISABLE
30535: LD_INT 0
30537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30538: LD_ADDR_VAR 0 1
30542: PUSH
30543: LD_INT 22
30545: PUSH
30546: LD_OWVAR 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 21
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PPUSH
30569: CALL_OW 69
30573: ST_TO_ADDR
// if not tmp then
30574: LD_VAR 0 1
30578: NOT
30579: IFFALSE 30583
// exit ;
30581: GO 30609
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30583: LD_VAR 0 1
30587: PUSH
30588: LD_INT 1
30590: PPUSH
30591: LD_VAR 0 1
30595: PPUSH
30596: CALL_OW 12
30600: ARRAY
30601: PPUSH
30602: LD_INT 60
30604: PPUSH
30605: CALL_OW 234
// end ;
30609: PPOPN 1
30611: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30612: LD_EXP 68
30616: PUSH
30617: LD_EXP 98
30621: AND
30622: IFFALSE 30721
30624: GO 30626
30626: DISABLE
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
// begin enable ;
30631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30632: LD_ADDR_VAR 0 1
30636: PUSH
30637: LD_INT 22
30639: PUSH
30640: LD_OWVAR 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 61
30651: PUSH
30652: EMPTY
30653: LIST
30654: PUSH
30655: LD_INT 33
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: PPUSH
30670: CALL_OW 69
30674: ST_TO_ADDR
// if not tmp then
30675: LD_VAR 0 1
30679: NOT
30680: IFFALSE 30684
// exit ;
30682: GO 30721
// for i in tmp do
30684: LD_ADDR_VAR 0 2
30688: PUSH
30689: LD_VAR 0 1
30693: PUSH
30694: FOR_IN
30695: IFFALSE 30719
// if IsControledBy ( i ) then
30697: LD_VAR 0 2
30701: PPUSH
30702: CALL_OW 312
30706: IFFALSE 30717
// ComUnlink ( i ) ;
30708: LD_VAR 0 2
30712: PPUSH
30713: CALL_OW 136
30717: GO 30694
30719: POP
30720: POP
// end ;
30721: PPOPN 2
30723: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30724: LD_EXP 68
30728: PUSH
30729: LD_EXP 99
30733: AND
30734: IFFALSE 30874
30736: GO 30738
30738: DISABLE
30739: LD_INT 0
30741: PPUSH
30742: PPUSH
// begin ToLua ( displayPowell(); ) ;
30743: LD_STRING displayPowell();
30745: PPUSH
30746: CALL_OW 559
// uc_side := 0 ;
30750: LD_ADDR_OWVAR 20
30754: PUSH
30755: LD_INT 0
30757: ST_TO_ADDR
// uc_nation := 2 ;
30758: LD_ADDR_OWVAR 21
30762: PUSH
30763: LD_INT 2
30765: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30766: LD_ADDR_OWVAR 37
30770: PUSH
30771: LD_INT 14
30773: ST_TO_ADDR
// vc_engine := engine_siberite ;
30774: LD_ADDR_OWVAR 39
30778: PUSH
30779: LD_INT 3
30781: ST_TO_ADDR
// vc_control := control_apeman ;
30782: LD_ADDR_OWVAR 38
30786: PUSH
30787: LD_INT 5
30789: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30790: LD_ADDR_OWVAR 40
30794: PUSH
30795: LD_INT 29
30797: ST_TO_ADDR
// un := CreateVehicle ;
30798: LD_ADDR_VAR 0 2
30802: PUSH
30803: CALL_OW 45
30807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30808: LD_VAR 0 2
30812: PPUSH
30813: LD_INT 1
30815: PPUSH
30816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30820: LD_INT 35
30822: PPUSH
30823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30827: LD_VAR 0 2
30831: PPUSH
30832: LD_INT 22
30834: PUSH
30835: LD_OWVAR 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PPUSH
30844: CALL_OW 69
30848: PPUSH
30849: LD_VAR 0 2
30853: PPUSH
30854: CALL_OW 74
30858: PPUSH
30859: CALL_OW 115
// until IsDead ( un ) ;
30863: LD_VAR 0 2
30867: PPUSH
30868: CALL_OW 301
30872: IFFALSE 30820
// end ;
30874: PPOPN 2
30876: END
// every 0 0$1 trigger StreamModeActive and sStu do
30877: LD_EXP 68
30881: PUSH
30882: LD_EXP 107
30886: AND
30887: IFFALSE 30903
30889: GO 30891
30891: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30892: LD_STRING displayStucuk();
30894: PPUSH
30895: CALL_OW 559
// ResetFog ;
30899: CALL_OW 335
// end ;
30903: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30904: LD_EXP 68
30908: PUSH
30909: LD_EXP 100
30913: AND
30914: IFFALSE 31055
30916: GO 30918
30918: DISABLE
30919: LD_INT 0
30921: PPUSH
30922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: LD_INT 22
30930: PUSH
30931: LD_OWVAR 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 21
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: ST_TO_ADDR
// if not tmp then
30959: LD_VAR 0 2
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31055
// un := tmp [ rand ( 1 , tmp ) ] ;
30968: LD_ADDR_VAR 0 1
30972: PUSH
30973: LD_VAR 0 2
30977: PUSH
30978: LD_INT 1
30980: PPUSH
30981: LD_VAR 0 2
30985: PPUSH
30986: CALL_OW 12
30990: ARRAY
30991: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30992: LD_VAR 0 1
30996: PPUSH
30997: LD_INT 0
30999: PPUSH
31000: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31004: LD_VAR 0 1
31008: PPUSH
31009: LD_OWVAR 3
31013: PUSH
31014: LD_VAR 0 1
31018: DIFF
31019: PPUSH
31020: LD_VAR 0 1
31024: PPUSH
31025: CALL_OW 74
31029: PPUSH
31030: CALL_OW 115
// wait ( 0 0$20 ) ;
31034: LD_INT 700
31036: PPUSH
31037: CALL_OW 67
// SetSide ( un , your_side ) ;
31041: LD_VAR 0 1
31045: PPUSH
31046: LD_OWVAR 2
31050: PPUSH
31051: CALL_OW 235
// end ;
31055: PPOPN 2
31057: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31058: LD_EXP 68
31062: PUSH
31063: LD_EXP 101
31067: AND
31068: IFFALSE 31174
31070: GO 31072
31072: DISABLE
31073: LD_INT 0
31075: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31076: LD_ADDR_VAR 0 1
31080: PUSH
31081: LD_INT 22
31083: PUSH
31084: LD_OWVAR 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 30
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 30
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 69
31129: ST_TO_ADDR
// if not depot then
31130: LD_VAR 0 1
31134: NOT
31135: IFFALSE 31139
// exit ;
31137: GO 31174
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31139: LD_VAR 0 1
31143: PUSH
31144: LD_INT 1
31146: ARRAY
31147: PPUSH
31148: CALL_OW 250
31152: PPUSH
31153: LD_VAR 0 1
31157: PUSH
31158: LD_INT 1
31160: ARRAY
31161: PPUSH
31162: CALL_OW 251
31166: PPUSH
31167: LD_INT 70
31169: PPUSH
31170: CALL_OW 495
// end ;
31174: PPOPN 1
31176: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31177: LD_EXP 68
31181: PUSH
31182: LD_EXP 102
31186: AND
31187: IFFALSE 31398
31189: GO 31191
31191: DISABLE
31192: LD_INT 0
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31199: LD_ADDR_VAR 0 5
31203: PUSH
31204: LD_INT 22
31206: PUSH
31207: LD_OWVAR 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 21
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PPUSH
31230: CALL_OW 69
31234: ST_TO_ADDR
// if not tmp then
31235: LD_VAR 0 5
31239: NOT
31240: IFFALSE 31244
// exit ;
31242: GO 31398
// for i in tmp do
31244: LD_ADDR_VAR 0 1
31248: PUSH
31249: LD_VAR 0 5
31253: PUSH
31254: FOR_IN
31255: IFFALSE 31396
// begin d := rand ( 0 , 5 ) ;
31257: LD_ADDR_VAR 0 4
31261: PUSH
31262: LD_INT 0
31264: PPUSH
31265: LD_INT 5
31267: PPUSH
31268: CALL_OW 12
31272: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31273: LD_ADDR_VAR 0 2
31277: PUSH
31278: LD_VAR 0 1
31282: PPUSH
31283: CALL_OW 250
31287: PPUSH
31288: LD_VAR 0 4
31292: PPUSH
31293: LD_INT 3
31295: PPUSH
31296: LD_INT 12
31298: PPUSH
31299: CALL_OW 12
31303: PPUSH
31304: CALL_OW 272
31308: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 251
31323: PPUSH
31324: LD_VAR 0 4
31328: PPUSH
31329: LD_INT 3
31331: PPUSH
31332: LD_INT 12
31334: PPUSH
31335: CALL_OW 12
31339: PPUSH
31340: CALL_OW 273
31344: ST_TO_ADDR
// if ValidHex ( x , y ) then
31345: LD_VAR 0 2
31349: PPUSH
31350: LD_VAR 0 3
31354: PPUSH
31355: CALL_OW 488
31359: IFFALSE 31394
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31361: LD_VAR 0 1
31365: PPUSH
31366: LD_VAR 0 2
31370: PPUSH
31371: LD_VAR 0 3
31375: PPUSH
31376: LD_INT 3
31378: PPUSH
31379: LD_INT 6
31381: PPUSH
31382: CALL_OW 12
31386: PPUSH
31387: LD_INT 1
31389: PPUSH
31390: CALL_OW 483
// end ;
31394: GO 31254
31396: POP
31397: POP
// end ;
31398: PPOPN 5
31400: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31401: LD_EXP 68
31405: PUSH
31406: LD_EXP 103
31410: AND
31411: IFFALSE 31505
31413: GO 31415
31415: DISABLE
31416: LD_INT 0
31418: PPUSH
31419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31420: LD_ADDR_VAR 0 2
31424: PUSH
31425: LD_INT 22
31427: PUSH
31428: LD_OWVAR 2
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 32
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 21
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: LIST
31461: PPUSH
31462: CALL_OW 69
31466: ST_TO_ADDR
// if not tmp then
31467: LD_VAR 0 2
31471: NOT
31472: IFFALSE 31476
// exit ;
31474: GO 31505
// for i in tmp do
31476: LD_ADDR_VAR 0 1
31480: PUSH
31481: LD_VAR 0 2
31485: PUSH
31486: FOR_IN
31487: IFFALSE 31503
// SetFuel ( i , 0 ) ;
31489: LD_VAR 0 1
31493: PPUSH
31494: LD_INT 0
31496: PPUSH
31497: CALL_OW 240
31501: GO 31486
31503: POP
31504: POP
// end ;
31505: PPOPN 2
31507: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31508: LD_EXP 68
31512: PUSH
31513: LD_EXP 104
31517: AND
31518: IFFALSE 31584
31520: GO 31522
31522: DISABLE
31523: LD_INT 0
31525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31526: LD_ADDR_VAR 0 1
31530: PUSH
31531: LD_INT 22
31533: PUSH
31534: LD_OWVAR 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 30
31545: PUSH
31546: LD_INT 29
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 69
31561: ST_TO_ADDR
// if not tmp then
31562: LD_VAR 0 1
31566: NOT
31567: IFFALSE 31571
// exit ;
31569: GO 31584
// DestroyUnit ( tmp [ 1 ] ) ;
31571: LD_VAR 0 1
31575: PUSH
31576: LD_INT 1
31578: ARRAY
31579: PPUSH
31580: CALL_OW 65
// end ;
31584: PPOPN 1
31586: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31587: LD_EXP 68
31591: PUSH
31592: LD_EXP 106
31596: AND
31597: IFFALSE 31726
31599: GO 31601
31601: DISABLE
31602: LD_INT 0
31604: PPUSH
// begin uc_side := 0 ;
31605: LD_ADDR_OWVAR 20
31609: PUSH
31610: LD_INT 0
31612: ST_TO_ADDR
// uc_nation := nation_arabian ;
31613: LD_ADDR_OWVAR 21
31617: PUSH
31618: LD_INT 2
31620: ST_TO_ADDR
// hc_gallery :=  ;
31621: LD_ADDR_OWVAR 33
31625: PUSH
31626: LD_STRING 
31628: ST_TO_ADDR
// hc_name :=  ;
31629: LD_ADDR_OWVAR 26
31633: PUSH
31634: LD_STRING 
31636: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31637: LD_INT 1
31639: PPUSH
31640: LD_INT 11
31642: PPUSH
31643: LD_INT 10
31645: PPUSH
31646: CALL_OW 380
// un := CreateHuman ;
31650: LD_ADDR_VAR 0 1
31654: PUSH
31655: CALL_OW 44
31659: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31660: LD_VAR 0 1
31664: PPUSH
31665: LD_INT 1
31667: PPUSH
31668: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31672: LD_INT 35
31674: PPUSH
31675: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31679: LD_VAR 0 1
31683: PPUSH
31684: LD_INT 22
31686: PUSH
31687: LD_OWVAR 2
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PPUSH
31696: CALL_OW 69
31700: PPUSH
31701: LD_VAR 0 1
31705: PPUSH
31706: CALL_OW 74
31710: PPUSH
31711: CALL_OW 115
// until IsDead ( un ) ;
31715: LD_VAR 0 1
31719: PPUSH
31720: CALL_OW 301
31724: IFFALSE 31672
// end ;
31726: PPOPN 1
31728: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31729: LD_EXP 68
31733: PUSH
31734: LD_EXP 108
31738: AND
31739: IFFALSE 31751
31741: GO 31743
31743: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31744: LD_STRING earthquake(getX(game), 0, 32)
31746: PPUSH
31747: CALL_OW 559
31751: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31752: LD_EXP 68
31756: PUSH
31757: LD_EXP 109
31761: AND
31762: IFFALSE 31853
31764: GO 31766
31766: DISABLE
31767: LD_INT 0
31769: PPUSH
// begin enable ;
31770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31771: LD_ADDR_VAR 0 1
31775: PUSH
31776: LD_INT 22
31778: PUSH
31779: LD_OWVAR 2
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 21
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 33
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: PPUSH
31813: CALL_OW 69
31817: ST_TO_ADDR
// if not tmp then
31818: LD_VAR 0 1
31822: NOT
31823: IFFALSE 31827
// exit ;
31825: GO 31853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31827: LD_VAR 0 1
31831: PUSH
31832: LD_INT 1
31834: PPUSH
31835: LD_VAR 0 1
31839: PPUSH
31840: CALL_OW 12
31844: ARRAY
31845: PPUSH
31846: LD_INT 1
31848: PPUSH
31849: CALL_OW 234
// end ;
31853: PPOPN 1
31855: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31856: LD_EXP 68
31860: PUSH
31861: LD_EXP 110
31865: AND
31866: IFFALSE 32007
31868: GO 31870
31870: DISABLE
31871: LD_INT 0
31873: PPUSH
31874: PPUSH
31875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31876: LD_ADDR_VAR 0 3
31880: PUSH
31881: LD_INT 22
31883: PUSH
31884: LD_OWVAR 2
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 25
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PPUSH
31907: CALL_OW 69
31911: ST_TO_ADDR
// if not tmp then
31912: LD_VAR 0 3
31916: NOT
31917: IFFALSE 31921
// exit ;
31919: GO 32007
// un := tmp [ rand ( 1 , tmp ) ] ;
31921: LD_ADDR_VAR 0 2
31925: PUSH
31926: LD_VAR 0 3
31930: PUSH
31931: LD_INT 1
31933: PPUSH
31934: LD_VAR 0 3
31938: PPUSH
31939: CALL_OW 12
31943: ARRAY
31944: ST_TO_ADDR
// if Crawls ( un ) then
31945: LD_VAR 0 2
31949: PPUSH
31950: CALL_OW 318
31954: IFFALSE 31965
// ComWalk ( un ) ;
31956: LD_VAR 0 2
31960: PPUSH
31961: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31965: LD_VAR 0 2
31969: PPUSH
31970: LD_INT 9
31972: PPUSH
31973: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31977: LD_INT 28
31979: PPUSH
31980: LD_OWVAR 2
31984: PPUSH
31985: LD_INT 2
31987: PPUSH
31988: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31992: LD_INT 29
31994: PPUSH
31995: LD_OWVAR 2
31999: PPUSH
32000: LD_INT 2
32002: PPUSH
32003: CALL_OW 322
// end ;
32007: PPOPN 3
32009: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32010: LD_EXP 68
32014: PUSH
32015: LD_EXP 111
32019: AND
32020: IFFALSE 32131
32022: GO 32024
32024: DISABLE
32025: LD_INT 0
32027: PPUSH
32028: PPUSH
32029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32030: LD_ADDR_VAR 0 3
32034: PUSH
32035: LD_INT 22
32037: PUSH
32038: LD_OWVAR 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 25
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PPUSH
32061: CALL_OW 69
32065: ST_TO_ADDR
// if not tmp then
32066: LD_VAR 0 3
32070: NOT
32071: IFFALSE 32075
// exit ;
32073: GO 32131
// un := tmp [ rand ( 1 , tmp ) ] ;
32075: LD_ADDR_VAR 0 2
32079: PUSH
32080: LD_VAR 0 3
32084: PUSH
32085: LD_INT 1
32087: PPUSH
32088: LD_VAR 0 3
32092: PPUSH
32093: CALL_OW 12
32097: ARRAY
32098: ST_TO_ADDR
// if Crawls ( un ) then
32099: LD_VAR 0 2
32103: PPUSH
32104: CALL_OW 318
32108: IFFALSE 32119
// ComWalk ( un ) ;
32110: LD_VAR 0 2
32114: PPUSH
32115: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32119: LD_VAR 0 2
32123: PPUSH
32124: LD_INT 8
32126: PPUSH
32127: CALL_OW 336
// end ;
32131: PPOPN 3
32133: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32134: LD_EXP 68
32138: PUSH
32139: LD_EXP 112
32143: AND
32144: IFFALSE 32288
32146: GO 32148
32148: DISABLE
32149: LD_INT 0
32151: PPUSH
32152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32153: LD_ADDR_VAR 0 2
32157: PUSH
32158: LD_INT 22
32160: PUSH
32161: LD_OWVAR 2
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 21
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: PUSH
32183: LD_INT 34
32185: PUSH
32186: LD_INT 12
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 34
32195: PUSH
32196: LD_INT 51
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 34
32205: PUSH
32206: LD_INT 32
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: PPUSH
32224: CALL_OW 69
32228: ST_TO_ADDR
// if not tmp then
32229: LD_VAR 0 2
32233: NOT
32234: IFFALSE 32238
// exit ;
32236: GO 32288
// for i in tmp do
32238: LD_ADDR_VAR 0 1
32242: PUSH
32243: LD_VAR 0 2
32247: PUSH
32248: FOR_IN
32249: IFFALSE 32286
// if GetCargo ( i , mat_artifact ) = 0 then
32251: LD_VAR 0 1
32255: PPUSH
32256: LD_INT 4
32258: PPUSH
32259: CALL_OW 289
32263: PUSH
32264: LD_INT 0
32266: EQUAL
32267: IFFALSE 32284
// SetCargo ( i , mat_siberit , 100 ) ;
32269: LD_VAR 0 1
32273: PPUSH
32274: LD_INT 3
32276: PPUSH
32277: LD_INT 100
32279: PPUSH
32280: CALL_OW 290
32284: GO 32248
32286: POP
32287: POP
// end ;
32288: PPOPN 2
32290: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32291: LD_EXP 68
32295: PUSH
32296: LD_EXP 113
32300: AND
32301: IFFALSE 32484
32303: GO 32305
32305: DISABLE
32306: LD_INT 0
32308: PPUSH
32309: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32310: LD_ADDR_VAR 0 2
32314: PUSH
32315: LD_INT 22
32317: PUSH
32318: LD_OWVAR 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PPUSH
32327: CALL_OW 69
32331: ST_TO_ADDR
// if not tmp then
32332: LD_VAR 0 2
32336: NOT
32337: IFFALSE 32341
// exit ;
32339: GO 32484
// for i := 1 to 2 do
32341: LD_ADDR_VAR 0 1
32345: PUSH
32346: DOUBLE
32347: LD_INT 1
32349: DEC
32350: ST_TO_ADDR
32351: LD_INT 2
32353: PUSH
32354: FOR_TO
32355: IFFALSE 32482
// begin uc_side := your_side ;
32357: LD_ADDR_OWVAR 20
32361: PUSH
32362: LD_OWVAR 2
32366: ST_TO_ADDR
// uc_nation := nation_american ;
32367: LD_ADDR_OWVAR 21
32371: PUSH
32372: LD_INT 1
32374: ST_TO_ADDR
// vc_chassis := us_morphling ;
32375: LD_ADDR_OWVAR 37
32379: PUSH
32380: LD_INT 5
32382: ST_TO_ADDR
// vc_engine := engine_siberite ;
32383: LD_ADDR_OWVAR 39
32387: PUSH
32388: LD_INT 3
32390: ST_TO_ADDR
// vc_control := control_computer ;
32391: LD_ADDR_OWVAR 38
32395: PUSH
32396: LD_INT 3
32398: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32399: LD_ADDR_OWVAR 40
32403: PUSH
32404: LD_INT 10
32406: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32407: LD_VAR 0 2
32411: PUSH
32412: LD_INT 1
32414: ARRAY
32415: PPUSH
32416: CALL_OW 310
32420: NOT
32421: IFFALSE 32468
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32423: CALL_OW 45
32427: PPUSH
32428: LD_VAR 0 2
32432: PUSH
32433: LD_INT 1
32435: ARRAY
32436: PPUSH
32437: CALL_OW 250
32441: PPUSH
32442: LD_VAR 0 2
32446: PUSH
32447: LD_INT 1
32449: ARRAY
32450: PPUSH
32451: CALL_OW 251
32455: PPUSH
32456: LD_INT 12
32458: PPUSH
32459: LD_INT 1
32461: PPUSH
32462: CALL_OW 50
32466: GO 32480
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32468: CALL_OW 45
32472: PPUSH
32473: LD_INT 1
32475: PPUSH
32476: CALL_OW 51
// end ;
32480: GO 32354
32482: POP
32483: POP
// end ;
32484: PPOPN 2
32486: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32487: LD_EXP 68
32491: PUSH
32492: LD_EXP 114
32496: AND
32497: IFFALSE 32719
32499: GO 32501
32501: DISABLE
32502: LD_INT 0
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32510: LD_ADDR_VAR 0 6
32514: PUSH
32515: LD_INT 22
32517: PUSH
32518: LD_OWVAR 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 21
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 23
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: PPUSH
32559: CALL_OW 69
32563: ST_TO_ADDR
// if not tmp then
32564: LD_VAR 0 6
32568: NOT
32569: IFFALSE 32573
// exit ;
32571: GO 32719
// s1 := rand ( 1 , 4 ) ;
32573: LD_ADDR_VAR 0 2
32577: PUSH
32578: LD_INT 1
32580: PPUSH
32581: LD_INT 4
32583: PPUSH
32584: CALL_OW 12
32588: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32589: LD_ADDR_VAR 0 4
32593: PUSH
32594: LD_VAR 0 6
32598: PUSH
32599: LD_INT 1
32601: ARRAY
32602: PPUSH
32603: LD_VAR 0 2
32607: PPUSH
32608: CALL_OW 259
32612: ST_TO_ADDR
// if s1 = 1 then
32613: LD_VAR 0 2
32617: PUSH
32618: LD_INT 1
32620: EQUAL
32621: IFFALSE 32641
// s2 := rand ( 2 , 4 ) else
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_INT 2
32630: PPUSH
32631: LD_INT 4
32633: PPUSH
32634: CALL_OW 12
32638: ST_TO_ADDR
32639: GO 32649
// s2 := 1 ;
32641: LD_ADDR_VAR 0 3
32645: PUSH
32646: LD_INT 1
32648: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32649: LD_ADDR_VAR 0 5
32653: PUSH
32654: LD_VAR 0 6
32658: PUSH
32659: LD_INT 1
32661: ARRAY
32662: PPUSH
32663: LD_VAR 0 3
32667: PPUSH
32668: CALL_OW 259
32672: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32673: LD_VAR 0 6
32677: PUSH
32678: LD_INT 1
32680: ARRAY
32681: PPUSH
32682: LD_VAR 0 2
32686: PPUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32696: LD_VAR 0 6
32700: PUSH
32701: LD_INT 1
32703: ARRAY
32704: PPUSH
32705: LD_VAR 0 3
32709: PPUSH
32710: LD_VAR 0 4
32714: PPUSH
32715: CALL_OW 237
// end ;
32719: PPOPN 6
32721: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32722: LD_EXP 68
32726: PUSH
32727: LD_EXP 115
32731: AND
32732: IFFALSE 32811
32734: GO 32736
32736: DISABLE
32737: LD_INT 0
32739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32740: LD_ADDR_VAR 0 1
32744: PUSH
32745: LD_INT 22
32747: PUSH
32748: LD_OWVAR 2
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 30
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PPUSH
32771: CALL_OW 69
32775: ST_TO_ADDR
// if not tmp then
32776: LD_VAR 0 1
32780: NOT
32781: IFFALSE 32785
// exit ;
32783: GO 32811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32785: LD_VAR 0 1
32789: PUSH
32790: LD_INT 1
32792: PPUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 12
32802: ARRAY
32803: PPUSH
32804: LD_INT 1
32806: PPUSH
32807: CALL_OW 234
// end ;
32811: PPOPN 1
32813: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32814: LD_EXP 68
32818: PUSH
32819: LD_EXP 116
32823: AND
32824: IFFALSE 32936
32826: GO 32828
32828: DISABLE
32829: LD_INT 0
32831: PPUSH
32832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32833: LD_ADDR_VAR 0 2
32837: PUSH
32838: LD_INT 22
32840: PUSH
32841: LD_OWVAR 2
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: LD_INT 30
32855: PUSH
32856: LD_INT 27
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 30
32865: PUSH
32866: LD_INT 26
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 30
32875: PUSH
32876: LD_INT 28
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PPUSH
32893: CALL_OW 69
32897: ST_TO_ADDR
// if not tmp then
32898: LD_VAR 0 2
32902: NOT
32903: IFFALSE 32907
// exit ;
32905: GO 32936
// for i in tmp do
32907: LD_ADDR_VAR 0 1
32911: PUSH
32912: LD_VAR 0 2
32916: PUSH
32917: FOR_IN
32918: IFFALSE 32934
// SetLives ( i , 1 ) ;
32920: LD_VAR 0 1
32924: PPUSH
32925: LD_INT 1
32927: PPUSH
32928: CALL_OW 234
32932: GO 32917
32934: POP
32935: POP
// end ;
32936: PPOPN 2
32938: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32939: LD_EXP 68
32943: PUSH
32944: LD_EXP 117
32948: AND
32949: IFFALSE 33223
32951: GO 32953
32953: DISABLE
32954: LD_INT 0
32956: PPUSH
32957: PPUSH
32958: PPUSH
// begin i := rand ( 1 , 7 ) ;
32959: LD_ADDR_VAR 0 1
32963: PUSH
32964: LD_INT 1
32966: PPUSH
32967: LD_INT 7
32969: PPUSH
32970: CALL_OW 12
32974: ST_TO_ADDR
// case i of 1 :
32975: LD_VAR 0 1
32979: PUSH
32980: LD_INT 1
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 32998
32988: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32989: LD_STRING earthquake(getX(game), 0, 32)
32991: PPUSH
32992: CALL_OW 559
32996: GO 33223
32998: LD_INT 2
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33020
33006: POP
// begin ToLua ( displayStucuk(); ) ;
33007: LD_STRING displayStucuk();
33009: PPUSH
33010: CALL_OW 559
// ResetFog ;
33014: CALL_OW 335
// end ; 3 :
33018: GO 33223
33020: LD_INT 3
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33132
33028: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33029: LD_ADDR_VAR 0 2
33033: PUSH
33034: LD_INT 22
33036: PUSH
33037: LD_OWVAR 2
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 25
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PPUSH
33060: CALL_OW 69
33064: ST_TO_ADDR
// if not tmp then
33065: LD_VAR 0 2
33069: NOT
33070: IFFALSE 33074
// exit ;
33072: GO 33223
// un := tmp [ rand ( 1 , tmp ) ] ;
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: LD_VAR 0 2
33083: PUSH
33084: LD_INT 1
33086: PPUSH
33087: LD_VAR 0 2
33091: PPUSH
33092: CALL_OW 12
33096: ARRAY
33097: ST_TO_ADDR
// if Crawls ( un ) then
33098: LD_VAR 0 3
33102: PPUSH
33103: CALL_OW 318
33107: IFFALSE 33118
// ComWalk ( un ) ;
33109: LD_VAR 0 3
33113: PPUSH
33114: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33118: LD_VAR 0 3
33122: PPUSH
33123: LD_INT 8
33125: PPUSH
33126: CALL_OW 336
// end ; 4 :
33130: GO 33223
33132: LD_INT 4
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33201
33140: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33141: LD_ADDR_VAR 0 2
33145: PUSH
33146: LD_INT 22
33148: PUSH
33149: LD_OWVAR 2
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 30
33160: PUSH
33161: LD_INT 29
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PPUSH
33172: CALL_OW 69
33176: ST_TO_ADDR
// if not tmp then
33177: LD_VAR 0 2
33181: NOT
33182: IFFALSE 33186
// exit ;
33184: GO 33223
// DestroyUnit ( tmp [ 1 ] ) ;
33186: LD_VAR 0 2
33190: PUSH
33191: LD_INT 1
33193: ARRAY
33194: PPUSH
33195: CALL_OW 65
// end ; 5 .. 7 :
33199: GO 33223
33201: LD_INT 5
33203: DOUBLE
33204: GREATEREQUAL
33205: IFFALSE 33213
33207: LD_INT 7
33209: DOUBLE
33210: LESSEQUAL
33211: IFTRUE 33215
33213: GO 33222
33215: POP
// StreamSibBomb ; end ;
33216: CALL 29473 0 0
33220: GO 33223
33222: POP
// end ;
33223: PPOPN 3
33225: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33226: LD_EXP 68
33230: PUSH
33231: LD_EXP 118
33235: AND
33236: IFFALSE 33392
33238: GO 33240
33240: DISABLE
33241: LD_INT 0
33243: PPUSH
33244: PPUSH
33245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33246: LD_ADDR_VAR 0 2
33250: PUSH
33251: LD_INT 81
33253: PUSH
33254: LD_OWVAR 2
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: LD_INT 21
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 21
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PPUSH
33295: CALL_OW 69
33299: ST_TO_ADDR
// if not tmp then
33300: LD_VAR 0 2
33304: NOT
33305: IFFALSE 33309
// exit ;
33307: GO 33392
// p := 0 ;
33309: LD_ADDR_VAR 0 3
33313: PUSH
33314: LD_INT 0
33316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33317: LD_INT 35
33319: PPUSH
33320: CALL_OW 67
// p := p + 1 ;
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_VAR 0 3
33333: PUSH
33334: LD_INT 1
33336: PLUS
33337: ST_TO_ADDR
// for i in tmp do
33338: LD_ADDR_VAR 0 1
33342: PUSH
33343: LD_VAR 0 2
33347: PUSH
33348: FOR_IN
33349: IFFALSE 33380
// if GetLives ( i ) < 1000 then
33351: LD_VAR 0 1
33355: PPUSH
33356: CALL_OW 256
33360: PUSH
33361: LD_INT 1000
33363: LESS
33364: IFFALSE 33378
// SetLives ( i , 1000 ) ;
33366: LD_VAR 0 1
33370: PPUSH
33371: LD_INT 1000
33373: PPUSH
33374: CALL_OW 234
33378: GO 33348
33380: POP
33381: POP
// until p > 20 ;
33382: LD_VAR 0 3
33386: PUSH
33387: LD_INT 20
33389: GREATER
33390: IFFALSE 33317
// end ;
33392: PPOPN 3
33394: END
// every 0 0$1 trigger StreamModeActive and sTime do
33395: LD_EXP 68
33399: PUSH
33400: LD_EXP 119
33404: AND
33405: IFFALSE 33440
33407: GO 33409
33409: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33410: LD_INT 28
33412: PPUSH
33413: LD_OWVAR 2
33417: PPUSH
33418: LD_INT 2
33420: PPUSH
33421: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33425: LD_INT 30
33427: PPUSH
33428: LD_OWVAR 2
33432: PPUSH
33433: LD_INT 2
33435: PPUSH
33436: CALL_OW 322
// end ;
33440: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33441: LD_EXP 68
33445: PUSH
33446: LD_EXP 120
33450: AND
33451: IFFALSE 33572
33453: GO 33455
33455: DISABLE
33456: LD_INT 0
33458: PPUSH
33459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33460: LD_ADDR_VAR 0 2
33464: PUSH
33465: LD_INT 22
33467: PUSH
33468: LD_OWVAR 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 21
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: LD_INT 23
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: PPUSH
33509: CALL_OW 69
33513: ST_TO_ADDR
// if not tmp then
33514: LD_VAR 0 2
33518: NOT
33519: IFFALSE 33523
// exit ;
33521: GO 33572
// for i in tmp do
33523: LD_ADDR_VAR 0 1
33527: PUSH
33528: LD_VAR 0 2
33532: PUSH
33533: FOR_IN
33534: IFFALSE 33570
// begin if Crawls ( i ) then
33536: LD_VAR 0 1
33540: PPUSH
33541: CALL_OW 318
33545: IFFALSE 33556
// ComWalk ( i ) ;
33547: LD_VAR 0 1
33551: PPUSH
33552: CALL_OW 138
// SetClass ( i , 2 ) ;
33556: LD_VAR 0 1
33560: PPUSH
33561: LD_INT 2
33563: PPUSH
33564: CALL_OW 336
// end ;
33568: GO 33533
33570: POP
33571: POP
// end ;
33572: PPOPN 2
33574: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33575: LD_EXP 68
33579: PUSH
33580: LD_EXP 121
33584: AND
33585: IFFALSE 33866
33587: GO 33589
33589: DISABLE
33590: LD_INT 0
33592: PPUSH
33593: PPUSH
33594: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33595: LD_OWVAR 2
33599: PPUSH
33600: LD_INT 9
33602: PPUSH
33603: LD_INT 1
33605: PPUSH
33606: LD_INT 1
33608: PPUSH
33609: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33613: LD_INT 9
33615: PPUSH
33616: LD_OWVAR 2
33620: PPUSH
33621: CALL_OW 343
// uc_side := 9 ;
33625: LD_ADDR_OWVAR 20
33629: PUSH
33630: LD_INT 9
33632: ST_TO_ADDR
// uc_nation := 2 ;
33633: LD_ADDR_OWVAR 21
33637: PUSH
33638: LD_INT 2
33640: ST_TO_ADDR
// hc_name := Dark Warrior ;
33641: LD_ADDR_OWVAR 26
33645: PUSH
33646: LD_STRING Dark Warrior
33648: ST_TO_ADDR
// hc_gallery :=  ;
33649: LD_ADDR_OWVAR 33
33653: PUSH
33654: LD_STRING 
33656: ST_TO_ADDR
// hc_noskilllimit := true ;
33657: LD_ADDR_OWVAR 76
33661: PUSH
33662: LD_INT 1
33664: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33665: LD_ADDR_OWVAR 31
33669: PUSH
33670: LD_INT 30
33672: PUSH
33673: LD_INT 30
33675: PUSH
33676: LD_INT 30
33678: PUSH
33679: LD_INT 30
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
// un := CreateHuman ;
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: CALL_OW 44
33697: ST_TO_ADDR
// hc_noskilllimit := false ;
33698: LD_ADDR_OWVAR 76
33702: PUSH
33703: LD_INT 0
33705: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33706: LD_VAR 0 3
33710: PPUSH
33711: LD_INT 1
33713: PPUSH
33714: CALL_OW 51
// p := 0 ;
33718: LD_ADDR_VAR 0 2
33722: PUSH
33723: LD_INT 0
33725: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33726: LD_INT 35
33728: PPUSH
33729: CALL_OW 67
// p := p + 1 ;
33733: LD_ADDR_VAR 0 2
33737: PUSH
33738: LD_VAR 0 2
33742: PUSH
33743: LD_INT 1
33745: PLUS
33746: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33747: LD_VAR 0 3
33751: PPUSH
33752: CALL_OW 256
33756: PUSH
33757: LD_INT 1000
33759: LESS
33760: IFFALSE 33774
// SetLives ( un , 1000 ) ;
33762: LD_VAR 0 3
33766: PPUSH
33767: LD_INT 1000
33769: PPUSH
33770: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33774: LD_VAR 0 3
33778: PPUSH
33779: LD_INT 81
33781: PUSH
33782: LD_OWVAR 2
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 91
33793: PUSH
33794: LD_VAR 0 3
33798: PUSH
33799: LD_INT 30
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PPUSH
33811: CALL_OW 69
33815: PPUSH
33816: LD_VAR 0 3
33820: PPUSH
33821: CALL_OW 74
33825: PPUSH
33826: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33830: LD_VAR 0 2
33834: PUSH
33835: LD_INT 60
33837: GREATER
33838: PUSH
33839: LD_VAR 0 3
33843: PPUSH
33844: CALL_OW 301
33848: OR
33849: IFFALSE 33726
// if un then
33851: LD_VAR 0 3
33855: IFFALSE 33866
// RemoveUnit ( un ) ;
33857: LD_VAR 0 3
33861: PPUSH
33862: CALL_OW 64
// end ;
33866: PPOPN 3
33868: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33869: LD_INT 0
33871: PPUSH
// case cmd of 301 :
33872: LD_VAR 0 1
33876: PUSH
33877: LD_INT 301
33879: DOUBLE
33880: EQUAL
33881: IFTRUE 33885
33883: GO 33917
33885: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33886: LD_VAR 0 6
33890: PPUSH
33891: LD_VAR 0 7
33895: PPUSH
33896: LD_VAR 0 8
33900: PPUSH
33901: LD_VAR 0 4
33905: PPUSH
33906: LD_VAR 0 5
33910: PPUSH
33911: CALL 35118 0 5
33915: GO 34038
33917: LD_INT 302
33919: DOUBLE
33920: EQUAL
33921: IFTRUE 33925
33923: GO 33962
33925: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33926: LD_VAR 0 6
33930: PPUSH
33931: LD_VAR 0 7
33935: PPUSH
33936: LD_VAR 0 8
33940: PPUSH
33941: LD_VAR 0 9
33945: PPUSH
33946: LD_VAR 0 4
33950: PPUSH
33951: LD_VAR 0 5
33955: PPUSH
33956: CALL 35209 0 6
33960: GO 34038
33962: LD_INT 303
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 34007
33970: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33971: LD_VAR 0 6
33975: PPUSH
33976: LD_VAR 0 7
33980: PPUSH
33981: LD_VAR 0 8
33985: PPUSH
33986: LD_VAR 0 9
33990: PPUSH
33991: LD_VAR 0 4
33995: PPUSH
33996: LD_VAR 0 5
34000: PPUSH
34001: CALL 34043 0 6
34005: GO 34038
34007: LD_INT 304
34009: DOUBLE
34010: EQUAL
34011: IFTRUE 34015
34013: GO 34037
34015: POP
// hHackTeleport ( unit , x , y ) ; end ;
34016: LD_VAR 0 2
34020: PPUSH
34021: LD_VAR 0 4
34025: PPUSH
34026: LD_VAR 0 5
34030: PPUSH
34031: CALL 35802 0 3
34035: GO 34038
34037: POP
// end ;
34038: LD_VAR 0 12
34042: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34043: LD_INT 0
34045: PPUSH
34046: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34047: LD_VAR 0 1
34051: PUSH
34052: LD_INT 1
34054: LESS
34055: PUSH
34056: LD_VAR 0 1
34060: PUSH
34061: LD_INT 3
34063: GREATER
34064: OR
34065: PUSH
34066: LD_VAR 0 5
34070: PPUSH
34071: LD_VAR 0 6
34075: PPUSH
34076: CALL_OW 428
34080: OR
34081: IFFALSE 34085
// exit ;
34083: GO 34805
// uc_side := your_side ;
34085: LD_ADDR_OWVAR 20
34089: PUSH
34090: LD_OWVAR 2
34094: ST_TO_ADDR
// uc_nation := nation ;
34095: LD_ADDR_OWVAR 21
34099: PUSH
34100: LD_VAR 0 1
34104: ST_TO_ADDR
// bc_level = 1 ;
34105: LD_ADDR_OWVAR 43
34109: PUSH
34110: LD_INT 1
34112: ST_TO_ADDR
// case btype of 1 :
34113: LD_VAR 0 2
34117: PUSH
34118: LD_INT 1
34120: DOUBLE
34121: EQUAL
34122: IFTRUE 34126
34124: GO 34137
34126: POP
// bc_type := b_depot ; 2 :
34127: LD_ADDR_OWVAR 42
34131: PUSH
34132: LD_INT 0
34134: ST_TO_ADDR
34135: GO 34749
34137: LD_INT 2
34139: DOUBLE
34140: EQUAL
34141: IFTRUE 34145
34143: GO 34156
34145: POP
// bc_type := b_warehouse ; 3 :
34146: LD_ADDR_OWVAR 42
34150: PUSH
34151: LD_INT 1
34153: ST_TO_ADDR
34154: GO 34749
34156: LD_INT 3
34158: DOUBLE
34159: EQUAL
34160: IFTRUE 34164
34162: GO 34175
34164: POP
// bc_type := b_lab ; 4 .. 9 :
34165: LD_ADDR_OWVAR 42
34169: PUSH
34170: LD_INT 6
34172: ST_TO_ADDR
34173: GO 34749
34175: LD_INT 4
34177: DOUBLE
34178: GREATEREQUAL
34179: IFFALSE 34187
34181: LD_INT 9
34183: DOUBLE
34184: LESSEQUAL
34185: IFTRUE 34189
34187: GO 34241
34189: POP
// begin bc_type := b_lab_half ;
34190: LD_ADDR_OWVAR 42
34194: PUSH
34195: LD_INT 7
34197: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34198: LD_ADDR_OWVAR 44
34202: PUSH
34203: LD_INT 10
34205: PUSH
34206: LD_INT 11
34208: PUSH
34209: LD_INT 12
34211: PUSH
34212: LD_INT 15
34214: PUSH
34215: LD_INT 14
34217: PUSH
34218: LD_INT 13
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: PUSH
34229: LD_VAR 0 2
34233: PUSH
34234: LD_INT 3
34236: MINUS
34237: ARRAY
34238: ST_TO_ADDR
// end ; 10 .. 13 :
34239: GO 34749
34241: LD_INT 10
34243: DOUBLE
34244: GREATEREQUAL
34245: IFFALSE 34253
34247: LD_INT 13
34249: DOUBLE
34250: LESSEQUAL
34251: IFTRUE 34255
34253: GO 34332
34255: POP
// begin bc_type := b_lab_full ;
34256: LD_ADDR_OWVAR 42
34260: PUSH
34261: LD_INT 8
34263: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34264: LD_ADDR_OWVAR 44
34268: PUSH
34269: LD_INT 10
34271: PUSH
34272: LD_INT 12
34274: PUSH
34275: LD_INT 14
34277: PUSH
34278: LD_INT 13
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: PUSH
34287: LD_VAR 0 2
34291: PUSH
34292: LD_INT 9
34294: MINUS
34295: ARRAY
34296: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34297: LD_ADDR_OWVAR 45
34301: PUSH
34302: LD_INT 11
34304: PUSH
34305: LD_INT 15
34307: PUSH
34308: LD_INT 12
34310: PUSH
34311: LD_INT 15
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: PUSH
34320: LD_VAR 0 2
34324: PUSH
34325: LD_INT 9
34327: MINUS
34328: ARRAY
34329: ST_TO_ADDR
// end ; 14 :
34330: GO 34749
34332: LD_INT 14
34334: DOUBLE
34335: EQUAL
34336: IFTRUE 34340
34338: GO 34351
34340: POP
// bc_type := b_workshop ; 15 :
34341: LD_ADDR_OWVAR 42
34345: PUSH
34346: LD_INT 2
34348: ST_TO_ADDR
34349: GO 34749
34351: LD_INT 15
34353: DOUBLE
34354: EQUAL
34355: IFTRUE 34359
34357: GO 34370
34359: POP
// bc_type := b_factory ; 16 :
34360: LD_ADDR_OWVAR 42
34364: PUSH
34365: LD_INT 3
34367: ST_TO_ADDR
34368: GO 34749
34370: LD_INT 16
34372: DOUBLE
34373: EQUAL
34374: IFTRUE 34378
34376: GO 34389
34378: POP
// bc_type := b_ext_gun ; 17 :
34379: LD_ADDR_OWVAR 42
34383: PUSH
34384: LD_INT 17
34386: ST_TO_ADDR
34387: GO 34749
34389: LD_INT 17
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34397
34395: GO 34425
34397: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34398: LD_ADDR_OWVAR 42
34402: PUSH
34403: LD_INT 19
34405: PUSH
34406: LD_INT 23
34408: PUSH
34409: LD_INT 19
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: PUSH
34417: LD_VAR 0 1
34421: ARRAY
34422: ST_TO_ADDR
34423: GO 34749
34425: LD_INT 18
34427: DOUBLE
34428: EQUAL
34429: IFTRUE 34433
34431: GO 34444
34433: POP
// bc_type := b_ext_radar ; 19 :
34434: LD_ADDR_OWVAR 42
34438: PUSH
34439: LD_INT 20
34441: ST_TO_ADDR
34442: GO 34749
34444: LD_INT 19
34446: DOUBLE
34447: EQUAL
34448: IFTRUE 34452
34450: GO 34463
34452: POP
// bc_type := b_ext_radio ; 20 :
34453: LD_ADDR_OWVAR 42
34457: PUSH
34458: LD_INT 22
34460: ST_TO_ADDR
34461: GO 34749
34463: LD_INT 20
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34471
34469: GO 34482
34471: POP
// bc_type := b_ext_siberium ; 21 :
34472: LD_ADDR_OWVAR 42
34476: PUSH
34477: LD_INT 21
34479: ST_TO_ADDR
34480: GO 34749
34482: LD_INT 21
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34490
34488: GO 34501
34490: POP
// bc_type := b_ext_computer ; 22 :
34491: LD_ADDR_OWVAR 42
34495: PUSH
34496: LD_INT 24
34498: ST_TO_ADDR
34499: GO 34749
34501: LD_INT 22
34503: DOUBLE
34504: EQUAL
34505: IFTRUE 34509
34507: GO 34520
34509: POP
// bc_type := b_ext_track ; 23 :
34510: LD_ADDR_OWVAR 42
34514: PUSH
34515: LD_INT 16
34517: ST_TO_ADDR
34518: GO 34749
34520: LD_INT 23
34522: DOUBLE
34523: EQUAL
34524: IFTRUE 34528
34526: GO 34539
34528: POP
// bc_type := b_ext_laser ; 24 :
34529: LD_ADDR_OWVAR 42
34533: PUSH
34534: LD_INT 25
34536: ST_TO_ADDR
34537: GO 34749
34539: LD_INT 24
34541: DOUBLE
34542: EQUAL
34543: IFTRUE 34547
34545: GO 34558
34547: POP
// bc_type := b_control_tower ; 25 :
34548: LD_ADDR_OWVAR 42
34552: PUSH
34553: LD_INT 36
34555: ST_TO_ADDR
34556: GO 34749
34558: LD_INT 25
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34577
34566: POP
// bc_type := b_breastwork ; 26 :
34567: LD_ADDR_OWVAR 42
34571: PUSH
34572: LD_INT 31
34574: ST_TO_ADDR
34575: GO 34749
34577: LD_INT 26
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34585
34583: GO 34596
34585: POP
// bc_type := b_bunker ; 27 :
34586: LD_ADDR_OWVAR 42
34590: PUSH
34591: LD_INT 32
34593: ST_TO_ADDR
34594: GO 34749
34596: LD_INT 27
34598: DOUBLE
34599: EQUAL
34600: IFTRUE 34604
34602: GO 34615
34604: POP
// bc_type := b_turret ; 28 :
34605: LD_ADDR_OWVAR 42
34609: PUSH
34610: LD_INT 33
34612: ST_TO_ADDR
34613: GO 34749
34615: LD_INT 28
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34634
34623: POP
// bc_type := b_armoury ; 29 :
34624: LD_ADDR_OWVAR 42
34628: PUSH
34629: LD_INT 4
34631: ST_TO_ADDR
34632: GO 34749
34634: LD_INT 29
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34642
34640: GO 34653
34642: POP
// bc_type := b_barracks ; 30 :
34643: LD_ADDR_OWVAR 42
34647: PUSH
34648: LD_INT 5
34650: ST_TO_ADDR
34651: GO 34749
34653: LD_INT 30
34655: DOUBLE
34656: EQUAL
34657: IFTRUE 34661
34659: GO 34672
34661: POP
// bc_type := b_solar_power ; 31 :
34662: LD_ADDR_OWVAR 42
34666: PUSH
34667: LD_INT 27
34669: ST_TO_ADDR
34670: GO 34749
34672: LD_INT 31
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34691
34680: POP
// bc_type := b_oil_power ; 32 :
34681: LD_ADDR_OWVAR 42
34685: PUSH
34686: LD_INT 26
34688: ST_TO_ADDR
34689: GO 34749
34691: LD_INT 32
34693: DOUBLE
34694: EQUAL
34695: IFTRUE 34699
34697: GO 34710
34699: POP
// bc_type := b_siberite_power ; 33 :
34700: LD_ADDR_OWVAR 42
34704: PUSH
34705: LD_INT 28
34707: ST_TO_ADDR
34708: GO 34749
34710: LD_INT 33
34712: DOUBLE
34713: EQUAL
34714: IFTRUE 34718
34716: GO 34729
34718: POP
// bc_type := b_oil_mine ; 34 :
34719: LD_ADDR_OWVAR 42
34723: PUSH
34724: LD_INT 29
34726: ST_TO_ADDR
34727: GO 34749
34729: LD_INT 34
34731: DOUBLE
34732: EQUAL
34733: IFTRUE 34737
34735: GO 34748
34737: POP
// bc_type := b_siberite_mine ; end ;
34738: LD_ADDR_OWVAR 42
34742: PUSH
34743: LD_INT 30
34745: ST_TO_ADDR
34746: GO 34749
34748: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34749: LD_ADDR_VAR 0 8
34753: PUSH
34754: LD_VAR 0 5
34758: PPUSH
34759: LD_VAR 0 6
34763: PPUSH
34764: LD_VAR 0 3
34768: PPUSH
34769: CALL_OW 47
34773: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34774: LD_OWVAR 42
34778: PUSH
34779: LD_INT 32
34781: PUSH
34782: LD_INT 33
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: IN
34789: IFFALSE 34805
// PlaceWeaponTurret ( b , weapon ) ;
34791: LD_VAR 0 8
34795: PPUSH
34796: LD_VAR 0 4
34800: PPUSH
34801: CALL_OW 431
// end ;
34805: LD_VAR 0 7
34809: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34810: LD_INT 0
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34816: LD_ADDR_VAR 0 4
34820: PUSH
34821: LD_INT 22
34823: PUSH
34824: LD_OWVAR 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 30
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 30
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 69
34869: ST_TO_ADDR
// if not tmp then
34870: LD_VAR 0 4
34874: NOT
34875: IFFALSE 34879
// exit ;
34877: GO 34938
// for i in tmp do
34879: LD_ADDR_VAR 0 2
34883: PUSH
34884: LD_VAR 0 4
34888: PUSH
34889: FOR_IN
34890: IFFALSE 34936
// for j = 1 to 3 do
34892: LD_ADDR_VAR 0 3
34896: PUSH
34897: DOUBLE
34898: LD_INT 1
34900: DEC
34901: ST_TO_ADDR
34902: LD_INT 3
34904: PUSH
34905: FOR_TO
34906: IFFALSE 34932
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34908: LD_VAR 0 2
34912: PPUSH
34913: CALL_OW 274
34917: PPUSH
34918: LD_VAR 0 3
34922: PPUSH
34923: LD_INT 99999
34925: PPUSH
34926: CALL_OW 277
34930: GO 34905
34932: POP
34933: POP
34934: GO 34889
34936: POP
34937: POP
// end ;
34938: LD_VAR 0 1
34942: RET
// export function hHackSetLevel10 ; var i , j ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34948: LD_ADDR_VAR 0 2
34952: PUSH
34953: LD_INT 21
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PPUSH
34963: CALL_OW 69
34967: PUSH
34968: FOR_IN
34969: IFFALSE 35021
// if IsSelected ( i ) then
34971: LD_VAR 0 2
34975: PPUSH
34976: CALL_OW 306
34980: IFFALSE 35019
// begin for j := 1 to 4 do
34982: LD_ADDR_VAR 0 3
34986: PUSH
34987: DOUBLE
34988: LD_INT 1
34990: DEC
34991: ST_TO_ADDR
34992: LD_INT 4
34994: PUSH
34995: FOR_TO
34996: IFFALSE 35017
// SetSkill ( i , j , 10 ) ;
34998: LD_VAR 0 2
35002: PPUSH
35003: LD_VAR 0 3
35007: PPUSH
35008: LD_INT 10
35010: PPUSH
35011: CALL_OW 237
35015: GO 34995
35017: POP
35018: POP
// end ;
35019: GO 34968
35021: POP
35022: POP
// end ;
35023: LD_VAR 0 1
35027: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35028: LD_INT 0
35030: PPUSH
35031: PPUSH
35032: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35033: LD_ADDR_VAR 0 2
35037: PUSH
35038: LD_INT 22
35040: PUSH
35041: LD_OWVAR 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 21
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PPUSH
35064: CALL_OW 69
35068: PUSH
35069: FOR_IN
35070: IFFALSE 35111
// begin for j := 1 to 4 do
35072: LD_ADDR_VAR 0 3
35076: PUSH
35077: DOUBLE
35078: LD_INT 1
35080: DEC
35081: ST_TO_ADDR
35082: LD_INT 4
35084: PUSH
35085: FOR_TO
35086: IFFALSE 35107
// SetSkill ( i , j , 10 ) ;
35088: LD_VAR 0 2
35092: PPUSH
35093: LD_VAR 0 3
35097: PPUSH
35098: LD_INT 10
35100: PPUSH
35101: CALL_OW 237
35105: GO 35085
35107: POP
35108: POP
// end ;
35109: GO 35069
35111: POP
35112: POP
// end ;
35113: LD_VAR 0 1
35117: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35118: LD_INT 0
35120: PPUSH
// uc_side := your_side ;
35121: LD_ADDR_OWVAR 20
35125: PUSH
35126: LD_OWVAR 2
35130: ST_TO_ADDR
// uc_nation := nation ;
35131: LD_ADDR_OWVAR 21
35135: PUSH
35136: LD_VAR 0 1
35140: ST_TO_ADDR
// InitHc ;
35141: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35145: LD_INT 0
35147: PPUSH
35148: LD_VAR 0 2
35152: PPUSH
35153: LD_VAR 0 3
35157: PPUSH
35158: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35162: LD_VAR 0 4
35166: PPUSH
35167: LD_VAR 0 5
35171: PPUSH
35172: CALL_OW 428
35176: PUSH
35177: LD_INT 0
35179: EQUAL
35180: IFFALSE 35204
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35182: CALL_OW 44
35186: PPUSH
35187: LD_VAR 0 4
35191: PPUSH
35192: LD_VAR 0 5
35196: PPUSH
35197: LD_INT 1
35199: PPUSH
35200: CALL_OW 48
// end ;
35204: LD_VAR 0 6
35208: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
// uc_side := your_side ;
35213: LD_ADDR_OWVAR 20
35217: PUSH
35218: LD_OWVAR 2
35222: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35223: LD_VAR 0 1
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: LD_INT 3
35236: PUSH
35237: LD_INT 4
35239: PUSH
35240: LD_INT 5
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: IN
35250: IFFALSE 35262
// uc_nation := nation_american else
35252: LD_ADDR_OWVAR 21
35256: PUSH
35257: LD_INT 1
35259: ST_TO_ADDR
35260: GO 35305
// if chassis in [ 11 , 12 , 13 , 14 ] then
35262: LD_VAR 0 1
35266: PUSH
35267: LD_INT 11
35269: PUSH
35270: LD_INT 12
35272: PUSH
35273: LD_INT 13
35275: PUSH
35276: LD_INT 14
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: IN
35285: IFFALSE 35297
// uc_nation := nation_arabian else
35287: LD_ADDR_OWVAR 21
35291: PUSH
35292: LD_INT 2
35294: ST_TO_ADDR
35295: GO 35305
// uc_nation := nation_russian ;
35297: LD_ADDR_OWVAR 21
35301: PUSH
35302: LD_INT 3
35304: ST_TO_ADDR
// vc_chassis := chassis ;
35305: LD_ADDR_OWVAR 37
35309: PUSH
35310: LD_VAR 0 1
35314: ST_TO_ADDR
// vc_engine := engine ;
35315: LD_ADDR_OWVAR 39
35319: PUSH
35320: LD_VAR 0 2
35324: ST_TO_ADDR
// vc_control := control ;
35325: LD_ADDR_OWVAR 38
35329: PUSH
35330: LD_VAR 0 3
35334: ST_TO_ADDR
// vc_weapon := weapon ;
35335: LD_ADDR_OWVAR 40
35339: PUSH
35340: LD_VAR 0 4
35344: ST_TO_ADDR
// un := CreateVehicle ;
35345: LD_ADDR_VAR 0 8
35349: PUSH
35350: CALL_OW 45
35354: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35355: LD_VAR 0 8
35359: PPUSH
35360: LD_INT 0
35362: PPUSH
35363: LD_INT 5
35365: PPUSH
35366: CALL_OW 12
35370: PPUSH
35371: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35375: LD_VAR 0 8
35379: PPUSH
35380: LD_VAR 0 5
35384: PPUSH
35385: LD_VAR 0 6
35389: PPUSH
35390: LD_INT 1
35392: PPUSH
35393: CALL_OW 48
// end ;
35397: LD_VAR 0 7
35401: RET
// export hInvincible ; every 1 do
35402: GO 35404
35404: DISABLE
// hInvincible := [ ] ;
35405: LD_ADDR_EXP 122
35409: PUSH
35410: EMPTY
35411: ST_TO_ADDR
35412: END
// every 10 do var i ;
35413: GO 35415
35415: DISABLE
35416: LD_INT 0
35418: PPUSH
// begin enable ;
35419: ENABLE
// if not hInvincible then
35420: LD_EXP 122
35424: NOT
35425: IFFALSE 35429
// exit ;
35427: GO 35473
// for i in hInvincible do
35429: LD_ADDR_VAR 0 1
35433: PUSH
35434: LD_EXP 122
35438: PUSH
35439: FOR_IN
35440: IFFALSE 35471
// if GetLives ( i ) < 1000 then
35442: LD_VAR 0 1
35446: PPUSH
35447: CALL_OW 256
35451: PUSH
35452: LD_INT 1000
35454: LESS
35455: IFFALSE 35469
// SetLives ( i , 1000 ) ;
35457: LD_VAR 0 1
35461: PPUSH
35462: LD_INT 1000
35464: PPUSH
35465: CALL_OW 234
35469: GO 35439
35471: POP
35472: POP
// end ;
35473: PPOPN 1
35475: END
// export function hHackInvincible ; var i ; begin
35476: LD_INT 0
35478: PPUSH
35479: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35480: LD_ADDR_VAR 0 2
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 21
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 21
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: PPUSH
35513: CALL_OW 69
35517: PUSH
35518: FOR_IN
35519: IFFALSE 35580
// if IsSelected ( i ) then
35521: LD_VAR 0 2
35525: PPUSH
35526: CALL_OW 306
35530: IFFALSE 35578
// begin if i in hInvincible then
35532: LD_VAR 0 2
35536: PUSH
35537: LD_EXP 122
35541: IN
35542: IFFALSE 35562
// hInvincible := hInvincible diff i else
35544: LD_ADDR_EXP 122
35548: PUSH
35549: LD_EXP 122
35553: PUSH
35554: LD_VAR 0 2
35558: DIFF
35559: ST_TO_ADDR
35560: GO 35578
// hInvincible := hInvincible union i ;
35562: LD_ADDR_EXP 122
35566: PUSH
35567: LD_EXP 122
35571: PUSH
35572: LD_VAR 0 2
35576: UNION
35577: ST_TO_ADDR
// end ;
35578: GO 35518
35580: POP
35581: POP
// end ;
35582: LD_VAR 0 1
35586: RET
// export function hHackInvisible ; var i , j ; begin
35587: LD_INT 0
35589: PPUSH
35590: PPUSH
35591: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35592: LD_ADDR_VAR 0 2
35596: PUSH
35597: LD_INT 21
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PPUSH
35607: CALL_OW 69
35611: PUSH
35612: FOR_IN
35613: IFFALSE 35637
// if IsSelected ( i ) then
35615: LD_VAR 0 2
35619: PPUSH
35620: CALL_OW 306
35624: IFFALSE 35635
// ComForceInvisible ( i ) ;
35626: LD_VAR 0 2
35630: PPUSH
35631: CALL_OW 496
35635: GO 35612
35637: POP
35638: POP
// end ;
35639: LD_VAR 0 1
35643: RET
// export function hHackChangeYourSide ; begin
35644: LD_INT 0
35646: PPUSH
// if your_side = 8 then
35647: LD_OWVAR 2
35651: PUSH
35652: LD_INT 8
35654: EQUAL
35655: IFFALSE 35667
// your_side := 0 else
35657: LD_ADDR_OWVAR 2
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
35665: GO 35681
// your_side := your_side + 1 ;
35667: LD_ADDR_OWVAR 2
35671: PUSH
35672: LD_OWVAR 2
35676: PUSH
35677: LD_INT 1
35679: PLUS
35680: ST_TO_ADDR
// end ;
35681: LD_VAR 0 1
35685: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35686: LD_INT 0
35688: PPUSH
35689: PPUSH
35690: PPUSH
// for i in all_units do
35691: LD_ADDR_VAR 0 2
35695: PUSH
35696: LD_OWVAR 3
35700: PUSH
35701: FOR_IN
35702: IFFALSE 35780
// if IsSelected ( i ) then
35704: LD_VAR 0 2
35708: PPUSH
35709: CALL_OW 306
35713: IFFALSE 35778
// begin j := GetSide ( i ) ;
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_VAR 0 2
35724: PPUSH
35725: CALL_OW 255
35729: ST_TO_ADDR
// if j = 8 then
35730: LD_VAR 0 3
35734: PUSH
35735: LD_INT 8
35737: EQUAL
35738: IFFALSE 35750
// j := 0 else
35740: LD_ADDR_VAR 0 3
35744: PUSH
35745: LD_INT 0
35747: ST_TO_ADDR
35748: GO 35764
// j := j + 1 ;
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: LD_VAR 0 3
35759: PUSH
35760: LD_INT 1
35762: PLUS
35763: ST_TO_ADDR
// SetSide ( i , j ) ;
35764: LD_VAR 0 2
35768: PPUSH
35769: LD_VAR 0 3
35773: PPUSH
35774: CALL_OW 235
// end ;
35778: GO 35701
35780: POP
35781: POP
// end ;
35782: LD_VAR 0 1
35786: RET
// export function hHackFog ; begin
35787: LD_INT 0
35789: PPUSH
// FogOff ( true ) ;
35790: LD_INT 1
35792: PPUSH
35793: CALL_OW 344
// end ;
35797: LD_VAR 0 1
35801: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35802: LD_INT 0
35804: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35805: LD_VAR 0 1
35809: PPUSH
35810: LD_VAR 0 2
35814: PPUSH
35815: LD_VAR 0 3
35819: PPUSH
35820: LD_INT 1
35822: PPUSH
35823: LD_INT 1
35825: PPUSH
35826: CALL_OW 483
// CenterOnXY ( x , y ) ;
35830: LD_VAR 0 2
35834: PPUSH
35835: LD_VAR 0 3
35839: PPUSH
35840: CALL_OW 84
// end ; end_of_file
35844: LD_VAR 0 4
35848: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35849: LD_INT 0
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35855: LD_VAR 0 1
35859: PPUSH
35860: CALL_OW 264
35864: PUSH
35865: LD_EXP 56
35869: EQUAL
35870: IFFALSE 35942
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35872: LD_INT 68
35874: PPUSH
35875: LD_VAR 0 1
35879: PPUSH
35880: CALL_OW 255
35884: PPUSH
35885: CALL_OW 321
35889: PUSH
35890: LD_INT 2
35892: EQUAL
35893: IFFALSE 35905
// eff := 70 else
35895: LD_ADDR_VAR 0 4
35899: PUSH
35900: LD_INT 70
35902: ST_TO_ADDR
35903: GO 35913
// eff := 30 ;
35905: LD_ADDR_VAR 0 4
35909: PUSH
35910: LD_INT 30
35912: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 250
35922: PPUSH
35923: LD_VAR 0 1
35927: PPUSH
35928: CALL_OW 251
35932: PPUSH
35933: LD_VAR 0 4
35937: PPUSH
35938: CALL_OW 495
// end ; end ;
35942: LD_VAR 0 2
35946: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35947: LD_INT 0
35949: PPUSH
// end ;
35950: LD_VAR 0 4
35954: RET
// export function SOS_Command ( cmd ) ; begin
35955: LD_INT 0
35957: PPUSH
// end ;
35958: LD_VAR 0 2
35962: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35963: LD_INT 0
35965: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35966: LD_VAR 0 1
35970: PUSH
35971: LD_INT 250
35973: EQUAL
35974: PUSH
35975: LD_VAR 0 2
35979: PPUSH
35980: CALL_OW 264
35984: PUSH
35985: LD_EXP 59
35989: EQUAL
35990: AND
35991: IFFALSE 36012
// MinerPlaceMine ( unit , x , y ) ;
35993: LD_VAR 0 2
35997: PPUSH
35998: LD_VAR 0 4
36002: PPUSH
36003: LD_VAR 0 5
36007: PPUSH
36008: CALL 38353 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36012: LD_VAR 0 1
36016: PUSH
36017: LD_INT 251
36019: EQUAL
36020: PUSH
36021: LD_VAR 0 2
36025: PPUSH
36026: CALL_OW 264
36030: PUSH
36031: LD_EXP 59
36035: EQUAL
36036: AND
36037: IFFALSE 36058
// MinerDetonateMine ( unit , x , y ) ;
36039: LD_VAR 0 2
36043: PPUSH
36044: LD_VAR 0 4
36048: PPUSH
36049: LD_VAR 0 5
36053: PPUSH
36054: CALL 38630 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36058: LD_VAR 0 1
36062: PUSH
36063: LD_INT 252
36065: EQUAL
36066: PUSH
36067: LD_VAR 0 2
36071: PPUSH
36072: CALL_OW 264
36076: PUSH
36077: LD_EXP 59
36081: EQUAL
36082: AND
36083: IFFALSE 36104
// MinerCreateMinefield ( unit , x , y ) ;
36085: LD_VAR 0 2
36089: PPUSH
36090: LD_VAR 0 4
36094: PPUSH
36095: LD_VAR 0 5
36099: PPUSH
36100: CALL 39047 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36104: LD_VAR 0 1
36108: PUSH
36109: LD_INT 253
36111: EQUAL
36112: PUSH
36113: LD_VAR 0 2
36117: PPUSH
36118: CALL_OW 257
36122: PUSH
36123: LD_INT 5
36125: EQUAL
36126: AND
36127: IFFALSE 36148
// ComBinocular ( unit , x , y ) ;
36129: LD_VAR 0 2
36133: PPUSH
36134: LD_VAR 0 4
36138: PPUSH
36139: LD_VAR 0 5
36143: PPUSH
36144: CALL 39418 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36148: LD_VAR 0 1
36152: PUSH
36153: LD_INT 254
36155: EQUAL
36156: PUSH
36157: LD_VAR 0 2
36161: PPUSH
36162: CALL_OW 264
36166: PUSH
36167: LD_EXP 54
36171: EQUAL
36172: AND
36173: PUSH
36174: LD_VAR 0 3
36178: PPUSH
36179: CALL_OW 263
36183: PUSH
36184: LD_INT 3
36186: EQUAL
36187: AND
36188: IFFALSE 36204
// HackDestroyVehicle ( unit , selectedUnit ) ;
36190: LD_VAR 0 2
36194: PPUSH
36195: LD_VAR 0 3
36199: PPUSH
36200: CALL 37713 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36204: LD_VAR 0 1
36208: PUSH
36209: LD_INT 255
36211: EQUAL
36212: PUSH
36213: LD_VAR 0 2
36217: PPUSH
36218: CALL_OW 264
36222: PUSH
36223: LD_INT 14
36225: PUSH
36226: LD_INT 53
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: IN
36233: AND
36234: PUSH
36235: LD_VAR 0 4
36239: PPUSH
36240: LD_VAR 0 5
36244: PPUSH
36245: CALL_OW 488
36249: AND
36250: IFFALSE 36274
// CutTreeXYR ( unit , x , y , 12 ) ;
36252: LD_VAR 0 2
36256: PPUSH
36257: LD_VAR 0 4
36261: PPUSH
36262: LD_VAR 0 5
36266: PPUSH
36267: LD_INT 12
36269: PPUSH
36270: CALL 36279 0 4
// end ;
36274: LD_VAR 0 6
36278: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36279: LD_INT 0
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36290: LD_VAR 0 1
36294: NOT
36295: PUSH
36296: LD_VAR 0 2
36300: PPUSH
36301: LD_VAR 0 3
36305: PPUSH
36306: CALL_OW 488
36310: NOT
36311: OR
36312: PUSH
36313: LD_VAR 0 4
36317: NOT
36318: OR
36319: IFFALSE 36323
// exit ;
36321: GO 36663
// list := [ ] ;
36323: LD_ADDR_VAR 0 13
36327: PUSH
36328: EMPTY
36329: ST_TO_ADDR
// if x - r < 0 then
36330: LD_VAR 0 2
36334: PUSH
36335: LD_VAR 0 4
36339: MINUS
36340: PUSH
36341: LD_INT 0
36343: LESS
36344: IFFALSE 36356
// min_x := 0 else
36346: LD_ADDR_VAR 0 7
36350: PUSH
36351: LD_INT 0
36353: ST_TO_ADDR
36354: GO 36372
// min_x := x - r ;
36356: LD_ADDR_VAR 0 7
36360: PUSH
36361: LD_VAR 0 2
36365: PUSH
36366: LD_VAR 0 4
36370: MINUS
36371: ST_TO_ADDR
// if y - r < 0 then
36372: LD_VAR 0 3
36376: PUSH
36377: LD_VAR 0 4
36381: MINUS
36382: PUSH
36383: LD_INT 0
36385: LESS
36386: IFFALSE 36398
// min_y := 0 else
36388: LD_ADDR_VAR 0 8
36392: PUSH
36393: LD_INT 0
36395: ST_TO_ADDR
36396: GO 36414
// min_y := y - r ;
36398: LD_ADDR_VAR 0 8
36402: PUSH
36403: LD_VAR 0 3
36407: PUSH
36408: LD_VAR 0 4
36412: MINUS
36413: ST_TO_ADDR
// max_x := x + r ;
36414: LD_ADDR_VAR 0 9
36418: PUSH
36419: LD_VAR 0 2
36423: PUSH
36424: LD_VAR 0 4
36428: PLUS
36429: ST_TO_ADDR
// max_y := y + r ;
36430: LD_ADDR_VAR 0 10
36434: PUSH
36435: LD_VAR 0 3
36439: PUSH
36440: LD_VAR 0 4
36444: PLUS
36445: ST_TO_ADDR
// for _x = min_x to max_x do
36446: LD_ADDR_VAR 0 11
36450: PUSH
36451: DOUBLE
36452: LD_VAR 0 7
36456: DEC
36457: ST_TO_ADDR
36458: LD_VAR 0 9
36462: PUSH
36463: FOR_TO
36464: IFFALSE 36581
// for _y = min_y to max_y do
36466: LD_ADDR_VAR 0 12
36470: PUSH
36471: DOUBLE
36472: LD_VAR 0 8
36476: DEC
36477: ST_TO_ADDR
36478: LD_VAR 0 10
36482: PUSH
36483: FOR_TO
36484: IFFALSE 36577
// begin if not ValidHex ( _x , _y ) then
36486: LD_VAR 0 11
36490: PPUSH
36491: LD_VAR 0 12
36495: PPUSH
36496: CALL_OW 488
36500: NOT
36501: IFFALSE 36505
// continue ;
36503: GO 36483
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36505: LD_VAR 0 11
36509: PPUSH
36510: LD_VAR 0 12
36514: PPUSH
36515: CALL_OW 351
36519: PUSH
36520: LD_VAR 0 11
36524: PPUSH
36525: LD_VAR 0 12
36529: PPUSH
36530: CALL_OW 554
36534: AND
36535: IFFALSE 36575
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36537: LD_ADDR_VAR 0 13
36541: PUSH
36542: LD_VAR 0 13
36546: PPUSH
36547: LD_VAR 0 13
36551: PUSH
36552: LD_INT 1
36554: PLUS
36555: PPUSH
36556: LD_VAR 0 11
36560: PUSH
36561: LD_VAR 0 12
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PPUSH
36570: CALL_OW 2
36574: ST_TO_ADDR
// end ;
36575: GO 36483
36577: POP
36578: POP
36579: GO 36463
36581: POP
36582: POP
// if not list then
36583: LD_VAR 0 13
36587: NOT
36588: IFFALSE 36592
// exit ;
36590: GO 36663
// for i in list do
36592: LD_ADDR_VAR 0 6
36596: PUSH
36597: LD_VAR 0 13
36601: PUSH
36602: FOR_IN
36603: IFFALSE 36661
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36605: LD_VAR 0 1
36609: PPUSH
36610: LD_STRING M
36612: PUSH
36613: LD_VAR 0 6
36617: PUSH
36618: LD_INT 1
36620: ARRAY
36621: PUSH
36622: LD_VAR 0 6
36626: PUSH
36627: LD_INT 2
36629: ARRAY
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: PUSH
36652: EMPTY
36653: LIST
36654: PPUSH
36655: CALL_OW 447
36659: GO 36602
36661: POP
36662: POP
// end ;
36663: LD_VAR 0 5
36667: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36668: LD_EXP 123
36672: NOT
36673: IFFALSE 36723
36675: GO 36677
36677: DISABLE
// begin initHack := true ;
36678: LD_ADDR_EXP 123
36682: PUSH
36683: LD_INT 1
36685: ST_TO_ADDR
// hackTanks := [ ] ;
36686: LD_ADDR_EXP 124
36690: PUSH
36691: EMPTY
36692: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36693: LD_ADDR_EXP 125
36697: PUSH
36698: EMPTY
36699: ST_TO_ADDR
// hackLimit := 3 ;
36700: LD_ADDR_EXP 126
36704: PUSH
36705: LD_INT 3
36707: ST_TO_ADDR
// hackDist := 12 ;
36708: LD_ADDR_EXP 127
36712: PUSH
36713: LD_INT 12
36715: ST_TO_ADDR
// hackCounter := [ ] ;
36716: LD_ADDR_EXP 128
36720: PUSH
36721: EMPTY
36722: ST_TO_ADDR
// end ;
36723: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36724: LD_EXP 123
36728: PUSH
36729: LD_INT 34
36731: PUSH
36732: LD_EXP 54
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PPUSH
36741: CALL_OW 69
36745: AND
36746: IFFALSE 37001
36748: GO 36750
36750: DISABLE
36751: LD_INT 0
36753: PPUSH
36754: PPUSH
// begin enable ;
36755: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36756: LD_ADDR_VAR 0 1
36760: PUSH
36761: LD_INT 34
36763: PUSH
36764: LD_EXP 54
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PPUSH
36773: CALL_OW 69
36777: PUSH
36778: FOR_IN
36779: IFFALSE 36999
// begin if not i in hackTanks then
36781: LD_VAR 0 1
36785: PUSH
36786: LD_EXP 124
36790: IN
36791: NOT
36792: IFFALSE 36875
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36794: LD_ADDR_EXP 124
36798: PUSH
36799: LD_EXP 124
36803: PPUSH
36804: LD_EXP 124
36808: PUSH
36809: LD_INT 1
36811: PLUS
36812: PPUSH
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL_OW 1
36822: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36823: LD_ADDR_EXP 125
36827: PUSH
36828: LD_EXP 125
36832: PPUSH
36833: LD_EXP 125
36837: PUSH
36838: LD_INT 1
36840: PLUS
36841: PPUSH
36842: EMPTY
36843: PPUSH
36844: CALL_OW 1
36848: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36849: LD_ADDR_EXP 128
36853: PUSH
36854: LD_EXP 128
36858: PPUSH
36859: LD_EXP 128
36863: PUSH
36864: LD_INT 1
36866: PLUS
36867: PPUSH
36868: EMPTY
36869: PPUSH
36870: CALL_OW 1
36874: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36875: LD_VAR 0 1
36879: PPUSH
36880: CALL_OW 302
36884: NOT
36885: IFFALSE 36898
// begin HackUnlinkAll ( i ) ;
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL 37004 0 1
// continue ;
36896: GO 36778
// end ; HackCheckCapturedStatus ( i ) ;
36898: LD_VAR 0 1
36902: PPUSH
36903: CALL 37447 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36907: LD_ADDR_VAR 0 2
36911: PUSH
36912: LD_INT 81
36914: PUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 255
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 33
36931: PUSH
36932: LD_INT 3
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 91
36941: PUSH
36942: LD_VAR 0 1
36946: PUSH
36947: LD_EXP 127
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 50
36959: PUSH
36960: EMPTY
36961: LIST
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: PPUSH
36969: CALL_OW 69
36973: ST_TO_ADDR
// if not tmp then
36974: LD_VAR 0 2
36978: NOT
36979: IFFALSE 36983
// continue ;
36981: GO 36778
// HackLink ( i , tmp ) ;
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_VAR 0 2
36992: PPUSH
36993: CALL 37140 0 2
// end ;
36997: GO 36778
36999: POP
37000: POP
// end ;
37001: PPOPN 2
37003: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37004: LD_INT 0
37006: PPUSH
37007: PPUSH
37008: PPUSH
// if not hack in hackTanks then
37009: LD_VAR 0 1
37013: PUSH
37014: LD_EXP 124
37018: IN
37019: NOT
37020: IFFALSE 37024
// exit ;
37022: GO 37135
// index := GetElementIndex ( hackTanks , hack ) ;
37024: LD_ADDR_VAR 0 4
37028: PUSH
37029: LD_EXP 124
37033: PPUSH
37034: LD_VAR 0 1
37038: PPUSH
37039: CALL 44569 0 2
37043: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37044: LD_EXP 125
37048: PUSH
37049: LD_VAR 0 4
37053: ARRAY
37054: IFFALSE 37135
// begin for i in hackTanksCaptured [ index ] do
37056: LD_ADDR_VAR 0 3
37060: PUSH
37061: LD_EXP 125
37065: PUSH
37066: LD_VAR 0 4
37070: ARRAY
37071: PUSH
37072: FOR_IN
37073: IFFALSE 37099
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37075: LD_VAR 0 3
37079: PUSH
37080: LD_INT 1
37082: ARRAY
37083: PPUSH
37084: LD_VAR 0 3
37088: PUSH
37089: LD_INT 2
37091: ARRAY
37092: PPUSH
37093: CALL_OW 235
37097: GO 37072
37099: POP
37100: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37101: LD_ADDR_EXP 125
37105: PUSH
37106: LD_EXP 125
37110: PPUSH
37111: LD_VAR 0 4
37115: PPUSH
37116: EMPTY
37117: PPUSH
37118: CALL_OW 1
37122: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37123: LD_VAR 0 1
37127: PPUSH
37128: LD_INT 0
37130: PPUSH
37131: CALL_OW 505
// end ; end ;
37135: LD_VAR 0 2
37139: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37140: LD_INT 0
37142: PPUSH
37143: PPUSH
37144: PPUSH
// if not hack in hackTanks or not vehicles then
37145: LD_VAR 0 1
37149: PUSH
37150: LD_EXP 124
37154: IN
37155: NOT
37156: PUSH
37157: LD_VAR 0 2
37161: NOT
37162: OR
37163: IFFALSE 37167
// exit ;
37165: GO 37442
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37167: LD_ADDR_VAR 0 2
37171: PUSH
37172: LD_VAR 0 1
37176: PPUSH
37177: LD_VAR 0 2
37181: PPUSH
37182: LD_INT 1
37184: PPUSH
37185: LD_INT 1
37187: PPUSH
37188: CALL 45219 0 4
37192: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37193: LD_ADDR_VAR 0 5
37197: PUSH
37198: LD_EXP 124
37202: PPUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL 44569 0 2
37212: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37213: LD_EXP 125
37217: PUSH
37218: LD_VAR 0 5
37222: ARRAY
37223: PUSH
37224: LD_EXP 126
37228: LESS
37229: IFFALSE 37418
// begin for i := 1 to vehicles do
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: DOUBLE
37237: LD_INT 1
37239: DEC
37240: ST_TO_ADDR
37241: LD_VAR 0 2
37245: PUSH
37246: FOR_TO
37247: IFFALSE 37416
// begin if hackTanksCaptured [ index ] = hackLimit then
37249: LD_EXP 125
37253: PUSH
37254: LD_VAR 0 5
37258: ARRAY
37259: PUSH
37260: LD_EXP 126
37264: EQUAL
37265: IFFALSE 37269
// break ;
37267: GO 37416
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37269: LD_ADDR_EXP 128
37273: PUSH
37274: LD_EXP 128
37278: PPUSH
37279: LD_VAR 0 5
37283: PPUSH
37284: LD_EXP 128
37288: PUSH
37289: LD_VAR 0 5
37293: ARRAY
37294: PUSH
37295: LD_INT 1
37297: PLUS
37298: PPUSH
37299: CALL_OW 1
37303: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37304: LD_ADDR_EXP 125
37308: PUSH
37309: LD_EXP 125
37313: PPUSH
37314: LD_VAR 0 5
37318: PUSH
37319: LD_EXP 125
37323: PUSH
37324: LD_VAR 0 5
37328: ARRAY
37329: PUSH
37330: LD_INT 1
37332: PLUS
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PPUSH
37338: LD_VAR 0 2
37342: PUSH
37343: LD_VAR 0 4
37347: ARRAY
37348: PUSH
37349: LD_VAR 0 2
37353: PUSH
37354: LD_VAR 0 4
37358: ARRAY
37359: PPUSH
37360: CALL_OW 255
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PPUSH
37369: CALL 44784 0 3
37373: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37374: LD_VAR 0 2
37378: PUSH
37379: LD_VAR 0 4
37383: ARRAY
37384: PPUSH
37385: LD_VAR 0 1
37389: PPUSH
37390: CALL_OW 255
37394: PPUSH
37395: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37399: LD_VAR 0 2
37403: PUSH
37404: LD_VAR 0 4
37408: ARRAY
37409: PPUSH
37410: CALL_OW 141
// end ;
37414: GO 37246
37416: POP
37417: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37418: LD_VAR 0 1
37422: PPUSH
37423: LD_EXP 125
37427: PUSH
37428: LD_VAR 0 5
37432: ARRAY
37433: PUSH
37434: LD_INT 0
37436: PLUS
37437: PPUSH
37438: CALL_OW 505
// end ;
37442: LD_VAR 0 3
37446: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37447: LD_INT 0
37449: PPUSH
37450: PPUSH
37451: PPUSH
37452: PPUSH
// if not hack in hackTanks then
37453: LD_VAR 0 1
37457: PUSH
37458: LD_EXP 124
37462: IN
37463: NOT
37464: IFFALSE 37468
// exit ;
37466: GO 37708
// index := GetElementIndex ( hackTanks , hack ) ;
37468: LD_ADDR_VAR 0 4
37472: PUSH
37473: LD_EXP 124
37477: PPUSH
37478: LD_VAR 0 1
37482: PPUSH
37483: CALL 44569 0 2
37487: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37488: LD_ADDR_VAR 0 3
37492: PUSH
37493: DOUBLE
37494: LD_EXP 125
37498: PUSH
37499: LD_VAR 0 4
37503: ARRAY
37504: INC
37505: ST_TO_ADDR
37506: LD_INT 1
37508: PUSH
37509: FOR_DOWNTO
37510: IFFALSE 37682
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37512: LD_ADDR_VAR 0 5
37516: PUSH
37517: LD_EXP 125
37521: PUSH
37522: LD_VAR 0 4
37526: ARRAY
37527: PUSH
37528: LD_VAR 0 3
37532: ARRAY
37533: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37534: LD_VAR 0 5
37538: PUSH
37539: LD_INT 1
37541: ARRAY
37542: PPUSH
37543: CALL_OW 302
37547: NOT
37548: PUSH
37549: LD_VAR 0 5
37553: PUSH
37554: LD_INT 1
37556: ARRAY
37557: PPUSH
37558: CALL_OW 255
37562: PUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 255
37572: NONEQUAL
37573: OR
37574: IFFALSE 37680
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37576: LD_VAR 0 5
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PPUSH
37585: CALL_OW 305
37589: PUSH
37590: LD_VAR 0 5
37594: PUSH
37595: LD_INT 1
37597: ARRAY
37598: PPUSH
37599: CALL_OW 255
37603: PUSH
37604: LD_VAR 0 1
37608: PPUSH
37609: CALL_OW 255
37613: EQUAL
37614: AND
37615: IFFALSE 37639
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37617: LD_VAR 0 5
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PPUSH
37626: LD_VAR 0 5
37630: PUSH
37631: LD_INT 2
37633: ARRAY
37634: PPUSH
37635: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37639: LD_ADDR_EXP 125
37643: PUSH
37644: LD_EXP 125
37648: PPUSH
37649: LD_VAR 0 4
37653: PPUSH
37654: LD_EXP 125
37658: PUSH
37659: LD_VAR 0 4
37663: ARRAY
37664: PPUSH
37665: LD_VAR 0 3
37669: PPUSH
37670: CALL_OW 3
37674: PPUSH
37675: CALL_OW 1
37679: ST_TO_ADDR
// end ; end ;
37680: GO 37509
37682: POP
37683: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37684: LD_VAR 0 1
37688: PPUSH
37689: LD_EXP 125
37693: PUSH
37694: LD_VAR 0 4
37698: ARRAY
37699: PUSH
37700: LD_INT 0
37702: PLUS
37703: PPUSH
37704: CALL_OW 505
// end ;
37708: LD_VAR 0 2
37712: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37713: LD_INT 0
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
// if not hack in hackTanks then
37719: LD_VAR 0 1
37723: PUSH
37724: LD_EXP 124
37728: IN
37729: NOT
37730: IFFALSE 37734
// exit ;
37732: GO 37819
// index := GetElementIndex ( hackTanks , hack ) ;
37734: LD_ADDR_VAR 0 5
37738: PUSH
37739: LD_EXP 124
37743: PPUSH
37744: LD_VAR 0 1
37748: PPUSH
37749: CALL 44569 0 2
37753: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37754: LD_ADDR_VAR 0 4
37758: PUSH
37759: DOUBLE
37760: LD_INT 1
37762: DEC
37763: ST_TO_ADDR
37764: LD_EXP 125
37768: PUSH
37769: LD_VAR 0 5
37773: ARRAY
37774: PUSH
37775: FOR_TO
37776: IFFALSE 37817
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37778: LD_EXP 125
37782: PUSH
37783: LD_VAR 0 5
37787: ARRAY
37788: PUSH
37789: LD_VAR 0 4
37793: ARRAY
37794: PUSH
37795: LD_INT 1
37797: ARRAY
37798: PUSH
37799: LD_VAR 0 2
37803: EQUAL
37804: IFFALSE 37815
// KillUnit ( vehicle ) ;
37806: LD_VAR 0 2
37810: PPUSH
37811: CALL_OW 66
37815: GO 37775
37817: POP
37818: POP
// end ;
37819: LD_VAR 0 3
37823: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37824: LD_EXP 129
37828: NOT
37829: IFFALSE 37864
37831: GO 37833
37833: DISABLE
// begin initMiner := true ;
37834: LD_ADDR_EXP 129
37838: PUSH
37839: LD_INT 1
37841: ST_TO_ADDR
// minersList := [ ] ;
37842: LD_ADDR_EXP 130
37846: PUSH
37847: EMPTY
37848: ST_TO_ADDR
// minerMinesList := [ ] ;
37849: LD_ADDR_EXP 131
37853: PUSH
37854: EMPTY
37855: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37856: LD_ADDR_EXP 132
37860: PUSH
37861: LD_INT 5
37863: ST_TO_ADDR
// end ;
37864: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37865: LD_EXP 129
37869: PUSH
37870: LD_INT 34
37872: PUSH
37873: LD_EXP 59
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PPUSH
37882: CALL_OW 69
37886: AND
37887: IFFALSE 38350
37889: GO 37891
37891: DISABLE
37892: LD_INT 0
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
// begin enable ;
37898: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37899: LD_ADDR_VAR 0 1
37903: PUSH
37904: LD_INT 34
37906: PUSH
37907: LD_EXP 59
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PPUSH
37916: CALL_OW 69
37920: PUSH
37921: FOR_IN
37922: IFFALSE 37994
// begin if not i in minersList then
37924: LD_VAR 0 1
37928: PUSH
37929: LD_EXP 130
37933: IN
37934: NOT
37935: IFFALSE 37992
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37937: LD_ADDR_EXP 130
37941: PUSH
37942: LD_EXP 130
37946: PPUSH
37947: LD_EXP 130
37951: PUSH
37952: LD_INT 1
37954: PLUS
37955: PPUSH
37956: LD_VAR 0 1
37960: PPUSH
37961: CALL_OW 1
37965: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37966: LD_ADDR_EXP 131
37970: PUSH
37971: LD_EXP 131
37975: PPUSH
37976: LD_EXP 131
37980: PUSH
37981: LD_INT 1
37983: PLUS
37984: PPUSH
37985: EMPTY
37986: PPUSH
37987: CALL_OW 1
37991: ST_TO_ADDR
// end end ;
37992: GO 37921
37994: POP
37995: POP
// for i := minerMinesList downto 1 do
37996: LD_ADDR_VAR 0 1
38000: PUSH
38001: DOUBLE
38002: LD_EXP 131
38006: INC
38007: ST_TO_ADDR
38008: LD_INT 1
38010: PUSH
38011: FOR_DOWNTO
38012: IFFALSE 38348
// begin if IsLive ( minersList [ i ] ) then
38014: LD_EXP 130
38018: PUSH
38019: LD_VAR 0 1
38023: ARRAY
38024: PPUSH
38025: CALL_OW 300
38029: IFFALSE 38057
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38031: LD_EXP 130
38035: PUSH
38036: LD_VAR 0 1
38040: ARRAY
38041: PPUSH
38042: LD_EXP 131
38046: PUSH
38047: LD_VAR 0 1
38051: ARRAY
38052: PPUSH
38053: CALL_OW 505
// if not minerMinesList [ i ] then
38057: LD_EXP 131
38061: PUSH
38062: LD_VAR 0 1
38066: ARRAY
38067: NOT
38068: IFFALSE 38072
// continue ;
38070: GO 38011
// for j := minerMinesList [ i ] downto 1 do
38072: LD_ADDR_VAR 0 2
38076: PUSH
38077: DOUBLE
38078: LD_EXP 131
38082: PUSH
38083: LD_VAR 0 1
38087: ARRAY
38088: INC
38089: ST_TO_ADDR
38090: LD_INT 1
38092: PUSH
38093: FOR_DOWNTO
38094: IFFALSE 38344
// begin side := GetSide ( minersList [ i ] ) ;
38096: LD_ADDR_VAR 0 3
38100: PUSH
38101: LD_EXP 130
38105: PUSH
38106: LD_VAR 0 1
38110: ARRAY
38111: PPUSH
38112: CALL_OW 255
38116: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38117: LD_ADDR_VAR 0 4
38121: PUSH
38122: LD_EXP 131
38126: PUSH
38127: LD_VAR 0 1
38131: ARRAY
38132: PUSH
38133: LD_VAR 0 2
38137: ARRAY
38138: PUSH
38139: LD_INT 1
38141: ARRAY
38142: PPUSH
38143: LD_EXP 131
38147: PUSH
38148: LD_VAR 0 1
38152: ARRAY
38153: PUSH
38154: LD_VAR 0 2
38158: ARRAY
38159: PUSH
38160: LD_INT 2
38162: ARRAY
38163: PPUSH
38164: CALL_OW 428
38168: ST_TO_ADDR
// if not tmp then
38169: LD_VAR 0 4
38173: NOT
38174: IFFALSE 38178
// continue ;
38176: GO 38093
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38178: LD_VAR 0 4
38182: PUSH
38183: LD_INT 81
38185: PUSH
38186: LD_VAR 0 3
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PPUSH
38195: CALL_OW 69
38199: IN
38200: PUSH
38201: LD_EXP 131
38205: PUSH
38206: LD_VAR 0 1
38210: ARRAY
38211: PUSH
38212: LD_VAR 0 2
38216: ARRAY
38217: PUSH
38218: LD_INT 1
38220: ARRAY
38221: PPUSH
38222: LD_EXP 131
38226: PUSH
38227: LD_VAR 0 1
38231: ARRAY
38232: PUSH
38233: LD_VAR 0 2
38237: ARRAY
38238: PUSH
38239: LD_INT 2
38241: ARRAY
38242: PPUSH
38243: CALL_OW 458
38247: AND
38248: IFFALSE 38342
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38250: LD_EXP 131
38254: PUSH
38255: LD_VAR 0 1
38259: ARRAY
38260: PUSH
38261: LD_VAR 0 2
38265: ARRAY
38266: PUSH
38267: LD_INT 1
38269: ARRAY
38270: PPUSH
38271: LD_EXP 131
38275: PUSH
38276: LD_VAR 0 1
38280: ARRAY
38281: PUSH
38282: LD_VAR 0 2
38286: ARRAY
38287: PUSH
38288: LD_INT 2
38290: ARRAY
38291: PPUSH
38292: LD_VAR 0 3
38296: PPUSH
38297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38301: LD_ADDR_EXP 131
38305: PUSH
38306: LD_EXP 131
38310: PPUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: LD_EXP 131
38320: PUSH
38321: LD_VAR 0 1
38325: ARRAY
38326: PPUSH
38327: LD_VAR 0 2
38331: PPUSH
38332: CALL_OW 3
38336: PPUSH
38337: CALL_OW 1
38341: ST_TO_ADDR
// end ; end ;
38342: GO 38093
38344: POP
38345: POP
// end ;
38346: GO 38011
38348: POP
38349: POP
// end ;
38350: PPOPN 4
38352: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38353: LD_INT 0
38355: PPUSH
38356: PPUSH
// result := false ;
38357: LD_ADDR_VAR 0 4
38361: PUSH
38362: LD_INT 0
38364: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38365: LD_VAR 0 1
38369: PPUSH
38370: CALL_OW 264
38374: PUSH
38375: LD_EXP 59
38379: EQUAL
38380: NOT
38381: IFFALSE 38385
// exit ;
38383: GO 38625
// index := GetElementIndex ( minersList , unit ) ;
38385: LD_ADDR_VAR 0 5
38389: PUSH
38390: LD_EXP 130
38394: PPUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL 44569 0 2
38404: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38405: LD_EXP 131
38409: PUSH
38410: LD_VAR 0 5
38414: ARRAY
38415: PUSH
38416: LD_EXP 132
38420: GREATEREQUAL
38421: IFFALSE 38425
// exit ;
38423: GO 38625
// ComMoveXY ( unit , x , y ) ;
38425: LD_VAR 0 1
38429: PPUSH
38430: LD_VAR 0 2
38434: PPUSH
38435: LD_VAR 0 3
38439: PPUSH
38440: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38444: LD_INT 35
38446: PPUSH
38447: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38451: LD_VAR 0 1
38455: PPUSH
38456: LD_VAR 0 2
38460: PPUSH
38461: LD_VAR 0 3
38465: PPUSH
38466: CALL 74633 0 3
38470: NOT
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 314
38481: AND
38482: IFFALSE 38486
// exit ;
38484: GO 38625
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38486: LD_VAR 0 2
38490: PPUSH
38491: LD_VAR 0 3
38495: PPUSH
38496: CALL_OW 428
38500: PUSH
38501: LD_VAR 0 1
38505: EQUAL
38506: PUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 314
38516: NOT
38517: AND
38518: IFFALSE 38444
// PlaySoundXY ( x , y , PlantMine ) ;
38520: LD_VAR 0 2
38524: PPUSH
38525: LD_VAR 0 3
38529: PPUSH
38530: LD_STRING PlantMine
38532: PPUSH
38533: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38537: LD_VAR 0 2
38541: PPUSH
38542: LD_VAR 0 3
38546: PPUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 255
38556: PPUSH
38557: LD_INT 0
38559: PPUSH
38560: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38564: LD_ADDR_EXP 131
38568: PUSH
38569: LD_EXP 131
38573: PPUSH
38574: LD_VAR 0 5
38578: PUSH
38579: LD_EXP 131
38583: PUSH
38584: LD_VAR 0 5
38588: ARRAY
38589: PUSH
38590: LD_INT 1
38592: PLUS
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PPUSH
38598: LD_VAR 0 2
38602: PUSH
38603: LD_VAR 0 3
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PPUSH
38612: CALL 44784 0 3
38616: ST_TO_ADDR
// result := true ;
38617: LD_ADDR_VAR 0 4
38621: PUSH
38622: LD_INT 1
38624: ST_TO_ADDR
// end ;
38625: LD_VAR 0 4
38629: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38630: LD_INT 0
38632: PPUSH
38633: PPUSH
38634: PPUSH
// if not unit in minersList then
38635: LD_VAR 0 1
38639: PUSH
38640: LD_EXP 130
38644: IN
38645: NOT
38646: IFFALSE 38650
// exit ;
38648: GO 39042
// index := GetElementIndex ( minersList , unit ) ;
38650: LD_ADDR_VAR 0 6
38654: PUSH
38655: LD_EXP 130
38659: PPUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: CALL 44569 0 2
38669: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: DOUBLE
38676: LD_EXP 131
38680: PUSH
38681: LD_VAR 0 6
38685: ARRAY
38686: INC
38687: ST_TO_ADDR
38688: LD_INT 1
38690: PUSH
38691: FOR_DOWNTO
38692: IFFALSE 38853
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38694: LD_EXP 131
38698: PUSH
38699: LD_VAR 0 6
38703: ARRAY
38704: PUSH
38705: LD_VAR 0 5
38709: ARRAY
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: PUSH
38715: LD_VAR 0 2
38719: EQUAL
38720: PUSH
38721: LD_EXP 131
38725: PUSH
38726: LD_VAR 0 6
38730: ARRAY
38731: PUSH
38732: LD_VAR 0 5
38736: ARRAY
38737: PUSH
38738: LD_INT 2
38740: ARRAY
38741: PUSH
38742: LD_VAR 0 3
38746: EQUAL
38747: AND
38748: IFFALSE 38851
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38750: LD_EXP 131
38754: PUSH
38755: LD_VAR 0 6
38759: ARRAY
38760: PUSH
38761: LD_VAR 0 5
38765: ARRAY
38766: PUSH
38767: LD_INT 1
38769: ARRAY
38770: PPUSH
38771: LD_EXP 131
38775: PUSH
38776: LD_VAR 0 6
38780: ARRAY
38781: PUSH
38782: LD_VAR 0 5
38786: ARRAY
38787: PUSH
38788: LD_INT 2
38790: ARRAY
38791: PPUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: CALL_OW 255
38801: PPUSH
38802: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38806: LD_ADDR_EXP 131
38810: PUSH
38811: LD_EXP 131
38815: PPUSH
38816: LD_VAR 0 6
38820: PPUSH
38821: LD_EXP 131
38825: PUSH
38826: LD_VAR 0 6
38830: ARRAY
38831: PPUSH
38832: LD_VAR 0 5
38836: PPUSH
38837: CALL_OW 3
38841: PPUSH
38842: CALL_OW 1
38846: ST_TO_ADDR
// exit ;
38847: POP
38848: POP
38849: GO 39042
// end ; end ;
38851: GO 38691
38853: POP
38854: POP
// for i := minerMinesList [ index ] downto 1 do
38855: LD_ADDR_VAR 0 5
38859: PUSH
38860: DOUBLE
38861: LD_EXP 131
38865: PUSH
38866: LD_VAR 0 6
38870: ARRAY
38871: INC
38872: ST_TO_ADDR
38873: LD_INT 1
38875: PUSH
38876: FOR_DOWNTO
38877: IFFALSE 39040
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38879: LD_EXP 131
38883: PUSH
38884: LD_VAR 0 6
38888: ARRAY
38889: PUSH
38890: LD_VAR 0 5
38894: ARRAY
38895: PUSH
38896: LD_INT 1
38898: ARRAY
38899: PPUSH
38900: LD_EXP 131
38904: PUSH
38905: LD_VAR 0 6
38909: ARRAY
38910: PUSH
38911: LD_VAR 0 5
38915: ARRAY
38916: PUSH
38917: LD_INT 2
38919: ARRAY
38920: PPUSH
38921: LD_VAR 0 2
38925: PPUSH
38926: LD_VAR 0 3
38930: PPUSH
38931: CALL_OW 298
38935: PUSH
38936: LD_INT 6
38938: LESS
38939: IFFALSE 39038
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38941: LD_EXP 131
38945: PUSH
38946: LD_VAR 0 6
38950: ARRAY
38951: PUSH
38952: LD_VAR 0 5
38956: ARRAY
38957: PUSH
38958: LD_INT 1
38960: ARRAY
38961: PPUSH
38962: LD_EXP 131
38966: PUSH
38967: LD_VAR 0 6
38971: ARRAY
38972: PUSH
38973: LD_VAR 0 5
38977: ARRAY
38978: PUSH
38979: LD_INT 2
38981: ARRAY
38982: PPUSH
38983: LD_VAR 0 1
38987: PPUSH
38988: CALL_OW 255
38992: PPUSH
38993: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38997: LD_ADDR_EXP 131
39001: PUSH
39002: LD_EXP 131
39006: PPUSH
39007: LD_VAR 0 6
39011: PPUSH
39012: LD_EXP 131
39016: PUSH
39017: LD_VAR 0 6
39021: ARRAY
39022: PPUSH
39023: LD_VAR 0 5
39027: PPUSH
39028: CALL_OW 3
39032: PPUSH
39033: CALL_OW 1
39037: ST_TO_ADDR
// end ; end ;
39038: GO 38876
39040: POP
39041: POP
// end ;
39042: LD_VAR 0 4
39046: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39047: LD_INT 0
39049: PPUSH
39050: PPUSH
39051: PPUSH
39052: PPUSH
39053: PPUSH
39054: PPUSH
39055: PPUSH
39056: PPUSH
39057: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39058: LD_VAR 0 1
39062: PPUSH
39063: CALL_OW 264
39067: PUSH
39068: LD_EXP 59
39072: EQUAL
39073: NOT
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_EXP 130
39084: IN
39085: NOT
39086: OR
39087: IFFALSE 39091
// exit ;
39089: GO 39413
// index := GetElementIndex ( minersList , unit ) ;
39091: LD_ADDR_VAR 0 6
39095: PUSH
39096: LD_EXP 130
39100: PPUSH
39101: LD_VAR 0 1
39105: PPUSH
39106: CALL 44569 0 2
39110: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39111: LD_ADDR_VAR 0 8
39115: PUSH
39116: LD_EXP 132
39120: PUSH
39121: LD_EXP 131
39125: PUSH
39126: LD_VAR 0 6
39130: ARRAY
39131: MINUS
39132: ST_TO_ADDR
// if not minesFreeAmount then
39133: LD_VAR 0 8
39137: NOT
39138: IFFALSE 39142
// exit ;
39140: GO 39413
// tmp := [ ] ;
39142: LD_ADDR_VAR 0 7
39146: PUSH
39147: EMPTY
39148: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39149: LD_ADDR_VAR 0 5
39153: PUSH
39154: DOUBLE
39155: LD_INT 1
39157: DEC
39158: ST_TO_ADDR
39159: LD_VAR 0 8
39163: PUSH
39164: FOR_TO
39165: IFFALSE 39360
// begin _d := rand ( 0 , 5 ) ;
39167: LD_ADDR_VAR 0 11
39171: PUSH
39172: LD_INT 0
39174: PPUSH
39175: LD_INT 5
39177: PPUSH
39178: CALL_OW 12
39182: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39183: LD_ADDR_VAR 0 12
39187: PUSH
39188: LD_INT 2
39190: PPUSH
39191: LD_INT 6
39193: PPUSH
39194: CALL_OW 12
39198: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39199: LD_ADDR_VAR 0 9
39203: PUSH
39204: LD_VAR 0 2
39208: PPUSH
39209: LD_VAR 0 11
39213: PPUSH
39214: LD_VAR 0 12
39218: PPUSH
39219: CALL_OW 272
39223: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39224: LD_ADDR_VAR 0 10
39228: PUSH
39229: LD_VAR 0 3
39233: PPUSH
39234: LD_VAR 0 11
39238: PPUSH
39239: LD_VAR 0 12
39243: PPUSH
39244: CALL_OW 273
39248: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39249: LD_VAR 0 9
39253: PPUSH
39254: LD_VAR 0 10
39258: PPUSH
39259: CALL_OW 488
39263: PUSH
39264: LD_VAR 0 9
39268: PUSH
39269: LD_VAR 0 10
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_VAR 0 7
39282: IN
39283: NOT
39284: AND
39285: PUSH
39286: LD_VAR 0 9
39290: PPUSH
39291: LD_VAR 0 10
39295: PPUSH
39296: CALL_OW 458
39300: NOT
39301: AND
39302: IFFALSE 39344
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39304: LD_ADDR_VAR 0 7
39308: PUSH
39309: LD_VAR 0 7
39313: PPUSH
39314: LD_VAR 0 7
39318: PUSH
39319: LD_INT 1
39321: PLUS
39322: PPUSH
39323: LD_VAR 0 9
39327: PUSH
39328: LD_VAR 0 10
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PPUSH
39337: CALL_OW 1
39341: ST_TO_ADDR
39342: GO 39358
// i := i - 1 ;
39344: LD_ADDR_VAR 0 5
39348: PUSH
39349: LD_VAR 0 5
39353: PUSH
39354: LD_INT 1
39356: MINUS
39357: ST_TO_ADDR
// end ;
39358: GO 39164
39360: POP
39361: POP
// for i in tmp do
39362: LD_ADDR_VAR 0 5
39366: PUSH
39367: LD_VAR 0 7
39371: PUSH
39372: FOR_IN
39373: IFFALSE 39411
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39375: LD_VAR 0 1
39379: PPUSH
39380: LD_VAR 0 5
39384: PUSH
39385: LD_INT 1
39387: ARRAY
39388: PPUSH
39389: LD_VAR 0 5
39393: PUSH
39394: LD_INT 2
39396: ARRAY
39397: PPUSH
39398: CALL 38353 0 3
39402: NOT
39403: IFFALSE 39409
// exit ;
39405: POP
39406: POP
39407: GO 39413
39409: GO 39372
39411: POP
39412: POP
// end ;
39413: LD_VAR 0 4
39417: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39418: LD_INT 0
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
// if not GetClass ( unit ) = class_sniper then
39427: LD_VAR 0 1
39431: PPUSH
39432: CALL_OW 257
39436: PUSH
39437: LD_INT 5
39439: EQUAL
39440: NOT
39441: IFFALSE 39445
// exit ;
39443: GO 39833
// dist := 8 ;
39445: LD_ADDR_VAR 0 5
39449: PUSH
39450: LD_INT 8
39452: ST_TO_ADDR
// viewRange := 12 ;
39453: LD_ADDR_VAR 0 7
39457: PUSH
39458: LD_INT 12
39460: ST_TO_ADDR
// side := GetSide ( unit ) ;
39461: LD_ADDR_VAR 0 6
39465: PUSH
39466: LD_VAR 0 1
39470: PPUSH
39471: CALL_OW 255
39475: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39476: LD_INT 61
39478: PPUSH
39479: LD_VAR 0 6
39483: PPUSH
39484: CALL_OW 321
39488: PUSH
39489: LD_INT 2
39491: EQUAL
39492: IFFALSE 39502
// viewRange := 16 ;
39494: LD_ADDR_VAR 0 7
39498: PUSH
39499: LD_INT 16
39501: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39502: LD_VAR 0 1
39506: PPUSH
39507: LD_VAR 0 2
39511: PPUSH
39512: LD_VAR 0 3
39516: PPUSH
39517: CALL_OW 297
39521: PUSH
39522: LD_VAR 0 5
39526: GREATER
39527: IFFALSE 39606
// begin ComMoveXY ( unit , x , y ) ;
39529: LD_VAR 0 1
39533: PPUSH
39534: LD_VAR 0 2
39538: PPUSH
39539: LD_VAR 0 3
39543: PPUSH
39544: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39548: LD_INT 35
39550: PPUSH
39551: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39555: LD_VAR 0 1
39559: PPUSH
39560: LD_VAR 0 2
39564: PPUSH
39565: LD_VAR 0 3
39569: PPUSH
39570: CALL 74633 0 3
39574: NOT
39575: IFFALSE 39579
// exit ;
39577: GO 39833
// until GetDistUnitXY ( unit , x , y ) < dist ;
39579: LD_VAR 0 1
39583: PPUSH
39584: LD_VAR 0 2
39588: PPUSH
39589: LD_VAR 0 3
39593: PPUSH
39594: CALL_OW 297
39598: PUSH
39599: LD_VAR 0 5
39603: LESS
39604: IFFALSE 39548
// end ; ComTurnXY ( unit , x , y ) ;
39606: LD_VAR 0 1
39610: PPUSH
39611: LD_VAR 0 2
39615: PPUSH
39616: LD_VAR 0 3
39620: PPUSH
39621: CALL_OW 118
// wait ( 5 ) ;
39625: LD_INT 5
39627: PPUSH
39628: CALL_OW 67
// _d := GetDir ( unit ) ;
39632: LD_ADDR_VAR 0 10
39636: PUSH
39637: LD_VAR 0 1
39641: PPUSH
39642: CALL_OW 254
39646: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39647: LD_ADDR_VAR 0 8
39651: PUSH
39652: LD_VAR 0 1
39656: PPUSH
39657: CALL_OW 250
39661: PPUSH
39662: LD_VAR 0 10
39666: PPUSH
39667: LD_VAR 0 5
39671: PPUSH
39672: CALL_OW 272
39676: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39677: LD_ADDR_VAR 0 9
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 251
39691: PPUSH
39692: LD_VAR 0 10
39696: PPUSH
39697: LD_VAR 0 5
39701: PPUSH
39702: CALL_OW 273
39706: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39707: LD_VAR 0 8
39711: PPUSH
39712: LD_VAR 0 9
39716: PPUSH
39717: CALL_OW 488
39721: NOT
39722: IFFALSE 39726
// exit ;
39724: GO 39833
// ComAnimCustom ( unit , 1 ) ;
39726: LD_VAR 0 1
39730: PPUSH
39731: LD_INT 1
39733: PPUSH
39734: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39738: LD_VAR 0 8
39742: PPUSH
39743: LD_VAR 0 9
39747: PPUSH
39748: LD_VAR 0 6
39752: PPUSH
39753: LD_VAR 0 7
39757: PPUSH
39758: CALL_OW 330
// repeat wait ( 1 ) ;
39762: LD_INT 1
39764: PPUSH
39765: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 316
39778: PUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 314
39788: OR
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: CALL_OW 302
39799: NOT
39800: OR
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 301
39811: OR
39812: IFFALSE 39762
// RemoveSeeing ( _x , _y , side ) ;
39814: LD_VAR 0 8
39818: PPUSH
39819: LD_VAR 0 9
39823: PPUSH
39824: LD_VAR 0 6
39828: PPUSH
39829: CALL_OW 331
// end ; end_of_file
39833: LD_VAR 0 4
39837: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39838: LD_INT 0
39840: PPUSH
39841: PPUSH
// if exist_mode then
39842: LD_VAR 0 2
39846: IFFALSE 39871
// unit := CreateCharacter ( prefix & ident ) else
39848: LD_ADDR_VAR 0 5
39852: PUSH
39853: LD_VAR 0 3
39857: PUSH
39858: LD_VAR 0 1
39862: STR
39863: PPUSH
39864: CALL_OW 34
39868: ST_TO_ADDR
39869: GO 39886
// unit := NewCharacter ( ident ) ;
39871: LD_ADDR_VAR 0 5
39875: PUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 25
39885: ST_TO_ADDR
// result := unit ;
39886: LD_ADDR_VAR 0 4
39890: PUSH
39891: LD_VAR 0 5
39895: ST_TO_ADDR
// end ;
39896: LD_VAR 0 4
39900: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39901: LD_INT 0
39903: PPUSH
39904: PPUSH
// if not side or not nation then
39905: LD_VAR 0 1
39909: NOT
39910: PUSH
39911: LD_VAR 0 2
39915: NOT
39916: OR
39917: IFFALSE 39921
// exit ;
39919: GO 40685
// case nation of nation_american :
39921: LD_VAR 0 2
39925: PUSH
39926: LD_INT 1
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39934
39932: GO 40148
39934: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39935: LD_ADDR_VAR 0 4
39939: PUSH
39940: LD_INT 35
39942: PUSH
39943: LD_INT 45
39945: PUSH
39946: LD_INT 46
39948: PUSH
39949: LD_INT 47
39951: PUSH
39952: LD_INT 82
39954: PUSH
39955: LD_INT 83
39957: PUSH
39958: LD_INT 84
39960: PUSH
39961: LD_INT 85
39963: PUSH
39964: LD_INT 86
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 6
39975: PUSH
39976: LD_INT 15
39978: PUSH
39979: LD_INT 16
39981: PUSH
39982: LD_INT 7
39984: PUSH
39985: LD_INT 12
39987: PUSH
39988: LD_INT 13
39990: PUSH
39991: LD_INT 10
39993: PUSH
39994: LD_INT 14
39996: PUSH
39997: LD_INT 20
39999: PUSH
40000: LD_INT 21
40002: PUSH
40003: LD_INT 22
40005: PUSH
40006: LD_INT 25
40008: PUSH
40009: LD_INT 32
40011: PUSH
40012: LD_INT 27
40014: PUSH
40015: LD_INT 36
40017: PUSH
40018: LD_INT 69
40020: PUSH
40021: LD_INT 39
40023: PUSH
40024: LD_INT 34
40026: PUSH
40027: LD_INT 40
40029: PUSH
40030: LD_INT 48
40032: PUSH
40033: LD_INT 49
40035: PUSH
40036: LD_INT 50
40038: PUSH
40039: LD_INT 51
40041: PUSH
40042: LD_INT 52
40044: PUSH
40045: LD_INT 53
40047: PUSH
40048: LD_INT 54
40050: PUSH
40051: LD_INT 55
40053: PUSH
40054: LD_INT 56
40056: PUSH
40057: LD_INT 57
40059: PUSH
40060: LD_INT 58
40062: PUSH
40063: LD_INT 59
40065: PUSH
40066: LD_INT 60
40068: PUSH
40069: LD_INT 61
40071: PUSH
40072: LD_INT 62
40074: PUSH
40075: LD_INT 80
40077: PUSH
40078: LD_INT 82
40080: PUSH
40081: LD_INT 83
40083: PUSH
40084: LD_INT 84
40086: PUSH
40087: LD_INT 85
40089: PUSH
40090: LD_INT 86
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: ST_TO_ADDR
40146: GO 40609
40148: LD_INT 2
40150: DOUBLE
40151: EQUAL
40152: IFTRUE 40156
40154: GO 40378
40156: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
40157: LD_ADDR_VAR 0 4
40161: PUSH
40162: LD_INT 35
40164: PUSH
40165: LD_INT 45
40167: PUSH
40168: LD_INT 46
40170: PUSH
40171: LD_INT 47
40173: PUSH
40174: LD_INT 82
40176: PUSH
40177: LD_INT 83
40179: PUSH
40180: LD_INT 84
40182: PUSH
40183: LD_INT 85
40185: PUSH
40186: LD_INT 87
40188: PUSH
40189: LD_INT 70
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 11
40197: PUSH
40198: LD_INT 3
40200: PUSH
40201: LD_INT 4
40203: PUSH
40204: LD_INT 5
40206: PUSH
40207: LD_INT 6
40209: PUSH
40210: LD_INT 15
40212: PUSH
40213: LD_INT 18
40215: PUSH
40216: LD_INT 7
40218: PUSH
40219: LD_INT 17
40221: PUSH
40222: LD_INT 8
40224: PUSH
40225: LD_INT 20
40227: PUSH
40228: LD_INT 21
40230: PUSH
40231: LD_INT 22
40233: PUSH
40234: LD_INT 72
40236: PUSH
40237: LD_INT 26
40239: PUSH
40240: LD_INT 69
40242: PUSH
40243: LD_INT 39
40245: PUSH
40246: LD_INT 40
40248: PUSH
40249: LD_INT 41
40251: PUSH
40252: LD_INT 42
40254: PUSH
40255: LD_INT 43
40257: PUSH
40258: LD_INT 48
40260: PUSH
40261: LD_INT 49
40263: PUSH
40264: LD_INT 50
40266: PUSH
40267: LD_INT 51
40269: PUSH
40270: LD_INT 52
40272: PUSH
40273: LD_INT 53
40275: PUSH
40276: LD_INT 54
40278: PUSH
40279: LD_INT 55
40281: PUSH
40282: LD_INT 56
40284: PUSH
40285: LD_INT 60
40287: PUSH
40288: LD_INT 61
40290: PUSH
40291: LD_INT 62
40293: PUSH
40294: LD_INT 66
40296: PUSH
40297: LD_INT 67
40299: PUSH
40300: LD_INT 68
40302: PUSH
40303: LD_INT 81
40305: PUSH
40306: LD_INT 82
40308: PUSH
40309: LD_INT 83
40311: PUSH
40312: LD_INT 84
40314: PUSH
40315: LD_INT 85
40317: PUSH
40318: LD_INT 87
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: ST_TO_ADDR
40376: GO 40609
40378: LD_INT 3
40380: DOUBLE
40381: EQUAL
40382: IFTRUE 40386
40384: GO 40608
40386: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40387: LD_ADDR_VAR 0 4
40391: PUSH
40392: LD_INT 46
40394: PUSH
40395: LD_INT 47
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: LD_INT 82
40406: PUSH
40407: LD_INT 83
40409: PUSH
40410: LD_INT 84
40412: PUSH
40413: LD_INT 85
40415: PUSH
40416: LD_INT 86
40418: PUSH
40419: LD_INT 11
40421: PUSH
40422: LD_INT 9
40424: PUSH
40425: LD_INT 20
40427: PUSH
40428: LD_INT 19
40430: PUSH
40431: LD_INT 21
40433: PUSH
40434: LD_INT 24
40436: PUSH
40437: LD_INT 22
40439: PUSH
40440: LD_INT 25
40442: PUSH
40443: LD_INT 28
40445: PUSH
40446: LD_INT 29
40448: PUSH
40449: LD_INT 30
40451: PUSH
40452: LD_INT 31
40454: PUSH
40455: LD_INT 37
40457: PUSH
40458: LD_INT 38
40460: PUSH
40461: LD_INT 32
40463: PUSH
40464: LD_INT 27
40466: PUSH
40467: LD_INT 33
40469: PUSH
40470: LD_INT 69
40472: PUSH
40473: LD_INT 39
40475: PUSH
40476: LD_INT 34
40478: PUSH
40479: LD_INT 40
40481: PUSH
40482: LD_INT 71
40484: PUSH
40485: LD_INT 23
40487: PUSH
40488: LD_INT 44
40490: PUSH
40491: LD_INT 48
40493: PUSH
40494: LD_INT 49
40496: PUSH
40497: LD_INT 50
40499: PUSH
40500: LD_INT 51
40502: PUSH
40503: LD_INT 52
40505: PUSH
40506: LD_INT 53
40508: PUSH
40509: LD_INT 54
40511: PUSH
40512: LD_INT 55
40514: PUSH
40515: LD_INT 56
40517: PUSH
40518: LD_INT 57
40520: PUSH
40521: LD_INT 58
40523: PUSH
40524: LD_INT 59
40526: PUSH
40527: LD_INT 63
40529: PUSH
40530: LD_INT 64
40532: PUSH
40533: LD_INT 65
40535: PUSH
40536: LD_INT 82
40538: PUSH
40539: LD_INT 83
40541: PUSH
40542: LD_INT 84
40544: PUSH
40545: LD_INT 85
40547: PUSH
40548: LD_INT 86
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: ST_TO_ADDR
40606: GO 40609
40608: POP
// if state > - 1 and state < 3 then
40609: LD_VAR 0 3
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: GREATER
40618: PUSH
40619: LD_VAR 0 3
40623: PUSH
40624: LD_INT 3
40626: LESS
40627: AND
40628: IFFALSE 40685
// for i in result do
40630: LD_ADDR_VAR 0 5
40634: PUSH
40635: LD_VAR 0 4
40639: PUSH
40640: FOR_IN
40641: IFFALSE 40683
// if GetTech ( i , side ) <> state then
40643: LD_VAR 0 5
40647: PPUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 321
40657: PUSH
40658: LD_VAR 0 3
40662: NONEQUAL
40663: IFFALSE 40681
// result := result diff i ;
40665: LD_ADDR_VAR 0 4
40669: PUSH
40670: LD_VAR 0 4
40674: PUSH
40675: LD_VAR 0 5
40679: DIFF
40680: ST_TO_ADDR
40681: GO 40640
40683: POP
40684: POP
// end ;
40685: LD_VAR 0 4
40689: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40690: LD_INT 0
40692: PPUSH
40693: PPUSH
40694: PPUSH
// result := true ;
40695: LD_ADDR_VAR 0 3
40699: PUSH
40700: LD_INT 1
40702: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40703: LD_ADDR_VAR 0 5
40707: PUSH
40708: LD_VAR 0 2
40712: PPUSH
40713: CALL_OW 480
40717: ST_TO_ADDR
// if not tmp then
40718: LD_VAR 0 5
40722: NOT
40723: IFFALSE 40727
// exit ;
40725: GO 40776
// for i in tmp do
40727: LD_ADDR_VAR 0 4
40731: PUSH
40732: LD_VAR 0 5
40736: PUSH
40737: FOR_IN
40738: IFFALSE 40774
// if GetTech ( i , side ) <> state_researched then
40740: LD_VAR 0 4
40744: PPUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 321
40754: PUSH
40755: LD_INT 2
40757: NONEQUAL
40758: IFFALSE 40772
// begin result := false ;
40760: LD_ADDR_VAR 0 3
40764: PUSH
40765: LD_INT 0
40767: ST_TO_ADDR
// exit ;
40768: POP
40769: POP
40770: GO 40776
// end ;
40772: GO 40737
40774: POP
40775: POP
// end ;
40776: LD_VAR 0 3
40780: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40781: LD_INT 0
40783: PPUSH
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40796: LD_VAR 0 1
40800: NOT
40801: PUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: CALL_OW 257
40811: PUSH
40812: LD_INT 9
40814: NONEQUAL
40815: OR
40816: IFFALSE 40820
// exit ;
40818: GO 41393
// side := GetSide ( unit ) ;
40820: LD_ADDR_VAR 0 9
40824: PUSH
40825: LD_VAR 0 1
40829: PPUSH
40830: CALL_OW 255
40834: ST_TO_ADDR
// tech_space := tech_spacanom ;
40835: LD_ADDR_VAR 0 12
40839: PUSH
40840: LD_INT 29
40842: ST_TO_ADDR
// tech_time := tech_taurad ;
40843: LD_ADDR_VAR 0 13
40847: PUSH
40848: LD_INT 28
40850: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40851: LD_ADDR_VAR 0 11
40855: PUSH
40856: LD_VAR 0 1
40860: PPUSH
40861: CALL_OW 310
40865: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40866: LD_VAR 0 11
40870: PPUSH
40871: CALL_OW 247
40875: PUSH
40876: LD_INT 2
40878: EQUAL
40879: IFFALSE 40883
// exit ;
40881: GO 41393
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40883: LD_ADDR_VAR 0 8
40887: PUSH
40888: LD_INT 81
40890: PUSH
40891: LD_VAR 0 9
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: PUSH
40903: LD_INT 21
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PPUSH
40921: CALL_OW 69
40925: ST_TO_ADDR
// if not tmp then
40926: LD_VAR 0 8
40930: NOT
40931: IFFALSE 40935
// exit ;
40933: GO 41393
// if in_unit then
40935: LD_VAR 0 11
40939: IFFALSE 40963
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40941: LD_ADDR_VAR 0 10
40945: PUSH
40946: LD_VAR 0 8
40950: PPUSH
40951: LD_VAR 0 11
40955: PPUSH
40956: CALL_OW 74
40960: ST_TO_ADDR
40961: GO 40983
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40963: LD_ADDR_VAR 0 10
40967: PUSH
40968: LD_VAR 0 8
40972: PPUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 74
40982: ST_TO_ADDR
// if not enemy then
40983: LD_VAR 0 10
40987: NOT
40988: IFFALSE 40992
// exit ;
40990: GO 41393
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40992: LD_VAR 0 11
40996: PUSH
40997: LD_VAR 0 11
41001: PPUSH
41002: LD_VAR 0 10
41006: PPUSH
41007: CALL_OW 296
41011: PUSH
41012: LD_INT 13
41014: GREATER
41015: AND
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: LD_VAR 0 10
41026: PPUSH
41027: CALL_OW 296
41031: PUSH
41032: LD_INT 12
41034: GREATER
41035: OR
41036: IFFALSE 41040
// exit ;
41038: GO 41393
// missile := [ 1 ] ;
41040: LD_ADDR_VAR 0 14
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41051: LD_VAR 0 9
41055: PPUSH
41056: LD_VAR 0 12
41060: PPUSH
41061: CALL_OW 325
41065: IFFALSE 41094
// missile := Insert ( missile , missile + 1 , 2 ) ;
41067: LD_ADDR_VAR 0 14
41071: PUSH
41072: LD_VAR 0 14
41076: PPUSH
41077: LD_VAR 0 14
41081: PUSH
41082: LD_INT 1
41084: PLUS
41085: PPUSH
41086: LD_INT 2
41088: PPUSH
41089: CALL_OW 2
41093: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41094: LD_VAR 0 9
41098: PPUSH
41099: LD_VAR 0 13
41103: PPUSH
41104: CALL_OW 325
41108: PUSH
41109: LD_VAR 0 10
41113: PPUSH
41114: CALL_OW 255
41118: PPUSH
41119: LD_VAR 0 13
41123: PPUSH
41124: CALL_OW 325
41128: NOT
41129: AND
41130: IFFALSE 41159
// missile := Insert ( missile , missile + 1 , 3 ) ;
41132: LD_ADDR_VAR 0 14
41136: PUSH
41137: LD_VAR 0 14
41141: PPUSH
41142: LD_VAR 0 14
41146: PUSH
41147: LD_INT 1
41149: PLUS
41150: PPUSH
41151: LD_INT 3
41153: PPUSH
41154: CALL_OW 2
41158: ST_TO_ADDR
// if missile < 2 then
41159: LD_VAR 0 14
41163: PUSH
41164: LD_INT 2
41166: LESS
41167: IFFALSE 41171
// exit ;
41169: GO 41393
// x := GetX ( enemy ) ;
41171: LD_ADDR_VAR 0 4
41175: PUSH
41176: LD_VAR 0 10
41180: PPUSH
41181: CALL_OW 250
41185: ST_TO_ADDR
// y := GetY ( enemy ) ;
41186: LD_ADDR_VAR 0 5
41190: PUSH
41191: LD_VAR 0 10
41195: PPUSH
41196: CALL_OW 251
41200: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41201: LD_ADDR_VAR 0 6
41205: PUSH
41206: LD_VAR 0 4
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PPUSH
41215: LD_INT 1
41217: PPUSH
41218: CALL_OW 12
41222: PLUS
41223: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41224: LD_ADDR_VAR 0 7
41228: PUSH
41229: LD_VAR 0 5
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PPUSH
41238: LD_INT 1
41240: PPUSH
41241: CALL_OW 12
41245: PLUS
41246: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41247: LD_VAR 0 6
41251: PPUSH
41252: LD_VAR 0 7
41256: PPUSH
41257: CALL_OW 488
41261: NOT
41262: IFFALSE 41284
// begin _x := x ;
41264: LD_ADDR_VAR 0 6
41268: PUSH
41269: LD_VAR 0 4
41273: ST_TO_ADDR
// _y := y ;
41274: LD_ADDR_VAR 0 7
41278: PUSH
41279: LD_VAR 0 5
41283: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41284: LD_ADDR_VAR 0 3
41288: PUSH
41289: LD_INT 1
41291: PPUSH
41292: LD_VAR 0 14
41296: PPUSH
41297: CALL_OW 12
41301: ST_TO_ADDR
// case i of 1 :
41302: LD_VAR 0 3
41306: PUSH
41307: LD_INT 1
41309: DOUBLE
41310: EQUAL
41311: IFTRUE 41315
41313: GO 41332
41315: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41316: LD_VAR 0 1
41320: PPUSH
41321: LD_VAR 0 10
41325: PPUSH
41326: CALL_OW 115
41330: GO 41393
41332: LD_INT 2
41334: DOUBLE
41335: EQUAL
41336: IFTRUE 41340
41338: GO 41362
41340: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41341: LD_VAR 0 1
41345: PPUSH
41346: LD_VAR 0 6
41350: PPUSH
41351: LD_VAR 0 7
41355: PPUSH
41356: CALL_OW 153
41360: GO 41393
41362: LD_INT 3
41364: DOUBLE
41365: EQUAL
41366: IFTRUE 41370
41368: GO 41392
41370: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41371: LD_VAR 0 1
41375: PPUSH
41376: LD_VAR 0 6
41380: PPUSH
41381: LD_VAR 0 7
41385: PPUSH
41386: CALL_OW 154
41390: GO 41393
41392: POP
// end ;
41393: LD_VAR 0 2
41397: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41398: LD_INT 0
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
// if not unit or not building then
41406: LD_VAR 0 1
41410: NOT
41411: PUSH
41412: LD_VAR 0 2
41416: NOT
41417: OR
41418: IFFALSE 41422
// exit ;
41420: GO 41580
// x := GetX ( building ) ;
41422: LD_ADDR_VAR 0 5
41426: PUSH
41427: LD_VAR 0 2
41431: PPUSH
41432: CALL_OW 250
41436: ST_TO_ADDR
// y := GetY ( building ) ;
41437: LD_ADDR_VAR 0 6
41441: PUSH
41442: LD_VAR 0 2
41446: PPUSH
41447: CALL_OW 251
41451: ST_TO_ADDR
// for i = 0 to 5 do
41452: LD_ADDR_VAR 0 4
41456: PUSH
41457: DOUBLE
41458: LD_INT 0
41460: DEC
41461: ST_TO_ADDR
41462: LD_INT 5
41464: PUSH
41465: FOR_TO
41466: IFFALSE 41578
// begin _x := ShiftX ( x , i , 3 ) ;
41468: LD_ADDR_VAR 0 7
41472: PUSH
41473: LD_VAR 0 5
41477: PPUSH
41478: LD_VAR 0 4
41482: PPUSH
41483: LD_INT 3
41485: PPUSH
41486: CALL_OW 272
41490: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41491: LD_ADDR_VAR 0 8
41495: PUSH
41496: LD_VAR 0 6
41500: PPUSH
41501: LD_VAR 0 4
41505: PPUSH
41506: LD_INT 3
41508: PPUSH
41509: CALL_OW 273
41513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41514: LD_VAR 0 7
41518: PPUSH
41519: LD_VAR 0 8
41523: PPUSH
41524: CALL_OW 488
41528: NOT
41529: IFFALSE 41533
// continue ;
41531: GO 41465
// if HexInfo ( _x , _y ) = 0 then
41533: LD_VAR 0 7
41537: PPUSH
41538: LD_VAR 0 8
41542: PPUSH
41543: CALL_OW 428
41547: PUSH
41548: LD_INT 0
41550: EQUAL
41551: IFFALSE 41576
// begin ComMoveXY ( unit , _x , _y ) ;
41553: LD_VAR 0 1
41557: PPUSH
41558: LD_VAR 0 7
41562: PPUSH
41563: LD_VAR 0 8
41567: PPUSH
41568: CALL_OW 111
// exit ;
41572: POP
41573: POP
41574: GO 41580
// end ; end ;
41576: GO 41465
41578: POP
41579: POP
// end ;
41580: LD_VAR 0 3
41584: RET
// export function ScanBase ( side , base_area ) ; begin
41585: LD_INT 0
41587: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_VAR 0 2
41597: PPUSH
41598: LD_INT 81
41600: PUSH
41601: LD_VAR 0 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PPUSH
41610: CALL_OW 70
41614: ST_TO_ADDR
// end ;
41615: LD_VAR 0 3
41619: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41620: LD_INT 0
41622: PPUSH
41623: PPUSH
41624: PPUSH
41625: PPUSH
// result := false ;
41626: LD_ADDR_VAR 0 2
41630: PUSH
41631: LD_INT 0
41633: ST_TO_ADDR
// side := GetSide ( unit ) ;
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_VAR 0 1
41643: PPUSH
41644: CALL_OW 255
41648: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41649: LD_ADDR_VAR 0 4
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 248
41663: ST_TO_ADDR
// case nat of 1 :
41664: LD_VAR 0 4
41668: PUSH
41669: LD_INT 1
41671: DOUBLE
41672: EQUAL
41673: IFTRUE 41677
41675: GO 41688
41677: POP
// tech := tech_lassight ; 2 :
41678: LD_ADDR_VAR 0 5
41682: PUSH
41683: LD_INT 12
41685: ST_TO_ADDR
41686: GO 41727
41688: LD_INT 2
41690: DOUBLE
41691: EQUAL
41692: IFTRUE 41696
41694: GO 41707
41696: POP
// tech := tech_mortar ; 3 :
41697: LD_ADDR_VAR 0 5
41701: PUSH
41702: LD_INT 41
41704: ST_TO_ADDR
41705: GO 41727
41707: LD_INT 3
41709: DOUBLE
41710: EQUAL
41711: IFTRUE 41715
41713: GO 41726
41715: POP
// tech := tech_bazooka ; end ;
41716: LD_ADDR_VAR 0 5
41720: PUSH
41721: LD_INT 44
41723: ST_TO_ADDR
41724: GO 41727
41726: POP
// if Researched ( side , tech ) then
41727: LD_VAR 0 3
41731: PPUSH
41732: LD_VAR 0 5
41736: PPUSH
41737: CALL_OW 325
41741: IFFALSE 41768
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41743: LD_ADDR_VAR 0 2
41747: PUSH
41748: LD_INT 5
41750: PUSH
41751: LD_INT 8
41753: PUSH
41754: LD_INT 9
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: PUSH
41762: LD_VAR 0 4
41766: ARRAY
41767: ST_TO_ADDR
// end ;
41768: LD_VAR 0 2
41772: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41773: LD_INT 0
41775: PPUSH
41776: PPUSH
41777: PPUSH
// if not mines then
41778: LD_VAR 0 2
41782: NOT
41783: IFFALSE 41787
// exit ;
41785: GO 41931
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41787: LD_ADDR_VAR 0 5
41791: PUSH
41792: LD_INT 81
41794: PUSH
41795: LD_VAR 0 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: LD_INT 21
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PPUSH
41825: CALL_OW 69
41829: ST_TO_ADDR
// for i in mines do
41830: LD_ADDR_VAR 0 4
41834: PUSH
41835: LD_VAR 0 2
41839: PUSH
41840: FOR_IN
41841: IFFALSE 41929
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41843: LD_VAR 0 4
41847: PUSH
41848: LD_INT 1
41850: ARRAY
41851: PPUSH
41852: LD_VAR 0 4
41856: PUSH
41857: LD_INT 2
41859: ARRAY
41860: PPUSH
41861: CALL_OW 458
41865: NOT
41866: IFFALSE 41870
// continue ;
41868: GO 41840
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41870: LD_VAR 0 4
41874: PUSH
41875: LD_INT 1
41877: ARRAY
41878: PPUSH
41879: LD_VAR 0 4
41883: PUSH
41884: LD_INT 2
41886: ARRAY
41887: PPUSH
41888: CALL_OW 428
41892: PUSH
41893: LD_VAR 0 5
41897: IN
41898: IFFALSE 41927
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41900: LD_VAR 0 4
41904: PUSH
41905: LD_INT 1
41907: ARRAY
41908: PPUSH
41909: LD_VAR 0 4
41913: PUSH
41914: LD_INT 2
41916: ARRAY
41917: PPUSH
41918: LD_VAR 0 1
41922: PPUSH
41923: CALL_OW 456
// end ;
41927: GO 41840
41929: POP
41930: POP
// end ;
41931: LD_VAR 0 3
41935: RET
// export function Count ( array ) ; var i ; begin
41936: LD_INT 0
41938: PPUSH
41939: PPUSH
// result := 0 ;
41940: LD_ADDR_VAR 0 2
41944: PUSH
41945: LD_INT 0
41947: ST_TO_ADDR
// for i in array do
41948: LD_ADDR_VAR 0 3
41952: PUSH
41953: LD_VAR 0 1
41957: PUSH
41958: FOR_IN
41959: IFFALSE 41983
// if i then
41961: LD_VAR 0 3
41965: IFFALSE 41981
// result := result + 1 ;
41967: LD_ADDR_VAR 0 2
41971: PUSH
41972: LD_VAR 0 2
41976: PUSH
41977: LD_INT 1
41979: PLUS
41980: ST_TO_ADDR
41981: GO 41958
41983: POP
41984: POP
// end ;
41985: LD_VAR 0 2
41989: RET
// export function IsEmpty ( building ) ; begin
41990: LD_INT 0
41992: PPUSH
// if not building then
41993: LD_VAR 0 1
41997: NOT
41998: IFFALSE 42002
// exit ;
42000: GO 42045
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42002: LD_ADDR_VAR 0 2
42006: PUSH
42007: LD_VAR 0 1
42011: PUSH
42012: LD_INT 22
42014: PUSH
42015: LD_VAR 0 1
42019: PPUSH
42020: CALL_OW 255
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 58
42031: PUSH
42032: EMPTY
42033: LIST
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PPUSH
42039: CALL_OW 69
42043: IN
42044: ST_TO_ADDR
// end ;
42045: LD_VAR 0 2
42049: RET
// export function IsNotFull ( building ) ; begin
42050: LD_INT 0
42052: PPUSH
// if not building then
42053: LD_VAR 0 1
42057: NOT
42058: IFFALSE 42062
// exit ;
42060: GO 42081
// result := UnitsInside ( building ) < 6 ;
42062: LD_ADDR_VAR 0 2
42066: PUSH
42067: LD_VAR 0 1
42071: PPUSH
42072: CALL_OW 313
42076: PUSH
42077: LD_INT 6
42079: LESS
42080: ST_TO_ADDR
// end ;
42081: LD_VAR 0 2
42085: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42086: LD_INT 0
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
// tmp := [ ] ;
42092: LD_ADDR_VAR 0 3
42096: PUSH
42097: EMPTY
42098: ST_TO_ADDR
// list := [ ] ;
42099: LD_ADDR_VAR 0 5
42103: PUSH
42104: EMPTY
42105: ST_TO_ADDR
// for i = 16 to 25 do
42106: LD_ADDR_VAR 0 4
42110: PUSH
42111: DOUBLE
42112: LD_INT 16
42114: DEC
42115: ST_TO_ADDR
42116: LD_INT 25
42118: PUSH
42119: FOR_TO
42120: IFFALSE 42193
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_VAR 0 3
42131: PUSH
42132: LD_INT 22
42134: PUSH
42135: LD_VAR 0 1
42139: PPUSH
42140: CALL_OW 255
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 91
42151: PUSH
42152: LD_VAR 0 1
42156: PUSH
42157: LD_INT 6
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 30
42167: PUSH
42168: LD_VAR 0 4
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: PPUSH
42185: CALL_OW 69
42189: ADD
42190: ST_TO_ADDR
42191: GO 42119
42193: POP
42194: POP
// for i = 1 to tmp do
42195: LD_ADDR_VAR 0 4
42199: PUSH
42200: DOUBLE
42201: LD_INT 1
42203: DEC
42204: ST_TO_ADDR
42205: LD_VAR 0 3
42209: PUSH
42210: FOR_TO
42211: IFFALSE 42299
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42213: LD_ADDR_VAR 0 5
42217: PUSH
42218: LD_VAR 0 5
42222: PUSH
42223: LD_VAR 0 3
42227: PUSH
42228: LD_VAR 0 4
42232: ARRAY
42233: PPUSH
42234: CALL_OW 266
42238: PUSH
42239: LD_VAR 0 3
42243: PUSH
42244: LD_VAR 0 4
42248: ARRAY
42249: PPUSH
42250: CALL_OW 250
42254: PUSH
42255: LD_VAR 0 3
42259: PUSH
42260: LD_VAR 0 4
42264: ARRAY
42265: PPUSH
42266: CALL_OW 251
42270: PUSH
42271: LD_VAR 0 3
42275: PUSH
42276: LD_VAR 0 4
42280: ARRAY
42281: PPUSH
42282: CALL_OW 254
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: PUSH
42293: EMPTY
42294: LIST
42295: ADD
42296: ST_TO_ADDR
42297: GO 42210
42299: POP
42300: POP
// result := list ;
42301: LD_ADDR_VAR 0 2
42305: PUSH
42306: LD_VAR 0 5
42310: ST_TO_ADDR
// end ;
42311: LD_VAR 0 2
42315: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42316: LD_INT 0
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
// if not factory then
42325: LD_VAR 0 1
42329: NOT
42330: IFFALSE 42334
// exit ;
42332: GO 42927
// if control = control_apeman then
42334: LD_VAR 0 4
42338: PUSH
42339: LD_INT 5
42341: EQUAL
42342: IFFALSE 42451
// begin tmp := UnitsInside ( factory ) ;
42344: LD_ADDR_VAR 0 8
42348: PUSH
42349: LD_VAR 0 1
42353: PPUSH
42354: CALL_OW 313
42358: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42359: LD_VAR 0 8
42363: PPUSH
42364: LD_INT 25
42366: PUSH
42367: LD_INT 12
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PPUSH
42374: CALL_OW 72
42378: NOT
42379: IFFALSE 42389
// control := control_manual ;
42381: LD_ADDR_VAR 0 4
42385: PUSH
42386: LD_INT 1
42388: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42389: LD_ADDR_VAR 0 8
42393: PUSH
42394: LD_VAR 0 1
42398: PPUSH
42399: CALL 42086 0 1
42403: ST_TO_ADDR
// if tmp then
42404: LD_VAR 0 8
42408: IFFALSE 42451
// begin for i in tmp do
42410: LD_ADDR_VAR 0 7
42414: PUSH
42415: LD_VAR 0 8
42419: PUSH
42420: FOR_IN
42421: IFFALSE 42449
// if i [ 1 ] = b_ext_radio then
42423: LD_VAR 0 7
42427: PUSH
42428: LD_INT 1
42430: ARRAY
42431: PUSH
42432: LD_INT 22
42434: EQUAL
42435: IFFALSE 42447
// begin control := control_remote ;
42437: LD_ADDR_VAR 0 4
42441: PUSH
42442: LD_INT 2
42444: ST_TO_ADDR
// break ;
42445: GO 42449
// end ;
42447: GO 42420
42449: POP
42450: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42451: LD_VAR 0 1
42455: PPUSH
42456: LD_VAR 0 2
42460: PPUSH
42461: LD_VAR 0 3
42465: PPUSH
42466: LD_VAR 0 4
42470: PPUSH
42471: LD_VAR 0 5
42475: PPUSH
42476: CALL_OW 448
42480: IFFALSE 42515
// begin result := [ chassis , engine , control , weapon ] ;
42482: LD_ADDR_VAR 0 6
42486: PUSH
42487: LD_VAR 0 2
42491: PUSH
42492: LD_VAR 0 3
42496: PUSH
42497: LD_VAR 0 4
42501: PUSH
42502: LD_VAR 0 5
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// exit ;
42513: GO 42927
// end ; _chassis := AvailableChassisList ( factory ) ;
42515: LD_ADDR_VAR 0 9
42519: PUSH
42520: LD_VAR 0 1
42524: PPUSH
42525: CALL_OW 475
42529: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42530: LD_ADDR_VAR 0 11
42534: PUSH
42535: LD_VAR 0 1
42539: PPUSH
42540: CALL_OW 476
42544: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42545: LD_ADDR_VAR 0 12
42549: PUSH
42550: LD_VAR 0 1
42554: PPUSH
42555: CALL_OW 477
42559: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42560: LD_ADDR_VAR 0 10
42564: PUSH
42565: LD_VAR 0 1
42569: PPUSH
42570: CALL_OW 478
42574: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42575: LD_VAR 0 9
42579: NOT
42580: PUSH
42581: LD_VAR 0 11
42585: NOT
42586: OR
42587: PUSH
42588: LD_VAR 0 12
42592: NOT
42593: OR
42594: PUSH
42595: LD_VAR 0 10
42599: NOT
42600: OR
42601: IFFALSE 42636
// begin result := [ chassis , engine , control , weapon ] ;
42603: LD_ADDR_VAR 0 6
42607: PUSH
42608: LD_VAR 0 2
42612: PUSH
42613: LD_VAR 0 3
42617: PUSH
42618: LD_VAR 0 4
42622: PUSH
42623: LD_VAR 0 5
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
// exit ;
42634: GO 42927
// end ; if not chassis in _chassis then
42636: LD_VAR 0 2
42640: PUSH
42641: LD_VAR 0 9
42645: IN
42646: NOT
42647: IFFALSE 42673
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42649: LD_ADDR_VAR 0 2
42653: PUSH
42654: LD_VAR 0 9
42658: PUSH
42659: LD_INT 1
42661: PPUSH
42662: LD_VAR 0 9
42666: PPUSH
42667: CALL_OW 12
42671: ARRAY
42672: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42673: LD_VAR 0 2
42677: PPUSH
42678: LD_VAR 0 3
42682: PPUSH
42683: CALL 42932 0 2
42687: NOT
42688: IFFALSE 42747
// repeat engine := _engine [ 1 ] ;
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_VAR 0 11
42699: PUSH
42700: LD_INT 1
42702: ARRAY
42703: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42704: LD_ADDR_VAR 0 11
42708: PUSH
42709: LD_VAR 0 11
42713: PPUSH
42714: LD_INT 1
42716: PPUSH
42717: CALL_OW 3
42721: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42722: LD_VAR 0 2
42726: PPUSH
42727: LD_VAR 0 3
42731: PPUSH
42732: CALL 42932 0 2
42736: PUSH
42737: LD_VAR 0 11
42741: PUSH
42742: EMPTY
42743: EQUAL
42744: OR
42745: IFFALSE 42690
// if not control in _control then
42747: LD_VAR 0 4
42751: PUSH
42752: LD_VAR 0 12
42756: IN
42757: NOT
42758: IFFALSE 42784
// control := _control [ rand ( 1 , _control ) ] ;
42760: LD_ADDR_VAR 0 4
42764: PUSH
42765: LD_VAR 0 12
42769: PUSH
42770: LD_INT 1
42772: PPUSH
42773: LD_VAR 0 12
42777: PPUSH
42778: CALL_OW 12
42782: ARRAY
42783: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42784: LD_VAR 0 2
42788: PPUSH
42789: LD_VAR 0 5
42793: PPUSH
42794: CALL 43152 0 2
42798: NOT
42799: IFFALSE 42858
// repeat weapon := _weapon [ 1 ] ;
42801: LD_ADDR_VAR 0 5
42805: PUSH
42806: LD_VAR 0 10
42810: PUSH
42811: LD_INT 1
42813: ARRAY
42814: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42815: LD_ADDR_VAR 0 10
42819: PUSH
42820: LD_VAR 0 10
42824: PPUSH
42825: LD_INT 1
42827: PPUSH
42828: CALL_OW 3
42832: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42833: LD_VAR 0 2
42837: PPUSH
42838: LD_VAR 0 5
42842: PPUSH
42843: CALL 43152 0 2
42847: PUSH
42848: LD_VAR 0 10
42852: PUSH
42853: EMPTY
42854: EQUAL
42855: OR
42856: IFFALSE 42801
// result := [ ] ;
42858: LD_ADDR_VAR 0 6
42862: PUSH
42863: EMPTY
42864: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42865: LD_VAR 0 1
42869: PPUSH
42870: LD_VAR 0 2
42874: PPUSH
42875: LD_VAR 0 3
42879: PPUSH
42880: LD_VAR 0 4
42884: PPUSH
42885: LD_VAR 0 5
42889: PPUSH
42890: CALL_OW 448
42894: IFFALSE 42927
// result := [ chassis , engine , control , weapon ] ;
42896: LD_ADDR_VAR 0 6
42900: PUSH
42901: LD_VAR 0 2
42905: PUSH
42906: LD_VAR 0 3
42910: PUSH
42911: LD_VAR 0 4
42915: PUSH
42916: LD_VAR 0 5
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// end ;
42927: LD_VAR 0 6
42931: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42932: LD_INT 0
42934: PPUSH
// if not chassis or not engine then
42935: LD_VAR 0 1
42939: NOT
42940: PUSH
42941: LD_VAR 0 2
42945: NOT
42946: OR
42947: IFFALSE 42951
// exit ;
42949: GO 43147
// case engine of engine_solar :
42951: LD_VAR 0 2
42955: PUSH
42956: LD_INT 2
42958: DOUBLE
42959: EQUAL
42960: IFTRUE 42964
42962: GO 43002
42964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42965: LD_ADDR_VAR 0 3
42969: PUSH
42970: LD_INT 11
42972: PUSH
42973: LD_INT 12
42975: PUSH
42976: LD_INT 13
42978: PUSH
42979: LD_INT 14
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 3
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
43000: GO 43131
43002: LD_INT 1
43004: DOUBLE
43005: EQUAL
43006: IFTRUE 43010
43008: GO 43072
43010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43011: LD_ADDR_VAR 0 3
43015: PUSH
43016: LD_INT 11
43018: PUSH
43019: LD_INT 12
43021: PUSH
43022: LD_INT 13
43024: PUSH
43025: LD_INT 14
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: LD_INT 4
43039: PUSH
43040: LD_INT 5
43042: PUSH
43043: LD_INT 21
43045: PUSH
43046: LD_INT 23
43048: PUSH
43049: LD_INT 22
43051: PUSH
43052: LD_INT 24
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
43070: GO 43131
43072: LD_INT 3
43074: DOUBLE
43075: EQUAL
43076: IFTRUE 43080
43078: GO 43130
43080: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43081: LD_ADDR_VAR 0 3
43085: PUSH
43086: LD_INT 13
43088: PUSH
43089: LD_INT 14
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: LD_INT 4
43100: PUSH
43101: LD_INT 5
43103: PUSH
43104: LD_INT 21
43106: PUSH
43107: LD_INT 22
43109: PUSH
43110: LD_INT 23
43112: PUSH
43113: LD_INT 24
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
43128: GO 43131
43130: POP
// result := ( chassis in result ) ;
43131: LD_ADDR_VAR 0 3
43135: PUSH
43136: LD_VAR 0 1
43140: PUSH
43141: LD_VAR 0 3
43145: IN
43146: ST_TO_ADDR
// end ;
43147: LD_VAR 0 3
43151: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43152: LD_INT 0
43154: PPUSH
// if not chassis or not weapon then
43155: LD_VAR 0 1
43159: NOT
43160: PUSH
43161: LD_VAR 0 2
43165: NOT
43166: OR
43167: IFFALSE 43171
// exit ;
43169: GO 44197
// case weapon of us_machine_gun :
43171: LD_VAR 0 2
43175: PUSH
43176: LD_INT 2
43178: DOUBLE
43179: EQUAL
43180: IFTRUE 43184
43182: GO 43214
43184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: LD_INT 4
43201: PUSH
43202: LD_INT 5
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: ST_TO_ADDR
43212: GO 44181
43214: LD_INT 3
43216: DOUBLE
43217: EQUAL
43218: IFTRUE 43222
43220: GO 43252
43222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43223: LD_ADDR_VAR 0 3
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: LD_INT 4
43239: PUSH
43240: LD_INT 5
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: ST_TO_ADDR
43250: GO 44181
43252: LD_INT 11
43254: DOUBLE
43255: EQUAL
43256: IFTRUE 43260
43258: GO 43290
43260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43261: LD_ADDR_VAR 0 3
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: LD_INT 4
43277: PUSH
43278: LD_INT 5
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
43288: GO 44181
43290: LD_INT 4
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43324
43298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43299: LD_ADDR_VAR 0 3
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
43322: GO 44181
43324: LD_INT 5
43326: DOUBLE
43327: EQUAL
43328: IFTRUE 43332
43330: GO 43358
43332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43333: LD_ADDR_VAR 0 3
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: LD_INT 4
43346: PUSH
43347: LD_INT 5
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
43356: GO 44181
43358: LD_INT 9
43360: DOUBLE
43361: EQUAL
43362: IFTRUE 43366
43364: GO 43392
43366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43367: LD_ADDR_VAR 0 3
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 4
43380: PUSH
43381: LD_INT 5
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: ST_TO_ADDR
43390: GO 44181
43392: LD_INT 7
43394: DOUBLE
43395: EQUAL
43396: IFTRUE 43400
43398: GO 43426
43400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43401: LD_ADDR_VAR 0 3
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: LD_INT 3
43411: PUSH
43412: LD_INT 4
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: ST_TO_ADDR
43424: GO 44181
43426: LD_INT 12
43428: DOUBLE
43429: EQUAL
43430: IFTRUE 43434
43432: GO 43460
43434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43435: LD_ADDR_VAR 0 3
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 3
43445: PUSH
43446: LD_INT 4
43448: PUSH
43449: LD_INT 5
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: ST_TO_ADDR
43458: GO 44181
43460: LD_INT 13
43462: DOUBLE
43463: EQUAL
43464: IFTRUE 43468
43466: GO 43494
43468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43469: LD_ADDR_VAR 0 3
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 4
43482: PUSH
43483: LD_INT 5
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: ST_TO_ADDR
43492: GO 44181
43494: LD_INT 14
43496: DOUBLE
43497: EQUAL
43498: IFTRUE 43502
43500: GO 43520
43502: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43503: LD_ADDR_VAR 0 3
43507: PUSH
43508: LD_INT 4
43510: PUSH
43511: LD_INT 5
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: ST_TO_ADDR
43518: GO 44181
43520: LD_INT 6
43522: DOUBLE
43523: EQUAL
43524: IFTRUE 43528
43526: GO 43546
43528: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43529: LD_ADDR_VAR 0 3
43533: PUSH
43534: LD_INT 4
43536: PUSH
43537: LD_INT 5
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: ST_TO_ADDR
43544: GO 44181
43546: LD_INT 10
43548: DOUBLE
43549: EQUAL
43550: IFTRUE 43554
43552: GO 43572
43554: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_INT 4
43562: PUSH
43563: LD_INT 5
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: ST_TO_ADDR
43570: GO 44181
43572: LD_INT 22
43574: DOUBLE
43575: EQUAL
43576: IFTRUE 43580
43578: GO 43606
43580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43581: LD_ADDR_VAR 0 3
43585: PUSH
43586: LD_INT 11
43588: PUSH
43589: LD_INT 12
43591: PUSH
43592: LD_INT 13
43594: PUSH
43595: LD_INT 14
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: ST_TO_ADDR
43604: GO 44181
43606: LD_INT 23
43608: DOUBLE
43609: EQUAL
43610: IFTRUE 43614
43612: GO 43640
43614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43615: LD_ADDR_VAR 0 3
43619: PUSH
43620: LD_INT 11
43622: PUSH
43623: LD_INT 12
43625: PUSH
43626: LD_INT 13
43628: PUSH
43629: LD_INT 14
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
43638: GO 44181
43640: LD_INT 24
43642: DOUBLE
43643: EQUAL
43644: IFTRUE 43648
43646: GO 43674
43648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43649: LD_ADDR_VAR 0 3
43653: PUSH
43654: LD_INT 11
43656: PUSH
43657: LD_INT 12
43659: PUSH
43660: LD_INT 13
43662: PUSH
43663: LD_INT 14
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: ST_TO_ADDR
43672: GO 44181
43674: LD_INT 30
43676: DOUBLE
43677: EQUAL
43678: IFTRUE 43682
43680: GO 43708
43682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_INT 11
43690: PUSH
43691: LD_INT 12
43693: PUSH
43694: LD_INT 13
43696: PUSH
43697: LD_INT 14
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
43706: GO 44181
43708: LD_INT 25
43710: DOUBLE
43711: EQUAL
43712: IFTRUE 43716
43714: GO 43734
43716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_INT 13
43724: PUSH
43725: LD_INT 14
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: ST_TO_ADDR
43732: GO 44181
43734: LD_INT 27
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43760
43742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_INT 13
43750: PUSH
43751: LD_INT 14
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: ST_TO_ADDR
43758: GO 44181
43760: LD_INT 28
43762: DOUBLE
43763: EQUAL
43764: IFTRUE 43768
43766: GO 43786
43768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43769: LD_ADDR_VAR 0 3
43773: PUSH
43774: LD_INT 13
43776: PUSH
43777: LD_INT 14
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: ST_TO_ADDR
43784: GO 44181
43786: LD_INT 29
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43794
43792: GO 43812
43794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43795: LD_ADDR_VAR 0 3
43799: PUSH
43800: LD_INT 13
43802: PUSH
43803: LD_INT 14
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: ST_TO_ADDR
43810: GO 44181
43812: LD_INT 31
43814: DOUBLE
43815: EQUAL
43816: IFTRUE 43820
43818: GO 43838
43820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43821: LD_ADDR_VAR 0 3
43825: PUSH
43826: LD_INT 13
43828: PUSH
43829: LD_INT 14
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: ST_TO_ADDR
43836: GO 44181
43838: LD_INT 26
43840: DOUBLE
43841: EQUAL
43842: IFTRUE 43846
43844: GO 43864
43846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43847: LD_ADDR_VAR 0 3
43851: PUSH
43852: LD_INT 13
43854: PUSH
43855: LD_INT 14
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: ST_TO_ADDR
43862: GO 44181
43864: LD_INT 42
43866: DOUBLE
43867: EQUAL
43868: IFTRUE 43872
43870: GO 43898
43872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43873: LD_ADDR_VAR 0 3
43877: PUSH
43878: LD_INT 21
43880: PUSH
43881: LD_INT 22
43883: PUSH
43884: LD_INT 23
43886: PUSH
43887: LD_INT 24
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
43896: GO 44181
43898: LD_INT 43
43900: DOUBLE
43901: EQUAL
43902: IFTRUE 43906
43904: GO 43932
43906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43907: LD_ADDR_VAR 0 3
43911: PUSH
43912: LD_INT 21
43914: PUSH
43915: LD_INT 22
43917: PUSH
43918: LD_INT 23
43920: PUSH
43921: LD_INT 24
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: ST_TO_ADDR
43930: GO 44181
43932: LD_INT 44
43934: DOUBLE
43935: EQUAL
43936: IFTRUE 43940
43938: GO 43966
43940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43941: LD_ADDR_VAR 0 3
43945: PUSH
43946: LD_INT 21
43948: PUSH
43949: LD_INT 22
43951: PUSH
43952: LD_INT 23
43954: PUSH
43955: LD_INT 24
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
43964: GO 44181
43966: LD_INT 45
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 43974
43972: GO 44000
43974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_INT 21
43982: PUSH
43983: LD_INT 22
43985: PUSH
43986: LD_INT 23
43988: PUSH
43989: LD_INT 24
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: ST_TO_ADDR
43998: GO 44181
44000: LD_INT 49
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44008
44006: GO 44034
44008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: LD_INT 21
44016: PUSH
44017: LD_INT 22
44019: PUSH
44020: LD_INT 23
44022: PUSH
44023: LD_INT 24
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: ST_TO_ADDR
44032: GO 44181
44034: LD_INT 51
44036: DOUBLE
44037: EQUAL
44038: IFTRUE 44042
44040: GO 44068
44042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44043: LD_ADDR_VAR 0 3
44047: PUSH
44048: LD_INT 21
44050: PUSH
44051: LD_INT 22
44053: PUSH
44054: LD_INT 23
44056: PUSH
44057: LD_INT 24
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: ST_TO_ADDR
44066: GO 44181
44068: LD_INT 52
44070: DOUBLE
44071: EQUAL
44072: IFTRUE 44076
44074: GO 44102
44076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44077: LD_ADDR_VAR 0 3
44081: PUSH
44082: LD_INT 21
44084: PUSH
44085: LD_INT 22
44087: PUSH
44088: LD_INT 23
44090: PUSH
44091: LD_INT 24
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
44100: GO 44181
44102: LD_INT 53
44104: DOUBLE
44105: EQUAL
44106: IFTRUE 44110
44108: GO 44128
44110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44111: LD_ADDR_VAR 0 3
44115: PUSH
44116: LD_INT 23
44118: PUSH
44119: LD_INT 24
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: ST_TO_ADDR
44126: GO 44181
44128: LD_INT 46
44130: DOUBLE
44131: EQUAL
44132: IFTRUE 44136
44134: GO 44154
44136: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44137: LD_ADDR_VAR 0 3
44141: PUSH
44142: LD_INT 23
44144: PUSH
44145: LD_INT 24
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: ST_TO_ADDR
44152: GO 44181
44154: LD_INT 47
44156: DOUBLE
44157: EQUAL
44158: IFTRUE 44162
44160: GO 44180
44162: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_INT 23
44170: PUSH
44171: LD_INT 24
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: ST_TO_ADDR
44178: GO 44181
44180: POP
// result := ( chassis in result ) ;
44181: LD_ADDR_VAR 0 3
44185: PUSH
44186: LD_VAR 0 1
44190: PUSH
44191: LD_VAR 0 3
44195: IN
44196: ST_TO_ADDR
// end ;
44197: LD_VAR 0 3
44201: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44202: LD_INT 0
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
// result := array ;
44211: LD_ADDR_VAR 0 5
44215: PUSH
44216: LD_VAR 0 1
44220: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44221: LD_VAR 0 1
44225: NOT
44226: PUSH
44227: LD_VAR 0 2
44231: NOT
44232: OR
44233: PUSH
44234: LD_VAR 0 3
44238: NOT
44239: OR
44240: PUSH
44241: LD_VAR 0 2
44245: PUSH
44246: LD_VAR 0 1
44250: GREATER
44251: OR
44252: PUSH
44253: LD_VAR 0 3
44257: PUSH
44258: LD_VAR 0 1
44262: GREATER
44263: OR
44264: IFFALSE 44268
// exit ;
44266: GO 44564
// if direction then
44268: LD_VAR 0 4
44272: IFFALSE 44336
// begin d := 1 ;
44274: LD_ADDR_VAR 0 9
44278: PUSH
44279: LD_INT 1
44281: ST_TO_ADDR
// if i_from > i_to then
44282: LD_VAR 0 2
44286: PUSH
44287: LD_VAR 0 3
44291: GREATER
44292: IFFALSE 44318
// length := ( array - i_from ) + i_to else
44294: LD_ADDR_VAR 0 11
44298: PUSH
44299: LD_VAR 0 1
44303: PUSH
44304: LD_VAR 0 2
44308: MINUS
44309: PUSH
44310: LD_VAR 0 3
44314: PLUS
44315: ST_TO_ADDR
44316: GO 44334
// length := i_to - i_from ;
44318: LD_ADDR_VAR 0 11
44322: PUSH
44323: LD_VAR 0 3
44327: PUSH
44328: LD_VAR 0 2
44332: MINUS
44333: ST_TO_ADDR
// end else
44334: GO 44397
// begin d := - 1 ;
44336: LD_ADDR_VAR 0 9
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: ST_TO_ADDR
// if i_from > i_to then
44345: LD_VAR 0 2
44349: PUSH
44350: LD_VAR 0 3
44354: GREATER
44355: IFFALSE 44375
// length := i_from - i_to else
44357: LD_ADDR_VAR 0 11
44361: PUSH
44362: LD_VAR 0 2
44366: PUSH
44367: LD_VAR 0 3
44371: MINUS
44372: ST_TO_ADDR
44373: GO 44397
// length := ( array - i_to ) + i_from ;
44375: LD_ADDR_VAR 0 11
44379: PUSH
44380: LD_VAR 0 1
44384: PUSH
44385: LD_VAR 0 3
44389: MINUS
44390: PUSH
44391: LD_VAR 0 2
44395: PLUS
44396: ST_TO_ADDR
// end ; if not length then
44397: LD_VAR 0 11
44401: NOT
44402: IFFALSE 44406
// exit ;
44404: GO 44564
// tmp := array ;
44406: LD_ADDR_VAR 0 10
44410: PUSH
44411: LD_VAR 0 1
44415: ST_TO_ADDR
// for i = 1 to length do
44416: LD_ADDR_VAR 0 6
44420: PUSH
44421: DOUBLE
44422: LD_INT 1
44424: DEC
44425: ST_TO_ADDR
44426: LD_VAR 0 11
44430: PUSH
44431: FOR_TO
44432: IFFALSE 44552
// begin for j = 1 to array do
44434: LD_ADDR_VAR 0 7
44438: PUSH
44439: DOUBLE
44440: LD_INT 1
44442: DEC
44443: ST_TO_ADDR
44444: LD_VAR 0 1
44448: PUSH
44449: FOR_TO
44450: IFFALSE 44538
// begin k := j + d ;
44452: LD_ADDR_VAR 0 8
44456: PUSH
44457: LD_VAR 0 7
44461: PUSH
44462: LD_VAR 0 9
44466: PLUS
44467: ST_TO_ADDR
// if k > array then
44468: LD_VAR 0 8
44472: PUSH
44473: LD_VAR 0 1
44477: GREATER
44478: IFFALSE 44488
// k := 1 ;
44480: LD_ADDR_VAR 0 8
44484: PUSH
44485: LD_INT 1
44487: ST_TO_ADDR
// if not k then
44488: LD_VAR 0 8
44492: NOT
44493: IFFALSE 44505
// k := array ;
44495: LD_ADDR_VAR 0 8
44499: PUSH
44500: LD_VAR 0 1
44504: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44505: LD_ADDR_VAR 0 10
44509: PUSH
44510: LD_VAR 0 10
44514: PPUSH
44515: LD_VAR 0 8
44519: PPUSH
44520: LD_VAR 0 1
44524: PUSH
44525: LD_VAR 0 7
44529: ARRAY
44530: PPUSH
44531: CALL_OW 1
44535: ST_TO_ADDR
// end ;
44536: GO 44449
44538: POP
44539: POP
// array := tmp ;
44540: LD_ADDR_VAR 0 1
44544: PUSH
44545: LD_VAR 0 10
44549: ST_TO_ADDR
// end ;
44550: GO 44431
44552: POP
44553: POP
// result := array ;
44554: LD_ADDR_VAR 0 5
44558: PUSH
44559: LD_VAR 0 1
44563: ST_TO_ADDR
// end ;
44564: LD_VAR 0 5
44568: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44569: LD_INT 0
44571: PPUSH
44572: PPUSH
// result := 0 ;
44573: LD_ADDR_VAR 0 3
44577: PUSH
44578: LD_INT 0
44580: ST_TO_ADDR
// if not array or not value in array then
44581: LD_VAR 0 1
44585: NOT
44586: PUSH
44587: LD_VAR 0 2
44591: PUSH
44592: LD_VAR 0 1
44596: IN
44597: NOT
44598: OR
44599: IFFALSE 44603
// exit ;
44601: GO 44657
// for i = 1 to array do
44603: LD_ADDR_VAR 0 4
44607: PUSH
44608: DOUBLE
44609: LD_INT 1
44611: DEC
44612: ST_TO_ADDR
44613: LD_VAR 0 1
44617: PUSH
44618: FOR_TO
44619: IFFALSE 44655
// if value = array [ i ] then
44621: LD_VAR 0 2
44625: PUSH
44626: LD_VAR 0 1
44630: PUSH
44631: LD_VAR 0 4
44635: ARRAY
44636: EQUAL
44637: IFFALSE 44653
// begin result := i ;
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: LD_VAR 0 4
44648: ST_TO_ADDR
// exit ;
44649: POP
44650: POP
44651: GO 44657
// end ;
44653: GO 44618
44655: POP
44656: POP
// end ;
44657: LD_VAR 0 3
44661: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44662: LD_INT 0
44664: PPUSH
// vc_chassis := chassis ;
44665: LD_ADDR_OWVAR 37
44669: PUSH
44670: LD_VAR 0 1
44674: ST_TO_ADDR
// vc_engine := engine ;
44675: LD_ADDR_OWVAR 39
44679: PUSH
44680: LD_VAR 0 2
44684: ST_TO_ADDR
// vc_control := control ;
44685: LD_ADDR_OWVAR 38
44689: PUSH
44690: LD_VAR 0 3
44694: ST_TO_ADDR
// vc_weapon := weapon ;
44695: LD_ADDR_OWVAR 40
44699: PUSH
44700: LD_VAR 0 4
44704: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44705: LD_ADDR_OWVAR 41
44709: PUSH
44710: LD_VAR 0 5
44714: ST_TO_ADDR
// end ;
44715: LD_VAR 0 6
44719: RET
// export function WantPlant ( unit ) ; var task ; begin
44720: LD_INT 0
44722: PPUSH
44723: PPUSH
// result := false ;
44724: LD_ADDR_VAR 0 2
44728: PUSH
44729: LD_INT 0
44731: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44732: LD_ADDR_VAR 0 3
44736: PUSH
44737: LD_VAR 0 1
44741: PPUSH
44742: CALL_OW 437
44746: ST_TO_ADDR
// if task then
44747: LD_VAR 0 3
44751: IFFALSE 44779
// if task [ 1 ] [ 1 ] = p then
44753: LD_VAR 0 3
44757: PUSH
44758: LD_INT 1
44760: ARRAY
44761: PUSH
44762: LD_INT 1
44764: ARRAY
44765: PUSH
44766: LD_STRING p
44768: EQUAL
44769: IFFALSE 44779
// result := true ;
44771: LD_ADDR_VAR 0 2
44775: PUSH
44776: LD_INT 1
44778: ST_TO_ADDR
// end ;
44779: LD_VAR 0 2
44783: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44784: LD_INT 0
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
// if pos < 1 then
44790: LD_VAR 0 2
44794: PUSH
44795: LD_INT 1
44797: LESS
44798: IFFALSE 44802
// exit ;
44800: GO 45105
// if pos = 1 then
44802: LD_VAR 0 2
44806: PUSH
44807: LD_INT 1
44809: EQUAL
44810: IFFALSE 44843
// result := Replace ( arr , pos [ 1 ] , value ) else
44812: LD_ADDR_VAR 0 4
44816: PUSH
44817: LD_VAR 0 1
44821: PPUSH
44822: LD_VAR 0 2
44826: PUSH
44827: LD_INT 1
44829: ARRAY
44830: PPUSH
44831: LD_VAR 0 3
44835: PPUSH
44836: CALL_OW 1
44840: ST_TO_ADDR
44841: GO 45105
// begin tmp := arr ;
44843: LD_ADDR_VAR 0 6
44847: PUSH
44848: LD_VAR 0 1
44852: ST_TO_ADDR
// s_arr := [ tmp ] ;
44853: LD_ADDR_VAR 0 7
44857: PUSH
44858: LD_VAR 0 6
44862: PUSH
44863: EMPTY
44864: LIST
44865: ST_TO_ADDR
// for i = 1 to pos - 1 do
44866: LD_ADDR_VAR 0 5
44870: PUSH
44871: DOUBLE
44872: LD_INT 1
44874: DEC
44875: ST_TO_ADDR
44876: LD_VAR 0 2
44880: PUSH
44881: LD_INT 1
44883: MINUS
44884: PUSH
44885: FOR_TO
44886: IFFALSE 44931
// begin tmp := tmp [ pos [ i ] ] ;
44888: LD_ADDR_VAR 0 6
44892: PUSH
44893: LD_VAR 0 6
44897: PUSH
44898: LD_VAR 0 2
44902: PUSH
44903: LD_VAR 0 5
44907: ARRAY
44908: ARRAY
44909: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44910: LD_ADDR_VAR 0 7
44914: PUSH
44915: LD_VAR 0 7
44919: PUSH
44920: LD_VAR 0 6
44924: PUSH
44925: EMPTY
44926: LIST
44927: ADD
44928: ST_TO_ADDR
// end ;
44929: GO 44885
44931: POP
44932: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44933: LD_ADDR_VAR 0 6
44937: PUSH
44938: LD_VAR 0 6
44942: PPUSH
44943: LD_VAR 0 2
44947: PUSH
44948: LD_VAR 0 2
44952: ARRAY
44953: PPUSH
44954: LD_VAR 0 3
44958: PPUSH
44959: CALL_OW 1
44963: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44964: LD_ADDR_VAR 0 7
44968: PUSH
44969: LD_VAR 0 7
44973: PPUSH
44974: LD_VAR 0 7
44978: PPUSH
44979: LD_VAR 0 6
44983: PPUSH
44984: CALL_OW 1
44988: ST_TO_ADDR
// for i = s_arr downto 2 do
44989: LD_ADDR_VAR 0 5
44993: PUSH
44994: DOUBLE
44995: LD_VAR 0 7
44999: INC
45000: ST_TO_ADDR
45001: LD_INT 2
45003: PUSH
45004: FOR_DOWNTO
45005: IFFALSE 45089
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45007: LD_ADDR_VAR 0 6
45011: PUSH
45012: LD_VAR 0 7
45016: PUSH
45017: LD_VAR 0 5
45021: PUSH
45022: LD_INT 1
45024: MINUS
45025: ARRAY
45026: PPUSH
45027: LD_VAR 0 2
45031: PUSH
45032: LD_VAR 0 5
45036: PUSH
45037: LD_INT 1
45039: MINUS
45040: ARRAY
45041: PPUSH
45042: LD_VAR 0 7
45046: PUSH
45047: LD_VAR 0 5
45051: ARRAY
45052: PPUSH
45053: CALL_OW 1
45057: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45058: LD_ADDR_VAR 0 7
45062: PUSH
45063: LD_VAR 0 7
45067: PPUSH
45068: LD_VAR 0 5
45072: PUSH
45073: LD_INT 1
45075: MINUS
45076: PPUSH
45077: LD_VAR 0 6
45081: PPUSH
45082: CALL_OW 1
45086: ST_TO_ADDR
// end ;
45087: GO 45004
45089: POP
45090: POP
// result := s_arr [ 1 ] ;
45091: LD_ADDR_VAR 0 4
45095: PUSH
45096: LD_VAR 0 7
45100: PUSH
45101: LD_INT 1
45103: ARRAY
45104: ST_TO_ADDR
// end ; end ;
45105: LD_VAR 0 4
45109: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45110: LD_INT 0
45112: PPUSH
45113: PPUSH
// if not list then
45114: LD_VAR 0 1
45118: NOT
45119: IFFALSE 45123
// exit ;
45121: GO 45214
// i := list [ pos1 ] ;
45123: LD_ADDR_VAR 0 5
45127: PUSH
45128: LD_VAR 0 1
45132: PUSH
45133: LD_VAR 0 2
45137: ARRAY
45138: ST_TO_ADDR
// if not i then
45139: LD_VAR 0 5
45143: NOT
45144: IFFALSE 45148
// exit ;
45146: GO 45214
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45148: LD_ADDR_VAR 0 1
45152: PUSH
45153: LD_VAR 0 1
45157: PPUSH
45158: LD_VAR 0 2
45162: PPUSH
45163: LD_VAR 0 1
45167: PUSH
45168: LD_VAR 0 3
45172: ARRAY
45173: PPUSH
45174: CALL_OW 1
45178: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45179: LD_ADDR_VAR 0 1
45183: PUSH
45184: LD_VAR 0 1
45188: PPUSH
45189: LD_VAR 0 3
45193: PPUSH
45194: LD_VAR 0 5
45198: PPUSH
45199: CALL_OW 1
45203: ST_TO_ADDR
// result := list ;
45204: LD_ADDR_VAR 0 4
45208: PUSH
45209: LD_VAR 0 1
45213: ST_TO_ADDR
// end ;
45214: LD_VAR 0 4
45218: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45219: LD_INT 0
45221: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45222: LD_ADDR_VAR 0 5
45226: PUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 250
45236: PPUSH
45237: LD_VAR 0 1
45241: PPUSH
45242: CALL_OW 251
45246: PPUSH
45247: LD_VAR 0 2
45251: PPUSH
45252: LD_VAR 0 3
45256: PPUSH
45257: LD_VAR 0 4
45261: PPUSH
45262: CALL 45272 0 5
45266: ST_TO_ADDR
// end ;
45267: LD_VAR 0 5
45271: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45272: LD_INT 0
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
// if not list then
45278: LD_VAR 0 3
45282: NOT
45283: IFFALSE 45287
// exit ;
45285: GO 45675
// result := [ ] ;
45287: LD_ADDR_VAR 0 6
45291: PUSH
45292: EMPTY
45293: ST_TO_ADDR
// for i in list do
45294: LD_ADDR_VAR 0 7
45298: PUSH
45299: LD_VAR 0 3
45303: PUSH
45304: FOR_IN
45305: IFFALSE 45507
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45307: LD_ADDR_VAR 0 9
45311: PUSH
45312: LD_VAR 0 7
45316: PPUSH
45317: LD_VAR 0 1
45321: PPUSH
45322: LD_VAR 0 2
45326: PPUSH
45327: CALL_OW 297
45331: ST_TO_ADDR
// if not result then
45332: LD_VAR 0 6
45336: NOT
45337: IFFALSE 45363
// result := [ [ i , tmp ] ] else
45339: LD_ADDR_VAR 0 6
45343: PUSH
45344: LD_VAR 0 7
45348: PUSH
45349: LD_VAR 0 9
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: EMPTY
45359: LIST
45360: ST_TO_ADDR
45361: GO 45505
// begin if result [ result ] [ 2 ] < tmp then
45363: LD_VAR 0 6
45367: PUSH
45368: LD_VAR 0 6
45372: ARRAY
45373: PUSH
45374: LD_INT 2
45376: ARRAY
45377: PUSH
45378: LD_VAR 0 9
45382: LESS
45383: IFFALSE 45425
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45385: LD_ADDR_VAR 0 6
45389: PUSH
45390: LD_VAR 0 6
45394: PPUSH
45395: LD_VAR 0 6
45399: PUSH
45400: LD_INT 1
45402: PLUS
45403: PPUSH
45404: LD_VAR 0 7
45408: PUSH
45409: LD_VAR 0 9
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PPUSH
45418: CALL_OW 2
45422: ST_TO_ADDR
45423: GO 45505
// for j = 1 to result do
45425: LD_ADDR_VAR 0 8
45429: PUSH
45430: DOUBLE
45431: LD_INT 1
45433: DEC
45434: ST_TO_ADDR
45435: LD_VAR 0 6
45439: PUSH
45440: FOR_TO
45441: IFFALSE 45503
// begin if tmp < result [ j ] [ 2 ] then
45443: LD_VAR 0 9
45447: PUSH
45448: LD_VAR 0 6
45452: PUSH
45453: LD_VAR 0 8
45457: ARRAY
45458: PUSH
45459: LD_INT 2
45461: ARRAY
45462: LESS
45463: IFFALSE 45501
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45465: LD_ADDR_VAR 0 6
45469: PUSH
45470: LD_VAR 0 6
45474: PPUSH
45475: LD_VAR 0 8
45479: PPUSH
45480: LD_VAR 0 7
45484: PUSH
45485: LD_VAR 0 9
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PPUSH
45494: CALL_OW 2
45498: ST_TO_ADDR
// break ;
45499: GO 45503
// end ; end ;
45501: GO 45440
45503: POP
45504: POP
// end ; end ;
45505: GO 45304
45507: POP
45508: POP
// if result and not asc then
45509: LD_VAR 0 6
45513: PUSH
45514: LD_VAR 0 4
45518: NOT
45519: AND
45520: IFFALSE 45595
// begin tmp := result ;
45522: LD_ADDR_VAR 0 9
45526: PUSH
45527: LD_VAR 0 6
45531: ST_TO_ADDR
// for i = tmp downto 1 do
45532: LD_ADDR_VAR 0 7
45536: PUSH
45537: DOUBLE
45538: LD_VAR 0 9
45542: INC
45543: ST_TO_ADDR
45544: LD_INT 1
45546: PUSH
45547: FOR_DOWNTO
45548: IFFALSE 45593
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45550: LD_ADDR_VAR 0 6
45554: PUSH
45555: LD_VAR 0 6
45559: PPUSH
45560: LD_VAR 0 9
45564: PUSH
45565: LD_VAR 0 7
45569: MINUS
45570: PUSH
45571: LD_INT 1
45573: PLUS
45574: PPUSH
45575: LD_VAR 0 9
45579: PUSH
45580: LD_VAR 0 7
45584: ARRAY
45585: PPUSH
45586: CALL_OW 1
45590: ST_TO_ADDR
45591: GO 45547
45593: POP
45594: POP
// end ; tmp := [ ] ;
45595: LD_ADDR_VAR 0 9
45599: PUSH
45600: EMPTY
45601: ST_TO_ADDR
// if mode then
45602: LD_VAR 0 5
45606: IFFALSE 45675
// begin for i = 1 to result do
45608: LD_ADDR_VAR 0 7
45612: PUSH
45613: DOUBLE
45614: LD_INT 1
45616: DEC
45617: ST_TO_ADDR
45618: LD_VAR 0 6
45622: PUSH
45623: FOR_TO
45624: IFFALSE 45663
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45626: LD_ADDR_VAR 0 9
45630: PUSH
45631: LD_VAR 0 9
45635: PPUSH
45636: LD_VAR 0 7
45640: PPUSH
45641: LD_VAR 0 6
45645: PUSH
45646: LD_VAR 0 7
45650: ARRAY
45651: PUSH
45652: LD_INT 1
45654: ARRAY
45655: PPUSH
45656: CALL_OW 1
45660: ST_TO_ADDR
45661: GO 45623
45663: POP
45664: POP
// result := tmp ;
45665: LD_ADDR_VAR 0 6
45669: PUSH
45670: LD_VAR 0 9
45674: ST_TO_ADDR
// end ; end ;
45675: LD_VAR 0 6
45679: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45680: LD_INT 0
45682: PPUSH
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45688: LD_ADDR_VAR 0 5
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: ST_TO_ADDR
// if not x or not y then
45710: LD_VAR 0 2
45714: NOT
45715: PUSH
45716: LD_VAR 0 3
45720: NOT
45721: OR
45722: IFFALSE 45726
// exit ;
45724: GO 47372
// if not range then
45726: LD_VAR 0 4
45730: NOT
45731: IFFALSE 45741
// range := 10 ;
45733: LD_ADDR_VAR 0 4
45737: PUSH
45738: LD_INT 10
45740: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45741: LD_ADDR_VAR 0 8
45745: PUSH
45746: LD_INT 81
45748: PUSH
45749: LD_VAR 0 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 92
45760: PUSH
45761: LD_VAR 0 2
45765: PUSH
45766: LD_VAR 0 3
45770: PUSH
45771: LD_VAR 0 4
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 21
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: LIST
45803: PPUSH
45804: CALL_OW 69
45808: ST_TO_ADDR
// if not tmp then
45809: LD_VAR 0 8
45813: NOT
45814: IFFALSE 45818
// exit ;
45816: GO 47372
// for i in tmp do
45818: LD_ADDR_VAR 0 6
45822: PUSH
45823: LD_VAR 0 8
45827: PUSH
45828: FOR_IN
45829: IFFALSE 47347
// begin points := [ 0 , 0 , 0 ] ;
45831: LD_ADDR_VAR 0 9
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: ST_TO_ADDR
// bpoints := 1 ;
45850: LD_ADDR_VAR 0 10
45854: PUSH
45855: LD_INT 1
45857: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45858: LD_VAR 0 6
45862: PPUSH
45863: CALL_OW 247
45867: PUSH
45868: LD_INT 1
45870: DOUBLE
45871: EQUAL
45872: IFTRUE 45876
45874: GO 46454
45876: POP
// begin if GetClass ( i ) = 1 then
45877: LD_VAR 0 6
45881: PPUSH
45882: CALL_OW 257
45886: PUSH
45887: LD_INT 1
45889: EQUAL
45890: IFFALSE 45911
// points := [ 10 , 5 , 3 ] ;
45892: LD_ADDR_VAR 0 9
45896: PUSH
45897: LD_INT 10
45899: PUSH
45900: LD_INT 5
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45911: LD_VAR 0 6
45915: PPUSH
45916: CALL_OW 257
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: LD_INT 4
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: IN
45935: IFFALSE 45956
// points := [ 3 , 2 , 1 ] ;
45937: LD_ADDR_VAR 0 9
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45956: LD_VAR 0 6
45960: PPUSH
45961: CALL_OW 257
45965: PUSH
45966: LD_INT 5
45968: EQUAL
45969: IFFALSE 45990
// points := [ 130 , 5 , 2 ] ;
45971: LD_ADDR_VAR 0 9
45975: PUSH
45976: LD_INT 130
45978: PUSH
45979: LD_INT 5
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45990: LD_VAR 0 6
45994: PPUSH
45995: CALL_OW 257
45999: PUSH
46000: LD_INT 8
46002: EQUAL
46003: IFFALSE 46024
// points := [ 35 , 35 , 30 ] ;
46005: LD_ADDR_VAR 0 9
46009: PUSH
46010: LD_INT 35
46012: PUSH
46013: LD_INT 35
46015: PUSH
46016: LD_INT 30
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46024: LD_VAR 0 6
46028: PPUSH
46029: CALL_OW 257
46033: PUSH
46034: LD_INT 9
46036: EQUAL
46037: IFFALSE 46058
// points := [ 20 , 55 , 40 ] ;
46039: LD_ADDR_VAR 0 9
46043: PUSH
46044: LD_INT 20
46046: PUSH
46047: LD_INT 55
46049: PUSH
46050: LD_INT 40
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46058: LD_VAR 0 6
46062: PPUSH
46063: CALL_OW 257
46067: PUSH
46068: LD_INT 12
46070: PUSH
46071: LD_INT 16
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: IN
46078: IFFALSE 46099
// points := [ 5 , 3 , 2 ] ;
46080: LD_ADDR_VAR 0 9
46084: PUSH
46085: LD_INT 5
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46099: LD_VAR 0 6
46103: PPUSH
46104: CALL_OW 257
46108: PUSH
46109: LD_INT 17
46111: EQUAL
46112: IFFALSE 46133
// points := [ 100 , 50 , 75 ] ;
46114: LD_ADDR_VAR 0 9
46118: PUSH
46119: LD_INT 100
46121: PUSH
46122: LD_INT 50
46124: PUSH
46125: LD_INT 75
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46133: LD_VAR 0 6
46137: PPUSH
46138: CALL_OW 257
46142: PUSH
46143: LD_INT 15
46145: EQUAL
46146: IFFALSE 46167
// points := [ 10 , 5 , 3 ] ;
46148: LD_ADDR_VAR 0 9
46152: PUSH
46153: LD_INT 10
46155: PUSH
46156: LD_INT 5
46158: PUSH
46159: LD_INT 3
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46167: LD_VAR 0 6
46171: PPUSH
46172: CALL_OW 257
46176: PUSH
46177: LD_INT 14
46179: EQUAL
46180: IFFALSE 46201
// points := [ 10 , 0 , 0 ] ;
46182: LD_ADDR_VAR 0 9
46186: PUSH
46187: LD_INT 10
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46201: LD_VAR 0 6
46205: PPUSH
46206: CALL_OW 257
46210: PUSH
46211: LD_INT 11
46213: EQUAL
46214: IFFALSE 46235
// points := [ 30 , 10 , 5 ] ;
46216: LD_ADDR_VAR 0 9
46220: PUSH
46221: LD_INT 30
46223: PUSH
46224: LD_INT 10
46226: PUSH
46227: LD_INT 5
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46235: LD_VAR 0 1
46239: PPUSH
46240: LD_INT 5
46242: PPUSH
46243: CALL_OW 321
46247: PUSH
46248: LD_INT 2
46250: EQUAL
46251: IFFALSE 46268
// bpoints := bpoints * 1.8 ;
46253: LD_ADDR_VAR 0 10
46257: PUSH
46258: LD_VAR 0 10
46262: PUSH
46263: LD_REAL  1.80000000000000E+0000
46266: MUL
46267: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46268: LD_VAR 0 6
46272: PPUSH
46273: CALL_OW 257
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 4
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: IN
46296: PUSH
46297: LD_VAR 0 1
46301: PPUSH
46302: LD_INT 51
46304: PPUSH
46305: CALL_OW 321
46309: PUSH
46310: LD_INT 2
46312: EQUAL
46313: AND
46314: IFFALSE 46331
// bpoints := bpoints * 1.2 ;
46316: LD_ADDR_VAR 0 10
46320: PUSH
46321: LD_VAR 0 10
46325: PUSH
46326: LD_REAL  1.20000000000000E+0000
46329: MUL
46330: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46331: LD_VAR 0 6
46335: PPUSH
46336: CALL_OW 257
46340: PUSH
46341: LD_INT 5
46343: PUSH
46344: LD_INT 7
46346: PUSH
46347: LD_INT 9
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: IN
46355: PUSH
46356: LD_VAR 0 1
46360: PPUSH
46361: LD_INT 52
46363: PPUSH
46364: CALL_OW 321
46368: PUSH
46369: LD_INT 2
46371: EQUAL
46372: AND
46373: IFFALSE 46390
// bpoints := bpoints * 1.5 ;
46375: LD_ADDR_VAR 0 10
46379: PUSH
46380: LD_VAR 0 10
46384: PUSH
46385: LD_REAL  1.50000000000000E+0000
46388: MUL
46389: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46390: LD_VAR 0 1
46394: PPUSH
46395: LD_INT 66
46397: PPUSH
46398: CALL_OW 321
46402: PUSH
46403: LD_INT 2
46405: EQUAL
46406: IFFALSE 46423
// bpoints := bpoints * 1.1 ;
46408: LD_ADDR_VAR 0 10
46412: PUSH
46413: LD_VAR 0 10
46417: PUSH
46418: LD_REAL  1.10000000000000E+0000
46421: MUL
46422: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46423: LD_ADDR_VAR 0 10
46427: PUSH
46428: LD_VAR 0 10
46432: PUSH
46433: LD_VAR 0 6
46437: PPUSH
46438: LD_INT 1
46440: PPUSH
46441: CALL_OW 259
46445: PUSH
46446: LD_REAL  1.15000000000000E+0000
46449: MUL
46450: MUL
46451: ST_TO_ADDR
// end ; unit_vehicle :
46452: GO 47276
46454: LD_INT 2
46456: DOUBLE
46457: EQUAL
46458: IFTRUE 46462
46460: GO 47264
46462: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46463: LD_VAR 0 6
46467: PPUSH
46468: CALL_OW 264
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 42
46478: PUSH
46479: LD_INT 24
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: IN
46487: IFFALSE 46508
// points := [ 25 , 5 , 3 ] ;
46489: LD_ADDR_VAR 0 9
46493: PUSH
46494: LD_INT 25
46496: PUSH
46497: LD_INT 5
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46508: LD_VAR 0 6
46512: PPUSH
46513: CALL_OW 264
46517: PUSH
46518: LD_INT 4
46520: PUSH
46521: LD_INT 43
46523: PUSH
46524: LD_INT 25
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: IN
46532: IFFALSE 46553
// points := [ 40 , 15 , 5 ] ;
46534: LD_ADDR_VAR 0 9
46538: PUSH
46539: LD_INT 40
46541: PUSH
46542: LD_INT 15
46544: PUSH
46545: LD_INT 5
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46553: LD_VAR 0 6
46557: PPUSH
46558: CALL_OW 264
46562: PUSH
46563: LD_INT 3
46565: PUSH
46566: LD_INT 23
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: IN
46573: IFFALSE 46594
// points := [ 7 , 25 , 8 ] ;
46575: LD_ADDR_VAR 0 9
46579: PUSH
46580: LD_INT 7
46582: PUSH
46583: LD_INT 25
46585: PUSH
46586: LD_INT 8
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46594: LD_VAR 0 6
46598: PPUSH
46599: CALL_OW 264
46603: PUSH
46604: LD_INT 5
46606: PUSH
46607: LD_INT 27
46609: PUSH
46610: LD_INT 44
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: IN
46618: IFFALSE 46639
// points := [ 14 , 50 , 16 ] ;
46620: LD_ADDR_VAR 0 9
46624: PUSH
46625: LD_INT 14
46627: PUSH
46628: LD_INT 50
46630: PUSH
46631: LD_INT 16
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46639: LD_VAR 0 6
46643: PPUSH
46644: CALL_OW 264
46648: PUSH
46649: LD_INT 6
46651: PUSH
46652: LD_INT 46
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: IN
46659: IFFALSE 46680
// points := [ 32 , 120 , 70 ] ;
46661: LD_ADDR_VAR 0 9
46665: PUSH
46666: LD_INT 32
46668: PUSH
46669: LD_INT 120
46671: PUSH
46672: LD_INT 70
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
46680: LD_VAR 0 6
46684: PPUSH
46685: CALL_OW 264
46689: PUSH
46690: LD_INT 7
46692: PUSH
46693: LD_INT 28
46695: PUSH
46696: LD_INT 45
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: IN
46704: IFFALSE 46725
// points := [ 35 , 20 , 45 ] ;
46706: LD_ADDR_VAR 0 9
46710: PUSH
46711: LD_INT 35
46713: PUSH
46714: LD_INT 20
46716: PUSH
46717: LD_INT 45
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46725: LD_VAR 0 6
46729: PPUSH
46730: CALL_OW 264
46734: PUSH
46735: LD_INT 47
46737: PUSH
46738: EMPTY
46739: LIST
46740: IN
46741: IFFALSE 46762
// points := [ 67 , 45 , 75 ] ;
46743: LD_ADDR_VAR 0 9
46747: PUSH
46748: LD_INT 67
46750: PUSH
46751: LD_INT 45
46753: PUSH
46754: LD_INT 75
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46762: LD_VAR 0 6
46766: PPUSH
46767: CALL_OW 264
46771: PUSH
46772: LD_INT 26
46774: PUSH
46775: EMPTY
46776: LIST
46777: IN
46778: IFFALSE 46799
// points := [ 120 , 30 , 80 ] ;
46780: LD_ADDR_VAR 0 9
46784: PUSH
46785: LD_INT 120
46787: PUSH
46788: LD_INT 30
46790: PUSH
46791: LD_INT 80
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46799: LD_VAR 0 6
46803: PPUSH
46804: CALL_OW 264
46808: PUSH
46809: LD_INT 22
46811: PUSH
46812: EMPTY
46813: LIST
46814: IN
46815: IFFALSE 46836
// points := [ 40 , 1 , 1 ] ;
46817: LD_ADDR_VAR 0 9
46821: PUSH
46822: LD_INT 40
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46836: LD_VAR 0 6
46840: PPUSH
46841: CALL_OW 264
46845: PUSH
46846: LD_INT 29
46848: PUSH
46849: EMPTY
46850: LIST
46851: IN
46852: IFFALSE 46873
// points := [ 70 , 200 , 400 ] ;
46854: LD_ADDR_VAR 0 9
46858: PUSH
46859: LD_INT 70
46861: PUSH
46862: LD_INT 200
46864: PUSH
46865: LD_INT 400
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46873: LD_VAR 0 6
46877: PPUSH
46878: CALL_OW 264
46882: PUSH
46883: LD_INT 14
46885: PUSH
46886: LD_INT 53
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: IN
46893: IFFALSE 46914
// points := [ 40 , 10 , 20 ] ;
46895: LD_ADDR_VAR 0 9
46899: PUSH
46900: LD_INT 40
46902: PUSH
46903: LD_INT 10
46905: PUSH
46906: LD_INT 20
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46914: LD_VAR 0 6
46918: PPUSH
46919: CALL_OW 264
46923: PUSH
46924: LD_INT 9
46926: PUSH
46927: EMPTY
46928: LIST
46929: IN
46930: IFFALSE 46951
// points := [ 5 , 70 , 20 ] ;
46932: LD_ADDR_VAR 0 9
46936: PUSH
46937: LD_INT 5
46939: PUSH
46940: LD_INT 70
46942: PUSH
46943: LD_INT 20
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46951: LD_VAR 0 6
46955: PPUSH
46956: CALL_OW 264
46960: PUSH
46961: LD_INT 10
46963: PUSH
46964: EMPTY
46965: LIST
46966: IN
46967: IFFALSE 46988
// points := [ 35 , 110 , 70 ] ;
46969: LD_ADDR_VAR 0 9
46973: PUSH
46974: LD_INT 35
46976: PUSH
46977: LD_INT 110
46979: PUSH
46980: LD_INT 70
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46988: LD_VAR 0 6
46992: PPUSH
46993: CALL_OW 265
46997: PUSH
46998: LD_INT 25
47000: EQUAL
47001: IFFALSE 47022
// points := [ 80 , 65 , 100 ] ;
47003: LD_ADDR_VAR 0 9
47007: PUSH
47008: LD_INT 80
47010: PUSH
47011: LD_INT 65
47013: PUSH
47014: LD_INT 100
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47022: LD_VAR 0 6
47026: PPUSH
47027: CALL_OW 263
47031: PUSH
47032: LD_INT 1
47034: EQUAL
47035: IFFALSE 47070
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47037: LD_ADDR_VAR 0 10
47041: PUSH
47042: LD_VAR 0 10
47046: PUSH
47047: LD_VAR 0 6
47051: PPUSH
47052: CALL_OW 311
47056: PPUSH
47057: LD_INT 3
47059: PPUSH
47060: CALL_OW 259
47064: PUSH
47065: LD_INT 4
47067: MUL
47068: MUL
47069: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47070: LD_VAR 0 6
47074: PPUSH
47075: CALL_OW 263
47079: PUSH
47080: LD_INT 2
47082: EQUAL
47083: IFFALSE 47134
// begin j := IsControledBy ( i ) ;
47085: LD_ADDR_VAR 0 7
47089: PUSH
47090: LD_VAR 0 6
47094: PPUSH
47095: CALL_OW 312
47099: ST_TO_ADDR
// if j then
47100: LD_VAR 0 7
47104: IFFALSE 47134
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47106: LD_ADDR_VAR 0 10
47110: PUSH
47111: LD_VAR 0 10
47115: PUSH
47116: LD_VAR 0 7
47120: PPUSH
47121: LD_INT 3
47123: PPUSH
47124: CALL_OW 259
47128: PUSH
47129: LD_INT 3
47131: MUL
47132: MUL
47133: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47134: LD_VAR 0 6
47138: PPUSH
47139: CALL_OW 264
47143: PUSH
47144: LD_INT 5
47146: PUSH
47147: LD_INT 6
47149: PUSH
47150: LD_INT 46
47152: PUSH
47153: LD_INT 44
47155: PUSH
47156: LD_INT 47
47158: PUSH
47159: LD_INT 45
47161: PUSH
47162: LD_INT 28
47164: PUSH
47165: LD_INT 7
47167: PUSH
47168: LD_INT 27
47170: PUSH
47171: LD_INT 29
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: IN
47186: PUSH
47187: LD_VAR 0 1
47191: PPUSH
47192: LD_INT 52
47194: PPUSH
47195: CALL_OW 321
47199: PUSH
47200: LD_INT 2
47202: EQUAL
47203: AND
47204: IFFALSE 47221
// bpoints := bpoints * 1.2 ;
47206: LD_ADDR_VAR 0 10
47210: PUSH
47211: LD_VAR 0 10
47215: PUSH
47216: LD_REAL  1.20000000000000E+0000
47219: MUL
47220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47221: LD_VAR 0 6
47225: PPUSH
47226: CALL_OW 264
47230: PUSH
47231: LD_INT 6
47233: PUSH
47234: LD_INT 46
47236: PUSH
47237: LD_INT 47
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: IN
47245: IFFALSE 47262
// bpoints := bpoints * 1.2 ;
47247: LD_ADDR_VAR 0 10
47251: PUSH
47252: LD_VAR 0 10
47256: PUSH
47257: LD_REAL  1.20000000000000E+0000
47260: MUL
47261: ST_TO_ADDR
// end ; unit_building :
47262: GO 47276
47264: LD_INT 3
47266: DOUBLE
47267: EQUAL
47268: IFTRUE 47272
47270: GO 47275
47272: POP
// ; end ;
47273: GO 47276
47275: POP
// for j = 1 to 3 do
47276: LD_ADDR_VAR 0 7
47280: PUSH
47281: DOUBLE
47282: LD_INT 1
47284: DEC
47285: ST_TO_ADDR
47286: LD_INT 3
47288: PUSH
47289: FOR_TO
47290: IFFALSE 47343
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47292: LD_ADDR_VAR 0 5
47296: PUSH
47297: LD_VAR 0 5
47301: PPUSH
47302: LD_VAR 0 7
47306: PPUSH
47307: LD_VAR 0 5
47311: PUSH
47312: LD_VAR 0 7
47316: ARRAY
47317: PUSH
47318: LD_VAR 0 9
47322: PUSH
47323: LD_VAR 0 7
47327: ARRAY
47328: PUSH
47329: LD_VAR 0 10
47333: MUL
47334: PLUS
47335: PPUSH
47336: CALL_OW 1
47340: ST_TO_ADDR
47341: GO 47289
47343: POP
47344: POP
// end ;
47345: GO 45828
47347: POP
47348: POP
// result := Replace ( result , 4 , tmp ) ;
47349: LD_ADDR_VAR 0 5
47353: PUSH
47354: LD_VAR 0 5
47358: PPUSH
47359: LD_INT 4
47361: PPUSH
47362: LD_VAR 0 8
47366: PPUSH
47367: CALL_OW 1
47371: ST_TO_ADDR
// end ;
47372: LD_VAR 0 5
47376: RET
// export function DangerAtRange ( unit , range ) ; begin
47377: LD_INT 0
47379: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47380: LD_ADDR_VAR 0 3
47384: PUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: CALL_OW 255
47394: PPUSH
47395: LD_VAR 0 1
47399: PPUSH
47400: CALL_OW 250
47404: PPUSH
47405: LD_VAR 0 1
47409: PPUSH
47410: CALL_OW 251
47414: PPUSH
47415: LD_VAR 0 2
47419: PPUSH
47420: CALL 45680 0 4
47424: ST_TO_ADDR
// end ;
47425: LD_VAR 0 3
47429: RET
// export function DangerInArea ( side , area ) ; begin
47430: LD_INT 0
47432: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47433: LD_ADDR_VAR 0 3
47437: PUSH
47438: LD_VAR 0 2
47442: PPUSH
47443: LD_INT 81
47445: PUSH
47446: LD_VAR 0 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PPUSH
47455: CALL_OW 70
47459: ST_TO_ADDR
// end ;
47460: LD_VAR 0 3
47464: RET
// export function IsExtension ( b ) ; begin
47465: LD_INT 0
47467: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47468: LD_ADDR_VAR 0 2
47472: PUSH
47473: LD_VAR 0 1
47477: PUSH
47478: LD_INT 23
47480: PUSH
47481: LD_INT 20
47483: PUSH
47484: LD_INT 22
47486: PUSH
47487: LD_INT 17
47489: PUSH
47490: LD_INT 24
47492: PUSH
47493: LD_INT 21
47495: PUSH
47496: LD_INT 19
47498: PUSH
47499: LD_INT 16
47501: PUSH
47502: LD_INT 25
47504: PUSH
47505: LD_INT 18
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: IN
47520: ST_TO_ADDR
// end ;
47521: LD_VAR 0 2
47525: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
47526: LD_INT 0
47528: PPUSH
47529: PPUSH
47530: PPUSH
// result := [ ] ;
47531: LD_ADDR_VAR 0 3
47535: PUSH
47536: EMPTY
47537: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47538: LD_ADDR_VAR 0 4
47542: PUSH
47543: LD_VAR 0 2
47547: PPUSH
47548: LD_INT 21
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PPUSH
47558: CALL_OW 70
47562: ST_TO_ADDR
// if not tmp then
47563: LD_VAR 0 4
47567: NOT
47568: IFFALSE 47572
// exit ;
47570: GO 47630
// for i in tmp do
47572: LD_ADDR_VAR 0 5
47576: PUSH
47577: LD_VAR 0 4
47581: PUSH
47582: FOR_IN
47583: IFFALSE 47618
// if GetBase ( i ) <> base then
47585: LD_VAR 0 5
47589: PPUSH
47590: CALL_OW 274
47594: PUSH
47595: LD_VAR 0 1
47599: NONEQUAL
47600: IFFALSE 47616
// ComLinkToBase ( base , i ) ;
47602: LD_VAR 0 1
47606: PPUSH
47607: LD_VAR 0 5
47611: PPUSH
47612: CALL_OW 169
47616: GO 47582
47618: POP
47619: POP
// result := tmp ;
47620: LD_ADDR_VAR 0 3
47624: PUSH
47625: LD_VAR 0 4
47629: ST_TO_ADDR
// end ;
47630: LD_VAR 0 3
47634: RET
// export function ComComplete ( unit , b ) ; var i ; begin
47635: LD_INT 0
47637: PPUSH
47638: PPUSH
// if BuildingStatus ( b ) = bs_build then
47639: LD_VAR 0 2
47643: PPUSH
47644: CALL_OW 461
47648: PUSH
47649: LD_INT 1
47651: EQUAL
47652: IFFALSE 47712
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47654: LD_VAR 0 1
47658: PPUSH
47659: LD_STRING h
47661: PUSH
47662: LD_VAR 0 2
47666: PPUSH
47667: CALL_OW 250
47671: PUSH
47672: LD_VAR 0 2
47676: PPUSH
47677: CALL_OW 251
47681: PUSH
47682: LD_VAR 0 2
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: PPUSH
47708: CALL_OW 446
// end ;
47712: LD_VAR 0 3
47716: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47717: LD_INT 0
47719: PPUSH
47720: PPUSH
47721: PPUSH
47722: PPUSH
47723: PPUSH
47724: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47725: LD_VAR 0 1
47729: NOT
47730: PUSH
47731: LD_VAR 0 1
47735: PPUSH
47736: CALL_OW 263
47740: PUSH
47741: LD_INT 2
47743: EQUAL
47744: NOT
47745: OR
47746: IFFALSE 47750
// exit ;
47748: GO 48066
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47750: LD_ADDR_VAR 0 6
47754: PUSH
47755: LD_INT 22
47757: PUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 255
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 30
47777: PUSH
47778: LD_INT 36
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 34
47787: PUSH
47788: LD_INT 31
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PPUSH
47804: CALL_OW 69
47808: ST_TO_ADDR
// if not tmp then
47809: LD_VAR 0 6
47813: NOT
47814: IFFALSE 47818
// exit ;
47816: GO 48066
// result := [ ] ;
47818: LD_ADDR_VAR 0 2
47822: PUSH
47823: EMPTY
47824: ST_TO_ADDR
// for i in tmp do
47825: LD_ADDR_VAR 0 3
47829: PUSH
47830: LD_VAR 0 6
47834: PUSH
47835: FOR_IN
47836: IFFALSE 47907
// begin t := UnitsInside ( i ) ;
47838: LD_ADDR_VAR 0 4
47842: PUSH
47843: LD_VAR 0 3
47847: PPUSH
47848: CALL_OW 313
47852: ST_TO_ADDR
// if t then
47853: LD_VAR 0 4
47857: IFFALSE 47905
// for j in t do
47859: LD_ADDR_VAR 0 7
47863: PUSH
47864: LD_VAR 0 4
47868: PUSH
47869: FOR_IN
47870: IFFALSE 47903
// result := Insert ( result , result + 1 , j ) ;
47872: LD_ADDR_VAR 0 2
47876: PUSH
47877: LD_VAR 0 2
47881: PPUSH
47882: LD_VAR 0 2
47886: PUSH
47887: LD_INT 1
47889: PLUS
47890: PPUSH
47891: LD_VAR 0 7
47895: PPUSH
47896: CALL_OW 2
47900: ST_TO_ADDR
47901: GO 47869
47903: POP
47904: POP
// end ;
47905: GO 47835
47907: POP
47908: POP
// if not result then
47909: LD_VAR 0 2
47913: NOT
47914: IFFALSE 47918
// exit ;
47916: GO 48066
// mech := result [ 1 ] ;
47918: LD_ADDR_VAR 0 5
47922: PUSH
47923: LD_VAR 0 2
47927: PUSH
47928: LD_INT 1
47930: ARRAY
47931: ST_TO_ADDR
// if result > 1 then
47932: LD_VAR 0 2
47936: PUSH
47937: LD_INT 1
47939: GREATER
47940: IFFALSE 48052
// for i = 2 to result do
47942: LD_ADDR_VAR 0 3
47946: PUSH
47947: DOUBLE
47948: LD_INT 2
47950: DEC
47951: ST_TO_ADDR
47952: LD_VAR 0 2
47956: PUSH
47957: FOR_TO
47958: IFFALSE 48050
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47960: LD_ADDR_VAR 0 4
47964: PUSH
47965: LD_VAR 0 2
47969: PUSH
47970: LD_VAR 0 3
47974: ARRAY
47975: PPUSH
47976: LD_INT 3
47978: PPUSH
47979: CALL_OW 259
47983: PUSH
47984: LD_VAR 0 2
47988: PUSH
47989: LD_VAR 0 3
47993: ARRAY
47994: PPUSH
47995: CALL_OW 432
47999: MINUS
48000: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48001: LD_VAR 0 4
48005: PUSH
48006: LD_VAR 0 5
48010: PPUSH
48011: LD_INT 3
48013: PPUSH
48014: CALL_OW 259
48018: PUSH
48019: LD_VAR 0 5
48023: PPUSH
48024: CALL_OW 432
48028: MINUS
48029: GREATEREQUAL
48030: IFFALSE 48048
// mech := result [ i ] ;
48032: LD_ADDR_VAR 0 5
48036: PUSH
48037: LD_VAR 0 2
48041: PUSH
48042: LD_VAR 0 3
48046: ARRAY
48047: ST_TO_ADDR
// end ;
48048: GO 47957
48050: POP
48051: POP
// ComLinkTo ( vehicle , mech ) ;
48052: LD_VAR 0 1
48056: PPUSH
48057: LD_VAR 0 5
48061: PPUSH
48062: CALL_OW 135
// end ;
48066: LD_VAR 0 2
48070: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48071: LD_INT 0
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
// result := [ ] ;
48086: LD_ADDR_VAR 0 7
48090: PUSH
48091: EMPTY
48092: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48093: LD_VAR 0 1
48097: PPUSH
48098: CALL_OW 266
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: IN
48113: NOT
48114: IFFALSE 48118
// exit ;
48116: GO 49749
// if name then
48118: LD_VAR 0 3
48122: IFFALSE 48138
// SetBName ( base_dep , name ) ;
48124: LD_VAR 0 1
48128: PPUSH
48129: LD_VAR 0 3
48133: PPUSH
48134: CALL_OW 500
// base := GetBase ( base_dep ) ;
48138: LD_ADDR_VAR 0 15
48142: PUSH
48143: LD_VAR 0 1
48147: PPUSH
48148: CALL_OW 274
48152: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48153: LD_ADDR_VAR 0 16
48157: PUSH
48158: LD_VAR 0 1
48162: PPUSH
48163: CALL_OW 255
48167: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48168: LD_ADDR_VAR 0 17
48172: PUSH
48173: LD_VAR 0 1
48177: PPUSH
48178: CALL_OW 248
48182: ST_TO_ADDR
// if sources then
48183: LD_VAR 0 5
48187: IFFALSE 48234
// for i = 1 to 3 do
48189: LD_ADDR_VAR 0 8
48193: PUSH
48194: DOUBLE
48195: LD_INT 1
48197: DEC
48198: ST_TO_ADDR
48199: LD_INT 3
48201: PUSH
48202: FOR_TO
48203: IFFALSE 48232
// AddResourceType ( base , i , sources [ i ] ) ;
48205: LD_VAR 0 15
48209: PPUSH
48210: LD_VAR 0 8
48214: PPUSH
48215: LD_VAR 0 5
48219: PUSH
48220: LD_VAR 0 8
48224: ARRAY
48225: PPUSH
48226: CALL_OW 276
48230: GO 48202
48232: POP
48233: POP
// buildings := GetBaseBuildings ( base , area ) ;
48234: LD_ADDR_VAR 0 18
48238: PUSH
48239: LD_VAR 0 15
48243: PPUSH
48244: LD_VAR 0 2
48248: PPUSH
48249: CALL 47526 0 2
48253: ST_TO_ADDR
// InitHc ;
48254: CALL_OW 19
// InitUc ;
48258: CALL_OW 18
// uc_side := side ;
48262: LD_ADDR_OWVAR 20
48266: PUSH
48267: LD_VAR 0 16
48271: ST_TO_ADDR
// uc_nation := nation ;
48272: LD_ADDR_OWVAR 21
48276: PUSH
48277: LD_VAR 0 17
48281: ST_TO_ADDR
// if buildings then
48282: LD_VAR 0 18
48286: IFFALSE 49608
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48288: LD_ADDR_VAR 0 19
48292: PUSH
48293: LD_VAR 0 18
48297: PPUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 30
48303: PUSH
48304: LD_INT 29
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 30
48313: PUSH
48314: LD_INT 30
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: PPUSH
48326: CALL_OW 72
48330: ST_TO_ADDR
// if tmp then
48331: LD_VAR 0 19
48335: IFFALSE 48383
// for i in tmp do
48337: LD_ADDR_VAR 0 8
48341: PUSH
48342: LD_VAR 0 19
48346: PUSH
48347: FOR_IN
48348: IFFALSE 48381
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48350: LD_VAR 0 8
48354: PPUSH
48355: CALL_OW 250
48359: PPUSH
48360: LD_VAR 0 8
48364: PPUSH
48365: CALL_OW 251
48369: PPUSH
48370: LD_VAR 0 16
48374: PPUSH
48375: CALL_OW 441
48379: GO 48347
48381: POP
48382: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48383: LD_VAR 0 18
48387: PPUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 30
48393: PUSH
48394: LD_INT 32
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 30
48403: PUSH
48404: LD_INT 33
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: LIST
48415: PPUSH
48416: CALL_OW 72
48420: IFFALSE 48508
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48422: LD_ADDR_VAR 0 8
48426: PUSH
48427: LD_VAR 0 18
48431: PPUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 30
48437: PUSH
48438: LD_INT 32
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 30
48447: PUSH
48448: LD_INT 33
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: PPUSH
48460: CALL_OW 72
48464: PUSH
48465: FOR_IN
48466: IFFALSE 48506
// begin if not GetBWeapon ( i ) then
48468: LD_VAR 0 8
48472: PPUSH
48473: CALL_OW 269
48477: NOT
48478: IFFALSE 48504
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48480: LD_VAR 0 8
48484: PPUSH
48485: LD_VAR 0 8
48489: PPUSH
48490: LD_VAR 0 2
48494: PPUSH
48495: CALL 49754 0 2
48499: PPUSH
48500: CALL_OW 431
// end ;
48504: GO 48465
48506: POP
48507: POP
// end ; for i = 1 to personel do
48508: LD_ADDR_VAR 0 8
48512: PUSH
48513: DOUBLE
48514: LD_INT 1
48516: DEC
48517: ST_TO_ADDR
48518: LD_VAR 0 6
48522: PUSH
48523: FOR_TO
48524: IFFALSE 49588
// begin if i > 4 then
48526: LD_VAR 0 8
48530: PUSH
48531: LD_INT 4
48533: GREATER
48534: IFFALSE 48538
// break ;
48536: GO 49588
// case i of 1 :
48538: LD_VAR 0 8
48542: PUSH
48543: LD_INT 1
48545: DOUBLE
48546: EQUAL
48547: IFTRUE 48551
48549: GO 48631
48551: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48552: LD_ADDR_VAR 0 12
48556: PUSH
48557: LD_VAR 0 18
48561: PPUSH
48562: LD_INT 22
48564: PUSH
48565: LD_VAR 0 16
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 58
48576: PUSH
48577: EMPTY
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: LD_INT 30
48585: PUSH
48586: LD_INT 32
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 30
48595: PUSH
48596: LD_INT 4
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 30
48605: PUSH
48606: LD_INT 5
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: PPUSH
48624: CALL_OW 72
48628: ST_TO_ADDR
48629: GO 48853
48631: LD_INT 2
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48639
48637: GO 48701
48639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48640: LD_ADDR_VAR 0 12
48644: PUSH
48645: LD_VAR 0 18
48649: PPUSH
48650: LD_INT 22
48652: PUSH
48653: LD_VAR 0 16
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 30
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 30
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: LIST
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PPUSH
48694: CALL_OW 72
48698: ST_TO_ADDR
48699: GO 48853
48701: LD_INT 3
48703: DOUBLE
48704: EQUAL
48705: IFTRUE 48709
48707: GO 48771
48709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48710: LD_ADDR_VAR 0 12
48714: PUSH
48715: LD_VAR 0 18
48719: PPUSH
48720: LD_INT 22
48722: PUSH
48723: LD_VAR 0 16
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 30
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 30
48747: PUSH
48748: LD_INT 3
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PPUSH
48764: CALL_OW 72
48768: ST_TO_ADDR
48769: GO 48853
48771: LD_INT 4
48773: DOUBLE
48774: EQUAL
48775: IFTRUE 48779
48777: GO 48852
48779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48780: LD_ADDR_VAR 0 12
48784: PUSH
48785: LD_VAR 0 18
48789: PPUSH
48790: LD_INT 22
48792: PUSH
48793: LD_VAR 0 16
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 30
48807: PUSH
48808: LD_INT 6
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 30
48817: PUSH
48818: LD_INT 7
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 30
48827: PUSH
48828: LD_INT 8
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PPUSH
48845: CALL_OW 72
48849: ST_TO_ADDR
48850: GO 48853
48852: POP
// if i = 1 then
48853: LD_VAR 0 8
48857: PUSH
48858: LD_INT 1
48860: EQUAL
48861: IFFALSE 48972
// begin tmp := [ ] ;
48863: LD_ADDR_VAR 0 19
48867: PUSH
48868: EMPTY
48869: ST_TO_ADDR
// for j in f do
48870: LD_ADDR_VAR 0 9
48874: PUSH
48875: LD_VAR 0 12
48879: PUSH
48880: FOR_IN
48881: IFFALSE 48954
// if GetBType ( j ) = b_bunker then
48883: LD_VAR 0 9
48887: PPUSH
48888: CALL_OW 266
48892: PUSH
48893: LD_INT 32
48895: EQUAL
48896: IFFALSE 48923
// tmp := Insert ( tmp , 1 , j ) else
48898: LD_ADDR_VAR 0 19
48902: PUSH
48903: LD_VAR 0 19
48907: PPUSH
48908: LD_INT 1
48910: PPUSH
48911: LD_VAR 0 9
48915: PPUSH
48916: CALL_OW 2
48920: ST_TO_ADDR
48921: GO 48952
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48923: LD_ADDR_VAR 0 19
48927: PUSH
48928: LD_VAR 0 19
48932: PPUSH
48933: LD_VAR 0 19
48937: PUSH
48938: LD_INT 1
48940: PLUS
48941: PPUSH
48942: LD_VAR 0 9
48946: PPUSH
48947: CALL_OW 2
48951: ST_TO_ADDR
48952: GO 48880
48954: POP
48955: POP
// if tmp then
48956: LD_VAR 0 19
48960: IFFALSE 48972
// f := tmp ;
48962: LD_ADDR_VAR 0 12
48966: PUSH
48967: LD_VAR 0 19
48971: ST_TO_ADDR
// end ; x := personel [ i ] ;
48972: LD_ADDR_VAR 0 13
48976: PUSH
48977: LD_VAR 0 6
48981: PUSH
48982: LD_VAR 0 8
48986: ARRAY
48987: ST_TO_ADDR
// if x = - 1 then
48988: LD_VAR 0 13
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: EQUAL
48997: IFFALSE 49206
// begin for j in f do
48999: LD_ADDR_VAR 0 9
49003: PUSH
49004: LD_VAR 0 12
49008: PUSH
49009: FOR_IN
49010: IFFALSE 49202
// repeat InitHc ;
49012: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49016: LD_VAR 0 9
49020: PPUSH
49021: CALL_OW 266
49025: PUSH
49026: LD_INT 5
49028: EQUAL
49029: IFFALSE 49099
// begin if UnitsInside ( j ) < 3 then
49031: LD_VAR 0 9
49035: PPUSH
49036: CALL_OW 313
49040: PUSH
49041: LD_INT 3
49043: LESS
49044: IFFALSE 49080
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49046: LD_INT 0
49048: PPUSH
49049: LD_INT 5
49051: PUSH
49052: LD_INT 8
49054: PUSH
49055: LD_INT 9
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: PUSH
49063: LD_VAR 0 17
49067: ARRAY
49068: PPUSH
49069: LD_VAR 0 4
49073: PPUSH
49074: CALL_OW 380
49078: GO 49097
// PrepareHuman ( false , i , skill ) ;
49080: LD_INT 0
49082: PPUSH
49083: LD_VAR 0 8
49087: PPUSH
49088: LD_VAR 0 4
49092: PPUSH
49093: CALL_OW 380
// end else
49097: GO 49116
// PrepareHuman ( false , i , skill ) ;
49099: LD_INT 0
49101: PPUSH
49102: LD_VAR 0 8
49106: PPUSH
49107: LD_VAR 0 4
49111: PPUSH
49112: CALL_OW 380
// un := CreateHuman ;
49116: LD_ADDR_VAR 0 14
49120: PUSH
49121: CALL_OW 44
49125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49126: LD_ADDR_VAR 0 7
49130: PUSH
49131: LD_VAR 0 7
49135: PPUSH
49136: LD_INT 1
49138: PPUSH
49139: LD_VAR 0 14
49143: PPUSH
49144: CALL_OW 2
49148: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49149: LD_VAR 0 14
49153: PPUSH
49154: LD_VAR 0 9
49158: PPUSH
49159: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49163: LD_VAR 0 9
49167: PPUSH
49168: CALL_OW 313
49172: PUSH
49173: LD_INT 6
49175: EQUAL
49176: PUSH
49177: LD_VAR 0 9
49181: PPUSH
49182: CALL_OW 266
49186: PUSH
49187: LD_INT 32
49189: PUSH
49190: LD_INT 31
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: IN
49197: OR
49198: IFFALSE 49012
49200: GO 49009
49202: POP
49203: POP
// end else
49204: GO 49586
// for j = 1 to x do
49206: LD_ADDR_VAR 0 9
49210: PUSH
49211: DOUBLE
49212: LD_INT 1
49214: DEC
49215: ST_TO_ADDR
49216: LD_VAR 0 13
49220: PUSH
49221: FOR_TO
49222: IFFALSE 49584
// begin InitHc ;
49224: CALL_OW 19
// if not f then
49228: LD_VAR 0 12
49232: NOT
49233: IFFALSE 49322
// begin PrepareHuman ( false , i , skill ) ;
49235: LD_INT 0
49237: PPUSH
49238: LD_VAR 0 8
49242: PPUSH
49243: LD_VAR 0 4
49247: PPUSH
49248: CALL_OW 380
// un := CreateHuman ;
49252: LD_ADDR_VAR 0 14
49256: PUSH
49257: CALL_OW 44
49261: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49262: LD_ADDR_VAR 0 7
49266: PUSH
49267: LD_VAR 0 7
49271: PPUSH
49272: LD_INT 1
49274: PPUSH
49275: LD_VAR 0 14
49279: PPUSH
49280: CALL_OW 2
49284: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49285: LD_VAR 0 14
49289: PPUSH
49290: LD_VAR 0 1
49294: PPUSH
49295: CALL_OW 250
49299: PPUSH
49300: LD_VAR 0 1
49304: PPUSH
49305: CALL_OW 251
49309: PPUSH
49310: LD_INT 10
49312: PPUSH
49313: LD_INT 0
49315: PPUSH
49316: CALL_OW 50
// continue ;
49320: GO 49221
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49322: LD_VAR 0 12
49326: PUSH
49327: LD_INT 1
49329: ARRAY
49330: PPUSH
49331: CALL_OW 313
49335: PUSH
49336: LD_VAR 0 12
49340: PUSH
49341: LD_INT 1
49343: ARRAY
49344: PPUSH
49345: CALL_OW 266
49349: PUSH
49350: LD_INT 32
49352: PUSH
49353: LD_INT 31
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: IN
49360: AND
49361: PUSH
49362: LD_VAR 0 12
49366: PUSH
49367: LD_INT 1
49369: ARRAY
49370: PPUSH
49371: CALL_OW 313
49375: PUSH
49376: LD_INT 6
49378: EQUAL
49379: OR
49380: IFFALSE 49400
// f := Delete ( f , 1 ) ;
49382: LD_ADDR_VAR 0 12
49386: PUSH
49387: LD_VAR 0 12
49391: PPUSH
49392: LD_INT 1
49394: PPUSH
49395: CALL_OW 3
49399: ST_TO_ADDR
// if not f then
49400: LD_VAR 0 12
49404: NOT
49405: IFFALSE 49423
// begin x := x + 2 ;
49407: LD_ADDR_VAR 0 13
49411: PUSH
49412: LD_VAR 0 13
49416: PUSH
49417: LD_INT 2
49419: PLUS
49420: ST_TO_ADDR
// continue ;
49421: GO 49221
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49423: LD_VAR 0 12
49427: PUSH
49428: LD_INT 1
49430: ARRAY
49431: PPUSH
49432: CALL_OW 266
49436: PUSH
49437: LD_INT 5
49439: EQUAL
49440: IFFALSE 49514
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49442: LD_VAR 0 12
49446: PUSH
49447: LD_INT 1
49449: ARRAY
49450: PPUSH
49451: CALL_OW 313
49455: PUSH
49456: LD_INT 3
49458: LESS
49459: IFFALSE 49495
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49461: LD_INT 0
49463: PPUSH
49464: LD_INT 5
49466: PUSH
49467: LD_INT 8
49469: PUSH
49470: LD_INT 9
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: LIST
49477: PUSH
49478: LD_VAR 0 17
49482: ARRAY
49483: PPUSH
49484: LD_VAR 0 4
49488: PPUSH
49489: CALL_OW 380
49493: GO 49512
// PrepareHuman ( false , i , skill ) ;
49495: LD_INT 0
49497: PPUSH
49498: LD_VAR 0 8
49502: PPUSH
49503: LD_VAR 0 4
49507: PPUSH
49508: CALL_OW 380
// end else
49512: GO 49531
// PrepareHuman ( false , i , skill ) ;
49514: LD_INT 0
49516: PPUSH
49517: LD_VAR 0 8
49521: PPUSH
49522: LD_VAR 0 4
49526: PPUSH
49527: CALL_OW 380
// un := CreateHuman ;
49531: LD_ADDR_VAR 0 14
49535: PUSH
49536: CALL_OW 44
49540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49541: LD_ADDR_VAR 0 7
49545: PUSH
49546: LD_VAR 0 7
49550: PPUSH
49551: LD_INT 1
49553: PPUSH
49554: LD_VAR 0 14
49558: PPUSH
49559: CALL_OW 2
49563: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49564: LD_VAR 0 14
49568: PPUSH
49569: LD_VAR 0 12
49573: PUSH
49574: LD_INT 1
49576: ARRAY
49577: PPUSH
49578: CALL_OW 52
// end ;
49582: GO 49221
49584: POP
49585: POP
// end ;
49586: GO 48523
49588: POP
49589: POP
// result := result ^ buildings ;
49590: LD_ADDR_VAR 0 7
49594: PUSH
49595: LD_VAR 0 7
49599: PUSH
49600: LD_VAR 0 18
49604: ADD
49605: ST_TO_ADDR
// end else
49606: GO 49749
// begin for i = 1 to personel do
49608: LD_ADDR_VAR 0 8
49612: PUSH
49613: DOUBLE
49614: LD_INT 1
49616: DEC
49617: ST_TO_ADDR
49618: LD_VAR 0 6
49622: PUSH
49623: FOR_TO
49624: IFFALSE 49747
// begin if i > 4 then
49626: LD_VAR 0 8
49630: PUSH
49631: LD_INT 4
49633: GREATER
49634: IFFALSE 49638
// break ;
49636: GO 49747
// x := personel [ i ] ;
49638: LD_ADDR_VAR 0 13
49642: PUSH
49643: LD_VAR 0 6
49647: PUSH
49648: LD_VAR 0 8
49652: ARRAY
49653: ST_TO_ADDR
// if x = - 1 then
49654: LD_VAR 0 13
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: EQUAL
49663: IFFALSE 49667
// continue ;
49665: GO 49623
// PrepareHuman ( false , i , skill ) ;
49667: LD_INT 0
49669: PPUSH
49670: LD_VAR 0 8
49674: PPUSH
49675: LD_VAR 0 4
49679: PPUSH
49680: CALL_OW 380
// un := CreateHuman ;
49684: LD_ADDR_VAR 0 14
49688: PUSH
49689: CALL_OW 44
49693: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49694: LD_VAR 0 14
49698: PPUSH
49699: LD_VAR 0 1
49703: PPUSH
49704: CALL_OW 250
49708: PPUSH
49709: LD_VAR 0 1
49713: PPUSH
49714: CALL_OW 251
49718: PPUSH
49719: LD_INT 10
49721: PPUSH
49722: LD_INT 0
49724: PPUSH
49725: CALL_OW 50
// result := result ^ un ;
49729: LD_ADDR_VAR 0 7
49733: PUSH
49734: LD_VAR 0 7
49738: PUSH
49739: LD_VAR 0 14
49743: ADD
49744: ST_TO_ADDR
// end ;
49745: GO 49623
49747: POP
49748: POP
// end ; end ;
49749: LD_VAR 0 7
49753: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49754: LD_INT 0
49756: PPUSH
49757: PPUSH
49758: PPUSH
49759: PPUSH
49760: PPUSH
49761: PPUSH
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
// result := false ;
49772: LD_ADDR_VAR 0 3
49776: PUSH
49777: LD_INT 0
49779: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49780: LD_VAR 0 1
49784: NOT
49785: PUSH
49786: LD_VAR 0 1
49790: PPUSH
49791: CALL_OW 266
49795: PUSH
49796: LD_INT 32
49798: PUSH
49799: LD_INT 33
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: IN
49806: NOT
49807: OR
49808: IFFALSE 49812
// exit ;
49810: GO 50948
// nat := GetNation ( tower ) ;
49812: LD_ADDR_VAR 0 12
49816: PUSH
49817: LD_VAR 0 1
49821: PPUSH
49822: CALL_OW 248
49826: ST_TO_ADDR
// side := GetSide ( tower ) ;
49827: LD_ADDR_VAR 0 16
49831: PUSH
49832: LD_VAR 0 1
49836: PPUSH
49837: CALL_OW 255
49841: ST_TO_ADDR
// x := GetX ( tower ) ;
49842: LD_ADDR_VAR 0 10
49846: PUSH
49847: LD_VAR 0 1
49851: PPUSH
49852: CALL_OW 250
49856: ST_TO_ADDR
// y := GetY ( tower ) ;
49857: LD_ADDR_VAR 0 11
49861: PUSH
49862: LD_VAR 0 1
49866: PPUSH
49867: CALL_OW 251
49871: ST_TO_ADDR
// if not x or not y then
49872: LD_VAR 0 10
49876: NOT
49877: PUSH
49878: LD_VAR 0 11
49882: NOT
49883: OR
49884: IFFALSE 49888
// exit ;
49886: GO 50948
// weapon := 0 ;
49888: LD_ADDR_VAR 0 18
49892: PUSH
49893: LD_INT 0
49895: ST_TO_ADDR
// fac_list := [ ] ;
49896: LD_ADDR_VAR 0 17
49900: PUSH
49901: EMPTY
49902: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
49903: LD_ADDR_VAR 0 6
49907: PUSH
49908: LD_VAR 0 1
49912: PPUSH
49913: CALL_OW 274
49917: PPUSH
49918: LD_VAR 0 2
49922: PPUSH
49923: CALL 47526 0 2
49927: PPUSH
49928: LD_INT 30
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PPUSH
49938: CALL_OW 72
49942: ST_TO_ADDR
// if not factories then
49943: LD_VAR 0 6
49947: NOT
49948: IFFALSE 49952
// exit ;
49950: GO 50948
// for i in factories do
49952: LD_ADDR_VAR 0 8
49956: PUSH
49957: LD_VAR 0 6
49961: PUSH
49962: FOR_IN
49963: IFFALSE 49988
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49965: LD_ADDR_VAR 0 17
49969: PUSH
49970: LD_VAR 0 17
49974: PUSH
49975: LD_VAR 0 8
49979: PPUSH
49980: CALL_OW 478
49984: UNION
49985: ST_TO_ADDR
49986: GO 49962
49988: POP
49989: POP
// if not fac_list then
49990: LD_VAR 0 17
49994: NOT
49995: IFFALSE 49999
// exit ;
49997: GO 50948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49999: LD_ADDR_VAR 0 5
50003: PUSH
50004: LD_INT 4
50006: PUSH
50007: LD_INT 5
50009: PUSH
50010: LD_INT 9
50012: PUSH
50013: LD_INT 10
50015: PUSH
50016: LD_INT 6
50018: PUSH
50019: LD_INT 7
50021: PUSH
50022: LD_INT 11
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 27
50036: PUSH
50037: LD_INT 28
50039: PUSH
50040: LD_INT 26
50042: PUSH
50043: LD_INT 30
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 43
50054: PUSH
50055: LD_INT 44
50057: PUSH
50058: LD_INT 46
50060: PUSH
50061: LD_INT 45
50063: PUSH
50064: LD_INT 47
50066: PUSH
50067: LD_INT 49
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: PUSH
50083: LD_VAR 0 12
50087: ARRAY
50088: ST_TO_ADDR
// for i in list do
50089: LD_ADDR_VAR 0 8
50093: PUSH
50094: LD_VAR 0 5
50098: PUSH
50099: FOR_IN
50100: IFFALSE 50133
// if not i in fac_list then
50102: LD_VAR 0 8
50106: PUSH
50107: LD_VAR 0 17
50111: IN
50112: NOT
50113: IFFALSE 50131
// list := list diff i ;
50115: LD_ADDR_VAR 0 5
50119: PUSH
50120: LD_VAR 0 5
50124: PUSH
50125: LD_VAR 0 8
50129: DIFF
50130: ST_TO_ADDR
50131: GO 50099
50133: POP
50134: POP
// if not list then
50135: LD_VAR 0 5
50139: NOT
50140: IFFALSE 50144
// exit ;
50142: GO 50948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50144: LD_VAR 0 12
50148: PUSH
50149: LD_INT 3
50151: EQUAL
50152: PUSH
50153: LD_INT 49
50155: PUSH
50156: LD_VAR 0 5
50160: IN
50161: AND
50162: PUSH
50163: LD_INT 31
50165: PPUSH
50166: LD_VAR 0 16
50170: PPUSH
50171: CALL_OW 321
50175: PUSH
50176: LD_INT 2
50178: EQUAL
50179: AND
50180: IFFALSE 50240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50182: LD_INT 22
50184: PUSH
50185: LD_VAR 0 16
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 35
50196: PUSH
50197: LD_INT 49
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 91
50206: PUSH
50207: LD_VAR 0 1
50211: PUSH
50212: LD_INT 10
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: PPUSH
50225: CALL_OW 69
50229: NOT
50230: IFFALSE 50240
// weapon := ru_time_lapser ;
50232: LD_ADDR_VAR 0 18
50236: PUSH
50237: LD_INT 49
50239: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50240: LD_VAR 0 12
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: IN
50255: PUSH
50256: LD_INT 11
50258: PUSH
50259: LD_VAR 0 5
50263: IN
50264: PUSH
50265: LD_INT 30
50267: PUSH
50268: LD_VAR 0 5
50272: IN
50273: OR
50274: AND
50275: PUSH
50276: LD_INT 6
50278: PPUSH
50279: LD_VAR 0 16
50283: PPUSH
50284: CALL_OW 321
50288: PUSH
50289: LD_INT 2
50291: EQUAL
50292: AND
50293: IFFALSE 50458
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50295: LD_INT 22
50297: PUSH
50298: LD_VAR 0 16
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 35
50312: PUSH
50313: LD_INT 11
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 35
50322: PUSH
50323: LD_INT 30
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 91
50337: PUSH
50338: LD_VAR 0 1
50342: PUSH
50343: LD_INT 18
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: PPUSH
50356: CALL_OW 69
50360: NOT
50361: PUSH
50362: LD_INT 22
50364: PUSH
50365: LD_VAR 0 16
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 30
50379: PUSH
50380: LD_INT 32
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 30
50389: PUSH
50390: LD_INT 33
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 91
50404: PUSH
50405: LD_VAR 0 1
50409: PUSH
50410: LD_INT 12
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: PUSH
50423: EMPTY
50424: LIST
50425: PPUSH
50426: CALL_OW 69
50430: PUSH
50431: LD_INT 2
50433: GREATER
50434: AND
50435: IFFALSE 50458
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50437: LD_ADDR_VAR 0 18
50441: PUSH
50442: LD_INT 11
50444: PUSH
50445: LD_INT 30
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_VAR 0 12
50456: ARRAY
50457: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50458: LD_VAR 0 18
50462: NOT
50463: PUSH
50464: LD_INT 40
50466: PPUSH
50467: LD_VAR 0 16
50471: PPUSH
50472: CALL_OW 321
50476: PUSH
50477: LD_INT 2
50479: EQUAL
50480: AND
50481: PUSH
50482: LD_INT 7
50484: PUSH
50485: LD_VAR 0 5
50489: IN
50490: PUSH
50491: LD_INT 28
50493: PUSH
50494: LD_VAR 0 5
50498: IN
50499: OR
50500: PUSH
50501: LD_INT 45
50503: PUSH
50504: LD_VAR 0 5
50508: IN
50509: OR
50510: AND
50511: IFFALSE 50765
// begin hex := GetHexInfo ( x , y ) ;
50513: LD_ADDR_VAR 0 4
50517: PUSH
50518: LD_VAR 0 10
50522: PPUSH
50523: LD_VAR 0 11
50527: PPUSH
50528: CALL_OW 546
50532: ST_TO_ADDR
// if hex [ 1 ] then
50533: LD_VAR 0 4
50537: PUSH
50538: LD_INT 1
50540: ARRAY
50541: IFFALSE 50545
// exit ;
50543: GO 50948
// height := hex [ 2 ] ;
50545: LD_ADDR_VAR 0 15
50549: PUSH
50550: LD_VAR 0 4
50554: PUSH
50555: LD_INT 2
50557: ARRAY
50558: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50559: LD_ADDR_VAR 0 14
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: LD_INT 5
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: ST_TO_ADDR
// for i in tmp do
50582: LD_ADDR_VAR 0 8
50586: PUSH
50587: LD_VAR 0 14
50591: PUSH
50592: FOR_IN
50593: IFFALSE 50763
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50595: LD_ADDR_VAR 0 9
50599: PUSH
50600: LD_VAR 0 10
50604: PPUSH
50605: LD_VAR 0 8
50609: PPUSH
50610: LD_INT 5
50612: PPUSH
50613: CALL_OW 272
50617: PUSH
50618: LD_VAR 0 11
50622: PPUSH
50623: LD_VAR 0 8
50627: PPUSH
50628: LD_INT 5
50630: PPUSH
50631: CALL_OW 273
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50640: LD_VAR 0 9
50644: PUSH
50645: LD_INT 1
50647: ARRAY
50648: PPUSH
50649: LD_VAR 0 9
50653: PUSH
50654: LD_INT 2
50656: ARRAY
50657: PPUSH
50658: CALL_OW 488
50662: IFFALSE 50761
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50664: LD_ADDR_VAR 0 4
50668: PUSH
50669: LD_VAR 0 9
50673: PUSH
50674: LD_INT 1
50676: ARRAY
50677: PPUSH
50678: LD_VAR 0 9
50682: PUSH
50683: LD_INT 2
50685: ARRAY
50686: PPUSH
50687: CALL_OW 546
50691: ST_TO_ADDR
// if hex [ 1 ] then
50692: LD_VAR 0 4
50696: PUSH
50697: LD_INT 1
50699: ARRAY
50700: IFFALSE 50704
// continue ;
50702: GO 50592
// h := hex [ 2 ] ;
50704: LD_ADDR_VAR 0 13
50708: PUSH
50709: LD_VAR 0 4
50713: PUSH
50714: LD_INT 2
50716: ARRAY
50717: ST_TO_ADDR
// if h + 7 < height then
50718: LD_VAR 0 13
50722: PUSH
50723: LD_INT 7
50725: PLUS
50726: PUSH
50727: LD_VAR 0 15
50731: LESS
50732: IFFALSE 50761
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50734: LD_ADDR_VAR 0 18
50738: PUSH
50739: LD_INT 7
50741: PUSH
50742: LD_INT 28
50744: PUSH
50745: LD_INT 45
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: PUSH
50753: LD_VAR 0 12
50757: ARRAY
50758: ST_TO_ADDR
// break ;
50759: GO 50763
// end ; end ; end ;
50761: GO 50592
50763: POP
50764: POP
// end ; if not weapon then
50765: LD_VAR 0 18
50769: NOT
50770: IFFALSE 50830
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50772: LD_ADDR_VAR 0 5
50776: PUSH
50777: LD_VAR 0 5
50781: PUSH
50782: LD_INT 11
50784: PUSH
50785: LD_INT 30
50787: PUSH
50788: LD_INT 49
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: DIFF
50796: ST_TO_ADDR
// if not list then
50797: LD_VAR 0 5
50801: NOT
50802: IFFALSE 50806
// exit ;
50804: GO 50948
// weapon := list [ rand ( 1 , list ) ] ;
50806: LD_ADDR_VAR 0 18
50810: PUSH
50811: LD_VAR 0 5
50815: PUSH
50816: LD_INT 1
50818: PPUSH
50819: LD_VAR 0 5
50823: PPUSH
50824: CALL_OW 12
50828: ARRAY
50829: ST_TO_ADDR
// end ; if weapon then
50830: LD_VAR 0 18
50834: IFFALSE 50948
// begin tmp := CostOfWeapon ( weapon ) ;
50836: LD_ADDR_VAR 0 14
50840: PUSH
50841: LD_VAR 0 18
50845: PPUSH
50846: CALL_OW 451
50850: ST_TO_ADDR
// j := GetBase ( tower ) ;
50851: LD_ADDR_VAR 0 9
50855: PUSH
50856: LD_VAR 0 1
50860: PPUSH
50861: CALL_OW 274
50865: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50866: LD_VAR 0 9
50870: PPUSH
50871: LD_INT 1
50873: PPUSH
50874: CALL_OW 275
50878: PUSH
50879: LD_VAR 0 14
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: GREATEREQUAL
50888: PUSH
50889: LD_VAR 0 9
50893: PPUSH
50894: LD_INT 2
50896: PPUSH
50897: CALL_OW 275
50901: PUSH
50902: LD_VAR 0 14
50906: PUSH
50907: LD_INT 2
50909: ARRAY
50910: GREATEREQUAL
50911: AND
50912: PUSH
50913: LD_VAR 0 9
50917: PPUSH
50918: LD_INT 3
50920: PPUSH
50921: CALL_OW 275
50925: PUSH
50926: LD_VAR 0 14
50930: PUSH
50931: LD_INT 3
50933: ARRAY
50934: GREATEREQUAL
50935: AND
50936: IFFALSE 50948
// result := weapon ;
50938: LD_ADDR_VAR 0 3
50942: PUSH
50943: LD_VAR 0 18
50947: ST_TO_ADDR
// end ; end ;
50948: LD_VAR 0 3
50952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50953: LD_INT 0
50955: PPUSH
50956: PPUSH
// result := true ;
50957: LD_ADDR_VAR 0 3
50961: PUSH
50962: LD_INT 1
50964: ST_TO_ADDR
// if array1 = array2 then
50965: LD_VAR 0 1
50969: PUSH
50970: LD_VAR 0 2
50974: EQUAL
50975: IFFALSE 51035
// begin for i = 1 to array1 do
50977: LD_ADDR_VAR 0 4
50981: PUSH
50982: DOUBLE
50983: LD_INT 1
50985: DEC
50986: ST_TO_ADDR
50987: LD_VAR 0 1
50991: PUSH
50992: FOR_TO
50993: IFFALSE 51031
// if array1 [ i ] <> array2 [ i ] then
50995: LD_VAR 0 1
50999: PUSH
51000: LD_VAR 0 4
51004: ARRAY
51005: PUSH
51006: LD_VAR 0 2
51010: PUSH
51011: LD_VAR 0 4
51015: ARRAY
51016: NONEQUAL
51017: IFFALSE 51029
// begin result := false ;
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_INT 0
51026: ST_TO_ADDR
// break ;
51027: GO 51031
// end ;
51029: GO 50992
51031: POP
51032: POP
// end else
51033: GO 51043
// result := false ;
51035: LD_ADDR_VAR 0 3
51039: PUSH
51040: LD_INT 0
51042: ST_TO_ADDR
// end ;
51043: LD_VAR 0 3
51047: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51048: LD_INT 0
51050: PPUSH
51051: PPUSH
51052: PPUSH
// pom := GetBase ( fac ) ;
51053: LD_ADDR_VAR 0 5
51057: PUSH
51058: LD_VAR 0 1
51062: PPUSH
51063: CALL_OW 274
51067: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51068: LD_ADDR_VAR 0 4
51072: PUSH
51073: LD_VAR 0 2
51077: PUSH
51078: LD_INT 1
51080: ARRAY
51081: PPUSH
51082: LD_VAR 0 2
51086: PUSH
51087: LD_INT 2
51089: ARRAY
51090: PPUSH
51091: LD_VAR 0 2
51095: PUSH
51096: LD_INT 3
51098: ARRAY
51099: PPUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_INT 4
51107: ARRAY
51108: PPUSH
51109: CALL_OW 449
51113: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51114: LD_ADDR_VAR 0 3
51118: PUSH
51119: LD_VAR 0 5
51123: PPUSH
51124: LD_INT 1
51126: PPUSH
51127: CALL_OW 275
51131: PUSH
51132: LD_VAR 0 4
51136: PUSH
51137: LD_INT 1
51139: ARRAY
51140: GREATEREQUAL
51141: PUSH
51142: LD_VAR 0 5
51146: PPUSH
51147: LD_INT 2
51149: PPUSH
51150: CALL_OW 275
51154: PUSH
51155: LD_VAR 0 4
51159: PUSH
51160: LD_INT 2
51162: ARRAY
51163: GREATEREQUAL
51164: AND
51165: PUSH
51166: LD_VAR 0 5
51170: PPUSH
51171: LD_INT 3
51173: PPUSH
51174: CALL_OW 275
51178: PUSH
51179: LD_VAR 0 4
51183: PUSH
51184: LD_INT 3
51186: ARRAY
51187: GREATEREQUAL
51188: AND
51189: ST_TO_ADDR
// end ;
51190: LD_VAR 0 3
51194: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51195: LD_INT 0
51197: PPUSH
51198: PPUSH
51199: PPUSH
51200: PPUSH
// pom := GetBase ( building ) ;
51201: LD_ADDR_VAR 0 3
51205: PUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: CALL_OW 274
51215: ST_TO_ADDR
// if not pom then
51216: LD_VAR 0 3
51220: NOT
51221: IFFALSE 51225
// exit ;
51223: GO 51395
// btype := GetBType ( building ) ;
51225: LD_ADDR_VAR 0 5
51229: PUSH
51230: LD_VAR 0 1
51234: PPUSH
51235: CALL_OW 266
51239: ST_TO_ADDR
// if btype = b_armoury then
51240: LD_VAR 0 5
51244: PUSH
51245: LD_INT 4
51247: EQUAL
51248: IFFALSE 51258
// btype := b_barracks ;
51250: LD_ADDR_VAR 0 5
51254: PUSH
51255: LD_INT 5
51257: ST_TO_ADDR
// if btype = b_depot then
51258: LD_VAR 0 5
51262: PUSH
51263: LD_INT 0
51265: EQUAL
51266: IFFALSE 51276
// btype := b_warehouse ;
51268: LD_ADDR_VAR 0 5
51272: PUSH
51273: LD_INT 1
51275: ST_TO_ADDR
// if btype = b_workshop then
51276: LD_VAR 0 5
51280: PUSH
51281: LD_INT 2
51283: EQUAL
51284: IFFALSE 51294
// btype := b_factory ;
51286: LD_ADDR_VAR 0 5
51290: PUSH
51291: LD_INT 3
51293: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51294: LD_ADDR_VAR 0 4
51298: PUSH
51299: LD_VAR 0 5
51303: PPUSH
51304: LD_VAR 0 1
51308: PPUSH
51309: CALL_OW 248
51313: PPUSH
51314: CALL_OW 450
51318: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51319: LD_ADDR_VAR 0 2
51323: PUSH
51324: LD_VAR 0 3
51328: PPUSH
51329: LD_INT 1
51331: PPUSH
51332: CALL_OW 275
51336: PUSH
51337: LD_VAR 0 4
51341: PUSH
51342: LD_INT 1
51344: ARRAY
51345: GREATEREQUAL
51346: PUSH
51347: LD_VAR 0 3
51351: PPUSH
51352: LD_INT 2
51354: PPUSH
51355: CALL_OW 275
51359: PUSH
51360: LD_VAR 0 4
51364: PUSH
51365: LD_INT 2
51367: ARRAY
51368: GREATEREQUAL
51369: AND
51370: PUSH
51371: LD_VAR 0 3
51375: PPUSH
51376: LD_INT 3
51378: PPUSH
51379: CALL_OW 275
51383: PUSH
51384: LD_VAR 0 4
51388: PUSH
51389: LD_INT 3
51391: ARRAY
51392: GREATEREQUAL
51393: AND
51394: ST_TO_ADDR
// end ;
51395: LD_VAR 0 2
51399: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51400: LD_INT 0
51402: PPUSH
51403: PPUSH
51404: PPUSH
// pom := GetBase ( building ) ;
51405: LD_ADDR_VAR 0 4
51409: PUSH
51410: LD_VAR 0 1
51414: PPUSH
51415: CALL_OW 274
51419: ST_TO_ADDR
// if not pom then
51420: LD_VAR 0 4
51424: NOT
51425: IFFALSE 51429
// exit ;
51427: GO 51530
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51429: LD_ADDR_VAR 0 5
51433: PUSH
51434: LD_VAR 0 2
51438: PPUSH
51439: LD_VAR 0 1
51443: PPUSH
51444: CALL_OW 248
51448: PPUSH
51449: CALL_OW 450
51453: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51454: LD_ADDR_VAR 0 3
51458: PUSH
51459: LD_VAR 0 4
51463: PPUSH
51464: LD_INT 1
51466: PPUSH
51467: CALL_OW 275
51471: PUSH
51472: LD_VAR 0 5
51476: PUSH
51477: LD_INT 1
51479: ARRAY
51480: GREATEREQUAL
51481: PUSH
51482: LD_VAR 0 4
51486: PPUSH
51487: LD_INT 2
51489: PPUSH
51490: CALL_OW 275
51494: PUSH
51495: LD_VAR 0 5
51499: PUSH
51500: LD_INT 2
51502: ARRAY
51503: GREATEREQUAL
51504: AND
51505: PUSH
51506: LD_VAR 0 4
51510: PPUSH
51511: LD_INT 3
51513: PPUSH
51514: CALL_OW 275
51518: PUSH
51519: LD_VAR 0 5
51523: PUSH
51524: LD_INT 3
51526: ARRAY
51527: GREATEREQUAL
51528: AND
51529: ST_TO_ADDR
// end ;
51530: LD_VAR 0 3
51534: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
51535: LD_INT 0
51537: PPUSH
51538: PPUSH
51539: PPUSH
51540: PPUSH
51541: PPUSH
51542: PPUSH
51543: PPUSH
51544: PPUSH
51545: PPUSH
51546: PPUSH
// result := false ;
51547: LD_ADDR_VAR 0 6
51551: PUSH
51552: LD_INT 0
51554: ST_TO_ADDR
// if not base or not btype or not x or not y then
51555: LD_VAR 0 1
51559: NOT
51560: PUSH
51561: LD_VAR 0 2
51565: NOT
51566: OR
51567: PUSH
51568: LD_VAR 0 3
51572: NOT
51573: OR
51574: PUSH
51575: LD_VAR 0 4
51579: NOT
51580: OR
51581: IFFALSE 51585
// exit ;
51583: GO 52194
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
51585: LD_ADDR_VAR 0 12
51589: PUSH
51590: LD_VAR 0 2
51594: PPUSH
51595: LD_VAR 0 3
51599: PPUSH
51600: LD_VAR 0 4
51604: PPUSH
51605: LD_VAR 0 5
51609: PPUSH
51610: LD_VAR 0 1
51614: PUSH
51615: LD_INT 1
51617: ARRAY
51618: PPUSH
51619: CALL_OW 248
51623: PPUSH
51624: LD_INT 0
51626: PPUSH
51627: CALL 53031 0 6
51631: ST_TO_ADDR
// if not hexes then
51632: LD_VAR 0 12
51636: NOT
51637: IFFALSE 51641
// exit ;
51639: GO 52194
// for i = 1 to hexes do
51641: LD_ADDR_VAR 0 7
51645: PUSH
51646: DOUBLE
51647: LD_INT 1
51649: DEC
51650: ST_TO_ADDR
51651: LD_VAR 0 12
51655: PUSH
51656: FOR_TO
51657: IFFALSE 52192
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51659: LD_ADDR_VAR 0 11
51663: PUSH
51664: LD_VAR 0 12
51668: PUSH
51669: LD_VAR 0 7
51673: ARRAY
51674: PUSH
51675: LD_INT 1
51677: ARRAY
51678: PPUSH
51679: LD_VAR 0 12
51683: PUSH
51684: LD_VAR 0 7
51688: ARRAY
51689: PUSH
51690: LD_INT 2
51692: ARRAY
51693: PPUSH
51694: CALL_OW 428
51698: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51699: LD_VAR 0 12
51703: PUSH
51704: LD_VAR 0 7
51708: ARRAY
51709: PUSH
51710: LD_INT 1
51712: ARRAY
51713: PPUSH
51714: LD_VAR 0 12
51718: PUSH
51719: LD_VAR 0 7
51723: ARRAY
51724: PUSH
51725: LD_INT 2
51727: ARRAY
51728: PPUSH
51729: CALL_OW 351
51733: PUSH
51734: LD_VAR 0 12
51738: PUSH
51739: LD_VAR 0 7
51743: ARRAY
51744: PUSH
51745: LD_INT 1
51747: ARRAY
51748: PPUSH
51749: LD_VAR 0 12
51753: PUSH
51754: LD_VAR 0 7
51758: ARRAY
51759: PUSH
51760: LD_INT 2
51762: ARRAY
51763: PPUSH
51764: CALL_OW 488
51768: NOT
51769: OR
51770: PUSH
51771: LD_VAR 0 11
51775: PPUSH
51776: CALL_OW 247
51780: PUSH
51781: LD_INT 3
51783: EQUAL
51784: OR
51785: IFFALSE 51791
// exit ;
51787: POP
51788: POP
51789: GO 52194
// if not tmp or not tmp in base then
51791: LD_VAR 0 11
51795: NOT
51796: PUSH
51797: LD_VAR 0 11
51801: PUSH
51802: LD_VAR 0 1
51806: IN
51807: NOT
51808: OR
51809: IFFALSE 51813
// continue ;
51811: GO 51656
// result := true ;
51813: LD_ADDR_VAR 0 6
51817: PUSH
51818: LD_INT 1
51820: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51821: LD_ADDR_VAR 0 15
51825: PUSH
51826: LD_VAR 0 1
51830: PPUSH
51831: LD_INT 22
51833: PUSH
51834: LD_VAR 0 11
51838: PPUSH
51839: CALL_OW 255
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: LD_INT 30
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 30
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PPUSH
51880: CALL_OW 72
51884: ST_TO_ADDR
// if dep then
51885: LD_VAR 0 15
51889: IFFALSE 52025
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51891: LD_ADDR_VAR 0 14
51895: PUSH
51896: LD_VAR 0 15
51900: PUSH
51901: LD_INT 1
51903: ARRAY
51904: PPUSH
51905: CALL_OW 250
51909: PPUSH
51910: LD_VAR 0 15
51914: PUSH
51915: LD_INT 1
51917: ARRAY
51918: PPUSH
51919: CALL_OW 254
51923: PPUSH
51924: LD_INT 5
51926: PPUSH
51927: CALL_OW 272
51931: PUSH
51932: LD_VAR 0 15
51936: PUSH
51937: LD_INT 1
51939: ARRAY
51940: PPUSH
51941: CALL_OW 251
51945: PPUSH
51946: LD_VAR 0 15
51950: PUSH
51951: LD_INT 1
51953: ARRAY
51954: PPUSH
51955: CALL_OW 254
51959: PPUSH
51960: LD_INT 5
51962: PPUSH
51963: CALL_OW 273
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51972: LD_VAR 0 14
51976: PUSH
51977: LD_INT 1
51979: ARRAY
51980: PPUSH
51981: LD_VAR 0 14
51985: PUSH
51986: LD_INT 2
51988: ARRAY
51989: PPUSH
51990: CALL_OW 488
51994: IFFALSE 52025
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51996: LD_VAR 0 11
52000: PPUSH
52001: LD_VAR 0 14
52005: PUSH
52006: LD_INT 1
52008: ARRAY
52009: PPUSH
52010: LD_VAR 0 14
52014: PUSH
52015: LD_INT 2
52017: ARRAY
52018: PPUSH
52019: CALL_OW 111
// continue ;
52023: GO 51656
// end ; end ; r := GetDir ( tmp ) ;
52025: LD_ADDR_VAR 0 13
52029: PUSH
52030: LD_VAR 0 11
52034: PPUSH
52035: CALL_OW 254
52039: ST_TO_ADDR
// if r = 5 then
52040: LD_VAR 0 13
52044: PUSH
52045: LD_INT 5
52047: EQUAL
52048: IFFALSE 52058
// r := 0 ;
52050: LD_ADDR_VAR 0 13
52054: PUSH
52055: LD_INT 0
52057: ST_TO_ADDR
// for j = r to 5 do
52058: LD_ADDR_VAR 0 8
52062: PUSH
52063: DOUBLE
52064: LD_VAR 0 13
52068: DEC
52069: ST_TO_ADDR
52070: LD_INT 5
52072: PUSH
52073: FOR_TO
52074: IFFALSE 52188
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52076: LD_ADDR_VAR 0 9
52080: PUSH
52081: LD_VAR 0 11
52085: PPUSH
52086: CALL_OW 250
52090: PPUSH
52091: LD_VAR 0 8
52095: PPUSH
52096: LD_INT 2
52098: PPUSH
52099: CALL_OW 272
52103: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52104: LD_ADDR_VAR 0 10
52108: PUSH
52109: LD_VAR 0 11
52113: PPUSH
52114: CALL_OW 251
52118: PPUSH
52119: LD_VAR 0 8
52123: PPUSH
52124: LD_INT 2
52126: PPUSH
52127: CALL_OW 273
52131: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52132: LD_VAR 0 9
52136: PPUSH
52137: LD_VAR 0 10
52141: PPUSH
52142: CALL_OW 488
52146: PUSH
52147: LD_VAR 0 9
52151: PPUSH
52152: LD_VAR 0 10
52156: PPUSH
52157: CALL_OW 428
52161: NOT
52162: AND
52163: IFFALSE 52186
// begin ComMoveXY ( tmp , _x , _y ) ;
52165: LD_VAR 0 11
52169: PPUSH
52170: LD_VAR 0 9
52174: PPUSH
52175: LD_VAR 0 10
52179: PPUSH
52180: CALL_OW 111
// break ;
52184: GO 52188
// end ; end ;
52186: GO 52073
52188: POP
52189: POP
// end ;
52190: GO 51656
52192: POP
52193: POP
// end ;
52194: LD_VAR 0 6
52198: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
52199: LD_INT 0
52201: PPUSH
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
52208: PPUSH
52209: PPUSH
52210: PPUSH
// result := false ;
52211: LD_ADDR_VAR 0 6
52215: PUSH
52216: LD_INT 0
52218: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52219: LD_VAR 0 1
52223: NOT
52224: PUSH
52225: LD_VAR 0 1
52229: PPUSH
52230: CALL_OW 266
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: IN
52245: NOT
52246: OR
52247: PUSH
52248: LD_VAR 0 2
52252: NOT
52253: OR
52254: PUSH
52255: LD_VAR 0 5
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: LD_INT 5
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: IN
52286: NOT
52287: OR
52288: PUSH
52289: LD_VAR 0 3
52293: PPUSH
52294: LD_VAR 0 4
52298: PPUSH
52299: CALL_OW 488
52303: NOT
52304: OR
52305: IFFALSE 52309
// exit ;
52307: GO 53026
// pom := GetBase ( depot ) ;
52309: LD_ADDR_VAR 0 10
52313: PUSH
52314: LD_VAR 0 1
52318: PPUSH
52319: CALL_OW 274
52323: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52324: LD_ADDR_VAR 0 11
52328: PUSH
52329: LD_VAR 0 2
52333: PPUSH
52334: LD_VAR 0 1
52338: PPUSH
52339: CALL_OW 248
52343: PPUSH
52344: CALL_OW 450
52348: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52349: LD_VAR 0 10
52353: PPUSH
52354: LD_INT 1
52356: PPUSH
52357: CALL_OW 275
52361: PUSH
52362: LD_VAR 0 11
52366: PUSH
52367: LD_INT 1
52369: ARRAY
52370: GREATEREQUAL
52371: PUSH
52372: LD_VAR 0 10
52376: PPUSH
52377: LD_INT 2
52379: PPUSH
52380: CALL_OW 275
52384: PUSH
52385: LD_VAR 0 11
52389: PUSH
52390: LD_INT 2
52392: ARRAY
52393: GREATEREQUAL
52394: AND
52395: PUSH
52396: LD_VAR 0 10
52400: PPUSH
52401: LD_INT 3
52403: PPUSH
52404: CALL_OW 275
52408: PUSH
52409: LD_VAR 0 11
52413: PUSH
52414: LD_INT 3
52416: ARRAY
52417: GREATEREQUAL
52418: AND
52419: NOT
52420: IFFALSE 52424
// exit ;
52422: GO 53026
// if GetBType ( depot ) = b_depot then
52424: LD_VAR 0 1
52428: PPUSH
52429: CALL_OW 266
52433: PUSH
52434: LD_INT 0
52436: EQUAL
52437: IFFALSE 52449
// dist := 28 else
52439: LD_ADDR_VAR 0 14
52443: PUSH
52444: LD_INT 28
52446: ST_TO_ADDR
52447: GO 52457
// dist := 36 ;
52449: LD_ADDR_VAR 0 14
52453: PUSH
52454: LD_INT 36
52456: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52457: LD_VAR 0 1
52461: PPUSH
52462: LD_VAR 0 3
52466: PPUSH
52467: LD_VAR 0 4
52471: PPUSH
52472: CALL_OW 297
52476: PUSH
52477: LD_VAR 0 14
52481: GREATER
52482: IFFALSE 52486
// exit ;
52484: GO 53026
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52486: LD_ADDR_VAR 0 12
52490: PUSH
52491: LD_VAR 0 2
52495: PPUSH
52496: LD_VAR 0 3
52500: PPUSH
52501: LD_VAR 0 4
52505: PPUSH
52506: LD_VAR 0 5
52510: PPUSH
52511: LD_VAR 0 1
52515: PPUSH
52516: CALL_OW 248
52520: PPUSH
52521: LD_INT 0
52523: PPUSH
52524: CALL 53031 0 6
52528: ST_TO_ADDR
// if not hexes then
52529: LD_VAR 0 12
52533: NOT
52534: IFFALSE 52538
// exit ;
52536: GO 53026
// hex := GetHexInfo ( x , y ) ;
52538: LD_ADDR_VAR 0 15
52542: PUSH
52543: LD_VAR 0 3
52547: PPUSH
52548: LD_VAR 0 4
52552: PPUSH
52553: CALL_OW 546
52557: ST_TO_ADDR
// if hex [ 1 ] then
52558: LD_VAR 0 15
52562: PUSH
52563: LD_INT 1
52565: ARRAY
52566: IFFALSE 52570
// exit ;
52568: GO 53026
// height := hex [ 2 ] ;
52570: LD_ADDR_VAR 0 13
52574: PUSH
52575: LD_VAR 0 15
52579: PUSH
52580: LD_INT 2
52582: ARRAY
52583: ST_TO_ADDR
// for i = 1 to hexes do
52584: LD_ADDR_VAR 0 7
52588: PUSH
52589: DOUBLE
52590: LD_INT 1
52592: DEC
52593: ST_TO_ADDR
52594: LD_VAR 0 12
52598: PUSH
52599: FOR_TO
52600: IFFALSE 52930
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52602: LD_VAR 0 12
52606: PUSH
52607: LD_VAR 0 7
52611: ARRAY
52612: PUSH
52613: LD_INT 1
52615: ARRAY
52616: PPUSH
52617: LD_VAR 0 12
52621: PUSH
52622: LD_VAR 0 7
52626: ARRAY
52627: PUSH
52628: LD_INT 2
52630: ARRAY
52631: PPUSH
52632: CALL_OW 488
52636: NOT
52637: PUSH
52638: LD_VAR 0 12
52642: PUSH
52643: LD_VAR 0 7
52647: ARRAY
52648: PUSH
52649: LD_INT 1
52651: ARRAY
52652: PPUSH
52653: LD_VAR 0 12
52657: PUSH
52658: LD_VAR 0 7
52662: ARRAY
52663: PUSH
52664: LD_INT 2
52666: ARRAY
52667: PPUSH
52668: CALL_OW 428
52672: PUSH
52673: LD_INT 0
52675: GREATER
52676: OR
52677: PUSH
52678: LD_VAR 0 12
52682: PUSH
52683: LD_VAR 0 7
52687: ARRAY
52688: PUSH
52689: LD_INT 1
52691: ARRAY
52692: PPUSH
52693: LD_VAR 0 12
52697: PUSH
52698: LD_VAR 0 7
52702: ARRAY
52703: PUSH
52704: LD_INT 2
52706: ARRAY
52707: PPUSH
52708: CALL_OW 351
52712: OR
52713: IFFALSE 52719
// exit ;
52715: POP
52716: POP
52717: GO 53026
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52719: LD_ADDR_VAR 0 8
52723: PUSH
52724: LD_VAR 0 12
52728: PUSH
52729: LD_VAR 0 7
52733: ARRAY
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: PPUSH
52739: LD_VAR 0 12
52743: PUSH
52744: LD_VAR 0 7
52748: ARRAY
52749: PUSH
52750: LD_INT 2
52752: ARRAY
52753: PPUSH
52754: CALL_OW 546
52758: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52759: LD_VAR 0 8
52763: PUSH
52764: LD_INT 1
52766: ARRAY
52767: PUSH
52768: LD_VAR 0 8
52772: PUSH
52773: LD_INT 2
52775: ARRAY
52776: PUSH
52777: LD_VAR 0 13
52781: PUSH
52782: LD_INT 2
52784: PLUS
52785: GREATER
52786: OR
52787: PUSH
52788: LD_VAR 0 8
52792: PUSH
52793: LD_INT 2
52795: ARRAY
52796: PUSH
52797: LD_VAR 0 13
52801: PUSH
52802: LD_INT 2
52804: MINUS
52805: LESS
52806: OR
52807: PUSH
52808: LD_VAR 0 8
52812: PUSH
52813: LD_INT 3
52815: ARRAY
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 8
52822: PUSH
52823: LD_INT 9
52825: PUSH
52826: LD_INT 10
52828: PUSH
52829: LD_INT 11
52831: PUSH
52832: LD_INT 12
52834: PUSH
52835: LD_INT 13
52837: PUSH
52838: LD_INT 16
52840: PUSH
52841: LD_INT 17
52843: PUSH
52844: LD_INT 18
52846: PUSH
52847: LD_INT 19
52849: PUSH
52850: LD_INT 20
52852: PUSH
52853: LD_INT 21
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: IN
52871: NOT
52872: OR
52873: PUSH
52874: LD_VAR 0 8
52878: PUSH
52879: LD_INT 5
52881: ARRAY
52882: NOT
52883: OR
52884: PUSH
52885: LD_VAR 0 8
52889: PUSH
52890: LD_INT 6
52892: ARRAY
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 7
52902: PUSH
52903: LD_INT 9
52905: PUSH
52906: LD_INT 10
52908: PUSH
52909: LD_INT 11
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: IN
52920: NOT
52921: OR
52922: IFFALSE 52928
// exit ;
52924: POP
52925: POP
52926: GO 53026
// end ;
52928: GO 52599
52930: POP
52931: POP
// side := GetSide ( depot ) ;
52932: LD_ADDR_VAR 0 9
52936: PUSH
52937: LD_VAR 0 1
52941: PPUSH
52942: CALL_OW 255
52946: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52947: LD_VAR 0 9
52951: PPUSH
52952: LD_VAR 0 3
52956: PPUSH
52957: LD_VAR 0 4
52961: PPUSH
52962: LD_INT 20
52964: PPUSH
52965: CALL 45680 0 4
52969: PUSH
52970: LD_INT 4
52972: ARRAY
52973: IFFALSE 52977
// exit ;
52975: GO 53026
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52977: LD_VAR 0 2
52981: PUSH
52982: LD_INT 29
52984: PUSH
52985: LD_INT 30
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: IN
52992: PUSH
52993: LD_VAR 0 3
52997: PPUSH
52998: LD_VAR 0 4
53002: PPUSH
53003: LD_VAR 0 9
53007: PPUSH
53008: CALL_OW 440
53012: NOT
53013: AND
53014: IFFALSE 53018
// exit ;
53016: GO 53026
// result := true ;
53018: LD_ADDR_VAR 0 6
53022: PUSH
53023: LD_INT 1
53025: ST_TO_ADDR
// end ;
53026: LD_VAR 0 6
53030: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53031: LD_INT 0
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
53042: PPUSH
53043: PPUSH
53044: PPUSH
53045: PPUSH
53046: PPUSH
53047: PPUSH
53048: PPUSH
53049: PPUSH
53050: PPUSH
53051: PPUSH
53052: PPUSH
53053: PPUSH
53054: PPUSH
53055: PPUSH
53056: PPUSH
53057: PPUSH
53058: PPUSH
53059: PPUSH
53060: PPUSH
53061: PPUSH
53062: PPUSH
53063: PPUSH
53064: PPUSH
53065: PPUSH
53066: PPUSH
53067: PPUSH
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
53072: PPUSH
53073: PPUSH
53074: PPUSH
53075: PPUSH
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
53085: PPUSH
53086: PPUSH
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
// result = [ ] ;
53091: LD_ADDR_VAR 0 7
53095: PUSH
53096: EMPTY
53097: ST_TO_ADDR
// temp_list = [ ] ;
53098: LD_ADDR_VAR 0 9
53102: PUSH
53103: EMPTY
53104: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53105: LD_VAR 0 4
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 3
53121: PUSH
53122: LD_INT 4
53124: PUSH
53125: LD_INT 5
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: IN
53136: NOT
53137: PUSH
53138: LD_VAR 0 1
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: IN
53153: PUSH
53154: LD_VAR 0 5
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: IN
53173: NOT
53174: AND
53175: OR
53176: IFFALSE 53180
// exit ;
53178: GO 71571
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53180: LD_VAR 0 1
53184: PUSH
53185: LD_INT 6
53187: PUSH
53188: LD_INT 7
53190: PUSH
53191: LD_INT 8
53193: PUSH
53194: LD_INT 13
53196: PUSH
53197: LD_INT 12
53199: PUSH
53200: LD_INT 15
53202: PUSH
53203: LD_INT 11
53205: PUSH
53206: LD_INT 14
53208: PUSH
53209: LD_INT 10
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: IN
53223: IFFALSE 53233
// btype = b_lab ;
53225: LD_ADDR_VAR 0 1
53229: PUSH
53230: LD_INT 6
53232: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53233: LD_VAR 0 6
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: IN
53252: NOT
53253: PUSH
53254: LD_VAR 0 1
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: LD_INT 6
53273: PUSH
53274: LD_INT 36
53276: PUSH
53277: LD_INT 4
53279: PUSH
53280: LD_INT 5
53282: PUSH
53283: LD_INT 31
53285: PUSH
53286: LD_INT 32
53288: PUSH
53289: LD_INT 33
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: IN
53305: NOT
53306: PUSH
53307: LD_VAR 0 6
53311: PUSH
53312: LD_INT 1
53314: EQUAL
53315: AND
53316: OR
53317: PUSH
53318: LD_VAR 0 1
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: IN
53333: NOT
53334: PUSH
53335: LD_VAR 0 6
53339: PUSH
53340: LD_INT 2
53342: EQUAL
53343: AND
53344: OR
53345: IFFALSE 53355
// mode = 0 ;
53347: LD_ADDR_VAR 0 6
53351: PUSH
53352: LD_INT 0
53354: ST_TO_ADDR
// case mode of 0 :
53355: LD_VAR 0 6
53359: PUSH
53360: LD_INT 0
53362: DOUBLE
53363: EQUAL
53364: IFTRUE 53368
53366: GO 64821
53368: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53369: LD_ADDR_VAR 0 11
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 3
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 3
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53562: LD_ADDR_VAR 0 12
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 3
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53758: LD_ADDR_VAR 0 13
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: LD_INT 2
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53957: LD_ADDR_VAR 0 14
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54153: LD_ADDR_VAR 0 15
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54346: LD_ADDR_VAR 0 16
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 3
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54539: LD_ADDR_VAR 0 17
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54769: LD_ADDR_VAR 0 18
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54999: LD_ADDR_VAR 0 19
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55229: LD_ADDR_VAR 0 20
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55459: LD_ADDR_VAR 0 21
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55689: LD_ADDR_VAR 0 22
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55919: LD_ADDR_VAR 0 23
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56199: LD_ADDR_VAR 0 24
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56475: LD_ADDR_VAR 0 25
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56749: LD_ADDR_VAR 0 26
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57025: LD_ADDR_VAR 0 27
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 2
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57305: LD_ADDR_VAR 0 28
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57587: LD_ADDR_VAR 0 29
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 3
57831: NEG
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57866: LD_ADDR_VAR 0 30
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 3
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58144: LD_ADDR_VAR 0 31
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58422: LD_ADDR_VAR 0 32
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58700: LD_ADDR_VAR 0 33
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: LD_INT 3
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 3
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58979: LD_ADDR_VAR 0 34
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 3
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59259: LD_ADDR_VAR 0 35
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59371: LD_ADDR_VAR 0 36
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59483: LD_ADDR_VAR 0 37
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59595: LD_ADDR_VAR 0 38
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59707: LD_ADDR_VAR 0 39
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59819: LD_ADDR_VAR 0 40
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59931: LD_ADDR_VAR 0 41
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60281: LD_ADDR_VAR 0 42
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: NEG
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: NEG
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60631: LD_ADDR_VAR 0 43
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: NEG
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60979: LD_ADDR_VAR 0 44
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 3
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 0
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 3
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61329: LD_ADDR_VAR 0 45
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 3
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: NEG
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61679: LD_ADDR_VAR 0 46
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 3
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 3
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 3
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 3
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: NEG
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 3
61986: NEG
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62027: LD_ADDR_VAR 0 47
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 2
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: NEG
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: LD_INT 2
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62178: LD_ADDR_VAR 0 48
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 2
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 2
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62325: LD_ADDR_VAR 0 49
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62469: LD_ADDR_VAR 0 50
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62613: LD_ADDR_VAR 0 51
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 2
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 2
62736: NEG
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62760: LD_ADDR_VAR 0 52
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: LD_INT 1
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: LD_INT 2
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: NEG
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62911: LD_ADDR_VAR 0 53
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: LD_INT 0
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 2
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 2
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 2
63087: NEG
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63141: LD_ADDR_VAR 0 54
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 2
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 2
63317: NEG
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63371: LD_ADDR_VAR 0 55
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63601: LD_ADDR_VAR 0 56
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 2
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63831: LD_ADDR_VAR 0 57
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 2
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: LD_INT 2
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 2
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 2
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64061: LD_ADDR_VAR 0 58
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: LD_INT 2
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: LD_INT 2
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 2
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64291: LD_ADDR_VAR 0 59
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64379: LD_ADDR_VAR 0 60
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64467: LD_ADDR_VAR 0 61
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64555: LD_ADDR_VAR 0 62
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64643: LD_ADDR_VAR 0 63
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64731: LD_ADDR_VAR 0 64
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: ST_TO_ADDR
// end ; 1 :
64819: GO 70716
64821: LD_INT 1
64823: DOUBLE
64824: EQUAL
64825: IFTRUE 64829
64827: GO 67452
64829: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64830: LD_ADDR_VAR 0 11
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 3
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: LIST
64873: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64874: LD_ADDR_VAR 0 12
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: LIST
64914: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64915: LD_ADDR_VAR 0 13
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: LD_INT 3
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: LIST
64954: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64955: LD_ADDR_VAR 0 14
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: LD_INT 3
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: LD_INT 3
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: LD_INT 2
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64996: LD_ADDR_VAR 0 15
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 3
65014: NEG
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65040: LD_ADDR_VAR 0 16
65044: PUSH
65045: LD_INT 2
65047: NEG
65048: PUSH
65049: LD_INT 3
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 3
65059: NEG
65060: PUSH
65061: LD_INT 2
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 3
65071: NEG
65072: PUSH
65073: LD_INT 3
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65086: LD_ADDR_VAR 0 17
65090: PUSH
65091: LD_INT 1
65093: NEG
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: LD_INT 3
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65130: LD_ADDR_VAR 0 18
65134: PUSH
65135: LD_INT 2
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 3
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65171: LD_ADDR_VAR 0 19
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 2
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: LIST
65210: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65211: LD_ADDR_VAR 0 20
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: LD_INT 3
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: LIST
65251: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65252: LD_ADDR_VAR 0 21
65256: PUSH
65257: LD_INT 2
65259: NEG
65260: PUSH
65261: LD_INT 1
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 3
65270: NEG
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65296: LD_ADDR_VAR 0 22
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: LD_INT 3
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 3
65327: NEG
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65342: LD_ADDR_VAR 0 23
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 4
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 3
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: LIST
65385: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65386: LD_ADDR_VAR 0 24
65390: PUSH
65391: LD_INT 3
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 4
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65427: LD_ADDR_VAR 0 25
65431: PUSH
65432: LD_INT 3
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 4
65444: PUSH
65445: LD_INT 3
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: LD_INT 4
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65467: LD_ADDR_VAR 0 26
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: PUSH
65485: LD_INT 4
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: LD_INT 3
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65508: LD_ADDR_VAR 0 27
65512: PUSH
65513: LD_INT 3
65515: NEG
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 3
65526: NEG
65527: PUSH
65528: LD_INT 1
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 4
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65552: LD_ADDR_VAR 0 28
65556: PUSH
65557: LD_INT 3
65559: NEG
65560: PUSH
65561: LD_INT 3
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 3
65571: NEG
65572: PUSH
65573: LD_INT 4
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 4
65583: NEG
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65598: LD_ADDR_VAR 0 29
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: LD_INT 3
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: LD_INT 4
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: LD_INT 4
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: LD_INT 5
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 5
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: LD_INT 6
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: LD_INT 6
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: LD_INT 5
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65753: LD_ADDR_VAR 0 30
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: LD_INT 1
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 4
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 4
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 4
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 5
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 5
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 5
65853: PUSH
65854: LD_INT 1
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 6
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 6
65874: PUSH
65875: LD_INT 1
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65896: LD_ADDR_VAR 0 31
65900: PUSH
65901: LD_INT 3
65903: PUSH
65904: LD_INT 2
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 2
65923: PUSH
65924: LD_INT 3
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 4
65933: PUSH
65934: LD_INT 3
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 4
65943: PUSH
65944: LD_INT 4
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: LD_INT 4
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 5
65963: PUSH
65964: LD_INT 4
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 5
65973: PUSH
65974: LD_INT 5
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 4
65983: PUSH
65984: LD_INT 5
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 6
65993: PUSH
65994: LD_INT 5
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 6
66003: PUSH
66004: LD_INT 6
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 5
66013: PUSH
66014: LD_INT 6
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66035: LD_ADDR_VAR 0 32
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 4
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 4
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: LD_INT 5
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 5
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: LD_INT 4
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: LD_INT 6
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: LD_INT 6
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: NEG
66156: PUSH
66157: LD_INT 5
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66178: LD_ADDR_VAR 0 33
66182: PUSH
66183: LD_INT 2
66185: NEG
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 3
66196: NEG
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 3
66219: NEG
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 4
66230: NEG
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 4
66241: NEG
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 4
66253: NEG
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 5
66264: NEG
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 5
66275: NEG
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 5
66287: NEG
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 6
66298: NEG
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 6
66309: NEG
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66333: LD_ADDR_VAR 0 34
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: LD_INT 2
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: LD_INT 3
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: NEG
66377: PUSH
66378: LD_INT 4
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 4
66388: NEG
66389: PUSH
66390: LD_INT 3
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 4
66400: NEG
66401: PUSH
66402: LD_INT 4
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 4
66412: NEG
66413: PUSH
66414: LD_INT 5
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 5
66424: NEG
66425: PUSH
66426: LD_INT 4
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 5
66436: NEG
66437: PUSH
66438: LD_INT 5
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 5
66448: NEG
66449: PUSH
66450: LD_INT 6
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 6
66460: NEG
66461: PUSH
66462: LD_INT 5
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 6
66472: NEG
66473: PUSH
66474: LD_INT 6
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66496: LD_ADDR_VAR 0 41
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: LIST
66539: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66540: LD_ADDR_VAR 0 42
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: LIST
66580: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66581: LD_ADDR_VAR 0 43
66585: PUSH
66586: LD_INT 2
66588: PUSH
66589: LD_INT 2
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 3
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: PUSH
66609: LD_INT 3
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66621: LD_ADDR_VAR 0 44
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_INT 2
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: LD_INT 3
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66662: LD_ADDR_VAR 0 45
66666: PUSH
66667: LD_INT 2
66669: NEG
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 2
66680: NEG
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 3
66691: NEG
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66706: LD_ADDR_VAR 0 46
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: NEG
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 3
66737: NEG
66738: PUSH
66739: LD_INT 2
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66752: LD_ADDR_VAR 0 47
66756: PUSH
66757: LD_INT 2
66759: NEG
66760: PUSH
66761: LD_INT 3
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 1
66771: NEG
66772: PUSH
66773: LD_INT 3
66775: NEG
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66785: LD_ADDR_VAR 0 48
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: LD_INT 2
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66816: LD_ADDR_VAR 0 49
66820: PUSH
66821: LD_INT 3
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 3
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66845: LD_ADDR_VAR 0 50
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: LD_INT 3
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: LD_INT 3
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66874: LD_ADDR_VAR 0 51
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: LD_INT 1
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66905: LD_ADDR_VAR 0 52
66909: PUSH
66910: LD_INT 3
66912: NEG
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: LD_INT 2
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66938: LD_ADDR_VAR 0 53
66942: PUSH
66943: LD_INT 1
66945: NEG
66946: PUSH
66947: LD_INT 3
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: LD_INT 3
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 1
66968: PUSH
66969: LD_INT 2
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66982: LD_ADDR_VAR 0 54
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: LIST
67022: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67023: LD_ADDR_VAR 0 55
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 3
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: PUSH
67051: LD_INT 3
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67063: LD_ADDR_VAR 0 56
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: LIST
67103: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67104: LD_ADDR_VAR 0 57
67108: PUSH
67109: LD_INT 2
67111: NEG
67112: PUSH
67113: LD_INT 1
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 3
67133: NEG
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: LIST
67147: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67148: LD_ADDR_VAR 0 58
67152: PUSH
67153: LD_INT 2
67155: NEG
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 3
67167: NEG
67168: PUSH
67169: LD_INT 2
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 3
67179: NEG
67180: PUSH
67181: LD_INT 3
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: LIST
67193: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67194: LD_ADDR_VAR 0 59
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 1
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67238: LD_ADDR_VAR 0 60
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: LD_INT 1
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67279: LD_ADDR_VAR 0 61
67283: PUSH
67284: LD_INT 2
67286: PUSH
67287: LD_INT 1
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: PUSH
67297: LD_INT 2
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67319: LD_ADDR_VAR 0 62
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: LD_INT 1
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: LIST
67359: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67360: LD_ADDR_VAR 0 63
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: LD_INT 0
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: LIST
67403: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67404: LD_ADDR_VAR 0 64
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 2
67423: NEG
67424: PUSH
67425: LD_INT 1
67427: NEG
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: LD_INT 2
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// end ; 2 :
67450: GO 70716
67452: LD_INT 2
67454: DOUBLE
67455: EQUAL
67456: IFTRUE 67460
67458: GO 70715
67460: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67461: LD_ADDR_VAR 0 29
67465: PUSH
67466: LD_INT 4
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 4
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 5
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 5
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 4
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 3
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 3
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 5
67551: PUSH
67552: LD_INT 2
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 3
67561: PUSH
67562: LD_INT 3
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 4
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: PUSH
67592: LD_INT 4
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 3
67601: PUSH
67602: LD_INT 4
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 4
67631: PUSH
67632: LD_INT 2
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 2
67641: PUSH
67642: LD_INT 4
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: LD_INT 4
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 5
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 5
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 4
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 5
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: NEG
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: NEG
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 3
67755: NEG
67756: PUSH
67757: LD_INT 1
67759: NEG
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: LD_INT 1
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: LD_INT 1
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 4
67800: NEG
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 4
67811: NEG
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 4
67823: NEG
67824: PUSH
67825: LD_INT 2
67827: NEG
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 4
67846: NEG
67847: PUSH
67848: LD_INT 4
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 4
67858: NEG
67859: PUSH
67860: LD_INT 5
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 3
67870: NEG
67871: PUSH
67872: LD_INT 4
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 3
67882: NEG
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 4
67894: NEG
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 5
67906: NEG
67907: PUSH
67908: LD_INT 4
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 5
67918: NEG
67919: PUSH
67920: LD_INT 5
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: LD_INT 5
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 5
67942: NEG
67943: PUSH
67944: LD_INT 3
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67999: LD_ADDR_VAR 0 30
68003: PUSH
68004: LD_INT 4
68006: PUSH
68007: LD_INT 4
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 5
68026: PUSH
68027: LD_INT 4
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 5
68036: PUSH
68037: LD_INT 5
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: LD_INT 5
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 3
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 3
68066: PUSH
68067: LD_INT 3
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 5
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: LD_INT 5
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 0
68096: PUSH
68097: LD_INT 3
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: LD_INT 3
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: LD_INT 4
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: LD_INT 4
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: LD_INT 3
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 1
68157: NEG
68158: PUSH
68159: LD_INT 2
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 2
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 2
68178: NEG
68179: PUSH
68180: LD_INT 2
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 4
68200: NEG
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 3
68212: NEG
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 3
68223: NEG
68224: PUSH
68225: LD_INT 1
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 4
68234: NEG
68235: PUSH
68236: LD_INT 1
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 5
68245: NEG
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 5
68256: NEG
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 5
68268: NEG
68269: PUSH
68270: LD_INT 2
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 3
68280: NEG
68281: PUSH
68282: LD_INT 2
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 3
68291: NEG
68292: PUSH
68293: LD_INT 3
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: LD_INT 4
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 2
68327: NEG
68328: PUSH
68329: LD_INT 2
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 3
68339: NEG
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 4
68351: NEG
68352: PUSH
68353: LD_INT 3
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 4
68363: NEG
68364: PUSH
68365: LD_INT 4
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 2
68375: NEG
68376: PUSH
68377: LD_INT 4
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 4
68387: NEG
68388: PUSH
68389: LD_INT 2
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: LD_INT 5
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: LD_INT 4
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 1
68432: PUSH
68433: LD_INT 3
68435: NEG
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 3
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: NEG
68455: PUSH
68456: LD_INT 4
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 1
68466: NEG
68467: PUSH
68468: LD_INT 5
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 2
68478: PUSH
68479: LD_INT 3
68481: NEG
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 2
68489: NEG
68490: PUSH
68491: LD_INT 5
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68546: LD_ADDR_VAR 0 31
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: LD_INT 4
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 1
68573: PUSH
68574: LD_INT 4
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: LD_INT 5
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: LD_INT 5
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: LD_INT 4
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 1
68614: NEG
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: LD_INT 5
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: LD_INT 3
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 3
68646: NEG
68647: PUSH
68648: LD_INT 0
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 3
68657: NEG
68658: PUSH
68659: LD_INT 1
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 2
68669: NEG
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: LD_INT 1
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 4
68702: NEG
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 4
68713: NEG
68714: PUSH
68715: LD_INT 1
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 4
68725: NEG
68726: PUSH
68727: LD_INT 2
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 2
68737: NEG
68738: PUSH
68739: LD_INT 2
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 4
68748: NEG
68749: PUSH
68750: LD_INT 4
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 4
68760: NEG
68761: PUSH
68762: LD_INT 5
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 3
68772: NEG
68773: PUSH
68774: LD_INT 4
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: NEG
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 4
68796: NEG
68797: PUSH
68798: LD_INT 3
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 5
68808: NEG
68809: PUSH
68810: LD_INT 4
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 5
68820: NEG
68821: PUSH
68822: LD_INT 5
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: LD_INT 5
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 5
68844: NEG
68845: PUSH
68846: LD_INT 3
68848: NEG
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 4
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 1
68878: PUSH
68879: LD_INT 3
68881: NEG
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 2
68892: NEG
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: LD_INT 2
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 1
68911: NEG
68912: PUSH
68913: LD_INT 3
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: LD_INT 2
68938: NEG
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: LD_INT 4
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 4
68968: PUSH
68969: LD_INT 1
68971: NEG
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 5
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 5
68989: PUSH
68990: LD_INT 1
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 4
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 3
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 3
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: LD_INT 2
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 5
69041: PUSH
69042: LD_INT 2
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69096: LD_ADDR_VAR 0 32
69100: PUSH
69101: LD_INT 4
69103: NEG
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 4
69114: NEG
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: NEG
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: LD_INT 1
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 4
69148: NEG
69149: PUSH
69150: LD_INT 1
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 5
69159: NEG
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 5
69170: NEG
69171: PUSH
69172: LD_INT 1
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 5
69182: NEG
69183: PUSH
69184: LD_INT 2
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 3
69194: NEG
69195: PUSH
69196: LD_INT 2
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 3
69205: NEG
69206: PUSH
69207: LD_INT 3
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 3
69217: NEG
69218: PUSH
69219: LD_INT 4
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 2
69229: NEG
69230: PUSH
69231: LD_INT 3
69233: NEG
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 2
69241: NEG
69242: PUSH
69243: LD_INT 2
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 3
69253: NEG
69254: PUSH
69255: LD_INT 2
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 4
69265: NEG
69266: PUSH
69267: LD_INT 3
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 4
69277: NEG
69278: PUSH
69279: LD_INT 4
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 2
69289: NEG
69290: PUSH
69291: LD_INT 4
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 4
69301: NEG
69302: PUSH
69303: LD_INT 2
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 0
69313: PUSH
69314: LD_INT 4
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 0
69324: PUSH
69325: LD_INT 5
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 1
69335: PUSH
69336: LD_INT 4
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: LD_INT 3
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: LD_INT 3
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 1
69368: NEG
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: LD_INT 5
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 2
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 2
69403: NEG
69404: PUSH
69405: LD_INT 5
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 3
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 4
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 3
69456: PUSH
69457: LD_INT 1
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 2
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 2
69476: PUSH
69477: LD_INT 1
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: PUSH
69488: LD_INT 2
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: LD_INT 2
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 4
69508: PUSH
69509: LD_INT 4
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 4
69518: PUSH
69519: LD_INT 3
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 5
69528: PUSH
69529: LD_INT 4
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 5
69538: PUSH
69539: LD_INT 5
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 4
69548: PUSH
69549: LD_INT 5
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 3
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 5
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: PUSH
69589: LD_INT 5
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69643: LD_ADDR_VAR 0 33
69647: PUSH
69648: LD_INT 4
69650: NEG
69651: PUSH
69652: LD_INT 4
69654: NEG
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 4
69662: NEG
69663: PUSH
69664: LD_INT 5
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 3
69674: NEG
69675: PUSH
69676: LD_INT 4
69678: NEG
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 3
69686: NEG
69687: PUSH
69688: LD_INT 3
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 4
69698: NEG
69699: PUSH
69700: LD_INT 3
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 5
69710: NEG
69711: PUSH
69712: LD_INT 4
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 5
69722: NEG
69723: PUSH
69724: LD_INT 5
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 3
69734: NEG
69735: PUSH
69736: LD_INT 5
69738: NEG
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 5
69746: NEG
69747: PUSH
69748: LD_INT 3
69750: NEG
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_INT 3
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 4
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 1
69780: PUSH
69781: LD_INT 3
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: LD_INT 2
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: LD_INT 2
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 1
69813: NEG
69814: PUSH
69815: LD_INT 3
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 1
69825: NEG
69826: PUSH
69827: LD_INT 4
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 2
69837: PUSH
69838: LD_INT 2
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 2
69848: NEG
69849: PUSH
69850: LD_INT 4
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 4
69860: PUSH
69861: LD_INT 0
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 4
69870: PUSH
69871: LD_INT 1
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 5
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 5
69891: PUSH
69892: LD_INT 1
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 4
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 3
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 3
69921: PUSH
69922: LD_INT 1
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 3
69932: PUSH
69933: LD_INT 2
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 5
69943: PUSH
69944: LD_INT 2
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 3
69953: PUSH
69954: LD_INT 3
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 3
69963: PUSH
69964: LD_INT 2
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 4
69973: PUSH
69974: LD_INT 3
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 4
69983: PUSH
69984: LD_INT 4
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 3
69993: PUSH
69994: LD_INT 4
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: LD_INT 3
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 2
70013: PUSH
70014: LD_INT 2
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: LD_INT 2
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: LD_INT 4
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 0
70043: PUSH
70044: LD_INT 4
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 1
70063: PUSH
70064: LD_INT 4
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: LD_INT 5
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: LD_INT 5
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: PUSH
70095: LD_INT 4
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 1
70104: NEG
70105: PUSH
70106: LD_INT 3
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: LD_INT 5
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 2
70125: NEG
70126: PUSH
70127: LD_INT 3
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70181: LD_ADDR_VAR 0 34
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: LD_INT 4
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 5
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: LD_INT 4
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 1
70221: PUSH
70222: LD_INT 3
70224: NEG
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: LD_INT 3
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 1
70243: NEG
70244: PUSH
70245: LD_INT 4
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 1
70255: NEG
70256: PUSH
70257: LD_INT 5
70259: NEG
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 2
70267: PUSH
70268: LD_INT 3
70270: NEG
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: LD_INT 5
70282: NEG
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 3
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 3
70300: PUSH
70301: LD_INT 1
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 4
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 4
70321: PUSH
70322: LD_INT 1
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 3
70331: PUSH
70332: LD_INT 1
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 2
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: LD_INT 1
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: LD_INT 2
70365: NEG
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 4
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 4
70383: PUSH
70384: LD_INT 4
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 4
70393: PUSH
70394: LD_INT 3
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 5
70403: PUSH
70404: LD_INT 4
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 5
70413: PUSH
70414: LD_INT 5
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 4
70423: PUSH
70424: LD_INT 5
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 3
70443: PUSH
70444: LD_INT 3
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 5
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 3
70463: PUSH
70464: LD_INT 5
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 0
70473: PUSH
70474: LD_INT 3
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 0
70483: PUSH
70484: LD_INT 2
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 1
70493: PUSH
70494: LD_INT 3
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 1
70503: PUSH
70504: LD_INT 4
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 1
70523: NEG
70524: PUSH
70525: LD_INT 3
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: LD_INT 2
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 2
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 2
70555: NEG
70556: PUSH
70557: LD_INT 2
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 4
70566: NEG
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 4
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 3
70589: NEG
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 3
70600: NEG
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 4
70611: NEG
70612: PUSH
70613: LD_INT 1
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 5
70622: NEG
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 5
70633: NEG
70634: PUSH
70635: LD_INT 1
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 5
70645: NEG
70646: PUSH
70647: LD_INT 2
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 3
70657: NEG
70658: PUSH
70659: LD_INT 2
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: ST_TO_ADDR
// end ; end ;
70713: GO 70716
70715: POP
// case btype of b_depot , b_warehouse :
70716: LD_VAR 0 1
70720: PUSH
70721: LD_INT 0
70723: DOUBLE
70724: EQUAL
70725: IFTRUE 70735
70727: LD_INT 1
70729: DOUBLE
70730: EQUAL
70731: IFTRUE 70735
70733: GO 70936
70735: POP
// case nation of nation_american :
70736: LD_VAR 0 5
70740: PUSH
70741: LD_INT 1
70743: DOUBLE
70744: EQUAL
70745: IFTRUE 70749
70747: GO 70805
70749: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70750: LD_ADDR_VAR 0 9
70754: PUSH
70755: LD_VAR 0 11
70759: PUSH
70760: LD_VAR 0 12
70764: PUSH
70765: LD_VAR 0 13
70769: PUSH
70770: LD_VAR 0 14
70774: PUSH
70775: LD_VAR 0 15
70779: PUSH
70780: LD_VAR 0 16
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: PUSH
70793: LD_VAR 0 4
70797: PUSH
70798: LD_INT 1
70800: PLUS
70801: ARRAY
70802: ST_TO_ADDR
70803: GO 70934
70805: LD_INT 2
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70813
70811: GO 70869
70813: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70814: LD_ADDR_VAR 0 9
70818: PUSH
70819: LD_VAR 0 17
70823: PUSH
70824: LD_VAR 0 18
70828: PUSH
70829: LD_VAR 0 19
70833: PUSH
70834: LD_VAR 0 20
70838: PUSH
70839: LD_VAR 0 21
70843: PUSH
70844: LD_VAR 0 22
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: PUSH
70857: LD_VAR 0 4
70861: PUSH
70862: LD_INT 1
70864: PLUS
70865: ARRAY
70866: ST_TO_ADDR
70867: GO 70934
70869: LD_INT 3
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70877
70875: GO 70933
70877: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70878: LD_ADDR_VAR 0 9
70882: PUSH
70883: LD_VAR 0 23
70887: PUSH
70888: LD_VAR 0 24
70892: PUSH
70893: LD_VAR 0 25
70897: PUSH
70898: LD_VAR 0 26
70902: PUSH
70903: LD_VAR 0 27
70907: PUSH
70908: LD_VAR 0 28
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 4
70925: PUSH
70926: LD_INT 1
70928: PLUS
70929: ARRAY
70930: ST_TO_ADDR
70931: GO 70934
70933: POP
70934: GO 71489
70936: LD_INT 2
70938: DOUBLE
70939: EQUAL
70940: IFTRUE 70950
70942: LD_INT 3
70944: DOUBLE
70945: EQUAL
70946: IFTRUE 70950
70948: GO 71006
70950: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70951: LD_ADDR_VAR 0 9
70955: PUSH
70956: LD_VAR 0 29
70960: PUSH
70961: LD_VAR 0 30
70965: PUSH
70966: LD_VAR 0 31
70970: PUSH
70971: LD_VAR 0 32
70975: PUSH
70976: LD_VAR 0 33
70980: PUSH
70981: LD_VAR 0 34
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: PUSH
70994: LD_VAR 0 4
70998: PUSH
70999: LD_INT 1
71001: PLUS
71002: ARRAY
71003: ST_TO_ADDR
71004: GO 71489
71006: LD_INT 16
71008: DOUBLE
71009: EQUAL
71010: IFTRUE 71068
71012: LD_INT 17
71014: DOUBLE
71015: EQUAL
71016: IFTRUE 71068
71018: LD_INT 18
71020: DOUBLE
71021: EQUAL
71022: IFTRUE 71068
71024: LD_INT 19
71026: DOUBLE
71027: EQUAL
71028: IFTRUE 71068
71030: LD_INT 22
71032: DOUBLE
71033: EQUAL
71034: IFTRUE 71068
71036: LD_INT 20
71038: DOUBLE
71039: EQUAL
71040: IFTRUE 71068
71042: LD_INT 21
71044: DOUBLE
71045: EQUAL
71046: IFTRUE 71068
71048: LD_INT 23
71050: DOUBLE
71051: EQUAL
71052: IFTRUE 71068
71054: LD_INT 24
71056: DOUBLE
71057: EQUAL
71058: IFTRUE 71068
71060: LD_INT 25
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71068
71066: GO 71124
71068: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71069: LD_ADDR_VAR 0 9
71073: PUSH
71074: LD_VAR 0 35
71078: PUSH
71079: LD_VAR 0 36
71083: PUSH
71084: LD_VAR 0 37
71088: PUSH
71089: LD_VAR 0 38
71093: PUSH
71094: LD_VAR 0 39
71098: PUSH
71099: LD_VAR 0 40
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: PUSH
71112: LD_VAR 0 4
71116: PUSH
71117: LD_INT 1
71119: PLUS
71120: ARRAY
71121: ST_TO_ADDR
71122: GO 71489
71124: LD_INT 6
71126: DOUBLE
71127: EQUAL
71128: IFTRUE 71180
71130: LD_INT 7
71132: DOUBLE
71133: EQUAL
71134: IFTRUE 71180
71136: LD_INT 8
71138: DOUBLE
71139: EQUAL
71140: IFTRUE 71180
71142: LD_INT 13
71144: DOUBLE
71145: EQUAL
71146: IFTRUE 71180
71148: LD_INT 12
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71180
71154: LD_INT 15
71156: DOUBLE
71157: EQUAL
71158: IFTRUE 71180
71160: LD_INT 11
71162: DOUBLE
71163: EQUAL
71164: IFTRUE 71180
71166: LD_INT 14
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71180
71172: LD_INT 10
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71180
71178: GO 71236
71180: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71181: LD_ADDR_VAR 0 9
71185: PUSH
71186: LD_VAR 0 41
71190: PUSH
71191: LD_VAR 0 42
71195: PUSH
71196: LD_VAR 0 43
71200: PUSH
71201: LD_VAR 0 44
71205: PUSH
71206: LD_VAR 0 45
71210: PUSH
71211: LD_VAR 0 46
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: PUSH
71224: LD_VAR 0 4
71228: PUSH
71229: LD_INT 1
71231: PLUS
71232: ARRAY
71233: ST_TO_ADDR
71234: GO 71489
71236: LD_INT 36
71238: DOUBLE
71239: EQUAL
71240: IFTRUE 71244
71242: GO 71300
71244: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71245: LD_ADDR_VAR 0 9
71249: PUSH
71250: LD_VAR 0 47
71254: PUSH
71255: LD_VAR 0 48
71259: PUSH
71260: LD_VAR 0 49
71264: PUSH
71265: LD_VAR 0 50
71269: PUSH
71270: LD_VAR 0 51
71274: PUSH
71275: LD_VAR 0 52
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: PUSH
71288: LD_VAR 0 4
71292: PUSH
71293: LD_INT 1
71295: PLUS
71296: ARRAY
71297: ST_TO_ADDR
71298: GO 71489
71300: LD_INT 4
71302: DOUBLE
71303: EQUAL
71304: IFTRUE 71326
71306: LD_INT 5
71308: DOUBLE
71309: EQUAL
71310: IFTRUE 71326
71312: LD_INT 34
71314: DOUBLE
71315: EQUAL
71316: IFTRUE 71326
71318: LD_INT 37
71320: DOUBLE
71321: EQUAL
71322: IFTRUE 71326
71324: GO 71382
71326: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71327: LD_ADDR_VAR 0 9
71331: PUSH
71332: LD_VAR 0 53
71336: PUSH
71337: LD_VAR 0 54
71341: PUSH
71342: LD_VAR 0 55
71346: PUSH
71347: LD_VAR 0 56
71351: PUSH
71352: LD_VAR 0 57
71356: PUSH
71357: LD_VAR 0 58
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: PUSH
71370: LD_VAR 0 4
71374: PUSH
71375: LD_INT 1
71377: PLUS
71378: ARRAY
71379: ST_TO_ADDR
71380: GO 71489
71382: LD_INT 31
71384: DOUBLE
71385: EQUAL
71386: IFTRUE 71432
71388: LD_INT 32
71390: DOUBLE
71391: EQUAL
71392: IFTRUE 71432
71394: LD_INT 33
71396: DOUBLE
71397: EQUAL
71398: IFTRUE 71432
71400: LD_INT 27
71402: DOUBLE
71403: EQUAL
71404: IFTRUE 71432
71406: LD_INT 26
71408: DOUBLE
71409: EQUAL
71410: IFTRUE 71432
71412: LD_INT 28
71414: DOUBLE
71415: EQUAL
71416: IFTRUE 71432
71418: LD_INT 29
71420: DOUBLE
71421: EQUAL
71422: IFTRUE 71432
71424: LD_INT 30
71426: DOUBLE
71427: EQUAL
71428: IFTRUE 71432
71430: GO 71488
71432: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71433: LD_ADDR_VAR 0 9
71437: PUSH
71438: LD_VAR 0 59
71442: PUSH
71443: LD_VAR 0 60
71447: PUSH
71448: LD_VAR 0 61
71452: PUSH
71453: LD_VAR 0 62
71457: PUSH
71458: LD_VAR 0 63
71462: PUSH
71463: LD_VAR 0 64
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: PUSH
71476: LD_VAR 0 4
71480: PUSH
71481: LD_INT 1
71483: PLUS
71484: ARRAY
71485: ST_TO_ADDR
71486: GO 71489
71488: POP
// temp_list2 = [ ] ;
71489: LD_ADDR_VAR 0 10
71493: PUSH
71494: EMPTY
71495: ST_TO_ADDR
// for i in temp_list do
71496: LD_ADDR_VAR 0 8
71500: PUSH
71501: LD_VAR 0 9
71505: PUSH
71506: FOR_IN
71507: IFFALSE 71559
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71509: LD_ADDR_VAR 0 10
71513: PUSH
71514: LD_VAR 0 10
71518: PUSH
71519: LD_VAR 0 8
71523: PUSH
71524: LD_INT 1
71526: ARRAY
71527: PUSH
71528: LD_VAR 0 2
71532: PLUS
71533: PUSH
71534: LD_VAR 0 8
71538: PUSH
71539: LD_INT 2
71541: ARRAY
71542: PUSH
71543: LD_VAR 0 3
71547: PLUS
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: EMPTY
71554: LIST
71555: ADD
71556: ST_TO_ADDR
71557: GO 71506
71559: POP
71560: POP
// result = temp_list2 ;
71561: LD_ADDR_VAR 0 7
71565: PUSH
71566: LD_VAR 0 10
71570: ST_TO_ADDR
// end ;
71571: LD_VAR 0 7
71575: RET
// export function EnemyInRange ( unit , dist ) ; begin
71576: LD_INT 0
71578: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71579: LD_ADDR_VAR 0 3
71583: PUSH
71584: LD_VAR 0 1
71588: PPUSH
71589: CALL_OW 255
71593: PPUSH
71594: LD_VAR 0 1
71598: PPUSH
71599: CALL_OW 250
71603: PPUSH
71604: LD_VAR 0 1
71608: PPUSH
71609: CALL_OW 251
71613: PPUSH
71614: LD_VAR 0 2
71618: PPUSH
71619: CALL 45680 0 4
71623: PUSH
71624: LD_INT 4
71626: ARRAY
71627: ST_TO_ADDR
// end ;
71628: LD_VAR 0 3
71632: RET
// export function PlayerSeeMe ( unit ) ; begin
71633: LD_INT 0
71635: PPUSH
// result := See ( your_side , unit ) ;
71636: LD_ADDR_VAR 0 2
71640: PUSH
71641: LD_OWVAR 2
71645: PPUSH
71646: LD_VAR 0 1
71650: PPUSH
71651: CALL_OW 292
71655: ST_TO_ADDR
// end ;
71656: LD_VAR 0 2
71660: RET
// export function ReverseDir ( unit ) ; begin
71661: LD_INT 0
71663: PPUSH
// if not unit then
71664: LD_VAR 0 1
71668: NOT
71669: IFFALSE 71673
// exit ;
71671: GO 71696
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71673: LD_ADDR_VAR 0 2
71677: PUSH
71678: LD_VAR 0 1
71682: PPUSH
71683: CALL_OW 254
71687: PUSH
71688: LD_INT 3
71690: PLUS
71691: PUSH
71692: LD_INT 6
71694: MOD
71695: ST_TO_ADDR
// end ;
71696: LD_VAR 0 2
71700: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71701: LD_INT 0
71703: PPUSH
71704: PPUSH
71705: PPUSH
71706: PPUSH
71707: PPUSH
// if not hexes then
71708: LD_VAR 0 2
71712: NOT
71713: IFFALSE 71717
// exit ;
71715: GO 71865
// dist := 9999 ;
71717: LD_ADDR_VAR 0 5
71721: PUSH
71722: LD_INT 9999
71724: ST_TO_ADDR
// for i = 1 to hexes do
71725: LD_ADDR_VAR 0 4
71729: PUSH
71730: DOUBLE
71731: LD_INT 1
71733: DEC
71734: ST_TO_ADDR
71735: LD_VAR 0 2
71739: PUSH
71740: FOR_TO
71741: IFFALSE 71853
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71743: LD_VAR 0 1
71747: PPUSH
71748: LD_VAR 0 2
71752: PUSH
71753: LD_VAR 0 4
71757: ARRAY
71758: PUSH
71759: LD_INT 1
71761: ARRAY
71762: PPUSH
71763: LD_VAR 0 2
71767: PUSH
71768: LD_VAR 0 4
71772: ARRAY
71773: PUSH
71774: LD_INT 2
71776: ARRAY
71777: PPUSH
71778: CALL_OW 297
71782: PUSH
71783: LD_VAR 0 5
71787: LESS
71788: IFFALSE 71851
// begin hex := hexes [ i ] ;
71790: LD_ADDR_VAR 0 7
71794: PUSH
71795: LD_VAR 0 2
71799: PUSH
71800: LD_VAR 0 4
71804: ARRAY
71805: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71806: LD_ADDR_VAR 0 5
71810: PUSH
71811: LD_VAR 0 1
71815: PPUSH
71816: LD_VAR 0 2
71820: PUSH
71821: LD_VAR 0 4
71825: ARRAY
71826: PUSH
71827: LD_INT 1
71829: ARRAY
71830: PPUSH
71831: LD_VAR 0 2
71835: PUSH
71836: LD_VAR 0 4
71840: ARRAY
71841: PUSH
71842: LD_INT 2
71844: ARRAY
71845: PPUSH
71846: CALL_OW 297
71850: ST_TO_ADDR
// end ; end ;
71851: GO 71740
71853: POP
71854: POP
// result := hex ;
71855: LD_ADDR_VAR 0 3
71859: PUSH
71860: LD_VAR 0 7
71864: ST_TO_ADDR
// end ;
71865: LD_VAR 0 3
71869: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71870: LD_INT 0
71872: PPUSH
71873: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71874: LD_VAR 0 1
71878: NOT
71879: PUSH
71880: LD_VAR 0 1
71884: PUSH
71885: LD_INT 21
71887: PUSH
71888: LD_INT 2
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 23
71897: PUSH
71898: LD_INT 2
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PPUSH
71909: CALL_OW 69
71913: IN
71914: NOT
71915: OR
71916: IFFALSE 71920
// exit ;
71918: GO 71967
// for i = 1 to 3 do
71920: LD_ADDR_VAR 0 3
71924: PUSH
71925: DOUBLE
71926: LD_INT 1
71928: DEC
71929: ST_TO_ADDR
71930: LD_INT 3
71932: PUSH
71933: FOR_TO
71934: IFFALSE 71965
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71936: LD_VAR 0 1
71940: PPUSH
71941: CALL_OW 250
71945: PPUSH
71946: LD_VAR 0 1
71950: PPUSH
71951: CALL_OW 251
71955: PPUSH
71956: LD_INT 1
71958: PPUSH
71959: CALL_OW 453
71963: GO 71933
71965: POP
71966: POP
// end ;
71967: LD_VAR 0 2
71971: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71972: LD_INT 0
71974: PPUSH
71975: PPUSH
71976: PPUSH
71977: PPUSH
71978: PPUSH
71979: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71980: LD_VAR 0 1
71984: NOT
71985: PUSH
71986: LD_VAR 0 2
71990: NOT
71991: OR
71992: PUSH
71993: LD_VAR 0 1
71997: PPUSH
71998: CALL_OW 314
72002: OR
72003: IFFALSE 72007
// exit ;
72005: GO 72448
// x := GetX ( enemy_unit ) ;
72007: LD_ADDR_VAR 0 7
72011: PUSH
72012: LD_VAR 0 2
72016: PPUSH
72017: CALL_OW 250
72021: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72022: LD_ADDR_VAR 0 8
72026: PUSH
72027: LD_VAR 0 2
72031: PPUSH
72032: CALL_OW 251
72036: ST_TO_ADDR
// if not x or not y then
72037: LD_VAR 0 7
72041: NOT
72042: PUSH
72043: LD_VAR 0 8
72047: NOT
72048: OR
72049: IFFALSE 72053
// exit ;
72051: GO 72448
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72053: LD_ADDR_VAR 0 6
72057: PUSH
72058: LD_VAR 0 7
72062: PPUSH
72063: LD_INT 0
72065: PPUSH
72066: LD_INT 4
72068: PPUSH
72069: CALL_OW 272
72073: PUSH
72074: LD_VAR 0 8
72078: PPUSH
72079: LD_INT 0
72081: PPUSH
72082: LD_INT 4
72084: PPUSH
72085: CALL_OW 273
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_VAR 0 7
72098: PPUSH
72099: LD_INT 1
72101: PPUSH
72102: LD_INT 4
72104: PPUSH
72105: CALL_OW 272
72109: PUSH
72110: LD_VAR 0 8
72114: PPUSH
72115: LD_INT 1
72117: PPUSH
72118: LD_INT 4
72120: PPUSH
72121: CALL_OW 273
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_VAR 0 7
72134: PPUSH
72135: LD_INT 2
72137: PPUSH
72138: LD_INT 4
72140: PPUSH
72141: CALL_OW 272
72145: PUSH
72146: LD_VAR 0 8
72150: PPUSH
72151: LD_INT 2
72153: PPUSH
72154: LD_INT 4
72156: PPUSH
72157: CALL_OW 273
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_VAR 0 7
72170: PPUSH
72171: LD_INT 3
72173: PPUSH
72174: LD_INT 4
72176: PPUSH
72177: CALL_OW 272
72181: PUSH
72182: LD_VAR 0 8
72186: PPUSH
72187: LD_INT 3
72189: PPUSH
72190: LD_INT 4
72192: PPUSH
72193: CALL_OW 273
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_VAR 0 7
72206: PPUSH
72207: LD_INT 4
72209: PPUSH
72210: LD_INT 4
72212: PPUSH
72213: CALL_OW 272
72217: PUSH
72218: LD_VAR 0 8
72222: PPUSH
72223: LD_INT 4
72225: PPUSH
72226: LD_INT 4
72228: PPUSH
72229: CALL_OW 273
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_VAR 0 7
72242: PPUSH
72243: LD_INT 5
72245: PPUSH
72246: LD_INT 4
72248: PPUSH
72249: CALL_OW 272
72253: PUSH
72254: LD_VAR 0 8
72258: PPUSH
72259: LD_INT 5
72261: PPUSH
72262: LD_INT 4
72264: PPUSH
72265: CALL_OW 273
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: ST_TO_ADDR
// for i = tmp downto 1 do
72282: LD_ADDR_VAR 0 4
72286: PUSH
72287: DOUBLE
72288: LD_VAR 0 6
72292: INC
72293: ST_TO_ADDR
72294: LD_INT 1
72296: PUSH
72297: FOR_DOWNTO
72298: IFFALSE 72399
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72300: LD_VAR 0 6
72304: PUSH
72305: LD_VAR 0 4
72309: ARRAY
72310: PUSH
72311: LD_INT 1
72313: ARRAY
72314: PPUSH
72315: LD_VAR 0 6
72319: PUSH
72320: LD_VAR 0 4
72324: ARRAY
72325: PUSH
72326: LD_INT 2
72328: ARRAY
72329: PPUSH
72330: CALL_OW 488
72334: NOT
72335: PUSH
72336: LD_VAR 0 6
72340: PUSH
72341: LD_VAR 0 4
72345: ARRAY
72346: PUSH
72347: LD_INT 1
72349: ARRAY
72350: PPUSH
72351: LD_VAR 0 6
72355: PUSH
72356: LD_VAR 0 4
72360: ARRAY
72361: PUSH
72362: LD_INT 2
72364: ARRAY
72365: PPUSH
72366: CALL_OW 428
72370: PUSH
72371: LD_INT 0
72373: NONEQUAL
72374: OR
72375: IFFALSE 72397
// tmp := Delete ( tmp , i ) ;
72377: LD_ADDR_VAR 0 6
72381: PUSH
72382: LD_VAR 0 6
72386: PPUSH
72387: LD_VAR 0 4
72391: PPUSH
72392: CALL_OW 3
72396: ST_TO_ADDR
72397: GO 72297
72399: POP
72400: POP
// j := GetClosestHex ( unit , tmp ) ;
72401: LD_ADDR_VAR 0 5
72405: PUSH
72406: LD_VAR 0 1
72410: PPUSH
72411: LD_VAR 0 6
72415: PPUSH
72416: CALL 71701 0 2
72420: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72421: LD_VAR 0 1
72425: PPUSH
72426: LD_VAR 0 5
72430: PUSH
72431: LD_INT 1
72433: ARRAY
72434: PPUSH
72435: LD_VAR 0 5
72439: PUSH
72440: LD_INT 2
72442: ARRAY
72443: PPUSH
72444: CALL_OW 111
// end ;
72448: LD_VAR 0 3
72452: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72453: LD_INT 0
72455: PPUSH
72456: PPUSH
72457: PPUSH
// uc_side = 0 ;
72458: LD_ADDR_OWVAR 20
72462: PUSH
72463: LD_INT 0
72465: ST_TO_ADDR
// uc_nation = 0 ;
72466: LD_ADDR_OWVAR 21
72470: PUSH
72471: LD_INT 0
72473: ST_TO_ADDR
// InitHc_All ( ) ;
72474: CALL_OW 584
// InitVc ;
72478: CALL_OW 20
// if mastodonts then
72482: LD_VAR 0 6
72486: IFFALSE 72553
// for i = 1 to mastodonts do
72488: LD_ADDR_VAR 0 11
72492: PUSH
72493: DOUBLE
72494: LD_INT 1
72496: DEC
72497: ST_TO_ADDR
72498: LD_VAR 0 6
72502: PUSH
72503: FOR_TO
72504: IFFALSE 72551
// begin vc_chassis := 31 ;
72506: LD_ADDR_OWVAR 37
72510: PUSH
72511: LD_INT 31
72513: ST_TO_ADDR
// vc_control := control_rider ;
72514: LD_ADDR_OWVAR 38
72518: PUSH
72519: LD_INT 4
72521: ST_TO_ADDR
// animal := CreateVehicle ;
72522: LD_ADDR_VAR 0 12
72526: PUSH
72527: CALL_OW 45
72531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72532: LD_VAR 0 12
72536: PPUSH
72537: LD_VAR 0 8
72541: PPUSH
72542: LD_INT 0
72544: PPUSH
72545: CALL 74741 0 3
// end ;
72549: GO 72503
72551: POP
72552: POP
// if horses then
72553: LD_VAR 0 5
72557: IFFALSE 72624
// for i = 1 to horses do
72559: LD_ADDR_VAR 0 11
72563: PUSH
72564: DOUBLE
72565: LD_INT 1
72567: DEC
72568: ST_TO_ADDR
72569: LD_VAR 0 5
72573: PUSH
72574: FOR_TO
72575: IFFALSE 72622
// begin hc_class := 21 ;
72577: LD_ADDR_OWVAR 28
72581: PUSH
72582: LD_INT 21
72584: ST_TO_ADDR
// hc_gallery :=  ;
72585: LD_ADDR_OWVAR 33
72589: PUSH
72590: LD_STRING 
72592: ST_TO_ADDR
// animal := CreateHuman ;
72593: LD_ADDR_VAR 0 12
72597: PUSH
72598: CALL_OW 44
72602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72603: LD_VAR 0 12
72607: PPUSH
72608: LD_VAR 0 8
72612: PPUSH
72613: LD_INT 0
72615: PPUSH
72616: CALL 74741 0 3
// end ;
72620: GO 72574
72622: POP
72623: POP
// if birds then
72624: LD_VAR 0 1
72628: IFFALSE 72695
// for i = 1 to birds do
72630: LD_ADDR_VAR 0 11
72634: PUSH
72635: DOUBLE
72636: LD_INT 1
72638: DEC
72639: ST_TO_ADDR
72640: LD_VAR 0 1
72644: PUSH
72645: FOR_TO
72646: IFFALSE 72693
// begin hc_class = 18 ;
72648: LD_ADDR_OWVAR 28
72652: PUSH
72653: LD_INT 18
72655: ST_TO_ADDR
// hc_gallery =  ;
72656: LD_ADDR_OWVAR 33
72660: PUSH
72661: LD_STRING 
72663: ST_TO_ADDR
// animal := CreateHuman ;
72664: LD_ADDR_VAR 0 12
72668: PUSH
72669: CALL_OW 44
72673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72674: LD_VAR 0 12
72678: PPUSH
72679: LD_VAR 0 8
72683: PPUSH
72684: LD_INT 0
72686: PPUSH
72687: CALL 74741 0 3
// end ;
72691: GO 72645
72693: POP
72694: POP
// if tigers then
72695: LD_VAR 0 2
72699: IFFALSE 72783
// for i = 1 to tigers do
72701: LD_ADDR_VAR 0 11
72705: PUSH
72706: DOUBLE
72707: LD_INT 1
72709: DEC
72710: ST_TO_ADDR
72711: LD_VAR 0 2
72715: PUSH
72716: FOR_TO
72717: IFFALSE 72781
// begin hc_class = class_tiger ;
72719: LD_ADDR_OWVAR 28
72723: PUSH
72724: LD_INT 14
72726: ST_TO_ADDR
// hc_gallery =  ;
72727: LD_ADDR_OWVAR 33
72731: PUSH
72732: LD_STRING 
72734: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72735: LD_ADDR_OWVAR 35
72739: PUSH
72740: LD_INT 7
72742: NEG
72743: PPUSH
72744: LD_INT 7
72746: PPUSH
72747: CALL_OW 12
72751: ST_TO_ADDR
// animal := CreateHuman ;
72752: LD_ADDR_VAR 0 12
72756: PUSH
72757: CALL_OW 44
72761: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72762: LD_VAR 0 12
72766: PPUSH
72767: LD_VAR 0 8
72771: PPUSH
72772: LD_INT 0
72774: PPUSH
72775: CALL 74741 0 3
// end ;
72779: GO 72716
72781: POP
72782: POP
// if apemans then
72783: LD_VAR 0 3
72787: IFFALSE 72910
// for i = 1 to apemans do
72789: LD_ADDR_VAR 0 11
72793: PUSH
72794: DOUBLE
72795: LD_INT 1
72797: DEC
72798: ST_TO_ADDR
72799: LD_VAR 0 3
72803: PUSH
72804: FOR_TO
72805: IFFALSE 72908
// begin hc_class = class_apeman ;
72807: LD_ADDR_OWVAR 28
72811: PUSH
72812: LD_INT 12
72814: ST_TO_ADDR
// hc_gallery =  ;
72815: LD_ADDR_OWVAR 33
72819: PUSH
72820: LD_STRING 
72822: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
72823: LD_ADDR_OWVAR 35
72827: PUSH
72828: LD_INT 5
72830: NEG
72831: PPUSH
72832: LD_INT 5
72834: PPUSH
72835: CALL_OW 12
72839: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72840: LD_ADDR_OWVAR 31
72844: PUSH
72845: LD_INT 1
72847: PPUSH
72848: LD_INT 3
72850: PPUSH
72851: CALL_OW 12
72855: PUSH
72856: LD_INT 1
72858: PPUSH
72859: LD_INT 3
72861: PPUSH
72862: CALL_OW 12
72866: PUSH
72867: LD_INT 0
72869: PUSH
72870: LD_INT 0
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: ST_TO_ADDR
// animal := CreateHuman ;
72879: LD_ADDR_VAR 0 12
72883: PUSH
72884: CALL_OW 44
72888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72889: LD_VAR 0 12
72893: PPUSH
72894: LD_VAR 0 8
72898: PPUSH
72899: LD_INT 0
72901: PPUSH
72902: CALL 74741 0 3
// end ;
72906: GO 72804
72908: POP
72909: POP
// if enchidnas then
72910: LD_VAR 0 4
72914: IFFALSE 72981
// for i = 1 to enchidnas do
72916: LD_ADDR_VAR 0 11
72920: PUSH
72921: DOUBLE
72922: LD_INT 1
72924: DEC
72925: ST_TO_ADDR
72926: LD_VAR 0 4
72930: PUSH
72931: FOR_TO
72932: IFFALSE 72979
// begin hc_class = 13 ;
72934: LD_ADDR_OWVAR 28
72938: PUSH
72939: LD_INT 13
72941: ST_TO_ADDR
// hc_gallery =  ;
72942: LD_ADDR_OWVAR 33
72946: PUSH
72947: LD_STRING 
72949: ST_TO_ADDR
// animal := CreateHuman ;
72950: LD_ADDR_VAR 0 12
72954: PUSH
72955: CALL_OW 44
72959: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72960: LD_VAR 0 12
72964: PPUSH
72965: LD_VAR 0 8
72969: PPUSH
72970: LD_INT 0
72972: PPUSH
72973: CALL 74741 0 3
// end ;
72977: GO 72931
72979: POP
72980: POP
// if fishes then
72981: LD_VAR 0 7
72985: IFFALSE 73052
// for i = 1 to fishes do
72987: LD_ADDR_VAR 0 11
72991: PUSH
72992: DOUBLE
72993: LD_INT 1
72995: DEC
72996: ST_TO_ADDR
72997: LD_VAR 0 7
73001: PUSH
73002: FOR_TO
73003: IFFALSE 73050
// begin hc_class = 20 ;
73005: LD_ADDR_OWVAR 28
73009: PUSH
73010: LD_INT 20
73012: ST_TO_ADDR
// hc_gallery =  ;
73013: LD_ADDR_OWVAR 33
73017: PUSH
73018: LD_STRING 
73020: ST_TO_ADDR
// animal := CreateHuman ;
73021: LD_ADDR_VAR 0 12
73025: PUSH
73026: CALL_OW 44
73030: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73031: LD_VAR 0 12
73035: PPUSH
73036: LD_VAR 0 9
73040: PPUSH
73041: LD_INT 0
73043: PPUSH
73044: CALL 74741 0 3
// end ;
73048: GO 73002
73050: POP
73051: POP
// end ;
73052: LD_VAR 0 10
73056: RET
// export function WantHeal ( sci , unit ) ; begin
73057: LD_INT 0
73059: PPUSH
// if GetTaskList ( sci ) > 0 then
73060: LD_VAR 0 1
73064: PPUSH
73065: CALL_OW 437
73069: PUSH
73070: LD_INT 0
73072: GREATER
73073: IFFALSE 73143
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73075: LD_VAR 0 1
73079: PPUSH
73080: CALL_OW 437
73084: PUSH
73085: LD_INT 1
73087: ARRAY
73088: PUSH
73089: LD_INT 1
73091: ARRAY
73092: PUSH
73093: LD_STRING l
73095: EQUAL
73096: PUSH
73097: LD_VAR 0 1
73101: PPUSH
73102: CALL_OW 437
73106: PUSH
73107: LD_INT 1
73109: ARRAY
73110: PUSH
73111: LD_INT 4
73113: ARRAY
73114: PUSH
73115: LD_VAR 0 2
73119: EQUAL
73120: AND
73121: IFFALSE 73133
// result := true else
73123: LD_ADDR_VAR 0 3
73127: PUSH
73128: LD_INT 1
73130: ST_TO_ADDR
73131: GO 73141
// result := false ;
73133: LD_ADDR_VAR 0 3
73137: PUSH
73138: LD_INT 0
73140: ST_TO_ADDR
// end else
73141: GO 73151
// result := false ;
73143: LD_ADDR_VAR 0 3
73147: PUSH
73148: LD_INT 0
73150: ST_TO_ADDR
// end ;
73151: LD_VAR 0 3
73155: RET
// export function HealTarget ( sci ) ; begin
73156: LD_INT 0
73158: PPUSH
// if not sci then
73159: LD_VAR 0 1
73163: NOT
73164: IFFALSE 73168
// exit ;
73166: GO 73233
// result := 0 ;
73168: LD_ADDR_VAR 0 2
73172: PUSH
73173: LD_INT 0
73175: ST_TO_ADDR
// if GetTaskList ( sci ) then
73176: LD_VAR 0 1
73180: PPUSH
73181: CALL_OW 437
73185: IFFALSE 73233
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73187: LD_VAR 0 1
73191: PPUSH
73192: CALL_OW 437
73196: PUSH
73197: LD_INT 1
73199: ARRAY
73200: PUSH
73201: LD_INT 1
73203: ARRAY
73204: PUSH
73205: LD_STRING l
73207: EQUAL
73208: IFFALSE 73233
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73210: LD_ADDR_VAR 0 2
73214: PUSH
73215: LD_VAR 0 1
73219: PPUSH
73220: CALL_OW 437
73224: PUSH
73225: LD_INT 1
73227: ARRAY
73228: PUSH
73229: LD_INT 4
73231: ARRAY
73232: ST_TO_ADDR
// end ;
73233: LD_VAR 0 2
73237: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73238: LD_INT 0
73240: PPUSH
73241: PPUSH
73242: PPUSH
73243: PPUSH
// if not base_units then
73244: LD_VAR 0 1
73248: NOT
73249: IFFALSE 73253
// exit ;
73251: GO 73340
// result := false ;
73253: LD_ADDR_VAR 0 2
73257: PUSH
73258: LD_INT 0
73260: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73261: LD_ADDR_VAR 0 5
73265: PUSH
73266: LD_VAR 0 1
73270: PPUSH
73271: LD_INT 21
73273: PUSH
73274: LD_INT 3
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PPUSH
73281: CALL_OW 72
73285: ST_TO_ADDR
// if not tmp then
73286: LD_VAR 0 5
73290: NOT
73291: IFFALSE 73295
// exit ;
73293: GO 73340
// for i in tmp do
73295: LD_ADDR_VAR 0 3
73299: PUSH
73300: LD_VAR 0 5
73304: PUSH
73305: FOR_IN
73306: IFFALSE 73338
// begin result := EnemyInRange ( i , 22 ) ;
73308: LD_ADDR_VAR 0 2
73312: PUSH
73313: LD_VAR 0 3
73317: PPUSH
73318: LD_INT 22
73320: PPUSH
73321: CALL 71576 0 2
73325: ST_TO_ADDR
// if result then
73326: LD_VAR 0 2
73330: IFFALSE 73336
// exit ;
73332: POP
73333: POP
73334: GO 73340
// end ;
73336: GO 73305
73338: POP
73339: POP
// end ;
73340: LD_VAR 0 2
73344: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73345: LD_INT 0
73347: PPUSH
73348: PPUSH
// if not units then
73349: LD_VAR 0 1
73353: NOT
73354: IFFALSE 73358
// exit ;
73356: GO 73428
// result := [ ] ;
73358: LD_ADDR_VAR 0 3
73362: PUSH
73363: EMPTY
73364: ST_TO_ADDR
// for i in units do
73365: LD_ADDR_VAR 0 4
73369: PUSH
73370: LD_VAR 0 1
73374: PUSH
73375: FOR_IN
73376: IFFALSE 73426
// if GetTag ( i ) = tag then
73378: LD_VAR 0 4
73382: PPUSH
73383: CALL_OW 110
73387: PUSH
73388: LD_VAR 0 2
73392: EQUAL
73393: IFFALSE 73424
// result := Insert ( result , result + 1 , i ) ;
73395: LD_ADDR_VAR 0 3
73399: PUSH
73400: LD_VAR 0 3
73404: PPUSH
73405: LD_VAR 0 3
73409: PUSH
73410: LD_INT 1
73412: PLUS
73413: PPUSH
73414: LD_VAR 0 4
73418: PPUSH
73419: CALL_OW 2
73423: ST_TO_ADDR
73424: GO 73375
73426: POP
73427: POP
// end ;
73428: LD_VAR 0 3
73432: RET
// export function IsDriver ( un ) ; begin
73433: LD_INT 0
73435: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73436: LD_ADDR_VAR 0 2
73440: PUSH
73441: LD_VAR 0 1
73445: PUSH
73446: LD_INT 55
73448: PUSH
73449: EMPTY
73450: LIST
73451: PPUSH
73452: CALL_OW 69
73456: IN
73457: ST_TO_ADDR
// end ;
73458: LD_VAR 0 2
73462: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73463: LD_INT 0
73465: PPUSH
73466: PPUSH
// list := [ ] ;
73467: LD_ADDR_VAR 0 5
73471: PUSH
73472: EMPTY
73473: ST_TO_ADDR
// case d of 0 :
73474: LD_VAR 0 3
73478: PUSH
73479: LD_INT 0
73481: DOUBLE
73482: EQUAL
73483: IFTRUE 73487
73485: GO 73620
73487: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73488: LD_ADDR_VAR 0 5
73492: PUSH
73493: LD_VAR 0 1
73497: PUSH
73498: LD_INT 4
73500: MINUS
73501: PUSH
73502: LD_VAR 0 2
73506: PUSH
73507: LD_INT 4
73509: MINUS
73510: PUSH
73511: LD_INT 2
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: LIST
73518: PUSH
73519: LD_VAR 0 1
73523: PUSH
73524: LD_INT 3
73526: MINUS
73527: PUSH
73528: LD_VAR 0 2
73532: PUSH
73533: LD_INT 1
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: LIST
73540: PUSH
73541: LD_VAR 0 1
73545: PUSH
73546: LD_INT 4
73548: PLUS
73549: PUSH
73550: LD_VAR 0 2
73554: PUSH
73555: LD_INT 4
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: LIST
73562: PUSH
73563: LD_VAR 0 1
73567: PUSH
73568: LD_INT 3
73570: PLUS
73571: PUSH
73572: LD_VAR 0 2
73576: PUSH
73577: LD_INT 3
73579: PLUS
73580: PUSH
73581: LD_INT 5
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: LIST
73588: PUSH
73589: LD_VAR 0 1
73593: PUSH
73594: LD_VAR 0 2
73598: PUSH
73599: LD_INT 4
73601: PLUS
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: LIST
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: ST_TO_ADDR
// end ; 1 :
73618: GO 74318
73620: LD_INT 1
73622: DOUBLE
73623: EQUAL
73624: IFTRUE 73628
73626: GO 73761
73628: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73629: LD_ADDR_VAR 0 5
73633: PUSH
73634: LD_VAR 0 1
73638: PUSH
73639: LD_VAR 0 2
73643: PUSH
73644: LD_INT 4
73646: MINUS
73647: PUSH
73648: LD_INT 3
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: LIST
73655: PUSH
73656: LD_VAR 0 1
73660: PUSH
73661: LD_INT 3
73663: MINUS
73664: PUSH
73665: LD_VAR 0 2
73669: PUSH
73670: LD_INT 3
73672: MINUS
73673: PUSH
73674: LD_INT 2
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: LIST
73681: PUSH
73682: LD_VAR 0 1
73686: PUSH
73687: LD_INT 4
73689: MINUS
73690: PUSH
73691: LD_VAR 0 2
73695: PUSH
73696: LD_INT 1
73698: PUSH
73699: EMPTY
73700: LIST
73701: LIST
73702: LIST
73703: PUSH
73704: LD_VAR 0 1
73708: PUSH
73709: LD_VAR 0 2
73713: PUSH
73714: LD_INT 3
73716: PLUS
73717: PUSH
73718: LD_INT 0
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: LIST
73725: PUSH
73726: LD_VAR 0 1
73730: PUSH
73731: LD_INT 4
73733: PLUS
73734: PUSH
73735: LD_VAR 0 2
73739: PUSH
73740: LD_INT 4
73742: PLUS
73743: PUSH
73744: LD_INT 5
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: LIST
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: ST_TO_ADDR
// end ; 2 :
73759: GO 74318
73761: LD_INT 2
73763: DOUBLE
73764: EQUAL
73765: IFTRUE 73769
73767: GO 73898
73769: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73770: LD_ADDR_VAR 0 5
73774: PUSH
73775: LD_VAR 0 1
73779: PUSH
73780: LD_VAR 0 2
73784: PUSH
73785: LD_INT 3
73787: MINUS
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: LIST
73796: PUSH
73797: LD_VAR 0 1
73801: PUSH
73802: LD_INT 4
73804: PLUS
73805: PUSH
73806: LD_VAR 0 2
73810: PUSH
73811: LD_INT 4
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: LIST
73818: PUSH
73819: LD_VAR 0 1
73823: PUSH
73824: LD_VAR 0 2
73828: PUSH
73829: LD_INT 4
73831: PLUS
73832: PUSH
73833: LD_INT 0
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: LIST
73840: PUSH
73841: LD_VAR 0 1
73845: PUSH
73846: LD_INT 3
73848: MINUS
73849: PUSH
73850: LD_VAR 0 2
73854: PUSH
73855: LD_INT 1
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: PUSH
73863: LD_VAR 0 1
73867: PUSH
73868: LD_INT 4
73870: MINUS
73871: PUSH
73872: LD_VAR 0 2
73876: PUSH
73877: LD_INT 4
73879: MINUS
73880: PUSH
73881: LD_INT 2
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: LIST
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: ST_TO_ADDR
// end ; 3 :
73896: GO 74318
73898: LD_INT 3
73900: DOUBLE
73901: EQUAL
73902: IFTRUE 73906
73904: GO 74039
73906: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73907: LD_ADDR_VAR 0 5
73911: PUSH
73912: LD_VAR 0 1
73916: PUSH
73917: LD_INT 3
73919: PLUS
73920: PUSH
73921: LD_VAR 0 2
73925: PUSH
73926: LD_INT 4
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: LIST
73933: PUSH
73934: LD_VAR 0 1
73938: PUSH
73939: LD_INT 4
73941: PLUS
73942: PUSH
73943: LD_VAR 0 2
73947: PUSH
73948: LD_INT 4
73950: PLUS
73951: PUSH
73952: LD_INT 5
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: LIST
73959: PUSH
73960: LD_VAR 0 1
73964: PUSH
73965: LD_INT 4
73967: MINUS
73968: PUSH
73969: LD_VAR 0 2
73973: PUSH
73974: LD_INT 1
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: LIST
73981: PUSH
73982: LD_VAR 0 1
73986: PUSH
73987: LD_VAR 0 2
73991: PUSH
73992: LD_INT 4
73994: MINUS
73995: PUSH
73996: LD_INT 3
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: LIST
74003: PUSH
74004: LD_VAR 0 1
74008: PUSH
74009: LD_INT 3
74011: MINUS
74012: PUSH
74013: LD_VAR 0 2
74017: PUSH
74018: LD_INT 3
74020: MINUS
74021: PUSH
74022: LD_INT 2
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: LIST
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: ST_TO_ADDR
// end ; 4 :
74037: GO 74318
74039: LD_INT 4
74041: DOUBLE
74042: EQUAL
74043: IFTRUE 74047
74045: GO 74180
74047: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74048: LD_ADDR_VAR 0 5
74052: PUSH
74053: LD_VAR 0 1
74057: PUSH
74058: LD_VAR 0 2
74062: PUSH
74063: LD_INT 4
74065: PLUS
74066: PUSH
74067: LD_INT 0
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: LIST
74074: PUSH
74075: LD_VAR 0 1
74079: PUSH
74080: LD_INT 3
74082: PLUS
74083: PUSH
74084: LD_VAR 0 2
74088: PUSH
74089: LD_INT 3
74091: PLUS
74092: PUSH
74093: LD_INT 5
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: LIST
74100: PUSH
74101: LD_VAR 0 1
74105: PUSH
74106: LD_INT 4
74108: PLUS
74109: PUSH
74110: LD_VAR 0 2
74114: PUSH
74115: LD_INT 4
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: LIST
74122: PUSH
74123: LD_VAR 0 1
74127: PUSH
74128: LD_VAR 0 2
74132: PUSH
74133: LD_INT 3
74135: MINUS
74136: PUSH
74137: LD_INT 3
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: LIST
74144: PUSH
74145: LD_VAR 0 1
74149: PUSH
74150: LD_INT 4
74152: MINUS
74153: PUSH
74154: LD_VAR 0 2
74158: PUSH
74159: LD_INT 4
74161: MINUS
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: LIST
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: ST_TO_ADDR
// end ; 5 :
74178: GO 74318
74180: LD_INT 5
74182: DOUBLE
74183: EQUAL
74184: IFTRUE 74188
74186: GO 74317
74188: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74189: LD_ADDR_VAR 0 5
74193: PUSH
74194: LD_VAR 0 1
74198: PUSH
74199: LD_INT 4
74201: MINUS
74202: PUSH
74203: LD_VAR 0 2
74207: PUSH
74208: LD_INT 1
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: LIST
74215: PUSH
74216: LD_VAR 0 1
74220: PUSH
74221: LD_VAR 0 2
74225: PUSH
74226: LD_INT 4
74228: MINUS
74229: PUSH
74230: LD_INT 3
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: LIST
74237: PUSH
74238: LD_VAR 0 1
74242: PUSH
74243: LD_INT 4
74245: PLUS
74246: PUSH
74247: LD_VAR 0 2
74251: PUSH
74252: LD_INT 4
74254: PLUS
74255: PUSH
74256: LD_INT 5
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: LIST
74263: PUSH
74264: LD_VAR 0 1
74268: PUSH
74269: LD_INT 3
74271: PLUS
74272: PUSH
74273: LD_VAR 0 2
74277: PUSH
74278: LD_INT 4
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: LIST
74285: PUSH
74286: LD_VAR 0 1
74290: PUSH
74291: LD_VAR 0 2
74295: PUSH
74296: LD_INT 3
74298: PLUS
74299: PUSH
74300: LD_INT 0
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: LIST
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: ST_TO_ADDR
// end ; end ;
74315: GO 74318
74317: POP
// result := list ;
74318: LD_ADDR_VAR 0 4
74322: PUSH
74323: LD_VAR 0 5
74327: ST_TO_ADDR
// end ;
74328: LD_VAR 0 4
74332: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74333: LD_INT 0
74335: PPUSH
74336: PPUSH
74337: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74338: LD_VAR 0 1
74342: NOT
74343: PUSH
74344: LD_VAR 0 2
74348: PUSH
74349: LD_INT 1
74351: PUSH
74352: LD_INT 2
74354: PUSH
74355: LD_INT 3
74357: PUSH
74358: LD_INT 4
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: IN
74367: NOT
74368: OR
74369: IFFALSE 74373
// exit ;
74371: GO 74465
// tmp := [ ] ;
74373: LD_ADDR_VAR 0 5
74377: PUSH
74378: EMPTY
74379: ST_TO_ADDR
// for i in units do
74380: LD_ADDR_VAR 0 4
74384: PUSH
74385: LD_VAR 0 1
74389: PUSH
74390: FOR_IN
74391: IFFALSE 74434
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74393: LD_ADDR_VAR 0 5
74397: PUSH
74398: LD_VAR 0 5
74402: PPUSH
74403: LD_VAR 0 5
74407: PUSH
74408: LD_INT 1
74410: PLUS
74411: PPUSH
74412: LD_VAR 0 4
74416: PPUSH
74417: LD_VAR 0 2
74421: PPUSH
74422: CALL_OW 259
74426: PPUSH
74427: CALL_OW 2
74431: ST_TO_ADDR
74432: GO 74390
74434: POP
74435: POP
// if not tmp then
74436: LD_VAR 0 5
74440: NOT
74441: IFFALSE 74445
// exit ;
74443: GO 74465
// result := SortListByListDesc ( units , tmp ) ;
74445: LD_ADDR_VAR 0 3
74449: PUSH
74450: LD_VAR 0 1
74454: PPUSH
74455: LD_VAR 0 5
74459: PPUSH
74460: CALL_OW 77
74464: ST_TO_ADDR
// end ;
74465: LD_VAR 0 3
74469: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74470: LD_INT 0
74472: PPUSH
74473: PPUSH
74474: PPUSH
// result := false ;
74475: LD_ADDR_VAR 0 3
74479: PUSH
74480: LD_INT 0
74482: ST_TO_ADDR
// x := GetX ( building ) ;
74483: LD_ADDR_VAR 0 4
74487: PUSH
74488: LD_VAR 0 2
74492: PPUSH
74493: CALL_OW 250
74497: ST_TO_ADDR
// y := GetY ( building ) ;
74498: LD_ADDR_VAR 0 5
74502: PUSH
74503: LD_VAR 0 2
74507: PPUSH
74508: CALL_OW 251
74512: ST_TO_ADDR
// if not building or not x or not y then
74513: LD_VAR 0 2
74517: NOT
74518: PUSH
74519: LD_VAR 0 4
74523: NOT
74524: OR
74525: PUSH
74526: LD_VAR 0 5
74530: NOT
74531: OR
74532: IFFALSE 74536
// exit ;
74534: GO 74628
// if GetTaskList ( unit ) then
74536: LD_VAR 0 1
74540: PPUSH
74541: CALL_OW 437
74545: IFFALSE 74628
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74547: LD_STRING e
74549: PUSH
74550: LD_VAR 0 1
74554: PPUSH
74555: CALL_OW 437
74559: PUSH
74560: LD_INT 1
74562: ARRAY
74563: PUSH
74564: LD_INT 1
74566: ARRAY
74567: EQUAL
74568: PUSH
74569: LD_VAR 0 4
74573: PUSH
74574: LD_VAR 0 1
74578: PPUSH
74579: CALL_OW 437
74583: PUSH
74584: LD_INT 1
74586: ARRAY
74587: PUSH
74588: LD_INT 2
74590: ARRAY
74591: EQUAL
74592: AND
74593: PUSH
74594: LD_VAR 0 5
74598: PUSH
74599: LD_VAR 0 1
74603: PPUSH
74604: CALL_OW 437
74608: PUSH
74609: LD_INT 1
74611: ARRAY
74612: PUSH
74613: LD_INT 3
74615: ARRAY
74616: EQUAL
74617: AND
74618: IFFALSE 74628
// result := true end ;
74620: LD_ADDR_VAR 0 3
74624: PUSH
74625: LD_INT 1
74627: ST_TO_ADDR
// end ;
74628: LD_VAR 0 3
74632: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74633: LD_INT 0
74635: PPUSH
// result := false ;
74636: LD_ADDR_VAR 0 4
74640: PUSH
74641: LD_INT 0
74643: ST_TO_ADDR
// if GetTaskList ( unit ) then
74644: LD_VAR 0 1
74648: PPUSH
74649: CALL_OW 437
74653: IFFALSE 74736
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74655: LD_STRING M
74657: PUSH
74658: LD_VAR 0 1
74662: PPUSH
74663: CALL_OW 437
74667: PUSH
74668: LD_INT 1
74670: ARRAY
74671: PUSH
74672: LD_INT 1
74674: ARRAY
74675: EQUAL
74676: PUSH
74677: LD_VAR 0 2
74681: PUSH
74682: LD_VAR 0 1
74686: PPUSH
74687: CALL_OW 437
74691: PUSH
74692: LD_INT 1
74694: ARRAY
74695: PUSH
74696: LD_INT 2
74698: ARRAY
74699: EQUAL
74700: AND
74701: PUSH
74702: LD_VAR 0 3
74706: PUSH
74707: LD_VAR 0 1
74711: PPUSH
74712: CALL_OW 437
74716: PUSH
74717: LD_INT 1
74719: ARRAY
74720: PUSH
74721: LD_INT 3
74723: ARRAY
74724: EQUAL
74725: AND
74726: IFFALSE 74736
// result := true ;
74728: LD_ADDR_VAR 0 4
74732: PUSH
74733: LD_INT 1
74735: ST_TO_ADDR
// end ; end ;
74736: LD_VAR 0 4
74740: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74741: LD_INT 0
74743: PPUSH
74744: PPUSH
74745: PPUSH
74746: PPUSH
// if not unit or not area then
74747: LD_VAR 0 1
74751: NOT
74752: PUSH
74753: LD_VAR 0 2
74757: NOT
74758: OR
74759: IFFALSE 74763
// exit ;
74761: GO 74927
// tmp := AreaToList ( area , i ) ;
74763: LD_ADDR_VAR 0 6
74767: PUSH
74768: LD_VAR 0 2
74772: PPUSH
74773: LD_VAR 0 5
74777: PPUSH
74778: CALL_OW 517
74782: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74783: LD_ADDR_VAR 0 5
74787: PUSH
74788: DOUBLE
74789: LD_INT 1
74791: DEC
74792: ST_TO_ADDR
74793: LD_VAR 0 6
74797: PUSH
74798: LD_INT 1
74800: ARRAY
74801: PUSH
74802: FOR_TO
74803: IFFALSE 74925
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74805: LD_ADDR_VAR 0 7
74809: PUSH
74810: LD_VAR 0 6
74814: PUSH
74815: LD_INT 1
74817: ARRAY
74818: PUSH
74819: LD_VAR 0 5
74823: ARRAY
74824: PUSH
74825: LD_VAR 0 6
74829: PUSH
74830: LD_INT 2
74832: ARRAY
74833: PUSH
74834: LD_VAR 0 5
74838: ARRAY
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74844: LD_VAR 0 7
74848: PUSH
74849: LD_INT 1
74851: ARRAY
74852: PPUSH
74853: LD_VAR 0 7
74857: PUSH
74858: LD_INT 2
74860: ARRAY
74861: PPUSH
74862: CALL_OW 428
74866: PUSH
74867: LD_INT 0
74869: EQUAL
74870: IFFALSE 74923
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74872: LD_VAR 0 1
74876: PPUSH
74877: LD_VAR 0 7
74881: PUSH
74882: LD_INT 1
74884: ARRAY
74885: PPUSH
74886: LD_VAR 0 7
74890: PUSH
74891: LD_INT 2
74893: ARRAY
74894: PPUSH
74895: LD_VAR 0 3
74899: PPUSH
74900: CALL_OW 48
// result := IsPlaced ( unit ) ;
74904: LD_ADDR_VAR 0 4
74908: PUSH
74909: LD_VAR 0 1
74913: PPUSH
74914: CALL_OW 305
74918: ST_TO_ADDR
// exit ;
74919: POP
74920: POP
74921: GO 74927
// end ; end ;
74923: GO 74802
74925: POP
74926: POP
// end ;
74927: LD_VAR 0 4
74931: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74932: LD_INT 0
74934: PPUSH
74935: PPUSH
74936: PPUSH
// if not side or side > 8 then
74937: LD_VAR 0 1
74941: NOT
74942: PUSH
74943: LD_VAR 0 1
74947: PUSH
74948: LD_INT 8
74950: GREATER
74951: OR
74952: IFFALSE 74956
// exit ;
74954: GO 75143
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74956: LD_ADDR_VAR 0 4
74960: PUSH
74961: LD_INT 22
74963: PUSH
74964: LD_VAR 0 1
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: PUSH
74973: LD_INT 21
74975: PUSH
74976: LD_INT 3
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PPUSH
74987: CALL_OW 69
74991: ST_TO_ADDR
// if not tmp then
74992: LD_VAR 0 4
74996: NOT
74997: IFFALSE 75001
// exit ;
74999: GO 75143
// enable_addtolog := true ;
75001: LD_ADDR_OWVAR 81
75005: PUSH
75006: LD_INT 1
75008: ST_TO_ADDR
// AddToLog ( [ ) ;
75009: LD_STRING [
75011: PPUSH
75012: CALL_OW 561
// for i in tmp do
75016: LD_ADDR_VAR 0 3
75020: PUSH
75021: LD_VAR 0 4
75025: PUSH
75026: FOR_IN
75027: IFFALSE 75134
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75029: LD_STRING [
75031: PUSH
75032: LD_VAR 0 3
75036: PPUSH
75037: CALL_OW 266
75041: STR
75042: PUSH
75043: LD_STRING , 
75045: STR
75046: PUSH
75047: LD_VAR 0 3
75051: PPUSH
75052: CALL_OW 250
75056: STR
75057: PUSH
75058: LD_STRING , 
75060: STR
75061: PUSH
75062: LD_VAR 0 3
75066: PPUSH
75067: CALL_OW 251
75071: STR
75072: PUSH
75073: LD_STRING , 
75075: STR
75076: PUSH
75077: LD_VAR 0 3
75081: PPUSH
75082: CALL_OW 254
75086: STR
75087: PUSH
75088: LD_STRING , 
75090: STR
75091: PUSH
75092: LD_VAR 0 3
75096: PPUSH
75097: LD_INT 1
75099: PPUSH
75100: CALL_OW 268
75104: STR
75105: PUSH
75106: LD_STRING , 
75108: STR
75109: PUSH
75110: LD_VAR 0 3
75114: PPUSH
75115: LD_INT 2
75117: PPUSH
75118: CALL_OW 268
75122: STR
75123: PUSH
75124: LD_STRING ],
75126: STR
75127: PPUSH
75128: CALL_OW 561
// end ;
75132: GO 75026
75134: POP
75135: POP
// AddToLog ( ]; ) ;
75136: LD_STRING ];
75138: PPUSH
75139: CALL_OW 561
// end ;
75143: LD_VAR 0 2
75147: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75148: LD_INT 0
75150: PPUSH
75151: PPUSH
75152: PPUSH
75153: PPUSH
75154: PPUSH
// if not area or not rate or not max then
75155: LD_VAR 0 1
75159: NOT
75160: PUSH
75161: LD_VAR 0 2
75165: NOT
75166: OR
75167: PUSH
75168: LD_VAR 0 4
75172: NOT
75173: OR
75174: IFFALSE 75178
// exit ;
75176: GO 75370
// while 1 do
75178: LD_INT 1
75180: IFFALSE 75370
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75182: LD_ADDR_VAR 0 9
75186: PUSH
75187: LD_VAR 0 1
75191: PPUSH
75192: LD_INT 1
75194: PPUSH
75195: CALL_OW 287
75199: PUSH
75200: LD_INT 10
75202: MUL
75203: ST_TO_ADDR
// r := rate / 10 ;
75204: LD_ADDR_VAR 0 7
75208: PUSH
75209: LD_VAR 0 2
75213: PUSH
75214: LD_INT 10
75216: DIVREAL
75217: ST_TO_ADDR
// time := 1 1$00 ;
75218: LD_ADDR_VAR 0 8
75222: PUSH
75223: LD_INT 2100
75225: ST_TO_ADDR
// if amount < min then
75226: LD_VAR 0 9
75230: PUSH
75231: LD_VAR 0 3
75235: LESS
75236: IFFALSE 75254
// r := r * 2 else
75238: LD_ADDR_VAR 0 7
75242: PUSH
75243: LD_VAR 0 7
75247: PUSH
75248: LD_INT 2
75250: MUL
75251: ST_TO_ADDR
75252: GO 75280
// if amount > max then
75254: LD_VAR 0 9
75258: PUSH
75259: LD_VAR 0 4
75263: GREATER
75264: IFFALSE 75280
// r := r / 2 ;
75266: LD_ADDR_VAR 0 7
75270: PUSH
75271: LD_VAR 0 7
75275: PUSH
75276: LD_INT 2
75278: DIVREAL
75279: ST_TO_ADDR
// time := time / r ;
75280: LD_ADDR_VAR 0 8
75284: PUSH
75285: LD_VAR 0 8
75289: PUSH
75290: LD_VAR 0 7
75294: DIVREAL
75295: ST_TO_ADDR
// if time < 0 then
75296: LD_VAR 0 8
75300: PUSH
75301: LD_INT 0
75303: LESS
75304: IFFALSE 75321
// time := time * - 1 ;
75306: LD_ADDR_VAR 0 8
75310: PUSH
75311: LD_VAR 0 8
75315: PUSH
75316: LD_INT 1
75318: NEG
75319: MUL
75320: ST_TO_ADDR
// wait ( time ) ;
75321: LD_VAR 0 8
75325: PPUSH
75326: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75330: LD_INT 35
75332: PPUSH
75333: LD_INT 875
75335: PPUSH
75336: CALL_OW 12
75340: PPUSH
75341: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75345: LD_INT 1
75347: PPUSH
75348: LD_INT 5
75350: PPUSH
75351: CALL_OW 12
75355: PPUSH
75356: LD_VAR 0 1
75360: PPUSH
75361: LD_INT 1
75363: PPUSH
75364: CALL_OW 55
// end ;
75368: GO 75178
// end ;
75370: LD_VAR 0 5
75374: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75375: LD_INT 0
75377: PPUSH
75378: PPUSH
75379: PPUSH
75380: PPUSH
75381: PPUSH
75382: PPUSH
75383: PPUSH
75384: PPUSH
// if not turrets or not factories then
75385: LD_VAR 0 1
75389: NOT
75390: PUSH
75391: LD_VAR 0 2
75395: NOT
75396: OR
75397: IFFALSE 75401
// exit ;
75399: GO 75708
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75401: LD_ADDR_VAR 0 10
75405: PUSH
75406: LD_INT 5
75408: PUSH
75409: LD_INT 6
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 2
75418: PUSH
75419: LD_INT 4
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 3
75428: PUSH
75429: LD_INT 5
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: LIST
75440: PUSH
75441: LD_INT 24
75443: PUSH
75444: LD_INT 25
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: LD_INT 23
75453: PUSH
75454: LD_INT 27
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: LD_INT 42
75467: PUSH
75468: LD_INT 43
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 44
75477: PUSH
75478: LD_INT 46
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 45
75487: PUSH
75488: LD_INT 47
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: LIST
75504: ST_TO_ADDR
// result := [ ] ;
75505: LD_ADDR_VAR 0 3
75509: PUSH
75510: EMPTY
75511: ST_TO_ADDR
// for i in turrets do
75512: LD_ADDR_VAR 0 4
75516: PUSH
75517: LD_VAR 0 1
75521: PUSH
75522: FOR_IN
75523: IFFALSE 75706
// begin nat := GetNation ( i ) ;
75525: LD_ADDR_VAR 0 7
75529: PUSH
75530: LD_VAR 0 4
75534: PPUSH
75535: CALL_OW 248
75539: ST_TO_ADDR
// weapon := 0 ;
75540: LD_ADDR_VAR 0 8
75544: PUSH
75545: LD_INT 0
75547: ST_TO_ADDR
// if not nat then
75548: LD_VAR 0 7
75552: NOT
75553: IFFALSE 75557
// continue ;
75555: GO 75522
// for j in list [ nat ] do
75557: LD_ADDR_VAR 0 5
75561: PUSH
75562: LD_VAR 0 10
75566: PUSH
75567: LD_VAR 0 7
75571: ARRAY
75572: PUSH
75573: FOR_IN
75574: IFFALSE 75615
// if GetBWeapon ( i ) = j [ 1 ] then
75576: LD_VAR 0 4
75580: PPUSH
75581: CALL_OW 269
75585: PUSH
75586: LD_VAR 0 5
75590: PUSH
75591: LD_INT 1
75593: ARRAY
75594: EQUAL
75595: IFFALSE 75613
// begin weapon := j [ 2 ] ;
75597: LD_ADDR_VAR 0 8
75601: PUSH
75602: LD_VAR 0 5
75606: PUSH
75607: LD_INT 2
75609: ARRAY
75610: ST_TO_ADDR
// break ;
75611: GO 75615
// end ;
75613: GO 75573
75615: POP
75616: POP
// if not weapon then
75617: LD_VAR 0 8
75621: NOT
75622: IFFALSE 75626
// continue ;
75624: GO 75522
// for k in factories do
75626: LD_ADDR_VAR 0 6
75630: PUSH
75631: LD_VAR 0 2
75635: PUSH
75636: FOR_IN
75637: IFFALSE 75702
// begin weapons := AvailableWeaponList ( k ) ;
75639: LD_ADDR_VAR 0 9
75643: PUSH
75644: LD_VAR 0 6
75648: PPUSH
75649: CALL_OW 478
75653: ST_TO_ADDR
// if not weapons then
75654: LD_VAR 0 9
75658: NOT
75659: IFFALSE 75663
// continue ;
75661: GO 75636
// if weapon in weapons then
75663: LD_VAR 0 8
75667: PUSH
75668: LD_VAR 0 9
75672: IN
75673: IFFALSE 75700
// begin result := [ i , weapon ] ;
75675: LD_ADDR_VAR 0 3
75679: PUSH
75680: LD_VAR 0 4
75684: PUSH
75685: LD_VAR 0 8
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: ST_TO_ADDR
// exit ;
75694: POP
75695: POP
75696: POP
75697: POP
75698: GO 75708
// end ; end ;
75700: GO 75636
75702: POP
75703: POP
// end ;
75704: GO 75522
75706: POP
75707: POP
// end ;
75708: LD_VAR 0 3
75712: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75713: LD_INT 0
75715: PPUSH
// if not side or side > 8 then
75716: LD_VAR 0 3
75720: NOT
75721: PUSH
75722: LD_VAR 0 3
75726: PUSH
75727: LD_INT 8
75729: GREATER
75730: OR
75731: IFFALSE 75735
// exit ;
75733: GO 75794
// if not range then
75735: LD_VAR 0 4
75739: NOT
75740: IFFALSE 75751
// range := - 12 ;
75742: LD_ADDR_VAR 0 4
75746: PUSH
75747: LD_INT 12
75749: NEG
75750: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75751: LD_VAR 0 1
75755: PPUSH
75756: LD_VAR 0 2
75760: PPUSH
75761: LD_VAR 0 3
75765: PPUSH
75766: LD_VAR 0 4
75770: PPUSH
75771: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75775: LD_VAR 0 1
75779: PPUSH
75780: LD_VAR 0 2
75784: PPUSH
75785: LD_VAR 0 3
75789: PPUSH
75790: CALL_OW 331
// end ;
75794: LD_VAR 0 5
75798: RET
// export function Video ( mode ) ; begin
75799: LD_INT 0
75801: PPUSH
// ingame_video = mode ;
75802: LD_ADDR_OWVAR 52
75806: PUSH
75807: LD_VAR 0 1
75811: ST_TO_ADDR
// interface_hidden = mode ;
75812: LD_ADDR_OWVAR 54
75816: PUSH
75817: LD_VAR 0 1
75821: ST_TO_ADDR
// end ;
75822: LD_VAR 0 2
75826: RET
// export function Join ( array , element ) ; begin
75827: LD_INT 0
75829: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75830: LD_ADDR_VAR 0 3
75834: PUSH
75835: LD_VAR 0 1
75839: PPUSH
75840: LD_VAR 0 1
75844: PUSH
75845: LD_INT 1
75847: PLUS
75848: PPUSH
75849: LD_VAR 0 2
75853: PPUSH
75854: CALL_OW 1
75858: ST_TO_ADDR
// end ;
75859: LD_VAR 0 3
75863: RET
// export function JoinUnion ( array , element ) ; begin
75864: LD_INT 0
75866: PPUSH
// result := array union element ;
75867: LD_ADDR_VAR 0 3
75871: PUSH
75872: LD_VAR 0 1
75876: PUSH
75877: LD_VAR 0 2
75881: UNION
75882: ST_TO_ADDR
// end ;
75883: LD_VAR 0 3
75887: RET
// export function GetBehemoths ( side ) ; begin
75888: LD_INT 0
75890: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75891: LD_ADDR_VAR 0 2
75895: PUSH
75896: LD_INT 22
75898: PUSH
75899: LD_VAR 0 1
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 31
75910: PUSH
75911: LD_INT 25
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PPUSH
75922: CALL_OW 69
75926: ST_TO_ADDR
// end ;
75927: LD_VAR 0 2
75931: RET
// export function Shuffle ( array ) ; var i , index ; begin
75932: LD_INT 0
75934: PPUSH
75935: PPUSH
75936: PPUSH
// result := [ ] ;
75937: LD_ADDR_VAR 0 2
75941: PUSH
75942: EMPTY
75943: ST_TO_ADDR
// if not array then
75944: LD_VAR 0 1
75948: NOT
75949: IFFALSE 75953
// exit ;
75951: GO 76052
// Randomize ;
75953: CALL_OW 10
// for i = array downto 1 do
75957: LD_ADDR_VAR 0 3
75961: PUSH
75962: DOUBLE
75963: LD_VAR 0 1
75967: INC
75968: ST_TO_ADDR
75969: LD_INT 1
75971: PUSH
75972: FOR_DOWNTO
75973: IFFALSE 76050
// begin index := rand ( 1 , array ) ;
75975: LD_ADDR_VAR 0 4
75979: PUSH
75980: LD_INT 1
75982: PPUSH
75983: LD_VAR 0 1
75987: PPUSH
75988: CALL_OW 12
75992: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75993: LD_ADDR_VAR 0 2
75997: PUSH
75998: LD_VAR 0 2
76002: PPUSH
76003: LD_VAR 0 2
76007: PUSH
76008: LD_INT 1
76010: PLUS
76011: PPUSH
76012: LD_VAR 0 1
76016: PUSH
76017: LD_VAR 0 4
76021: ARRAY
76022: PPUSH
76023: CALL_OW 2
76027: ST_TO_ADDR
// array := Delete ( array , index ) ;
76028: LD_ADDR_VAR 0 1
76032: PUSH
76033: LD_VAR 0 1
76037: PPUSH
76038: LD_VAR 0 4
76042: PPUSH
76043: CALL_OW 3
76047: ST_TO_ADDR
// end ;
76048: GO 75972
76050: POP
76051: POP
// end ;
76052: LD_VAR 0 2
76056: RET
// export function GetBaseMaterials ( base ) ; begin
76057: LD_INT 0
76059: PPUSH
// result := [ 0 , 0 , 0 ] ;
76060: LD_ADDR_VAR 0 2
76064: PUSH
76065: LD_INT 0
76067: PUSH
76068: LD_INT 0
76070: PUSH
76071: LD_INT 0
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: LIST
76078: ST_TO_ADDR
// if not base then
76079: LD_VAR 0 1
76083: NOT
76084: IFFALSE 76088
// exit ;
76086: GO 76137
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76088: LD_ADDR_VAR 0 2
76092: PUSH
76093: LD_VAR 0 1
76097: PPUSH
76098: LD_INT 1
76100: PPUSH
76101: CALL_OW 275
76105: PUSH
76106: LD_VAR 0 1
76110: PPUSH
76111: LD_INT 2
76113: PPUSH
76114: CALL_OW 275
76118: PUSH
76119: LD_VAR 0 1
76123: PPUSH
76124: LD_INT 3
76126: PPUSH
76127: CALL_OW 275
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: LIST
76136: ST_TO_ADDR
// end ;
76137: LD_VAR 0 2
76141: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76142: LD_INT 0
76144: PPUSH
76145: PPUSH
// result := array ;
76146: LD_ADDR_VAR 0 3
76150: PUSH
76151: LD_VAR 0 1
76155: ST_TO_ADDR
// if size > 0 then
76156: LD_VAR 0 2
76160: PUSH
76161: LD_INT 0
76163: GREATER
76164: IFFALSE 76210
// for i := array downto size do
76166: LD_ADDR_VAR 0 4
76170: PUSH
76171: DOUBLE
76172: LD_VAR 0 1
76176: INC
76177: ST_TO_ADDR
76178: LD_VAR 0 2
76182: PUSH
76183: FOR_DOWNTO
76184: IFFALSE 76208
// result := Delete ( result , result ) ;
76186: LD_ADDR_VAR 0 3
76190: PUSH
76191: LD_VAR 0 3
76195: PPUSH
76196: LD_VAR 0 3
76200: PPUSH
76201: CALL_OW 3
76205: ST_TO_ADDR
76206: GO 76183
76208: POP
76209: POP
// end ;
76210: LD_VAR 0 3
76214: RET
// export function ComExit ( unit ) ; var tmp ; begin
76215: LD_INT 0
76217: PPUSH
76218: PPUSH
// if not IsInUnit ( unit ) then
76219: LD_VAR 0 1
76223: PPUSH
76224: CALL_OW 310
76228: NOT
76229: IFFALSE 76233
// exit ;
76231: GO 76293
// tmp := IsInUnit ( unit ) ;
76233: LD_ADDR_VAR 0 3
76237: PUSH
76238: LD_VAR 0 1
76242: PPUSH
76243: CALL_OW 310
76247: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76248: LD_VAR 0 3
76252: PPUSH
76253: CALL_OW 247
76257: PUSH
76258: LD_INT 2
76260: EQUAL
76261: IFFALSE 76274
// ComExitVehicle ( unit ) else
76263: LD_VAR 0 1
76267: PPUSH
76268: CALL_OW 121
76272: GO 76283
// ComExitBuilding ( unit ) ;
76274: LD_VAR 0 1
76278: PPUSH
76279: CALL_OW 122
// result := tmp ;
76283: LD_ADDR_VAR 0 2
76287: PUSH
76288: LD_VAR 0 3
76292: ST_TO_ADDR
// end ;
76293: LD_VAR 0 2
76297: RET
// export function ResetHc ; begin
76298: LD_INT 0
76300: PPUSH
// InitHc ;
76301: CALL_OW 19
// hc_importance := 0 ;
76305: LD_ADDR_OWVAR 32
76309: PUSH
76310: LD_INT 0
76312: ST_TO_ADDR
// end ;
76313: LD_VAR 0 1
76317: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76318: LD_INT 0
76320: PPUSH
76321: PPUSH
76322: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76323: LD_ADDR_VAR 0 6
76327: PUSH
76328: LD_VAR 0 1
76332: PUSH
76333: LD_VAR 0 3
76337: PLUS
76338: PUSH
76339: LD_INT 2
76341: DIV
76342: ST_TO_ADDR
// if _x < 0 then
76343: LD_VAR 0 6
76347: PUSH
76348: LD_INT 0
76350: LESS
76351: IFFALSE 76368
// _x := _x * - 1 ;
76353: LD_ADDR_VAR 0 6
76357: PUSH
76358: LD_VAR 0 6
76362: PUSH
76363: LD_INT 1
76365: NEG
76366: MUL
76367: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76368: LD_ADDR_VAR 0 7
76372: PUSH
76373: LD_VAR 0 2
76377: PUSH
76378: LD_VAR 0 4
76382: PLUS
76383: PUSH
76384: LD_INT 2
76386: DIV
76387: ST_TO_ADDR
// if _y < 0 then
76388: LD_VAR 0 7
76392: PUSH
76393: LD_INT 0
76395: LESS
76396: IFFALSE 76413
// _y := _y * - 1 ;
76398: LD_ADDR_VAR 0 7
76402: PUSH
76403: LD_VAR 0 7
76407: PUSH
76408: LD_INT 1
76410: NEG
76411: MUL
76412: ST_TO_ADDR
// result := [ _x , _y ] ;
76413: LD_ADDR_VAR 0 5
76417: PUSH
76418: LD_VAR 0 6
76422: PUSH
76423: LD_VAR 0 7
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: ST_TO_ADDR
// end ;
76432: LD_VAR 0 5
76436: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76437: LD_INT 0
76439: PPUSH
76440: PPUSH
76441: PPUSH
76442: PPUSH
// task := GetTaskList ( unit ) ;
76443: LD_ADDR_VAR 0 7
76447: PUSH
76448: LD_VAR 0 1
76452: PPUSH
76453: CALL_OW 437
76457: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76458: LD_VAR 0 7
76462: NOT
76463: PUSH
76464: LD_VAR 0 1
76468: PPUSH
76469: LD_VAR 0 2
76473: PPUSH
76474: CALL_OW 308
76478: NOT
76479: AND
76480: IFFALSE 76484
// exit ;
76482: GO 76602
// if IsInArea ( unit , area ) then
76484: LD_VAR 0 1
76488: PPUSH
76489: LD_VAR 0 2
76493: PPUSH
76494: CALL_OW 308
76498: IFFALSE 76516
// begin ComMoveToArea ( unit , goAway ) ;
76500: LD_VAR 0 1
76504: PPUSH
76505: LD_VAR 0 3
76509: PPUSH
76510: CALL_OW 113
// exit ;
76514: GO 76602
// end ; if task [ 1 ] [ 1 ] <> M then
76516: LD_VAR 0 7
76520: PUSH
76521: LD_INT 1
76523: ARRAY
76524: PUSH
76525: LD_INT 1
76527: ARRAY
76528: PUSH
76529: LD_STRING M
76531: NONEQUAL
76532: IFFALSE 76536
// exit ;
76534: GO 76602
// x := task [ 1 ] [ 2 ] ;
76536: LD_ADDR_VAR 0 5
76540: PUSH
76541: LD_VAR 0 7
76545: PUSH
76546: LD_INT 1
76548: ARRAY
76549: PUSH
76550: LD_INT 2
76552: ARRAY
76553: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76554: LD_ADDR_VAR 0 6
76558: PUSH
76559: LD_VAR 0 7
76563: PUSH
76564: LD_INT 1
76566: ARRAY
76567: PUSH
76568: LD_INT 3
76570: ARRAY
76571: ST_TO_ADDR
// if InArea ( x , y , area ) then
76572: LD_VAR 0 5
76576: PPUSH
76577: LD_VAR 0 6
76581: PPUSH
76582: LD_VAR 0 2
76586: PPUSH
76587: CALL_OW 309
76591: IFFALSE 76602
// ComStop ( unit ) ;
76593: LD_VAR 0 1
76597: PPUSH
76598: CALL_OW 141
// end ;
76602: LD_VAR 0 4
76606: RET
// export function Abs ( value ) ; begin
76607: LD_INT 0
76609: PPUSH
// result := value ;
76610: LD_ADDR_VAR 0 2
76614: PUSH
76615: LD_VAR 0 1
76619: ST_TO_ADDR
// if value < 0 then
76620: LD_VAR 0 1
76624: PUSH
76625: LD_INT 0
76627: LESS
76628: IFFALSE 76645
// result := value * - 1 ;
76630: LD_ADDR_VAR 0 2
76634: PUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_INT 1
76642: NEG
76643: MUL
76644: ST_TO_ADDR
// end ; end_of_file
76645: LD_VAR 0 2
76649: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76650: LD_VAR 0 1
76654: PUSH
76655: LD_INT 200
76657: DOUBLE
76658: GREATEREQUAL
76659: IFFALSE 76667
76661: LD_INT 299
76663: DOUBLE
76664: LESSEQUAL
76665: IFTRUE 76669
76667: GO 76701
76669: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76670: LD_VAR 0 1
76674: PPUSH
76675: LD_VAR 0 2
76679: PPUSH
76680: LD_VAR 0 3
76684: PPUSH
76685: LD_VAR 0 4
76689: PPUSH
76690: LD_VAR 0 5
76694: PPUSH
76695: CALL 35963 0 5
76699: GO 76778
76701: LD_INT 300
76703: DOUBLE
76704: GREATEREQUAL
76705: IFFALSE 76713
76707: LD_INT 399
76709: DOUBLE
76710: LESSEQUAL
76711: IFTRUE 76715
76713: GO 76777
76715: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76716: LD_VAR 0 1
76720: PPUSH
76721: LD_VAR 0 2
76725: PPUSH
76726: LD_VAR 0 3
76730: PPUSH
76731: LD_VAR 0 4
76735: PPUSH
76736: LD_VAR 0 5
76740: PPUSH
76741: LD_VAR 0 6
76745: PPUSH
76746: LD_VAR 0 7
76750: PPUSH
76751: LD_VAR 0 8
76755: PPUSH
76756: LD_VAR 0 9
76760: PPUSH
76761: LD_VAR 0 10
76765: PPUSH
76766: LD_VAR 0 11
76770: PPUSH
76771: CALL 33869 0 11
76775: GO 76778
76777: POP
// end ;
76778: PPOPN 11
76780: END
