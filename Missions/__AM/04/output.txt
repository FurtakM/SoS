// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39816 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39816 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39816 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39816 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39816 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39816 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39816 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39816 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39816 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39816 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39816 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39816 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39816 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: PUSH
10667: LD_EXP 5
10671: PUSH
10672: EMPTY
10673: LIST
10674: DIFF
10675: ST_TO_ADDR
// DialogueOn ;
10676: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_STRING D3-Sol1-1
10687: PPUSH
10688: LD_STRING D3-Sol1-1
10690: PPUSH
10691: CALL 4598 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10695: LD_INT 22
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 25
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PPUSH
10746: LD_STRING D3-Sol2-1
10748: PPUSH
10749: LD_STRING D3-Sol2-1
10751: PPUSH
10752: CALL 4598 0 3
// if Frank then
10756: LD_EXP 5
10760: IFFALSE 10774
// Say ( Frank , D3-Frank-1 ) ;
10762: LD_EXP 5
10766: PPUSH
10767: LD_STRING D3-Frank-1
10769: PPUSH
10770: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10774: LD_EXP 13
10778: PPUSH
10779: LD_STRING D3-Don-1
10781: PPUSH
10782: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10786: LD_EXP 13
10790: PPUSH
10791: LD_STRING D3-Don-1a
10793: PPUSH
10794: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING D3-JMM-1
10805: PPUSH
10806: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10810: LD_EXP 13
10814: PPUSH
10815: LD_STRING D3-Don-2
10817: PPUSH
10818: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10822: LD_INT 22
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 69
10850: IFFALSE 10988
// begin Say ( JMM , D3-JMM-2 ) ;
10852: LD_EXP 1
10856: PPUSH
10857: LD_STRING D3-JMM-2
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10864: LD_EXP 13
10868: PPUSH
10869: LD_STRING D3-Don-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING D3-JMM-3
10883: PPUSH
10884: CALL_OW 88
// if IsOK ( Frank ) then
10888: LD_EXP 5
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10911
// Say ( Frank , D3-Frank-3 ) ;
10899: LD_EXP 5
10903: PPUSH
10904: LD_STRING D3-Frank-3
10906: PPUSH
10907: CALL_OW 88
// DialogueOff ;
10911: CALL_OW 7
// if IsOk ( Frank ) then
10915: LD_EXP 5
10919: PPUSH
10920: CALL_OW 302
10924: IFFALSE 10986
// begin SetSide ( Frank , 0 ) ;
10926: LD_EXP 5
10930: PPUSH
10931: LD_INT 0
10933: PPUSH
10934: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10938: LD_EXP 5
10942: PPUSH
10943: LD_INT 12
10945: PPUSH
10946: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10950: LD_EXP 5
10954: PPUSH
10955: LD_STRING 04t_Frank
10957: PPUSH
10958: CALL_OW 38
// wait ( 0 0$3 ) ;
10962: LD_INT 105
10964: PPUSH
10965: CALL_OW 67
// frankScoutBase = 1 ;
10969: LD_ADDR_EXP 25
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10977: LD_EXP 5
10981: PPUSH
10982: CALL_OW 64
// end ; end else
10986: GO 11075
// begin Say ( JMM , D3-JMM-4 ) ;
10988: LD_EXP 1
10992: PPUSH
10993: LD_STRING D3-JMM-4
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// if IsOk ( Frank ) then
11004: LD_EXP 5
11008: PPUSH
11009: CALL_OW 302
11013: IFFALSE 11075
// begin SetSide ( Frank , 0 ) ;
11015: LD_EXP 5
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11027: LD_EXP 5
11031: PPUSH
11032: LD_INT 12
11034: PPUSH
11035: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11039: LD_EXP 5
11043: PPUSH
11044: LD_STRING 04t_Frank
11046: PPUSH
11047: CALL_OW 38
// wait ( 0 0$3 ) ;
11051: LD_INT 105
11053: PPUSH
11054: CALL_OW 67
// frankScoutBase = 1 ;
11058: LD_ADDR_EXP 25
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11066: LD_EXP 5
11070: PPUSH
11071: CALL_OW 64
// end ; end ; end ;
11075: PPOPN 1
11077: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11078: LD_EXP 13
11082: PPUSH
11083: CALL_OW 255
11087: PUSH
11088: LD_INT 4
11090: EQUAL
11091: PUSH
11092: LD_EXP 13
11096: PPUSH
11097: CALL_OW 302
11101: AND
11102: IFFALSE 11342
11104: GO 11106
11106: DISABLE
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
// begin wait ( 5 5$00 ) ;
11111: LD_INT 10500
11113: PPUSH
11114: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11118: LD_EXP 13
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: PUSH
11132: LD_EXP 13
11136: PPUSH
11137: CALL_OW 301
11141: OR
11142: IFFALSE 11146
// exit ;
11144: GO 11342
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11146: LD_EXP 13
11150: PPUSH
11151: LD_STRING D3b-Don-1
11153: PPUSH
11154: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11158: LD_ADDR_EXP 41
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11193: LD_VAR 0 2
11197: NOT
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 6
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: OR
11228: IFFALSE 11186
// if not tmp then
11230: LD_VAR 0 2
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11342
// for i in tmp do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: FOR_IN
11250: IFFALSE 11269
// ComAgressiveMove ( i , 52 , 64 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_INT 52
11259: PPUSH
11260: LD_INT 64
11262: PPUSH
11263: CALL_OW 114
11267: GO 11249
11269: POP
11270: POP
// wait ( 0 0$10 ) ;
11271: LD_INT 350
11273: PPUSH
11274: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: PUSH
11298: LD_EXP 5
11302: DIFF
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11321
// SetSide ( i , 1 ) ;
11307: LD_VAR 0 1
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 235
11319: GO 11304
11321: POP
11322: POP
// if IsLive ( Donaldson ) then
11323: LD_EXP 13
11327: PPUSH
11328: CALL_OW 300
11332: IFFALSE 11342
// saveDonaldson := 1 ;
11334: LD_ADDR_EXP 24
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// end ;
11342: PPOPN 2
11344: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11345: LD_EXP 24
11349: NOT
11350: PUSH
11351: LD_EXP 41
11355: NOT
11356: AND
11357: PUSH
11358: LD_INT 26
11360: PPUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 70
11375: PUSH
11376: LD_EXP 13
11380: PPUSH
11381: LD_EXP 1
11385: PPUSH
11386: CALL_OW 296
11390: PUSH
11391: LD_INT 6
11393: LESS
11394: OR
11395: AND
11396: IFFALSE 11451
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
// begin saveDonaldson := 1 ;
11404: LD_ADDR_EXP 24
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 4
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetSide ( i , 1 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 235
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger frankScoutBase do
11454: LD_EXP 25
11458: IFFALSE 11823
11460: GO 11462
11462: DISABLE
// begin wait ( 2 2$30 ) ;
11463: LD_INT 5250
11465: PPUSH
11466: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11470: LD_INT 35
11472: PPUSH
11473: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11477: LD_INT 81
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 92
11489: PUSH
11490: LD_INT 84
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 69
11513: NOT
11514: IFFALSE 11470
// uc_side = 4 ;
11516: LD_ADDR_OWVAR 20
11520: PUSH
11521: LD_INT 4
11523: ST_TO_ADDR
// uc_nation = 1 ;
11524: LD_ADDR_OWVAR 21
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11532: LD_ADDR_EXP 5
11536: PUSH
11537: LD_STRING 04t_Frank
11539: PPUSH
11540: CALL_OW 34
11544: ST_TO_ADDR
// if not Frank then
11545: LD_EXP 5
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11823
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11554: LD_EXP 5
11558: PPUSH
11559: LD_INT 13
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11569: LD_INT 35
11571: PPUSH
11572: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11576: LD_EXP 1
11580: PPUSH
11581: CALL_OW 310
11585: NOT
11586: PUSH
11587: LD_EXP 1
11591: PPUSH
11592: LD_INT 4
11594: PPUSH
11595: CALL_OW 296
11599: PUSH
11600: LD_INT 20
11602: LESS
11603: AND
11604: IFFALSE 11637
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11606: LD_EXP 5
11610: PPUSH
11611: LD_EXP 1
11615: PPUSH
11616: CALL_OW 250
11620: PPUSH
11621: LD_EXP 1
11625: PPUSH
11626: CALL_OW 251
11630: PPUSH
11631: CALL_OW 111
11635: GO 11652
// ComMoveXY ( Frank , 51 , 15 ) ;
11637: LD_EXP 5
11641: PPUSH
11642: LD_INT 51
11644: PPUSH
11645: LD_INT 15
11647: PPUSH
11648: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11652: LD_EXP 5
11656: PPUSH
11657: LD_EXP 1
11661: PPUSH
11662: CALL_OW 296
11666: PUSH
11667: LD_INT 10
11669: LESS
11670: IFFALSE 11569
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11672: LD_EXP 1
11676: PUSH
11677: LD_EXP 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 87
// DialogueOn ;
11690: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11694: LD_EXP 5
11698: PPUSH
11699: LD_STRING D3a-Frank-1
11701: PPUSH
11702: CALL_OW 88
// if Lisa then
11706: LD_EXP 4
11710: IFFALSE 11760
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11712: LD_EXP 4
11716: PPUSH
11717: LD_STRING D3a-Lisa-1
11719: PPUSH
11720: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11724: LD_EXP 5
11728: PPUSH
11729: LD_STRING D3a-Frank-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11736: LD_EXP 4
11740: PPUSH
11741: LD_STRING D3a-Lisa-2
11743: PPUSH
11744: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11748: LD_EXP 5
11752: PPUSH
11753: LD_STRING D3a-Frank-3
11755: PPUSH
11756: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11760: LD_EXP 1
11764: PPUSH
11765: LD_STRING D3a-JMM-3
11767: PPUSH
11768: CALL_OW 88
// DialogueOff ;
11772: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11776: LD_EXP 5
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 235
// InGameOn ;
11788: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11792: LD_INT 1
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11802: LD_INT 93
11804: PPUSH
11805: LD_INT 91
11807: PPUSH
11808: CALL_OW 84
// wait ( 0 0$5 ) ;
11812: LD_INT 175
11814: PPUSH
11815: CALL_OW 67
// InGameOff ;
11819: CALL_OW 9
// end ;
11823: END
// every 12 12$0 trigger Difficulty > 1 do
11824: LD_OWVAR 67
11828: PUSH
11829: LD_INT 1
11831: GREATER
11832: IFFALSE 11856
11834: GO 11836
11836: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11837: LD_INT 24
11839: PPUSH
11840: LD_INT 24
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: LD_INT 53
11851: PPUSH
11852: CALL_OW 185
11856: END
// every 18 18$0 do
11857: GO 11859
11859: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11860: LD_EXP 14
11864: PPUSH
11865: LD_STRING D4-Har-1
11867: PPUSH
11868: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11872: LD_EXP 1
11876: PPUSH
11877: LD_STRING D4-JMM-1
11879: PPUSH
11880: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11884: LD_EXP 14
11888: PPUSH
11889: LD_STRING D4-Har-2
11891: PPUSH
11892: CALL_OW 94
// case Query ( Q1 ) of 1 :
11896: LD_STRING Q1
11898: PPUSH
11899: CALL_OW 97
11903: PUSH
11904: LD_INT 1
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11971
11912: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D5-JMM-1
11920: PPUSH
11921: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11925: LD_EXP 14
11929: PPUSH
11930: LD_STRING D5-Har-1
11932: PPUSH
11933: CALL_OW 94
// timeToSupport = 10 10$0 ;
11937: LD_ADDR_EXP 28
11941: PUSH
11942: LD_INT 21000
11944: ST_TO_ADDR
// timerStatus = 2 ;
11945: LD_ADDR_EXP 29
11949: PUSH
11950: LD_INT 2
11952: ST_TO_ADDR
// startTimer = 1 ;
11953: LD_ADDR_EXP 30
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// harrAnswer = 1 ;
11961: LD_ADDR_EXP 26
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// end ; 2 :
11969: GO 12106
11971: LD_INT 2
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 12038
11979: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11980: LD_EXP 1
11984: PPUSH
11985: LD_STRING D5-JMM-2
11987: PPUSH
11988: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11992: LD_EXP 14
11996: PPUSH
11997: LD_STRING D5-Har-2
11999: PPUSH
12000: CALL_OW 94
// timeToSupport = 5 5$0 ;
12004: LD_ADDR_EXP 28
12008: PUSH
12009: LD_INT 10500
12011: ST_TO_ADDR
// timerStatus = 2 ;
12012: LD_ADDR_EXP 29
12016: PUSH
12017: LD_INT 2
12019: ST_TO_ADDR
// startTimer = 1 ;
12020: LD_ADDR_EXP 30
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// harrAnswer = 2 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 2
12035: ST_TO_ADDR
// end ; 3 :
12036: GO 12106
12038: LD_INT 3
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12105
12046: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING D5-JMM-3
12054: PPUSH
12055: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12059: LD_EXP 14
12063: PPUSH
12064: LD_STRING D5-Har-3
12066: PPUSH
12067: CALL_OW 94
// timeToSupport = 5 5$0 ;
12071: LD_ADDR_EXP 28
12075: PUSH
12076: LD_INT 10500
12078: ST_TO_ADDR
// timerStatus = 2 ;
12079: LD_ADDR_EXP 29
12083: PUSH
12084: LD_INT 2
12086: ST_TO_ADDR
// startTimer = 1 ;
12087: LD_ADDR_EXP 30
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// harrAnswer = 3 ;
12095: LD_ADDR_EXP 26
12099: PUSH
12100: LD_INT 3
12102: ST_TO_ADDR
// end ; end ;
12103: GO 12106
12105: POP
// end ;
12106: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12107: LD_EXP 29
12111: PUSH
12112: LD_INT 2
12114: EQUAL
12115: PUSH
12116: LD_EXP 28
12120: PUSH
12121: LD_INT 0
12123: EQUAL
12124: AND
12125: IFFALSE 12414
12127: GO 12129
12129: DISABLE
// begin timerStatus = 4 ;
12130: LD_ADDR_EXP 29
12134: PUSH
12135: LD_INT 4
12137: ST_TO_ADDR
// if harrAnswer = 1 then
12138: LD_EXP 26
12142: PUSH
12143: LD_INT 1
12145: EQUAL
12146: IFFALSE 12230
// begin PrepareHarrisonSupport ( 3 ) ;
12148: LD_INT 3
12150: PPUSH
12151: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12155: LD_INT 2100
12157: PPUSH
12158: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12162: LD_EXP 14
12166: PPUSH
12167: LD_STRING D7-Har-1
12169: PPUSH
12170: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12174: LD_STRING M2
12176: PPUSH
12177: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12181: LD_ADDR_EXP 27
12185: PUSH
12186: LD_INT 31500
12188: PUSH
12189: LD_INT 10500
12191: PUSH
12192: LD_INT 8400
12194: PUSH
12195: LD_INT 6300
12197: PUSH
12198: LD_INT 6300
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_OWVAR 67
12211: ARRAY
12212: PLUS
12213: ST_TO_ADDR
// startTimer = 1 ;
12214: LD_ADDR_EXP 30
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// timerStatus = 3 ;
12222: LD_ADDR_EXP 29
12226: PUSH
12227: LD_INT 3
12229: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12230: LD_EXP 26
12234: PUSH
12235: LD_INT 2
12237: EQUAL
12238: IFFALSE 12322
// begin PrepareHarrisonSupport ( 4 ) ;
12240: LD_INT 4
12242: PPUSH
12243: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12247: LD_INT 2100
12249: PPUSH
12250: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12254: LD_EXP 14
12258: PPUSH
12259: LD_STRING D7-Har-1
12261: PPUSH
12262: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12266: LD_STRING M2
12268: PPUSH
12269: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12273: LD_ADDR_EXP 27
12277: PUSH
12278: LD_INT 33600
12280: PUSH
12281: LD_INT 10500
12283: PUSH
12284: LD_INT 8400
12286: PUSH
12287: LD_INT 6300
12289: PUSH
12290: LD_INT 5250
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: LD_OWVAR 67
12303: ARRAY
12304: PLUS
12305: ST_TO_ADDR
// startTimer = 1 ;
12306: LD_ADDR_EXP 30
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// timerStatus = 3 ;
12314: LD_ADDR_EXP 29
12318: PUSH
12319: LD_INT 3
12321: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12322: LD_EXP 26
12326: PUSH
12327: LD_INT 3
12329: EQUAL
12330: IFFALSE 12414
// begin PrepareHarrisonSupport ( 5 ) ;
12332: LD_INT 5
12334: PPUSH
12335: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12339: LD_INT 2100
12341: PPUSH
12342: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12346: LD_EXP 14
12350: PPUSH
12351: LD_STRING D7-Har-1
12353: PPUSH
12354: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12358: LD_STRING M2
12360: PPUSH
12361: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12365: LD_ADDR_EXP 27
12369: PUSH
12370: LD_INT 35700
12372: PUSH
12373: LD_INT 10500
12375: PUSH
12376: LD_INT 6300
12378: PUSH
12379: LD_INT 4200
12381: PUSH
12382: LD_INT 3150
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_OWVAR 67
12395: ARRAY
12396: PLUS
12397: ST_TO_ADDR
// startTimer = 1 ;
12398: LD_ADDR_EXP 30
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// timerStatus = 3 ;
12406: LD_ADDR_EXP 29
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// end ; end ;
12414: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12415: LD_EXP 27
12419: PUSH
12420: LD_INT 8400
12422: LESSEQUAL
12423: PUSH
12424: LD_EXP 29
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: AND
12433: IFFALSE 12465
12435: GO 12437
12437: DISABLE
// begin DialogueOn ;
12438: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12442: LD_EXP 14
12446: PPUSH
12447: LD_STRING D7a-Har-1
12449: PPUSH
12450: CALL_OW 94
// DialogueOff ;
12454: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12458: LD_STRING M2a
12460: PPUSH
12461: CALL_OW 337
// end ;
12465: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12466: LD_EXP 27
12470: PUSH
12471: LD_INT 0
12473: LESSEQUAL
12474: PUSH
12475: LD_EXP 29
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: AND
12484: PUSH
12485: LD_EXP 40
12489: NOT
12490: AND
12491: IFFALSE 12630
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: DIFF
12527: ST_TO_ADDR
// saveDonaldson = 2 ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_INT 2
12535: ST_TO_ADDR
// DialogueOn ;
12536: CALL_OW 6
// if IsOk ( Donaldson ) then
12540: LD_EXP 13
12544: PPUSH
12545: CALL_OW 302
12549: IFFALSE 12565
// SayRadio ( Harisson , D8-Har-1 ) else
12551: LD_EXP 14
12555: PPUSH
12556: LD_STRING D8-Har-1
12558: PPUSH
12559: CALL_OW 94
12563: GO 12577
// SayRadio ( Harisson , D8-Har-1a ) ;
12565: LD_EXP 14
12569: PPUSH
12570: LD_STRING D8-Har-1a
12572: PPUSH
12573: CALL_OW 94
// DialogueOff ;
12577: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 4
12588: PPUSH
12589: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 88
12600: PPUSH
12601: LD_INT 89
12603: PPUSH
12604: CALL_OW 114
// honor = 0 ;
12608: LD_ADDR_EXP 39
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12616: LD_INT 350
12618: PPUSH
12619: CALL_OW 67
// YouLost ( LostCommand ) ;
12623: LD_STRING LostCommand
12625: PPUSH
12626: CALL_OW 104
// end ;
12630: PPOPN 1
12632: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12633: LD_INT 22
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 1
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: PUSH
12666: LD_EXP 20
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: AND
12675: PUSH
12676: LD_EXP 44
12680: PUSH
12681: LD_INT 1
12683: EQUAL
12684: AND
12685: IFFALSE 12779
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 23
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: ST_TO_ADDR
// for i in tmp do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_VAR 0 2
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12777
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 500
12770: PPUSH
12771: CALL_OW 492
12775: GO 12749
12777: POP
12778: POP
// end ; end_of_file
12779: PPOPN 2
12781: END
// every 0 0$1 trigger AIEnable do
12782: LD_EXP 37
12786: IFFALSE 12880
12788: GO 12790
12790: DISABLE
// begin enable ;
12791: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12792: LD_INT 3
12794: PPUSH
12795: LD_INT 21
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12805: LD_INT 3
12807: PPUSH
12808: LD_INT 8
12810: PPUSH
12811: LD_INT 7
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12821: LD_EXP 20
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_INT 6
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: AND
12845: IFFALSE 12880
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12847: LD_INT 6
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: LD_INT 6
12857: PPUSH
12858: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12862: LD_INT 6
12864: PPUSH
12865: LD_INT 9
12867: PPUSH
12868: LD_INT 6
12870: PPUSH
12871: LD_EXP 22
12875: PPUSH
12876: CALL 6334 0 4
// end ; end ;
12880: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12881: LD_EXP 15
12885: PPUSH
12886: CALL_OW 310
12890: NOT
12891: PUSH
12892: LD_INT 21
12894: PPUSH
12895: CALL_OW 302
12899: AND
12900: PUSH
12901: LD_INT 21
12903: PPUSH
12904: CALL_OW 255
12908: PUSH
12909: LD_INT 3
12911: EQUAL
12912: AND
12913: IFFALSE 12930
12915: GO 12917
12917: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12918: LD_EXP 15
12922: PPUSH
12923: LD_INT 21
12925: PPUSH
12926: CALL_OW 120
12930: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12931: LD_INT 22
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: EMPTY
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: EQUAL
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 255
12978: PUSH
12979: LD_INT 3
12981: EQUAL
12982: AND
12983: PUSH
12984: LD_INT 21
12986: PPUSH
12987: CALL_OW 302
12991: AND
12992: PUSH
12993: LD_INT 21
12995: PPUSH
12996: CALL_OW 255
13000: PUSH
13001: LD_INT 3
13003: EQUAL
13004: AND
13005: PUSH
13006: LD_INT 21
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13226
13016: GO 13018
13018: DISABLE
// begin enable ;
13019: ENABLE
// if Difficulty = 1 then
13020: LD_OWVAR 67
13024: PUSH
13025: LD_INT 1
13027: EQUAL
13028: IFFALSE 13072
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 24
13035: PPUSH
13036: LD_OWVAR 67
13040: PUSH
13041: LD_INT 2
13043: PLUS
13044: PPUSH
13045: LD_INT 42
13047: PUSH
13048: LD_INT 44
13050: PUSH
13051: LD_INT 43
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_INT 21
13067: PPUSH
13068: CALL 6848 0 7
// if Difficulty = 2 then
13072: LD_OWVAR 67
13076: PUSH
13077: LD_INT 2
13079: EQUAL
13080: IFFALSE 13147
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13082: LD_INT 3
13084: PPUSH
13085: LD_INT 24
13087: PPUSH
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 2
13095: PLUS
13096: PPUSH
13097: LD_INT 44
13099: PUSH
13100: LD_INT 44
13102: PUSH
13103: LD_INT 43
13105: PUSH
13106: LD_INT 43
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: CALL 6848 0 7
// if Difficulty >= 3 then
13147: LD_OWVAR 67
13151: PUSH
13152: LD_INT 3
13154: GREATEREQUAL
13155: IFFALSE 13226
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13157: LD_INT 3
13159: PPUSH
13160: LD_INT 24
13162: PPUSH
13163: LD_OWVAR 67
13167: PUSH
13168: LD_INT 2
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 12
13178: PLUS
13179: PPUSH
13180: LD_INT 44
13182: PUSH
13183: LD_INT 44
13185: PUSH
13186: LD_INT 43
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: CALL_OW 12
13220: ARRAY
13221: PPUSH
13222: CALL 6848 0 7
// end ;
13226: END
// every 0 0$1 do
13227: GO 13229
13229: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13230: LD_INT 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: CALL 5951 0 3
13243: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13244: LD_EXP 20
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: IFFALSE 13399
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 34
13288: PUSH
13289: LD_INT 51
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: LD_EXP 21
13319: PPUSH
13320: CALL_OW 250
13324: PUSH
13325: LD_INT 5
13327: MINUS
13328: PPUSH
13329: LD_EXP 21
13333: PPUSH
13334: CALL_OW 251
13338: PUSH
13339: LD_INT 5
13341: MINUS
13342: PPUSH
13343: CALL_OW 111
// wait ( 0 0$5 ) ;
13347: LD_INT 175
13349: PPUSH
13350: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13354: LD_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_INT 41
13365: PPUSH
13366: LD_INT 52
13368: PPUSH
13369: CALL_OW 177
// wait ( 0 0$40 ) ;
13373: LD_INT 1400
13375: PPUSH
13376: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: LD_INT 41
13391: PPUSH
13392: LD_INT 44
13394: PPUSH
13395: CALL_OW 111
// end ;
13399: PPOPN 2
13401: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13402: LD_EXP 21
13406: PPUSH
13407: CALL_OW 274
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 275
13419: PUSH
13420: LD_INT 100
13422: GREATEREQUAL
13423: IFFALSE 13651
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 39
13490: PPUSH
13491: LD_INT 37
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_INT 29
13512: PPUSH
13513: LD_INT 42
13515: PPUSH
13516: LD_INT 54
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_INT 6
13537: PPUSH
13538: LD_INT 38
13540: PPUSH
13541: LD_INT 48
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13551: LD_VAR 0 1
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_INT 2
13562: PPUSH
13563: LD_INT 32
13565: PPUSH
13566: LD_INT 38
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: ARRAY
13584: PPUSH
13585: LD_INT 26
13587: PPUSH
13588: LD_INT 39
13590: PPUSH
13591: LD_INT 55
13593: PPUSH
13594: LD_INT 3
13596: PPUSH
13597: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PPUSH
13610: LD_INT 32
13612: PPUSH
13613: LD_INT 31
13615: PPUSH
13616: LD_INT 31
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 31
13637: PPUSH
13638: LD_INT 50
13640: PPUSH
13641: LD_INT 51
13643: PPUSH
13644: LD_INT 4
13646: PPUSH
13647: CALL_OW 205
// end ;
13651: PPOPN 1
13653: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13654: LD_EXP 46
13658: IFFALSE 14223
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
// begin enable ;
13668: ENABLE
// if not ruMobile then
13669: LD_EXP 46
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14223
// for i in ruMobile do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_EXP 46
13687: PUSH
13688: FOR_IN
13689: IFFALSE 14221
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 302
13700: NOT
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 255
13711: PUSH
13712: LD_INT 3
13714: NONEQUAL
13715: OR
13716: IFFALSE 13736
// begin ruMobile := ruMobile diff i ;
13718: LD_ADDR_EXP 46
13722: PUSH
13723: LD_EXP 46
13727: PUSH
13728: LD_VAR 0 1
13732: DIFF
13733: ST_TO_ADDR
// continue ;
13734: GO 13688
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 110
13745: NOT
13746: PUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 110
13756: PUSH
13757: LD_INT 0
13759: EQUAL
13760: OR
13761: IFFALSE 13876
// begin if GetFuel ( i ) < 50 then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 261
13772: PUSH
13773: LD_INT 50
13775: LESS
13776: IFFALSE 13835
// begin ComMoveXY ( i , 106 , 88 ) ;
13778: LD_VAR 0 1
13782: PPUSH
13783: LD_INT 106
13785: PPUSH
13786: LD_INT 88
13788: PPUSH
13789: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13793: LD_INT 35
13795: PPUSH
13796: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 106
13807: PPUSH
13808: LD_INT 88
13810: PPUSH
13811: CALL_OW 297
13815: PUSH
13816: LD_INT 4
13818: LESS
13819: IFFALSE 13793
// SetFuel ( i , 100 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 100
13828: PPUSH
13829: CALL_OW 240
// end else
13833: GO 13876
// if not IsInArea ( i , ruParking ) then
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_INT 25
13842: PPUSH
13843: CALL_OW 308
13847: NOT
13848: IFFALSE 13864
// ComMoveToArea ( i , ruParking ) else
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_INT 25
13857: PPUSH
13858: CALL_OW 113
13862: GO 13876
// SetTag ( i , 1 ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 110
13885: PUSH
13886: LD_INT 1
13888: EQUAL
13889: IFFALSE 14019
// begin if GetLives ( i ) < 650 then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 256
13900: PUSH
13901: LD_INT 650
13903: LESS
13904: IFFALSE 13996
// begin if not IsDrivenBy ( i ) then
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 311
13915: NOT
13916: IFFALSE 13920
// continue ;
13918: GO 13688
// mech := IsDrivenBy ( i ) ;
13920: LD_ADDR_VAR 0 2
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 311
13934: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 256
13974: PUSH
13975: LD_INT 1000
13977: EQUAL
13978: IFFALSE 13958
// ComEnterUnit ( mech , i ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 120
// end else
13994: GO 14019
// if IsDrivenBy ( i ) then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 311
14005: IFFALSE 14019
// SetTag ( i , 2 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 2
14014: PPUSH
14015: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 110
14028: PUSH
14029: LD_INT 2
14031: EQUAL
14032: IFFALSE 14219
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 24
14041: PPUSH
14042: LD_INT 81
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 70
14056: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 256
14066: PUSH
14067: LD_INT 650
14069: LESS
14070: IFFALSE 14095
// begin ComStop ( i ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 141
// SetTag ( i , 0 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 0
14088: PPUSH
14089: CALL_OW 109
// continue ;
14093: GO 13688
// end ; if enemy then
14095: LD_VAR 0 3
14099: IFFALSE 14139
// begin if not HasTask ( i ) then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 314
14110: NOT
14111: IFFALSE 14137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_VAR 0 3
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 74
14132: PPUSH
14133: CALL_OW 115
// end else
14137: GO 14219
// if ruMobile > 2 then
14139: LD_EXP 46
14143: PUSH
14144: LD_INT 2
14146: GREATER
14147: IFFALSE 14219
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 81
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if enemy then
14169: LD_VAR 0 3
14173: IFFALSE 14219
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 74
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 67
14192: PUSH
14193: LD_INT 59
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 55
14202: PUSH
14203: LD_INT 41
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL 79888 0 2
// end ; end ; end ;
14219: GO 13688
14221: POP
14222: POP
// end ; end_of_file
14223: PPOPN 3
14225: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14226: LD_INT 0
14228: PPUSH
14229: PPUSH
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_INT 6
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PPUSH
14289: CALL_OW 69
14293: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 54
14331: PUSH
14332: EMPTY
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14346: LD_ADDR_VAR 0 4
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 6
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 25
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14391: LD_ADDR_VAR 0 6
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 6
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 25
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14436: LD_ADDR_VAR 0 8
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 6
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 34
14463: PUSH
14464: LD_INT 51
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 255
14490: PUSH
14491: LD_INT 6
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 0
14507: EQUAL
14508: AND
14509: IFFALSE 14529
// begin ruPDepot = building ;
14511: LD_ADDR_EXP 21
14515: PUSH
14516: LD_VAR 0 1
14520: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14521: LD_ADDR_EXP 20
14525: PUSH
14526: LD_INT 1
14528: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 266
14538: PUSH
14539: LD_INT 4
14541: EQUAL
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 255
14552: PUSH
14553: LD_INT 6
14555: EQUAL
14556: AND
14557: IFFALSE 14590
// for i in tmpSold do
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_VAR 0 3
14568: PUSH
14569: FOR_IN
14570: IFFALSE 14588
// ComEnterUnit ( i , building ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 120
14586: GO 14569
14588: POP
14589: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 266
14599: PUSH
14600: LD_INT 6
14602: EQUAL
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 6
14616: EQUAL
14617: AND
14618: IFFALSE 14676
// begin for i in tmpSci do
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 6
14629: PUSH
14630: FOR_IN
14631: IFFALSE 14649
// ComEnterUnit ( i , building ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 120
14647: GO 14630
14649: POP
14650: POP
// ResAllTechs ( 6 , building , 3 ) ;
14651: LD_INT 6
14653: PPUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: LD_INT 3
14661: PPUSH
14662: CALL 5951 0 3
// ruPLab = building ;
14666: LD_ADDR_EXP 22
14670: PUSH
14671: LD_VAR 0 1
14675: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 266
14685: PUSH
14686: LD_INT 2
14688: EQUAL
14689: PUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 255
14699: PUSH
14700: LD_INT 6
14702: EQUAL
14703: AND
14704: IFFALSE 14755
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14706: LD_ADDR_VAR 0 5
14710: PUSH
14711: LD_VAR 0 8
14715: PUSH
14716: LD_INT 1
14718: ARRAY
14719: PPUSH
14720: CALL_OW 313
14724: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: CALL_OW 121
// wait ( 0 0$1 ) ;
14734: LD_INT 35
14736: PPUSH
14737: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14741: LD_VAR 0 5
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 266
14764: PUSH
14765: LD_INT 32
14767: EQUAL
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 255
14778: PUSH
14779: LD_INT 6
14781: EQUAL
14782: AND
14783: IFFALSE 14835
// begin ComPlaceWeapon ( building , 42 ) ;
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 42
14792: PPUSH
14793: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14797: LD_VAR 0 7
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: CALL_OW 122
// wait ( 0 0$1 ) ;
14810: LD_INT 35
14812: PPUSH
14813: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14817: LD_VAR 0 7
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 266
14844: PUSH
14845: LD_INT 31
14847: EQUAL
14848: PUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 255
14858: PUSH
14859: LD_INT 6
14861: EQUAL
14862: AND
14863: IFFALSE 14929
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14865: LD_VAR 0 7
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL_OW 122
// wait ( 0 0$1 ) ;
14878: LD_INT 35
14880: PPUSH
14881: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14885: LD_VAR 0 7
14889: PUSH
14890: LD_INT 2
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14903: LD_VAR 0 4
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_EXP 21
14916: PPUSH
14917: CALL_OW 120
// baseReadyToBuild = 2 ;
14921: LD_ADDR_EXP 20
14925: PUSH
14926: LD_INT 2
14928: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 266
14938: PUSH
14939: LD_INT 32
14941: EQUAL
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_INT 1
14955: EQUAL
14956: AND
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: AND
14967: IFFALSE 15212
// begin bunkerDialog = 1 ;
14969: LD_ADDR_EXP 32
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14977: LD_EXP 11
14981: PPUSH
14982: CALL_OW 302
14986: IFFALSE 15002
// Say ( Claptopn , D11-Eng1-1 ) else
14988: LD_EXP 11
14992: PPUSH
14993: LD_STRING D11-Eng1-1
14995: PPUSH
14996: CALL_OW 88
15000: GO 15198
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15002: LD_INT 22
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 26
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PUSH
15053: LD_EXP 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: PUSH
15061: LD_INT 0
15063: GREATER
15064: DIFF
15065: IFFALSE 15139
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15067: LD_INT 22
15069: PUSH
15070: LD_INT 1
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 25
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 26
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: LD_EXP 1
15122: PUSH
15123: EMPTY
15124: LIST
15125: DIFF
15126: PPUSH
15127: LD_STRING D11-Eng1-1
15129: PPUSH
15130: LD_STRING D11-Eng1-1
15132: PPUSH
15133: CALL 4598 0 3
15137: GO 15198
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15139: LD_INT 22
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 26
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: LD_EXP 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: DIFF
15187: PPUSH
15188: LD_STRING D11-Eng1-1
15190: PPUSH
15191: LD_STRING D11-Eng1-1
15193: PPUSH
15194: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15198: LD_EXP 33
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15212
// EnergyDialog ;
15208: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 29
15224: EQUAL
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 255
15235: PUSH
15236: LD_INT 1
15238: EQUAL
15239: AND
15240: IFFALSE 15250
// buildOil = 1 ;
15242: LD_ADDR_EXP 34
15246: PUSH
15247: LD_INT 1
15249: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: PUSH
15260: LD_INT 26
15262: EQUAL
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: AND
15278: IFFALSE 15288
// buildPower = 1 ;
15280: LD_ADDR_EXP 35
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// end ;
15288: PPOPN 8
15290: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 266
15300: PUSH
15301: LD_INT 3
15303: EQUAL
15304: PUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 255
15314: PUSH
15315: LD_INT 1
15317: EQUAL
15318: AND
15319: PUSH
15320: LD_EXP 31
15324: PUSH
15325: LD_INT 0
15327: EQUAL
15328: AND
15329: IFFALSE 15677
// begin factoryDialog = 1 ;
15331: LD_ADDR_EXP 31
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15339: LD_INT 47
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 321
15349: PUSH
15350: LD_INT 1
15352: EQUAL
15353: PUSH
15354: LD_INT 45
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 321
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: AND
15369: IFFALSE 15677
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: LD_INT 1000
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D9a-JMM-1
15437: PPUSH
15438: CALL_OW 88
// if IsOK ( Campell ) then
15442: LD_EXP 12
15446: PPUSH
15447: CALL_OW 302
15451: IFFALSE 15467
// Say ( Campell , D9a-Mech1-1 ) else
15453: LD_EXP 12
15457: PPUSH
15458: LD_STRING D9a-Mech1-1
15460: PPUSH
15461: CALL_OW 88
15465: GO 15663
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15467: LD_INT 22
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 25
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 26
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 69
15517: PUSH
15518: LD_EXP 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: LD_INT 0
15528: GREATER
15529: DIFF
15530: IFFALSE 15604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15532: LD_INT 22
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 26
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: LD_EXP 1
15587: PUSH
15588: EMPTY
15589: LIST
15590: DIFF
15591: PPUSH
15592: LD_STRING D9a-Mech1-1
15594: PPUSH
15595: LD_STRING D9a-Mech1-1
15597: PPUSH
15598: CALL 4598 0 3
15602: GO 15663
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15604: LD_INT 22
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: PUSH
15644: LD_EXP 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: DIFF
15652: PPUSH
15653: LD_STRING D9a-Mech1-1
15655: PPUSH
15656: LD_STRING D9a-Mech1-1
15658: PPUSH
15659: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15663: LD_EXP 33
15667: PUSH
15668: LD_INT 0
15670: EQUAL
15671: IFFALSE 15677
// EnergyDialog ;
15673: CALL 5003 0 0
// end ; end ; end ;
15677: PPOPN 1
15679: END
// on UnitDestroyed ( unit ) do var mech ;
15680: LD_INT 0
15682: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL 35527 0 1
// if unit = JMM then
15692: LD_VAR 0 1
15696: PUSH
15697: LD_EXP 1
15701: EQUAL
15702: IFFALSE 15711
// YouLost ( JMM ) ;
15704: LD_STRING JMM
15706: PPUSH
15707: CALL_OW 104
// if unit = ambdept0 then
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 4
15718: EQUAL
15719: IFFALSE 15728
// YouLost ( Base ) ;
15721: LD_STRING Base
15723: PPUSH
15724: CALL_OW 104
// if unit in ruMobile then
15728: LD_VAR 0 1
15732: PUSH
15733: LD_EXP 46
15737: IN
15738: IFFALSE 15756
// ruMobile = ruMobile diff ruMobile ;
15740: LD_ADDR_EXP 46
15744: PUSH
15745: LD_EXP 46
15749: PUSH
15750: LD_EXP 46
15754: DIFF
15755: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 247
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 255
15779: PUSH
15780: LD_INT 1
15782: EQUAL
15783: AND
15784: IFFALSE 15800
// lostCounter = lostCounter + 1 ;
15786: LD_ADDR_EXP 38
15790: PUSH
15791: LD_EXP 38
15795: PUSH
15796: LD_INT 1
15798: PLUS
15799: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15800: LD_EXP 43
15804: PUSH
15805: LD_INT 24
15807: PPUSH
15808: CALL_OW 313
15812: PUSH
15813: LD_INT 6
15815: LESS
15816: AND
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 257
15827: PUSH
15828: LD_INT 3
15830: EQUAL
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 255
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_INT 24
15850: PPUSH
15851: CALL_OW 302
15855: AND
15856: PUSH
15857: LD_INT 24
15859: PPUSH
15860: CALL_OW 255
15864: PUSH
15865: LD_INT 3
15867: EQUAL
15868: AND
15869: IFFALSE 15998
// begin ruMech := ruMech - 1 ;
15871: LD_ADDR_EXP 43
15875: PUSH
15876: LD_EXP 43
15880: PUSH
15881: LD_INT 1
15883: MINUS
15884: ST_TO_ADDR
// if ruMech = 0 then
15885: LD_EXP 43
15889: PUSH
15890: LD_INT 0
15892: EQUAL
15893: IFFALSE 15897
// exit ;
15895: GO 15998
// wait ( 0 0$40 ) ;
15897: LD_INT 1400
15899: PPUSH
15900: CALL_OW 67
// uc_side = 3 ;
15904: LD_ADDR_OWVAR 20
15908: PUSH
15909: LD_INT 3
15911: ST_TO_ADDR
// uc_nation = 3 ;
15912: LD_ADDR_OWVAR 21
15916: PUSH
15917: LD_INT 3
15919: ST_TO_ADDR
// hc_gallery :=  ;
15920: LD_ADDR_OWVAR 33
15924: PUSH
15925: LD_STRING 
15927: ST_TO_ADDR
// hc_name :=  ;
15928: LD_ADDR_OWVAR 26
15932: PUSH
15933: LD_STRING 
15935: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15936: LD_INT 0
15938: PPUSH
15939: LD_EXP 16
15943: PPUSH
15944: LD_EXP 17
15948: PPUSH
15949: CALL_OW 12
15953: PPUSH
15954: CALL_OW 383
// mech := CreateHuman ;
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: CALL_OW 44
15967: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_INT 124
15975: PPUSH
15976: LD_INT 97
15978: PPUSH
15979: LD_INT 0
15981: PPUSH
15982: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_INT 24
15993: PPUSH
15994: CALL_OW 120
// end ; end ;
15998: PPOPN 2
16000: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16001: LD_INT 0
16003: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16004: LD_VAR 0 1
16008: PPUSH
16009: LD_VAR 0 2
16013: PPUSH
16014: CALL 35647 0 2
// if GetSide ( vehicle ) = 1 then
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 255
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: IFFALSE 16047
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16033: LD_ADDR_EXP 42
16037: PUSH
16038: LD_EXP 42
16042: PUSH
16043: LD_INT 1
16045: PLUS
16046: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: LD_INT 3
16059: EQUAL
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 264
16070: PUSH
16071: LD_INT 42
16073: PUSH
16074: LD_INT 43
16076: PUSH
16077: LD_INT 44
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: IN
16085: AND
16086: IFFALSE 16104
// ruMobile := ruMobile union vehicle ;
16088: LD_ADDR_EXP 46
16092: PUSH
16093: LD_EXP 46
16097: PUSH
16098: LD_VAR 0 1
16102: UNION
16103: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 53
16116: EQUAL
16117: IFFALSE 16253
// begin uc_side = 3 ;
16119: LD_ADDR_OWVAR 20
16123: PUSH
16124: LD_INT 3
16126: ST_TO_ADDR
// uc_nation = 3 ;
16127: LD_ADDR_OWVAR 21
16131: PUSH
16132: LD_INT 3
16134: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_EXP 17
16142: PPUSH
16143: CALL_OW 383
// driver := CreateHuman ;
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: CALL_OW 44
16156: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_INT 21
16178: PPUSH
16179: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16183: LD_INT 35
16185: PPUSH
16186: CALL_OW 67
// until not HasTask ( vehicle ) ;
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 314
16199: NOT
16200: IFFALSE 16183
// driver := IsDrivenBy ( vehicle ) ;
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 311
16216: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 104
16224: PPUSH
16225: LD_INT 73
16227: PPUSH
16228: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 24
16248: PPUSH
16249: CALL_OW 180
// end ; end ;
16253: PPOPN 3
16255: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 255
16265: PUSH
16266: LD_INT 3
16268: EQUAL
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 247
16279: PUSH
16280: LD_INT 2
16282: EQUAL
16283: AND
16284: PUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 264
16294: PUSH
16295: LD_INT 42
16297: PUSH
16298: LD_INT 43
16300: PUSH
16301: LD_INT 44
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: IN
16309: AND
16310: IFFALSE 16359
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16312: LD_INT 24
16314: PPUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 265
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 262
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 263
16344: PPUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 264
16354: PPUSH
16355: CALL_OW 185
// end ;
16359: PPOPN 1
16361: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 255
16371: PUSH
16372: LD_INT 3
16374: EQUAL
16375: PUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: CALL_OW 255
16385: PUSH
16386: LD_INT 3
16388: EQUAL
16389: AND
16390: PUSH
16391: LD_INT 24
16393: PPUSH
16394: CALL_OW 302
16398: AND
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 302
16409: NOT
16410: AND
16411: IFFALSE 16425
// ComEnterUnit ( human , rubfact0 ) ;
16413: LD_VAR 0 2
16417: PPUSH
16418: LD_INT 24
16420: PPUSH
16421: CALL_OW 120
// end ;
16425: PPOPN 2
16427: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16428: LD_VAR 0 1
16432: PUSH
16433: LD_INT 24
16435: EQUAL
16436: PUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL_OW 256
16446: PUSH
16447: LD_INT 1000
16449: LESS
16450: AND
16451: IFFALSE 16465
// SetLives ( un , 1000 ) ;
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_INT 1000
16460: PPUSH
16461: CALL_OW 234
// end ;
16465: PPOPN 2
16467: END
// on Command ( comandid ) do var i , j , tmp ;
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
// begin SOS_Command ( comandid ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL 35631 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16482: LD_INT 22
16484: PUSH
16485: LD_INT 4
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: NOT
16497: IFFALSE 16501
// exit ;
16499: GO 16666
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16664
// begin if GetTaskList ( i ) > 0 then
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 437
16565: PUSH
16566: LD_INT 0
16568: GREATER
16569: IFFALSE 16662
// begin for j = 1 to GetTaskList ( i ) do
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 2
16585: PPUSH
16586: CALL_OW 437
16590: PUSH
16591: FOR_TO
16592: IFFALSE 16660
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16594: LD_ADDR_VAR 0 4
16598: PUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 437
16608: PUSH
16609: LD_VAR 0 3
16613: ARRAY
16614: PUSH
16615: LD_INT 4
16617: ARRAY
16618: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16619: LD_VAR 0 4
16623: PPUSH
16624: CALL_OW 255
16628: PUSH
16629: LD_INT 4
16631: EQUAL
16632: PUSH
16633: LD_VAR 0 4
16637: PPUSH
16638: CALL_OW 255
16642: PUSH
16643: LD_INT 0
16645: EQUAL
16646: OR
16647: IFFALSE 16658
// ComStop ( i ) ;
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL_OW 141
// end ;
16658: GO 16591
16660: POP
16661: POP
// end ; end ;
16662: GO 16553
16664: POP
16665: POP
// end ; end_of_file
16666: PPOPN 4
16668: END
// every 10 10$0 do
16669: GO 16671
16671: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16672: LD_INT 5
16674: PPUSH
16675: LD_INT 3
16677: PPUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 3
16686: PUSH
16687: LD_INT 4
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_OWVAR 67
16703: ARRAY
16704: PLUS
16705: PPUSH
16706: LD_INT 0
16708: PPUSH
16709: LD_EXP 16
16713: PPUSH
16714: LD_EXP 17
16718: PPUSH
16719: CALL_OW 12
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: LD_INT 14
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL 6960 0 9
16740: END
// every 20 20$0 do
16741: GO 16743
16743: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16744: LD_INT 5
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: LD_INT 4
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: LD_INT 5
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: LD_OWVAR 67
16775: ARRAY
16776: PLUS
16777: PPUSH
16778: LD_INT 2
16780: PPUSH
16781: LD_EXP 16
16785: PPUSH
16786: LD_EXP 17
16790: PPUSH
16791: CALL_OW 12
16795: PPUSH
16796: LD_INT 4
16798: PPUSH
16799: LD_INT 14
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL 6960 0 9
16812: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16813: GO 16815
16815: DISABLE
16816: LD_INT 0
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// begin hex := [ 123 , 95 ] ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_INT 123
16830: PUSH
16831: LD_INT 95
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// tmp := [ ] ;
16838: LD_ADDR_VAR 0 5
16842: PUSH
16843: EMPTY
16844: ST_TO_ADDR
// if Difficulty > 1 then
16845: LD_OWVAR 67
16849: PUSH
16850: LD_INT 1
16852: GREATER
16853: IFFALSE 16863
// specAttack := true ;
16855: LD_ADDR_EXP 47
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16863: LD_ADDR_VAR 0 1
16867: PUSH
16868: DOUBLE
16869: LD_INT 1
16871: DEC
16872: ST_TO_ADDR
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: LD_INT 6
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_OWVAR 67
16895: ARRAY
16896: PUSH
16897: FOR_TO
16898: IFFALSE 17200
// begin uc_side := 5 ;
16900: LD_ADDR_OWVAR 20
16904: PUSH
16905: LD_INT 5
16907: ST_TO_ADDR
// uc_nation := 3 ;
16908: LD_ADDR_OWVAR 21
16912: PUSH
16913: LD_INT 3
16915: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16916: LD_ADDR_OWVAR 37
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_INT 23
16929: PUSH
16930: LD_INT 24
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_OWVAR 67
16948: MOD
16949: PUSH
16950: LD_INT 1
16952: PLUS
16953: ARRAY
16954: ST_TO_ADDR
// vc_engine := engine_combustion ;
16955: LD_ADDR_OWVAR 39
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// vc_control := control_manual ;
16963: LD_ADDR_OWVAR 38
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16971: LD_ADDR_OWVAR 40
16975: PUSH
16976: LD_INT 42
16978: PUSH
16979: LD_INT 43
16981: PUSH
16982: LD_INT 44
16984: PUSH
16985: LD_INT 44
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: LD_OWVAR 67
17003: MOD
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ARRAY
17009: ST_TO_ADDR
// veh := CreateVehicle ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: CALL_OW 45
17019: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 5
17027: PPUSH
17028: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17032: LD_INT 35
17034: PPUSH
17035: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17039: LD_VAR 0 4
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_VAR 0 4
17052: PUSH
17053: LD_INT 2
17055: ARRAY
17056: PPUSH
17057: CALL_OW 428
17061: PUSH
17062: LD_INT 0
17064: EQUAL
17065: IFFALSE 17032
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_VAR 0 4
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 4
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: CALL_OW 48
// uc_side := 5 ;
17097: LD_ADDR_OWVAR 20
17101: PUSH
17102: LD_INT 5
17104: ST_TO_ADDR
// uc_nation := 3 ;
17105: LD_ADDR_OWVAR 21
17109: PUSH
17110: LD_INT 3
17112: ST_TO_ADDR
// InitHC_All ( ) ;
17113: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17117: LD_INT 0
17119: PPUSH
17120: LD_INT 2
17122: PUSH
17123: LD_OWVAR 67
17127: PLUS
17128: PPUSH
17129: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17133: CALL_OW 44
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 101
17154: PPUSH
17155: LD_INT 77
17157: PPUSH
17158: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17162: LD_ADDR_VAR 0 5
17166: PUSH
17167: LD_VAR 0 5
17171: PPUSH
17172: LD_VAR 0 5
17176: PUSH
17177: LD_INT 1
17179: PLUS
17180: PPUSH
17181: LD_VAR 0 3
17185: PPUSH
17186: CALL_OW 1
17190: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17191: LD_INT 105
17193: PPUSH
17194: CALL_OW 67
// end ;
17198: GO 16897
17200: POP
17201: POP
// repeat wait ( 0 0$1 ) ;
17202: LD_INT 35
17204: PPUSH
17205: CALL_OW 67
// for i in tmp do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_VAR 0 5
17218: PUSH
17219: FOR_IN
17220: IFFALSE 17288
// if not IsOk ( i ) then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 302
17231: NOT
17232: IFFALSE 17252
// tmp := tmp diff i else
17234: LD_ADDR_VAR 0 5
17238: PUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_VAR 0 1
17248: DIFF
17249: ST_TO_ADDR
17250: GO 17286
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 74
17281: PPUSH
17282: CALL_OW 115
17286: GO 17219
17288: POP
17289: POP
// until not tmp ;
17290: LD_VAR 0 5
17294: NOT
17295: IFFALSE 17202
// end ;
17297: PPOPN 5
17299: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17300: LD_EXP 47
17304: IFFALSE 17682
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
// begin wait ( 0 0$20 ) ;
17315: LD_INT 700
17317: PPUSH
17318: CALL_OW 67
// uc_side := 5 ;
17322: LD_ADDR_OWVAR 20
17326: PUSH
17327: LD_INT 5
17329: ST_TO_ADDR
// uc_nation := 3 ;
17330: LD_ADDR_OWVAR 21
17334: PUSH
17335: LD_INT 3
17337: ST_TO_ADDR
// InitHc ;
17338: CALL_OW 19
// hc_importance := 0 ;
17342: LD_ADDR_OWVAR 32
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// tmp := [ ] ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: EMPTY
17356: ST_TO_ADDR
// InitHC_All ( ) ;
17357: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17361: LD_INT 0
17363: PPUSH
17364: LD_INT 2
17366: PPUSH
17367: LD_INT 6
17369: PPUSH
17370: CALL_OW 380
// eng := CreateHuman ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: CALL_OW 44
17383: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_INT 78
17391: PPUSH
17392: LD_INT 2
17394: PPUSH
17395: LD_INT 4
17397: PPUSH
17398: LD_INT 0
17400: PPUSH
17401: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17405: LD_ADDR_VAR 0 3
17409: PUSH
17410: DOUBLE
17411: LD_INT 1
17413: DEC
17414: ST_TO_ADDR
17415: LD_INT 3
17417: PUSH
17418: LD_INT 3
17420: PUSH
17421: LD_INT 4
17423: PUSH
17424: LD_INT 5
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: LD_OWVAR 67
17437: ARRAY
17438: PUSH
17439: FOR_TO
17440: IFFALSE 17529
// begin InitHC_All ( ) ;
17442: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17446: LD_INT 0
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 4
17454: PUSH
17455: LD_INT 5
17457: PUSH
17458: LD_INT 6
17460: PUSH
17461: LD_INT 6
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: LD_OWVAR 67
17474: ARRAY
17475: PPUSH
17476: CALL_OW 380
// un := CreateHuman ;
17480: LD_ADDR_VAR 0 1
17484: PUSH
17485: CALL_OW 44
17489: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17490: LD_VAR 0 1
17494: PPUSH
17495: LD_INT 78
17497: PPUSH
17498: LD_INT 2
17500: PPUSH
17501: LD_INT 4
17503: PPUSH
17504: LD_INT 0
17506: PPUSH
17507: CALL_OW 50
// tmp := tmp ^ un ;
17511: LD_ADDR_VAR 0 2
17515: PUSH
17516: LD_VAR 0 2
17520: PUSH
17521: LD_VAR 0 1
17525: ADD
17526: ST_TO_ADDR
// end ;
17527: GO 17439
17529: POP
17530: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17531: LD_VAR 0 2
17535: PPUSH
17536: LD_INT 49
17538: PPUSH
17539: LD_INT 3
17541: PPUSH
17542: CALL_OW 111
// wait ( 0 0$2 ) ;
17546: LD_INT 70
17548: PPUSH
17549: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17553: LD_VAR 0 4
17557: PPUSH
17558: LD_INT 49
17560: PPUSH
17561: LD_INT 3
17563: PPUSH
17564: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17568: LD_VAR 0 4
17572: PPUSH
17573: LD_INT 4
17575: PPUSH
17576: CALL_OW 227
// wait ( 0 0$10 ) ;
17580: LD_INT 350
17582: PPUSH
17583: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// for i in tmp do
17594: LD_ADDR_VAR 0 3
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: FOR_IN
17605: IFFALSE 17673
// if not IsOk ( i ) then
17607: LD_VAR 0 3
17611: PPUSH
17612: CALL_OW 302
17616: NOT
17617: IFFALSE 17637
// tmp := tmp diff i else
17619: LD_ADDR_VAR 0 2
17623: PUSH
17624: LD_VAR 0 2
17628: PUSH
17629: LD_VAR 0 3
17633: DIFF
17634: ST_TO_ADDR
17635: GO 17671
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17637: LD_VAR 0 3
17641: PPUSH
17642: LD_INT 22
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PPUSH
17652: CALL_OW 69
17656: PPUSH
17657: LD_VAR 0 3
17661: PPUSH
17662: CALL_OW 74
17666: PPUSH
17667: CALL_OW 115
17671: GO 17604
17673: POP
17674: POP
// until not tmp ;
17675: LD_VAR 0 2
17679: NOT
17680: IFFALSE 17587
// end ; end_of_file
17682: PPOPN 4
17684: END
// every 0 0$1 trigger startTimer = 1 do
17685: LD_EXP 30
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: IFFALSE 17823
17695: GO 17697
17697: DISABLE
// begin enable ;
17698: ENABLE
// if timerStatus = 1 then
17699: LD_EXP 29
17703: PUSH
17704: LD_INT 1
17706: EQUAL
17707: IFFALSE 17740
// begin timeToSupport = timeToSupport - 0 0$01 ;
17709: LD_ADDR_EXP 28
17713: PUSH
17714: LD_EXP 28
17718: PUSH
17719: LD_INT 35
17721: MINUS
17722: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17723: LD_ADDR_OWVAR 47
17727: PUSH
17728: LD_STRING #Am04-1
17730: PUSH
17731: LD_EXP 28
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// end ; if timerStatus = 2 then
17740: LD_EXP 29
17744: PUSH
17745: LD_INT 2
17747: EQUAL
17748: IFFALSE 17781
// begin timeToSupport = timeToSupport - 0 0$01 ;
17750: LD_ADDR_EXP 28
17754: PUSH
17755: LD_EXP 28
17759: PUSH
17760: LD_INT 35
17762: MINUS
17763: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17764: LD_ADDR_OWVAR 47
17768: PUSH
17769: LD_STRING #Am04-2
17771: PUSH
17772: LD_EXP 28
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: ST_TO_ADDR
// end ; if timerStatus = 3 then
17781: LD_EXP 29
17785: PUSH
17786: LD_INT 3
17788: EQUAL
17789: IFFALSE 17805
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17791: LD_ADDR_EXP 27
17795: PUSH
17796: LD_EXP 27
17800: PUSH
17801: LD_INT 35
17803: MINUS
17804: ST_TO_ADDR
// if timerStatus = 4 then
17805: LD_EXP 29
17809: PUSH
17810: LD_INT 4
17812: EQUAL
17813: IFFALSE 17823
// display_strings =  ;
17815: LD_ADDR_OWVAR 47
17819: PUSH
17820: LD_STRING 
17822: ST_TO_ADDR
// end ; end_of_file
17823: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17824: LD_EXP 15
17828: PPUSH
17829: CALL_OW 301
17833: PUSH
17834: LD_INT 22
17836: PUSH
17837: LD_INT 3
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 21
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 69
17862: PUSH
17863: LD_INT 14
17865: PUSH
17866: LD_INT 13
17868: PUSH
17869: LD_INT 12
17871: PUSH
17872: LD_INT 11
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: PUSH
17881: LD_OWVAR 67
17885: ARRAY
17886: LESS
17887: AND
17888: IFFALSE 18474
17890: GO 17892
17892: DISABLE
17893: LD_INT 0
17895: PPUSH
17896: PPUSH
17897: PPUSH
// begin AIEnable = 0 ;
17898: LD_ADDR_EXP 37
17902: PUSH
17903: LD_INT 0
17905: ST_TO_ADDR
// escapeAvalaible = 1 ;
17906: LD_ADDR_EXP 40
17910: PUSH
17911: LD_INT 1
17913: ST_TO_ADDR
// Video ( true ) ;
17914: LD_INT 1
17916: PPUSH
17917: CALL 77256 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17921: LD_INT 3
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_INT 0
17932: PPUSH
17933: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17937: LD_INT 6
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: LD_INT 0
17948: PPUSH
17949: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17953: LD_INT 5
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 0
17964: PPUSH
17965: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17969: LD_INT 3
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17979: LD_INT 97
17981: PPUSH
17982: LD_INT 91
17984: PPUSH
17985: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17989: LD_INT 22
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 21
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: PPUSH
18018: CALL_OW 121
// wait ( 0 0$01 ) ;
18022: LD_INT 35
18024: PPUSH
18025: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18029: LD_INT 22
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 21
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PPUSH
18058: LD_INT 124
18060: PPUSH
18061: LD_INT 98
18063: PPUSH
18064: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18068: LD_INT 22
18070: PUSH
18071: LD_INT 5
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 21
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: PPUSH
18097: CALL_OW 121
// wait ( 0 0$01 ) ;
18101: LD_INT 35
18103: PPUSH
18104: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18108: LD_INT 22
18110: PUSH
18111: LD_INT 5
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 21
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: PPUSH
18137: LD_INT 124
18139: PPUSH
18140: LD_INT 98
18142: PPUSH
18143: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18147: LD_INT 22
18149: PUSH
18150: LD_INT 6
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 21
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: PPUSH
18176: CALL_OW 121
// wait ( 0 0$01 ) ;
18180: LD_INT 35
18182: PPUSH
18183: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18187: LD_INT 22
18189: PUSH
18190: LD_INT 6
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 21
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: PPUSH
18216: LD_INT 124
18218: PPUSH
18219: LD_INT 98
18221: PPUSH
18222: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PPUSH
18255: LD_INT 124
18257: PPUSH
18258: LD_INT 96
18260: PPUSH
18261: CALL_OW 114
// wait ( 0 0$1 ) ;
18265: LD_INT 35
18267: PPUSH
18268: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18272: LD_INT 124
18274: PPUSH
18275: LD_INT 96
18277: PPUSH
18278: CALL_OW 84
// p := 0 0$0 ;
18282: LD_ADDR_VAR 0 3
18286: PUSH
18287: LD_INT 0
18289: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18290: LD_ADDR_VAR 0 2
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 22
18310: PUSH
18311: LD_INT 6
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 21
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PPUSH
18337: CALL_OW 69
18341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18342: LD_INT 35
18344: PPUSH
18345: CALL_OW 67
// p := p + 0 0$1 ;
18349: LD_ADDR_VAR 0 3
18353: PUSH
18354: LD_VAR 0 3
18358: PUSH
18359: LD_INT 35
18361: PLUS
18362: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18363: LD_VAR 0 2
18367: PPUSH
18368: LD_INT 5
18370: PPUSH
18371: CALL_OW 113
// for i in tmp do
18375: LD_ADDR_VAR 0 1
18379: PUSH
18380: LD_VAR 0 2
18384: PUSH
18385: FOR_IN
18386: IFFALSE 18413
// if IsInArea ( tmp , RussianEscape ) then
18388: LD_VAR 0 2
18392: PPUSH
18393: LD_INT 5
18395: PPUSH
18396: CALL_OW 308
18400: IFFALSE 18411
// RemoveUnit ( i ) ;
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 64
18411: GO 18385
18413: POP
18414: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18415: LD_INT 23
18417: PUSH
18418: LD_INT 3
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 21
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 24
18437: PUSH
18438: LD_INT 250
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: LIST
18449: PPUSH
18450: CALL_OW 69
18454: PUSH
18455: LD_INT 0
18457: EQUAL
18458: PUSH
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 245
18466: GREATEREQUAL
18467: OR
18468: IFFALSE 18342
// FinishMission ;
18470: CALL 18477 0 0
// end ;
18474: PPOPN 3
18476: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18477: LD_INT 0
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
// if not vehicleProduceCounter then
18484: LD_EXP 42
18488: NOT
18489: IFFALSE 18498
// SetAchievement ( ACH_INFANTRY ) ;
18491: LD_STRING ACH_INFANTRY
18493: PPUSH
18494: CALL_OW 543
// if tick <= 20 20$00 then
18498: LD_OWVAR 1
18502: PUSH
18503: LD_INT 42000
18505: LESSEQUAL
18506: IFFALSE 18522
// begin wait ( 3 ) ;
18508: LD_INT 3
18510: PPUSH
18511: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18515: LD_STRING ACH_ASPEED_4
18517: PPUSH
18518: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18522: LD_INT 22
18524: PPUSH
18525: CALL 19166 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18529: LD_INT 69
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: CALL_OW 321
18539: PPUSH
18540: LD_STRING GatlingInGamma
18542: PPUSH
18543: CALL_OW 39
// m1 := false ;
18547: LD_ADDR_VAR 0 3
18551: PUSH
18552: LD_INT 0
18554: ST_TO_ADDR
// m2 := false ;
18555: LD_ADDR_VAR 0 4
18559: PUSH
18560: LD_INT 0
18562: ST_TO_ADDR
// m3 := false ;
18563: LD_ADDR_VAR 0 5
18567: PUSH
18568: LD_INT 0
18570: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18571: LD_EXP 34
18575: PUSH
18576: LD_INT 1
18578: EQUAL
18579: PUSH
18580: LD_EXP 35
18584: PUSH
18585: LD_INT 1
18587: EQUAL
18588: AND
18589: IFFALSE 18611
// begin AddMedal ( oil , 1 ) ;
18591: LD_STRING oil
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 101
// m1 := true ;
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_INT 1
18608: ST_TO_ADDR
// end else
18609: GO 18704
// begin if buildOil = 1 and buildPower = 0 then
18611: LD_EXP 34
18615: PUSH
18616: LD_INT 1
18618: EQUAL
18619: PUSH
18620: LD_EXP 35
18624: PUSH
18625: LD_INT 0
18627: EQUAL
18628: AND
18629: IFFALSE 18642
// AddMedal ( oil , - 1 ) ;
18631: LD_STRING oil
18633: PPUSH
18634: LD_INT 1
18636: NEG
18637: PPUSH
18638: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18642: LD_EXP 34
18646: PUSH
18647: LD_INT 0
18649: EQUAL
18650: PUSH
18651: LD_EXP 35
18655: PUSH
18656: LD_INT 1
18658: EQUAL
18659: AND
18660: IFFALSE 18673
// AddMedal ( oil , - 2 ) ;
18662: LD_STRING oil
18664: PPUSH
18665: LD_INT 2
18667: NEG
18668: PPUSH
18669: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18673: LD_EXP 34
18677: PUSH
18678: LD_INT 0
18680: EQUAL
18681: PUSH
18682: LD_EXP 35
18686: PUSH
18687: LD_INT 0
18689: EQUAL
18690: AND
18691: IFFALSE 18704
// AddMedal ( oil , - 3 ) ;
18693: LD_STRING oil
18695: PPUSH
18696: LD_INT 3
18698: NEG
18699: PPUSH
18700: CALL_OW 101
// end ; if lostCounter > 3 then
18704: LD_EXP 38
18708: PUSH
18709: LD_INT 3
18711: GREATER
18712: IFFALSE 18727
// AddMedal ( deaths , - 1 ) else
18714: LD_STRING deaths
18716: PPUSH
18717: LD_INT 1
18719: NEG
18720: PPUSH
18721: CALL_OW 101
18725: GO 18745
// begin AddMedal ( deaths , 1 ) ;
18727: LD_STRING deaths
18729: PPUSH
18730: LD_INT 1
18732: PPUSH
18733: CALL_OW 101
// m2 := true ;
18737: LD_ADDR_VAR 0 4
18741: PUSH
18742: LD_INT 1
18744: ST_TO_ADDR
// end ; if honor = 1 then
18745: LD_EXP 39
18749: PUSH
18750: LD_INT 1
18752: EQUAL
18753: IFFALSE 18775
// begin AddMedal ( honour , 1 ) ;
18755: LD_STRING honour
18757: PPUSH
18758: LD_INT 1
18760: PPUSH
18761: CALL_OW 101
// m3 := true ;
18765: LD_ADDR_VAR 0 5
18769: PUSH
18770: LD_INT 1
18772: ST_TO_ADDR
// end else
18773: GO 18786
// AddMedal ( honour , - 1 ) ;
18775: LD_STRING honour
18777: PPUSH
18778: LD_INT 1
18780: NEG
18781: PPUSH
18782: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18786: LD_VAR 0 3
18790: PUSH
18791: LD_VAR 0 4
18795: AND
18796: PUSH
18797: LD_VAR 0 5
18801: AND
18802: PUSH
18803: LD_OWVAR 67
18807: PUSH
18808: LD_INT 3
18810: GREATEREQUAL
18811: AND
18812: IFFALSE 18824
// SetAchievementEX ( ACH_AMER , 4 ) ;
18814: LD_STRING ACH_AMER
18816: PPUSH
18817: LD_INT 4
18819: PPUSH
18820: CALL_OW 564
// GiveMedals ( Main ) ;
18824: LD_STRING Main
18826: PPUSH
18827: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18831: LD_INT 22
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 23
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 21
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: PPUSH
18866: CALL_OW 69
18870: PPUSH
18871: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18875: LD_EXP 1
18879: PPUSH
18880: LD_EXP 48
18884: PUSH
18885: LD_STRING JMM
18887: STR
18888: PPUSH
18889: CALL_OW 38
// if IsOK ( Bobby ) then
18893: LD_EXP 2
18897: PPUSH
18898: CALL_OW 302
18902: IFFALSE 18922
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18904: LD_EXP 2
18908: PPUSH
18909: LD_EXP 48
18913: PUSH
18914: LD_STRING Bobby
18916: STR
18917: PPUSH
18918: CALL_OW 38
// if IsOK ( Cyrus ) then
18922: LD_EXP 3
18926: PPUSH
18927: CALL_OW 302
18931: IFFALSE 18951
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18933: LD_EXP 3
18937: PPUSH
18938: LD_EXP 48
18942: PUSH
18943: LD_STRING Cyrus
18945: STR
18946: PPUSH
18947: CALL_OW 38
// if IsOK ( Lisa ) then
18951: LD_EXP 4
18955: PPUSH
18956: CALL_OW 302
18960: IFFALSE 18980
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18962: LD_EXP 4
18966: PPUSH
18967: LD_EXP 48
18971: PUSH
18972: LD_STRING Lisa
18974: STR
18975: PPUSH
18976: CALL_OW 38
// if IsOK ( Brown ) then
18980: LD_EXP 7
18984: PPUSH
18985: CALL_OW 302
18989: IFFALSE 19009
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18991: LD_EXP 7
18995: PPUSH
18996: LD_EXP 48
19000: PUSH
19001: LD_STRING Brown
19003: STR
19004: PPUSH
19005: CALL_OW 38
// if not IsDead ( Donaldson ) then
19009: LD_EXP 13
19013: PPUSH
19014: CALL_OW 301
19018: NOT
19019: IFFALSE 19039
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19021: LD_EXP 13
19025: PPUSH
19026: LD_EXP 48
19030: PUSH
19031: LD_STRING Donaldson
19033: STR
19034: PPUSH
19035: CALL_OW 38
// if not IsDead ( Frank ) then
19039: LD_EXP 5
19043: PPUSH
19044: CALL_OW 301
19048: NOT
19049: IFFALSE 19069
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19051: LD_EXP 5
19055: PPUSH
19056: LD_EXP 48
19060: PUSH
19061: LD_STRING Frank
19063: STR
19064: PPUSH
19065: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19069: LD_INT 50
19071: PUSH
19072: EMPTY
19073: LIST
19074: PUSH
19075: LD_INT 22
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: PUSH
19105: LD_EXP 1
19109: PUSH
19110: LD_EXP 2
19114: PUSH
19115: LD_EXP 3
19119: PUSH
19120: LD_EXP 4
19124: PUSH
19125: LD_EXP 7
19129: PUSH
19130: LD_EXP 13
19134: PUSH
19135: LD_EXP 5
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: DIFF
19149: PPUSH
19150: LD_STRING 04_other_survivors
19152: PPUSH
19153: CALL_OW 38
// YouWin ;
19157: CALL_OW 103
// end ;
19161: LD_VAR 0 1
19165: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19166: LD_INT 0
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
// gammaBase = [ ] ;
19172: LD_ADDR_VAR 0 4
19176: PUSH
19177: EMPTY
19178: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19179: LD_ADDR_VAR 0 5
19183: PUSH
19184: LD_VAR 0 1
19188: PPUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 21
19201: PUSH
19202: LD_INT 3
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 70
19217: ST_TO_ADDR
// for i in buildings do
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: LD_VAR 0 5
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19566
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19231: LD_VAR 0 3
19235: PPUSH
19236: CALL_OW 266
19240: PUSH
19241: LD_INT 6
19243: PUSH
19244: LD_INT 7
19246: PUSH
19247: LD_INT 8
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: IN
19255: IFFALSE 19369
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19257: LD_ADDR_VAR 0 4
19261: PUSH
19262: LD_VAR 0 4
19266: PUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: CALL_OW 266
19276: PUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 250
19286: PUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 251
19296: PUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 254
19306: PUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: CALL_OW 267
19316: PUSH
19317: LD_VAR 0 3
19321: PPUSH
19322: CALL_OW 248
19326: PUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: CALL_OW 268
19339: PUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_INT 2
19347: PPUSH
19348: CALL_OW 268
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: ADD
19366: ST_TO_ADDR
19367: GO 19564
// if GetBType ( i ) in [ b_bunker ] then
19369: LD_VAR 0 3
19373: PPUSH
19374: CALL_OW 266
19378: PUSH
19379: LD_INT 32
19381: PUSH
19382: EMPTY
19383: LIST
19384: IN
19385: IFFALSE 19482
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19387: LD_ADDR_VAR 0 4
19391: PUSH
19392: LD_VAR 0 4
19396: PUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: CALL_OW 266
19406: PUSH
19407: LD_VAR 0 3
19411: PPUSH
19412: CALL_OW 250
19416: PUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: CALL_OW 251
19426: PUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL_OW 254
19436: PUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: CALL_OW 267
19446: PUSH
19447: LD_VAR 0 3
19451: PPUSH
19452: CALL_OW 248
19456: PUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: CALL_OW 269
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: ADD
19479: ST_TO_ADDR
19480: GO 19564
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19482: LD_ADDR_VAR 0 4
19486: PUSH
19487: LD_VAR 0 4
19491: PUSH
19492: LD_VAR 0 3
19496: PPUSH
19497: CALL_OW 266
19501: PUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: CALL_OW 250
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 251
19521: PUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: CALL_OW 254
19531: PUSH
19532: LD_VAR 0 3
19536: PPUSH
19537: CALL_OW 267
19541: PUSH
19542: LD_VAR 0 3
19546: PPUSH
19547: CALL_OW 248
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: PUSH
19560: EMPTY
19561: LIST
19562: ADD
19563: ST_TO_ADDR
// end ;
19564: GO 19228
19566: POP
19567: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19568: LD_VAR 0 4
19572: PPUSH
19573: LD_STRING GammaBase
19575: PPUSH
19576: CALL_OW 39
// end ; end_of_file
19580: LD_VAR 0 2
19584: RET
// every 1 1$15 do
19585: GO 19587
19587: DISABLE
// begin if supply <= 13 and supply > 7 then
19588: LD_EXP 36
19592: PUSH
19593: LD_INT 13
19595: LESSEQUAL
19596: PUSH
19597: LD_EXP 36
19601: PUSH
19602: LD_INT 7
19604: GREATER
19605: AND
19606: IFFALSE 19629
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19608: LD_INT 3
19610: PPUSH
19611: LD_INT 5
19613: PPUSH
19614: CALL_OW 12
19618: PPUSH
19619: LD_INT 18
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: CALL_OW 55
// if supply <= 7 and supply > 4 then
19629: LD_EXP 36
19633: PUSH
19634: LD_INT 7
19636: LESSEQUAL
19637: PUSH
19638: LD_EXP 36
19642: PUSH
19643: LD_INT 4
19645: GREATER
19646: AND
19647: IFFALSE 19670
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19649: LD_INT 3
19651: PPUSH
19652: LD_INT 5
19654: PPUSH
19655: CALL_OW 12
19659: PPUSH
19660: LD_INT 19
19662: PPUSH
19663: LD_INT 1
19665: PPUSH
19666: CALL_OW 55
// if supply <= 4 and supply > 0 then
19670: LD_EXP 36
19674: PUSH
19675: LD_INT 4
19677: LESSEQUAL
19678: PUSH
19679: LD_EXP 36
19683: PUSH
19684: LD_INT 0
19686: GREATER
19687: AND
19688: IFFALSE 19711
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19690: LD_INT 3
19692: PPUSH
19693: LD_INT 5
19695: PPUSH
19696: CALL_OW 12
19700: PPUSH
19701: LD_INT 20
19703: PPUSH
19704: LD_INT 1
19706: PPUSH
19707: CALL_OW 55
// if supply then
19711: LD_EXP 36
19715: IFFALSE 19732
// begin supply = supply - 1 ;
19717: LD_ADDR_EXP 36
19721: PUSH
19722: LD_EXP 36
19726: PUSH
19727: LD_INT 1
19729: MINUS
19730: ST_TO_ADDR
// enable ;
19731: ENABLE
// end ; end ; end_of_file end_of_file
19732: END
// export globalGameSaveCounter ; every 0 0$1 do
19733: GO 19735
19735: DISABLE
// begin enable ;
19736: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19737: LD_STRING updateTimer(
19739: PUSH
19740: LD_OWVAR 1
19744: STR
19745: PUSH
19746: LD_STRING );
19748: STR
19749: PPUSH
19750: CALL_OW 559
// end ;
19754: END
// every 0 0$1 do
19755: GO 19757
19757: DISABLE
// begin globalGameSaveCounter := 0 ;
19758: LD_ADDR_EXP 50
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19766: LD_STRING setGameSaveCounter(0)
19768: PPUSH
19769: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19773: LD_STRING initStreamRollete();
19775: PPUSH
19776: CALL_OW 559
// InitStreamMode ;
19780: CALL 21106 0 0
// DefineStreamItems ( false ) ;
19784: LD_INT 0
19786: PPUSH
19787: CALL 21570 0 1
// end ;
19791: END
// export function SOS_MapStart ( ) ; begin
19792: LD_INT 0
19794: PPUSH
// if streamModeActive then
19795: LD_EXP 51
19799: IFFALSE 19808
// DefineStreamItems ( true ) ;
19801: LD_INT 1
19803: PPUSH
19804: CALL 21570 0 1
// UpdateLuaVariables ( ) ;
19808: CALL 19825 0 0
// UpdateFactoryWaypoints ( ) ;
19812: CALL 34431 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19816: CALL 34688 0 0
// end ;
19820: LD_VAR 0 1
19824: RET
// function UpdateLuaVariables ( ) ; begin
19825: LD_INT 0
19827: PPUSH
// if globalGameSaveCounter then
19828: LD_EXP 50
19832: IFFALSE 19866
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19834: LD_ADDR_EXP 50
19838: PUSH
19839: LD_EXP 50
19843: PPUSH
19844: CALL 78645 0 1
19848: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19849: LD_STRING setGameSaveCounter(
19851: PUSH
19852: LD_EXP 50
19856: STR
19857: PUSH
19858: LD_STRING )
19860: STR
19861: PPUSH
19862: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19866: LD_STRING setGameDifficulty(
19868: PUSH
19869: LD_OWVAR 67
19873: STR
19874: PUSH
19875: LD_STRING )
19877: STR
19878: PPUSH
19879: CALL_OW 559
// end ;
19883: LD_VAR 0 1
19887: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19888: LD_INT 0
19890: PPUSH
// if p2 = stream_mode then
19891: LD_VAR 0 2
19895: PUSH
19896: LD_INT 100
19898: EQUAL
19899: IFFALSE 20902
// begin if not StreamModeActive then
19901: LD_EXP 51
19905: NOT
19906: IFFALSE 19916
// StreamModeActive := true ;
19908: LD_ADDR_EXP 51
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// if p3 = 0 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 0
19923: EQUAL
19924: IFFALSE 19930
// InitStreamMode ;
19926: CALL 21106 0 0
// if p3 = 1 then
19930: LD_VAR 0 3
19934: PUSH
19935: LD_INT 1
19937: EQUAL
19938: IFFALSE 19948
// sRocket := true ;
19940: LD_ADDR_EXP 56
19944: PUSH
19945: LD_INT 1
19947: ST_TO_ADDR
// if p3 = 2 then
19948: LD_VAR 0 3
19952: PUSH
19953: LD_INT 2
19955: EQUAL
19956: IFFALSE 19966
// sSpeed := true ;
19958: LD_ADDR_EXP 55
19962: PUSH
19963: LD_INT 1
19965: ST_TO_ADDR
// if p3 = 3 then
19966: LD_VAR 0 3
19970: PUSH
19971: LD_INT 3
19973: EQUAL
19974: IFFALSE 19984
// sEngine := true ;
19976: LD_ADDR_EXP 57
19980: PUSH
19981: LD_INT 1
19983: ST_TO_ADDR
// if p3 = 4 then
19984: LD_VAR 0 3
19988: PUSH
19989: LD_INT 4
19991: EQUAL
19992: IFFALSE 20002
// sSpec := true ;
19994: LD_ADDR_EXP 54
19998: PUSH
19999: LD_INT 1
20001: ST_TO_ADDR
// if p3 = 5 then
20002: LD_VAR 0 3
20006: PUSH
20007: LD_INT 5
20009: EQUAL
20010: IFFALSE 20020
// sLevel := true ;
20012: LD_ADDR_EXP 58
20016: PUSH
20017: LD_INT 1
20019: ST_TO_ADDR
// if p3 = 6 then
20020: LD_VAR 0 3
20024: PUSH
20025: LD_INT 6
20027: EQUAL
20028: IFFALSE 20038
// sArmoury := true ;
20030: LD_ADDR_EXP 59
20034: PUSH
20035: LD_INT 1
20037: ST_TO_ADDR
// if p3 = 7 then
20038: LD_VAR 0 3
20042: PUSH
20043: LD_INT 7
20045: EQUAL
20046: IFFALSE 20056
// sRadar := true ;
20048: LD_ADDR_EXP 60
20052: PUSH
20053: LD_INT 1
20055: ST_TO_ADDR
// if p3 = 8 then
20056: LD_VAR 0 3
20060: PUSH
20061: LD_INT 8
20063: EQUAL
20064: IFFALSE 20074
// sBunker := true ;
20066: LD_ADDR_EXP 61
20070: PUSH
20071: LD_INT 1
20073: ST_TO_ADDR
// if p3 = 9 then
20074: LD_VAR 0 3
20078: PUSH
20079: LD_INT 9
20081: EQUAL
20082: IFFALSE 20092
// sHack := true ;
20084: LD_ADDR_EXP 62
20088: PUSH
20089: LD_INT 1
20091: ST_TO_ADDR
// if p3 = 10 then
20092: LD_VAR 0 3
20096: PUSH
20097: LD_INT 10
20099: EQUAL
20100: IFFALSE 20110
// sFire := true ;
20102: LD_ADDR_EXP 63
20106: PUSH
20107: LD_INT 1
20109: ST_TO_ADDR
// if p3 = 11 then
20110: LD_VAR 0 3
20114: PUSH
20115: LD_INT 11
20117: EQUAL
20118: IFFALSE 20128
// sRefresh := true ;
20120: LD_ADDR_EXP 64
20124: PUSH
20125: LD_INT 1
20127: ST_TO_ADDR
// if p3 = 12 then
20128: LD_VAR 0 3
20132: PUSH
20133: LD_INT 12
20135: EQUAL
20136: IFFALSE 20146
// sExp := true ;
20138: LD_ADDR_EXP 65
20142: PUSH
20143: LD_INT 1
20145: ST_TO_ADDR
// if p3 = 13 then
20146: LD_VAR 0 3
20150: PUSH
20151: LD_INT 13
20153: EQUAL
20154: IFFALSE 20164
// sDepot := true ;
20156: LD_ADDR_EXP 66
20160: PUSH
20161: LD_INT 1
20163: ST_TO_ADDR
// if p3 = 14 then
20164: LD_VAR 0 3
20168: PUSH
20169: LD_INT 14
20171: EQUAL
20172: IFFALSE 20182
// sFlag := true ;
20174: LD_ADDR_EXP 67
20178: PUSH
20179: LD_INT 1
20181: ST_TO_ADDR
// if p3 = 15 then
20182: LD_VAR 0 3
20186: PUSH
20187: LD_INT 15
20189: EQUAL
20190: IFFALSE 20200
// sKamikadze := true ;
20192: LD_ADDR_EXP 75
20196: PUSH
20197: LD_INT 1
20199: ST_TO_ADDR
// if p3 = 16 then
20200: LD_VAR 0 3
20204: PUSH
20205: LD_INT 16
20207: EQUAL
20208: IFFALSE 20218
// sTroll := true ;
20210: LD_ADDR_EXP 76
20214: PUSH
20215: LD_INT 1
20217: ST_TO_ADDR
// if p3 = 17 then
20218: LD_VAR 0 3
20222: PUSH
20223: LD_INT 17
20225: EQUAL
20226: IFFALSE 20236
// sSlow := true ;
20228: LD_ADDR_EXP 77
20232: PUSH
20233: LD_INT 1
20235: ST_TO_ADDR
// if p3 = 18 then
20236: LD_VAR 0 3
20240: PUSH
20241: LD_INT 18
20243: EQUAL
20244: IFFALSE 20254
// sLack := true ;
20246: LD_ADDR_EXP 78
20250: PUSH
20251: LD_INT 1
20253: ST_TO_ADDR
// if p3 = 19 then
20254: LD_VAR 0 3
20258: PUSH
20259: LD_INT 19
20261: EQUAL
20262: IFFALSE 20272
// sTank := true ;
20264: LD_ADDR_EXP 80
20268: PUSH
20269: LD_INT 1
20271: ST_TO_ADDR
// if p3 = 20 then
20272: LD_VAR 0 3
20276: PUSH
20277: LD_INT 20
20279: EQUAL
20280: IFFALSE 20290
// sRemote := true ;
20282: LD_ADDR_EXP 81
20286: PUSH
20287: LD_INT 1
20289: ST_TO_ADDR
// if p3 = 21 then
20290: LD_VAR 0 3
20294: PUSH
20295: LD_INT 21
20297: EQUAL
20298: IFFALSE 20308
// sPowell := true ;
20300: LD_ADDR_EXP 82
20304: PUSH
20305: LD_INT 1
20307: ST_TO_ADDR
// if p3 = 22 then
20308: LD_VAR 0 3
20312: PUSH
20313: LD_INT 22
20315: EQUAL
20316: IFFALSE 20326
// sTeleport := true ;
20318: LD_ADDR_EXP 85
20322: PUSH
20323: LD_INT 1
20325: ST_TO_ADDR
// if p3 = 23 then
20326: LD_VAR 0 3
20330: PUSH
20331: LD_INT 23
20333: EQUAL
20334: IFFALSE 20344
// sOilTower := true ;
20336: LD_ADDR_EXP 87
20340: PUSH
20341: LD_INT 1
20343: ST_TO_ADDR
// if p3 = 24 then
20344: LD_VAR 0 3
20348: PUSH
20349: LD_INT 24
20351: EQUAL
20352: IFFALSE 20362
// sShovel := true ;
20354: LD_ADDR_EXP 88
20358: PUSH
20359: LD_INT 1
20361: ST_TO_ADDR
// if p3 = 25 then
20362: LD_VAR 0 3
20366: PUSH
20367: LD_INT 25
20369: EQUAL
20370: IFFALSE 20380
// sSheik := true ;
20372: LD_ADDR_EXP 89
20376: PUSH
20377: LD_INT 1
20379: ST_TO_ADDR
// if p3 = 26 then
20380: LD_VAR 0 3
20384: PUSH
20385: LD_INT 26
20387: EQUAL
20388: IFFALSE 20398
// sEarthquake := true ;
20390: LD_ADDR_EXP 91
20394: PUSH
20395: LD_INT 1
20397: ST_TO_ADDR
// if p3 = 27 then
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 27
20405: EQUAL
20406: IFFALSE 20416
// sAI := true ;
20408: LD_ADDR_EXP 92
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// if p3 = 28 then
20416: LD_VAR 0 3
20420: PUSH
20421: LD_INT 28
20423: EQUAL
20424: IFFALSE 20434
// sCargo := true ;
20426: LD_ADDR_EXP 95
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// if p3 = 29 then
20434: LD_VAR 0 3
20438: PUSH
20439: LD_INT 29
20441: EQUAL
20442: IFFALSE 20452
// sDLaser := true ;
20444: LD_ADDR_EXP 96
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// if p3 = 30 then
20452: LD_VAR 0 3
20456: PUSH
20457: LD_INT 30
20459: EQUAL
20460: IFFALSE 20470
// sExchange := true ;
20462: LD_ADDR_EXP 97
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// if p3 = 31 then
20470: LD_VAR 0 3
20474: PUSH
20475: LD_INT 31
20477: EQUAL
20478: IFFALSE 20488
// sFac := true ;
20480: LD_ADDR_EXP 98
20484: PUSH
20485: LD_INT 1
20487: ST_TO_ADDR
// if p3 = 32 then
20488: LD_VAR 0 3
20492: PUSH
20493: LD_INT 32
20495: EQUAL
20496: IFFALSE 20506
// sPower := true ;
20498: LD_ADDR_EXP 99
20502: PUSH
20503: LD_INT 1
20505: ST_TO_ADDR
// if p3 = 33 then
20506: LD_VAR 0 3
20510: PUSH
20511: LD_INT 33
20513: EQUAL
20514: IFFALSE 20524
// sRandom := true ;
20516: LD_ADDR_EXP 100
20520: PUSH
20521: LD_INT 1
20523: ST_TO_ADDR
// if p3 = 34 then
20524: LD_VAR 0 3
20528: PUSH
20529: LD_INT 34
20531: EQUAL
20532: IFFALSE 20542
// sShield := true ;
20534: LD_ADDR_EXP 101
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// if p3 = 35 then
20542: LD_VAR 0 3
20546: PUSH
20547: LD_INT 35
20549: EQUAL
20550: IFFALSE 20560
// sTime := true ;
20552: LD_ADDR_EXP 102
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if p3 = 36 then
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 36
20567: EQUAL
20568: IFFALSE 20578
// sTools := true ;
20570: LD_ADDR_EXP 103
20574: PUSH
20575: LD_INT 1
20577: ST_TO_ADDR
// if p3 = 101 then
20578: LD_VAR 0 3
20582: PUSH
20583: LD_INT 101
20585: EQUAL
20586: IFFALSE 20596
// sSold := true ;
20588: LD_ADDR_EXP 68
20592: PUSH
20593: LD_INT 1
20595: ST_TO_ADDR
// if p3 = 102 then
20596: LD_VAR 0 3
20600: PUSH
20601: LD_INT 102
20603: EQUAL
20604: IFFALSE 20614
// sDiff := true ;
20606: LD_ADDR_EXP 69
20610: PUSH
20611: LD_INT 1
20613: ST_TO_ADDR
// if p3 = 103 then
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 103
20621: EQUAL
20622: IFFALSE 20632
// sFog := true ;
20624: LD_ADDR_EXP 72
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// if p3 = 104 then
20632: LD_VAR 0 3
20636: PUSH
20637: LD_INT 104
20639: EQUAL
20640: IFFALSE 20650
// sReset := true ;
20642: LD_ADDR_EXP 73
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// if p3 = 105 then
20650: LD_VAR 0 3
20654: PUSH
20655: LD_INT 105
20657: EQUAL
20658: IFFALSE 20668
// sSun := true ;
20660: LD_ADDR_EXP 74
20664: PUSH
20665: LD_INT 1
20667: ST_TO_ADDR
// if p3 = 106 then
20668: LD_VAR 0 3
20672: PUSH
20673: LD_INT 106
20675: EQUAL
20676: IFFALSE 20686
// sTiger := true ;
20678: LD_ADDR_EXP 70
20682: PUSH
20683: LD_INT 1
20685: ST_TO_ADDR
// if p3 = 107 then
20686: LD_VAR 0 3
20690: PUSH
20691: LD_INT 107
20693: EQUAL
20694: IFFALSE 20704
// sBomb := true ;
20696: LD_ADDR_EXP 71
20700: PUSH
20701: LD_INT 1
20703: ST_TO_ADDR
// if p3 = 108 then
20704: LD_VAR 0 3
20708: PUSH
20709: LD_INT 108
20711: EQUAL
20712: IFFALSE 20722
// sWound := true ;
20714: LD_ADDR_EXP 79
20718: PUSH
20719: LD_INT 1
20721: ST_TO_ADDR
// if p3 = 109 then
20722: LD_VAR 0 3
20726: PUSH
20727: LD_INT 109
20729: EQUAL
20730: IFFALSE 20740
// sBetray := true ;
20732: LD_ADDR_EXP 83
20736: PUSH
20737: LD_INT 1
20739: ST_TO_ADDR
// if p3 = 110 then
20740: LD_VAR 0 3
20744: PUSH
20745: LD_INT 110
20747: EQUAL
20748: IFFALSE 20758
// sContamin := true ;
20750: LD_ADDR_EXP 84
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// if p3 = 111 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 111
20765: EQUAL
20766: IFFALSE 20776
// sOil := true ;
20768: LD_ADDR_EXP 86
20772: PUSH
20773: LD_INT 1
20775: ST_TO_ADDR
// if p3 = 112 then
20776: LD_VAR 0 3
20780: PUSH
20781: LD_INT 112
20783: EQUAL
20784: IFFALSE 20794
// sStu := true ;
20786: LD_ADDR_EXP 90
20790: PUSH
20791: LD_INT 1
20793: ST_TO_ADDR
// if p3 = 113 then
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 113
20801: EQUAL
20802: IFFALSE 20812
// sBazooka := true ;
20804: LD_ADDR_EXP 93
20808: PUSH
20809: LD_INT 1
20811: ST_TO_ADDR
// if p3 = 114 then
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 114
20819: EQUAL
20820: IFFALSE 20830
// sMortar := true ;
20822: LD_ADDR_EXP 94
20826: PUSH
20827: LD_INT 1
20829: ST_TO_ADDR
// if p3 = 115 then
20830: LD_VAR 0 3
20834: PUSH
20835: LD_INT 115
20837: EQUAL
20838: IFFALSE 20848
// sRanger := true ;
20840: LD_ADDR_EXP 104
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// if p3 = 116 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 116
20855: EQUAL
20856: IFFALSE 20866
// sComputer := true ;
20858: LD_ADDR_EXP 105
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 117 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 117
20873: EQUAL
20874: IFFALSE 20884
// s30 := true ;
20876: LD_ADDR_EXP 106
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 118 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 118
20891: EQUAL
20892: IFFALSE 20902
// s60 := true ;
20894: LD_ADDR_EXP 107
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// end ; if p2 = hack_mode then
20902: LD_VAR 0 2
20906: PUSH
20907: LD_INT 101
20909: EQUAL
20910: IFFALSE 21038
// begin case p3 of 1 :
20912: LD_VAR 0 3
20916: PUSH
20917: LD_INT 1
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20932
20925: POP
// hHackUnlimitedResources ; 2 :
20926: CALL 33177 0 0
20930: GO 21038
20932: LD_INT 2
20934: DOUBLE
20935: EQUAL
20936: IFTRUE 20940
20938: GO 20947
20940: POP
// hHackSetLevel10 ; 3 :
20941: CALL 33310 0 0
20945: GO 21038
20947: LD_INT 3
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 20962
20955: POP
// hHackSetLevel10YourUnits ; 4 :
20956: CALL 33395 0 0
20960: GO 21038
20962: LD_INT 4
20964: DOUBLE
20965: EQUAL
20966: IFTRUE 20970
20968: GO 20977
20970: POP
// hHackInvincible ; 5 :
20971: CALL 33843 0 0
20975: GO 21038
20977: LD_INT 5
20979: DOUBLE
20980: EQUAL
20981: IFTRUE 20985
20983: GO 20992
20985: POP
// hHackInvisible ; 6 :
20986: CALL 33954 0 0
20990: GO 21038
20992: LD_INT 6
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21007
21000: POP
// hHackChangeYourSide ; 7 :
21001: CALL 34011 0 0
21005: GO 21038
21007: LD_INT 7
21009: DOUBLE
21010: EQUAL
21011: IFTRUE 21015
21013: GO 21022
21015: POP
// hHackChangeUnitSide ; 8 :
21016: CALL 34053 0 0
21020: GO 21038
21022: LD_INT 8
21024: DOUBLE
21025: EQUAL
21026: IFTRUE 21030
21028: GO 21037
21030: POP
// hHackFog ; end ;
21031: CALL 34154 0 0
21035: GO 21038
21037: POP
// end ; if p2 = game_save_mode then
21038: LD_VAR 0 2
21042: PUSH
21043: LD_INT 102
21045: EQUAL
21046: IFFALSE 21101
// begin if p3 = 1 then
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 1
21055: EQUAL
21056: IFFALSE 21068
// globalGameSaveCounter := p4 ;
21058: LD_ADDR_EXP 50
21062: PUSH
21063: LD_VAR 0 4
21067: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21068: LD_VAR 0 3
21072: PUSH
21073: LD_INT 2
21075: EQUAL
21076: PUSH
21077: LD_EXP 50
21081: AND
21082: IFFALSE 21101
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21084: LD_STRING setGameSaveCounter(
21086: PUSH
21087: LD_EXP 50
21091: STR
21092: PUSH
21093: LD_STRING )
21095: STR
21096: PPUSH
21097: CALL_OW 559
// end ; end ;
21101: LD_VAR 0 7
21105: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21106: LD_INT 0
21108: PPUSH
// streamModeActive := false ;
21109: LD_ADDR_EXP 51
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// normalCounter := 36 ;
21117: LD_ADDR_EXP 52
21121: PUSH
21122: LD_INT 36
21124: ST_TO_ADDR
// hardcoreCounter := 18 ;
21125: LD_ADDR_EXP 53
21129: PUSH
21130: LD_INT 18
21132: ST_TO_ADDR
// sRocket := false ;
21133: LD_ADDR_EXP 56
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// sSpeed := false ;
21141: LD_ADDR_EXP 55
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sEngine := false ;
21149: LD_ADDR_EXP 57
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sSpec := false ;
21157: LD_ADDR_EXP 54
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sLevel := false ;
21165: LD_ADDR_EXP 58
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sArmoury := false ;
21173: LD_ADDR_EXP 59
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sRadar := false ;
21181: LD_ADDR_EXP 60
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sBunker := false ;
21189: LD_ADDR_EXP 61
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sHack := false ;
21197: LD_ADDR_EXP 62
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sFire := false ;
21205: LD_ADDR_EXP 63
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sRefresh := false ;
21213: LD_ADDR_EXP 64
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sExp := false ;
21221: LD_ADDR_EXP 65
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sDepot := false ;
21229: LD_ADDR_EXP 66
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sFlag := false ;
21237: LD_ADDR_EXP 67
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sKamikadze := false ;
21245: LD_ADDR_EXP 75
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sTroll := false ;
21253: LD_ADDR_EXP 76
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sSlow := false ;
21261: LD_ADDR_EXP 77
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sLack := false ;
21269: LD_ADDR_EXP 78
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sTank := false ;
21277: LD_ADDR_EXP 80
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sRemote := false ;
21285: LD_ADDR_EXP 81
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sPowell := false ;
21293: LD_ADDR_EXP 82
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sTeleport := false ;
21301: LD_ADDR_EXP 85
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sOilTower := false ;
21309: LD_ADDR_EXP 87
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sShovel := false ;
21317: LD_ADDR_EXP 88
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sSheik := false ;
21325: LD_ADDR_EXP 89
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sEarthquake := false ;
21333: LD_ADDR_EXP 91
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sAI := false ;
21341: LD_ADDR_EXP 92
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sCargo := false ;
21349: LD_ADDR_EXP 95
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sDLaser := false ;
21357: LD_ADDR_EXP 96
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sExchange := false ;
21365: LD_ADDR_EXP 97
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sFac := false ;
21373: LD_ADDR_EXP 98
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sPower := false ;
21381: LD_ADDR_EXP 99
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sRandom := false ;
21389: LD_ADDR_EXP 100
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sShield := false ;
21397: LD_ADDR_EXP 101
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sTime := false ;
21405: LD_ADDR_EXP 102
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sTools := false ;
21413: LD_ADDR_EXP 103
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sSold := false ;
21421: LD_ADDR_EXP 68
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sDiff := false ;
21429: LD_ADDR_EXP 69
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sFog := false ;
21437: LD_ADDR_EXP 72
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sReset := false ;
21445: LD_ADDR_EXP 73
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sSun := false ;
21453: LD_ADDR_EXP 74
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sTiger := false ;
21461: LD_ADDR_EXP 70
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sBomb := false ;
21469: LD_ADDR_EXP 71
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sWound := false ;
21477: LD_ADDR_EXP 79
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sBetray := false ;
21485: LD_ADDR_EXP 83
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sContamin := false ;
21493: LD_ADDR_EXP 84
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sOil := false ;
21501: LD_ADDR_EXP 86
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sStu := false ;
21509: LD_ADDR_EXP 90
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sBazooka := false ;
21517: LD_ADDR_EXP 93
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sMortar := false ;
21525: LD_ADDR_EXP 94
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sRanger := false ;
21533: LD_ADDR_EXP 104
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sComputer := false ;
21541: LD_ADDR_EXP 105
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// s30 := false ;
21549: LD_ADDR_EXP 106
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// s60 := false ;
21557: LD_ADDR_EXP 107
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// end ;
21565: LD_VAR 0 1
21569: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21570: LD_INT 0
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
// result := [ ] ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: EMPTY
21585: ST_TO_ADDR
// if campaign_id = 1 then
21586: LD_OWVAR 69
21590: PUSH
21591: LD_INT 1
21593: EQUAL
21594: IFFALSE 24760
// begin case mission_number of 1 :
21596: LD_OWVAR 70
21600: PUSH
21601: LD_INT 1
21603: DOUBLE
21604: EQUAL
21605: IFTRUE 21609
21607: GO 21685
21609: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21610: LD_ADDR_VAR 0 2
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: LD_INT 4
21620: PUSH
21621: LD_INT 11
21623: PUSH
21624: LD_INT 12
21626: PUSH
21627: LD_INT 15
21629: PUSH
21630: LD_INT 16
21632: PUSH
21633: LD_INT 22
21635: PUSH
21636: LD_INT 23
21638: PUSH
21639: LD_INT 26
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 101
21655: PUSH
21656: LD_INT 102
21658: PUSH
21659: LD_INT 106
21661: PUSH
21662: LD_INT 116
21664: PUSH
21665: LD_INT 117
21667: PUSH
21668: LD_INT 118
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: ST_TO_ADDR
21683: GO 24758
21685: LD_INT 2
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21777
21693: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: LD_INT 4
21704: PUSH
21705: LD_INT 11
21707: PUSH
21708: LD_INT 12
21710: PUSH
21711: LD_INT 15
21713: PUSH
21714: LD_INT 16
21716: PUSH
21717: LD_INT 22
21719: PUSH
21720: LD_INT 23
21722: PUSH
21723: LD_INT 26
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 101
21739: PUSH
21740: LD_INT 102
21742: PUSH
21743: LD_INT 105
21745: PUSH
21746: LD_INT 106
21748: PUSH
21749: LD_INT 108
21751: PUSH
21752: LD_INT 116
21754: PUSH
21755: LD_INT 117
21757: PUSH
21758: LD_INT 118
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: ST_TO_ADDR
21775: GO 24758
21777: LD_INT 3
21779: DOUBLE
21780: EQUAL
21781: IFTRUE 21785
21783: GO 21873
21785: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_INT 2
21793: PUSH
21794: LD_INT 4
21796: PUSH
21797: LD_INT 5
21799: PUSH
21800: LD_INT 11
21802: PUSH
21803: LD_INT 12
21805: PUSH
21806: LD_INT 15
21808: PUSH
21809: LD_INT 16
21811: PUSH
21812: LD_INT 22
21814: PUSH
21815: LD_INT 26
21817: PUSH
21818: LD_INT 36
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 101
21835: PUSH
21836: LD_INT 102
21838: PUSH
21839: LD_INT 105
21841: PUSH
21842: LD_INT 106
21844: PUSH
21845: LD_INT 108
21847: PUSH
21848: LD_INT 116
21850: PUSH
21851: LD_INT 117
21853: PUSH
21854: LD_INT 118
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: ST_TO_ADDR
21871: GO 24758
21873: LD_INT 4
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 21977
21881: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21882: LD_ADDR_VAR 0 2
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 4
21892: PUSH
21893: LD_INT 5
21895: PUSH
21896: LD_INT 8
21898: PUSH
21899: LD_INT 11
21901: PUSH
21902: LD_INT 12
21904: PUSH
21905: LD_INT 15
21907: PUSH
21908: LD_INT 16
21910: PUSH
21911: LD_INT 22
21913: PUSH
21914: LD_INT 23
21916: PUSH
21917: LD_INT 26
21919: PUSH
21920: LD_INT 36
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 101
21939: PUSH
21940: LD_INT 102
21942: PUSH
21943: LD_INT 105
21945: PUSH
21946: LD_INT 106
21948: PUSH
21949: LD_INT 108
21951: PUSH
21952: LD_INT 116
21954: PUSH
21955: LD_INT 117
21957: PUSH
21958: LD_INT 118
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: ST_TO_ADDR
21975: GO 24758
21977: LD_INT 5
21979: DOUBLE
21980: EQUAL
21981: IFTRUE 21985
21983: GO 22097
21985: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21986: LD_ADDR_VAR 0 2
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: LD_INT 4
21996: PUSH
21997: LD_INT 5
21999: PUSH
22000: LD_INT 6
22002: PUSH
22003: LD_INT 8
22005: PUSH
22006: LD_INT 11
22008: PUSH
22009: LD_INT 12
22011: PUSH
22012: LD_INT 15
22014: PUSH
22015: LD_INT 16
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_INT 23
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 26
22029: PUSH
22030: LD_INT 36
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 101
22051: PUSH
22052: LD_INT 102
22054: PUSH
22055: LD_INT 105
22057: PUSH
22058: LD_INT 106
22060: PUSH
22061: LD_INT 108
22063: PUSH
22064: LD_INT 109
22066: PUSH
22067: LD_INT 112
22069: PUSH
22070: LD_INT 116
22072: PUSH
22073: LD_INT 117
22075: PUSH
22076: LD_INT 118
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: ST_TO_ADDR
22095: GO 24758
22097: LD_INT 6
22099: DOUBLE
22100: EQUAL
22101: IFTRUE 22105
22103: GO 22237
22105: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22106: LD_ADDR_VAR 0 2
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: LD_INT 4
22116: PUSH
22117: LD_INT 5
22119: PUSH
22120: LD_INT 6
22122: PUSH
22123: LD_INT 8
22125: PUSH
22126: LD_INT 11
22128: PUSH
22129: LD_INT 12
22131: PUSH
22132: LD_INT 15
22134: PUSH
22135: LD_INT 16
22137: PUSH
22138: LD_INT 20
22140: PUSH
22141: LD_INT 21
22143: PUSH
22144: LD_INT 22
22146: PUSH
22147: LD_INT 23
22149: PUSH
22150: LD_INT 25
22152: PUSH
22153: LD_INT 26
22155: PUSH
22156: LD_INT 30
22158: PUSH
22159: LD_INT 31
22161: PUSH
22162: LD_INT 32
22164: PUSH
22165: LD_INT 36
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 101
22191: PUSH
22192: LD_INT 102
22194: PUSH
22195: LD_INT 105
22197: PUSH
22198: LD_INT 106
22200: PUSH
22201: LD_INT 108
22203: PUSH
22204: LD_INT 109
22206: PUSH
22207: LD_INT 112
22209: PUSH
22210: LD_INT 116
22212: PUSH
22213: LD_INT 117
22215: PUSH
22216: LD_INT 118
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: ST_TO_ADDR
22235: GO 24758
22237: LD_INT 7
22239: DOUBLE
22240: EQUAL
22241: IFTRUE 22245
22243: GO 22357
22245: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22246: LD_ADDR_VAR 0 2
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: LD_INT 4
22256: PUSH
22257: LD_INT 5
22259: PUSH
22260: LD_INT 7
22262: PUSH
22263: LD_INT 11
22265: PUSH
22266: LD_INT 12
22268: PUSH
22269: LD_INT 15
22271: PUSH
22272: LD_INT 16
22274: PUSH
22275: LD_INT 20
22277: PUSH
22278: LD_INT 21
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 23
22286: PUSH
22287: LD_INT 25
22289: PUSH
22290: LD_INT 26
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 101
22311: PUSH
22312: LD_INT 102
22314: PUSH
22315: LD_INT 103
22317: PUSH
22318: LD_INT 105
22320: PUSH
22321: LD_INT 106
22323: PUSH
22324: LD_INT 108
22326: PUSH
22327: LD_INT 112
22329: PUSH
22330: LD_INT 116
22332: PUSH
22333: LD_INT 117
22335: PUSH
22336: LD_INT 118
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: ST_TO_ADDR
22355: GO 24758
22357: LD_INT 8
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22365
22363: GO 22505
22365: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 4
22376: PUSH
22377: LD_INT 5
22379: PUSH
22380: LD_INT 6
22382: PUSH
22383: LD_INT 7
22385: PUSH
22386: LD_INT 8
22388: PUSH
22389: LD_INT 11
22391: PUSH
22392: LD_INT 12
22394: PUSH
22395: LD_INT 15
22397: PUSH
22398: LD_INT 16
22400: PUSH
22401: LD_INT 20
22403: PUSH
22404: LD_INT 21
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 23
22412: PUSH
22413: LD_INT 25
22415: PUSH
22416: LD_INT 26
22418: PUSH
22419: LD_INT 30
22421: PUSH
22422: LD_INT 31
22424: PUSH
22425: LD_INT 32
22427: PUSH
22428: LD_INT 36
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 101
22455: PUSH
22456: LD_INT 102
22458: PUSH
22459: LD_INT 103
22461: PUSH
22462: LD_INT 105
22464: PUSH
22465: LD_INT 106
22467: PUSH
22468: LD_INT 108
22470: PUSH
22471: LD_INT 109
22473: PUSH
22474: LD_INT 112
22476: PUSH
22477: LD_INT 116
22479: PUSH
22480: LD_INT 117
22482: PUSH
22483: LD_INT 118
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: ST_TO_ADDR
22503: GO 24758
22505: LD_INT 9
22507: DOUBLE
22508: EQUAL
22509: IFTRUE 22513
22511: GO 22661
22513: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 4
22524: PUSH
22525: LD_INT 5
22527: PUSH
22528: LD_INT 6
22530: PUSH
22531: LD_INT 7
22533: PUSH
22534: LD_INT 8
22536: PUSH
22537: LD_INT 11
22539: PUSH
22540: LD_INT 12
22542: PUSH
22543: LD_INT 15
22545: PUSH
22546: LD_INT 16
22548: PUSH
22549: LD_INT 20
22551: PUSH
22552: LD_INT 21
22554: PUSH
22555: LD_INT 22
22557: PUSH
22558: LD_INT 23
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: LD_INT 26
22566: PUSH
22567: LD_INT 28
22569: PUSH
22570: LD_INT 30
22572: PUSH
22573: LD_INT 31
22575: PUSH
22576: LD_INT 32
22578: PUSH
22579: LD_INT 36
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 101
22607: PUSH
22608: LD_INT 102
22610: PUSH
22611: LD_INT 103
22613: PUSH
22614: LD_INT 105
22616: PUSH
22617: LD_INT 106
22619: PUSH
22620: LD_INT 108
22622: PUSH
22623: LD_INT 109
22625: PUSH
22626: LD_INT 112
22628: PUSH
22629: LD_INT 114
22631: PUSH
22632: LD_INT 116
22634: PUSH
22635: LD_INT 117
22637: PUSH
22638: LD_INT 118
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: ST_TO_ADDR
22659: GO 24758
22661: LD_INT 10
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22865
22669: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22670: LD_ADDR_VAR 0 2
22674: PUSH
22675: LD_INT 2
22677: PUSH
22678: LD_INT 4
22680: PUSH
22681: LD_INT 5
22683: PUSH
22684: LD_INT 6
22686: PUSH
22687: LD_INT 7
22689: PUSH
22690: LD_INT 8
22692: PUSH
22693: LD_INT 9
22695: PUSH
22696: LD_INT 10
22698: PUSH
22699: LD_INT 11
22701: PUSH
22702: LD_INT 12
22704: PUSH
22705: LD_INT 13
22707: PUSH
22708: LD_INT 14
22710: PUSH
22711: LD_INT 15
22713: PUSH
22714: LD_INT 16
22716: PUSH
22717: LD_INT 17
22719: PUSH
22720: LD_INT 18
22722: PUSH
22723: LD_INT 19
22725: PUSH
22726: LD_INT 20
22728: PUSH
22729: LD_INT 21
22731: PUSH
22732: LD_INT 22
22734: PUSH
22735: LD_INT 23
22737: PUSH
22738: LD_INT 24
22740: PUSH
22741: LD_INT 25
22743: PUSH
22744: LD_INT 26
22746: PUSH
22747: LD_INT 28
22749: PUSH
22750: LD_INT 30
22752: PUSH
22753: LD_INT 31
22755: PUSH
22756: LD_INT 32
22758: PUSH
22759: LD_INT 36
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 101
22795: PUSH
22796: LD_INT 102
22798: PUSH
22799: LD_INT 103
22801: PUSH
22802: LD_INT 104
22804: PUSH
22805: LD_INT 105
22807: PUSH
22808: LD_INT 106
22810: PUSH
22811: LD_INT 107
22813: PUSH
22814: LD_INT 108
22816: PUSH
22817: LD_INT 109
22819: PUSH
22820: LD_INT 110
22822: PUSH
22823: LD_INT 111
22825: PUSH
22826: LD_INT 112
22828: PUSH
22829: LD_INT 114
22831: PUSH
22832: LD_INT 116
22834: PUSH
22835: LD_INT 117
22837: PUSH
22838: LD_INT 118
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: ST_TO_ADDR
22863: GO 24758
22865: LD_INT 11
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 23077
22873: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22874: LD_ADDR_VAR 0 2
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 3
22884: PUSH
22885: LD_INT 4
22887: PUSH
22888: LD_INT 5
22890: PUSH
22891: LD_INT 6
22893: PUSH
22894: LD_INT 7
22896: PUSH
22897: LD_INT 8
22899: PUSH
22900: LD_INT 9
22902: PUSH
22903: LD_INT 10
22905: PUSH
22906: LD_INT 11
22908: PUSH
22909: LD_INT 12
22911: PUSH
22912: LD_INT 13
22914: PUSH
22915: LD_INT 14
22917: PUSH
22918: LD_INT 15
22920: PUSH
22921: LD_INT 16
22923: PUSH
22924: LD_INT 17
22926: PUSH
22927: LD_INT 18
22929: PUSH
22930: LD_INT 19
22932: PUSH
22933: LD_INT 20
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 22
22941: PUSH
22942: LD_INT 23
22944: PUSH
22945: LD_INT 24
22947: PUSH
22948: LD_INT 25
22950: PUSH
22951: LD_INT 26
22953: PUSH
22954: LD_INT 28
22956: PUSH
22957: LD_INT 30
22959: PUSH
22960: LD_INT 31
22962: PUSH
22963: LD_INT 32
22965: PUSH
22966: LD_INT 34
22968: PUSH
22969: LD_INT 36
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 101
23007: PUSH
23008: LD_INT 102
23010: PUSH
23011: LD_INT 103
23013: PUSH
23014: LD_INT 104
23016: PUSH
23017: LD_INT 105
23019: PUSH
23020: LD_INT 106
23022: PUSH
23023: LD_INT 107
23025: PUSH
23026: LD_INT 108
23028: PUSH
23029: LD_INT 109
23031: PUSH
23032: LD_INT 110
23034: PUSH
23035: LD_INT 111
23037: PUSH
23038: LD_INT 112
23040: PUSH
23041: LD_INT 114
23043: PUSH
23044: LD_INT 116
23046: PUSH
23047: LD_INT 117
23049: PUSH
23050: LD_INT 118
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: ST_TO_ADDR
23075: GO 24758
23077: LD_INT 12
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23305
23085: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23086: LD_ADDR_VAR 0 2
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 3
23099: PUSH
23100: LD_INT 4
23102: PUSH
23103: LD_INT 5
23105: PUSH
23106: LD_INT 6
23108: PUSH
23109: LD_INT 7
23111: PUSH
23112: LD_INT 8
23114: PUSH
23115: LD_INT 9
23117: PUSH
23118: LD_INT 10
23120: PUSH
23121: LD_INT 11
23123: PUSH
23124: LD_INT 12
23126: PUSH
23127: LD_INT 13
23129: PUSH
23130: LD_INT 14
23132: PUSH
23133: LD_INT 15
23135: PUSH
23136: LD_INT 16
23138: PUSH
23139: LD_INT 17
23141: PUSH
23142: LD_INT 18
23144: PUSH
23145: LD_INT 19
23147: PUSH
23148: LD_INT 20
23150: PUSH
23151: LD_INT 21
23153: PUSH
23154: LD_INT 22
23156: PUSH
23157: LD_INT 23
23159: PUSH
23160: LD_INT 24
23162: PUSH
23163: LD_INT 25
23165: PUSH
23166: LD_INT 26
23168: PUSH
23169: LD_INT 27
23171: PUSH
23172: LD_INT 28
23174: PUSH
23175: LD_INT 30
23177: PUSH
23178: LD_INT 31
23180: PUSH
23181: LD_INT 32
23183: PUSH
23184: LD_INT 33
23186: PUSH
23187: LD_INT 34
23189: PUSH
23190: LD_INT 36
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 101
23231: PUSH
23232: LD_INT 102
23234: PUSH
23235: LD_INT 103
23237: PUSH
23238: LD_INT 104
23240: PUSH
23241: LD_INT 105
23243: PUSH
23244: LD_INT 106
23246: PUSH
23247: LD_INT 107
23249: PUSH
23250: LD_INT 108
23252: PUSH
23253: LD_INT 109
23255: PUSH
23256: LD_INT 110
23258: PUSH
23259: LD_INT 111
23261: PUSH
23262: LD_INT 112
23264: PUSH
23265: LD_INT 113
23267: PUSH
23268: LD_INT 114
23270: PUSH
23271: LD_INT 116
23273: PUSH
23274: LD_INT 117
23276: PUSH
23277: LD_INT 118
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: ST_TO_ADDR
23303: GO 24758
23305: LD_INT 13
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23521
23313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23314: LD_ADDR_VAR 0 2
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: LD_INT 4
23330: PUSH
23331: LD_INT 5
23333: PUSH
23334: LD_INT 8
23336: PUSH
23337: LD_INT 9
23339: PUSH
23340: LD_INT 10
23342: PUSH
23343: LD_INT 11
23345: PUSH
23346: LD_INT 12
23348: PUSH
23349: LD_INT 14
23351: PUSH
23352: LD_INT 15
23354: PUSH
23355: LD_INT 16
23357: PUSH
23358: LD_INT 17
23360: PUSH
23361: LD_INT 18
23363: PUSH
23364: LD_INT 19
23366: PUSH
23367: LD_INT 20
23369: PUSH
23370: LD_INT 21
23372: PUSH
23373: LD_INT 22
23375: PUSH
23376: LD_INT 23
23378: PUSH
23379: LD_INT 24
23381: PUSH
23382: LD_INT 25
23384: PUSH
23385: LD_INT 26
23387: PUSH
23388: LD_INT 27
23390: PUSH
23391: LD_INT 28
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 31
23399: PUSH
23400: LD_INT 32
23402: PUSH
23403: LD_INT 33
23405: PUSH
23406: LD_INT 34
23408: PUSH
23409: LD_INT 36
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 101
23447: PUSH
23448: LD_INT 102
23450: PUSH
23451: LD_INT 103
23453: PUSH
23454: LD_INT 104
23456: PUSH
23457: LD_INT 105
23459: PUSH
23460: LD_INT 106
23462: PUSH
23463: LD_INT 107
23465: PUSH
23466: LD_INT 108
23468: PUSH
23469: LD_INT 109
23471: PUSH
23472: LD_INT 110
23474: PUSH
23475: LD_INT 111
23477: PUSH
23478: LD_INT 112
23480: PUSH
23481: LD_INT 113
23483: PUSH
23484: LD_INT 114
23486: PUSH
23487: LD_INT 116
23489: PUSH
23490: LD_INT 117
23492: PUSH
23493: LD_INT 118
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: ST_TO_ADDR
23519: GO 24758
23521: LD_INT 14
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23753
23529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23530: LD_ADDR_VAR 0 2
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 4
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: LD_INT 6
23552: PUSH
23553: LD_INT 7
23555: PUSH
23556: LD_INT 8
23558: PUSH
23559: LD_INT 9
23561: PUSH
23562: LD_INT 10
23564: PUSH
23565: LD_INT 11
23567: PUSH
23568: LD_INT 12
23570: PUSH
23571: LD_INT 13
23573: PUSH
23574: LD_INT 14
23576: PUSH
23577: LD_INT 15
23579: PUSH
23580: LD_INT 16
23582: PUSH
23583: LD_INT 17
23585: PUSH
23586: LD_INT 18
23588: PUSH
23589: LD_INT 19
23591: PUSH
23592: LD_INT 20
23594: PUSH
23595: LD_INT 21
23597: PUSH
23598: LD_INT 22
23600: PUSH
23601: LD_INT 23
23603: PUSH
23604: LD_INT 24
23606: PUSH
23607: LD_INT 25
23609: PUSH
23610: LD_INT 26
23612: PUSH
23613: LD_INT 27
23615: PUSH
23616: LD_INT 28
23618: PUSH
23619: LD_INT 29
23621: PUSH
23622: LD_INT 30
23624: PUSH
23625: LD_INT 31
23627: PUSH
23628: LD_INT 32
23630: PUSH
23631: LD_INT 33
23633: PUSH
23634: LD_INT 34
23636: PUSH
23637: LD_INT 36
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 101
23679: PUSH
23680: LD_INT 102
23682: PUSH
23683: LD_INT 103
23685: PUSH
23686: LD_INT 104
23688: PUSH
23689: LD_INT 105
23691: PUSH
23692: LD_INT 106
23694: PUSH
23695: LD_INT 107
23697: PUSH
23698: LD_INT 108
23700: PUSH
23701: LD_INT 109
23703: PUSH
23704: LD_INT 110
23706: PUSH
23707: LD_INT 111
23709: PUSH
23710: LD_INT 112
23712: PUSH
23713: LD_INT 113
23715: PUSH
23716: LD_INT 114
23718: PUSH
23719: LD_INT 116
23721: PUSH
23722: LD_INT 117
23724: PUSH
23725: LD_INT 118
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: ST_TO_ADDR
23751: GO 24758
23753: LD_INT 15
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23985
23761: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23762: LD_ADDR_VAR 0 2
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: LD_INT 2
23772: PUSH
23773: LD_INT 3
23775: PUSH
23776: LD_INT 4
23778: PUSH
23779: LD_INT 5
23781: PUSH
23782: LD_INT 6
23784: PUSH
23785: LD_INT 7
23787: PUSH
23788: LD_INT 8
23790: PUSH
23791: LD_INT 9
23793: PUSH
23794: LD_INT 10
23796: PUSH
23797: LD_INT 11
23799: PUSH
23800: LD_INT 12
23802: PUSH
23803: LD_INT 13
23805: PUSH
23806: LD_INT 14
23808: PUSH
23809: LD_INT 15
23811: PUSH
23812: LD_INT 16
23814: PUSH
23815: LD_INT 17
23817: PUSH
23818: LD_INT 18
23820: PUSH
23821: LD_INT 19
23823: PUSH
23824: LD_INT 20
23826: PUSH
23827: LD_INT 21
23829: PUSH
23830: LD_INT 22
23832: PUSH
23833: LD_INT 23
23835: PUSH
23836: LD_INT 24
23838: PUSH
23839: LD_INT 25
23841: PUSH
23842: LD_INT 26
23844: PUSH
23845: LD_INT 27
23847: PUSH
23848: LD_INT 28
23850: PUSH
23851: LD_INT 29
23853: PUSH
23854: LD_INT 30
23856: PUSH
23857: LD_INT 31
23859: PUSH
23860: LD_INT 32
23862: PUSH
23863: LD_INT 33
23865: PUSH
23866: LD_INT 34
23868: PUSH
23869: LD_INT 36
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 101
23911: PUSH
23912: LD_INT 102
23914: PUSH
23915: LD_INT 103
23917: PUSH
23918: LD_INT 104
23920: PUSH
23921: LD_INT 105
23923: PUSH
23924: LD_INT 106
23926: PUSH
23927: LD_INT 107
23929: PUSH
23930: LD_INT 108
23932: PUSH
23933: LD_INT 109
23935: PUSH
23936: LD_INT 110
23938: PUSH
23939: LD_INT 111
23941: PUSH
23942: LD_INT 112
23944: PUSH
23945: LD_INT 113
23947: PUSH
23948: LD_INT 114
23950: PUSH
23951: LD_INT 116
23953: PUSH
23954: LD_INT 117
23956: PUSH
23957: LD_INT 118
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: ST_TO_ADDR
23983: GO 24758
23985: LD_INT 16
23987: DOUBLE
23988: EQUAL
23989: IFTRUE 23993
23991: GO 24129
23993: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23994: LD_ADDR_VAR 0 2
23998: PUSH
23999: LD_INT 2
24001: PUSH
24002: LD_INT 4
24004: PUSH
24005: LD_INT 5
24007: PUSH
24008: LD_INT 7
24010: PUSH
24011: LD_INT 11
24013: PUSH
24014: LD_INT 12
24016: PUSH
24017: LD_INT 15
24019: PUSH
24020: LD_INT 16
24022: PUSH
24023: LD_INT 20
24025: PUSH
24026: LD_INT 21
24028: PUSH
24029: LD_INT 22
24031: PUSH
24032: LD_INT 23
24034: PUSH
24035: LD_INT 25
24037: PUSH
24038: LD_INT 26
24040: PUSH
24041: LD_INT 30
24043: PUSH
24044: LD_INT 31
24046: PUSH
24047: LD_INT 32
24049: PUSH
24050: LD_INT 33
24052: PUSH
24053: LD_INT 34
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 101
24079: PUSH
24080: LD_INT 102
24082: PUSH
24083: LD_INT 103
24085: PUSH
24086: LD_INT 106
24088: PUSH
24089: LD_INT 108
24091: PUSH
24092: LD_INT 112
24094: PUSH
24095: LD_INT 113
24097: PUSH
24098: LD_INT 114
24100: PUSH
24101: LD_INT 116
24103: PUSH
24104: LD_INT 117
24106: PUSH
24107: LD_INT 118
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: ST_TO_ADDR
24127: GO 24758
24129: LD_INT 17
24131: DOUBLE
24132: EQUAL
24133: IFTRUE 24137
24135: GO 24361
24137: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24138: LD_ADDR_VAR 0 2
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: LD_INT 3
24151: PUSH
24152: LD_INT 4
24154: PUSH
24155: LD_INT 5
24157: PUSH
24158: LD_INT 6
24160: PUSH
24161: LD_INT 7
24163: PUSH
24164: LD_INT 8
24166: PUSH
24167: LD_INT 9
24169: PUSH
24170: LD_INT 10
24172: PUSH
24173: LD_INT 11
24175: PUSH
24176: LD_INT 12
24178: PUSH
24179: LD_INT 13
24181: PUSH
24182: LD_INT 14
24184: PUSH
24185: LD_INT 15
24187: PUSH
24188: LD_INT 16
24190: PUSH
24191: LD_INT 17
24193: PUSH
24194: LD_INT 18
24196: PUSH
24197: LD_INT 19
24199: PUSH
24200: LD_INT 20
24202: PUSH
24203: LD_INT 21
24205: PUSH
24206: LD_INT 22
24208: PUSH
24209: LD_INT 23
24211: PUSH
24212: LD_INT 24
24214: PUSH
24215: LD_INT 25
24217: PUSH
24218: LD_INT 26
24220: PUSH
24221: LD_INT 27
24223: PUSH
24224: LD_INT 28
24226: PUSH
24227: LD_INT 29
24229: PUSH
24230: LD_INT 30
24232: PUSH
24233: LD_INT 31
24235: PUSH
24236: LD_INT 32
24238: PUSH
24239: LD_INT 33
24241: PUSH
24242: LD_INT 34
24244: PUSH
24245: LD_INT 36
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 101
24287: PUSH
24288: LD_INT 102
24290: PUSH
24291: LD_INT 103
24293: PUSH
24294: LD_INT 104
24296: PUSH
24297: LD_INT 105
24299: PUSH
24300: LD_INT 106
24302: PUSH
24303: LD_INT 107
24305: PUSH
24306: LD_INT 108
24308: PUSH
24309: LD_INT 109
24311: PUSH
24312: LD_INT 110
24314: PUSH
24315: LD_INT 111
24317: PUSH
24318: LD_INT 112
24320: PUSH
24321: LD_INT 113
24323: PUSH
24324: LD_INT 114
24326: PUSH
24327: LD_INT 116
24329: PUSH
24330: LD_INT 117
24332: PUSH
24333: LD_INT 118
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: ST_TO_ADDR
24359: GO 24758
24361: LD_INT 18
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24517
24369: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24370: LD_ADDR_VAR 0 2
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 4
24380: PUSH
24381: LD_INT 5
24383: PUSH
24384: LD_INT 7
24386: PUSH
24387: LD_INT 11
24389: PUSH
24390: LD_INT 12
24392: PUSH
24393: LD_INT 15
24395: PUSH
24396: LD_INT 16
24398: PUSH
24399: LD_INT 20
24401: PUSH
24402: LD_INT 21
24404: PUSH
24405: LD_INT 22
24407: PUSH
24408: LD_INT 23
24410: PUSH
24411: LD_INT 25
24413: PUSH
24414: LD_INT 26
24416: PUSH
24417: LD_INT 30
24419: PUSH
24420: LD_INT 31
24422: PUSH
24423: LD_INT 32
24425: PUSH
24426: LD_INT 33
24428: PUSH
24429: LD_INT 34
24431: PUSH
24432: LD_INT 35
24434: PUSH
24435: LD_INT 36
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 101
24463: PUSH
24464: LD_INT 102
24466: PUSH
24467: LD_INT 103
24469: PUSH
24470: LD_INT 106
24472: PUSH
24473: LD_INT 108
24475: PUSH
24476: LD_INT 112
24478: PUSH
24479: LD_INT 113
24481: PUSH
24482: LD_INT 114
24484: PUSH
24485: LD_INT 115
24487: PUSH
24488: LD_INT 116
24490: PUSH
24491: LD_INT 117
24493: PUSH
24494: LD_INT 118
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: ST_TO_ADDR
24515: GO 24758
24517: LD_INT 19
24519: DOUBLE
24520: EQUAL
24521: IFTRUE 24525
24523: GO 24757
24525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24526: LD_ADDR_VAR 0 2
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 3
24539: PUSH
24540: LD_INT 4
24542: PUSH
24543: LD_INT 5
24545: PUSH
24546: LD_INT 6
24548: PUSH
24549: LD_INT 7
24551: PUSH
24552: LD_INT 8
24554: PUSH
24555: LD_INT 9
24557: PUSH
24558: LD_INT 10
24560: PUSH
24561: LD_INT 11
24563: PUSH
24564: LD_INT 12
24566: PUSH
24567: LD_INT 13
24569: PUSH
24570: LD_INT 14
24572: PUSH
24573: LD_INT 15
24575: PUSH
24576: LD_INT 16
24578: PUSH
24579: LD_INT 17
24581: PUSH
24582: LD_INT 18
24584: PUSH
24585: LD_INT 19
24587: PUSH
24588: LD_INT 20
24590: PUSH
24591: LD_INT 21
24593: PUSH
24594: LD_INT 22
24596: PUSH
24597: LD_INT 23
24599: PUSH
24600: LD_INT 24
24602: PUSH
24603: LD_INT 25
24605: PUSH
24606: LD_INT 26
24608: PUSH
24609: LD_INT 27
24611: PUSH
24612: LD_INT 28
24614: PUSH
24615: LD_INT 29
24617: PUSH
24618: LD_INT 30
24620: PUSH
24621: LD_INT 31
24623: PUSH
24624: LD_INT 32
24626: PUSH
24627: LD_INT 33
24629: PUSH
24630: LD_INT 34
24632: PUSH
24633: LD_INT 35
24635: PUSH
24636: LD_INT 36
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 101
24679: PUSH
24680: LD_INT 102
24682: PUSH
24683: LD_INT 103
24685: PUSH
24686: LD_INT 104
24688: PUSH
24689: LD_INT 105
24691: PUSH
24692: LD_INT 106
24694: PUSH
24695: LD_INT 107
24697: PUSH
24698: LD_INT 108
24700: PUSH
24701: LD_INT 109
24703: PUSH
24704: LD_INT 110
24706: PUSH
24707: LD_INT 111
24709: PUSH
24710: LD_INT 112
24712: PUSH
24713: LD_INT 113
24715: PUSH
24716: LD_INT 114
24718: PUSH
24719: LD_INT 115
24721: PUSH
24722: LD_INT 116
24724: PUSH
24725: LD_INT 117
24727: PUSH
24728: LD_INT 118
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: ST_TO_ADDR
24755: GO 24758
24757: POP
// end else
24758: GO 24989
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24760: LD_ADDR_VAR 0 2
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 2
24770: PUSH
24771: LD_INT 3
24773: PUSH
24774: LD_INT 4
24776: PUSH
24777: LD_INT 5
24779: PUSH
24780: LD_INT 6
24782: PUSH
24783: LD_INT 7
24785: PUSH
24786: LD_INT 8
24788: PUSH
24789: LD_INT 9
24791: PUSH
24792: LD_INT 10
24794: PUSH
24795: LD_INT 11
24797: PUSH
24798: LD_INT 12
24800: PUSH
24801: LD_INT 13
24803: PUSH
24804: LD_INT 14
24806: PUSH
24807: LD_INT 15
24809: PUSH
24810: LD_INT 16
24812: PUSH
24813: LD_INT 17
24815: PUSH
24816: LD_INT 18
24818: PUSH
24819: LD_INT 19
24821: PUSH
24822: LD_INT 20
24824: PUSH
24825: LD_INT 21
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_INT 23
24833: PUSH
24834: LD_INT 24
24836: PUSH
24837: LD_INT 25
24839: PUSH
24840: LD_INT 26
24842: PUSH
24843: LD_INT 27
24845: PUSH
24846: LD_INT 28
24848: PUSH
24849: LD_INT 29
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: LD_INT 31
24857: PUSH
24858: LD_INT 32
24860: PUSH
24861: LD_INT 33
24863: PUSH
24864: LD_INT 34
24866: PUSH
24867: LD_INT 35
24869: PUSH
24870: LD_INT 36
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 101
24913: PUSH
24914: LD_INT 102
24916: PUSH
24917: LD_INT 103
24919: PUSH
24920: LD_INT 104
24922: PUSH
24923: LD_INT 105
24925: PUSH
24926: LD_INT 106
24928: PUSH
24929: LD_INT 107
24931: PUSH
24932: LD_INT 108
24934: PUSH
24935: LD_INT 109
24937: PUSH
24938: LD_INT 110
24940: PUSH
24941: LD_INT 111
24943: PUSH
24944: LD_INT 112
24946: PUSH
24947: LD_INT 113
24949: PUSH
24950: LD_INT 114
24952: PUSH
24953: LD_INT 115
24955: PUSH
24956: LD_INT 116
24958: PUSH
24959: LD_INT 117
24961: PUSH
24962: LD_INT 118
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: ST_TO_ADDR
// if result then
24989: LD_VAR 0 2
24993: IFFALSE 25779
// begin normal :=  ;
24995: LD_ADDR_VAR 0 5
24999: PUSH
25000: LD_STRING 
25002: ST_TO_ADDR
// hardcore :=  ;
25003: LD_ADDR_VAR 0 6
25007: PUSH
25008: LD_STRING 
25010: ST_TO_ADDR
// active :=  ;
25011: LD_ADDR_VAR 0 7
25015: PUSH
25016: LD_STRING 
25018: ST_TO_ADDR
// for i = 1 to normalCounter do
25019: LD_ADDR_VAR 0 8
25023: PUSH
25024: DOUBLE
25025: LD_INT 1
25027: DEC
25028: ST_TO_ADDR
25029: LD_EXP 52
25033: PUSH
25034: FOR_TO
25035: IFFALSE 25136
// begin tmp := 0 ;
25037: LD_ADDR_VAR 0 3
25041: PUSH
25042: LD_STRING 0
25044: ST_TO_ADDR
// if result [ 1 ] then
25045: LD_VAR 0 2
25049: PUSH
25050: LD_INT 1
25052: ARRAY
25053: IFFALSE 25118
// if result [ 1 ] [ 1 ] = i then
25055: LD_VAR 0 2
25059: PUSH
25060: LD_INT 1
25062: ARRAY
25063: PUSH
25064: LD_INT 1
25066: ARRAY
25067: PUSH
25068: LD_VAR 0 8
25072: EQUAL
25073: IFFALSE 25118
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25075: LD_ADDR_VAR 0 2
25079: PUSH
25080: LD_VAR 0 2
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: LD_VAR 0 2
25092: PUSH
25093: LD_INT 1
25095: ARRAY
25096: PPUSH
25097: LD_INT 1
25099: PPUSH
25100: CALL_OW 3
25104: PPUSH
25105: CALL_OW 1
25109: ST_TO_ADDR
// tmp := 1 ;
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_STRING 1
25117: ST_TO_ADDR
// end ; normal := normal & tmp ;
25118: LD_ADDR_VAR 0 5
25122: PUSH
25123: LD_VAR 0 5
25127: PUSH
25128: LD_VAR 0 3
25132: STR
25133: ST_TO_ADDR
// end ;
25134: GO 25034
25136: POP
25137: POP
// for i = 1 to hardcoreCounter do
25138: LD_ADDR_VAR 0 8
25142: PUSH
25143: DOUBLE
25144: LD_INT 1
25146: DEC
25147: ST_TO_ADDR
25148: LD_EXP 53
25152: PUSH
25153: FOR_TO
25154: IFFALSE 25259
// begin tmp := 0 ;
25156: LD_ADDR_VAR 0 3
25160: PUSH
25161: LD_STRING 0
25163: ST_TO_ADDR
// if result [ 2 ] then
25164: LD_VAR 0 2
25168: PUSH
25169: LD_INT 2
25171: ARRAY
25172: IFFALSE 25241
// if result [ 2 ] [ 1 ] = 100 + i then
25174: LD_VAR 0 2
25178: PUSH
25179: LD_INT 2
25181: ARRAY
25182: PUSH
25183: LD_INT 1
25185: ARRAY
25186: PUSH
25187: LD_INT 100
25189: PUSH
25190: LD_VAR 0 8
25194: PLUS
25195: EQUAL
25196: IFFALSE 25241
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25198: LD_ADDR_VAR 0 2
25202: PUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: LD_INT 2
25210: PPUSH
25211: LD_VAR 0 2
25215: PUSH
25216: LD_INT 2
25218: ARRAY
25219: PPUSH
25220: LD_INT 1
25222: PPUSH
25223: CALL_OW 3
25227: PPUSH
25228: CALL_OW 1
25232: ST_TO_ADDR
// tmp := 1 ;
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_STRING 1
25240: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25241: LD_ADDR_VAR 0 6
25245: PUSH
25246: LD_VAR 0 6
25250: PUSH
25251: LD_VAR 0 3
25255: STR
25256: ST_TO_ADDR
// end ;
25257: GO 25153
25259: POP
25260: POP
// if isGameLoad then
25261: LD_VAR 0 1
25265: IFFALSE 25740
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25267: LD_ADDR_VAR 0 4
25271: PUSH
25272: LD_EXP 56
25276: PUSH
25277: LD_EXP 55
25281: PUSH
25282: LD_EXP 57
25286: PUSH
25287: LD_EXP 54
25291: PUSH
25292: LD_EXP 58
25296: PUSH
25297: LD_EXP 59
25301: PUSH
25302: LD_EXP 60
25306: PUSH
25307: LD_EXP 61
25311: PUSH
25312: LD_EXP 62
25316: PUSH
25317: LD_EXP 63
25321: PUSH
25322: LD_EXP 64
25326: PUSH
25327: LD_EXP 65
25331: PUSH
25332: LD_EXP 66
25336: PUSH
25337: LD_EXP 67
25341: PUSH
25342: LD_EXP 75
25346: PUSH
25347: LD_EXP 76
25351: PUSH
25352: LD_EXP 77
25356: PUSH
25357: LD_EXP 78
25361: PUSH
25362: LD_EXP 80
25366: PUSH
25367: LD_EXP 81
25371: PUSH
25372: LD_EXP 82
25376: PUSH
25377: LD_EXP 85
25381: PUSH
25382: LD_EXP 87
25386: PUSH
25387: LD_EXP 88
25391: PUSH
25392: LD_EXP 89
25396: PUSH
25397: LD_EXP 91
25401: PUSH
25402: LD_EXP 92
25406: PUSH
25407: LD_EXP 95
25411: PUSH
25412: LD_EXP 96
25416: PUSH
25417: LD_EXP 97
25421: PUSH
25422: LD_EXP 98
25426: PUSH
25427: LD_EXP 99
25431: PUSH
25432: LD_EXP 100
25436: PUSH
25437: LD_EXP 101
25441: PUSH
25442: LD_EXP 102
25446: PUSH
25447: LD_EXP 103
25451: PUSH
25452: LD_EXP 68
25456: PUSH
25457: LD_EXP 69
25461: PUSH
25462: LD_EXP 72
25466: PUSH
25467: LD_EXP 73
25471: PUSH
25472: LD_EXP 74
25476: PUSH
25477: LD_EXP 70
25481: PUSH
25482: LD_EXP 71
25486: PUSH
25487: LD_EXP 79
25491: PUSH
25492: LD_EXP 83
25496: PUSH
25497: LD_EXP 84
25501: PUSH
25502: LD_EXP 86
25506: PUSH
25507: LD_EXP 90
25511: PUSH
25512: LD_EXP 93
25516: PUSH
25517: LD_EXP 94
25521: PUSH
25522: LD_EXP 104
25526: PUSH
25527: LD_EXP 105
25531: PUSH
25532: LD_EXP 106
25536: PUSH
25537: LD_EXP 107
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: ST_TO_ADDR
// tmp :=  ;
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_STRING 
25605: ST_TO_ADDR
// for i = 1 to normalCounter do
25606: LD_ADDR_VAR 0 8
25610: PUSH
25611: DOUBLE
25612: LD_INT 1
25614: DEC
25615: ST_TO_ADDR
25616: LD_EXP 52
25620: PUSH
25621: FOR_TO
25622: IFFALSE 25658
// begin if flags [ i ] then
25624: LD_VAR 0 4
25628: PUSH
25629: LD_VAR 0 8
25633: ARRAY
25634: IFFALSE 25656
// tmp := tmp & i & ; ;
25636: LD_ADDR_VAR 0 3
25640: PUSH
25641: LD_VAR 0 3
25645: PUSH
25646: LD_VAR 0 8
25650: STR
25651: PUSH
25652: LD_STRING ;
25654: STR
25655: ST_TO_ADDR
// end ;
25656: GO 25621
25658: POP
25659: POP
// for i = 1 to hardcoreCounter do
25660: LD_ADDR_VAR 0 8
25664: PUSH
25665: DOUBLE
25666: LD_INT 1
25668: DEC
25669: ST_TO_ADDR
25670: LD_EXP 53
25674: PUSH
25675: FOR_TO
25676: IFFALSE 25722
// begin if flags [ normalCounter + i ] then
25678: LD_VAR 0 4
25682: PUSH
25683: LD_EXP 52
25687: PUSH
25688: LD_VAR 0 8
25692: PLUS
25693: ARRAY
25694: IFFALSE 25720
// tmp := tmp & ( 100 + i ) & ; ;
25696: LD_ADDR_VAR 0 3
25700: PUSH
25701: LD_VAR 0 3
25705: PUSH
25706: LD_INT 100
25708: PUSH
25709: LD_VAR 0 8
25713: PLUS
25714: STR
25715: PUSH
25716: LD_STRING ;
25718: STR
25719: ST_TO_ADDR
// end ;
25720: GO 25675
25722: POP
25723: POP
// if tmp then
25724: LD_VAR 0 3
25728: IFFALSE 25740
// active := tmp ;
25730: LD_ADDR_VAR 0 7
25734: PUSH
25735: LD_VAR 0 3
25739: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25740: LD_STRING getStreamItemsFromMission("
25742: PUSH
25743: LD_VAR 0 5
25747: STR
25748: PUSH
25749: LD_STRING ","
25751: STR
25752: PUSH
25753: LD_VAR 0 6
25757: STR
25758: PUSH
25759: LD_STRING ","
25761: STR
25762: PUSH
25763: LD_VAR 0 7
25767: STR
25768: PUSH
25769: LD_STRING ")
25771: STR
25772: PPUSH
25773: CALL_OW 559
// end else
25777: GO 25786
// ToLua ( getStreamItemsFromMission("","","") ) ;
25779: LD_STRING getStreamItemsFromMission("","","")
25781: PPUSH
25782: CALL_OW 559
// end ;
25786: LD_VAR 0 2
25790: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25791: LD_EXP 51
25795: PUSH
25796: LD_EXP 56
25800: AND
25801: IFFALSE 25925
25803: GO 25805
25805: DISABLE
25806: LD_INT 0
25808: PPUSH
25809: PPUSH
// begin enable ;
25810: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25811: LD_ADDR_VAR 0 2
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_OWVAR 2
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 7
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 34
25843: PUSH
25844: LD_INT 45
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 34
25853: PUSH
25854: LD_INT 28
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 34
25863: PUSH
25864: LD_INT 47
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PPUSH
25882: CALL_OW 69
25886: ST_TO_ADDR
// if not tmp then
25887: LD_VAR 0 2
25891: NOT
25892: IFFALSE 25896
// exit ;
25894: GO 25925
// for i in tmp do
25896: LD_ADDR_VAR 0 1
25900: PUSH
25901: LD_VAR 0 2
25905: PUSH
25906: FOR_IN
25907: IFFALSE 25923
// begin SetLives ( i , 0 ) ;
25909: LD_VAR 0 1
25913: PPUSH
25914: LD_INT 0
25916: PPUSH
25917: CALL_OW 234
// end ;
25921: GO 25906
25923: POP
25924: POP
// end ;
25925: PPOPN 2
25927: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25928: LD_EXP 51
25932: PUSH
25933: LD_EXP 57
25937: AND
25938: IFFALSE 26022
25940: GO 25942
25942: DISABLE
25943: LD_INT 0
25945: PPUSH
25946: PPUSH
// begin enable ;
25947: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25948: LD_ADDR_VAR 0 2
25952: PUSH
25953: LD_INT 22
25955: PUSH
25956: LD_OWVAR 2
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 32
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PPUSH
25979: CALL_OW 69
25983: ST_TO_ADDR
// if not tmp then
25984: LD_VAR 0 2
25988: NOT
25989: IFFALSE 25993
// exit ;
25991: GO 26022
// for i in tmp do
25993: LD_ADDR_VAR 0 1
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: FOR_IN
26004: IFFALSE 26020
// begin SetLives ( i , 0 ) ;
26006: LD_VAR 0 1
26010: PPUSH
26011: LD_INT 0
26013: PPUSH
26014: CALL_OW 234
// end ;
26018: GO 26003
26020: POP
26021: POP
// end ;
26022: PPOPN 2
26024: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26025: LD_EXP 51
26029: PUSH
26030: LD_EXP 54
26034: AND
26035: IFFALSE 26128
26037: GO 26039
26039: DISABLE
26040: LD_INT 0
26042: PPUSH
// begin enable ;
26043: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26044: LD_ADDR_VAR 0 1
26048: PUSH
26049: LD_INT 22
26051: PUSH
26052: LD_OWVAR 2
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: LD_INT 25
26066: PUSH
26067: LD_INT 5
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 25
26076: PUSH
26077: LD_INT 9
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 25
26086: PUSH
26087: LD_INT 8
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PPUSH
26104: CALL_OW 69
26108: PUSH
26109: FOR_IN
26110: IFFALSE 26126
// begin SetClass ( i , 1 ) ;
26112: LD_VAR 0 1
26116: PPUSH
26117: LD_INT 1
26119: PPUSH
26120: CALL_OW 336
// end ;
26124: GO 26109
26126: POP
26127: POP
// end ;
26128: PPOPN 1
26130: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26131: LD_EXP 51
26135: PUSH
26136: LD_EXP 55
26140: AND
26141: PUSH
26142: LD_OWVAR 65
26146: PUSH
26147: LD_INT 7
26149: LESS
26150: AND
26151: IFFALSE 26165
26153: GO 26155
26155: DISABLE
// begin enable ;
26156: ENABLE
// game_speed := 7 ;
26157: LD_ADDR_OWVAR 65
26161: PUSH
26162: LD_INT 7
26164: ST_TO_ADDR
// end ;
26165: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26166: LD_EXP 51
26170: PUSH
26171: LD_EXP 58
26175: AND
26176: IFFALSE 26378
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
26184: PPUSH
26185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26186: LD_ADDR_VAR 0 3
26190: PUSH
26191: LD_INT 81
26193: PUSH
26194: LD_OWVAR 2
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 21
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PPUSH
26217: CALL_OW 69
26221: ST_TO_ADDR
// if not tmp then
26222: LD_VAR 0 3
26226: NOT
26227: IFFALSE 26231
// exit ;
26229: GO 26378
// if tmp > 5 then
26231: LD_VAR 0 3
26235: PUSH
26236: LD_INT 5
26238: GREATER
26239: IFFALSE 26251
// k := 5 else
26241: LD_ADDR_VAR 0 2
26245: PUSH
26246: LD_INT 5
26248: ST_TO_ADDR
26249: GO 26261
// k := tmp ;
26251: LD_ADDR_VAR 0 2
26255: PUSH
26256: LD_VAR 0 3
26260: ST_TO_ADDR
// for i := 1 to k do
26261: LD_ADDR_VAR 0 1
26265: PUSH
26266: DOUBLE
26267: LD_INT 1
26269: DEC
26270: ST_TO_ADDR
26271: LD_VAR 0 2
26275: PUSH
26276: FOR_TO
26277: IFFALSE 26376
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26279: LD_VAR 0 3
26283: PUSH
26284: LD_VAR 0 1
26288: ARRAY
26289: PPUSH
26290: LD_VAR 0 1
26294: PUSH
26295: LD_INT 4
26297: MOD
26298: PUSH
26299: LD_INT 1
26301: PLUS
26302: PPUSH
26303: CALL_OW 259
26307: PUSH
26308: LD_INT 10
26310: LESS
26311: IFFALSE 26374
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26313: LD_VAR 0 3
26317: PUSH
26318: LD_VAR 0 1
26322: ARRAY
26323: PPUSH
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 4
26331: MOD
26332: PUSH
26333: LD_INT 1
26335: PLUS
26336: PPUSH
26337: LD_VAR 0 3
26341: PUSH
26342: LD_VAR 0 1
26346: ARRAY
26347: PPUSH
26348: LD_VAR 0 1
26352: PUSH
26353: LD_INT 4
26355: MOD
26356: PUSH
26357: LD_INT 1
26359: PLUS
26360: PPUSH
26361: CALL_OW 259
26365: PUSH
26366: LD_INT 1
26368: PLUS
26369: PPUSH
26370: CALL_OW 237
26374: GO 26276
26376: POP
26377: POP
// end ;
26378: PPOPN 3
26380: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26381: LD_EXP 51
26385: PUSH
26386: LD_EXP 59
26390: AND
26391: IFFALSE 26411
26393: GO 26395
26395: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26396: LD_INT 4
26398: PPUSH
26399: LD_OWVAR 2
26403: PPUSH
26404: LD_INT 0
26406: PPUSH
26407: CALL_OW 324
26411: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26412: LD_EXP 51
26416: PUSH
26417: LD_EXP 88
26421: AND
26422: IFFALSE 26442
26424: GO 26426
26426: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26427: LD_INT 19
26429: PPUSH
26430: LD_OWVAR 2
26434: PPUSH
26435: LD_INT 0
26437: PPUSH
26438: CALL_OW 324
26442: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26443: LD_EXP 51
26447: PUSH
26448: LD_EXP 60
26452: AND
26453: IFFALSE 26555
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
// begin enable ;
26462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26463: LD_ADDR_VAR 0 2
26467: PUSH
26468: LD_INT 22
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 34
26485: PUSH
26486: LD_INT 11
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 34
26495: PUSH
26496: LD_INT 30
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PPUSH
26512: CALL_OW 69
26516: ST_TO_ADDR
// if not tmp then
26517: LD_VAR 0 2
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26555
// for i in tmp do
26526: LD_ADDR_VAR 0 1
26530: PUSH
26531: LD_VAR 0 2
26535: PUSH
26536: FOR_IN
26537: IFFALSE 26553
// begin SetLives ( i , 0 ) ;
26539: LD_VAR 0 1
26543: PPUSH
26544: LD_INT 0
26546: PPUSH
26547: CALL_OW 234
// end ;
26551: GO 26536
26553: POP
26554: POP
// end ;
26555: PPOPN 2
26557: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26558: LD_EXP 51
26562: PUSH
26563: LD_EXP 61
26567: AND
26568: IFFALSE 26588
26570: GO 26572
26572: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26573: LD_INT 32
26575: PPUSH
26576: LD_OWVAR 2
26580: PPUSH
26581: LD_INT 0
26583: PPUSH
26584: CALL_OW 324
26588: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26589: LD_EXP 51
26593: PUSH
26594: LD_EXP 62
26598: AND
26599: IFFALSE 26780
26601: GO 26603
26603: DISABLE
26604: LD_INT 0
26606: PPUSH
26607: PPUSH
26608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26609: LD_ADDR_VAR 0 2
26613: PUSH
26614: LD_INT 22
26616: PUSH
26617: LD_OWVAR 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 33
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PPUSH
26640: CALL_OW 69
26644: ST_TO_ADDR
// if not tmp then
26645: LD_VAR 0 2
26649: NOT
26650: IFFALSE 26654
// exit ;
26652: GO 26780
// side := 0 ;
26654: LD_ADDR_VAR 0 3
26658: PUSH
26659: LD_INT 0
26661: ST_TO_ADDR
// for i := 1 to 8 do
26662: LD_ADDR_VAR 0 1
26666: PUSH
26667: DOUBLE
26668: LD_INT 1
26670: DEC
26671: ST_TO_ADDR
26672: LD_INT 8
26674: PUSH
26675: FOR_TO
26676: IFFALSE 26724
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26678: LD_OWVAR 2
26682: PUSH
26683: LD_VAR 0 1
26687: NONEQUAL
26688: PUSH
26689: LD_OWVAR 2
26693: PPUSH
26694: LD_VAR 0 1
26698: PPUSH
26699: CALL_OW 81
26703: PUSH
26704: LD_INT 2
26706: EQUAL
26707: AND
26708: IFFALSE 26722
// begin side := i ;
26710: LD_ADDR_VAR 0 3
26714: PUSH
26715: LD_VAR 0 1
26719: ST_TO_ADDR
// break ;
26720: GO 26724
// end ;
26722: GO 26675
26724: POP
26725: POP
// if not side then
26726: LD_VAR 0 3
26730: NOT
26731: IFFALSE 26735
// exit ;
26733: GO 26780
// for i := 1 to tmp do
26735: LD_ADDR_VAR 0 1
26739: PUSH
26740: DOUBLE
26741: LD_INT 1
26743: DEC
26744: ST_TO_ADDR
26745: LD_VAR 0 2
26749: PUSH
26750: FOR_TO
26751: IFFALSE 26778
// if Prob ( 60 ) then
26753: LD_INT 60
26755: PPUSH
26756: CALL_OW 13
26760: IFFALSE 26776
// SetSide ( i , side ) ;
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_VAR 0 3
26771: PPUSH
26772: CALL_OW 235
26776: GO 26750
26778: POP
26779: POP
// end ;
26780: PPOPN 3
26782: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26783: LD_EXP 51
26787: PUSH
26788: LD_EXP 64
26792: AND
26793: IFFALSE 26912
26795: GO 26797
26797: DISABLE
26798: LD_INT 0
26800: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26801: LD_ADDR_VAR 0 1
26805: PUSH
26806: LD_INT 22
26808: PUSH
26809: LD_OWVAR 2
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 21
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 3
26830: PUSH
26831: LD_INT 23
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: PPUSH
26850: CALL_OW 69
26854: PUSH
26855: FOR_IN
26856: IFFALSE 26910
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26858: LD_VAR 0 1
26862: PPUSH
26863: CALL_OW 257
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 3
26876: PUSH
26877: LD_INT 4
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: IN
26886: IFFALSE 26908
// SetClass ( un , rand ( 1 , 4 ) ) ;
26888: LD_VAR 0 1
26892: PPUSH
26893: LD_INT 1
26895: PPUSH
26896: LD_INT 4
26898: PPUSH
26899: CALL_OW 12
26903: PPUSH
26904: CALL_OW 336
26908: GO 26855
26910: POP
26911: POP
// end ;
26912: PPOPN 1
26914: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26915: LD_EXP 51
26919: PUSH
26920: LD_EXP 63
26924: AND
26925: IFFALSE 27004
26927: GO 26929
26929: DISABLE
26930: LD_INT 0
26932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26933: LD_ADDR_VAR 0 1
26937: PUSH
26938: LD_INT 22
26940: PUSH
26941: LD_OWVAR 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 21
26952: PUSH
26953: LD_INT 3
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PPUSH
26964: CALL_OW 69
26968: ST_TO_ADDR
// if not tmp then
26969: LD_VAR 0 1
26973: NOT
26974: IFFALSE 26978
// exit ;
26976: GO 27004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26978: LD_VAR 0 1
26982: PUSH
26983: LD_INT 1
26985: PPUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 12
26995: ARRAY
26996: PPUSH
26997: LD_INT 100
26999: PPUSH
27000: CALL_OW 234
// end ;
27004: PPOPN 1
27006: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27007: LD_EXP 51
27011: PUSH
27012: LD_EXP 65
27016: AND
27017: IFFALSE 27115
27019: GO 27021
27021: DISABLE
27022: LD_INT 0
27024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: LD_INT 22
27032: PUSH
27033: LD_OWVAR 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 21
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PPUSH
27056: CALL_OW 69
27060: ST_TO_ADDR
// if not tmp then
27061: LD_VAR 0 1
27065: NOT
27066: IFFALSE 27070
// exit ;
27068: GO 27115
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27070: LD_VAR 0 1
27074: PUSH
27075: LD_INT 1
27077: PPUSH
27078: LD_VAR 0 1
27082: PPUSH
27083: CALL_OW 12
27087: ARRAY
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: LD_INT 4
27094: PPUSH
27095: CALL_OW 12
27099: PPUSH
27100: LD_INT 3000
27102: PPUSH
27103: LD_INT 9000
27105: PPUSH
27106: CALL_OW 12
27110: PPUSH
27111: CALL_OW 492
// end ;
27115: PPOPN 1
27117: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27118: LD_EXP 51
27122: PUSH
27123: LD_EXP 66
27127: AND
27128: IFFALSE 27148
27130: GO 27132
27132: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27133: LD_INT 1
27135: PPUSH
27136: LD_OWVAR 2
27140: PPUSH
27141: LD_INT 0
27143: PPUSH
27144: CALL_OW 324
27148: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27149: LD_EXP 51
27153: PUSH
27154: LD_EXP 67
27158: AND
27159: IFFALSE 27242
27161: GO 27163
27163: DISABLE
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27168: LD_ADDR_VAR 0 2
27172: PUSH
27173: LD_INT 22
27175: PUSH
27176: LD_OWVAR 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 21
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PPUSH
27199: CALL_OW 69
27203: ST_TO_ADDR
// if not tmp then
27204: LD_VAR 0 2
27208: NOT
27209: IFFALSE 27213
// exit ;
27211: GO 27242
// for i in tmp do
27213: LD_ADDR_VAR 0 1
27217: PUSH
27218: LD_VAR 0 2
27222: PUSH
27223: FOR_IN
27224: IFFALSE 27240
// SetBLevel ( i , 10 ) ;
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_INT 10
27233: PPUSH
27234: CALL_OW 241
27238: GO 27223
27240: POP
27241: POP
// end ;
27242: PPOPN 2
27244: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27245: LD_EXP 51
27249: PUSH
27250: LD_EXP 68
27254: AND
27255: IFFALSE 27366
27257: GO 27259
27259: DISABLE
27260: LD_INT 0
27262: PPUSH
27263: PPUSH
27264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27265: LD_ADDR_VAR 0 3
27269: PUSH
27270: LD_INT 22
27272: PUSH
27273: LD_OWVAR 2
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: ST_TO_ADDR
// if not tmp then
27301: LD_VAR 0 3
27305: NOT
27306: IFFALSE 27310
// exit ;
27308: GO 27366
// un := tmp [ rand ( 1 , tmp ) ] ;
27310: LD_ADDR_VAR 0 2
27314: PUSH
27315: LD_VAR 0 3
27319: PUSH
27320: LD_INT 1
27322: PPUSH
27323: LD_VAR 0 3
27327: PPUSH
27328: CALL_OW 12
27332: ARRAY
27333: ST_TO_ADDR
// if Crawls ( un ) then
27334: LD_VAR 0 2
27338: PPUSH
27339: CALL_OW 318
27343: IFFALSE 27354
// ComWalk ( un ) ;
27345: LD_VAR 0 2
27349: PPUSH
27350: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27354: LD_VAR 0 2
27358: PPUSH
27359: LD_INT 5
27361: PPUSH
27362: CALL_OW 336
// end ;
27366: PPOPN 3
27368: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27369: LD_EXP 51
27373: PUSH
27374: LD_EXP 69
27378: AND
27379: PUSH
27380: LD_OWVAR 67
27384: PUSH
27385: LD_INT 4
27387: LESS
27388: AND
27389: IFFALSE 27408
27391: GO 27393
27393: DISABLE
// begin Difficulty := Difficulty + 1 ;
27394: LD_ADDR_OWVAR 67
27398: PUSH
27399: LD_OWVAR 67
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: ST_TO_ADDR
// end ;
27408: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27409: LD_EXP 51
27413: PUSH
27414: LD_EXP 70
27418: AND
27419: IFFALSE 27522
27421: GO 27423
27423: DISABLE
27424: LD_INT 0
27426: PPUSH
// begin for i := 1 to 5 do
27427: LD_ADDR_VAR 0 1
27431: PUSH
27432: DOUBLE
27433: LD_INT 1
27435: DEC
27436: ST_TO_ADDR
27437: LD_INT 5
27439: PUSH
27440: FOR_TO
27441: IFFALSE 27520
// begin uc_nation := nation_nature ;
27443: LD_ADDR_OWVAR 21
27447: PUSH
27448: LD_INT 0
27450: ST_TO_ADDR
// uc_side := 0 ;
27451: LD_ADDR_OWVAR 20
27455: PUSH
27456: LD_INT 0
27458: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27459: LD_ADDR_OWVAR 29
27463: PUSH
27464: LD_INT 12
27466: PUSH
27467: LD_INT 12
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// hc_agressivity := 20 ;
27474: LD_ADDR_OWVAR 35
27478: PUSH
27479: LD_INT 20
27481: ST_TO_ADDR
// hc_class := class_tiger ;
27482: LD_ADDR_OWVAR 28
27486: PUSH
27487: LD_INT 14
27489: ST_TO_ADDR
// hc_gallery :=  ;
27490: LD_ADDR_OWVAR 33
27494: PUSH
27495: LD_STRING 
27497: ST_TO_ADDR
// hc_name :=  ;
27498: LD_ADDR_OWVAR 26
27502: PUSH
27503: LD_STRING 
27505: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27506: CALL_OW 44
27510: PPUSH
27511: LD_INT 0
27513: PPUSH
27514: CALL_OW 51
// end ;
27518: GO 27440
27520: POP
27521: POP
// end ;
27522: PPOPN 1
27524: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27525: LD_EXP 51
27529: PUSH
27530: LD_EXP 71
27534: AND
27535: IFFALSE 27544
27537: GO 27539
27539: DISABLE
// StreamSibBomb ;
27540: CALL 27545 0 0
27544: END
// export function StreamSibBomb ; var i , x , y ; begin
27545: LD_INT 0
27547: PPUSH
27548: PPUSH
27549: PPUSH
27550: PPUSH
// result := false ;
27551: LD_ADDR_VAR 0 1
27555: PUSH
27556: LD_INT 0
27558: ST_TO_ADDR
// for i := 1 to 16 do
27559: LD_ADDR_VAR 0 2
27563: PUSH
27564: DOUBLE
27565: LD_INT 1
27567: DEC
27568: ST_TO_ADDR
27569: LD_INT 16
27571: PUSH
27572: FOR_TO
27573: IFFALSE 27772
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27575: LD_ADDR_VAR 0 3
27579: PUSH
27580: LD_INT 10
27582: PUSH
27583: LD_INT 20
27585: PUSH
27586: LD_INT 30
27588: PUSH
27589: LD_INT 40
27591: PUSH
27592: LD_INT 50
27594: PUSH
27595: LD_INT 60
27597: PUSH
27598: LD_INT 70
27600: PUSH
27601: LD_INT 80
27603: PUSH
27604: LD_INT 90
27606: PUSH
27607: LD_INT 100
27609: PUSH
27610: LD_INT 110
27612: PUSH
27613: LD_INT 120
27615: PUSH
27616: LD_INT 130
27618: PUSH
27619: LD_INT 140
27621: PUSH
27622: LD_INT 150
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PPUSH
27645: LD_INT 15
27647: PPUSH
27648: CALL_OW 12
27652: ARRAY
27653: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27654: LD_ADDR_VAR 0 4
27658: PUSH
27659: LD_INT 10
27661: PUSH
27662: LD_INT 20
27664: PUSH
27665: LD_INT 30
27667: PUSH
27668: LD_INT 40
27670: PUSH
27671: LD_INT 50
27673: PUSH
27674: LD_INT 60
27676: PUSH
27677: LD_INT 70
27679: PUSH
27680: LD_INT 80
27682: PUSH
27683: LD_INT 90
27685: PUSH
27686: LD_INT 100
27688: PUSH
27689: LD_INT 110
27691: PUSH
27692: LD_INT 120
27694: PUSH
27695: LD_INT 130
27697: PUSH
27698: LD_INT 140
27700: PUSH
27701: LD_INT 150
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: PPUSH
27724: LD_INT 15
27726: PPUSH
27727: CALL_OW 12
27731: ARRAY
27732: ST_TO_ADDR
// if ValidHex ( x , y ) then
27733: LD_VAR 0 3
27737: PPUSH
27738: LD_VAR 0 4
27742: PPUSH
27743: CALL_OW 488
27747: IFFALSE 27770
// begin result := [ x , y ] ;
27749: LD_ADDR_VAR 0 1
27753: PUSH
27754: LD_VAR 0 3
27758: PUSH
27759: LD_VAR 0 4
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// break ;
27768: GO 27772
// end ; end ;
27770: GO 27572
27772: POP
27773: POP
// if result then
27774: LD_VAR 0 1
27778: IFFALSE 27838
// begin ToLua ( playSibBomb() ) ;
27780: LD_STRING playSibBomb()
27782: PPUSH
27783: CALL_OW 559
// wait ( 0 0$14 ) ;
27787: LD_INT 490
27789: PPUSH
27790: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27794: LD_VAR 0 1
27798: PUSH
27799: LD_INT 1
27801: ARRAY
27802: PPUSH
27803: LD_VAR 0 1
27807: PUSH
27808: LD_INT 2
27810: ARRAY
27811: PPUSH
27812: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27816: LD_VAR 0 1
27820: PUSH
27821: LD_INT 1
27823: ARRAY
27824: PPUSH
27825: LD_VAR 0 1
27829: PUSH
27830: LD_INT 2
27832: ARRAY
27833: PPUSH
27834: CALL_OW 429
// end ; end ;
27838: LD_VAR 0 1
27842: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27843: LD_EXP 51
27847: PUSH
27848: LD_EXP 73
27852: AND
27853: IFFALSE 27865
27855: GO 27857
27857: DISABLE
// YouLost (  ) ;
27858: LD_STRING 
27860: PPUSH
27861: CALL_OW 104
27865: END
// every 0 0$1 trigger StreamModeActive and sFog do
27866: LD_EXP 51
27870: PUSH
27871: LD_EXP 72
27875: AND
27876: IFFALSE 27890
27878: GO 27880
27880: DISABLE
// FogOff ( your_side ) ;
27881: LD_OWVAR 2
27885: PPUSH
27886: CALL_OW 344
27890: END
// every 0 0$1 trigger StreamModeActive and sSun do
27891: LD_EXP 51
27895: PUSH
27896: LD_EXP 74
27900: AND
27901: IFFALSE 27929
27903: GO 27905
27905: DISABLE
// begin solar_recharge_percent := 0 ;
27906: LD_ADDR_OWVAR 79
27910: PUSH
27911: LD_INT 0
27913: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27914: LD_INT 10500
27916: PPUSH
27917: CALL_OW 67
// solar_recharge_percent := 100 ;
27921: LD_ADDR_OWVAR 79
27925: PUSH
27926: LD_INT 100
27928: ST_TO_ADDR
// end ;
27929: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27930: LD_EXP 51
27934: PUSH
27935: LD_EXP 75
27939: AND
27940: IFFALSE 28179
27942: GO 27944
27944: DISABLE
27945: LD_INT 0
27947: PPUSH
27948: PPUSH
27949: PPUSH
// begin tmp := [ ] ;
27950: LD_ADDR_VAR 0 3
27954: PUSH
27955: EMPTY
27956: ST_TO_ADDR
// for i := 1 to 6 do
27957: LD_ADDR_VAR 0 1
27961: PUSH
27962: DOUBLE
27963: LD_INT 1
27965: DEC
27966: ST_TO_ADDR
27967: LD_INT 6
27969: PUSH
27970: FOR_TO
27971: IFFALSE 28076
// begin uc_nation := nation_nature ;
27973: LD_ADDR_OWVAR 21
27977: PUSH
27978: LD_INT 0
27980: ST_TO_ADDR
// uc_side := 0 ;
27981: LD_ADDR_OWVAR 20
27985: PUSH
27986: LD_INT 0
27988: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27989: LD_ADDR_OWVAR 29
27993: PUSH
27994: LD_INT 12
27996: PUSH
27997: LD_INT 12
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// hc_agressivity := 20 ;
28004: LD_ADDR_OWVAR 35
28008: PUSH
28009: LD_INT 20
28011: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28012: LD_ADDR_OWVAR 28
28016: PUSH
28017: LD_INT 17
28019: ST_TO_ADDR
// hc_gallery :=  ;
28020: LD_ADDR_OWVAR 33
28024: PUSH
28025: LD_STRING 
28027: ST_TO_ADDR
// hc_name :=  ;
28028: LD_ADDR_OWVAR 26
28032: PUSH
28033: LD_STRING 
28035: ST_TO_ADDR
// un := CreateHuman ;
28036: LD_ADDR_VAR 0 2
28040: PUSH
28041: CALL_OW 44
28045: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28046: LD_VAR 0 2
28050: PPUSH
28051: LD_INT 1
28053: PPUSH
28054: CALL_OW 51
// tmp := tmp ^ un ;
28058: LD_ADDR_VAR 0 3
28062: PUSH
28063: LD_VAR 0 3
28067: PUSH
28068: LD_VAR 0 2
28072: ADD
28073: ST_TO_ADDR
// end ;
28074: GO 27970
28076: POP
28077: POP
// repeat wait ( 0 0$1 ) ;
28078: LD_INT 35
28080: PPUSH
28081: CALL_OW 67
// for un in tmp do
28085: LD_ADDR_VAR 0 2
28089: PUSH
28090: LD_VAR 0 3
28094: PUSH
28095: FOR_IN
28096: IFFALSE 28170
// begin if IsDead ( un ) then
28098: LD_VAR 0 2
28102: PPUSH
28103: CALL_OW 301
28107: IFFALSE 28127
// begin tmp := tmp diff un ;
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_VAR 0 3
28118: PUSH
28119: LD_VAR 0 2
28123: DIFF
28124: ST_TO_ADDR
// continue ;
28125: GO 28095
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28127: LD_VAR 0 2
28131: PPUSH
28132: LD_INT 3
28134: PUSH
28135: LD_INT 22
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PPUSH
28149: CALL_OW 69
28153: PPUSH
28154: LD_VAR 0 2
28158: PPUSH
28159: CALL_OW 74
28163: PPUSH
28164: CALL_OW 115
// end ;
28168: GO 28095
28170: POP
28171: POP
// until not tmp ;
28172: LD_VAR 0 3
28176: NOT
28177: IFFALSE 28078
// end ;
28179: PPOPN 3
28181: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28182: LD_EXP 51
28186: PUSH
28187: LD_EXP 76
28191: AND
28192: IFFALSE 28246
28194: GO 28196
28196: DISABLE
// begin ToLua ( displayTroll(); ) ;
28197: LD_STRING displayTroll();
28199: PPUSH
28200: CALL_OW 559
// wait ( 3 3$00 ) ;
28204: LD_INT 6300
28206: PPUSH
28207: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28211: LD_STRING hideTroll();
28213: PPUSH
28214: CALL_OW 559
// wait ( 1 1$00 ) ;
28218: LD_INT 2100
28220: PPUSH
28221: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28225: LD_STRING displayTroll();
28227: PPUSH
28228: CALL_OW 559
// wait ( 1 1$00 ) ;
28232: LD_INT 2100
28234: PPUSH
28235: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28239: LD_STRING hideTroll();
28241: PPUSH
28242: CALL_OW 559
// end ;
28246: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28247: LD_EXP 51
28251: PUSH
28252: LD_EXP 77
28256: AND
28257: IFFALSE 28320
28259: GO 28261
28261: DISABLE
28262: LD_INT 0
28264: PPUSH
// begin p := 0 ;
28265: LD_ADDR_VAR 0 1
28269: PUSH
28270: LD_INT 0
28272: ST_TO_ADDR
// repeat game_speed := 1 ;
28273: LD_ADDR_OWVAR 65
28277: PUSH
28278: LD_INT 1
28280: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28281: LD_INT 35
28283: PPUSH
28284: CALL_OW 67
// p := p + 1 ;
28288: LD_ADDR_VAR 0 1
28292: PUSH
28293: LD_VAR 0 1
28297: PUSH
28298: LD_INT 1
28300: PLUS
28301: ST_TO_ADDR
// until p >= 60 ;
28302: LD_VAR 0 1
28306: PUSH
28307: LD_INT 60
28309: GREATEREQUAL
28310: IFFALSE 28273
// game_speed := 4 ;
28312: LD_ADDR_OWVAR 65
28316: PUSH
28317: LD_INT 4
28319: ST_TO_ADDR
// end ;
28320: PPOPN 1
28322: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28323: LD_EXP 51
28327: PUSH
28328: LD_EXP 78
28332: AND
28333: IFFALSE 28479
28335: GO 28337
28337: DISABLE
28338: LD_INT 0
28340: PPUSH
28341: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28342: LD_ADDR_VAR 0 1
28346: PUSH
28347: LD_INT 22
28349: PUSH
28350: LD_OWVAR 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 30
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 30
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PPUSH
28391: CALL_OW 69
28395: ST_TO_ADDR
// if not depot then
28396: LD_VAR 0 1
28400: NOT
28401: IFFALSE 28405
// exit ;
28403: GO 28479
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28405: LD_ADDR_VAR 0 2
28409: PUSH
28410: LD_VAR 0 1
28414: PUSH
28415: LD_INT 1
28417: PPUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 12
28427: ARRAY
28428: PPUSH
28429: CALL_OW 274
28433: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28434: LD_VAR 0 2
28438: PPUSH
28439: LD_INT 1
28441: PPUSH
28442: LD_INT 0
28444: PPUSH
28445: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28449: LD_VAR 0 2
28453: PPUSH
28454: LD_INT 2
28456: PPUSH
28457: LD_INT 0
28459: PPUSH
28460: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28464: LD_VAR 0 2
28468: PPUSH
28469: LD_INT 3
28471: PPUSH
28472: LD_INT 0
28474: PPUSH
28475: CALL_OW 277
// end ;
28479: PPOPN 2
28481: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28482: LD_EXP 51
28486: PUSH
28487: LD_EXP 79
28491: AND
28492: IFFALSE 28589
28494: GO 28496
28496: DISABLE
28497: LD_INT 0
28499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28500: LD_ADDR_VAR 0 1
28504: PUSH
28505: LD_INT 22
28507: PUSH
28508: LD_OWVAR 2
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 21
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: LD_INT 23
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: PPUSH
28549: CALL_OW 69
28553: ST_TO_ADDR
// if not tmp then
28554: LD_VAR 0 1
28558: NOT
28559: IFFALSE 28563
// exit ;
28561: GO 28589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28563: LD_VAR 0 1
28567: PUSH
28568: LD_INT 1
28570: PPUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 12
28580: ARRAY
28581: PPUSH
28582: LD_INT 200
28584: PPUSH
28585: CALL_OW 234
// end ;
28589: PPOPN 1
28591: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28592: LD_EXP 51
28596: PUSH
28597: LD_EXP 80
28601: AND
28602: IFFALSE 28681
28604: GO 28606
28606: DISABLE
28607: LD_INT 0
28609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28610: LD_ADDR_VAR 0 1
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_OWVAR 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 21
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 1
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28681
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28655: LD_VAR 0 1
28659: PUSH
28660: LD_INT 1
28662: PPUSH
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 12
28672: ARRAY
28673: PPUSH
28674: LD_INT 60
28676: PPUSH
28677: CALL_OW 234
// end ;
28681: PPOPN 1
28683: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28684: LD_EXP 51
28688: PUSH
28689: LD_EXP 81
28693: AND
28694: IFFALSE 28793
28696: GO 28698
28698: DISABLE
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
// begin enable ;
28703: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28704: LD_ADDR_VAR 0 1
28708: PUSH
28709: LD_INT 22
28711: PUSH
28712: LD_OWVAR 2
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 61
28723: PUSH
28724: EMPTY
28725: LIST
28726: PUSH
28727: LD_INT 33
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: PPUSH
28742: CALL_OW 69
28746: ST_TO_ADDR
// if not tmp then
28747: LD_VAR 0 1
28751: NOT
28752: IFFALSE 28756
// exit ;
28754: GO 28793
// for i in tmp do
28756: LD_ADDR_VAR 0 2
28760: PUSH
28761: LD_VAR 0 1
28765: PUSH
28766: FOR_IN
28767: IFFALSE 28791
// if IsControledBy ( i ) then
28769: LD_VAR 0 2
28773: PPUSH
28774: CALL_OW 312
28778: IFFALSE 28789
// ComUnlink ( i ) ;
28780: LD_VAR 0 2
28784: PPUSH
28785: CALL_OW 136
28789: GO 28766
28791: POP
28792: POP
// end ;
28793: PPOPN 2
28795: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28796: LD_EXP 51
28800: PUSH
28801: LD_EXP 82
28805: AND
28806: IFFALSE 28946
28808: GO 28810
28810: DISABLE
28811: LD_INT 0
28813: PPUSH
28814: PPUSH
// begin ToLua ( displayPowell(); ) ;
28815: LD_STRING displayPowell();
28817: PPUSH
28818: CALL_OW 559
// uc_side := 0 ;
28822: LD_ADDR_OWVAR 20
28826: PUSH
28827: LD_INT 0
28829: ST_TO_ADDR
// uc_nation := 2 ;
28830: LD_ADDR_OWVAR 21
28834: PUSH
28835: LD_INT 2
28837: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28838: LD_ADDR_OWVAR 37
28842: PUSH
28843: LD_INT 14
28845: ST_TO_ADDR
// vc_engine := engine_siberite ;
28846: LD_ADDR_OWVAR 39
28850: PUSH
28851: LD_INT 3
28853: ST_TO_ADDR
// vc_control := control_apeman ;
28854: LD_ADDR_OWVAR 38
28858: PUSH
28859: LD_INT 5
28861: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28862: LD_ADDR_OWVAR 40
28866: PUSH
28867: LD_INT 29
28869: ST_TO_ADDR
// un := CreateVehicle ;
28870: LD_ADDR_VAR 0 2
28874: PUSH
28875: CALL_OW 45
28879: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28880: LD_VAR 0 2
28884: PPUSH
28885: LD_INT 1
28887: PPUSH
28888: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28892: LD_INT 35
28894: PPUSH
28895: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28899: LD_VAR 0 2
28903: PPUSH
28904: LD_INT 22
28906: PUSH
28907: LD_OWVAR 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PPUSH
28916: CALL_OW 69
28920: PPUSH
28921: LD_VAR 0 2
28925: PPUSH
28926: CALL_OW 74
28930: PPUSH
28931: CALL_OW 115
// until IsDead ( un ) ;
28935: LD_VAR 0 2
28939: PPUSH
28940: CALL_OW 301
28944: IFFALSE 28892
// end ;
28946: PPOPN 2
28948: END
// every 0 0$1 trigger StreamModeActive and sStu do
28949: LD_EXP 51
28953: PUSH
28954: LD_EXP 90
28958: AND
28959: IFFALSE 28975
28961: GO 28963
28963: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28964: LD_STRING displayStucuk();
28966: PPUSH
28967: CALL_OW 559
// ResetFog ;
28971: CALL_OW 335
// end ;
28975: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28976: LD_EXP 51
28980: PUSH
28981: LD_EXP 83
28985: AND
28986: IFFALSE 29127
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28995: LD_ADDR_VAR 0 2
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_OWVAR 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 21
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not tmp then
29031: LD_VAR 0 2
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29127
// un := tmp [ rand ( 1 , tmp ) ] ;
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: LD_VAR 0 2
29049: PUSH
29050: LD_INT 1
29052: PPUSH
29053: LD_VAR 0 2
29057: PPUSH
29058: CALL_OW 12
29062: ARRAY
29063: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29064: LD_VAR 0 1
29068: PPUSH
29069: LD_INT 0
29071: PPUSH
29072: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29076: LD_VAR 0 1
29080: PPUSH
29081: LD_OWVAR 3
29085: PUSH
29086: LD_VAR 0 1
29090: DIFF
29091: PPUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 74
29101: PPUSH
29102: CALL_OW 115
// wait ( 0 0$20 ) ;
29106: LD_INT 700
29108: PPUSH
29109: CALL_OW 67
// SetSide ( un , your_side ) ;
29113: LD_VAR 0 1
29117: PPUSH
29118: LD_OWVAR 2
29122: PPUSH
29123: CALL_OW 235
// end ;
29127: PPOPN 2
29129: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29130: LD_EXP 51
29134: PUSH
29135: LD_EXP 84
29139: AND
29140: IFFALSE 29246
29142: GO 29144
29144: DISABLE
29145: LD_INT 0
29147: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29148: LD_ADDR_VAR 0 1
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: LD_INT 30
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 30
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL_OW 69
29201: ST_TO_ADDR
// if not depot then
29202: LD_VAR 0 1
29206: NOT
29207: IFFALSE 29211
// exit ;
29209: GO 29246
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29211: LD_VAR 0 1
29215: PUSH
29216: LD_INT 1
29218: ARRAY
29219: PPUSH
29220: CALL_OW 250
29224: PPUSH
29225: LD_VAR 0 1
29229: PUSH
29230: LD_INT 1
29232: ARRAY
29233: PPUSH
29234: CALL_OW 251
29238: PPUSH
29239: LD_INT 70
29241: PPUSH
29242: CALL_OW 495
// end ;
29246: PPOPN 1
29248: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29249: LD_EXP 51
29253: PUSH
29254: LD_EXP 85
29258: AND
29259: IFFALSE 29470
29261: GO 29263
29263: DISABLE
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29271: LD_ADDR_VAR 0 5
29275: PUSH
29276: LD_INT 22
29278: PUSH
29279: LD_OWVAR 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 21
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PPUSH
29302: CALL_OW 69
29306: ST_TO_ADDR
// if not tmp then
29307: LD_VAR 0 5
29311: NOT
29312: IFFALSE 29316
// exit ;
29314: GO 29470
// for i in tmp do
29316: LD_ADDR_VAR 0 1
29320: PUSH
29321: LD_VAR 0 5
29325: PUSH
29326: FOR_IN
29327: IFFALSE 29468
// begin d := rand ( 0 , 5 ) ;
29329: LD_ADDR_VAR 0 4
29333: PUSH
29334: LD_INT 0
29336: PPUSH
29337: LD_INT 5
29339: PPUSH
29340: CALL_OW 12
29344: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29345: LD_ADDR_VAR 0 2
29349: PUSH
29350: LD_VAR 0 1
29354: PPUSH
29355: CALL_OW 250
29359: PPUSH
29360: LD_VAR 0 4
29364: PPUSH
29365: LD_INT 3
29367: PPUSH
29368: LD_INT 12
29370: PPUSH
29371: CALL_OW 12
29375: PPUSH
29376: CALL_OW 272
29380: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 251
29395: PPUSH
29396: LD_VAR 0 4
29400: PPUSH
29401: LD_INT 3
29403: PPUSH
29404: LD_INT 12
29406: PPUSH
29407: CALL_OW 12
29411: PPUSH
29412: CALL_OW 273
29416: ST_TO_ADDR
// if ValidHex ( x , y ) then
29417: LD_VAR 0 2
29421: PPUSH
29422: LD_VAR 0 3
29426: PPUSH
29427: CALL_OW 488
29431: IFFALSE 29466
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29433: LD_VAR 0 1
29437: PPUSH
29438: LD_VAR 0 2
29442: PPUSH
29443: LD_VAR 0 3
29447: PPUSH
29448: LD_INT 3
29450: PPUSH
29451: LD_INT 6
29453: PPUSH
29454: CALL_OW 12
29458: PPUSH
29459: LD_INT 1
29461: PPUSH
29462: CALL_OW 483
// end ;
29466: GO 29326
29468: POP
29469: POP
// end ;
29470: PPOPN 5
29472: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29473: LD_EXP 51
29477: PUSH
29478: LD_EXP 86
29482: AND
29483: IFFALSE 29577
29485: GO 29487
29487: DISABLE
29488: LD_INT 0
29490: PPUSH
29491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: LD_INT 22
29499: PUSH
29500: LD_OWVAR 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 32
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 21
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: LIST
29533: PPUSH
29534: CALL_OW 69
29538: ST_TO_ADDR
// if not tmp then
29539: LD_VAR 0 2
29543: NOT
29544: IFFALSE 29548
// exit ;
29546: GO 29577
// for i in tmp do
29548: LD_ADDR_VAR 0 1
29552: PUSH
29553: LD_VAR 0 2
29557: PUSH
29558: FOR_IN
29559: IFFALSE 29575
// SetFuel ( i , 0 ) ;
29561: LD_VAR 0 1
29565: PPUSH
29566: LD_INT 0
29568: PPUSH
29569: CALL_OW 240
29573: GO 29558
29575: POP
29576: POP
// end ;
29577: PPOPN 2
29579: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29580: LD_EXP 51
29584: PUSH
29585: LD_EXP 87
29589: AND
29590: IFFALSE 29656
29592: GO 29594
29594: DISABLE
29595: LD_INT 0
29597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_OWVAR 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 30
29617: PUSH
29618: LD_INT 29
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 69
29633: ST_TO_ADDR
// if not tmp then
29634: LD_VAR 0 1
29638: NOT
29639: IFFALSE 29643
// exit ;
29641: GO 29656
// DestroyUnit ( tmp [ 1 ] ) ;
29643: LD_VAR 0 1
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: PPUSH
29652: CALL_OW 65
// end ;
29656: PPOPN 1
29658: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29659: LD_EXP 51
29663: PUSH
29664: LD_EXP 89
29668: AND
29669: IFFALSE 29798
29671: GO 29673
29673: DISABLE
29674: LD_INT 0
29676: PPUSH
// begin uc_side := 0 ;
29677: LD_ADDR_OWVAR 20
29681: PUSH
29682: LD_INT 0
29684: ST_TO_ADDR
// uc_nation := nation_arabian ;
29685: LD_ADDR_OWVAR 21
29689: PUSH
29690: LD_INT 2
29692: ST_TO_ADDR
// hc_gallery :=  ;
29693: LD_ADDR_OWVAR 33
29697: PUSH
29698: LD_STRING 
29700: ST_TO_ADDR
// hc_name :=  ;
29701: LD_ADDR_OWVAR 26
29705: PUSH
29706: LD_STRING 
29708: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29709: LD_INT 1
29711: PPUSH
29712: LD_INT 11
29714: PPUSH
29715: LD_INT 10
29717: PPUSH
29718: CALL_OW 380
// un := CreateHuman ;
29722: LD_ADDR_VAR 0 1
29726: PUSH
29727: CALL_OW 44
29731: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29732: LD_VAR 0 1
29736: PPUSH
29737: LD_INT 1
29739: PPUSH
29740: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29744: LD_INT 35
29746: PPUSH
29747: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29751: LD_VAR 0 1
29755: PPUSH
29756: LD_INT 22
29758: PUSH
29759: LD_OWVAR 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PPUSH
29768: CALL_OW 69
29772: PPUSH
29773: LD_VAR 0 1
29777: PPUSH
29778: CALL_OW 74
29782: PPUSH
29783: CALL_OW 115
// until IsDead ( un ) ;
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 301
29796: IFFALSE 29744
// end ;
29798: PPOPN 1
29800: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29801: LD_EXP 51
29805: PUSH
29806: LD_EXP 91
29810: AND
29811: IFFALSE 29823
29813: GO 29815
29815: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29816: LD_STRING earthquake(getX(game), 0, 32)
29818: PPUSH
29819: CALL_OW 559
29823: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29824: LD_EXP 51
29828: PUSH
29829: LD_EXP 92
29833: AND
29834: IFFALSE 29925
29836: GO 29838
29838: DISABLE
29839: LD_INT 0
29841: PPUSH
// begin enable ;
29842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29843: LD_ADDR_VAR 0 1
29847: PUSH
29848: LD_INT 22
29850: PUSH
29851: LD_OWVAR 2
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 21
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 33
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: PPUSH
29885: CALL_OW 69
29889: ST_TO_ADDR
// if not tmp then
29890: LD_VAR 0 1
29894: NOT
29895: IFFALSE 29899
// exit ;
29897: GO 29925
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29899: LD_VAR 0 1
29903: PUSH
29904: LD_INT 1
29906: PPUSH
29907: LD_VAR 0 1
29911: PPUSH
29912: CALL_OW 12
29916: ARRAY
29917: PPUSH
29918: LD_INT 1
29920: PPUSH
29921: CALL_OW 234
// end ;
29925: PPOPN 1
29927: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29928: LD_EXP 51
29932: PUSH
29933: LD_EXP 93
29937: AND
29938: IFFALSE 30079
29940: GO 29942
29942: DISABLE
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
29947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29948: LD_ADDR_VAR 0 3
29952: PUSH
29953: LD_INT 22
29955: PUSH
29956: LD_OWVAR 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 25
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PPUSH
29979: CALL_OW 69
29983: ST_TO_ADDR
// if not tmp then
29984: LD_VAR 0 3
29988: NOT
29989: IFFALSE 29993
// exit ;
29991: GO 30079
// un := tmp [ rand ( 1 , tmp ) ] ;
29993: LD_ADDR_VAR 0 2
29997: PUSH
29998: LD_VAR 0 3
30002: PUSH
30003: LD_INT 1
30005: PPUSH
30006: LD_VAR 0 3
30010: PPUSH
30011: CALL_OW 12
30015: ARRAY
30016: ST_TO_ADDR
// if Crawls ( un ) then
30017: LD_VAR 0 2
30021: PPUSH
30022: CALL_OW 318
30026: IFFALSE 30037
// ComWalk ( un ) ;
30028: LD_VAR 0 2
30032: PPUSH
30033: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30037: LD_VAR 0 2
30041: PPUSH
30042: LD_INT 9
30044: PPUSH
30045: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30049: LD_INT 28
30051: PPUSH
30052: LD_OWVAR 2
30056: PPUSH
30057: LD_INT 2
30059: PPUSH
30060: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30064: LD_INT 29
30066: PPUSH
30067: LD_OWVAR 2
30071: PPUSH
30072: LD_INT 2
30074: PPUSH
30075: CALL_OW 322
// end ;
30079: PPOPN 3
30081: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30082: LD_EXP 51
30086: PUSH
30087: LD_EXP 94
30091: AND
30092: IFFALSE 30203
30094: GO 30096
30096: DISABLE
30097: LD_INT 0
30099: PPUSH
30100: PPUSH
30101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30102: LD_ADDR_VAR 0 3
30106: PUSH
30107: LD_INT 22
30109: PUSH
30110: LD_OWVAR 2
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 25
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PPUSH
30133: CALL_OW 69
30137: ST_TO_ADDR
// if not tmp then
30138: LD_VAR 0 3
30142: NOT
30143: IFFALSE 30147
// exit ;
30145: GO 30203
// un := tmp [ rand ( 1 , tmp ) ] ;
30147: LD_ADDR_VAR 0 2
30151: PUSH
30152: LD_VAR 0 3
30156: PUSH
30157: LD_INT 1
30159: PPUSH
30160: LD_VAR 0 3
30164: PPUSH
30165: CALL_OW 12
30169: ARRAY
30170: ST_TO_ADDR
// if Crawls ( un ) then
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 318
30180: IFFALSE 30191
// ComWalk ( un ) ;
30182: LD_VAR 0 2
30186: PPUSH
30187: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30191: LD_VAR 0 2
30195: PPUSH
30196: LD_INT 8
30198: PPUSH
30199: CALL_OW 336
// end ;
30203: PPOPN 3
30205: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30206: LD_EXP 51
30210: PUSH
30211: LD_EXP 95
30215: AND
30216: IFFALSE 30360
30218: GO 30220
30220: DISABLE
30221: LD_INT 0
30223: PPUSH
30224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_OWVAR 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 21
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 34
30257: PUSH
30258: LD_INT 12
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 34
30267: PUSH
30268: LD_INT 51
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 34
30277: PUSH
30278: LD_INT 32
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: PPUSH
30296: CALL_OW 69
30300: ST_TO_ADDR
// if not tmp then
30301: LD_VAR 0 2
30305: NOT
30306: IFFALSE 30310
// exit ;
30308: GO 30360
// for i in tmp do
30310: LD_ADDR_VAR 0 1
30314: PUSH
30315: LD_VAR 0 2
30319: PUSH
30320: FOR_IN
30321: IFFALSE 30358
// if GetCargo ( i , mat_artifact ) = 0 then
30323: LD_VAR 0 1
30327: PPUSH
30328: LD_INT 4
30330: PPUSH
30331: CALL_OW 289
30335: PUSH
30336: LD_INT 0
30338: EQUAL
30339: IFFALSE 30356
// SetCargo ( i , mat_siberit , 100 ) ;
30341: LD_VAR 0 1
30345: PPUSH
30346: LD_INT 3
30348: PPUSH
30349: LD_INT 100
30351: PPUSH
30352: CALL_OW 290
30356: GO 30320
30358: POP
30359: POP
// end ;
30360: PPOPN 2
30362: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30363: LD_EXP 51
30367: PUSH
30368: LD_EXP 96
30372: AND
30373: IFFALSE 30556
30375: GO 30377
30377: DISABLE
30378: LD_INT 0
30380: PPUSH
30381: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30382: LD_ADDR_VAR 0 2
30386: PUSH
30387: LD_INT 22
30389: PUSH
30390: LD_OWVAR 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 69
30403: ST_TO_ADDR
// if not tmp then
30404: LD_VAR 0 2
30408: NOT
30409: IFFALSE 30413
// exit ;
30411: GO 30556
// for i := 1 to 2 do
30413: LD_ADDR_VAR 0 1
30417: PUSH
30418: DOUBLE
30419: LD_INT 1
30421: DEC
30422: ST_TO_ADDR
30423: LD_INT 2
30425: PUSH
30426: FOR_TO
30427: IFFALSE 30554
// begin uc_side := your_side ;
30429: LD_ADDR_OWVAR 20
30433: PUSH
30434: LD_OWVAR 2
30438: ST_TO_ADDR
// uc_nation := nation_american ;
30439: LD_ADDR_OWVAR 21
30443: PUSH
30444: LD_INT 1
30446: ST_TO_ADDR
// vc_chassis := us_morphling ;
30447: LD_ADDR_OWVAR 37
30451: PUSH
30452: LD_INT 5
30454: ST_TO_ADDR
// vc_engine := engine_siberite ;
30455: LD_ADDR_OWVAR 39
30459: PUSH
30460: LD_INT 3
30462: ST_TO_ADDR
// vc_control := control_computer ;
30463: LD_ADDR_OWVAR 38
30467: PUSH
30468: LD_INT 3
30470: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30471: LD_ADDR_OWVAR 40
30475: PUSH
30476: LD_INT 10
30478: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30479: LD_VAR 0 2
30483: PUSH
30484: LD_INT 1
30486: ARRAY
30487: PPUSH
30488: CALL_OW 310
30492: NOT
30493: IFFALSE 30540
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30495: CALL_OW 45
30499: PPUSH
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: CALL_OW 250
30513: PPUSH
30514: LD_VAR 0 2
30518: PUSH
30519: LD_INT 1
30521: ARRAY
30522: PPUSH
30523: CALL_OW 251
30527: PPUSH
30528: LD_INT 12
30530: PPUSH
30531: LD_INT 1
30533: PPUSH
30534: CALL_OW 50
30538: GO 30552
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30540: CALL_OW 45
30544: PPUSH
30545: LD_INT 1
30547: PPUSH
30548: CALL_OW 51
// end ;
30552: GO 30426
30554: POP
30555: POP
// end ;
30556: PPOPN 2
30558: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30559: LD_EXP 51
30563: PUSH
30564: LD_EXP 97
30568: AND
30569: IFFALSE 30791
30571: GO 30573
30573: DISABLE
30574: LD_INT 0
30576: PPUSH
30577: PPUSH
30578: PPUSH
30579: PPUSH
30580: PPUSH
30581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30582: LD_ADDR_VAR 0 6
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_OWVAR 2
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 21
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: LD_INT 23
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: LIST
30630: PPUSH
30631: CALL_OW 69
30635: ST_TO_ADDR
// if not tmp then
30636: LD_VAR 0 6
30640: NOT
30641: IFFALSE 30645
// exit ;
30643: GO 30791
// s1 := rand ( 1 , 4 ) ;
30645: LD_ADDR_VAR 0 2
30649: PUSH
30650: LD_INT 1
30652: PPUSH
30653: LD_INT 4
30655: PPUSH
30656: CALL_OW 12
30660: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30661: LD_ADDR_VAR 0 4
30665: PUSH
30666: LD_VAR 0 6
30670: PUSH
30671: LD_INT 1
30673: ARRAY
30674: PPUSH
30675: LD_VAR 0 2
30679: PPUSH
30680: CALL_OW 259
30684: ST_TO_ADDR
// if s1 = 1 then
30685: LD_VAR 0 2
30689: PUSH
30690: LD_INT 1
30692: EQUAL
30693: IFFALSE 30713
// s2 := rand ( 2 , 4 ) else
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 2
30702: PPUSH
30703: LD_INT 4
30705: PPUSH
30706: CALL_OW 12
30710: ST_TO_ADDR
30711: GO 30721
// s2 := 1 ;
30713: LD_ADDR_VAR 0 3
30717: PUSH
30718: LD_INT 1
30720: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_VAR 0 6
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: LD_VAR 0 3
30739: PPUSH
30740: CALL_OW 259
30744: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30745: LD_VAR 0 6
30749: PUSH
30750: LD_INT 1
30752: ARRAY
30753: PPUSH
30754: LD_VAR 0 2
30758: PPUSH
30759: LD_VAR 0 5
30763: PPUSH
30764: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30768: LD_VAR 0 6
30772: PUSH
30773: LD_INT 1
30775: ARRAY
30776: PPUSH
30777: LD_VAR 0 3
30781: PPUSH
30782: LD_VAR 0 4
30786: PPUSH
30787: CALL_OW 237
// end ;
30791: PPOPN 6
30793: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30794: LD_EXP 51
30798: PUSH
30799: LD_EXP 98
30803: AND
30804: IFFALSE 30883
30806: GO 30808
30808: DISABLE
30809: LD_INT 0
30811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30812: LD_ADDR_VAR 0 1
30816: PUSH
30817: LD_INT 22
30819: PUSH
30820: LD_OWVAR 2
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 30
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PPUSH
30843: CALL_OW 69
30847: ST_TO_ADDR
// if not tmp then
30848: LD_VAR 0 1
30852: NOT
30853: IFFALSE 30857
// exit ;
30855: GO 30883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30857: LD_VAR 0 1
30861: PUSH
30862: LD_INT 1
30864: PPUSH
30865: LD_VAR 0 1
30869: PPUSH
30870: CALL_OW 12
30874: ARRAY
30875: PPUSH
30876: LD_INT 1
30878: PPUSH
30879: CALL_OW 234
// end ;
30883: PPOPN 1
30885: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30886: LD_EXP 51
30890: PUSH
30891: LD_EXP 99
30895: AND
30896: IFFALSE 31008
30898: GO 30900
30900: DISABLE
30901: LD_INT 0
30903: PPUSH
30904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30905: LD_ADDR_VAR 0 2
30909: PUSH
30910: LD_INT 22
30912: PUSH
30913: LD_OWVAR 2
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 30
30927: PUSH
30928: LD_INT 27
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 30
30937: PUSH
30938: LD_INT 26
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 30
30947: PUSH
30948: LD_INT 28
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PPUSH
30965: CALL_OW 69
30969: ST_TO_ADDR
// if not tmp then
30970: LD_VAR 0 2
30974: NOT
30975: IFFALSE 30979
// exit ;
30977: GO 31008
// for i in tmp do
30979: LD_ADDR_VAR 0 1
30983: PUSH
30984: LD_VAR 0 2
30988: PUSH
30989: FOR_IN
30990: IFFALSE 31006
// SetLives ( i , 1 ) ;
30992: LD_VAR 0 1
30996: PPUSH
30997: LD_INT 1
30999: PPUSH
31000: CALL_OW 234
31004: GO 30989
31006: POP
31007: POP
// end ;
31008: PPOPN 2
31010: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31011: LD_EXP 51
31015: PUSH
31016: LD_EXP 100
31020: AND
31021: IFFALSE 31308
31023: GO 31025
31025: DISABLE
31026: LD_INT 0
31028: PPUSH
31029: PPUSH
31030: PPUSH
// begin i := rand ( 1 , 7 ) ;
31031: LD_ADDR_VAR 0 1
31035: PUSH
31036: LD_INT 1
31038: PPUSH
31039: LD_INT 7
31041: PPUSH
31042: CALL_OW 12
31046: ST_TO_ADDR
// case i of 1 :
31047: LD_VAR 0 1
31051: PUSH
31052: LD_INT 1
31054: DOUBLE
31055: EQUAL
31056: IFTRUE 31060
31058: GO 31070
31060: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31061: LD_STRING earthquake(getX(game), 0, 32)
31063: PPUSH
31064: CALL_OW 559
31068: GO 31308
31070: LD_INT 2
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31092
31078: POP
// begin ToLua ( displayStucuk(); ) ;
31079: LD_STRING displayStucuk();
31081: PPUSH
31082: CALL_OW 559
// ResetFog ;
31086: CALL_OW 335
// end ; 3 :
31090: GO 31308
31092: LD_INT 3
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31204
31100: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31101: LD_ADDR_VAR 0 2
31105: PUSH
31106: LD_INT 22
31108: PUSH
31109: LD_OWVAR 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 25
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: CALL_OW 69
31136: ST_TO_ADDR
// if not tmp then
31137: LD_VAR 0 2
31141: NOT
31142: IFFALSE 31146
// exit ;
31144: GO 31308
// un := tmp [ rand ( 1 , tmp ) ] ;
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_VAR 0 2
31155: PUSH
31156: LD_INT 1
31158: PPUSH
31159: LD_VAR 0 2
31163: PPUSH
31164: CALL_OW 12
31168: ARRAY
31169: ST_TO_ADDR
// if Crawls ( un ) then
31170: LD_VAR 0 3
31174: PPUSH
31175: CALL_OW 318
31179: IFFALSE 31190
// ComWalk ( un ) ;
31181: LD_VAR 0 3
31185: PPUSH
31186: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31190: LD_VAR 0 3
31194: PPUSH
31195: LD_INT 8
31197: PPUSH
31198: CALL_OW 336
// end ; 4 :
31202: GO 31308
31204: LD_INT 4
31206: DOUBLE
31207: EQUAL
31208: IFTRUE 31212
31210: GO 31286
31212: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31213: LD_ADDR_VAR 0 2
31217: PUSH
31218: LD_INT 22
31220: PUSH
31221: LD_OWVAR 2
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 29
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 69
31248: ST_TO_ADDR
// if not tmp then
31249: LD_VAR 0 2
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31308
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31258: LD_VAR 0 2
31262: PUSH
31263: LD_INT 1
31265: ARRAY
31266: PPUSH
31267: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31271: LD_VAR 0 2
31275: PUSH
31276: LD_INT 1
31278: ARRAY
31279: PPUSH
31280: CALL_OW 65
// end ; 5 .. 7 :
31284: GO 31308
31286: LD_INT 5
31288: DOUBLE
31289: GREATEREQUAL
31290: IFFALSE 31298
31292: LD_INT 7
31294: DOUBLE
31295: LESSEQUAL
31296: IFTRUE 31300
31298: GO 31307
31300: POP
// StreamSibBomb ; end ;
31301: CALL 27545 0 0
31305: GO 31308
31307: POP
// end ;
31308: PPOPN 3
31310: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31311: LD_EXP 51
31315: PUSH
31316: LD_EXP 101
31320: AND
31321: IFFALSE 31477
31323: GO 31325
31325: DISABLE
31326: LD_INT 0
31328: PPUSH
31329: PPUSH
31330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31331: LD_ADDR_VAR 0 2
31335: PUSH
31336: LD_INT 81
31338: PUSH
31339: LD_OWVAR 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: LD_INT 21
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 21
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PPUSH
31380: CALL_OW 69
31384: ST_TO_ADDR
// if not tmp then
31385: LD_VAR 0 2
31389: NOT
31390: IFFALSE 31394
// exit ;
31392: GO 31477
// p := 0 ;
31394: LD_ADDR_VAR 0 3
31398: PUSH
31399: LD_INT 0
31401: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31402: LD_INT 35
31404: PPUSH
31405: CALL_OW 67
// p := p + 1 ;
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_VAR 0 3
31418: PUSH
31419: LD_INT 1
31421: PLUS
31422: ST_TO_ADDR
// for i in tmp do
31423: LD_ADDR_VAR 0 1
31427: PUSH
31428: LD_VAR 0 2
31432: PUSH
31433: FOR_IN
31434: IFFALSE 31465
// if GetLives ( i ) < 1000 then
31436: LD_VAR 0 1
31440: PPUSH
31441: CALL_OW 256
31445: PUSH
31446: LD_INT 1000
31448: LESS
31449: IFFALSE 31463
// SetLives ( i , 1000 ) ;
31451: LD_VAR 0 1
31455: PPUSH
31456: LD_INT 1000
31458: PPUSH
31459: CALL_OW 234
31463: GO 31433
31465: POP
31466: POP
// until p > 20 ;
31467: LD_VAR 0 3
31471: PUSH
31472: LD_INT 20
31474: GREATER
31475: IFFALSE 31402
// end ;
31477: PPOPN 3
31479: END
// every 0 0$1 trigger StreamModeActive and sTime do
31480: LD_EXP 51
31484: PUSH
31485: LD_EXP 102
31489: AND
31490: IFFALSE 31525
31492: GO 31494
31494: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31495: LD_INT 28
31497: PPUSH
31498: LD_OWVAR 2
31502: PPUSH
31503: LD_INT 2
31505: PPUSH
31506: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31510: LD_INT 30
31512: PPUSH
31513: LD_OWVAR 2
31517: PPUSH
31518: LD_INT 2
31520: PPUSH
31521: CALL_OW 322
// end ;
31525: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31526: LD_EXP 51
31530: PUSH
31531: LD_EXP 103
31535: AND
31536: IFFALSE 31657
31538: GO 31540
31540: DISABLE
31541: LD_INT 0
31543: PPUSH
31544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31545: LD_ADDR_VAR 0 2
31549: PUSH
31550: LD_INT 22
31552: PUSH
31553: LD_OWVAR 2
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 21
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 3
31574: PUSH
31575: LD_INT 23
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 69
31598: ST_TO_ADDR
// if not tmp then
31599: LD_VAR 0 2
31603: NOT
31604: IFFALSE 31608
// exit ;
31606: GO 31657
// for i in tmp do
31608: LD_ADDR_VAR 0 1
31612: PUSH
31613: LD_VAR 0 2
31617: PUSH
31618: FOR_IN
31619: IFFALSE 31655
// begin if Crawls ( i ) then
31621: LD_VAR 0 1
31625: PPUSH
31626: CALL_OW 318
31630: IFFALSE 31641
// ComWalk ( i ) ;
31632: LD_VAR 0 1
31636: PPUSH
31637: CALL_OW 138
// SetClass ( i , 2 ) ;
31641: LD_VAR 0 1
31645: PPUSH
31646: LD_INT 2
31648: PPUSH
31649: CALL_OW 336
// end ;
31653: GO 31618
31655: POP
31656: POP
// end ;
31657: PPOPN 2
31659: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31660: LD_EXP 51
31664: PUSH
31665: LD_EXP 104
31669: AND
31670: IFFALSE 31958
31672: GO 31674
31674: DISABLE
31675: LD_INT 0
31677: PPUSH
31678: PPUSH
31679: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31680: LD_OWVAR 2
31684: PPUSH
31685: LD_INT 9
31687: PPUSH
31688: LD_INT 1
31690: PPUSH
31691: LD_INT 1
31693: PPUSH
31694: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31698: LD_INT 9
31700: PPUSH
31701: LD_OWVAR 2
31705: PPUSH
31706: CALL_OW 343
// uc_side := 9 ;
31710: LD_ADDR_OWVAR 20
31714: PUSH
31715: LD_INT 9
31717: ST_TO_ADDR
// uc_nation := 2 ;
31718: LD_ADDR_OWVAR 21
31722: PUSH
31723: LD_INT 2
31725: ST_TO_ADDR
// hc_name := Dark Warrior ;
31726: LD_ADDR_OWVAR 26
31730: PUSH
31731: LD_STRING Dark Warrior
31733: ST_TO_ADDR
// hc_gallery :=  ;
31734: LD_ADDR_OWVAR 33
31738: PUSH
31739: LD_STRING 
31741: ST_TO_ADDR
// hc_noskilllimit := true ;
31742: LD_ADDR_OWVAR 76
31746: PUSH
31747: LD_INT 1
31749: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31750: LD_ADDR_OWVAR 31
31754: PUSH
31755: LD_INT 30
31757: PUSH
31758: LD_INT 30
31760: PUSH
31761: LD_INT 30
31763: PUSH
31764: LD_INT 30
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: ST_TO_ADDR
// un := CreateHuman ;
31773: LD_ADDR_VAR 0 3
31777: PUSH
31778: CALL_OW 44
31782: ST_TO_ADDR
// hc_noskilllimit := false ;
31783: LD_ADDR_OWVAR 76
31787: PUSH
31788: LD_INT 0
31790: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31791: LD_VAR 0 3
31795: PPUSH
31796: LD_INT 1
31798: PPUSH
31799: CALL_OW 51
// ToLua ( playRanger() ) ;
31803: LD_STRING playRanger()
31805: PPUSH
31806: CALL_OW 559
// p := 0 ;
31810: LD_ADDR_VAR 0 2
31814: PUSH
31815: LD_INT 0
31817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31818: LD_INT 35
31820: PPUSH
31821: CALL_OW 67
// p := p + 1 ;
31825: LD_ADDR_VAR 0 2
31829: PUSH
31830: LD_VAR 0 2
31834: PUSH
31835: LD_INT 1
31837: PLUS
31838: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31839: LD_VAR 0 3
31843: PPUSH
31844: CALL_OW 256
31848: PUSH
31849: LD_INT 1000
31851: LESS
31852: IFFALSE 31866
// SetLives ( un , 1000 ) ;
31854: LD_VAR 0 3
31858: PPUSH
31859: LD_INT 1000
31861: PPUSH
31862: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31866: LD_VAR 0 3
31870: PPUSH
31871: LD_INT 81
31873: PUSH
31874: LD_OWVAR 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 91
31885: PUSH
31886: LD_VAR 0 3
31890: PUSH
31891: LD_INT 30
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PPUSH
31903: CALL_OW 69
31907: PPUSH
31908: LD_VAR 0 3
31912: PPUSH
31913: CALL_OW 74
31917: PPUSH
31918: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31922: LD_VAR 0 2
31926: PUSH
31927: LD_INT 80
31929: GREATER
31930: PUSH
31931: LD_VAR 0 3
31935: PPUSH
31936: CALL_OW 301
31940: OR
31941: IFFALSE 31818
// if un then
31943: LD_VAR 0 3
31947: IFFALSE 31958
// RemoveUnit ( un ) ;
31949: LD_VAR 0 3
31953: PPUSH
31954: CALL_OW 64
// end ;
31958: PPOPN 3
31960: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31961: LD_EXP 105
31965: IFFALSE 32081
31967: GO 31969
31969: DISABLE
31970: LD_INT 0
31972: PPUSH
31973: PPUSH
31974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31975: LD_ADDR_VAR 0 2
31979: PUSH
31980: LD_INT 81
31982: PUSH
31983: LD_OWVAR 2
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PPUSH
32006: CALL_OW 69
32010: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32011: LD_STRING playComputer()
32013: PPUSH
32014: CALL_OW 559
// if not tmp then
32018: LD_VAR 0 2
32022: NOT
32023: IFFALSE 32027
// exit ;
32025: GO 32081
// for i in tmp do
32027: LD_ADDR_VAR 0 1
32031: PUSH
32032: LD_VAR 0 2
32036: PUSH
32037: FOR_IN
32038: IFFALSE 32079
// for j := 1 to 4 do
32040: LD_ADDR_VAR 0 3
32044: PUSH
32045: DOUBLE
32046: LD_INT 1
32048: DEC
32049: ST_TO_ADDR
32050: LD_INT 4
32052: PUSH
32053: FOR_TO
32054: IFFALSE 32075
// SetSkill ( i , j , 10 ) ;
32056: LD_VAR 0 1
32060: PPUSH
32061: LD_VAR 0 3
32065: PPUSH
32066: LD_INT 10
32068: PPUSH
32069: CALL_OW 237
32073: GO 32053
32075: POP
32076: POP
32077: GO 32037
32079: POP
32080: POP
// end ;
32081: PPOPN 3
32083: END
// every 0 0$1 trigger s30 do var i , tmp ;
32084: LD_EXP 106
32088: IFFALSE 32157
32090: GO 32092
32092: DISABLE
32093: LD_INT 0
32095: PPUSH
32096: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32097: LD_ADDR_VAR 0 2
32101: PUSH
32102: LD_INT 22
32104: PUSH
32105: LD_OWVAR 2
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PPUSH
32114: CALL_OW 69
32118: ST_TO_ADDR
// if not tmp then
32119: LD_VAR 0 2
32123: NOT
32124: IFFALSE 32128
// exit ;
32126: GO 32157
// for i in tmp do
32128: LD_ADDR_VAR 0 1
32132: PUSH
32133: LD_VAR 0 2
32137: PUSH
32138: FOR_IN
32139: IFFALSE 32155
// SetLives ( i , 300 ) ;
32141: LD_VAR 0 1
32145: PPUSH
32146: LD_INT 300
32148: PPUSH
32149: CALL_OW 234
32153: GO 32138
32155: POP
32156: POP
// end ;
32157: PPOPN 2
32159: END
// every 0 0$1 trigger s60 do var i , tmp ;
32160: LD_EXP 107
32164: IFFALSE 32233
32166: GO 32168
32168: DISABLE
32169: LD_INT 0
32171: PPUSH
32172: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32173: LD_ADDR_VAR 0 2
32177: PUSH
32178: LD_INT 22
32180: PUSH
32181: LD_OWVAR 2
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PPUSH
32190: CALL_OW 69
32194: ST_TO_ADDR
// if not tmp then
32195: LD_VAR 0 2
32199: NOT
32200: IFFALSE 32204
// exit ;
32202: GO 32233
// for i in tmp do
32204: LD_ADDR_VAR 0 1
32208: PUSH
32209: LD_VAR 0 2
32213: PUSH
32214: FOR_IN
32215: IFFALSE 32231
// SetLives ( i , 600 ) ;
32217: LD_VAR 0 1
32221: PPUSH
32222: LD_INT 600
32224: PPUSH
32225: CALL_OW 234
32229: GO 32214
32231: POP
32232: POP
// end ;
32233: PPOPN 2
32235: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32236: LD_INT 0
32238: PPUSH
// case cmd of 301 :
32239: LD_VAR 0 1
32243: PUSH
32244: LD_INT 301
32246: DOUBLE
32247: EQUAL
32248: IFTRUE 32252
32250: GO 32284
32252: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32253: LD_VAR 0 6
32257: PPUSH
32258: LD_VAR 0 7
32262: PPUSH
32263: LD_VAR 0 8
32267: PPUSH
32268: LD_VAR 0 4
32272: PPUSH
32273: LD_VAR 0 5
32277: PPUSH
32278: CALL 33485 0 5
32282: GO 32405
32284: LD_INT 302
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32329
32292: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32293: LD_VAR 0 6
32297: PPUSH
32298: LD_VAR 0 7
32302: PPUSH
32303: LD_VAR 0 8
32307: PPUSH
32308: LD_VAR 0 9
32312: PPUSH
32313: LD_VAR 0 4
32317: PPUSH
32318: LD_VAR 0 5
32322: PPUSH
32323: CALL 33576 0 6
32327: GO 32405
32329: LD_INT 303
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32337
32335: GO 32374
32337: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32338: LD_VAR 0 6
32342: PPUSH
32343: LD_VAR 0 7
32347: PPUSH
32348: LD_VAR 0 8
32352: PPUSH
32353: LD_VAR 0 9
32357: PPUSH
32358: LD_VAR 0 4
32362: PPUSH
32363: LD_VAR 0 5
32367: PPUSH
32368: CALL 32410 0 6
32372: GO 32405
32374: LD_INT 304
32376: DOUBLE
32377: EQUAL
32378: IFTRUE 32382
32380: GO 32404
32382: POP
// hHackTeleport ( unit , x , y ) ; end ;
32383: LD_VAR 0 2
32387: PPUSH
32388: LD_VAR 0 4
32392: PPUSH
32393: LD_VAR 0 5
32397: PPUSH
32398: CALL 34169 0 3
32402: GO 32405
32404: POP
// end ;
32405: LD_VAR 0 12
32409: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32410: LD_INT 0
32412: PPUSH
32413: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32414: LD_VAR 0 1
32418: PUSH
32419: LD_INT 1
32421: LESS
32422: PUSH
32423: LD_VAR 0 1
32427: PUSH
32428: LD_INT 3
32430: GREATER
32431: OR
32432: PUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: LD_VAR 0 6
32442: PPUSH
32443: CALL_OW 428
32447: OR
32448: IFFALSE 32452
// exit ;
32450: GO 33172
// uc_side := your_side ;
32452: LD_ADDR_OWVAR 20
32456: PUSH
32457: LD_OWVAR 2
32461: ST_TO_ADDR
// uc_nation := nation ;
32462: LD_ADDR_OWVAR 21
32466: PUSH
32467: LD_VAR 0 1
32471: ST_TO_ADDR
// bc_level = 1 ;
32472: LD_ADDR_OWVAR 43
32476: PUSH
32477: LD_INT 1
32479: ST_TO_ADDR
// case btype of 1 :
32480: LD_VAR 0 2
32484: PUSH
32485: LD_INT 1
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32493
32491: GO 32504
32493: POP
// bc_type := b_depot ; 2 :
32494: LD_ADDR_OWVAR 42
32498: PUSH
32499: LD_INT 0
32501: ST_TO_ADDR
32502: GO 33116
32504: LD_INT 2
32506: DOUBLE
32507: EQUAL
32508: IFTRUE 32512
32510: GO 32523
32512: POP
// bc_type := b_warehouse ; 3 :
32513: LD_ADDR_OWVAR 42
32517: PUSH
32518: LD_INT 1
32520: ST_TO_ADDR
32521: GO 33116
32523: LD_INT 3
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 32542
32531: POP
// bc_type := b_lab ; 4 .. 9 :
32532: LD_ADDR_OWVAR 42
32536: PUSH
32537: LD_INT 6
32539: ST_TO_ADDR
32540: GO 33116
32542: LD_INT 4
32544: DOUBLE
32545: GREATEREQUAL
32546: IFFALSE 32554
32548: LD_INT 9
32550: DOUBLE
32551: LESSEQUAL
32552: IFTRUE 32556
32554: GO 32608
32556: POP
// begin bc_type := b_lab_half ;
32557: LD_ADDR_OWVAR 42
32561: PUSH
32562: LD_INT 7
32564: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32565: LD_ADDR_OWVAR 44
32569: PUSH
32570: LD_INT 10
32572: PUSH
32573: LD_INT 11
32575: PUSH
32576: LD_INT 12
32578: PUSH
32579: LD_INT 15
32581: PUSH
32582: LD_INT 14
32584: PUSH
32585: LD_INT 13
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: PUSH
32596: LD_VAR 0 2
32600: PUSH
32601: LD_INT 3
32603: MINUS
32604: ARRAY
32605: ST_TO_ADDR
// end ; 10 .. 13 :
32606: GO 33116
32608: LD_INT 10
32610: DOUBLE
32611: GREATEREQUAL
32612: IFFALSE 32620
32614: LD_INT 13
32616: DOUBLE
32617: LESSEQUAL
32618: IFTRUE 32622
32620: GO 32699
32622: POP
// begin bc_type := b_lab_full ;
32623: LD_ADDR_OWVAR 42
32627: PUSH
32628: LD_INT 8
32630: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32631: LD_ADDR_OWVAR 44
32635: PUSH
32636: LD_INT 10
32638: PUSH
32639: LD_INT 12
32641: PUSH
32642: LD_INT 14
32644: PUSH
32645: LD_INT 13
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: PUSH
32654: LD_VAR 0 2
32658: PUSH
32659: LD_INT 9
32661: MINUS
32662: ARRAY
32663: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32664: LD_ADDR_OWVAR 45
32668: PUSH
32669: LD_INT 11
32671: PUSH
32672: LD_INT 15
32674: PUSH
32675: LD_INT 12
32677: PUSH
32678: LD_INT 15
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: PUSH
32687: LD_VAR 0 2
32691: PUSH
32692: LD_INT 9
32694: MINUS
32695: ARRAY
32696: ST_TO_ADDR
// end ; 14 :
32697: GO 33116
32699: LD_INT 14
32701: DOUBLE
32702: EQUAL
32703: IFTRUE 32707
32705: GO 32718
32707: POP
// bc_type := b_workshop ; 15 :
32708: LD_ADDR_OWVAR 42
32712: PUSH
32713: LD_INT 2
32715: ST_TO_ADDR
32716: GO 33116
32718: LD_INT 15
32720: DOUBLE
32721: EQUAL
32722: IFTRUE 32726
32724: GO 32737
32726: POP
// bc_type := b_factory ; 16 :
32727: LD_ADDR_OWVAR 42
32731: PUSH
32732: LD_INT 3
32734: ST_TO_ADDR
32735: GO 33116
32737: LD_INT 16
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32756
32745: POP
// bc_type := b_ext_gun ; 17 :
32746: LD_ADDR_OWVAR 42
32750: PUSH
32751: LD_INT 17
32753: ST_TO_ADDR
32754: GO 33116
32756: LD_INT 17
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32792
32764: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32765: LD_ADDR_OWVAR 42
32769: PUSH
32770: LD_INT 19
32772: PUSH
32773: LD_INT 23
32775: PUSH
32776: LD_INT 19
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: PUSH
32784: LD_VAR 0 1
32788: ARRAY
32789: ST_TO_ADDR
32790: GO 33116
32792: LD_INT 18
32794: DOUBLE
32795: EQUAL
32796: IFTRUE 32800
32798: GO 32811
32800: POP
// bc_type := b_ext_radar ; 19 :
32801: LD_ADDR_OWVAR 42
32805: PUSH
32806: LD_INT 20
32808: ST_TO_ADDR
32809: GO 33116
32811: LD_INT 19
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32819
32817: GO 32830
32819: POP
// bc_type := b_ext_radio ; 20 :
32820: LD_ADDR_OWVAR 42
32824: PUSH
32825: LD_INT 22
32827: ST_TO_ADDR
32828: GO 33116
32830: LD_INT 20
32832: DOUBLE
32833: EQUAL
32834: IFTRUE 32838
32836: GO 32849
32838: POP
// bc_type := b_ext_siberium ; 21 :
32839: LD_ADDR_OWVAR 42
32843: PUSH
32844: LD_INT 21
32846: ST_TO_ADDR
32847: GO 33116
32849: LD_INT 21
32851: DOUBLE
32852: EQUAL
32853: IFTRUE 32857
32855: GO 32868
32857: POP
// bc_type := b_ext_computer ; 22 :
32858: LD_ADDR_OWVAR 42
32862: PUSH
32863: LD_INT 24
32865: ST_TO_ADDR
32866: GO 33116
32868: LD_INT 22
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32876
32874: GO 32887
32876: POP
// bc_type := b_ext_track ; 23 :
32877: LD_ADDR_OWVAR 42
32881: PUSH
32882: LD_INT 16
32884: ST_TO_ADDR
32885: GO 33116
32887: LD_INT 23
32889: DOUBLE
32890: EQUAL
32891: IFTRUE 32895
32893: GO 32906
32895: POP
// bc_type := b_ext_laser ; 24 :
32896: LD_ADDR_OWVAR 42
32900: PUSH
32901: LD_INT 25
32903: ST_TO_ADDR
32904: GO 33116
32906: LD_INT 24
32908: DOUBLE
32909: EQUAL
32910: IFTRUE 32914
32912: GO 32925
32914: POP
// bc_type := b_control_tower ; 25 :
32915: LD_ADDR_OWVAR 42
32919: PUSH
32920: LD_INT 36
32922: ST_TO_ADDR
32923: GO 33116
32925: LD_INT 25
32927: DOUBLE
32928: EQUAL
32929: IFTRUE 32933
32931: GO 32944
32933: POP
// bc_type := b_breastwork ; 26 :
32934: LD_ADDR_OWVAR 42
32938: PUSH
32939: LD_INT 31
32941: ST_TO_ADDR
32942: GO 33116
32944: LD_INT 26
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32952
32950: GO 32963
32952: POP
// bc_type := b_bunker ; 27 :
32953: LD_ADDR_OWVAR 42
32957: PUSH
32958: LD_INT 32
32960: ST_TO_ADDR
32961: GO 33116
32963: LD_INT 27
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32982
32971: POP
// bc_type := b_turret ; 28 :
32972: LD_ADDR_OWVAR 42
32976: PUSH
32977: LD_INT 33
32979: ST_TO_ADDR
32980: GO 33116
32982: LD_INT 28
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33001
32990: POP
// bc_type := b_armoury ; 29 :
32991: LD_ADDR_OWVAR 42
32995: PUSH
32996: LD_INT 4
32998: ST_TO_ADDR
32999: GO 33116
33001: LD_INT 29
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33020
33009: POP
// bc_type := b_barracks ; 30 :
33010: LD_ADDR_OWVAR 42
33014: PUSH
33015: LD_INT 5
33017: ST_TO_ADDR
33018: GO 33116
33020: LD_INT 30
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33039
33028: POP
// bc_type := b_solar_power ; 31 :
33029: LD_ADDR_OWVAR 42
33033: PUSH
33034: LD_INT 27
33036: ST_TO_ADDR
33037: GO 33116
33039: LD_INT 31
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33047
33045: GO 33058
33047: POP
// bc_type := b_oil_power ; 32 :
33048: LD_ADDR_OWVAR 42
33052: PUSH
33053: LD_INT 26
33055: ST_TO_ADDR
33056: GO 33116
33058: LD_INT 32
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33077
33066: POP
// bc_type := b_siberite_power ; 33 :
33067: LD_ADDR_OWVAR 42
33071: PUSH
33072: LD_INT 28
33074: ST_TO_ADDR
33075: GO 33116
33077: LD_INT 33
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33096
33085: POP
// bc_type := b_oil_mine ; 34 :
33086: LD_ADDR_OWVAR 42
33090: PUSH
33091: LD_INT 29
33093: ST_TO_ADDR
33094: GO 33116
33096: LD_INT 34
33098: DOUBLE
33099: EQUAL
33100: IFTRUE 33104
33102: GO 33115
33104: POP
// bc_type := b_siberite_mine ; end ;
33105: LD_ADDR_OWVAR 42
33109: PUSH
33110: LD_INT 30
33112: ST_TO_ADDR
33113: GO 33116
33115: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33116: LD_ADDR_VAR 0 8
33120: PUSH
33121: LD_VAR 0 5
33125: PPUSH
33126: LD_VAR 0 6
33130: PPUSH
33131: LD_VAR 0 3
33135: PPUSH
33136: CALL_OW 47
33140: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33141: LD_OWVAR 42
33145: PUSH
33146: LD_INT 32
33148: PUSH
33149: LD_INT 33
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: IN
33156: IFFALSE 33172
// PlaceWeaponTurret ( b , weapon ) ;
33158: LD_VAR 0 8
33162: PPUSH
33163: LD_VAR 0 4
33167: PPUSH
33168: CALL_OW 431
// end ;
33172: LD_VAR 0 7
33176: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33177: LD_INT 0
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33183: LD_ADDR_VAR 0 4
33187: PUSH
33188: LD_INT 22
33190: PUSH
33191: LD_OWVAR 2
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 30
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 30
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PPUSH
33232: CALL_OW 69
33236: ST_TO_ADDR
// if not tmp then
33237: LD_VAR 0 4
33241: NOT
33242: IFFALSE 33246
// exit ;
33244: GO 33305
// for i in tmp do
33246: LD_ADDR_VAR 0 2
33250: PUSH
33251: LD_VAR 0 4
33255: PUSH
33256: FOR_IN
33257: IFFALSE 33303
// for j = 1 to 3 do
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: DOUBLE
33265: LD_INT 1
33267: DEC
33268: ST_TO_ADDR
33269: LD_INT 3
33271: PUSH
33272: FOR_TO
33273: IFFALSE 33299
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33275: LD_VAR 0 2
33279: PPUSH
33280: CALL_OW 274
33284: PPUSH
33285: LD_VAR 0 3
33289: PPUSH
33290: LD_INT 99999
33292: PPUSH
33293: CALL_OW 277
33297: GO 33272
33299: POP
33300: POP
33301: GO 33256
33303: POP
33304: POP
// end ;
33305: LD_VAR 0 1
33309: RET
// export function hHackSetLevel10 ; var i , j ; begin
33310: LD_INT 0
33312: PPUSH
33313: PPUSH
33314: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33315: LD_ADDR_VAR 0 2
33319: PUSH
33320: LD_INT 21
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PPUSH
33330: CALL_OW 69
33334: PUSH
33335: FOR_IN
33336: IFFALSE 33388
// if IsSelected ( i ) then
33338: LD_VAR 0 2
33342: PPUSH
33343: CALL_OW 306
33347: IFFALSE 33386
// begin for j := 1 to 4 do
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: DOUBLE
33355: LD_INT 1
33357: DEC
33358: ST_TO_ADDR
33359: LD_INT 4
33361: PUSH
33362: FOR_TO
33363: IFFALSE 33384
// SetSkill ( i , j , 10 ) ;
33365: LD_VAR 0 2
33369: PPUSH
33370: LD_VAR 0 3
33374: PPUSH
33375: LD_INT 10
33377: PPUSH
33378: CALL_OW 237
33382: GO 33362
33384: POP
33385: POP
// end ;
33386: GO 33335
33388: POP
33389: POP
// end ;
33390: LD_VAR 0 1
33394: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33395: LD_INT 0
33397: PPUSH
33398: PPUSH
33399: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_INT 22
33407: PUSH
33408: LD_OWVAR 2
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 21
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PPUSH
33431: CALL_OW 69
33435: PUSH
33436: FOR_IN
33437: IFFALSE 33478
// begin for j := 1 to 4 do
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: DOUBLE
33445: LD_INT 1
33447: DEC
33448: ST_TO_ADDR
33449: LD_INT 4
33451: PUSH
33452: FOR_TO
33453: IFFALSE 33474
// SetSkill ( i , j , 10 ) ;
33455: LD_VAR 0 2
33459: PPUSH
33460: LD_VAR 0 3
33464: PPUSH
33465: LD_INT 10
33467: PPUSH
33468: CALL_OW 237
33472: GO 33452
33474: POP
33475: POP
// end ;
33476: GO 33436
33478: POP
33479: POP
// end ;
33480: LD_VAR 0 1
33484: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33485: LD_INT 0
33487: PPUSH
// uc_side := your_side ;
33488: LD_ADDR_OWVAR 20
33492: PUSH
33493: LD_OWVAR 2
33497: ST_TO_ADDR
// uc_nation := nation ;
33498: LD_ADDR_OWVAR 21
33502: PUSH
33503: LD_VAR 0 1
33507: ST_TO_ADDR
// InitHc ;
33508: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33512: LD_INT 0
33514: PPUSH
33515: LD_VAR 0 2
33519: PPUSH
33520: LD_VAR 0 3
33524: PPUSH
33525: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33529: LD_VAR 0 4
33533: PPUSH
33534: LD_VAR 0 5
33538: PPUSH
33539: CALL_OW 428
33543: PUSH
33544: LD_INT 0
33546: EQUAL
33547: IFFALSE 33571
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33549: CALL_OW 44
33553: PPUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: LD_VAR 0 5
33563: PPUSH
33564: LD_INT 1
33566: PPUSH
33567: CALL_OW 48
// end ;
33571: LD_VAR 0 6
33575: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33576: LD_INT 0
33578: PPUSH
33579: PPUSH
// uc_side := your_side ;
33580: LD_ADDR_OWVAR 20
33584: PUSH
33585: LD_OWVAR 2
33589: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33590: LD_VAR 0 1
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 3
33603: PUSH
33604: LD_INT 4
33606: PUSH
33607: LD_INT 5
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: IN
33617: IFFALSE 33629
// uc_nation := nation_american else
33619: LD_ADDR_OWVAR 21
33623: PUSH
33624: LD_INT 1
33626: ST_TO_ADDR
33627: GO 33672
// if chassis in [ 11 , 12 , 13 , 14 ] then
33629: LD_VAR 0 1
33633: PUSH
33634: LD_INT 11
33636: PUSH
33637: LD_INT 12
33639: PUSH
33640: LD_INT 13
33642: PUSH
33643: LD_INT 14
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: IN
33652: IFFALSE 33664
// uc_nation := nation_arabian else
33654: LD_ADDR_OWVAR 21
33658: PUSH
33659: LD_INT 2
33661: ST_TO_ADDR
33662: GO 33672
// uc_nation := nation_russian ;
33664: LD_ADDR_OWVAR 21
33668: PUSH
33669: LD_INT 3
33671: ST_TO_ADDR
// vc_chassis := chassis ;
33672: LD_ADDR_OWVAR 37
33676: PUSH
33677: LD_VAR 0 1
33681: ST_TO_ADDR
// vc_engine := engine ;
33682: LD_ADDR_OWVAR 39
33686: PUSH
33687: LD_VAR 0 2
33691: ST_TO_ADDR
// vc_control := control ;
33692: LD_ADDR_OWVAR 38
33696: PUSH
33697: LD_VAR 0 3
33701: ST_TO_ADDR
// vc_weapon := weapon ;
33702: LD_ADDR_OWVAR 40
33706: PUSH
33707: LD_VAR 0 4
33711: ST_TO_ADDR
// un := CreateVehicle ;
33712: LD_ADDR_VAR 0 8
33716: PUSH
33717: CALL_OW 45
33721: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33722: LD_VAR 0 8
33726: PPUSH
33727: LD_INT 0
33729: PPUSH
33730: LD_INT 5
33732: PPUSH
33733: CALL_OW 12
33737: PPUSH
33738: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33742: LD_VAR 0 8
33746: PPUSH
33747: LD_VAR 0 5
33751: PPUSH
33752: LD_VAR 0 6
33756: PPUSH
33757: LD_INT 1
33759: PPUSH
33760: CALL_OW 48
// end ;
33764: LD_VAR 0 7
33768: RET
// export hInvincible ; every 1 do
33769: GO 33771
33771: DISABLE
// hInvincible := [ ] ;
33772: LD_ADDR_EXP 108
33776: PUSH
33777: EMPTY
33778: ST_TO_ADDR
33779: END
// every 10 do var i ;
33780: GO 33782
33782: DISABLE
33783: LD_INT 0
33785: PPUSH
// begin enable ;
33786: ENABLE
// if not hInvincible then
33787: LD_EXP 108
33791: NOT
33792: IFFALSE 33796
// exit ;
33794: GO 33840
// for i in hInvincible do
33796: LD_ADDR_VAR 0 1
33800: PUSH
33801: LD_EXP 108
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33838
// if GetLives ( i ) < 1000 then
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 256
33818: PUSH
33819: LD_INT 1000
33821: LESS
33822: IFFALSE 33836
// SetLives ( i , 1000 ) ;
33824: LD_VAR 0 1
33828: PPUSH
33829: LD_INT 1000
33831: PPUSH
33832: CALL_OW 234
33836: GO 33806
33838: POP
33839: POP
// end ;
33840: PPOPN 1
33842: END
// export function hHackInvincible ; var i ; begin
33843: LD_INT 0
33845: PPUSH
33846: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33847: LD_ADDR_VAR 0 2
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 21
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 21
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: PPUSH
33880: CALL_OW 69
33884: PUSH
33885: FOR_IN
33886: IFFALSE 33947
// if IsSelected ( i ) then
33888: LD_VAR 0 2
33892: PPUSH
33893: CALL_OW 306
33897: IFFALSE 33945
// begin if i in hInvincible then
33899: LD_VAR 0 2
33903: PUSH
33904: LD_EXP 108
33908: IN
33909: IFFALSE 33929
// hInvincible := hInvincible diff i else
33911: LD_ADDR_EXP 108
33915: PUSH
33916: LD_EXP 108
33920: PUSH
33921: LD_VAR 0 2
33925: DIFF
33926: ST_TO_ADDR
33927: GO 33945
// hInvincible := hInvincible union i ;
33929: LD_ADDR_EXP 108
33933: PUSH
33934: LD_EXP 108
33938: PUSH
33939: LD_VAR 0 2
33943: UNION
33944: ST_TO_ADDR
// end ;
33945: GO 33885
33947: POP
33948: POP
// end ;
33949: LD_VAR 0 1
33953: RET
// export function hHackInvisible ; var i , j ; begin
33954: LD_INT 0
33956: PPUSH
33957: PPUSH
33958: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33959: LD_ADDR_VAR 0 2
33963: PUSH
33964: LD_INT 21
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PPUSH
33974: CALL_OW 69
33978: PUSH
33979: FOR_IN
33980: IFFALSE 34004
// if IsSelected ( i ) then
33982: LD_VAR 0 2
33986: PPUSH
33987: CALL_OW 306
33991: IFFALSE 34002
// ComForceInvisible ( i ) ;
33993: LD_VAR 0 2
33997: PPUSH
33998: CALL_OW 496
34002: GO 33979
34004: POP
34005: POP
// end ;
34006: LD_VAR 0 1
34010: RET
// export function hHackChangeYourSide ; begin
34011: LD_INT 0
34013: PPUSH
// if your_side = 8 then
34014: LD_OWVAR 2
34018: PUSH
34019: LD_INT 8
34021: EQUAL
34022: IFFALSE 34034
// your_side := 0 else
34024: LD_ADDR_OWVAR 2
34028: PUSH
34029: LD_INT 0
34031: ST_TO_ADDR
34032: GO 34048
// your_side := your_side + 1 ;
34034: LD_ADDR_OWVAR 2
34038: PUSH
34039: LD_OWVAR 2
34043: PUSH
34044: LD_INT 1
34046: PLUS
34047: ST_TO_ADDR
// end ;
34048: LD_VAR 0 1
34052: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34053: LD_INT 0
34055: PPUSH
34056: PPUSH
34057: PPUSH
// for i in all_units do
34058: LD_ADDR_VAR 0 2
34062: PUSH
34063: LD_OWVAR 3
34067: PUSH
34068: FOR_IN
34069: IFFALSE 34147
// if IsSelected ( i ) then
34071: LD_VAR 0 2
34075: PPUSH
34076: CALL_OW 306
34080: IFFALSE 34145
// begin j := GetSide ( i ) ;
34082: LD_ADDR_VAR 0 3
34086: PUSH
34087: LD_VAR 0 2
34091: PPUSH
34092: CALL_OW 255
34096: ST_TO_ADDR
// if j = 8 then
34097: LD_VAR 0 3
34101: PUSH
34102: LD_INT 8
34104: EQUAL
34105: IFFALSE 34117
// j := 0 else
34107: LD_ADDR_VAR 0 3
34111: PUSH
34112: LD_INT 0
34114: ST_TO_ADDR
34115: GO 34131
// j := j + 1 ;
34117: LD_ADDR_VAR 0 3
34121: PUSH
34122: LD_VAR 0 3
34126: PUSH
34127: LD_INT 1
34129: PLUS
34130: ST_TO_ADDR
// SetSide ( i , j ) ;
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_VAR 0 3
34140: PPUSH
34141: CALL_OW 235
// end ;
34145: GO 34068
34147: POP
34148: POP
// end ;
34149: LD_VAR 0 1
34153: RET
// export function hHackFog ; begin
34154: LD_INT 0
34156: PPUSH
// FogOff ( true ) ;
34157: LD_INT 1
34159: PPUSH
34160: CALL_OW 344
// end ;
34164: LD_VAR 0 1
34168: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34169: LD_INT 0
34171: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34172: LD_VAR 0 1
34176: PPUSH
34177: LD_VAR 0 2
34181: PPUSH
34182: LD_VAR 0 3
34186: PPUSH
34187: LD_INT 1
34189: PPUSH
34190: LD_INT 1
34192: PPUSH
34193: CALL_OW 483
// CenterOnXY ( x , y ) ;
34197: LD_VAR 0 2
34201: PPUSH
34202: LD_VAR 0 3
34206: PPUSH
34207: CALL_OW 84
// end ;
34211: LD_VAR 0 4
34215: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34216: LD_INT 0
34218: PPUSH
34219: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34220: LD_VAR 0 1
34224: NOT
34225: PUSH
34226: LD_VAR 0 2
34230: PPUSH
34231: LD_VAR 0 3
34235: PPUSH
34236: CALL_OW 488
34240: NOT
34241: OR
34242: PUSH
34243: LD_VAR 0 1
34247: PPUSH
34248: CALL_OW 266
34252: PUSH
34253: LD_INT 3
34255: NONEQUAL
34256: PUSH
34257: LD_VAR 0 1
34261: PPUSH
34262: CALL_OW 247
34266: PUSH
34267: LD_INT 1
34269: EQUAL
34270: NOT
34271: AND
34272: OR
34273: IFFALSE 34277
// exit ;
34275: GO 34426
// if GetType ( factory ) = unit_human then
34277: LD_VAR 0 1
34281: PPUSH
34282: CALL_OW 247
34286: PUSH
34287: LD_INT 1
34289: EQUAL
34290: IFFALSE 34307
// factory := IsInUnit ( factory ) ;
34292: LD_ADDR_VAR 0 1
34296: PUSH
34297: LD_VAR 0 1
34301: PPUSH
34302: CALL_OW 310
34306: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34307: LD_VAR 0 1
34311: PPUSH
34312: CALL_OW 266
34316: PUSH
34317: LD_INT 3
34319: NONEQUAL
34320: IFFALSE 34324
// exit ;
34322: GO 34426
// if HexInfo ( x , y ) = factory then
34324: LD_VAR 0 2
34328: PPUSH
34329: LD_VAR 0 3
34333: PPUSH
34334: CALL_OW 428
34338: PUSH
34339: LD_VAR 0 1
34343: EQUAL
34344: IFFALSE 34371
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34346: LD_ADDR_EXP 109
34350: PUSH
34351: LD_EXP 109
34355: PPUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: LD_INT 0
34363: PPUSH
34364: CALL_OW 1
34368: ST_TO_ADDR
34369: GO 34422
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34371: LD_ADDR_EXP 109
34375: PUSH
34376: LD_EXP 109
34380: PPUSH
34381: LD_VAR 0 1
34385: PPUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: CALL_OW 255
34395: PUSH
34396: LD_VAR 0 1
34400: PUSH
34401: LD_VAR 0 2
34405: PUSH
34406: LD_VAR 0 3
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: PPUSH
34417: CALL_OW 1
34421: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34422: CALL 34431 0 0
// end ;
34426: LD_VAR 0 4
34430: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34431: LD_INT 0
34433: PPUSH
34434: PPUSH
34435: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34436: LD_STRING resetFactoryWaypoint();
34438: PPUSH
34439: CALL_OW 559
// if factoryWaypoints then
34443: LD_EXP 109
34447: IFFALSE 34573
// begin list := PrepareArray ( factoryWaypoints ) ;
34449: LD_ADDR_VAR 0 3
34453: PUSH
34454: LD_EXP 109
34458: PPUSH
34459: CALL 81042 0 1
34463: ST_TO_ADDR
// for i := 1 to list do
34464: LD_ADDR_VAR 0 2
34468: PUSH
34469: DOUBLE
34470: LD_INT 1
34472: DEC
34473: ST_TO_ADDR
34474: LD_VAR 0 3
34478: PUSH
34479: FOR_TO
34480: IFFALSE 34571
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34482: LD_STRING setFactoryWaypointXY(
34484: PUSH
34485: LD_VAR 0 3
34489: PUSH
34490: LD_VAR 0 2
34494: ARRAY
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: STR
34500: PUSH
34501: LD_STRING ,
34503: STR
34504: PUSH
34505: LD_VAR 0 3
34509: PUSH
34510: LD_VAR 0 2
34514: ARRAY
34515: PUSH
34516: LD_INT 2
34518: ARRAY
34519: STR
34520: PUSH
34521: LD_STRING ,
34523: STR
34524: PUSH
34525: LD_VAR 0 3
34529: PUSH
34530: LD_VAR 0 2
34534: ARRAY
34535: PUSH
34536: LD_INT 3
34538: ARRAY
34539: STR
34540: PUSH
34541: LD_STRING ,
34543: STR
34544: PUSH
34545: LD_VAR 0 3
34549: PUSH
34550: LD_VAR 0 2
34554: ARRAY
34555: PUSH
34556: LD_INT 4
34558: ARRAY
34559: STR
34560: PUSH
34561: LD_STRING )
34563: STR
34564: PPUSH
34565: CALL_OW 559
34569: GO 34479
34571: POP
34572: POP
// end ; end ;
34573: LD_VAR 0 1
34577: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34578: LD_INT 0
34580: PPUSH
// if HexInfo ( x , y ) = warehouse then
34581: LD_VAR 0 2
34585: PPUSH
34586: LD_VAR 0 3
34590: PPUSH
34591: CALL_OW 428
34595: PUSH
34596: LD_VAR 0 1
34600: EQUAL
34601: IFFALSE 34628
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34603: LD_ADDR_EXP 110
34607: PUSH
34608: LD_EXP 110
34612: PPUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: LD_INT 0
34620: PPUSH
34621: CALL_OW 1
34625: ST_TO_ADDR
34626: GO 34679
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34628: LD_ADDR_EXP 110
34632: PUSH
34633: LD_EXP 110
34637: PPUSH
34638: LD_VAR 0 1
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 255
34652: PUSH
34653: LD_VAR 0 1
34657: PUSH
34658: LD_VAR 0 2
34662: PUSH
34663: LD_VAR 0 3
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: PPUSH
34674: CALL_OW 1
34678: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34679: CALL 34688 0 0
// end ;
34683: LD_VAR 0 4
34687: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34688: LD_INT 0
34690: PPUSH
34691: PPUSH
34692: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34693: LD_STRING resetWarehouseGatheringPoints();
34695: PPUSH
34696: CALL_OW 559
// if warehouseGatheringPoints then
34700: LD_EXP 110
34704: IFFALSE 34830
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34706: LD_ADDR_VAR 0 3
34710: PUSH
34711: LD_EXP 110
34715: PPUSH
34716: CALL 81042 0 1
34720: ST_TO_ADDR
// for i := 1 to list do
34721: LD_ADDR_VAR 0 2
34725: PUSH
34726: DOUBLE
34727: LD_INT 1
34729: DEC
34730: ST_TO_ADDR
34731: LD_VAR 0 3
34735: PUSH
34736: FOR_TO
34737: IFFALSE 34828
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34739: LD_STRING setWarehouseGatheringPointXY(
34741: PUSH
34742: LD_VAR 0 3
34746: PUSH
34747: LD_VAR 0 2
34751: ARRAY
34752: PUSH
34753: LD_INT 1
34755: ARRAY
34756: STR
34757: PUSH
34758: LD_STRING ,
34760: STR
34761: PUSH
34762: LD_VAR 0 3
34766: PUSH
34767: LD_VAR 0 2
34771: ARRAY
34772: PUSH
34773: LD_INT 2
34775: ARRAY
34776: STR
34777: PUSH
34778: LD_STRING ,
34780: STR
34781: PUSH
34782: LD_VAR 0 3
34786: PUSH
34787: LD_VAR 0 2
34791: ARRAY
34792: PUSH
34793: LD_INT 3
34795: ARRAY
34796: STR
34797: PUSH
34798: LD_STRING ,
34800: STR
34801: PUSH
34802: LD_VAR 0 3
34806: PUSH
34807: LD_VAR 0 2
34811: ARRAY
34812: PUSH
34813: LD_INT 4
34815: ARRAY
34816: STR
34817: PUSH
34818: LD_STRING )
34820: STR
34821: PPUSH
34822: CALL_OW 559
34826: GO 34736
34828: POP
34829: POP
// end ; end ;
34830: LD_VAR 0 1
34834: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34835: LD_EXP 110
34839: IFFALSE 35524
34841: GO 34843
34843: DISABLE
34844: LD_INT 0
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
34850: PPUSH
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
// begin enable ;
34855: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_EXP 110
34865: PPUSH
34866: CALL 81042 0 1
34870: ST_TO_ADDR
// if not list then
34871: LD_VAR 0 3
34875: NOT
34876: IFFALSE 34880
// exit ;
34878: GO 35524
// for i := 1 to list do
34880: LD_ADDR_VAR 0 1
34884: PUSH
34885: DOUBLE
34886: LD_INT 1
34888: DEC
34889: ST_TO_ADDR
34890: LD_VAR 0 3
34894: PUSH
34895: FOR_TO
34896: IFFALSE 35522
// begin depot := list [ i ] [ 2 ] ;
34898: LD_ADDR_VAR 0 8
34902: PUSH
34903: LD_VAR 0 3
34907: PUSH
34908: LD_VAR 0 1
34912: ARRAY
34913: PUSH
34914: LD_INT 2
34916: ARRAY
34917: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34918: LD_ADDR_VAR 0 5
34922: PUSH
34923: LD_VAR 0 3
34927: PUSH
34928: LD_VAR 0 1
34932: ARRAY
34933: PUSH
34934: LD_INT 1
34936: ARRAY
34937: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34938: LD_VAR 0 8
34942: PPUSH
34943: CALL_OW 301
34947: PUSH
34948: LD_VAR 0 5
34952: PUSH
34953: LD_VAR 0 8
34957: PPUSH
34958: CALL_OW 255
34962: NONEQUAL
34963: OR
34964: IFFALSE 34993
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34966: LD_ADDR_EXP 110
34970: PUSH
34971: LD_EXP 110
34975: PPUSH
34976: LD_VAR 0 8
34980: PPUSH
34981: LD_INT 0
34983: PPUSH
34984: CALL_OW 1
34988: ST_TO_ADDR
// exit ;
34989: POP
34990: POP
34991: GO 35524
// end ; x := list [ i ] [ 3 ] ;
34993: LD_ADDR_VAR 0 6
34997: PUSH
34998: LD_VAR 0 3
35002: PUSH
35003: LD_VAR 0 1
35007: ARRAY
35008: PUSH
35009: LD_INT 3
35011: ARRAY
35012: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35013: LD_ADDR_VAR 0 7
35017: PUSH
35018: LD_VAR 0 3
35022: PUSH
35023: LD_VAR 0 1
35027: ARRAY
35028: PUSH
35029: LD_INT 4
35031: ARRAY
35032: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35033: LD_ADDR_VAR 0 9
35037: PUSH
35038: LD_VAR 0 6
35042: PPUSH
35043: LD_VAR 0 7
35047: PPUSH
35048: LD_INT 16
35050: PPUSH
35051: CALL 79630 0 3
35055: ST_TO_ADDR
// if not cratesNearbyPoint then
35056: LD_VAR 0 9
35060: NOT
35061: IFFALSE 35067
// exit ;
35063: POP
35064: POP
35065: GO 35524
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35067: LD_ADDR_VAR 0 4
35071: PUSH
35072: LD_INT 22
35074: PUSH
35075: LD_VAR 0 5
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: LD_INT 60
35089: PUSH
35090: EMPTY
35091: LIST
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 91
35099: PUSH
35100: LD_VAR 0 8
35104: PUSH
35105: LD_INT 6
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: LD_INT 25
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 25
35128: PUSH
35129: LD_INT 16
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: PPUSH
35147: CALL_OW 69
35151: PUSH
35152: LD_VAR 0 8
35156: PPUSH
35157: CALL_OW 313
35161: PPUSH
35162: LD_INT 3
35164: PUSH
35165: LD_INT 60
35167: PUSH
35168: EMPTY
35169: LIST
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: LD_INT 25
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 25
35190: PUSH
35191: LD_INT 16
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PPUSH
35207: CALL_OW 72
35211: UNION
35212: ST_TO_ADDR
// if tmp then
35213: LD_VAR 0 4
35217: IFFALSE 35297
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35219: LD_ADDR_VAR 0 4
35223: PUSH
35224: LD_VAR 0 4
35228: PPUSH
35229: LD_INT 3
35231: PPUSH
35232: CALL 77599 0 2
35236: ST_TO_ADDR
// for j in tmp do
35237: LD_ADDR_VAR 0 2
35241: PUSH
35242: LD_VAR 0 4
35246: PUSH
35247: FOR_IN
35248: IFFALSE 35291
// begin if IsInUnit ( j ) then
35250: LD_VAR 0 2
35254: PPUSH
35255: CALL_OW 310
35259: IFFALSE 35270
// ComExit ( j ) ;
35261: LD_VAR 0 2
35265: PPUSH
35266: CALL 77682 0 1
// AddComCollect ( j , x , y ) ;
35270: LD_VAR 0 2
35274: PPUSH
35275: LD_VAR 0 6
35279: PPUSH
35280: LD_VAR 0 7
35284: PPUSH
35285: CALL_OW 177
// end ;
35289: GO 35247
35291: POP
35292: POP
// exit ;
35293: POP
35294: POP
35295: GO 35524
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: LD_INT 22
35304: PUSH
35305: LD_VAR 0 5
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 91
35316: PUSH
35317: LD_VAR 0 8
35321: PUSH
35322: LD_INT 8
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: LD_INT 34
35335: PUSH
35336: LD_INT 12
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 34
35345: PUSH
35346: LD_INT 51
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 34
35355: PUSH
35356: LD_INT 32
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 34
35365: PUSH
35366: LD_INT 89
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: PPUSH
35385: CALL_OW 69
35389: ST_TO_ADDR
// if tmp then
35390: LD_VAR 0 4
35394: IFFALSE 35520
// begin for j in tmp do
35396: LD_ADDR_VAR 0 2
35400: PUSH
35401: LD_VAR 0 4
35405: PUSH
35406: FOR_IN
35407: IFFALSE 35518
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35409: LD_VAR 0 2
35413: PPUSH
35414: CALL_OW 262
35418: PUSH
35419: LD_INT 3
35421: EQUAL
35422: PUSH
35423: LD_VAR 0 2
35427: PPUSH
35428: CALL_OW 261
35432: PUSH
35433: LD_INT 20
35435: GREATER
35436: OR
35437: PUSH
35438: LD_VAR 0 2
35442: PPUSH
35443: CALL_OW 314
35447: NOT
35448: AND
35449: PUSH
35450: LD_VAR 0 2
35454: PPUSH
35455: CALL_OW 263
35459: PUSH
35460: LD_INT 1
35462: NONEQUAL
35463: PUSH
35464: LD_VAR 0 2
35468: PPUSH
35469: CALL_OW 311
35473: OR
35474: AND
35475: IFFALSE 35516
// begin ComCollect ( j , x , y ) ;
35477: LD_VAR 0 2
35481: PPUSH
35482: LD_VAR 0 6
35486: PPUSH
35487: LD_VAR 0 7
35491: PPUSH
35492: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35496: LD_VAR 0 2
35500: PPUSH
35501: LD_VAR 0 8
35505: PPUSH
35506: CALL_OW 172
// exit ;
35510: POP
35511: POP
35512: POP
35513: POP
35514: GO 35524
// end ;
35516: GO 35406
35518: POP
35519: POP
// end ; end ;
35520: GO 34895
35522: POP
35523: POP
// end ; end_of_file
35524: PPOPN 9
35526: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35527: LD_INT 0
35529: PPUSH
35530: PPUSH
35531: PPUSH
35532: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35533: LD_VAR 0 1
35537: PPUSH
35538: CALL_OW 264
35542: PUSH
35543: LD_INT 91
35545: EQUAL
35546: IFFALSE 35618
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35548: LD_INT 68
35550: PPUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 255
35560: PPUSH
35561: CALL_OW 321
35565: PUSH
35566: LD_INT 2
35568: EQUAL
35569: IFFALSE 35581
// eff := 70 else
35571: LD_ADDR_VAR 0 4
35575: PUSH
35576: LD_INT 70
35578: ST_TO_ADDR
35579: GO 35589
// eff := 30 ;
35581: LD_ADDR_VAR 0 4
35585: PUSH
35586: LD_INT 30
35588: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35589: LD_VAR 0 1
35593: PPUSH
35594: CALL_OW 250
35598: PPUSH
35599: LD_VAR 0 1
35603: PPUSH
35604: CALL_OW 251
35608: PPUSH
35609: LD_VAR 0 4
35613: PPUSH
35614: CALL_OW 495
// end ; end ;
35618: LD_VAR 0 2
35622: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35623: LD_INT 0
35625: PPUSH
// end ;
35626: LD_VAR 0 4
35630: RET
// export function SOS_Command ( cmd ) ; begin
35631: LD_INT 0
35633: PPUSH
// end ;
35634: LD_VAR 0 2
35638: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35639: LD_INT 0
35641: PPUSH
// end ;
35642: LD_VAR 0 6
35646: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35647: LD_INT 0
35649: PPUSH
35650: PPUSH
// if not vehicle or not factory then
35651: LD_VAR 0 1
35655: NOT
35656: PUSH
35657: LD_VAR 0 2
35661: NOT
35662: OR
35663: IFFALSE 35667
// exit ;
35665: GO 35898
// if factoryWaypoints >= factory then
35667: LD_EXP 109
35671: PUSH
35672: LD_VAR 0 2
35676: GREATEREQUAL
35677: IFFALSE 35898
// if factoryWaypoints [ factory ] then
35679: LD_EXP 109
35683: PUSH
35684: LD_VAR 0 2
35688: ARRAY
35689: IFFALSE 35898
// begin if GetControl ( vehicle ) = control_manual then
35691: LD_VAR 0 1
35695: PPUSH
35696: CALL_OW 263
35700: PUSH
35701: LD_INT 1
35703: EQUAL
35704: IFFALSE 35785
// begin driver := IsDrivenBy ( vehicle ) ;
35706: LD_ADDR_VAR 0 4
35710: PUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 311
35720: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35721: LD_VAR 0 4
35725: PPUSH
35726: LD_EXP 109
35730: PUSH
35731: LD_VAR 0 2
35735: ARRAY
35736: PUSH
35737: LD_INT 3
35739: ARRAY
35740: PPUSH
35741: LD_EXP 109
35745: PUSH
35746: LD_VAR 0 2
35750: ARRAY
35751: PUSH
35752: LD_INT 4
35754: ARRAY
35755: PPUSH
35756: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35760: LD_VAR 0 4
35764: PPUSH
35765: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35769: LD_VAR 0 4
35773: PPUSH
35774: LD_VAR 0 2
35778: PPUSH
35779: CALL_OW 180
// end else
35783: GO 35898
// if GetControl ( vehicle ) = control_remote then
35785: LD_VAR 0 1
35789: PPUSH
35790: CALL_OW 263
35794: PUSH
35795: LD_INT 2
35797: EQUAL
35798: IFFALSE 35859
// begin wait ( 0 0$2 ) ;
35800: LD_INT 70
35802: PPUSH
35803: CALL_OW 67
// if Connect ( vehicle ) then
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL 47922 0 1
35816: IFFALSE 35857
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35818: LD_VAR 0 1
35822: PPUSH
35823: LD_EXP 109
35827: PUSH
35828: LD_VAR 0 2
35832: ARRAY
35833: PUSH
35834: LD_INT 3
35836: ARRAY
35837: PPUSH
35838: LD_EXP 109
35842: PUSH
35843: LD_VAR 0 2
35847: ARRAY
35848: PUSH
35849: LD_INT 4
35851: ARRAY
35852: PPUSH
35853: CALL_OW 171
// end else
35857: GO 35898
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35859: LD_VAR 0 1
35863: PPUSH
35864: LD_EXP 109
35868: PUSH
35869: LD_VAR 0 2
35873: ARRAY
35874: PUSH
35875: LD_INT 3
35877: ARRAY
35878: PPUSH
35879: LD_EXP 109
35883: PUSH
35884: LD_VAR 0 2
35888: ARRAY
35889: PUSH
35890: LD_INT 4
35892: ARRAY
35893: PPUSH
35894: CALL_OW 171
// end ; end ;
35898: LD_VAR 0 3
35902: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35903: LD_INT 0
35905: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35906: LD_VAR 0 1
35910: PUSH
35911: LD_INT 250
35913: EQUAL
35914: PUSH
35915: LD_VAR 0 2
35919: PPUSH
35920: CALL_OW 264
35924: PUSH
35925: LD_INT 81
35927: EQUAL
35928: AND
35929: IFFALSE 35950
// MinerPlaceMine ( unit , x , y ) ;
35931: LD_VAR 0 2
35935: PPUSH
35936: LD_VAR 0 4
35940: PPUSH
35941: LD_VAR 0 5
35945: PPUSH
35946: CALL 38335 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35950: LD_VAR 0 1
35954: PUSH
35955: LD_INT 251
35957: EQUAL
35958: PUSH
35959: LD_VAR 0 2
35963: PPUSH
35964: CALL_OW 264
35968: PUSH
35969: LD_INT 81
35971: EQUAL
35972: AND
35973: IFFALSE 35994
// MinerDetonateMine ( unit , x , y ) ;
35975: LD_VAR 0 2
35979: PPUSH
35980: LD_VAR 0 4
35984: PPUSH
35985: LD_VAR 0 5
35989: PPUSH
35990: CALL 38610 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35994: LD_VAR 0 1
35998: PUSH
35999: LD_INT 252
36001: EQUAL
36002: PUSH
36003: LD_VAR 0 2
36007: PPUSH
36008: CALL_OW 264
36012: PUSH
36013: LD_INT 81
36015: EQUAL
36016: AND
36017: IFFALSE 36038
// MinerCreateMinefield ( unit , x , y ) ;
36019: LD_VAR 0 2
36023: PPUSH
36024: LD_VAR 0 4
36028: PPUSH
36029: LD_VAR 0 5
36033: PPUSH
36034: CALL 39027 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36038: LD_VAR 0 1
36042: PUSH
36043: LD_INT 253
36045: EQUAL
36046: PUSH
36047: LD_VAR 0 2
36051: PPUSH
36052: CALL_OW 257
36056: PUSH
36057: LD_INT 5
36059: EQUAL
36060: AND
36061: IFFALSE 36082
// ComBinocular ( unit , x , y ) ;
36063: LD_VAR 0 2
36067: PPUSH
36068: LD_VAR 0 4
36072: PPUSH
36073: LD_VAR 0 5
36077: PPUSH
36078: CALL 39396 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36082: LD_VAR 0 1
36086: PUSH
36087: LD_INT 254
36089: EQUAL
36090: PUSH
36091: LD_VAR 0 2
36095: PPUSH
36096: CALL_OW 264
36100: PUSH
36101: LD_INT 99
36103: EQUAL
36104: AND
36105: PUSH
36106: LD_VAR 0 3
36110: PPUSH
36111: CALL_OW 263
36115: PUSH
36116: LD_INT 3
36118: EQUAL
36119: AND
36120: IFFALSE 36136
// HackDestroyVehicle ( unit , selectedUnit ) ;
36122: LD_VAR 0 2
36126: PPUSH
36127: LD_VAR 0 3
36131: PPUSH
36132: CALL 37699 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36136: LD_VAR 0 1
36140: PUSH
36141: LD_INT 255
36143: EQUAL
36144: PUSH
36145: LD_VAR 0 2
36149: PPUSH
36150: CALL_OW 264
36154: PUSH
36155: LD_INT 14
36157: PUSH
36158: LD_INT 53
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: IN
36165: AND
36166: PUSH
36167: LD_VAR 0 4
36171: PPUSH
36172: LD_VAR 0 5
36176: PPUSH
36177: CALL_OW 488
36181: AND
36182: IFFALSE 36206
// CutTreeXYR ( unit , x , y , 12 ) ;
36184: LD_VAR 0 2
36188: PPUSH
36189: LD_VAR 0 4
36193: PPUSH
36194: LD_VAR 0 5
36198: PPUSH
36199: LD_INT 12
36201: PPUSH
36202: CALL 36269 0 4
// if cmd = 256 then
36206: LD_VAR 0 1
36210: PUSH
36211: LD_INT 256
36213: EQUAL
36214: IFFALSE 36235
// SetFactoryWaypoint ( unit , x , y ) ;
36216: LD_VAR 0 2
36220: PPUSH
36221: LD_VAR 0 4
36225: PPUSH
36226: LD_VAR 0 5
36230: PPUSH
36231: CALL 34216 0 3
// if cmd = 257 then
36235: LD_VAR 0 1
36239: PUSH
36240: LD_INT 257
36242: EQUAL
36243: IFFALSE 36264
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36245: LD_VAR 0 2
36249: PPUSH
36250: LD_VAR 0 4
36254: PPUSH
36255: LD_VAR 0 5
36259: PPUSH
36260: CALL 34578 0 3
// end ;
36264: LD_VAR 0 6
36268: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36269: LD_INT 0
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36280: LD_VAR 0 1
36284: NOT
36285: PUSH
36286: LD_VAR 0 2
36290: PPUSH
36291: LD_VAR 0 3
36295: PPUSH
36296: CALL_OW 488
36300: NOT
36301: OR
36302: PUSH
36303: LD_VAR 0 4
36307: NOT
36308: OR
36309: IFFALSE 36313
// exit ;
36311: GO 36653
// list := [ ] ;
36313: LD_ADDR_VAR 0 13
36317: PUSH
36318: EMPTY
36319: ST_TO_ADDR
// if x - r < 0 then
36320: LD_VAR 0 2
36324: PUSH
36325: LD_VAR 0 4
36329: MINUS
36330: PUSH
36331: LD_INT 0
36333: LESS
36334: IFFALSE 36346
// min_x := 0 else
36336: LD_ADDR_VAR 0 7
36340: PUSH
36341: LD_INT 0
36343: ST_TO_ADDR
36344: GO 36362
// min_x := x - r ;
36346: LD_ADDR_VAR 0 7
36350: PUSH
36351: LD_VAR 0 2
36355: PUSH
36356: LD_VAR 0 4
36360: MINUS
36361: ST_TO_ADDR
// if y - r < 0 then
36362: LD_VAR 0 3
36366: PUSH
36367: LD_VAR 0 4
36371: MINUS
36372: PUSH
36373: LD_INT 0
36375: LESS
36376: IFFALSE 36388
// min_y := 0 else
36378: LD_ADDR_VAR 0 8
36382: PUSH
36383: LD_INT 0
36385: ST_TO_ADDR
36386: GO 36404
// min_y := y - r ;
36388: LD_ADDR_VAR 0 8
36392: PUSH
36393: LD_VAR 0 3
36397: PUSH
36398: LD_VAR 0 4
36402: MINUS
36403: ST_TO_ADDR
// max_x := x + r ;
36404: LD_ADDR_VAR 0 9
36408: PUSH
36409: LD_VAR 0 2
36413: PUSH
36414: LD_VAR 0 4
36418: PLUS
36419: ST_TO_ADDR
// max_y := y + r ;
36420: LD_ADDR_VAR 0 10
36424: PUSH
36425: LD_VAR 0 3
36429: PUSH
36430: LD_VAR 0 4
36434: PLUS
36435: ST_TO_ADDR
// for _x = min_x to max_x do
36436: LD_ADDR_VAR 0 11
36440: PUSH
36441: DOUBLE
36442: LD_VAR 0 7
36446: DEC
36447: ST_TO_ADDR
36448: LD_VAR 0 9
36452: PUSH
36453: FOR_TO
36454: IFFALSE 36571
// for _y = min_y to max_y do
36456: LD_ADDR_VAR 0 12
36460: PUSH
36461: DOUBLE
36462: LD_VAR 0 8
36466: DEC
36467: ST_TO_ADDR
36468: LD_VAR 0 10
36472: PUSH
36473: FOR_TO
36474: IFFALSE 36567
// begin if not ValidHex ( _x , _y ) then
36476: LD_VAR 0 11
36480: PPUSH
36481: LD_VAR 0 12
36485: PPUSH
36486: CALL_OW 488
36490: NOT
36491: IFFALSE 36495
// continue ;
36493: GO 36473
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36495: LD_VAR 0 11
36499: PPUSH
36500: LD_VAR 0 12
36504: PPUSH
36505: CALL_OW 351
36509: PUSH
36510: LD_VAR 0 11
36514: PPUSH
36515: LD_VAR 0 12
36519: PPUSH
36520: CALL_OW 554
36524: AND
36525: IFFALSE 36565
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36527: LD_ADDR_VAR 0 13
36531: PUSH
36532: LD_VAR 0 13
36536: PPUSH
36537: LD_VAR 0 13
36541: PUSH
36542: LD_INT 1
36544: PLUS
36545: PPUSH
36546: LD_VAR 0 11
36550: PUSH
36551: LD_VAR 0 12
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PPUSH
36560: CALL_OW 2
36564: ST_TO_ADDR
// end ;
36565: GO 36473
36567: POP
36568: POP
36569: GO 36453
36571: POP
36572: POP
// if not list then
36573: LD_VAR 0 13
36577: NOT
36578: IFFALSE 36582
// exit ;
36580: GO 36653
// for i in list do
36582: LD_ADDR_VAR 0 6
36586: PUSH
36587: LD_VAR 0 13
36591: PUSH
36592: FOR_IN
36593: IFFALSE 36651
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36595: LD_VAR 0 1
36599: PPUSH
36600: LD_STRING M
36602: PUSH
36603: LD_VAR 0 6
36607: PUSH
36608: LD_INT 1
36610: ARRAY
36611: PUSH
36612: LD_VAR 0 6
36616: PUSH
36617: LD_INT 2
36619: ARRAY
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: PUSH
36642: EMPTY
36643: LIST
36644: PPUSH
36645: CALL_OW 447
36649: GO 36592
36651: POP
36652: POP
// end ;
36653: LD_VAR 0 5
36657: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36658: LD_EXP 112
36662: NOT
36663: IFFALSE 36713
36665: GO 36667
36667: DISABLE
// begin initHack := true ;
36668: LD_ADDR_EXP 112
36672: PUSH
36673: LD_INT 1
36675: ST_TO_ADDR
// hackTanks := [ ] ;
36676: LD_ADDR_EXP 113
36680: PUSH
36681: EMPTY
36682: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36683: LD_ADDR_EXP 114
36687: PUSH
36688: EMPTY
36689: ST_TO_ADDR
// hackLimit := 3 ;
36690: LD_ADDR_EXP 115
36694: PUSH
36695: LD_INT 3
36697: ST_TO_ADDR
// hackDist := 12 ;
36698: LD_ADDR_EXP 116
36702: PUSH
36703: LD_INT 12
36705: ST_TO_ADDR
// hackCounter := [ ] ;
36706: LD_ADDR_EXP 117
36710: PUSH
36711: EMPTY
36712: ST_TO_ADDR
// end ;
36713: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36714: LD_EXP 112
36718: PUSH
36719: LD_INT 34
36721: PUSH
36722: LD_INT 99
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PPUSH
36729: CALL_OW 69
36733: AND
36734: IFFALSE 36987
36736: GO 36738
36738: DISABLE
36739: LD_INT 0
36741: PPUSH
36742: PPUSH
// begin enable ;
36743: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36744: LD_ADDR_VAR 0 1
36748: PUSH
36749: LD_INT 34
36751: PUSH
36752: LD_INT 99
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PPUSH
36759: CALL_OW 69
36763: PUSH
36764: FOR_IN
36765: IFFALSE 36985
// begin if not i in hackTanks then
36767: LD_VAR 0 1
36771: PUSH
36772: LD_EXP 113
36776: IN
36777: NOT
36778: IFFALSE 36861
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36780: LD_ADDR_EXP 113
36784: PUSH
36785: LD_EXP 113
36789: PPUSH
36790: LD_EXP 113
36794: PUSH
36795: LD_INT 1
36797: PLUS
36798: PPUSH
36799: LD_VAR 0 1
36803: PPUSH
36804: CALL_OW 1
36808: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36809: LD_ADDR_EXP 114
36813: PUSH
36814: LD_EXP 114
36818: PPUSH
36819: LD_EXP 114
36823: PUSH
36824: LD_INT 1
36826: PLUS
36827: PPUSH
36828: EMPTY
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36835: LD_ADDR_EXP 117
36839: PUSH
36840: LD_EXP 117
36844: PPUSH
36845: LD_EXP 117
36849: PUSH
36850: LD_INT 1
36852: PLUS
36853: PPUSH
36854: EMPTY
36855: PPUSH
36856: CALL_OW 1
36860: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 302
36870: NOT
36871: IFFALSE 36884
// begin HackUnlinkAll ( i ) ;
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL 36990 0 1
// continue ;
36882: GO 36764
// end ; HackCheckCapturedStatus ( i ) ;
36884: LD_VAR 0 1
36888: PPUSH
36889: CALL 37433 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36893: LD_ADDR_VAR 0 2
36897: PUSH
36898: LD_INT 81
36900: PUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL_OW 255
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 33
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 91
36927: PUSH
36928: LD_VAR 0 1
36932: PUSH
36933: LD_EXP 116
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 50
36945: PUSH
36946: EMPTY
36947: LIST
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: PPUSH
36955: CALL_OW 69
36959: ST_TO_ADDR
// if not tmp then
36960: LD_VAR 0 2
36964: NOT
36965: IFFALSE 36969
// continue ;
36967: GO 36764
// HackLink ( i , tmp ) ;
36969: LD_VAR 0 1
36973: PPUSH
36974: LD_VAR 0 2
36978: PPUSH
36979: CALL 37126 0 2
// end ;
36983: GO 36764
36985: POP
36986: POP
// end ;
36987: PPOPN 2
36989: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36990: LD_INT 0
36992: PPUSH
36993: PPUSH
36994: PPUSH
// if not hack in hackTanks then
36995: LD_VAR 0 1
36999: PUSH
37000: LD_EXP 113
37004: IN
37005: NOT
37006: IFFALSE 37010
// exit ;
37008: GO 37121
// index := GetElementIndex ( hackTanks , hack ) ;
37010: LD_ADDR_VAR 0 4
37014: PUSH
37015: LD_EXP 113
37019: PPUSH
37020: LD_VAR 0 1
37024: PPUSH
37025: CALL 44738 0 2
37029: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37030: LD_EXP 114
37034: PUSH
37035: LD_VAR 0 4
37039: ARRAY
37040: IFFALSE 37121
// begin for i in hackTanksCaptured [ index ] do
37042: LD_ADDR_VAR 0 3
37046: PUSH
37047: LD_EXP 114
37051: PUSH
37052: LD_VAR 0 4
37056: ARRAY
37057: PUSH
37058: FOR_IN
37059: IFFALSE 37085
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37061: LD_VAR 0 3
37065: PUSH
37066: LD_INT 1
37068: ARRAY
37069: PPUSH
37070: LD_VAR 0 3
37074: PUSH
37075: LD_INT 2
37077: ARRAY
37078: PPUSH
37079: CALL_OW 235
37083: GO 37058
37085: POP
37086: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37087: LD_ADDR_EXP 114
37091: PUSH
37092: LD_EXP 114
37096: PPUSH
37097: LD_VAR 0 4
37101: PPUSH
37102: EMPTY
37103: PPUSH
37104: CALL_OW 1
37108: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37109: LD_VAR 0 1
37113: PPUSH
37114: LD_INT 0
37116: PPUSH
37117: CALL_OW 505
// end ; end ;
37121: LD_VAR 0 2
37125: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37126: LD_INT 0
37128: PPUSH
37129: PPUSH
37130: PPUSH
// if not hack in hackTanks or not vehicles then
37131: LD_VAR 0 1
37135: PUSH
37136: LD_EXP 113
37140: IN
37141: NOT
37142: PUSH
37143: LD_VAR 0 2
37147: NOT
37148: OR
37149: IFFALSE 37153
// exit ;
37151: GO 37428
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37153: LD_ADDR_VAR 0 2
37157: PUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: LD_VAR 0 2
37167: PPUSH
37168: LD_INT 1
37170: PPUSH
37171: LD_INT 1
37173: PPUSH
37174: CALL 45388 0 4
37178: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: LD_EXP 113
37188: PPUSH
37189: LD_VAR 0 1
37193: PPUSH
37194: CALL 44738 0 2
37198: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37199: LD_EXP 114
37203: PUSH
37204: LD_VAR 0 5
37208: ARRAY
37209: PUSH
37210: LD_EXP 115
37214: LESS
37215: IFFALSE 37404
// begin for i := 1 to vehicles do
37217: LD_ADDR_VAR 0 4
37221: PUSH
37222: DOUBLE
37223: LD_INT 1
37225: DEC
37226: ST_TO_ADDR
37227: LD_VAR 0 2
37231: PUSH
37232: FOR_TO
37233: IFFALSE 37402
// begin if hackTanksCaptured [ index ] = hackLimit then
37235: LD_EXP 114
37239: PUSH
37240: LD_VAR 0 5
37244: ARRAY
37245: PUSH
37246: LD_EXP 115
37250: EQUAL
37251: IFFALSE 37255
// break ;
37253: GO 37402
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37255: LD_ADDR_EXP 117
37259: PUSH
37260: LD_EXP 117
37264: PPUSH
37265: LD_VAR 0 5
37269: PPUSH
37270: LD_EXP 117
37274: PUSH
37275: LD_VAR 0 5
37279: ARRAY
37280: PUSH
37281: LD_INT 1
37283: PLUS
37284: PPUSH
37285: CALL_OW 1
37289: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37290: LD_ADDR_EXP 114
37294: PUSH
37295: LD_EXP 114
37299: PPUSH
37300: LD_VAR 0 5
37304: PUSH
37305: LD_EXP 114
37309: PUSH
37310: LD_VAR 0 5
37314: ARRAY
37315: PUSH
37316: LD_INT 1
37318: PLUS
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PPUSH
37324: LD_VAR 0 2
37328: PUSH
37329: LD_VAR 0 4
37333: ARRAY
37334: PUSH
37335: LD_VAR 0 2
37339: PUSH
37340: LD_VAR 0 4
37344: ARRAY
37345: PPUSH
37346: CALL_OW 255
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PPUSH
37355: CALL 44953 0 3
37359: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37360: LD_VAR 0 2
37364: PUSH
37365: LD_VAR 0 4
37369: ARRAY
37370: PPUSH
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL_OW 255
37380: PPUSH
37381: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37385: LD_VAR 0 2
37389: PUSH
37390: LD_VAR 0 4
37394: ARRAY
37395: PPUSH
37396: CALL_OW 141
// end ;
37400: GO 37232
37402: POP
37403: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37404: LD_VAR 0 1
37408: PPUSH
37409: LD_EXP 114
37413: PUSH
37414: LD_VAR 0 5
37418: ARRAY
37419: PUSH
37420: LD_INT 0
37422: PLUS
37423: PPUSH
37424: CALL_OW 505
// end ;
37428: LD_VAR 0 3
37432: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37433: LD_INT 0
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
// if not hack in hackTanks then
37439: LD_VAR 0 1
37443: PUSH
37444: LD_EXP 113
37448: IN
37449: NOT
37450: IFFALSE 37454
// exit ;
37452: GO 37694
// index := GetElementIndex ( hackTanks , hack ) ;
37454: LD_ADDR_VAR 0 4
37458: PUSH
37459: LD_EXP 113
37463: PPUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL 44738 0 2
37473: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37474: LD_ADDR_VAR 0 3
37478: PUSH
37479: DOUBLE
37480: LD_EXP 114
37484: PUSH
37485: LD_VAR 0 4
37489: ARRAY
37490: INC
37491: ST_TO_ADDR
37492: LD_INT 1
37494: PUSH
37495: FOR_DOWNTO
37496: IFFALSE 37668
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37498: LD_ADDR_VAR 0 5
37502: PUSH
37503: LD_EXP 114
37507: PUSH
37508: LD_VAR 0 4
37512: ARRAY
37513: PUSH
37514: LD_VAR 0 3
37518: ARRAY
37519: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37520: LD_VAR 0 5
37524: PUSH
37525: LD_INT 1
37527: ARRAY
37528: PPUSH
37529: CALL_OW 302
37533: NOT
37534: PUSH
37535: LD_VAR 0 5
37539: PUSH
37540: LD_INT 1
37542: ARRAY
37543: PPUSH
37544: CALL_OW 255
37548: PUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 255
37558: NONEQUAL
37559: OR
37560: IFFALSE 37666
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37562: LD_VAR 0 5
37566: PUSH
37567: LD_INT 1
37569: ARRAY
37570: PPUSH
37571: CALL_OW 305
37575: PUSH
37576: LD_VAR 0 5
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PPUSH
37585: CALL_OW 255
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 255
37599: EQUAL
37600: AND
37601: IFFALSE 37625
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37603: LD_VAR 0 5
37607: PUSH
37608: LD_INT 1
37610: ARRAY
37611: PPUSH
37612: LD_VAR 0 5
37616: PUSH
37617: LD_INT 2
37619: ARRAY
37620: PPUSH
37621: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37625: LD_ADDR_EXP 114
37629: PUSH
37630: LD_EXP 114
37634: PPUSH
37635: LD_VAR 0 4
37639: PPUSH
37640: LD_EXP 114
37644: PUSH
37645: LD_VAR 0 4
37649: ARRAY
37650: PPUSH
37651: LD_VAR 0 3
37655: PPUSH
37656: CALL_OW 3
37660: PPUSH
37661: CALL_OW 1
37665: ST_TO_ADDR
// end ; end ;
37666: GO 37495
37668: POP
37669: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37670: LD_VAR 0 1
37674: PPUSH
37675: LD_EXP 114
37679: PUSH
37680: LD_VAR 0 4
37684: ARRAY
37685: PUSH
37686: LD_INT 0
37688: PLUS
37689: PPUSH
37690: CALL_OW 505
// end ;
37694: LD_VAR 0 2
37698: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37699: LD_INT 0
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
// if not hack in hackTanks then
37705: LD_VAR 0 1
37709: PUSH
37710: LD_EXP 113
37714: IN
37715: NOT
37716: IFFALSE 37720
// exit ;
37718: GO 37805
// index := GetElementIndex ( hackTanks , hack ) ;
37720: LD_ADDR_VAR 0 5
37724: PUSH
37725: LD_EXP 113
37729: PPUSH
37730: LD_VAR 0 1
37734: PPUSH
37735: CALL 44738 0 2
37739: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37740: LD_ADDR_VAR 0 4
37744: PUSH
37745: DOUBLE
37746: LD_INT 1
37748: DEC
37749: ST_TO_ADDR
37750: LD_EXP 114
37754: PUSH
37755: LD_VAR 0 5
37759: ARRAY
37760: PUSH
37761: FOR_TO
37762: IFFALSE 37803
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37764: LD_EXP 114
37768: PUSH
37769: LD_VAR 0 5
37773: ARRAY
37774: PUSH
37775: LD_VAR 0 4
37779: ARRAY
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: PUSH
37785: LD_VAR 0 2
37789: EQUAL
37790: IFFALSE 37801
// KillUnit ( vehicle ) ;
37792: LD_VAR 0 2
37796: PPUSH
37797: CALL_OW 66
37801: GO 37761
37803: POP
37804: POP
// end ;
37805: LD_VAR 0 3
37809: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37810: LD_EXP 118
37814: NOT
37815: IFFALSE 37850
37817: GO 37819
37819: DISABLE
// begin initMiner := true ;
37820: LD_ADDR_EXP 118
37824: PUSH
37825: LD_INT 1
37827: ST_TO_ADDR
// minersList := [ ] ;
37828: LD_ADDR_EXP 119
37832: PUSH
37833: EMPTY
37834: ST_TO_ADDR
// minerMinesList := [ ] ;
37835: LD_ADDR_EXP 120
37839: PUSH
37840: EMPTY
37841: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37842: LD_ADDR_EXP 121
37846: PUSH
37847: LD_INT 5
37849: ST_TO_ADDR
// end ;
37850: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37851: LD_EXP 118
37855: PUSH
37856: LD_INT 34
37858: PUSH
37859: LD_INT 81
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PPUSH
37866: CALL_OW 69
37870: AND
37871: IFFALSE 38332
37873: GO 37875
37875: DISABLE
37876: LD_INT 0
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
// begin enable ;
37882: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37883: LD_ADDR_VAR 0 1
37887: PUSH
37888: LD_INT 34
37890: PUSH
37891: LD_INT 81
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PPUSH
37898: CALL_OW 69
37902: PUSH
37903: FOR_IN
37904: IFFALSE 37976
// begin if not i in minersList then
37906: LD_VAR 0 1
37910: PUSH
37911: LD_EXP 119
37915: IN
37916: NOT
37917: IFFALSE 37974
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37919: LD_ADDR_EXP 119
37923: PUSH
37924: LD_EXP 119
37928: PPUSH
37929: LD_EXP 119
37933: PUSH
37934: LD_INT 1
37936: PLUS
37937: PPUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 1
37947: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37948: LD_ADDR_EXP 120
37952: PUSH
37953: LD_EXP 120
37957: PPUSH
37958: LD_EXP 120
37962: PUSH
37963: LD_INT 1
37965: PLUS
37966: PPUSH
37967: EMPTY
37968: PPUSH
37969: CALL_OW 1
37973: ST_TO_ADDR
// end end ;
37974: GO 37903
37976: POP
37977: POP
// for i := minerMinesList downto 1 do
37978: LD_ADDR_VAR 0 1
37982: PUSH
37983: DOUBLE
37984: LD_EXP 120
37988: INC
37989: ST_TO_ADDR
37990: LD_INT 1
37992: PUSH
37993: FOR_DOWNTO
37994: IFFALSE 38330
// begin if IsLive ( minersList [ i ] ) then
37996: LD_EXP 119
38000: PUSH
38001: LD_VAR 0 1
38005: ARRAY
38006: PPUSH
38007: CALL_OW 300
38011: IFFALSE 38039
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38013: LD_EXP 119
38017: PUSH
38018: LD_VAR 0 1
38022: ARRAY
38023: PPUSH
38024: LD_EXP 120
38028: PUSH
38029: LD_VAR 0 1
38033: ARRAY
38034: PPUSH
38035: CALL_OW 505
// if not minerMinesList [ i ] then
38039: LD_EXP 120
38043: PUSH
38044: LD_VAR 0 1
38048: ARRAY
38049: NOT
38050: IFFALSE 38054
// continue ;
38052: GO 37993
// for j := minerMinesList [ i ] downto 1 do
38054: LD_ADDR_VAR 0 2
38058: PUSH
38059: DOUBLE
38060: LD_EXP 120
38064: PUSH
38065: LD_VAR 0 1
38069: ARRAY
38070: INC
38071: ST_TO_ADDR
38072: LD_INT 1
38074: PUSH
38075: FOR_DOWNTO
38076: IFFALSE 38326
// begin side := GetSide ( minersList [ i ] ) ;
38078: LD_ADDR_VAR 0 3
38082: PUSH
38083: LD_EXP 119
38087: PUSH
38088: LD_VAR 0 1
38092: ARRAY
38093: PPUSH
38094: CALL_OW 255
38098: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38099: LD_ADDR_VAR 0 4
38103: PUSH
38104: LD_EXP 120
38108: PUSH
38109: LD_VAR 0 1
38113: ARRAY
38114: PUSH
38115: LD_VAR 0 2
38119: ARRAY
38120: PUSH
38121: LD_INT 1
38123: ARRAY
38124: PPUSH
38125: LD_EXP 120
38129: PUSH
38130: LD_VAR 0 1
38134: ARRAY
38135: PUSH
38136: LD_VAR 0 2
38140: ARRAY
38141: PUSH
38142: LD_INT 2
38144: ARRAY
38145: PPUSH
38146: CALL_OW 428
38150: ST_TO_ADDR
// if not tmp then
38151: LD_VAR 0 4
38155: NOT
38156: IFFALSE 38160
// continue ;
38158: GO 38075
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38160: LD_VAR 0 4
38164: PUSH
38165: LD_INT 81
38167: PUSH
38168: LD_VAR 0 3
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PPUSH
38177: CALL_OW 69
38181: IN
38182: PUSH
38183: LD_EXP 120
38187: PUSH
38188: LD_VAR 0 1
38192: ARRAY
38193: PUSH
38194: LD_VAR 0 2
38198: ARRAY
38199: PUSH
38200: LD_INT 1
38202: ARRAY
38203: PPUSH
38204: LD_EXP 120
38208: PUSH
38209: LD_VAR 0 1
38213: ARRAY
38214: PUSH
38215: LD_VAR 0 2
38219: ARRAY
38220: PUSH
38221: LD_INT 2
38223: ARRAY
38224: PPUSH
38225: CALL_OW 458
38229: AND
38230: IFFALSE 38324
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38232: LD_EXP 120
38236: PUSH
38237: LD_VAR 0 1
38241: ARRAY
38242: PUSH
38243: LD_VAR 0 2
38247: ARRAY
38248: PUSH
38249: LD_INT 1
38251: ARRAY
38252: PPUSH
38253: LD_EXP 120
38257: PUSH
38258: LD_VAR 0 1
38262: ARRAY
38263: PUSH
38264: LD_VAR 0 2
38268: ARRAY
38269: PUSH
38270: LD_INT 2
38272: ARRAY
38273: PPUSH
38274: LD_VAR 0 3
38278: PPUSH
38279: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38283: LD_ADDR_EXP 120
38287: PUSH
38288: LD_EXP 120
38292: PPUSH
38293: LD_VAR 0 1
38297: PPUSH
38298: LD_EXP 120
38302: PUSH
38303: LD_VAR 0 1
38307: ARRAY
38308: PPUSH
38309: LD_VAR 0 2
38313: PPUSH
38314: CALL_OW 3
38318: PPUSH
38319: CALL_OW 1
38323: ST_TO_ADDR
// end ; end ;
38324: GO 38075
38326: POP
38327: POP
// end ;
38328: GO 37993
38330: POP
38331: POP
// end ;
38332: PPOPN 4
38334: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38335: LD_INT 0
38337: PPUSH
38338: PPUSH
// result := false ;
38339: LD_ADDR_VAR 0 4
38343: PUSH
38344: LD_INT 0
38346: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 264
38356: PUSH
38357: LD_INT 81
38359: EQUAL
38360: NOT
38361: IFFALSE 38365
// exit ;
38363: GO 38605
// index := GetElementIndex ( minersList , unit ) ;
38365: LD_ADDR_VAR 0 5
38369: PUSH
38370: LD_EXP 119
38374: PPUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL 44738 0 2
38384: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38385: LD_EXP 120
38389: PUSH
38390: LD_VAR 0 5
38394: ARRAY
38395: PUSH
38396: LD_EXP 121
38400: GREATEREQUAL
38401: IFFALSE 38405
// exit ;
38403: GO 38605
// ComMoveXY ( unit , x , y ) ;
38405: LD_VAR 0 1
38409: PPUSH
38410: LD_VAR 0 2
38414: PPUSH
38415: LD_VAR 0 3
38419: PPUSH
38420: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38424: LD_INT 35
38426: PPUSH
38427: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38431: LD_VAR 0 1
38435: PPUSH
38436: LD_VAR 0 2
38440: PPUSH
38441: LD_VAR 0 3
38445: PPUSH
38446: CALL 76093 0 3
38450: NOT
38451: PUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 314
38461: AND
38462: IFFALSE 38466
// exit ;
38464: GO 38605
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38466: LD_VAR 0 2
38470: PPUSH
38471: LD_VAR 0 3
38475: PPUSH
38476: CALL_OW 428
38480: PUSH
38481: LD_VAR 0 1
38485: EQUAL
38486: PUSH
38487: LD_VAR 0 1
38491: PPUSH
38492: CALL_OW 314
38496: NOT
38497: AND
38498: IFFALSE 38424
// PlaySoundXY ( x , y , PlantMine ) ;
38500: LD_VAR 0 2
38504: PPUSH
38505: LD_VAR 0 3
38509: PPUSH
38510: LD_STRING PlantMine
38512: PPUSH
38513: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38517: LD_VAR 0 2
38521: PPUSH
38522: LD_VAR 0 3
38526: PPUSH
38527: LD_VAR 0 1
38531: PPUSH
38532: CALL_OW 255
38536: PPUSH
38537: LD_INT 0
38539: PPUSH
38540: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38544: LD_ADDR_EXP 120
38548: PUSH
38549: LD_EXP 120
38553: PPUSH
38554: LD_VAR 0 5
38558: PUSH
38559: LD_EXP 120
38563: PUSH
38564: LD_VAR 0 5
38568: ARRAY
38569: PUSH
38570: LD_INT 1
38572: PLUS
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PPUSH
38578: LD_VAR 0 2
38582: PUSH
38583: LD_VAR 0 3
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PPUSH
38592: CALL 44953 0 3
38596: ST_TO_ADDR
// result := true ;
38597: LD_ADDR_VAR 0 4
38601: PUSH
38602: LD_INT 1
38604: ST_TO_ADDR
// end ;
38605: LD_VAR 0 4
38609: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38610: LD_INT 0
38612: PPUSH
38613: PPUSH
38614: PPUSH
// if not unit in minersList then
38615: LD_VAR 0 1
38619: PUSH
38620: LD_EXP 119
38624: IN
38625: NOT
38626: IFFALSE 38630
// exit ;
38628: GO 39022
// index := GetElementIndex ( minersList , unit ) ;
38630: LD_ADDR_VAR 0 6
38634: PUSH
38635: LD_EXP 119
38639: PPUSH
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL 44738 0 2
38649: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38650: LD_ADDR_VAR 0 5
38654: PUSH
38655: DOUBLE
38656: LD_EXP 120
38660: PUSH
38661: LD_VAR 0 6
38665: ARRAY
38666: INC
38667: ST_TO_ADDR
38668: LD_INT 1
38670: PUSH
38671: FOR_DOWNTO
38672: IFFALSE 38833
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38674: LD_EXP 120
38678: PUSH
38679: LD_VAR 0 6
38683: ARRAY
38684: PUSH
38685: LD_VAR 0 5
38689: ARRAY
38690: PUSH
38691: LD_INT 1
38693: ARRAY
38694: PUSH
38695: LD_VAR 0 2
38699: EQUAL
38700: PUSH
38701: LD_EXP 120
38705: PUSH
38706: LD_VAR 0 6
38710: ARRAY
38711: PUSH
38712: LD_VAR 0 5
38716: ARRAY
38717: PUSH
38718: LD_INT 2
38720: ARRAY
38721: PUSH
38722: LD_VAR 0 3
38726: EQUAL
38727: AND
38728: IFFALSE 38831
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38730: LD_EXP 120
38734: PUSH
38735: LD_VAR 0 6
38739: ARRAY
38740: PUSH
38741: LD_VAR 0 5
38745: ARRAY
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: PPUSH
38751: LD_EXP 120
38755: PUSH
38756: LD_VAR 0 6
38760: ARRAY
38761: PUSH
38762: LD_VAR 0 5
38766: ARRAY
38767: PUSH
38768: LD_INT 2
38770: ARRAY
38771: PPUSH
38772: LD_VAR 0 1
38776: PPUSH
38777: CALL_OW 255
38781: PPUSH
38782: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38786: LD_ADDR_EXP 120
38790: PUSH
38791: LD_EXP 120
38795: PPUSH
38796: LD_VAR 0 6
38800: PPUSH
38801: LD_EXP 120
38805: PUSH
38806: LD_VAR 0 6
38810: ARRAY
38811: PPUSH
38812: LD_VAR 0 5
38816: PPUSH
38817: CALL_OW 3
38821: PPUSH
38822: CALL_OW 1
38826: ST_TO_ADDR
// exit ;
38827: POP
38828: POP
38829: GO 39022
// end ; end ;
38831: GO 38671
38833: POP
38834: POP
// for i := minerMinesList [ index ] downto 1 do
38835: LD_ADDR_VAR 0 5
38839: PUSH
38840: DOUBLE
38841: LD_EXP 120
38845: PUSH
38846: LD_VAR 0 6
38850: ARRAY
38851: INC
38852: ST_TO_ADDR
38853: LD_INT 1
38855: PUSH
38856: FOR_DOWNTO
38857: IFFALSE 39020
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38859: LD_EXP 120
38863: PUSH
38864: LD_VAR 0 6
38868: ARRAY
38869: PUSH
38870: LD_VAR 0 5
38874: ARRAY
38875: PUSH
38876: LD_INT 1
38878: ARRAY
38879: PPUSH
38880: LD_EXP 120
38884: PUSH
38885: LD_VAR 0 6
38889: ARRAY
38890: PUSH
38891: LD_VAR 0 5
38895: ARRAY
38896: PUSH
38897: LD_INT 2
38899: ARRAY
38900: PPUSH
38901: LD_VAR 0 2
38905: PPUSH
38906: LD_VAR 0 3
38910: PPUSH
38911: CALL_OW 298
38915: PUSH
38916: LD_INT 6
38918: LESS
38919: IFFALSE 39018
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38921: LD_EXP 120
38925: PUSH
38926: LD_VAR 0 6
38930: ARRAY
38931: PUSH
38932: LD_VAR 0 5
38936: ARRAY
38937: PUSH
38938: LD_INT 1
38940: ARRAY
38941: PPUSH
38942: LD_EXP 120
38946: PUSH
38947: LD_VAR 0 6
38951: ARRAY
38952: PUSH
38953: LD_VAR 0 5
38957: ARRAY
38958: PUSH
38959: LD_INT 2
38961: ARRAY
38962: PPUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: CALL_OW 255
38972: PPUSH
38973: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38977: LD_ADDR_EXP 120
38981: PUSH
38982: LD_EXP 120
38986: PPUSH
38987: LD_VAR 0 6
38991: PPUSH
38992: LD_EXP 120
38996: PUSH
38997: LD_VAR 0 6
39001: ARRAY
39002: PPUSH
39003: LD_VAR 0 5
39007: PPUSH
39008: CALL_OW 3
39012: PPUSH
39013: CALL_OW 1
39017: ST_TO_ADDR
// end ; end ;
39018: GO 38856
39020: POP
39021: POP
// end ;
39022: LD_VAR 0 4
39026: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39027: LD_INT 0
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 264
39047: PUSH
39048: LD_INT 81
39050: EQUAL
39051: NOT
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_EXP 119
39062: IN
39063: NOT
39064: OR
39065: IFFALSE 39069
// exit ;
39067: GO 39391
// index := GetElementIndex ( minersList , unit ) ;
39069: LD_ADDR_VAR 0 6
39073: PUSH
39074: LD_EXP 119
39078: PPUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL 44738 0 2
39088: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39089: LD_ADDR_VAR 0 8
39093: PUSH
39094: LD_EXP 121
39098: PUSH
39099: LD_EXP 120
39103: PUSH
39104: LD_VAR 0 6
39108: ARRAY
39109: MINUS
39110: ST_TO_ADDR
// if not minesFreeAmount then
39111: LD_VAR 0 8
39115: NOT
39116: IFFALSE 39120
// exit ;
39118: GO 39391
// tmp := [ ] ;
39120: LD_ADDR_VAR 0 7
39124: PUSH
39125: EMPTY
39126: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39127: LD_ADDR_VAR 0 5
39131: PUSH
39132: DOUBLE
39133: LD_INT 1
39135: DEC
39136: ST_TO_ADDR
39137: LD_VAR 0 8
39141: PUSH
39142: FOR_TO
39143: IFFALSE 39338
// begin _d := rand ( 0 , 5 ) ;
39145: LD_ADDR_VAR 0 11
39149: PUSH
39150: LD_INT 0
39152: PPUSH
39153: LD_INT 5
39155: PPUSH
39156: CALL_OW 12
39160: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39161: LD_ADDR_VAR 0 12
39165: PUSH
39166: LD_INT 2
39168: PPUSH
39169: LD_INT 6
39171: PPUSH
39172: CALL_OW 12
39176: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39177: LD_ADDR_VAR 0 9
39181: PUSH
39182: LD_VAR 0 2
39186: PPUSH
39187: LD_VAR 0 11
39191: PPUSH
39192: LD_VAR 0 12
39196: PPUSH
39197: CALL_OW 272
39201: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39202: LD_ADDR_VAR 0 10
39206: PUSH
39207: LD_VAR 0 3
39211: PPUSH
39212: LD_VAR 0 11
39216: PPUSH
39217: LD_VAR 0 12
39221: PPUSH
39222: CALL_OW 273
39226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39227: LD_VAR 0 9
39231: PPUSH
39232: LD_VAR 0 10
39236: PPUSH
39237: CALL_OW 488
39241: PUSH
39242: LD_VAR 0 9
39246: PUSH
39247: LD_VAR 0 10
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_VAR 0 7
39260: IN
39261: NOT
39262: AND
39263: PUSH
39264: LD_VAR 0 9
39268: PPUSH
39269: LD_VAR 0 10
39273: PPUSH
39274: CALL_OW 458
39278: NOT
39279: AND
39280: IFFALSE 39322
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39282: LD_ADDR_VAR 0 7
39286: PUSH
39287: LD_VAR 0 7
39291: PPUSH
39292: LD_VAR 0 7
39296: PUSH
39297: LD_INT 1
39299: PLUS
39300: PPUSH
39301: LD_VAR 0 9
39305: PUSH
39306: LD_VAR 0 10
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 1
39319: ST_TO_ADDR
39320: GO 39336
// i := i - 1 ;
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 5
39331: PUSH
39332: LD_INT 1
39334: MINUS
39335: ST_TO_ADDR
// end ;
39336: GO 39142
39338: POP
39339: POP
// for i in tmp do
39340: LD_ADDR_VAR 0 5
39344: PUSH
39345: LD_VAR 0 7
39349: PUSH
39350: FOR_IN
39351: IFFALSE 39389
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39353: LD_VAR 0 1
39357: PPUSH
39358: LD_VAR 0 5
39362: PUSH
39363: LD_INT 1
39365: ARRAY
39366: PPUSH
39367: LD_VAR 0 5
39371: PUSH
39372: LD_INT 2
39374: ARRAY
39375: PPUSH
39376: CALL 38335 0 3
39380: NOT
39381: IFFALSE 39387
// exit ;
39383: POP
39384: POP
39385: GO 39391
39387: GO 39350
39389: POP
39390: POP
// end ;
39391: LD_VAR 0 4
39395: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39396: LD_INT 0
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
// if not GetClass ( unit ) = class_sniper then
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 257
39414: PUSH
39415: LD_INT 5
39417: EQUAL
39418: NOT
39419: IFFALSE 39423
// exit ;
39421: GO 39811
// dist := 8 ;
39423: LD_ADDR_VAR 0 5
39427: PUSH
39428: LD_INT 8
39430: ST_TO_ADDR
// viewRange := 12 ;
39431: LD_ADDR_VAR 0 7
39435: PUSH
39436: LD_INT 12
39438: ST_TO_ADDR
// side := GetSide ( unit ) ;
39439: LD_ADDR_VAR 0 6
39443: PUSH
39444: LD_VAR 0 1
39448: PPUSH
39449: CALL_OW 255
39453: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39454: LD_INT 61
39456: PPUSH
39457: LD_VAR 0 6
39461: PPUSH
39462: CALL_OW 321
39466: PUSH
39467: LD_INT 2
39469: EQUAL
39470: IFFALSE 39480
// viewRange := 16 ;
39472: LD_ADDR_VAR 0 7
39476: PUSH
39477: LD_INT 16
39479: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39480: LD_VAR 0 1
39484: PPUSH
39485: LD_VAR 0 2
39489: PPUSH
39490: LD_VAR 0 3
39494: PPUSH
39495: CALL_OW 297
39499: PUSH
39500: LD_VAR 0 5
39504: GREATER
39505: IFFALSE 39584
// begin ComMoveXY ( unit , x , y ) ;
39507: LD_VAR 0 1
39511: PPUSH
39512: LD_VAR 0 2
39516: PPUSH
39517: LD_VAR 0 3
39521: PPUSH
39522: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39526: LD_INT 35
39528: PPUSH
39529: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39533: LD_VAR 0 1
39537: PPUSH
39538: LD_VAR 0 2
39542: PPUSH
39543: LD_VAR 0 3
39547: PPUSH
39548: CALL 76093 0 3
39552: NOT
39553: IFFALSE 39557
// exit ;
39555: GO 39811
// until GetDistUnitXY ( unit , x , y ) < dist ;
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_VAR 0 2
39566: PPUSH
39567: LD_VAR 0 3
39571: PPUSH
39572: CALL_OW 297
39576: PUSH
39577: LD_VAR 0 5
39581: LESS
39582: IFFALSE 39526
// end ; ComTurnXY ( unit , x , y ) ;
39584: LD_VAR 0 1
39588: PPUSH
39589: LD_VAR 0 2
39593: PPUSH
39594: LD_VAR 0 3
39598: PPUSH
39599: CALL_OW 118
// wait ( 5 ) ;
39603: LD_INT 5
39605: PPUSH
39606: CALL_OW 67
// _d := GetDir ( unit ) ;
39610: LD_ADDR_VAR 0 10
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 254
39624: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39625: LD_ADDR_VAR 0 8
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 250
39639: PPUSH
39640: LD_VAR 0 10
39644: PPUSH
39645: LD_VAR 0 5
39649: PPUSH
39650: CALL_OW 272
39654: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39655: LD_ADDR_VAR 0 9
39659: PUSH
39660: LD_VAR 0 1
39664: PPUSH
39665: CALL_OW 251
39669: PPUSH
39670: LD_VAR 0 10
39674: PPUSH
39675: LD_VAR 0 5
39679: PPUSH
39680: CALL_OW 273
39684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39685: LD_VAR 0 8
39689: PPUSH
39690: LD_VAR 0 9
39694: PPUSH
39695: CALL_OW 488
39699: NOT
39700: IFFALSE 39704
// exit ;
39702: GO 39811
// ComAnimCustom ( unit , 1 ) ;
39704: LD_VAR 0 1
39708: PPUSH
39709: LD_INT 1
39711: PPUSH
39712: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39716: LD_VAR 0 8
39720: PPUSH
39721: LD_VAR 0 9
39725: PPUSH
39726: LD_VAR 0 6
39730: PPUSH
39731: LD_VAR 0 7
39735: PPUSH
39736: CALL_OW 330
// repeat wait ( 1 ) ;
39740: LD_INT 1
39742: PPUSH
39743: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 316
39756: PUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL_OW 314
39766: OR
39767: PUSH
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 302
39777: NOT
39778: OR
39779: PUSH
39780: LD_VAR 0 1
39784: PPUSH
39785: CALL_OW 301
39789: OR
39790: IFFALSE 39740
// RemoveSeeing ( _x , _y , side ) ;
39792: LD_VAR 0 8
39796: PPUSH
39797: LD_VAR 0 9
39801: PPUSH
39802: LD_VAR 0 6
39806: PPUSH
39807: CALL_OW 331
// end ; end_of_file
39811: LD_VAR 0 4
39815: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39816: LD_INT 0
39818: PPUSH
39819: PPUSH
// if exist_mode then
39820: LD_VAR 0 2
39824: IFFALSE 39849
// unit := CreateCharacter ( prefix & ident ) else
39826: LD_ADDR_VAR 0 5
39830: PUSH
39831: LD_VAR 0 3
39835: PUSH
39836: LD_VAR 0 1
39840: STR
39841: PPUSH
39842: CALL_OW 34
39846: ST_TO_ADDR
39847: GO 39864
// unit := NewCharacter ( ident ) ;
39849: LD_ADDR_VAR 0 5
39853: PUSH
39854: LD_VAR 0 1
39858: PPUSH
39859: CALL_OW 25
39863: ST_TO_ADDR
// result := unit ;
39864: LD_ADDR_VAR 0 4
39868: PUSH
39869: LD_VAR 0 5
39873: ST_TO_ADDR
// end ;
39874: LD_VAR 0 4
39878: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39879: LD_INT 0
39881: PPUSH
39882: PPUSH
// if not side or not nation then
39883: LD_VAR 0 1
39887: NOT
39888: PUSH
39889: LD_VAR 0 2
39893: NOT
39894: OR
39895: IFFALSE 39899
// exit ;
39897: GO 40667
// case nation of nation_american :
39899: LD_VAR 0 2
39903: PUSH
39904: LD_INT 1
39906: DOUBLE
39907: EQUAL
39908: IFTRUE 39912
39910: GO 40126
39912: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39913: LD_ADDR_VAR 0 4
39917: PUSH
39918: LD_INT 35
39920: PUSH
39921: LD_INT 45
39923: PUSH
39924: LD_INT 46
39926: PUSH
39927: LD_INT 47
39929: PUSH
39930: LD_INT 82
39932: PUSH
39933: LD_INT 83
39935: PUSH
39936: LD_INT 84
39938: PUSH
39939: LD_INT 85
39941: PUSH
39942: LD_INT 86
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: LD_INT 6
39953: PUSH
39954: LD_INT 15
39956: PUSH
39957: LD_INT 16
39959: PUSH
39960: LD_INT 7
39962: PUSH
39963: LD_INT 12
39965: PUSH
39966: LD_INT 13
39968: PUSH
39969: LD_INT 10
39971: PUSH
39972: LD_INT 14
39974: PUSH
39975: LD_INT 20
39977: PUSH
39978: LD_INT 21
39980: PUSH
39981: LD_INT 22
39983: PUSH
39984: LD_INT 25
39986: PUSH
39987: LD_INT 32
39989: PUSH
39990: LD_INT 27
39992: PUSH
39993: LD_INT 36
39995: PUSH
39996: LD_INT 69
39998: PUSH
39999: LD_INT 39
40001: PUSH
40002: LD_INT 34
40004: PUSH
40005: LD_INT 40
40007: PUSH
40008: LD_INT 48
40010: PUSH
40011: LD_INT 49
40013: PUSH
40014: LD_INT 50
40016: PUSH
40017: LD_INT 51
40019: PUSH
40020: LD_INT 52
40022: PUSH
40023: LD_INT 53
40025: PUSH
40026: LD_INT 54
40028: PUSH
40029: LD_INT 55
40031: PUSH
40032: LD_INT 56
40034: PUSH
40035: LD_INT 57
40037: PUSH
40038: LD_INT 58
40040: PUSH
40041: LD_INT 59
40043: PUSH
40044: LD_INT 60
40046: PUSH
40047: LD_INT 61
40049: PUSH
40050: LD_INT 62
40052: PUSH
40053: LD_INT 80
40055: PUSH
40056: LD_INT 82
40058: PUSH
40059: LD_INT 83
40061: PUSH
40062: LD_INT 84
40064: PUSH
40065: LD_INT 85
40067: PUSH
40068: LD_INT 86
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: ST_TO_ADDR
40124: GO 40591
40126: LD_INT 2
40128: DOUBLE
40129: EQUAL
40130: IFTRUE 40134
40132: GO 40360
40134: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40135: LD_ADDR_VAR 0 4
40139: PUSH
40140: LD_INT 35
40142: PUSH
40143: LD_INT 45
40145: PUSH
40146: LD_INT 46
40148: PUSH
40149: LD_INT 47
40151: PUSH
40152: LD_INT 82
40154: PUSH
40155: LD_INT 83
40157: PUSH
40158: LD_INT 84
40160: PUSH
40161: LD_INT 85
40163: PUSH
40164: LD_INT 87
40166: PUSH
40167: LD_INT 70
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 11
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: LD_INT 4
40181: PUSH
40182: LD_INT 5
40184: PUSH
40185: LD_INT 6
40187: PUSH
40188: LD_INT 15
40190: PUSH
40191: LD_INT 18
40193: PUSH
40194: LD_INT 7
40196: PUSH
40197: LD_INT 17
40199: PUSH
40200: LD_INT 8
40202: PUSH
40203: LD_INT 20
40205: PUSH
40206: LD_INT 21
40208: PUSH
40209: LD_INT 22
40211: PUSH
40212: LD_INT 72
40214: PUSH
40215: LD_INT 26
40217: PUSH
40218: LD_INT 69
40220: PUSH
40221: LD_INT 39
40223: PUSH
40224: LD_INT 40
40226: PUSH
40227: LD_INT 41
40229: PUSH
40230: LD_INT 42
40232: PUSH
40233: LD_INT 43
40235: PUSH
40236: LD_INT 48
40238: PUSH
40239: LD_INT 49
40241: PUSH
40242: LD_INT 50
40244: PUSH
40245: LD_INT 51
40247: PUSH
40248: LD_INT 52
40250: PUSH
40251: LD_INT 53
40253: PUSH
40254: LD_INT 54
40256: PUSH
40257: LD_INT 55
40259: PUSH
40260: LD_INT 56
40262: PUSH
40263: LD_INT 60
40265: PUSH
40266: LD_INT 61
40268: PUSH
40269: LD_INT 62
40271: PUSH
40272: LD_INT 66
40274: PUSH
40275: LD_INT 67
40277: PUSH
40278: LD_INT 68
40280: PUSH
40281: LD_INT 81
40283: PUSH
40284: LD_INT 82
40286: PUSH
40287: LD_INT 83
40289: PUSH
40290: LD_INT 84
40292: PUSH
40293: LD_INT 85
40295: PUSH
40296: LD_INT 87
40298: PUSH
40299: LD_INT 88
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: ST_TO_ADDR
40358: GO 40591
40360: LD_INT 3
40362: DOUBLE
40363: EQUAL
40364: IFTRUE 40368
40366: GO 40590
40368: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40369: LD_ADDR_VAR 0 4
40373: PUSH
40374: LD_INT 46
40376: PUSH
40377: LD_INT 47
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 82
40388: PUSH
40389: LD_INT 83
40391: PUSH
40392: LD_INT 84
40394: PUSH
40395: LD_INT 85
40397: PUSH
40398: LD_INT 86
40400: PUSH
40401: LD_INT 11
40403: PUSH
40404: LD_INT 9
40406: PUSH
40407: LD_INT 20
40409: PUSH
40410: LD_INT 19
40412: PUSH
40413: LD_INT 21
40415: PUSH
40416: LD_INT 24
40418: PUSH
40419: LD_INT 22
40421: PUSH
40422: LD_INT 25
40424: PUSH
40425: LD_INT 28
40427: PUSH
40428: LD_INT 29
40430: PUSH
40431: LD_INT 30
40433: PUSH
40434: LD_INT 31
40436: PUSH
40437: LD_INT 37
40439: PUSH
40440: LD_INT 38
40442: PUSH
40443: LD_INT 32
40445: PUSH
40446: LD_INT 27
40448: PUSH
40449: LD_INT 33
40451: PUSH
40452: LD_INT 69
40454: PUSH
40455: LD_INT 39
40457: PUSH
40458: LD_INT 34
40460: PUSH
40461: LD_INT 40
40463: PUSH
40464: LD_INT 71
40466: PUSH
40467: LD_INT 23
40469: PUSH
40470: LD_INT 44
40472: PUSH
40473: LD_INT 48
40475: PUSH
40476: LD_INT 49
40478: PUSH
40479: LD_INT 50
40481: PUSH
40482: LD_INT 51
40484: PUSH
40485: LD_INT 52
40487: PUSH
40488: LD_INT 53
40490: PUSH
40491: LD_INT 54
40493: PUSH
40494: LD_INT 55
40496: PUSH
40497: LD_INT 56
40499: PUSH
40500: LD_INT 57
40502: PUSH
40503: LD_INT 58
40505: PUSH
40506: LD_INT 59
40508: PUSH
40509: LD_INT 63
40511: PUSH
40512: LD_INT 64
40514: PUSH
40515: LD_INT 65
40517: PUSH
40518: LD_INT 82
40520: PUSH
40521: LD_INT 83
40523: PUSH
40524: LD_INT 84
40526: PUSH
40527: LD_INT 85
40529: PUSH
40530: LD_INT 86
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: ST_TO_ADDR
40588: GO 40591
40590: POP
// if state > - 1 and state < 3 then
40591: LD_VAR 0 3
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: GREATER
40600: PUSH
40601: LD_VAR 0 3
40605: PUSH
40606: LD_INT 3
40608: LESS
40609: AND
40610: IFFALSE 40667
// for i in result do
40612: LD_ADDR_VAR 0 5
40616: PUSH
40617: LD_VAR 0 4
40621: PUSH
40622: FOR_IN
40623: IFFALSE 40665
// if GetTech ( i , side ) <> state then
40625: LD_VAR 0 5
40629: PPUSH
40630: LD_VAR 0 1
40634: PPUSH
40635: CALL_OW 321
40639: PUSH
40640: LD_VAR 0 3
40644: NONEQUAL
40645: IFFALSE 40663
// result := result diff i ;
40647: LD_ADDR_VAR 0 4
40651: PUSH
40652: LD_VAR 0 4
40656: PUSH
40657: LD_VAR 0 5
40661: DIFF
40662: ST_TO_ADDR
40663: GO 40622
40665: POP
40666: POP
// end ;
40667: LD_VAR 0 4
40671: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40672: LD_INT 0
40674: PPUSH
40675: PPUSH
40676: PPUSH
// result := true ;
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_INT 1
40684: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40685: LD_ADDR_VAR 0 5
40689: PUSH
40690: LD_VAR 0 2
40694: PPUSH
40695: CALL_OW 480
40699: ST_TO_ADDR
// if not tmp then
40700: LD_VAR 0 5
40704: NOT
40705: IFFALSE 40709
// exit ;
40707: GO 40758
// for i in tmp do
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_VAR 0 5
40718: PUSH
40719: FOR_IN
40720: IFFALSE 40756
// if GetTech ( i , side ) <> state_researched then
40722: LD_VAR 0 4
40726: PPUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 321
40736: PUSH
40737: LD_INT 2
40739: NONEQUAL
40740: IFFALSE 40754
// begin result := false ;
40742: LD_ADDR_VAR 0 3
40746: PUSH
40747: LD_INT 0
40749: ST_TO_ADDR
// exit ;
40750: POP
40751: POP
40752: GO 40758
// end ;
40754: GO 40719
40756: POP
40757: POP
// end ;
40758: LD_VAR 0 3
40762: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40763: LD_INT 0
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40778: LD_VAR 0 1
40782: NOT
40783: PUSH
40784: LD_VAR 0 1
40788: PPUSH
40789: CALL_OW 257
40793: PUSH
40794: LD_INT 9
40796: NONEQUAL
40797: OR
40798: IFFALSE 40802
// exit ;
40800: GO 41375
// side := GetSide ( unit ) ;
40802: LD_ADDR_VAR 0 9
40806: PUSH
40807: LD_VAR 0 1
40811: PPUSH
40812: CALL_OW 255
40816: ST_TO_ADDR
// tech_space := tech_spacanom ;
40817: LD_ADDR_VAR 0 12
40821: PUSH
40822: LD_INT 29
40824: ST_TO_ADDR
// tech_time := tech_taurad ;
40825: LD_ADDR_VAR 0 13
40829: PUSH
40830: LD_INT 28
40832: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40833: LD_ADDR_VAR 0 11
40837: PUSH
40838: LD_VAR 0 1
40842: PPUSH
40843: CALL_OW 310
40847: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40848: LD_VAR 0 11
40852: PPUSH
40853: CALL_OW 247
40857: PUSH
40858: LD_INT 2
40860: EQUAL
40861: IFFALSE 40865
// exit ;
40863: GO 41375
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40865: LD_ADDR_VAR 0 8
40869: PUSH
40870: LD_INT 81
40872: PUSH
40873: LD_VAR 0 9
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 3
40884: PUSH
40885: LD_INT 21
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PPUSH
40903: CALL_OW 69
40907: ST_TO_ADDR
// if not tmp then
40908: LD_VAR 0 8
40912: NOT
40913: IFFALSE 40917
// exit ;
40915: GO 41375
// if in_unit then
40917: LD_VAR 0 11
40921: IFFALSE 40945
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40923: LD_ADDR_VAR 0 10
40927: PUSH
40928: LD_VAR 0 8
40932: PPUSH
40933: LD_VAR 0 11
40937: PPUSH
40938: CALL_OW 74
40942: ST_TO_ADDR
40943: GO 40965
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40945: LD_ADDR_VAR 0 10
40949: PUSH
40950: LD_VAR 0 8
40954: PPUSH
40955: LD_VAR 0 1
40959: PPUSH
40960: CALL_OW 74
40964: ST_TO_ADDR
// if not enemy then
40965: LD_VAR 0 10
40969: NOT
40970: IFFALSE 40974
// exit ;
40972: GO 41375
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40974: LD_VAR 0 11
40978: PUSH
40979: LD_VAR 0 11
40983: PPUSH
40984: LD_VAR 0 10
40988: PPUSH
40989: CALL_OW 296
40993: PUSH
40994: LD_INT 13
40996: GREATER
40997: AND
40998: PUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: LD_VAR 0 10
41008: PPUSH
41009: CALL_OW 296
41013: PUSH
41014: LD_INT 12
41016: GREATER
41017: OR
41018: IFFALSE 41022
// exit ;
41020: GO 41375
// missile := [ 1 ] ;
41022: LD_ADDR_VAR 0 14
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41033: LD_VAR 0 9
41037: PPUSH
41038: LD_VAR 0 12
41042: PPUSH
41043: CALL_OW 325
41047: IFFALSE 41076
// missile := Replace ( missile , missile + 1 , 2 ) ;
41049: LD_ADDR_VAR 0 14
41053: PUSH
41054: LD_VAR 0 14
41058: PPUSH
41059: LD_VAR 0 14
41063: PUSH
41064: LD_INT 1
41066: PLUS
41067: PPUSH
41068: LD_INT 2
41070: PPUSH
41071: CALL_OW 1
41075: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41076: LD_VAR 0 9
41080: PPUSH
41081: LD_VAR 0 13
41085: PPUSH
41086: CALL_OW 325
41090: PUSH
41091: LD_VAR 0 10
41095: PPUSH
41096: CALL_OW 255
41100: PPUSH
41101: LD_VAR 0 13
41105: PPUSH
41106: CALL_OW 325
41110: NOT
41111: AND
41112: IFFALSE 41141
// missile := Replace ( missile , missile + 1 , 3 ) ;
41114: LD_ADDR_VAR 0 14
41118: PUSH
41119: LD_VAR 0 14
41123: PPUSH
41124: LD_VAR 0 14
41128: PUSH
41129: LD_INT 1
41131: PLUS
41132: PPUSH
41133: LD_INT 3
41135: PPUSH
41136: CALL_OW 1
41140: ST_TO_ADDR
// if missile < 2 then
41141: LD_VAR 0 14
41145: PUSH
41146: LD_INT 2
41148: LESS
41149: IFFALSE 41153
// exit ;
41151: GO 41375
// x := GetX ( enemy ) ;
41153: LD_ADDR_VAR 0 4
41157: PUSH
41158: LD_VAR 0 10
41162: PPUSH
41163: CALL_OW 250
41167: ST_TO_ADDR
// y := GetY ( enemy ) ;
41168: LD_ADDR_VAR 0 5
41172: PUSH
41173: LD_VAR 0 10
41177: PPUSH
41178: CALL_OW 251
41182: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41183: LD_ADDR_VAR 0 6
41187: PUSH
41188: LD_VAR 0 4
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PPUSH
41197: LD_INT 1
41199: PPUSH
41200: CALL_OW 12
41204: PLUS
41205: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41206: LD_ADDR_VAR 0 7
41210: PUSH
41211: LD_VAR 0 5
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PPUSH
41220: LD_INT 1
41222: PPUSH
41223: CALL_OW 12
41227: PLUS
41228: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41229: LD_VAR 0 6
41233: PPUSH
41234: LD_VAR 0 7
41238: PPUSH
41239: CALL_OW 488
41243: NOT
41244: IFFALSE 41266
// begin _x := x ;
41246: LD_ADDR_VAR 0 6
41250: PUSH
41251: LD_VAR 0 4
41255: ST_TO_ADDR
// _y := y ;
41256: LD_ADDR_VAR 0 7
41260: PUSH
41261: LD_VAR 0 5
41265: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41266: LD_ADDR_VAR 0 3
41270: PUSH
41271: LD_INT 1
41273: PPUSH
41274: LD_VAR 0 14
41278: PPUSH
41279: CALL_OW 12
41283: ST_TO_ADDR
// case i of 1 :
41284: LD_VAR 0 3
41288: PUSH
41289: LD_INT 1
41291: DOUBLE
41292: EQUAL
41293: IFTRUE 41297
41295: GO 41314
41297: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41298: LD_VAR 0 1
41302: PPUSH
41303: LD_VAR 0 10
41307: PPUSH
41308: CALL_OW 115
41312: GO 41375
41314: LD_INT 2
41316: DOUBLE
41317: EQUAL
41318: IFTRUE 41322
41320: GO 41344
41322: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41323: LD_VAR 0 1
41327: PPUSH
41328: LD_VAR 0 6
41332: PPUSH
41333: LD_VAR 0 7
41337: PPUSH
41338: CALL_OW 153
41342: GO 41375
41344: LD_INT 3
41346: DOUBLE
41347: EQUAL
41348: IFTRUE 41352
41350: GO 41374
41352: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41353: LD_VAR 0 1
41357: PPUSH
41358: LD_VAR 0 6
41362: PPUSH
41363: LD_VAR 0 7
41367: PPUSH
41368: CALL_OW 154
41372: GO 41375
41374: POP
// end ;
41375: LD_VAR 0 2
41379: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41380: LD_INT 0
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
// if not unit or not building then
41388: LD_VAR 0 1
41392: NOT
41393: PUSH
41394: LD_VAR 0 2
41398: NOT
41399: OR
41400: IFFALSE 41404
// exit ;
41402: GO 41562
// x := GetX ( building ) ;
41404: LD_ADDR_VAR 0 5
41408: PUSH
41409: LD_VAR 0 2
41413: PPUSH
41414: CALL_OW 250
41418: ST_TO_ADDR
// y := GetY ( building ) ;
41419: LD_ADDR_VAR 0 6
41423: PUSH
41424: LD_VAR 0 2
41428: PPUSH
41429: CALL_OW 251
41433: ST_TO_ADDR
// for i = 0 to 5 do
41434: LD_ADDR_VAR 0 4
41438: PUSH
41439: DOUBLE
41440: LD_INT 0
41442: DEC
41443: ST_TO_ADDR
41444: LD_INT 5
41446: PUSH
41447: FOR_TO
41448: IFFALSE 41560
// begin _x := ShiftX ( x , i , 3 ) ;
41450: LD_ADDR_VAR 0 7
41454: PUSH
41455: LD_VAR 0 5
41459: PPUSH
41460: LD_VAR 0 4
41464: PPUSH
41465: LD_INT 3
41467: PPUSH
41468: CALL_OW 272
41472: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41473: LD_ADDR_VAR 0 8
41477: PUSH
41478: LD_VAR 0 6
41482: PPUSH
41483: LD_VAR 0 4
41487: PPUSH
41488: LD_INT 3
41490: PPUSH
41491: CALL_OW 273
41495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41496: LD_VAR 0 7
41500: PPUSH
41501: LD_VAR 0 8
41505: PPUSH
41506: CALL_OW 488
41510: NOT
41511: IFFALSE 41515
// continue ;
41513: GO 41447
// if HexInfo ( _x , _y ) = 0 then
41515: LD_VAR 0 7
41519: PPUSH
41520: LD_VAR 0 8
41524: PPUSH
41525: CALL_OW 428
41529: PUSH
41530: LD_INT 0
41532: EQUAL
41533: IFFALSE 41558
// begin ComMoveXY ( unit , _x , _y ) ;
41535: LD_VAR 0 1
41539: PPUSH
41540: LD_VAR 0 7
41544: PPUSH
41545: LD_VAR 0 8
41549: PPUSH
41550: CALL_OW 111
// exit ;
41554: POP
41555: POP
41556: GO 41562
// end ; end ;
41558: GO 41447
41560: POP
41561: POP
// end ;
41562: LD_VAR 0 3
41566: RET
// export function ScanBase ( side , base_area ) ; begin
41567: LD_INT 0
41569: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41570: LD_ADDR_VAR 0 3
41574: PUSH
41575: LD_VAR 0 2
41579: PPUSH
41580: LD_INT 81
41582: PUSH
41583: LD_VAR 0 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PPUSH
41592: CALL_OW 70
41596: ST_TO_ADDR
// end ;
41597: LD_VAR 0 3
41601: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41602: LD_INT 0
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
// result := false ;
41608: LD_ADDR_VAR 0 2
41612: PUSH
41613: LD_INT 0
41615: ST_TO_ADDR
// side := GetSide ( unit ) ;
41616: LD_ADDR_VAR 0 3
41620: PUSH
41621: LD_VAR 0 1
41625: PPUSH
41626: CALL_OW 255
41630: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41631: LD_ADDR_VAR 0 4
41635: PUSH
41636: LD_VAR 0 1
41640: PPUSH
41641: CALL_OW 248
41645: ST_TO_ADDR
// case nat of 1 :
41646: LD_VAR 0 4
41650: PUSH
41651: LD_INT 1
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41670
41659: POP
// tech := tech_lassight ; 2 :
41660: LD_ADDR_VAR 0 5
41664: PUSH
41665: LD_INT 12
41667: ST_TO_ADDR
41668: GO 41709
41670: LD_INT 2
41672: DOUBLE
41673: EQUAL
41674: IFTRUE 41678
41676: GO 41689
41678: POP
// tech := tech_mortar ; 3 :
41679: LD_ADDR_VAR 0 5
41683: PUSH
41684: LD_INT 41
41686: ST_TO_ADDR
41687: GO 41709
41689: LD_INT 3
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41708
41697: POP
// tech := tech_bazooka ; end ;
41698: LD_ADDR_VAR 0 5
41702: PUSH
41703: LD_INT 44
41705: ST_TO_ADDR
41706: GO 41709
41708: POP
// if Researched ( side , tech ) then
41709: LD_VAR 0 3
41713: PPUSH
41714: LD_VAR 0 5
41718: PPUSH
41719: CALL_OW 325
41723: IFFALSE 41750
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41725: LD_ADDR_VAR 0 2
41729: PUSH
41730: LD_INT 5
41732: PUSH
41733: LD_INT 8
41735: PUSH
41736: LD_INT 9
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: LIST
41743: PUSH
41744: LD_VAR 0 4
41748: ARRAY
41749: ST_TO_ADDR
// end ;
41750: LD_VAR 0 2
41754: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41755: LD_INT 0
41757: PPUSH
41758: PPUSH
41759: PPUSH
// if not mines then
41760: LD_VAR 0 2
41764: NOT
41765: IFFALSE 41769
// exit ;
41767: GO 41913
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41769: LD_ADDR_VAR 0 5
41773: PUSH
41774: LD_INT 81
41776: PUSH
41777: LD_VAR 0 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 3
41788: PUSH
41789: LD_INT 21
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PPUSH
41807: CALL_OW 69
41811: ST_TO_ADDR
// for i in mines do
41812: LD_ADDR_VAR 0 4
41816: PUSH
41817: LD_VAR 0 2
41821: PUSH
41822: FOR_IN
41823: IFFALSE 41911
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41825: LD_VAR 0 4
41829: PUSH
41830: LD_INT 1
41832: ARRAY
41833: PPUSH
41834: LD_VAR 0 4
41838: PUSH
41839: LD_INT 2
41841: ARRAY
41842: PPUSH
41843: CALL_OW 458
41847: NOT
41848: IFFALSE 41852
// continue ;
41850: GO 41822
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41852: LD_VAR 0 4
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: PPUSH
41861: LD_VAR 0 4
41865: PUSH
41866: LD_INT 2
41868: ARRAY
41869: PPUSH
41870: CALL_OW 428
41874: PUSH
41875: LD_VAR 0 5
41879: IN
41880: IFFALSE 41909
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41882: LD_VAR 0 4
41886: PUSH
41887: LD_INT 1
41889: ARRAY
41890: PPUSH
41891: LD_VAR 0 4
41895: PUSH
41896: LD_INT 2
41898: ARRAY
41899: PPUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: CALL_OW 456
// end ;
41909: GO 41822
41911: POP
41912: POP
// end ;
41913: LD_VAR 0 3
41917: RET
// export function Count ( array ) ; var i ; begin
41918: LD_INT 0
41920: PPUSH
41921: PPUSH
// result := 0 ;
41922: LD_ADDR_VAR 0 2
41926: PUSH
41927: LD_INT 0
41929: ST_TO_ADDR
// for i in array do
41930: LD_ADDR_VAR 0 3
41934: PUSH
41935: LD_VAR 0 1
41939: PUSH
41940: FOR_IN
41941: IFFALSE 41965
// if i then
41943: LD_VAR 0 3
41947: IFFALSE 41963
// result := result + 1 ;
41949: LD_ADDR_VAR 0 2
41953: PUSH
41954: LD_VAR 0 2
41958: PUSH
41959: LD_INT 1
41961: PLUS
41962: ST_TO_ADDR
41963: GO 41940
41965: POP
41966: POP
// end ;
41967: LD_VAR 0 2
41971: RET
// export function IsEmpty ( building ) ; begin
41972: LD_INT 0
41974: PPUSH
// if not building then
41975: LD_VAR 0 1
41979: NOT
41980: IFFALSE 41984
// exit ;
41982: GO 42027
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41984: LD_ADDR_VAR 0 2
41988: PUSH
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 22
41996: PUSH
41997: LD_VAR 0 1
42001: PPUSH
42002: CALL_OW 255
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 58
42013: PUSH
42014: EMPTY
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PPUSH
42021: CALL_OW 69
42025: IN
42026: ST_TO_ADDR
// end ;
42027: LD_VAR 0 2
42031: RET
// export function IsNotFull ( building ) ; var places ; begin
42032: LD_INT 0
42034: PPUSH
42035: PPUSH
// if not building then
42036: LD_VAR 0 1
42040: NOT
42041: IFFALSE 42045
// exit ;
42043: GO 42216
// result := false ;
42045: LD_ADDR_VAR 0 2
42049: PUSH
42050: LD_INT 0
42052: ST_TO_ADDR
// places := 0 ;
42053: LD_ADDR_VAR 0 3
42057: PUSH
42058: LD_INT 0
42060: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42061: LD_VAR 0 1
42065: PPUSH
42066: CALL_OW 266
42070: PUSH
42071: LD_INT 0
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42133
42077: LD_INT 1
42079: DOUBLE
42080: EQUAL
42081: IFTRUE 42133
42083: LD_INT 6
42085: DOUBLE
42086: EQUAL
42087: IFTRUE 42133
42089: LD_INT 7
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42133
42095: LD_INT 8
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42133
42101: LD_INT 4
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42133
42107: LD_INT 5
42109: DOUBLE
42110: EQUAL
42111: IFTRUE 42133
42113: LD_INT 2
42115: DOUBLE
42116: EQUAL
42117: IFTRUE 42133
42119: LD_INT 3
42121: DOUBLE
42122: EQUAL
42123: IFTRUE 42133
42125: LD_INT 35
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42144
42133: POP
// places := 6 ; b_bunker , b_breastwork :
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_INT 6
42141: ST_TO_ADDR
42142: GO 42189
42144: LD_INT 32
42146: DOUBLE
42147: EQUAL
42148: IFTRUE 42158
42150: LD_INT 31
42152: DOUBLE
42153: EQUAL
42154: IFTRUE 42158
42156: GO 42169
42158: POP
// places := 1 ; b_control_tower :
42159: LD_ADDR_VAR 0 3
42163: PUSH
42164: LD_INT 1
42166: ST_TO_ADDR
42167: GO 42189
42169: LD_INT 36
42171: DOUBLE
42172: EQUAL
42173: IFTRUE 42177
42175: GO 42188
42177: POP
// places := 3 ; end ;
42178: LD_ADDR_VAR 0 3
42182: PUSH
42183: LD_INT 3
42185: ST_TO_ADDR
42186: GO 42189
42188: POP
// if places then
42189: LD_VAR 0 3
42193: IFFALSE 42216
// result := UnitsInside ( building ) < places ;
42195: LD_ADDR_VAR 0 2
42199: PUSH
42200: LD_VAR 0 1
42204: PPUSH
42205: CALL_OW 313
42209: PUSH
42210: LD_VAR 0 3
42214: LESS
42215: ST_TO_ADDR
// end ;
42216: LD_VAR 0 2
42220: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42221: LD_INT 0
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
// tmp := [ ] ;
42227: LD_ADDR_VAR 0 3
42231: PUSH
42232: EMPTY
42233: ST_TO_ADDR
// list := [ ] ;
42234: LD_ADDR_VAR 0 5
42238: PUSH
42239: EMPTY
42240: ST_TO_ADDR
// for i = 16 to 25 do
42241: LD_ADDR_VAR 0 4
42245: PUSH
42246: DOUBLE
42247: LD_INT 16
42249: DEC
42250: ST_TO_ADDR
42251: LD_INT 25
42253: PUSH
42254: FOR_TO
42255: IFFALSE 42328
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_VAR 0 3
42266: PUSH
42267: LD_INT 22
42269: PUSH
42270: LD_VAR 0 1
42274: PPUSH
42275: CALL_OW 255
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 91
42286: PUSH
42287: LD_VAR 0 1
42291: PUSH
42292: LD_INT 6
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 30
42302: PUSH
42303: LD_VAR 0 4
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: PPUSH
42320: CALL_OW 69
42324: ADD
42325: ST_TO_ADDR
42326: GO 42254
42328: POP
42329: POP
// for i = 1 to tmp do
42330: LD_ADDR_VAR 0 4
42334: PUSH
42335: DOUBLE
42336: LD_INT 1
42338: DEC
42339: ST_TO_ADDR
42340: LD_VAR 0 3
42344: PUSH
42345: FOR_TO
42346: IFFALSE 42434
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42348: LD_ADDR_VAR 0 5
42352: PUSH
42353: LD_VAR 0 5
42357: PUSH
42358: LD_VAR 0 3
42362: PUSH
42363: LD_VAR 0 4
42367: ARRAY
42368: PPUSH
42369: CALL_OW 266
42373: PUSH
42374: LD_VAR 0 3
42378: PUSH
42379: LD_VAR 0 4
42383: ARRAY
42384: PPUSH
42385: CALL_OW 250
42389: PUSH
42390: LD_VAR 0 3
42394: PUSH
42395: LD_VAR 0 4
42399: ARRAY
42400: PPUSH
42401: CALL_OW 251
42405: PUSH
42406: LD_VAR 0 3
42410: PUSH
42411: LD_VAR 0 4
42415: ARRAY
42416: PPUSH
42417: CALL_OW 254
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: ADD
42431: ST_TO_ADDR
42432: GO 42345
42434: POP
42435: POP
// result := list ;
42436: LD_ADDR_VAR 0 2
42440: PUSH
42441: LD_VAR 0 5
42445: ST_TO_ADDR
// end ;
42446: LD_VAR 0 2
42450: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42451: LD_INT 0
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
// if not factory then
42460: LD_VAR 0 1
42464: NOT
42465: IFFALSE 42469
// exit ;
42467: GO 43062
// if control = control_apeman then
42469: LD_VAR 0 4
42473: PUSH
42474: LD_INT 5
42476: EQUAL
42477: IFFALSE 42586
// begin tmp := UnitsInside ( factory ) ;
42479: LD_ADDR_VAR 0 8
42483: PUSH
42484: LD_VAR 0 1
42488: PPUSH
42489: CALL_OW 313
42493: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42494: LD_VAR 0 8
42498: PPUSH
42499: LD_INT 25
42501: PUSH
42502: LD_INT 12
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PPUSH
42509: CALL_OW 72
42513: NOT
42514: IFFALSE 42524
// control := control_manual ;
42516: LD_ADDR_VAR 0 4
42520: PUSH
42521: LD_INT 1
42523: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42524: LD_ADDR_VAR 0 8
42528: PUSH
42529: LD_VAR 0 1
42533: PPUSH
42534: CALL 42221 0 1
42538: ST_TO_ADDR
// if tmp then
42539: LD_VAR 0 8
42543: IFFALSE 42586
// begin for i in tmp do
42545: LD_ADDR_VAR 0 7
42549: PUSH
42550: LD_VAR 0 8
42554: PUSH
42555: FOR_IN
42556: IFFALSE 42584
// if i [ 1 ] = b_ext_radio then
42558: LD_VAR 0 7
42562: PUSH
42563: LD_INT 1
42565: ARRAY
42566: PUSH
42567: LD_INT 22
42569: EQUAL
42570: IFFALSE 42582
// begin control := control_remote ;
42572: LD_ADDR_VAR 0 4
42576: PUSH
42577: LD_INT 2
42579: ST_TO_ADDR
// break ;
42580: GO 42584
// end ;
42582: GO 42555
42584: POP
42585: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42586: LD_VAR 0 1
42590: PPUSH
42591: LD_VAR 0 2
42595: PPUSH
42596: LD_VAR 0 3
42600: PPUSH
42601: LD_VAR 0 4
42605: PPUSH
42606: LD_VAR 0 5
42610: PPUSH
42611: CALL_OW 448
42615: IFFALSE 42650
// begin result := [ chassis , engine , control , weapon ] ;
42617: LD_ADDR_VAR 0 6
42621: PUSH
42622: LD_VAR 0 2
42626: PUSH
42627: LD_VAR 0 3
42631: PUSH
42632: LD_VAR 0 4
42636: PUSH
42637: LD_VAR 0 5
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: ST_TO_ADDR
// exit ;
42648: GO 43062
// end ; _chassis := AvailableChassisList ( factory ) ;
42650: LD_ADDR_VAR 0 9
42654: PUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 475
42664: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42665: LD_ADDR_VAR 0 11
42669: PUSH
42670: LD_VAR 0 1
42674: PPUSH
42675: CALL_OW 476
42679: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42680: LD_ADDR_VAR 0 12
42684: PUSH
42685: LD_VAR 0 1
42689: PPUSH
42690: CALL_OW 477
42694: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42695: LD_ADDR_VAR 0 10
42699: PUSH
42700: LD_VAR 0 1
42704: PPUSH
42705: CALL_OW 478
42709: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42710: LD_VAR 0 9
42714: NOT
42715: PUSH
42716: LD_VAR 0 11
42720: NOT
42721: OR
42722: PUSH
42723: LD_VAR 0 12
42727: NOT
42728: OR
42729: PUSH
42730: LD_VAR 0 10
42734: NOT
42735: OR
42736: IFFALSE 42771
// begin result := [ chassis , engine , control , weapon ] ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_VAR 0 2
42747: PUSH
42748: LD_VAR 0 3
42752: PUSH
42753: LD_VAR 0 4
42757: PUSH
42758: LD_VAR 0 5
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: ST_TO_ADDR
// exit ;
42769: GO 43062
// end ; if not chassis in _chassis then
42771: LD_VAR 0 2
42775: PUSH
42776: LD_VAR 0 9
42780: IN
42781: NOT
42782: IFFALSE 42808
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42784: LD_ADDR_VAR 0 2
42788: PUSH
42789: LD_VAR 0 9
42793: PUSH
42794: LD_INT 1
42796: PPUSH
42797: LD_VAR 0 9
42801: PPUSH
42802: CALL_OW 12
42806: ARRAY
42807: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42808: LD_VAR 0 2
42812: PPUSH
42813: LD_VAR 0 3
42817: PPUSH
42818: CALL 43067 0 2
42822: NOT
42823: IFFALSE 42882
// repeat engine := _engine [ 1 ] ;
42825: LD_ADDR_VAR 0 3
42829: PUSH
42830: LD_VAR 0 11
42834: PUSH
42835: LD_INT 1
42837: ARRAY
42838: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42839: LD_ADDR_VAR 0 11
42843: PUSH
42844: LD_VAR 0 11
42848: PPUSH
42849: LD_INT 1
42851: PPUSH
42852: CALL_OW 3
42856: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42857: LD_VAR 0 2
42861: PPUSH
42862: LD_VAR 0 3
42866: PPUSH
42867: CALL 43067 0 2
42871: PUSH
42872: LD_VAR 0 11
42876: PUSH
42877: EMPTY
42878: EQUAL
42879: OR
42880: IFFALSE 42825
// if not control in _control then
42882: LD_VAR 0 4
42886: PUSH
42887: LD_VAR 0 12
42891: IN
42892: NOT
42893: IFFALSE 42919
// control := _control [ rand ( 1 , _control ) ] ;
42895: LD_ADDR_VAR 0 4
42899: PUSH
42900: LD_VAR 0 12
42904: PUSH
42905: LD_INT 1
42907: PPUSH
42908: LD_VAR 0 12
42912: PPUSH
42913: CALL_OW 12
42917: ARRAY
42918: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42919: LD_VAR 0 2
42923: PPUSH
42924: LD_VAR 0 5
42928: PPUSH
42929: CALL 43287 0 2
42933: NOT
42934: IFFALSE 42993
// repeat weapon := _weapon [ 1 ] ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: LD_VAR 0 10
42945: PUSH
42946: LD_INT 1
42948: ARRAY
42949: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42950: LD_ADDR_VAR 0 10
42954: PUSH
42955: LD_VAR 0 10
42959: PPUSH
42960: LD_INT 1
42962: PPUSH
42963: CALL_OW 3
42967: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42968: LD_VAR 0 2
42972: PPUSH
42973: LD_VAR 0 5
42977: PPUSH
42978: CALL 43287 0 2
42982: PUSH
42983: LD_VAR 0 10
42987: PUSH
42988: EMPTY
42989: EQUAL
42990: OR
42991: IFFALSE 42936
// result := [ ] ;
42993: LD_ADDR_VAR 0 6
42997: PUSH
42998: EMPTY
42999: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43000: LD_VAR 0 1
43004: PPUSH
43005: LD_VAR 0 2
43009: PPUSH
43010: LD_VAR 0 3
43014: PPUSH
43015: LD_VAR 0 4
43019: PPUSH
43020: LD_VAR 0 5
43024: PPUSH
43025: CALL_OW 448
43029: IFFALSE 43062
// result := [ chassis , engine , control , weapon ] ;
43031: LD_ADDR_VAR 0 6
43035: PUSH
43036: LD_VAR 0 2
43040: PUSH
43041: LD_VAR 0 3
43045: PUSH
43046: LD_VAR 0 4
43050: PUSH
43051: LD_VAR 0 5
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: ST_TO_ADDR
// end ;
43062: LD_VAR 0 6
43066: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43067: LD_INT 0
43069: PPUSH
// if not chassis or not engine then
43070: LD_VAR 0 1
43074: NOT
43075: PUSH
43076: LD_VAR 0 2
43080: NOT
43081: OR
43082: IFFALSE 43086
// exit ;
43084: GO 43282
// case engine of engine_solar :
43086: LD_VAR 0 2
43090: PUSH
43091: LD_INT 2
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 43137
43099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43100: LD_ADDR_VAR 0 3
43104: PUSH
43105: LD_INT 11
43107: PUSH
43108: LD_INT 12
43110: PUSH
43111: LD_INT 13
43113: PUSH
43114: LD_INT 14
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
43135: GO 43266
43137: LD_INT 1
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43207
43145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43146: LD_ADDR_VAR 0 3
43150: PUSH
43151: LD_INT 11
43153: PUSH
43154: LD_INT 12
43156: PUSH
43157: LD_INT 13
43159: PUSH
43160: LD_INT 14
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: LD_INT 3
43171: PUSH
43172: LD_INT 4
43174: PUSH
43175: LD_INT 5
43177: PUSH
43178: LD_INT 21
43180: PUSH
43181: LD_INT 23
43183: PUSH
43184: LD_INT 22
43186: PUSH
43187: LD_INT 24
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: ST_TO_ADDR
43205: GO 43266
43207: LD_INT 3
43209: DOUBLE
43210: EQUAL
43211: IFTRUE 43215
43213: GO 43265
43215: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43216: LD_ADDR_VAR 0 3
43220: PUSH
43221: LD_INT 13
43223: PUSH
43224: LD_INT 14
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: LD_INT 4
43235: PUSH
43236: LD_INT 5
43238: PUSH
43239: LD_INT 21
43241: PUSH
43242: LD_INT 22
43244: PUSH
43245: LD_INT 23
43247: PUSH
43248: LD_INT 24
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: ST_TO_ADDR
43263: GO 43266
43265: POP
// result := ( chassis in result ) ;
43266: LD_ADDR_VAR 0 3
43270: PUSH
43271: LD_VAR 0 1
43275: PUSH
43276: LD_VAR 0 3
43280: IN
43281: ST_TO_ADDR
// end ;
43282: LD_VAR 0 3
43286: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43287: LD_INT 0
43289: PPUSH
// if not chassis or not weapon then
43290: LD_VAR 0 1
43294: NOT
43295: PUSH
43296: LD_VAR 0 2
43300: NOT
43301: OR
43302: IFFALSE 43306
// exit ;
43304: GO 44366
// case weapon of us_machine_gun :
43306: LD_VAR 0 2
43310: PUSH
43311: LD_INT 2
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43319
43317: GO 43349
43319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43320: LD_ADDR_VAR 0 3
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: LD_INT 4
43336: PUSH
43337: LD_INT 5
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: ST_TO_ADDR
43347: GO 44350
43349: LD_INT 3
43351: DOUBLE
43352: EQUAL
43353: IFTRUE 43357
43355: GO 43387
43357: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43358: LD_ADDR_VAR 0 3
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 4
43374: PUSH
43375: LD_INT 5
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: ST_TO_ADDR
43385: GO 44350
43387: LD_INT 11
43389: DOUBLE
43390: EQUAL
43391: IFTRUE 43395
43393: GO 43425
43395: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 3
43409: PUSH
43410: LD_INT 4
43412: PUSH
43413: LD_INT 5
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: ST_TO_ADDR
43423: GO 44350
43425: LD_INT 4
43427: DOUBLE
43428: EQUAL
43429: IFTRUE 43433
43431: GO 43459
43433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43434: LD_ADDR_VAR 0 3
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 4
43447: PUSH
43448: LD_INT 5
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
43457: GO 44350
43459: LD_INT 5
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43467
43465: GO 43493
43467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43468: LD_ADDR_VAR 0 3
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: LD_INT 4
43481: PUSH
43482: LD_INT 5
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
43491: GO 44350
43493: LD_INT 9
43495: DOUBLE
43496: EQUAL
43497: IFTRUE 43501
43499: GO 43527
43501: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 4
43515: PUSH
43516: LD_INT 5
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: ST_TO_ADDR
43525: GO 44350
43527: LD_INT 7
43529: DOUBLE
43530: EQUAL
43531: IFTRUE 43535
43533: GO 43561
43535: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 3
43546: PUSH
43547: LD_INT 4
43549: PUSH
43550: LD_INT 5
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: ST_TO_ADDR
43559: GO 44350
43561: LD_INT 12
43563: DOUBLE
43564: EQUAL
43565: IFTRUE 43569
43567: GO 43595
43569: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43570: LD_ADDR_VAR 0 3
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: LD_INT 3
43580: PUSH
43581: LD_INT 4
43583: PUSH
43584: LD_INT 5
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
43593: GO 44350
43595: LD_INT 13
43597: DOUBLE
43598: EQUAL
43599: IFTRUE 43603
43601: GO 43629
43603: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43604: LD_ADDR_VAR 0 3
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: LD_INT 4
43617: PUSH
43618: LD_INT 5
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: ST_TO_ADDR
43627: GO 44350
43629: LD_INT 14
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43655
43637: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: LD_INT 4
43645: PUSH
43646: LD_INT 5
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: ST_TO_ADDR
43653: GO 44350
43655: LD_INT 6
43657: DOUBLE
43658: EQUAL
43659: IFTRUE 43663
43661: GO 43681
43663: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43664: LD_ADDR_VAR 0 3
43668: PUSH
43669: LD_INT 4
43671: PUSH
43672: LD_INT 5
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: ST_TO_ADDR
43679: GO 44350
43681: LD_INT 10
43683: DOUBLE
43684: EQUAL
43685: IFTRUE 43689
43687: GO 43707
43689: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43690: LD_ADDR_VAR 0 3
43694: PUSH
43695: LD_INT 4
43697: PUSH
43698: LD_INT 5
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: ST_TO_ADDR
43705: GO 44350
43707: LD_INT 22
43709: DOUBLE
43710: EQUAL
43711: IFTRUE 43715
43713: GO 43741
43715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43716: LD_ADDR_VAR 0 3
43720: PUSH
43721: LD_INT 11
43723: PUSH
43724: LD_INT 12
43726: PUSH
43727: LD_INT 13
43729: PUSH
43730: LD_INT 14
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: ST_TO_ADDR
43739: GO 44350
43741: LD_INT 23
43743: DOUBLE
43744: EQUAL
43745: IFTRUE 43749
43747: GO 43775
43749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43750: LD_ADDR_VAR 0 3
43754: PUSH
43755: LD_INT 11
43757: PUSH
43758: LD_INT 12
43760: PUSH
43761: LD_INT 13
43763: PUSH
43764: LD_INT 14
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
43773: GO 44350
43775: LD_INT 24
43777: DOUBLE
43778: EQUAL
43779: IFTRUE 43783
43781: GO 43809
43783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43784: LD_ADDR_VAR 0 3
43788: PUSH
43789: LD_INT 11
43791: PUSH
43792: LD_INT 12
43794: PUSH
43795: LD_INT 13
43797: PUSH
43798: LD_INT 14
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
43807: GO 44350
43809: LD_INT 30
43811: DOUBLE
43812: EQUAL
43813: IFTRUE 43817
43815: GO 43843
43817: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43818: LD_ADDR_VAR 0 3
43822: PUSH
43823: LD_INT 11
43825: PUSH
43826: LD_INT 12
43828: PUSH
43829: LD_INT 13
43831: PUSH
43832: LD_INT 14
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: ST_TO_ADDR
43841: GO 44350
43843: LD_INT 25
43845: DOUBLE
43846: EQUAL
43847: IFTRUE 43851
43849: GO 43869
43851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43852: LD_ADDR_VAR 0 3
43856: PUSH
43857: LD_INT 13
43859: PUSH
43860: LD_INT 14
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: ST_TO_ADDR
43867: GO 44350
43869: LD_INT 27
43871: DOUBLE
43872: EQUAL
43873: IFTRUE 43877
43875: GO 43895
43877: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43878: LD_ADDR_VAR 0 3
43882: PUSH
43883: LD_INT 13
43885: PUSH
43886: LD_INT 14
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: ST_TO_ADDR
43893: GO 44350
43895: LD_INT 92
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43903
43901: GO 43929
43903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43904: LD_ADDR_VAR 0 3
43908: PUSH
43909: LD_INT 11
43911: PUSH
43912: LD_INT 12
43914: PUSH
43915: LD_INT 13
43917: PUSH
43918: LD_INT 14
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
43927: GO 44350
43929: LD_INT 28
43931: DOUBLE
43932: EQUAL
43933: IFTRUE 43937
43935: GO 43955
43937: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43938: LD_ADDR_VAR 0 3
43942: PUSH
43943: LD_INT 13
43945: PUSH
43946: LD_INT 14
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: ST_TO_ADDR
43953: GO 44350
43955: LD_INT 29
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 43963
43961: GO 43981
43963: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_INT 13
43971: PUSH
43972: LD_INT 14
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: ST_TO_ADDR
43979: GO 44350
43981: LD_INT 31
43983: DOUBLE
43984: EQUAL
43985: IFTRUE 43989
43987: GO 44007
43989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: LD_INT 13
43997: PUSH
43998: LD_INT 14
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: ST_TO_ADDR
44005: GO 44350
44007: LD_INT 26
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44015
44013: GO 44033
44015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_INT 13
44023: PUSH
44024: LD_INT 14
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: ST_TO_ADDR
44031: GO 44350
44033: LD_INT 42
44035: DOUBLE
44036: EQUAL
44037: IFTRUE 44041
44039: GO 44067
44041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44042: LD_ADDR_VAR 0 3
44046: PUSH
44047: LD_INT 21
44049: PUSH
44050: LD_INT 22
44052: PUSH
44053: LD_INT 23
44055: PUSH
44056: LD_INT 24
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
44065: GO 44350
44067: LD_INT 43
44069: DOUBLE
44070: EQUAL
44071: IFTRUE 44075
44073: GO 44101
44075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44076: LD_ADDR_VAR 0 3
44080: PUSH
44081: LD_INT 21
44083: PUSH
44084: LD_INT 22
44086: PUSH
44087: LD_INT 23
44089: PUSH
44090: LD_INT 24
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: ST_TO_ADDR
44099: GO 44350
44101: LD_INT 44
44103: DOUBLE
44104: EQUAL
44105: IFTRUE 44109
44107: GO 44135
44109: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44110: LD_ADDR_VAR 0 3
44114: PUSH
44115: LD_INT 21
44117: PUSH
44118: LD_INT 22
44120: PUSH
44121: LD_INT 23
44123: PUSH
44124: LD_INT 24
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
44133: GO 44350
44135: LD_INT 45
44137: DOUBLE
44138: EQUAL
44139: IFTRUE 44143
44141: GO 44169
44143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44144: LD_ADDR_VAR 0 3
44148: PUSH
44149: LD_INT 21
44151: PUSH
44152: LD_INT 22
44154: PUSH
44155: LD_INT 23
44157: PUSH
44158: LD_INT 24
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
44167: GO 44350
44169: LD_INT 49
44171: DOUBLE
44172: EQUAL
44173: IFTRUE 44177
44175: GO 44203
44177: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44178: LD_ADDR_VAR 0 3
44182: PUSH
44183: LD_INT 21
44185: PUSH
44186: LD_INT 22
44188: PUSH
44189: LD_INT 23
44191: PUSH
44192: LD_INT 24
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: ST_TO_ADDR
44201: GO 44350
44203: LD_INT 51
44205: DOUBLE
44206: EQUAL
44207: IFTRUE 44211
44209: GO 44237
44211: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44212: LD_ADDR_VAR 0 3
44216: PUSH
44217: LD_INT 21
44219: PUSH
44220: LD_INT 22
44222: PUSH
44223: LD_INT 23
44225: PUSH
44226: LD_INT 24
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: ST_TO_ADDR
44235: GO 44350
44237: LD_INT 52
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44245
44243: GO 44271
44245: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44246: LD_ADDR_VAR 0 3
44250: PUSH
44251: LD_INT 21
44253: PUSH
44254: LD_INT 22
44256: PUSH
44257: LD_INT 23
44259: PUSH
44260: LD_INT 24
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
44269: GO 44350
44271: LD_INT 53
44273: DOUBLE
44274: EQUAL
44275: IFTRUE 44279
44277: GO 44297
44279: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44280: LD_ADDR_VAR 0 3
44284: PUSH
44285: LD_INT 23
44287: PUSH
44288: LD_INT 24
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: ST_TO_ADDR
44295: GO 44350
44297: LD_INT 46
44299: DOUBLE
44300: EQUAL
44301: IFTRUE 44305
44303: GO 44323
44305: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44306: LD_ADDR_VAR 0 3
44310: PUSH
44311: LD_INT 23
44313: PUSH
44314: LD_INT 24
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: ST_TO_ADDR
44321: GO 44350
44323: LD_INT 47
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44331
44329: GO 44349
44331: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_INT 23
44339: PUSH
44340: LD_INT 24
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: ST_TO_ADDR
44347: GO 44350
44349: POP
// result := ( chassis in result ) ;
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: LD_VAR 0 1
44359: PUSH
44360: LD_VAR 0 3
44364: IN
44365: ST_TO_ADDR
// end ;
44366: LD_VAR 0 3
44370: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44371: LD_INT 0
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
// result := array ;
44380: LD_ADDR_VAR 0 5
44384: PUSH
44385: LD_VAR 0 1
44389: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44390: LD_VAR 0 1
44394: NOT
44395: PUSH
44396: LD_VAR 0 2
44400: NOT
44401: OR
44402: PUSH
44403: LD_VAR 0 3
44407: NOT
44408: OR
44409: PUSH
44410: LD_VAR 0 2
44414: PUSH
44415: LD_VAR 0 1
44419: GREATER
44420: OR
44421: PUSH
44422: LD_VAR 0 3
44426: PUSH
44427: LD_VAR 0 1
44431: GREATER
44432: OR
44433: IFFALSE 44437
// exit ;
44435: GO 44733
// if direction then
44437: LD_VAR 0 4
44441: IFFALSE 44505
// begin d := 1 ;
44443: LD_ADDR_VAR 0 9
44447: PUSH
44448: LD_INT 1
44450: ST_TO_ADDR
// if i_from > i_to then
44451: LD_VAR 0 2
44455: PUSH
44456: LD_VAR 0 3
44460: GREATER
44461: IFFALSE 44487
// length := ( array - i_from ) + i_to else
44463: LD_ADDR_VAR 0 11
44467: PUSH
44468: LD_VAR 0 1
44472: PUSH
44473: LD_VAR 0 2
44477: MINUS
44478: PUSH
44479: LD_VAR 0 3
44483: PLUS
44484: ST_TO_ADDR
44485: GO 44503
// length := i_to - i_from ;
44487: LD_ADDR_VAR 0 11
44491: PUSH
44492: LD_VAR 0 3
44496: PUSH
44497: LD_VAR 0 2
44501: MINUS
44502: ST_TO_ADDR
// end else
44503: GO 44566
// begin d := - 1 ;
44505: LD_ADDR_VAR 0 9
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: ST_TO_ADDR
// if i_from > i_to then
44514: LD_VAR 0 2
44518: PUSH
44519: LD_VAR 0 3
44523: GREATER
44524: IFFALSE 44544
// length := i_from - i_to else
44526: LD_ADDR_VAR 0 11
44530: PUSH
44531: LD_VAR 0 2
44535: PUSH
44536: LD_VAR 0 3
44540: MINUS
44541: ST_TO_ADDR
44542: GO 44566
// length := ( array - i_to ) + i_from ;
44544: LD_ADDR_VAR 0 11
44548: PUSH
44549: LD_VAR 0 1
44553: PUSH
44554: LD_VAR 0 3
44558: MINUS
44559: PUSH
44560: LD_VAR 0 2
44564: PLUS
44565: ST_TO_ADDR
// end ; if not length then
44566: LD_VAR 0 11
44570: NOT
44571: IFFALSE 44575
// exit ;
44573: GO 44733
// tmp := array ;
44575: LD_ADDR_VAR 0 10
44579: PUSH
44580: LD_VAR 0 1
44584: ST_TO_ADDR
// for i = 1 to length do
44585: LD_ADDR_VAR 0 6
44589: PUSH
44590: DOUBLE
44591: LD_INT 1
44593: DEC
44594: ST_TO_ADDR
44595: LD_VAR 0 11
44599: PUSH
44600: FOR_TO
44601: IFFALSE 44721
// begin for j = 1 to array do
44603: LD_ADDR_VAR 0 7
44607: PUSH
44608: DOUBLE
44609: LD_INT 1
44611: DEC
44612: ST_TO_ADDR
44613: LD_VAR 0 1
44617: PUSH
44618: FOR_TO
44619: IFFALSE 44707
// begin k := j + d ;
44621: LD_ADDR_VAR 0 8
44625: PUSH
44626: LD_VAR 0 7
44630: PUSH
44631: LD_VAR 0 9
44635: PLUS
44636: ST_TO_ADDR
// if k > array then
44637: LD_VAR 0 8
44641: PUSH
44642: LD_VAR 0 1
44646: GREATER
44647: IFFALSE 44657
// k := 1 ;
44649: LD_ADDR_VAR 0 8
44653: PUSH
44654: LD_INT 1
44656: ST_TO_ADDR
// if not k then
44657: LD_VAR 0 8
44661: NOT
44662: IFFALSE 44674
// k := array ;
44664: LD_ADDR_VAR 0 8
44668: PUSH
44669: LD_VAR 0 1
44673: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44674: LD_ADDR_VAR 0 10
44678: PUSH
44679: LD_VAR 0 10
44683: PPUSH
44684: LD_VAR 0 8
44688: PPUSH
44689: LD_VAR 0 1
44693: PUSH
44694: LD_VAR 0 7
44698: ARRAY
44699: PPUSH
44700: CALL_OW 1
44704: ST_TO_ADDR
// end ;
44705: GO 44618
44707: POP
44708: POP
// array := tmp ;
44709: LD_ADDR_VAR 0 1
44713: PUSH
44714: LD_VAR 0 10
44718: ST_TO_ADDR
// end ;
44719: GO 44600
44721: POP
44722: POP
// result := array ;
44723: LD_ADDR_VAR 0 5
44727: PUSH
44728: LD_VAR 0 1
44732: ST_TO_ADDR
// end ;
44733: LD_VAR 0 5
44737: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44738: LD_INT 0
44740: PPUSH
44741: PPUSH
// result := 0 ;
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: LD_INT 0
44749: ST_TO_ADDR
// if not array or not value in array then
44750: LD_VAR 0 1
44754: NOT
44755: PUSH
44756: LD_VAR 0 2
44760: PUSH
44761: LD_VAR 0 1
44765: IN
44766: NOT
44767: OR
44768: IFFALSE 44772
// exit ;
44770: GO 44826
// for i = 1 to array do
44772: LD_ADDR_VAR 0 4
44776: PUSH
44777: DOUBLE
44778: LD_INT 1
44780: DEC
44781: ST_TO_ADDR
44782: LD_VAR 0 1
44786: PUSH
44787: FOR_TO
44788: IFFALSE 44824
// if value = array [ i ] then
44790: LD_VAR 0 2
44794: PUSH
44795: LD_VAR 0 1
44799: PUSH
44800: LD_VAR 0 4
44804: ARRAY
44805: EQUAL
44806: IFFALSE 44822
// begin result := i ;
44808: LD_ADDR_VAR 0 3
44812: PUSH
44813: LD_VAR 0 4
44817: ST_TO_ADDR
// exit ;
44818: POP
44819: POP
44820: GO 44826
// end ;
44822: GO 44787
44824: POP
44825: POP
// end ;
44826: LD_VAR 0 3
44830: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44831: LD_INT 0
44833: PPUSH
// vc_chassis := chassis ;
44834: LD_ADDR_OWVAR 37
44838: PUSH
44839: LD_VAR 0 1
44843: ST_TO_ADDR
// vc_engine := engine ;
44844: LD_ADDR_OWVAR 39
44848: PUSH
44849: LD_VAR 0 2
44853: ST_TO_ADDR
// vc_control := control ;
44854: LD_ADDR_OWVAR 38
44858: PUSH
44859: LD_VAR 0 3
44863: ST_TO_ADDR
// vc_weapon := weapon ;
44864: LD_ADDR_OWVAR 40
44868: PUSH
44869: LD_VAR 0 4
44873: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44874: LD_ADDR_OWVAR 41
44878: PUSH
44879: LD_VAR 0 5
44883: ST_TO_ADDR
// end ;
44884: LD_VAR 0 6
44888: RET
// export function WantPlant ( unit ) ; var task ; begin
44889: LD_INT 0
44891: PPUSH
44892: PPUSH
// result := false ;
44893: LD_ADDR_VAR 0 2
44897: PUSH
44898: LD_INT 0
44900: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44901: LD_ADDR_VAR 0 3
44905: PUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 437
44915: ST_TO_ADDR
// if task then
44916: LD_VAR 0 3
44920: IFFALSE 44948
// if task [ 1 ] [ 1 ] = p then
44922: LD_VAR 0 3
44926: PUSH
44927: LD_INT 1
44929: ARRAY
44930: PUSH
44931: LD_INT 1
44933: ARRAY
44934: PUSH
44935: LD_STRING p
44937: EQUAL
44938: IFFALSE 44948
// result := true ;
44940: LD_ADDR_VAR 0 2
44944: PUSH
44945: LD_INT 1
44947: ST_TO_ADDR
// end ;
44948: LD_VAR 0 2
44952: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44953: LD_INT 0
44955: PPUSH
44956: PPUSH
44957: PPUSH
44958: PPUSH
// if pos < 1 then
44959: LD_VAR 0 2
44963: PUSH
44964: LD_INT 1
44966: LESS
44967: IFFALSE 44971
// exit ;
44969: GO 45274
// if pos = 1 then
44971: LD_VAR 0 2
44975: PUSH
44976: LD_INT 1
44978: EQUAL
44979: IFFALSE 45012
// result := Replace ( arr , pos [ 1 ] , value ) else
44981: LD_ADDR_VAR 0 4
44985: PUSH
44986: LD_VAR 0 1
44990: PPUSH
44991: LD_VAR 0 2
44995: PUSH
44996: LD_INT 1
44998: ARRAY
44999: PPUSH
45000: LD_VAR 0 3
45004: PPUSH
45005: CALL_OW 1
45009: ST_TO_ADDR
45010: GO 45274
// begin tmp := arr ;
45012: LD_ADDR_VAR 0 6
45016: PUSH
45017: LD_VAR 0 1
45021: ST_TO_ADDR
// s_arr := [ tmp ] ;
45022: LD_ADDR_VAR 0 7
45026: PUSH
45027: LD_VAR 0 6
45031: PUSH
45032: EMPTY
45033: LIST
45034: ST_TO_ADDR
// for i = 1 to pos - 1 do
45035: LD_ADDR_VAR 0 5
45039: PUSH
45040: DOUBLE
45041: LD_INT 1
45043: DEC
45044: ST_TO_ADDR
45045: LD_VAR 0 2
45049: PUSH
45050: LD_INT 1
45052: MINUS
45053: PUSH
45054: FOR_TO
45055: IFFALSE 45100
// begin tmp := tmp [ pos [ i ] ] ;
45057: LD_ADDR_VAR 0 6
45061: PUSH
45062: LD_VAR 0 6
45066: PUSH
45067: LD_VAR 0 2
45071: PUSH
45072: LD_VAR 0 5
45076: ARRAY
45077: ARRAY
45078: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45079: LD_ADDR_VAR 0 7
45083: PUSH
45084: LD_VAR 0 7
45088: PUSH
45089: LD_VAR 0 6
45093: PUSH
45094: EMPTY
45095: LIST
45096: ADD
45097: ST_TO_ADDR
// end ;
45098: GO 45054
45100: POP
45101: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45102: LD_ADDR_VAR 0 6
45106: PUSH
45107: LD_VAR 0 6
45111: PPUSH
45112: LD_VAR 0 2
45116: PUSH
45117: LD_VAR 0 2
45121: ARRAY
45122: PPUSH
45123: LD_VAR 0 3
45127: PPUSH
45128: CALL_OW 1
45132: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45133: LD_ADDR_VAR 0 7
45137: PUSH
45138: LD_VAR 0 7
45142: PPUSH
45143: LD_VAR 0 7
45147: PPUSH
45148: LD_VAR 0 6
45152: PPUSH
45153: CALL_OW 1
45157: ST_TO_ADDR
// for i = s_arr downto 2 do
45158: LD_ADDR_VAR 0 5
45162: PUSH
45163: DOUBLE
45164: LD_VAR 0 7
45168: INC
45169: ST_TO_ADDR
45170: LD_INT 2
45172: PUSH
45173: FOR_DOWNTO
45174: IFFALSE 45258
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45176: LD_ADDR_VAR 0 6
45180: PUSH
45181: LD_VAR 0 7
45185: PUSH
45186: LD_VAR 0 5
45190: PUSH
45191: LD_INT 1
45193: MINUS
45194: ARRAY
45195: PPUSH
45196: LD_VAR 0 2
45200: PUSH
45201: LD_VAR 0 5
45205: PUSH
45206: LD_INT 1
45208: MINUS
45209: ARRAY
45210: PPUSH
45211: LD_VAR 0 7
45215: PUSH
45216: LD_VAR 0 5
45220: ARRAY
45221: PPUSH
45222: CALL_OW 1
45226: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45227: LD_ADDR_VAR 0 7
45231: PUSH
45232: LD_VAR 0 7
45236: PPUSH
45237: LD_VAR 0 5
45241: PUSH
45242: LD_INT 1
45244: MINUS
45245: PPUSH
45246: LD_VAR 0 6
45250: PPUSH
45251: CALL_OW 1
45255: ST_TO_ADDR
// end ;
45256: GO 45173
45258: POP
45259: POP
// result := s_arr [ 1 ] ;
45260: LD_ADDR_VAR 0 4
45264: PUSH
45265: LD_VAR 0 7
45269: PUSH
45270: LD_INT 1
45272: ARRAY
45273: ST_TO_ADDR
// end ; end ;
45274: LD_VAR 0 4
45278: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45279: LD_INT 0
45281: PPUSH
45282: PPUSH
// if not list then
45283: LD_VAR 0 1
45287: NOT
45288: IFFALSE 45292
// exit ;
45290: GO 45383
// i := list [ pos1 ] ;
45292: LD_ADDR_VAR 0 5
45296: PUSH
45297: LD_VAR 0 1
45301: PUSH
45302: LD_VAR 0 2
45306: ARRAY
45307: ST_TO_ADDR
// if not i then
45308: LD_VAR 0 5
45312: NOT
45313: IFFALSE 45317
// exit ;
45315: GO 45383
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45317: LD_ADDR_VAR 0 1
45321: PUSH
45322: LD_VAR 0 1
45326: PPUSH
45327: LD_VAR 0 2
45331: PPUSH
45332: LD_VAR 0 1
45336: PUSH
45337: LD_VAR 0 3
45341: ARRAY
45342: PPUSH
45343: CALL_OW 1
45347: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45348: LD_ADDR_VAR 0 1
45352: PUSH
45353: LD_VAR 0 1
45357: PPUSH
45358: LD_VAR 0 3
45362: PPUSH
45363: LD_VAR 0 5
45367: PPUSH
45368: CALL_OW 1
45372: ST_TO_ADDR
// result := list ;
45373: LD_ADDR_VAR 0 4
45377: PUSH
45378: LD_VAR 0 1
45382: ST_TO_ADDR
// end ;
45383: LD_VAR 0 4
45387: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45388: LD_INT 0
45390: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45391: LD_ADDR_VAR 0 5
45395: PUSH
45396: LD_VAR 0 1
45400: PPUSH
45401: CALL_OW 250
45405: PPUSH
45406: LD_VAR 0 1
45410: PPUSH
45411: CALL_OW 251
45415: PPUSH
45416: LD_VAR 0 2
45420: PPUSH
45421: LD_VAR 0 3
45425: PPUSH
45426: LD_VAR 0 4
45430: PPUSH
45431: CALL 45441 0 5
45435: ST_TO_ADDR
// end ;
45436: LD_VAR 0 5
45440: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45441: LD_INT 0
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
// if not list then
45447: LD_VAR 0 3
45451: NOT
45452: IFFALSE 45456
// exit ;
45454: GO 45844
// result := [ ] ;
45456: LD_ADDR_VAR 0 6
45460: PUSH
45461: EMPTY
45462: ST_TO_ADDR
// for i in list do
45463: LD_ADDR_VAR 0 7
45467: PUSH
45468: LD_VAR 0 3
45472: PUSH
45473: FOR_IN
45474: IFFALSE 45676
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45476: LD_ADDR_VAR 0 9
45480: PUSH
45481: LD_VAR 0 7
45485: PPUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: LD_VAR 0 2
45495: PPUSH
45496: CALL_OW 297
45500: ST_TO_ADDR
// if not result then
45501: LD_VAR 0 6
45505: NOT
45506: IFFALSE 45532
// result := [ [ i , tmp ] ] else
45508: LD_ADDR_VAR 0 6
45512: PUSH
45513: LD_VAR 0 7
45517: PUSH
45518: LD_VAR 0 9
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: EMPTY
45528: LIST
45529: ST_TO_ADDR
45530: GO 45674
// begin if result [ result ] [ 2 ] < tmp then
45532: LD_VAR 0 6
45536: PUSH
45537: LD_VAR 0 6
45541: ARRAY
45542: PUSH
45543: LD_INT 2
45545: ARRAY
45546: PUSH
45547: LD_VAR 0 9
45551: LESS
45552: IFFALSE 45594
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45554: LD_ADDR_VAR 0 6
45558: PUSH
45559: LD_VAR 0 6
45563: PPUSH
45564: LD_VAR 0 6
45568: PUSH
45569: LD_INT 1
45571: PLUS
45572: PPUSH
45573: LD_VAR 0 7
45577: PUSH
45578: LD_VAR 0 9
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PPUSH
45587: CALL_OW 2
45591: ST_TO_ADDR
45592: GO 45674
// for j = 1 to result do
45594: LD_ADDR_VAR 0 8
45598: PUSH
45599: DOUBLE
45600: LD_INT 1
45602: DEC
45603: ST_TO_ADDR
45604: LD_VAR 0 6
45608: PUSH
45609: FOR_TO
45610: IFFALSE 45672
// begin if tmp < result [ j ] [ 2 ] then
45612: LD_VAR 0 9
45616: PUSH
45617: LD_VAR 0 6
45621: PUSH
45622: LD_VAR 0 8
45626: ARRAY
45627: PUSH
45628: LD_INT 2
45630: ARRAY
45631: LESS
45632: IFFALSE 45670
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45634: LD_ADDR_VAR 0 6
45638: PUSH
45639: LD_VAR 0 6
45643: PPUSH
45644: LD_VAR 0 8
45648: PPUSH
45649: LD_VAR 0 7
45653: PUSH
45654: LD_VAR 0 9
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PPUSH
45663: CALL_OW 2
45667: ST_TO_ADDR
// break ;
45668: GO 45672
// end ; end ;
45670: GO 45609
45672: POP
45673: POP
// end ; end ;
45674: GO 45473
45676: POP
45677: POP
// if result and not asc then
45678: LD_VAR 0 6
45682: PUSH
45683: LD_VAR 0 4
45687: NOT
45688: AND
45689: IFFALSE 45764
// begin tmp := result ;
45691: LD_ADDR_VAR 0 9
45695: PUSH
45696: LD_VAR 0 6
45700: ST_TO_ADDR
// for i = tmp downto 1 do
45701: LD_ADDR_VAR 0 7
45705: PUSH
45706: DOUBLE
45707: LD_VAR 0 9
45711: INC
45712: ST_TO_ADDR
45713: LD_INT 1
45715: PUSH
45716: FOR_DOWNTO
45717: IFFALSE 45762
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45719: LD_ADDR_VAR 0 6
45723: PUSH
45724: LD_VAR 0 6
45728: PPUSH
45729: LD_VAR 0 9
45733: PUSH
45734: LD_VAR 0 7
45738: MINUS
45739: PUSH
45740: LD_INT 1
45742: PLUS
45743: PPUSH
45744: LD_VAR 0 9
45748: PUSH
45749: LD_VAR 0 7
45753: ARRAY
45754: PPUSH
45755: CALL_OW 1
45759: ST_TO_ADDR
45760: GO 45716
45762: POP
45763: POP
// end ; tmp := [ ] ;
45764: LD_ADDR_VAR 0 9
45768: PUSH
45769: EMPTY
45770: ST_TO_ADDR
// if mode then
45771: LD_VAR 0 5
45775: IFFALSE 45844
// begin for i = 1 to result do
45777: LD_ADDR_VAR 0 7
45781: PUSH
45782: DOUBLE
45783: LD_INT 1
45785: DEC
45786: ST_TO_ADDR
45787: LD_VAR 0 6
45791: PUSH
45792: FOR_TO
45793: IFFALSE 45832
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45795: LD_ADDR_VAR 0 9
45799: PUSH
45800: LD_VAR 0 9
45804: PPUSH
45805: LD_VAR 0 7
45809: PPUSH
45810: LD_VAR 0 6
45814: PUSH
45815: LD_VAR 0 7
45819: ARRAY
45820: PUSH
45821: LD_INT 1
45823: ARRAY
45824: PPUSH
45825: CALL_OW 1
45829: ST_TO_ADDR
45830: GO 45792
45832: POP
45833: POP
// result := tmp ;
45834: LD_ADDR_VAR 0 6
45838: PUSH
45839: LD_VAR 0 9
45843: ST_TO_ADDR
// end ; end ;
45844: LD_VAR 0 6
45848: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45849: LD_INT 0
45851: PPUSH
45852: PPUSH
45853: PPUSH
45854: PPUSH
45855: PPUSH
45856: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45857: LD_ADDR_VAR 0 5
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// if not x or not y then
45879: LD_VAR 0 2
45883: NOT
45884: PUSH
45885: LD_VAR 0 3
45889: NOT
45890: OR
45891: IFFALSE 45895
// exit ;
45893: GO 47545
// if not range then
45895: LD_VAR 0 4
45899: NOT
45900: IFFALSE 45910
// range := 10 ;
45902: LD_ADDR_VAR 0 4
45906: PUSH
45907: LD_INT 10
45909: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45910: LD_ADDR_VAR 0 8
45914: PUSH
45915: LD_INT 81
45917: PUSH
45918: LD_VAR 0 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 92
45929: PUSH
45930: LD_VAR 0 2
45934: PUSH
45935: LD_VAR 0 3
45939: PUSH
45940: LD_VAR 0 4
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: LD_INT 21
45956: PUSH
45957: LD_INT 3
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: PPUSH
45973: CALL_OW 69
45977: ST_TO_ADDR
// if not tmp then
45978: LD_VAR 0 8
45982: NOT
45983: IFFALSE 45987
// exit ;
45985: GO 47545
// for i in tmp do
45987: LD_ADDR_VAR 0 6
45991: PUSH
45992: LD_VAR 0 8
45996: PUSH
45997: FOR_IN
45998: IFFALSE 47520
// begin points := [ 0 , 0 , 0 ] ;
46000: LD_ADDR_VAR 0 9
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// bpoints := 1 ;
46019: LD_ADDR_VAR 0 10
46023: PUSH
46024: LD_INT 1
46026: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46027: LD_VAR 0 6
46031: PPUSH
46032: CALL_OW 247
46036: PUSH
46037: LD_INT 1
46039: DOUBLE
46040: EQUAL
46041: IFTRUE 46045
46043: GO 46623
46045: POP
// begin if GetClass ( i ) = 1 then
46046: LD_VAR 0 6
46050: PPUSH
46051: CALL_OW 257
46055: PUSH
46056: LD_INT 1
46058: EQUAL
46059: IFFALSE 46080
// points := [ 10 , 5 , 3 ] ;
46061: LD_ADDR_VAR 0 9
46065: PUSH
46066: LD_INT 10
46068: PUSH
46069: LD_INT 5
46071: PUSH
46072: LD_INT 3
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46080: LD_VAR 0 6
46084: PPUSH
46085: CALL_OW 257
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 3
46095: PUSH
46096: LD_INT 4
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: IN
46104: IFFALSE 46125
// points := [ 3 , 2 , 1 ] ;
46106: LD_ADDR_VAR 0 9
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46125: LD_VAR 0 6
46129: PPUSH
46130: CALL_OW 257
46134: PUSH
46135: LD_INT 5
46137: EQUAL
46138: IFFALSE 46159
// points := [ 130 , 5 , 2 ] ;
46140: LD_ADDR_VAR 0 9
46144: PUSH
46145: LD_INT 130
46147: PUSH
46148: LD_INT 5
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46159: LD_VAR 0 6
46163: PPUSH
46164: CALL_OW 257
46168: PUSH
46169: LD_INT 8
46171: EQUAL
46172: IFFALSE 46193
// points := [ 35 , 35 , 30 ] ;
46174: LD_ADDR_VAR 0 9
46178: PUSH
46179: LD_INT 35
46181: PUSH
46182: LD_INT 35
46184: PUSH
46185: LD_INT 30
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46193: LD_VAR 0 6
46197: PPUSH
46198: CALL_OW 257
46202: PUSH
46203: LD_INT 9
46205: EQUAL
46206: IFFALSE 46227
// points := [ 20 , 55 , 40 ] ;
46208: LD_ADDR_VAR 0 9
46212: PUSH
46213: LD_INT 20
46215: PUSH
46216: LD_INT 55
46218: PUSH
46219: LD_INT 40
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46227: LD_VAR 0 6
46231: PPUSH
46232: CALL_OW 257
46236: PUSH
46237: LD_INT 12
46239: PUSH
46240: LD_INT 16
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: IN
46247: IFFALSE 46268
// points := [ 5 , 3 , 2 ] ;
46249: LD_ADDR_VAR 0 9
46253: PUSH
46254: LD_INT 5
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46268: LD_VAR 0 6
46272: PPUSH
46273: CALL_OW 257
46277: PUSH
46278: LD_INT 17
46280: EQUAL
46281: IFFALSE 46302
// points := [ 100 , 50 , 75 ] ;
46283: LD_ADDR_VAR 0 9
46287: PUSH
46288: LD_INT 100
46290: PUSH
46291: LD_INT 50
46293: PUSH
46294: LD_INT 75
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46302: LD_VAR 0 6
46306: PPUSH
46307: CALL_OW 257
46311: PUSH
46312: LD_INT 15
46314: EQUAL
46315: IFFALSE 46336
// points := [ 10 , 5 , 3 ] ;
46317: LD_ADDR_VAR 0 9
46321: PUSH
46322: LD_INT 10
46324: PUSH
46325: LD_INT 5
46327: PUSH
46328: LD_INT 3
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46336: LD_VAR 0 6
46340: PPUSH
46341: CALL_OW 257
46345: PUSH
46346: LD_INT 14
46348: EQUAL
46349: IFFALSE 46370
// points := [ 10 , 0 , 0 ] ;
46351: LD_ADDR_VAR 0 9
46355: PUSH
46356: LD_INT 10
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46370: LD_VAR 0 6
46374: PPUSH
46375: CALL_OW 257
46379: PUSH
46380: LD_INT 11
46382: EQUAL
46383: IFFALSE 46404
// points := [ 30 , 10 , 5 ] ;
46385: LD_ADDR_VAR 0 9
46389: PUSH
46390: LD_INT 30
46392: PUSH
46393: LD_INT 10
46395: PUSH
46396: LD_INT 5
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46404: LD_VAR 0 1
46408: PPUSH
46409: LD_INT 5
46411: PPUSH
46412: CALL_OW 321
46416: PUSH
46417: LD_INT 2
46419: EQUAL
46420: IFFALSE 46437
// bpoints := bpoints * 1.8 ;
46422: LD_ADDR_VAR 0 10
46426: PUSH
46427: LD_VAR 0 10
46431: PUSH
46432: LD_REAL  1.80000000000000E+0000
46435: MUL
46436: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46437: LD_VAR 0 6
46441: PPUSH
46442: CALL_OW 257
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 4
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: IN
46465: PUSH
46466: LD_VAR 0 1
46470: PPUSH
46471: LD_INT 51
46473: PPUSH
46474: CALL_OW 321
46478: PUSH
46479: LD_INT 2
46481: EQUAL
46482: AND
46483: IFFALSE 46500
// bpoints := bpoints * 1.2 ;
46485: LD_ADDR_VAR 0 10
46489: PUSH
46490: LD_VAR 0 10
46494: PUSH
46495: LD_REAL  1.20000000000000E+0000
46498: MUL
46499: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46500: LD_VAR 0 6
46504: PPUSH
46505: CALL_OW 257
46509: PUSH
46510: LD_INT 5
46512: PUSH
46513: LD_INT 7
46515: PUSH
46516: LD_INT 9
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: IN
46524: PUSH
46525: LD_VAR 0 1
46529: PPUSH
46530: LD_INT 52
46532: PPUSH
46533: CALL_OW 321
46537: PUSH
46538: LD_INT 2
46540: EQUAL
46541: AND
46542: IFFALSE 46559
// bpoints := bpoints * 1.5 ;
46544: LD_ADDR_VAR 0 10
46548: PUSH
46549: LD_VAR 0 10
46553: PUSH
46554: LD_REAL  1.50000000000000E+0000
46557: MUL
46558: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46559: LD_VAR 0 1
46563: PPUSH
46564: LD_INT 66
46566: PPUSH
46567: CALL_OW 321
46571: PUSH
46572: LD_INT 2
46574: EQUAL
46575: IFFALSE 46592
// bpoints := bpoints * 1.1 ;
46577: LD_ADDR_VAR 0 10
46581: PUSH
46582: LD_VAR 0 10
46586: PUSH
46587: LD_REAL  1.10000000000000E+0000
46590: MUL
46591: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46592: LD_ADDR_VAR 0 10
46596: PUSH
46597: LD_VAR 0 10
46601: PUSH
46602: LD_VAR 0 6
46606: PPUSH
46607: LD_INT 1
46609: PPUSH
46610: CALL_OW 259
46614: PUSH
46615: LD_REAL  1.15000000000000E+0000
46618: MUL
46619: MUL
46620: ST_TO_ADDR
// end ; unit_vehicle :
46621: GO 47449
46623: LD_INT 2
46625: DOUBLE
46626: EQUAL
46627: IFTRUE 46631
46629: GO 47437
46631: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46632: LD_VAR 0 6
46636: PPUSH
46637: CALL_OW 264
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 42
46647: PUSH
46648: LD_INT 24
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: LIST
46655: IN
46656: IFFALSE 46677
// points := [ 25 , 5 , 3 ] ;
46658: LD_ADDR_VAR 0 9
46662: PUSH
46663: LD_INT 25
46665: PUSH
46666: LD_INT 5
46668: PUSH
46669: LD_INT 3
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46677: LD_VAR 0 6
46681: PPUSH
46682: CALL_OW 264
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: LD_INT 43
46692: PUSH
46693: LD_INT 25
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: IN
46701: IFFALSE 46722
// points := [ 40 , 15 , 5 ] ;
46703: LD_ADDR_VAR 0 9
46707: PUSH
46708: LD_INT 40
46710: PUSH
46711: LD_INT 15
46713: PUSH
46714: LD_INT 5
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46722: LD_VAR 0 6
46726: PPUSH
46727: CALL_OW 264
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: LD_INT 23
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: IN
46742: IFFALSE 46763
// points := [ 7 , 25 , 8 ] ;
46744: LD_ADDR_VAR 0 9
46748: PUSH
46749: LD_INT 7
46751: PUSH
46752: LD_INT 25
46754: PUSH
46755: LD_INT 8
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46763: LD_VAR 0 6
46767: PPUSH
46768: CALL_OW 264
46772: PUSH
46773: LD_INT 5
46775: PUSH
46776: LD_INT 27
46778: PUSH
46779: LD_INT 44
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: IN
46787: IFFALSE 46808
// points := [ 14 , 50 , 16 ] ;
46789: LD_ADDR_VAR 0 9
46793: PUSH
46794: LD_INT 14
46796: PUSH
46797: LD_INT 50
46799: PUSH
46800: LD_INT 16
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46808: LD_VAR 0 6
46812: PPUSH
46813: CALL_OW 264
46817: PUSH
46818: LD_INT 6
46820: PUSH
46821: LD_INT 46
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: IN
46828: IFFALSE 46849
// points := [ 32 , 120 , 70 ] ;
46830: LD_ADDR_VAR 0 9
46834: PUSH
46835: LD_INT 32
46837: PUSH
46838: LD_INT 120
46840: PUSH
46841: LD_INT 70
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46849: LD_VAR 0 6
46853: PPUSH
46854: CALL_OW 264
46858: PUSH
46859: LD_INT 7
46861: PUSH
46862: LD_INT 28
46864: PUSH
46865: LD_INT 45
46867: PUSH
46868: LD_INT 92
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: IN
46877: IFFALSE 46898
// points := [ 35 , 20 , 45 ] ;
46879: LD_ADDR_VAR 0 9
46883: PUSH
46884: LD_INT 35
46886: PUSH
46887: LD_INT 20
46889: PUSH
46890: LD_INT 45
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46898: LD_VAR 0 6
46902: PPUSH
46903: CALL_OW 264
46907: PUSH
46908: LD_INT 47
46910: PUSH
46911: EMPTY
46912: LIST
46913: IN
46914: IFFALSE 46935
// points := [ 67 , 45 , 75 ] ;
46916: LD_ADDR_VAR 0 9
46920: PUSH
46921: LD_INT 67
46923: PUSH
46924: LD_INT 45
46926: PUSH
46927: LD_INT 75
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46935: LD_VAR 0 6
46939: PPUSH
46940: CALL_OW 264
46944: PUSH
46945: LD_INT 26
46947: PUSH
46948: EMPTY
46949: LIST
46950: IN
46951: IFFALSE 46972
// points := [ 120 , 30 , 80 ] ;
46953: LD_ADDR_VAR 0 9
46957: PUSH
46958: LD_INT 120
46960: PUSH
46961: LD_INT 30
46963: PUSH
46964: LD_INT 80
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46972: LD_VAR 0 6
46976: PPUSH
46977: CALL_OW 264
46981: PUSH
46982: LD_INT 22
46984: PUSH
46985: EMPTY
46986: LIST
46987: IN
46988: IFFALSE 47009
// points := [ 40 , 1 , 1 ] ;
46990: LD_ADDR_VAR 0 9
46994: PUSH
46995: LD_INT 40
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47009: LD_VAR 0 6
47013: PPUSH
47014: CALL_OW 264
47018: PUSH
47019: LD_INT 29
47021: PUSH
47022: EMPTY
47023: LIST
47024: IN
47025: IFFALSE 47046
// points := [ 70 , 200 , 400 ] ;
47027: LD_ADDR_VAR 0 9
47031: PUSH
47032: LD_INT 70
47034: PUSH
47035: LD_INT 200
47037: PUSH
47038: LD_INT 400
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47046: LD_VAR 0 6
47050: PPUSH
47051: CALL_OW 264
47055: PUSH
47056: LD_INT 14
47058: PUSH
47059: LD_INT 53
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: IN
47066: IFFALSE 47087
// points := [ 40 , 10 , 20 ] ;
47068: LD_ADDR_VAR 0 9
47072: PUSH
47073: LD_INT 40
47075: PUSH
47076: LD_INT 10
47078: PUSH
47079: LD_INT 20
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47087: LD_VAR 0 6
47091: PPUSH
47092: CALL_OW 264
47096: PUSH
47097: LD_INT 9
47099: PUSH
47100: EMPTY
47101: LIST
47102: IN
47103: IFFALSE 47124
// points := [ 5 , 70 , 20 ] ;
47105: LD_ADDR_VAR 0 9
47109: PUSH
47110: LD_INT 5
47112: PUSH
47113: LD_INT 70
47115: PUSH
47116: LD_INT 20
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: LIST
47123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47124: LD_VAR 0 6
47128: PPUSH
47129: CALL_OW 264
47133: PUSH
47134: LD_INT 10
47136: PUSH
47137: EMPTY
47138: LIST
47139: IN
47140: IFFALSE 47161
// points := [ 35 , 110 , 70 ] ;
47142: LD_ADDR_VAR 0 9
47146: PUSH
47147: LD_INT 35
47149: PUSH
47150: LD_INT 110
47152: PUSH
47153: LD_INT 70
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47161: LD_VAR 0 6
47165: PPUSH
47166: CALL_OW 265
47170: PUSH
47171: LD_INT 25
47173: EQUAL
47174: IFFALSE 47195
// points := [ 80 , 65 , 100 ] ;
47176: LD_ADDR_VAR 0 9
47180: PUSH
47181: LD_INT 80
47183: PUSH
47184: LD_INT 65
47186: PUSH
47187: LD_INT 100
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47195: LD_VAR 0 6
47199: PPUSH
47200: CALL_OW 263
47204: PUSH
47205: LD_INT 1
47207: EQUAL
47208: IFFALSE 47243
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47210: LD_ADDR_VAR 0 10
47214: PUSH
47215: LD_VAR 0 10
47219: PUSH
47220: LD_VAR 0 6
47224: PPUSH
47225: CALL_OW 311
47229: PPUSH
47230: LD_INT 3
47232: PPUSH
47233: CALL_OW 259
47237: PUSH
47238: LD_INT 4
47240: MUL
47241: MUL
47242: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47243: LD_VAR 0 6
47247: PPUSH
47248: CALL_OW 263
47252: PUSH
47253: LD_INT 2
47255: EQUAL
47256: IFFALSE 47307
// begin j := IsControledBy ( i ) ;
47258: LD_ADDR_VAR 0 7
47262: PUSH
47263: LD_VAR 0 6
47267: PPUSH
47268: CALL_OW 312
47272: ST_TO_ADDR
// if j then
47273: LD_VAR 0 7
47277: IFFALSE 47307
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47279: LD_ADDR_VAR 0 10
47283: PUSH
47284: LD_VAR 0 10
47288: PUSH
47289: LD_VAR 0 7
47293: PPUSH
47294: LD_INT 3
47296: PPUSH
47297: CALL_OW 259
47301: PUSH
47302: LD_INT 3
47304: MUL
47305: MUL
47306: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47307: LD_VAR 0 6
47311: PPUSH
47312: CALL_OW 264
47316: PUSH
47317: LD_INT 5
47319: PUSH
47320: LD_INT 6
47322: PUSH
47323: LD_INT 46
47325: PUSH
47326: LD_INT 44
47328: PUSH
47329: LD_INT 47
47331: PUSH
47332: LD_INT 45
47334: PUSH
47335: LD_INT 28
47337: PUSH
47338: LD_INT 7
47340: PUSH
47341: LD_INT 27
47343: PUSH
47344: LD_INT 29
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: IN
47359: PUSH
47360: LD_VAR 0 1
47364: PPUSH
47365: LD_INT 52
47367: PPUSH
47368: CALL_OW 321
47372: PUSH
47373: LD_INT 2
47375: EQUAL
47376: AND
47377: IFFALSE 47394
// bpoints := bpoints * 1.2 ;
47379: LD_ADDR_VAR 0 10
47383: PUSH
47384: LD_VAR 0 10
47388: PUSH
47389: LD_REAL  1.20000000000000E+0000
47392: MUL
47393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47394: LD_VAR 0 6
47398: PPUSH
47399: CALL_OW 264
47403: PUSH
47404: LD_INT 6
47406: PUSH
47407: LD_INT 46
47409: PUSH
47410: LD_INT 47
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: LIST
47417: IN
47418: IFFALSE 47435
// bpoints := bpoints * 1.2 ;
47420: LD_ADDR_VAR 0 10
47424: PUSH
47425: LD_VAR 0 10
47429: PUSH
47430: LD_REAL  1.20000000000000E+0000
47433: MUL
47434: ST_TO_ADDR
// end ; unit_building :
47435: GO 47449
47437: LD_INT 3
47439: DOUBLE
47440: EQUAL
47441: IFTRUE 47445
47443: GO 47448
47445: POP
// ; end ;
47446: GO 47449
47448: POP
// for j = 1 to 3 do
47449: LD_ADDR_VAR 0 7
47453: PUSH
47454: DOUBLE
47455: LD_INT 1
47457: DEC
47458: ST_TO_ADDR
47459: LD_INT 3
47461: PUSH
47462: FOR_TO
47463: IFFALSE 47516
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47465: LD_ADDR_VAR 0 5
47469: PUSH
47470: LD_VAR 0 5
47474: PPUSH
47475: LD_VAR 0 7
47479: PPUSH
47480: LD_VAR 0 5
47484: PUSH
47485: LD_VAR 0 7
47489: ARRAY
47490: PUSH
47491: LD_VAR 0 9
47495: PUSH
47496: LD_VAR 0 7
47500: ARRAY
47501: PUSH
47502: LD_VAR 0 10
47506: MUL
47507: PLUS
47508: PPUSH
47509: CALL_OW 1
47513: ST_TO_ADDR
47514: GO 47462
47516: POP
47517: POP
// end ;
47518: GO 45997
47520: POP
47521: POP
// result := Replace ( result , 4 , tmp ) ;
47522: LD_ADDR_VAR 0 5
47526: PUSH
47527: LD_VAR 0 5
47531: PPUSH
47532: LD_INT 4
47534: PPUSH
47535: LD_VAR 0 8
47539: PPUSH
47540: CALL_OW 1
47544: ST_TO_ADDR
// end ;
47545: LD_VAR 0 5
47549: RET
// export function DangerAtRange ( unit , range ) ; begin
47550: LD_INT 0
47552: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47553: LD_ADDR_VAR 0 3
47557: PUSH
47558: LD_VAR 0 1
47562: PPUSH
47563: CALL_OW 255
47567: PPUSH
47568: LD_VAR 0 1
47572: PPUSH
47573: CALL_OW 250
47577: PPUSH
47578: LD_VAR 0 1
47582: PPUSH
47583: CALL_OW 251
47587: PPUSH
47588: LD_VAR 0 2
47592: PPUSH
47593: CALL 45849 0 4
47597: ST_TO_ADDR
// end ;
47598: LD_VAR 0 3
47602: RET
// export function DangerInArea ( side , area ) ; begin
47603: LD_INT 0
47605: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47606: LD_ADDR_VAR 0 3
47610: PUSH
47611: LD_VAR 0 2
47615: PPUSH
47616: LD_INT 81
47618: PUSH
47619: LD_VAR 0 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PPUSH
47628: CALL_OW 70
47632: ST_TO_ADDR
// end ;
47633: LD_VAR 0 3
47637: RET
// export function IsExtension ( b ) ; begin
47638: LD_INT 0
47640: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47641: LD_ADDR_VAR 0 2
47645: PUSH
47646: LD_VAR 0 1
47650: PUSH
47651: LD_INT 23
47653: PUSH
47654: LD_INT 20
47656: PUSH
47657: LD_INT 22
47659: PUSH
47660: LD_INT 17
47662: PUSH
47663: LD_INT 24
47665: PUSH
47666: LD_INT 21
47668: PUSH
47669: LD_INT 19
47671: PUSH
47672: LD_INT 16
47674: PUSH
47675: LD_INT 25
47677: PUSH
47678: LD_INT 18
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: IN
47693: ST_TO_ADDR
// end ;
47694: LD_VAR 0 2
47698: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47699: LD_INT 0
47701: PPUSH
47702: PPUSH
47703: PPUSH
// result := [ ] ;
47704: LD_ADDR_VAR 0 4
47708: PUSH
47709: EMPTY
47710: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47711: LD_ADDR_VAR 0 5
47715: PUSH
47716: LD_VAR 0 2
47720: PPUSH
47721: LD_INT 21
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PPUSH
47731: CALL_OW 70
47735: ST_TO_ADDR
// if not tmp then
47736: LD_VAR 0 5
47740: NOT
47741: IFFALSE 47745
// exit ;
47743: GO 47809
// if checkLink then
47745: LD_VAR 0 3
47749: IFFALSE 47799
// begin for i in tmp do
47751: LD_ADDR_VAR 0 6
47755: PUSH
47756: LD_VAR 0 5
47760: PUSH
47761: FOR_IN
47762: IFFALSE 47797
// if GetBase ( i ) <> base then
47764: LD_VAR 0 6
47768: PPUSH
47769: CALL_OW 274
47773: PUSH
47774: LD_VAR 0 1
47778: NONEQUAL
47779: IFFALSE 47795
// ComLinkToBase ( base , i ) ;
47781: LD_VAR 0 1
47785: PPUSH
47786: LD_VAR 0 6
47790: PPUSH
47791: CALL_OW 169
47795: GO 47761
47797: POP
47798: POP
// end ; result := tmp ;
47799: LD_ADDR_VAR 0 4
47803: PUSH
47804: LD_VAR 0 5
47808: ST_TO_ADDR
// end ;
47809: LD_VAR 0 4
47813: RET
// export function ComComplete ( units , b ) ; var i ; begin
47814: LD_INT 0
47816: PPUSH
47817: PPUSH
// if not units then
47818: LD_VAR 0 1
47822: NOT
47823: IFFALSE 47827
// exit ;
47825: GO 47917
// for i in units do
47827: LD_ADDR_VAR 0 4
47831: PUSH
47832: LD_VAR 0 1
47836: PUSH
47837: FOR_IN
47838: IFFALSE 47915
// if BuildingStatus ( b ) = bs_build then
47840: LD_VAR 0 2
47844: PPUSH
47845: CALL_OW 461
47849: PUSH
47850: LD_INT 1
47852: EQUAL
47853: IFFALSE 47913
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47855: LD_VAR 0 4
47859: PPUSH
47860: LD_STRING h
47862: PUSH
47863: LD_VAR 0 2
47867: PPUSH
47868: CALL_OW 250
47872: PUSH
47873: LD_VAR 0 2
47877: PPUSH
47878: CALL_OW 251
47882: PUSH
47883: LD_VAR 0 2
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: PPUSH
47909: CALL_OW 446
47913: GO 47837
47915: POP
47916: POP
// end ;
47917: LD_VAR 0 3
47921: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47922: LD_INT 0
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
47928: PPUSH
47929: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47930: LD_VAR 0 1
47934: NOT
47935: PUSH
47936: LD_VAR 0 1
47940: PPUSH
47941: CALL_OW 263
47945: PUSH
47946: LD_INT 2
47948: NONEQUAL
47949: OR
47950: IFFALSE 47954
// exit ;
47952: GO 48270
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47954: LD_ADDR_VAR 0 6
47958: PUSH
47959: LD_INT 22
47961: PUSH
47962: LD_VAR 0 1
47966: PPUSH
47967: CALL_OW 255
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 30
47981: PUSH
47982: LD_INT 36
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 34
47991: PUSH
47992: LD_INT 31
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PPUSH
48008: CALL_OW 69
48012: ST_TO_ADDR
// if not tmp then
48013: LD_VAR 0 6
48017: NOT
48018: IFFALSE 48022
// exit ;
48020: GO 48270
// result := [ ] ;
48022: LD_ADDR_VAR 0 2
48026: PUSH
48027: EMPTY
48028: ST_TO_ADDR
// for i in tmp do
48029: LD_ADDR_VAR 0 3
48033: PUSH
48034: LD_VAR 0 6
48038: PUSH
48039: FOR_IN
48040: IFFALSE 48111
// begin t := UnitsInside ( i ) ;
48042: LD_ADDR_VAR 0 4
48046: PUSH
48047: LD_VAR 0 3
48051: PPUSH
48052: CALL_OW 313
48056: ST_TO_ADDR
// if t then
48057: LD_VAR 0 4
48061: IFFALSE 48109
// for j in t do
48063: LD_ADDR_VAR 0 7
48067: PUSH
48068: LD_VAR 0 4
48072: PUSH
48073: FOR_IN
48074: IFFALSE 48107
// result := Replace ( result , result + 1 , j ) ;
48076: LD_ADDR_VAR 0 2
48080: PUSH
48081: LD_VAR 0 2
48085: PPUSH
48086: LD_VAR 0 2
48090: PUSH
48091: LD_INT 1
48093: PLUS
48094: PPUSH
48095: LD_VAR 0 7
48099: PPUSH
48100: CALL_OW 1
48104: ST_TO_ADDR
48105: GO 48073
48107: POP
48108: POP
// end ;
48109: GO 48039
48111: POP
48112: POP
// if not result then
48113: LD_VAR 0 2
48117: NOT
48118: IFFALSE 48122
// exit ;
48120: GO 48270
// mech := result [ 1 ] ;
48122: LD_ADDR_VAR 0 5
48126: PUSH
48127: LD_VAR 0 2
48131: PUSH
48132: LD_INT 1
48134: ARRAY
48135: ST_TO_ADDR
// if result > 1 then
48136: LD_VAR 0 2
48140: PUSH
48141: LD_INT 1
48143: GREATER
48144: IFFALSE 48256
// begin for i = 2 to result do
48146: LD_ADDR_VAR 0 3
48150: PUSH
48151: DOUBLE
48152: LD_INT 2
48154: DEC
48155: ST_TO_ADDR
48156: LD_VAR 0 2
48160: PUSH
48161: FOR_TO
48162: IFFALSE 48254
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48164: LD_ADDR_VAR 0 4
48168: PUSH
48169: LD_VAR 0 2
48173: PUSH
48174: LD_VAR 0 3
48178: ARRAY
48179: PPUSH
48180: LD_INT 3
48182: PPUSH
48183: CALL_OW 259
48187: PUSH
48188: LD_VAR 0 2
48192: PUSH
48193: LD_VAR 0 3
48197: ARRAY
48198: PPUSH
48199: CALL_OW 432
48203: MINUS
48204: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48205: LD_VAR 0 4
48209: PUSH
48210: LD_VAR 0 5
48214: PPUSH
48215: LD_INT 3
48217: PPUSH
48218: CALL_OW 259
48222: PUSH
48223: LD_VAR 0 5
48227: PPUSH
48228: CALL_OW 432
48232: MINUS
48233: GREATEREQUAL
48234: IFFALSE 48252
// mech := result [ i ] ;
48236: LD_ADDR_VAR 0 5
48240: PUSH
48241: LD_VAR 0 2
48245: PUSH
48246: LD_VAR 0 3
48250: ARRAY
48251: ST_TO_ADDR
// end ;
48252: GO 48161
48254: POP
48255: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48256: LD_VAR 0 1
48260: PPUSH
48261: LD_VAR 0 5
48265: PPUSH
48266: CALL_OW 135
// end ;
48270: LD_VAR 0 2
48274: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48275: LD_INT 0
48277: PPUSH
48278: PPUSH
48279: PPUSH
48280: PPUSH
48281: PPUSH
48282: PPUSH
48283: PPUSH
48284: PPUSH
48285: PPUSH
48286: PPUSH
48287: PPUSH
48288: PPUSH
48289: PPUSH
// result := [ ] ;
48290: LD_ADDR_VAR 0 7
48294: PUSH
48295: EMPTY
48296: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 266
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: IN
48317: NOT
48318: IFFALSE 48322
// exit ;
48320: GO 49956
// if name then
48322: LD_VAR 0 3
48326: IFFALSE 48342
// SetBName ( base_dep , name ) ;
48328: LD_VAR 0 1
48332: PPUSH
48333: LD_VAR 0 3
48337: PPUSH
48338: CALL_OW 500
// base := GetBase ( base_dep ) ;
48342: LD_ADDR_VAR 0 15
48346: PUSH
48347: LD_VAR 0 1
48351: PPUSH
48352: CALL_OW 274
48356: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48357: LD_ADDR_VAR 0 16
48361: PUSH
48362: LD_VAR 0 1
48366: PPUSH
48367: CALL_OW 255
48371: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48372: LD_ADDR_VAR 0 17
48376: PUSH
48377: LD_VAR 0 1
48381: PPUSH
48382: CALL_OW 248
48386: ST_TO_ADDR
// if sources then
48387: LD_VAR 0 5
48391: IFFALSE 48438
// for i = 1 to 3 do
48393: LD_ADDR_VAR 0 8
48397: PUSH
48398: DOUBLE
48399: LD_INT 1
48401: DEC
48402: ST_TO_ADDR
48403: LD_INT 3
48405: PUSH
48406: FOR_TO
48407: IFFALSE 48436
// AddResourceType ( base , i , sources [ i ] ) ;
48409: LD_VAR 0 15
48413: PPUSH
48414: LD_VAR 0 8
48418: PPUSH
48419: LD_VAR 0 5
48423: PUSH
48424: LD_VAR 0 8
48428: ARRAY
48429: PPUSH
48430: CALL_OW 276
48434: GO 48406
48436: POP
48437: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48438: LD_ADDR_VAR 0 18
48442: PUSH
48443: LD_VAR 0 15
48447: PPUSH
48448: LD_VAR 0 2
48452: PPUSH
48453: LD_INT 1
48455: PPUSH
48456: CALL 47699 0 3
48460: ST_TO_ADDR
// InitHc ;
48461: CALL_OW 19
// InitUc ;
48465: CALL_OW 18
// uc_side := side ;
48469: LD_ADDR_OWVAR 20
48473: PUSH
48474: LD_VAR 0 16
48478: ST_TO_ADDR
// uc_nation := nation ;
48479: LD_ADDR_OWVAR 21
48483: PUSH
48484: LD_VAR 0 17
48488: ST_TO_ADDR
// if buildings then
48489: LD_VAR 0 18
48493: IFFALSE 49815
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48495: LD_ADDR_VAR 0 19
48499: PUSH
48500: LD_VAR 0 18
48504: PPUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 30
48510: PUSH
48511: LD_INT 29
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 30
48520: PUSH
48521: LD_INT 30
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: PPUSH
48533: CALL_OW 72
48537: ST_TO_ADDR
// if tmp then
48538: LD_VAR 0 19
48542: IFFALSE 48590
// for i in tmp do
48544: LD_ADDR_VAR 0 8
48548: PUSH
48549: LD_VAR 0 19
48553: PUSH
48554: FOR_IN
48555: IFFALSE 48588
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48557: LD_VAR 0 8
48561: PPUSH
48562: CALL_OW 250
48566: PPUSH
48567: LD_VAR 0 8
48571: PPUSH
48572: CALL_OW 251
48576: PPUSH
48577: LD_VAR 0 16
48581: PPUSH
48582: CALL_OW 441
48586: GO 48554
48588: POP
48589: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48590: LD_VAR 0 18
48594: PPUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 30
48600: PUSH
48601: LD_INT 32
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 30
48610: PUSH
48611: LD_INT 33
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: PPUSH
48623: CALL_OW 72
48627: IFFALSE 48715
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48629: LD_ADDR_VAR 0 8
48633: PUSH
48634: LD_VAR 0 18
48638: PPUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 30
48644: PUSH
48645: LD_INT 32
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 30
48654: PUSH
48655: LD_INT 33
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: PPUSH
48667: CALL_OW 72
48671: PUSH
48672: FOR_IN
48673: IFFALSE 48713
// begin if not GetBWeapon ( i ) then
48675: LD_VAR 0 8
48679: PPUSH
48680: CALL_OW 269
48684: NOT
48685: IFFALSE 48711
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48687: LD_VAR 0 8
48691: PPUSH
48692: LD_VAR 0 8
48696: PPUSH
48697: LD_VAR 0 2
48701: PPUSH
48702: CALL 49961 0 2
48706: PPUSH
48707: CALL_OW 431
// end ;
48711: GO 48672
48713: POP
48714: POP
// end ; for i = 1 to personel do
48715: LD_ADDR_VAR 0 8
48719: PUSH
48720: DOUBLE
48721: LD_INT 1
48723: DEC
48724: ST_TO_ADDR
48725: LD_VAR 0 6
48729: PUSH
48730: FOR_TO
48731: IFFALSE 49795
// begin if i > 4 then
48733: LD_VAR 0 8
48737: PUSH
48738: LD_INT 4
48740: GREATER
48741: IFFALSE 48745
// break ;
48743: GO 49795
// case i of 1 :
48745: LD_VAR 0 8
48749: PUSH
48750: LD_INT 1
48752: DOUBLE
48753: EQUAL
48754: IFTRUE 48758
48756: GO 48838
48758: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48759: LD_ADDR_VAR 0 12
48763: PUSH
48764: LD_VAR 0 18
48768: PPUSH
48769: LD_INT 22
48771: PUSH
48772: LD_VAR 0 16
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 58
48783: PUSH
48784: EMPTY
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 30
48792: PUSH
48793: LD_INT 32
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 30
48802: PUSH
48803: LD_INT 4
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 30
48812: PUSH
48813: LD_INT 5
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: PPUSH
48831: CALL_OW 72
48835: ST_TO_ADDR
48836: GO 49060
48838: LD_INT 2
48840: DOUBLE
48841: EQUAL
48842: IFTRUE 48846
48844: GO 48908
48846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48847: LD_ADDR_VAR 0 12
48851: PUSH
48852: LD_VAR 0 18
48856: PPUSH
48857: LD_INT 22
48859: PUSH
48860: LD_VAR 0 16
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 30
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 30
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PPUSH
48901: CALL_OW 72
48905: ST_TO_ADDR
48906: GO 49060
48908: LD_INT 3
48910: DOUBLE
48911: EQUAL
48912: IFTRUE 48916
48914: GO 48978
48916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48917: LD_ADDR_VAR 0 12
48921: PUSH
48922: LD_VAR 0 18
48926: PPUSH
48927: LD_INT 22
48929: PUSH
48930: LD_VAR 0 16
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 30
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 30
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PPUSH
48971: CALL_OW 72
48975: ST_TO_ADDR
48976: GO 49060
48978: LD_INT 4
48980: DOUBLE
48981: EQUAL
48982: IFTRUE 48986
48984: GO 49059
48986: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48987: LD_ADDR_VAR 0 12
48991: PUSH
48992: LD_VAR 0 18
48996: PPUSH
48997: LD_INT 22
48999: PUSH
49000: LD_VAR 0 16
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 30
49014: PUSH
49015: LD_INT 6
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 30
49024: PUSH
49025: LD_INT 7
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 30
49034: PUSH
49035: LD_INT 8
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PPUSH
49052: CALL_OW 72
49056: ST_TO_ADDR
49057: GO 49060
49059: POP
// if i = 1 then
49060: LD_VAR 0 8
49064: PUSH
49065: LD_INT 1
49067: EQUAL
49068: IFFALSE 49179
// begin tmp := [ ] ;
49070: LD_ADDR_VAR 0 19
49074: PUSH
49075: EMPTY
49076: ST_TO_ADDR
// for j in f do
49077: LD_ADDR_VAR 0 9
49081: PUSH
49082: LD_VAR 0 12
49086: PUSH
49087: FOR_IN
49088: IFFALSE 49161
// if GetBType ( j ) = b_bunker then
49090: LD_VAR 0 9
49094: PPUSH
49095: CALL_OW 266
49099: PUSH
49100: LD_INT 32
49102: EQUAL
49103: IFFALSE 49130
// tmp := Insert ( tmp , 1 , j ) else
49105: LD_ADDR_VAR 0 19
49109: PUSH
49110: LD_VAR 0 19
49114: PPUSH
49115: LD_INT 1
49117: PPUSH
49118: LD_VAR 0 9
49122: PPUSH
49123: CALL_OW 2
49127: ST_TO_ADDR
49128: GO 49159
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49130: LD_ADDR_VAR 0 19
49134: PUSH
49135: LD_VAR 0 19
49139: PPUSH
49140: LD_VAR 0 19
49144: PUSH
49145: LD_INT 1
49147: PLUS
49148: PPUSH
49149: LD_VAR 0 9
49153: PPUSH
49154: CALL_OW 2
49158: ST_TO_ADDR
49159: GO 49087
49161: POP
49162: POP
// if tmp then
49163: LD_VAR 0 19
49167: IFFALSE 49179
// f := tmp ;
49169: LD_ADDR_VAR 0 12
49173: PUSH
49174: LD_VAR 0 19
49178: ST_TO_ADDR
// end ; x := personel [ i ] ;
49179: LD_ADDR_VAR 0 13
49183: PUSH
49184: LD_VAR 0 6
49188: PUSH
49189: LD_VAR 0 8
49193: ARRAY
49194: ST_TO_ADDR
// if x = - 1 then
49195: LD_VAR 0 13
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: EQUAL
49204: IFFALSE 49413
// begin for j in f do
49206: LD_ADDR_VAR 0 9
49210: PUSH
49211: LD_VAR 0 12
49215: PUSH
49216: FOR_IN
49217: IFFALSE 49409
// repeat InitHc ;
49219: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49223: LD_VAR 0 9
49227: PPUSH
49228: CALL_OW 266
49232: PUSH
49233: LD_INT 5
49235: EQUAL
49236: IFFALSE 49306
// begin if UnitsInside ( j ) < 3 then
49238: LD_VAR 0 9
49242: PPUSH
49243: CALL_OW 313
49247: PUSH
49248: LD_INT 3
49250: LESS
49251: IFFALSE 49287
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49253: LD_INT 0
49255: PPUSH
49256: LD_INT 5
49258: PUSH
49259: LD_INT 8
49261: PUSH
49262: LD_INT 9
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: PUSH
49270: LD_VAR 0 17
49274: ARRAY
49275: PPUSH
49276: LD_VAR 0 4
49280: PPUSH
49281: CALL_OW 380
49285: GO 49304
// PrepareHuman ( false , i , skill ) ;
49287: LD_INT 0
49289: PPUSH
49290: LD_VAR 0 8
49294: PPUSH
49295: LD_VAR 0 4
49299: PPUSH
49300: CALL_OW 380
// end else
49304: GO 49323
// PrepareHuman ( false , i , skill ) ;
49306: LD_INT 0
49308: PPUSH
49309: LD_VAR 0 8
49313: PPUSH
49314: LD_VAR 0 4
49318: PPUSH
49319: CALL_OW 380
// un := CreateHuman ;
49323: LD_ADDR_VAR 0 14
49327: PUSH
49328: CALL_OW 44
49332: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49333: LD_ADDR_VAR 0 7
49337: PUSH
49338: LD_VAR 0 7
49342: PPUSH
49343: LD_INT 1
49345: PPUSH
49346: LD_VAR 0 14
49350: PPUSH
49351: CALL_OW 2
49355: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49356: LD_VAR 0 14
49360: PPUSH
49361: LD_VAR 0 9
49365: PPUSH
49366: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49370: LD_VAR 0 9
49374: PPUSH
49375: CALL_OW 313
49379: PUSH
49380: LD_INT 6
49382: EQUAL
49383: PUSH
49384: LD_VAR 0 9
49388: PPUSH
49389: CALL_OW 266
49393: PUSH
49394: LD_INT 32
49396: PUSH
49397: LD_INT 31
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: IN
49404: OR
49405: IFFALSE 49219
49407: GO 49216
49409: POP
49410: POP
// end else
49411: GO 49793
// for j = 1 to x do
49413: LD_ADDR_VAR 0 9
49417: PUSH
49418: DOUBLE
49419: LD_INT 1
49421: DEC
49422: ST_TO_ADDR
49423: LD_VAR 0 13
49427: PUSH
49428: FOR_TO
49429: IFFALSE 49791
// begin InitHc ;
49431: CALL_OW 19
// if not f then
49435: LD_VAR 0 12
49439: NOT
49440: IFFALSE 49529
// begin PrepareHuman ( false , i , skill ) ;
49442: LD_INT 0
49444: PPUSH
49445: LD_VAR 0 8
49449: PPUSH
49450: LD_VAR 0 4
49454: PPUSH
49455: CALL_OW 380
// un := CreateHuman ;
49459: LD_ADDR_VAR 0 14
49463: PUSH
49464: CALL_OW 44
49468: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49469: LD_ADDR_VAR 0 7
49473: PUSH
49474: LD_VAR 0 7
49478: PPUSH
49479: LD_INT 1
49481: PPUSH
49482: LD_VAR 0 14
49486: PPUSH
49487: CALL_OW 2
49491: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49492: LD_VAR 0 14
49496: PPUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: CALL_OW 250
49506: PPUSH
49507: LD_VAR 0 1
49511: PPUSH
49512: CALL_OW 251
49516: PPUSH
49517: LD_INT 10
49519: PPUSH
49520: LD_INT 0
49522: PPUSH
49523: CALL_OW 50
// continue ;
49527: GO 49428
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49529: LD_VAR 0 12
49533: PUSH
49534: LD_INT 1
49536: ARRAY
49537: PPUSH
49538: CALL_OW 313
49542: PUSH
49543: LD_VAR 0 12
49547: PUSH
49548: LD_INT 1
49550: ARRAY
49551: PPUSH
49552: CALL_OW 266
49556: PUSH
49557: LD_INT 32
49559: PUSH
49560: LD_INT 31
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: IN
49567: AND
49568: PUSH
49569: LD_VAR 0 12
49573: PUSH
49574: LD_INT 1
49576: ARRAY
49577: PPUSH
49578: CALL_OW 313
49582: PUSH
49583: LD_INT 6
49585: EQUAL
49586: OR
49587: IFFALSE 49607
// f := Delete ( f , 1 ) ;
49589: LD_ADDR_VAR 0 12
49593: PUSH
49594: LD_VAR 0 12
49598: PPUSH
49599: LD_INT 1
49601: PPUSH
49602: CALL_OW 3
49606: ST_TO_ADDR
// if not f then
49607: LD_VAR 0 12
49611: NOT
49612: IFFALSE 49630
// begin x := x + 2 ;
49614: LD_ADDR_VAR 0 13
49618: PUSH
49619: LD_VAR 0 13
49623: PUSH
49624: LD_INT 2
49626: PLUS
49627: ST_TO_ADDR
// continue ;
49628: GO 49428
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49630: LD_VAR 0 12
49634: PUSH
49635: LD_INT 1
49637: ARRAY
49638: PPUSH
49639: CALL_OW 266
49643: PUSH
49644: LD_INT 5
49646: EQUAL
49647: IFFALSE 49721
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49649: LD_VAR 0 12
49653: PUSH
49654: LD_INT 1
49656: ARRAY
49657: PPUSH
49658: CALL_OW 313
49662: PUSH
49663: LD_INT 3
49665: LESS
49666: IFFALSE 49702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49668: LD_INT 0
49670: PPUSH
49671: LD_INT 5
49673: PUSH
49674: LD_INT 8
49676: PUSH
49677: LD_INT 9
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: PUSH
49685: LD_VAR 0 17
49689: ARRAY
49690: PPUSH
49691: LD_VAR 0 4
49695: PPUSH
49696: CALL_OW 380
49700: GO 49719
// PrepareHuman ( false , i , skill ) ;
49702: LD_INT 0
49704: PPUSH
49705: LD_VAR 0 8
49709: PPUSH
49710: LD_VAR 0 4
49714: PPUSH
49715: CALL_OW 380
// end else
49719: GO 49738
// PrepareHuman ( false , i , skill ) ;
49721: LD_INT 0
49723: PPUSH
49724: LD_VAR 0 8
49728: PPUSH
49729: LD_VAR 0 4
49733: PPUSH
49734: CALL_OW 380
// un := CreateHuman ;
49738: LD_ADDR_VAR 0 14
49742: PUSH
49743: CALL_OW 44
49747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49748: LD_ADDR_VAR 0 7
49752: PUSH
49753: LD_VAR 0 7
49757: PPUSH
49758: LD_INT 1
49760: PPUSH
49761: LD_VAR 0 14
49765: PPUSH
49766: CALL_OW 2
49770: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49771: LD_VAR 0 14
49775: PPUSH
49776: LD_VAR 0 12
49780: PUSH
49781: LD_INT 1
49783: ARRAY
49784: PPUSH
49785: CALL_OW 52
// end ;
49789: GO 49428
49791: POP
49792: POP
// end ;
49793: GO 48730
49795: POP
49796: POP
// result := result ^ buildings ;
49797: LD_ADDR_VAR 0 7
49801: PUSH
49802: LD_VAR 0 7
49806: PUSH
49807: LD_VAR 0 18
49811: ADD
49812: ST_TO_ADDR
// end else
49813: GO 49956
// begin for i = 1 to personel do
49815: LD_ADDR_VAR 0 8
49819: PUSH
49820: DOUBLE
49821: LD_INT 1
49823: DEC
49824: ST_TO_ADDR
49825: LD_VAR 0 6
49829: PUSH
49830: FOR_TO
49831: IFFALSE 49954
// begin if i > 4 then
49833: LD_VAR 0 8
49837: PUSH
49838: LD_INT 4
49840: GREATER
49841: IFFALSE 49845
// break ;
49843: GO 49954
// x := personel [ i ] ;
49845: LD_ADDR_VAR 0 13
49849: PUSH
49850: LD_VAR 0 6
49854: PUSH
49855: LD_VAR 0 8
49859: ARRAY
49860: ST_TO_ADDR
// if x = - 1 then
49861: LD_VAR 0 13
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: EQUAL
49870: IFFALSE 49874
// continue ;
49872: GO 49830
// PrepareHuman ( false , i , skill ) ;
49874: LD_INT 0
49876: PPUSH
49877: LD_VAR 0 8
49881: PPUSH
49882: LD_VAR 0 4
49886: PPUSH
49887: CALL_OW 380
// un := CreateHuman ;
49891: LD_ADDR_VAR 0 14
49895: PUSH
49896: CALL_OW 44
49900: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49901: LD_VAR 0 14
49905: PPUSH
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 250
49915: PPUSH
49916: LD_VAR 0 1
49920: PPUSH
49921: CALL_OW 251
49925: PPUSH
49926: LD_INT 10
49928: PPUSH
49929: LD_INT 0
49931: PPUSH
49932: CALL_OW 50
// result := result ^ un ;
49936: LD_ADDR_VAR 0 7
49940: PUSH
49941: LD_VAR 0 7
49945: PUSH
49946: LD_VAR 0 14
49950: ADD
49951: ST_TO_ADDR
// end ;
49952: GO 49830
49954: POP
49955: POP
// end ; end ;
49956: LD_VAR 0 7
49960: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49961: LD_INT 0
49963: PPUSH
49964: PPUSH
49965: PPUSH
49966: PPUSH
49967: PPUSH
49968: PPUSH
49969: PPUSH
49970: PPUSH
49971: PPUSH
49972: PPUSH
49973: PPUSH
49974: PPUSH
49975: PPUSH
49976: PPUSH
49977: PPUSH
49978: PPUSH
// result := false ;
49979: LD_ADDR_VAR 0 3
49983: PUSH
49984: LD_INT 0
49986: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49987: LD_VAR 0 1
49991: NOT
49992: PUSH
49993: LD_VAR 0 1
49997: PPUSH
49998: CALL_OW 266
50002: PUSH
50003: LD_INT 32
50005: PUSH
50006: LD_INT 33
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: IN
50013: NOT
50014: OR
50015: IFFALSE 50019
// exit ;
50017: GO 51128
// nat := GetNation ( tower ) ;
50019: LD_ADDR_VAR 0 12
50023: PUSH
50024: LD_VAR 0 1
50028: PPUSH
50029: CALL_OW 248
50033: ST_TO_ADDR
// side := GetSide ( tower ) ;
50034: LD_ADDR_VAR 0 16
50038: PUSH
50039: LD_VAR 0 1
50043: PPUSH
50044: CALL_OW 255
50048: ST_TO_ADDR
// x := GetX ( tower ) ;
50049: LD_ADDR_VAR 0 10
50053: PUSH
50054: LD_VAR 0 1
50058: PPUSH
50059: CALL_OW 250
50063: ST_TO_ADDR
// y := GetY ( tower ) ;
50064: LD_ADDR_VAR 0 11
50068: PUSH
50069: LD_VAR 0 1
50073: PPUSH
50074: CALL_OW 251
50078: ST_TO_ADDR
// if not x or not y then
50079: LD_VAR 0 10
50083: NOT
50084: PUSH
50085: LD_VAR 0 11
50089: NOT
50090: OR
50091: IFFALSE 50095
// exit ;
50093: GO 51128
// weapon := 0 ;
50095: LD_ADDR_VAR 0 18
50099: PUSH
50100: LD_INT 0
50102: ST_TO_ADDR
// fac_list := [ ] ;
50103: LD_ADDR_VAR 0 17
50107: PUSH
50108: EMPTY
50109: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50110: LD_ADDR_VAR 0 6
50114: PUSH
50115: LD_VAR 0 1
50119: PPUSH
50120: CALL_OW 274
50124: PPUSH
50125: LD_VAR 0 2
50129: PPUSH
50130: LD_INT 0
50132: PPUSH
50133: CALL 47699 0 3
50137: PPUSH
50138: LD_INT 30
50140: PUSH
50141: LD_INT 3
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PPUSH
50148: CALL_OW 72
50152: ST_TO_ADDR
// if not factories then
50153: LD_VAR 0 6
50157: NOT
50158: IFFALSE 50162
// exit ;
50160: GO 51128
// for i in factories do
50162: LD_ADDR_VAR 0 8
50166: PUSH
50167: LD_VAR 0 6
50171: PUSH
50172: FOR_IN
50173: IFFALSE 50198
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50175: LD_ADDR_VAR 0 17
50179: PUSH
50180: LD_VAR 0 17
50184: PUSH
50185: LD_VAR 0 8
50189: PPUSH
50190: CALL_OW 478
50194: UNION
50195: ST_TO_ADDR
50196: GO 50172
50198: POP
50199: POP
// if not fac_list then
50200: LD_VAR 0 17
50204: NOT
50205: IFFALSE 50209
// exit ;
50207: GO 51128
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50209: LD_ADDR_VAR 0 5
50213: PUSH
50214: LD_INT 4
50216: PUSH
50217: LD_INT 5
50219: PUSH
50220: LD_INT 9
50222: PUSH
50223: LD_INT 10
50225: PUSH
50226: LD_INT 6
50228: PUSH
50229: LD_INT 7
50231: PUSH
50232: LD_INT 11
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 27
50246: PUSH
50247: LD_INT 28
50249: PUSH
50250: LD_INT 26
50252: PUSH
50253: LD_INT 30
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 43
50264: PUSH
50265: LD_INT 44
50267: PUSH
50268: LD_INT 46
50270: PUSH
50271: LD_INT 45
50273: PUSH
50274: LD_INT 47
50276: PUSH
50277: LD_INT 49
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: PUSH
50293: LD_VAR 0 12
50297: ARRAY
50298: ST_TO_ADDR
// list := list isect fac_list ;
50299: LD_ADDR_VAR 0 5
50303: PUSH
50304: LD_VAR 0 5
50308: PUSH
50309: LD_VAR 0 17
50313: ISECT
50314: ST_TO_ADDR
// if not list then
50315: LD_VAR 0 5
50319: NOT
50320: IFFALSE 50324
// exit ;
50322: GO 51128
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50324: LD_VAR 0 12
50328: PUSH
50329: LD_INT 3
50331: EQUAL
50332: PUSH
50333: LD_INT 49
50335: PUSH
50336: LD_VAR 0 5
50340: IN
50341: AND
50342: PUSH
50343: LD_INT 31
50345: PPUSH
50346: LD_VAR 0 16
50350: PPUSH
50351: CALL_OW 321
50355: PUSH
50356: LD_INT 2
50358: EQUAL
50359: AND
50360: IFFALSE 50420
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50362: LD_INT 22
50364: PUSH
50365: LD_VAR 0 16
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 35
50376: PUSH
50377: LD_INT 49
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 91
50386: PUSH
50387: LD_VAR 0 1
50391: PUSH
50392: LD_INT 10
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: PPUSH
50405: CALL_OW 69
50409: NOT
50410: IFFALSE 50420
// weapon := ru_time_lapser ;
50412: LD_ADDR_VAR 0 18
50416: PUSH
50417: LD_INT 49
50419: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50420: LD_VAR 0 12
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: IN
50435: PUSH
50436: LD_INT 11
50438: PUSH
50439: LD_VAR 0 5
50443: IN
50444: PUSH
50445: LD_INT 30
50447: PUSH
50448: LD_VAR 0 5
50452: IN
50453: OR
50454: AND
50455: PUSH
50456: LD_INT 6
50458: PPUSH
50459: LD_VAR 0 16
50463: PPUSH
50464: CALL_OW 321
50468: PUSH
50469: LD_INT 2
50471: EQUAL
50472: AND
50473: IFFALSE 50638
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50475: LD_INT 22
50477: PUSH
50478: LD_VAR 0 16
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 35
50492: PUSH
50493: LD_INT 11
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 35
50502: PUSH
50503: LD_INT 30
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 91
50517: PUSH
50518: LD_VAR 0 1
50522: PUSH
50523: LD_INT 18
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: PPUSH
50536: CALL_OW 69
50540: NOT
50541: PUSH
50542: LD_INT 22
50544: PUSH
50545: LD_VAR 0 16
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 30
50559: PUSH
50560: LD_INT 32
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 30
50569: PUSH
50570: LD_INT 33
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 91
50584: PUSH
50585: LD_VAR 0 1
50589: PUSH
50590: LD_INT 12
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: PPUSH
50606: CALL_OW 69
50610: PUSH
50611: LD_INT 2
50613: GREATER
50614: AND
50615: IFFALSE 50638
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50617: LD_ADDR_VAR 0 18
50621: PUSH
50622: LD_INT 11
50624: PUSH
50625: LD_INT 30
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_VAR 0 12
50636: ARRAY
50637: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50638: LD_VAR 0 18
50642: NOT
50643: PUSH
50644: LD_INT 40
50646: PPUSH
50647: LD_VAR 0 16
50651: PPUSH
50652: CALL_OW 321
50656: PUSH
50657: LD_INT 2
50659: EQUAL
50660: AND
50661: PUSH
50662: LD_INT 7
50664: PUSH
50665: LD_VAR 0 5
50669: IN
50670: PUSH
50671: LD_INT 28
50673: PUSH
50674: LD_VAR 0 5
50678: IN
50679: OR
50680: PUSH
50681: LD_INT 45
50683: PUSH
50684: LD_VAR 0 5
50688: IN
50689: OR
50690: AND
50691: IFFALSE 50945
// begin hex := GetHexInfo ( x , y ) ;
50693: LD_ADDR_VAR 0 4
50697: PUSH
50698: LD_VAR 0 10
50702: PPUSH
50703: LD_VAR 0 11
50707: PPUSH
50708: CALL_OW 546
50712: ST_TO_ADDR
// if hex [ 1 ] then
50713: LD_VAR 0 4
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: IFFALSE 50725
// exit ;
50723: GO 51128
// height := hex [ 2 ] ;
50725: LD_ADDR_VAR 0 15
50729: PUSH
50730: LD_VAR 0 4
50734: PUSH
50735: LD_INT 2
50737: ARRAY
50738: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50739: LD_ADDR_VAR 0 14
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: LD_INT 5
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: ST_TO_ADDR
// for i in tmp do
50762: LD_ADDR_VAR 0 8
50766: PUSH
50767: LD_VAR 0 14
50771: PUSH
50772: FOR_IN
50773: IFFALSE 50943
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50775: LD_ADDR_VAR 0 9
50779: PUSH
50780: LD_VAR 0 10
50784: PPUSH
50785: LD_VAR 0 8
50789: PPUSH
50790: LD_INT 5
50792: PPUSH
50793: CALL_OW 272
50797: PUSH
50798: LD_VAR 0 11
50802: PPUSH
50803: LD_VAR 0 8
50807: PPUSH
50808: LD_INT 5
50810: PPUSH
50811: CALL_OW 273
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50820: LD_VAR 0 9
50824: PUSH
50825: LD_INT 1
50827: ARRAY
50828: PPUSH
50829: LD_VAR 0 9
50833: PUSH
50834: LD_INT 2
50836: ARRAY
50837: PPUSH
50838: CALL_OW 488
50842: IFFALSE 50941
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50844: LD_ADDR_VAR 0 4
50848: PUSH
50849: LD_VAR 0 9
50853: PUSH
50854: LD_INT 1
50856: ARRAY
50857: PPUSH
50858: LD_VAR 0 9
50862: PUSH
50863: LD_INT 2
50865: ARRAY
50866: PPUSH
50867: CALL_OW 546
50871: ST_TO_ADDR
// if hex [ 1 ] then
50872: LD_VAR 0 4
50876: PUSH
50877: LD_INT 1
50879: ARRAY
50880: IFFALSE 50884
// continue ;
50882: GO 50772
// h := hex [ 2 ] ;
50884: LD_ADDR_VAR 0 13
50888: PUSH
50889: LD_VAR 0 4
50893: PUSH
50894: LD_INT 2
50896: ARRAY
50897: ST_TO_ADDR
// if h + 7 < height then
50898: LD_VAR 0 13
50902: PUSH
50903: LD_INT 7
50905: PLUS
50906: PUSH
50907: LD_VAR 0 15
50911: LESS
50912: IFFALSE 50941
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50914: LD_ADDR_VAR 0 18
50918: PUSH
50919: LD_INT 7
50921: PUSH
50922: LD_INT 28
50924: PUSH
50925: LD_INT 45
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: LIST
50932: PUSH
50933: LD_VAR 0 12
50937: ARRAY
50938: ST_TO_ADDR
// break ;
50939: GO 50943
// end ; end ; end ;
50941: GO 50772
50943: POP
50944: POP
// end ; if not weapon then
50945: LD_VAR 0 18
50949: NOT
50950: IFFALSE 51010
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50952: LD_ADDR_VAR 0 5
50956: PUSH
50957: LD_VAR 0 5
50961: PUSH
50962: LD_INT 11
50964: PUSH
50965: LD_INT 30
50967: PUSH
50968: LD_INT 49
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: DIFF
50976: ST_TO_ADDR
// if not list then
50977: LD_VAR 0 5
50981: NOT
50982: IFFALSE 50986
// exit ;
50984: GO 51128
// weapon := list [ rand ( 1 , list ) ] ;
50986: LD_ADDR_VAR 0 18
50990: PUSH
50991: LD_VAR 0 5
50995: PUSH
50996: LD_INT 1
50998: PPUSH
50999: LD_VAR 0 5
51003: PPUSH
51004: CALL_OW 12
51008: ARRAY
51009: ST_TO_ADDR
// end ; if weapon then
51010: LD_VAR 0 18
51014: IFFALSE 51128
// begin tmp := CostOfWeapon ( weapon ) ;
51016: LD_ADDR_VAR 0 14
51020: PUSH
51021: LD_VAR 0 18
51025: PPUSH
51026: CALL_OW 451
51030: ST_TO_ADDR
// j := GetBase ( tower ) ;
51031: LD_ADDR_VAR 0 9
51035: PUSH
51036: LD_VAR 0 1
51040: PPUSH
51041: CALL_OW 274
51045: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51046: LD_VAR 0 9
51050: PPUSH
51051: LD_INT 1
51053: PPUSH
51054: CALL_OW 275
51058: PUSH
51059: LD_VAR 0 14
51063: PUSH
51064: LD_INT 1
51066: ARRAY
51067: GREATEREQUAL
51068: PUSH
51069: LD_VAR 0 9
51073: PPUSH
51074: LD_INT 2
51076: PPUSH
51077: CALL_OW 275
51081: PUSH
51082: LD_VAR 0 14
51086: PUSH
51087: LD_INT 2
51089: ARRAY
51090: GREATEREQUAL
51091: AND
51092: PUSH
51093: LD_VAR 0 9
51097: PPUSH
51098: LD_INT 3
51100: PPUSH
51101: CALL_OW 275
51105: PUSH
51106: LD_VAR 0 14
51110: PUSH
51111: LD_INT 3
51113: ARRAY
51114: GREATEREQUAL
51115: AND
51116: IFFALSE 51128
// result := weapon ;
51118: LD_ADDR_VAR 0 3
51122: PUSH
51123: LD_VAR 0 18
51127: ST_TO_ADDR
// end ; end ;
51128: LD_VAR 0 3
51132: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51133: LD_INT 0
51135: PPUSH
51136: PPUSH
// result := true ;
51137: LD_ADDR_VAR 0 3
51141: PUSH
51142: LD_INT 1
51144: ST_TO_ADDR
// if array1 = array2 then
51145: LD_VAR 0 1
51149: PUSH
51150: LD_VAR 0 2
51154: EQUAL
51155: IFFALSE 51215
// begin for i = 1 to array1 do
51157: LD_ADDR_VAR 0 4
51161: PUSH
51162: DOUBLE
51163: LD_INT 1
51165: DEC
51166: ST_TO_ADDR
51167: LD_VAR 0 1
51171: PUSH
51172: FOR_TO
51173: IFFALSE 51211
// if array1 [ i ] <> array2 [ i ] then
51175: LD_VAR 0 1
51179: PUSH
51180: LD_VAR 0 4
51184: ARRAY
51185: PUSH
51186: LD_VAR 0 2
51190: PUSH
51191: LD_VAR 0 4
51195: ARRAY
51196: NONEQUAL
51197: IFFALSE 51209
// begin result := false ;
51199: LD_ADDR_VAR 0 3
51203: PUSH
51204: LD_INT 0
51206: ST_TO_ADDR
// break ;
51207: GO 51211
// end ;
51209: GO 51172
51211: POP
51212: POP
// end else
51213: GO 51223
// result := false ;
51215: LD_ADDR_VAR 0 3
51219: PUSH
51220: LD_INT 0
51222: ST_TO_ADDR
// end ;
51223: LD_VAR 0 3
51227: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51228: LD_INT 0
51230: PPUSH
51231: PPUSH
// if not array1 or not array2 then
51232: LD_VAR 0 1
51236: NOT
51237: PUSH
51238: LD_VAR 0 2
51242: NOT
51243: OR
51244: IFFALSE 51248
// exit ;
51246: GO 51312
// result := true ;
51248: LD_ADDR_VAR 0 3
51252: PUSH
51253: LD_INT 1
51255: ST_TO_ADDR
// for i = 1 to array1 do
51256: LD_ADDR_VAR 0 4
51260: PUSH
51261: DOUBLE
51262: LD_INT 1
51264: DEC
51265: ST_TO_ADDR
51266: LD_VAR 0 1
51270: PUSH
51271: FOR_TO
51272: IFFALSE 51310
// if array1 [ i ] <> array2 [ i ] then
51274: LD_VAR 0 1
51278: PUSH
51279: LD_VAR 0 4
51283: ARRAY
51284: PUSH
51285: LD_VAR 0 2
51289: PUSH
51290: LD_VAR 0 4
51294: ARRAY
51295: NONEQUAL
51296: IFFALSE 51308
// begin result := false ;
51298: LD_ADDR_VAR 0 3
51302: PUSH
51303: LD_INT 0
51305: ST_TO_ADDR
// break ;
51306: GO 51310
// end ;
51308: GO 51271
51310: POP
51311: POP
// end ;
51312: LD_VAR 0 3
51316: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51317: LD_INT 0
51319: PPUSH
51320: PPUSH
51321: PPUSH
// pom := GetBase ( fac ) ;
51322: LD_ADDR_VAR 0 5
51326: PUSH
51327: LD_VAR 0 1
51331: PPUSH
51332: CALL_OW 274
51336: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51337: LD_ADDR_VAR 0 4
51341: PUSH
51342: LD_VAR 0 2
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: PPUSH
51351: LD_VAR 0 2
51355: PUSH
51356: LD_INT 2
51358: ARRAY
51359: PPUSH
51360: LD_VAR 0 2
51364: PUSH
51365: LD_INT 3
51367: ARRAY
51368: PPUSH
51369: LD_VAR 0 2
51373: PUSH
51374: LD_INT 4
51376: ARRAY
51377: PPUSH
51378: CALL_OW 449
51382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51383: LD_ADDR_VAR 0 3
51387: PUSH
51388: LD_VAR 0 5
51392: PPUSH
51393: LD_INT 1
51395: PPUSH
51396: CALL_OW 275
51400: PUSH
51401: LD_VAR 0 4
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: GREATEREQUAL
51410: PUSH
51411: LD_VAR 0 5
51415: PPUSH
51416: LD_INT 2
51418: PPUSH
51419: CALL_OW 275
51423: PUSH
51424: LD_VAR 0 4
51428: PUSH
51429: LD_INT 2
51431: ARRAY
51432: GREATEREQUAL
51433: AND
51434: PUSH
51435: LD_VAR 0 5
51439: PPUSH
51440: LD_INT 3
51442: PPUSH
51443: CALL_OW 275
51447: PUSH
51448: LD_VAR 0 4
51452: PUSH
51453: LD_INT 3
51455: ARRAY
51456: GREATEREQUAL
51457: AND
51458: ST_TO_ADDR
// end ;
51459: LD_VAR 0 3
51463: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51464: LD_INT 0
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
// pom := GetBase ( building ) ;
51470: LD_ADDR_VAR 0 3
51474: PUSH
51475: LD_VAR 0 1
51479: PPUSH
51480: CALL_OW 274
51484: ST_TO_ADDR
// if not pom then
51485: LD_VAR 0 3
51489: NOT
51490: IFFALSE 51494
// exit ;
51492: GO 51664
// btype := GetBType ( building ) ;
51494: LD_ADDR_VAR 0 5
51498: PUSH
51499: LD_VAR 0 1
51503: PPUSH
51504: CALL_OW 266
51508: ST_TO_ADDR
// if btype = b_armoury then
51509: LD_VAR 0 5
51513: PUSH
51514: LD_INT 4
51516: EQUAL
51517: IFFALSE 51527
// btype := b_barracks ;
51519: LD_ADDR_VAR 0 5
51523: PUSH
51524: LD_INT 5
51526: ST_TO_ADDR
// if btype = b_depot then
51527: LD_VAR 0 5
51531: PUSH
51532: LD_INT 0
51534: EQUAL
51535: IFFALSE 51545
// btype := b_warehouse ;
51537: LD_ADDR_VAR 0 5
51541: PUSH
51542: LD_INT 1
51544: ST_TO_ADDR
// if btype = b_workshop then
51545: LD_VAR 0 5
51549: PUSH
51550: LD_INT 2
51552: EQUAL
51553: IFFALSE 51563
// btype := b_factory ;
51555: LD_ADDR_VAR 0 5
51559: PUSH
51560: LD_INT 3
51562: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51563: LD_ADDR_VAR 0 4
51567: PUSH
51568: LD_VAR 0 5
51572: PPUSH
51573: LD_VAR 0 1
51577: PPUSH
51578: CALL_OW 248
51582: PPUSH
51583: CALL_OW 450
51587: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51588: LD_ADDR_VAR 0 2
51592: PUSH
51593: LD_VAR 0 3
51597: PPUSH
51598: LD_INT 1
51600: PPUSH
51601: CALL_OW 275
51605: PUSH
51606: LD_VAR 0 4
51610: PUSH
51611: LD_INT 1
51613: ARRAY
51614: GREATEREQUAL
51615: PUSH
51616: LD_VAR 0 3
51620: PPUSH
51621: LD_INT 2
51623: PPUSH
51624: CALL_OW 275
51628: PUSH
51629: LD_VAR 0 4
51633: PUSH
51634: LD_INT 2
51636: ARRAY
51637: GREATEREQUAL
51638: AND
51639: PUSH
51640: LD_VAR 0 3
51644: PPUSH
51645: LD_INT 3
51647: PPUSH
51648: CALL_OW 275
51652: PUSH
51653: LD_VAR 0 4
51657: PUSH
51658: LD_INT 3
51660: ARRAY
51661: GREATEREQUAL
51662: AND
51663: ST_TO_ADDR
// end ;
51664: LD_VAR 0 2
51668: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51669: LD_INT 0
51671: PPUSH
51672: PPUSH
51673: PPUSH
// pom := GetBase ( building ) ;
51674: LD_ADDR_VAR 0 4
51678: PUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 274
51688: ST_TO_ADDR
// if not pom then
51689: LD_VAR 0 4
51693: NOT
51694: IFFALSE 51698
// exit ;
51696: GO 51799
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51698: LD_ADDR_VAR 0 5
51702: PUSH
51703: LD_VAR 0 2
51707: PPUSH
51708: LD_VAR 0 1
51712: PPUSH
51713: CALL_OW 248
51717: PPUSH
51718: CALL_OW 450
51722: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51723: LD_ADDR_VAR 0 3
51727: PUSH
51728: LD_VAR 0 4
51732: PPUSH
51733: LD_INT 1
51735: PPUSH
51736: CALL_OW 275
51740: PUSH
51741: LD_VAR 0 5
51745: PUSH
51746: LD_INT 1
51748: ARRAY
51749: GREATEREQUAL
51750: PUSH
51751: LD_VAR 0 4
51755: PPUSH
51756: LD_INT 2
51758: PPUSH
51759: CALL_OW 275
51763: PUSH
51764: LD_VAR 0 5
51768: PUSH
51769: LD_INT 2
51771: ARRAY
51772: GREATEREQUAL
51773: AND
51774: PUSH
51775: LD_VAR 0 4
51779: PPUSH
51780: LD_INT 3
51782: PPUSH
51783: CALL_OW 275
51787: PUSH
51788: LD_VAR 0 5
51792: PUSH
51793: LD_INT 3
51795: ARRAY
51796: GREATEREQUAL
51797: AND
51798: ST_TO_ADDR
// end ;
51799: LD_VAR 0 3
51803: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51804: LD_INT 0
51806: PPUSH
51807: PPUSH
51808: PPUSH
51809: PPUSH
51810: PPUSH
51811: PPUSH
51812: PPUSH
51813: PPUSH
51814: PPUSH
51815: PPUSH
51816: PPUSH
// result := false ;
51817: LD_ADDR_VAR 0 8
51821: PUSH
51822: LD_INT 0
51824: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51825: LD_VAR 0 5
51829: NOT
51830: PUSH
51831: LD_VAR 0 1
51835: NOT
51836: OR
51837: PUSH
51838: LD_VAR 0 2
51842: NOT
51843: OR
51844: PUSH
51845: LD_VAR 0 3
51849: NOT
51850: OR
51851: IFFALSE 51855
// exit ;
51853: GO 52669
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51855: LD_ADDR_VAR 0 14
51859: PUSH
51860: LD_VAR 0 1
51864: PPUSH
51865: LD_VAR 0 2
51869: PPUSH
51870: LD_VAR 0 3
51874: PPUSH
51875: LD_VAR 0 4
51879: PPUSH
51880: LD_VAR 0 5
51884: PUSH
51885: LD_INT 1
51887: ARRAY
51888: PPUSH
51889: CALL_OW 248
51893: PPUSH
51894: LD_INT 0
51896: PPUSH
51897: CALL 53902 0 6
51901: ST_TO_ADDR
// if not hexes then
51902: LD_VAR 0 14
51906: NOT
51907: IFFALSE 51911
// exit ;
51909: GO 52669
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51911: LD_ADDR_VAR 0 17
51915: PUSH
51916: LD_VAR 0 5
51920: PPUSH
51921: LD_INT 22
51923: PUSH
51924: LD_VAR 0 13
51928: PPUSH
51929: CALL_OW 255
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 30
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 30
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PPUSH
51970: CALL_OW 72
51974: ST_TO_ADDR
// for i = 1 to hexes do
51975: LD_ADDR_VAR 0 9
51979: PUSH
51980: DOUBLE
51981: LD_INT 1
51983: DEC
51984: ST_TO_ADDR
51985: LD_VAR 0 14
51989: PUSH
51990: FOR_TO
51991: IFFALSE 52667
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51993: LD_ADDR_VAR 0 13
51997: PUSH
51998: LD_VAR 0 14
52002: PUSH
52003: LD_VAR 0 9
52007: ARRAY
52008: PUSH
52009: LD_INT 1
52011: ARRAY
52012: PPUSH
52013: LD_VAR 0 14
52017: PUSH
52018: LD_VAR 0 9
52022: ARRAY
52023: PUSH
52024: LD_INT 2
52026: ARRAY
52027: PPUSH
52028: CALL_OW 428
52032: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52033: LD_VAR 0 14
52037: PUSH
52038: LD_VAR 0 9
52042: ARRAY
52043: PUSH
52044: LD_INT 1
52046: ARRAY
52047: PPUSH
52048: LD_VAR 0 14
52052: PUSH
52053: LD_VAR 0 9
52057: ARRAY
52058: PUSH
52059: LD_INT 2
52061: ARRAY
52062: PPUSH
52063: CALL_OW 351
52067: PUSH
52068: LD_VAR 0 14
52072: PUSH
52073: LD_VAR 0 9
52077: ARRAY
52078: PUSH
52079: LD_INT 1
52081: ARRAY
52082: PPUSH
52083: LD_VAR 0 14
52087: PUSH
52088: LD_VAR 0 9
52092: ARRAY
52093: PUSH
52094: LD_INT 2
52096: ARRAY
52097: PPUSH
52098: CALL_OW 488
52102: NOT
52103: OR
52104: PUSH
52105: LD_VAR 0 13
52109: PPUSH
52110: CALL_OW 247
52114: PUSH
52115: LD_INT 3
52117: EQUAL
52118: OR
52119: IFFALSE 52125
// exit ;
52121: POP
52122: POP
52123: GO 52669
// if not tmp then
52125: LD_VAR 0 13
52129: NOT
52130: IFFALSE 52134
// continue ;
52132: GO 51990
// result := true ;
52134: LD_ADDR_VAR 0 8
52138: PUSH
52139: LD_INT 1
52141: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52142: LD_VAR 0 6
52146: PUSH
52147: LD_VAR 0 13
52151: PPUSH
52152: CALL_OW 247
52156: PUSH
52157: LD_INT 2
52159: EQUAL
52160: AND
52161: PUSH
52162: LD_VAR 0 13
52166: PPUSH
52167: CALL_OW 263
52171: PUSH
52172: LD_INT 1
52174: EQUAL
52175: AND
52176: IFFALSE 52340
// begin if IsDrivenBy ( tmp ) then
52178: LD_VAR 0 13
52182: PPUSH
52183: CALL_OW 311
52187: IFFALSE 52191
// continue ;
52189: GO 51990
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52191: LD_VAR 0 6
52195: PPUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 60
52201: PUSH
52202: EMPTY
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 55
52214: PUSH
52215: EMPTY
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PPUSH
52226: CALL_OW 72
52230: IFFALSE 52338
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52232: LD_ADDR_VAR 0 18
52236: PUSH
52237: LD_VAR 0 6
52241: PPUSH
52242: LD_INT 3
52244: PUSH
52245: LD_INT 60
52247: PUSH
52248: EMPTY
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: LD_INT 55
52260: PUSH
52261: EMPTY
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PPUSH
52272: CALL_OW 72
52276: PUSH
52277: LD_INT 1
52279: ARRAY
52280: ST_TO_ADDR
// if IsInUnit ( driver ) then
52281: LD_VAR 0 18
52285: PPUSH
52286: CALL_OW 310
52290: IFFALSE 52301
// ComExit ( driver ) ;
52292: LD_VAR 0 18
52296: PPUSH
52297: CALL 77682 0 1
// AddComEnterUnit ( driver , tmp ) ;
52301: LD_VAR 0 18
52305: PPUSH
52306: LD_VAR 0 13
52310: PPUSH
52311: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52315: LD_VAR 0 18
52319: PPUSH
52320: LD_VAR 0 7
52324: PPUSH
52325: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52329: LD_VAR 0 18
52333: PPUSH
52334: CALL_OW 181
// end ; continue ;
52338: GO 51990
// end ; if not cleaners or not tmp in cleaners then
52340: LD_VAR 0 6
52344: NOT
52345: PUSH
52346: LD_VAR 0 13
52350: PUSH
52351: LD_VAR 0 6
52355: IN
52356: NOT
52357: OR
52358: IFFALSE 52665
// begin if dep then
52360: LD_VAR 0 17
52364: IFFALSE 52500
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52366: LD_ADDR_VAR 0 16
52370: PUSH
52371: LD_VAR 0 17
52375: PUSH
52376: LD_INT 1
52378: ARRAY
52379: PPUSH
52380: CALL_OW 250
52384: PPUSH
52385: LD_VAR 0 17
52389: PUSH
52390: LD_INT 1
52392: ARRAY
52393: PPUSH
52394: CALL_OW 254
52398: PPUSH
52399: LD_INT 5
52401: PPUSH
52402: CALL_OW 272
52406: PUSH
52407: LD_VAR 0 17
52411: PUSH
52412: LD_INT 1
52414: ARRAY
52415: PPUSH
52416: CALL_OW 251
52420: PPUSH
52421: LD_VAR 0 17
52425: PUSH
52426: LD_INT 1
52428: ARRAY
52429: PPUSH
52430: CALL_OW 254
52434: PPUSH
52435: LD_INT 5
52437: PPUSH
52438: CALL_OW 273
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52447: LD_VAR 0 16
52451: PUSH
52452: LD_INT 1
52454: ARRAY
52455: PPUSH
52456: LD_VAR 0 16
52460: PUSH
52461: LD_INT 2
52463: ARRAY
52464: PPUSH
52465: CALL_OW 488
52469: IFFALSE 52500
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52471: LD_VAR 0 13
52475: PPUSH
52476: LD_VAR 0 16
52480: PUSH
52481: LD_INT 1
52483: ARRAY
52484: PPUSH
52485: LD_VAR 0 16
52489: PUSH
52490: LD_INT 2
52492: ARRAY
52493: PPUSH
52494: CALL_OW 111
// continue ;
52498: GO 51990
// end ; end ; r := GetDir ( tmp ) ;
52500: LD_ADDR_VAR 0 15
52504: PUSH
52505: LD_VAR 0 13
52509: PPUSH
52510: CALL_OW 254
52514: ST_TO_ADDR
// if r = 5 then
52515: LD_VAR 0 15
52519: PUSH
52520: LD_INT 5
52522: EQUAL
52523: IFFALSE 52533
// r := 0 ;
52525: LD_ADDR_VAR 0 15
52529: PUSH
52530: LD_INT 0
52532: ST_TO_ADDR
// for j = r to 5 do
52533: LD_ADDR_VAR 0 10
52537: PUSH
52538: DOUBLE
52539: LD_VAR 0 15
52543: DEC
52544: ST_TO_ADDR
52545: LD_INT 5
52547: PUSH
52548: FOR_TO
52549: IFFALSE 52663
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52551: LD_ADDR_VAR 0 11
52555: PUSH
52556: LD_VAR 0 13
52560: PPUSH
52561: CALL_OW 250
52565: PPUSH
52566: LD_VAR 0 10
52570: PPUSH
52571: LD_INT 2
52573: PPUSH
52574: CALL_OW 272
52578: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52579: LD_ADDR_VAR 0 12
52583: PUSH
52584: LD_VAR 0 13
52588: PPUSH
52589: CALL_OW 251
52593: PPUSH
52594: LD_VAR 0 10
52598: PPUSH
52599: LD_INT 2
52601: PPUSH
52602: CALL_OW 273
52606: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52607: LD_VAR 0 11
52611: PPUSH
52612: LD_VAR 0 12
52616: PPUSH
52617: CALL_OW 488
52621: PUSH
52622: LD_VAR 0 11
52626: PPUSH
52627: LD_VAR 0 12
52631: PPUSH
52632: CALL_OW 428
52636: NOT
52637: AND
52638: IFFALSE 52661
// begin ComMoveXY ( tmp , _x , _y ) ;
52640: LD_VAR 0 13
52644: PPUSH
52645: LD_VAR 0 11
52649: PPUSH
52650: LD_VAR 0 12
52654: PPUSH
52655: CALL_OW 111
// break ;
52659: GO 52663
// end ; end ;
52661: GO 52548
52663: POP
52664: POP
// end ; end ;
52665: GO 51990
52667: POP
52668: POP
// end ;
52669: LD_VAR 0 8
52673: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52674: LD_INT 0
52676: PPUSH
// result := true ;
52677: LD_ADDR_VAR 0 3
52681: PUSH
52682: LD_INT 1
52684: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52685: LD_VAR 0 2
52689: PUSH
52690: LD_INT 24
52692: DOUBLE
52693: EQUAL
52694: IFTRUE 52704
52696: LD_INT 33
52698: DOUBLE
52699: EQUAL
52700: IFTRUE 52704
52702: GO 52729
52704: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52705: LD_ADDR_VAR 0 3
52709: PUSH
52710: LD_INT 32
52712: PPUSH
52713: LD_VAR 0 1
52717: PPUSH
52718: CALL_OW 321
52722: PUSH
52723: LD_INT 2
52725: EQUAL
52726: ST_TO_ADDR
52727: GO 53045
52729: LD_INT 20
52731: DOUBLE
52732: EQUAL
52733: IFTRUE 52737
52735: GO 52762
52737: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52738: LD_ADDR_VAR 0 3
52742: PUSH
52743: LD_INT 6
52745: PPUSH
52746: LD_VAR 0 1
52750: PPUSH
52751: CALL_OW 321
52755: PUSH
52756: LD_INT 2
52758: EQUAL
52759: ST_TO_ADDR
52760: GO 53045
52762: LD_INT 22
52764: DOUBLE
52765: EQUAL
52766: IFTRUE 52776
52768: LD_INT 36
52770: DOUBLE
52771: EQUAL
52772: IFTRUE 52776
52774: GO 52801
52776: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52777: LD_ADDR_VAR 0 3
52781: PUSH
52782: LD_INT 15
52784: PPUSH
52785: LD_VAR 0 1
52789: PPUSH
52790: CALL_OW 321
52794: PUSH
52795: LD_INT 2
52797: EQUAL
52798: ST_TO_ADDR
52799: GO 53045
52801: LD_INT 30
52803: DOUBLE
52804: EQUAL
52805: IFTRUE 52809
52807: GO 52834
52809: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52810: LD_ADDR_VAR 0 3
52814: PUSH
52815: LD_INT 20
52817: PPUSH
52818: LD_VAR 0 1
52822: PPUSH
52823: CALL_OW 321
52827: PUSH
52828: LD_INT 2
52830: EQUAL
52831: ST_TO_ADDR
52832: GO 53045
52834: LD_INT 28
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52848
52840: LD_INT 21
52842: DOUBLE
52843: EQUAL
52844: IFTRUE 52848
52846: GO 52873
52848: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52849: LD_ADDR_VAR 0 3
52853: PUSH
52854: LD_INT 21
52856: PPUSH
52857: LD_VAR 0 1
52861: PPUSH
52862: CALL_OW 321
52866: PUSH
52867: LD_INT 2
52869: EQUAL
52870: ST_TO_ADDR
52871: GO 53045
52873: LD_INT 16
52875: DOUBLE
52876: EQUAL
52877: IFTRUE 52881
52879: GO 52906
52881: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52882: LD_ADDR_VAR 0 3
52886: PUSH
52887: LD_INT 84
52889: PPUSH
52890: LD_VAR 0 1
52894: PPUSH
52895: CALL_OW 321
52899: PUSH
52900: LD_INT 2
52902: EQUAL
52903: ST_TO_ADDR
52904: GO 53045
52906: LD_INT 19
52908: DOUBLE
52909: EQUAL
52910: IFTRUE 52920
52912: LD_INT 23
52914: DOUBLE
52915: EQUAL
52916: IFTRUE 52920
52918: GO 52945
52920: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52921: LD_ADDR_VAR 0 3
52925: PUSH
52926: LD_INT 83
52928: PPUSH
52929: LD_VAR 0 1
52933: PPUSH
52934: CALL_OW 321
52938: PUSH
52939: LD_INT 2
52941: EQUAL
52942: ST_TO_ADDR
52943: GO 53045
52945: LD_INT 17
52947: DOUBLE
52948: EQUAL
52949: IFTRUE 52953
52951: GO 52978
52953: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52954: LD_ADDR_VAR 0 3
52958: PUSH
52959: LD_INT 39
52961: PPUSH
52962: LD_VAR 0 1
52966: PPUSH
52967: CALL_OW 321
52971: PUSH
52972: LD_INT 2
52974: EQUAL
52975: ST_TO_ADDR
52976: GO 53045
52978: LD_INT 18
52980: DOUBLE
52981: EQUAL
52982: IFTRUE 52986
52984: GO 53011
52986: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52987: LD_ADDR_VAR 0 3
52991: PUSH
52992: LD_INT 40
52994: PPUSH
52995: LD_VAR 0 1
52999: PPUSH
53000: CALL_OW 321
53004: PUSH
53005: LD_INT 2
53007: EQUAL
53008: ST_TO_ADDR
53009: GO 53045
53011: LD_INT 27
53013: DOUBLE
53014: EQUAL
53015: IFTRUE 53019
53017: GO 53044
53019: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53020: LD_ADDR_VAR 0 3
53024: PUSH
53025: LD_INT 35
53027: PPUSH
53028: LD_VAR 0 1
53032: PPUSH
53033: CALL_OW 321
53037: PUSH
53038: LD_INT 2
53040: EQUAL
53041: ST_TO_ADDR
53042: GO 53045
53044: POP
// end ;
53045: LD_VAR 0 3
53049: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53050: LD_INT 0
53052: PPUSH
53053: PPUSH
53054: PPUSH
53055: PPUSH
53056: PPUSH
53057: PPUSH
53058: PPUSH
53059: PPUSH
53060: PPUSH
53061: PPUSH
53062: PPUSH
// result := false ;
53063: LD_ADDR_VAR 0 6
53067: PUSH
53068: LD_INT 0
53070: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53071: LD_VAR 0 1
53075: NOT
53076: PUSH
53077: LD_VAR 0 1
53081: PPUSH
53082: CALL_OW 266
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: IN
53097: NOT
53098: OR
53099: PUSH
53100: LD_VAR 0 2
53104: NOT
53105: OR
53106: PUSH
53107: LD_VAR 0 5
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 4
53126: PUSH
53127: LD_INT 5
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: IN
53138: NOT
53139: OR
53140: PUSH
53141: LD_VAR 0 3
53145: PPUSH
53146: LD_VAR 0 4
53150: PPUSH
53151: CALL_OW 488
53155: NOT
53156: OR
53157: IFFALSE 53161
// exit ;
53159: GO 53897
// side := GetSide ( depot ) ;
53161: LD_ADDR_VAR 0 9
53165: PUSH
53166: LD_VAR 0 1
53170: PPUSH
53171: CALL_OW 255
53175: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53176: LD_VAR 0 9
53180: PPUSH
53181: LD_VAR 0 2
53185: PPUSH
53186: CALL 52674 0 2
53190: NOT
53191: IFFALSE 53195
// exit ;
53193: GO 53897
// pom := GetBase ( depot ) ;
53195: LD_ADDR_VAR 0 10
53199: PUSH
53200: LD_VAR 0 1
53204: PPUSH
53205: CALL_OW 274
53209: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53210: LD_ADDR_VAR 0 11
53214: PUSH
53215: LD_VAR 0 2
53219: PPUSH
53220: LD_VAR 0 1
53224: PPUSH
53225: CALL_OW 248
53229: PPUSH
53230: CALL_OW 450
53234: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53235: LD_VAR 0 10
53239: PPUSH
53240: LD_INT 1
53242: PPUSH
53243: CALL_OW 275
53247: PUSH
53248: LD_VAR 0 11
53252: PUSH
53253: LD_INT 1
53255: ARRAY
53256: GREATEREQUAL
53257: PUSH
53258: LD_VAR 0 10
53262: PPUSH
53263: LD_INT 2
53265: PPUSH
53266: CALL_OW 275
53270: PUSH
53271: LD_VAR 0 11
53275: PUSH
53276: LD_INT 2
53278: ARRAY
53279: GREATEREQUAL
53280: AND
53281: PUSH
53282: LD_VAR 0 10
53286: PPUSH
53287: LD_INT 3
53289: PPUSH
53290: CALL_OW 275
53294: PUSH
53295: LD_VAR 0 11
53299: PUSH
53300: LD_INT 3
53302: ARRAY
53303: GREATEREQUAL
53304: AND
53305: NOT
53306: IFFALSE 53310
// exit ;
53308: GO 53897
// if GetBType ( depot ) = b_depot then
53310: LD_VAR 0 1
53314: PPUSH
53315: CALL_OW 266
53319: PUSH
53320: LD_INT 0
53322: EQUAL
53323: IFFALSE 53335
// dist := 28 else
53325: LD_ADDR_VAR 0 14
53329: PUSH
53330: LD_INT 28
53332: ST_TO_ADDR
53333: GO 53343
// dist := 36 ;
53335: LD_ADDR_VAR 0 14
53339: PUSH
53340: LD_INT 36
53342: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53343: LD_VAR 0 1
53347: PPUSH
53348: LD_VAR 0 3
53352: PPUSH
53353: LD_VAR 0 4
53357: PPUSH
53358: CALL_OW 297
53362: PUSH
53363: LD_VAR 0 14
53367: GREATER
53368: IFFALSE 53372
// exit ;
53370: GO 53897
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53372: LD_ADDR_VAR 0 12
53376: PUSH
53377: LD_VAR 0 2
53381: PPUSH
53382: LD_VAR 0 3
53386: PPUSH
53387: LD_VAR 0 4
53391: PPUSH
53392: LD_VAR 0 5
53396: PPUSH
53397: LD_VAR 0 1
53401: PPUSH
53402: CALL_OW 248
53406: PPUSH
53407: LD_INT 0
53409: PPUSH
53410: CALL 53902 0 6
53414: ST_TO_ADDR
// if not hexes then
53415: LD_VAR 0 12
53419: NOT
53420: IFFALSE 53424
// exit ;
53422: GO 53897
// hex := GetHexInfo ( x , y ) ;
53424: LD_ADDR_VAR 0 15
53428: PUSH
53429: LD_VAR 0 3
53433: PPUSH
53434: LD_VAR 0 4
53438: PPUSH
53439: CALL_OW 546
53443: ST_TO_ADDR
// if hex [ 1 ] then
53444: LD_VAR 0 15
53448: PUSH
53449: LD_INT 1
53451: ARRAY
53452: IFFALSE 53456
// exit ;
53454: GO 53897
// height := hex [ 2 ] ;
53456: LD_ADDR_VAR 0 13
53460: PUSH
53461: LD_VAR 0 15
53465: PUSH
53466: LD_INT 2
53468: ARRAY
53469: ST_TO_ADDR
// for i = 1 to hexes do
53470: LD_ADDR_VAR 0 7
53474: PUSH
53475: DOUBLE
53476: LD_INT 1
53478: DEC
53479: ST_TO_ADDR
53480: LD_VAR 0 12
53484: PUSH
53485: FOR_TO
53486: IFFALSE 53816
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53488: LD_VAR 0 12
53492: PUSH
53493: LD_VAR 0 7
53497: ARRAY
53498: PUSH
53499: LD_INT 1
53501: ARRAY
53502: PPUSH
53503: LD_VAR 0 12
53507: PUSH
53508: LD_VAR 0 7
53512: ARRAY
53513: PUSH
53514: LD_INT 2
53516: ARRAY
53517: PPUSH
53518: CALL_OW 488
53522: NOT
53523: PUSH
53524: LD_VAR 0 12
53528: PUSH
53529: LD_VAR 0 7
53533: ARRAY
53534: PUSH
53535: LD_INT 1
53537: ARRAY
53538: PPUSH
53539: LD_VAR 0 12
53543: PUSH
53544: LD_VAR 0 7
53548: ARRAY
53549: PUSH
53550: LD_INT 2
53552: ARRAY
53553: PPUSH
53554: CALL_OW 428
53558: PUSH
53559: LD_INT 0
53561: GREATER
53562: OR
53563: PUSH
53564: LD_VAR 0 12
53568: PUSH
53569: LD_VAR 0 7
53573: ARRAY
53574: PUSH
53575: LD_INT 1
53577: ARRAY
53578: PPUSH
53579: LD_VAR 0 12
53583: PUSH
53584: LD_VAR 0 7
53588: ARRAY
53589: PUSH
53590: LD_INT 2
53592: ARRAY
53593: PPUSH
53594: CALL_OW 351
53598: OR
53599: IFFALSE 53605
// exit ;
53601: POP
53602: POP
53603: GO 53897
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53605: LD_ADDR_VAR 0 8
53609: PUSH
53610: LD_VAR 0 12
53614: PUSH
53615: LD_VAR 0 7
53619: ARRAY
53620: PUSH
53621: LD_INT 1
53623: ARRAY
53624: PPUSH
53625: LD_VAR 0 12
53629: PUSH
53630: LD_VAR 0 7
53634: ARRAY
53635: PUSH
53636: LD_INT 2
53638: ARRAY
53639: PPUSH
53640: CALL_OW 546
53644: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53645: LD_VAR 0 8
53649: PUSH
53650: LD_INT 1
53652: ARRAY
53653: PUSH
53654: LD_VAR 0 8
53658: PUSH
53659: LD_INT 2
53661: ARRAY
53662: PUSH
53663: LD_VAR 0 13
53667: PUSH
53668: LD_INT 2
53670: PLUS
53671: GREATER
53672: OR
53673: PUSH
53674: LD_VAR 0 8
53678: PUSH
53679: LD_INT 2
53681: ARRAY
53682: PUSH
53683: LD_VAR 0 13
53687: PUSH
53688: LD_INT 2
53690: MINUS
53691: LESS
53692: OR
53693: PUSH
53694: LD_VAR 0 8
53698: PUSH
53699: LD_INT 3
53701: ARRAY
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 8
53708: PUSH
53709: LD_INT 9
53711: PUSH
53712: LD_INT 10
53714: PUSH
53715: LD_INT 11
53717: PUSH
53718: LD_INT 12
53720: PUSH
53721: LD_INT 13
53723: PUSH
53724: LD_INT 16
53726: PUSH
53727: LD_INT 17
53729: PUSH
53730: LD_INT 18
53732: PUSH
53733: LD_INT 19
53735: PUSH
53736: LD_INT 20
53738: PUSH
53739: LD_INT 21
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: IN
53757: NOT
53758: OR
53759: PUSH
53760: LD_VAR 0 8
53764: PUSH
53765: LD_INT 5
53767: ARRAY
53768: NOT
53769: OR
53770: PUSH
53771: LD_VAR 0 8
53775: PUSH
53776: LD_INT 6
53778: ARRAY
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 7
53788: PUSH
53789: LD_INT 9
53791: PUSH
53792: LD_INT 10
53794: PUSH
53795: LD_INT 11
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: IN
53806: NOT
53807: OR
53808: IFFALSE 53814
// exit ;
53810: POP
53811: POP
53812: GO 53897
// end ;
53814: GO 53485
53816: POP
53817: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53818: LD_VAR 0 9
53822: PPUSH
53823: LD_VAR 0 3
53827: PPUSH
53828: LD_VAR 0 4
53832: PPUSH
53833: LD_INT 20
53835: PPUSH
53836: CALL 45849 0 4
53840: PUSH
53841: LD_INT 4
53843: ARRAY
53844: IFFALSE 53848
// exit ;
53846: GO 53897
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53848: LD_VAR 0 2
53852: PUSH
53853: LD_INT 29
53855: PUSH
53856: LD_INT 30
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: IN
53863: PUSH
53864: LD_VAR 0 3
53868: PPUSH
53869: LD_VAR 0 4
53873: PPUSH
53874: LD_VAR 0 9
53878: PPUSH
53879: CALL_OW 440
53883: NOT
53884: AND
53885: IFFALSE 53889
// exit ;
53887: GO 53897
// result := true ;
53889: LD_ADDR_VAR 0 6
53893: PUSH
53894: LD_INT 1
53896: ST_TO_ADDR
// end ;
53897: LD_VAR 0 6
53901: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53902: LD_INT 0
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
53908: PPUSH
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
53928: PPUSH
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
53950: PPUSH
53951: PPUSH
53952: PPUSH
53953: PPUSH
53954: PPUSH
53955: PPUSH
53956: PPUSH
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
// result = [ ] ;
53962: LD_ADDR_VAR 0 7
53966: PUSH
53967: EMPTY
53968: ST_TO_ADDR
// temp_list = [ ] ;
53969: LD_ADDR_VAR 0 9
53973: PUSH
53974: EMPTY
53975: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53976: LD_VAR 0 4
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: LD_INT 5
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: IN
54007: NOT
54008: PUSH
54009: LD_VAR 0 1
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: IN
54024: PUSH
54025: LD_VAR 0 5
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 3
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: IN
54044: NOT
54045: AND
54046: OR
54047: IFFALSE 54051
// exit ;
54049: GO 72442
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54051: LD_VAR 0 1
54055: PUSH
54056: LD_INT 6
54058: PUSH
54059: LD_INT 7
54061: PUSH
54062: LD_INT 8
54064: PUSH
54065: LD_INT 13
54067: PUSH
54068: LD_INT 12
54070: PUSH
54071: LD_INT 15
54073: PUSH
54074: LD_INT 11
54076: PUSH
54077: LD_INT 14
54079: PUSH
54080: LD_INT 10
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: IN
54094: IFFALSE 54104
// btype = b_lab ;
54096: LD_ADDR_VAR 0 1
54100: PUSH
54101: LD_INT 6
54103: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54104: LD_VAR 0 6
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: IN
54123: NOT
54124: PUSH
54125: LD_VAR 0 1
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 3
54141: PUSH
54142: LD_INT 6
54144: PUSH
54145: LD_INT 36
54147: PUSH
54148: LD_INT 4
54150: PUSH
54151: LD_INT 5
54153: PUSH
54154: LD_INT 31
54156: PUSH
54157: LD_INT 32
54159: PUSH
54160: LD_INT 33
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: IN
54176: NOT
54177: PUSH
54178: LD_VAR 0 6
54182: PUSH
54183: LD_INT 1
54185: EQUAL
54186: AND
54187: OR
54188: PUSH
54189: LD_VAR 0 1
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: IN
54204: NOT
54205: PUSH
54206: LD_VAR 0 6
54210: PUSH
54211: LD_INT 2
54213: EQUAL
54214: AND
54215: OR
54216: IFFALSE 54226
// mode = 0 ;
54218: LD_ADDR_VAR 0 6
54222: PUSH
54223: LD_INT 0
54225: ST_TO_ADDR
// case mode of 0 :
54226: LD_VAR 0 6
54230: PUSH
54231: LD_INT 0
54233: DOUBLE
54234: EQUAL
54235: IFTRUE 54239
54237: GO 65692
54239: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54240: LD_ADDR_VAR 0 11
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54433: LD_ADDR_VAR 0 12
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54629: LD_ADDR_VAR 0 13
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 3
54788: NEG
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54828: LD_ADDR_VAR 0 14
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 3
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 3
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55024: LD_ADDR_VAR 0 15
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55217: LD_ADDR_VAR 0 16
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55410: LD_ADDR_VAR 0 17
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55640: LD_ADDR_VAR 0 18
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55870: LD_ADDR_VAR 0 19
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56100: LD_ADDR_VAR 0 20
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56330: LD_ADDR_VAR 0 21
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56560: LD_ADDR_VAR 0 22
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56790: LD_ADDR_VAR 0 23
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 2
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57070: LD_ADDR_VAR 0 24
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57346: LD_ADDR_VAR 0 25
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: LD_INT 2
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57620: LD_ADDR_VAR 0 26
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 3
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 3
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57896: LD_ADDR_VAR 0 27
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58176: LD_ADDR_VAR 0 28
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 3
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58458: LD_ADDR_VAR 0 29
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58737: LD_ADDR_VAR 0 30
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59015: LD_ADDR_VAR 0 31
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 3
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59293: LD_ADDR_VAR 0 32
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 2
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 3
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59571: LD_ADDR_VAR 0 33
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59850: LD_ADDR_VAR 0 34
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 3
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60130: LD_ADDR_VAR 0 35
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60242: LD_ADDR_VAR 0 36
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60354: LD_ADDR_VAR 0 37
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60466: LD_ADDR_VAR 0 38
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60578: LD_ADDR_VAR 0 39
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60690: LD_ADDR_VAR 0 40
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60802: LD_ADDR_VAR 0 41
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 2
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: NEG
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: NEG
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61152: LD_ADDR_VAR 0 42
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: LD_INT 2
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 2
61342: NEG
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 3
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 3
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61502: LD_ADDR_VAR 0 43
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 1
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 3
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 3
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: NEG
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61850: LD_ADDR_VAR 0 44
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 2
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 3
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62200: LD_ADDR_VAR 0 45
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 2
62390: NEG
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 3
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: LD_INT 2
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: LD_INT 3
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 3
62497: NEG
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 3
62509: NEG
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62550: LD_ADDR_VAR 0 46
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: LD_INT 3
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 3
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: LD_INT 3
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 3
62846: NEG
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62898: LD_ADDR_VAR 0 47
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: LD_INT 2
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63049: LD_ADDR_VAR 0 48
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: LD_INT 1
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 2
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 2
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63196: LD_ADDR_VAR 0 49
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63340: LD_ADDR_VAR 0 50
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: NEG
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63484: LD_ADDR_VAR 0 51
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63631: LD_ADDR_VAR 0 52
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 1
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 2
63758: NEG
63759: PUSH
63760: LD_INT 2
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63782: LD_ADDR_VAR 0 53
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: LD_INT 2
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64012: LD_ADDR_VAR 0 54
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: LD_INT 2
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64242: LD_ADDR_VAR 0 55
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 1
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 2
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: LD_INT 2
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: LD_INT 2
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 0
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: LD_INT 1
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 2
64441: NEG
64442: PUSH
64443: LD_INT 2
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64472: LD_ADDR_VAR 0 56
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: LD_INT 2
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: LD_INT 2
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 2
64648: NEG
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 2
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64702: LD_ADDR_VAR 0 57
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 2
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64932: LD_ADDR_VAR 0 58
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: LD_INT 2
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 2
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: LD_INT 2
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 2
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 2
65108: NEG
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: NEG
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 2
65131: NEG
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65162: LD_ADDR_VAR 0 59
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: LD_INT 0
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 0
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65250: LD_ADDR_VAR 0 60
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: NEG
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65338: LD_ADDR_VAR 0 61
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65426: LD_ADDR_VAR 0 62
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 1
65484: NEG
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65514: LD_ADDR_VAR 0 63
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65602: LD_ADDR_VAR 0 64
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// end ; 1 :
65690: GO 71587
65692: LD_INT 1
65694: DOUBLE
65695: EQUAL
65696: IFTRUE 65700
65698: GO 68323
65700: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65701: LD_ADDR_VAR 0 11
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 3
65712: NEG
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 3
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 2
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65745: LD_ADDR_VAR 0 12
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65786: LD_ADDR_VAR 0 13
65790: PUSH
65791: LD_INT 3
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: LD_INT 3
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65826: LD_ADDR_VAR 0 14
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 3
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: LIST
65866: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65867: LD_ADDR_VAR 0 15
65871: PUSH
65872: LD_INT 2
65874: NEG
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 3
65885: NEG
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65911: LD_ADDR_VAR 0 16
65915: PUSH
65916: LD_INT 2
65918: NEG
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: LD_INT 2
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 3
65942: NEG
65943: PUSH
65944: LD_INT 3
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: LIST
65956: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65957: LD_ADDR_VAR 0 17
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: LD_INT 3
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: LD_INT 3
65979: NEG
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: LIST
66000: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66001: LD_ADDR_VAR 0 18
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 3
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 3
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: LIST
66041: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66042: LD_ADDR_VAR 0 19
66046: PUSH
66047: LD_INT 3
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: LIST
66081: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66082: LD_ADDR_VAR 0 20
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: LD_INT 3
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 0
66099: PUSH
66100: LD_INT 3
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 1
66109: NEG
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66123: LD_ADDR_VAR 0 21
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: LD_INT 1
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 3
66141: NEG
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: NEG
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66167: LD_ADDR_VAR 0 22
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PUSH
66176: LD_INT 3
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 3
66186: NEG
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 3
66198: NEG
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66213: LD_ADDR_VAR 0 23
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: NEG
66232: PUSH
66233: LD_INT 4
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: LD_INT 3
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: LIST
66256: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66257: LD_ADDR_VAR 0 24
66261: PUSH
66262: LD_INT 3
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 3
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 4
66285: PUSH
66286: LD_INT 1
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66298: LD_ADDR_VAR 0 25
66302: PUSH
66303: LD_INT 3
66305: PUSH
66306: LD_INT 3
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 4
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: LD_INT 4
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66338: LD_ADDR_VAR 0 26
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 3
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 1
66355: PUSH
66356: LD_INT 4
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: LD_INT 3
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66379: LD_ADDR_VAR 0 27
66383: PUSH
66384: LD_INT 3
66386: NEG
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 3
66397: NEG
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 4
66408: NEG
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66423: LD_ADDR_VAR 0 28
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: LD_INT 3
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 3
66442: NEG
66443: PUSH
66444: LD_INT 4
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 4
66454: NEG
66455: PUSH
66456: LD_INT 3
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66469: LD_ADDR_VAR 0 29
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: LD_INT 3
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: LD_INT 4
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 4
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 1
66544: NEG
66545: PUSH
66546: LD_INT 5
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: LD_INT 5
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: LD_INT 4
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: LD_INT 6
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: LD_INT 6
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 5
66604: NEG
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66624: LD_ADDR_VAR 0 30
66628: PUSH
66629: LD_INT 2
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 3
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 3
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 3
66662: PUSH
66663: LD_INT 1
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 4
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 4
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 4
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 5
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 5
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 5
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 6
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 6
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66767: LD_ADDR_VAR 0 31
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: LD_INT 3
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 4
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 4
66814: PUSH
66815: LD_INT 4
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: LD_INT 4
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 5
66834: PUSH
66835: LD_INT 4
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 5
66844: PUSH
66845: LD_INT 5
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 4
66854: PUSH
66855: LD_INT 5
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 6
66864: PUSH
66865: LD_INT 5
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 6
66874: PUSH
66875: LD_INT 6
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 5
66884: PUSH
66885: LD_INT 6
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66906: LD_ADDR_VAR 0 32
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 1
66933: NEG
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: LD_INT 4
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: LD_INT 4
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: LD_INT 3
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 1
66975: PUSH
66976: LD_INT 5
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: LD_INT 5
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: LD_INT 4
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: LD_INT 6
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: LD_INT 6
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 5
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67049: LD_ADDR_VAR 0 33
67053: PUSH
67054: LD_INT 2
67056: NEG
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: LD_INT 1
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 4
67101: NEG
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 4
67112: NEG
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 4
67124: NEG
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 5
67135: NEG
67136: PUSH
67137: LD_INT 0
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 5
67146: NEG
67147: PUSH
67148: LD_INT 1
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 5
67158: NEG
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 6
67169: NEG
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 6
67180: NEG
67181: PUSH
67182: LD_INT 1
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67204: LD_ADDR_VAR 0 34
67208: PUSH
67209: LD_INT 2
67211: NEG
67212: PUSH
67213: LD_INT 3
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 3
67223: NEG
67224: PUSH
67225: LD_INT 2
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 3
67235: NEG
67236: PUSH
67237: LD_INT 3
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 3
67247: NEG
67248: PUSH
67249: LD_INT 4
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 4
67259: NEG
67260: PUSH
67261: LD_INT 3
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 4
67271: NEG
67272: PUSH
67273: LD_INT 4
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 4
67283: NEG
67284: PUSH
67285: LD_INT 5
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 5
67295: NEG
67296: PUSH
67297: LD_INT 4
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 5
67307: NEG
67308: PUSH
67309: LD_INT 5
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 5
67319: NEG
67320: PUSH
67321: LD_INT 6
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 6
67331: NEG
67332: PUSH
67333: LD_INT 5
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 6
67343: NEG
67344: PUSH
67345: LD_INT 6
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67367: LD_ADDR_VAR 0 41
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 2
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: LD_INT 3
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: LD_INT 2
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67411: LD_ADDR_VAR 0 42
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: LD_INT 1
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: PUSH
67440: LD_INT 1
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: LIST
67451: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67452: LD_ADDR_VAR 0 43
67456: PUSH
67457: LD_INT 2
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 2
67479: PUSH
67480: LD_INT 3
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: LIST
67491: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67492: LD_ADDR_VAR 0 44
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: LD_INT 2
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 1
67509: PUSH
67510: LD_INT 3
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: LIST
67532: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67533: LD_ADDR_VAR 0 45
67537: PUSH
67538: LD_INT 2
67540: NEG
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 2
67551: NEG
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: NEG
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67577: LD_ADDR_VAR 0 46
67581: PUSH
67582: LD_INT 2
67584: NEG
67585: PUSH
67586: LD_INT 2
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 2
67596: NEG
67597: PUSH
67598: LD_INT 3
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 3
67608: NEG
67609: PUSH
67610: LD_INT 2
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67623: LD_ADDR_VAR 0 47
67627: PUSH
67628: LD_INT 2
67630: NEG
67631: PUSH
67632: LD_INT 3
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: LD_INT 3
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67656: LD_ADDR_VAR 0 48
67660: PUSH
67661: LD_INT 1
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: LD_INT 1
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67687: LD_ADDR_VAR 0 49
67691: PUSH
67692: LD_INT 3
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 3
67704: PUSH
67705: LD_INT 2
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67716: LD_ADDR_VAR 0 50
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67745: LD_ADDR_VAR 0 51
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67776: LD_ADDR_VAR 0 52
67780: PUSH
67781: LD_INT 3
67783: NEG
67784: PUSH
67785: LD_INT 1
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 3
67795: NEG
67796: PUSH
67797: LD_INT 2
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67809: LD_ADDR_VAR 0 53
67813: PUSH
67814: LD_INT 1
67816: NEG
67817: PUSH
67818: LD_INT 3
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: LD_INT 3
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67853: LD_ADDR_VAR 0 54
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 3
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 3
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: LIST
67893: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67894: LD_ADDR_VAR 0 55
67898: PUSH
67899: LD_INT 3
67901: PUSH
67902: LD_INT 2
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 3
67911: PUSH
67912: LD_INT 3
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 2
67921: PUSH
67922: LD_INT 3
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: LIST
67933: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67934: LD_ADDR_VAR 0 56
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: LD_INT 3
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: LD_INT 3
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 1
67961: NEG
67962: PUSH
67963: LD_INT 2
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: LIST
67974: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67975: LD_ADDR_VAR 0 57
67979: PUSH
67980: LD_INT 2
67982: NEG
67983: PUSH
67984: LD_INT 1
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: LD_INT 1
68008: NEG
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: LIST
68018: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68019: LD_ADDR_VAR 0 58
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: LD_INT 2
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: LIST
68064: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68065: LD_ADDR_VAR 0 59
68069: PUSH
68070: LD_INT 1
68072: NEG
68073: PUSH
68074: LD_INT 2
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: LD_INT 2
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 1
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68109: LD_ADDR_VAR 0 60
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: LD_INT 1
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: LIST
68149: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68150: LD_ADDR_VAR 0 61
68154: PUSH
68155: LD_INT 2
68157: PUSH
68158: LD_INT 1
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: LD_INT 2
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: LD_INT 2
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: LIST
68189: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68190: LD_ADDR_VAR 0 62
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: LD_INT 2
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: LD_INT 2
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68231: LD_ADDR_VAR 0 63
68235: PUSH
68236: LD_INT 1
68238: NEG
68239: PUSH
68240: LD_INT 1
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 2
68260: NEG
68261: PUSH
68262: LD_INT 1
68264: NEG
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: LIST
68274: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68275: LD_ADDR_VAR 0 64
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: LIST
68320: ST_TO_ADDR
// end ; 2 :
68321: GO 71587
68323: LD_INT 2
68325: DOUBLE
68326: EQUAL
68327: IFTRUE 68331
68329: GO 71586
68331: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68332: LD_ADDR_VAR 0 29
68336: PUSH
68337: LD_INT 4
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 5
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 5
68370: PUSH
68371: LD_INT 1
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 4
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: LD_INT 0
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 3
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 3
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 5
68422: PUSH
68423: LD_INT 2
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 3
68432: PUSH
68433: LD_INT 3
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 4
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 4
68462: PUSH
68463: LD_INT 4
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 3
68472: PUSH
68473: LD_INT 4
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 2
68482: PUSH
68483: LD_INT 3
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 2
68492: PUSH
68493: LD_INT 2
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 4
68502: PUSH
68503: LD_INT 2
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 2
68512: PUSH
68513: LD_INT 4
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: LD_INT 4
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: LD_INT 3
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: LD_INT 4
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 1
68552: PUSH
68553: LD_INT 5
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: LD_INT 5
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 1
68572: NEG
68573: PUSH
68574: LD_INT 4
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: NEG
68584: PUSH
68585: LD_INT 3
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 2
68594: PUSH
68595: LD_INT 5
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: LD_INT 3
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 3
68626: NEG
68627: PUSH
68628: LD_INT 1
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 2
68649: NEG
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 3
68660: NEG
68661: PUSH
68662: LD_INT 1
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 4
68671: NEG
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 4
68682: NEG
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 4
68694: NEG
68695: PUSH
68696: LD_INT 2
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 2
68706: NEG
68707: PUSH
68708: LD_INT 2
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 4
68717: NEG
68718: PUSH
68719: LD_INT 4
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 4
68729: NEG
68730: PUSH
68731: LD_INT 5
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: NEG
68742: PUSH
68743: LD_INT 4
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: LD_INT 3
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 4
68765: NEG
68766: PUSH
68767: LD_INT 3
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 5
68777: NEG
68778: PUSH
68779: LD_INT 4
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 5
68789: NEG
68790: PUSH
68791: LD_INT 5
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 3
68801: NEG
68802: PUSH
68803: LD_INT 5
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 5
68813: NEG
68814: PUSH
68815: LD_INT 3
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68870: LD_ADDR_VAR 0 30
68874: PUSH
68875: LD_INT 4
68877: PUSH
68878: LD_INT 4
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 4
68887: PUSH
68888: LD_INT 3
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 5
68897: PUSH
68898: LD_INT 4
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 5
68907: PUSH
68908: LD_INT 5
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 4
68917: PUSH
68918: LD_INT 5
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 3
68927: PUSH
68928: LD_INT 4
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: PUSH
68938: LD_INT 3
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 5
68947: PUSH
68948: LD_INT 3
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 3
68957: PUSH
68958: LD_INT 5
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: LD_INT 3
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 1
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: LD_INT 4
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: LD_INT 4
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 1
69017: NEG
69018: PUSH
69019: LD_INT 3
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: NEG
69029: PUSH
69030: LD_INT 2
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 2
69039: PUSH
69040: LD_INT 4
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 2
69049: NEG
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 4
69060: NEG
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 4
69071: NEG
69072: PUSH
69073: LD_INT 1
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 3
69083: NEG
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 3
69094: NEG
69095: PUSH
69096: LD_INT 1
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 4
69105: NEG
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 5
69116: NEG
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 5
69127: NEG
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 5
69139: NEG
69140: PUSH
69141: LD_INT 2
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 3
69151: NEG
69152: PUSH
69153: LD_INT 2
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 3
69162: NEG
69163: PUSH
69164: LD_INT 3
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 3
69174: NEG
69175: PUSH
69176: LD_INT 4
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 2
69186: NEG
69187: PUSH
69188: LD_INT 3
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 2
69198: NEG
69199: PUSH
69200: LD_INT 2
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 3
69210: NEG
69211: PUSH
69212: LD_INT 2
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 4
69222: NEG
69223: PUSH
69224: LD_INT 3
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 4
69234: NEG
69235: PUSH
69236: LD_INT 4
69238: NEG
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 2
69246: NEG
69247: PUSH
69248: LD_INT 4
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 4
69258: NEG
69259: PUSH
69260: LD_INT 2
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: LD_INT 4
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: LD_INT 5
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: LD_INT 4
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: LD_INT 3
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 3
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: LD_INT 4
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 1
69337: NEG
69338: PUSH
69339: LD_INT 5
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: LD_INT 3
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: LD_INT 5
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69417: LD_ADDR_VAR 0 31
69421: PUSH
69422: LD_INT 0
69424: PUSH
69425: LD_INT 4
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: LD_INT 3
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 1
69444: PUSH
69445: LD_INT 4
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 1
69454: PUSH
69455: LD_INT 5
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 0
69464: PUSH
69465: LD_INT 5
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: LD_INT 4
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 1
69485: NEG
69486: PUSH
69487: LD_INT 3
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 2
69496: PUSH
69497: LD_INT 5
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: LD_INT 3
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 3
69517: NEG
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 3
69528: NEG
69529: PUSH
69530: LD_INT 1
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 2
69540: NEG
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 2
69551: NEG
69552: PUSH
69553: LD_INT 1
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 3
69562: NEG
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 4
69573: NEG
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 4
69584: NEG
69585: PUSH
69586: LD_INT 1
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 4
69596: NEG
69597: PUSH
69598: LD_INT 2
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 2
69608: NEG
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 4
69619: NEG
69620: PUSH
69621: LD_INT 4
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 4
69631: NEG
69632: PUSH
69633: LD_INT 5
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 3
69643: NEG
69644: PUSH
69645: LD_INT 4
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 3
69655: NEG
69656: PUSH
69657: LD_INT 3
69659: NEG
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 4
69667: NEG
69668: PUSH
69669: LD_INT 3
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 5
69679: NEG
69680: PUSH
69681: LD_INT 4
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 5
69691: NEG
69692: PUSH
69693: LD_INT 5
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 3
69703: NEG
69704: PUSH
69705: LD_INT 5
69707: NEG
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 5
69715: NEG
69716: PUSH
69717: LD_INT 3
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 0
69727: PUSH
69728: LD_INT 3
69730: NEG
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 0
69738: PUSH
69739: LD_INT 4
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: PUSH
69750: LD_INT 3
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 2
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: LD_INT 2
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 1
69782: NEG
69783: PUSH
69784: LD_INT 3
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 1
69794: NEG
69795: PUSH
69796: LD_INT 4
69798: NEG
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 2
69806: PUSH
69807: LD_INT 2
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 2
69817: NEG
69818: PUSH
69819: LD_INT 4
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 4
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 4
69839: PUSH
69840: LD_INT 1
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 5
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 5
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 4
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 3
69880: PUSH
69881: LD_INT 0
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 3
69901: PUSH
69902: LD_INT 2
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 5
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69967: LD_ADDR_VAR 0 32
69971: PUSH
69972: LD_INT 4
69974: NEG
69975: PUSH
69976: LD_INT 0
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 4
69985: NEG
69986: PUSH
69987: LD_INT 1
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 3
69997: NEG
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: LD_INT 1
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 4
70019: NEG
70020: PUSH
70021: LD_INT 1
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: NEG
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 5
70041: NEG
70042: PUSH
70043: LD_INT 1
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 5
70053: NEG
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 3
70065: NEG
70066: PUSH
70067: LD_INT 2
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: LD_INT 3
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: NEG
70089: PUSH
70090: LD_INT 4
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 2
70100: NEG
70101: PUSH
70102: LD_INT 3
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 2
70112: NEG
70113: PUSH
70114: LD_INT 2
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: LD_INT 2
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 4
70136: NEG
70137: PUSH
70138: LD_INT 3
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 4
70148: NEG
70149: PUSH
70150: LD_INT 4
70152: NEG
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 4
70172: NEG
70173: PUSH
70174: LD_INT 2
70176: NEG
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: LD_INT 4
70187: NEG
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: LD_INT 5
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: LD_INT 4
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: LD_INT 3
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: LD_INT 3
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 1
70239: NEG
70240: PUSH
70241: LD_INT 4
70243: NEG
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: LD_INT 5
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 3
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: NEG
70275: PUSH
70276: LD_INT 5
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 3
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 3
70296: PUSH
70297: LD_INT 1
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 4
70307: PUSH
70308: LD_INT 0
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 4
70317: PUSH
70318: LD_INT 1
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 3
70327: PUSH
70328: LD_INT 1
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 2
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 2
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 2
70358: PUSH
70359: LD_INT 2
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 4
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 4
70379: PUSH
70380: LD_INT 4
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 4
70389: PUSH
70390: LD_INT 3
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 5
70399: PUSH
70400: LD_INT 4
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 5
70409: PUSH
70410: LD_INT 5
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: PUSH
70417: LD_INT 4
70419: PUSH
70420: LD_INT 5
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 3
70429: PUSH
70430: LD_INT 4
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 3
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 5
70449: PUSH
70450: LD_INT 3
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 3
70459: PUSH
70460: LD_INT 5
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70514: LD_ADDR_VAR 0 33
70518: PUSH
70519: LD_INT 4
70521: NEG
70522: PUSH
70523: LD_INT 4
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 4
70533: NEG
70534: PUSH
70535: LD_INT 5
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: NEG
70546: PUSH
70547: LD_INT 4
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 3
70557: NEG
70558: PUSH
70559: LD_INT 3
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 4
70569: NEG
70570: PUSH
70571: LD_INT 3
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 5
70581: NEG
70582: PUSH
70583: LD_INT 4
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 5
70593: NEG
70594: PUSH
70595: LD_INT 5
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: NEG
70606: PUSH
70607: LD_INT 5
70609: NEG
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 5
70617: NEG
70618: PUSH
70619: LD_INT 3
70621: NEG
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 0
70629: PUSH
70630: LD_INT 3
70632: NEG
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 0
70640: PUSH
70641: LD_INT 4
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: LD_INT 3
70654: NEG
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 1
70662: PUSH
70663: LD_INT 2
70665: NEG
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_INT 2
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 1
70684: NEG
70685: PUSH
70686: LD_INT 3
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: LD_INT 4
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 2
70708: PUSH
70709: LD_INT 2
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 2
70719: NEG
70720: PUSH
70721: LD_INT 4
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 4
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 5
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 5
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 4
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 3
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 3
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 3
70803: PUSH
70804: LD_INT 2
70806: NEG
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 5
70814: PUSH
70815: LD_INT 2
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 3
70824: PUSH
70825: LD_INT 3
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 3
70834: PUSH
70835: LD_INT 2
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 4
70844: PUSH
70845: LD_INT 3
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 4
70854: PUSH
70855: LD_INT 4
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 3
70864: PUSH
70865: LD_INT 4
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: PUSH
70875: LD_INT 3
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 2
70884: PUSH
70885: LD_INT 2
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 4
70894: PUSH
70895: LD_INT 2
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 2
70904: PUSH
70905: LD_INT 4
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: LD_INT 4
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: LD_INT 3
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: LD_INT 4
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: PUSH
70945: LD_INT 5
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: LD_INT 5
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 1
70964: NEG
70965: PUSH
70966: LD_INT 4
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 1
70975: NEG
70976: PUSH
70977: LD_INT 3
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 2
70986: PUSH
70987: LD_INT 5
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 2
70996: NEG
70997: PUSH
70998: LD_INT 3
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71052: LD_ADDR_VAR 0 34
71056: PUSH
71057: LD_INT 0
71059: PUSH
71060: LD_INT 4
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: LD_INT 5
71073: NEG
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 1
71081: PUSH
71082: LD_INT 4
71084: NEG
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 1
71092: PUSH
71093: LD_INT 3
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 3
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: LD_INT 4
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: NEG
71127: PUSH
71128: LD_INT 5
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 3
71141: NEG
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 2
71149: NEG
71150: PUSH
71151: LD_INT 5
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 3
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 3
71171: PUSH
71172: LD_INT 1
71174: NEG
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 4
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 4
71192: PUSH
71193: LD_INT 1
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 3
71202: PUSH
71203: LD_INT 1
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 2
71212: PUSH
71213: LD_INT 0
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 2
71222: PUSH
71223: LD_INT 1
71225: NEG
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 2
71233: PUSH
71234: LD_INT 2
71236: NEG
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 4
71244: PUSH
71245: LD_INT 2
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 4
71254: PUSH
71255: LD_INT 4
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 4
71264: PUSH
71265: LD_INT 3
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 5
71274: PUSH
71275: LD_INT 4
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 5
71284: PUSH
71285: LD_INT 5
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 4
71294: PUSH
71295: LD_INT 5
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 3
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 3
71314: PUSH
71315: LD_INT 3
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 5
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 3
71334: PUSH
71335: LD_INT 5
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 0
71344: PUSH
71345: LD_INT 3
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: LD_INT 2
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 1
71364: PUSH
71365: LD_INT 3
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 1
71374: PUSH
71375: LD_INT 4
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: LD_INT 4
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 1
71394: NEG
71395: PUSH
71396: LD_INT 3
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 1
71405: NEG
71406: PUSH
71407: LD_INT 2
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 2
71416: PUSH
71417: LD_INT 4
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 2
71426: NEG
71427: PUSH
71428: LD_INT 2
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 4
71437: NEG
71438: PUSH
71439: LD_INT 0
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 4
71448: NEG
71449: PUSH
71450: LD_INT 1
71452: NEG
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 3
71460: NEG
71461: PUSH
71462: LD_INT 0
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 3
71471: NEG
71472: PUSH
71473: LD_INT 1
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 4
71482: NEG
71483: PUSH
71484: LD_INT 1
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 5
71493: NEG
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 5
71504: NEG
71505: PUSH
71506: LD_INT 1
71508: NEG
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 5
71516: NEG
71517: PUSH
71518: LD_INT 2
71520: NEG
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 3
71528: NEG
71529: PUSH
71530: LD_INT 2
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: ST_TO_ADDR
// end ; end ;
71584: GO 71587
71586: POP
// case btype of b_depot , b_warehouse :
71587: LD_VAR 0 1
71591: PUSH
71592: LD_INT 0
71594: DOUBLE
71595: EQUAL
71596: IFTRUE 71606
71598: LD_INT 1
71600: DOUBLE
71601: EQUAL
71602: IFTRUE 71606
71604: GO 71807
71606: POP
// case nation of nation_american :
71607: LD_VAR 0 5
71611: PUSH
71612: LD_INT 1
71614: DOUBLE
71615: EQUAL
71616: IFTRUE 71620
71618: GO 71676
71620: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71621: LD_ADDR_VAR 0 9
71625: PUSH
71626: LD_VAR 0 11
71630: PUSH
71631: LD_VAR 0 12
71635: PUSH
71636: LD_VAR 0 13
71640: PUSH
71641: LD_VAR 0 14
71645: PUSH
71646: LD_VAR 0 15
71650: PUSH
71651: LD_VAR 0 16
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: PUSH
71664: LD_VAR 0 4
71668: PUSH
71669: LD_INT 1
71671: PLUS
71672: ARRAY
71673: ST_TO_ADDR
71674: GO 71805
71676: LD_INT 2
71678: DOUBLE
71679: EQUAL
71680: IFTRUE 71684
71682: GO 71740
71684: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71685: LD_ADDR_VAR 0 9
71689: PUSH
71690: LD_VAR 0 17
71694: PUSH
71695: LD_VAR 0 18
71699: PUSH
71700: LD_VAR 0 19
71704: PUSH
71705: LD_VAR 0 20
71709: PUSH
71710: LD_VAR 0 21
71714: PUSH
71715: LD_VAR 0 22
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: PUSH
71728: LD_VAR 0 4
71732: PUSH
71733: LD_INT 1
71735: PLUS
71736: ARRAY
71737: ST_TO_ADDR
71738: GO 71805
71740: LD_INT 3
71742: DOUBLE
71743: EQUAL
71744: IFTRUE 71748
71746: GO 71804
71748: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71749: LD_ADDR_VAR 0 9
71753: PUSH
71754: LD_VAR 0 23
71758: PUSH
71759: LD_VAR 0 24
71763: PUSH
71764: LD_VAR 0 25
71768: PUSH
71769: LD_VAR 0 26
71773: PUSH
71774: LD_VAR 0 27
71778: PUSH
71779: LD_VAR 0 28
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: PUSH
71792: LD_VAR 0 4
71796: PUSH
71797: LD_INT 1
71799: PLUS
71800: ARRAY
71801: ST_TO_ADDR
71802: GO 71805
71804: POP
71805: GO 72360
71807: LD_INT 2
71809: DOUBLE
71810: EQUAL
71811: IFTRUE 71821
71813: LD_INT 3
71815: DOUBLE
71816: EQUAL
71817: IFTRUE 71821
71819: GO 71877
71821: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71822: LD_ADDR_VAR 0 9
71826: PUSH
71827: LD_VAR 0 29
71831: PUSH
71832: LD_VAR 0 30
71836: PUSH
71837: LD_VAR 0 31
71841: PUSH
71842: LD_VAR 0 32
71846: PUSH
71847: LD_VAR 0 33
71851: PUSH
71852: LD_VAR 0 34
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: PUSH
71865: LD_VAR 0 4
71869: PUSH
71870: LD_INT 1
71872: PLUS
71873: ARRAY
71874: ST_TO_ADDR
71875: GO 72360
71877: LD_INT 16
71879: DOUBLE
71880: EQUAL
71881: IFTRUE 71939
71883: LD_INT 17
71885: DOUBLE
71886: EQUAL
71887: IFTRUE 71939
71889: LD_INT 18
71891: DOUBLE
71892: EQUAL
71893: IFTRUE 71939
71895: LD_INT 19
71897: DOUBLE
71898: EQUAL
71899: IFTRUE 71939
71901: LD_INT 22
71903: DOUBLE
71904: EQUAL
71905: IFTRUE 71939
71907: LD_INT 20
71909: DOUBLE
71910: EQUAL
71911: IFTRUE 71939
71913: LD_INT 21
71915: DOUBLE
71916: EQUAL
71917: IFTRUE 71939
71919: LD_INT 23
71921: DOUBLE
71922: EQUAL
71923: IFTRUE 71939
71925: LD_INT 24
71927: DOUBLE
71928: EQUAL
71929: IFTRUE 71939
71931: LD_INT 25
71933: DOUBLE
71934: EQUAL
71935: IFTRUE 71939
71937: GO 71995
71939: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71940: LD_ADDR_VAR 0 9
71944: PUSH
71945: LD_VAR 0 35
71949: PUSH
71950: LD_VAR 0 36
71954: PUSH
71955: LD_VAR 0 37
71959: PUSH
71960: LD_VAR 0 38
71964: PUSH
71965: LD_VAR 0 39
71969: PUSH
71970: LD_VAR 0 40
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: PUSH
71983: LD_VAR 0 4
71987: PUSH
71988: LD_INT 1
71990: PLUS
71991: ARRAY
71992: ST_TO_ADDR
71993: GO 72360
71995: LD_INT 6
71997: DOUBLE
71998: EQUAL
71999: IFTRUE 72051
72001: LD_INT 7
72003: DOUBLE
72004: EQUAL
72005: IFTRUE 72051
72007: LD_INT 8
72009: DOUBLE
72010: EQUAL
72011: IFTRUE 72051
72013: LD_INT 13
72015: DOUBLE
72016: EQUAL
72017: IFTRUE 72051
72019: LD_INT 12
72021: DOUBLE
72022: EQUAL
72023: IFTRUE 72051
72025: LD_INT 15
72027: DOUBLE
72028: EQUAL
72029: IFTRUE 72051
72031: LD_INT 11
72033: DOUBLE
72034: EQUAL
72035: IFTRUE 72051
72037: LD_INT 14
72039: DOUBLE
72040: EQUAL
72041: IFTRUE 72051
72043: LD_INT 10
72045: DOUBLE
72046: EQUAL
72047: IFTRUE 72051
72049: GO 72107
72051: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72052: LD_ADDR_VAR 0 9
72056: PUSH
72057: LD_VAR 0 41
72061: PUSH
72062: LD_VAR 0 42
72066: PUSH
72067: LD_VAR 0 43
72071: PUSH
72072: LD_VAR 0 44
72076: PUSH
72077: LD_VAR 0 45
72081: PUSH
72082: LD_VAR 0 46
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: PUSH
72095: LD_VAR 0 4
72099: PUSH
72100: LD_INT 1
72102: PLUS
72103: ARRAY
72104: ST_TO_ADDR
72105: GO 72360
72107: LD_INT 36
72109: DOUBLE
72110: EQUAL
72111: IFTRUE 72115
72113: GO 72171
72115: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72116: LD_ADDR_VAR 0 9
72120: PUSH
72121: LD_VAR 0 47
72125: PUSH
72126: LD_VAR 0 48
72130: PUSH
72131: LD_VAR 0 49
72135: PUSH
72136: LD_VAR 0 50
72140: PUSH
72141: LD_VAR 0 51
72145: PUSH
72146: LD_VAR 0 52
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: PUSH
72159: LD_VAR 0 4
72163: PUSH
72164: LD_INT 1
72166: PLUS
72167: ARRAY
72168: ST_TO_ADDR
72169: GO 72360
72171: LD_INT 4
72173: DOUBLE
72174: EQUAL
72175: IFTRUE 72197
72177: LD_INT 5
72179: DOUBLE
72180: EQUAL
72181: IFTRUE 72197
72183: LD_INT 34
72185: DOUBLE
72186: EQUAL
72187: IFTRUE 72197
72189: LD_INT 37
72191: DOUBLE
72192: EQUAL
72193: IFTRUE 72197
72195: GO 72253
72197: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72198: LD_ADDR_VAR 0 9
72202: PUSH
72203: LD_VAR 0 53
72207: PUSH
72208: LD_VAR 0 54
72212: PUSH
72213: LD_VAR 0 55
72217: PUSH
72218: LD_VAR 0 56
72222: PUSH
72223: LD_VAR 0 57
72227: PUSH
72228: LD_VAR 0 58
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: PUSH
72241: LD_VAR 0 4
72245: PUSH
72246: LD_INT 1
72248: PLUS
72249: ARRAY
72250: ST_TO_ADDR
72251: GO 72360
72253: LD_INT 31
72255: DOUBLE
72256: EQUAL
72257: IFTRUE 72303
72259: LD_INT 32
72261: DOUBLE
72262: EQUAL
72263: IFTRUE 72303
72265: LD_INT 33
72267: DOUBLE
72268: EQUAL
72269: IFTRUE 72303
72271: LD_INT 27
72273: DOUBLE
72274: EQUAL
72275: IFTRUE 72303
72277: LD_INT 26
72279: DOUBLE
72280: EQUAL
72281: IFTRUE 72303
72283: LD_INT 28
72285: DOUBLE
72286: EQUAL
72287: IFTRUE 72303
72289: LD_INT 29
72291: DOUBLE
72292: EQUAL
72293: IFTRUE 72303
72295: LD_INT 30
72297: DOUBLE
72298: EQUAL
72299: IFTRUE 72303
72301: GO 72359
72303: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72304: LD_ADDR_VAR 0 9
72308: PUSH
72309: LD_VAR 0 59
72313: PUSH
72314: LD_VAR 0 60
72318: PUSH
72319: LD_VAR 0 61
72323: PUSH
72324: LD_VAR 0 62
72328: PUSH
72329: LD_VAR 0 63
72333: PUSH
72334: LD_VAR 0 64
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: PUSH
72347: LD_VAR 0 4
72351: PUSH
72352: LD_INT 1
72354: PLUS
72355: ARRAY
72356: ST_TO_ADDR
72357: GO 72360
72359: POP
// temp_list2 = [ ] ;
72360: LD_ADDR_VAR 0 10
72364: PUSH
72365: EMPTY
72366: ST_TO_ADDR
// for i in temp_list do
72367: LD_ADDR_VAR 0 8
72371: PUSH
72372: LD_VAR 0 9
72376: PUSH
72377: FOR_IN
72378: IFFALSE 72430
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72380: LD_ADDR_VAR 0 10
72384: PUSH
72385: LD_VAR 0 10
72389: PUSH
72390: LD_VAR 0 8
72394: PUSH
72395: LD_INT 1
72397: ARRAY
72398: PUSH
72399: LD_VAR 0 2
72403: PLUS
72404: PUSH
72405: LD_VAR 0 8
72409: PUSH
72410: LD_INT 2
72412: ARRAY
72413: PUSH
72414: LD_VAR 0 3
72418: PLUS
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: EMPTY
72425: LIST
72426: ADD
72427: ST_TO_ADDR
72428: GO 72377
72430: POP
72431: POP
// result = temp_list2 ;
72432: LD_ADDR_VAR 0 7
72436: PUSH
72437: LD_VAR 0 10
72441: ST_TO_ADDR
// end ;
72442: LD_VAR 0 7
72446: RET
// export function EnemyInRange ( unit , dist ) ; begin
72447: LD_INT 0
72449: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72450: LD_ADDR_VAR 0 3
72454: PUSH
72455: LD_VAR 0 1
72459: PPUSH
72460: CALL_OW 255
72464: PPUSH
72465: LD_VAR 0 1
72469: PPUSH
72470: CALL_OW 250
72474: PPUSH
72475: LD_VAR 0 1
72479: PPUSH
72480: CALL_OW 251
72484: PPUSH
72485: LD_VAR 0 2
72489: PPUSH
72490: CALL 45849 0 4
72494: PUSH
72495: LD_INT 4
72497: ARRAY
72498: ST_TO_ADDR
// end ;
72499: LD_VAR 0 3
72503: RET
// export function PlayerSeeMe ( unit ) ; begin
72504: LD_INT 0
72506: PPUSH
// result := See ( your_side , unit ) ;
72507: LD_ADDR_VAR 0 2
72511: PUSH
72512: LD_OWVAR 2
72516: PPUSH
72517: LD_VAR 0 1
72521: PPUSH
72522: CALL_OW 292
72526: ST_TO_ADDR
// end ;
72527: LD_VAR 0 2
72531: RET
// export function ReverseDir ( unit ) ; begin
72532: LD_INT 0
72534: PPUSH
// if not unit then
72535: LD_VAR 0 1
72539: NOT
72540: IFFALSE 72544
// exit ;
72542: GO 72567
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72544: LD_ADDR_VAR 0 2
72548: PUSH
72549: LD_VAR 0 1
72553: PPUSH
72554: CALL_OW 254
72558: PUSH
72559: LD_INT 3
72561: PLUS
72562: PUSH
72563: LD_INT 6
72565: MOD
72566: ST_TO_ADDR
// end ;
72567: LD_VAR 0 2
72571: RET
// export function ReverseArray ( array ) ; var i ; begin
72572: LD_INT 0
72574: PPUSH
72575: PPUSH
// if not array then
72576: LD_VAR 0 1
72580: NOT
72581: IFFALSE 72585
// exit ;
72583: GO 72640
// result := [ ] ;
72585: LD_ADDR_VAR 0 2
72589: PUSH
72590: EMPTY
72591: ST_TO_ADDR
// for i := array downto 1 do
72592: LD_ADDR_VAR 0 3
72596: PUSH
72597: DOUBLE
72598: LD_VAR 0 1
72602: INC
72603: ST_TO_ADDR
72604: LD_INT 1
72606: PUSH
72607: FOR_DOWNTO
72608: IFFALSE 72638
// result := Join ( result , array [ i ] ) ;
72610: LD_ADDR_VAR 0 2
72614: PUSH
72615: LD_VAR 0 2
72619: PPUSH
72620: LD_VAR 0 1
72624: PUSH
72625: LD_VAR 0 3
72629: ARRAY
72630: PPUSH
72631: CALL 77284 0 2
72635: ST_TO_ADDR
72636: GO 72607
72638: POP
72639: POP
// end ;
72640: LD_VAR 0 2
72644: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72645: LD_INT 0
72647: PPUSH
72648: PPUSH
72649: PPUSH
72650: PPUSH
72651: PPUSH
72652: PPUSH
// if not unit or not hexes then
72653: LD_VAR 0 1
72657: NOT
72658: PUSH
72659: LD_VAR 0 2
72663: NOT
72664: OR
72665: IFFALSE 72669
// exit ;
72667: GO 72792
// dist := 9999 ;
72669: LD_ADDR_VAR 0 5
72673: PUSH
72674: LD_INT 9999
72676: ST_TO_ADDR
// for i = 1 to hexes do
72677: LD_ADDR_VAR 0 4
72681: PUSH
72682: DOUBLE
72683: LD_INT 1
72685: DEC
72686: ST_TO_ADDR
72687: LD_VAR 0 2
72691: PUSH
72692: FOR_TO
72693: IFFALSE 72780
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72695: LD_ADDR_VAR 0 6
72699: PUSH
72700: LD_VAR 0 1
72704: PPUSH
72705: LD_VAR 0 2
72709: PUSH
72710: LD_VAR 0 4
72714: ARRAY
72715: PUSH
72716: LD_INT 1
72718: ARRAY
72719: PPUSH
72720: LD_VAR 0 2
72724: PUSH
72725: LD_VAR 0 4
72729: ARRAY
72730: PUSH
72731: LD_INT 2
72733: ARRAY
72734: PPUSH
72735: CALL_OW 297
72739: ST_TO_ADDR
// if tdist < dist then
72740: LD_VAR 0 6
72744: PUSH
72745: LD_VAR 0 5
72749: LESS
72750: IFFALSE 72778
// begin hex := hexes [ i ] ;
72752: LD_ADDR_VAR 0 8
72756: PUSH
72757: LD_VAR 0 2
72761: PUSH
72762: LD_VAR 0 4
72766: ARRAY
72767: ST_TO_ADDR
// dist := tdist ;
72768: LD_ADDR_VAR 0 5
72772: PUSH
72773: LD_VAR 0 6
72777: ST_TO_ADDR
// end ; end ;
72778: GO 72692
72780: POP
72781: POP
// result := hex ;
72782: LD_ADDR_VAR 0 3
72786: PUSH
72787: LD_VAR 0 8
72791: ST_TO_ADDR
// end ;
72792: LD_VAR 0 3
72796: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72797: LD_INT 0
72799: PPUSH
72800: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72801: LD_VAR 0 1
72805: NOT
72806: PUSH
72807: LD_VAR 0 1
72811: PUSH
72812: LD_INT 21
72814: PUSH
72815: LD_INT 2
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 23
72824: PUSH
72825: LD_INT 2
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PPUSH
72836: CALL_OW 69
72840: IN
72841: NOT
72842: OR
72843: IFFALSE 72847
// exit ;
72845: GO 72894
// for i = 1 to 3 do
72847: LD_ADDR_VAR 0 3
72851: PUSH
72852: DOUBLE
72853: LD_INT 1
72855: DEC
72856: ST_TO_ADDR
72857: LD_INT 3
72859: PUSH
72860: FOR_TO
72861: IFFALSE 72892
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72863: LD_VAR 0 1
72867: PPUSH
72868: CALL_OW 250
72872: PPUSH
72873: LD_VAR 0 1
72877: PPUSH
72878: CALL_OW 251
72882: PPUSH
72883: LD_INT 1
72885: PPUSH
72886: CALL_OW 453
72890: GO 72860
72892: POP
72893: POP
// end ;
72894: LD_VAR 0 2
72898: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72899: LD_INT 0
72901: PPUSH
72902: PPUSH
72903: PPUSH
72904: PPUSH
72905: PPUSH
72906: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72907: LD_VAR 0 1
72911: NOT
72912: PUSH
72913: LD_VAR 0 2
72917: NOT
72918: OR
72919: PUSH
72920: LD_VAR 0 1
72924: PPUSH
72925: CALL_OW 314
72929: OR
72930: IFFALSE 72934
// exit ;
72932: GO 73401
// if GetLives ( i ) < 250 then
72934: LD_VAR 0 4
72938: PPUSH
72939: CALL_OW 256
72943: PUSH
72944: LD_INT 250
72946: LESS
72947: IFFALSE 72960
// begin ComAutodestruct ( i ) ;
72949: LD_VAR 0 4
72953: PPUSH
72954: CALL 72797 0 1
// exit ;
72958: GO 73401
// end ; x := GetX ( enemy_unit ) ;
72960: LD_ADDR_VAR 0 7
72964: PUSH
72965: LD_VAR 0 2
72969: PPUSH
72970: CALL_OW 250
72974: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72975: LD_ADDR_VAR 0 8
72979: PUSH
72980: LD_VAR 0 2
72984: PPUSH
72985: CALL_OW 251
72989: ST_TO_ADDR
// if not x or not y then
72990: LD_VAR 0 7
72994: NOT
72995: PUSH
72996: LD_VAR 0 8
73000: NOT
73001: OR
73002: IFFALSE 73006
// exit ;
73004: GO 73401
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73006: LD_ADDR_VAR 0 6
73010: PUSH
73011: LD_VAR 0 7
73015: PPUSH
73016: LD_INT 0
73018: PPUSH
73019: LD_INT 4
73021: PPUSH
73022: CALL_OW 272
73026: PUSH
73027: LD_VAR 0 8
73031: PPUSH
73032: LD_INT 0
73034: PPUSH
73035: LD_INT 4
73037: PPUSH
73038: CALL_OW 273
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_VAR 0 7
73051: PPUSH
73052: LD_INT 1
73054: PPUSH
73055: LD_INT 4
73057: PPUSH
73058: CALL_OW 272
73062: PUSH
73063: LD_VAR 0 8
73067: PPUSH
73068: LD_INT 1
73070: PPUSH
73071: LD_INT 4
73073: PPUSH
73074: CALL_OW 273
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_VAR 0 7
73087: PPUSH
73088: LD_INT 2
73090: PPUSH
73091: LD_INT 4
73093: PPUSH
73094: CALL_OW 272
73098: PUSH
73099: LD_VAR 0 8
73103: PPUSH
73104: LD_INT 2
73106: PPUSH
73107: LD_INT 4
73109: PPUSH
73110: CALL_OW 273
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_VAR 0 7
73123: PPUSH
73124: LD_INT 3
73126: PPUSH
73127: LD_INT 4
73129: PPUSH
73130: CALL_OW 272
73134: PUSH
73135: LD_VAR 0 8
73139: PPUSH
73140: LD_INT 3
73142: PPUSH
73143: LD_INT 4
73145: PPUSH
73146: CALL_OW 273
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_VAR 0 7
73159: PPUSH
73160: LD_INT 4
73162: PPUSH
73163: LD_INT 4
73165: PPUSH
73166: CALL_OW 272
73170: PUSH
73171: LD_VAR 0 8
73175: PPUSH
73176: LD_INT 4
73178: PPUSH
73179: LD_INT 4
73181: PPUSH
73182: CALL_OW 273
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_VAR 0 7
73195: PPUSH
73196: LD_INT 5
73198: PPUSH
73199: LD_INT 4
73201: PPUSH
73202: CALL_OW 272
73206: PUSH
73207: LD_VAR 0 8
73211: PPUSH
73212: LD_INT 5
73214: PPUSH
73215: LD_INT 4
73217: PPUSH
73218: CALL_OW 273
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: ST_TO_ADDR
// for i = tmp downto 1 do
73235: LD_ADDR_VAR 0 4
73239: PUSH
73240: DOUBLE
73241: LD_VAR 0 6
73245: INC
73246: ST_TO_ADDR
73247: LD_INT 1
73249: PUSH
73250: FOR_DOWNTO
73251: IFFALSE 73352
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73253: LD_VAR 0 6
73257: PUSH
73258: LD_VAR 0 4
73262: ARRAY
73263: PUSH
73264: LD_INT 1
73266: ARRAY
73267: PPUSH
73268: LD_VAR 0 6
73272: PUSH
73273: LD_VAR 0 4
73277: ARRAY
73278: PUSH
73279: LD_INT 2
73281: ARRAY
73282: PPUSH
73283: CALL_OW 488
73287: NOT
73288: PUSH
73289: LD_VAR 0 6
73293: PUSH
73294: LD_VAR 0 4
73298: ARRAY
73299: PUSH
73300: LD_INT 1
73302: ARRAY
73303: PPUSH
73304: LD_VAR 0 6
73308: PUSH
73309: LD_VAR 0 4
73313: ARRAY
73314: PUSH
73315: LD_INT 2
73317: ARRAY
73318: PPUSH
73319: CALL_OW 428
73323: PUSH
73324: LD_INT 0
73326: NONEQUAL
73327: OR
73328: IFFALSE 73350
// tmp := Delete ( tmp , i ) ;
73330: LD_ADDR_VAR 0 6
73334: PUSH
73335: LD_VAR 0 6
73339: PPUSH
73340: LD_VAR 0 4
73344: PPUSH
73345: CALL_OW 3
73349: ST_TO_ADDR
73350: GO 73250
73352: POP
73353: POP
// j := GetClosestHex ( unit , tmp ) ;
73354: LD_ADDR_VAR 0 5
73358: PUSH
73359: LD_VAR 0 1
73363: PPUSH
73364: LD_VAR 0 6
73368: PPUSH
73369: CALL 72645 0 2
73373: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73374: LD_VAR 0 1
73378: PPUSH
73379: LD_VAR 0 5
73383: PUSH
73384: LD_INT 1
73386: ARRAY
73387: PPUSH
73388: LD_VAR 0 5
73392: PUSH
73393: LD_INT 2
73395: ARRAY
73396: PPUSH
73397: CALL_OW 111
// end ;
73401: LD_VAR 0 3
73405: RET
// export function PrepareApemanSoldier ( ) ; begin
73406: LD_INT 0
73408: PPUSH
// uc_nation := 0 ;
73409: LD_ADDR_OWVAR 21
73413: PUSH
73414: LD_INT 0
73416: ST_TO_ADDR
// hc_sex := sex_male ;
73417: LD_ADDR_OWVAR 27
73421: PUSH
73422: LD_INT 1
73424: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73425: LD_ADDR_OWVAR 28
73429: PUSH
73430: LD_INT 15
73432: ST_TO_ADDR
// hc_gallery :=  ;
73433: LD_ADDR_OWVAR 33
73437: PUSH
73438: LD_STRING 
73440: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73441: LD_ADDR_OWVAR 31
73445: PUSH
73446: LD_INT 0
73448: PPUSH
73449: LD_INT 3
73451: PPUSH
73452: CALL_OW 12
73456: PUSH
73457: LD_INT 0
73459: PPUSH
73460: LD_INT 3
73462: PPUSH
73463: CALL_OW 12
73467: PUSH
73468: LD_INT 0
73470: PUSH
73471: LD_INT 0
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: ST_TO_ADDR
// end ;
73480: LD_VAR 0 1
73484: RET
// export function PrepareApemanEngineer ( ) ; begin
73485: LD_INT 0
73487: PPUSH
// uc_nation := 0 ;
73488: LD_ADDR_OWVAR 21
73492: PUSH
73493: LD_INT 0
73495: ST_TO_ADDR
// hc_sex := sex_male ;
73496: LD_ADDR_OWVAR 27
73500: PUSH
73501: LD_INT 1
73503: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73504: LD_ADDR_OWVAR 28
73508: PUSH
73509: LD_INT 16
73511: ST_TO_ADDR
// hc_gallery :=  ;
73512: LD_ADDR_OWVAR 33
73516: PUSH
73517: LD_STRING 
73519: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73520: LD_ADDR_OWVAR 31
73524: PUSH
73525: LD_INT 0
73527: PPUSH
73528: LD_INT 3
73530: PPUSH
73531: CALL_OW 12
73535: PUSH
73536: LD_INT 0
73538: PPUSH
73539: LD_INT 3
73541: PPUSH
73542: CALL_OW 12
73546: PUSH
73547: LD_INT 0
73549: PUSH
73550: LD_INT 0
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: ST_TO_ADDR
// end ;
73559: LD_VAR 0 1
73563: RET
// export function PrepareApeman ( agressivity ) ; begin
73564: LD_INT 0
73566: PPUSH
// uc_side := 0 ;
73567: LD_ADDR_OWVAR 20
73571: PUSH
73572: LD_INT 0
73574: ST_TO_ADDR
// uc_nation := 0 ;
73575: LD_ADDR_OWVAR 21
73579: PUSH
73580: LD_INT 0
73582: ST_TO_ADDR
// hc_sex := sex_male ;
73583: LD_ADDR_OWVAR 27
73587: PUSH
73588: LD_INT 1
73590: ST_TO_ADDR
// hc_class := class_apeman ;
73591: LD_ADDR_OWVAR 28
73595: PUSH
73596: LD_INT 12
73598: ST_TO_ADDR
// hc_gallery :=  ;
73599: LD_ADDR_OWVAR 33
73603: PUSH
73604: LD_STRING 
73606: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73607: LD_ADDR_OWVAR 35
73611: PUSH
73612: LD_VAR 0 1
73616: NEG
73617: PPUSH
73618: LD_VAR 0 1
73622: PPUSH
73623: CALL_OW 12
73627: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73628: LD_ADDR_OWVAR 31
73632: PUSH
73633: LD_INT 0
73635: PPUSH
73636: LD_INT 3
73638: PPUSH
73639: CALL_OW 12
73643: PUSH
73644: LD_INT 0
73646: PPUSH
73647: LD_INT 3
73649: PPUSH
73650: CALL_OW 12
73654: PUSH
73655: LD_INT 0
73657: PUSH
73658: LD_INT 0
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: ST_TO_ADDR
// end ;
73667: LD_VAR 0 2
73671: RET
// export function PrepareTiger ( agressivity ) ; begin
73672: LD_INT 0
73674: PPUSH
// uc_side := 0 ;
73675: LD_ADDR_OWVAR 20
73679: PUSH
73680: LD_INT 0
73682: ST_TO_ADDR
// uc_nation := 0 ;
73683: LD_ADDR_OWVAR 21
73687: PUSH
73688: LD_INT 0
73690: ST_TO_ADDR
// hc_class := class_tiger ;
73691: LD_ADDR_OWVAR 28
73695: PUSH
73696: LD_INT 14
73698: ST_TO_ADDR
// hc_gallery :=  ;
73699: LD_ADDR_OWVAR 33
73703: PUSH
73704: LD_STRING 
73706: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73707: LD_ADDR_OWVAR 35
73711: PUSH
73712: LD_VAR 0 1
73716: NEG
73717: PPUSH
73718: LD_VAR 0 1
73722: PPUSH
73723: CALL_OW 12
73727: ST_TO_ADDR
// end ;
73728: LD_VAR 0 2
73732: RET
// export function PrepareEnchidna ( ) ; begin
73733: LD_INT 0
73735: PPUSH
// uc_side := 0 ;
73736: LD_ADDR_OWVAR 20
73740: PUSH
73741: LD_INT 0
73743: ST_TO_ADDR
// uc_nation := 0 ;
73744: LD_ADDR_OWVAR 21
73748: PUSH
73749: LD_INT 0
73751: ST_TO_ADDR
// hc_class := class_baggie ;
73752: LD_ADDR_OWVAR 28
73756: PUSH
73757: LD_INT 13
73759: ST_TO_ADDR
// hc_gallery :=  ;
73760: LD_ADDR_OWVAR 33
73764: PUSH
73765: LD_STRING 
73767: ST_TO_ADDR
// end ;
73768: LD_VAR 0 1
73772: RET
// export function PrepareFrog ( ) ; begin
73773: LD_INT 0
73775: PPUSH
// uc_side := 0 ;
73776: LD_ADDR_OWVAR 20
73780: PUSH
73781: LD_INT 0
73783: ST_TO_ADDR
// uc_nation := 0 ;
73784: LD_ADDR_OWVAR 21
73788: PUSH
73789: LD_INT 0
73791: ST_TO_ADDR
// hc_class := class_frog ;
73792: LD_ADDR_OWVAR 28
73796: PUSH
73797: LD_INT 19
73799: ST_TO_ADDR
// hc_gallery :=  ;
73800: LD_ADDR_OWVAR 33
73804: PUSH
73805: LD_STRING 
73807: ST_TO_ADDR
// end ;
73808: LD_VAR 0 1
73812: RET
// export function PrepareFish ( ) ; begin
73813: LD_INT 0
73815: PPUSH
// uc_side := 0 ;
73816: LD_ADDR_OWVAR 20
73820: PUSH
73821: LD_INT 0
73823: ST_TO_ADDR
// uc_nation := 0 ;
73824: LD_ADDR_OWVAR 21
73828: PUSH
73829: LD_INT 0
73831: ST_TO_ADDR
// hc_class := class_fish ;
73832: LD_ADDR_OWVAR 28
73836: PUSH
73837: LD_INT 20
73839: ST_TO_ADDR
// hc_gallery :=  ;
73840: LD_ADDR_OWVAR 33
73844: PUSH
73845: LD_STRING 
73847: ST_TO_ADDR
// end ;
73848: LD_VAR 0 1
73852: RET
// export function PrepareBird ( ) ; begin
73853: LD_INT 0
73855: PPUSH
// uc_side := 0 ;
73856: LD_ADDR_OWVAR 20
73860: PUSH
73861: LD_INT 0
73863: ST_TO_ADDR
// uc_nation := 0 ;
73864: LD_ADDR_OWVAR 21
73868: PUSH
73869: LD_INT 0
73871: ST_TO_ADDR
// hc_class := class_phororhacos ;
73872: LD_ADDR_OWVAR 28
73876: PUSH
73877: LD_INT 18
73879: ST_TO_ADDR
// hc_gallery :=  ;
73880: LD_ADDR_OWVAR 33
73884: PUSH
73885: LD_STRING 
73887: ST_TO_ADDR
// end ;
73888: LD_VAR 0 1
73892: RET
// export function PrepareHorse ( ) ; begin
73893: LD_INT 0
73895: PPUSH
// uc_side := 0 ;
73896: LD_ADDR_OWVAR 20
73900: PUSH
73901: LD_INT 0
73903: ST_TO_ADDR
// uc_nation := 0 ;
73904: LD_ADDR_OWVAR 21
73908: PUSH
73909: LD_INT 0
73911: ST_TO_ADDR
// hc_class := class_horse ;
73912: LD_ADDR_OWVAR 28
73916: PUSH
73917: LD_INT 21
73919: ST_TO_ADDR
// hc_gallery :=  ;
73920: LD_ADDR_OWVAR 33
73924: PUSH
73925: LD_STRING 
73927: ST_TO_ADDR
// end ;
73928: LD_VAR 0 1
73932: RET
// export function PrepareMastodont ( ) ; begin
73933: LD_INT 0
73935: PPUSH
// uc_side := 0 ;
73936: LD_ADDR_OWVAR 20
73940: PUSH
73941: LD_INT 0
73943: ST_TO_ADDR
// uc_nation := 0 ;
73944: LD_ADDR_OWVAR 21
73948: PUSH
73949: LD_INT 0
73951: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73952: LD_ADDR_OWVAR 37
73956: PUSH
73957: LD_INT 31
73959: ST_TO_ADDR
// vc_control := control_rider ;
73960: LD_ADDR_OWVAR 38
73964: PUSH
73965: LD_INT 4
73967: ST_TO_ADDR
// end ;
73968: LD_VAR 0 1
73972: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73973: LD_INT 0
73975: PPUSH
73976: PPUSH
73977: PPUSH
// uc_side = 0 ;
73978: LD_ADDR_OWVAR 20
73982: PUSH
73983: LD_INT 0
73985: ST_TO_ADDR
// uc_nation = 0 ;
73986: LD_ADDR_OWVAR 21
73990: PUSH
73991: LD_INT 0
73993: ST_TO_ADDR
// InitHc_All ( ) ;
73994: CALL_OW 584
// InitVc ;
73998: CALL_OW 20
// if mastodonts then
74002: LD_VAR 0 6
74006: IFFALSE 74073
// for i = 1 to mastodonts do
74008: LD_ADDR_VAR 0 11
74012: PUSH
74013: DOUBLE
74014: LD_INT 1
74016: DEC
74017: ST_TO_ADDR
74018: LD_VAR 0 6
74022: PUSH
74023: FOR_TO
74024: IFFALSE 74071
// begin vc_chassis := 31 ;
74026: LD_ADDR_OWVAR 37
74030: PUSH
74031: LD_INT 31
74033: ST_TO_ADDR
// vc_control := control_rider ;
74034: LD_ADDR_OWVAR 38
74038: PUSH
74039: LD_INT 4
74041: ST_TO_ADDR
// animal := CreateVehicle ;
74042: LD_ADDR_VAR 0 12
74046: PUSH
74047: CALL_OW 45
74051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74052: LD_VAR 0 12
74056: PPUSH
74057: LD_VAR 0 8
74061: PPUSH
74062: LD_INT 0
74064: PPUSH
74065: CALL 76201 0 3
// end ;
74069: GO 74023
74071: POP
74072: POP
// if horses then
74073: LD_VAR 0 5
74077: IFFALSE 74144
// for i = 1 to horses do
74079: LD_ADDR_VAR 0 11
74083: PUSH
74084: DOUBLE
74085: LD_INT 1
74087: DEC
74088: ST_TO_ADDR
74089: LD_VAR 0 5
74093: PUSH
74094: FOR_TO
74095: IFFALSE 74142
// begin hc_class := 21 ;
74097: LD_ADDR_OWVAR 28
74101: PUSH
74102: LD_INT 21
74104: ST_TO_ADDR
// hc_gallery :=  ;
74105: LD_ADDR_OWVAR 33
74109: PUSH
74110: LD_STRING 
74112: ST_TO_ADDR
// animal := CreateHuman ;
74113: LD_ADDR_VAR 0 12
74117: PUSH
74118: CALL_OW 44
74122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74123: LD_VAR 0 12
74127: PPUSH
74128: LD_VAR 0 8
74132: PPUSH
74133: LD_INT 0
74135: PPUSH
74136: CALL 76201 0 3
// end ;
74140: GO 74094
74142: POP
74143: POP
// if birds then
74144: LD_VAR 0 1
74148: IFFALSE 74215
// for i = 1 to birds do
74150: LD_ADDR_VAR 0 11
74154: PUSH
74155: DOUBLE
74156: LD_INT 1
74158: DEC
74159: ST_TO_ADDR
74160: LD_VAR 0 1
74164: PUSH
74165: FOR_TO
74166: IFFALSE 74213
// begin hc_class = 18 ;
74168: LD_ADDR_OWVAR 28
74172: PUSH
74173: LD_INT 18
74175: ST_TO_ADDR
// hc_gallery =  ;
74176: LD_ADDR_OWVAR 33
74180: PUSH
74181: LD_STRING 
74183: ST_TO_ADDR
// animal := CreateHuman ;
74184: LD_ADDR_VAR 0 12
74188: PUSH
74189: CALL_OW 44
74193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74194: LD_VAR 0 12
74198: PPUSH
74199: LD_VAR 0 8
74203: PPUSH
74204: LD_INT 0
74206: PPUSH
74207: CALL 76201 0 3
// end ;
74211: GO 74165
74213: POP
74214: POP
// if tigers then
74215: LD_VAR 0 2
74219: IFFALSE 74303
// for i = 1 to tigers do
74221: LD_ADDR_VAR 0 11
74225: PUSH
74226: DOUBLE
74227: LD_INT 1
74229: DEC
74230: ST_TO_ADDR
74231: LD_VAR 0 2
74235: PUSH
74236: FOR_TO
74237: IFFALSE 74301
// begin hc_class = class_tiger ;
74239: LD_ADDR_OWVAR 28
74243: PUSH
74244: LD_INT 14
74246: ST_TO_ADDR
// hc_gallery =  ;
74247: LD_ADDR_OWVAR 33
74251: PUSH
74252: LD_STRING 
74254: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74255: LD_ADDR_OWVAR 35
74259: PUSH
74260: LD_INT 7
74262: NEG
74263: PPUSH
74264: LD_INT 7
74266: PPUSH
74267: CALL_OW 12
74271: ST_TO_ADDR
// animal := CreateHuman ;
74272: LD_ADDR_VAR 0 12
74276: PUSH
74277: CALL_OW 44
74281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74282: LD_VAR 0 12
74286: PPUSH
74287: LD_VAR 0 8
74291: PPUSH
74292: LD_INT 0
74294: PPUSH
74295: CALL 76201 0 3
// end ;
74299: GO 74236
74301: POP
74302: POP
// if apemans then
74303: LD_VAR 0 3
74307: IFFALSE 74430
// for i = 1 to apemans do
74309: LD_ADDR_VAR 0 11
74313: PUSH
74314: DOUBLE
74315: LD_INT 1
74317: DEC
74318: ST_TO_ADDR
74319: LD_VAR 0 3
74323: PUSH
74324: FOR_TO
74325: IFFALSE 74428
// begin hc_class = class_apeman ;
74327: LD_ADDR_OWVAR 28
74331: PUSH
74332: LD_INT 12
74334: ST_TO_ADDR
// hc_gallery =  ;
74335: LD_ADDR_OWVAR 33
74339: PUSH
74340: LD_STRING 
74342: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74343: LD_ADDR_OWVAR 35
74347: PUSH
74348: LD_INT 2
74350: NEG
74351: PPUSH
74352: LD_INT 2
74354: PPUSH
74355: CALL_OW 12
74359: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74360: LD_ADDR_OWVAR 31
74364: PUSH
74365: LD_INT 1
74367: PPUSH
74368: LD_INT 3
74370: PPUSH
74371: CALL_OW 12
74375: PUSH
74376: LD_INT 1
74378: PPUSH
74379: LD_INT 3
74381: PPUSH
74382: CALL_OW 12
74386: PUSH
74387: LD_INT 0
74389: PUSH
74390: LD_INT 0
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: ST_TO_ADDR
// animal := CreateHuman ;
74399: LD_ADDR_VAR 0 12
74403: PUSH
74404: CALL_OW 44
74408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74409: LD_VAR 0 12
74413: PPUSH
74414: LD_VAR 0 8
74418: PPUSH
74419: LD_INT 0
74421: PPUSH
74422: CALL 76201 0 3
// end ;
74426: GO 74324
74428: POP
74429: POP
// if enchidnas then
74430: LD_VAR 0 4
74434: IFFALSE 74501
// for i = 1 to enchidnas do
74436: LD_ADDR_VAR 0 11
74440: PUSH
74441: DOUBLE
74442: LD_INT 1
74444: DEC
74445: ST_TO_ADDR
74446: LD_VAR 0 4
74450: PUSH
74451: FOR_TO
74452: IFFALSE 74499
// begin hc_class = 13 ;
74454: LD_ADDR_OWVAR 28
74458: PUSH
74459: LD_INT 13
74461: ST_TO_ADDR
// hc_gallery =  ;
74462: LD_ADDR_OWVAR 33
74466: PUSH
74467: LD_STRING 
74469: ST_TO_ADDR
// animal := CreateHuman ;
74470: LD_ADDR_VAR 0 12
74474: PUSH
74475: CALL_OW 44
74479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74480: LD_VAR 0 12
74484: PPUSH
74485: LD_VAR 0 8
74489: PPUSH
74490: LD_INT 0
74492: PPUSH
74493: CALL 76201 0 3
// end ;
74497: GO 74451
74499: POP
74500: POP
// if fishes then
74501: LD_VAR 0 7
74505: IFFALSE 74572
// for i = 1 to fishes do
74507: LD_ADDR_VAR 0 11
74511: PUSH
74512: DOUBLE
74513: LD_INT 1
74515: DEC
74516: ST_TO_ADDR
74517: LD_VAR 0 7
74521: PUSH
74522: FOR_TO
74523: IFFALSE 74570
// begin hc_class = 20 ;
74525: LD_ADDR_OWVAR 28
74529: PUSH
74530: LD_INT 20
74532: ST_TO_ADDR
// hc_gallery =  ;
74533: LD_ADDR_OWVAR 33
74537: PUSH
74538: LD_STRING 
74540: ST_TO_ADDR
// animal := CreateHuman ;
74541: LD_ADDR_VAR 0 12
74545: PUSH
74546: CALL_OW 44
74550: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74551: LD_VAR 0 12
74555: PPUSH
74556: LD_VAR 0 9
74560: PPUSH
74561: LD_INT 0
74563: PPUSH
74564: CALL 76201 0 3
// end ;
74568: GO 74522
74570: POP
74571: POP
// end ;
74572: LD_VAR 0 10
74576: RET
// export function WantHeal ( sci , unit ) ; begin
74577: LD_INT 0
74579: PPUSH
// if GetTaskList ( sci ) > 0 then
74580: LD_VAR 0 1
74584: PPUSH
74585: CALL_OW 437
74589: PUSH
74590: LD_INT 0
74592: GREATER
74593: IFFALSE 74663
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74595: LD_VAR 0 1
74599: PPUSH
74600: CALL_OW 437
74604: PUSH
74605: LD_INT 1
74607: ARRAY
74608: PUSH
74609: LD_INT 1
74611: ARRAY
74612: PUSH
74613: LD_STRING l
74615: EQUAL
74616: PUSH
74617: LD_VAR 0 1
74621: PPUSH
74622: CALL_OW 437
74626: PUSH
74627: LD_INT 1
74629: ARRAY
74630: PUSH
74631: LD_INT 4
74633: ARRAY
74634: PUSH
74635: LD_VAR 0 2
74639: EQUAL
74640: AND
74641: IFFALSE 74653
// result := true else
74643: LD_ADDR_VAR 0 3
74647: PUSH
74648: LD_INT 1
74650: ST_TO_ADDR
74651: GO 74661
// result := false ;
74653: LD_ADDR_VAR 0 3
74657: PUSH
74658: LD_INT 0
74660: ST_TO_ADDR
// end else
74661: GO 74671
// result := false ;
74663: LD_ADDR_VAR 0 3
74667: PUSH
74668: LD_INT 0
74670: ST_TO_ADDR
// end ;
74671: LD_VAR 0 3
74675: RET
// export function HealTarget ( sci ) ; begin
74676: LD_INT 0
74678: PPUSH
// if not sci then
74679: LD_VAR 0 1
74683: NOT
74684: IFFALSE 74688
// exit ;
74686: GO 74753
// result := 0 ;
74688: LD_ADDR_VAR 0 2
74692: PUSH
74693: LD_INT 0
74695: ST_TO_ADDR
// if GetTaskList ( sci ) then
74696: LD_VAR 0 1
74700: PPUSH
74701: CALL_OW 437
74705: IFFALSE 74753
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74707: LD_VAR 0 1
74711: PPUSH
74712: CALL_OW 437
74716: PUSH
74717: LD_INT 1
74719: ARRAY
74720: PUSH
74721: LD_INT 1
74723: ARRAY
74724: PUSH
74725: LD_STRING l
74727: EQUAL
74728: IFFALSE 74753
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74730: LD_ADDR_VAR 0 2
74734: PUSH
74735: LD_VAR 0 1
74739: PPUSH
74740: CALL_OW 437
74744: PUSH
74745: LD_INT 1
74747: ARRAY
74748: PUSH
74749: LD_INT 4
74751: ARRAY
74752: ST_TO_ADDR
// end ;
74753: LD_VAR 0 2
74757: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74758: LD_INT 0
74760: PPUSH
74761: PPUSH
74762: PPUSH
74763: PPUSH
// if not base_units then
74764: LD_VAR 0 1
74768: NOT
74769: IFFALSE 74773
// exit ;
74771: GO 74860
// result := false ;
74773: LD_ADDR_VAR 0 2
74777: PUSH
74778: LD_INT 0
74780: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74781: LD_ADDR_VAR 0 5
74785: PUSH
74786: LD_VAR 0 1
74790: PPUSH
74791: LD_INT 21
74793: PUSH
74794: LD_INT 3
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PPUSH
74801: CALL_OW 72
74805: ST_TO_ADDR
// if not tmp then
74806: LD_VAR 0 5
74810: NOT
74811: IFFALSE 74815
// exit ;
74813: GO 74860
// for i in tmp do
74815: LD_ADDR_VAR 0 3
74819: PUSH
74820: LD_VAR 0 5
74824: PUSH
74825: FOR_IN
74826: IFFALSE 74858
// begin result := EnemyInRange ( i , 22 ) ;
74828: LD_ADDR_VAR 0 2
74832: PUSH
74833: LD_VAR 0 3
74837: PPUSH
74838: LD_INT 22
74840: PPUSH
74841: CALL 72447 0 2
74845: ST_TO_ADDR
// if result then
74846: LD_VAR 0 2
74850: IFFALSE 74856
// exit ;
74852: POP
74853: POP
74854: GO 74860
// end ;
74856: GO 74825
74858: POP
74859: POP
// end ;
74860: LD_VAR 0 2
74864: RET
// export function FilterByTag ( units , tag ) ; begin
74865: LD_INT 0
74867: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74868: LD_ADDR_VAR 0 3
74872: PUSH
74873: LD_VAR 0 1
74877: PPUSH
74878: LD_INT 120
74880: PUSH
74881: LD_VAR 0 2
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: PPUSH
74890: CALL_OW 72
74894: ST_TO_ADDR
// end ;
74895: LD_VAR 0 3
74899: RET
// export function IsDriver ( un ) ; begin
74900: LD_INT 0
74902: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74903: LD_ADDR_VAR 0 2
74907: PUSH
74908: LD_VAR 0 1
74912: PUSH
74913: LD_INT 55
74915: PUSH
74916: EMPTY
74917: LIST
74918: PPUSH
74919: CALL_OW 69
74923: IN
74924: ST_TO_ADDR
// end ;
74925: LD_VAR 0 2
74929: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74930: LD_INT 0
74932: PPUSH
74933: PPUSH
// list := [ ] ;
74934: LD_ADDR_VAR 0 5
74938: PUSH
74939: EMPTY
74940: ST_TO_ADDR
// case d of 0 :
74941: LD_VAR 0 3
74945: PUSH
74946: LD_INT 0
74948: DOUBLE
74949: EQUAL
74950: IFTRUE 74954
74952: GO 75087
74954: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74955: LD_ADDR_VAR 0 5
74959: PUSH
74960: LD_VAR 0 1
74964: PUSH
74965: LD_INT 4
74967: MINUS
74968: PUSH
74969: LD_VAR 0 2
74973: PUSH
74974: LD_INT 4
74976: MINUS
74977: PUSH
74978: LD_INT 2
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: LIST
74985: PUSH
74986: LD_VAR 0 1
74990: PUSH
74991: LD_INT 3
74993: MINUS
74994: PUSH
74995: LD_VAR 0 2
74999: PUSH
75000: LD_INT 1
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: LIST
75007: PUSH
75008: LD_VAR 0 1
75012: PUSH
75013: LD_INT 4
75015: PLUS
75016: PUSH
75017: LD_VAR 0 2
75021: PUSH
75022: LD_INT 4
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: LIST
75029: PUSH
75030: LD_VAR 0 1
75034: PUSH
75035: LD_INT 3
75037: PLUS
75038: PUSH
75039: LD_VAR 0 2
75043: PUSH
75044: LD_INT 3
75046: PLUS
75047: PUSH
75048: LD_INT 5
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: LIST
75055: PUSH
75056: LD_VAR 0 1
75060: PUSH
75061: LD_VAR 0 2
75065: PUSH
75066: LD_INT 4
75068: PLUS
75069: PUSH
75070: LD_INT 0
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: LIST
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: ST_TO_ADDR
// end ; 1 :
75085: GO 75785
75087: LD_INT 1
75089: DOUBLE
75090: EQUAL
75091: IFTRUE 75095
75093: GO 75228
75095: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75096: LD_ADDR_VAR 0 5
75100: PUSH
75101: LD_VAR 0 1
75105: PUSH
75106: LD_VAR 0 2
75110: PUSH
75111: LD_INT 4
75113: MINUS
75114: PUSH
75115: LD_INT 3
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: LIST
75122: PUSH
75123: LD_VAR 0 1
75127: PUSH
75128: LD_INT 3
75130: MINUS
75131: PUSH
75132: LD_VAR 0 2
75136: PUSH
75137: LD_INT 3
75139: MINUS
75140: PUSH
75141: LD_INT 2
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: LIST
75148: PUSH
75149: LD_VAR 0 1
75153: PUSH
75154: LD_INT 4
75156: MINUS
75157: PUSH
75158: LD_VAR 0 2
75162: PUSH
75163: LD_INT 1
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: LIST
75170: PUSH
75171: LD_VAR 0 1
75175: PUSH
75176: LD_VAR 0 2
75180: PUSH
75181: LD_INT 3
75183: PLUS
75184: PUSH
75185: LD_INT 0
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: LIST
75192: PUSH
75193: LD_VAR 0 1
75197: PUSH
75198: LD_INT 4
75200: PLUS
75201: PUSH
75202: LD_VAR 0 2
75206: PUSH
75207: LD_INT 4
75209: PLUS
75210: PUSH
75211: LD_INT 5
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: LIST
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: ST_TO_ADDR
// end ; 2 :
75226: GO 75785
75228: LD_INT 2
75230: DOUBLE
75231: EQUAL
75232: IFTRUE 75236
75234: GO 75365
75236: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75237: LD_ADDR_VAR 0 5
75241: PUSH
75242: LD_VAR 0 1
75246: PUSH
75247: LD_VAR 0 2
75251: PUSH
75252: LD_INT 3
75254: MINUS
75255: PUSH
75256: LD_INT 3
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: LIST
75263: PUSH
75264: LD_VAR 0 1
75268: PUSH
75269: LD_INT 4
75271: PLUS
75272: PUSH
75273: LD_VAR 0 2
75277: PUSH
75278: LD_INT 4
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: LIST
75285: PUSH
75286: LD_VAR 0 1
75290: PUSH
75291: LD_VAR 0 2
75295: PUSH
75296: LD_INT 4
75298: PLUS
75299: PUSH
75300: LD_INT 0
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: LIST
75307: PUSH
75308: LD_VAR 0 1
75312: PUSH
75313: LD_INT 3
75315: MINUS
75316: PUSH
75317: LD_VAR 0 2
75321: PUSH
75322: LD_INT 1
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: LIST
75329: PUSH
75330: LD_VAR 0 1
75334: PUSH
75335: LD_INT 4
75337: MINUS
75338: PUSH
75339: LD_VAR 0 2
75343: PUSH
75344: LD_INT 4
75346: MINUS
75347: PUSH
75348: LD_INT 2
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: LIST
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: ST_TO_ADDR
// end ; 3 :
75363: GO 75785
75365: LD_INT 3
75367: DOUBLE
75368: EQUAL
75369: IFTRUE 75373
75371: GO 75506
75373: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75374: LD_ADDR_VAR 0 5
75378: PUSH
75379: LD_VAR 0 1
75383: PUSH
75384: LD_INT 3
75386: PLUS
75387: PUSH
75388: LD_VAR 0 2
75392: PUSH
75393: LD_INT 4
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: LIST
75400: PUSH
75401: LD_VAR 0 1
75405: PUSH
75406: LD_INT 4
75408: PLUS
75409: PUSH
75410: LD_VAR 0 2
75414: PUSH
75415: LD_INT 4
75417: PLUS
75418: PUSH
75419: LD_INT 5
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: LIST
75426: PUSH
75427: LD_VAR 0 1
75431: PUSH
75432: LD_INT 4
75434: MINUS
75435: PUSH
75436: LD_VAR 0 2
75440: PUSH
75441: LD_INT 1
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: LIST
75448: PUSH
75449: LD_VAR 0 1
75453: PUSH
75454: LD_VAR 0 2
75458: PUSH
75459: LD_INT 4
75461: MINUS
75462: PUSH
75463: LD_INT 3
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: LIST
75470: PUSH
75471: LD_VAR 0 1
75475: PUSH
75476: LD_INT 3
75478: MINUS
75479: PUSH
75480: LD_VAR 0 2
75484: PUSH
75485: LD_INT 3
75487: MINUS
75488: PUSH
75489: LD_INT 2
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: LIST
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: ST_TO_ADDR
// end ; 4 :
75504: GO 75785
75506: LD_INT 4
75508: DOUBLE
75509: EQUAL
75510: IFTRUE 75514
75512: GO 75647
75514: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75515: LD_ADDR_VAR 0 5
75519: PUSH
75520: LD_VAR 0 1
75524: PUSH
75525: LD_VAR 0 2
75529: PUSH
75530: LD_INT 4
75532: PLUS
75533: PUSH
75534: LD_INT 0
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: LIST
75541: PUSH
75542: LD_VAR 0 1
75546: PUSH
75547: LD_INT 3
75549: PLUS
75550: PUSH
75551: LD_VAR 0 2
75555: PUSH
75556: LD_INT 3
75558: PLUS
75559: PUSH
75560: LD_INT 5
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: LIST
75567: PUSH
75568: LD_VAR 0 1
75572: PUSH
75573: LD_INT 4
75575: PLUS
75576: PUSH
75577: LD_VAR 0 2
75581: PUSH
75582: LD_INT 4
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: PUSH
75590: LD_VAR 0 1
75594: PUSH
75595: LD_VAR 0 2
75599: PUSH
75600: LD_INT 3
75602: MINUS
75603: PUSH
75604: LD_INT 3
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: LIST
75611: PUSH
75612: LD_VAR 0 1
75616: PUSH
75617: LD_INT 4
75619: MINUS
75620: PUSH
75621: LD_VAR 0 2
75625: PUSH
75626: LD_INT 4
75628: MINUS
75629: PUSH
75630: LD_INT 2
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: ST_TO_ADDR
// end ; 5 :
75645: GO 75785
75647: LD_INT 5
75649: DOUBLE
75650: EQUAL
75651: IFTRUE 75655
75653: GO 75784
75655: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75656: LD_ADDR_VAR 0 5
75660: PUSH
75661: LD_VAR 0 1
75665: PUSH
75666: LD_INT 4
75668: MINUS
75669: PUSH
75670: LD_VAR 0 2
75674: PUSH
75675: LD_INT 1
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: LIST
75682: PUSH
75683: LD_VAR 0 1
75687: PUSH
75688: LD_VAR 0 2
75692: PUSH
75693: LD_INT 4
75695: MINUS
75696: PUSH
75697: LD_INT 3
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: LD_VAR 0 1
75709: PUSH
75710: LD_INT 4
75712: PLUS
75713: PUSH
75714: LD_VAR 0 2
75718: PUSH
75719: LD_INT 4
75721: PLUS
75722: PUSH
75723: LD_INT 5
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: LIST
75730: PUSH
75731: LD_VAR 0 1
75735: PUSH
75736: LD_INT 3
75738: PLUS
75739: PUSH
75740: LD_VAR 0 2
75744: PUSH
75745: LD_INT 4
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: LIST
75752: PUSH
75753: LD_VAR 0 1
75757: PUSH
75758: LD_VAR 0 2
75762: PUSH
75763: LD_INT 3
75765: PLUS
75766: PUSH
75767: LD_INT 0
75769: PUSH
75770: EMPTY
75771: LIST
75772: LIST
75773: LIST
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: ST_TO_ADDR
// end ; end ;
75782: GO 75785
75784: POP
// result := list ;
75785: LD_ADDR_VAR 0 4
75789: PUSH
75790: LD_VAR 0 5
75794: ST_TO_ADDR
// end ;
75795: LD_VAR 0 4
75799: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75800: LD_INT 0
75802: PPUSH
75803: PPUSH
75804: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75805: LD_VAR 0 1
75809: NOT
75810: PUSH
75811: LD_VAR 0 2
75815: PUSH
75816: LD_INT 1
75818: PUSH
75819: LD_INT 2
75821: PUSH
75822: LD_INT 3
75824: PUSH
75825: LD_INT 4
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: IN
75834: NOT
75835: OR
75836: IFFALSE 75840
// exit ;
75838: GO 75923
// tmp := [ ] ;
75840: LD_ADDR_VAR 0 5
75844: PUSH
75845: EMPTY
75846: ST_TO_ADDR
// for i in units do
75847: LD_ADDR_VAR 0 4
75851: PUSH
75852: LD_VAR 0 1
75856: PUSH
75857: FOR_IN
75858: IFFALSE 75892
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75860: LD_ADDR_VAR 0 5
75864: PUSH
75865: LD_VAR 0 5
75869: PPUSH
75870: LD_VAR 0 4
75874: PPUSH
75875: LD_VAR 0 2
75879: PPUSH
75880: CALL_OW 259
75884: PPUSH
75885: CALL 77284 0 2
75889: ST_TO_ADDR
75890: GO 75857
75892: POP
75893: POP
// if not tmp then
75894: LD_VAR 0 5
75898: NOT
75899: IFFALSE 75903
// exit ;
75901: GO 75923
// result := SortListByListDesc ( units , tmp ) ;
75903: LD_ADDR_VAR 0 3
75907: PUSH
75908: LD_VAR 0 1
75912: PPUSH
75913: LD_VAR 0 5
75917: PPUSH
75918: CALL_OW 77
75922: ST_TO_ADDR
// end ;
75923: LD_VAR 0 3
75927: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75928: LD_INT 0
75930: PPUSH
75931: PPUSH
75932: PPUSH
// result := false ;
75933: LD_ADDR_VAR 0 3
75937: PUSH
75938: LD_INT 0
75940: ST_TO_ADDR
// if not building then
75941: LD_VAR 0 2
75945: NOT
75946: IFFALSE 75950
// exit ;
75948: GO 76088
// x := GetX ( building ) ;
75950: LD_ADDR_VAR 0 4
75954: PUSH
75955: LD_VAR 0 2
75959: PPUSH
75960: CALL_OW 250
75964: ST_TO_ADDR
// y := GetY ( building ) ;
75965: LD_ADDR_VAR 0 5
75969: PUSH
75970: LD_VAR 0 2
75974: PPUSH
75975: CALL_OW 251
75979: ST_TO_ADDR
// if not x or not y then
75980: LD_VAR 0 4
75984: NOT
75985: PUSH
75986: LD_VAR 0 5
75990: NOT
75991: OR
75992: IFFALSE 75996
// exit ;
75994: GO 76088
// if GetTaskList ( unit ) then
75996: LD_VAR 0 1
76000: PPUSH
76001: CALL_OW 437
76005: IFFALSE 76088
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76007: LD_STRING e
76009: PUSH
76010: LD_VAR 0 1
76014: PPUSH
76015: CALL_OW 437
76019: PUSH
76020: LD_INT 1
76022: ARRAY
76023: PUSH
76024: LD_INT 1
76026: ARRAY
76027: EQUAL
76028: PUSH
76029: LD_VAR 0 4
76033: PUSH
76034: LD_VAR 0 1
76038: PPUSH
76039: CALL_OW 437
76043: PUSH
76044: LD_INT 1
76046: ARRAY
76047: PUSH
76048: LD_INT 2
76050: ARRAY
76051: EQUAL
76052: AND
76053: PUSH
76054: LD_VAR 0 5
76058: PUSH
76059: LD_VAR 0 1
76063: PPUSH
76064: CALL_OW 437
76068: PUSH
76069: LD_INT 1
76071: ARRAY
76072: PUSH
76073: LD_INT 3
76075: ARRAY
76076: EQUAL
76077: AND
76078: IFFALSE 76088
// result := true end ;
76080: LD_ADDR_VAR 0 3
76084: PUSH
76085: LD_INT 1
76087: ST_TO_ADDR
// end ;
76088: LD_VAR 0 3
76092: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76093: LD_INT 0
76095: PPUSH
// result := false ;
76096: LD_ADDR_VAR 0 4
76100: PUSH
76101: LD_INT 0
76103: ST_TO_ADDR
// if GetTaskList ( unit ) then
76104: LD_VAR 0 1
76108: PPUSH
76109: CALL_OW 437
76113: IFFALSE 76196
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76115: LD_STRING M
76117: PUSH
76118: LD_VAR 0 1
76122: PPUSH
76123: CALL_OW 437
76127: PUSH
76128: LD_INT 1
76130: ARRAY
76131: PUSH
76132: LD_INT 1
76134: ARRAY
76135: EQUAL
76136: PUSH
76137: LD_VAR 0 2
76141: PUSH
76142: LD_VAR 0 1
76146: PPUSH
76147: CALL_OW 437
76151: PUSH
76152: LD_INT 1
76154: ARRAY
76155: PUSH
76156: LD_INT 2
76158: ARRAY
76159: EQUAL
76160: AND
76161: PUSH
76162: LD_VAR 0 3
76166: PUSH
76167: LD_VAR 0 1
76171: PPUSH
76172: CALL_OW 437
76176: PUSH
76177: LD_INT 1
76179: ARRAY
76180: PUSH
76181: LD_INT 3
76183: ARRAY
76184: EQUAL
76185: AND
76186: IFFALSE 76196
// result := true ;
76188: LD_ADDR_VAR 0 4
76192: PUSH
76193: LD_INT 1
76195: ST_TO_ADDR
// end ; end ;
76196: LD_VAR 0 4
76200: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76201: LD_INT 0
76203: PPUSH
76204: PPUSH
76205: PPUSH
76206: PPUSH
// if not unit or not area then
76207: LD_VAR 0 1
76211: NOT
76212: PUSH
76213: LD_VAR 0 2
76217: NOT
76218: OR
76219: IFFALSE 76223
// exit ;
76221: GO 76387
// tmp := AreaToList ( area , i ) ;
76223: LD_ADDR_VAR 0 6
76227: PUSH
76228: LD_VAR 0 2
76232: PPUSH
76233: LD_VAR 0 5
76237: PPUSH
76238: CALL_OW 517
76242: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76243: LD_ADDR_VAR 0 5
76247: PUSH
76248: DOUBLE
76249: LD_INT 1
76251: DEC
76252: ST_TO_ADDR
76253: LD_VAR 0 6
76257: PUSH
76258: LD_INT 1
76260: ARRAY
76261: PUSH
76262: FOR_TO
76263: IFFALSE 76385
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76265: LD_ADDR_VAR 0 7
76269: PUSH
76270: LD_VAR 0 6
76274: PUSH
76275: LD_INT 1
76277: ARRAY
76278: PUSH
76279: LD_VAR 0 5
76283: ARRAY
76284: PUSH
76285: LD_VAR 0 6
76289: PUSH
76290: LD_INT 2
76292: ARRAY
76293: PUSH
76294: LD_VAR 0 5
76298: ARRAY
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76304: LD_VAR 0 7
76308: PUSH
76309: LD_INT 1
76311: ARRAY
76312: PPUSH
76313: LD_VAR 0 7
76317: PUSH
76318: LD_INT 2
76320: ARRAY
76321: PPUSH
76322: CALL_OW 428
76326: PUSH
76327: LD_INT 0
76329: EQUAL
76330: IFFALSE 76383
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76332: LD_VAR 0 1
76336: PPUSH
76337: LD_VAR 0 7
76341: PUSH
76342: LD_INT 1
76344: ARRAY
76345: PPUSH
76346: LD_VAR 0 7
76350: PUSH
76351: LD_INT 2
76353: ARRAY
76354: PPUSH
76355: LD_VAR 0 3
76359: PPUSH
76360: CALL_OW 48
// result := IsPlaced ( unit ) ;
76364: LD_ADDR_VAR 0 4
76368: PUSH
76369: LD_VAR 0 1
76373: PPUSH
76374: CALL_OW 305
76378: ST_TO_ADDR
// exit ;
76379: POP
76380: POP
76381: GO 76387
// end ; end ;
76383: GO 76262
76385: POP
76386: POP
// end ;
76387: LD_VAR 0 4
76391: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76392: LD_INT 0
76394: PPUSH
76395: PPUSH
76396: PPUSH
// if not side or side > 8 then
76397: LD_VAR 0 1
76401: NOT
76402: PUSH
76403: LD_VAR 0 1
76407: PUSH
76408: LD_INT 8
76410: GREATER
76411: OR
76412: IFFALSE 76416
// exit ;
76414: GO 76603
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76416: LD_ADDR_VAR 0 4
76420: PUSH
76421: LD_INT 22
76423: PUSH
76424: LD_VAR 0 1
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 21
76435: PUSH
76436: LD_INT 3
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: PPUSH
76447: CALL_OW 69
76451: ST_TO_ADDR
// if not tmp then
76452: LD_VAR 0 4
76456: NOT
76457: IFFALSE 76461
// exit ;
76459: GO 76603
// enable_addtolog := true ;
76461: LD_ADDR_OWVAR 81
76465: PUSH
76466: LD_INT 1
76468: ST_TO_ADDR
// AddToLog ( [ ) ;
76469: LD_STRING [
76471: PPUSH
76472: CALL_OW 561
// for i in tmp do
76476: LD_ADDR_VAR 0 3
76480: PUSH
76481: LD_VAR 0 4
76485: PUSH
76486: FOR_IN
76487: IFFALSE 76594
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76489: LD_STRING [
76491: PUSH
76492: LD_VAR 0 3
76496: PPUSH
76497: CALL_OW 266
76501: STR
76502: PUSH
76503: LD_STRING , 
76505: STR
76506: PUSH
76507: LD_VAR 0 3
76511: PPUSH
76512: CALL_OW 250
76516: STR
76517: PUSH
76518: LD_STRING , 
76520: STR
76521: PUSH
76522: LD_VAR 0 3
76526: PPUSH
76527: CALL_OW 251
76531: STR
76532: PUSH
76533: LD_STRING , 
76535: STR
76536: PUSH
76537: LD_VAR 0 3
76541: PPUSH
76542: CALL_OW 254
76546: STR
76547: PUSH
76548: LD_STRING , 
76550: STR
76551: PUSH
76552: LD_VAR 0 3
76556: PPUSH
76557: LD_INT 1
76559: PPUSH
76560: CALL_OW 268
76564: STR
76565: PUSH
76566: LD_STRING , 
76568: STR
76569: PUSH
76570: LD_VAR 0 3
76574: PPUSH
76575: LD_INT 2
76577: PPUSH
76578: CALL_OW 268
76582: STR
76583: PUSH
76584: LD_STRING ],
76586: STR
76587: PPUSH
76588: CALL_OW 561
// end ;
76592: GO 76486
76594: POP
76595: POP
// AddToLog ( ]; ) ;
76596: LD_STRING ];
76598: PPUSH
76599: CALL_OW 561
// end ;
76603: LD_VAR 0 2
76607: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76608: LD_INT 0
76610: PPUSH
76611: PPUSH
76612: PPUSH
76613: PPUSH
76614: PPUSH
// if not area or not rate or not max then
76615: LD_VAR 0 1
76619: NOT
76620: PUSH
76621: LD_VAR 0 2
76625: NOT
76626: OR
76627: PUSH
76628: LD_VAR 0 4
76632: NOT
76633: OR
76634: IFFALSE 76638
// exit ;
76636: GO 76827
// while 1 do
76638: LD_INT 1
76640: IFFALSE 76827
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76642: LD_ADDR_VAR 0 9
76646: PUSH
76647: LD_VAR 0 1
76651: PPUSH
76652: LD_INT 1
76654: PPUSH
76655: CALL_OW 287
76659: PUSH
76660: LD_INT 10
76662: MUL
76663: ST_TO_ADDR
// r := rate / 10 ;
76664: LD_ADDR_VAR 0 7
76668: PUSH
76669: LD_VAR 0 2
76673: PUSH
76674: LD_INT 10
76676: DIVREAL
76677: ST_TO_ADDR
// time := 1 1$00 ;
76678: LD_ADDR_VAR 0 8
76682: PUSH
76683: LD_INT 2100
76685: ST_TO_ADDR
// if amount < min then
76686: LD_VAR 0 9
76690: PUSH
76691: LD_VAR 0 3
76695: LESS
76696: IFFALSE 76714
// r := r * 2 else
76698: LD_ADDR_VAR 0 7
76702: PUSH
76703: LD_VAR 0 7
76707: PUSH
76708: LD_INT 2
76710: MUL
76711: ST_TO_ADDR
76712: GO 76740
// if amount > max then
76714: LD_VAR 0 9
76718: PUSH
76719: LD_VAR 0 4
76723: GREATER
76724: IFFALSE 76740
// r := r / 2 ;
76726: LD_ADDR_VAR 0 7
76730: PUSH
76731: LD_VAR 0 7
76735: PUSH
76736: LD_INT 2
76738: DIVREAL
76739: ST_TO_ADDR
// time := time / r ;
76740: LD_ADDR_VAR 0 8
76744: PUSH
76745: LD_VAR 0 8
76749: PUSH
76750: LD_VAR 0 7
76754: DIVREAL
76755: ST_TO_ADDR
// if time < 0 then
76756: LD_VAR 0 8
76760: PUSH
76761: LD_INT 0
76763: LESS
76764: IFFALSE 76781
// time := time * - 1 ;
76766: LD_ADDR_VAR 0 8
76770: PUSH
76771: LD_VAR 0 8
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: MUL
76780: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76781: LD_VAR 0 8
76785: PUSH
76786: LD_INT 35
76788: PPUSH
76789: LD_INT 875
76791: PPUSH
76792: CALL_OW 12
76796: PLUS
76797: PPUSH
76798: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76802: LD_INT 1
76804: PPUSH
76805: LD_INT 5
76807: PPUSH
76808: CALL_OW 12
76812: PPUSH
76813: LD_VAR 0 1
76817: PPUSH
76818: LD_INT 1
76820: PPUSH
76821: CALL_OW 55
// end ;
76825: GO 76638
// end ;
76827: LD_VAR 0 5
76831: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76832: LD_INT 0
76834: PPUSH
76835: PPUSH
76836: PPUSH
76837: PPUSH
76838: PPUSH
76839: PPUSH
76840: PPUSH
76841: PPUSH
// if not turrets or not factories then
76842: LD_VAR 0 1
76846: NOT
76847: PUSH
76848: LD_VAR 0 2
76852: NOT
76853: OR
76854: IFFALSE 76858
// exit ;
76856: GO 77165
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76858: LD_ADDR_VAR 0 10
76862: PUSH
76863: LD_INT 5
76865: PUSH
76866: LD_INT 6
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: PUSH
76873: LD_INT 2
76875: PUSH
76876: LD_INT 4
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 3
76885: PUSH
76886: LD_INT 5
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: LIST
76897: PUSH
76898: LD_INT 24
76900: PUSH
76901: LD_INT 25
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 23
76910: PUSH
76911: LD_INT 27
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PUSH
76922: LD_INT 42
76924: PUSH
76925: LD_INT 43
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: LD_INT 44
76934: PUSH
76935: LD_INT 46
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: LD_INT 45
76944: PUSH
76945: LD_INT 47
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: LIST
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: LIST
76961: ST_TO_ADDR
// result := [ ] ;
76962: LD_ADDR_VAR 0 3
76966: PUSH
76967: EMPTY
76968: ST_TO_ADDR
// for i in turrets do
76969: LD_ADDR_VAR 0 4
76973: PUSH
76974: LD_VAR 0 1
76978: PUSH
76979: FOR_IN
76980: IFFALSE 77163
// begin nat := GetNation ( i ) ;
76982: LD_ADDR_VAR 0 7
76986: PUSH
76987: LD_VAR 0 4
76991: PPUSH
76992: CALL_OW 248
76996: ST_TO_ADDR
// weapon := 0 ;
76997: LD_ADDR_VAR 0 8
77001: PUSH
77002: LD_INT 0
77004: ST_TO_ADDR
// if not nat then
77005: LD_VAR 0 7
77009: NOT
77010: IFFALSE 77014
// continue ;
77012: GO 76979
// for j in list [ nat ] do
77014: LD_ADDR_VAR 0 5
77018: PUSH
77019: LD_VAR 0 10
77023: PUSH
77024: LD_VAR 0 7
77028: ARRAY
77029: PUSH
77030: FOR_IN
77031: IFFALSE 77072
// if GetBWeapon ( i ) = j [ 1 ] then
77033: LD_VAR 0 4
77037: PPUSH
77038: CALL_OW 269
77042: PUSH
77043: LD_VAR 0 5
77047: PUSH
77048: LD_INT 1
77050: ARRAY
77051: EQUAL
77052: IFFALSE 77070
// begin weapon := j [ 2 ] ;
77054: LD_ADDR_VAR 0 8
77058: PUSH
77059: LD_VAR 0 5
77063: PUSH
77064: LD_INT 2
77066: ARRAY
77067: ST_TO_ADDR
// break ;
77068: GO 77072
// end ;
77070: GO 77030
77072: POP
77073: POP
// if not weapon then
77074: LD_VAR 0 8
77078: NOT
77079: IFFALSE 77083
// continue ;
77081: GO 76979
// for k in factories do
77083: LD_ADDR_VAR 0 6
77087: PUSH
77088: LD_VAR 0 2
77092: PUSH
77093: FOR_IN
77094: IFFALSE 77159
// begin weapons := AvailableWeaponList ( k ) ;
77096: LD_ADDR_VAR 0 9
77100: PUSH
77101: LD_VAR 0 6
77105: PPUSH
77106: CALL_OW 478
77110: ST_TO_ADDR
// if not weapons then
77111: LD_VAR 0 9
77115: NOT
77116: IFFALSE 77120
// continue ;
77118: GO 77093
// if weapon in weapons then
77120: LD_VAR 0 8
77124: PUSH
77125: LD_VAR 0 9
77129: IN
77130: IFFALSE 77157
// begin result := [ i , weapon ] ;
77132: LD_ADDR_VAR 0 3
77136: PUSH
77137: LD_VAR 0 4
77141: PUSH
77142: LD_VAR 0 8
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: ST_TO_ADDR
// exit ;
77151: POP
77152: POP
77153: POP
77154: POP
77155: GO 77165
// end ; end ;
77157: GO 77093
77159: POP
77160: POP
// end ;
77161: GO 76979
77163: POP
77164: POP
// end ;
77165: LD_VAR 0 3
77169: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77170: LD_INT 0
77172: PPUSH
// if not side or side > 8 then
77173: LD_VAR 0 3
77177: NOT
77178: PUSH
77179: LD_VAR 0 3
77183: PUSH
77184: LD_INT 8
77186: GREATER
77187: OR
77188: IFFALSE 77192
// exit ;
77190: GO 77251
// if not range then
77192: LD_VAR 0 4
77196: NOT
77197: IFFALSE 77208
// range := - 12 ;
77199: LD_ADDR_VAR 0 4
77203: PUSH
77204: LD_INT 12
77206: NEG
77207: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77208: LD_VAR 0 1
77212: PPUSH
77213: LD_VAR 0 2
77217: PPUSH
77218: LD_VAR 0 3
77222: PPUSH
77223: LD_VAR 0 4
77227: PPUSH
77228: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77232: LD_VAR 0 1
77236: PPUSH
77237: LD_VAR 0 2
77241: PPUSH
77242: LD_VAR 0 3
77246: PPUSH
77247: CALL_OW 331
// end ;
77251: LD_VAR 0 5
77255: RET
// export function Video ( mode ) ; begin
77256: LD_INT 0
77258: PPUSH
// ingame_video = mode ;
77259: LD_ADDR_OWVAR 52
77263: PUSH
77264: LD_VAR 0 1
77268: ST_TO_ADDR
// interface_hidden = mode ;
77269: LD_ADDR_OWVAR 54
77273: PUSH
77274: LD_VAR 0 1
77278: ST_TO_ADDR
// end ;
77279: LD_VAR 0 2
77283: RET
// export function Join ( array , element ) ; begin
77284: LD_INT 0
77286: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77287: LD_ADDR_VAR 0 3
77291: PUSH
77292: LD_VAR 0 1
77296: PPUSH
77297: LD_VAR 0 1
77301: PUSH
77302: LD_INT 1
77304: PLUS
77305: PPUSH
77306: LD_VAR 0 2
77310: PPUSH
77311: CALL_OW 1
77315: ST_TO_ADDR
// end ;
77316: LD_VAR 0 3
77320: RET
// export function JoinUnion ( array , element ) ; begin
77321: LD_INT 0
77323: PPUSH
// result := array union element ;
77324: LD_ADDR_VAR 0 3
77328: PUSH
77329: LD_VAR 0 1
77333: PUSH
77334: LD_VAR 0 2
77338: UNION
77339: ST_TO_ADDR
// end ;
77340: LD_VAR 0 3
77344: RET
// export function GetBehemoths ( side ) ; begin
77345: LD_INT 0
77347: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77348: LD_ADDR_VAR 0 2
77352: PUSH
77353: LD_INT 22
77355: PUSH
77356: LD_VAR 0 1
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PUSH
77365: LD_INT 31
77367: PUSH
77368: LD_INT 25
77370: PUSH
77371: EMPTY
77372: LIST
77373: LIST
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PPUSH
77379: CALL_OW 69
77383: ST_TO_ADDR
// end ;
77384: LD_VAR 0 2
77388: RET
// export function Shuffle ( array ) ; var i , index ; begin
77389: LD_INT 0
77391: PPUSH
77392: PPUSH
77393: PPUSH
// result := [ ] ;
77394: LD_ADDR_VAR 0 2
77398: PUSH
77399: EMPTY
77400: ST_TO_ADDR
// if not array then
77401: LD_VAR 0 1
77405: NOT
77406: IFFALSE 77410
// exit ;
77408: GO 77509
// Randomize ;
77410: CALL_OW 10
// for i = array downto 1 do
77414: LD_ADDR_VAR 0 3
77418: PUSH
77419: DOUBLE
77420: LD_VAR 0 1
77424: INC
77425: ST_TO_ADDR
77426: LD_INT 1
77428: PUSH
77429: FOR_DOWNTO
77430: IFFALSE 77507
// begin index := rand ( 1 , array ) ;
77432: LD_ADDR_VAR 0 4
77436: PUSH
77437: LD_INT 1
77439: PPUSH
77440: LD_VAR 0 1
77444: PPUSH
77445: CALL_OW 12
77449: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77450: LD_ADDR_VAR 0 2
77454: PUSH
77455: LD_VAR 0 2
77459: PPUSH
77460: LD_VAR 0 2
77464: PUSH
77465: LD_INT 1
77467: PLUS
77468: PPUSH
77469: LD_VAR 0 1
77473: PUSH
77474: LD_VAR 0 4
77478: ARRAY
77479: PPUSH
77480: CALL_OW 2
77484: ST_TO_ADDR
// array := Delete ( array , index ) ;
77485: LD_ADDR_VAR 0 1
77489: PUSH
77490: LD_VAR 0 1
77494: PPUSH
77495: LD_VAR 0 4
77499: PPUSH
77500: CALL_OW 3
77504: ST_TO_ADDR
// end ;
77505: GO 77429
77507: POP
77508: POP
// end ;
77509: LD_VAR 0 2
77513: RET
// export function GetBaseMaterials ( base ) ; begin
77514: LD_INT 0
77516: PPUSH
// result := [ 0 , 0 , 0 ] ;
77517: LD_ADDR_VAR 0 2
77521: PUSH
77522: LD_INT 0
77524: PUSH
77525: LD_INT 0
77527: PUSH
77528: LD_INT 0
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: LIST
77535: ST_TO_ADDR
// if not base then
77536: LD_VAR 0 1
77540: NOT
77541: IFFALSE 77545
// exit ;
77543: GO 77594
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77545: LD_ADDR_VAR 0 2
77549: PUSH
77550: LD_VAR 0 1
77554: PPUSH
77555: LD_INT 1
77557: PPUSH
77558: CALL_OW 275
77562: PUSH
77563: LD_VAR 0 1
77567: PPUSH
77568: LD_INT 2
77570: PPUSH
77571: CALL_OW 275
77575: PUSH
77576: LD_VAR 0 1
77580: PPUSH
77581: LD_INT 3
77583: PPUSH
77584: CALL_OW 275
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: LIST
77593: ST_TO_ADDR
// end ;
77594: LD_VAR 0 2
77598: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77599: LD_INT 0
77601: PPUSH
77602: PPUSH
// result := array ;
77603: LD_ADDR_VAR 0 3
77607: PUSH
77608: LD_VAR 0 1
77612: ST_TO_ADDR
// if size >= result then
77613: LD_VAR 0 2
77617: PUSH
77618: LD_VAR 0 3
77622: GREATEREQUAL
77623: IFFALSE 77627
// exit ;
77625: GO 77677
// if size then
77627: LD_VAR 0 2
77631: IFFALSE 77677
// for i := array downto size do
77633: LD_ADDR_VAR 0 4
77637: PUSH
77638: DOUBLE
77639: LD_VAR 0 1
77643: INC
77644: ST_TO_ADDR
77645: LD_VAR 0 2
77649: PUSH
77650: FOR_DOWNTO
77651: IFFALSE 77675
// result := Delete ( result , result ) ;
77653: LD_ADDR_VAR 0 3
77657: PUSH
77658: LD_VAR 0 3
77662: PPUSH
77663: LD_VAR 0 3
77667: PPUSH
77668: CALL_OW 3
77672: ST_TO_ADDR
77673: GO 77650
77675: POP
77676: POP
// end ;
77677: LD_VAR 0 3
77681: RET
// export function ComExit ( unit ) ; var tmp ; begin
77682: LD_INT 0
77684: PPUSH
77685: PPUSH
// if not IsInUnit ( unit ) then
77686: LD_VAR 0 1
77690: PPUSH
77691: CALL_OW 310
77695: NOT
77696: IFFALSE 77700
// exit ;
77698: GO 77760
// tmp := IsInUnit ( unit ) ;
77700: LD_ADDR_VAR 0 3
77704: PUSH
77705: LD_VAR 0 1
77709: PPUSH
77710: CALL_OW 310
77714: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77715: LD_VAR 0 3
77719: PPUSH
77720: CALL_OW 247
77724: PUSH
77725: LD_INT 2
77727: EQUAL
77728: IFFALSE 77741
// ComExitVehicle ( unit ) else
77730: LD_VAR 0 1
77734: PPUSH
77735: CALL_OW 121
77739: GO 77750
// ComExitBuilding ( unit ) ;
77741: LD_VAR 0 1
77745: PPUSH
77746: CALL_OW 122
// result := tmp ;
77750: LD_ADDR_VAR 0 2
77754: PUSH
77755: LD_VAR 0 3
77759: ST_TO_ADDR
// end ;
77760: LD_VAR 0 2
77764: RET
// export function ComExitAll ( units ) ; var i ; begin
77765: LD_INT 0
77767: PPUSH
77768: PPUSH
// if not units then
77769: LD_VAR 0 1
77773: NOT
77774: IFFALSE 77778
// exit ;
77776: GO 77804
// for i in units do
77778: LD_ADDR_VAR 0 3
77782: PUSH
77783: LD_VAR 0 1
77787: PUSH
77788: FOR_IN
77789: IFFALSE 77802
// ComExit ( i ) ;
77791: LD_VAR 0 3
77795: PPUSH
77796: CALL 77682 0 1
77800: GO 77788
77802: POP
77803: POP
// end ;
77804: LD_VAR 0 2
77808: RET
// export function ResetHc ; begin
77809: LD_INT 0
77811: PPUSH
// InitHc ;
77812: CALL_OW 19
// hc_importance := 0 ;
77816: LD_ADDR_OWVAR 32
77820: PUSH
77821: LD_INT 0
77823: ST_TO_ADDR
// end ;
77824: LD_VAR 0 1
77828: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77829: LD_INT 0
77831: PPUSH
77832: PPUSH
77833: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77834: LD_ADDR_VAR 0 6
77838: PUSH
77839: LD_VAR 0 1
77843: PUSH
77844: LD_VAR 0 3
77848: PLUS
77849: PUSH
77850: LD_INT 2
77852: DIV
77853: ST_TO_ADDR
// if _x < 0 then
77854: LD_VAR 0 6
77858: PUSH
77859: LD_INT 0
77861: LESS
77862: IFFALSE 77879
// _x := _x * - 1 ;
77864: LD_ADDR_VAR 0 6
77868: PUSH
77869: LD_VAR 0 6
77873: PUSH
77874: LD_INT 1
77876: NEG
77877: MUL
77878: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77879: LD_ADDR_VAR 0 7
77883: PUSH
77884: LD_VAR 0 2
77888: PUSH
77889: LD_VAR 0 4
77893: PLUS
77894: PUSH
77895: LD_INT 2
77897: DIV
77898: ST_TO_ADDR
// if _y < 0 then
77899: LD_VAR 0 7
77903: PUSH
77904: LD_INT 0
77906: LESS
77907: IFFALSE 77924
// _y := _y * - 1 ;
77909: LD_ADDR_VAR 0 7
77913: PUSH
77914: LD_VAR 0 7
77918: PUSH
77919: LD_INT 1
77921: NEG
77922: MUL
77923: ST_TO_ADDR
// result := [ _x , _y ] ;
77924: LD_ADDR_VAR 0 5
77928: PUSH
77929: LD_VAR 0 6
77933: PUSH
77934: LD_VAR 0 7
77938: PUSH
77939: EMPTY
77940: LIST
77941: LIST
77942: ST_TO_ADDR
// end ;
77943: LD_VAR 0 5
77947: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77948: LD_INT 0
77950: PPUSH
77951: PPUSH
77952: PPUSH
77953: PPUSH
// task := GetTaskList ( unit ) ;
77954: LD_ADDR_VAR 0 7
77958: PUSH
77959: LD_VAR 0 1
77963: PPUSH
77964: CALL_OW 437
77968: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77969: LD_VAR 0 7
77973: NOT
77974: PUSH
77975: LD_VAR 0 1
77979: PPUSH
77980: LD_VAR 0 2
77984: PPUSH
77985: CALL_OW 308
77989: NOT
77990: AND
77991: IFFALSE 77995
// exit ;
77993: GO 78113
// if IsInArea ( unit , area ) then
77995: LD_VAR 0 1
77999: PPUSH
78000: LD_VAR 0 2
78004: PPUSH
78005: CALL_OW 308
78009: IFFALSE 78027
// begin ComMoveToArea ( unit , goAway ) ;
78011: LD_VAR 0 1
78015: PPUSH
78016: LD_VAR 0 3
78020: PPUSH
78021: CALL_OW 113
// exit ;
78025: GO 78113
// end ; if task [ 1 ] [ 1 ] <> M then
78027: LD_VAR 0 7
78031: PUSH
78032: LD_INT 1
78034: ARRAY
78035: PUSH
78036: LD_INT 1
78038: ARRAY
78039: PUSH
78040: LD_STRING M
78042: NONEQUAL
78043: IFFALSE 78047
// exit ;
78045: GO 78113
// x := task [ 1 ] [ 2 ] ;
78047: LD_ADDR_VAR 0 5
78051: PUSH
78052: LD_VAR 0 7
78056: PUSH
78057: LD_INT 1
78059: ARRAY
78060: PUSH
78061: LD_INT 2
78063: ARRAY
78064: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78065: LD_ADDR_VAR 0 6
78069: PUSH
78070: LD_VAR 0 7
78074: PUSH
78075: LD_INT 1
78077: ARRAY
78078: PUSH
78079: LD_INT 3
78081: ARRAY
78082: ST_TO_ADDR
// if InArea ( x , y , area ) then
78083: LD_VAR 0 5
78087: PPUSH
78088: LD_VAR 0 6
78092: PPUSH
78093: LD_VAR 0 2
78097: PPUSH
78098: CALL_OW 309
78102: IFFALSE 78113
// ComStop ( unit ) ;
78104: LD_VAR 0 1
78108: PPUSH
78109: CALL_OW 141
// end ;
78113: LD_VAR 0 4
78117: RET
// export function Abs ( value ) ; begin
78118: LD_INT 0
78120: PPUSH
// result := value ;
78121: LD_ADDR_VAR 0 2
78125: PUSH
78126: LD_VAR 0 1
78130: ST_TO_ADDR
// if value < 0 then
78131: LD_VAR 0 1
78135: PUSH
78136: LD_INT 0
78138: LESS
78139: IFFALSE 78156
// result := value * - 1 ;
78141: LD_ADDR_VAR 0 2
78145: PUSH
78146: LD_VAR 0 1
78150: PUSH
78151: LD_INT 1
78153: NEG
78154: MUL
78155: ST_TO_ADDR
// end ;
78156: LD_VAR 0 2
78160: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78161: LD_INT 0
78163: PPUSH
78164: PPUSH
78165: PPUSH
78166: PPUSH
78167: PPUSH
78168: PPUSH
78169: PPUSH
78170: PPUSH
// if not unit or not building then
78171: LD_VAR 0 1
78175: NOT
78176: PUSH
78177: LD_VAR 0 2
78181: NOT
78182: OR
78183: IFFALSE 78187
// exit ;
78185: GO 78413
// x := GetX ( building ) ;
78187: LD_ADDR_VAR 0 4
78191: PUSH
78192: LD_VAR 0 2
78196: PPUSH
78197: CALL_OW 250
78201: ST_TO_ADDR
// y := GetY ( building ) ;
78202: LD_ADDR_VAR 0 6
78206: PUSH
78207: LD_VAR 0 2
78211: PPUSH
78212: CALL_OW 251
78216: ST_TO_ADDR
// d := GetDir ( building ) ;
78217: LD_ADDR_VAR 0 8
78221: PUSH
78222: LD_VAR 0 2
78226: PPUSH
78227: CALL_OW 254
78231: ST_TO_ADDR
// r := 4 ;
78232: LD_ADDR_VAR 0 9
78236: PUSH
78237: LD_INT 4
78239: ST_TO_ADDR
// for i := 1 to 5 do
78240: LD_ADDR_VAR 0 10
78244: PUSH
78245: DOUBLE
78246: LD_INT 1
78248: DEC
78249: ST_TO_ADDR
78250: LD_INT 5
78252: PUSH
78253: FOR_TO
78254: IFFALSE 78411
// begin _x := ShiftX ( x , d , r + i ) ;
78256: LD_ADDR_VAR 0 5
78260: PUSH
78261: LD_VAR 0 4
78265: PPUSH
78266: LD_VAR 0 8
78270: PPUSH
78271: LD_VAR 0 9
78275: PUSH
78276: LD_VAR 0 10
78280: PLUS
78281: PPUSH
78282: CALL_OW 272
78286: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78287: LD_ADDR_VAR 0 7
78291: PUSH
78292: LD_VAR 0 6
78296: PPUSH
78297: LD_VAR 0 8
78301: PPUSH
78302: LD_VAR 0 9
78306: PUSH
78307: LD_VAR 0 10
78311: PLUS
78312: PPUSH
78313: CALL_OW 273
78317: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78318: LD_VAR 0 5
78322: PPUSH
78323: LD_VAR 0 7
78327: PPUSH
78328: CALL_OW 488
78332: PUSH
78333: LD_VAR 0 5
78337: PPUSH
78338: LD_VAR 0 7
78342: PPUSH
78343: CALL_OW 428
78347: PPUSH
78348: CALL_OW 247
78352: PUSH
78353: LD_INT 3
78355: PUSH
78356: LD_INT 2
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: IN
78363: NOT
78364: AND
78365: IFFALSE 78409
// begin ComMoveXY ( unit , _x , _y ) ;
78367: LD_VAR 0 1
78371: PPUSH
78372: LD_VAR 0 5
78376: PPUSH
78377: LD_VAR 0 7
78381: PPUSH
78382: CALL_OW 111
// result := [ _x , _y ] ;
78386: LD_ADDR_VAR 0 3
78390: PUSH
78391: LD_VAR 0 5
78395: PUSH
78396: LD_VAR 0 7
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: ST_TO_ADDR
// exit ;
78405: POP
78406: POP
78407: GO 78413
// end ; end ;
78409: GO 78253
78411: POP
78412: POP
// end ;
78413: LD_VAR 0 3
78417: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78418: LD_INT 0
78420: PPUSH
78421: PPUSH
78422: PPUSH
// result := 0 ;
78423: LD_ADDR_VAR 0 3
78427: PUSH
78428: LD_INT 0
78430: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78431: LD_VAR 0 1
78435: PUSH
78436: LD_INT 0
78438: LESS
78439: PUSH
78440: LD_VAR 0 1
78444: PUSH
78445: LD_INT 8
78447: GREATER
78448: OR
78449: PUSH
78450: LD_VAR 0 2
78454: PUSH
78455: LD_INT 0
78457: LESS
78458: OR
78459: PUSH
78460: LD_VAR 0 2
78464: PUSH
78465: LD_INT 8
78467: GREATER
78468: OR
78469: IFFALSE 78473
// exit ;
78471: GO 78548
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78473: LD_ADDR_VAR 0 4
78477: PUSH
78478: LD_INT 22
78480: PUSH
78481: LD_VAR 0 2
78485: PUSH
78486: EMPTY
78487: LIST
78488: LIST
78489: PPUSH
78490: CALL_OW 69
78494: PUSH
78495: FOR_IN
78496: IFFALSE 78546
// begin un := UnitShoot ( i ) ;
78498: LD_ADDR_VAR 0 5
78502: PUSH
78503: LD_VAR 0 4
78507: PPUSH
78508: CALL_OW 504
78512: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78513: LD_VAR 0 5
78517: PPUSH
78518: CALL_OW 255
78522: PUSH
78523: LD_VAR 0 1
78527: EQUAL
78528: IFFALSE 78544
// begin result := un ;
78530: LD_ADDR_VAR 0 3
78534: PUSH
78535: LD_VAR 0 5
78539: ST_TO_ADDR
// exit ;
78540: POP
78541: POP
78542: GO 78548
// end ; end ;
78544: GO 78495
78546: POP
78547: POP
// end ;
78548: LD_VAR 0 3
78552: RET
// export function GetCargoBay ( units ) ; begin
78553: LD_INT 0
78555: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78556: LD_ADDR_VAR 0 2
78560: PUSH
78561: LD_VAR 0 1
78565: PPUSH
78566: LD_INT 2
78568: PUSH
78569: LD_INT 34
78571: PUSH
78572: LD_INT 12
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: PUSH
78579: LD_INT 34
78581: PUSH
78582: LD_INT 51
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: PUSH
78589: LD_INT 34
78591: PUSH
78592: LD_INT 32
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: PUSH
78599: LD_INT 34
78601: PUSH
78602: LD_INT 89
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: LIST
78613: LIST
78614: LIST
78615: PPUSH
78616: CALL_OW 72
78620: ST_TO_ADDR
// end ;
78621: LD_VAR 0 2
78625: RET
// export function Negate ( value ) ; begin
78626: LD_INT 0
78628: PPUSH
// result := not value ;
78629: LD_ADDR_VAR 0 2
78633: PUSH
78634: LD_VAR 0 1
78638: NOT
78639: ST_TO_ADDR
// end ;
78640: LD_VAR 0 2
78644: RET
// export function Inc ( value ) ; begin
78645: LD_INT 0
78647: PPUSH
// result := value + 1 ;
78648: LD_ADDR_VAR 0 2
78652: PUSH
78653: LD_VAR 0 1
78657: PUSH
78658: LD_INT 1
78660: PLUS
78661: ST_TO_ADDR
// end ;
78662: LD_VAR 0 2
78666: RET
// export function Dec ( value ) ; begin
78667: LD_INT 0
78669: PPUSH
// result := value - 1 ;
78670: LD_ADDR_VAR 0 2
78674: PUSH
78675: LD_VAR 0 1
78679: PUSH
78680: LD_INT 1
78682: MINUS
78683: ST_TO_ADDR
// end ;
78684: LD_VAR 0 2
78688: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78689: LD_INT 0
78691: PPUSH
78692: PPUSH
78693: PPUSH
78694: PPUSH
78695: PPUSH
78696: PPUSH
78697: PPUSH
78698: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78699: LD_VAR 0 1
78703: PPUSH
78704: LD_VAR 0 2
78708: PPUSH
78709: CALL_OW 488
78713: NOT
78714: PUSH
78715: LD_VAR 0 3
78719: PPUSH
78720: LD_VAR 0 4
78724: PPUSH
78725: CALL_OW 488
78729: NOT
78730: OR
78731: IFFALSE 78744
// begin result := - 1 ;
78733: LD_ADDR_VAR 0 5
78737: PUSH
78738: LD_INT 1
78740: NEG
78741: ST_TO_ADDR
// exit ;
78742: GO 78979
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78744: LD_ADDR_VAR 0 12
78748: PUSH
78749: LD_VAR 0 1
78753: PPUSH
78754: LD_VAR 0 2
78758: PPUSH
78759: LD_VAR 0 3
78763: PPUSH
78764: LD_VAR 0 4
78768: PPUSH
78769: CALL 77829 0 4
78773: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78774: LD_ADDR_VAR 0 11
78778: PUSH
78779: LD_VAR 0 1
78783: PPUSH
78784: LD_VAR 0 2
78788: PPUSH
78789: LD_VAR 0 12
78793: PUSH
78794: LD_INT 1
78796: ARRAY
78797: PPUSH
78798: LD_VAR 0 12
78802: PUSH
78803: LD_INT 2
78805: ARRAY
78806: PPUSH
78807: CALL_OW 298
78811: ST_TO_ADDR
// distance := 9999 ;
78812: LD_ADDR_VAR 0 10
78816: PUSH
78817: LD_INT 9999
78819: ST_TO_ADDR
// for i := 0 to 5 do
78820: LD_ADDR_VAR 0 6
78824: PUSH
78825: DOUBLE
78826: LD_INT 0
78828: DEC
78829: ST_TO_ADDR
78830: LD_INT 5
78832: PUSH
78833: FOR_TO
78834: IFFALSE 78977
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78836: LD_ADDR_VAR 0 7
78840: PUSH
78841: LD_VAR 0 1
78845: PPUSH
78846: LD_VAR 0 6
78850: PPUSH
78851: LD_VAR 0 11
78855: PPUSH
78856: CALL_OW 272
78860: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78861: LD_ADDR_VAR 0 8
78865: PUSH
78866: LD_VAR 0 2
78870: PPUSH
78871: LD_VAR 0 6
78875: PPUSH
78876: LD_VAR 0 11
78880: PPUSH
78881: CALL_OW 273
78885: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78886: LD_VAR 0 7
78890: PPUSH
78891: LD_VAR 0 8
78895: PPUSH
78896: CALL_OW 488
78900: NOT
78901: IFFALSE 78905
// continue ;
78903: GO 78833
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78905: LD_ADDR_VAR 0 9
78909: PUSH
78910: LD_VAR 0 12
78914: PUSH
78915: LD_INT 1
78917: ARRAY
78918: PPUSH
78919: LD_VAR 0 12
78923: PUSH
78924: LD_INT 2
78926: ARRAY
78927: PPUSH
78928: LD_VAR 0 7
78932: PPUSH
78933: LD_VAR 0 8
78937: PPUSH
78938: CALL_OW 298
78942: ST_TO_ADDR
// if tmp < distance then
78943: LD_VAR 0 9
78947: PUSH
78948: LD_VAR 0 10
78952: LESS
78953: IFFALSE 78975
// begin result := i ;
78955: LD_ADDR_VAR 0 5
78959: PUSH
78960: LD_VAR 0 6
78964: ST_TO_ADDR
// distance := tmp ;
78965: LD_ADDR_VAR 0 10
78969: PUSH
78970: LD_VAR 0 9
78974: ST_TO_ADDR
// end ; end ;
78975: GO 78833
78977: POP
78978: POP
// end ;
78979: LD_VAR 0 5
78983: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78984: LD_INT 0
78986: PPUSH
78987: PPUSH
// if not driver or not IsInUnit ( driver ) then
78988: LD_VAR 0 1
78992: NOT
78993: PUSH
78994: LD_VAR 0 1
78998: PPUSH
78999: CALL_OW 310
79003: NOT
79004: OR
79005: IFFALSE 79009
// exit ;
79007: GO 79099
// vehicle := IsInUnit ( driver ) ;
79009: LD_ADDR_VAR 0 3
79013: PUSH
79014: LD_VAR 0 1
79018: PPUSH
79019: CALL_OW 310
79023: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79024: LD_VAR 0 1
79028: PPUSH
79029: LD_STRING \
79031: PUSH
79032: LD_INT 0
79034: PUSH
79035: LD_INT 0
79037: PUSH
79038: LD_INT 0
79040: PUSH
79041: LD_INT 0
79043: PUSH
79044: LD_INT 0
79046: PUSH
79047: LD_INT 0
79049: PUSH
79050: EMPTY
79051: LIST
79052: LIST
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: PUSH
79059: LD_STRING E
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: LD_INT 0
79067: PUSH
79068: LD_VAR 0 3
79072: PUSH
79073: LD_INT 0
79075: PUSH
79076: LD_INT 0
79078: PUSH
79079: LD_INT 0
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: LIST
79086: LIST
79087: LIST
79088: LIST
79089: LIST
79090: PUSH
79091: EMPTY
79092: LIST
79093: LIST
79094: PPUSH
79095: CALL_OW 446
// end ;
79099: LD_VAR 0 2
79103: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79104: LD_INT 0
79106: PPUSH
79107: PPUSH
// if not driver or not IsInUnit ( driver ) then
79108: LD_VAR 0 1
79112: NOT
79113: PUSH
79114: LD_VAR 0 1
79118: PPUSH
79119: CALL_OW 310
79123: NOT
79124: OR
79125: IFFALSE 79129
// exit ;
79127: GO 79219
// vehicle := IsInUnit ( driver ) ;
79129: LD_ADDR_VAR 0 3
79133: PUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL_OW 310
79143: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79144: LD_VAR 0 1
79148: PPUSH
79149: LD_STRING \
79151: PUSH
79152: LD_INT 0
79154: PUSH
79155: LD_INT 0
79157: PUSH
79158: LD_INT 0
79160: PUSH
79161: LD_INT 0
79163: PUSH
79164: LD_INT 0
79166: PUSH
79167: LD_INT 0
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: LIST
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: PUSH
79179: LD_STRING E
79181: PUSH
79182: LD_INT 0
79184: PUSH
79185: LD_INT 0
79187: PUSH
79188: LD_VAR 0 3
79192: PUSH
79193: LD_INT 0
79195: PUSH
79196: LD_INT 0
79198: PUSH
79199: LD_INT 0
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: LIST
79206: LIST
79207: LIST
79208: LIST
79209: LIST
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PPUSH
79215: CALL_OW 447
// end ;
79219: LD_VAR 0 2
79223: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79224: LD_INT 0
79226: PPUSH
79227: PPUSH
79228: PPUSH
// tmp := [ ] ;
79229: LD_ADDR_VAR 0 5
79233: PUSH
79234: EMPTY
79235: ST_TO_ADDR
// for i in units do
79236: LD_ADDR_VAR 0 4
79240: PUSH
79241: LD_VAR 0 1
79245: PUSH
79246: FOR_IN
79247: IFFALSE 79285
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79249: LD_ADDR_VAR 0 5
79253: PUSH
79254: LD_VAR 0 5
79258: PPUSH
79259: LD_VAR 0 5
79263: PUSH
79264: LD_INT 1
79266: PLUS
79267: PPUSH
79268: LD_VAR 0 4
79272: PPUSH
79273: CALL_OW 256
79277: PPUSH
79278: CALL_OW 2
79282: ST_TO_ADDR
79283: GO 79246
79285: POP
79286: POP
// if not tmp then
79287: LD_VAR 0 5
79291: NOT
79292: IFFALSE 79296
// exit ;
79294: GO 79344
// if asc then
79296: LD_VAR 0 2
79300: IFFALSE 79324
// result := SortListByListAsc ( units , tmp ) else
79302: LD_ADDR_VAR 0 3
79306: PUSH
79307: LD_VAR 0 1
79311: PPUSH
79312: LD_VAR 0 5
79316: PPUSH
79317: CALL_OW 76
79321: ST_TO_ADDR
79322: GO 79344
// result := SortListByListDesc ( units , tmp ) ;
79324: LD_ADDR_VAR 0 3
79328: PUSH
79329: LD_VAR 0 1
79333: PPUSH
79334: LD_VAR 0 5
79338: PPUSH
79339: CALL_OW 77
79343: ST_TO_ADDR
// end ;
79344: LD_VAR 0 3
79348: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79349: LD_INT 0
79351: PPUSH
79352: PPUSH
// task := GetTaskList ( mech ) ;
79353: LD_ADDR_VAR 0 4
79357: PUSH
79358: LD_VAR 0 1
79362: PPUSH
79363: CALL_OW 437
79367: ST_TO_ADDR
// if not task then
79368: LD_VAR 0 4
79372: NOT
79373: IFFALSE 79377
// exit ;
79375: GO 79419
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79377: LD_ADDR_VAR 0 3
79381: PUSH
79382: LD_VAR 0 4
79386: PUSH
79387: LD_INT 1
79389: ARRAY
79390: PUSH
79391: LD_INT 1
79393: ARRAY
79394: PUSH
79395: LD_STRING r
79397: EQUAL
79398: PUSH
79399: LD_VAR 0 4
79403: PUSH
79404: LD_INT 1
79406: ARRAY
79407: PUSH
79408: LD_INT 4
79410: ARRAY
79411: PUSH
79412: LD_VAR 0 2
79416: EQUAL
79417: AND
79418: ST_TO_ADDR
// end ;
79419: LD_VAR 0 3
79423: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79424: LD_INT 0
79426: PPUSH
// SetDir ( unit , d ) ;
79427: LD_VAR 0 1
79431: PPUSH
79432: LD_VAR 0 4
79436: PPUSH
79437: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79441: LD_VAR 0 1
79445: PPUSH
79446: LD_VAR 0 2
79450: PPUSH
79451: LD_VAR 0 3
79455: PPUSH
79456: LD_VAR 0 5
79460: PPUSH
79461: CALL_OW 48
// end ;
79465: LD_VAR 0 6
79469: RET
// export function ToNaturalNumber ( number ) ; begin
79470: LD_INT 0
79472: PPUSH
// result := number div 1 ;
79473: LD_ADDR_VAR 0 2
79477: PUSH
79478: LD_VAR 0 1
79482: PUSH
79483: LD_INT 1
79485: DIV
79486: ST_TO_ADDR
// if number < 0 then
79487: LD_VAR 0 1
79491: PUSH
79492: LD_INT 0
79494: LESS
79495: IFFALSE 79505
// result := 0 ;
79497: LD_ADDR_VAR 0 2
79501: PUSH
79502: LD_INT 0
79504: ST_TO_ADDR
// end ;
79505: LD_VAR 0 2
79509: RET
// export function SortByClass ( units , class ) ; var un ; begin
79510: LD_INT 0
79512: PPUSH
79513: PPUSH
// if not units or not class then
79514: LD_VAR 0 1
79518: NOT
79519: PUSH
79520: LD_VAR 0 2
79524: NOT
79525: OR
79526: IFFALSE 79530
// exit ;
79528: GO 79625
// result := [ ] ;
79530: LD_ADDR_VAR 0 3
79534: PUSH
79535: EMPTY
79536: ST_TO_ADDR
// for un in units do
79537: LD_ADDR_VAR 0 4
79541: PUSH
79542: LD_VAR 0 1
79546: PUSH
79547: FOR_IN
79548: IFFALSE 79623
// if GetClass ( un ) = class then
79550: LD_VAR 0 4
79554: PPUSH
79555: CALL_OW 257
79559: PUSH
79560: LD_VAR 0 2
79564: EQUAL
79565: IFFALSE 79592
// result := Insert ( result , 1 , un ) else
79567: LD_ADDR_VAR 0 3
79571: PUSH
79572: LD_VAR 0 3
79576: PPUSH
79577: LD_INT 1
79579: PPUSH
79580: LD_VAR 0 4
79584: PPUSH
79585: CALL_OW 2
79589: ST_TO_ADDR
79590: GO 79621
// result := Replace ( result , result + 1 , un ) ;
79592: LD_ADDR_VAR 0 3
79596: PUSH
79597: LD_VAR 0 3
79601: PPUSH
79602: LD_VAR 0 3
79606: PUSH
79607: LD_INT 1
79609: PLUS
79610: PPUSH
79611: LD_VAR 0 4
79615: PPUSH
79616: CALL_OW 1
79620: ST_TO_ADDR
79621: GO 79547
79623: POP
79624: POP
// end ;
79625: LD_VAR 0 3
79629: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79630: LD_INT 0
79632: PPUSH
79633: PPUSH
79634: PPUSH
79635: PPUSH
79636: PPUSH
79637: PPUSH
79638: PPUSH
// result := [ ] ;
79639: LD_ADDR_VAR 0 4
79643: PUSH
79644: EMPTY
79645: ST_TO_ADDR
// if x - r < 0 then
79646: LD_VAR 0 1
79650: PUSH
79651: LD_VAR 0 3
79655: MINUS
79656: PUSH
79657: LD_INT 0
79659: LESS
79660: IFFALSE 79672
// min_x := 0 else
79662: LD_ADDR_VAR 0 8
79666: PUSH
79667: LD_INT 0
79669: ST_TO_ADDR
79670: GO 79688
// min_x := x - r ;
79672: LD_ADDR_VAR 0 8
79676: PUSH
79677: LD_VAR 0 1
79681: PUSH
79682: LD_VAR 0 3
79686: MINUS
79687: ST_TO_ADDR
// if y - r < 0 then
79688: LD_VAR 0 2
79692: PUSH
79693: LD_VAR 0 3
79697: MINUS
79698: PUSH
79699: LD_INT 0
79701: LESS
79702: IFFALSE 79714
// min_y := 0 else
79704: LD_ADDR_VAR 0 7
79708: PUSH
79709: LD_INT 0
79711: ST_TO_ADDR
79712: GO 79730
// min_y := y - r ;
79714: LD_ADDR_VAR 0 7
79718: PUSH
79719: LD_VAR 0 2
79723: PUSH
79724: LD_VAR 0 3
79728: MINUS
79729: ST_TO_ADDR
// max_x := x + r ;
79730: LD_ADDR_VAR 0 9
79734: PUSH
79735: LD_VAR 0 1
79739: PUSH
79740: LD_VAR 0 3
79744: PLUS
79745: ST_TO_ADDR
// max_y := y + r ;
79746: LD_ADDR_VAR 0 10
79750: PUSH
79751: LD_VAR 0 2
79755: PUSH
79756: LD_VAR 0 3
79760: PLUS
79761: ST_TO_ADDR
// for _x = min_x to max_x do
79762: LD_ADDR_VAR 0 5
79766: PUSH
79767: DOUBLE
79768: LD_VAR 0 8
79772: DEC
79773: ST_TO_ADDR
79774: LD_VAR 0 9
79778: PUSH
79779: FOR_TO
79780: IFFALSE 79881
// for _y = min_y to max_y do
79782: LD_ADDR_VAR 0 6
79786: PUSH
79787: DOUBLE
79788: LD_VAR 0 7
79792: DEC
79793: ST_TO_ADDR
79794: LD_VAR 0 10
79798: PUSH
79799: FOR_TO
79800: IFFALSE 79877
// begin if not ValidHex ( _x , _y ) then
79802: LD_VAR 0 5
79806: PPUSH
79807: LD_VAR 0 6
79811: PPUSH
79812: CALL_OW 488
79816: NOT
79817: IFFALSE 79821
// continue ;
79819: GO 79799
// if GetResourceTypeXY ( _x , _y ) then
79821: LD_VAR 0 5
79825: PPUSH
79826: LD_VAR 0 6
79830: PPUSH
79831: CALL_OW 283
79835: IFFALSE 79875
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79837: LD_ADDR_VAR 0 4
79841: PUSH
79842: LD_VAR 0 4
79846: PPUSH
79847: LD_VAR 0 4
79851: PUSH
79852: LD_INT 1
79854: PLUS
79855: PPUSH
79856: LD_VAR 0 5
79860: PUSH
79861: LD_VAR 0 6
79865: PUSH
79866: EMPTY
79867: LIST
79868: LIST
79869: PPUSH
79870: CALL_OW 1
79874: ST_TO_ADDR
// end ;
79875: GO 79799
79877: POP
79878: POP
79879: GO 79779
79881: POP
79882: POP
// end ;
79883: LD_VAR 0 4
79887: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79888: LD_INT 0
79890: PPUSH
79891: PPUSH
79892: PPUSH
79893: PPUSH
79894: PPUSH
79895: PPUSH
79896: PPUSH
79897: PPUSH
// if not units then
79898: LD_VAR 0 1
79902: NOT
79903: IFFALSE 79907
// exit ;
79905: GO 80431
// result := UnitFilter ( units , [ f_ok ] ) ;
79907: LD_ADDR_VAR 0 3
79911: PUSH
79912: LD_VAR 0 1
79916: PPUSH
79917: LD_INT 50
79919: PUSH
79920: EMPTY
79921: LIST
79922: PPUSH
79923: CALL_OW 72
79927: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79928: LD_ADDR_VAR 0 8
79932: PUSH
79933: LD_VAR 0 1
79937: PUSH
79938: LD_INT 1
79940: ARRAY
79941: PPUSH
79942: CALL_OW 255
79946: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79947: LD_ADDR_VAR 0 10
79951: PUSH
79952: LD_INT 29
79954: PUSH
79955: LD_INT 91
79957: PUSH
79958: LD_INT 49
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: LIST
79965: ST_TO_ADDR
// if not result then
79966: LD_VAR 0 3
79970: NOT
79971: IFFALSE 79975
// exit ;
79973: GO 80431
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79975: LD_ADDR_VAR 0 5
79979: PUSH
79980: LD_INT 81
79982: PUSH
79983: LD_VAR 0 8
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: PPUSH
79992: CALL_OW 69
79996: ST_TO_ADDR
// for i in result do
79997: LD_ADDR_VAR 0 4
80001: PUSH
80002: LD_VAR 0 3
80006: PUSH
80007: FOR_IN
80008: IFFALSE 80429
// begin tag := GetTag ( i ) + 1 ;
80010: LD_ADDR_VAR 0 9
80014: PUSH
80015: LD_VAR 0 4
80019: PPUSH
80020: CALL_OW 110
80024: PUSH
80025: LD_INT 1
80027: PLUS
80028: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80029: LD_ADDR_VAR 0 7
80033: PUSH
80034: LD_VAR 0 4
80038: PPUSH
80039: CALL_OW 250
80043: PPUSH
80044: LD_VAR 0 4
80048: PPUSH
80049: CALL_OW 251
80053: PPUSH
80054: LD_INT 6
80056: PPUSH
80057: CALL 79630 0 3
80061: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80062: LD_VAR 0 4
80066: PPUSH
80067: CALL_OW 247
80071: PUSH
80072: LD_INT 2
80074: EQUAL
80075: PUSH
80076: LD_VAR 0 7
80080: AND
80081: PUSH
80082: LD_VAR 0 4
80086: PPUSH
80087: CALL_OW 264
80091: PUSH
80092: LD_VAR 0 10
80096: IN
80097: NOT
80098: AND
80099: IFFALSE 80138
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80101: LD_VAR 0 4
80105: PPUSH
80106: LD_VAR 0 7
80110: PUSH
80111: LD_INT 1
80113: ARRAY
80114: PUSH
80115: LD_INT 1
80117: ARRAY
80118: PPUSH
80119: LD_VAR 0 7
80123: PUSH
80124: LD_INT 1
80126: ARRAY
80127: PUSH
80128: LD_INT 2
80130: ARRAY
80131: PPUSH
80132: CALL_OW 116
80136: GO 80427
// if path > tag then
80138: LD_VAR 0 2
80142: PUSH
80143: LD_VAR 0 9
80147: GREATER
80148: IFFALSE 80356
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80150: LD_ADDR_VAR 0 6
80154: PUSH
80155: LD_VAR 0 5
80159: PPUSH
80160: LD_INT 91
80162: PUSH
80163: LD_VAR 0 4
80167: PUSH
80168: LD_INT 8
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: LIST
80175: PPUSH
80176: CALL_OW 72
80180: ST_TO_ADDR
// if nearEnemy then
80181: LD_VAR 0 6
80185: IFFALSE 80254
// begin if GetWeapon ( i ) = ru_time_lapser then
80187: LD_VAR 0 4
80191: PPUSH
80192: CALL_OW 264
80196: PUSH
80197: LD_INT 49
80199: EQUAL
80200: IFFALSE 80228
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80202: LD_VAR 0 4
80206: PPUSH
80207: LD_VAR 0 6
80211: PPUSH
80212: LD_VAR 0 4
80216: PPUSH
80217: CALL_OW 74
80221: PPUSH
80222: CALL_OW 112
80226: GO 80252
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80228: LD_VAR 0 4
80232: PPUSH
80233: LD_VAR 0 6
80237: PPUSH
80238: LD_VAR 0 4
80242: PPUSH
80243: CALL_OW 74
80247: PPUSH
80248: CALL_OW 115
// end else
80252: GO 80354
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80254: LD_VAR 0 4
80258: PPUSH
80259: LD_VAR 0 2
80263: PUSH
80264: LD_VAR 0 9
80268: ARRAY
80269: PUSH
80270: LD_INT 1
80272: ARRAY
80273: PPUSH
80274: LD_VAR 0 2
80278: PUSH
80279: LD_VAR 0 9
80283: ARRAY
80284: PUSH
80285: LD_INT 2
80287: ARRAY
80288: PPUSH
80289: CALL_OW 297
80293: PUSH
80294: LD_INT 6
80296: GREATER
80297: IFFALSE 80340
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80299: LD_VAR 0 4
80303: PPUSH
80304: LD_VAR 0 2
80308: PUSH
80309: LD_VAR 0 9
80313: ARRAY
80314: PUSH
80315: LD_INT 1
80317: ARRAY
80318: PPUSH
80319: LD_VAR 0 2
80323: PUSH
80324: LD_VAR 0 9
80328: ARRAY
80329: PUSH
80330: LD_INT 2
80332: ARRAY
80333: PPUSH
80334: CALL_OW 114
80338: GO 80354
// SetTag ( i , tag ) ;
80340: LD_VAR 0 4
80344: PPUSH
80345: LD_VAR 0 9
80349: PPUSH
80350: CALL_OW 109
// end else
80354: GO 80427
// if enemy then
80356: LD_VAR 0 5
80360: IFFALSE 80427
// begin if GetWeapon ( i ) = ru_time_lapser then
80362: LD_VAR 0 4
80366: PPUSH
80367: CALL_OW 264
80371: PUSH
80372: LD_INT 49
80374: EQUAL
80375: IFFALSE 80403
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80377: LD_VAR 0 4
80381: PPUSH
80382: LD_VAR 0 5
80386: PPUSH
80387: LD_VAR 0 4
80391: PPUSH
80392: CALL_OW 74
80396: PPUSH
80397: CALL_OW 112
80401: GO 80427
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80403: LD_VAR 0 4
80407: PPUSH
80408: LD_VAR 0 5
80412: PPUSH
80413: LD_VAR 0 4
80417: PPUSH
80418: CALL_OW 74
80422: PPUSH
80423: CALL_OW 115
// end ; end ;
80427: GO 80007
80429: POP
80430: POP
// end ;
80431: LD_VAR 0 3
80435: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80436: LD_INT 0
80438: PPUSH
80439: PPUSH
80440: PPUSH
// if not unit or IsInUnit ( unit ) then
80441: LD_VAR 0 1
80445: NOT
80446: PUSH
80447: LD_VAR 0 1
80451: PPUSH
80452: CALL_OW 310
80456: OR
80457: IFFALSE 80461
// exit ;
80459: GO 80552
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80461: LD_ADDR_VAR 0 4
80465: PUSH
80466: LD_VAR 0 1
80470: PPUSH
80471: CALL_OW 250
80475: PPUSH
80476: LD_VAR 0 2
80480: PPUSH
80481: LD_INT 1
80483: PPUSH
80484: CALL_OW 272
80488: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80489: LD_ADDR_VAR 0 5
80493: PUSH
80494: LD_VAR 0 1
80498: PPUSH
80499: CALL_OW 251
80503: PPUSH
80504: LD_VAR 0 2
80508: PPUSH
80509: LD_INT 1
80511: PPUSH
80512: CALL_OW 273
80516: ST_TO_ADDR
// if ValidHex ( x , y ) then
80517: LD_VAR 0 4
80521: PPUSH
80522: LD_VAR 0 5
80526: PPUSH
80527: CALL_OW 488
80531: IFFALSE 80552
// ComTurnXY ( unit , x , y ) ;
80533: LD_VAR 0 1
80537: PPUSH
80538: LD_VAR 0 4
80542: PPUSH
80543: LD_VAR 0 5
80547: PPUSH
80548: CALL_OW 118
// end ;
80552: LD_VAR 0 3
80556: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80557: LD_INT 0
80559: PPUSH
80560: PPUSH
// result := false ;
80561: LD_ADDR_VAR 0 3
80565: PUSH
80566: LD_INT 0
80568: ST_TO_ADDR
// if not units then
80569: LD_VAR 0 2
80573: NOT
80574: IFFALSE 80578
// exit ;
80576: GO 80623
// for i in units do
80578: LD_ADDR_VAR 0 4
80582: PUSH
80583: LD_VAR 0 2
80587: PUSH
80588: FOR_IN
80589: IFFALSE 80621
// if See ( side , i ) then
80591: LD_VAR 0 1
80595: PPUSH
80596: LD_VAR 0 4
80600: PPUSH
80601: CALL_OW 292
80605: IFFALSE 80619
// begin result := true ;
80607: LD_ADDR_VAR 0 3
80611: PUSH
80612: LD_INT 1
80614: ST_TO_ADDR
// exit ;
80615: POP
80616: POP
80617: GO 80623
// end ;
80619: GO 80588
80621: POP
80622: POP
// end ;
80623: LD_VAR 0 3
80627: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80628: LD_INT 0
80630: PPUSH
80631: PPUSH
80632: PPUSH
80633: PPUSH
// if not unit or not points then
80634: LD_VAR 0 1
80638: NOT
80639: PUSH
80640: LD_VAR 0 2
80644: NOT
80645: OR
80646: IFFALSE 80650
// exit ;
80648: GO 80740
// dist := 99999 ;
80650: LD_ADDR_VAR 0 5
80654: PUSH
80655: LD_INT 99999
80657: ST_TO_ADDR
// for i in points do
80658: LD_ADDR_VAR 0 4
80662: PUSH
80663: LD_VAR 0 2
80667: PUSH
80668: FOR_IN
80669: IFFALSE 80738
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80671: LD_ADDR_VAR 0 6
80675: PUSH
80676: LD_VAR 0 1
80680: PPUSH
80681: LD_VAR 0 4
80685: PUSH
80686: LD_INT 1
80688: ARRAY
80689: PPUSH
80690: LD_VAR 0 4
80694: PUSH
80695: LD_INT 2
80697: ARRAY
80698: PPUSH
80699: CALL_OW 297
80703: ST_TO_ADDR
// if tmpDist < dist then
80704: LD_VAR 0 6
80708: PUSH
80709: LD_VAR 0 5
80713: LESS
80714: IFFALSE 80736
// begin result := i ;
80716: LD_ADDR_VAR 0 3
80720: PUSH
80721: LD_VAR 0 4
80725: ST_TO_ADDR
// dist := tmpDist ;
80726: LD_ADDR_VAR 0 5
80730: PUSH
80731: LD_VAR 0 6
80735: ST_TO_ADDR
// end ; end ;
80736: GO 80668
80738: POP
80739: POP
// end ;
80740: LD_VAR 0 3
80744: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80745: LD_INT 0
80747: PPUSH
// uc_side := side ;
80748: LD_ADDR_OWVAR 20
80752: PUSH
80753: LD_VAR 0 1
80757: ST_TO_ADDR
// uc_nation := 3 ;
80758: LD_ADDR_OWVAR 21
80762: PUSH
80763: LD_INT 3
80765: ST_TO_ADDR
// vc_chassis := 25 ;
80766: LD_ADDR_OWVAR 37
80770: PUSH
80771: LD_INT 25
80773: ST_TO_ADDR
// vc_engine := engine_siberite ;
80774: LD_ADDR_OWVAR 39
80778: PUSH
80779: LD_INT 3
80781: ST_TO_ADDR
// vc_control := control_computer ;
80782: LD_ADDR_OWVAR 38
80786: PUSH
80787: LD_INT 3
80789: ST_TO_ADDR
// vc_weapon := 59 ;
80790: LD_ADDR_OWVAR 40
80794: PUSH
80795: LD_INT 59
80797: ST_TO_ADDR
// result := CreateVehicle ;
80798: LD_ADDR_VAR 0 5
80802: PUSH
80803: CALL_OW 45
80807: ST_TO_ADDR
// SetDir ( result , d ) ;
80808: LD_VAR 0 5
80812: PPUSH
80813: LD_VAR 0 4
80817: PPUSH
80818: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80822: LD_VAR 0 5
80826: PPUSH
80827: LD_VAR 0 2
80831: PPUSH
80832: LD_VAR 0 3
80836: PPUSH
80837: LD_INT 0
80839: PPUSH
80840: CALL_OW 48
// end ;
80844: LD_VAR 0 5
80848: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80849: LD_INT 0
80851: PPUSH
80852: PPUSH
80853: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80854: LD_ADDR_VAR 0 2
80858: PUSH
80859: LD_INT 0
80861: PUSH
80862: LD_INT 0
80864: PUSH
80865: LD_INT 0
80867: PUSH
80868: LD_INT 0
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: LIST
80875: LIST
80876: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80877: LD_VAR 0 1
80881: NOT
80882: PUSH
80883: LD_VAR 0 1
80887: PPUSH
80888: CALL_OW 264
80892: PUSH
80893: LD_INT 12
80895: PUSH
80896: LD_INT 51
80898: PUSH
80899: LD_INT 32
80901: PUSH
80902: LD_INT 89
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: LIST
80909: LIST
80910: IN
80911: NOT
80912: OR
80913: IFFALSE 80917
// exit ;
80915: GO 81015
// for i := 1 to 3 do
80917: LD_ADDR_VAR 0 3
80921: PUSH
80922: DOUBLE
80923: LD_INT 1
80925: DEC
80926: ST_TO_ADDR
80927: LD_INT 3
80929: PUSH
80930: FOR_TO
80931: IFFALSE 81013
// begin tmp := GetCargo ( cargo , i ) ;
80933: LD_ADDR_VAR 0 4
80937: PUSH
80938: LD_VAR 0 1
80942: PPUSH
80943: LD_VAR 0 3
80947: PPUSH
80948: CALL_OW 289
80952: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80953: LD_ADDR_VAR 0 2
80957: PUSH
80958: LD_VAR 0 2
80962: PPUSH
80963: LD_VAR 0 3
80967: PPUSH
80968: LD_VAR 0 4
80972: PPUSH
80973: CALL_OW 1
80977: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80978: LD_ADDR_VAR 0 2
80982: PUSH
80983: LD_VAR 0 2
80987: PPUSH
80988: LD_INT 4
80990: PPUSH
80991: LD_VAR 0 2
80995: PUSH
80996: LD_INT 4
80998: ARRAY
80999: PUSH
81000: LD_VAR 0 4
81004: PLUS
81005: PPUSH
81006: CALL_OW 1
81010: ST_TO_ADDR
// end ;
81011: GO 80930
81013: POP
81014: POP
// end ;
81015: LD_VAR 0 2
81019: RET
// export function Length ( array ) ; begin
81020: LD_INT 0
81022: PPUSH
// result := array + 0 ;
81023: LD_ADDR_VAR 0 2
81027: PUSH
81028: LD_VAR 0 1
81032: PUSH
81033: LD_INT 0
81035: PLUS
81036: ST_TO_ADDR
// end ;
81037: LD_VAR 0 2
81041: RET
// export function PrepareArray ( array ) ; begin
81042: LD_INT 0
81044: PPUSH
// result := array diff 0 ;
81045: LD_ADDR_VAR 0 2
81049: PUSH
81050: LD_VAR 0 1
81054: PUSH
81055: LD_INT 0
81057: DIFF
81058: ST_TO_ADDR
// if not result [ 1 ] then
81059: LD_VAR 0 2
81063: PUSH
81064: LD_INT 1
81066: ARRAY
81067: NOT
81068: IFFALSE 81088
// result := Delete ( result , 1 ) ;
81070: LD_ADDR_VAR 0 2
81074: PUSH
81075: LD_VAR 0 2
81079: PPUSH
81080: LD_INT 1
81082: PPUSH
81083: CALL_OW 3
81087: ST_TO_ADDR
// end ;
81088: LD_VAR 0 2
81092: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81093: LD_INT 0
81095: PPUSH
81096: PPUSH
81097: PPUSH
81098: PPUSH
// sibRocketRange := 25 ;
81099: LD_ADDR_VAR 0 6
81103: PUSH
81104: LD_INT 25
81106: ST_TO_ADDR
// result := false ;
81107: LD_ADDR_VAR 0 4
81111: PUSH
81112: LD_INT 0
81114: ST_TO_ADDR
// for i := 0 to 5 do
81115: LD_ADDR_VAR 0 5
81119: PUSH
81120: DOUBLE
81121: LD_INT 0
81123: DEC
81124: ST_TO_ADDR
81125: LD_INT 5
81127: PUSH
81128: FOR_TO
81129: IFFALSE 81196
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81131: LD_VAR 0 1
81135: PPUSH
81136: LD_VAR 0 5
81140: PPUSH
81141: LD_VAR 0 6
81145: PPUSH
81146: CALL_OW 272
81150: PPUSH
81151: LD_VAR 0 2
81155: PPUSH
81156: LD_VAR 0 5
81160: PPUSH
81161: LD_VAR 0 6
81165: PPUSH
81166: CALL_OW 273
81170: PPUSH
81171: LD_VAR 0 3
81175: PPUSH
81176: CALL_OW 309
81180: IFFALSE 81194
// begin result := true ;
81182: LD_ADDR_VAR 0 4
81186: PUSH
81187: LD_INT 1
81189: ST_TO_ADDR
// exit ;
81190: POP
81191: POP
81192: GO 81198
// end ;
81194: GO 81128
81196: POP
81197: POP
// end ;
81198: LD_VAR 0 4
81202: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81203: LD_INT 0
81205: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81206: LD_VAR 0 1
81210: PPUSH
81211: LD_VAR 0 2
81215: PPUSH
81216: LD_INT 0
81218: PPUSH
81219: LD_INT 0
81221: PPUSH
81222: LD_INT 1
81224: PPUSH
81225: LD_INT 0
81227: PPUSH
81228: CALL_OW 587
// end ; end_of_file
81232: LD_VAR 0 3
81236: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81237: LD_VAR 0 1
81241: PUSH
81242: LD_INT 200
81244: DOUBLE
81245: GREATEREQUAL
81246: IFFALSE 81254
81248: LD_INT 299
81250: DOUBLE
81251: LESSEQUAL
81252: IFTRUE 81256
81254: GO 81288
81256: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81257: LD_VAR 0 1
81261: PPUSH
81262: LD_VAR 0 2
81266: PPUSH
81267: LD_VAR 0 3
81271: PPUSH
81272: LD_VAR 0 4
81276: PPUSH
81277: LD_VAR 0 5
81281: PPUSH
81282: CALL 35903 0 5
81286: GO 81365
81288: LD_INT 300
81290: DOUBLE
81291: GREATEREQUAL
81292: IFFALSE 81300
81294: LD_INT 399
81296: DOUBLE
81297: LESSEQUAL
81298: IFTRUE 81302
81300: GO 81364
81302: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81303: LD_VAR 0 1
81307: PPUSH
81308: LD_VAR 0 2
81312: PPUSH
81313: LD_VAR 0 3
81317: PPUSH
81318: LD_VAR 0 4
81322: PPUSH
81323: LD_VAR 0 5
81327: PPUSH
81328: LD_VAR 0 6
81332: PPUSH
81333: LD_VAR 0 7
81337: PPUSH
81338: LD_VAR 0 8
81342: PPUSH
81343: LD_VAR 0 9
81347: PPUSH
81348: LD_VAR 0 10
81352: PPUSH
81353: LD_VAR 0 11
81357: PPUSH
81358: CALL 32236 0 11
81362: GO 81365
81364: POP
// end ;
81365: PPOPN 11
81367: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81368: LD_VAR 0 1
81372: PPUSH
81373: LD_VAR 0 2
81377: PPUSH
81378: LD_VAR 0 3
81382: PPUSH
81383: LD_VAR 0 4
81387: PPUSH
81388: LD_VAR 0 5
81392: PPUSH
81393: CALL 35639 0 5
// end ; end_of_file
81397: PPOPN 5
81399: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81400: LD_VAR 0 1
81404: PPUSH
81405: LD_VAR 0 2
81409: PPUSH
81410: LD_VAR 0 3
81414: PPUSH
81415: LD_VAR 0 4
81419: PPUSH
81420: LD_VAR 0 5
81424: PPUSH
81425: LD_VAR 0 6
81429: PPUSH
81430: CALL 19888 0 6
// end ;
81434: PPOPN 6
81436: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81437: LD_INT 0
81439: PPUSH
// begin if not units then
81440: LD_VAR 0 1
81444: NOT
81445: IFFALSE 81449
// exit ;
81447: GO 81449
// end ;
81449: PPOPN 7
81451: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81452: CALL 19792 0 0
// end ;
81456: PPOPN 1
81458: END
