// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export reliefOfCommand ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 74 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 33
// begin Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// FogOff ( 1 ) ;
  26: LD_INT 1
  28: PPUSH
  29: CALL_OW 344
// end ; PrepareDifficulty ;
  33: CALL 4706 0 0
// PrepareRussianBase ;
  37: CALL 2968 0 0
// PrepareRussianCommander ;
  41: CALL 2919 0 0
// PrepareHeroes ;
  45: CALL 481 0 0
// SetBName ( ambdept0 , gamma ) ;
  49: LD_INT 4
  51: PPUSH
  52: LD_STRING gamma
  54: PPUSH
  55: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  59: LD_INT 21
  61: PPUSH
  62: LD_STRING fyodor
  64: PPUSH
  65: CALL_OW 500
// Action ;
  69: CALL 7783 0 0
// end ;
  73: END
// function Init ; begin
  74: LD_INT 0
  76: PPUSH
// mission_prefix := 04_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 04_
  84: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  85: LD_ADDR_EXP 50
  89: PUSH
  90: LD_STRING 03_
  92: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  93: LD_ADDR_EXP 16
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
 101: LD_ADDR_EXP 17
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 109: LD_ADDR_EXP 20
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// debugMode := 0 ;
 117: LD_ADDR_EXP 45
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 125: LD_ADDR_EXP 42
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// bonusAvalaible := 0 ;
 133: LD_ADDR_EXP 44
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// firstRussianAttack := 0 ;
 141: LD_ADDR_EXP 23
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// saveDonaldson := 0 ;
 149: LD_ADDR_EXP 24
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frankScoutBase := 0 ;
 157: LD_ADDR_EXP 25
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// harrAnswer := 0 ;
 165: LD_ADDR_EXP 26
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 173: LD_ADDR_EXP 27
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 181: LD_ADDR_EXP 28
 185: PUSH
 186: LD_INT 18900
 188: ST_TO_ADDR
// timerStatus := 0 ;
 189: LD_ADDR_EXP 29
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// startTimer := 0 ;
 197: LD_ADDR_EXP 30
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// factoryDialog := 0 ;
 205: LD_ADDR_EXP 31
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// bunkerDialog := 0 ;
 213: LD_ADDR_EXP 32
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// energyVDialog := 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildOil := 0 ;
 229: LD_ADDR_EXP 34
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// buildPower := 0 ;
 237: LD_ADDR_EXP 35
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 36
 249: PUSH
 250: LD_INT 14
 252: PUSH
 253: LD_INT 12
 255: PUSH
 256: LD_INT 11
 258: PUSH
 259: LD_INT 10
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// AIEnable := 1 ;
 274: LD_ADDR_EXP 37
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 282: LD_ADDR_EXP 41
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// lostCounter := 0 ;
 290: LD_ADDR_EXP 38
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// honor := true ;
 298: LD_ADDR_EXP 39
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// reliefOfCommand := false ;
 306: LD_ADDR_EXP 48
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// escapeAvalaible = 0 ;
 314: LD_ADDR_EXP 40
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// specAttack := false ;
 322: LD_ADDR_EXP 47
 326: PUSH
 327: LD_INT 0
 329: ST_TO_ADDR
// ruMobile := [ ] ;
 330: LD_ADDR_EXP 46
 334: PUSH
 335: EMPTY
 336: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 337: LD_ADDR_EXP 43
 341: PUSH
 342: LD_INT 3
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: LD_INT 5
 350: PUSH
 351: LD_INT 6
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: LD_OWVAR 67
 364: ARRAY
 365: ST_TO_ADDR
// end ;
 366: LD_VAR 0 1
 370: RET
// every 0 0$1 trigger debugMode do var i ;
 371: LD_EXP 45
 375: IFFALSE 437
 377: GO 379
 379: DISABLE
 380: LD_INT 0
 382: PPUSH
// begin enable ;
 383: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 384: LD_ADDR_VAR 0 1
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 21
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: PUSH
 418: FOR_IN
 419: IFFALSE 435
// SetLives ( i , 1000 ) ;
 421: LD_VAR 0 1
 425: PPUSH
 426: LD_INT 1000
 428: PPUSH
 429: CALL_OW 234
 433: GO 418
 435: POP
 436: POP
// end ;
 437: PPOPN 1
 439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 440: LD_INT 22
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 34
 452: PUSH
 453: LD_INT 44
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PPUSH
 464: CALL_OW 69
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 473: LD_STRING ACH_GUN
 475: PPUSH
 476: CALL_OW 543
 480: END
// export function PrepareHeroes ; var i , tmp ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
 485: PPUSH
// uc_side = 1 ;
 486: LD_ADDR_OWVAR 20
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// uc_nation = 1 ;
 494: LD_ADDR_OWVAR 21
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 502: LD_ADDR_EXP 1
 506: PUSH
 507: LD_STRING JMM
 509: PPUSH
 510: LD_EXP 45
 514: NOT
 515: PPUSH
 516: LD_EXP 50
 520: PPUSH
 521: CALL 42236 0 3
 525: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 526: LD_ADDR_EXP 4
 530: PUSH
 531: LD_STRING Lisa
 533: PPUSH
 534: LD_EXP 45
 538: NOT
 539: PPUSH
 540: LD_EXP 50
 544: PPUSH
 545: CALL 42236 0 3
 549: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 550: LD_ADDR_EXP 7
 554: PUSH
 555: LD_STRING Brown
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: LD_EXP 50
 565: PPUSH
 566: CALL 42236 0 3
 570: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 8
 575: PUSH
 576: LD_STRING Dickens
 578: PPUSH
 579: LD_INT 0
 581: PPUSH
 582: LD_EXP 50
 586: PPUSH
 587: CALL 42236 0 3
 591: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 592: LD_ADDR_EXP 9
 596: PUSH
 597: LD_STRING Woodruff
 599: PPUSH
 600: LD_INT 0
 602: PPUSH
 603: LD_EXP 50
 607: PPUSH
 608: CALL 42236 0 3
 612: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 613: LD_ADDR_EXP 12
 617: PUSH
 618: LD_STRING Campell
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: LD_EXP 50
 628: PPUSH
 629: CALL 42236 0 3
 633: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 10
 638: PUSH
 639: LD_STRING Knight
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: LD_EXP 50
 649: PPUSH
 650: CALL 42236 0 3
 654: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 655: LD_ADDR_EXP 11
 659: PUSH
 660: LD_STRING Claptopn
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: LD_EXP 50
 670: PPUSH
 671: CALL 42236 0 3
 675: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 676: LD_ADDR_EXP 14
 680: PUSH
 681: LD_STRING Harisson
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_EXP 50
 691: PPUSH
 692: CALL 42236 0 3
 696: ST_TO_ADDR
// if not Lisa then
 697: LD_EXP 4
 701: NOT
 702: IFFALSE 725
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 704: LD_ADDR_EXP 2
 708: PUSH
 709: LD_STRING Bobby
 711: PPUSH
 712: LD_INT 1
 714: PPUSH
 715: LD_EXP 50
 719: PPUSH
 720: CALL 42236 0 3
 724: ST_TO_ADDR
// if not Lisa and not Bobby then
 725: LD_EXP 4
 729: NOT
 730: IFFALSE 739
 732: PUSH
 733: LD_EXP 2
 737: NOT
 738: AND
 739: IFFALSE 762
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 741: LD_ADDR_EXP 3
 745: PUSH
 746: LD_STRING Cyrus
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_EXP 50
 756: PPUSH
 757: CALL 42236 0 3
 761: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 762: LD_EXP 4
 766: NOT
 767: IFFALSE 776
 769: PUSH
 770: LD_EXP 2
 774: NOT
 775: AND
 776: IFFALSE 785
 778: PUSH
 779: LD_EXP 3
 783: NOT
 784: AND
 785: IFFALSE 884
// begin tmp = CreateCharacterSet ( 03_others ) ;
 787: LD_ADDR_VAR 0 3
 791: PUSH
 792: LD_STRING 03_others
 794: PPUSH
 795: CALL_OW 31
 799: ST_TO_ADDR
// if tmp then
 800: LD_VAR 0 3
 804: IFFALSE 861
// begin RandomBeforeMission = tmp [ 1 ] ;
 806: LD_ADDR_EXP 6
 810: PUSH
 811: LD_VAR 0 3
 815: PUSH
 816: LD_INT 1
 818: ARRAY
 819: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 820: LD_STRING 03_others
 822: PPUSH
 823: CALL_OW 40
// if tmp > 1 then
 827: LD_VAR 0 3
 831: PUSH
 832: LD_INT 1
 834: GREATER
 835: IFFALSE 859
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 837: LD_VAR 0 3
 841: PUSH
 842: LD_VAR 0 3
 846: PUSH
 847: LD_INT 1
 849: ARRAY
 850: DIFF
 851: PPUSH
 852: LD_STRING 03_others
 854: PPUSH
 855: CALL_OW 38
// end else
 859: GO 884
// begin PrepareHuman ( false , 1 , 3 ) ;
 861: LD_INT 0
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 3
 869: PPUSH
 870: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 874: LD_ADDR_EXP 6
 878: PUSH
 879: CALL_OW 44
 883: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 884: LD_ADDR_OWVAR 20
 888: PUSH
 889: LD_INT 4
 891: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 892: LD_ADDR_EXP 13
 896: PUSH
 897: LD_STRING Donaldson
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_EXP 50
 907: PPUSH
 908: CALL 42236 0 3
 912: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 913: LD_ADDR_EXP 5
 917: PUSH
 918: LD_STRING Frank
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_EXP 50
 928: PPUSH
 929: CALL 42236 0 3
 933: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 934: LD_EXP 1
 938: PPUSH
 939: LD_INT 32
 941: PPUSH
 942: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 946: LD_EXP 7
 950: PPUSH
 951: LD_INT 1
 953: PPUSH
 954: LD_INT 0
 956: PPUSH
 957: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 961: LD_EXP 7
 965: PPUSH
 966: LD_INT 32
 968: PPUSH
 969: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 973: LD_EXP 8
 977: PPUSH
 978: LD_INT 2
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 988: LD_EXP 9
 992: PPUSH
 993: LD_INT 2
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1003: LD_EXP 12
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1018: LD_EXP 10
1022: PPUSH
1023: LD_INT 2
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1033: LD_EXP 11
1037: PPUSH
1038: LD_INT 2
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1048: LD_EXP 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL_OW 49
// if Lisa = false then
1063: LD_EXP 4
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: IFFALSE 1088
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1073: LD_EXP 2
1077: PPUSH
1078: LD_INT 2
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 49
// if Lisa = false and Bobby = false then
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1108
1098: PUSH
1099: LD_EXP 2
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1125
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1110: LD_EXP 3
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1125: LD_EXP 4
1129: PUSH
1130: LD_INT 0
1132: EQUAL
1133: IFFALSE 1145
1135: PUSH
1136: LD_EXP 2
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: IFFALSE 1157
1147: PUSH
1148: LD_EXP 3
1152: PUSH
1153: LD_INT 0
1155: EQUAL
1156: AND
1157: IFFALSE 1174
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1159: LD_EXP 6
1163: PPUSH
1164: LD_INT 2
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: LD_VAR 0 1
1178: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1179: LD_INT 0
1181: PPUSH
1182: PPUSH
1183: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1184: LD_EXP 13
1188: PPUSH
1189: LD_INT 10
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// if Frank then
1199: LD_EXP 5
1203: IFFALSE 1220
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1205: LD_EXP 5
1209: PPUSH
1210: LD_INT 10
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 49
// uc_nation = 1 ;
1220: LD_ADDR_OWVAR 21
1224: PUSH
1225: LD_INT 1
1227: ST_TO_ADDR
// uc_side = 4 ;
1228: LD_ADDR_OWVAR 20
1232: PUSH
1233: LD_INT 4
1235: ST_TO_ADDR
// hc_class := 3 ;
1236: LD_ADDR_OWVAR 28
1240: PUSH
1241: LD_INT 3
1243: ST_TO_ADDR
// hc_sex := sex_male ;
1244: LD_ADDR_OWVAR 27
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1252: LD_ADDR_OWVAR 33
1256: PUSH
1257: LD_STRING SecondCharsGal
1259: ST_TO_ADDR
// hc_face_number := 53 ;
1260: LD_ADDR_OWVAR 34
1264: PUSH
1265: LD_INT 53
1267: ST_TO_ADDR
// hc_name := Freddie Warner ;
1268: LD_ADDR_OWVAR 26
1272: PUSH
1273: LD_STRING Freddie Warner
1275: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 8
1283: PUSH
1284: LD_INT 11
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
1291: LD_ADDR_OWVAR 30
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 0
1301: PUSH
1302: LD_INT 2
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1314: LD_ADDR_OWVAR 31
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: ST_TO_ADDR
// un = CreateHuman ;
1337: LD_ADDR_VAR 0 3
1341: PUSH
1342: CALL_OW 44
1346: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1347: LD_VAR 0 3
1351: PPUSH
1352: LD_INT 10
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 49
// hc_class := 1 ;
1362: LD_ADDR_OWVAR 28
1366: PUSH
1367: LD_INT 1
1369: ST_TO_ADDR
// hc_sex := sex_male ;
1370: LD_ADDR_OWVAR 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1378: LD_ADDR_OWVAR 33
1382: PUSH
1383: LD_STRING SecondCharsGal
1385: ST_TO_ADDR
// hc_face_number := 56 ;
1386: LD_ADDR_OWVAR 34
1390: PUSH
1391: LD_INT 56
1393: ST_TO_ADDR
// hc_name := Mel Brennan ;
1394: LD_ADDR_OWVAR 26
1398: PUSH
1399: LD_STRING Mel Brennan
1401: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1402: LD_ADDR_OWVAR 29
1406: PUSH
1407: LD_INT 12
1409: PUSH
1410: LD_INT 11
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
1417: LD_ADDR_OWVAR 30
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1440: LD_ADDR_OWVAR 31
1444: PUSH
1445: LD_INT 4
1447: PUSH
1448: LD_INT 1
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: ST_TO_ADDR
// un = CreateHuman ;
1463: LD_ADDR_VAR 0 3
1467: PUSH
1468: CALL_OW 44
1472: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1473: LD_VAR 0 3
1477: PPUSH
1478: LD_INT 10
1480: PPUSH
1481: LD_INT 0
1483: PPUSH
1484: CALL_OW 49
// hc_class := 1 ;
1488: LD_ADDR_OWVAR 28
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// hc_sex := sex_male ;
1496: LD_ADDR_OWVAR 27
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1504: LD_ADDR_OWVAR 33
1508: PUSH
1509: LD_STRING AmGalRemake
1511: ST_TO_ADDR
// hc_face_number := 5 ;
1512: LD_ADDR_OWVAR 34
1516: PUSH
1517: LD_INT 5
1519: ST_TO_ADDR
// hc_name := Bob Joplin ;
1520: LD_ADDR_OWVAR 26
1524: PUSH
1525: LD_STRING Bob Joplin
1527: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1528: LD_ADDR_OWVAR 29
1532: PUSH
1533: LD_INT 10
1535: PUSH
1536: LD_INT 11
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
1543: LD_ADDR_OWVAR 30
1547: PUSH
1548: LD_INT 0
1550: PUSH
1551: LD_INT 1
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1566: LD_ADDR_OWVAR 31
1570: PUSH
1571: LD_INT 3
1573: PUSH
1574: LD_INT 1
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 1
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: ST_TO_ADDR
// un = CreateHuman ;
1589: LD_ADDR_VAR 0 3
1593: PUSH
1594: CALL_OW 44
1598: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1599: LD_VAR 0 3
1603: PPUSH
1604: LD_INT 10
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// hc_class := 3 ;
1614: LD_ADDR_OWVAR 28
1618: PUSH
1619: LD_INT 3
1621: ST_TO_ADDR
// hc_sex := sex_female ;
1622: LD_ADDR_OWVAR 27
1626: PUSH
1627: LD_INT 2
1629: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1630: LD_ADDR_OWVAR 33
1634: PUSH
1635: LD_STRING AmGalRemake
1637: ST_TO_ADDR
// hc_face_number := 8 ;
1638: LD_ADDR_OWVAR 34
1642: PUSH
1643: LD_INT 8
1645: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1646: LD_ADDR_OWVAR 26
1650: PUSH
1651: LD_STRING Elizabeth Whitney
1653: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1654: LD_ADDR_OWVAR 29
1658: PUSH
1659: LD_INT 9
1661: PUSH
1662: LD_INT 11
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
1669: LD_ADDR_OWVAR 30
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 3
1682: PUSH
1683: LD_INT 0
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 4 , 1 ] ;
1692: LD_ADDR_OWVAR 31
1696: PUSH
1697: LD_INT 0
1699: PUSH
1700: LD_INT 1
1702: PUSH
1703: LD_INT 4
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: ST_TO_ADDR
// un = CreateHuman ;
1715: LD_ADDR_VAR 0 3
1719: PUSH
1720: CALL_OW 44
1724: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1725: LD_VAR 0 3
1729: PPUSH
1730: LD_INT 10
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 49
// InitHc ;
1740: CALL_OW 19
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
// uc_nation = 1 ;
1755: LD_ADDR_OWVAR 21
1759: PUSH
1760: LD_INT 1
1762: ST_TO_ADDR
// uc_side = 1 ;
1763: LD_ADDR_OWVAR 20
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1771: LD_ADDR_OWVAR 37
1775: PUSH
1776: LD_INT 2
1778: ST_TO_ADDR
// vc_engine := engine_combustion ;
1779: LD_ADDR_OWVAR 39
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// vc_control := control_manual ;
1787: LD_ADDR_OWVAR 38
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1795: LD_ADDR_OWVAR 41
1799: PUSH
1800: LD_INT 65
1802: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1803: LD_ADDR_OWVAR 40
1807: PUSH
1808: LD_INT 5
1810: PUSH
1811: LD_INT 3
1813: PUSH
1814: LD_INT 4
1816: PUSH
1817: LD_INT 4
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: PUSH
1826: LD_OWVAR 67
1830: ARRAY
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1842: LD_VAR 0 5
1846: PPUSH
1847: LD_INT 2
1849: PPUSH
1850: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1854: LD_INT 17
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL_OW 428
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: IFFALSE 1890
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1870: LD_VAR 0 5
1874: PPUSH
1875: LD_INT 17
1877: PPUSH
1878: LD_INT 4
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 48
1888: GO 1908
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1890: LD_VAR 0 5
1894: PPUSH
1895: LD_INT 23
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 48
// hc_class := 1 ;
1908: LD_ADDR_OWVAR 28
1912: PUSH
1913: LD_INT 1
1915: ST_TO_ADDR
// hc_sex := sex_male ;
1916: LD_ADDR_OWVAR 27
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1924: LD_ADDR_OWVAR 33
1928: PUSH
1929: LD_STRING SecondCharsGal
1931: ST_TO_ADDR
// hc_face_number := 59 ;
1932: LD_ADDR_OWVAR 34
1936: PUSH
1937: LD_INT 59
1939: ST_TO_ADDR
// hc_name := Max Gray ;
1940: LD_ADDR_OWVAR 26
1944: PUSH
1945: LD_STRING Max Gray
1947: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1948: LD_ADDR_OWVAR 29
1952: PUSH
1953: LD_INT 9
1955: PUSH
1956: LD_INT 11
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
1963: LD_ADDR_OWVAR 30
1967: PUSH
1968: LD_INT 2
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1986: LD_ADDR_OWVAR 31
1990: PUSH
1991: LD_INT 4
1993: PUSH
1994: LD_INT 1
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: LD_INT 0
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: ST_TO_ADDR
// un = CreateHuman ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 44
2018: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 11
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL_OW 49
// hc_class := 2 ;
2034: LD_ADDR_OWVAR 28
2038: PUSH
2039: LD_INT 2
2041: ST_TO_ADDR
// hc_sex := sex_male ;
2042: LD_ADDR_OWVAR 27
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2050: LD_ADDR_OWVAR 33
2054: PUSH
2055: LD_STRING SecondCharsGal
2057: ST_TO_ADDR
// hc_face_number := 50 ;
2058: LD_ADDR_OWVAR 34
2062: PUSH
2063: LD_INT 50
2065: ST_TO_ADDR
// hc_name := Frank Hughes ;
2066: LD_ADDR_OWVAR 26
2070: PUSH
2071: LD_STRING Frank Hughes
2073: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2074: LD_ADDR_OWVAR 29
2078: PUSH
2079: LD_INT 10
2081: PUSH
2082: LD_INT 10
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2089: LD_ADDR_OWVAR 30
2093: PUSH
2094: LD_INT 1
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: LD_INT 0
2102: PUSH
2103: LD_INT 0
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: ST_TO_ADDR
// hc_skills := [ 1 , 4 , 0 , 1 ] ;
2112: LD_ADDR_OWVAR 31
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 4
2122: PUSH
2123: LD_INT 0
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: ST_TO_ADDR
// un = CreateHuman ;
2135: LD_ADDR_VAR 0 4
2139: PUSH
2140: CALL_OW 44
2144: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2145: LD_VAR 0 4
2149: PPUSH
2150: LD_INT 11
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// hc_class := 1 ;
2160: LD_ADDR_OWVAR 28
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// hc_sex := sex_male ;
2168: LD_ADDR_OWVAR 27
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2176: LD_ADDR_OWVAR 33
2180: PUSH
2181: LD_STRING SecondCharsGal
2183: ST_TO_ADDR
// hc_face_number := 54 ;
2184: LD_ADDR_OWVAR 34
2188: PUSH
2189: LD_INT 54
2191: ST_TO_ADDR
// hc_name := Luigi Ghibellini ;
2192: LD_ADDR_OWVAR 26
2196: PUSH
2197: LD_STRING Luigi Ghibellini
2199: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2200: LD_ADDR_OWVAR 29
2204: PUSH
2205: LD_INT 11
2207: PUSH
2208: LD_INT 11
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 1 ] ;
2215: LD_ADDR_OWVAR 30
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: LD_INT 0
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 2 ] ;
2238: LD_ADDR_OWVAR 31
2242: PUSH
2243: LD_INT 2
2245: PUSH
2246: LD_INT 1
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: ST_TO_ADDR
// un = CreateHuman ;
2261: LD_ADDR_VAR 0 4
2265: PUSH
2266: CALL_OW 44
2270: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2271: LD_VAR 0 4
2275: PPUSH
2276: LD_INT 11
2278: PPUSH
2279: LD_INT 0
2281: PPUSH
2282: CALL_OW 49
// hc_class := 3 ;
2286: LD_ADDR_OWVAR 28
2290: PUSH
2291: LD_INT 3
2293: ST_TO_ADDR
// hc_sex := sex_male ;
2294: LD_ADDR_OWVAR 27
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2302: LD_ADDR_OWVAR 33
2306: PUSH
2307: LD_STRING AmGalRemake
2309: ST_TO_ADDR
// hc_face_number := 6 ;
2310: LD_ADDR_OWVAR 34
2314: PUSH
2315: LD_INT 6
2317: ST_TO_ADDR
// hc_name := Leon Carter ;
2318: LD_ADDR_OWVAR 26
2322: PUSH
2323: LD_STRING Leon Carter
2325: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2326: LD_ADDR_OWVAR 29
2330: PUSH
2331: LD_INT 10
2333: PUSH
2334: LD_INT 9
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
2341: LD_ADDR_OWVAR 30
2345: PUSH
2346: LD_INT 0
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2364: LD_ADDR_OWVAR 31
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 2
2374: PUSH
2375: LD_INT 3
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: ST_TO_ADDR
// un = CreateHuman ;
2387: LD_ADDR_VAR 0 4
2391: PUSH
2392: CALL_OW 44
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2397: LD_VAR 0 4
2401: PPUSH
2402: LD_VAR 0 5
2406: PPUSH
2407: CALL_OW 52
// if count = 4 then
2411: LD_VAR 0 1
2415: PUSH
2416: LD_INT 4
2418: EQUAL
2419: IFFALSE 2547
// begin hc_class := 1 ;
2421: LD_ADDR_OWVAR 28
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// hc_sex := sex_male ;
2429: LD_ADDR_OWVAR 27
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2437: LD_ADDR_OWVAR 33
2441: PUSH
2442: LD_STRING SecondCharsGal
2444: ST_TO_ADDR
// hc_face_number := 34 ;
2445: LD_ADDR_OWVAR 34
2449: PUSH
2450: LD_INT 34
2452: ST_TO_ADDR
// hc_name := Ian Hill ;
2453: LD_ADDR_OWVAR 26
2457: PUSH
2458: LD_STRING Ian Hill
2460: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2461: LD_ADDR_OWVAR 29
2465: PUSH
2466: LD_INT 10
2468: PUSH
2469: LD_INT 12
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2476: LD_ADDR_OWVAR 30
2480: PUSH
2481: LD_INT 3
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: LD_INT 0
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2499: LD_ADDR_OWVAR 31
2503: PUSH
2504: LD_INT 4
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: LD_INT 1
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: ST_TO_ADDR
// un = CreateHuman ;
2522: LD_ADDR_VAR 0 4
2526: PUSH
2527: CALL_OW 44
2531: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2532: LD_VAR 0 4
2536: PPUSH
2537: LD_INT 11
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL_OW 49
// end ; if count = 5 then
2547: LD_VAR 0 1
2551: PUSH
2552: LD_INT 5
2554: EQUAL
2555: IFFALSE 2809
// begin hc_class := 1 ;
2557: LD_ADDR_OWVAR 28
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// hc_sex := sex_male ;
2565: LD_ADDR_OWVAR 27
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2573: LD_ADDR_OWVAR 33
2577: PUSH
2578: LD_STRING SecondCharsGal
2580: ST_TO_ADDR
// hc_face_number := 34 ;
2581: LD_ADDR_OWVAR 34
2585: PUSH
2586: LD_INT 34
2588: ST_TO_ADDR
// hc_name := Ian Hill ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING Ian Hill
2596: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2597: LD_ADDR_OWVAR 29
2601: PUSH
2602: LD_INT 10
2604: PUSH
2605: LD_INT 12
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2612: LD_ADDR_OWVAR 30
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: LD_INT 0
2625: PUSH
2626: LD_INT 0
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2635: LD_ADDR_OWVAR 31
2639: PUSH
2640: LD_INT 4
2642: PUSH
2643: LD_INT 1
2645: PUSH
2646: LD_INT 1
2648: PUSH
2649: LD_INT 0
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: ST_TO_ADDR
// un = CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 11
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
// hc_class := 1 ;
2683: LD_ADDR_OWVAR 28
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// hc_sex := sex_female ;
2691: LD_ADDR_OWVAR 27
2695: PUSH
2696: LD_INT 2
2698: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2699: LD_ADDR_OWVAR 33
2703: PUSH
2704: LD_STRING SecondCharsGal
2706: ST_TO_ADDR
// hc_face_number := 41 ;
2707: LD_ADDR_OWVAR 34
2711: PUSH
2712: LD_INT 41
2714: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2715: LD_ADDR_OWVAR 26
2719: PUSH
2720: LD_STRING Kate Wadsworth
2722: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2723: LD_ADDR_OWVAR 29
2727: PUSH
2728: LD_INT 9
2730: PUSH
2731: LD_INT 9
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2738: LD_ADDR_OWVAR 30
2742: PUSH
2743: LD_INT 1
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 0
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2761: LD_ADDR_OWVAR 31
2765: PUSH
2766: LD_INT 2
2768: PUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 0
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: ST_TO_ADDR
// un = CreateHuman ;
2784: LD_ADDR_VAR 0 4
2788: PUSH
2789: CALL_OW 44
2793: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_INT 11
2801: PPUSH
2802: LD_INT 0
2804: PPUSH
2805: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2809: LD_INT 11
2811: PPUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 21
2824: PUSH
2825: LD_INT 1
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 26
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: PPUSH
2847: CALL_OW 70
2851: PUSH
2852: LD_INT 1
2854: ARRAY
2855: PPUSH
2856: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2860: LD_INT 11
2862: PPUSH
2863: LD_INT 22
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 21
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 26
2885: PUSH
2886: LD_INT 1
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: LIST
2897: PPUSH
2898: CALL_OW 70
2902: PUSH
2903: LD_INT 1
2905: ARRAY
2906: PPUSH
2907: LD_STRING D6-Sol3-1
2909: PPUSH
2910: CALL_OW 88
// end ; end_of_file
2914: LD_VAR 0 2
2918: RET
// export function PrepareRussianCommander ; begin
2919: LD_INT 0
2921: PPUSH
// uc_side = 3 ;
2922: LD_ADDR_OWVAR 20
2926: PUSH
2927: LD_INT 3
2929: ST_TO_ADDR
// uc_nation = 3 ;
2930: LD_ADDR_OWVAR 21
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2938: LD_ADDR_EXP 15
2942: PUSH
2943: LD_STRING Stolypin
2945: PPUSH
2946: CALL_OW 25
2950: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2951: LD_EXP 15
2955: PPUSH
2956: LD_INT 21
2958: PPUSH
2959: CALL_OW 52
// end ;
2963: LD_VAR 0 1
2967: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2968: LD_INT 0
2970: PPUSH
2971: PPUSH
2972: PPUSH
2973: PPUSH
// if Difficulty > 1 then
2974: LD_OWVAR 67
2978: PUSH
2979: LD_INT 1
2981: GREATER
2982: IFFALSE 3092
// begin uc_side := 3 ;
2984: LD_ADDR_OWVAR 20
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// uc_nation := 3 ;
2992: LD_ADDR_OWVAR 21
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// InitHc_All ( ) ;
3000: CALL_OW 584
// InitBc ;
3004: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: LD_INT 4
3016: PPUSH
3017: CALL_OW 380
// bc_type := b_breastwork ;
3021: LD_ADDR_OWVAR 42
3025: PUSH
3026: LD_INT 31
3028: ST_TO_ADDR
// bc_level := 4 ;
3029: LD_ADDR_OWVAR 43
3033: PUSH
3034: LD_INT 4
3036: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_INT 100
3044: PPUSH
3045: LD_INT 58
3047: PPUSH
3048: LD_INT 2
3050: PPUSH
3051: CALL_OW 47
3055: ST_TO_ADDR
// un := CreateHuman ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3066: LD_VAR 0 4
3070: PPUSH
3071: LD_INT 5
3073: PPUSH
3074: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3078: LD_VAR 0 4
3082: PPUSH
3083: LD_VAR 0 3
3087: PPUSH
3088: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3092: LD_INT 3
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 22
3100: PPUSH
3101: LD_EXP 16
3105: PPUSH
3106: LD_EXP 17
3110: PPUSH
3111: CALL_OW 12
3115: PPUSH
3116: LD_INT 1
3118: PPUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 4
3124: PUSH
3125: LD_INT 5
3127: PUSH
3128: LD_INT 6
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_OWVAR 67
3141: ARRAY
3142: PPUSH
3143: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 21
3155: PPUSH
3156: LD_EXP 16
3160: PPUSH
3161: LD_EXP 17
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: LD_EXP 16
3194: PPUSH
3195: LD_EXP 17
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 24
3223: PPUSH
3224: LD_EXP 16
3228: PPUSH
3229: LD_EXP 17
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 5
3244: PPUSH
3245: CALL 4372 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 22
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 30
3266: PUSH
3267: LD_INT 32
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PPUSH
3278: CALL_OW 69
3282: PUSH
3283: FOR_IN
3284: IFFALSE 3324
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 3
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 16
3301: PPUSH
3302: LD_EXP 17
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL 4372 0 6
3322: GO 3283
3324: POP
3325: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_INT 22
3333: PUSH
3334: LD_INT 3
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: LD_INT 30
3343: PUSH
3344: LD_INT 31
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PPUSH
3355: CALL_OW 69
3359: PUSH
3360: FOR_IN
3361: IFFALSE 3389
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3363: LD_EXP 16
3367: PPUSH
3368: LD_EXP 17
3372: PPUSH
3373: CALL_OW 12
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL 4481 0 2
3387: GO 3360
3389: POP
3390: POP
// end ;
3391: LD_VAR 0 1
3395: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3396: LD_INT 0
3398: PPUSH
3399: PPUSH
3400: PPUSH
3401: PPUSH
// uc_side = 6 ;
3402: LD_ADDR_OWVAR 20
3406: PUSH
3407: LD_INT 6
3409: ST_TO_ADDR
// uc_nation = 3 ;
3410: LD_ADDR_OWVAR 21
3414: PUSH
3415: LD_INT 3
3417: ST_TO_ADDR
// InitHC_All ( ) ;
3418: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: LD_INT 2
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: LD_INT 3
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: PUSH
3450: LD_OWVAR 67
3454: ARRAY
3455: PUSH
3456: FOR_TO
3457: IFFALSE 3625
// begin vc_engine = 1 ;
3459: LD_ADDR_OWVAR 39
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// vc_control = 1 ;
3467: LD_ADDR_OWVAR 38
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3475: LD_ADDR_OWVAR 40
3479: PUSH
3480: LD_INT 42
3482: PUSH
3483: LD_INT 42
3485: PUSH
3486: LD_INT 43
3488: PUSH
3489: LD_INT 43
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_OWVAR 67
3502: ARRAY
3503: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3504: LD_ADDR_OWVAR 37
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 22
3514: PUSH
3515: LD_INT 22
3517: PUSH
3518: LD_INT 22
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: ST_TO_ADDR
// veh = CreateVehicle ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: CALL_OW 45
3542: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_INT 3
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 49
// hc_gallery =  ;
3558: LD_ADDR_OWVAR 33
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_name =  ;
3566: LD_ADDR_OWVAR 26
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3574: LD_INT 0
3576: PPUSH
3577: LD_INT 3
3579: PPUSH
3580: LD_EXP 16
3584: PPUSH
3585: LD_EXP 17
3589: PPUSH
3590: CALL_OW 12
3594: PPUSH
3595: CALL_OW 380
// un = CreateHuman ;
3599: LD_ADDR_VAR 0 4
3603: PUSH
3604: CALL_OW 44
3608: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3609: LD_VAR 0 4
3613: PPUSH
3614: LD_VAR 0 3
3618: PPUSH
3619: CALL_OW 52
// end ;
3623: GO 3456
3625: POP
3626: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3627: LD_INT 0
3629: PPUSH
3630: LD_INT 2
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: LD_EXP 17
3642: PPUSH
3643: CALL_OW 12
3647: PUSH
3648: LD_INT 2
3650: PLUS
3651: PPUSH
3652: CALL_OW 380
// un = CreateHuman ;
3656: LD_ADDR_VAR 0 4
3660: PUSH
3661: CALL_OW 44
3665: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3666: LD_VAR 0 4
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3681: LD_INT 0
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: LD_EXP 16
3691: PPUSH
3692: LD_EXP 17
3696: PPUSH
3697: CALL_OW 12
3701: PUSH
3702: LD_INT 2
3704: PLUS
3705: PPUSH
3706: CALL_OW 380
// un = CreateHuman ;
3710: LD_ADDR_VAR 0 4
3714: PUSH
3715: CALL_OW 44
3719: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_INT 3
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3735: LD_ADDR_VAR 0 2
3739: PUSH
3740: DOUBLE
3741: LD_INT 1
3743: DEC
3744: ST_TO_ADDR
3745: LD_INT 2
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 4
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: PUSH
3763: LD_OWVAR 67
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 3
3774: PPUSH
3775: CALL_OW 12
3779: PLUS
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3852
// begin hc_gallery =  ;
3784: LD_ADDR_OWVAR 33
3788: PUSH
3789: LD_STRING 
3791: ST_TO_ADDR
// hc_name =  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3800: LD_INT 0
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_EXP 16
3810: PPUSH
3811: LD_EXP 17
3815: PPUSH
3816: CALL_OW 12
3820: PPUSH
3821: CALL_OW 380
// un = CreateHuman ;
3825: LD_ADDR_VAR 0 4
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3835: LD_VAR 0 4
3839: PPUSH
3840: LD_INT 3
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 49
// end ;
3850: GO 3781
3852: POP
3853: POP
// vc_engine = 1 ;
3854: LD_ADDR_OWVAR 39
3858: PUSH
3859: LD_INT 1
3861: ST_TO_ADDR
// vc_control = 1 ;
3862: LD_ADDR_OWVAR 38
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_weapon = 51 ;
3870: LD_ADDR_OWVAR 40
3874: PUSH
3875: LD_INT 51
3877: ST_TO_ADDR
// vc_chassis = 22 ;
3878: LD_ADDR_OWVAR 37
3882: PUSH
3883: LD_INT 22
3885: ST_TO_ADDR
// veh = CreateVehicle ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 45
3895: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_INT 1
3918: PPUSH
3919: LD_INT 100
3921: PPUSH
3922: CALL_OW 290
// hc_gallery =  ;
3926: LD_ADDR_OWVAR 33
3930: PUSH
3931: LD_STRING 
3933: ST_TO_ADDR
// hc_name =  ;
3934: LD_ADDR_OWVAR 26
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3942: LD_INT 0
3944: PPUSH
3945: LD_INT 3
3947: PPUSH
3948: LD_EXP 16
3952: PPUSH
3953: LD_EXP 17
3957: PPUSH
3958: CALL_OW 12
3962: PPUSH
3963: CALL_OW 380
// un = CreateHuman ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3977: LD_VAR 0 4
3981: PPUSH
3982: LD_VAR 0 3
3986: PPUSH
3987: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 6
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 25
4014: PUSH
4015: LD_INT 2
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 3
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 4
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 69
4056: PUSH
4057: FOR_IN
4058: IFFALSE 4077
// ComAgressiveMove ( i , 45 , 46 ) ;
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_INT 45
4067: PPUSH
4068: LD_INT 46
4070: PPUSH
4071: CALL_OW 114
4075: GO 4057
4077: POP
4078: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: LD_INT 22
4086: PUSH
4087: LD_INT 6
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 25
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: FOR_IN
4114: IFFALSE 4145
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4116: LD_ADDR_EXP 21
4120: PUSH
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: LD_INT 48
4131: PPUSH
4132: LD_INT 55
4134: PPUSH
4135: LD_INT 5
4137: PPUSH
4138: CALL_OW 145
4142: ST_TO_ADDR
4143: GO 4113
4145: POP
4146: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4147: LD_ADDR_VAR 0 2
4151: PUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: FOR_IN
4182: IFFALSE 4201
// ComMoveXY ( i , 39 , 55 ) ;
4184: LD_VAR 0 2
4188: PPUSH
4189: LD_INT 39
4191: PPUSH
4192: LD_INT 55
4194: PPUSH
4195: CALL_OW 111
4199: GO 4181
4201: POP
4202: POP
// end ;
4203: LD_VAR 0 1
4207: RET
// export firstAttackGroup ; export function PrepareFirstAttack ; var i , un ; begin
4208: LD_INT 0
4210: PPUSH
4211: PPUSH
4212: PPUSH
// uc_side := 3 ;
4213: LD_ADDR_OWVAR 20
4217: PUSH
4218: LD_INT 3
4220: ST_TO_ADDR
// uc_nation := 3 ;
4221: LD_ADDR_OWVAR 21
4225: PUSH
4226: LD_INT 3
4228: ST_TO_ADDR
// firstAttackGroup := [ ] ;
4229: LD_ADDR_EXP 51
4233: PUSH
4234: EMPTY
4235: ST_TO_ADDR
// for i := 1 to 4 do
4236: LD_ADDR_VAR 0 2
4240: PUSH
4241: DOUBLE
4242: LD_INT 1
4244: DEC
4245: ST_TO_ADDR
4246: LD_INT 4
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4357
// begin InitHC_All ( ) ;
4252: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4256: LD_INT 0
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: LD_EXP 17
4271: PPUSH
4272: CALL_OW 12
4276: PPUSH
4277: CALL_OW 380
// un := CreateHuman ;
4281: LD_ADDR_VAR 0 3
4285: PUSH
4286: CALL_OW 44
4290: ST_TO_ADDR
// firstAttackGroup := Join ( firstAttackGroup , un ) ;
4291: LD_ADDR_EXP 51
4295: PUSH
4296: LD_EXP 51
4300: PPUSH
4301: LD_VAR 0 3
4305: PPUSH
4306: CALL 80436 0 2
4310: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 4
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4326: LD_VAR 0 3
4330: PPUSH
4331: LD_EXP 1
4335: PPUSH
4336: CALL_OW 250
4340: PPUSH
4341: LD_EXP 1
4345: PPUSH
4346: CALL_OW 251
4350: PPUSH
4351: CALL_OW 114
// end ;
4355: GO 4249
4357: POP
4358: POP
// firstRussianAttack := 1 ;
4359: LD_ADDR_EXP 23
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// end ; end_of_file
4367: LD_VAR 0 1
4371: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
// for i = 1 to count do
4377: LD_ADDR_VAR 0 8
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_VAR 0 6
4391: PUSH
4392: FOR_TO
4393: IFFALSE 4474
// begin uc_side = side ;
4395: LD_ADDR_OWVAR 20
4399: PUSH
4400: LD_VAR 0 1
4404: ST_TO_ADDR
// uc_nation = nation ;
4405: LD_ADDR_OWVAR 21
4409: PUSH
4410: LD_VAR 0 2
4414: ST_TO_ADDR
// hc_gallery =  ;
4415: LD_ADDR_OWVAR 33
4419: PUSH
4420: LD_STRING 
4422: ST_TO_ADDR
// hc_name =  ;
4423: LD_ADDR_OWVAR 26
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4431: LD_INT 0
4433: PPUSH
4434: LD_VAR 0 5
4438: PPUSH
4439: LD_VAR 0 4
4443: PPUSH
4444: CALL_OW 380
// un = CreateHuman ;
4448: LD_ADDR_VAR 0 9
4452: PUSH
4453: CALL_OW 44
4457: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 3
4467: PPUSH
4468: CALL_OW 52
// end ;
4472: GO 4392
4474: POP
4475: POP
// end ;
4476: LD_VAR 0 7
4480: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4481: LD_INT 0
4483: PPUSH
4484: PPUSH
4485: PPUSH
// uc_side := GetSide ( b ) ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 255
4500: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4501: LD_ADDR_OWVAR 21
4505: PUSH
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 248
4515: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4516: LD_INT 0
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: LD_VAR 0 1
4526: PPUSH
4527: CALL_OW 380
// un = CreateHuman ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: CALL_OW 44
4540: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4541: LD_ADDR_VAR 0 5
4545: PUSH
4546: LD_VAR 0 2
4550: PPUSH
4551: CALL_OW 254
4555: PUSH
4556: LD_INT 3
4558: MINUS
4559: ST_TO_ADDR
// if dir < 0 then
4560: LD_VAR 0 5
4564: PUSH
4565: LD_INT 0
4567: LESS
4568: IFFALSE 4584
// dir := 6 + dir ;
4570: LD_ADDR_VAR 0 5
4574: PUSH
4575: LD_INT 6
4577: PUSH
4578: LD_VAR 0 5
4582: PLUS
4583: ST_TO_ADDR
// SetDir ( un , dir ) ;
4584: LD_VAR 0 4
4588: PPUSH
4589: LD_VAR 0 5
4593: PPUSH
4594: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4598: LD_VAR 0 4
4602: PPUSH
4603: LD_VAR 0 2
4607: PPUSH
4608: CALL_OW 52
// end ;
4612: LD_VAR 0 3
4616: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4617: LD_INT 0
4619: PPUSH
4620: PPUSH
4621: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4622: LD_ADDR_VAR 0 6
4626: PUSH
4627: LD_VAR 0 1
4631: PUSH
4632: LD_INT 1
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 12
4644: ARRAY
4645: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4646: LD_VAR 0 6
4650: PPUSH
4651: CALL_OW 258
4655: PUSH
4656: LD_INT 1
4658: EQUAL
4659: IFFALSE 4677
// Say ( speaker , dialogMID ) else
4661: LD_VAR 0 6
4665: PPUSH
4666: LD_VAR 0 2
4670: PPUSH
4671: CALL_OW 88
4675: GO 4691
// Say ( speaker , dialogFID ) ;
4677: LD_VAR 0 6
4681: PPUSH
4682: LD_VAR 0 3
4686: PPUSH
4687: CALL_OW 88
// result := speaker ;
4691: LD_ADDR_VAR 0 4
4695: PUSH
4696: LD_VAR 0 6
4700: ST_TO_ADDR
// end ;
4701: LD_VAR 0 4
4705: RET
// export function PrepareDifficulty ; var tmp ; begin
4706: LD_INT 0
4708: PPUSH
4709: PPUSH
// if Difficulty = 1 then
4710: LD_OWVAR 67
4714: PUSH
4715: LD_INT 1
4717: EQUAL
4718: IFFALSE 4736
// begin RuSoldMinLevel = 1 ;
4720: LD_ADDR_EXP 16
4724: PUSH
4725: LD_INT 1
4727: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4728: LD_ADDR_EXP 17
4732: PUSH
4733: LD_INT 2
4735: ST_TO_ADDR
// end ; if Difficulty = 2 then
4736: LD_OWVAR 67
4740: PUSH
4741: LD_INT 2
4743: EQUAL
4744: IFFALSE 4845
// begin RuSoldMinLevel = 2 ;
4746: LD_ADDR_EXP 16
4750: PUSH
4751: LD_INT 2
4753: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4754: LD_ADDR_EXP 17
4758: PUSH
4759: LD_INT 3
4761: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4762: LD_INT 23
4764: PPUSH
4765: CALL_OW 64
// uc_nation = 3 ;
4769: LD_ADDR_OWVAR 21
4773: PUSH
4774: LD_INT 3
4776: ST_TO_ADDR
// uc_side = 3 ;
4777: LD_ADDR_OWVAR 20
4781: PUSH
4782: LD_INT 3
4784: ST_TO_ADDR
// bc_level = 5 ;
4785: LD_ADDR_OWVAR 43
4789: PUSH
4790: LD_INT 5
4792: ST_TO_ADDR
// bc_type = 32 ;
4793: LD_ADDR_OWVAR 42
4797: PUSH
4798: LD_INT 32
4800: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: LD_INT 76
4808: PPUSH
4809: LD_INT 91
4811: PPUSH
4812: LD_INT 2
4814: PPUSH
4815: CALL_OW 47
4819: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4820: LD_VAR 0 2
4824: PPUSH
4825: LD_INT 43
4827: PPUSH
4828: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4832: LD_INT 51
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 322
// end ; if Difficulty >= 3 then
4845: LD_OWVAR 67
4849: PUSH
4850: LD_INT 3
4852: GREATEREQUAL
4853: IFFALSE 5017
// begin RuSoldMinLevel = Difficulty ;
4855: LD_ADDR_EXP 16
4859: PUSH
4860: LD_OWVAR 67
4864: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4865: LD_ADDR_EXP 17
4869: PUSH
4870: LD_INT 4
4872: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4873: LD_INT 26
4875: PPUSH
4876: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4880: LD_INT 23
4882: PPUSH
4883: CALL_OW 64
// uc_nation = 3 ;
4887: LD_ADDR_OWVAR 21
4891: PUSH
4892: LD_INT 3
4894: ST_TO_ADDR
// uc_side = 3 ;
4895: LD_ADDR_OWVAR 20
4899: PUSH
4900: LD_INT 3
4902: ST_TO_ADDR
// bc_level = 5 ;
4903: LD_ADDR_OWVAR 43
4907: PUSH
4908: LD_INT 5
4910: ST_TO_ADDR
// bc_type = 32 ;
4911: LD_ADDR_OWVAR 42
4915: PUSH
4916: LD_INT 32
4918: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: LD_INT 76
4926: PPUSH
4927: LD_INT 91
4929: PPUSH
4930: LD_INT 2
4932: PPUSH
4933: CALL_OW 47
4937: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4938: LD_VAR 0 2
4942: PPUSH
4943: LD_INT 44
4945: PPUSH
4946: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4950: LD_ADDR_VAR 0 2
4954: PUSH
4955: LD_INT 83
4957: PPUSH
4958: LD_INT 84
4960: PPUSH
4961: LD_INT 2
4963: PPUSH
4964: CALL_OW 47
4968: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4969: LD_VAR 0 2
4973: PPUSH
4974: LD_INT 43
4976: PPUSH
4977: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4981: LD_INT 51
4983: PPUSH
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4994: LD_INT 52
4996: PPUSH
4997: LD_INT 3
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5007: LD_INT 25
5009: PPUSH
5010: LD_INT 44
5012: PPUSH
5013: CALL_OW 431
// end ; end ;
5017: LD_VAR 0 1
5021: RET
// export function EnergyDialog ; begin
5022: LD_INT 0
5024: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5025: LD_INT 46
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: CALL_OW 321
5035: PUSH
5036: LD_INT 1
5038: EQUAL
5039: IFFALSE 5057
5041: PUSH
5042: LD_INT 35
5044: PPUSH
5045: LD_INT 1
5047: PPUSH
5048: CALL_OW 321
5052: PUSH
5053: LD_INT 1
5055: EQUAL
5056: AND
5057: IFFALSE 5081
// begin Say ( JMM , D9c-JMM-1 ) ;
5059: LD_EXP 1
5063: PPUSH
5064: LD_STRING D9c-JMM-1
5066: PPUSH
5067: CALL_OW 88
// energyVDialog = 1 ;
5071: LD_ADDR_EXP 33
5075: PUSH
5076: LD_INT 1
5078: ST_TO_ADDR
// end else
5079: GO 5243
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5081: LD_INT 35
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: CALL_OW 321
5091: PUSH
5092: LD_INT 2
5094: EQUAL
5095: IFFALSE 5107
5097: PUSH
5098: LD_EXP 33
5102: PUSH
5103: LD_INT 0
5105: EQUAL
5106: AND
5107: IFFALSE 5129
// begin Say ( JMM , D9c-JMM-1a ) ;
5109: LD_EXP 1
5113: PPUSH
5114: LD_STRING D9c-JMM-1a
5116: PPUSH
5117: CALL_OW 88
// energyVDialog = 1 ;
5121: LD_ADDR_EXP 33
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5129: LD_INT 46
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 321
5139: PUSH
5140: LD_INT 2
5142: EQUAL
5143: IFFALSE 5155
5145: PUSH
5146: LD_EXP 33
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: AND
5155: IFFALSE 5177
// begin Say ( JMM , D9c-JMM-1b ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D9c-JMM-1b
5164: PPUSH
5165: CALL_OW 88
// energyVDialog = 1 ;
5169: LD_ADDR_EXP 33
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5177: LD_INT 46
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 321
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: IFFALSE 5209
5193: PUSH
5194: LD_INT 21
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 321
5204: PUSH
5205: LD_INT 2
5207: EQUAL
5208: AND
5209: IFFALSE 5221
5211: PUSH
5212: LD_EXP 33
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5243
// begin Say ( JMM , D9c-JMM-1c ) ;
5223: LD_EXP 1
5227: PPUSH
5228: LD_STRING D9c-JMM-1c
5230: PPUSH
5231: CALL_OW 88
// energyVDialog = 1 ;
5235: LD_ADDR_EXP 33
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ; end ; end ;
5243: LD_VAR 0 1
5247: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5255: LD_VAR 0 1
5259: NOT
5260: IFTRUE 5277
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 256
5272: PUSH
5273: LD_INT 250
5275: LESS
5276: OR
5277: IFTRUE 5307
5279: PUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 314
5289: IFFALSE 5306
5291: PUSH
5292: LD_VAR 0 1
5296: PPUSH
5297: CALL_OW 261
5301: PUSH
5302: LD_INT 20
5304: GREATER
5305: AND
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5678
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL_OW 261
5320: PUSH
5321: LD_INT 20
5323: LESS
5324: IFFALSE 5342
5326: PUSH
5327: LD_VAR 0 1
5331: PPUSH
5332: CALL_OW 110
5336: PUSH
5337: LD_INT 21
5339: EQUAL
5340: NOT
5341: AND
5342: IFFALSE 5369
// begin ComStop ( bulldozer ) ;
5344: LD_VAR 0 1
5348: PPUSH
5349: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5353: LD_VAR 0 1
5357: PPUSH
5358: LD_INT 21
5360: PPUSH
5361: CALL_OW 109
// exit ;
5365: GO 5678
// end else
5367: GO 5396
// if GetFuel ( bulldozer ) > 20 then
5369: LD_VAR 0 1
5373: PPUSH
5374: CALL_OW 261
5378: PUSH
5379: LD_INT 20
5381: GREATER
5382: IFFALSE 5396
// SetTag ( bulldozer , 0 ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_INT 0
5391: PPUSH
5392: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5396: LD_ADDR_VAR 0 5
5400: PUSH
5401: LD_VAR 0 2
5405: PPUSH
5406: CALL_OW 353
5410: ST_TO_ADDR
// tmp := [ ] ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: EMPTY
5417: ST_TO_ADDR
// for i = 1 to list do
5418: LD_ADDR_VAR 0 4
5422: PUSH
5423: DOUBLE
5424: LD_INT 1
5426: DEC
5427: ST_TO_ADDR
5428: LD_VAR 0 5
5432: PUSH
5433: FOR_TO
5434: IFFALSE 5532
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5436: LD_VAR 0 5
5440: PUSH
5441: LD_VAR 0 4
5445: ARRAY
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_VAR 0 5
5455: PUSH
5456: LD_VAR 0 4
5460: ARRAY
5461: PUSH
5462: LD_INT 2
5464: ARRAY
5465: PPUSH
5466: CALL_OW 554
5470: IFFALSE 5530
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5472: LD_ADDR_VAR 0 6
5476: PUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_VAR 0 6
5486: PUSH
5487: LD_INT 1
5489: PLUS
5490: PPUSH
5491: LD_VAR 0 5
5495: PUSH
5496: LD_VAR 0 4
5500: ARRAY
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PUSH
5506: LD_VAR 0 5
5510: PUSH
5511: LD_VAR 0 4
5515: ARRAY
5516: PUSH
5517: LD_INT 2
5519: ARRAY
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 1
5529: ST_TO_ADDR
// end ;
5530: GO 5433
5532: POP
5533: POP
// ComStop ( bulldozer ) ;
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5543: LD_ADDR_VAR 0 7
5547: PUSH
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 250
5557: PUSH
5558: LD_VAR 0 1
5562: PPUSH
5563: CALL_OW 251
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: ST_TO_ADDR
// for i = tmp downto 1 do
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: DOUBLE
5578: LD_VAR 0 6
5582: INC
5583: ST_TO_ADDR
5584: LD_INT 1
5586: PUSH
5587: FOR_DOWNTO
5588: IFFALSE 5676
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5590: LD_ADDR_VAR 0 7
5594: PUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 1
5602: ARRAY
5603: PPUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 6
5617: PPUSH
5618: CALL 5785 0 3
5622: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_VAR 0 7
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 7
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL 5683 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5650: LD_ADDR_VAR 0 6
5654: PUSH
5655: LD_VAR 0 6
5659: PPUSH
5660: LD_VAR 0 7
5664: PUSH
5665: LD_INT 3
5667: ARRAY
5668: PPUSH
5669: CALL_OW 3
5673: ST_TO_ADDR
// end ;
5674: GO 5587
5676: POP
5677: POP
// end ;
5678: LD_VAR 0 3
5682: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5683: LD_INT 0
5685: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5686: LD_VAR 0 2
5690: PPUSH
5691: LD_VAR 0 3
5695: PPUSH
5696: CALL_OW 351
5700: IFFALSE 5718
5702: PUSH
5703: LD_VAR 0 2
5707: PPUSH
5708: LD_VAR 0 3
5712: PPUSH
5713: CALL_OW 554
5717: AND
5718: IFFALSE 5736
5720: PUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL_OW 488
5735: AND
5736: IFFALSE 5759
5738: PUSH
5739: LD_VAR 0 2
5743: PPUSH
5744: LD_VAR 0 3
5748: PPUSH
5749: CALL_OW 428
5753: PUSH
5754: LD_INT 1
5756: NEG
5757: EQUAL
5758: AND
5759: IFFALSE 5780
// AddComMoveXY ( bulldozer , x , y ) ;
5761: LD_VAR 0 1
5765: PPUSH
5766: LD_VAR 0 2
5770: PPUSH
5771: LD_VAR 0 3
5775: PPUSH
5776: CALL_OW 171
// end ;
5780: LD_VAR 0 4
5784: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// dist := 99999 ;
5794: LD_ADDR_VAR 0 6
5798: PUSH
5799: LD_INT 99999
5801: ST_TO_ADDR
// for i = 1 to list do
5802: LD_ADDR_VAR 0 5
5806: PUSH
5807: DOUBLE
5808: LD_INT 1
5810: DEC
5811: ST_TO_ADDR
5812: LD_VAR 0 3
5816: PUSH
5817: FOR_TO
5818: IFFALSE 5956
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5820: LD_ADDR_VAR 0 7
5824: PUSH
5825: LD_VAR 0 1
5829: PPUSH
5830: LD_VAR 0 2
5834: PPUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_VAR 0 5
5844: ARRAY
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_VAR 0 3
5854: PUSH
5855: LD_VAR 0 5
5859: ARRAY
5860: PUSH
5861: LD_INT 2
5863: ARRAY
5864: PPUSH
5865: CALL_OW 298
5869: ST_TO_ADDR
// if d = 0 then
5870: LD_VAR 0 7
5874: PUSH
5875: LD_INT 0
5877: EQUAL
5878: IFFALSE 5882
// continue ;
5880: GO 5817
// if d < dist then
5882: LD_VAR 0 7
5886: PUSH
5887: LD_VAR 0 6
5891: LESS
5892: IFFALSE 5954
// begin _x := list [ i ] [ 1 ] ;
5894: LD_ADDR_VAR 0 8
5898: PUSH
5899: LD_VAR 0 3
5903: PUSH
5904: LD_VAR 0 5
5908: ARRAY
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5914: LD_ADDR_VAR 0 9
5918: PUSH
5919: LD_VAR 0 3
5923: PUSH
5924: LD_VAR 0 5
5928: ARRAY
5929: PUSH
5930: LD_INT 2
5932: ARRAY
5933: ST_TO_ADDR
// _i := i ;
5934: LD_ADDR_VAR 0 10
5938: PUSH
5939: LD_VAR 0 5
5943: ST_TO_ADDR
// dist := d ;
5944: LD_ADDR_VAR 0 6
5948: PUSH
5949: LD_VAR 0 7
5953: ST_TO_ADDR
// end ; end ;
5954: GO 5817
5956: POP
5957: POP
// result := [ _x , _y , _i , dist ] ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: LD_VAR 0 8
5967: PUSH
5968: LD_VAR 0 9
5972: PUSH
5973: LD_VAR 0 10
5977: PUSH
5978: LD_VAR 0 6
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: ST_TO_ADDR
// end ;
5989: LD_VAR 0 4
5993: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5994: LD_INT 0
5996: PPUSH
5997: PPUSH
// for i = 1 to 72 do
5998: LD_ADDR_VAR 0 5
6002: PUSH
6003: DOUBLE
6004: LD_INT 1
6006: DEC
6007: ST_TO_ADDR
6008: LD_INT 72
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6068
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
6014: LD_VAR 0 5
6018: PPUSH
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 321
6028: PUSH
6029: LD_INT 1
6031: EQUAL
6032: IFFALSE 6050
6034: PUSH
6035: LD_VAR 0 5
6039: PPUSH
6040: LD_VAR 0 3
6044: PPUSH
6045: CALL_OW 482
6049: AND
6050: IFFALSE 6066
// AddComResearch ( lab , i ) ;
6052: LD_VAR 0 2
6056: PPUSH
6057: LD_VAR 0 5
6061: PPUSH
6062: CALL_OW 184
6066: GO 6011
6068: POP
6069: POP
// end ;
6070: LD_VAR 0 4
6074: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6075: LD_INT 0
6077: PPUSH
6078: PPUSH
6079: PPUSH
6080: PPUSH
6081: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 2
6091: PPUSH
6092: CALL_OW 313
6096: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 3
6106: PPUSH
6107: LD_INT 22
6109: PUSH
6110: LD_VAR 0 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 25
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 24
6131: PUSH
6132: LD_INT 750
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 3
6141: PUSH
6142: LD_INT 54
6144: PUSH
6145: EMPTY
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 70
6162: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6163: LD_ADDR_VAR 0 5
6167: PUSH
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_INT 22
6175: PUSH
6176: LD_VAR 0 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 21
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 3
6197: PUSH
6198: LD_INT 24
6200: PUSH
6201: LD_INT 1000
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: PPUSH
6220: CALL_OW 70
6224: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6225: LD_VAR 0 5
6229: NOT
6230: IFFALSE 6276
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_VAR 0 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 25
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 24
6257: PUSH
6258: LD_INT 250
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: NOT
6275: AND
6276: IFFALSE 6280
// exit ;
6278: GO 6382
// if buildingsList and engineerOkInside then
6280: LD_VAR 0 5
6284: IFFALSE 6292
6286: PUSH
6287: LD_VAR 0 7
6291: AND
6292: IFFALSE 6318
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6294: LD_VAR 0 7
6298: PPUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: PPUSH
6314: CALL_OW 122
// if buildingsList and engineerOkOutside then
6318: LD_VAR 0 5
6322: IFFALSE 6330
6324: PUSH
6325: LD_VAR 0 8
6329: AND
6330: IFFALSE 6350
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6332: LD_VAR 0 8
6336: PPUSH
6337: LD_VAR 0 5
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6350: LD_VAR 0 5
6354: PUSH
6355: LD_INT 0
6357: EQUAL
6358: IFFALSE 6366
6360: PUSH
6361: LD_VAR 0 8
6365: AND
6366: IFFALSE 6382
// ComEnterUnit ( engineerOkOutside , building ) ;
6368: LD_VAR 0 8
6372: PPUSH
6373: LD_VAR 0 2
6377: PPUSH
6378: CALL_OW 120
// end ;
6382: LD_VAR 0 4
6386: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp ; begin
6387: LD_INT 0
6389: PPUSH
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6395: LD_ADDR_VAR 0 6
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_VAR 0 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 25
6414: PUSH
6415: LD_INT 4
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 23
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 251
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6453: LD_ADDR_VAR 0 7
6457: PUSH
6458: LD_VAR 0 3
6462: PPUSH
6463: LD_INT 22
6465: PUSH
6466: LD_VAR 0 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 2
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 25
6487: PUSH
6488: LD_INT 4
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 50
6497: PUSH
6498: EMPTY
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 70
6511: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6512: LD_ADDR_VAR 0 8
6516: PUSH
6517: LD_VAR 0 3
6521: PPUSH
6522: LD_INT 22
6524: PUSH
6525: LD_VAR 0 1
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 21
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 24
6566: PUSH
6567: LD_INT 750
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: PPUSH
6584: CALL_OW 70
6588: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6589: LD_ADDR_VAR 0 9
6593: PUSH
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 22
6601: PUSH
6602: LD_VAR 0 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 21
6613: PUSH
6614: LD_INT 1
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 3
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: LD_INT 1000
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 70
6665: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6666: LD_VAR 0 8
6670: NOT
6671: IFFALSE 6680
6673: PUSH
6674: LD_VAR 0 9
6678: NOT
6679: AND
6680: IFFALSE 6689
6682: PUSH
6683: LD_VAR 0 6
6687: NOT
6688: AND
6689: IFFALSE 6693
// exit ;
6691: GO 6899
// if damageUnits and sciList then
6693: LD_VAR 0 8
6697: IFFALSE 6705
6699: PUSH
6700: LD_VAR 0 6
6704: AND
6705: IFFALSE 6721
// ComMoveToArea ( damageUnits , healArea ) ;
6707: LD_VAR 0 8
6711: PPUSH
6712: LD_VAR 0 2
6716: PPUSH
6717: CALL_OW 113
// if unitsToHeal and sciList then
6721: LD_VAR 0 9
6725: IFFALSE 6733
6727: PUSH
6728: LD_VAR 0 6
6732: AND
6733: IFFALSE 6744
// ComExitBuilding ( sciList ) ;
6735: LD_VAR 0 6
6739: PPUSH
6740: CALL_OW 122
// if unitsToHeal and sciListOutside then
6744: LD_VAR 0 9
6748: IFFALSE 6756
6750: PUSH
6751: LD_VAR 0 7
6755: AND
6756: IFFALSE 6776
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6758: LD_VAR 0 7
6762: PPUSH
6763: LD_VAR 0 9
6767: PUSH
6768: LD_INT 1
6770: ARRAY
6771: PPUSH
6772: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6776: LD_VAR 0 8
6780: PUSH
6781: LD_INT 0
6783: EQUAL
6784: IFFALSE 6796
6786: PUSH
6787: LD_VAR 0 9
6791: PUSH
6792: LD_INT 0
6794: EQUAL
6795: AND
6796: IFFALSE 6804
6798: PUSH
6799: LD_VAR 0 7
6803: AND
6804: IFFALSE 6899
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6806: LD_ADDR_VAR 0 10
6810: PUSH
6811: LD_INT 22
6813: PUSH
6814: LD_VAR 0 1
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 21
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rand ( 1 , tmp ) ] ) ;
6853: LD_VAR 0 7
6857: PPUSH
6858: LD_INT 3
6860: PUSH
6861: LD_INT 60
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 72
6875: PPUSH
6876: LD_VAR 0 10
6880: PUSH
6881: LD_INT 1
6883: PPUSH
6884: LD_VAR 0 10
6888: PPUSH
6889: CALL_OW 12
6893: ARRAY
6894: PPUSH
6895: CALL_OW 120
// end ; end ;
6899: LD_VAR 0 5
6903: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: PUSH
6939: LD_VAR 0 3
6943: LESSEQUAL
6944: IFFALSE 7011
// for i := 1 to vehCount do
6946: LD_ADDR_VAR 0 9
6950: PUSH
6951: DOUBLE
6952: LD_INT 1
6954: DEC
6955: ST_TO_ADDR
6956: LD_VAR 0 3
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7009
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6964: LD_VAR 0 2
6968: PPUSH
6969: LD_VAR 0 7
6973: PPUSH
6974: LD_VAR 0 5
6978: PPUSH
6979: LD_VAR 0 6
6983: PPUSH
6984: LD_VAR 0 4
6988: PUSH
6989: LD_INT 1
6991: PPUSH
6992: LD_VAR 0 4
6996: PPUSH
6997: CALL_OW 12
7001: ARRAY
7002: PPUSH
7003: CALL_OW 185
7007: GO 6961
7009: POP
7010: POP
// end ;
7011: LD_VAR 0 8
7015: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skill , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnits , medics , soldiers , enemyUnits , target ; begin
7016: LD_INT 0
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
7022: PPUSH
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
// soldiers := [ ] ;
7027: LD_ADDR_VAR 0 16
7031: PUSH
7032: EMPTY
7033: ST_TO_ADDR
// medics := [ ] ;
7034: LD_ADDR_VAR 0 15
7038: PUSH
7039: EMPTY
7040: ST_TO_ADDR
// for i := 1 to medicCount do
7041: LD_ADDR_VAR 0 11
7045: PUSH
7046: DOUBLE
7047: LD_INT 1
7049: DEC
7050: ST_TO_ADDR
7051: LD_VAR 0 4
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7147
// begin uc_side := side ;
7059: LD_ADDR_OWVAR 20
7063: PUSH
7064: LD_VAR 0 1
7068: ST_TO_ADDR
// uc_nation := nation ;
7069: LD_ADDR_OWVAR 21
7073: PUSH
7074: LD_VAR 0 2
7078: ST_TO_ADDR
// InitHC_All ( ) ;
7079: CALL_OW 584
// PrepareHuman ( false , 4 , skill ) ;
7083: LD_INT 0
7085: PPUSH
7086: LD_INT 4
7088: PPUSH
7089: LD_VAR 0 5
7093: PPUSH
7094: CALL_OW 380
// un := CreateHuman ;
7098: LD_ADDR_VAR 0 13
7102: PUSH
7103: CALL_OW 44
7107: ST_TO_ADDR
// medics := Join ( medics , un ) ;
7108: LD_ADDR_VAR 0 15
7112: PUSH
7113: LD_VAR 0 15
7117: PPUSH
7118: LD_VAR 0 13
7122: PPUSH
7123: CALL 80436 0 2
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7056
7147: POP
7148: POP
// for i = 1 to soldierCount do
7149: LD_ADDR_VAR 0 11
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_VAR 0 3
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7255
// begin uc_side := side ;
7167: LD_ADDR_OWVAR 20
7171: PUSH
7172: LD_VAR 0 1
7176: ST_TO_ADDR
// uc_nation := nation ;
7177: LD_ADDR_OWVAR 21
7181: PUSH
7182: LD_VAR 0 2
7186: ST_TO_ADDR
// InitHC_All ( ) ;
7187: CALL_OW 584
// PrepareHuman ( false , 1 , skill ) ;
7191: LD_INT 0
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: LD_VAR 0 5
7201: PPUSH
7202: CALL_OW 380
// un := CreateHuman ;
7206: LD_ADDR_VAR 0 13
7210: PUSH
7211: CALL_OW 44
7215: ST_TO_ADDR
// soldiers := Join ( soldiers , un ) ;
7216: LD_ADDR_VAR 0 16
7220: PUSH
7221: LD_VAR 0 16
7225: PPUSH
7226: LD_VAR 0 13
7230: PPUSH
7231: CALL 80436 0 2
7235: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7236: LD_VAR 0 13
7240: PPUSH
7241: LD_VAR 0 6
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: CALL_OW 49
// end ;
7253: GO 7164
7255: POP
7256: POP
// ComMoveToArea ( medics , healArea ) ;
7257: LD_VAR 0 15
7261: PPUSH
7262: LD_VAR 0 7
7266: PPUSH
7267: CALL_OW 113
// if strategy = 1 then
7271: LD_VAR 0 9
7275: PUSH
7276: LD_INT 1
7278: EQUAL
7279: IFFALSE 7343
// begin AddComAgressiveMove ( soldiers , 91 , 63 ) ;
7281: LD_VAR 0 16
7285: PPUSH
7286: LD_INT 91
7288: PPUSH
7289: LD_INT 63
7291: PPUSH
7292: CALL_OW 174
// AddComAgressiveMove ( soldiers , 101 , 53 ) ;
7296: LD_VAR 0 16
7300: PPUSH
7301: LD_INT 101
7303: PPUSH
7304: LD_INT 53
7306: PPUSH
7307: CALL_OW 174
// AddComAgressiveMove ( soldiers , 75 , 23 ) ;
7311: LD_VAR 0 16
7315: PPUSH
7316: LD_INT 75
7318: PPUSH
7319: LD_INT 23
7321: PPUSH
7322: CALL_OW 174
// AddComAgressiveMove ( soldiers , 78 , 8 ) ;
7326: LD_VAR 0 16
7330: PPUSH
7331: LD_INT 78
7333: PPUSH
7334: LD_INT 8
7336: PPUSH
7337: CALL_OW 174
// end else
7341: GO 7358
// begin AddComAgressiveMove ( soldiers , 75 , 39 ) ;
7343: LD_VAR 0 16
7347: PPUSH
7348: LD_INT 75
7350: PPUSH
7351: LD_INT 39
7353: PPUSH
7354: CALL_OW 174
// end ; wait ( 0 0$10 ) ;
7358: LD_INT 350
7360: PPUSH
7361: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7365: LD_INT 35
7367: PPUSH
7368: CALL_OW 67
// damageUnits := UnitFilter ( soldiers , [ f_tag , 1 ] ) ;
7372: LD_ADDR_VAR 0 14
7376: PUSH
7377: LD_VAR 0 16
7381: PPUSH
7382: LD_INT 120
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 72
7396: ST_TO_ADDR
// if medics and damageUnits then
7397: LD_VAR 0 15
7401: IFFALSE 7409
7403: PUSH
7404: LD_VAR 0 14
7408: AND
7409: IFFALSE 7429
// ComHeal ( medics , damageUnits [ 1 ] ) ;
7411: LD_VAR 0 15
7415: PPUSH
7416: LD_VAR 0 14
7420: PUSH
7421: LD_INT 1
7423: ARRAY
7424: PPUSH
7425: CALL_OW 128
// for i in soldiers do
7429: LD_ADDR_VAR 0 11
7433: PUSH
7434: LD_VAR 0 16
7438: PUSH
7439: FOR_IN
7440: IFFALSE 7645
// begin if IsDead ( i ) then
7442: LD_VAR 0 11
7446: PPUSH
7447: CALL_OW 301
7451: IFFALSE 7471
// begin soldiers := soldiers diff i ;
7453: LD_ADDR_VAR 0 16
7457: PUSH
7458: LD_VAR 0 16
7462: PUSH
7463: LD_VAR 0 11
7467: DIFF
7468: ST_TO_ADDR
// continue ;
7469: GO 7439
// end ; if GetTag ( i ) = 1 then
7471: LD_VAR 0 11
7475: PPUSH
7476: CALL_OW 110
7480: PUSH
7481: LD_INT 1
7483: EQUAL
7484: IFFALSE 7548
// begin if GetLives ( i ) = 1000 then
7486: LD_VAR 0 11
7490: PPUSH
7491: CALL_OW 256
7495: PUSH
7496: LD_INT 1000
7498: EQUAL
7499: IFFALSE 7515
// begin SetTag ( i , 0 ) ;
7501: LD_VAR 0 11
7505: PPUSH
7506: LD_INT 0
7508: PPUSH
7509: CALL_OW 109
// continue ;
7513: GO 7439
// end ; if not IsInArea ( i , healArea ) then
7515: LD_VAR 0 11
7519: PPUSH
7520: LD_VAR 0 7
7524: PPUSH
7525: CALL_OW 308
7529: NOT
7530: IFFALSE 7546
// ComMoveToArea ( i , healArea ) ;
7532: LD_VAR 0 11
7536: PPUSH
7537: LD_VAR 0 7
7541: PPUSH
7542: CALL_OW 113
// continue ;
7546: GO 7439
// end ; if GetLives ( i ) < 700 then
7548: LD_VAR 0 11
7552: PPUSH
7553: CALL_OW 256
7557: PUSH
7558: LD_INT 700
7560: LESS
7561: IFFALSE 7591
// begin SetTag ( i , 1 ) ;
7563: LD_VAR 0 11
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 109
// ComMoveToArea ( i , healArea ) ;
7575: LD_VAR 0 11
7579: PPUSH
7580: LD_VAR 0 7
7584: PPUSH
7585: CALL_OW 113
// continue ;
7589: GO 7439
// end ; target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7591: LD_ADDR_VAR 0 18
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_VAR 0 8
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PPUSH
7608: CALL_OW 69
7612: PPUSH
7613: LD_VAR 0 11
7617: PPUSH
7618: CALL_OW 74
7622: ST_TO_ADDR
// if target then
7623: LD_VAR 0 18
7627: IFFALSE 7643
// ComAttackUnit ( i , target ) ;
7629: LD_VAR 0 11
7633: PPUSH
7634: LD_VAR 0 18
7638: PPUSH
7639: CALL_OW 115
// end ;
7643: GO 7439
7645: POP
7646: POP
// until not soldiers ;
7647: LD_VAR 0 16
7651: NOT
7652: IFFALSE 7365
// if medics then
7654: LD_VAR 0 15
7658: IFFALSE 7778
// begin repeat medics := UnitFilter ( medics , [ f_ok ] ) ;
7660: LD_ADDR_VAR 0 15
7664: PUSH
7665: LD_VAR 0 15
7669: PPUSH
7670: LD_INT 50
7672: PUSH
7673: EMPTY
7674: LIST
7675: PPUSH
7676: CALL_OW 72
7680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7681: LD_INT 35
7683: PPUSH
7684: CALL_OW 67
// for i in medics do
7688: LD_ADDR_VAR 0 11
7692: PUSH
7693: LD_VAR 0 15
7697: PUSH
7698: FOR_IN
7699: IFFALSE 7769
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
7701: LD_VAR 0 11
7705: PPUSH
7706: CALL_OW 314
7710: NOT
7711: IFFALSE 7728
7713: PUSH
7714: LD_VAR 0 11
7718: PPUSH
7719: LD_INT 4
7721: PPUSH
7722: CALL_OW 308
7726: NOT
7727: AND
7728: IFFALSE 7744
// ComMoveToArea ( i , RussianAttack ) else
7730: LD_VAR 0 11
7734: PPUSH
7735: LD_INT 4
7737: PPUSH
7738: CALL_OW 113
7742: GO 7767
// if IsInArea ( i , RussianAttack ) then
7744: LD_VAR 0 11
7748: PPUSH
7749: LD_INT 4
7751: PPUSH
7752: CALL_OW 308
7756: IFFALSE 7767
// RemoveUnit ( i ) ;
7758: LD_VAR 0 11
7762: PPUSH
7763: CALL_OW 64
7767: GO 7698
7769: POP
7770: POP
// until not medics ;
7771: LD_VAR 0 15
7775: NOT
7776: IFFALSE 7660
// end ; end ; end_of_file
7778: LD_VAR 0 10
7782: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
7783: LD_INT 0
7785: PPUSH
7786: PPUSH
7787: PPUSH
7788: PPUSH
7789: PPUSH
// InGameOn ;
7790: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
7794: LD_ADDR_VAR 0 3
7798: PUSH
7799: LD_EXP 8
7803: PUSH
7804: LD_EXP 9
7808: PUSH
7809: LD_EXP 10
7813: PUSH
7814: LD_EXP 11
7818: PUSH
7819: LD_EXP 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
7831: LD_ADDR_VAR 0 4
7835: PUSH
7836: LD_INT 46
7838: PUSH
7839: LD_INT 45
7841: PUSH
7842: LD_INT 44
7844: PUSH
7845: LD_INT 43
7847: PUSH
7848: LD_INT 42
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
7858: LD_ADDR_VAR 0 5
7862: PUSH
7863: LD_INT 14
7865: PUSH
7866: LD_INT 12
7868: PUSH
7869: LD_INT 10
7871: PUSH
7872: LD_INT 8
7874: PUSH
7875: LD_INT 6
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
7885: LD_EXP 11
7889: PPUSH
7890: LD_INT 31
7892: PPUSH
7893: LD_INT 59
7895: PPUSH
7896: LD_INT 19
7898: PPUSH
7899: LD_INT 5
7901: PPUSH
7902: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
7906: LD_INT 32
7908: PPUSH
7909: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
7913: LD_INT 32
7915: PPUSH
7916: LD_INT 51
7918: PPUSH
7919: LD_INT 26
7921: PPUSH
7922: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
7926: LD_INT 32
7928: PPUSH
7929: LD_INT 53
7931: PPUSH
7932: LD_INT 23
7934: PPUSH
7935: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
7939: LD_INT 32
7941: PPUSH
7942: LD_INT 52
7944: PPUSH
7945: LD_INT 19
7947: PPUSH
7948: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7952: LD_INT 35
7954: PPUSH
7955: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
7959: LD_INT 32
7961: PPUSH
7962: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
7966: LD_INT 32
7968: PPUSH
7969: CALL_OW 250
7973: PUSH
7974: LD_INT 52
7976: EQUAL
7977: IFFALSE 7992
7979: PUSH
7980: LD_INT 32
7982: PPUSH
7983: CALL_OW 251
7987: PUSH
7988: LD_INT 19
7990: EQUAL
7991: AND
7992: IFFALSE 7952
// ComExitVehicle ( JMM ) ;
7994: LD_EXP 1
7998: PPUSH
7999: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8003: LD_EXP 7
8007: PPUSH
8008: LD_EXP 1
8012: PPUSH
8013: CALL_OW 119
// wait ( 0 0$01 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8024: LD_EXP 1
8028: PPUSH
8029: LD_INT 46
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8039: LD_EXP 1
8043: PPUSH
8044: LD_EXP 7
8048: PPUSH
8049: CALL_OW 179
// wait ( 0 0$4 ) ;
8053: LD_INT 140
8055: PPUSH
8056: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8060: LD_EXP 1
8064: PPUSH
8065: LD_STRING D1-JMM-1
8067: PPUSH
8068: CALL_OW 88
// if not dialogue_skipped then
8072: LD_OWVAR 59
8076: NOT
8077: IFFALSE 8744
// begin for i := 1 to gammaSquad do
8079: LD_ADDR_VAR 0 2
8083: PUSH
8084: DOUBLE
8085: LD_INT 1
8087: DEC
8088: ST_TO_ADDR
8089: LD_VAR 0 3
8093: PUSH
8094: FOR_TO
8095: IFFALSE 8156
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8097: LD_VAR 0 3
8101: PUSH
8102: LD_VAR 0 2
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_VAR 0 2
8117: ARRAY
8118: PPUSH
8119: LD_VAR 0 5
8123: PUSH
8124: LD_VAR 0 2
8128: ARRAY
8129: PPUSH
8130: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8134: LD_VAR 0 3
8138: PUSH
8139: LD_VAR 0 2
8143: ARRAY
8144: PPUSH
8145: LD_EXP 1
8149: PPUSH
8150: CALL_OW 179
// end ;
8154: GO 8094
8156: POP
8157: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8158: LD_EXP 4
8162: PPUSH
8163: LD_INT 41
8165: PPUSH
8166: LD_INT 4
8168: PPUSH
8169: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8173: LD_EXP 4
8177: PPUSH
8178: LD_EXP 1
8182: PPUSH
8183: CALL_OW 179
// if Lisa = false and Bobby then
8187: LD_EXP 4
8191: PUSH
8192: LD_INT 0
8194: EQUAL
8195: IFFALSE 8203
8197: PUSH
8198: LD_EXP 2
8202: AND
8203: IFFALSE 8234
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8205: LD_EXP 2
8209: PPUSH
8210: LD_INT 41
8212: PPUSH
8213: LD_INT 4
8215: PPUSH
8216: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8220: LD_EXP 2
8224: PPUSH
8225: LD_EXP 1
8229: PPUSH
8230: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8234: LD_EXP 4
8238: PUSH
8239: LD_INT 0
8241: EQUAL
8242: IFFALSE 8254
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_INT 0
8252: EQUAL
8253: AND
8254: IFFALSE 8262
8256: PUSH
8257: LD_EXP 3
8261: AND
8262: IFFALSE 8293
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8264: LD_EXP 3
8268: PPUSH
8269: LD_INT 41
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8279: LD_EXP 3
8283: PPUSH
8284: LD_EXP 1
8288: PPUSH
8289: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8293: LD_EXP 4
8297: PUSH
8298: LD_INT 0
8300: EQUAL
8301: IFFALSE 8313
8303: PUSH
8304: LD_EXP 2
8308: PUSH
8309: LD_INT 0
8311: EQUAL
8312: AND
8313: IFFALSE 8325
8315: PUSH
8316: LD_EXP 3
8320: PUSH
8321: LD_INT 0
8323: EQUAL
8324: AND
8325: IFFALSE 8356
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8327: LD_EXP 6
8331: PPUSH
8332: LD_INT 41
8334: PPUSH
8335: LD_INT 4
8337: PPUSH
8338: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8342: LD_EXP 6
8346: PPUSH
8347: LD_EXP 1
8351: PPUSH
8352: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8356: LD_EXP 7
8360: PPUSH
8361: LD_STRING D1-Brown-1
8363: PPUSH
8364: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8368: LD_EXP 1
8372: PPUSH
8373: LD_STRING D1-JMM-2
8375: PPUSH
8376: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8380: LD_EXP 7
8384: PPUSH
8385: LD_STRING D1-Brown-2
8387: PPUSH
8388: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8392: LD_EXP 1
8396: PPUSH
8397: LD_EXP 9
8401: PPUSH
8402: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8406: LD_EXP 9
8410: PPUSH
8411: LD_STRING D1-FSol1-2
8413: PPUSH
8414: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8418: LD_EXP 1
8422: PPUSH
8423: LD_EXP 8
8427: PPUSH
8428: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8432: LD_EXP 8
8436: PPUSH
8437: LD_STRING D1-Sol2-2
8439: PPUSH
8440: CALL_OW 88
// if Lisa then
8444: LD_EXP 4
8448: IFFALSE 8488
// begin ComTurnUnit ( JMM , Lisa ) ;
8450: LD_EXP 1
8454: PPUSH
8455: LD_EXP 4
8459: PPUSH
8460: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8464: LD_EXP 4
8468: PPUSH
8469: LD_STRING D1-Lisa-2
8471: PPUSH
8472: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8476: LD_EXP 1
8480: PPUSH
8481: LD_STRING D1-JMM-3
8483: PPUSH
8484: CALL_OW 88
// end ; if Bobby then
8488: LD_EXP 2
8492: IFFALSE 8532
// begin ComTurnUnit ( JMM , Bobby ) ;
8494: LD_EXP 1
8498: PPUSH
8499: LD_EXP 2
8503: PPUSH
8504: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
8508: LD_EXP 2
8512: PPUSH
8513: LD_STRING D1-Bobby-2
8515: PPUSH
8516: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8520: LD_EXP 1
8524: PPUSH
8525: LD_STRING D1-JMM-3
8527: PPUSH
8528: CALL_OW 88
// end ; if Cyrus then
8532: LD_EXP 3
8536: IFFALSE 8576
// begin ComTurnUnit ( JMM , Cyrus ) ;
8538: LD_EXP 1
8542: PPUSH
8543: LD_EXP 3
8547: PPUSH
8548: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
8552: LD_EXP 3
8556: PPUSH
8557: LD_STRING D1-Cyrus-2
8559: PPUSH
8560: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8564: LD_EXP 1
8568: PPUSH
8569: LD_STRING D1-JMM-3
8571: PPUSH
8572: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
8576: LD_EXP 1
8580: PPUSH
8581: LD_EXP 7
8585: PPUSH
8586: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
8590: LD_EXP 1
8594: PPUSH
8595: LD_STRING D1-JMM-3a
8597: PPUSH
8598: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
8602: LD_EXP 7
8606: PPUSH
8607: LD_INT 38
8609: PPUSH
8610: LD_INT 5
8612: PPUSH
8613: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
8617: LD_EXP 7
8621: PPUSH
8622: LD_EXP 1
8626: PPUSH
8627: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
8631: LD_EXP 1
8635: PPUSH
8636: LD_INT 40
8638: PPUSH
8639: LD_INT 7
8641: PPUSH
8642: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8646: LD_EXP 1
8650: PPUSH
8651: LD_EXP 7
8655: PPUSH
8656: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
8660: LD_EXP 7
8664: PPUSH
8665: LD_STRING D1-Brown-3
8667: PPUSH
8668: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
8672: LD_EXP 14
8676: PPUSH
8677: LD_STRING D1-Har-3
8679: PPUSH
8680: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
8684: LD_EXP 1
8688: PPUSH
8689: LD_STRING D1-JMM-4
8691: PPUSH
8692: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
8696: LD_EXP 14
8700: PPUSH
8701: LD_STRING D1-Har-4
8703: PPUSH
8704: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
8708: LD_EXP 1
8712: PPUSH
8713: LD_STRING D1-JMM-5
8715: PPUSH
8716: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
8720: LD_EXP 14
8724: PPUSH
8725: LD_STRING D1-Har-5
8727: PPUSH
8728: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
8732: LD_EXP 1
8736: PPUSH
8737: LD_STRING D1-JMM-6
8739: PPUSH
8740: CALL_OW 88
// end ; InGameOff ;
8744: CALL_OW 9
// PrepareRussianConvoy ;
8748: CALL 3396 0 0
// ChangeMissionObjectives ( M1 ) ;
8752: LD_STRING M1
8754: PPUSH
8755: CALL_OW 337
// SaveForQuickRestart ;
8759: CALL_OW 22
// timerStatus = 1 ;
8763: LD_ADDR_EXP 29
8767: PUSH
8768: LD_INT 1
8770: ST_TO_ADDR
// startTimer = 1 ;
8771: LD_ADDR_EXP 30
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// bonusAvalaible = 1 ;
8779: LD_ADDR_EXP 44
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// wait ( 0 0$3 ) ;
8787: LD_INT 105
8789: PPUSH
8790: CALL_OW 67
// DialogueOn ;
8794: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
8798: LD_EXP 12
8802: PPUSH
8803: LD_STRING D9-Mech1-1
8805: PPUSH
8806: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D9-JMM-1
8817: PPUSH
8818: CALL_OW 88
// DialogueOff ;
8822: CALL_OW 7
// end ;
8826: LD_VAR 0 1
8830: RET
// export function JMMTraitor ; begin
8831: LD_INT 0
8833: PPUSH
// wait ( 0 0$2 ) ;
8834: LD_INT 70
8836: PPUSH
8837: CALL_OW 67
// DialogueOn ;
8841: CALL_OW 6
// InGameOn ;
8845: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
8849: LD_EXP 14
8853: PPUSH
8854: LD_STRING D8-Har-1b
8856: PPUSH
8857: CALL_OW 94
// YouLost ( LostCommand ) ;
8861: LD_STRING LostCommand
8863: PPUSH
8864: CALL_OW 104
// InGameOff ;
8868: CALL_OW 9
// DialogueOff ;
8872: CALL_OW 7
// end ;
8876: LD_VAR 0 1
8880: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
8881: LD_INT 47
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: CALL_OW 321
8891: PUSH
8892: LD_INT 2
8894: EQUAL
8895: IFFALSE 8904
8897: PUSH
8898: LD_EXP 31
8902: NOT
8903: AND
8904: IFFALSE 8954
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 1
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 21
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 30
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 57
8939: PUSH
8940: EMPTY
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: AND
8954: IFFALSE 9188
8956: GO 8958
8958: DISABLE
// begin factoryDialog := true ;
8959: LD_ADDR_EXP 31
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// if IsOk ( Campell ) then
8967: LD_EXP 12
8971: PPUSH
8972: CALL_OW 302
8976: IFFALSE 8992
// Say ( Campell , D10-Mech1-1 ) else
8978: LD_EXP 12
8982: PPUSH
8983: LD_STRING D10-Mech1-1
8985: PPUSH
8986: CALL_OW 88
8990: GO 9188
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
8992: LD_INT 22
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 25
9014: PUSH
9015: LD_INT 3
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 26
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 69
9042: PUSH
9043: LD_EXP 1
9047: PUSH
9048: EMPTY
9049: LIST
9050: DIFF
9051: IFFALSE 9125
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9053: LD_INT 22
9055: PUSH
9056: LD_INT 1
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 21
9065: PUSH
9066: LD_INT 1
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 25
9075: PUSH
9076: LD_INT 3
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 26
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 69
9103: PUSH
9104: LD_EXP 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: DIFF
9112: PPUSH
9113: LD_STRING D10-Mech1-1
9115: PPUSH
9116: LD_STRING D10-Mech1-1
9118: PPUSH
9119: CALL 4617 0 3
9123: GO 9188
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9125: LD_INT 22
9127: PUSH
9128: LD_INT 1
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: LD_INT 21
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 26
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: CALL_OW 69
9168: PUSH
9169: LD_EXP 1
9173: PUSH
9174: EMPTY
9175: LIST
9176: DIFF
9177: PPUSH
9178: LD_STRING D10-Mech1-1
9180: PPUSH
9181: LD_STRING D10-Mech1-1
9183: PPUSH
9184: CALL 4617 0 3
// end ; end ;
9188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9189: LD_INT 22
9191: PUSH
9192: LD_INT 1
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: IFFALSE 9229
9219: PUSH
9220: LD_EXP 32
9224: PUSH
9225: LD_INT 0
9227: EQUAL
9228: AND
9229: IFFALSE 9465
9231: GO 9233
9233: DISABLE
// begin if IsOk ( Claptopn ) then
9234: LD_EXP 11
9238: PPUSH
9239: CALL_OW 302
9243: IFFALSE 9259
// Say ( Claptopn , D9b-Eng1-1 ) else
9245: LD_EXP 11
9249: PPUSH
9250: LD_STRING D9b-Eng1-1
9252: PPUSH
9253: CALL_OW 88
9257: GO 9451
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9259: LD_INT 22
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 26
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: PPUSH
9305: CALL_OW 69
9309: PUSH
9310: LD_EXP 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: DIFF
9318: IFFALSE 9392
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9320: LD_INT 22
9322: PUSH
9323: LD_INT 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 21
9332: PUSH
9333: LD_INT 1
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 2
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: LD_INT 1
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PPUSH
9366: CALL_OW 69
9370: PUSH
9371: LD_EXP 1
9375: PUSH
9376: EMPTY
9377: LIST
9378: DIFF
9379: PPUSH
9380: LD_STRING D9b-Eng1-1
9382: PPUSH
9383: LD_STRING D9b-Eng1-11
9385: PPUSH
9386: CALL 4617 0 3
9390: GO 9451
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9392: LD_INT 22
9394: PUSH
9395: LD_INT 1
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 21
9404: PUSH
9405: LD_INT 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 26
9414: PUSH
9415: LD_INT 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: PUSH
9432: LD_EXP 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: DIFF
9440: PPUSH
9441: LD_STRING D9b-Eng1-1
9443: PPUSH
9444: LD_STRING D9b-Eng1-1
9446: PPUSH
9447: CALL 4617 0 3
// end ; if energyVDialog = 0 then
9451: LD_EXP 33
9455: PUSH
9456: LD_INT 0
9458: EQUAL
9459: IFFALSE 9465
// EnergyDialog ;
9461: CALL 5022 0 0
// end ;
9465: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9466: LD_EXP 34
9470: PUSH
9471: LD_INT 1
9473: EQUAL
9474: IFFALSE 9486
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 1
9484: EQUAL
9485: AND
9486: IFFALSE 9498
9488: GO 9490
9490: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9491: LD_STRING M1a
9493: PPUSH
9494: CALL_OW 337
9498: END
// every 3 3$0 do
9499: GO 9501
9501: DISABLE
// PrepareFirstAttack ;
9502: CALL 4208 0 0
9506: END
// every 0 0$2 trigger UnitFilter ( firstAttackGroup , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9507: LD_EXP 51
9511: PPUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 24
9527: PUSH
9528: LD_INT 250
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 72
9547: PUSH
9548: LD_INT 0
9550: GREATER
9551: IFFALSE 9563
9553: PUSH
9554: LD_EXP 23
9558: PUSH
9559: LD_INT 1
9561: EQUAL
9562: AND
9563: IFFALSE 9840
9565: GO 9567
9567: DISABLE
9568: LD_INT 0
9570: PPUSH
// begin firstRussianAttack := 2 ;
9571: LD_ADDR_EXP 23
9575: PUSH
9576: LD_INT 2
9578: ST_TO_ADDR
// ComMoveXY ( firstAttackGroup , 125 , 98 ) ;
9579: LD_EXP 51
9583: PPUSH
9584: LD_INT 125
9586: PPUSH
9587: LD_INT 98
9589: PPUSH
9590: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
9594: LD_INT 22
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 21
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 69
9622: PUSH
9623: LD_EXP 1
9627: PUSH
9628: LD_EXP 7
9632: PUSH
9633: LD_EXP 4
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: DIFF
9643: PPUSH
9644: LD_STRING DAtt1-Sol1-1
9646: PPUSH
9647: LD_STRING DAtt1-FSol1-1
9649: PPUSH
9650: CALL 4617 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
9654: LD_EXP 1
9658: PPUSH
9659: LD_STRING DAtt1-JMM-1
9661: PPUSH
9662: CALL_OW 88
// if Lisa then
9666: LD_EXP 4
9670: IFFALSE 9686
// Say ( Lisa , DAtt1a-Lisa-1 ) else
9672: LD_EXP 4
9676: PPUSH
9677: LD_STRING DAtt1a-Lisa-1
9679: PPUSH
9680: CALL_OW 88
9684: GO 9757
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
9686: LD_INT 22
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 26
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: PPUSH
9721: CALL_OW 69
9725: PUSH
9726: LD_EXP 1
9730: PUSH
9731: LD_EXP 7
9735: PUSH
9736: LD_EXP 4
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: DIFF
9746: PPUSH
9747: LD_STRING DAtt1a-Sol1-1
9749: PPUSH
9750: LD_STRING DAtt1-FSol1-1
9752: PPUSH
9753: CALL 4617 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
9757: LD_EXP 1
9761: PPUSH
9762: LD_STRING DAtt1a-JMM-1
9764: PPUSH
9765: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
9769: LD_INT 22
9771: PUSH
9772: LD_INT 1
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 26
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: PUSH
9809: LD_EXP 1
9813: PUSH
9814: LD_EXP 7
9818: PUSH
9819: LD_EXP 4
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: DIFF
9829: PPUSH
9830: LD_STRING DAtt1b-Sol1-1
9832: PPUSH
9833: LD_STRING DAtt1a-Sol1-1
9835: PPUSH
9836: CALL 4617 0 3
// end ;
9840: PPOPN 1
9842: END
// every 0 0$1 trigger firstRussianAttack > 1 and UnitFilter ( firstAttackGroup , [ [ f_inarea , RussianEscape ] , [ f_type , unit_human ] ] ) do var i ;
9843: LD_EXP 23
9847: PUSH
9848: LD_INT 1
9850: GREATER
9851: IFFALSE 9888
9853: PUSH
9854: LD_EXP 51
9858: PPUSH
9859: LD_INT 95
9861: PUSH
9862: LD_INT 5
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 72
9887: AND
9888: IFFALSE 9933
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
// begin for i in UnitFilter ( firstAttackGroup , [ f_ok ] ) do
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_EXP 51
9905: PPUSH
9906: LD_INT 50
9908: PUSH
9909: EMPTY
9910: LIST
9911: PPUSH
9912: CALL_OW 72
9916: PUSH
9917: FOR_IN
9918: IFFALSE 9931
// RemoveUnit ( i ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: CALL_OW 64
9929: GO 9917
9931: POP
9932: POP
// end ;
9933: PPOPN 1
9935: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
9936: LD_EXP 28
9940: PUSH
9941: LD_INT 0
9943: EQUAL
9944: IFFALSE 10025
9946: GO 9948
9948: DISABLE
// begin timerStatus = 4 ;
9949: LD_ADDR_EXP 29
9953: PUSH
9954: LD_INT 4
9956: ST_TO_ADDR
// DialogueOn ;
9957: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
9961: LD_EXP 13
9965: PPUSH
9966: LD_STRING D2-Don-1
9968: PPUSH
9969: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
9973: LD_EXP 1
9977: PPUSH
9978: LD_STRING D2-JMM-1
9980: PPUSH
9981: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
9985: LD_EXP 13
9989: PPUSH
9990: LD_STRING D2-Don-2
9992: PPUSH
9993: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9997: LD_EXP 1
10001: PPUSH
10002: LD_STRING D2-JMM-2
10004: PPUSH
10005: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10009: LD_EXP 13
10013: PPUSH
10014: LD_STRING D2-Don-3
10016: PPUSH
10017: CALL_OW 94
// DialogueOff ;
10021: CALL_OW 7
// end ;
10025: END
// every 12 12$0 do var tmp ;
10026: GO 10028
10028: DISABLE
10029: LD_INT 0
10031: PPUSH
// begin PrepareDonaldsonArmy ;
10032: CALL 1179 0 0
// CenterNowOnUnits ( Donaldson ) ;
10036: LD_EXP 13
10040: PPUSH
10041: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10045: LD_INT 22
10047: PUSH
10048: LD_INT 6
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: NOT
10060: IFFALSE 10076
// begin wait ( 3 ) ;
10062: LD_INT 3
10064: PPUSH
10065: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10069: LD_STRING ACH_BASE
10071: PPUSH
10072: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10076: LD_ADDR_VAR 0 1
10080: PUSH
10081: LD_INT 22
10083: PUSH
10084: LD_INT 4
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 21
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 26
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PUSH
10121: LD_EXP 5
10125: PUSH
10126: EMPTY
10127: LIST
10128: DIFF
10129: ST_TO_ADDR
// DialogueOn ;
10130: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: LD_VAR 0 1
10148: PPUSH
10149: LD_STRING D3-Sol1-1
10151: PPUSH
10152: LD_STRING D3-Sol1-1
10154: PPUSH
10155: CALL 4617 0 3
10159: DIFF
10160: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10161: LD_VAR 0 1
10165: PPUSH
10166: LD_STRING D3-Sol2-1
10168: PPUSH
10169: LD_STRING D3-Sol2-1
10171: PPUSH
10172: CALL 4617 0 3
// if Frank then
10176: LD_EXP 5
10180: IFFALSE 10194
// Say ( Frank , D3-Frank-1 ) ;
10182: LD_EXP 5
10186: PPUSH
10187: LD_STRING D3-Frank-1
10189: PPUSH
10190: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10194: LD_EXP 13
10198: PPUSH
10199: LD_STRING D3-Don-1
10201: PPUSH
10202: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10206: LD_EXP 13
10210: PPUSH
10211: LD_STRING D3-Don-1a
10213: PPUSH
10214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10218: LD_EXP 1
10222: PPUSH
10223: LD_STRING D3-JMM-1
10225: PPUSH
10226: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10230: LD_EXP 13
10234: PPUSH
10235: LD_STRING D3-Don-2
10237: PPUSH
10238: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10242: LD_INT 22
10244: PUSH
10245: LD_INT 6
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 21
10254: PUSH
10255: LD_INT 1
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 69
10270: IFFALSE 10408
// begin Say ( JMM , D3-JMM-2 ) ;
10272: LD_EXP 1
10276: PPUSH
10277: LD_STRING D3-JMM-2
10279: PPUSH
10280: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10284: LD_EXP 13
10288: PPUSH
10289: LD_STRING D3-Don-3
10291: PPUSH
10292: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10296: LD_EXP 1
10300: PPUSH
10301: LD_STRING D3-JMM-3
10303: PPUSH
10304: CALL_OW 88
// if IsOK ( Frank ) then
10308: LD_EXP 5
10312: PPUSH
10313: CALL_OW 302
10317: IFFALSE 10331
// Say ( Frank , D3-Frank-3 ) ;
10319: LD_EXP 5
10323: PPUSH
10324: LD_STRING D3-Frank-3
10326: PPUSH
10327: CALL_OW 88
// DialogueOff ;
10331: CALL_OW 7
// if IsOk ( Frank ) then
10335: LD_EXP 5
10339: PPUSH
10340: CALL_OW 302
10344: IFFALSE 10406
// begin SetSide ( Frank , 0 ) ;
10346: LD_EXP 5
10350: PPUSH
10351: LD_INT 0
10353: PPUSH
10354: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10358: LD_EXP 5
10362: PPUSH
10363: LD_INT 12
10365: PPUSH
10366: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10370: LD_EXP 5
10374: PPUSH
10375: LD_STRING 04t_Frank
10377: PPUSH
10378: CALL_OW 38
// wait ( 0 0$3 ) ;
10382: LD_INT 105
10384: PPUSH
10385: CALL_OW 67
// frankScoutBase = 1 ;
10389: LD_ADDR_EXP 25
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10397: LD_EXP 5
10401: PPUSH
10402: CALL_OW 64
// end ; end else
10406: GO 10495
// begin Say ( JMM , D3-JMM-4 ) ;
10408: LD_EXP 1
10412: PPUSH
10413: LD_STRING D3-JMM-4
10415: PPUSH
10416: CALL_OW 88
// DialogueOff ;
10420: CALL_OW 7
// if IsOk ( Frank ) then
10424: LD_EXP 5
10428: PPUSH
10429: CALL_OW 302
10433: IFFALSE 10495
// begin SetSide ( Frank , 0 ) ;
10435: LD_EXP 5
10439: PPUSH
10440: LD_INT 0
10442: PPUSH
10443: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10447: LD_EXP 5
10451: PPUSH
10452: LD_INT 12
10454: PPUSH
10455: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10459: LD_EXP 5
10463: PPUSH
10464: LD_STRING 04t_Frank
10466: PPUSH
10467: CALL_OW 38
// wait ( 0 0$3 ) ;
10471: LD_INT 105
10473: PPUSH
10474: CALL_OW 67
// frankScoutBase = 1 ;
10478: LD_ADDR_EXP 25
10482: PUSH
10483: LD_INT 1
10485: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10486: LD_EXP 5
10490: PPUSH
10491: CALL_OW 64
// end ; end ; end ;
10495: PPOPN 1
10497: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
10498: LD_EXP 13
10502: PPUSH
10503: CALL_OW 255
10507: PUSH
10508: LD_INT 4
10510: EQUAL
10511: IFFALSE 10524
10513: PUSH
10514: LD_EXP 13
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10729
10526: GO 10528
10528: DISABLE
10529: LD_INT 0
10531: PPUSH
10532: PPUSH
// begin wait ( 5 5$00 ) ;
10533: LD_INT 10500
10535: PPUSH
10536: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
10540: LD_EXP 13
10544: PPUSH
10545: CALL_OW 255
10549: PUSH
10550: LD_INT 1
10552: EQUAL
10553: IFTRUE 10566
10555: PUSH
10556: LD_EXP 13
10560: PPUSH
10561: CALL_OW 301
10565: OR
10566: IFFALSE 10570
// exit ;
10568: GO 10729
// SayRadio ( Donaldson , D3b-Don-1 ) ;
10570: LD_EXP 13
10574: PPUSH
10575: LD_STRING D3b-Don-1
10577: PPUSH
10578: CALL_OW 94
// donaldsonCoopAttack = 1 ;
10582: LD_ADDR_EXP 41
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
10590: LD_ADDR_VAR 0 2
10594: PUSH
10595: LD_INT 22
10597: PUSH
10598: LD_INT 4
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 69
10609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10610: LD_INT 35
10612: PPUSH
10613: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
10617: LD_VAR 0 2
10621: NOT
10622: IFTRUE 10654
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_INT 6
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 101
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: OR
10654: IFFALSE 10610
// if not tmp then
10656: LD_VAR 0 2
10660: NOT
10661: IFFALSE 10665
// exit ;
10663: GO 10729
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
10665: LD_ADDR_VAR 0 1
10669: PUSH
10670: LD_INT 22
10672: PUSH
10673: LD_INT 4
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: PUSH
10685: LD_EXP 5
10689: DIFF
10690: PUSH
10691: FOR_IN
10692: IFFALSE 10708
// SetSide ( i , 1 ) ;
10694: LD_VAR 0 1
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 235
10706: GO 10691
10708: POP
10709: POP
// if IsLive ( Donaldson ) then
10710: LD_EXP 13
10714: PPUSH
10715: CALL_OW 300
10719: IFFALSE 10729
// saveDonaldson := 1 ;
10721: LD_ADDR_EXP 24
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// end ;
10729: PPOPN 2
10731: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
10732: LD_EXP 13
10736: PPUSH
10737: CALL_OW 302
10741: IFFALSE 10750
10743: PUSH
10744: LD_EXP 24
10748: NOT
10749: AND
10750: IFFALSE 10759
10752: PUSH
10753: LD_EXP 41
10757: NOT
10758: AND
10759: IFFALSE 10802
10761: PUSH
10762: LD_INT 26
10764: PPUSH
10765: LD_INT 22
10767: PUSH
10768: LD_INT 1
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 70
10779: IFTRUE 10801
10781: PUSH
10782: LD_EXP 13
10786: PPUSH
10787: LD_EXP 1
10791: PPUSH
10792: CALL_OW 296
10796: PUSH
10797: LD_INT 6
10799: LESS
10800: OR
10801: AND
10802: IFFALSE 10857
10804: GO 10806
10806: DISABLE
10807: LD_INT 0
10809: PPUSH
// begin saveDonaldson := 1 ;
10810: LD_ADDR_EXP 24
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10818: LD_ADDR_VAR 0 1
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_INT 4
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 69
10837: PUSH
10838: FOR_IN
10839: IFFALSE 10855
// SetSide ( i , 1 ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: LD_INT 1
10848: PPUSH
10849: CALL_OW 235
10853: GO 10838
10855: POP
10856: POP
// end ;
10857: PPOPN 1
10859: END
// every 0 0$1 trigger frankScoutBase do
10860: LD_EXP 25
10864: IFFALSE 11231
10866: GO 10868
10868: DISABLE
// begin wait ( 2 2$30 ) ;
10869: LD_INT 5250
10871: PPUSH
10872: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10876: LD_INT 35
10878: PPUSH
10879: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
10883: LD_INT 81
10885: PUSH
10886: LD_INT 4
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 92
10895: PUSH
10896: LD_INT 84
10898: PUSH
10899: LD_INT 28
10901: PUSH
10902: LD_INT 22
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 69
10919: NOT
10920: IFFALSE 10876
// uc_side = 4 ;
10922: LD_ADDR_OWVAR 20
10926: PUSH
10927: LD_INT 4
10929: ST_TO_ADDR
// uc_nation = 1 ;
10930: LD_ADDR_OWVAR 21
10934: PUSH
10935: LD_INT 1
10937: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
10938: LD_ADDR_EXP 5
10942: PUSH
10943: LD_STRING 04t_Frank
10945: PPUSH
10946: CALL_OW 34
10950: ST_TO_ADDR
// if not Frank then
10951: LD_EXP 5
10955: NOT
10956: IFFALSE 10960
// exit ;
10958: GO 11231
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
10960: LD_EXP 5
10964: PPUSH
10965: LD_INT 13
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
10975: LD_INT 35
10977: PPUSH
10978: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
10982: LD_EXP 1
10986: PPUSH
10987: CALL_OW 310
10991: NOT
10992: IFFALSE 11012
10994: PUSH
10995: LD_EXP 1
10999: PPUSH
11000: LD_INT 4
11002: PPUSH
11003: CALL_OW 296
11007: PUSH
11008: LD_INT 20
11010: LESS
11011: AND
11012: IFFALSE 11045
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11014: LD_EXP 5
11018: PPUSH
11019: LD_EXP 1
11023: PPUSH
11024: CALL_OW 250
11028: PPUSH
11029: LD_EXP 1
11033: PPUSH
11034: CALL_OW 251
11038: PPUSH
11039: CALL_OW 111
11043: GO 11060
// ComMoveXY ( Frank , 51 , 15 ) ;
11045: LD_EXP 5
11049: PPUSH
11050: LD_INT 51
11052: PPUSH
11053: LD_INT 15
11055: PPUSH
11056: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11060: LD_EXP 5
11064: PPUSH
11065: LD_EXP 1
11069: PPUSH
11070: CALL_OW 296
11074: PUSH
11075: LD_INT 10
11077: LESS
11078: IFFALSE 10975
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11080: LD_EXP 1
11084: PUSH
11085: LD_EXP 5
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PPUSH
11094: CALL_OW 87
// DialogueOn ;
11098: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11102: LD_EXP 5
11106: PPUSH
11107: LD_STRING D3a-Frank-1
11109: PPUSH
11110: CALL_OW 88
// if Lisa then
11114: LD_EXP 4
11118: IFFALSE 11168
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11120: LD_EXP 4
11124: PPUSH
11125: LD_STRING D3a-Lisa-1
11127: PPUSH
11128: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11132: LD_EXP 5
11136: PPUSH
11137: LD_STRING D3a-Frank-2
11139: PPUSH
11140: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11144: LD_EXP 4
11148: PPUSH
11149: LD_STRING D3a-Lisa-2
11151: PPUSH
11152: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11156: LD_EXP 5
11160: PPUSH
11161: LD_STRING D3a-Frank-3
11163: PPUSH
11164: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11168: LD_EXP 1
11172: PPUSH
11173: LD_STRING D3a-JMM-3
11175: PPUSH
11176: CALL_OW 88
// DialogueOff ;
11180: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11184: LD_EXP 5
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 235
// InGameOn ;
11196: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11200: LD_INT 1
11202: PPUSH
11203: LD_INT 7
11205: PPUSH
11206: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11210: LD_INT 93
11212: PPUSH
11213: LD_INT 91
11215: PPUSH
11216: CALL_OW 84
// wait ( 0 0$5 ) ;
11220: LD_INT 175
11222: PPUSH
11223: CALL_OW 67
// InGameOff ;
11227: CALL_OW 9
// end ;
11231: END
// every 12 12$0 trigger Difficulty > 1 do
11232: LD_OWVAR 67
11236: PUSH
11237: LD_INT 1
11239: GREATER
11240: IFFALSE 11264
11242: GO 11244
11244: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11245: LD_INT 24
11247: PPUSH
11248: LD_INT 24
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: LD_INT 53
11259: PPUSH
11260: CALL_OW 185
11264: END
// every 18 18$0 do
11265: GO 11267
11267: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11268: LD_EXP 14
11272: PPUSH
11273: LD_STRING D4-Har-1
11275: PPUSH
11276: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11280: LD_EXP 1
11284: PPUSH
11285: LD_STRING D4-JMM-1
11287: PPUSH
11288: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11292: LD_EXP 14
11296: PPUSH
11297: LD_STRING D4-Har-2
11299: PPUSH
11300: CALL_OW 94
// case Query ( Q1 ) of 1 :
11304: LD_STRING Q1
11306: PPUSH
11307: CALL_OW 97
11311: PUSH
11312: LD_INT 1
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11379
11320: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11321: LD_EXP 1
11325: PPUSH
11326: LD_STRING D5-JMM-1
11328: PPUSH
11329: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11333: LD_EXP 14
11337: PPUSH
11338: LD_STRING D5-Har-1
11340: PPUSH
11341: CALL_OW 94
// timeToSupport = 10 10$0 ;
11345: LD_ADDR_EXP 28
11349: PUSH
11350: LD_INT 21000
11352: ST_TO_ADDR
// timerStatus = 2 ;
11353: LD_ADDR_EXP 29
11357: PUSH
11358: LD_INT 2
11360: ST_TO_ADDR
// startTimer = 1 ;
11361: LD_ADDR_EXP 30
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// harrAnswer = 1 ;
11369: LD_ADDR_EXP 26
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// end ; 2 :
11377: GO 11514
11379: LD_INT 2
11381: DOUBLE
11382: EQUAL
11383: IFTRUE 11387
11385: GO 11446
11387: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11388: LD_EXP 1
11392: PPUSH
11393: LD_STRING D5-JMM-2
11395: PPUSH
11396: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11400: LD_EXP 14
11404: PPUSH
11405: LD_STRING D5-Har-2
11407: PPUSH
11408: CALL_OW 94
// timeToSupport = 5 5$0 ;
11412: LD_ADDR_EXP 28
11416: PUSH
11417: LD_INT 10500
11419: ST_TO_ADDR
// timerStatus = 2 ;
11420: LD_ADDR_EXP 29
11424: PUSH
11425: LD_INT 2
11427: ST_TO_ADDR
// startTimer = 1 ;
11428: LD_ADDR_EXP 30
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// harrAnswer = 2 ;
11436: LD_ADDR_EXP 26
11440: PUSH
11441: LD_INT 2
11443: ST_TO_ADDR
// end ; 3 :
11444: GO 11514
11446: LD_INT 3
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11513
11454: POP
// begin Say ( JMM , D5-JMM-3 ) ;
11455: LD_EXP 1
11459: PPUSH
11460: LD_STRING D5-JMM-3
11462: PPUSH
11463: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
11467: LD_EXP 14
11471: PPUSH
11472: LD_STRING D5-Har-3
11474: PPUSH
11475: CALL_OW 94
// timeToSupport = 5 5$0 ;
11479: LD_ADDR_EXP 28
11483: PUSH
11484: LD_INT 10500
11486: ST_TO_ADDR
// timerStatus = 2 ;
11487: LD_ADDR_EXP 29
11491: PUSH
11492: LD_INT 2
11494: ST_TO_ADDR
// startTimer = 1 ;
11495: LD_ADDR_EXP 30
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// harrAnswer = 3 ;
11503: LD_ADDR_EXP 26
11507: PUSH
11508: LD_INT 3
11510: ST_TO_ADDR
// end ; end ;
11511: GO 11514
11513: POP
// end ;
11514: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
11515: LD_EXP 29
11519: PUSH
11520: LD_INT 2
11522: EQUAL
11523: IFFALSE 11535
11525: PUSH
11526: LD_EXP 28
11530: PUSH
11531: LD_INT 0
11533: EQUAL
11534: AND
11535: IFFALSE 11824
11537: GO 11539
11539: DISABLE
// begin timerStatus = 4 ;
11540: LD_ADDR_EXP 29
11544: PUSH
11545: LD_INT 4
11547: ST_TO_ADDR
// if harrAnswer = 1 then
11548: LD_EXP 26
11552: PUSH
11553: LD_INT 1
11555: EQUAL
11556: IFFALSE 11640
// begin PrepareHarrisonSupport ( 3 ) ;
11558: LD_INT 3
11560: PPUSH
11561: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11565: LD_INT 2100
11567: PPUSH
11568: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11572: LD_EXP 14
11576: PPUSH
11577: LD_STRING D7-Har-1
11579: PPUSH
11580: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11584: LD_STRING M2
11586: PPUSH
11587: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
11591: LD_ADDR_EXP 27
11595: PUSH
11596: LD_INT 31500
11598: PUSH
11599: LD_INT 10500
11601: PUSH
11602: LD_INT 8400
11604: PUSH
11605: LD_INT 6300
11607: PUSH
11608: LD_INT 6300
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_OWVAR 67
11621: ARRAY
11622: PLUS
11623: ST_TO_ADDR
// startTimer = 1 ;
11624: LD_ADDR_EXP 30
11628: PUSH
11629: LD_INT 1
11631: ST_TO_ADDR
// timerStatus = 3 ;
11632: LD_ADDR_EXP 29
11636: PUSH
11637: LD_INT 3
11639: ST_TO_ADDR
// end ; if harrAnswer = 2 then
11640: LD_EXP 26
11644: PUSH
11645: LD_INT 2
11647: EQUAL
11648: IFFALSE 11732
// begin PrepareHarrisonSupport ( 4 ) ;
11650: LD_INT 4
11652: PPUSH
11653: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11657: LD_INT 2100
11659: PPUSH
11660: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11664: LD_EXP 14
11668: PPUSH
11669: LD_STRING D7-Har-1
11671: PPUSH
11672: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11676: LD_STRING M2
11678: PPUSH
11679: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
11683: LD_ADDR_EXP 27
11687: PUSH
11688: LD_INT 33600
11690: PUSH
11691: LD_INT 10500
11693: PUSH
11694: LD_INT 8400
11696: PUSH
11697: LD_INT 6300
11699: PUSH
11700: LD_INT 5250
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: PUSH
11709: LD_OWVAR 67
11713: ARRAY
11714: PLUS
11715: ST_TO_ADDR
// startTimer = 1 ;
11716: LD_ADDR_EXP 30
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// timerStatus = 3 ;
11724: LD_ADDR_EXP 29
11728: PUSH
11729: LD_INT 3
11731: ST_TO_ADDR
// end ; if harrAnswer = 3 then
11732: LD_EXP 26
11736: PUSH
11737: LD_INT 3
11739: EQUAL
11740: IFFALSE 11824
// begin PrepareHarrisonSupport ( 5 ) ;
11742: LD_INT 5
11744: PPUSH
11745: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11749: LD_INT 2100
11751: PPUSH
11752: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11756: LD_EXP 14
11760: PPUSH
11761: LD_STRING D7-Har-1
11763: PPUSH
11764: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11768: LD_STRING M2
11770: PPUSH
11771: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
11775: LD_ADDR_EXP 27
11779: PUSH
11780: LD_INT 35700
11782: PUSH
11783: LD_INT 10500
11785: PUSH
11786: LD_INT 6300
11788: PUSH
11789: LD_INT 4200
11791: PUSH
11792: LD_INT 3150
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: LD_OWVAR 67
11805: ARRAY
11806: PLUS
11807: ST_TO_ADDR
// startTimer = 1 ;
11808: LD_ADDR_EXP 30
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// timerStatus = 3 ;
11816: LD_ADDR_EXP 29
11820: PUSH
11821: LD_INT 3
11823: ST_TO_ADDR
// end ; end ;
11824: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
11825: LD_EXP 27
11829: PUSH
11830: LD_INT 8400
11832: LESSEQUAL
11833: IFFALSE 11845
11835: PUSH
11836: LD_EXP 29
11840: PUSH
11841: LD_INT 3
11843: EQUAL
11844: AND
11845: IFFALSE 11877
11847: GO 11849
11849: DISABLE
// begin DialogueOn ;
11850: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
11854: LD_EXP 14
11858: PPUSH
11859: LD_STRING D7a-Har-1
11861: PPUSH
11862: CALL_OW 94
// DialogueOff ;
11866: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
11870: LD_STRING M2a
11872: PPUSH
11873: CALL_OW 337
// end ;
11877: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
11878: LD_EXP 27
11882: PUSH
11883: LD_INT 0
11885: LESSEQUAL
11886: IFFALSE 11898
11888: PUSH
11889: LD_EXP 29
11893: PUSH
11894: LD_INT 3
11896: EQUAL
11897: AND
11898: IFFALSE 11907
11900: PUSH
11901: LD_EXP 40
11905: NOT
11906: AND
11907: IFFALSE 12046
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
11915: LD_ADDR_VAR 0 1
11919: PUSH
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: PUSH
11935: LD_EXP 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: DIFF
11943: ST_TO_ADDR
// saveDonaldson := 2 ;
11944: LD_ADDR_EXP 24
11948: PUSH
11949: LD_INT 2
11951: ST_TO_ADDR
// DialogueOn ;
11952: CALL_OW 6
// if IsOk ( Donaldson ) then
11956: LD_EXP 13
11960: PPUSH
11961: CALL_OW 302
11965: IFFALSE 11981
// SayRadio ( Harisson , D8-Har-1 ) else
11967: LD_EXP 14
11971: PPUSH
11972: LD_STRING D8-Har-1
11974: PPUSH
11975: CALL_OW 94
11979: GO 11993
// SayRadio ( Harisson , D8-Har-1a ) ;
11981: LD_EXP 14
11985: PPUSH
11986: LD_STRING D8-Har-1a
11988: PPUSH
11989: CALL_OW 94
// DialogueOff ;
11993: CALL_OW 7
// SetSide ( tmp , 4 ) ;
11997: LD_VAR 0 1
12001: PPUSH
12002: LD_INT 4
12004: PPUSH
12005: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: LD_INT 88
12016: PPUSH
12017: LD_INT 89
12019: PPUSH
12020: CALL_OW 114
// reliefOfCommand := true ;
12024: LD_ADDR_EXP 48
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12032: LD_INT 350
12034: PPUSH
12035: CALL_OW 67
// YouLost ( LostCommand ) ;
12039: LD_STRING LostCommand
12041: PPUSH
12042: CALL_OW 104
// end ;
12046: PPOPN 1
12048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12049: LD_INT 22
12051: PUSH
12052: LD_INT 6
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 21
12061: PUSH
12062: LD_INT 1
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: PUSH
12078: LD_INT 0
12080: EQUAL
12081: IFFALSE 12093
12083: PUSH
12084: LD_EXP 20
12088: PUSH
12089: LD_INT 0
12091: EQUAL
12092: AND
12093: IFFALSE 12105
12095: PUSH
12096: LD_EXP 44
12100: PUSH
12101: LD_INT 1
12103: EQUAL
12104: AND
12105: IFFALSE 12199
12107: GO 12109
12109: DISABLE
12110: LD_INT 0
12112: PPUSH
12113: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12114: LD_ADDR_VAR 0 2
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 21
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 23
12141: PUSH
12142: LD_INT 1
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: ST_TO_ADDR
// for i in tmp do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: LD_VAR 0 2
12168: PUSH
12169: FOR_IN
12170: IFFALSE 12197
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12172: LD_VAR 0 1
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: LD_INT 4
12182: PPUSH
12183: CALL_OW 12
12187: PPUSH
12188: LD_INT 500
12190: PPUSH
12191: CALL_OW 492
12195: GO 12169
12197: POP
12198: POP
// end ; end_of_file
12199: PPOPN 2
12201: END
// every 0 0$1 trigger AIEnable do
12202: LD_EXP 37
12206: IFFALSE 12302
12208: GO 12210
12210: DISABLE
// begin enable ;
12211: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12212: LD_INT 3
12214: PPUSH
12215: LD_INT 21
12217: PPUSH
12218: LD_INT 7
12220: PPUSH
12221: CALL 6075 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12225: LD_INT 3
12227: PPUSH
12228: LD_INT 8
12230: PPUSH
12231: LD_INT 7
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL 6387 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12241: LD_EXP 20
12245: PUSH
12246: LD_INT 2
12248: EQUAL
12249: IFFALSE 12267
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 6
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: AND
12267: IFFALSE 12302
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12269: LD_INT 6
12271: PPUSH
12272: LD_EXP 21
12276: PPUSH
12277: LD_INT 6
12279: PPUSH
12280: CALL 6075 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12284: LD_INT 6
12286: PPUSH
12287: LD_INT 9
12289: PPUSH
12290: LD_INT 6
12292: PPUSH
12293: LD_EXP 22
12297: PPUSH
12298: CALL 6387 0 4
// end ; end ;
12302: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12303: LD_EXP 15
12307: PPUSH
12308: CALL_OW 310
12312: NOT
12313: IFFALSE 12324
12315: PUSH
12316: LD_INT 21
12318: PPUSH
12319: CALL_OW 302
12323: AND
12324: IFFALSE 12339
12326: PUSH
12327: LD_INT 21
12329: PPUSH
12330: CALL_OW 255
12334: PUSH
12335: LD_INT 3
12337: EQUAL
12338: AND
12339: IFFALSE 12356
12341: GO 12343
12343: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12344: LD_EXP 15
12348: PPUSH
12349: LD_INT 21
12351: PPUSH
12352: CALL_OW 120
12356: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12357: LD_INT 22
12359: PUSH
12360: LD_INT 3
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 55
12379: PUSH
12380: EMPTY
12381: LIST
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PUSH
12393: LD_INT 0
12395: EQUAL
12396: IFFALSE 12411
12398: PUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 255
12406: PUSH
12407: LD_INT 3
12409: EQUAL
12410: AND
12411: IFFALSE 12422
12413: PUSH
12414: LD_INT 21
12416: PPUSH
12417: CALL_OW 302
12421: AND
12422: IFFALSE 12437
12424: PUSH
12425: LD_INT 21
12427: PPUSH
12428: CALL_OW 255
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: AND
12437: IFFALSE 12448
12439: PUSH
12440: LD_INT 21
12442: PPUSH
12443: CALL_OW 302
12447: AND
12448: IFFALSE 12660
12450: GO 12452
12452: DISABLE
// begin enable ;
12453: ENABLE
// if Difficulty = 1 then
12454: LD_OWVAR 67
12458: PUSH
12459: LD_INT 1
12461: EQUAL
12462: IFFALSE 12506
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12464: LD_INT 3
12466: PPUSH
12467: LD_INT 24
12469: PPUSH
12470: LD_OWVAR 67
12474: PUSH
12475: LD_INT 2
12477: PLUS
12478: PPUSH
12479: LD_INT 42
12481: PUSH
12482: LD_INT 44
12484: PUSH
12485: LD_INT 43
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: PPUSH
12493: LD_INT 1
12495: PPUSH
12496: LD_INT 1
12498: PPUSH
12499: LD_INT 21
12501: PPUSH
12502: CALL 6904 0 7
// if Difficulty = 2 then
12506: LD_OWVAR 67
12510: PUSH
12511: LD_INT 2
12513: EQUAL
12514: IFFALSE 12581
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
12516: LD_INT 3
12518: PPUSH
12519: LD_INT 24
12521: PPUSH
12522: LD_OWVAR 67
12526: PUSH
12527: LD_INT 2
12529: PLUS
12530: PPUSH
12531: LD_INT 44
12533: PUSH
12534: LD_INT 44
12536: PUSH
12537: LD_INT 43
12539: PUSH
12540: LD_INT 43
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 1
12567: PPUSH
12568: LD_INT 2
12570: PPUSH
12571: CALL_OW 12
12575: ARRAY
12576: PPUSH
12577: CALL 6904 0 7
// if Difficulty >= 3 then
12581: LD_OWVAR 67
12585: PUSH
12586: LD_INT 3
12588: GREATEREQUAL
12589: IFFALSE 12660
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
12591: LD_INT 3
12593: PPUSH
12594: LD_INT 24
12596: PPUSH
12597: LD_OWVAR 67
12601: PUSH
12602: LD_INT 2
12604: PPUSH
12605: LD_INT 3
12607: PPUSH
12608: CALL_OW 12
12612: PLUS
12613: PPUSH
12614: LD_INT 44
12616: PUSH
12617: LD_INT 44
12619: PUSH
12620: LD_INT 43
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_INT 22
12636: PUSH
12637: LD_INT 23
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_INT 2
12649: PPUSH
12650: CALL_OW 12
12654: ARRAY
12655: PPUSH
12656: CALL 6904 0 7
// end ;
12660: END
// every 0 0$1 do
12661: GO 12663
12663: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
12664: LD_INT 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: LD_INT 3
12672: PPUSH
12673: CALL 5994 0 3
12677: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
12678: LD_EXP 20
12682: PUSH
12683: LD_INT 1
12685: EQUAL
12686: IFFALSE 12833
12688: GO 12690
12690: DISABLE
12691: LD_INT 0
12693: PPUSH
12694: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
12695: LD_ADDR_VAR 0 2
12699: PUSH
12700: LD_INT 22
12702: PUSH
12703: LD_INT 6
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 34
12722: PUSH
12723: LD_INT 51
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: PPUSH
12735: CALL_OW 69
12739: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
12740: LD_VAR 0 2
12744: PUSH
12745: LD_INT 1
12747: ARRAY
12748: PPUSH
12749: LD_EXP 21
12753: PPUSH
12754: CALL_OW 250
12758: PUSH
12759: LD_INT 5
12761: MINUS
12762: PPUSH
12763: LD_EXP 21
12767: PPUSH
12768: CALL_OW 251
12772: PUSH
12773: LD_INT 5
12775: MINUS
12776: PPUSH
12777: CALL_OW 111
// wait ( 0 0$5 ) ;
12781: LD_INT 175
12783: PPUSH
12784: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
12788: LD_VAR 0 2
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PPUSH
12797: LD_INT 41
12799: PPUSH
12800: LD_INT 52
12802: PPUSH
12803: CALL_OW 177
// wait ( 0 0$40 ) ;
12807: LD_INT 1400
12809: PPUSH
12810: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
12814: LD_VAR 0 2
12818: PUSH
12819: LD_INT 1
12821: ARRAY
12822: PPUSH
12823: LD_INT 41
12825: PPUSH
12826: LD_INT 44
12828: PPUSH
12829: CALL_OW 111
// end ;
12833: PPOPN 2
12835: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
12836: LD_EXP 21
12840: PPUSH
12841: CALL_OW 274
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL_OW 275
12853: PUSH
12854: LD_INT 100
12856: GREATEREQUAL
12857: IFFALSE 13085
12859: GO 12861
12861: DISABLE
12862: LD_INT 0
12864: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: LD_INT 22
12872: PUSH
12873: LD_INT 6
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 21
12882: PUSH
12883: LD_INT 1
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 25
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
12910: LD_VAR 0 1
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: LD_INT 4
12921: PPUSH
12922: LD_INT 39
12924: PPUSH
12925: LD_INT 37
12927: PPUSH
12928: LD_INT 3
12930: PPUSH
12931: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
12935: LD_VAR 0 1
12939: PUSH
12940: LD_INT 1
12942: ARRAY
12943: PPUSH
12944: LD_INT 29
12946: PPUSH
12947: LD_INT 42
12949: PPUSH
12950: LD_INT 54
12952: PPUSH
12953: LD_INT 3
12955: PPUSH
12956: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
12960: LD_VAR 0 1
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PPUSH
12969: LD_INT 6
12971: PPUSH
12972: LD_INT 38
12974: PPUSH
12975: LD_INT 48
12977: PPUSH
12978: LD_INT 0
12980: PPUSH
12981: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
12985: LD_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_INT 2
12996: PPUSH
12997: LD_INT 32
12999: PPUSH
13000: LD_INT 38
13002: PPUSH
13003: LD_INT 2
13005: PPUSH
13006: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13010: LD_VAR 0 1
13014: PUSH
13015: LD_INT 1
13017: ARRAY
13018: PPUSH
13019: LD_INT 26
13021: PPUSH
13022: LD_INT 39
13024: PPUSH
13025: LD_INT 55
13027: PPUSH
13028: LD_INT 3
13030: PPUSH
13031: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13035: LD_VAR 0 1
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: PPUSH
13044: LD_INT 32
13046: PPUSH
13047: LD_INT 31
13049: PPUSH
13050: LD_INT 31
13052: PPUSH
13053: LD_INT 3
13055: PPUSH
13056: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13060: LD_VAR 0 1
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: PPUSH
13069: LD_INT 31
13071: PPUSH
13072: LD_INT 50
13074: PPUSH
13075: LD_INT 51
13077: PPUSH
13078: LD_INT 4
13080: PPUSH
13081: CALL_OW 205
// end ;
13085: PPOPN 1
13087: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13088: LD_EXP 46
13092: IFFALSE 13738
13094: GO 13096
13096: DISABLE
13097: LD_INT 0
13099: PPUSH
13100: PPUSH
13101: PPUSH
// begin enable ;
13102: ENABLE
// if not ruMobile then
13103: LD_EXP 46
13107: NOT
13108: IFFALSE 13112
// exit ;
13110: GO 13738
// for i in ruMobile do
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: LD_EXP 46
13121: PUSH
13122: FOR_IN
13123: IFFALSE 13736
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13125: LD_VAR 0 1
13129: PPUSH
13130: CALL_OW 302
13134: NOT
13135: IFTRUE 13152
13137: PUSH
13138: LD_VAR 0 1
13142: PPUSH
13143: CALL_OW 255
13147: PUSH
13148: LD_INT 3
13150: NONEQUAL
13151: OR
13152: IFFALSE 13172
// begin ruMobile := ruMobile diff i ;
13154: LD_ADDR_EXP 46
13158: PUSH
13159: LD_EXP 46
13163: PUSH
13164: LD_VAR 0 1
13168: DIFF
13169: ST_TO_ADDR
// continue ;
13170: GO 13122
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13172: LD_VAR 0 1
13176: PPUSH
13177: CALL_OW 110
13181: NOT
13182: IFTRUE 13199
13184: PUSH
13185: LD_VAR 0 1
13189: PPUSH
13190: CALL_OW 110
13194: PUSH
13195: LD_INT 0
13197: EQUAL
13198: OR
13199: IFFALSE 13395
// begin if GetFuel ( i ) < 50 then
13201: LD_VAR 0 1
13205: PPUSH
13206: CALL_OW 261
13210: PUSH
13211: LD_INT 50
13213: LESS
13214: IFFALSE 13273
// begin ComMoveXY ( i , 106 , 88 ) ;
13216: LD_VAR 0 1
13220: PPUSH
13221: LD_INT 106
13223: PPUSH
13224: LD_INT 88
13226: PPUSH
13227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13231: LD_INT 35
13233: PPUSH
13234: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13238: LD_VAR 0 1
13242: PPUSH
13243: LD_INT 106
13245: PPUSH
13246: LD_INT 88
13248: PPUSH
13249: CALL_OW 297
13253: PUSH
13254: LD_INT 4
13256: LESS
13257: IFFALSE 13231
// SetFuel ( i , 100 ) ;
13259: LD_VAR 0 1
13263: PPUSH
13264: LD_INT 100
13266: PPUSH
13267: CALL_OW 240
// end else
13271: GO 13395
// if not IsInArea ( i , ruParking ) and not IsInArea ( i , ruParking2 ) then
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 25
13280: PPUSH
13281: CALL_OW 308
13285: NOT
13286: IFFALSE 13303
13288: PUSH
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_INT 27
13296: PPUSH
13297: CALL_OW 308
13301: NOT
13302: AND
13303: IFFALSE 13383
// begin if not FilterUnitsInArea ( ruHillArea , [ f_side , 1 ] ) then
13305: LD_INT 28
13307: PPUSH
13308: LD_INT 22
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 70
13322: NOT
13323: IFFALSE 13354
// begin if not IsInArea ( i , ruParking ) then
13325: LD_VAR 0 1
13329: PPUSH
13330: LD_INT 25
13332: PPUSH
13333: CALL_OW 308
13337: NOT
13338: IFFALSE 13352
// ComMoveToArea ( i , ruParking ) ;
13340: LD_VAR 0 1
13344: PPUSH
13345: LD_INT 25
13347: PPUSH
13348: CALL_OW 113
// end else
13352: GO 13381
// if not IsInArea ( i , ruParking2 ) then
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 27
13361: PPUSH
13362: CALL_OW 308
13366: NOT
13367: IFFALSE 13381
// ComMoveToArea ( i , ruParking2 ) ;
13369: LD_VAR 0 1
13373: PPUSH
13374: LD_INT 27
13376: PPUSH
13377: CALL_OW 113
// end else
13381: GO 13395
// SetTag ( i , 101 ) ;
13383: LD_VAR 0 1
13387: PPUSH
13388: LD_INT 101
13390: PPUSH
13391: CALL_OW 109
// end ; if GetTag ( i ) = 101 then
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 110
13404: PUSH
13405: LD_INT 101
13407: EQUAL
13408: IFFALSE 13538
// begin if GetLives ( i ) < 650 then
13410: LD_VAR 0 1
13414: PPUSH
13415: CALL_OW 256
13419: PUSH
13420: LD_INT 650
13422: LESS
13423: IFFALSE 13515
// begin if not IsDrivenBy ( i ) then
13425: LD_VAR 0 1
13429: PPUSH
13430: CALL_OW 311
13434: NOT
13435: IFFALSE 13439
// continue ;
13437: GO 13122
// mech := IsDrivenBy ( i ) ;
13439: LD_ADDR_VAR 0 2
13443: PUSH
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL_OW 311
13453: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13454: LD_VAR 0 2
13458: PPUSH
13459: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13463: LD_VAR 0 2
13467: PPUSH
13468: LD_VAR 0 1
13472: PPUSH
13473: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13477: LD_INT 35
13479: PPUSH
13480: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL_OW 256
13493: PUSH
13494: LD_INT 1000
13496: EQUAL
13497: IFFALSE 13477
// ComEnterUnit ( mech , i ) ;
13499: LD_VAR 0 2
13503: PPUSH
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 120
// end else
13513: GO 13538
// if IsDrivenBy ( i ) then
13515: LD_VAR 0 1
13519: PPUSH
13520: CALL_OW 311
13524: IFFALSE 13538
// SetTag ( i , 102 ) ;
13526: LD_VAR 0 1
13530: PPUSH
13531: LD_INT 102
13533: PPUSH
13534: CALL_OW 109
// end ; if GetTag ( i ) = 102 then
13538: LD_VAR 0 1
13542: PPUSH
13543: CALL_OW 110
13547: PUSH
13548: LD_INT 102
13550: EQUAL
13551: IFFALSE 13734
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
13553: LD_ADDR_VAR 0 3
13557: PUSH
13558: LD_INT 24
13560: PPUSH
13561: LD_INT 81
13563: PUSH
13564: LD_INT 3
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 70
13575: ST_TO_ADDR
// if GetLives ( i ) < 650 then
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 256
13585: PUSH
13586: LD_INT 650
13588: LESS
13589: IFFALSE 13614
// begin ComStop ( i ) ;
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 141
// SetTag ( i , 0 ) ;
13600: LD_VAR 0 1
13604: PPUSH
13605: LD_INT 0
13607: PPUSH
13608: CALL_OW 109
// continue ;
13612: GO 13122
// end ; if enemy then
13614: LD_VAR 0 3
13618: IFFALSE 13658
// begin if not HasTask ( i ) then
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 314
13629: NOT
13630: IFFALSE 13656
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13632: LD_VAR 0 1
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 74
13651: PPUSH
13652: CALL_OW 115
// end else
13656: GO 13734
// if ruMobile then
13658: LD_EXP 46
13662: IFFALSE 13734
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
13664: LD_ADDR_VAR 0 3
13668: PUSH
13669: LD_INT 81
13671: PUSH
13672: LD_INT 3
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: ST_TO_ADDR
// if enemy then
13684: LD_VAR 0 3
13688: IFFALSE 13734
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
13690: LD_VAR 0 1
13694: PPUSH
13695: LD_INT 95
13697: PUSH
13698: LD_INT 74
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: LD_INT 67
13707: PUSH
13708: LD_INT 59
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 55
13717: PUSH
13718: LD_INT 41
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL 83202 0 2
// end ; end ; end ;
13734: GO 13122
13736: POP
13737: POP
// end ; end_of_file
13738: PPOPN 3
13740: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
13741: LD_INT 0
13743: PPUSH
13744: PPUSH
13745: PPUSH
13746: PPUSH
13747: PPUSH
13748: PPUSH
13749: PPUSH
// begin tmpSold := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
13750: LD_ADDR_VAR 0 3
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 6
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 21
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 25
13777: PUSH
13778: LD_INT 1
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 3
13787: PUSH
13788: LD_INT 54
13790: PUSH
13791: EMPTY
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: PPUSH
13804: CALL_OW 69
13808: ST_TO_ADDR
// tmpSoldInside := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
13809: LD_ADDR_VAR 0 7
13813: PUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 6
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 25
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 54
13846: PUSH
13847: EMPTY
13848: LIST
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: PPUSH
13856: CALL_OW 69
13860: ST_TO_ADDR
// tmpEng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13861: LD_ADDR_VAR 0 4
13865: PUSH
13866: LD_INT 22
13868: PUSH
13869: LD_INT 6
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 21
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 25
13888: PUSH
13889: LD_INT 2
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: ST_TO_ADDR
// tmpSci := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
13906: LD_ADDR_VAR 0 6
13910: PUSH
13911: LD_INT 22
13913: PUSH
13914: LD_INT 6
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 4
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13951: LD_ADDR_VAR 0 8
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_INT 6
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 21
13968: PUSH
13969: LD_INT 2
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 34
13978: PUSH
13979: LD_INT 51
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: PPUSH
13991: CALL_OW 69
13995: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 255
14005: PUSH
14006: LD_INT 6
14008: EQUAL
14009: IFFALSE 14026
14011: PUSH
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 266
14021: PUSH
14022: LD_INT 0
14024: EQUAL
14025: AND
14026: IFFALSE 14046
// begin ruPDepot := building ;
14028: LD_ADDR_EXP 21
14032: PUSH
14033: LD_VAR 0 1
14037: ST_TO_ADDR
// baseReadyToBuild := 1 ;
14038: LD_ADDR_EXP 20
14042: PUSH
14043: LD_INT 1
14045: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 266
14055: PUSH
14056: LD_INT 4
14058: EQUAL
14059: IFFALSE 14076
14061: PUSH
14062: LD_VAR 0 1
14066: PPUSH
14067: CALL_OW 255
14071: PUSH
14072: LD_INT 6
14074: EQUAL
14075: AND
14076: IFFALSE 14109
// for i in tmpSold do
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_VAR 0 3
14087: PUSH
14088: FOR_IN
14089: IFFALSE 14107
// ComEnterUnit ( i , building ) ;
14091: LD_VAR 0 2
14095: PPUSH
14096: LD_VAR 0 1
14100: PPUSH
14101: CALL_OW 120
14105: GO 14088
14107: POP
14108: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14109: LD_VAR 0 1
14113: PPUSH
14114: CALL_OW 266
14118: PUSH
14119: LD_INT 6
14121: EQUAL
14122: IFFALSE 14139
14124: PUSH
14125: LD_VAR 0 1
14129: PPUSH
14130: CALL_OW 255
14134: PUSH
14135: LD_INT 6
14137: EQUAL
14138: AND
14139: IFFALSE 14197
// begin for i in tmpSci do
14141: LD_ADDR_VAR 0 2
14145: PUSH
14146: LD_VAR 0 6
14150: PUSH
14151: FOR_IN
14152: IFFALSE 14170
// ComEnterUnit ( i , building ) ;
14154: LD_VAR 0 2
14158: PPUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 120
14168: GO 14151
14170: POP
14171: POP
// ResAllTechs ( 6 , building , 3 ) ;
14172: LD_INT 6
14174: PPUSH
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: CALL 5994 0 3
// ruPLab := building ;
14187: LD_ADDR_EXP 22
14191: PUSH
14192: LD_VAR 0 1
14196: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 266
14206: PUSH
14207: LD_INT 2
14209: EQUAL
14210: IFFALSE 14227
14212: PUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 255
14222: PUSH
14223: LD_INT 6
14225: EQUAL
14226: AND
14227: IFFALSE 14278
// begin tmpMeh := UnitsInside ( cargo [ 1 ] ) ;
14229: LD_ADDR_VAR 0 5
14233: PUSH
14234: LD_VAR 0 8
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: PPUSH
14243: CALL_OW 313
14247: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14248: LD_VAR 0 5
14252: PPUSH
14253: CALL_OW 121
// wait ( 0 0$1 ) ;
14257: LD_INT 35
14259: PPUSH
14260: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14264: LD_VAR 0 5
14268: PPUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL_OW 266
14287: PUSH
14288: LD_INT 32
14290: EQUAL
14291: IFFALSE 14308
14293: PUSH
14294: LD_VAR 0 1
14298: PPUSH
14299: CALL_OW 255
14303: PUSH
14304: LD_INT 6
14306: EQUAL
14307: AND
14308: IFFALSE 14360
// begin ComPlaceWeapon ( building , 42 ) ;
14310: LD_VAR 0 1
14314: PPUSH
14315: LD_INT 42
14317: PPUSH
14318: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14322: LD_VAR 0 7
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: CALL_OW 122
// wait ( 0 0$1 ) ;
14335: LD_INT 35
14337: PPUSH
14338: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14342: LD_VAR 0 7
14346: PUSH
14347: LD_INT 1
14349: ARRAY
14350: PPUSH
14351: LD_VAR 0 1
14355: PPUSH
14356: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 266
14369: PUSH
14370: LD_INT 31
14372: EQUAL
14373: IFFALSE 14390
14375: PUSH
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL_OW 255
14385: PUSH
14386: LD_INT 6
14388: EQUAL
14389: AND
14390: IFFALSE 14456
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14392: LD_VAR 0 7
14396: PUSH
14397: LD_INT 2
14399: ARRAY
14400: PPUSH
14401: CALL_OW 122
// wait ( 0 0$1 ) ;
14405: LD_INT 35
14407: PPUSH
14408: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14412: LD_VAR 0 7
14416: PUSH
14417: LD_INT 2
14419: ARRAY
14420: PPUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14430: LD_VAR 0 4
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: PPUSH
14439: LD_EXP 21
14443: PPUSH
14444: CALL_OW 120
// baseReadyToBuild := 2 ;
14448: LD_ADDR_EXP 20
14452: PUSH
14453: LD_INT 2
14455: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 266
14465: PUSH
14466: LD_INT 32
14468: EQUAL
14469: IFFALSE 14486
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 255
14481: PUSH
14482: LD_INT 1
14484: EQUAL
14485: AND
14486: IFFALSE 14498
14488: PUSH
14489: LD_EXP 32
14493: PUSH
14494: LD_INT 0
14496: EQUAL
14497: AND
14498: IFFALSE 14743
// begin bunkerDialog := 1 ;
14500: LD_ADDR_EXP 32
14504: PUSH
14505: LD_INT 1
14507: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14508: LD_EXP 11
14512: PPUSH
14513: CALL_OW 302
14517: IFFALSE 14533
// Say ( Claptopn , D11-Eng1-1 ) else
14519: LD_EXP 11
14523: PPUSH
14524: LD_STRING D11-Eng1-1
14526: PPUSH
14527: CALL_OW 88
14531: GO 14729
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14533: LD_INT 22
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 21
14545: PUSH
14546: LD_INT 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 25
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 26
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: PPUSH
14579: CALL_OW 69
14583: PUSH
14584: LD_EXP 1
14588: PUSH
14589: EMPTY
14590: LIST
14591: PUSH
14592: LD_INT 0
14594: GREATER
14595: DIFF
14596: IFFALSE 14670
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
14598: LD_INT 22
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 25
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 26
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: PUSH
14649: LD_EXP 1
14653: PUSH
14654: EMPTY
14655: LIST
14656: DIFF
14657: PPUSH
14658: LD_STRING D11-Eng1-1
14660: PPUSH
14661: LD_STRING D11-Eng1-1
14663: PPUSH
14664: CALL 4617 0 3
14668: GO 14729
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 26
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: PUSH
14710: LD_EXP 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: DIFF
14718: PPUSH
14719: LD_STRING D11-Eng1-1
14721: PPUSH
14722: LD_STRING D11-Eng1-1
14724: PPUSH
14725: CALL 4617 0 3
// end ; if energyVDialog = 0 then
14729: LD_EXP 33
14733: PUSH
14734: LD_INT 0
14736: EQUAL
14737: IFFALSE 14743
// EnergyDialog ;
14739: CALL 5022 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 266
14752: PUSH
14753: LD_INT 29
14755: EQUAL
14756: IFFALSE 14773
14758: PUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 255
14768: PUSH
14769: LD_INT 1
14771: EQUAL
14772: AND
14773: IFFALSE 14783
// buildOil := 1 ;
14775: LD_ADDR_EXP 34
14779: PUSH
14780: LD_INT 1
14782: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
14783: LD_VAR 0 1
14787: PPUSH
14788: CALL_OW 266
14792: PUSH
14793: LD_INT 26
14795: EQUAL
14796: IFFALSE 14813
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 255
14808: PUSH
14809: LD_INT 1
14811: EQUAL
14812: AND
14813: IFFALSE 14823
// buildPower := 1 ;
14815: LD_ADDR_EXP 35
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// end ;
14823: PPOPN 8
14825: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 266
14835: PUSH
14836: LD_INT 3
14838: EQUAL
14839: IFFALSE 14856
14841: PUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 255
14851: PUSH
14852: LD_INT 1
14854: EQUAL
14855: AND
14856: IFFALSE 14868
14858: PUSH
14859: LD_EXP 31
14863: PUSH
14864: LD_INT 0
14866: EQUAL
14867: AND
14868: IFFALSE 15218
// begin factoryDialog = 1 ;
14870: LD_ADDR_EXP 31
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
14878: LD_INT 47
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: CALL_OW 321
14888: PUSH
14889: LD_INT 1
14891: EQUAL
14892: IFFALSE 14910
14894: PUSH
14895: LD_INT 45
14897: PPUSH
14898: LD_INT 1
14900: PPUSH
14901: CALL_OW 321
14905: PUSH
14906: LD_INT 1
14908: EQUAL
14909: AND
14910: IFFALSE 15218
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
14912: LD_INT 22
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 21
14924: PUSH
14925: LD_INT 3
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 30
14934: PUSH
14935: LD_INT 3
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: LD_INT 1000
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: PPUSH
14958: CALL_OW 69
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
14971: LD_EXP 1
14975: PPUSH
14976: LD_STRING D9a-JMM-1
14978: PPUSH
14979: CALL_OW 88
// if IsOK ( Campell ) then
14983: LD_EXP 12
14987: PPUSH
14988: CALL_OW 302
14992: IFFALSE 15008
// Say ( Campell , D9a-Mech1-1 ) else
14994: LD_EXP 12
14998: PPUSH
14999: LD_STRING D9a-Mech1-1
15001: PPUSH
15002: CALL_OW 88
15006: GO 15204
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15008: LD_INT 22
15010: PUSH
15011: LD_INT 1
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 21
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 25
15030: PUSH
15031: LD_INT 3
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 26
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 69
15058: PUSH
15059: LD_EXP 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: PUSH
15067: LD_INT 0
15069: GREATER
15070: DIFF
15071: IFFALSE 15145
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15073: LD_INT 22
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 25
15095: PUSH
15096: LD_INT 3
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 26
15105: PUSH
15106: LD_INT 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: PUSH
15124: LD_EXP 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: DIFF
15132: PPUSH
15133: LD_STRING D9a-Mech1-1
15135: PPUSH
15136: LD_STRING D9a-Mech1-1
15138: PPUSH
15139: CALL 4617 0 3
15143: GO 15204
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15145: LD_INT 22
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 21
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 26
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: LIST
15179: PPUSH
15180: CALL_OW 69
15184: PUSH
15185: LD_EXP 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: DIFF
15193: PPUSH
15194: LD_STRING D9a-Mech1-1
15196: PPUSH
15197: LD_STRING D9a-Mech1-1
15199: PPUSH
15200: CALL 4617 0 3
// end ; if energyVDialog = 0 then
15204: LD_EXP 33
15208: PUSH
15209: LD_INT 0
15211: EQUAL
15212: IFFALSE 15218
// EnergyDialog ;
15214: CALL 5022 0 0
// end ; end ; end ;
15218: PPOPN 1
15220: END
// on UnitDestroyed ( unit ) do var mech ;
15221: LD_INT 0
15223: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL 35762 0 1
// if unit = JMM then
15233: LD_VAR 0 1
15237: PUSH
15238: LD_EXP 1
15242: EQUAL
15243: IFFALSE 15252
// YouLost ( JMM ) ;
15245: LD_STRING JMM
15247: PPUSH
15248: CALL_OW 104
// if unit = ambdept0 then
15252: LD_VAR 0 1
15256: PUSH
15257: LD_INT 4
15259: EQUAL
15260: IFFALSE 15269
// YouLost ( Base ) ;
15262: LD_STRING Base
15264: PPUSH
15265: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and IsInArea ( unit , ruDefArea ) then
15269: LD_VAR 0 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 1
15281: EQUAL
15282: IFFALSE 15299
15284: PUSH
15285: LD_VAR 0 1
15289: PPUSH
15290: CALL_OW 247
15294: PUSH
15295: LD_INT 1
15297: EQUAL
15298: AND
15299: IFFALSE 15315
15301: PUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 24
15309: PPUSH
15310: CALL_OW 308
15314: AND
15315: IFFALSE 15325
// honor := false ;
15317: LD_ADDR_EXP 39
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// if unit in ruMobile then
15325: LD_VAR 0 1
15329: PUSH
15330: LD_EXP 46
15334: IN
15335: IFFALSE 15353
// ruMobile = ruMobile diff ruMobile ;
15337: LD_ADDR_EXP 46
15341: PUSH
15342: LD_EXP 46
15346: PUSH
15347: LD_EXP 46
15351: DIFF
15352: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15353: LD_VAR 0 1
15357: PPUSH
15358: CALL_OW 247
15362: PUSH
15363: LD_INT 1
15365: EQUAL
15366: IFFALSE 15383
15368: PUSH
15369: LD_VAR 0 1
15373: PPUSH
15374: CALL_OW 255
15378: PUSH
15379: LD_INT 1
15381: EQUAL
15382: AND
15383: IFFALSE 15399
// lostCounter = lostCounter + 1 ;
15385: LD_ADDR_EXP 38
15389: PUSH
15390: LD_EXP 38
15394: PUSH
15395: LD_INT 1
15397: PLUS
15398: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15399: LD_EXP 43
15403: IFFALSE 15418
15405: PUSH
15406: LD_INT 24
15408: PPUSH
15409: CALL_OW 313
15413: PUSH
15414: LD_INT 6
15416: LESS
15417: AND
15418: IFFALSE 15435
15420: PUSH
15421: LD_VAR 0 1
15425: PPUSH
15426: CALL_OW 257
15430: PUSH
15431: LD_INT 3
15433: EQUAL
15434: AND
15435: IFFALSE 15452
15437: PUSH
15438: LD_VAR 0 1
15442: PPUSH
15443: CALL_OW 255
15447: PUSH
15448: LD_INT 3
15450: EQUAL
15451: AND
15452: IFFALSE 15463
15454: PUSH
15455: LD_INT 24
15457: PPUSH
15458: CALL_OW 302
15462: AND
15463: IFFALSE 15478
15465: PUSH
15466: LD_INT 24
15468: PPUSH
15469: CALL_OW 255
15473: PUSH
15474: LD_INT 3
15476: EQUAL
15477: AND
15478: IFFALSE 15607
// begin ruMech := ruMech - 1 ;
15480: LD_ADDR_EXP 43
15484: PUSH
15485: LD_EXP 43
15489: PUSH
15490: LD_INT 1
15492: MINUS
15493: ST_TO_ADDR
// if ruMech = 0 then
15494: LD_EXP 43
15498: PUSH
15499: LD_INT 0
15501: EQUAL
15502: IFFALSE 15506
// exit ;
15504: GO 15607
// wait ( 0 0$40 ) ;
15506: LD_INT 1400
15508: PPUSH
15509: CALL_OW 67
// uc_side = 3 ;
15513: LD_ADDR_OWVAR 20
15517: PUSH
15518: LD_INT 3
15520: ST_TO_ADDR
// uc_nation = 3 ;
15521: LD_ADDR_OWVAR 21
15525: PUSH
15526: LD_INT 3
15528: ST_TO_ADDR
// hc_gallery :=  ;
15529: LD_ADDR_OWVAR 33
15533: PUSH
15534: LD_STRING 
15536: ST_TO_ADDR
// hc_name :=  ;
15537: LD_ADDR_OWVAR 26
15541: PUSH
15542: LD_STRING 
15544: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15545: LD_INT 0
15547: PPUSH
15548: LD_EXP 16
15552: PPUSH
15553: LD_EXP 17
15557: PPUSH
15558: CALL_OW 12
15562: PPUSH
15563: CALL_OW 383
// mech := CreateHuman ;
15567: LD_ADDR_VAR 0 2
15571: PUSH
15572: CALL_OW 44
15576: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15577: LD_VAR 0 2
15581: PPUSH
15582: LD_INT 124
15584: PPUSH
15585: LD_INT 97
15587: PPUSH
15588: LD_INT 0
15590: PPUSH
15591: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: LD_INT 24
15602: PPUSH
15603: CALL_OW 120
// end ; end ;
15607: PPOPN 2
15609: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15610: LD_INT 0
15612: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15613: LD_VAR 0 1
15617: PPUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL 35820 0 2
// if GetSide ( vehicle ) = 1 then
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL_OW 255
15636: PUSH
15637: LD_INT 1
15639: EQUAL
15640: IFFALSE 15656
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15642: LD_ADDR_EXP 42
15646: PUSH
15647: LD_EXP 42
15651: PUSH
15652: LD_INT 1
15654: PLUS
15655: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
15656: LD_VAR 0 1
15660: PPUSH
15661: CALL_OW 255
15665: PUSH
15666: LD_INT 3
15668: EQUAL
15669: IFFALSE 15697
15671: PUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: CALL_OW 264
15681: PUSH
15682: LD_INT 42
15684: PUSH
15685: LD_INT 43
15687: PUSH
15688: LD_INT 44
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: IN
15696: AND
15697: IFFALSE 15715
// ruMobile := ruMobile union vehicle ;
15699: LD_ADDR_EXP 46
15703: PUSH
15704: LD_EXP 46
15708: PUSH
15709: LD_VAR 0 1
15713: UNION
15714: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 264
15724: PUSH
15725: LD_INT 53
15727: EQUAL
15728: IFFALSE 15864
// begin uc_side = 3 ;
15730: LD_ADDR_OWVAR 20
15734: PUSH
15735: LD_INT 3
15737: ST_TO_ADDR
// uc_nation = 3 ;
15738: LD_ADDR_OWVAR 21
15742: PUSH
15743: LD_INT 3
15745: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
15746: LD_INT 0
15748: PPUSH
15749: LD_EXP 17
15753: PPUSH
15754: CALL_OW 383
// driver := CreateHuman ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: CALL_OW 44
15767: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
15768: LD_VAR 0 3
15772: PPUSH
15773: LD_VAR 0 2
15777: PPUSH
15778: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
15782: LD_VAR 0 1
15786: PPUSH
15787: LD_INT 21
15789: PPUSH
15790: CALL 5248 0 2
// repeat wait ( 0 0$1 ) ;
15794: LD_INT 35
15796: PPUSH
15797: CALL_OW 67
// until not HasTask ( vehicle ) ;
15801: LD_VAR 0 1
15805: PPUSH
15806: CALL_OW 314
15810: NOT
15811: IFFALSE 15794
// driver := IsDrivenBy ( vehicle ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 311
15827: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
15828: LD_VAR 0 3
15832: PPUSH
15833: LD_INT 104
15835: PPUSH
15836: LD_INT 73
15838: PPUSH
15839: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15843: LD_VAR 0 3
15847: PPUSH
15848: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 24
15859: PPUSH
15860: CALL_OW 180
// end ; end ;
15864: PPOPN 3
15866: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
15867: LD_VAR 0 1
15871: PPUSH
15872: CALL_OW 255
15876: PUSH
15877: LD_INT 3
15879: EQUAL
15880: IFFALSE 15897
15882: PUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 247
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: AND
15897: IFFALSE 15925
15899: PUSH
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 264
15909: PUSH
15910: LD_INT 42
15912: PUSH
15913: LD_INT 43
15915: PUSH
15916: LD_INT 44
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: LIST
15923: IN
15924: AND
15925: IFFALSE 15974
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
15927: LD_INT 24
15929: PPUSH
15930: LD_VAR 0 1
15934: PPUSH
15935: CALL_OW 265
15939: PPUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 262
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 263
15959: PPUSH
15960: LD_VAR 0 1
15964: PPUSH
15965: CALL_OW 264
15969: PPUSH
15970: CALL_OW 185
// end ;
15974: PPOPN 1
15976: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 255
15986: PUSH
15987: LD_INT 3
15989: EQUAL
15990: IFFALSE 16007
15992: PUSH
15993: LD_VAR 0 2
15997: PPUSH
15998: CALL_OW 255
16002: PUSH
16003: LD_INT 3
16005: EQUAL
16006: AND
16007: IFFALSE 16018
16009: PUSH
16010: LD_INT 24
16012: PPUSH
16013: CALL_OW 302
16017: AND
16018: IFFALSE 16032
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 302
16030: NOT
16031: AND
16032: IFFALSE 16046
// ComEnterUnit ( human , rubfact0 ) ;
16034: LD_VAR 0 2
16038: PPUSH
16039: LD_INT 24
16041: PPUSH
16042: CALL_OW 120
// end ;
16046: PPOPN 2
16048: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 and driver in ruSpecialAttackGroup then
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 255
16058: PUSH
16059: LD_INT 3
16061: EQUAL
16062: IFFALSE 16076
16064: PUSH
16065: LD_VAR 0 1
16069: PUSH
16070: LD_EXP 52
16074: IN
16075: AND
16076: IFFALSE 16152
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16078: LD_VAR 0 1
16082: PPUSH
16083: LD_INT 125
16085: PPUSH
16086: LD_INT 97
16088: PPUSH
16089: CALL_OW 111
// wait ( 0 0$1 ) ;
16093: LD_INT 35
16095: PPUSH
16096: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 301
16109: IFTRUE 16128
16111: PUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_INT 125
16119: PPUSH
16120: LD_INT 97
16122: PPUSH
16123: CALL_OW 307
16127: OR
16128: IFFALSE 16078
// if IsDead ( driver ) then
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 301
16139: IFFALSE 16143
// exit ;
16141: GO 16152
// RemoveUnit ( driver ) ;
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 64
// end ; end ;
16152: PPOPN 4
16154: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16155: LD_VAR 0 1
16159: PUSH
16160: LD_INT 24
16162: EQUAL
16163: IFFALSE 16180
16165: PUSH
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 256
16175: PUSH
16176: LD_INT 1000
16178: LESS
16179: AND
16180: IFFALSE 16194
// SetLives ( un , 1000 ) ;
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_INT 1000
16189: PPUSH
16190: CALL_OW 234
// end ;
16194: PPOPN 2
16196: END
// on Command ( comandid ) do var i , j , tmp ;
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
16201: PPUSH
// begin SOS_Command ( comandid ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL 35804 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16211: LD_INT 22
16213: PUSH
16214: LD_INT 4
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: NOT
16226: IFFALSE 16230
// exit ;
16228: GO 16397
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16230: LD_ADDR_VAR 0 2
16234: PUSH
16235: LD_INT 22
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: LD_INT 21
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 21
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PPUSH
16277: CALL_OW 69
16281: PUSH
16282: FOR_IN
16283: IFFALSE 16395
// begin if GetTaskList ( i ) > 0 then
16285: LD_VAR 0 2
16289: PPUSH
16290: CALL_OW 437
16294: PUSH
16295: LD_INT 0
16297: GREATER
16298: IFFALSE 16393
// begin for j = 1 to GetTaskList ( i ) do
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: DOUBLE
16306: LD_INT 1
16308: DEC
16309: ST_TO_ADDR
16310: LD_VAR 0 2
16314: PPUSH
16315: CALL_OW 437
16319: PUSH
16320: FOR_TO
16321: IFFALSE 16391
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16323: LD_ADDR_VAR 0 4
16327: PUSH
16328: LD_VAR 0 2
16332: PPUSH
16333: CALL_OW 437
16337: PUSH
16338: LD_VAR 0 3
16342: ARRAY
16343: PUSH
16344: LD_INT 4
16346: ARRAY
16347: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16348: LD_VAR 0 4
16352: PPUSH
16353: CALL_OW 255
16357: PUSH
16358: LD_INT 4
16360: EQUAL
16361: IFTRUE 16378
16363: PUSH
16364: LD_VAR 0 4
16368: PPUSH
16369: CALL_OW 255
16373: PUSH
16374: LD_INT 0
16376: EQUAL
16377: OR
16378: IFFALSE 16389
// ComStop ( i ) ;
16380: LD_VAR 0 2
16384: PPUSH
16385: CALL_OW 141
// end ;
16389: GO 16320
16391: POP
16392: POP
// end ; end ;
16393: GO 16282
16395: POP
16396: POP
// end ;
16397: PPOPN 4
16399: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16400: LD_VAR 0 1
16404: PUSH
16405: LD_INT 22
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 23
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 21
16427: PUSH
16428: LD_INT 1
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 69
16444: IN
16445: IFFALSE 16457
16447: PUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_INT 1
16455: EQUAL
16456: AND
16457: IFFALSE 16463
// JMMTraitor ;
16459: CALL 8831 0 0
// end ; end_of_file
16463: PPOPN 3
16465: END
// every 10 10$0 do
16466: GO 16468
16468: DISABLE
// RespawnAttackInfantry ( 3 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16469: LD_INT 3
16471: PPUSH
16472: LD_INT 3
16474: PPUSH
16475: LD_INT 2
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: LD_INT 4
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: LD_OWVAR 67
16500: ARRAY
16501: PLUS
16502: PPUSH
16503: LD_INT 2
16505: PPUSH
16506: LD_EXP 16
16510: PPUSH
16511: LD_EXP 17
16515: PPUSH
16516: CALL_OW 12
16520: PPUSH
16521: LD_INT 4
16523: PPUSH
16524: LD_INT 14
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: LD_INT 2
16532: PPUSH
16533: CALL 7016 0 9
16537: END
// every 20 20$0 do
16538: GO 16540
16540: DISABLE
// RespawnAttackInfantry ( 3 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16541: LD_INT 3
16543: PPUSH
16544: LD_INT 3
16546: PPUSH
16547: LD_INT 4
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: LD_INT 4
16558: PUSH
16559: LD_INT 5
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_OWVAR 67
16572: ARRAY
16573: PLUS
16574: PPUSH
16575: LD_INT 2
16577: PPUSH
16578: LD_EXP 16
16582: PPUSH
16583: LD_EXP 17
16587: PPUSH
16588: CALL_OW 12
16592: PPUSH
16593: LD_INT 4
16595: PPUSH
16596: LD_INT 14
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: LD_INT 1
16604: PPUSH
16605: CALL 7016 0 9
16609: END
// export ruSpecialAttackGroup ; every 25 25$0 do var i , un , veh , hex , tmp ;
16610: GO 16612
16612: DISABLE
16613: LD_INT 0
16615: PPUSH
16616: PPUSH
16617: PPUSH
16618: PPUSH
16619: PPUSH
// begin ruSpecialAttackGroup := [ ] ;
16620: LD_ADDR_EXP 52
16624: PUSH
16625: EMPTY
16626: ST_TO_ADDR
// hex := [ 123 , 95 ] ;
16627: LD_ADDR_VAR 0 4
16631: PUSH
16632: LD_INT 123
16634: PUSH
16635: LD_INT 95
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: ST_TO_ADDR
// tmp := [ ] ;
16642: LD_ADDR_VAR 0 5
16646: PUSH
16647: EMPTY
16648: ST_TO_ADDR
// if Difficulty > 1 then
16649: LD_OWVAR 67
16653: PUSH
16654: LD_INT 1
16656: GREATER
16657: IFFALSE 16667
// specAttack := true ;
16659: LD_ADDR_EXP 47
16663: PUSH
16664: LD_INT 1
16666: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: DOUBLE
16673: LD_INT 1
16675: DEC
16676: ST_TO_ADDR
16677: LD_INT 4
16679: PUSH
16680: LD_INT 5
16682: PUSH
16683: LD_INT 6
16685: PUSH
16686: LD_INT 7
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: LD_OWVAR 67
16699: ARRAY
16700: PUSH
16701: FOR_TO
16702: IFFALSE 17034
// begin uc_side := 3 ;
16704: LD_ADDR_OWVAR 20
16708: PUSH
16709: LD_INT 3
16711: ST_TO_ADDR
// uc_nation := 3 ;
16712: LD_ADDR_OWVAR 21
16716: PUSH
16717: LD_INT 3
16719: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16720: LD_ADDR_OWVAR 37
16724: PUSH
16725: LD_INT 21
16727: PUSH
16728: LD_INT 22
16730: PUSH
16731: LD_INT 23
16733: PUSH
16734: LD_INT 24
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: LD_VAR 0 1
16747: PUSH
16748: LD_OWVAR 67
16752: MOD
16753: PUSH
16754: LD_INT 1
16756: PLUS
16757: ARRAY
16758: ST_TO_ADDR
// vc_engine := engine_combustion ;
16759: LD_ADDR_OWVAR 39
16763: PUSH
16764: LD_INT 1
16766: ST_TO_ADDR
// vc_control := control_manual ;
16767: LD_ADDR_OWVAR 38
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16775: LD_ADDR_OWVAR 40
16779: PUSH
16780: LD_INT 42
16782: PUSH
16783: LD_INT 43
16785: PUSH
16786: LD_INT 44
16788: PUSH
16789: LD_INT 44
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: PUSH
16798: LD_VAR 0 1
16802: PUSH
16803: LD_OWVAR 67
16807: MOD
16808: PUSH
16809: LD_INT 1
16811: PLUS
16812: ARRAY
16813: ST_TO_ADDR
// veh := CreateVehicle ;
16814: LD_ADDR_VAR 0 3
16818: PUSH
16819: CALL_OW 45
16823: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16824: LD_VAR 0 3
16828: PPUSH
16829: LD_INT 5
16831: PPUSH
16832: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16836: LD_INT 35
16838: PPUSH
16839: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
16843: LD_VAR 0 4
16847: PUSH
16848: LD_INT 1
16850: ARRAY
16851: PPUSH
16852: LD_VAR 0 4
16856: PUSH
16857: LD_INT 2
16859: ARRAY
16860: PPUSH
16861: CALL_OW 428
16865: PUSH
16866: LD_INT 0
16868: EQUAL
16869: IFFALSE 16836
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
16871: LD_VAR 0 3
16875: PPUSH
16876: LD_VAR 0 4
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_VAR 0 4
16889: PUSH
16890: LD_INT 2
16892: ARRAY
16893: PPUSH
16894: LD_INT 0
16896: PPUSH
16897: CALL_OW 48
// uc_side := 3 ;
16901: LD_ADDR_OWVAR 20
16905: PUSH
16906: LD_INT 3
16908: ST_TO_ADDR
// uc_nation := 3 ;
16909: LD_ADDR_OWVAR 21
16913: PUSH
16914: LD_INT 3
16916: ST_TO_ADDR
// InitHC_All ( ) ;
16917: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
16921: LD_INT 0
16923: PPUSH
16924: LD_INT 2
16926: PUSH
16927: LD_OWVAR 67
16931: PLUS
16932: PPUSH
16933: CALL_OW 383
// un := CreateHuman ;
16937: LD_ADDR_VAR 0 2
16941: PUSH
16942: CALL_OW 44
16946: ST_TO_ADDR
// ruSpecialAttackGroup := Join ( ruSpecialAttackGroup , un ) ;
16947: LD_ADDR_EXP 52
16951: PUSH
16952: LD_EXP 52
16956: PPUSH
16957: LD_VAR 0 2
16961: PPUSH
16962: CALL 80436 0 2
16966: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16967: LD_VAR 0 2
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 101
16988: PPUSH
16989: LD_INT 77
16991: PPUSH
16992: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16996: LD_ADDR_VAR 0 5
17000: PUSH
17001: LD_VAR 0 5
17005: PPUSH
17006: LD_VAR 0 5
17010: PUSH
17011: LD_INT 1
17013: PLUS
17014: PPUSH
17015: LD_VAR 0 3
17019: PPUSH
17020: CALL_OW 1
17024: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17025: LD_INT 105
17027: PPUSH
17028: CALL_OW 67
// end ;
17032: GO 16701
17034: POP
17035: POP
// repeat wait ( 0 0$1 ) ;
17036: LD_INT 35
17038: PPUSH
17039: CALL_OW 67
// for i in tmp do
17043: LD_ADDR_VAR 0 1
17047: PUSH
17048: LD_VAR 0 5
17052: PUSH
17053: FOR_IN
17054: IFFALSE 17122
// if not IsOk ( i ) then
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 302
17065: NOT
17066: IFFALSE 17086
// tmp := tmp diff i else
17068: LD_ADDR_VAR 0 5
17072: PUSH
17073: LD_VAR 0 5
17077: PUSH
17078: LD_VAR 0 1
17082: DIFF
17083: ST_TO_ADDR
17084: GO 17120
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_INT 22
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: PPUSH
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 74
17115: PPUSH
17116: CALL_OW 115
17120: GO 17053
17122: POP
17123: POP
// until not tmp ;
17124: LD_VAR 0 5
17128: NOT
17129: IFFALSE 17036
// end ;
17131: PPOPN 5
17133: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17134: LD_EXP 47
17138: IFFALSE 17516
17140: GO 17142
17142: DISABLE
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
// begin wait ( 0 0$20 ) ;
17149: LD_INT 700
17151: PPUSH
17152: CALL_OW 67
// uc_side := 3 ;
17156: LD_ADDR_OWVAR 20
17160: PUSH
17161: LD_INT 3
17163: ST_TO_ADDR
// uc_nation := 3 ;
17164: LD_ADDR_OWVAR 21
17168: PUSH
17169: LD_INT 3
17171: ST_TO_ADDR
// InitHc ;
17172: CALL_OW 19
// hc_importance := 0 ;
17176: LD_ADDR_OWVAR 32
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// tmp := [ ] ;
17184: LD_ADDR_VAR 0 2
17188: PUSH
17189: EMPTY
17190: ST_TO_ADDR
// InitHC_All ( ) ;
17191: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17195: LD_INT 0
17197: PPUSH
17198: LD_INT 2
17200: PPUSH
17201: LD_INT 6
17203: PPUSH
17204: CALL_OW 380
// eng := CreateHuman ;
17208: LD_ADDR_VAR 0 4
17212: PUSH
17213: CALL_OW 44
17217: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17218: LD_VAR 0 4
17222: PPUSH
17223: LD_INT 78
17225: PPUSH
17226: LD_INT 2
17228: PPUSH
17229: LD_INT 4
17231: PPUSH
17232: LD_INT 0
17234: PPUSH
17235: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17239: LD_ADDR_VAR 0 3
17243: PUSH
17244: DOUBLE
17245: LD_INT 1
17247: DEC
17248: ST_TO_ADDR
17249: LD_INT 3
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 4
17257: PUSH
17258: LD_INT 5
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: PUSH
17267: LD_OWVAR 67
17271: ARRAY
17272: PUSH
17273: FOR_TO
17274: IFFALSE 17363
// begin InitHC_All ( ) ;
17276: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17280: LD_INT 0
17282: PPUSH
17283: LD_INT 1
17285: PPUSH
17286: LD_INT 4
17288: PUSH
17289: LD_INT 5
17291: PUSH
17292: LD_INT 6
17294: PUSH
17295: LD_INT 6
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: LD_OWVAR 67
17308: ARRAY
17309: PPUSH
17310: CALL_OW 380
// un := CreateHuman ;
17314: LD_ADDR_VAR 0 1
17318: PUSH
17319: CALL_OW 44
17323: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17324: LD_VAR 0 1
17328: PPUSH
17329: LD_INT 78
17331: PPUSH
17332: LD_INT 2
17334: PPUSH
17335: LD_INT 4
17337: PPUSH
17338: LD_INT 0
17340: PPUSH
17341: CALL_OW 50
// tmp := tmp ^ un ;
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: LD_VAR 0 2
17354: PUSH
17355: LD_VAR 0 1
17359: ADD
17360: ST_TO_ADDR
// end ;
17361: GO 17273
17363: POP
17364: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_INT 49
17372: PPUSH
17373: LD_INT 3
17375: PPUSH
17376: CALL_OW 111
// wait ( 0 0$2 ) ;
17380: LD_INT 70
17382: PPUSH
17383: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17387: LD_VAR 0 4
17391: PPUSH
17392: LD_INT 49
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17402: LD_VAR 0 4
17406: PPUSH
17407: LD_INT 4
17409: PPUSH
17410: CALL_OW 227
// wait ( 0 0$10 ) ;
17414: LD_INT 350
17416: PPUSH
17417: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17421: LD_INT 35
17423: PPUSH
17424: CALL_OW 67
// for i in tmp do
17428: LD_ADDR_VAR 0 3
17432: PUSH
17433: LD_VAR 0 2
17437: PUSH
17438: FOR_IN
17439: IFFALSE 17507
// if not IsOk ( i ) then
17441: LD_VAR 0 3
17445: PPUSH
17446: CALL_OW 302
17450: NOT
17451: IFFALSE 17471
// tmp := tmp diff i else
17453: LD_ADDR_VAR 0 2
17457: PUSH
17458: LD_VAR 0 2
17462: PUSH
17463: LD_VAR 0 3
17467: DIFF
17468: ST_TO_ADDR
17469: GO 17505
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17471: LD_VAR 0 3
17475: PPUSH
17476: LD_INT 22
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PPUSH
17486: CALL_OW 69
17490: PPUSH
17491: LD_VAR 0 3
17495: PPUSH
17496: CALL_OW 74
17500: PPUSH
17501: CALL_OW 115
17505: GO 17438
17507: POP
17508: POP
// until not tmp ;
17509: LD_VAR 0 2
17513: NOT
17514: IFFALSE 17421
// end ; end_of_file
17516: PPOPN 4
17518: END
// every 0 0$1 trigger startTimer = 1 do
17519: LD_EXP 30
17523: PUSH
17524: LD_INT 1
17526: EQUAL
17527: IFFALSE 17657
17529: GO 17531
17531: DISABLE
// begin enable ;
17532: ENABLE
// if timerStatus = 1 then
17533: LD_EXP 29
17537: PUSH
17538: LD_INT 1
17540: EQUAL
17541: IFFALSE 17574
// begin timeToSupport = timeToSupport - 0 0$01 ;
17543: LD_ADDR_EXP 28
17547: PUSH
17548: LD_EXP 28
17552: PUSH
17553: LD_INT 35
17555: MINUS
17556: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17557: LD_ADDR_OWVAR 47
17561: PUSH
17562: LD_STRING #Am04-1
17564: PUSH
17565: LD_EXP 28
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: ST_TO_ADDR
// end ; if timerStatus = 2 then
17574: LD_EXP 29
17578: PUSH
17579: LD_INT 2
17581: EQUAL
17582: IFFALSE 17615
// begin timeToSupport = timeToSupport - 0 0$01 ;
17584: LD_ADDR_EXP 28
17588: PUSH
17589: LD_EXP 28
17593: PUSH
17594: LD_INT 35
17596: MINUS
17597: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17598: LD_ADDR_OWVAR 47
17602: PUSH
17603: LD_STRING #Am04-2
17605: PUSH
17606: LD_EXP 28
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: ST_TO_ADDR
// end ; if timerStatus = 3 then
17615: LD_EXP 29
17619: PUSH
17620: LD_INT 3
17622: EQUAL
17623: IFFALSE 17639
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17625: LD_ADDR_EXP 27
17629: PUSH
17630: LD_EXP 27
17634: PUSH
17635: LD_INT 35
17637: MINUS
17638: ST_TO_ADDR
// if timerStatus = 4 then
17639: LD_EXP 29
17643: PUSH
17644: LD_INT 4
17646: EQUAL
17647: IFFALSE 17657
// display_strings =  ;
17649: LD_ADDR_OWVAR 47
17653: PUSH
17654: LD_STRING 
17656: ST_TO_ADDR
// end ; end_of_file
17657: END
// every 0 0$1 trigger not reliefOfCommand and IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17658: LD_EXP 48
17662: NOT
17663: IFFALSE 17676
17665: PUSH
17666: LD_EXP 15
17670: PPUSH
17671: CALL_OW 301
17675: AND
17676: IFFALSE 17733
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 21
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 69
17707: PUSH
17708: LD_INT 14
17710: PUSH
17711: LD_INT 13
17713: PUSH
17714: LD_INT 12
17716: PUSH
17717: LD_INT 11
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: LD_OWVAR 67
17730: ARRAY
17731: LESS
17732: AND
17733: IFFALSE 18321
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
17742: PPUSH
// begin AIEnable = 0 ;
17743: LD_ADDR_EXP 37
17747: PUSH
17748: LD_INT 0
17750: ST_TO_ADDR
// escapeAvalaible = 1 ;
17751: LD_ADDR_EXP 40
17755: PUSH
17756: LD_INT 1
17758: ST_TO_ADDR
// Video ( true ) ;
17759: LD_INT 1
17761: PPUSH
17762: CALL 80408 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17766: LD_INT 3
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_INT 0
17777: PPUSH
17778: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17782: LD_INT 6
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: LD_INT 0
17793: PPUSH
17794: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17798: LD_INT 5
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: LD_INT 0
17809: PPUSH
17810: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17814: LD_INT 3
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17824: LD_INT 97
17826: PPUSH
17827: LD_INT 91
17829: PPUSH
17830: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17834: LD_INT 22
17836: PUSH
17837: LD_INT 3
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 21
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 69
17862: PPUSH
17863: CALL_OW 121
// wait ( 0 0$01 ) ;
17867: LD_INT 35
17869: PPUSH
17870: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17874: LD_INT 22
17876: PUSH
17877: LD_INT 3
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 21
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PPUSH
17898: CALL_OW 69
17902: PPUSH
17903: LD_INT 124
17905: PPUSH
17906: LD_INT 98
17908: PPUSH
17909: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17913: LD_INT 22
17915: PUSH
17916: LD_INT 5
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 21
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PPUSH
17937: CALL_OW 69
17941: PPUSH
17942: CALL_OW 121
// wait ( 0 0$01 ) ;
17946: LD_INT 35
17948: PPUSH
17949: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17953: LD_INT 22
17955: PUSH
17956: LD_INT 5
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 21
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 69
17981: PPUSH
17982: LD_INT 124
17984: PPUSH
17985: LD_INT 98
17987: PPUSH
17988: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
17992: LD_INT 22
17994: PUSH
17995: LD_INT 6
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PPUSH
18016: CALL_OW 69
18020: PPUSH
18021: CALL_OW 121
// wait ( 0 0$01 ) ;
18025: LD_INT 35
18027: PPUSH
18028: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18032: LD_INT 22
18034: PUSH
18035: LD_INT 6
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 21
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PPUSH
18056: CALL_OW 69
18060: PPUSH
18061: LD_INT 124
18063: PPUSH
18064: LD_INT 98
18066: PPUSH
18067: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18071: LD_INT 22
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 21
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: PPUSH
18100: LD_INT 124
18102: PPUSH
18103: LD_INT 96
18105: PPUSH
18106: CALL_OW 114
// wait ( 0 0$1 ) ;
18110: LD_INT 35
18112: PPUSH
18113: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18117: LD_INT 124
18119: PPUSH
18120: LD_INT 96
18122: PPUSH
18123: CALL_OW 84
// p := 0 0$0 ;
18127: LD_ADDR_VAR 0 3
18131: PUSH
18132: LD_INT 0
18134: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18135: LD_ADDR_VAR 0 2
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: LD_INT 22
18145: PUSH
18146: LD_INT 3
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_INT 6
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 21
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18187: LD_INT 35
18189: PPUSH
18190: CALL_OW 67
// p := p + 0 0$1 ;
18194: LD_ADDR_VAR 0 3
18198: PUSH
18199: LD_VAR 0 3
18203: PUSH
18204: LD_INT 35
18206: PLUS
18207: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18208: LD_VAR 0 2
18212: PPUSH
18213: LD_INT 5
18215: PPUSH
18216: CALL_OW 113
// for i in tmp do
18220: LD_ADDR_VAR 0 1
18224: PUSH
18225: LD_VAR 0 2
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18258
// if IsInArea ( i , RussianEscape ) then
18233: LD_VAR 0 1
18237: PPUSH
18238: LD_INT 5
18240: PPUSH
18241: CALL_OW 308
18245: IFFALSE 18256
// RemoveUnit ( i ) ;
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 64
18256: GO 18230
18258: POP
18259: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18260: LD_INT 23
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 21
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 24
18282: PUSH
18283: LD_INT 250
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 69
18299: PUSH
18300: LD_INT 0
18302: EQUAL
18303: IFTRUE 18315
18305: PUSH
18306: LD_VAR 0 3
18310: PUSH
18311: LD_INT 245
18313: GREATEREQUAL
18314: OR
18315: IFFALSE 18187
// FinishMission ;
18317: CALL 18324 0 0
// end ;
18321: PPOPN 3
18323: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
18328: PPUSH
18329: PPUSH
18330: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18331: LD_INT 22
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 21
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 23
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 50
18363: PUSH
18364: EMPTY
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PPUSH
18373: CALL_OW 69
18377: PPUSH
18378: CALL 44460 0 1
18382: PUSH
18383: LD_INT 5
18385: LESS
18386: IFFALSE 18397
// begin YouLost ( LostVictory ) ;
18388: LD_STRING LostVictory
18390: PPUSH
18391: CALL_OW 104
// exit ;
18395: GO 19098
// end ; if not vehicleProduceCounter then
18397: LD_EXP 42
18401: NOT
18402: IFFALSE 18411
// SetAchievement ( ACH_INFANTRY ) ;
18404: LD_STRING ACH_INFANTRY
18406: PPUSH
18407: CALL_OW 543
// if tick <= 20 20$00 then
18411: LD_OWVAR 1
18415: PUSH
18416: LD_INT 42000
18418: LESSEQUAL
18419: IFFALSE 18435
// begin wait ( 3 ) ;
18421: LD_INT 3
18423: PPUSH
18424: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18428: LD_STRING ACH_ASPEED_4
18430: PPUSH
18431: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18435: LD_INT 22
18437: PPUSH
18438: CALL 19103 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18442: LD_INT 69
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: CALL_OW 321
18452: PPUSH
18453: LD_STRING GatlingInGamma
18455: PPUSH
18456: CALL_OW 39
// m1 := false ;
18460: LD_ADDR_VAR 0 3
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// m2 := false ;
18468: LD_ADDR_VAR 0 4
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// m3 := false ;
18476: LD_ADDR_VAR 0 5
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18484: LD_EXP 34
18488: PUSH
18489: LD_INT 1
18491: EQUAL
18492: IFFALSE 18504
18494: PUSH
18495: LD_EXP 35
18499: PUSH
18500: LD_INT 1
18502: EQUAL
18503: AND
18504: IFFALSE 18526
// begin AddMedal ( oil , 1 ) ;
18506: LD_STRING oil
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 101
// m1 := true ;
18516: LD_ADDR_VAR 0 3
18520: PUSH
18521: LD_INT 1
18523: ST_TO_ADDR
// end else
18524: GO 18625
// begin if buildOil = 1 and buildPower = 0 then
18526: LD_EXP 34
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: IFFALSE 18546
18536: PUSH
18537: LD_EXP 35
18541: PUSH
18542: LD_INT 0
18544: EQUAL
18545: AND
18546: IFFALSE 18559
// AddMedal ( oil , - 1 ) ;
18548: LD_STRING oil
18550: PPUSH
18551: LD_INT 1
18553: NEG
18554: PPUSH
18555: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18559: LD_EXP 34
18563: PUSH
18564: LD_INT 0
18566: EQUAL
18567: IFFALSE 18579
18569: PUSH
18570: LD_EXP 35
18574: PUSH
18575: LD_INT 1
18577: EQUAL
18578: AND
18579: IFFALSE 18592
// AddMedal ( oil , - 2 ) ;
18581: LD_STRING oil
18583: PPUSH
18584: LD_INT 2
18586: NEG
18587: PPUSH
18588: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18592: LD_EXP 34
18596: PUSH
18597: LD_INT 0
18599: EQUAL
18600: IFFALSE 18612
18602: PUSH
18603: LD_EXP 35
18607: PUSH
18608: LD_INT 0
18610: EQUAL
18611: AND
18612: IFFALSE 18625
// AddMedal ( oil , - 3 ) ;
18614: LD_STRING oil
18616: PPUSH
18617: LD_INT 3
18619: NEG
18620: PPUSH
18621: CALL_OW 101
// end ; if lostCounter > 3 then
18625: LD_EXP 38
18629: PUSH
18630: LD_INT 3
18632: GREATER
18633: IFFALSE 18648
// AddMedal ( deaths , - 1 ) else
18635: LD_STRING deaths
18637: PPUSH
18638: LD_INT 1
18640: NEG
18641: PPUSH
18642: CALL_OW 101
18646: GO 18666
// begin AddMedal ( deaths , 1 ) ;
18648: LD_STRING deaths
18650: PPUSH
18651: LD_INT 1
18653: PPUSH
18654: CALL_OW 101
// m2 := true ;
18658: LD_ADDR_VAR 0 4
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
// end ; if honor then
18666: LD_EXP 39
18670: IFFALSE 18692
// begin AddMedal ( honour , 1 ) ;
18672: LD_STRING honour
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 101
// m3 := true ;
18682: LD_ADDR_VAR 0 5
18686: PUSH
18687: LD_INT 1
18689: ST_TO_ADDR
// end else
18690: GO 18703
// AddMedal ( honour , - 1 ) ;
18692: LD_STRING honour
18694: PPUSH
18695: LD_INT 1
18697: NEG
18698: PPUSH
18699: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18703: LD_VAR 0 3
18707: IFFALSE 18715
18709: PUSH
18710: LD_VAR 0 4
18714: AND
18715: IFFALSE 18723
18717: PUSH
18718: LD_VAR 0 5
18722: AND
18723: IFFALSE 18735
18725: PUSH
18726: LD_OWVAR 67
18730: PUSH
18731: LD_INT 3
18733: GREATEREQUAL
18734: AND
18735: IFFALSE 18747
// SetAchievementEX ( ACH_AMER , 4 ) ;
18737: LD_STRING ACH_AMER
18739: PPUSH
18740: LD_INT 4
18742: PPUSH
18743: CALL_OW 564
// GiveMedals ( Main ) ;
18747: LD_STRING Main
18749: PPUSH
18750: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18754: LD_INT 22
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 23
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 21
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 69
18793: PPUSH
18794: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18798: LD_EXP 1
18802: PPUSH
18803: LD_EXP 49
18807: PUSH
18808: LD_STRING JMM
18810: STR
18811: PPUSH
18812: CALL_OW 38
// if IsOK ( Bobby ) then
18816: LD_EXP 2
18820: PPUSH
18821: CALL_OW 302
18825: IFFALSE 18845
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18827: LD_EXP 2
18831: PPUSH
18832: LD_EXP 49
18836: PUSH
18837: LD_STRING Bobby
18839: STR
18840: PPUSH
18841: CALL_OW 38
// if IsOK ( Cyrus ) then
18845: LD_EXP 3
18849: PPUSH
18850: CALL_OW 302
18854: IFFALSE 18874
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18856: LD_EXP 3
18860: PPUSH
18861: LD_EXP 49
18865: PUSH
18866: LD_STRING Cyrus
18868: STR
18869: PPUSH
18870: CALL_OW 38
// if IsOK ( Lisa ) then
18874: LD_EXP 4
18878: PPUSH
18879: CALL_OW 302
18883: IFFALSE 18903
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18885: LD_EXP 4
18889: PPUSH
18890: LD_EXP 49
18894: PUSH
18895: LD_STRING Lisa
18897: STR
18898: PPUSH
18899: CALL_OW 38
// if IsOK ( Brown ) then
18903: LD_EXP 7
18907: PPUSH
18908: CALL_OW 302
18912: IFFALSE 18939
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
18914: LD_STRING enableBioCharacter(BIO_JEFF)
18916: PPUSH
18917: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18921: LD_EXP 7
18925: PPUSH
18926: LD_EXP 49
18930: PUSH
18931: LD_STRING Brown
18933: STR
18934: PPUSH
18935: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
18939: LD_EXP 13
18943: PPUSH
18944: CALL_OW 301
18948: NOT
18949: IFFALSE 18976
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
18951: LD_STRING enableBioCharacter(BIO_LUCY)
18953: PPUSH
18954: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18958: LD_EXP 13
18962: PPUSH
18963: LD_EXP 49
18967: PUSH
18968: LD_STRING Donaldson
18970: STR
18971: PPUSH
18972: CALL_OW 38
// end ; if not IsDead ( Frank ) then
18976: LD_EXP 5
18980: PPUSH
18981: CALL_OW 301
18985: NOT
18986: IFFALSE 19006
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
18988: LD_EXP 5
18992: PPUSH
18993: LD_EXP 49
18997: PUSH
18998: LD_STRING Frank
19000: STR
19001: PPUSH
19002: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19006: LD_INT 50
19008: PUSH
19009: EMPTY
19010: LIST
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 21
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 69
19041: PUSH
19042: LD_EXP 1
19046: PUSH
19047: LD_EXP 2
19051: PUSH
19052: LD_EXP 3
19056: PUSH
19057: LD_EXP 4
19061: PUSH
19062: LD_EXP 7
19066: PUSH
19067: LD_EXP 13
19071: PUSH
19072: LD_EXP 5
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: DIFF
19086: PPUSH
19087: LD_STRING 04_other_survivors
19089: PPUSH
19090: CALL_OW 38
// YouWin ;
19094: CALL_OW 103
// end ;
19098: LD_VAR 0 1
19102: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19103: LD_INT 0
19105: PPUSH
19106: PPUSH
19107: PPUSH
19108: PPUSH
// gammaBase = [ ] ;
19109: LD_ADDR_VAR 0 4
19113: PUSH
19114: EMPTY
19115: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19116: LD_ADDR_VAR 0 5
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: LD_INT 22
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 3
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 70
19154: ST_TO_ADDR
// for i in buildings do
19155: LD_ADDR_VAR 0 3
19159: PUSH
19160: LD_VAR 0 5
19164: PUSH
19165: FOR_IN
19166: IFFALSE 19503
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 266
19177: PUSH
19178: LD_INT 6
19180: PUSH
19181: LD_INT 7
19183: PUSH
19184: LD_INT 8
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: IN
19192: IFFALSE 19306
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19194: LD_ADDR_VAR 0 4
19198: PUSH
19199: LD_VAR 0 4
19203: PUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: CALL_OW 266
19213: PUSH
19214: LD_VAR 0 3
19218: PPUSH
19219: CALL_OW 250
19223: PUSH
19224: LD_VAR 0 3
19228: PPUSH
19229: CALL_OW 251
19233: PUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: CALL_OW 254
19243: PUSH
19244: LD_VAR 0 3
19248: PPUSH
19249: CALL_OW 267
19253: PUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 248
19263: PUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 268
19276: PUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 2
19284: PPUSH
19285: CALL_OW 268
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: ADD
19303: ST_TO_ADDR
19304: GO 19501
// if GetBType ( i ) in [ b_bunker ] then
19306: LD_VAR 0 3
19310: PPUSH
19311: CALL_OW 266
19315: PUSH
19316: LD_INT 32
19318: PUSH
19319: EMPTY
19320: LIST
19321: IN
19322: IFFALSE 19419
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19324: LD_ADDR_VAR 0 4
19328: PUSH
19329: LD_VAR 0 4
19333: PUSH
19334: LD_VAR 0 3
19338: PPUSH
19339: CALL_OW 266
19343: PUSH
19344: LD_VAR 0 3
19348: PPUSH
19349: CALL_OW 250
19353: PUSH
19354: LD_VAR 0 3
19358: PPUSH
19359: CALL_OW 251
19363: PUSH
19364: LD_VAR 0 3
19368: PPUSH
19369: CALL_OW 254
19373: PUSH
19374: LD_VAR 0 3
19378: PPUSH
19379: CALL_OW 267
19383: PUSH
19384: LD_VAR 0 3
19388: PPUSH
19389: CALL_OW 248
19393: PUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 269
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: ADD
19416: ST_TO_ADDR
19417: GO 19501
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19419: LD_ADDR_VAR 0 4
19423: PUSH
19424: LD_VAR 0 4
19428: PUSH
19429: LD_VAR 0 3
19433: PPUSH
19434: CALL_OW 266
19438: PUSH
19439: LD_VAR 0 3
19443: PPUSH
19444: CALL_OW 250
19448: PUSH
19449: LD_VAR 0 3
19453: PPUSH
19454: CALL_OW 251
19458: PUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: CALL_OW 254
19468: PUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: CALL_OW 267
19478: PUSH
19479: LD_VAR 0 3
19483: PPUSH
19484: CALL_OW 248
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: ADD
19500: ST_TO_ADDR
// end ;
19501: GO 19165
19503: POP
19504: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19505: LD_VAR 0 4
19509: PPUSH
19510: LD_STRING GammaBase
19512: PPUSH
19513: CALL_OW 39
// end ; end_of_file
19517: LD_VAR 0 2
19521: RET
// every 1 1$15 do
19522: GO 19524
19524: DISABLE
// begin if supply <= 13 and supply > 7 then
19525: LD_EXP 36
19529: PUSH
19530: LD_INT 13
19532: LESSEQUAL
19533: IFFALSE 19545
19535: PUSH
19536: LD_EXP 36
19540: PUSH
19541: LD_INT 7
19543: GREATER
19544: AND
19545: IFFALSE 19568
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19547: LD_INT 3
19549: PPUSH
19550: LD_INT 5
19552: PPUSH
19553: CALL_OW 12
19557: PPUSH
19558: LD_INT 18
19560: PPUSH
19561: LD_INT 1
19563: PPUSH
19564: CALL_OW 55
// if supply <= 7 and supply > 4 then
19568: LD_EXP 36
19572: PUSH
19573: LD_INT 7
19575: LESSEQUAL
19576: IFFALSE 19588
19578: PUSH
19579: LD_EXP 36
19583: PUSH
19584: LD_INT 4
19586: GREATER
19587: AND
19588: IFFALSE 19611
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19590: LD_INT 3
19592: PPUSH
19593: LD_INT 5
19595: PPUSH
19596: CALL_OW 12
19600: PPUSH
19601: LD_INT 19
19603: PPUSH
19604: LD_INT 1
19606: PPUSH
19607: CALL_OW 55
// if supply <= 4 and supply > 0 then
19611: LD_EXP 36
19615: PUSH
19616: LD_INT 4
19618: LESSEQUAL
19619: IFFALSE 19631
19621: PUSH
19622: LD_EXP 36
19626: PUSH
19627: LD_INT 0
19629: GREATER
19630: AND
19631: IFFALSE 19654
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19633: LD_INT 3
19635: PPUSH
19636: LD_INT 5
19638: PPUSH
19639: CALL_OW 12
19643: PPUSH
19644: LD_INT 20
19646: PPUSH
19647: LD_INT 1
19649: PPUSH
19650: CALL_OW 55
// if supply then
19654: LD_EXP 36
19658: IFFALSE 19675
// begin supply = supply - 1 ;
19660: LD_ADDR_EXP 36
19664: PUSH
19665: LD_EXP 36
19669: PUSH
19670: LD_INT 1
19672: MINUS
19673: ST_TO_ADDR
// enable ;
19674: ENABLE
// end ; end ; end_of_file end_of_file
19675: END
// export globalGameSaveCounter ; every 0 0$1 do
19676: GO 19678
19678: DISABLE
// begin enable ;
19679: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19680: LD_STRING updateTimer(
19682: PUSH
19683: LD_OWVAR 1
19687: STR
19688: PUSH
19689: LD_STRING );
19691: STR
19692: PPUSH
19693: CALL_OW 559
// end ;
19697: END
// every 0 0$1 do
19698: GO 19700
19700: DISABLE
// begin globalGameSaveCounter := 0 ;
19701: LD_ADDR_EXP 53
19705: PUSH
19706: LD_INT 0
19708: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19709: LD_STRING setGameSaveCounter(0)
19711: PPUSH
19712: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19716: LD_STRING initStreamRollete();
19718: PPUSH
19719: CALL_OW 559
// InitStreamMode ;
19723: CALL 21075 0 0
// DefineStreamItems ( false ) ;
19727: LD_INT 0
19729: PPUSH
19730: CALL 21539 0 1
// end ;
19734: END
// export function SOS_MapStart ( ) ; begin
19735: LD_INT 0
19737: PPUSH
// if streamModeActive then
19738: LD_EXP 54
19742: IFFALSE 19751
// DefineStreamItems ( true ) ;
19744: LD_INT 1
19746: PPUSH
19747: CALL 21539 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
19751: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
19753: PPUSH
19754: CALL_OW 559
// UpdateLuaVariables ( ) ;
19758: CALL 19775 0 0
// UpdateFactoryWaypoints ( ) ;
19762: CALL 34661 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19766: CALL 34913 0 0
// end ;
19770: LD_VAR 0 1
19774: RET
// function UpdateLuaVariables ( ) ; begin
19775: LD_INT 0
19777: PPUSH
// if globalGameSaveCounter then
19778: LD_EXP 53
19782: IFFALSE 19816
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19784: LD_ADDR_EXP 53
19788: PUSH
19789: LD_EXP 53
19793: PPUSH
19794: CALL 81809 0 1
19798: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19799: LD_STRING setGameSaveCounter(
19801: PUSH
19802: LD_EXP 53
19806: STR
19807: PUSH
19808: LD_STRING )
19810: STR
19811: PPUSH
19812: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19816: LD_STRING setGameDifficulty(
19818: PUSH
19819: LD_OWVAR 67
19823: STR
19824: PUSH
19825: LD_STRING )
19827: STR
19828: PPUSH
19829: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19833: LD_STRING displayDifficulty(
19835: PUSH
19836: LD_OWVAR 67
19840: STR
19841: PUSH
19842: LD_STRING )
19844: STR
19845: PPUSH
19846: CALL_OW 559
// end ;
19850: LD_VAR 0 1
19854: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19855: LD_INT 0
19857: PPUSH
// if p2 = stream_mode then
19858: LD_VAR 0 2
19862: PUSH
19863: LD_INT 100
19865: EQUAL
19866: IFFALSE 20869
// begin if not StreamModeActive then
19868: LD_EXP 54
19872: NOT
19873: IFFALSE 19883
// StreamModeActive := true ;
19875: LD_ADDR_EXP 54
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 0 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 0
19890: EQUAL
19891: IFFALSE 19897
// InitStreamMode ;
19893: CALL 21075 0 0
// if p3 = 1 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 1
19904: EQUAL
19905: IFFALSE 19915
// sRocket := true ;
19907: LD_ADDR_EXP 59
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 2 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 2
19922: EQUAL
19923: IFFALSE 19933
// sSpeed := true ;
19925: LD_ADDR_EXP 58
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// if p3 = 3 then
19933: LD_VAR 0 3
19937: PUSH
19938: LD_INT 3
19940: EQUAL
19941: IFFALSE 19951
// sEngine := true ;
19943: LD_ADDR_EXP 60
19947: PUSH
19948: LD_INT 1
19950: ST_TO_ADDR
// if p3 = 4 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 4
19958: EQUAL
19959: IFFALSE 19969
// sSpec := true ;
19961: LD_ADDR_EXP 57
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 5 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 5
19976: EQUAL
19977: IFFALSE 19987
// sLevel := true ;
19979: LD_ADDR_EXP 61
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 6 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 6
19994: EQUAL
19995: IFFALSE 20005
// sArmoury := true ;
19997: LD_ADDR_EXP 62
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 7 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 7
20012: EQUAL
20013: IFFALSE 20023
// sRadar := true ;
20015: LD_ADDR_EXP 63
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 8 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 8
20030: EQUAL
20031: IFFALSE 20041
// sBunker := true ;
20033: LD_ADDR_EXP 64
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 9 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 9
20048: EQUAL
20049: IFFALSE 20059
// sHack := true ;
20051: LD_ADDR_EXP 65
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 10 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 10
20066: EQUAL
20067: IFFALSE 20077
// sFire := true ;
20069: LD_ADDR_EXP 66
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 11 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 11
20084: EQUAL
20085: IFFALSE 20095
// sRefresh := true ;
20087: LD_ADDR_EXP 67
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 12 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 12
20102: EQUAL
20103: IFFALSE 20113
// sExp := true ;
20105: LD_ADDR_EXP 68
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// if p3 = 13 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 13
20120: EQUAL
20121: IFFALSE 20131
// sDepot := true ;
20123: LD_ADDR_EXP 69
20127: PUSH
20128: LD_INT 1
20130: ST_TO_ADDR
// if p3 = 14 then
20131: LD_VAR 0 3
20135: PUSH
20136: LD_INT 14
20138: EQUAL
20139: IFFALSE 20149
// sFlag := true ;
20141: LD_ADDR_EXP 70
20145: PUSH
20146: LD_INT 1
20148: ST_TO_ADDR
// if p3 = 15 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_INT 15
20156: EQUAL
20157: IFFALSE 20167
// sKamikadze := true ;
20159: LD_ADDR_EXP 78
20163: PUSH
20164: LD_INT 1
20166: ST_TO_ADDR
// if p3 = 16 then
20167: LD_VAR 0 3
20171: PUSH
20172: LD_INT 16
20174: EQUAL
20175: IFFALSE 20185
// sTroll := true ;
20177: LD_ADDR_EXP 79
20181: PUSH
20182: LD_INT 1
20184: ST_TO_ADDR
// if p3 = 17 then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 17
20192: EQUAL
20193: IFFALSE 20203
// sSlow := true ;
20195: LD_ADDR_EXP 80
20199: PUSH
20200: LD_INT 1
20202: ST_TO_ADDR
// if p3 = 18 then
20203: LD_VAR 0 3
20207: PUSH
20208: LD_INT 18
20210: EQUAL
20211: IFFALSE 20221
// sLack := true ;
20213: LD_ADDR_EXP 81
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 19 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 19
20228: EQUAL
20229: IFFALSE 20239
// sTank := true ;
20231: LD_ADDR_EXP 83
20235: PUSH
20236: LD_INT 1
20238: ST_TO_ADDR
// if p3 = 20 then
20239: LD_VAR 0 3
20243: PUSH
20244: LD_INT 20
20246: EQUAL
20247: IFFALSE 20257
// sRemote := true ;
20249: LD_ADDR_EXP 84
20253: PUSH
20254: LD_INT 1
20256: ST_TO_ADDR
// if p3 = 21 then
20257: LD_VAR 0 3
20261: PUSH
20262: LD_INT 21
20264: EQUAL
20265: IFFALSE 20275
// sPowell := true ;
20267: LD_ADDR_EXP 85
20271: PUSH
20272: LD_INT 1
20274: ST_TO_ADDR
// if p3 = 22 then
20275: LD_VAR 0 3
20279: PUSH
20280: LD_INT 22
20282: EQUAL
20283: IFFALSE 20293
// sTeleport := true ;
20285: LD_ADDR_EXP 88
20289: PUSH
20290: LD_INT 1
20292: ST_TO_ADDR
// if p3 = 23 then
20293: LD_VAR 0 3
20297: PUSH
20298: LD_INT 23
20300: EQUAL
20301: IFFALSE 20311
// sOilTower := true ;
20303: LD_ADDR_EXP 90
20307: PUSH
20308: LD_INT 1
20310: ST_TO_ADDR
// if p3 = 24 then
20311: LD_VAR 0 3
20315: PUSH
20316: LD_INT 24
20318: EQUAL
20319: IFFALSE 20329
// sShovel := true ;
20321: LD_ADDR_EXP 91
20325: PUSH
20326: LD_INT 1
20328: ST_TO_ADDR
// if p3 = 25 then
20329: LD_VAR 0 3
20333: PUSH
20334: LD_INT 25
20336: EQUAL
20337: IFFALSE 20347
// sSheik := true ;
20339: LD_ADDR_EXP 92
20343: PUSH
20344: LD_INT 1
20346: ST_TO_ADDR
// if p3 = 26 then
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 26
20354: EQUAL
20355: IFFALSE 20365
// sEarthquake := true ;
20357: LD_ADDR_EXP 94
20361: PUSH
20362: LD_INT 1
20364: ST_TO_ADDR
// if p3 = 27 then
20365: LD_VAR 0 3
20369: PUSH
20370: LD_INT 27
20372: EQUAL
20373: IFFALSE 20383
// sAI := true ;
20375: LD_ADDR_EXP 95
20379: PUSH
20380: LD_INT 1
20382: ST_TO_ADDR
// if p3 = 28 then
20383: LD_VAR 0 3
20387: PUSH
20388: LD_INT 28
20390: EQUAL
20391: IFFALSE 20401
// sCargo := true ;
20393: LD_ADDR_EXP 98
20397: PUSH
20398: LD_INT 1
20400: ST_TO_ADDR
// if p3 = 29 then
20401: LD_VAR 0 3
20405: PUSH
20406: LD_INT 29
20408: EQUAL
20409: IFFALSE 20419
// sDLaser := true ;
20411: LD_ADDR_EXP 99
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
// if p3 = 30 then
20419: LD_VAR 0 3
20423: PUSH
20424: LD_INT 30
20426: EQUAL
20427: IFFALSE 20437
// sExchange := true ;
20429: LD_ADDR_EXP 100
20433: PUSH
20434: LD_INT 1
20436: ST_TO_ADDR
// if p3 = 31 then
20437: LD_VAR 0 3
20441: PUSH
20442: LD_INT 31
20444: EQUAL
20445: IFFALSE 20455
// sFac := true ;
20447: LD_ADDR_EXP 101
20451: PUSH
20452: LD_INT 1
20454: ST_TO_ADDR
// if p3 = 32 then
20455: LD_VAR 0 3
20459: PUSH
20460: LD_INT 32
20462: EQUAL
20463: IFFALSE 20473
// sPower := true ;
20465: LD_ADDR_EXP 102
20469: PUSH
20470: LD_INT 1
20472: ST_TO_ADDR
// if p3 = 33 then
20473: LD_VAR 0 3
20477: PUSH
20478: LD_INT 33
20480: EQUAL
20481: IFFALSE 20491
// sRandom := true ;
20483: LD_ADDR_EXP 103
20487: PUSH
20488: LD_INT 1
20490: ST_TO_ADDR
// if p3 = 34 then
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 34
20498: EQUAL
20499: IFFALSE 20509
// sShield := true ;
20501: LD_ADDR_EXP 104
20505: PUSH
20506: LD_INT 1
20508: ST_TO_ADDR
// if p3 = 35 then
20509: LD_VAR 0 3
20513: PUSH
20514: LD_INT 35
20516: EQUAL
20517: IFFALSE 20527
// sTime := true ;
20519: LD_ADDR_EXP 105
20523: PUSH
20524: LD_INT 1
20526: ST_TO_ADDR
// if p3 = 36 then
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 36
20534: EQUAL
20535: IFFALSE 20545
// sTools := true ;
20537: LD_ADDR_EXP 106
20541: PUSH
20542: LD_INT 1
20544: ST_TO_ADDR
// if p3 = 101 then
20545: LD_VAR 0 3
20549: PUSH
20550: LD_INT 101
20552: EQUAL
20553: IFFALSE 20563
// sSold := true ;
20555: LD_ADDR_EXP 71
20559: PUSH
20560: LD_INT 1
20562: ST_TO_ADDR
// if p3 = 102 then
20563: LD_VAR 0 3
20567: PUSH
20568: LD_INT 102
20570: EQUAL
20571: IFFALSE 20581
// sDiff := true ;
20573: LD_ADDR_EXP 72
20577: PUSH
20578: LD_INT 1
20580: ST_TO_ADDR
// if p3 = 103 then
20581: LD_VAR 0 3
20585: PUSH
20586: LD_INT 103
20588: EQUAL
20589: IFFALSE 20599
// sFog := true ;
20591: LD_ADDR_EXP 75
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// if p3 = 104 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 104
20606: EQUAL
20607: IFFALSE 20617
// sReset := true ;
20609: LD_ADDR_EXP 76
20613: PUSH
20614: LD_INT 1
20616: ST_TO_ADDR
// if p3 = 105 then
20617: LD_VAR 0 3
20621: PUSH
20622: LD_INT 105
20624: EQUAL
20625: IFFALSE 20635
// sSun := true ;
20627: LD_ADDR_EXP 77
20631: PUSH
20632: LD_INT 1
20634: ST_TO_ADDR
// if p3 = 106 then
20635: LD_VAR 0 3
20639: PUSH
20640: LD_INT 106
20642: EQUAL
20643: IFFALSE 20653
// sTiger := true ;
20645: LD_ADDR_EXP 73
20649: PUSH
20650: LD_INT 1
20652: ST_TO_ADDR
// if p3 = 107 then
20653: LD_VAR 0 3
20657: PUSH
20658: LD_INT 107
20660: EQUAL
20661: IFFALSE 20671
// sBomb := true ;
20663: LD_ADDR_EXP 74
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if p3 = 108 then
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 108
20678: EQUAL
20679: IFFALSE 20689
// sWound := true ;
20681: LD_ADDR_EXP 82
20685: PUSH
20686: LD_INT 1
20688: ST_TO_ADDR
// if p3 = 109 then
20689: LD_VAR 0 3
20693: PUSH
20694: LD_INT 109
20696: EQUAL
20697: IFFALSE 20707
// sBetray := true ;
20699: LD_ADDR_EXP 86
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// if p3 = 110 then
20707: LD_VAR 0 3
20711: PUSH
20712: LD_INT 110
20714: EQUAL
20715: IFFALSE 20725
// sContamin := true ;
20717: LD_ADDR_EXP 87
20721: PUSH
20722: LD_INT 1
20724: ST_TO_ADDR
// if p3 = 111 then
20725: LD_VAR 0 3
20729: PUSH
20730: LD_INT 111
20732: EQUAL
20733: IFFALSE 20743
// sOil := true ;
20735: LD_ADDR_EXP 89
20739: PUSH
20740: LD_INT 1
20742: ST_TO_ADDR
// if p3 = 112 then
20743: LD_VAR 0 3
20747: PUSH
20748: LD_INT 112
20750: EQUAL
20751: IFFALSE 20761
// sStu := true ;
20753: LD_ADDR_EXP 93
20757: PUSH
20758: LD_INT 1
20760: ST_TO_ADDR
// if p3 = 113 then
20761: LD_VAR 0 3
20765: PUSH
20766: LD_INT 113
20768: EQUAL
20769: IFFALSE 20779
// sBazooka := true ;
20771: LD_ADDR_EXP 96
20775: PUSH
20776: LD_INT 1
20778: ST_TO_ADDR
// if p3 = 114 then
20779: LD_VAR 0 3
20783: PUSH
20784: LD_INT 114
20786: EQUAL
20787: IFFALSE 20797
// sMortar := true ;
20789: LD_ADDR_EXP 97
20793: PUSH
20794: LD_INT 1
20796: ST_TO_ADDR
// if p3 = 115 then
20797: LD_VAR 0 3
20801: PUSH
20802: LD_INT 115
20804: EQUAL
20805: IFFALSE 20815
// sRanger := true ;
20807: LD_ADDR_EXP 107
20811: PUSH
20812: LD_INT 1
20814: ST_TO_ADDR
// if p3 = 116 then
20815: LD_VAR 0 3
20819: PUSH
20820: LD_INT 116
20822: EQUAL
20823: IFFALSE 20833
// sComputer := true ;
20825: LD_ADDR_EXP 108
20829: PUSH
20830: LD_INT 1
20832: ST_TO_ADDR
// if p3 = 117 then
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 117
20840: EQUAL
20841: IFFALSE 20851
// s30 := true ;
20843: LD_ADDR_EXP 109
20847: PUSH
20848: LD_INT 1
20850: ST_TO_ADDR
// if p3 = 118 then
20851: LD_VAR 0 3
20855: PUSH
20856: LD_INT 118
20858: EQUAL
20859: IFFALSE 20869
// s60 := true ;
20861: LD_ADDR_EXP 110
20865: PUSH
20866: LD_INT 1
20868: ST_TO_ADDR
// end ; if p2 = hack_mode then
20869: LD_VAR 0 2
20873: PUSH
20874: LD_INT 101
20876: EQUAL
20877: IFFALSE 21005
// begin case p3 of 1 :
20879: LD_VAR 0 3
20883: PUSH
20884: LD_INT 1
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20899
20892: POP
// hHackUnlimitedResources ; 2 :
20893: CALL 33268 0 0
20897: GO 21005
20899: LD_INT 2
20901: DOUBLE
20902: EQUAL
20903: IFTRUE 20907
20905: GO 20914
20907: POP
// hHackSetLevel10 ; 3 :
20908: CALL 33401 0 0
20912: GO 21005
20914: LD_INT 3
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20922
20920: GO 20929
20922: POP
// hHackSetLevel10YourUnits ; 4 :
20923: CALL 33486 0 0
20927: GO 21005
20929: LD_INT 4
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 20944
20937: POP
// hHackInvincible ; 5 :
20938: CALL 33934 0 0
20942: GO 21005
20944: LD_INT 5
20946: DOUBLE
20947: EQUAL
20948: IFTRUE 20952
20950: GO 20959
20952: POP
// hHackInvisible ; 6 :
20953: CALL 34045 0 0
20957: GO 21005
20959: LD_INT 6
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20974
20967: POP
// hHackChangeYourSide ; 7 :
20968: CALL 34102 0 0
20972: GO 21005
20974: LD_INT 7
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 20989
20982: POP
// hHackChangeUnitSide ; 8 :
20983: CALL 34144 0 0
20987: GO 21005
20989: LD_INT 8
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21004
20997: POP
// hHackFog ; end ;
20998: CALL 34245 0 0
21002: GO 21005
21004: POP
// end ; if p2 = game_save_mode then
21005: LD_VAR 0 2
21009: PUSH
21010: LD_INT 102
21012: EQUAL
21013: IFFALSE 21070
// begin if p3 = 1 then
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 1
21022: EQUAL
21023: IFFALSE 21035
// globalGameSaveCounter := p4 ;
21025: LD_ADDR_EXP 53
21029: PUSH
21030: LD_VAR 0 4
21034: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21035: LD_VAR 0 3
21039: PUSH
21040: LD_INT 2
21042: EQUAL
21043: IFFALSE 21051
21045: PUSH
21046: LD_EXP 53
21050: AND
21051: IFFALSE 21070
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21053: LD_STRING setGameSaveCounter(
21055: PUSH
21056: LD_EXP 53
21060: STR
21061: PUSH
21062: LD_STRING )
21064: STR
21065: PPUSH
21066: CALL_OW 559
// end ; end ;
21070: LD_VAR 0 7
21074: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21075: LD_INT 0
21077: PPUSH
// streamModeActive := false ;
21078: LD_ADDR_EXP 54
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
// normalCounter := 36 ;
21086: LD_ADDR_EXP 55
21090: PUSH
21091: LD_INT 36
21093: ST_TO_ADDR
// hardcoreCounter := 18 ;
21094: LD_ADDR_EXP 56
21098: PUSH
21099: LD_INT 18
21101: ST_TO_ADDR
// sRocket := false ;
21102: LD_ADDR_EXP 59
21106: PUSH
21107: LD_INT 0
21109: ST_TO_ADDR
// sSpeed := false ;
21110: LD_ADDR_EXP 58
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// sEngine := false ;
21118: LD_ADDR_EXP 60
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// sSpec := false ;
21126: LD_ADDR_EXP 57
21130: PUSH
21131: LD_INT 0
21133: ST_TO_ADDR
// sLevel := false ;
21134: LD_ADDR_EXP 61
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// sArmoury := false ;
21142: LD_ADDR_EXP 62
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// sRadar := false ;
21150: LD_ADDR_EXP 63
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// sBunker := false ;
21158: LD_ADDR_EXP 64
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sHack := false ;
21166: LD_ADDR_EXP 65
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sFire := false ;
21174: LD_ADDR_EXP 66
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sRefresh := false ;
21182: LD_ADDR_EXP 67
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// sExp := false ;
21190: LD_ADDR_EXP 68
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// sDepot := false ;
21198: LD_ADDR_EXP 69
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sFlag := false ;
21206: LD_ADDR_EXP 70
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sKamikadze := false ;
21214: LD_ADDR_EXP 78
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sTroll := false ;
21222: LD_ADDR_EXP 79
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sSlow := false ;
21230: LD_ADDR_EXP 80
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sLack := false ;
21238: LD_ADDR_EXP 81
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sTank := false ;
21246: LD_ADDR_EXP 83
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sRemote := false ;
21254: LD_ADDR_EXP 84
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sPowell := false ;
21262: LD_ADDR_EXP 85
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sTeleport := false ;
21270: LD_ADDR_EXP 88
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sOilTower := false ;
21278: LD_ADDR_EXP 90
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sShovel := false ;
21286: LD_ADDR_EXP 91
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sSheik := false ;
21294: LD_ADDR_EXP 92
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sEarthquake := false ;
21302: LD_ADDR_EXP 94
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sAI := false ;
21310: LD_ADDR_EXP 95
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sCargo := false ;
21318: LD_ADDR_EXP 98
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sDLaser := false ;
21326: LD_ADDR_EXP 99
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sExchange := false ;
21334: LD_ADDR_EXP 100
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sFac := false ;
21342: LD_ADDR_EXP 101
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sPower := false ;
21350: LD_ADDR_EXP 102
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sRandom := false ;
21358: LD_ADDR_EXP 103
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sShield := false ;
21366: LD_ADDR_EXP 104
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sTime := false ;
21374: LD_ADDR_EXP 105
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sTools := false ;
21382: LD_ADDR_EXP 106
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sSold := false ;
21390: LD_ADDR_EXP 71
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sDiff := false ;
21398: LD_ADDR_EXP 72
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sFog := false ;
21406: LD_ADDR_EXP 75
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sReset := false ;
21414: LD_ADDR_EXP 76
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sSun := false ;
21422: LD_ADDR_EXP 77
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sTiger := false ;
21430: LD_ADDR_EXP 73
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sBomb := false ;
21438: LD_ADDR_EXP 74
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sWound := false ;
21446: LD_ADDR_EXP 82
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sBetray := false ;
21454: LD_ADDR_EXP 86
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sContamin := false ;
21462: LD_ADDR_EXP 87
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sOil := false ;
21470: LD_ADDR_EXP 89
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sStu := false ;
21478: LD_ADDR_EXP 93
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sBazooka := false ;
21486: LD_ADDR_EXP 96
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sMortar := false ;
21494: LD_ADDR_EXP 97
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sRanger := false ;
21502: LD_ADDR_EXP 107
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sComputer := false ;
21510: LD_ADDR_EXP 108
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// s30 := false ;
21518: LD_ADDR_EXP 109
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// s60 := false ;
21526: LD_ADDR_EXP 110
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// end ;
21534: LD_VAR 0 1
21538: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21539: LD_INT 0
21541: PPUSH
21542: PPUSH
21543: PPUSH
21544: PPUSH
21545: PPUSH
21546: PPUSH
21547: PPUSH
// result := [ ] ;
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: EMPTY
21554: ST_TO_ADDR
// if campaign_id = 1 then
21555: LD_OWVAR 69
21559: PUSH
21560: LD_INT 1
21562: EQUAL
21563: IFFALSE 24729
// begin case mission_number of 1 :
21565: LD_OWVAR 70
21569: PUSH
21570: LD_INT 1
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21654
21578: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: LD_INT 4
21589: PUSH
21590: LD_INT 11
21592: PUSH
21593: LD_INT 12
21595: PUSH
21596: LD_INT 15
21598: PUSH
21599: LD_INT 16
21601: PUSH
21602: LD_INT 22
21604: PUSH
21605: LD_INT 23
21607: PUSH
21608: LD_INT 26
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 101
21624: PUSH
21625: LD_INT 102
21627: PUSH
21628: LD_INT 106
21630: PUSH
21631: LD_INT 116
21633: PUSH
21634: LD_INT 117
21636: PUSH
21637: LD_INT 118
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: ST_TO_ADDR
21652: GO 24727
21654: LD_INT 2
21656: DOUBLE
21657: EQUAL
21658: IFTRUE 21662
21660: GO 21746
21662: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21663: LD_ADDR_VAR 0 2
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 4
21673: PUSH
21674: LD_INT 11
21676: PUSH
21677: LD_INT 12
21679: PUSH
21680: LD_INT 15
21682: PUSH
21683: LD_INT 16
21685: PUSH
21686: LD_INT 22
21688: PUSH
21689: LD_INT 23
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 101
21708: PUSH
21709: LD_INT 102
21711: PUSH
21712: LD_INT 105
21714: PUSH
21715: LD_INT 106
21717: PUSH
21718: LD_INT 108
21720: PUSH
21721: LD_INT 116
21723: PUSH
21724: LD_INT 117
21726: PUSH
21727: LD_INT 118
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: ST_TO_ADDR
21744: GO 24727
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21842
21754: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21755: LD_ADDR_VAR 0 2
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 4
21765: PUSH
21766: LD_INT 5
21768: PUSH
21769: LD_INT 11
21771: PUSH
21772: LD_INT 12
21774: PUSH
21775: LD_INT 15
21777: PUSH
21778: LD_INT 16
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_INT 26
21786: PUSH
21787: LD_INT 36
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 101
21804: PUSH
21805: LD_INT 102
21807: PUSH
21808: LD_INT 105
21810: PUSH
21811: LD_INT 106
21813: PUSH
21814: LD_INT 108
21816: PUSH
21817: LD_INT 116
21819: PUSH
21820: LD_INT 117
21822: PUSH
21823: LD_INT 118
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: ST_TO_ADDR
21840: GO 24727
21842: LD_INT 4
21844: DOUBLE
21845: EQUAL
21846: IFTRUE 21850
21848: GO 21946
21850: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 4
21861: PUSH
21862: LD_INT 5
21864: PUSH
21865: LD_INT 8
21867: PUSH
21868: LD_INT 11
21870: PUSH
21871: LD_INT 12
21873: PUSH
21874: LD_INT 15
21876: PUSH
21877: LD_INT 16
21879: PUSH
21880: LD_INT 22
21882: PUSH
21883: LD_INT 23
21885: PUSH
21886: LD_INT 26
21888: PUSH
21889: LD_INT 36
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 101
21908: PUSH
21909: LD_INT 102
21911: PUSH
21912: LD_INT 105
21914: PUSH
21915: LD_INT 106
21917: PUSH
21918: LD_INT 108
21920: PUSH
21921: LD_INT 116
21923: PUSH
21924: LD_INT 117
21926: PUSH
21927: LD_INT 118
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: ST_TO_ADDR
21944: GO 24727
21946: LD_INT 5
21948: DOUBLE
21949: EQUAL
21950: IFTRUE 21954
21952: GO 22066
21954: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21955: LD_ADDR_VAR 0 2
21959: PUSH
21960: LD_INT 2
21962: PUSH
21963: LD_INT 4
21965: PUSH
21966: LD_INT 5
21968: PUSH
21969: LD_INT 6
21971: PUSH
21972: LD_INT 8
21974: PUSH
21975: LD_INT 11
21977: PUSH
21978: LD_INT 12
21980: PUSH
21981: LD_INT 15
21983: PUSH
21984: LD_INT 16
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_INT 23
21992: PUSH
21993: LD_INT 25
21995: PUSH
21996: LD_INT 26
21998: PUSH
21999: LD_INT 36
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 101
22020: PUSH
22021: LD_INT 102
22023: PUSH
22024: LD_INT 105
22026: PUSH
22027: LD_INT 106
22029: PUSH
22030: LD_INT 108
22032: PUSH
22033: LD_INT 109
22035: PUSH
22036: LD_INT 112
22038: PUSH
22039: LD_INT 116
22041: PUSH
22042: LD_INT 117
22044: PUSH
22045: LD_INT 118
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: ST_TO_ADDR
22064: GO 24727
22066: LD_INT 6
22068: DOUBLE
22069: EQUAL
22070: IFTRUE 22074
22072: GO 22206
22074: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22075: LD_ADDR_VAR 0 2
22079: PUSH
22080: LD_INT 2
22082: PUSH
22083: LD_INT 4
22085: PUSH
22086: LD_INT 5
22088: PUSH
22089: LD_INT 6
22091: PUSH
22092: LD_INT 8
22094: PUSH
22095: LD_INT 11
22097: PUSH
22098: LD_INT 12
22100: PUSH
22101: LD_INT 15
22103: PUSH
22104: LD_INT 16
22106: PUSH
22107: LD_INT 20
22109: PUSH
22110: LD_INT 21
22112: PUSH
22113: LD_INT 22
22115: PUSH
22116: LD_INT 23
22118: PUSH
22119: LD_INT 25
22121: PUSH
22122: LD_INT 26
22124: PUSH
22125: LD_INT 30
22127: PUSH
22128: LD_INT 31
22130: PUSH
22131: LD_INT 32
22133: PUSH
22134: LD_INT 36
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 101
22160: PUSH
22161: LD_INT 102
22163: PUSH
22164: LD_INT 105
22166: PUSH
22167: LD_INT 106
22169: PUSH
22170: LD_INT 108
22172: PUSH
22173: LD_INT 109
22175: PUSH
22176: LD_INT 112
22178: PUSH
22179: LD_INT 116
22181: PUSH
22182: LD_INT 117
22184: PUSH
22185: LD_INT 118
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: ST_TO_ADDR
22204: GO 24727
22206: LD_INT 7
22208: DOUBLE
22209: EQUAL
22210: IFTRUE 22214
22212: GO 22326
22214: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22215: LD_ADDR_VAR 0 2
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: LD_INT 4
22225: PUSH
22226: LD_INT 5
22228: PUSH
22229: LD_INT 7
22231: PUSH
22232: LD_INT 11
22234: PUSH
22235: LD_INT 12
22237: PUSH
22238: LD_INT 15
22240: PUSH
22241: LD_INT 16
22243: PUSH
22244: LD_INT 20
22246: PUSH
22247: LD_INT 21
22249: PUSH
22250: LD_INT 22
22252: PUSH
22253: LD_INT 23
22255: PUSH
22256: LD_INT 25
22258: PUSH
22259: LD_INT 26
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 101
22280: PUSH
22281: LD_INT 102
22283: PUSH
22284: LD_INT 103
22286: PUSH
22287: LD_INT 105
22289: PUSH
22290: LD_INT 106
22292: PUSH
22293: LD_INT 108
22295: PUSH
22296: LD_INT 112
22298: PUSH
22299: LD_INT 116
22301: PUSH
22302: LD_INT 117
22304: PUSH
22305: LD_INT 118
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: ST_TO_ADDR
22324: GO 24727
22326: LD_INT 8
22328: DOUBLE
22329: EQUAL
22330: IFTRUE 22334
22332: GO 22474
22334: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22335: LD_ADDR_VAR 0 2
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: LD_INT 4
22345: PUSH
22346: LD_INT 5
22348: PUSH
22349: LD_INT 6
22351: PUSH
22352: LD_INT 7
22354: PUSH
22355: LD_INT 8
22357: PUSH
22358: LD_INT 11
22360: PUSH
22361: LD_INT 12
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 16
22369: PUSH
22370: LD_INT 20
22372: PUSH
22373: LD_INT 21
22375: PUSH
22376: LD_INT 22
22378: PUSH
22379: LD_INT 23
22381: PUSH
22382: LD_INT 25
22384: PUSH
22385: LD_INT 26
22387: PUSH
22388: LD_INT 30
22390: PUSH
22391: LD_INT 31
22393: PUSH
22394: LD_INT 32
22396: PUSH
22397: LD_INT 36
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 101
22424: PUSH
22425: LD_INT 102
22427: PUSH
22428: LD_INT 103
22430: PUSH
22431: LD_INT 105
22433: PUSH
22434: LD_INT 106
22436: PUSH
22437: LD_INT 108
22439: PUSH
22440: LD_INT 109
22442: PUSH
22443: LD_INT 112
22445: PUSH
22446: LD_INT 116
22448: PUSH
22449: LD_INT 117
22451: PUSH
22452: LD_INT 118
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: ST_TO_ADDR
22472: GO 24727
22474: LD_INT 9
22476: DOUBLE
22477: EQUAL
22478: IFTRUE 22482
22480: GO 22630
22482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22483: LD_ADDR_VAR 0 2
22487: PUSH
22488: LD_INT 2
22490: PUSH
22491: LD_INT 4
22493: PUSH
22494: LD_INT 5
22496: PUSH
22497: LD_INT 6
22499: PUSH
22500: LD_INT 7
22502: PUSH
22503: LD_INT 8
22505: PUSH
22506: LD_INT 11
22508: PUSH
22509: LD_INT 12
22511: PUSH
22512: LD_INT 15
22514: PUSH
22515: LD_INT 16
22517: PUSH
22518: LD_INT 20
22520: PUSH
22521: LD_INT 21
22523: PUSH
22524: LD_INT 22
22526: PUSH
22527: LD_INT 23
22529: PUSH
22530: LD_INT 25
22532: PUSH
22533: LD_INT 26
22535: PUSH
22536: LD_INT 28
22538: PUSH
22539: LD_INT 30
22541: PUSH
22542: LD_INT 31
22544: PUSH
22545: LD_INT 32
22547: PUSH
22548: LD_INT 36
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 101
22576: PUSH
22577: LD_INT 102
22579: PUSH
22580: LD_INT 103
22582: PUSH
22583: LD_INT 105
22585: PUSH
22586: LD_INT 106
22588: PUSH
22589: LD_INT 108
22591: PUSH
22592: LD_INT 109
22594: PUSH
22595: LD_INT 112
22597: PUSH
22598: LD_INT 114
22600: PUSH
22601: LD_INT 116
22603: PUSH
22604: LD_INT 117
22606: PUSH
22607: LD_INT 118
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: ST_TO_ADDR
22628: GO 24727
22630: LD_INT 10
22632: DOUBLE
22633: EQUAL
22634: IFTRUE 22638
22636: GO 22834
22638: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22639: LD_ADDR_VAR 0 2
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: LD_INT 4
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: LD_INT 6
22655: PUSH
22656: LD_INT 7
22658: PUSH
22659: LD_INT 8
22661: PUSH
22662: LD_INT 9
22664: PUSH
22665: LD_INT 10
22667: PUSH
22668: LD_INT 11
22670: PUSH
22671: LD_INT 12
22673: PUSH
22674: LD_INT 13
22676: PUSH
22677: LD_INT 14
22679: PUSH
22680: LD_INT 15
22682: PUSH
22683: LD_INT 16
22685: PUSH
22686: LD_INT 17
22688: PUSH
22689: LD_INT 18
22691: PUSH
22692: LD_INT 19
22694: PUSH
22695: LD_INT 20
22697: PUSH
22698: LD_INT 21
22700: PUSH
22701: LD_INT 22
22703: PUSH
22704: LD_INT 23
22706: PUSH
22707: LD_INT 24
22709: PUSH
22710: LD_INT 25
22712: PUSH
22713: LD_INT 26
22715: PUSH
22716: LD_INT 28
22718: PUSH
22719: LD_INT 30
22721: PUSH
22722: LD_INT 31
22724: PUSH
22725: LD_INT 32
22727: PUSH
22728: LD_INT 36
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 101
22764: PUSH
22765: LD_INT 102
22767: PUSH
22768: LD_INT 103
22770: PUSH
22771: LD_INT 104
22773: PUSH
22774: LD_INT 105
22776: PUSH
22777: LD_INT 106
22779: PUSH
22780: LD_INT 107
22782: PUSH
22783: LD_INT 108
22785: PUSH
22786: LD_INT 109
22788: PUSH
22789: LD_INT 110
22791: PUSH
22792: LD_INT 111
22794: PUSH
22795: LD_INT 112
22797: PUSH
22798: LD_INT 114
22800: PUSH
22801: LD_INT 116
22803: PUSH
22804: LD_INT 117
22806: PUSH
22807: LD_INT 118
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 24727
22834: LD_INT 11
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 23046
22842: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22843: LD_ADDR_VAR 0 2
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 4
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: LD_INT 6
22862: PUSH
22863: LD_INT 7
22865: PUSH
22866: LD_INT 8
22868: PUSH
22869: LD_INT 9
22871: PUSH
22872: LD_INT 10
22874: PUSH
22875: LD_INT 11
22877: PUSH
22878: LD_INT 12
22880: PUSH
22881: LD_INT 13
22883: PUSH
22884: LD_INT 14
22886: PUSH
22887: LD_INT 15
22889: PUSH
22890: LD_INT 16
22892: PUSH
22893: LD_INT 17
22895: PUSH
22896: LD_INT 18
22898: PUSH
22899: LD_INT 19
22901: PUSH
22902: LD_INT 20
22904: PUSH
22905: LD_INT 21
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_INT 23
22913: PUSH
22914: LD_INT 24
22916: PUSH
22917: LD_INT 25
22919: PUSH
22920: LD_INT 26
22922: PUSH
22923: LD_INT 28
22925: PUSH
22926: LD_INT 30
22928: PUSH
22929: LD_INT 31
22931: PUSH
22932: LD_INT 32
22934: PUSH
22935: LD_INT 34
22937: PUSH
22938: LD_INT 36
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 101
22976: PUSH
22977: LD_INT 102
22979: PUSH
22980: LD_INT 103
22982: PUSH
22983: LD_INT 104
22985: PUSH
22986: LD_INT 105
22988: PUSH
22989: LD_INT 106
22991: PUSH
22992: LD_INT 107
22994: PUSH
22995: LD_INT 108
22997: PUSH
22998: LD_INT 109
23000: PUSH
23001: LD_INT 110
23003: PUSH
23004: LD_INT 111
23006: PUSH
23007: LD_INT 112
23009: PUSH
23010: LD_INT 114
23012: PUSH
23013: LD_INT 116
23015: PUSH
23016: LD_INT 117
23018: PUSH
23019: LD_INT 118
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: ST_TO_ADDR
23044: GO 24727
23046: LD_INT 12
23048: DOUBLE
23049: EQUAL
23050: IFTRUE 23054
23052: GO 23274
23054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23055: LD_ADDR_VAR 0 2
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: LD_INT 2
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: LD_INT 4
23071: PUSH
23072: LD_INT 5
23074: PUSH
23075: LD_INT 6
23077: PUSH
23078: LD_INT 7
23080: PUSH
23081: LD_INT 8
23083: PUSH
23084: LD_INT 9
23086: PUSH
23087: LD_INT 10
23089: PUSH
23090: LD_INT 11
23092: PUSH
23093: LD_INT 12
23095: PUSH
23096: LD_INT 13
23098: PUSH
23099: LD_INT 14
23101: PUSH
23102: LD_INT 15
23104: PUSH
23105: LD_INT 16
23107: PUSH
23108: LD_INT 17
23110: PUSH
23111: LD_INT 18
23113: PUSH
23114: LD_INT 19
23116: PUSH
23117: LD_INT 20
23119: PUSH
23120: LD_INT 21
23122: PUSH
23123: LD_INT 22
23125: PUSH
23126: LD_INT 23
23128: PUSH
23129: LD_INT 24
23131: PUSH
23132: LD_INT 25
23134: PUSH
23135: LD_INT 26
23137: PUSH
23138: LD_INT 27
23140: PUSH
23141: LD_INT 28
23143: PUSH
23144: LD_INT 30
23146: PUSH
23147: LD_INT 31
23149: PUSH
23150: LD_INT 32
23152: PUSH
23153: LD_INT 33
23155: PUSH
23156: LD_INT 34
23158: PUSH
23159: LD_INT 36
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 101
23200: PUSH
23201: LD_INT 102
23203: PUSH
23204: LD_INT 103
23206: PUSH
23207: LD_INT 104
23209: PUSH
23210: LD_INT 105
23212: PUSH
23213: LD_INT 106
23215: PUSH
23216: LD_INT 107
23218: PUSH
23219: LD_INT 108
23221: PUSH
23222: LD_INT 109
23224: PUSH
23225: LD_INT 110
23227: PUSH
23228: LD_INT 111
23230: PUSH
23231: LD_INT 112
23233: PUSH
23234: LD_INT 113
23236: PUSH
23237: LD_INT 114
23239: PUSH
23240: LD_INT 116
23242: PUSH
23243: LD_INT 117
23245: PUSH
23246: LD_INT 118
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 24727
23274: LD_INT 13
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23490
23282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: LD_INT 2
23293: PUSH
23294: LD_INT 3
23296: PUSH
23297: LD_INT 4
23299: PUSH
23300: LD_INT 5
23302: PUSH
23303: LD_INT 8
23305: PUSH
23306: LD_INT 9
23308: PUSH
23309: LD_INT 10
23311: PUSH
23312: LD_INT 11
23314: PUSH
23315: LD_INT 12
23317: PUSH
23318: LD_INT 14
23320: PUSH
23321: LD_INT 15
23323: PUSH
23324: LD_INT 16
23326: PUSH
23327: LD_INT 17
23329: PUSH
23330: LD_INT 18
23332: PUSH
23333: LD_INT 19
23335: PUSH
23336: LD_INT 20
23338: PUSH
23339: LD_INT 21
23341: PUSH
23342: LD_INT 22
23344: PUSH
23345: LD_INT 23
23347: PUSH
23348: LD_INT 24
23350: PUSH
23351: LD_INT 25
23353: PUSH
23354: LD_INT 26
23356: PUSH
23357: LD_INT 27
23359: PUSH
23360: LD_INT 28
23362: PUSH
23363: LD_INT 30
23365: PUSH
23366: LD_INT 31
23368: PUSH
23369: LD_INT 32
23371: PUSH
23372: LD_INT 33
23374: PUSH
23375: LD_INT 34
23377: PUSH
23378: LD_INT 36
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 101
23416: PUSH
23417: LD_INT 102
23419: PUSH
23420: LD_INT 103
23422: PUSH
23423: LD_INT 104
23425: PUSH
23426: LD_INT 105
23428: PUSH
23429: LD_INT 106
23431: PUSH
23432: LD_INT 107
23434: PUSH
23435: LD_INT 108
23437: PUSH
23438: LD_INT 109
23440: PUSH
23441: LD_INT 110
23443: PUSH
23444: LD_INT 111
23446: PUSH
23447: LD_INT 112
23449: PUSH
23450: LD_INT 113
23452: PUSH
23453: LD_INT 114
23455: PUSH
23456: LD_INT 116
23458: PUSH
23459: LD_INT 117
23461: PUSH
23462: LD_INT 118
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: ST_TO_ADDR
23488: GO 24727
23490: LD_INT 14
23492: DOUBLE
23493: EQUAL
23494: IFTRUE 23498
23496: GO 23722
23498: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23499: LD_ADDR_VAR 0 2
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: LD_INT 3
23512: PUSH
23513: LD_INT 4
23515: PUSH
23516: LD_INT 5
23518: PUSH
23519: LD_INT 6
23521: PUSH
23522: LD_INT 7
23524: PUSH
23525: LD_INT 8
23527: PUSH
23528: LD_INT 9
23530: PUSH
23531: LD_INT 10
23533: PUSH
23534: LD_INT 11
23536: PUSH
23537: LD_INT 12
23539: PUSH
23540: LD_INT 13
23542: PUSH
23543: LD_INT 14
23545: PUSH
23546: LD_INT 15
23548: PUSH
23549: LD_INT 16
23551: PUSH
23552: LD_INT 17
23554: PUSH
23555: LD_INT 18
23557: PUSH
23558: LD_INT 19
23560: PUSH
23561: LD_INT 20
23563: PUSH
23564: LD_INT 21
23566: PUSH
23567: LD_INT 22
23569: PUSH
23570: LD_INT 23
23572: PUSH
23573: LD_INT 24
23575: PUSH
23576: LD_INT 25
23578: PUSH
23579: LD_INT 26
23581: PUSH
23582: LD_INT 27
23584: PUSH
23585: LD_INT 28
23587: PUSH
23588: LD_INT 29
23590: PUSH
23591: LD_INT 30
23593: PUSH
23594: LD_INT 31
23596: PUSH
23597: LD_INT 32
23599: PUSH
23600: LD_INT 33
23602: PUSH
23603: LD_INT 34
23605: PUSH
23606: LD_INT 36
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 101
23648: PUSH
23649: LD_INT 102
23651: PUSH
23652: LD_INT 103
23654: PUSH
23655: LD_INT 104
23657: PUSH
23658: LD_INT 105
23660: PUSH
23661: LD_INT 106
23663: PUSH
23664: LD_INT 107
23666: PUSH
23667: LD_INT 108
23669: PUSH
23670: LD_INT 109
23672: PUSH
23673: LD_INT 110
23675: PUSH
23676: LD_INT 111
23678: PUSH
23679: LD_INT 112
23681: PUSH
23682: LD_INT 113
23684: PUSH
23685: LD_INT 114
23687: PUSH
23688: LD_INT 116
23690: PUSH
23691: LD_INT 117
23693: PUSH
23694: LD_INT 118
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: ST_TO_ADDR
23720: GO 24727
23722: LD_INT 15
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23954
23730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23731: LD_ADDR_VAR 0 2
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: LD_INT 3
23744: PUSH
23745: LD_INT 4
23747: PUSH
23748: LD_INT 5
23750: PUSH
23751: LD_INT 6
23753: PUSH
23754: LD_INT 7
23756: PUSH
23757: LD_INT 8
23759: PUSH
23760: LD_INT 9
23762: PUSH
23763: LD_INT 10
23765: PUSH
23766: LD_INT 11
23768: PUSH
23769: LD_INT 12
23771: PUSH
23772: LD_INT 13
23774: PUSH
23775: LD_INT 14
23777: PUSH
23778: LD_INT 15
23780: PUSH
23781: LD_INT 16
23783: PUSH
23784: LD_INT 17
23786: PUSH
23787: LD_INT 18
23789: PUSH
23790: LD_INT 19
23792: PUSH
23793: LD_INT 20
23795: PUSH
23796: LD_INT 21
23798: PUSH
23799: LD_INT 22
23801: PUSH
23802: LD_INT 23
23804: PUSH
23805: LD_INT 24
23807: PUSH
23808: LD_INT 25
23810: PUSH
23811: LD_INT 26
23813: PUSH
23814: LD_INT 27
23816: PUSH
23817: LD_INT 28
23819: PUSH
23820: LD_INT 29
23822: PUSH
23823: LD_INT 30
23825: PUSH
23826: LD_INT 31
23828: PUSH
23829: LD_INT 32
23831: PUSH
23832: LD_INT 33
23834: PUSH
23835: LD_INT 34
23837: PUSH
23838: LD_INT 36
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 101
23880: PUSH
23881: LD_INT 102
23883: PUSH
23884: LD_INT 103
23886: PUSH
23887: LD_INT 104
23889: PUSH
23890: LD_INT 105
23892: PUSH
23893: LD_INT 106
23895: PUSH
23896: LD_INT 107
23898: PUSH
23899: LD_INT 108
23901: PUSH
23902: LD_INT 109
23904: PUSH
23905: LD_INT 110
23907: PUSH
23908: LD_INT 111
23910: PUSH
23911: LD_INT 112
23913: PUSH
23914: LD_INT 113
23916: PUSH
23917: LD_INT 114
23919: PUSH
23920: LD_INT 116
23922: PUSH
23923: LD_INT 117
23925: PUSH
23926: LD_INT 118
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: ST_TO_ADDR
23952: GO 24727
23954: LD_INT 16
23956: DOUBLE
23957: EQUAL
23958: IFTRUE 23962
23960: GO 24098
23962: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23963: LD_ADDR_VAR 0 2
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: LD_INT 4
23973: PUSH
23974: LD_INT 5
23976: PUSH
23977: LD_INT 7
23979: PUSH
23980: LD_INT 11
23982: PUSH
23983: LD_INT 12
23985: PUSH
23986: LD_INT 15
23988: PUSH
23989: LD_INT 16
23991: PUSH
23992: LD_INT 20
23994: PUSH
23995: LD_INT 21
23997: PUSH
23998: LD_INT 22
24000: PUSH
24001: LD_INT 23
24003: PUSH
24004: LD_INT 25
24006: PUSH
24007: LD_INT 26
24009: PUSH
24010: LD_INT 30
24012: PUSH
24013: LD_INT 31
24015: PUSH
24016: LD_INT 32
24018: PUSH
24019: LD_INT 33
24021: PUSH
24022: LD_INT 34
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 101
24048: PUSH
24049: LD_INT 102
24051: PUSH
24052: LD_INT 103
24054: PUSH
24055: LD_INT 106
24057: PUSH
24058: LD_INT 108
24060: PUSH
24061: LD_INT 112
24063: PUSH
24064: LD_INT 113
24066: PUSH
24067: LD_INT 114
24069: PUSH
24070: LD_INT 116
24072: PUSH
24073: LD_INT 117
24075: PUSH
24076: LD_INT 118
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: ST_TO_ADDR
24096: GO 24727
24098: LD_INT 17
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24330
24106: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24107: LD_ADDR_VAR 0 2
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 3
24120: PUSH
24121: LD_INT 4
24123: PUSH
24124: LD_INT 5
24126: PUSH
24127: LD_INT 6
24129: PUSH
24130: LD_INT 7
24132: PUSH
24133: LD_INT 8
24135: PUSH
24136: LD_INT 9
24138: PUSH
24139: LD_INT 10
24141: PUSH
24142: LD_INT 11
24144: PUSH
24145: LD_INT 12
24147: PUSH
24148: LD_INT 13
24150: PUSH
24151: LD_INT 14
24153: PUSH
24154: LD_INT 15
24156: PUSH
24157: LD_INT 16
24159: PUSH
24160: LD_INT 17
24162: PUSH
24163: LD_INT 18
24165: PUSH
24166: LD_INT 19
24168: PUSH
24169: LD_INT 20
24171: PUSH
24172: LD_INT 21
24174: PUSH
24175: LD_INT 22
24177: PUSH
24178: LD_INT 23
24180: PUSH
24181: LD_INT 24
24183: PUSH
24184: LD_INT 25
24186: PUSH
24187: LD_INT 26
24189: PUSH
24190: LD_INT 27
24192: PUSH
24193: LD_INT 28
24195: PUSH
24196: LD_INT 29
24198: PUSH
24199: LD_INT 30
24201: PUSH
24202: LD_INT 31
24204: PUSH
24205: LD_INT 32
24207: PUSH
24208: LD_INT 33
24210: PUSH
24211: LD_INT 34
24213: PUSH
24214: LD_INT 36
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 101
24256: PUSH
24257: LD_INT 102
24259: PUSH
24260: LD_INT 103
24262: PUSH
24263: LD_INT 104
24265: PUSH
24266: LD_INT 105
24268: PUSH
24269: LD_INT 106
24271: PUSH
24272: LD_INT 107
24274: PUSH
24275: LD_INT 108
24277: PUSH
24278: LD_INT 109
24280: PUSH
24281: LD_INT 110
24283: PUSH
24284: LD_INT 111
24286: PUSH
24287: LD_INT 112
24289: PUSH
24290: LD_INT 113
24292: PUSH
24293: LD_INT 114
24295: PUSH
24296: LD_INT 116
24298: PUSH
24299: LD_INT 117
24301: PUSH
24302: LD_INT 118
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: ST_TO_ADDR
24328: GO 24727
24330: LD_INT 18
24332: DOUBLE
24333: EQUAL
24334: IFTRUE 24338
24336: GO 24486
24338: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24339: LD_ADDR_VAR 0 2
24343: PUSH
24344: LD_INT 2
24346: PUSH
24347: LD_INT 4
24349: PUSH
24350: LD_INT 5
24352: PUSH
24353: LD_INT 7
24355: PUSH
24356: LD_INT 11
24358: PUSH
24359: LD_INT 12
24361: PUSH
24362: LD_INT 15
24364: PUSH
24365: LD_INT 16
24367: PUSH
24368: LD_INT 20
24370: PUSH
24371: LD_INT 21
24373: PUSH
24374: LD_INT 22
24376: PUSH
24377: LD_INT 23
24379: PUSH
24380: LD_INT 25
24382: PUSH
24383: LD_INT 26
24385: PUSH
24386: LD_INT 30
24388: PUSH
24389: LD_INT 31
24391: PUSH
24392: LD_INT 32
24394: PUSH
24395: LD_INT 33
24397: PUSH
24398: LD_INT 34
24400: PUSH
24401: LD_INT 35
24403: PUSH
24404: LD_INT 36
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 101
24432: PUSH
24433: LD_INT 102
24435: PUSH
24436: LD_INT 103
24438: PUSH
24439: LD_INT 106
24441: PUSH
24442: LD_INT 108
24444: PUSH
24445: LD_INT 112
24447: PUSH
24448: LD_INT 113
24450: PUSH
24451: LD_INT 114
24453: PUSH
24454: LD_INT 115
24456: PUSH
24457: LD_INT 116
24459: PUSH
24460: LD_INT 117
24462: PUSH
24463: LD_INT 118
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: ST_TO_ADDR
24484: GO 24727
24486: LD_INT 19
24488: DOUBLE
24489: EQUAL
24490: IFTRUE 24494
24492: GO 24726
24494: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24495: LD_ADDR_VAR 0 2
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 3
24508: PUSH
24509: LD_INT 4
24511: PUSH
24512: LD_INT 5
24514: PUSH
24515: LD_INT 6
24517: PUSH
24518: LD_INT 7
24520: PUSH
24521: LD_INT 8
24523: PUSH
24524: LD_INT 9
24526: PUSH
24527: LD_INT 10
24529: PUSH
24530: LD_INT 11
24532: PUSH
24533: LD_INT 12
24535: PUSH
24536: LD_INT 13
24538: PUSH
24539: LD_INT 14
24541: PUSH
24542: LD_INT 15
24544: PUSH
24545: LD_INT 16
24547: PUSH
24548: LD_INT 17
24550: PUSH
24551: LD_INT 18
24553: PUSH
24554: LD_INT 19
24556: PUSH
24557: LD_INT 20
24559: PUSH
24560: LD_INT 21
24562: PUSH
24563: LD_INT 22
24565: PUSH
24566: LD_INT 23
24568: PUSH
24569: LD_INT 24
24571: PUSH
24572: LD_INT 25
24574: PUSH
24575: LD_INT 26
24577: PUSH
24578: LD_INT 27
24580: PUSH
24581: LD_INT 28
24583: PUSH
24584: LD_INT 29
24586: PUSH
24587: LD_INT 30
24589: PUSH
24590: LD_INT 31
24592: PUSH
24593: LD_INT 32
24595: PUSH
24596: LD_INT 33
24598: PUSH
24599: LD_INT 34
24601: PUSH
24602: LD_INT 35
24604: PUSH
24605: LD_INT 36
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 101
24648: PUSH
24649: LD_INT 102
24651: PUSH
24652: LD_INT 103
24654: PUSH
24655: LD_INT 104
24657: PUSH
24658: LD_INT 105
24660: PUSH
24661: LD_INT 106
24663: PUSH
24664: LD_INT 107
24666: PUSH
24667: LD_INT 108
24669: PUSH
24670: LD_INT 109
24672: PUSH
24673: LD_INT 110
24675: PUSH
24676: LD_INT 111
24678: PUSH
24679: LD_INT 112
24681: PUSH
24682: LD_INT 113
24684: PUSH
24685: LD_INT 114
24687: PUSH
24688: LD_INT 115
24690: PUSH
24691: LD_INT 116
24693: PUSH
24694: LD_INT 117
24696: PUSH
24697: LD_INT 118
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: ST_TO_ADDR
24724: GO 24727
24726: POP
// end else
24727: GO 24958
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24729: LD_ADDR_VAR 0 2
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: LD_INT 3
24742: PUSH
24743: LD_INT 4
24745: PUSH
24746: LD_INT 5
24748: PUSH
24749: LD_INT 6
24751: PUSH
24752: LD_INT 7
24754: PUSH
24755: LD_INT 8
24757: PUSH
24758: LD_INT 9
24760: PUSH
24761: LD_INT 10
24763: PUSH
24764: LD_INT 11
24766: PUSH
24767: LD_INT 12
24769: PUSH
24770: LD_INT 13
24772: PUSH
24773: LD_INT 14
24775: PUSH
24776: LD_INT 15
24778: PUSH
24779: LD_INT 16
24781: PUSH
24782: LD_INT 17
24784: PUSH
24785: LD_INT 18
24787: PUSH
24788: LD_INT 19
24790: PUSH
24791: LD_INT 20
24793: PUSH
24794: LD_INT 21
24796: PUSH
24797: LD_INT 22
24799: PUSH
24800: LD_INT 23
24802: PUSH
24803: LD_INT 24
24805: PUSH
24806: LD_INT 25
24808: PUSH
24809: LD_INT 26
24811: PUSH
24812: LD_INT 27
24814: PUSH
24815: LD_INT 28
24817: PUSH
24818: LD_INT 29
24820: PUSH
24821: LD_INT 30
24823: PUSH
24824: LD_INT 31
24826: PUSH
24827: LD_INT 32
24829: PUSH
24830: LD_INT 33
24832: PUSH
24833: LD_INT 34
24835: PUSH
24836: LD_INT 35
24838: PUSH
24839: LD_INT 36
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 101
24882: PUSH
24883: LD_INT 102
24885: PUSH
24886: LD_INT 103
24888: PUSH
24889: LD_INT 104
24891: PUSH
24892: LD_INT 105
24894: PUSH
24895: LD_INT 106
24897: PUSH
24898: LD_INT 107
24900: PUSH
24901: LD_INT 108
24903: PUSH
24904: LD_INT 109
24906: PUSH
24907: LD_INT 110
24909: PUSH
24910: LD_INT 111
24912: PUSH
24913: LD_INT 112
24915: PUSH
24916: LD_INT 113
24918: PUSH
24919: LD_INT 114
24921: PUSH
24922: LD_INT 115
24924: PUSH
24925: LD_INT 116
24927: PUSH
24928: LD_INT 117
24930: PUSH
24931: LD_INT 118
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: ST_TO_ADDR
// if result then
24958: LD_VAR 0 2
24962: IFFALSE 25748
// begin normal :=  ;
24964: LD_ADDR_VAR 0 5
24968: PUSH
24969: LD_STRING 
24971: ST_TO_ADDR
// hardcore :=  ;
24972: LD_ADDR_VAR 0 6
24976: PUSH
24977: LD_STRING 
24979: ST_TO_ADDR
// active :=  ;
24980: LD_ADDR_VAR 0 7
24984: PUSH
24985: LD_STRING 
24987: ST_TO_ADDR
// for i = 1 to normalCounter do
24988: LD_ADDR_VAR 0 8
24992: PUSH
24993: DOUBLE
24994: LD_INT 1
24996: DEC
24997: ST_TO_ADDR
24998: LD_EXP 55
25002: PUSH
25003: FOR_TO
25004: IFFALSE 25105
// begin tmp := 0 ;
25006: LD_ADDR_VAR 0 3
25010: PUSH
25011: LD_STRING 0
25013: ST_TO_ADDR
// if result [ 1 ] then
25014: LD_VAR 0 2
25018: PUSH
25019: LD_INT 1
25021: ARRAY
25022: IFFALSE 25087
// if result [ 1 ] [ 1 ] = i then
25024: LD_VAR 0 2
25028: PUSH
25029: LD_INT 1
25031: ARRAY
25032: PUSH
25033: LD_INT 1
25035: ARRAY
25036: PUSH
25037: LD_VAR 0 8
25041: EQUAL
25042: IFFALSE 25087
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25044: LD_ADDR_VAR 0 2
25048: PUSH
25049: LD_VAR 0 2
25053: PPUSH
25054: LD_INT 1
25056: PPUSH
25057: LD_VAR 0 2
25061: PUSH
25062: LD_INT 1
25064: ARRAY
25065: PPUSH
25066: LD_INT 1
25068: PPUSH
25069: CALL_OW 3
25073: PPUSH
25074: CALL_OW 1
25078: ST_TO_ADDR
// tmp := 1 ;
25079: LD_ADDR_VAR 0 3
25083: PUSH
25084: LD_STRING 1
25086: ST_TO_ADDR
// end ; normal := normal & tmp ;
25087: LD_ADDR_VAR 0 5
25091: PUSH
25092: LD_VAR 0 5
25096: PUSH
25097: LD_VAR 0 3
25101: STR
25102: ST_TO_ADDR
// end ;
25103: GO 25003
25105: POP
25106: POP
// for i = 1 to hardcoreCounter do
25107: LD_ADDR_VAR 0 8
25111: PUSH
25112: DOUBLE
25113: LD_INT 1
25115: DEC
25116: ST_TO_ADDR
25117: LD_EXP 56
25121: PUSH
25122: FOR_TO
25123: IFFALSE 25228
// begin tmp := 0 ;
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: LD_STRING 0
25132: ST_TO_ADDR
// if result [ 2 ] then
25133: LD_VAR 0 2
25137: PUSH
25138: LD_INT 2
25140: ARRAY
25141: IFFALSE 25210
// if result [ 2 ] [ 1 ] = 100 + i then
25143: LD_VAR 0 2
25147: PUSH
25148: LD_INT 2
25150: ARRAY
25151: PUSH
25152: LD_INT 1
25154: ARRAY
25155: PUSH
25156: LD_INT 100
25158: PUSH
25159: LD_VAR 0 8
25163: PLUS
25164: EQUAL
25165: IFFALSE 25210
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25167: LD_ADDR_VAR 0 2
25171: PUSH
25172: LD_VAR 0 2
25176: PPUSH
25177: LD_INT 2
25179: PPUSH
25180: LD_VAR 0 2
25184: PUSH
25185: LD_INT 2
25187: ARRAY
25188: PPUSH
25189: LD_INT 1
25191: PPUSH
25192: CALL_OW 3
25196: PPUSH
25197: CALL_OW 1
25201: ST_TO_ADDR
// tmp := 1 ;
25202: LD_ADDR_VAR 0 3
25206: PUSH
25207: LD_STRING 1
25209: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25210: LD_ADDR_VAR 0 6
25214: PUSH
25215: LD_VAR 0 6
25219: PUSH
25220: LD_VAR 0 3
25224: STR
25225: ST_TO_ADDR
// end ;
25226: GO 25122
25228: POP
25229: POP
// if isGameLoad then
25230: LD_VAR 0 1
25234: IFFALSE 25709
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25236: LD_ADDR_VAR 0 4
25240: PUSH
25241: LD_EXP 59
25245: PUSH
25246: LD_EXP 58
25250: PUSH
25251: LD_EXP 60
25255: PUSH
25256: LD_EXP 57
25260: PUSH
25261: LD_EXP 61
25265: PUSH
25266: LD_EXP 62
25270: PUSH
25271: LD_EXP 63
25275: PUSH
25276: LD_EXP 64
25280: PUSH
25281: LD_EXP 65
25285: PUSH
25286: LD_EXP 66
25290: PUSH
25291: LD_EXP 67
25295: PUSH
25296: LD_EXP 68
25300: PUSH
25301: LD_EXP 69
25305: PUSH
25306: LD_EXP 70
25310: PUSH
25311: LD_EXP 78
25315: PUSH
25316: LD_EXP 79
25320: PUSH
25321: LD_EXP 80
25325: PUSH
25326: LD_EXP 81
25330: PUSH
25331: LD_EXP 83
25335: PUSH
25336: LD_EXP 84
25340: PUSH
25341: LD_EXP 85
25345: PUSH
25346: LD_EXP 88
25350: PUSH
25351: LD_EXP 90
25355: PUSH
25356: LD_EXP 91
25360: PUSH
25361: LD_EXP 92
25365: PUSH
25366: LD_EXP 94
25370: PUSH
25371: LD_EXP 95
25375: PUSH
25376: LD_EXP 98
25380: PUSH
25381: LD_EXP 99
25385: PUSH
25386: LD_EXP 100
25390: PUSH
25391: LD_EXP 101
25395: PUSH
25396: LD_EXP 102
25400: PUSH
25401: LD_EXP 103
25405: PUSH
25406: LD_EXP 104
25410: PUSH
25411: LD_EXP 105
25415: PUSH
25416: LD_EXP 106
25420: PUSH
25421: LD_EXP 71
25425: PUSH
25426: LD_EXP 72
25430: PUSH
25431: LD_EXP 75
25435: PUSH
25436: LD_EXP 76
25440: PUSH
25441: LD_EXP 77
25445: PUSH
25446: LD_EXP 73
25450: PUSH
25451: LD_EXP 74
25455: PUSH
25456: LD_EXP 82
25460: PUSH
25461: LD_EXP 86
25465: PUSH
25466: LD_EXP 87
25470: PUSH
25471: LD_EXP 89
25475: PUSH
25476: LD_EXP 93
25480: PUSH
25481: LD_EXP 96
25485: PUSH
25486: LD_EXP 97
25490: PUSH
25491: LD_EXP 107
25495: PUSH
25496: LD_EXP 108
25500: PUSH
25501: LD_EXP 109
25505: PUSH
25506: LD_EXP 110
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: ST_TO_ADDR
// tmp :=  ;
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_STRING 
25574: ST_TO_ADDR
// for i = 1 to normalCounter do
25575: LD_ADDR_VAR 0 8
25579: PUSH
25580: DOUBLE
25581: LD_INT 1
25583: DEC
25584: ST_TO_ADDR
25585: LD_EXP 55
25589: PUSH
25590: FOR_TO
25591: IFFALSE 25627
// begin if flags [ i ] then
25593: LD_VAR 0 4
25597: PUSH
25598: LD_VAR 0 8
25602: ARRAY
25603: IFFALSE 25625
// tmp := tmp & i & ; ;
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_VAR 0 3
25614: PUSH
25615: LD_VAR 0 8
25619: STR
25620: PUSH
25621: LD_STRING ;
25623: STR
25624: ST_TO_ADDR
// end ;
25625: GO 25590
25627: POP
25628: POP
// for i = 1 to hardcoreCounter do
25629: LD_ADDR_VAR 0 8
25633: PUSH
25634: DOUBLE
25635: LD_INT 1
25637: DEC
25638: ST_TO_ADDR
25639: LD_EXP 56
25643: PUSH
25644: FOR_TO
25645: IFFALSE 25691
// begin if flags [ normalCounter + i ] then
25647: LD_VAR 0 4
25651: PUSH
25652: LD_EXP 55
25656: PUSH
25657: LD_VAR 0 8
25661: PLUS
25662: ARRAY
25663: IFFALSE 25689
// tmp := tmp & ( 100 + i ) & ; ;
25665: LD_ADDR_VAR 0 3
25669: PUSH
25670: LD_VAR 0 3
25674: PUSH
25675: LD_INT 100
25677: PUSH
25678: LD_VAR 0 8
25682: PLUS
25683: STR
25684: PUSH
25685: LD_STRING ;
25687: STR
25688: ST_TO_ADDR
// end ;
25689: GO 25644
25691: POP
25692: POP
// if tmp then
25693: LD_VAR 0 3
25697: IFFALSE 25709
// active := tmp ;
25699: LD_ADDR_VAR 0 7
25703: PUSH
25704: LD_VAR 0 3
25708: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25709: LD_STRING getStreamItemsFromMission("
25711: PUSH
25712: LD_VAR 0 5
25716: STR
25717: PUSH
25718: LD_STRING ","
25720: STR
25721: PUSH
25722: LD_VAR 0 6
25726: STR
25727: PUSH
25728: LD_STRING ","
25730: STR
25731: PUSH
25732: LD_VAR 0 7
25736: STR
25737: PUSH
25738: LD_STRING ")
25740: STR
25741: PPUSH
25742: CALL_OW 559
// end else
25746: GO 25755
// ToLua ( getStreamItemsFromMission("","","") ) ;
25748: LD_STRING getStreamItemsFromMission("","","")
25750: PPUSH
25751: CALL_OW 559
// end ;
25755: LD_VAR 0 2
25759: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25760: LD_EXP 54
25764: IFFALSE 25772
25766: PUSH
25767: LD_EXP 59
25771: AND
25772: IFFALSE 25896
25774: GO 25776
25776: DISABLE
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
// begin enable ;
25781: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25782: LD_ADDR_VAR 0 2
25786: PUSH
25787: LD_INT 22
25789: PUSH
25790: LD_OWVAR 2
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: LD_INT 34
25804: PUSH
25805: LD_INT 7
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 34
25814: PUSH
25815: LD_INT 45
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 34
25824: PUSH
25825: LD_INT 28
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 34
25834: PUSH
25835: LD_INT 47
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PPUSH
25853: CALL_OW 69
25857: ST_TO_ADDR
// if not tmp then
25858: LD_VAR 0 2
25862: NOT
25863: IFFALSE 25867
// exit ;
25865: GO 25896
// for i in tmp do
25867: LD_ADDR_VAR 0 1
25871: PUSH
25872: LD_VAR 0 2
25876: PUSH
25877: FOR_IN
25878: IFFALSE 25894
// begin SetLives ( i , 0 ) ;
25880: LD_VAR 0 1
25884: PPUSH
25885: LD_INT 0
25887: PPUSH
25888: CALL_OW 234
// end ;
25892: GO 25877
25894: POP
25895: POP
// end ;
25896: PPOPN 2
25898: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25899: LD_EXP 54
25903: IFFALSE 25911
25905: PUSH
25906: LD_EXP 60
25910: AND
25911: IFFALSE 25995
25913: GO 25915
25915: DISABLE
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
// begin enable ;
25920: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25921: LD_ADDR_VAR 0 2
25925: PUSH
25926: LD_INT 22
25928: PUSH
25929: LD_OWVAR 2
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 32
25940: PUSH
25941: LD_INT 3
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PPUSH
25952: CALL_OW 69
25956: ST_TO_ADDR
// if not tmp then
25957: LD_VAR 0 2
25961: NOT
25962: IFFALSE 25966
// exit ;
25964: GO 25995
// for i in tmp do
25966: LD_ADDR_VAR 0 1
25970: PUSH
25971: LD_VAR 0 2
25975: PUSH
25976: FOR_IN
25977: IFFALSE 25993
// begin SetLives ( i , 0 ) ;
25979: LD_VAR 0 1
25983: PPUSH
25984: LD_INT 0
25986: PPUSH
25987: CALL_OW 234
// end ;
25991: GO 25976
25993: POP
25994: POP
// end ;
25995: PPOPN 2
25997: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25998: LD_EXP 54
26002: IFFALSE 26010
26004: PUSH
26005: LD_EXP 57
26009: AND
26010: IFFALSE 26103
26012: GO 26014
26014: DISABLE
26015: LD_INT 0
26017: PPUSH
// begin enable ;
26018: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26019: LD_ADDR_VAR 0 1
26023: PUSH
26024: LD_INT 22
26026: PUSH
26027: LD_OWVAR 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: LD_INT 25
26041: PUSH
26042: LD_INT 5
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 25
26051: PUSH
26052: LD_INT 9
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 25
26061: PUSH
26062: LD_INT 8
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PPUSH
26079: CALL_OW 69
26083: PUSH
26084: FOR_IN
26085: IFFALSE 26101
// begin SetClass ( i , 1 ) ;
26087: LD_VAR 0 1
26091: PPUSH
26092: LD_INT 1
26094: PPUSH
26095: CALL_OW 336
// end ;
26099: GO 26084
26101: POP
26102: POP
// end ;
26103: PPOPN 1
26105: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26106: LD_EXP 54
26110: IFFALSE 26118
26112: PUSH
26113: LD_EXP 58
26117: AND
26118: IFFALSE 26130
26120: PUSH
26121: LD_OWVAR 65
26125: PUSH
26126: LD_INT 7
26128: LESS
26129: AND
26130: IFFALSE 26144
26132: GO 26134
26134: DISABLE
// begin enable ;
26135: ENABLE
// game_speed := 7 ;
26136: LD_ADDR_OWVAR 65
26140: PUSH
26141: LD_INT 7
26143: ST_TO_ADDR
// end ;
26144: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26145: LD_EXP 54
26149: IFFALSE 26157
26151: PUSH
26152: LD_EXP 61
26156: AND
26157: IFFALSE 26359
26159: GO 26161
26161: DISABLE
26162: LD_INT 0
26164: PPUSH
26165: PPUSH
26166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26167: LD_ADDR_VAR 0 3
26171: PUSH
26172: LD_INT 81
26174: PUSH
26175: LD_OWVAR 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 21
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PPUSH
26198: CALL_OW 69
26202: ST_TO_ADDR
// if not tmp then
26203: LD_VAR 0 3
26207: NOT
26208: IFFALSE 26212
// exit ;
26210: GO 26359
// if tmp > 5 then
26212: LD_VAR 0 3
26216: PUSH
26217: LD_INT 5
26219: GREATER
26220: IFFALSE 26232
// k := 5 else
26222: LD_ADDR_VAR 0 2
26226: PUSH
26227: LD_INT 5
26229: ST_TO_ADDR
26230: GO 26242
// k := tmp ;
26232: LD_ADDR_VAR 0 2
26236: PUSH
26237: LD_VAR 0 3
26241: ST_TO_ADDR
// for i := 1 to k do
26242: LD_ADDR_VAR 0 1
26246: PUSH
26247: DOUBLE
26248: LD_INT 1
26250: DEC
26251: ST_TO_ADDR
26252: LD_VAR 0 2
26256: PUSH
26257: FOR_TO
26258: IFFALSE 26357
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26260: LD_VAR 0 3
26264: PUSH
26265: LD_VAR 0 1
26269: ARRAY
26270: PPUSH
26271: LD_VAR 0 1
26275: PUSH
26276: LD_INT 4
26278: MOD
26279: PUSH
26280: LD_INT 1
26282: PLUS
26283: PPUSH
26284: CALL_OW 259
26288: PUSH
26289: LD_INT 10
26291: LESS
26292: IFFALSE 26355
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26294: LD_VAR 0 3
26298: PUSH
26299: LD_VAR 0 1
26303: ARRAY
26304: PPUSH
26305: LD_VAR 0 1
26309: PUSH
26310: LD_INT 4
26312: MOD
26313: PUSH
26314: LD_INT 1
26316: PLUS
26317: PPUSH
26318: LD_VAR 0 3
26322: PUSH
26323: LD_VAR 0 1
26327: ARRAY
26328: PPUSH
26329: LD_VAR 0 1
26333: PUSH
26334: LD_INT 4
26336: MOD
26337: PUSH
26338: LD_INT 1
26340: PLUS
26341: PPUSH
26342: CALL_OW 259
26346: PUSH
26347: LD_INT 1
26349: PLUS
26350: PPUSH
26351: CALL_OW 237
26355: GO 26257
26357: POP
26358: POP
// end ;
26359: PPOPN 3
26361: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26362: LD_EXP 54
26366: IFFALSE 26374
26368: PUSH
26369: LD_EXP 62
26373: AND
26374: IFFALSE 26394
26376: GO 26378
26378: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26379: LD_INT 4
26381: PPUSH
26382: LD_OWVAR 2
26386: PPUSH
26387: LD_INT 0
26389: PPUSH
26390: CALL_OW 324
26394: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26395: LD_EXP 54
26399: IFFALSE 26407
26401: PUSH
26402: LD_EXP 91
26406: AND
26407: IFFALSE 26427
26409: GO 26411
26411: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26412: LD_INT 19
26414: PPUSH
26415: LD_OWVAR 2
26419: PPUSH
26420: LD_INT 0
26422: PPUSH
26423: CALL_OW 324
26427: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26428: LD_EXP 54
26432: IFFALSE 26440
26434: PUSH
26435: LD_EXP 63
26439: AND
26440: IFFALSE 26542
26442: GO 26444
26444: DISABLE
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
// begin enable ;
26449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26450: LD_ADDR_VAR 0 2
26454: PUSH
26455: LD_INT 22
26457: PUSH
26458: LD_OWVAR 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 34
26472: PUSH
26473: LD_INT 11
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 34
26482: PUSH
26483: LD_INT 30
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PPUSH
26499: CALL_OW 69
26503: ST_TO_ADDR
// if not tmp then
26504: LD_VAR 0 2
26508: NOT
26509: IFFALSE 26513
// exit ;
26511: GO 26542
// for i in tmp do
26513: LD_ADDR_VAR 0 1
26517: PUSH
26518: LD_VAR 0 2
26522: PUSH
26523: FOR_IN
26524: IFFALSE 26540
// begin SetLives ( i , 0 ) ;
26526: LD_VAR 0 1
26530: PPUSH
26531: LD_INT 0
26533: PPUSH
26534: CALL_OW 234
// end ;
26538: GO 26523
26540: POP
26541: POP
// end ;
26542: PPOPN 2
26544: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26545: LD_EXP 54
26549: IFFALSE 26557
26551: PUSH
26552: LD_EXP 64
26556: AND
26557: IFFALSE 26577
26559: GO 26561
26561: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26562: LD_INT 32
26564: PPUSH
26565: LD_OWVAR 2
26569: PPUSH
26570: LD_INT 0
26572: PPUSH
26573: CALL_OW 324
26577: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26578: LD_EXP 54
26582: IFFALSE 26590
26584: PUSH
26585: LD_EXP 65
26589: AND
26590: IFFALSE 26773
26592: GO 26594
26594: DISABLE
26595: LD_INT 0
26597: PPUSH
26598: PPUSH
26599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26600: LD_ADDR_VAR 0 2
26604: PUSH
26605: LD_INT 22
26607: PUSH
26608: LD_OWVAR 2
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 33
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PPUSH
26631: CALL_OW 69
26635: ST_TO_ADDR
// if not tmp then
26636: LD_VAR 0 2
26640: NOT
26641: IFFALSE 26645
// exit ;
26643: GO 26773
// side := 0 ;
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: LD_INT 0
26652: ST_TO_ADDR
// for i := 1 to 8 do
26653: LD_ADDR_VAR 0 1
26657: PUSH
26658: DOUBLE
26659: LD_INT 1
26661: DEC
26662: ST_TO_ADDR
26663: LD_INT 8
26665: PUSH
26666: FOR_TO
26667: IFFALSE 26717
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26669: LD_OWVAR 2
26673: PUSH
26674: LD_VAR 0 1
26678: NONEQUAL
26679: IFFALSE 26701
26681: PUSH
26682: LD_OWVAR 2
26686: PPUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 81
26696: PUSH
26697: LD_INT 2
26699: EQUAL
26700: AND
26701: IFFALSE 26715
// begin side := i ;
26703: LD_ADDR_VAR 0 3
26707: PUSH
26708: LD_VAR 0 1
26712: ST_TO_ADDR
// break ;
26713: GO 26717
// end ;
26715: GO 26666
26717: POP
26718: POP
// if not side then
26719: LD_VAR 0 3
26723: NOT
26724: IFFALSE 26728
// exit ;
26726: GO 26773
// for i := 1 to tmp do
26728: LD_ADDR_VAR 0 1
26732: PUSH
26733: DOUBLE
26734: LD_INT 1
26736: DEC
26737: ST_TO_ADDR
26738: LD_VAR 0 2
26742: PUSH
26743: FOR_TO
26744: IFFALSE 26771
// if Prob ( 60 ) then
26746: LD_INT 60
26748: PPUSH
26749: CALL_OW 13
26753: IFFALSE 26769
// SetSide ( i , side ) ;
26755: LD_VAR 0 1
26759: PPUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: CALL_OW 235
26769: GO 26743
26771: POP
26772: POP
// end ;
26773: PPOPN 3
26775: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26776: LD_EXP 54
26780: IFFALSE 26788
26782: PUSH
26783: LD_EXP 67
26787: AND
26788: IFFALSE 26907
26790: GO 26792
26792: DISABLE
26793: LD_INT 0
26795: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26796: LD_ADDR_VAR 0 1
26800: PUSH
26801: LD_INT 22
26803: PUSH
26804: LD_OWVAR 2
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 21
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 3
26825: PUSH
26826: LD_INT 23
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: PPUSH
26845: CALL_OW 69
26849: PUSH
26850: FOR_IN
26851: IFFALSE 26905
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 257
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: LD_INT 4
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: IN
26881: IFFALSE 26903
// SetClass ( un , rand ( 1 , 4 ) ) ;
26883: LD_VAR 0 1
26887: PPUSH
26888: LD_INT 1
26890: PPUSH
26891: LD_INT 4
26893: PPUSH
26894: CALL_OW 12
26898: PPUSH
26899: CALL_OW 336
26903: GO 26850
26905: POP
26906: POP
// end ;
26907: PPOPN 1
26909: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26910: LD_EXP 54
26914: IFFALSE 26922
26916: PUSH
26917: LD_EXP 66
26921: AND
26922: IFFALSE 27001
26924: GO 26926
26926: DISABLE
26927: LD_INT 0
26929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26930: LD_ADDR_VAR 0 1
26934: PUSH
26935: LD_INT 22
26937: PUSH
26938: LD_OWVAR 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 21
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PPUSH
26961: CALL_OW 69
26965: ST_TO_ADDR
// if not tmp then
26966: LD_VAR 0 1
26970: NOT
26971: IFFALSE 26975
// exit ;
26973: GO 27001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26975: LD_VAR 0 1
26979: PUSH
26980: LD_INT 1
26982: PPUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 12
26992: ARRAY
26993: PPUSH
26994: LD_INT 100
26996: PPUSH
26997: CALL_OW 234
// end ;
27001: PPOPN 1
27003: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27004: LD_EXP 54
27008: IFFALSE 27016
27010: PUSH
27011: LD_EXP 68
27015: AND
27016: IFFALSE 27114
27018: GO 27020
27020: DISABLE
27021: LD_INT 0
27023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27024: LD_ADDR_VAR 0 1
27028: PUSH
27029: LD_INT 22
27031: PUSH
27032: LD_OWVAR 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 21
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PPUSH
27055: CALL_OW 69
27059: ST_TO_ADDR
// if not tmp then
27060: LD_VAR 0 1
27064: NOT
27065: IFFALSE 27069
// exit ;
27067: GO 27114
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27069: LD_VAR 0 1
27073: PUSH
27074: LD_INT 1
27076: PPUSH
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 12
27086: ARRAY
27087: PPUSH
27088: LD_INT 1
27090: PPUSH
27091: LD_INT 4
27093: PPUSH
27094: CALL_OW 12
27098: PPUSH
27099: LD_INT 3000
27101: PPUSH
27102: LD_INT 9000
27104: PPUSH
27105: CALL_OW 12
27109: PPUSH
27110: CALL_OW 492
// end ;
27114: PPOPN 1
27116: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27117: LD_EXP 54
27121: IFFALSE 27129
27123: PUSH
27124: LD_EXP 69
27128: AND
27129: IFFALSE 27149
27131: GO 27133
27133: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27134: LD_INT 1
27136: PPUSH
27137: LD_OWVAR 2
27141: PPUSH
27142: LD_INT 0
27144: PPUSH
27145: CALL_OW 324
27149: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27150: LD_EXP 54
27154: IFFALSE 27162
27156: PUSH
27157: LD_EXP 70
27161: AND
27162: IFFALSE 27245
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
27170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27171: LD_ADDR_VAR 0 2
27175: PUSH
27176: LD_INT 22
27178: PUSH
27179: LD_OWVAR 2
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 21
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PPUSH
27202: CALL_OW 69
27206: ST_TO_ADDR
// if not tmp then
27207: LD_VAR 0 2
27211: NOT
27212: IFFALSE 27216
// exit ;
27214: GO 27245
// for i in tmp do
27216: LD_ADDR_VAR 0 1
27220: PUSH
27221: LD_VAR 0 2
27225: PUSH
27226: FOR_IN
27227: IFFALSE 27243
// SetBLevel ( i , 10 ) ;
27229: LD_VAR 0 1
27233: PPUSH
27234: LD_INT 10
27236: PPUSH
27237: CALL_OW 241
27241: GO 27226
27243: POP
27244: POP
// end ;
27245: PPOPN 2
27247: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27248: LD_EXP 54
27252: IFFALSE 27260
27254: PUSH
27255: LD_EXP 71
27259: AND
27260: IFFALSE 27371
27262: GO 27264
27264: DISABLE
27265: LD_INT 0
27267: PPUSH
27268: PPUSH
27269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27270: LD_ADDR_VAR 0 3
27274: PUSH
27275: LD_INT 22
27277: PUSH
27278: LD_OWVAR 2
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 25
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PPUSH
27301: CALL_OW 69
27305: ST_TO_ADDR
// if not tmp then
27306: LD_VAR 0 3
27310: NOT
27311: IFFALSE 27315
// exit ;
27313: GO 27371
// un := tmp [ rand ( 1 , tmp ) ] ;
27315: LD_ADDR_VAR 0 2
27319: PUSH
27320: LD_VAR 0 3
27324: PUSH
27325: LD_INT 1
27327: PPUSH
27328: LD_VAR 0 3
27332: PPUSH
27333: CALL_OW 12
27337: ARRAY
27338: ST_TO_ADDR
// if Crawls ( un ) then
27339: LD_VAR 0 2
27343: PPUSH
27344: CALL_OW 318
27348: IFFALSE 27359
// ComWalk ( un ) ;
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: LD_INT 5
27366: PPUSH
27367: CALL_OW 336
// end ;
27371: PPOPN 3
27373: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27374: LD_EXP 54
27378: IFFALSE 27386
27380: PUSH
27381: LD_EXP 72
27385: AND
27386: IFFALSE 27398
27388: PUSH
27389: LD_OWVAR 67
27393: PUSH
27394: LD_INT 4
27396: LESS
27397: AND
27398: IFFALSE 27417
27400: GO 27402
27402: DISABLE
// begin Difficulty := Difficulty + 1 ;
27403: LD_ADDR_OWVAR 67
27407: PUSH
27408: LD_OWVAR 67
27412: PUSH
27413: LD_INT 1
27415: PLUS
27416: ST_TO_ADDR
// end ;
27417: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27418: LD_EXP 54
27422: IFFALSE 27430
27424: PUSH
27425: LD_EXP 73
27429: AND
27430: IFFALSE 27533
27432: GO 27434
27434: DISABLE
27435: LD_INT 0
27437: PPUSH
// begin for i := 1 to 5 do
27438: LD_ADDR_VAR 0 1
27442: PUSH
27443: DOUBLE
27444: LD_INT 1
27446: DEC
27447: ST_TO_ADDR
27448: LD_INT 5
27450: PUSH
27451: FOR_TO
27452: IFFALSE 27531
// begin uc_nation := nation_nature ;
27454: LD_ADDR_OWVAR 21
27458: PUSH
27459: LD_INT 0
27461: ST_TO_ADDR
// uc_side := 0 ;
27462: LD_ADDR_OWVAR 20
27466: PUSH
27467: LD_INT 0
27469: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27470: LD_ADDR_OWVAR 29
27474: PUSH
27475: LD_INT 12
27477: PUSH
27478: LD_INT 12
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// hc_agressivity := 20 ;
27485: LD_ADDR_OWVAR 35
27489: PUSH
27490: LD_INT 20
27492: ST_TO_ADDR
// hc_class := class_tiger ;
27493: LD_ADDR_OWVAR 28
27497: PUSH
27498: LD_INT 14
27500: ST_TO_ADDR
// hc_gallery :=  ;
27501: LD_ADDR_OWVAR 33
27505: PUSH
27506: LD_STRING 
27508: ST_TO_ADDR
// hc_name :=  ;
27509: LD_ADDR_OWVAR 26
27513: PUSH
27514: LD_STRING 
27516: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27517: CALL_OW 44
27521: PPUSH
27522: LD_INT 0
27524: PPUSH
27525: CALL_OW 51
// end ;
27529: GO 27451
27531: POP
27532: POP
// end ;
27533: PPOPN 1
27535: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27536: LD_EXP 54
27540: IFFALSE 27548
27542: PUSH
27543: LD_EXP 74
27547: AND
27548: IFFALSE 27557
27550: GO 27552
27552: DISABLE
// StreamSibBomb ;
27553: CALL 27558 0 0
27557: END
// export function StreamSibBomb ; var i , x , y ; begin
27558: LD_INT 0
27560: PPUSH
27561: PPUSH
27562: PPUSH
27563: PPUSH
// result := false ;
27564: LD_ADDR_VAR 0 1
27568: PUSH
27569: LD_INT 0
27571: ST_TO_ADDR
// for i := 1 to 16 do
27572: LD_ADDR_VAR 0 2
27576: PUSH
27577: DOUBLE
27578: LD_INT 1
27580: DEC
27581: ST_TO_ADDR
27582: LD_INT 16
27584: PUSH
27585: FOR_TO
27586: IFFALSE 27785
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27588: LD_ADDR_VAR 0 3
27592: PUSH
27593: LD_INT 10
27595: PUSH
27596: LD_INT 20
27598: PUSH
27599: LD_INT 30
27601: PUSH
27602: LD_INT 40
27604: PUSH
27605: LD_INT 50
27607: PUSH
27608: LD_INT 60
27610: PUSH
27611: LD_INT 70
27613: PUSH
27614: LD_INT 80
27616: PUSH
27617: LD_INT 90
27619: PUSH
27620: LD_INT 100
27622: PUSH
27623: LD_INT 110
27625: PUSH
27626: LD_INT 120
27628: PUSH
27629: LD_INT 130
27631: PUSH
27632: LD_INT 140
27634: PUSH
27635: LD_INT 150
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PPUSH
27658: LD_INT 15
27660: PPUSH
27661: CALL_OW 12
27665: ARRAY
27666: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27667: LD_ADDR_VAR 0 4
27671: PUSH
27672: LD_INT 10
27674: PUSH
27675: LD_INT 20
27677: PUSH
27678: LD_INT 30
27680: PUSH
27681: LD_INT 40
27683: PUSH
27684: LD_INT 50
27686: PUSH
27687: LD_INT 60
27689: PUSH
27690: LD_INT 70
27692: PUSH
27693: LD_INT 80
27695: PUSH
27696: LD_INT 90
27698: PUSH
27699: LD_INT 100
27701: PUSH
27702: LD_INT 110
27704: PUSH
27705: LD_INT 120
27707: PUSH
27708: LD_INT 130
27710: PUSH
27711: LD_INT 140
27713: PUSH
27714: LD_INT 150
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: PPUSH
27737: LD_INT 15
27739: PPUSH
27740: CALL_OW 12
27744: ARRAY
27745: ST_TO_ADDR
// if ValidHex ( x , y ) then
27746: LD_VAR 0 3
27750: PPUSH
27751: LD_VAR 0 4
27755: PPUSH
27756: CALL_OW 488
27760: IFFALSE 27783
// begin result := [ x , y ] ;
27762: LD_ADDR_VAR 0 1
27766: PUSH
27767: LD_VAR 0 3
27771: PUSH
27772: LD_VAR 0 4
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// break ;
27781: GO 27785
// end ; end ;
27783: GO 27585
27785: POP
27786: POP
// if result then
27787: LD_VAR 0 1
27791: IFFALSE 27851
// begin ToLua ( playSibBomb() ) ;
27793: LD_STRING playSibBomb()
27795: PPUSH
27796: CALL_OW 559
// wait ( 0 0$14 ) ;
27800: LD_INT 490
27802: PPUSH
27803: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27807: LD_VAR 0 1
27811: PUSH
27812: LD_INT 1
27814: ARRAY
27815: PPUSH
27816: LD_VAR 0 1
27820: PUSH
27821: LD_INT 2
27823: ARRAY
27824: PPUSH
27825: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27829: LD_VAR 0 1
27833: PUSH
27834: LD_INT 1
27836: ARRAY
27837: PPUSH
27838: LD_VAR 0 1
27842: PUSH
27843: LD_INT 2
27845: ARRAY
27846: PPUSH
27847: CALL_OW 429
// end ; end ;
27851: LD_VAR 0 1
27855: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27856: LD_EXP 54
27860: IFFALSE 27868
27862: PUSH
27863: LD_EXP 76
27867: AND
27868: IFFALSE 27880
27870: GO 27872
27872: DISABLE
// YouLost (  ) ;
27873: LD_STRING 
27875: PPUSH
27876: CALL_OW 104
27880: END
// every 0 0$1 trigger StreamModeActive and sFog do
27881: LD_EXP 54
27885: IFFALSE 27893
27887: PUSH
27888: LD_EXP 75
27892: AND
27893: IFFALSE 27907
27895: GO 27897
27897: DISABLE
// FogOff ( your_side ) ;
27898: LD_OWVAR 2
27902: PPUSH
27903: CALL_OW 344
27907: END
// every 0 0$1 trigger StreamModeActive and sSun do
27908: LD_EXP 54
27912: IFFALSE 27920
27914: PUSH
27915: LD_EXP 77
27919: AND
27920: IFFALSE 27948
27922: GO 27924
27924: DISABLE
// begin solar_recharge_percent := 0 ;
27925: LD_ADDR_OWVAR 79
27929: PUSH
27930: LD_INT 0
27932: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27933: LD_INT 10500
27935: PPUSH
27936: CALL_OW 67
// solar_recharge_percent := 100 ;
27940: LD_ADDR_OWVAR 79
27944: PUSH
27945: LD_INT 100
27947: ST_TO_ADDR
// end ;
27948: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27949: LD_EXP 54
27953: IFFALSE 27961
27955: PUSH
27956: LD_EXP 78
27960: AND
27961: IFFALSE 28200
27963: GO 27965
27965: DISABLE
27966: LD_INT 0
27968: PPUSH
27969: PPUSH
27970: PPUSH
// begin tmp := [ ] ;
27971: LD_ADDR_VAR 0 3
27975: PUSH
27976: EMPTY
27977: ST_TO_ADDR
// for i := 1 to 6 do
27978: LD_ADDR_VAR 0 1
27982: PUSH
27983: DOUBLE
27984: LD_INT 1
27986: DEC
27987: ST_TO_ADDR
27988: LD_INT 6
27990: PUSH
27991: FOR_TO
27992: IFFALSE 28097
// begin uc_nation := nation_nature ;
27994: LD_ADDR_OWVAR 21
27998: PUSH
27999: LD_INT 0
28001: ST_TO_ADDR
// uc_side := 0 ;
28002: LD_ADDR_OWVAR 20
28006: PUSH
28007: LD_INT 0
28009: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28010: LD_ADDR_OWVAR 29
28014: PUSH
28015: LD_INT 12
28017: PUSH
28018: LD_INT 12
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: ST_TO_ADDR
// hc_agressivity := 20 ;
28025: LD_ADDR_OWVAR 35
28029: PUSH
28030: LD_INT 20
28032: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28033: LD_ADDR_OWVAR 28
28037: PUSH
28038: LD_INT 17
28040: ST_TO_ADDR
// hc_gallery :=  ;
28041: LD_ADDR_OWVAR 33
28045: PUSH
28046: LD_STRING 
28048: ST_TO_ADDR
// hc_name :=  ;
28049: LD_ADDR_OWVAR 26
28053: PUSH
28054: LD_STRING 
28056: ST_TO_ADDR
// un := CreateHuman ;
28057: LD_ADDR_VAR 0 2
28061: PUSH
28062: CALL_OW 44
28066: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28067: LD_VAR 0 2
28071: PPUSH
28072: LD_INT 1
28074: PPUSH
28075: CALL_OW 51
// tmp := tmp ^ un ;
28079: LD_ADDR_VAR 0 3
28083: PUSH
28084: LD_VAR 0 3
28088: PUSH
28089: LD_VAR 0 2
28093: ADD
28094: ST_TO_ADDR
// end ;
28095: GO 27991
28097: POP
28098: POP
// repeat wait ( 0 0$1 ) ;
28099: LD_INT 35
28101: PPUSH
28102: CALL_OW 67
// for un in tmp do
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: LD_VAR 0 3
28115: PUSH
28116: FOR_IN
28117: IFFALSE 28191
// begin if IsDead ( un ) then
28119: LD_VAR 0 2
28123: PPUSH
28124: CALL_OW 301
28128: IFFALSE 28148
// begin tmp := tmp diff un ;
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_VAR 0 3
28139: PUSH
28140: LD_VAR 0 2
28144: DIFF
28145: ST_TO_ADDR
// continue ;
28146: GO 28116
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28148: LD_VAR 0 2
28152: PPUSH
28153: LD_INT 3
28155: PUSH
28156: LD_INT 22
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PPUSH
28170: CALL_OW 69
28174: PPUSH
28175: LD_VAR 0 2
28179: PPUSH
28180: CALL_OW 74
28184: PPUSH
28185: CALL_OW 115
// end ;
28189: GO 28116
28191: POP
28192: POP
// until not tmp ;
28193: LD_VAR 0 3
28197: NOT
28198: IFFALSE 28099
// end ;
28200: PPOPN 3
28202: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28203: LD_EXP 54
28207: IFFALSE 28215
28209: PUSH
28210: LD_EXP 79
28214: AND
28215: IFFALSE 28269
28217: GO 28219
28219: DISABLE
// begin ToLua ( displayTroll(); ) ;
28220: LD_STRING displayTroll();
28222: PPUSH
28223: CALL_OW 559
// wait ( 3 3$00 ) ;
28227: LD_INT 6300
28229: PPUSH
28230: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28234: LD_STRING hideTroll();
28236: PPUSH
28237: CALL_OW 559
// wait ( 1 1$00 ) ;
28241: LD_INT 2100
28243: PPUSH
28244: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28248: LD_STRING displayTroll();
28250: PPUSH
28251: CALL_OW 559
// wait ( 1 1$00 ) ;
28255: LD_INT 2100
28257: PPUSH
28258: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28262: LD_STRING hideTroll();
28264: PPUSH
28265: CALL_OW 559
// end ;
28269: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28270: LD_EXP 54
28274: IFFALSE 28282
28276: PUSH
28277: LD_EXP 80
28281: AND
28282: IFFALSE 28345
28284: GO 28286
28286: DISABLE
28287: LD_INT 0
28289: PPUSH
// begin p := 0 ;
28290: LD_ADDR_VAR 0 1
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
// repeat game_speed := 1 ;
28298: LD_ADDR_OWVAR 65
28302: PUSH
28303: LD_INT 1
28305: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28306: LD_INT 35
28308: PPUSH
28309: CALL_OW 67
// p := p + 1 ;
28313: LD_ADDR_VAR 0 1
28317: PUSH
28318: LD_VAR 0 1
28322: PUSH
28323: LD_INT 1
28325: PLUS
28326: ST_TO_ADDR
// until p >= 60 ;
28327: LD_VAR 0 1
28331: PUSH
28332: LD_INT 60
28334: GREATEREQUAL
28335: IFFALSE 28298
// game_speed := 4 ;
28337: LD_ADDR_OWVAR 65
28341: PUSH
28342: LD_INT 4
28344: ST_TO_ADDR
// end ;
28345: PPOPN 1
28347: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28348: LD_EXP 54
28352: IFFALSE 28360
28354: PUSH
28355: LD_EXP 81
28359: AND
28360: IFFALSE 28506
28362: GO 28364
28364: DISABLE
28365: LD_INT 0
28367: PPUSH
28368: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28369: LD_ADDR_VAR 0 1
28373: PUSH
28374: LD_INT 22
28376: PUSH
28377: LD_OWVAR 2
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 2
28388: PUSH
28389: LD_INT 30
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 30
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PPUSH
28418: CALL_OW 69
28422: ST_TO_ADDR
// if not depot then
28423: LD_VAR 0 1
28427: NOT
28428: IFFALSE 28432
// exit ;
28430: GO 28506
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28432: LD_ADDR_VAR 0 2
28436: PUSH
28437: LD_VAR 0 1
28441: PUSH
28442: LD_INT 1
28444: PPUSH
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 12
28454: ARRAY
28455: PPUSH
28456: CALL_OW 274
28460: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28461: LD_VAR 0 2
28465: PPUSH
28466: LD_INT 1
28468: PPUSH
28469: LD_INT 0
28471: PPUSH
28472: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28476: LD_VAR 0 2
28480: PPUSH
28481: LD_INT 2
28483: PPUSH
28484: LD_INT 0
28486: PPUSH
28487: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28491: LD_VAR 0 2
28495: PPUSH
28496: LD_INT 3
28498: PPUSH
28499: LD_INT 0
28501: PPUSH
28502: CALL_OW 277
// end ;
28506: PPOPN 2
28508: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28509: LD_EXP 54
28513: IFFALSE 28521
28515: PUSH
28516: LD_EXP 82
28520: AND
28521: IFFALSE 28618
28523: GO 28525
28525: DISABLE
28526: LD_INT 0
28528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28529: LD_ADDR_VAR 0 1
28533: PUSH
28534: LD_INT 22
28536: PUSH
28537: LD_OWVAR 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 21
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 3
28558: PUSH
28559: LD_INT 23
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: PPUSH
28578: CALL_OW 69
28582: ST_TO_ADDR
// if not tmp then
28583: LD_VAR 0 1
28587: NOT
28588: IFFALSE 28592
// exit ;
28590: GO 28618
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28592: LD_VAR 0 1
28596: PUSH
28597: LD_INT 1
28599: PPUSH
28600: LD_VAR 0 1
28604: PPUSH
28605: CALL_OW 12
28609: ARRAY
28610: PPUSH
28611: LD_INT 200
28613: PPUSH
28614: CALL_OW 234
// end ;
28618: PPOPN 1
28620: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28621: LD_EXP 54
28625: IFFALSE 28633
28627: PUSH
28628: LD_EXP 83
28632: AND
28633: IFFALSE 28712
28635: GO 28637
28637: DISABLE
28638: LD_INT 0
28640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28641: LD_ADDR_VAR 0 1
28645: PUSH
28646: LD_INT 22
28648: PUSH
28649: LD_OWVAR 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 21
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PPUSH
28672: CALL_OW 69
28676: ST_TO_ADDR
// if not tmp then
28677: LD_VAR 0 1
28681: NOT
28682: IFFALSE 28686
// exit ;
28684: GO 28712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28686: LD_VAR 0 1
28690: PUSH
28691: LD_INT 1
28693: PPUSH
28694: LD_VAR 0 1
28698: PPUSH
28699: CALL_OW 12
28703: ARRAY
28704: PPUSH
28705: LD_INT 60
28707: PPUSH
28708: CALL_OW 234
// end ;
28712: PPOPN 1
28714: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28715: LD_EXP 54
28719: IFFALSE 28727
28721: PUSH
28722: LD_EXP 84
28726: AND
28727: IFFALSE 28826
28729: GO 28731
28731: DISABLE
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
// begin enable ;
28736: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28737: LD_ADDR_VAR 0 1
28741: PUSH
28742: LD_INT 22
28744: PUSH
28745: LD_OWVAR 2
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 61
28756: PUSH
28757: EMPTY
28758: LIST
28759: PUSH
28760: LD_INT 33
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: PPUSH
28775: CALL_OW 69
28779: ST_TO_ADDR
// if not tmp then
28780: LD_VAR 0 1
28784: NOT
28785: IFFALSE 28789
// exit ;
28787: GO 28826
// for i in tmp do
28789: LD_ADDR_VAR 0 2
28793: PUSH
28794: LD_VAR 0 1
28798: PUSH
28799: FOR_IN
28800: IFFALSE 28824
// if IsControledBy ( i ) then
28802: LD_VAR 0 2
28806: PPUSH
28807: CALL_OW 312
28811: IFFALSE 28822
// ComUnlink ( i ) ;
28813: LD_VAR 0 2
28817: PPUSH
28818: CALL_OW 136
28822: GO 28799
28824: POP
28825: POP
// end ;
28826: PPOPN 2
28828: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28829: LD_EXP 54
28833: IFFALSE 28841
28835: PUSH
28836: LD_EXP 85
28840: AND
28841: IFFALSE 28981
28843: GO 28845
28845: DISABLE
28846: LD_INT 0
28848: PPUSH
28849: PPUSH
// begin ToLua ( displayPowell(); ) ;
28850: LD_STRING displayPowell();
28852: PPUSH
28853: CALL_OW 559
// uc_side := 0 ;
28857: LD_ADDR_OWVAR 20
28861: PUSH
28862: LD_INT 0
28864: ST_TO_ADDR
// uc_nation := 2 ;
28865: LD_ADDR_OWVAR 21
28869: PUSH
28870: LD_INT 2
28872: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28873: LD_ADDR_OWVAR 37
28877: PUSH
28878: LD_INT 14
28880: ST_TO_ADDR
// vc_engine := engine_siberite ;
28881: LD_ADDR_OWVAR 39
28885: PUSH
28886: LD_INT 3
28888: ST_TO_ADDR
// vc_control := control_apeman ;
28889: LD_ADDR_OWVAR 38
28893: PUSH
28894: LD_INT 5
28896: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28897: LD_ADDR_OWVAR 40
28901: PUSH
28902: LD_INT 29
28904: ST_TO_ADDR
// un := CreateVehicle ;
28905: LD_ADDR_VAR 0 2
28909: PUSH
28910: CALL_OW 45
28914: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28915: LD_VAR 0 2
28919: PPUSH
28920: LD_INT 1
28922: PPUSH
28923: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28927: LD_INT 35
28929: PPUSH
28930: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28934: LD_VAR 0 2
28938: PPUSH
28939: LD_INT 22
28941: PUSH
28942: LD_OWVAR 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PPUSH
28951: CALL_OW 69
28955: PPUSH
28956: LD_VAR 0 2
28960: PPUSH
28961: CALL_OW 74
28965: PPUSH
28966: CALL_OW 115
// until IsDead ( un ) ;
28970: LD_VAR 0 2
28974: PPUSH
28975: CALL_OW 301
28979: IFFALSE 28927
// end ;
28981: PPOPN 2
28983: END
// every 0 0$1 trigger StreamModeActive and sStu do
28984: LD_EXP 54
28988: IFFALSE 28996
28990: PUSH
28991: LD_EXP 93
28995: AND
28996: IFFALSE 29012
28998: GO 29000
29000: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29001: LD_STRING displayStucuk();
29003: PPUSH
29004: CALL_OW 559
// ResetFog ;
29008: CALL_OW 335
// end ;
29012: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29013: LD_EXP 54
29017: IFFALSE 29025
29019: PUSH
29020: LD_EXP 86
29024: AND
29025: IFFALSE 29166
29027: GO 29029
29029: DISABLE
29030: LD_INT 0
29032: PPUSH
29033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29034: LD_ADDR_VAR 0 2
29038: PUSH
29039: LD_INT 22
29041: PUSH
29042: LD_OWVAR 2
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 21
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 2
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29166
// un := tmp [ rand ( 1 , tmp ) ] ;
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 2
29088: PUSH
29089: LD_INT 1
29091: PPUSH
29092: LD_VAR 0 2
29096: PPUSH
29097: CALL_OW 12
29101: ARRAY
29102: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_INT 0
29110: PPUSH
29111: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29115: LD_VAR 0 1
29119: PPUSH
29120: LD_OWVAR 3
29124: PUSH
29125: LD_VAR 0 1
29129: DIFF
29130: PPUSH
29131: LD_VAR 0 1
29135: PPUSH
29136: CALL_OW 74
29140: PPUSH
29141: CALL_OW 115
// wait ( 0 0$20 ) ;
29145: LD_INT 700
29147: PPUSH
29148: CALL_OW 67
// SetSide ( un , your_side ) ;
29152: LD_VAR 0 1
29156: PPUSH
29157: LD_OWVAR 2
29161: PPUSH
29162: CALL_OW 235
// end ;
29166: PPOPN 2
29168: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29169: LD_EXP 54
29173: IFFALSE 29181
29175: PUSH
29176: LD_EXP 87
29180: AND
29181: IFFALSE 29287
29183: GO 29185
29185: DISABLE
29186: LD_INT 0
29188: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29189: LD_ADDR_VAR 0 1
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_OWVAR 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 30
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 30
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: ST_TO_ADDR
// if not depot then
29243: LD_VAR 0 1
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29287
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29252: LD_VAR 0 1
29256: PUSH
29257: LD_INT 1
29259: ARRAY
29260: PPUSH
29261: CALL_OW 250
29265: PPUSH
29266: LD_VAR 0 1
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 251
29279: PPUSH
29280: LD_INT 70
29282: PPUSH
29283: CALL_OW 495
// end ;
29287: PPOPN 1
29289: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29290: LD_EXP 54
29294: IFFALSE 29302
29296: PUSH
29297: LD_EXP 88
29301: AND
29302: IFFALSE 29513
29304: GO 29306
29306: DISABLE
29307: LD_INT 0
29309: PPUSH
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29314: LD_ADDR_VAR 0 5
29318: PUSH
29319: LD_INT 22
29321: PUSH
29322: LD_OWVAR 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 21
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PPUSH
29345: CALL_OW 69
29349: ST_TO_ADDR
// if not tmp then
29350: LD_VAR 0 5
29354: NOT
29355: IFFALSE 29359
// exit ;
29357: GO 29513
// for i in tmp do
29359: LD_ADDR_VAR 0 1
29363: PUSH
29364: LD_VAR 0 5
29368: PUSH
29369: FOR_IN
29370: IFFALSE 29511
// begin d := rand ( 0 , 5 ) ;
29372: LD_ADDR_VAR 0 4
29376: PUSH
29377: LD_INT 0
29379: PPUSH
29380: LD_INT 5
29382: PPUSH
29383: CALL_OW 12
29387: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29388: LD_ADDR_VAR 0 2
29392: PUSH
29393: LD_VAR 0 1
29397: PPUSH
29398: CALL_OW 250
29402: PPUSH
29403: LD_VAR 0 4
29407: PPUSH
29408: LD_INT 3
29410: PPUSH
29411: LD_INT 12
29413: PPUSH
29414: CALL_OW 12
29418: PPUSH
29419: CALL_OW 272
29423: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29424: LD_ADDR_VAR 0 3
29428: PUSH
29429: LD_VAR 0 1
29433: PPUSH
29434: CALL_OW 251
29438: PPUSH
29439: LD_VAR 0 4
29443: PPUSH
29444: LD_INT 3
29446: PPUSH
29447: LD_INT 12
29449: PPUSH
29450: CALL_OW 12
29454: PPUSH
29455: CALL_OW 273
29459: ST_TO_ADDR
// if ValidHex ( x , y ) then
29460: LD_VAR 0 2
29464: PPUSH
29465: LD_VAR 0 3
29469: PPUSH
29470: CALL_OW 488
29474: IFFALSE 29509
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29476: LD_VAR 0 1
29480: PPUSH
29481: LD_VAR 0 2
29485: PPUSH
29486: LD_VAR 0 3
29490: PPUSH
29491: LD_INT 3
29493: PPUSH
29494: LD_INT 6
29496: PPUSH
29497: CALL_OW 12
29501: PPUSH
29502: LD_INT 1
29504: PPUSH
29505: CALL_OW 483
// end ;
29509: GO 29369
29511: POP
29512: POP
// end ;
29513: PPOPN 5
29515: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29516: LD_EXP 54
29520: IFFALSE 29528
29522: PUSH
29523: LD_EXP 89
29527: AND
29528: IFFALSE 29622
29530: GO 29532
29532: DISABLE
29533: LD_INT 0
29535: PPUSH
29536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29537: LD_ADDR_VAR 0 2
29541: PUSH
29542: LD_INT 22
29544: PUSH
29545: LD_OWVAR 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 32
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 21
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: PPUSH
29579: CALL_OW 69
29583: ST_TO_ADDR
// if not tmp then
29584: LD_VAR 0 2
29588: NOT
29589: IFFALSE 29593
// exit ;
29591: GO 29622
// for i in tmp do
29593: LD_ADDR_VAR 0 1
29597: PUSH
29598: LD_VAR 0 2
29602: PUSH
29603: FOR_IN
29604: IFFALSE 29620
// SetFuel ( i , 0 ) ;
29606: LD_VAR 0 1
29610: PPUSH
29611: LD_INT 0
29613: PPUSH
29614: CALL_OW 240
29618: GO 29603
29620: POP
29621: POP
// end ;
29622: PPOPN 2
29624: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29625: LD_EXP 54
29629: IFFALSE 29637
29631: PUSH
29632: LD_EXP 90
29636: AND
29637: IFFALSE 29703
29639: GO 29641
29641: DISABLE
29642: LD_INT 0
29644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29645: LD_ADDR_VAR 0 1
29649: PUSH
29650: LD_INT 22
29652: PUSH
29653: LD_OWVAR 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 30
29664: PUSH
29665: LD_INT 29
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PPUSH
29676: CALL_OW 69
29680: ST_TO_ADDR
// if not tmp then
29681: LD_VAR 0 1
29685: NOT
29686: IFFALSE 29690
// exit ;
29688: GO 29703
// DestroyUnit ( tmp [ 1 ] ) ;
29690: LD_VAR 0 1
29694: PUSH
29695: LD_INT 1
29697: ARRAY
29698: PPUSH
29699: CALL_OW 65
// end ;
29703: PPOPN 1
29705: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29706: LD_EXP 54
29710: IFFALSE 29718
29712: PUSH
29713: LD_EXP 92
29717: AND
29718: IFFALSE 29847
29720: GO 29722
29722: DISABLE
29723: LD_INT 0
29725: PPUSH
// begin uc_side := 0 ;
29726: LD_ADDR_OWVAR 20
29730: PUSH
29731: LD_INT 0
29733: ST_TO_ADDR
// uc_nation := nation_arabian ;
29734: LD_ADDR_OWVAR 21
29738: PUSH
29739: LD_INT 2
29741: ST_TO_ADDR
// hc_gallery :=  ;
29742: LD_ADDR_OWVAR 33
29746: PUSH
29747: LD_STRING 
29749: ST_TO_ADDR
// hc_name :=  ;
29750: LD_ADDR_OWVAR 26
29754: PUSH
29755: LD_STRING 
29757: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29758: LD_INT 1
29760: PPUSH
29761: LD_INT 11
29763: PPUSH
29764: LD_INT 10
29766: PPUSH
29767: CALL_OW 380
// un := CreateHuman ;
29771: LD_ADDR_VAR 0 1
29775: PUSH
29776: CALL_OW 44
29780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29781: LD_VAR 0 1
29785: PPUSH
29786: LD_INT 1
29788: PPUSH
29789: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29793: LD_INT 35
29795: PPUSH
29796: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29800: LD_VAR 0 1
29804: PPUSH
29805: LD_INT 22
29807: PUSH
29808: LD_OWVAR 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: PPUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 74
29831: PPUSH
29832: CALL_OW 115
// until IsDead ( un ) ;
29836: LD_VAR 0 1
29840: PPUSH
29841: CALL_OW 301
29845: IFFALSE 29793
// end ;
29847: PPOPN 1
29849: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29850: LD_EXP 54
29854: IFFALSE 29862
29856: PUSH
29857: LD_EXP 94
29861: AND
29862: IFFALSE 29874
29864: GO 29866
29866: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29867: LD_STRING earthquake(getX(game), 0, 32)
29869: PPUSH
29870: CALL_OW 559
29874: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29875: LD_EXP 54
29879: IFFALSE 29887
29881: PUSH
29882: LD_EXP 95
29886: AND
29887: IFFALSE 29978
29889: GO 29891
29891: DISABLE
29892: LD_INT 0
29894: PPUSH
// begin enable ;
29895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29896: LD_ADDR_VAR 0 1
29900: PUSH
29901: LD_INT 22
29903: PUSH
29904: LD_OWVAR 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 21
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 33
29925: PUSH
29926: LD_INT 3
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: PPUSH
29938: CALL_OW 69
29942: ST_TO_ADDR
// if not tmp then
29943: LD_VAR 0 1
29947: NOT
29948: IFFALSE 29952
// exit ;
29950: GO 29978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29952: LD_VAR 0 1
29956: PUSH
29957: LD_INT 1
29959: PPUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 12
29969: ARRAY
29970: PPUSH
29971: LD_INT 1
29973: PPUSH
29974: CALL_OW 234
// end ;
29978: PPOPN 1
29980: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29981: LD_EXP 54
29985: IFFALSE 29993
29987: PUSH
29988: LD_EXP 96
29992: AND
29993: IFFALSE 30134
29995: GO 29997
29997: DISABLE
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: LD_OWVAR 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 25
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 69
30038: ST_TO_ADDR
// if not tmp then
30039: LD_VAR 0 3
30043: NOT
30044: IFFALSE 30048
// exit ;
30046: GO 30134
// un := tmp [ rand ( 1 , tmp ) ] ;
30048: LD_ADDR_VAR 0 2
30052: PUSH
30053: LD_VAR 0 3
30057: PUSH
30058: LD_INT 1
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: CALL_OW 12
30070: ARRAY
30071: ST_TO_ADDR
// if Crawls ( un ) then
30072: LD_VAR 0 2
30076: PPUSH
30077: CALL_OW 318
30081: IFFALSE 30092
// ComWalk ( un ) ;
30083: LD_VAR 0 2
30087: PPUSH
30088: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30092: LD_VAR 0 2
30096: PPUSH
30097: LD_INT 9
30099: PPUSH
30100: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30104: LD_INT 28
30106: PPUSH
30107: LD_OWVAR 2
30111: PPUSH
30112: LD_INT 2
30114: PPUSH
30115: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30119: LD_INT 29
30121: PPUSH
30122: LD_OWVAR 2
30126: PPUSH
30127: LD_INT 2
30129: PPUSH
30130: CALL_OW 322
// end ;
30134: PPOPN 3
30136: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30137: LD_EXP 54
30141: IFFALSE 30149
30143: PUSH
30144: LD_EXP 97
30148: AND
30149: IFFALSE 30260
30151: GO 30153
30153: DISABLE
30154: LD_INT 0
30156: PPUSH
30157: PPUSH
30158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30159: LD_ADDR_VAR 0 3
30163: PUSH
30164: LD_INT 22
30166: PUSH
30167: LD_OWVAR 2
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 25
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 69
30194: ST_TO_ADDR
// if not tmp then
30195: LD_VAR 0 3
30199: NOT
30200: IFFALSE 30204
// exit ;
30202: GO 30260
// un := tmp [ rand ( 1 , tmp ) ] ;
30204: LD_ADDR_VAR 0 2
30208: PUSH
30209: LD_VAR 0 3
30213: PUSH
30214: LD_INT 1
30216: PPUSH
30217: LD_VAR 0 3
30221: PPUSH
30222: CALL_OW 12
30226: ARRAY
30227: ST_TO_ADDR
// if Crawls ( un ) then
30228: LD_VAR 0 2
30232: PPUSH
30233: CALL_OW 318
30237: IFFALSE 30248
// ComWalk ( un ) ;
30239: LD_VAR 0 2
30243: PPUSH
30244: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30248: LD_VAR 0 2
30252: PPUSH
30253: LD_INT 8
30255: PPUSH
30256: CALL_OW 336
// end ;
30260: PPOPN 3
30262: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30263: LD_EXP 54
30267: IFFALSE 30275
30269: PUSH
30270: LD_EXP 98
30274: AND
30275: IFFALSE 30419
30277: GO 30279
30279: DISABLE
30280: LD_INT 0
30282: PPUSH
30283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30284: LD_ADDR_VAR 0 2
30288: PUSH
30289: LD_INT 22
30291: PUSH
30292: LD_OWVAR 2
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 21
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 2
30313: PUSH
30314: LD_INT 34
30316: PUSH
30317: LD_INT 12
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 34
30326: PUSH
30327: LD_INT 51
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 34
30336: PUSH
30337: LD_INT 32
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: PPUSH
30355: CALL_OW 69
30359: ST_TO_ADDR
// if not tmp then
30360: LD_VAR 0 2
30364: NOT
30365: IFFALSE 30369
// exit ;
30367: GO 30419
// for i in tmp do
30369: LD_ADDR_VAR 0 1
30373: PUSH
30374: LD_VAR 0 2
30378: PUSH
30379: FOR_IN
30380: IFFALSE 30417
// if GetCargo ( i , mat_artifact ) = 0 then
30382: LD_VAR 0 1
30386: PPUSH
30387: LD_INT 4
30389: PPUSH
30390: CALL_OW 289
30394: PUSH
30395: LD_INT 0
30397: EQUAL
30398: IFFALSE 30415
// SetCargo ( i , mat_siberit , 100 ) ;
30400: LD_VAR 0 1
30404: PPUSH
30405: LD_INT 3
30407: PPUSH
30408: LD_INT 100
30410: PPUSH
30411: CALL_OW 290
30415: GO 30379
30417: POP
30418: POP
// end ;
30419: PPOPN 2
30421: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30422: LD_EXP 54
30426: IFFALSE 30434
30428: PUSH
30429: LD_EXP 99
30433: AND
30434: IFFALSE 30617
30436: GO 30438
30438: DISABLE
30439: LD_INT 0
30441: PPUSH
30442: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30443: LD_ADDR_VAR 0 2
30447: PUSH
30448: LD_INT 22
30450: PUSH
30451: LD_OWVAR 2
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PPUSH
30460: CALL_OW 69
30464: ST_TO_ADDR
// if not tmp then
30465: LD_VAR 0 2
30469: NOT
30470: IFFALSE 30474
// exit ;
30472: GO 30617
// for i := 1 to 2 do
30474: LD_ADDR_VAR 0 1
30478: PUSH
30479: DOUBLE
30480: LD_INT 1
30482: DEC
30483: ST_TO_ADDR
30484: LD_INT 2
30486: PUSH
30487: FOR_TO
30488: IFFALSE 30615
// begin uc_side := your_side ;
30490: LD_ADDR_OWVAR 20
30494: PUSH
30495: LD_OWVAR 2
30499: ST_TO_ADDR
// uc_nation := nation_american ;
30500: LD_ADDR_OWVAR 21
30504: PUSH
30505: LD_INT 1
30507: ST_TO_ADDR
// vc_chassis := us_morphling ;
30508: LD_ADDR_OWVAR 37
30512: PUSH
30513: LD_INT 5
30515: ST_TO_ADDR
// vc_engine := engine_siberite ;
30516: LD_ADDR_OWVAR 39
30520: PUSH
30521: LD_INT 3
30523: ST_TO_ADDR
// vc_control := control_computer ;
30524: LD_ADDR_OWVAR 38
30528: PUSH
30529: LD_INT 3
30531: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30532: LD_ADDR_OWVAR 40
30536: PUSH
30537: LD_INT 10
30539: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30540: LD_VAR 0 2
30544: PUSH
30545: LD_INT 1
30547: ARRAY
30548: PPUSH
30549: CALL_OW 310
30553: NOT
30554: IFFALSE 30601
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30556: CALL_OW 45
30560: PPUSH
30561: LD_VAR 0 2
30565: PUSH
30566: LD_INT 1
30568: ARRAY
30569: PPUSH
30570: CALL_OW 250
30574: PPUSH
30575: LD_VAR 0 2
30579: PUSH
30580: LD_INT 1
30582: ARRAY
30583: PPUSH
30584: CALL_OW 251
30588: PPUSH
30589: LD_INT 12
30591: PPUSH
30592: LD_INT 1
30594: PPUSH
30595: CALL_OW 50
30599: GO 30613
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30601: CALL_OW 45
30605: PPUSH
30606: LD_INT 1
30608: PPUSH
30609: CALL_OW 51
// end ;
30613: GO 30487
30615: POP
30616: POP
// end ;
30617: PPOPN 2
30619: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30620: LD_EXP 54
30624: IFFALSE 30632
30626: PUSH
30627: LD_EXP 100
30631: AND
30632: IFFALSE 30854
30634: GO 30636
30636: DISABLE
30637: LD_INT 0
30639: PPUSH
30640: PPUSH
30641: PPUSH
30642: PPUSH
30643: PPUSH
30644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30645: LD_ADDR_VAR 0 6
30649: PUSH
30650: LD_INT 22
30652: PUSH
30653: LD_OWVAR 2
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 21
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 3
30674: PUSH
30675: LD_INT 23
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: PPUSH
30694: CALL_OW 69
30698: ST_TO_ADDR
// if not tmp then
30699: LD_VAR 0 6
30703: NOT
30704: IFFALSE 30708
// exit ;
30706: GO 30854
// s1 := rand ( 1 , 4 ) ;
30708: LD_ADDR_VAR 0 2
30712: PUSH
30713: LD_INT 1
30715: PPUSH
30716: LD_INT 4
30718: PPUSH
30719: CALL_OW 12
30723: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30724: LD_ADDR_VAR 0 4
30728: PUSH
30729: LD_VAR 0 6
30733: PUSH
30734: LD_INT 1
30736: ARRAY
30737: PPUSH
30738: LD_VAR 0 2
30742: PPUSH
30743: CALL_OW 259
30747: ST_TO_ADDR
// if s1 = 1 then
30748: LD_VAR 0 2
30752: PUSH
30753: LD_INT 1
30755: EQUAL
30756: IFFALSE 30776
// s2 := rand ( 2 , 4 ) else
30758: LD_ADDR_VAR 0 3
30762: PUSH
30763: LD_INT 2
30765: PPUSH
30766: LD_INT 4
30768: PPUSH
30769: CALL_OW 12
30773: ST_TO_ADDR
30774: GO 30784
// s2 := 1 ;
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_INT 1
30783: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30784: LD_ADDR_VAR 0 5
30788: PUSH
30789: LD_VAR 0 6
30793: PUSH
30794: LD_INT 1
30796: ARRAY
30797: PPUSH
30798: LD_VAR 0 3
30802: PPUSH
30803: CALL_OW 259
30807: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30808: LD_VAR 0 6
30812: PUSH
30813: LD_INT 1
30815: ARRAY
30816: PPUSH
30817: LD_VAR 0 2
30821: PPUSH
30822: LD_VAR 0 5
30826: PPUSH
30827: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30831: LD_VAR 0 6
30835: PUSH
30836: LD_INT 1
30838: ARRAY
30839: PPUSH
30840: LD_VAR 0 3
30844: PPUSH
30845: LD_VAR 0 4
30849: PPUSH
30850: CALL_OW 237
// end ;
30854: PPOPN 6
30856: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30857: LD_EXP 54
30861: IFFALSE 30869
30863: PUSH
30864: LD_EXP 101
30868: AND
30869: IFFALSE 30948
30871: GO 30873
30873: DISABLE
30874: LD_INT 0
30876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30877: LD_ADDR_VAR 0 1
30881: PUSH
30882: LD_INT 22
30884: PUSH
30885: LD_OWVAR 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 30
30896: PUSH
30897: LD_INT 3
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PPUSH
30908: CALL_OW 69
30912: ST_TO_ADDR
// if not tmp then
30913: LD_VAR 0 1
30917: NOT
30918: IFFALSE 30922
// exit ;
30920: GO 30948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30922: LD_VAR 0 1
30926: PUSH
30927: LD_INT 1
30929: PPUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 12
30939: ARRAY
30940: PPUSH
30941: LD_INT 1
30943: PPUSH
30944: CALL_OW 234
// end ;
30948: PPOPN 1
30950: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30951: LD_EXP 54
30955: IFFALSE 30963
30957: PUSH
30958: LD_EXP 102
30962: AND
30963: IFFALSE 31075
30965: GO 30967
30967: DISABLE
30968: LD_INT 0
30970: PPUSH
30971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30972: LD_ADDR_VAR 0 2
30976: PUSH
30977: LD_INT 22
30979: PUSH
30980: LD_OWVAR 2
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 30
30994: PUSH
30995: LD_INT 27
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 30
31004: PUSH
31005: LD_INT 26
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 30
31014: PUSH
31015: LD_INT 28
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PPUSH
31032: CALL_OW 69
31036: ST_TO_ADDR
// if not tmp then
31037: LD_VAR 0 2
31041: NOT
31042: IFFALSE 31046
// exit ;
31044: GO 31075
// for i in tmp do
31046: LD_ADDR_VAR 0 1
31050: PUSH
31051: LD_VAR 0 2
31055: PUSH
31056: FOR_IN
31057: IFFALSE 31073
// SetLives ( i , 1 ) ;
31059: LD_VAR 0 1
31063: PPUSH
31064: LD_INT 1
31066: PPUSH
31067: CALL_OW 234
31071: GO 31056
31073: POP
31074: POP
// end ;
31075: PPOPN 2
31077: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31078: LD_EXP 54
31082: IFFALSE 31090
31084: PUSH
31085: LD_EXP 103
31089: AND
31090: IFFALSE 31377
31092: GO 31094
31094: DISABLE
31095: LD_INT 0
31097: PPUSH
31098: PPUSH
31099: PPUSH
// begin i := rand ( 1 , 7 ) ;
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: LD_INT 1
31107: PPUSH
31108: LD_INT 7
31110: PPUSH
31111: CALL_OW 12
31115: ST_TO_ADDR
// case i of 1 :
31116: LD_VAR 0 1
31120: PUSH
31121: LD_INT 1
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31139
31129: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31130: LD_STRING earthquake(getX(game), 0, 32)
31132: PPUSH
31133: CALL_OW 559
31137: GO 31377
31139: LD_INT 2
31141: DOUBLE
31142: EQUAL
31143: IFTRUE 31147
31145: GO 31161
31147: POP
// begin ToLua ( displayStucuk(); ) ;
31148: LD_STRING displayStucuk();
31150: PPUSH
31151: CALL_OW 559
// ResetFog ;
31155: CALL_OW 335
// end ; 3 :
31159: GO 31377
31161: LD_INT 3
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31273
31169: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31170: LD_ADDR_VAR 0 2
31174: PUSH
31175: LD_INT 22
31177: PUSH
31178: LD_OWVAR 2
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 25
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PPUSH
31201: CALL_OW 69
31205: ST_TO_ADDR
// if not tmp then
31206: LD_VAR 0 2
31210: NOT
31211: IFFALSE 31215
// exit ;
31213: GO 31377
// un := tmp [ rand ( 1 , tmp ) ] ;
31215: LD_ADDR_VAR 0 3
31219: PUSH
31220: LD_VAR 0 2
31224: PUSH
31225: LD_INT 1
31227: PPUSH
31228: LD_VAR 0 2
31232: PPUSH
31233: CALL_OW 12
31237: ARRAY
31238: ST_TO_ADDR
// if Crawls ( un ) then
31239: LD_VAR 0 3
31243: PPUSH
31244: CALL_OW 318
31248: IFFALSE 31259
// ComWalk ( un ) ;
31250: LD_VAR 0 3
31254: PPUSH
31255: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31259: LD_VAR 0 3
31263: PPUSH
31264: LD_INT 8
31266: PPUSH
31267: CALL_OW 336
// end ; 4 :
31271: GO 31377
31273: LD_INT 4
31275: DOUBLE
31276: EQUAL
31277: IFTRUE 31281
31279: GO 31355
31281: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31282: LD_ADDR_VAR 0 2
31286: PUSH
31287: LD_INT 22
31289: PUSH
31290: LD_OWVAR 2
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 30
31301: PUSH
31302: LD_INT 29
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PPUSH
31313: CALL_OW 69
31317: ST_TO_ADDR
// if not tmp then
31318: LD_VAR 0 2
31322: NOT
31323: IFFALSE 31327
// exit ;
31325: GO 31377
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31327: LD_VAR 0 2
31331: PUSH
31332: LD_INT 1
31334: ARRAY
31335: PPUSH
31336: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31340: LD_VAR 0 2
31344: PUSH
31345: LD_INT 1
31347: ARRAY
31348: PPUSH
31349: CALL_OW 65
// end ; 5 .. 7 :
31353: GO 31377
31355: LD_INT 5
31357: DOUBLE
31358: GREATEREQUAL
31359: IFFALSE 31367
31361: LD_INT 7
31363: DOUBLE
31364: LESSEQUAL
31365: IFTRUE 31369
31367: GO 31376
31369: POP
// StreamSibBomb ; end ;
31370: CALL 27558 0 0
31374: GO 31377
31376: POP
// end ;
31377: PPOPN 3
31379: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31380: LD_EXP 54
31384: IFFALSE 31392
31386: PUSH
31387: LD_EXP 104
31391: AND
31392: IFFALSE 31548
31394: GO 31396
31396: DISABLE
31397: LD_INT 0
31399: PPUSH
31400: PPUSH
31401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31402: LD_ADDR_VAR 0 2
31406: PUSH
31407: LD_INT 81
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: PUSH
31422: LD_INT 21
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 21
31434: PUSH
31435: LD_INT 2
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PPUSH
31451: CALL_OW 69
31455: ST_TO_ADDR
// if not tmp then
31456: LD_VAR 0 2
31460: NOT
31461: IFFALSE 31465
// exit ;
31463: GO 31548
// p := 0 ;
31465: LD_ADDR_VAR 0 3
31469: PUSH
31470: LD_INT 0
31472: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31473: LD_INT 35
31475: PPUSH
31476: CALL_OW 67
// p := p + 1 ;
31480: LD_ADDR_VAR 0 3
31484: PUSH
31485: LD_VAR 0 3
31489: PUSH
31490: LD_INT 1
31492: PLUS
31493: ST_TO_ADDR
// for i in tmp do
31494: LD_ADDR_VAR 0 1
31498: PUSH
31499: LD_VAR 0 2
31503: PUSH
31504: FOR_IN
31505: IFFALSE 31536
// if GetLives ( i ) < 1000 then
31507: LD_VAR 0 1
31511: PPUSH
31512: CALL_OW 256
31516: PUSH
31517: LD_INT 1000
31519: LESS
31520: IFFALSE 31534
// SetLives ( i , 1000 ) ;
31522: LD_VAR 0 1
31526: PPUSH
31527: LD_INT 1000
31529: PPUSH
31530: CALL_OW 234
31534: GO 31504
31536: POP
31537: POP
// until p > 20 ;
31538: LD_VAR 0 3
31542: PUSH
31543: LD_INT 20
31545: GREATER
31546: IFFALSE 31473
// end ;
31548: PPOPN 3
31550: END
// every 0 0$1 trigger StreamModeActive and sTime do
31551: LD_EXP 54
31555: IFFALSE 31563
31557: PUSH
31558: LD_EXP 105
31562: AND
31563: IFFALSE 31598
31565: GO 31567
31567: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31568: LD_INT 28
31570: PPUSH
31571: LD_OWVAR 2
31575: PPUSH
31576: LD_INT 2
31578: PPUSH
31579: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31583: LD_INT 30
31585: PPUSH
31586: LD_OWVAR 2
31590: PPUSH
31591: LD_INT 2
31593: PPUSH
31594: CALL_OW 322
// end ;
31598: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31599: LD_EXP 54
31603: IFFALSE 31611
31605: PUSH
31606: LD_EXP 106
31610: AND
31611: IFFALSE 31732
31613: GO 31615
31615: DISABLE
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31620: LD_ADDR_VAR 0 2
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_OWVAR 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 21
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: PUSH
31650: LD_INT 23
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: PPUSH
31669: CALL_OW 69
31673: ST_TO_ADDR
// if not tmp then
31674: LD_VAR 0 2
31678: NOT
31679: IFFALSE 31683
// exit ;
31681: GO 31732
// for i in tmp do
31683: LD_ADDR_VAR 0 1
31687: PUSH
31688: LD_VAR 0 2
31692: PUSH
31693: FOR_IN
31694: IFFALSE 31730
// begin if Crawls ( i ) then
31696: LD_VAR 0 1
31700: PPUSH
31701: CALL_OW 318
31705: IFFALSE 31716
// ComWalk ( i ) ;
31707: LD_VAR 0 1
31711: PPUSH
31712: CALL_OW 138
// SetClass ( i , 2 ) ;
31716: LD_VAR 0 1
31720: PPUSH
31721: LD_INT 2
31723: PPUSH
31724: CALL_OW 336
// end ;
31728: GO 31693
31730: POP
31731: POP
// end ;
31732: PPOPN 2
31734: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31735: LD_EXP 54
31739: IFFALSE 31747
31741: PUSH
31742: LD_EXP 107
31746: AND
31747: IFFALSE 32037
31749: GO 31751
31751: DISABLE
31752: LD_INT 0
31754: PPUSH
31755: PPUSH
31756: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31757: LD_OWVAR 2
31761: PPUSH
31762: LD_INT 9
31764: PPUSH
31765: LD_INT 1
31767: PPUSH
31768: LD_INT 1
31770: PPUSH
31771: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31775: LD_INT 9
31777: PPUSH
31778: LD_OWVAR 2
31782: PPUSH
31783: CALL_OW 343
// uc_side := 9 ;
31787: LD_ADDR_OWVAR 20
31791: PUSH
31792: LD_INT 9
31794: ST_TO_ADDR
// uc_nation := 2 ;
31795: LD_ADDR_OWVAR 21
31799: PUSH
31800: LD_INT 2
31802: ST_TO_ADDR
// hc_name := Dark Warrior ;
31803: LD_ADDR_OWVAR 26
31807: PUSH
31808: LD_STRING Dark Warrior
31810: ST_TO_ADDR
// hc_gallery :=  ;
31811: LD_ADDR_OWVAR 33
31815: PUSH
31816: LD_STRING 
31818: ST_TO_ADDR
// hc_noskilllimit := true ;
31819: LD_ADDR_OWVAR 76
31823: PUSH
31824: LD_INT 1
31826: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31827: LD_ADDR_OWVAR 31
31831: PUSH
31832: LD_INT 30
31834: PUSH
31835: LD_INT 30
31837: PUSH
31838: LD_INT 30
31840: PUSH
31841: LD_INT 30
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// un := CreateHuman ;
31850: LD_ADDR_VAR 0 3
31854: PUSH
31855: CALL_OW 44
31859: ST_TO_ADDR
// hc_noskilllimit := false ;
31860: LD_ADDR_OWVAR 76
31864: PUSH
31865: LD_INT 0
31867: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31868: LD_VAR 0 3
31872: PPUSH
31873: LD_INT 1
31875: PPUSH
31876: CALL_OW 51
// ToLua ( playRanger() ) ;
31880: LD_STRING playRanger()
31882: PPUSH
31883: CALL_OW 559
// p := 0 ;
31887: LD_ADDR_VAR 0 2
31891: PUSH
31892: LD_INT 0
31894: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31895: LD_INT 35
31897: PPUSH
31898: CALL_OW 67
// p := p + 1 ;
31902: LD_ADDR_VAR 0 2
31906: PUSH
31907: LD_VAR 0 2
31911: PUSH
31912: LD_INT 1
31914: PLUS
31915: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31916: LD_VAR 0 3
31920: PPUSH
31921: CALL_OW 256
31925: PUSH
31926: LD_INT 1000
31928: LESS
31929: IFFALSE 31943
// SetLives ( un , 1000 ) ;
31931: LD_VAR 0 3
31935: PPUSH
31936: LD_INT 1000
31938: PPUSH
31939: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31943: LD_VAR 0 3
31947: PPUSH
31948: LD_INT 81
31950: PUSH
31951: LD_OWVAR 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 91
31962: PUSH
31963: LD_VAR 0 3
31967: PUSH
31968: LD_INT 30
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PPUSH
31980: CALL_OW 69
31984: PPUSH
31985: LD_VAR 0 3
31989: PPUSH
31990: CALL_OW 74
31994: PPUSH
31995: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31999: LD_VAR 0 2
32003: PUSH
32004: LD_INT 80
32006: GREATER
32007: IFTRUE 32020
32009: PUSH
32010: LD_VAR 0 3
32014: PPUSH
32015: CALL_OW 301
32019: OR
32020: IFFALSE 31895
// if un then
32022: LD_VAR 0 3
32026: IFFALSE 32037
// RemoveUnit ( un ) ;
32028: LD_VAR 0 3
32032: PPUSH
32033: CALL_OW 64
// end ;
32037: PPOPN 3
32039: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32040: LD_EXP 108
32044: IFFALSE 32160
32046: GO 32048
32048: DISABLE
32049: LD_INT 0
32051: PPUSH
32052: PPUSH
32053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32054: LD_ADDR_VAR 0 2
32058: PUSH
32059: LD_INT 81
32061: PUSH
32062: LD_OWVAR 2
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 21
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PPUSH
32085: CALL_OW 69
32089: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32090: LD_STRING playComputer()
32092: PPUSH
32093: CALL_OW 559
// if not tmp then
32097: LD_VAR 0 2
32101: NOT
32102: IFFALSE 32106
// exit ;
32104: GO 32160
// for i in tmp do
32106: LD_ADDR_VAR 0 1
32110: PUSH
32111: LD_VAR 0 2
32115: PUSH
32116: FOR_IN
32117: IFFALSE 32158
// for j := 1 to 4 do
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: DOUBLE
32125: LD_INT 1
32127: DEC
32128: ST_TO_ADDR
32129: LD_INT 4
32131: PUSH
32132: FOR_TO
32133: IFFALSE 32154
// SetSkill ( i , j , 10 ) ;
32135: LD_VAR 0 1
32139: PPUSH
32140: LD_VAR 0 3
32144: PPUSH
32145: LD_INT 10
32147: PPUSH
32148: CALL_OW 237
32152: GO 32132
32154: POP
32155: POP
32156: GO 32116
32158: POP
32159: POP
// end ;
32160: PPOPN 3
32162: END
// every 0 0$1 trigger s30 do var i , tmp ;
32163: LD_EXP 109
32167: IFFALSE 32236
32169: GO 32171
32171: DISABLE
32172: LD_INT 0
32174: PPUSH
32175: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32176: LD_ADDR_VAR 0 2
32180: PUSH
32181: LD_INT 22
32183: PUSH
32184: LD_OWVAR 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PPUSH
32193: CALL_OW 69
32197: ST_TO_ADDR
// if not tmp then
32198: LD_VAR 0 2
32202: NOT
32203: IFFALSE 32207
// exit ;
32205: GO 32236
// for i in tmp do
32207: LD_ADDR_VAR 0 1
32211: PUSH
32212: LD_VAR 0 2
32216: PUSH
32217: FOR_IN
32218: IFFALSE 32234
// SetLives ( i , 300 ) ;
32220: LD_VAR 0 1
32224: PPUSH
32225: LD_INT 300
32227: PPUSH
32228: CALL_OW 234
32232: GO 32217
32234: POP
32235: POP
// end ;
32236: PPOPN 2
32238: END
// every 0 0$1 trigger s60 do var i , tmp ;
32239: LD_EXP 110
32243: IFFALSE 32312
32245: GO 32247
32247: DISABLE
32248: LD_INT 0
32250: PPUSH
32251: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32252: LD_ADDR_VAR 0 2
32256: PUSH
32257: LD_INT 22
32259: PUSH
32260: LD_OWVAR 2
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PPUSH
32269: CALL_OW 69
32273: ST_TO_ADDR
// if not tmp then
32274: LD_VAR 0 2
32278: NOT
32279: IFFALSE 32283
// exit ;
32281: GO 32312
// for i in tmp do
32283: LD_ADDR_VAR 0 1
32287: PUSH
32288: LD_VAR 0 2
32292: PUSH
32293: FOR_IN
32294: IFFALSE 32310
// SetLives ( i , 600 ) ;
32296: LD_VAR 0 1
32300: PPUSH
32301: LD_INT 600
32303: PPUSH
32304: CALL_OW 234
32308: GO 32293
32310: POP
32311: POP
// end ;
32312: PPOPN 2
32314: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32315: LD_INT 0
32317: PPUSH
// case cmd of 301 :
32318: LD_VAR 0 1
32322: PUSH
32323: LD_INT 301
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32331
32329: GO 32363
32331: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32332: LD_VAR 0 6
32336: PPUSH
32337: LD_VAR 0 7
32341: PPUSH
32342: LD_VAR 0 8
32346: PPUSH
32347: LD_VAR 0 4
32351: PPUSH
32352: LD_VAR 0 5
32356: PPUSH
32357: CALL 33576 0 5
32361: GO 32484
32363: LD_INT 302
32365: DOUBLE
32366: EQUAL
32367: IFTRUE 32371
32369: GO 32408
32371: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32372: LD_VAR 0 6
32376: PPUSH
32377: LD_VAR 0 7
32381: PPUSH
32382: LD_VAR 0 8
32386: PPUSH
32387: LD_VAR 0 9
32391: PPUSH
32392: LD_VAR 0 4
32396: PPUSH
32397: LD_VAR 0 5
32401: PPUSH
32402: CALL 33667 0 6
32406: GO 32484
32408: LD_INT 303
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32453
32416: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32417: LD_VAR 0 6
32421: PPUSH
32422: LD_VAR 0 7
32426: PPUSH
32427: LD_VAR 0 8
32431: PPUSH
32432: LD_VAR 0 9
32436: PPUSH
32437: LD_VAR 0 4
32441: PPUSH
32442: LD_VAR 0 5
32446: PPUSH
32447: CALL 32489 0 6
32451: GO 32484
32453: LD_INT 304
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32483
32461: POP
// hHackTeleport ( unit , x , y ) ; end ;
32462: LD_VAR 0 2
32466: PPUSH
32467: LD_VAR 0 4
32471: PPUSH
32472: LD_VAR 0 5
32476: PPUSH
32477: CALL 34260 0 3
32481: GO 32484
32483: POP
// end ;
32484: LD_VAR 0 12
32488: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32489: LD_INT 0
32491: PPUSH
32492: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32493: LD_VAR 0 1
32497: PUSH
32498: LD_INT 1
32500: LESS
32501: IFTRUE 32513
32503: PUSH
32504: LD_VAR 0 1
32508: PUSH
32509: LD_INT 3
32511: GREATER
32512: OR
32513: IFTRUE 32531
32515: PUSH
32516: LD_VAR 0 5
32520: PPUSH
32521: LD_VAR 0 6
32525: PPUSH
32526: CALL_OW 428
32530: OR
32531: IFFALSE 32535
// exit ;
32533: GO 33263
// uc_side := your_side ;
32535: LD_ADDR_OWVAR 20
32539: PUSH
32540: LD_OWVAR 2
32544: ST_TO_ADDR
// uc_nation := nation ;
32545: LD_ADDR_OWVAR 21
32549: PUSH
32550: LD_VAR 0 1
32554: ST_TO_ADDR
// bc_level = 1 ;
32555: LD_ADDR_OWVAR 43
32559: PUSH
32560: LD_INT 1
32562: ST_TO_ADDR
// case btype of 1 :
32563: LD_VAR 0 2
32567: PUSH
32568: LD_INT 1
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32587
32576: POP
// bc_type := b_depot ; 2 :
32577: LD_ADDR_OWVAR 42
32581: PUSH
32582: LD_INT 0
32584: ST_TO_ADDR
32585: GO 33207
32587: LD_INT 2
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32595
32593: GO 32606
32595: POP
// bc_type := b_warehouse ; 3 :
32596: LD_ADDR_OWVAR 42
32600: PUSH
32601: LD_INT 1
32603: ST_TO_ADDR
32604: GO 33207
32606: LD_INT 3
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32625
32614: POP
// bc_type := b_lab ; 4 .. 9 :
32615: LD_ADDR_OWVAR 42
32619: PUSH
32620: LD_INT 6
32622: ST_TO_ADDR
32623: GO 33207
32625: LD_INT 4
32627: DOUBLE
32628: GREATEREQUAL
32629: IFFALSE 32637
32631: LD_INT 9
32633: DOUBLE
32634: LESSEQUAL
32635: IFTRUE 32639
32637: GO 32699
32639: POP
// begin bc_type := b_lab_half ;
32640: LD_ADDR_OWVAR 42
32644: PUSH
32645: LD_INT 7
32647: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32648: LD_ADDR_OWVAR 44
32652: PUSH
32653: LD_INT 10
32655: PUSH
32656: LD_INT 11
32658: PUSH
32659: LD_INT 12
32661: PUSH
32662: LD_INT 15
32664: PUSH
32665: LD_INT 14
32667: PUSH
32668: LD_INT 13
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: PUSH
32679: LD_VAR 0 2
32683: PUSH
32684: LD_INT 3
32686: MINUS
32687: ARRAY
32688: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32689: LD_ADDR_OWVAR 45
32693: PUSH
32694: LD_INT 9
32696: ST_TO_ADDR
// end ; 10 .. 13 :
32697: GO 33207
32699: LD_INT 10
32701: DOUBLE
32702: GREATEREQUAL
32703: IFFALSE 32711
32705: LD_INT 13
32707: DOUBLE
32708: LESSEQUAL
32709: IFTRUE 32713
32711: GO 32790
32713: POP
// begin bc_type := b_lab_full ;
32714: LD_ADDR_OWVAR 42
32718: PUSH
32719: LD_INT 8
32721: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32722: LD_ADDR_OWVAR 44
32726: PUSH
32727: LD_INT 10
32729: PUSH
32730: LD_INT 12
32732: PUSH
32733: LD_INT 14
32735: PUSH
32736: LD_INT 13
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: PUSH
32745: LD_VAR 0 2
32749: PUSH
32750: LD_INT 9
32752: MINUS
32753: ARRAY
32754: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32755: LD_ADDR_OWVAR 45
32759: PUSH
32760: LD_INT 11
32762: PUSH
32763: LD_INT 15
32765: PUSH
32766: LD_INT 12
32768: PUSH
32769: LD_INT 15
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: PUSH
32778: LD_VAR 0 2
32782: PUSH
32783: LD_INT 9
32785: MINUS
32786: ARRAY
32787: ST_TO_ADDR
// end ; 14 :
32788: GO 33207
32790: LD_INT 14
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// bc_type := b_workshop ; 15 :
32799: LD_ADDR_OWVAR 42
32803: PUSH
32804: LD_INT 2
32806: ST_TO_ADDR
32807: GO 33207
32809: LD_INT 15
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// bc_type := b_factory ; 16 :
32818: LD_ADDR_OWVAR 42
32822: PUSH
32823: LD_INT 3
32825: ST_TO_ADDR
32826: GO 33207
32828: LD_INT 16
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// bc_type := b_ext_gun ; 17 :
32837: LD_ADDR_OWVAR 42
32841: PUSH
32842: LD_INT 17
32844: ST_TO_ADDR
32845: GO 33207
32847: LD_INT 17
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32883
32855: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32856: LD_ADDR_OWVAR 42
32860: PUSH
32861: LD_INT 19
32863: PUSH
32864: LD_INT 23
32866: PUSH
32867: LD_INT 19
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: PUSH
32875: LD_VAR 0 1
32879: ARRAY
32880: ST_TO_ADDR
32881: GO 33207
32883: LD_INT 18
32885: DOUBLE
32886: EQUAL
32887: IFTRUE 32891
32889: GO 32902
32891: POP
// bc_type := b_ext_radar ; 19 :
32892: LD_ADDR_OWVAR 42
32896: PUSH
32897: LD_INT 20
32899: ST_TO_ADDR
32900: GO 33207
32902: LD_INT 19
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32910
32908: GO 32921
32910: POP
// bc_type := b_ext_radio ; 20 :
32911: LD_ADDR_OWVAR 42
32915: PUSH
32916: LD_INT 22
32918: ST_TO_ADDR
32919: GO 33207
32921: LD_INT 20
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32940
32929: POP
// bc_type := b_ext_siberium ; 21 :
32930: LD_ADDR_OWVAR 42
32934: PUSH
32935: LD_INT 21
32937: ST_TO_ADDR
32938: GO 33207
32940: LD_INT 21
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32948
32946: GO 32959
32948: POP
// bc_type := b_ext_computer ; 22 :
32949: LD_ADDR_OWVAR 42
32953: PUSH
32954: LD_INT 24
32956: ST_TO_ADDR
32957: GO 33207
32959: LD_INT 22
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32967
32965: GO 32978
32967: POP
// bc_type := b_ext_track ; 23 :
32968: LD_ADDR_OWVAR 42
32972: PUSH
32973: LD_INT 16
32975: ST_TO_ADDR
32976: GO 33207
32978: LD_INT 23
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 32997
32986: POP
// bc_type := b_ext_laser ; 24 :
32987: LD_ADDR_OWVAR 42
32991: PUSH
32992: LD_INT 25
32994: ST_TO_ADDR
32995: GO 33207
32997: LD_INT 24
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33016
33005: POP
// bc_type := b_control_tower ; 25 :
33006: LD_ADDR_OWVAR 42
33010: PUSH
33011: LD_INT 36
33013: ST_TO_ADDR
33014: GO 33207
33016: LD_INT 25
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33035
33024: POP
// bc_type := b_breastwork ; 26 :
33025: LD_ADDR_OWVAR 42
33029: PUSH
33030: LD_INT 31
33032: ST_TO_ADDR
33033: GO 33207
33035: LD_INT 26
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33054
33043: POP
// bc_type := b_bunker ; 27 :
33044: LD_ADDR_OWVAR 42
33048: PUSH
33049: LD_INT 32
33051: ST_TO_ADDR
33052: GO 33207
33054: LD_INT 27
33056: DOUBLE
33057: EQUAL
33058: IFTRUE 33062
33060: GO 33073
33062: POP
// bc_type := b_turret ; 28 :
33063: LD_ADDR_OWVAR 42
33067: PUSH
33068: LD_INT 33
33070: ST_TO_ADDR
33071: GO 33207
33073: LD_INT 28
33075: DOUBLE
33076: EQUAL
33077: IFTRUE 33081
33079: GO 33092
33081: POP
// bc_type := b_armoury ; 29 :
33082: LD_ADDR_OWVAR 42
33086: PUSH
33087: LD_INT 4
33089: ST_TO_ADDR
33090: GO 33207
33092: LD_INT 29
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33100
33098: GO 33111
33100: POP
// bc_type := b_barracks ; 30 :
33101: LD_ADDR_OWVAR 42
33105: PUSH
33106: LD_INT 5
33108: ST_TO_ADDR
33109: GO 33207
33111: LD_INT 30
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33119
33117: GO 33130
33119: POP
// bc_type := b_solar_power ; 31 :
33120: LD_ADDR_OWVAR 42
33124: PUSH
33125: LD_INT 27
33127: ST_TO_ADDR
33128: GO 33207
33130: LD_INT 31
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33138
33136: GO 33149
33138: POP
// bc_type := b_oil_power ; 32 :
33139: LD_ADDR_OWVAR 42
33143: PUSH
33144: LD_INT 26
33146: ST_TO_ADDR
33147: GO 33207
33149: LD_INT 32
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33157
33155: GO 33168
33157: POP
// bc_type := b_siberite_power ; 33 :
33158: LD_ADDR_OWVAR 42
33162: PUSH
33163: LD_INT 28
33165: ST_TO_ADDR
33166: GO 33207
33168: LD_INT 33
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33187
33176: POP
// bc_type := b_oil_mine ; 34 :
33177: LD_ADDR_OWVAR 42
33181: PUSH
33182: LD_INT 29
33184: ST_TO_ADDR
33185: GO 33207
33187: LD_INT 34
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33206
33195: POP
// bc_type := b_siberite_mine ; end ;
33196: LD_ADDR_OWVAR 42
33200: PUSH
33201: LD_INT 30
33203: ST_TO_ADDR
33204: GO 33207
33206: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33207: LD_ADDR_VAR 0 8
33211: PUSH
33212: LD_VAR 0 5
33216: PPUSH
33217: LD_VAR 0 6
33221: PPUSH
33222: LD_VAR 0 3
33226: PPUSH
33227: CALL_OW 47
33231: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33232: LD_OWVAR 42
33236: PUSH
33237: LD_INT 32
33239: PUSH
33240: LD_INT 33
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: IN
33247: IFFALSE 33263
// PlaceWeaponTurret ( b , weapon ) ;
33249: LD_VAR 0 8
33253: PPUSH
33254: LD_VAR 0 4
33258: PPUSH
33259: CALL_OW 431
// end ;
33263: LD_VAR 0 7
33267: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33268: LD_INT 0
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33274: LD_ADDR_VAR 0 4
33278: PUSH
33279: LD_INT 22
33281: PUSH
33282: LD_OWVAR 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 2
33293: PUSH
33294: LD_INT 30
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 30
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PPUSH
33323: CALL_OW 69
33327: ST_TO_ADDR
// if not tmp then
33328: LD_VAR 0 4
33332: NOT
33333: IFFALSE 33337
// exit ;
33335: GO 33396
// for i in tmp do
33337: LD_ADDR_VAR 0 2
33341: PUSH
33342: LD_VAR 0 4
33346: PUSH
33347: FOR_IN
33348: IFFALSE 33394
// for j = 1 to 3 do
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: DOUBLE
33356: LD_INT 1
33358: DEC
33359: ST_TO_ADDR
33360: LD_INT 3
33362: PUSH
33363: FOR_TO
33364: IFFALSE 33390
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33366: LD_VAR 0 2
33370: PPUSH
33371: CALL_OW 274
33375: PPUSH
33376: LD_VAR 0 3
33380: PPUSH
33381: LD_INT 99999
33383: PPUSH
33384: CALL_OW 277
33388: GO 33363
33390: POP
33391: POP
33392: GO 33347
33394: POP
33395: POP
// end ;
33396: LD_VAR 0 1
33400: RET
// export function hHackSetLevel10 ; var i , j ; begin
33401: LD_INT 0
33403: PPUSH
33404: PPUSH
33405: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33406: LD_ADDR_VAR 0 2
33410: PUSH
33411: LD_INT 21
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PPUSH
33421: CALL_OW 69
33425: PUSH
33426: FOR_IN
33427: IFFALSE 33479
// if IsSelected ( i ) then
33429: LD_VAR 0 2
33433: PPUSH
33434: CALL_OW 306
33438: IFFALSE 33477
// begin for j := 1 to 4 do
33440: LD_ADDR_VAR 0 3
33444: PUSH
33445: DOUBLE
33446: LD_INT 1
33448: DEC
33449: ST_TO_ADDR
33450: LD_INT 4
33452: PUSH
33453: FOR_TO
33454: IFFALSE 33475
// SetSkill ( i , j , 10 ) ;
33456: LD_VAR 0 2
33460: PPUSH
33461: LD_VAR 0 3
33465: PPUSH
33466: LD_INT 10
33468: PPUSH
33469: CALL_OW 237
33473: GO 33453
33475: POP
33476: POP
// end ;
33477: GO 33426
33479: POP
33480: POP
// end ;
33481: LD_VAR 0 1
33485: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33486: LD_INT 0
33488: PPUSH
33489: PPUSH
33490: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33491: LD_ADDR_VAR 0 2
33495: PUSH
33496: LD_INT 22
33498: PUSH
33499: LD_OWVAR 2
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 21
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 69
33526: PUSH
33527: FOR_IN
33528: IFFALSE 33569
// begin for j := 1 to 4 do
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: DOUBLE
33536: LD_INT 1
33538: DEC
33539: ST_TO_ADDR
33540: LD_INT 4
33542: PUSH
33543: FOR_TO
33544: IFFALSE 33565
// SetSkill ( i , j , 10 ) ;
33546: LD_VAR 0 2
33550: PPUSH
33551: LD_VAR 0 3
33555: PPUSH
33556: LD_INT 10
33558: PPUSH
33559: CALL_OW 237
33563: GO 33543
33565: POP
33566: POP
// end ;
33567: GO 33527
33569: POP
33570: POP
// end ;
33571: LD_VAR 0 1
33575: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33576: LD_INT 0
33578: PPUSH
// uc_side := your_side ;
33579: LD_ADDR_OWVAR 20
33583: PUSH
33584: LD_OWVAR 2
33588: ST_TO_ADDR
// uc_nation := nation ;
33589: LD_ADDR_OWVAR 21
33593: PUSH
33594: LD_VAR 0 1
33598: ST_TO_ADDR
// InitHc ;
33599: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33603: LD_INT 0
33605: PPUSH
33606: LD_VAR 0 2
33610: PPUSH
33611: LD_VAR 0 3
33615: PPUSH
33616: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33620: LD_VAR 0 4
33624: PPUSH
33625: LD_VAR 0 5
33629: PPUSH
33630: CALL_OW 428
33634: PUSH
33635: LD_INT 0
33637: EQUAL
33638: IFFALSE 33662
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33640: CALL_OW 44
33644: PPUSH
33645: LD_VAR 0 4
33649: PPUSH
33650: LD_VAR 0 5
33654: PPUSH
33655: LD_INT 1
33657: PPUSH
33658: CALL_OW 48
// end ;
33662: LD_VAR 0 6
33666: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33667: LD_INT 0
33669: PPUSH
33670: PPUSH
// uc_side := your_side ;
33671: LD_ADDR_OWVAR 20
33675: PUSH
33676: LD_OWVAR 2
33680: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33681: LD_VAR 0 1
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 4
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: IN
33708: IFFALSE 33720
// uc_nation := nation_american else
33710: LD_ADDR_OWVAR 21
33714: PUSH
33715: LD_INT 1
33717: ST_TO_ADDR
33718: GO 33763
// if chassis in [ 11 , 12 , 13 , 14 ] then
33720: LD_VAR 0 1
33724: PUSH
33725: LD_INT 11
33727: PUSH
33728: LD_INT 12
33730: PUSH
33731: LD_INT 13
33733: PUSH
33734: LD_INT 14
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: IN
33743: IFFALSE 33755
// uc_nation := nation_arabian else
33745: LD_ADDR_OWVAR 21
33749: PUSH
33750: LD_INT 2
33752: ST_TO_ADDR
33753: GO 33763
// uc_nation := nation_russian ;
33755: LD_ADDR_OWVAR 21
33759: PUSH
33760: LD_INT 3
33762: ST_TO_ADDR
// vc_chassis := chassis ;
33763: LD_ADDR_OWVAR 37
33767: PUSH
33768: LD_VAR 0 1
33772: ST_TO_ADDR
// vc_engine := engine ;
33773: LD_ADDR_OWVAR 39
33777: PUSH
33778: LD_VAR 0 2
33782: ST_TO_ADDR
// vc_control := control ;
33783: LD_ADDR_OWVAR 38
33787: PUSH
33788: LD_VAR 0 3
33792: ST_TO_ADDR
// vc_weapon := weapon ;
33793: LD_ADDR_OWVAR 40
33797: PUSH
33798: LD_VAR 0 4
33802: ST_TO_ADDR
// un := CreateVehicle ;
33803: LD_ADDR_VAR 0 8
33807: PUSH
33808: CALL_OW 45
33812: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33813: LD_VAR 0 8
33817: PPUSH
33818: LD_INT 0
33820: PPUSH
33821: LD_INT 5
33823: PPUSH
33824: CALL_OW 12
33828: PPUSH
33829: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33833: LD_VAR 0 8
33837: PPUSH
33838: LD_VAR 0 5
33842: PPUSH
33843: LD_VAR 0 6
33847: PPUSH
33848: LD_INT 1
33850: PPUSH
33851: CALL_OW 48
// end ;
33855: LD_VAR 0 7
33859: RET
// export hInvincible ; every 1 do
33860: GO 33862
33862: DISABLE
// hInvincible := [ ] ;
33863: LD_ADDR_EXP 111
33867: PUSH
33868: EMPTY
33869: ST_TO_ADDR
33870: END
// every 10 do var i ;
33871: GO 33873
33873: DISABLE
33874: LD_INT 0
33876: PPUSH
// begin enable ;
33877: ENABLE
// if not hInvincible then
33878: LD_EXP 111
33882: NOT
33883: IFFALSE 33887
// exit ;
33885: GO 33931
// for i in hInvincible do
33887: LD_ADDR_VAR 0 1
33891: PUSH
33892: LD_EXP 111
33896: PUSH
33897: FOR_IN
33898: IFFALSE 33929
// if GetLives ( i ) < 1000 then
33900: LD_VAR 0 1
33904: PPUSH
33905: CALL_OW 256
33909: PUSH
33910: LD_INT 1000
33912: LESS
33913: IFFALSE 33927
// SetLives ( i , 1000 ) ;
33915: LD_VAR 0 1
33919: PPUSH
33920: LD_INT 1000
33922: PPUSH
33923: CALL_OW 234
33927: GO 33897
33929: POP
33930: POP
// end ;
33931: PPOPN 1
33933: END
// export function hHackInvincible ; var i ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33938: LD_ADDR_VAR 0 2
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: LD_INT 21
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 21
33958: PUSH
33959: LD_INT 2
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: LIST
33970: PPUSH
33971: CALL_OW 69
33975: PUSH
33976: FOR_IN
33977: IFFALSE 34038
// if IsSelected ( i ) then
33979: LD_VAR 0 2
33983: PPUSH
33984: CALL_OW 306
33988: IFFALSE 34036
// begin if i in hInvincible then
33990: LD_VAR 0 2
33994: PUSH
33995: LD_EXP 111
33999: IN
34000: IFFALSE 34020
// hInvincible := hInvincible diff i else
34002: LD_ADDR_EXP 111
34006: PUSH
34007: LD_EXP 111
34011: PUSH
34012: LD_VAR 0 2
34016: DIFF
34017: ST_TO_ADDR
34018: GO 34036
// hInvincible := hInvincible union i ;
34020: LD_ADDR_EXP 111
34024: PUSH
34025: LD_EXP 111
34029: PUSH
34030: LD_VAR 0 2
34034: UNION
34035: ST_TO_ADDR
// end ;
34036: GO 33976
34038: POP
34039: POP
// end ;
34040: LD_VAR 0 1
34044: RET
// export function hHackInvisible ; var i , j ; begin
34045: LD_INT 0
34047: PPUSH
34048: PPUSH
34049: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34050: LD_ADDR_VAR 0 2
34054: PUSH
34055: LD_INT 21
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PPUSH
34065: CALL_OW 69
34069: PUSH
34070: FOR_IN
34071: IFFALSE 34095
// if IsSelected ( i ) then
34073: LD_VAR 0 2
34077: PPUSH
34078: CALL_OW 306
34082: IFFALSE 34093
// ComForceInvisible ( i ) ;
34084: LD_VAR 0 2
34088: PPUSH
34089: CALL_OW 496
34093: GO 34070
34095: POP
34096: POP
// end ;
34097: LD_VAR 0 1
34101: RET
// export function hHackChangeYourSide ; begin
34102: LD_INT 0
34104: PPUSH
// if your_side = 8 then
34105: LD_OWVAR 2
34109: PUSH
34110: LD_INT 8
34112: EQUAL
34113: IFFALSE 34125
// your_side := 0 else
34115: LD_ADDR_OWVAR 2
34119: PUSH
34120: LD_INT 0
34122: ST_TO_ADDR
34123: GO 34139
// your_side := your_side + 1 ;
34125: LD_ADDR_OWVAR 2
34129: PUSH
34130: LD_OWVAR 2
34134: PUSH
34135: LD_INT 1
34137: PLUS
34138: ST_TO_ADDR
// end ;
34139: LD_VAR 0 1
34143: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34144: LD_INT 0
34146: PPUSH
34147: PPUSH
34148: PPUSH
// for i in all_units do
34149: LD_ADDR_VAR 0 2
34153: PUSH
34154: LD_OWVAR 3
34158: PUSH
34159: FOR_IN
34160: IFFALSE 34238
// if IsSelected ( i ) then
34162: LD_VAR 0 2
34166: PPUSH
34167: CALL_OW 306
34171: IFFALSE 34236
// begin j := GetSide ( i ) ;
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_VAR 0 2
34182: PPUSH
34183: CALL_OW 255
34187: ST_TO_ADDR
// if j = 8 then
34188: LD_VAR 0 3
34192: PUSH
34193: LD_INT 8
34195: EQUAL
34196: IFFALSE 34208
// j := 0 else
34198: LD_ADDR_VAR 0 3
34202: PUSH
34203: LD_INT 0
34205: ST_TO_ADDR
34206: GO 34222
// j := j + 1 ;
34208: LD_ADDR_VAR 0 3
34212: PUSH
34213: LD_VAR 0 3
34217: PUSH
34218: LD_INT 1
34220: PLUS
34221: ST_TO_ADDR
// SetSide ( i , j ) ;
34222: LD_VAR 0 2
34226: PPUSH
34227: LD_VAR 0 3
34231: PPUSH
34232: CALL_OW 235
// end ;
34236: GO 34159
34238: POP
34239: POP
// end ;
34240: LD_VAR 0 1
34244: RET
// export function hHackFog ; begin
34245: LD_INT 0
34247: PPUSH
// FogOff ( true ) ;
34248: LD_INT 1
34250: PPUSH
34251: CALL_OW 344
// end ;
34255: LD_VAR 0 1
34259: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34260: LD_INT 0
34262: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34263: LD_VAR 0 1
34267: PPUSH
34268: LD_VAR 0 2
34272: PPUSH
34273: LD_VAR 0 3
34277: PPUSH
34278: LD_INT 1
34280: PPUSH
34281: LD_INT 1
34283: PPUSH
34284: CALL_OW 483
// CenterOnXY ( x , y ) ;
34288: LD_VAR 0 2
34292: PPUSH
34293: LD_VAR 0 3
34297: PPUSH
34298: CALL_OW 84
// end ;
34302: LD_VAR 0 4
34306: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34307: LD_INT 0
34309: PPUSH
34310: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34311: LD_VAR 0 1
34315: NOT
34316: IFTRUE 34335
34318: PUSH
34319: LD_VAR 0 2
34323: PPUSH
34324: LD_VAR 0 3
34328: PPUSH
34329: CALL_OW 488
34333: NOT
34334: OR
34335: IFTRUE 34370
34337: PUSH
34338: LD_VAR 0 1
34342: PPUSH
34343: CALL_OW 266
34347: PUSH
34348: LD_INT 3
34350: NONEQUAL
34351: IFFALSE 34369
34353: PUSH
34354: LD_VAR 0 1
34358: PPUSH
34359: CALL_OW 247
34363: PUSH
34364: LD_INT 1
34366: EQUAL
34367: NOT
34368: AND
34369: OR
34370: IFFALSE 34374
// exit ;
34372: GO 34656
// if GetType ( factory ) = unit_human then
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 247
34383: PUSH
34384: LD_INT 1
34386: EQUAL
34387: IFFALSE 34404
// factory := IsInUnit ( factory ) ;
34389: LD_ADDR_VAR 0 1
34393: PUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL_OW 310
34403: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34404: LD_VAR 0 1
34408: PPUSH
34409: CALL_OW 266
34413: PUSH
34414: LD_INT 3
34416: NONEQUAL
34417: IFFALSE 34421
// exit ;
34419: GO 34656
// for i := 1 to Count ( factoryWaypoints ) do
34421: LD_ADDR_VAR 0 5
34425: PUSH
34426: DOUBLE
34427: LD_INT 1
34429: DEC
34430: ST_TO_ADDR
34431: LD_EXP 112
34435: PPUSH
34436: CALL 44460 0 1
34440: PUSH
34441: FOR_TO
34442: IFFALSE 34604
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34444: LD_VAR 0 2
34448: PPUSH
34449: LD_VAR 0 3
34453: PPUSH
34454: CALL_OW 428
34458: PUSH
34459: LD_EXP 112
34463: PUSH
34464: LD_VAR 0 5
34468: ARRAY
34469: PUSH
34470: LD_INT 2
34472: ARRAY
34473: EQUAL
34474: IFFALSE 34506
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34476: LD_ADDR_EXP 112
34480: PUSH
34481: LD_EXP 112
34485: PPUSH
34486: LD_VAR 0 5
34490: PPUSH
34491: CALL_OW 3
34495: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34496: CALL 34661 0 0
// exit ;
34500: POP
34501: POP
34502: GO 34656
// end else
34504: GO 34602
// if factory = factoryWaypoints [ i ] [ 2 ] then
34506: LD_VAR 0 1
34510: PUSH
34511: LD_EXP 112
34515: PUSH
34516: LD_VAR 0 5
34520: ARRAY
34521: PUSH
34522: LD_INT 2
34524: ARRAY
34525: EQUAL
34526: IFFALSE 34602
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34528: LD_ADDR_EXP 112
34532: PUSH
34533: LD_EXP 112
34537: PPUSH
34538: LD_VAR 0 5
34542: PPUSH
34543: CALL_OW 3
34547: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34548: LD_ADDR_EXP 112
34552: PUSH
34553: LD_EXP 112
34557: PPUSH
34558: LD_VAR 0 1
34562: PPUSH
34563: CALL_OW 255
34567: PUSH
34568: LD_VAR 0 1
34572: PUSH
34573: LD_VAR 0 2
34577: PUSH
34578: LD_VAR 0 3
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: PPUSH
34589: CALL 80436 0 2
34593: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34594: CALL 34661 0 0
// exit ;
34598: POP
34599: POP
34600: GO 34656
// end ; end ;
34602: GO 34441
34604: POP
34605: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34606: LD_ADDR_EXP 112
34610: PUSH
34611: LD_EXP 112
34615: PPUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: CALL_OW 255
34625: PUSH
34626: LD_VAR 0 1
34630: PUSH
34631: LD_VAR 0 2
34635: PUSH
34636: LD_VAR 0 3
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL 80436 0 2
34651: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34652: CALL 34661 0 0
// end ;
34656: LD_VAR 0 4
34660: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34661: LD_INT 0
34663: PPUSH
34664: PPUSH
34665: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34666: LD_STRING resetFactoryWaypoint();
34668: PPUSH
34669: CALL_OW 559
// if factoryWaypoints then
34673: LD_EXP 112
34677: IFFALSE 34798
// begin list := factoryWaypoints ;
34679: LD_ADDR_VAR 0 3
34683: PUSH
34684: LD_EXP 112
34688: ST_TO_ADDR
// for i := 1 to list do
34689: LD_ADDR_VAR 0 2
34693: PUSH
34694: DOUBLE
34695: LD_INT 1
34697: DEC
34698: ST_TO_ADDR
34699: LD_VAR 0 3
34703: PUSH
34704: FOR_TO
34705: IFFALSE 34796
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34707: LD_STRING setFactoryWaypointXY(
34709: PUSH
34710: LD_VAR 0 3
34714: PUSH
34715: LD_VAR 0 2
34719: ARRAY
34720: PUSH
34721: LD_INT 1
34723: ARRAY
34724: STR
34725: PUSH
34726: LD_STRING ,
34728: STR
34729: PUSH
34730: LD_VAR 0 3
34734: PUSH
34735: LD_VAR 0 2
34739: ARRAY
34740: PUSH
34741: LD_INT 2
34743: ARRAY
34744: STR
34745: PUSH
34746: LD_STRING ,
34748: STR
34749: PUSH
34750: LD_VAR 0 3
34754: PUSH
34755: LD_VAR 0 2
34759: ARRAY
34760: PUSH
34761: LD_INT 3
34763: ARRAY
34764: STR
34765: PUSH
34766: LD_STRING ,
34768: STR
34769: PUSH
34770: LD_VAR 0 3
34774: PUSH
34775: LD_VAR 0 2
34779: ARRAY
34780: PUSH
34781: LD_INT 4
34783: ARRAY
34784: STR
34785: PUSH
34786: LD_STRING )
34788: STR
34789: PPUSH
34790: CALL_OW 559
34794: GO 34704
34796: POP
34797: POP
// end ; end ;
34798: LD_VAR 0 1
34802: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34803: LD_INT 0
34805: PPUSH
// if HexInfo ( x , y ) = warehouse then
34806: LD_VAR 0 2
34810: PPUSH
34811: LD_VAR 0 3
34815: PPUSH
34816: CALL_OW 428
34820: PUSH
34821: LD_VAR 0 1
34825: EQUAL
34826: IFFALSE 34853
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34828: LD_ADDR_EXP 114
34832: PUSH
34833: LD_EXP 114
34837: PPUSH
34838: LD_VAR 0 1
34842: PPUSH
34843: LD_INT 0
34845: PPUSH
34846: CALL_OW 1
34850: ST_TO_ADDR
34851: GO 34904
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34853: LD_ADDR_EXP 114
34857: PUSH
34858: LD_EXP 114
34862: PPUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 255
34877: PUSH
34878: LD_VAR 0 1
34882: PUSH
34883: LD_VAR 0 2
34887: PUSH
34888: LD_VAR 0 3
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: PPUSH
34899: CALL_OW 1
34903: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34904: CALL 34913 0 0
// end ;
34908: LD_VAR 0 4
34912: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34913: LD_INT 0
34915: PPUSH
34916: PPUSH
34917: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34918: LD_STRING resetWarehouseGatheringPoints();
34920: PPUSH
34921: CALL_OW 559
// if warehouseGatheringPoints then
34925: LD_EXP 114
34929: IFFALSE 35055
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34931: LD_ADDR_VAR 0 3
34935: PUSH
34936: LD_EXP 114
34940: PPUSH
34941: CALL 84370 0 1
34945: ST_TO_ADDR
// for i := 1 to list do
34946: LD_ADDR_VAR 0 2
34950: PUSH
34951: DOUBLE
34952: LD_INT 1
34954: DEC
34955: ST_TO_ADDR
34956: LD_VAR 0 3
34960: PUSH
34961: FOR_TO
34962: IFFALSE 35053
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34964: LD_STRING setWarehouseGatheringPointXY(
34966: PUSH
34967: LD_VAR 0 3
34971: PUSH
34972: LD_VAR 0 2
34976: ARRAY
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: STR
34982: PUSH
34983: LD_STRING ,
34985: STR
34986: PUSH
34987: LD_VAR 0 3
34991: PUSH
34992: LD_VAR 0 2
34996: ARRAY
34997: PUSH
34998: LD_INT 2
35000: ARRAY
35001: STR
35002: PUSH
35003: LD_STRING ,
35005: STR
35006: PUSH
35007: LD_VAR 0 3
35011: PUSH
35012: LD_VAR 0 2
35016: ARRAY
35017: PUSH
35018: LD_INT 3
35020: ARRAY
35021: STR
35022: PUSH
35023: LD_STRING ,
35025: STR
35026: PUSH
35027: LD_VAR 0 3
35031: PUSH
35032: LD_VAR 0 2
35036: ARRAY
35037: PUSH
35038: LD_INT 4
35040: ARRAY
35041: STR
35042: PUSH
35043: LD_STRING )
35045: STR
35046: PPUSH
35047: CALL_OW 559
35051: GO 34961
35053: POP
35054: POP
// end ; end ;
35055: LD_VAR 0 1
35059: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35060: LD_EXP 114
35064: IFFALSE 35759
35066: GO 35068
35068: DISABLE
35069: LD_INT 0
35071: PPUSH
35072: PPUSH
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
// begin enable ;
35080: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35081: LD_ADDR_VAR 0 3
35085: PUSH
35086: LD_EXP 114
35090: PPUSH
35091: CALL 84370 0 1
35095: ST_TO_ADDR
// if not list then
35096: LD_VAR 0 3
35100: NOT
35101: IFFALSE 35105
// exit ;
35103: GO 35759
// for i := 1 to list do
35105: LD_ADDR_VAR 0 1
35109: PUSH
35110: DOUBLE
35111: LD_INT 1
35113: DEC
35114: ST_TO_ADDR
35115: LD_VAR 0 3
35119: PUSH
35120: FOR_TO
35121: IFFALSE 35757
// begin depot := list [ i ] [ 2 ] ;
35123: LD_ADDR_VAR 0 8
35127: PUSH
35128: LD_VAR 0 3
35132: PUSH
35133: LD_VAR 0 1
35137: ARRAY
35138: PUSH
35139: LD_INT 2
35141: ARRAY
35142: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35143: LD_ADDR_VAR 0 5
35147: PUSH
35148: LD_VAR 0 3
35152: PUSH
35153: LD_VAR 0 1
35157: ARRAY
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35163: LD_VAR 0 8
35167: PPUSH
35168: CALL_OW 301
35172: IFTRUE 35191
35174: PUSH
35175: LD_VAR 0 5
35179: PUSH
35180: LD_VAR 0 8
35184: PPUSH
35185: CALL_OW 255
35189: NONEQUAL
35190: OR
35191: IFFALSE 35220
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35193: LD_ADDR_EXP 114
35197: PUSH
35198: LD_EXP 114
35202: PPUSH
35203: LD_VAR 0 8
35207: PPUSH
35208: LD_INT 0
35210: PPUSH
35211: CALL_OW 1
35215: ST_TO_ADDR
// exit ;
35216: POP
35217: POP
35218: GO 35759
// end ; x := list [ i ] [ 3 ] ;
35220: LD_ADDR_VAR 0 6
35224: PUSH
35225: LD_VAR 0 3
35229: PUSH
35230: LD_VAR 0 1
35234: ARRAY
35235: PUSH
35236: LD_INT 3
35238: ARRAY
35239: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35240: LD_ADDR_VAR 0 7
35244: PUSH
35245: LD_VAR 0 3
35249: PUSH
35250: LD_VAR 0 1
35254: ARRAY
35255: PUSH
35256: LD_INT 4
35258: ARRAY
35259: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_VAR 0 6
35269: PPUSH
35270: LD_VAR 0 7
35274: PPUSH
35275: LD_INT 16
35277: PPUSH
35278: CALL 82944 0 3
35282: ST_TO_ADDR
// if not cratesNearbyPoint then
35283: LD_VAR 0 9
35287: NOT
35288: IFFALSE 35294
// exit ;
35290: POP
35291: POP
35292: GO 35759
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35294: LD_ADDR_VAR 0 4
35298: PUSH
35299: LD_INT 22
35301: PUSH
35302: LD_VAR 0 5
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: LD_INT 60
35316: PUSH
35317: EMPTY
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 91
35326: PUSH
35327: LD_VAR 0 8
35331: PUSH
35332: LD_INT 6
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: LD_INT 25
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 25
35355: PUSH
35356: LD_INT 16
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: PPUSH
35374: CALL_OW 69
35378: PUSH
35379: LD_VAR 0 8
35383: PPUSH
35384: CALL_OW 313
35388: PPUSH
35389: LD_INT 3
35391: PUSH
35392: LD_INT 60
35394: PUSH
35395: EMPTY
35396: LIST
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 2
35404: PUSH
35405: LD_INT 25
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 25
35417: PUSH
35418: LD_INT 16
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PPUSH
35434: CALL_OW 72
35438: UNION
35439: ST_TO_ADDR
// if tmp then
35440: LD_VAR 0 4
35444: IFFALSE 35524
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35446: LD_ADDR_VAR 0 4
35450: PUSH
35451: LD_VAR 0 4
35455: PPUSH
35456: LD_INT 3
35458: PPUSH
35459: CALL 80751 0 2
35463: ST_TO_ADDR
// for j in tmp do
35464: LD_ADDR_VAR 0 2
35468: PUSH
35469: LD_VAR 0 4
35473: PUSH
35474: FOR_IN
35475: IFFALSE 35518
// begin if IsInUnit ( j ) then
35477: LD_VAR 0 2
35481: PPUSH
35482: CALL_OW 310
35486: IFFALSE 35497
// ComExit ( j ) ;
35488: LD_VAR 0 2
35492: PPUSH
35493: CALL 80834 0 1
// AddComCollect ( j , x , y ) ;
35497: LD_VAR 0 2
35501: PPUSH
35502: LD_VAR 0 6
35506: PPUSH
35507: LD_VAR 0 7
35511: PPUSH
35512: CALL_OW 177
// end ;
35516: GO 35474
35518: POP
35519: POP
// exit ;
35520: POP
35521: POP
35522: GO 35759
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35524: LD_ADDR_VAR 0 4
35528: PUSH
35529: LD_INT 22
35531: PUSH
35532: LD_VAR 0 5
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 91
35543: PUSH
35544: LD_VAR 0 8
35548: PUSH
35549: LD_INT 8
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 2
35559: PUSH
35560: LD_INT 34
35562: PUSH
35563: LD_INT 12
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 34
35572: PUSH
35573: LD_INT 51
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 34
35582: PUSH
35583: LD_INT 32
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 34
35592: PUSH
35593: LD_INT 89
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PPUSH
35612: CALL_OW 69
35616: ST_TO_ADDR
// if tmp then
35617: LD_VAR 0 4
35621: IFFALSE 35755
// begin for j in tmp do
35623: LD_ADDR_VAR 0 2
35627: PUSH
35628: LD_VAR 0 4
35632: PUSH
35633: FOR_IN
35634: IFFALSE 35753
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35636: LD_VAR 0 2
35640: PPUSH
35641: CALL_OW 262
35645: PUSH
35646: LD_INT 3
35648: EQUAL
35649: IFTRUE 35666
35651: PUSH
35652: LD_VAR 0 2
35656: PPUSH
35657: CALL_OW 261
35661: PUSH
35662: LD_INT 20
35664: GREATER
35665: OR
35666: IFFALSE 35680
35668: PUSH
35669: LD_VAR 0 2
35673: PPUSH
35674: CALL_OW 314
35678: NOT
35679: AND
35680: IFFALSE 35710
35682: PUSH
35683: LD_VAR 0 2
35687: PPUSH
35688: CALL_OW 263
35692: PUSH
35693: LD_INT 1
35695: NONEQUAL
35696: IFTRUE 35709
35698: PUSH
35699: LD_VAR 0 2
35703: PPUSH
35704: CALL_OW 311
35708: OR
35709: AND
35710: IFFALSE 35751
// begin ComCollect ( j , x , y ) ;
35712: LD_VAR 0 2
35716: PPUSH
35717: LD_VAR 0 6
35721: PPUSH
35722: LD_VAR 0 7
35726: PPUSH
35727: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35731: LD_VAR 0 2
35735: PPUSH
35736: LD_VAR 0 8
35740: PPUSH
35741: CALL_OW 172
// exit ;
35745: POP
35746: POP
35747: POP
35748: POP
35749: GO 35759
// end ;
35751: GO 35633
35753: POP
35754: POP
// end ; end ;
35755: GO 35120
35757: POP
35758: POP
// end ; end_of_file
35759: PPOPN 9
35761: END
// export function SOS_UnitDestroyed ( un ) ; begin
35762: LD_INT 0
35764: PPUSH
// ComRadiation ( un ) ;
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL 36932 0 1
// end ;
35774: LD_VAR 0 2
35778: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35779: LD_INT 0
35781: PPUSH
// ComRadiation ( un ) ;
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL 36932 0 1
// end ;
35791: LD_VAR 0 2
35795: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35796: LD_INT 0
35798: PPUSH
// end ;
35799: LD_VAR 0 4
35803: RET
// export function SOS_Command ( cmd ) ; begin
35804: LD_INT 0
35806: PPUSH
// end ;
35807: LD_VAR 0 2
35811: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35812: LD_INT 0
35814: PPUSH
// end ;
35815: LD_VAR 0 6
35819: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
35820: LD_INT 0
35822: PPUSH
35823: PPUSH
35824: PPUSH
35825: PPUSH
35826: PPUSH
// if not vehicle or not factory then
35827: LD_VAR 0 1
35831: NOT
35832: IFTRUE 35841
35834: PUSH
35835: LD_VAR 0 2
35839: NOT
35840: OR
35841: IFFALSE 35845
// exit ;
35843: GO 36507
// weapon := GetWeapon ( vehicle ) ;
35845: LD_ADDR_VAR 0 7
35849: PUSH
35850: LD_VAR 0 1
35854: PPUSH
35855: CALL_OW 264
35859: ST_TO_ADDR
// if weapon = ar_miner then
35860: LD_VAR 0 7
35864: PUSH
35865: LD_INT 81
35867: EQUAL
35868: IFFALSE 35925
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
35870: LD_ADDR_EXP 123
35874: PUSH
35875: LD_EXP 123
35879: PPUSH
35880: LD_EXP 123
35884: PUSH
35885: LD_INT 1
35887: PLUS
35888: PPUSH
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL_OW 1
35898: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35899: LD_ADDR_EXP 124
35903: PUSH
35904: LD_EXP 124
35908: PPUSH
35909: LD_EXP 124
35913: PUSH
35914: LD_INT 1
35916: PLUS
35917: PPUSH
35918: EMPTY
35919: PPUSH
35920: CALL_OW 1
35924: ST_TO_ADDR
// end ; if not factoryWaypoints then
35925: LD_EXP 112
35929: NOT
35930: IFFALSE 35934
// exit ;
35932: GO 36507
// for i := 1 to Count ( factoryWaypoints ) do
35934: LD_ADDR_VAR 0 4
35938: PUSH
35939: DOUBLE
35940: LD_INT 1
35942: DEC
35943: ST_TO_ADDR
35944: LD_EXP 112
35948: PPUSH
35949: CALL 44460 0 1
35953: PUSH
35954: FOR_TO
35955: IFFALSE 36505
// if factoryWaypoints [ i ] [ 2 ] = factory then
35957: LD_EXP 112
35961: PUSH
35962: LD_VAR 0 4
35966: ARRAY
35967: PUSH
35968: LD_INT 2
35970: ARRAY
35971: PUSH
35972: LD_VAR 0 2
35976: EQUAL
35977: IFFALSE 36503
// begin if GetControl ( vehicle ) = control_manual then
35979: LD_VAR 0 1
35983: PPUSH
35984: CALL_OW 263
35988: PUSH
35989: LD_INT 1
35991: EQUAL
35992: IFFALSE 36356
// begin driver := IsDrivenBy ( vehicle ) ;
35994: LD_ADDR_VAR 0 5
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 311
36008: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36009: LD_VAR 0 5
36013: PUSH
36014: LD_EXP 113
36018: IN
36019: IFTRUE 36033
36021: PUSH
36022: LD_VAR 0 1
36026: PUSH
36027: LD_EXP 113
36031: IN
36032: OR
36033: IFFALSE 36039
// exit ;
36035: POP
36036: POP
36037: GO 36507
// if not HasTask ( driver ) then
36039: LD_VAR 0 5
36043: PPUSH
36044: CALL_OW 314
36048: NOT
36049: IFFALSE 36354
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36051: LD_ADDR_EXP 113
36055: PUSH
36056: LD_EXP 113
36060: PPUSH
36061: LD_VAR 0 5
36065: PPUSH
36066: CALL 80436 0 2
36070: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36071: LD_ADDR_EXP 113
36075: PUSH
36076: LD_EXP 113
36080: PPUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL 80436 0 2
36090: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36091: LD_ADDR_VAR 0 6
36095: PUSH
36096: LD_EXP 112
36100: PUSH
36101: LD_VAR 0 4
36105: ARRAY
36106: PUSH
36107: LD_INT 3
36109: ARRAY
36110: PPUSH
36111: LD_EXP 112
36115: PUSH
36116: LD_VAR 0 4
36120: ARRAY
36121: PUSH
36122: LD_INT 4
36124: ARRAY
36125: PPUSH
36126: CALL_OW 428
36130: ST_TO_ADDR
// if hex then
36131: LD_VAR 0 6
36135: IFFALSE 36153
// ComMoveUnit ( driver , hex ) else
36137: LD_VAR 0 5
36141: PPUSH
36142: LD_VAR 0 6
36146: PPUSH
36147: CALL_OW 112
36151: GO 36237
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36153: LD_VAR 0 1
36157: PPUSH
36158: LD_EXP 112
36162: PUSH
36163: LD_VAR 0 4
36167: ARRAY
36168: PUSH
36169: LD_INT 3
36171: ARRAY
36172: PPUSH
36173: LD_EXP 112
36177: PUSH
36178: LD_VAR 0 4
36182: ARRAY
36183: PUSH
36184: LD_INT 4
36186: ARRAY
36187: PPUSH
36188: CALL_OW 297
36192: PUSH
36193: LD_INT 0
36195: GREATER
36196: IFFALSE 36237
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36198: LD_VAR 0 5
36202: PPUSH
36203: LD_EXP 112
36207: PUSH
36208: LD_VAR 0 4
36212: ARRAY
36213: PUSH
36214: LD_INT 3
36216: ARRAY
36217: PPUSH
36218: LD_EXP 112
36222: PUSH
36223: LD_VAR 0 4
36227: ARRAY
36228: PUSH
36229: LD_INT 4
36231: ARRAY
36232: PPUSH
36233: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36237: LD_VAR 0 5
36241: PPUSH
36242: CALL_OW 181
// if Multiplayer then
36246: LD_OWVAR 4
36250: IFFALSE 36299
// begin repeat wait ( 10 ) ;
36252: LD_INT 10
36254: PPUSH
36255: CALL_OW 67
// until not IsInUnit ( driver ) ;
36259: LD_VAR 0 5
36263: PPUSH
36264: CALL_OW 310
36268: NOT
36269: IFFALSE 36252
// if not HasTask ( driver ) then
36271: LD_VAR 0 5
36275: PPUSH
36276: CALL_OW 314
36280: NOT
36281: IFFALSE 36297
// ComEnterUnit ( driver , factory ) ;
36283: LD_VAR 0 5
36287: PPUSH
36288: LD_VAR 0 2
36292: PPUSH
36293: CALL_OW 120
// end else
36297: GO 36313
// AddComEnterUnit ( driver , factory ) ;
36299: LD_VAR 0 5
36303: PPUSH
36304: LD_VAR 0 2
36308: PPUSH
36309: CALL_OW 180
// wait ( 0 0$1 ) ;
36313: LD_INT 35
36315: PPUSH
36316: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36320: LD_ADDR_EXP 113
36324: PUSH
36325: LD_EXP 113
36329: PUSH
36330: LD_VAR 0 5
36334: DIFF
36335: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36336: LD_ADDR_EXP 113
36340: PUSH
36341: LD_EXP 113
36345: PUSH
36346: LD_VAR 0 1
36350: DIFF
36351: ST_TO_ADDR
// break ;
36352: GO 36505
// end ; end else
36354: GO 36503
// if GetControl ( vehicle ) = control_remote then
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 263
36365: PUSH
36366: LD_INT 2
36368: EQUAL
36369: IFFALSE 36455
// begin wait ( 0 0$2 ) ;
36371: LD_INT 70
36373: PPUSH
36374: CALL_OW 67
// repeat wait ( 10 ) ;
36378: LD_INT 10
36380: PPUSH
36381: CALL_OW 67
// Connect ( vehicle ) ;
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL 50738 0 1
// until IsControledBy ( vehicle ) ;
36394: LD_VAR 0 1
36398: PPUSH
36399: CALL_OW 312
36403: IFFALSE 36378
// wait ( 10 ) ;
36405: LD_INT 10
36407: PPUSH
36408: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36412: LD_VAR 0 1
36416: PPUSH
36417: LD_EXP 112
36421: PUSH
36422: LD_VAR 0 4
36426: ARRAY
36427: PUSH
36428: LD_INT 3
36430: ARRAY
36431: PPUSH
36432: LD_EXP 112
36436: PUSH
36437: LD_VAR 0 4
36441: ARRAY
36442: PUSH
36443: LD_INT 4
36445: ARRAY
36446: PPUSH
36447: CALL_OW 111
// break ;
36451: GO 36505
// end else
36453: GO 36503
// begin wait ( 0 0$3 ) ;
36455: LD_INT 105
36457: PPUSH
36458: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36462: LD_VAR 0 1
36466: PPUSH
36467: LD_EXP 112
36471: PUSH
36472: LD_VAR 0 4
36476: ARRAY
36477: PUSH
36478: LD_INT 3
36480: ARRAY
36481: PPUSH
36482: LD_EXP 112
36486: PUSH
36487: LD_VAR 0 4
36491: ARRAY
36492: PUSH
36493: LD_INT 4
36495: ARRAY
36496: PPUSH
36497: CALL_OW 111
// break ;
36501: GO 36505
// end ; end ;
36503: GO 35954
36505: POP
36506: POP
// end ;
36507: LD_VAR 0 3
36511: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36512: LD_INT 0
36514: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36515: LD_VAR 0 1
36519: PUSH
36520: LD_INT 250
36522: EQUAL
36523: IFFALSE 36540
36525: PUSH
36526: LD_VAR 0 2
36530: PPUSH
36531: CALL_OW 264
36535: PUSH
36536: LD_INT 81
36538: EQUAL
36539: AND
36540: IFFALSE 36561
// MinerPlaceMine ( unit , x , y ) ;
36542: LD_VAR 0 2
36546: PPUSH
36547: LD_VAR 0 4
36551: PPUSH
36552: LD_VAR 0 5
36556: PPUSH
36557: CALL 39907 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36561: LD_VAR 0 1
36565: PUSH
36566: LD_INT 251
36568: EQUAL
36569: IFFALSE 36586
36571: PUSH
36572: LD_VAR 0 2
36576: PPUSH
36577: CALL_OW 264
36581: PUSH
36582: LD_INT 81
36584: EQUAL
36585: AND
36586: IFFALSE 36607
// MinerDetonateMine ( unit , x , y ) ;
36588: LD_VAR 0 2
36592: PPUSH
36593: LD_VAR 0 4
36597: PPUSH
36598: LD_VAR 0 5
36602: PPUSH
36603: CALL 40314 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36607: LD_VAR 0 1
36611: PUSH
36612: LD_INT 252
36614: EQUAL
36615: IFFALSE 36632
36617: PUSH
36618: LD_VAR 0 2
36622: PPUSH
36623: CALL_OW 264
36627: PUSH
36628: LD_INT 81
36630: EQUAL
36631: AND
36632: IFFALSE 36653
// MinerCreateMinefield ( unit , x , y ) ;
36634: LD_VAR 0 2
36638: PPUSH
36639: LD_VAR 0 4
36643: PPUSH
36644: LD_VAR 0 5
36648: PPUSH
36649: CALL 40546 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36653: LD_VAR 0 1
36657: PUSH
36658: LD_INT 253
36660: EQUAL
36661: IFFALSE 36678
36663: PUSH
36664: LD_VAR 0 2
36668: PPUSH
36669: CALL_OW 257
36673: PUSH
36674: LD_INT 5
36676: EQUAL
36677: AND
36678: IFFALSE 36699
// ComBinocular ( unit , x , y ) ;
36680: LD_VAR 0 2
36684: PPUSH
36685: LD_VAR 0 4
36689: PPUSH
36690: LD_VAR 0 5
36694: PPUSH
36695: CALL 40921 0 3
// if selectedUnit then
36699: LD_VAR 0 3
36703: IFFALSE 36763
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36705: LD_VAR 0 1
36709: PUSH
36710: LD_INT 254
36712: EQUAL
36713: IFFALSE 36730
36715: PUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: CALL_OW 264
36725: PUSH
36726: LD_INT 99
36728: EQUAL
36729: AND
36730: IFFALSE 36747
36732: PUSH
36733: LD_VAR 0 3
36737: PPUSH
36738: CALL_OW 263
36742: PUSH
36743: LD_INT 3
36745: EQUAL
36746: AND
36747: IFFALSE 36763
// HackDestroyVehicle ( unit , selectedUnit ) ;
36749: LD_VAR 0 2
36753: PPUSH
36754: LD_VAR 0 3
36758: PPUSH
36759: CALL 39097 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36763: LD_VAR 0 1
36767: PUSH
36768: LD_INT 255
36770: EQUAL
36771: IFFALSE 36795
36773: PUSH
36774: LD_VAR 0 2
36778: PPUSH
36779: CALL_OW 264
36783: PUSH
36784: LD_INT 14
36786: PUSH
36787: LD_INT 53
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: IN
36794: AND
36795: IFFALSE 36813
36797: PUSH
36798: LD_VAR 0 4
36802: PPUSH
36803: LD_VAR 0 5
36807: PPUSH
36808: CALL_OW 488
36812: AND
36813: IFFALSE 36837
// CutTreeXYR ( unit , x , y , 12 ) ;
36815: LD_VAR 0 2
36819: PPUSH
36820: LD_VAR 0 4
36824: PPUSH
36825: LD_VAR 0 5
36829: PPUSH
36830: LD_INT 12
36832: PPUSH
36833: CALL 37028 0 4
// if cmd = 256 then
36837: LD_VAR 0 1
36841: PUSH
36842: LD_INT 256
36844: EQUAL
36845: IFFALSE 36866
// SetFactoryWaypoint ( unit , x , y ) ;
36847: LD_VAR 0 2
36851: PPUSH
36852: LD_VAR 0 4
36856: PPUSH
36857: LD_VAR 0 5
36861: PPUSH
36862: CALL 34307 0 3
// if cmd = 257 then
36866: LD_VAR 0 1
36870: PUSH
36871: LD_INT 257
36873: EQUAL
36874: IFFALSE 36895
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36876: LD_VAR 0 2
36880: PPUSH
36881: LD_VAR 0 4
36885: PPUSH
36886: LD_VAR 0 5
36890: PPUSH
36891: CALL 34803 0 3
// if cmd = 258 then
36895: LD_VAR 0 1
36899: PUSH
36900: LD_INT 258
36902: EQUAL
36903: IFFALSE 36927
// BurnTreeXYR ( unit , x , y , 8 ) ;
36905: LD_VAR 0 2
36909: PPUSH
36910: LD_VAR 0 4
36914: PPUSH
36915: LD_VAR 0 5
36919: PPUSH
36920: LD_INT 8
36922: PPUSH
36923: CALL 37450 0 4
// end ;
36927: LD_VAR 0 6
36931: RET
// export function ComRadiation ( un ) ; var eff ; begin
36932: LD_INT 0
36934: PPUSH
36935: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36936: LD_VAR 0 1
36940: PPUSH
36941: CALL_OW 264
36945: PUSH
36946: LD_INT 91
36948: NONEQUAL
36949: IFFALSE 36953
// exit ;
36951: GO 37023
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36953: LD_INT 68
36955: PPUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 255
36965: PPUSH
36966: CALL_OW 321
36970: PUSH
36971: LD_INT 2
36973: EQUAL
36974: IFFALSE 36986
// eff := 50 else
36976: LD_ADDR_VAR 0 3
36980: PUSH
36981: LD_INT 50
36983: ST_TO_ADDR
36984: GO 36994
// eff := 25 ;
36986: LD_ADDR_VAR 0 3
36990: PUSH
36991: LD_INT 25
36993: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36994: LD_VAR 0 1
36998: PPUSH
36999: CALL_OW 250
37003: PPUSH
37004: LD_VAR 0 1
37008: PPUSH
37009: CALL_OW 251
37013: PPUSH
37014: LD_VAR 0 3
37018: PPUSH
37019: CALL_OW 495
// end ;
37023: LD_VAR 0 2
37027: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37028: LD_INT 0
37030: PPUSH
37031: PPUSH
37032: PPUSH
37033: PPUSH
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37039: LD_VAR 0 1
37043: PPUSH
37044: CALL_OW 302
37048: NOT
37049: IFTRUE 37068
37051: PUSH
37052: LD_VAR 0 2
37056: PPUSH
37057: LD_VAR 0 3
37061: PPUSH
37062: CALL_OW 488
37066: NOT
37067: OR
37068: IFTRUE 37077
37070: PUSH
37071: LD_VAR 0 4
37075: NOT
37076: OR
37077: IFFALSE 37081
// exit ;
37079: GO 37445
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
37081: LD_VAR 0 1
37085: PPUSH
37086: CALL_OW 437
37090: PPUSH
37091: CALL 44460 0 1
37095: PUSH
37096: LD_INT 10
37098: GREATER
37099: IFFALSE 37103
// exit ;
37101: GO 37445
// list := [ ] ;
37103: LD_ADDR_VAR 0 13
37107: PUSH
37108: EMPTY
37109: ST_TO_ADDR
// if x - r < 0 then
37110: LD_VAR 0 2
37114: PUSH
37115: LD_VAR 0 4
37119: MINUS
37120: PUSH
37121: LD_INT 0
37123: LESS
37124: IFFALSE 37136
// min_x := 0 else
37126: LD_ADDR_VAR 0 7
37130: PUSH
37131: LD_INT 0
37133: ST_TO_ADDR
37134: GO 37152
// min_x := x - r ;
37136: LD_ADDR_VAR 0 7
37140: PUSH
37141: LD_VAR 0 2
37145: PUSH
37146: LD_VAR 0 4
37150: MINUS
37151: ST_TO_ADDR
// if y - r < 0 then
37152: LD_VAR 0 3
37156: PUSH
37157: LD_VAR 0 4
37161: MINUS
37162: PUSH
37163: LD_INT 0
37165: LESS
37166: IFFALSE 37178
// min_y := 0 else
37168: LD_ADDR_VAR 0 8
37172: PUSH
37173: LD_INT 0
37175: ST_TO_ADDR
37176: GO 37194
// min_y := y - r ;
37178: LD_ADDR_VAR 0 8
37182: PUSH
37183: LD_VAR 0 3
37187: PUSH
37188: LD_VAR 0 4
37192: MINUS
37193: ST_TO_ADDR
// max_x := x + r ;
37194: LD_ADDR_VAR 0 9
37198: PUSH
37199: LD_VAR 0 2
37203: PUSH
37204: LD_VAR 0 4
37208: PLUS
37209: ST_TO_ADDR
// max_y := y + r ;
37210: LD_ADDR_VAR 0 10
37214: PUSH
37215: LD_VAR 0 3
37219: PUSH
37220: LD_VAR 0 4
37224: PLUS
37225: ST_TO_ADDR
// for _x = min_x to max_x do
37226: LD_ADDR_VAR 0 11
37230: PUSH
37231: DOUBLE
37232: LD_VAR 0 7
37236: DEC
37237: ST_TO_ADDR
37238: LD_VAR 0 9
37242: PUSH
37243: FOR_TO
37244: IFFALSE 37363
// for _y = min_y to max_y do
37246: LD_ADDR_VAR 0 12
37250: PUSH
37251: DOUBLE
37252: LD_VAR 0 8
37256: DEC
37257: ST_TO_ADDR
37258: LD_VAR 0 10
37262: PUSH
37263: FOR_TO
37264: IFFALSE 37359
// begin if not ValidHex ( _x , _y ) then
37266: LD_VAR 0 11
37270: PPUSH
37271: LD_VAR 0 12
37275: PPUSH
37276: CALL_OW 488
37280: NOT
37281: IFFALSE 37285
// continue ;
37283: GO 37263
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37285: LD_VAR 0 11
37289: PPUSH
37290: LD_VAR 0 12
37294: PPUSH
37295: CALL_OW 351
37299: IFFALSE 37317
37301: PUSH
37302: LD_VAR 0 11
37306: PPUSH
37307: LD_VAR 0 12
37311: PPUSH
37312: CALL_OW 554
37316: AND
37317: IFFALSE 37357
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37319: LD_ADDR_VAR 0 13
37323: PUSH
37324: LD_VAR 0 13
37328: PPUSH
37329: LD_VAR 0 13
37333: PUSH
37334: LD_INT 1
37336: PLUS
37337: PPUSH
37338: LD_VAR 0 11
37342: PUSH
37343: LD_VAR 0 12
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PPUSH
37352: CALL_OW 2
37356: ST_TO_ADDR
// end ;
37357: GO 37263
37359: POP
37360: POP
37361: GO 37243
37363: POP
37364: POP
// if not list then
37365: LD_VAR 0 13
37369: NOT
37370: IFFALSE 37374
// exit ;
37372: GO 37445
// for i in list do
37374: LD_ADDR_VAR 0 6
37378: PUSH
37379: LD_VAR 0 13
37383: PUSH
37384: FOR_IN
37385: IFFALSE 37443
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37387: LD_VAR 0 1
37391: PPUSH
37392: LD_STRING M
37394: PUSH
37395: LD_VAR 0 6
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: PUSH
37404: LD_VAR 0 6
37408: PUSH
37409: LD_INT 2
37411: ARRAY
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: PUSH
37434: EMPTY
37435: LIST
37436: PPUSH
37437: CALL_OW 447
37441: GO 37384
37443: POP
37444: POP
// end ;
37445: LD_VAR 0 5
37449: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37450: LD_INT 0
37452: PPUSH
37453: PPUSH
37454: PPUSH
37455: PPUSH
37456: PPUSH
37457: PPUSH
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 302
37471: NOT
37472: IFTRUE 37491
37474: PUSH
37475: LD_VAR 0 2
37479: PPUSH
37480: LD_VAR 0 3
37484: PPUSH
37485: CALL_OW 488
37489: NOT
37490: OR
37491: IFTRUE 37500
37493: PUSH
37494: LD_VAR 0 4
37498: NOT
37499: OR
37500: IFFALSE 37504
// exit ;
37502: GO 38043
// if Count ( GetTaskList ( flame ) ) > 10 then
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 437
37513: PPUSH
37514: CALL 44460 0 1
37518: PUSH
37519: LD_INT 10
37521: GREATER
37522: IFFALSE 37526
// exit ;
37524: GO 38043
// list := [ ] ;
37526: LD_ADDR_VAR 0 13
37530: PUSH
37531: EMPTY
37532: ST_TO_ADDR
// if x - r < 0 then
37533: LD_VAR 0 2
37537: PUSH
37538: LD_VAR 0 4
37542: MINUS
37543: PUSH
37544: LD_INT 0
37546: LESS
37547: IFFALSE 37559
// min_x := 0 else
37549: LD_ADDR_VAR 0 7
37553: PUSH
37554: LD_INT 0
37556: ST_TO_ADDR
37557: GO 37575
// min_x := x - r ;
37559: LD_ADDR_VAR 0 7
37563: PUSH
37564: LD_VAR 0 2
37568: PUSH
37569: LD_VAR 0 4
37573: MINUS
37574: ST_TO_ADDR
// if y - r < 0 then
37575: LD_VAR 0 3
37579: PUSH
37580: LD_VAR 0 4
37584: MINUS
37585: PUSH
37586: LD_INT 0
37588: LESS
37589: IFFALSE 37601
// min_y := 0 else
37591: LD_ADDR_VAR 0 8
37595: PUSH
37596: LD_INT 0
37598: ST_TO_ADDR
37599: GO 37617
// min_y := y - r ;
37601: LD_ADDR_VAR 0 8
37605: PUSH
37606: LD_VAR 0 3
37610: PUSH
37611: LD_VAR 0 4
37615: MINUS
37616: ST_TO_ADDR
// max_x := x + r ;
37617: LD_ADDR_VAR 0 9
37621: PUSH
37622: LD_VAR 0 2
37626: PUSH
37627: LD_VAR 0 4
37631: PLUS
37632: ST_TO_ADDR
// max_y := y + r ;
37633: LD_ADDR_VAR 0 10
37637: PUSH
37638: LD_VAR 0 3
37642: PUSH
37643: LD_VAR 0 4
37647: PLUS
37648: ST_TO_ADDR
// for _x = min_x to max_x do
37649: LD_ADDR_VAR 0 11
37653: PUSH
37654: DOUBLE
37655: LD_VAR 0 7
37659: DEC
37660: ST_TO_ADDR
37661: LD_VAR 0 9
37665: PUSH
37666: FOR_TO
37667: IFFALSE 37786
// for _y = min_y to max_y do
37669: LD_ADDR_VAR 0 12
37673: PUSH
37674: DOUBLE
37675: LD_VAR 0 8
37679: DEC
37680: ST_TO_ADDR
37681: LD_VAR 0 10
37685: PUSH
37686: FOR_TO
37687: IFFALSE 37782
// begin if not ValidHex ( _x , _y ) then
37689: LD_VAR 0 11
37693: PPUSH
37694: LD_VAR 0 12
37698: PPUSH
37699: CALL_OW 488
37703: NOT
37704: IFFALSE 37708
// continue ;
37706: GO 37686
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37708: LD_VAR 0 11
37712: PPUSH
37713: LD_VAR 0 12
37717: PPUSH
37718: CALL_OW 351
37722: IFFALSE 37740
37724: PUSH
37725: LD_VAR 0 11
37729: PPUSH
37730: LD_VAR 0 12
37734: PPUSH
37735: CALL_OW 554
37739: AND
37740: IFFALSE 37780
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37742: LD_ADDR_VAR 0 13
37746: PUSH
37747: LD_VAR 0 13
37751: PPUSH
37752: LD_VAR 0 13
37756: PUSH
37757: LD_INT 1
37759: PLUS
37760: PPUSH
37761: LD_VAR 0 11
37765: PUSH
37766: LD_VAR 0 12
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PPUSH
37775: CALL_OW 2
37779: ST_TO_ADDR
// end ;
37780: GO 37686
37782: POP
37783: POP
37784: GO 37666
37786: POP
37787: POP
// if not list then
37788: LD_VAR 0 13
37792: NOT
37793: IFFALSE 37797
// exit ;
37795: GO 38043
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37797: LD_ADDR_VAR 0 13
37801: PUSH
37802: LD_VAR 0 1
37806: PPUSH
37807: LD_VAR 0 13
37811: PPUSH
37812: LD_INT 1
37814: PPUSH
37815: LD_INT 1
37817: PPUSH
37818: CALL 47866 0 4
37822: ST_TO_ADDR
// ComStop ( flame ) ;
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 141
// for i in list do
37832: LD_ADDR_VAR 0 6
37836: PUSH
37837: LD_VAR 0 13
37841: PUSH
37842: FOR_IN
37843: IFFALSE 37874
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37845: LD_VAR 0 1
37849: PPUSH
37850: LD_VAR 0 6
37854: PUSH
37855: LD_INT 1
37857: ARRAY
37858: PPUSH
37859: LD_VAR 0 6
37863: PUSH
37864: LD_INT 2
37866: ARRAY
37867: PPUSH
37868: CALL_OW 176
37872: GO 37842
37874: POP
37875: POP
// repeat wait ( 0 0$1 ) ;
37876: LD_INT 35
37878: PPUSH
37879: CALL_OW 67
// task := GetTaskList ( flame ) ;
37883: LD_ADDR_VAR 0 14
37887: PUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 437
37897: ST_TO_ADDR
// if not task then
37898: LD_VAR 0 14
37902: NOT
37903: IFFALSE 37907
// exit ;
37905: GO 38043
// if task [ 1 ] [ 1 ] <> | then
37907: LD_VAR 0 14
37911: PUSH
37912: LD_INT 1
37914: ARRAY
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PUSH
37920: LD_STRING |
37922: NONEQUAL
37923: IFFALSE 37927
// exit ;
37925: GO 38043
// _x := task [ 1 ] [ 2 ] ;
37927: LD_ADDR_VAR 0 11
37931: PUSH
37932: LD_VAR 0 14
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PUSH
37941: LD_INT 2
37943: ARRAY
37944: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37945: LD_ADDR_VAR 0 12
37949: PUSH
37950: LD_VAR 0 14
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: PUSH
37959: LD_INT 3
37961: ARRAY
37962: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37963: LD_VAR 0 11
37967: PPUSH
37968: LD_VAR 0 12
37972: PPUSH
37973: CALL_OW 351
37977: NOT
37978: IFTRUE 37997
37980: PUSH
37981: LD_VAR 0 11
37985: PPUSH
37986: LD_VAR 0 12
37990: PPUSH
37991: CALL_OW 554
37995: NOT
37996: OR
37997: IFFALSE 38031
// begin task := Delete ( task , 1 ) ;
37999: LD_ADDR_VAR 0 14
38003: PUSH
38004: LD_VAR 0 14
38008: PPUSH
38009: LD_INT 1
38011: PPUSH
38012: CALL_OW 3
38016: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38017: LD_VAR 0 1
38021: PPUSH
38022: LD_VAR 0 14
38026: PPUSH
38027: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38031: LD_VAR 0 1
38035: PPUSH
38036: CALL_OW 314
38040: NOT
38041: IFFALSE 37876
// end ;
38043: LD_VAR 0 5
38047: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38048: LD_EXP 116
38052: NOT
38053: IFFALSE 38103
38055: GO 38057
38057: DISABLE
// begin initHack := true ;
38058: LD_ADDR_EXP 116
38062: PUSH
38063: LD_INT 1
38065: ST_TO_ADDR
// hackTanks := [ ] ;
38066: LD_ADDR_EXP 117
38070: PUSH
38071: EMPTY
38072: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38073: LD_ADDR_EXP 118
38077: PUSH
38078: EMPTY
38079: ST_TO_ADDR
// hackLimit := 3 ;
38080: LD_ADDR_EXP 119
38084: PUSH
38085: LD_INT 3
38087: ST_TO_ADDR
// hackDist := 12 ;
38088: LD_ADDR_EXP 120
38092: PUSH
38093: LD_INT 12
38095: ST_TO_ADDR
// hackCounter := [ ] ;
38096: LD_ADDR_EXP 121
38100: PUSH
38101: EMPTY
38102: ST_TO_ADDR
// end ;
38103: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38104: LD_EXP 116
38108: IFFALSE 38126
38110: PUSH
38111: LD_INT 34
38113: PUSH
38114: LD_INT 99
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PPUSH
38121: CALL_OW 69
38125: AND
38126: IFFALSE 38379
38128: GO 38130
38130: DISABLE
38131: LD_INT 0
38133: PPUSH
38134: PPUSH
// begin enable ;
38135: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38136: LD_ADDR_VAR 0 1
38140: PUSH
38141: LD_INT 34
38143: PUSH
38144: LD_INT 99
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PPUSH
38151: CALL_OW 69
38155: PUSH
38156: FOR_IN
38157: IFFALSE 38377
// begin if not i in hackTanks then
38159: LD_VAR 0 1
38163: PUSH
38164: LD_EXP 117
38168: IN
38169: NOT
38170: IFFALSE 38253
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38172: LD_ADDR_EXP 117
38176: PUSH
38177: LD_EXP 117
38181: PPUSH
38182: LD_EXP 117
38186: PUSH
38187: LD_INT 1
38189: PLUS
38190: PPUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL_OW 1
38200: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38201: LD_ADDR_EXP 118
38205: PUSH
38206: LD_EXP 118
38210: PPUSH
38211: LD_EXP 118
38215: PUSH
38216: LD_INT 1
38218: PLUS
38219: PPUSH
38220: EMPTY
38221: PPUSH
38222: CALL_OW 1
38226: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38227: LD_ADDR_EXP 121
38231: PUSH
38232: LD_EXP 121
38236: PPUSH
38237: LD_EXP 121
38241: PUSH
38242: LD_INT 1
38244: PLUS
38245: PPUSH
38246: EMPTY
38247: PPUSH
38248: CALL_OW 1
38252: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38253: LD_VAR 0 1
38257: PPUSH
38258: CALL_OW 302
38262: NOT
38263: IFFALSE 38276
// begin HackUnlinkAll ( i ) ;
38265: LD_VAR 0 1
38269: PPUSH
38270: CALL 38382 0 1
// continue ;
38274: GO 38156
// end ; HackCheckCapturedStatus ( i ) ;
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL 38827 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38285: LD_ADDR_VAR 0 2
38289: PUSH
38290: LD_INT 81
38292: PUSH
38293: LD_VAR 0 1
38297: PPUSH
38298: CALL_OW 255
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 33
38309: PUSH
38310: LD_INT 3
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 91
38319: PUSH
38320: LD_VAR 0 1
38324: PUSH
38325: LD_EXP 120
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 50
38337: PUSH
38338: EMPTY
38339: LIST
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: PPUSH
38347: CALL_OW 69
38351: ST_TO_ADDR
// if not tmp then
38352: LD_VAR 0 2
38356: NOT
38357: IFFALSE 38361
// continue ;
38359: GO 38156
// HackLink ( i , tmp ) ;
38361: LD_VAR 0 1
38365: PPUSH
38366: LD_VAR 0 2
38370: PPUSH
38371: CALL 38518 0 2
// end ;
38375: GO 38156
38377: POP
38378: POP
// end ;
38379: PPOPN 2
38381: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38382: LD_INT 0
38384: PPUSH
38385: PPUSH
38386: PPUSH
// if not hack in hackTanks then
38387: LD_VAR 0 1
38391: PUSH
38392: LD_EXP 117
38396: IN
38397: NOT
38398: IFFALSE 38402
// exit ;
38400: GO 38513
// index := GetElementIndex ( hackTanks , hack ) ;
38402: LD_ADDR_VAR 0 4
38406: PUSH
38407: LD_EXP 117
38411: PPUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL 47161 0 2
38421: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38422: LD_EXP 118
38426: PUSH
38427: LD_VAR 0 4
38431: ARRAY
38432: IFFALSE 38513
// begin for i in hackTanksCaptured [ index ] do
38434: LD_ADDR_VAR 0 3
38438: PUSH
38439: LD_EXP 118
38443: PUSH
38444: LD_VAR 0 4
38448: ARRAY
38449: PUSH
38450: FOR_IN
38451: IFFALSE 38477
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38453: LD_VAR 0 3
38457: PUSH
38458: LD_INT 1
38460: ARRAY
38461: PPUSH
38462: LD_VAR 0 3
38466: PUSH
38467: LD_INT 2
38469: ARRAY
38470: PPUSH
38471: CALL_OW 235
38475: GO 38450
38477: POP
38478: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38479: LD_ADDR_EXP 118
38483: PUSH
38484: LD_EXP 118
38488: PPUSH
38489: LD_VAR 0 4
38493: PPUSH
38494: EMPTY
38495: PPUSH
38496: CALL_OW 1
38500: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38501: LD_VAR 0 1
38505: PPUSH
38506: LD_INT 0
38508: PPUSH
38509: CALL_OW 505
// end ; end ;
38513: LD_VAR 0 2
38517: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38518: LD_INT 0
38520: PPUSH
38521: PPUSH
38522: PPUSH
// if not hack in hackTanks or not vehicles then
38523: LD_VAR 0 1
38527: PUSH
38528: LD_EXP 117
38532: IN
38533: NOT
38534: IFTRUE 38543
38536: PUSH
38537: LD_VAR 0 2
38541: NOT
38542: OR
38543: IFFALSE 38547
// exit ;
38545: GO 38822
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38547: LD_ADDR_VAR 0 2
38551: PUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: LD_VAR 0 2
38561: PPUSH
38562: LD_INT 1
38564: PPUSH
38565: LD_INT 1
38567: PPUSH
38568: CALL 47813 0 4
38572: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38573: LD_ADDR_VAR 0 5
38577: PUSH
38578: LD_EXP 117
38582: PPUSH
38583: LD_VAR 0 1
38587: PPUSH
38588: CALL 47161 0 2
38592: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38593: LD_EXP 118
38597: PUSH
38598: LD_VAR 0 5
38602: ARRAY
38603: PUSH
38604: LD_EXP 119
38608: LESS
38609: IFFALSE 38798
// begin for i := 1 to vehicles do
38611: LD_ADDR_VAR 0 4
38615: PUSH
38616: DOUBLE
38617: LD_INT 1
38619: DEC
38620: ST_TO_ADDR
38621: LD_VAR 0 2
38625: PUSH
38626: FOR_TO
38627: IFFALSE 38796
// begin if hackTanksCaptured [ index ] = hackLimit then
38629: LD_EXP 118
38633: PUSH
38634: LD_VAR 0 5
38638: ARRAY
38639: PUSH
38640: LD_EXP 119
38644: EQUAL
38645: IFFALSE 38649
// break ;
38647: GO 38796
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38649: LD_ADDR_EXP 121
38653: PUSH
38654: LD_EXP 121
38658: PPUSH
38659: LD_VAR 0 5
38663: PPUSH
38664: LD_EXP 121
38668: PUSH
38669: LD_VAR 0 5
38673: ARRAY
38674: PUSH
38675: LD_INT 1
38677: PLUS
38678: PPUSH
38679: CALL_OW 1
38683: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38684: LD_ADDR_EXP 118
38688: PUSH
38689: LD_EXP 118
38693: PPUSH
38694: LD_VAR 0 5
38698: PUSH
38699: LD_EXP 118
38703: PUSH
38704: LD_VAR 0 5
38708: ARRAY
38709: PUSH
38710: LD_INT 1
38712: PLUS
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PPUSH
38718: LD_VAR 0 2
38722: PUSH
38723: LD_VAR 0 4
38727: ARRAY
38728: PUSH
38729: LD_VAR 0 2
38733: PUSH
38734: LD_VAR 0 4
38738: ARRAY
38739: PPUSH
38740: CALL_OW 255
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PPUSH
38749: CALL 47378 0 3
38753: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38754: LD_VAR 0 2
38758: PUSH
38759: LD_VAR 0 4
38763: ARRAY
38764: PPUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 255
38774: PPUSH
38775: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38779: LD_VAR 0 2
38783: PUSH
38784: LD_VAR 0 4
38788: ARRAY
38789: PPUSH
38790: CALL_OW 141
// end ;
38794: GO 38626
38796: POP
38797: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38798: LD_VAR 0 1
38802: PPUSH
38803: LD_EXP 118
38807: PUSH
38808: LD_VAR 0 5
38812: ARRAY
38813: PUSH
38814: LD_INT 0
38816: PLUS
38817: PPUSH
38818: CALL_OW 505
// end ;
38822: LD_VAR 0 3
38826: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38827: LD_INT 0
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
// if not hack in hackTanks then
38833: LD_VAR 0 1
38837: PUSH
38838: LD_EXP 117
38842: IN
38843: NOT
38844: IFFALSE 38848
// exit ;
38846: GO 39092
// index := GetElementIndex ( hackTanks , hack ) ;
38848: LD_ADDR_VAR 0 4
38852: PUSH
38853: LD_EXP 117
38857: PPUSH
38858: LD_VAR 0 1
38862: PPUSH
38863: CALL 47161 0 2
38867: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38868: LD_ADDR_VAR 0 3
38872: PUSH
38873: DOUBLE
38874: LD_EXP 118
38878: PUSH
38879: LD_VAR 0 4
38883: ARRAY
38884: INC
38885: ST_TO_ADDR
38886: LD_INT 1
38888: PUSH
38889: FOR_DOWNTO
38890: IFFALSE 39066
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38892: LD_ADDR_VAR 0 5
38896: PUSH
38897: LD_EXP 118
38901: PUSH
38902: LD_VAR 0 4
38906: ARRAY
38907: PUSH
38908: LD_VAR 0 3
38912: ARRAY
38913: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38914: LD_VAR 0 5
38918: PUSH
38919: LD_INT 1
38921: ARRAY
38922: PPUSH
38923: CALL_OW 302
38927: NOT
38928: IFTRUE 38956
38930: PUSH
38931: LD_VAR 0 5
38935: PUSH
38936: LD_INT 1
38938: ARRAY
38939: PPUSH
38940: CALL_OW 255
38944: PUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 255
38954: NONEQUAL
38955: OR
38956: IFFALSE 39064
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38958: LD_VAR 0 5
38962: PUSH
38963: LD_INT 1
38965: ARRAY
38966: PPUSH
38967: CALL_OW 305
38971: IFFALSE 38999
38973: PUSH
38974: LD_VAR 0 5
38978: PUSH
38979: LD_INT 1
38981: ARRAY
38982: PPUSH
38983: CALL_OW 255
38987: PUSH
38988: LD_VAR 0 1
38992: PPUSH
38993: CALL_OW 255
38997: EQUAL
38998: AND
38999: IFFALSE 39023
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39001: LD_VAR 0 5
39005: PUSH
39006: LD_INT 1
39008: ARRAY
39009: PPUSH
39010: LD_VAR 0 5
39014: PUSH
39015: LD_INT 2
39017: ARRAY
39018: PPUSH
39019: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39023: LD_ADDR_EXP 118
39027: PUSH
39028: LD_EXP 118
39032: PPUSH
39033: LD_VAR 0 4
39037: PPUSH
39038: LD_EXP 118
39042: PUSH
39043: LD_VAR 0 4
39047: ARRAY
39048: PPUSH
39049: LD_VAR 0 3
39053: PPUSH
39054: CALL_OW 3
39058: PPUSH
39059: CALL_OW 1
39063: ST_TO_ADDR
// end ; end ;
39064: GO 38889
39066: POP
39067: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39068: LD_VAR 0 1
39072: PPUSH
39073: LD_EXP 118
39077: PUSH
39078: LD_VAR 0 4
39082: ARRAY
39083: PUSH
39084: LD_INT 0
39086: PLUS
39087: PPUSH
39088: CALL_OW 505
// end ;
39092: LD_VAR 0 2
39096: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39097: LD_INT 0
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
// if not hack in hackTanks then
39103: LD_VAR 0 1
39107: PUSH
39108: LD_EXP 117
39112: IN
39113: NOT
39114: IFFALSE 39118
// exit ;
39116: GO 39203
// index := GetElementIndex ( hackTanks , hack ) ;
39118: LD_ADDR_VAR 0 5
39122: PUSH
39123: LD_EXP 117
39127: PPUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL 47161 0 2
39137: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39138: LD_ADDR_VAR 0 4
39142: PUSH
39143: DOUBLE
39144: LD_INT 1
39146: DEC
39147: ST_TO_ADDR
39148: LD_EXP 118
39152: PUSH
39153: LD_VAR 0 5
39157: ARRAY
39158: PUSH
39159: FOR_TO
39160: IFFALSE 39201
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39162: LD_EXP 118
39166: PUSH
39167: LD_VAR 0 5
39171: ARRAY
39172: PUSH
39173: LD_VAR 0 4
39177: ARRAY
39178: PUSH
39179: LD_INT 1
39181: ARRAY
39182: PUSH
39183: LD_VAR 0 2
39187: EQUAL
39188: IFFALSE 39199
// KillUnit ( vehicle ) ;
39190: LD_VAR 0 2
39194: PPUSH
39195: CALL_OW 66
39199: GO 39159
39201: POP
39202: POP
// end ;
39203: LD_VAR 0 3
39207: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
39208: LD_EXP 122
39212: NOT
39213: IFFALSE 39346
39215: GO 39217
39217: DISABLE
39218: LD_INT 0
39220: PPUSH
// begin initMiner := true ;
39221: LD_ADDR_EXP 122
39225: PUSH
39226: LD_INT 1
39228: ST_TO_ADDR
// minersList := [ ] ;
39229: LD_ADDR_EXP 123
39233: PUSH
39234: EMPTY
39235: ST_TO_ADDR
// minerMinesList := [ ] ;
39236: LD_ADDR_EXP 124
39240: PUSH
39241: EMPTY
39242: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
39243: LD_ADDR_EXP 125
39247: PUSH
39248: LD_INT 10
39250: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39251: LD_ADDR_VAR 0 1
39255: PUSH
39256: LD_INT 34
39258: PUSH
39259: LD_INT 81
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PPUSH
39266: CALL_OW 69
39270: PUSH
39271: FOR_IN
39272: IFFALSE 39344
// begin if not i in minersList then
39274: LD_VAR 0 1
39278: PUSH
39279: LD_EXP 123
39283: IN
39284: NOT
39285: IFFALSE 39342
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39287: LD_ADDR_EXP 123
39291: PUSH
39292: LD_EXP 123
39296: PPUSH
39297: LD_EXP 123
39301: PUSH
39302: LD_INT 1
39304: PLUS
39305: PPUSH
39306: LD_VAR 0 1
39310: PPUSH
39311: CALL_OW 1
39315: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39316: LD_ADDR_EXP 124
39320: PUSH
39321: LD_EXP 124
39325: PPUSH
39326: LD_EXP 124
39330: PUSH
39331: LD_INT 1
39333: PLUS
39334: PPUSH
39335: EMPTY
39336: PPUSH
39337: CALL_OW 1
39341: ST_TO_ADDR
// end end ;
39342: GO 39271
39344: POP
39345: POP
// end ;
39346: PPOPN 1
39348: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
39349: LD_EXP 122
39353: IFFALSE 39384
39355: PUSH
39356: LD_EXP 124
39360: PPUSH
39361: CALL 44460 0 1
39365: IFTRUE 39383
39367: PUSH
39368: LD_INT 34
39370: PUSH
39371: LD_INT 81
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PPUSH
39378: CALL_OW 69
39382: OR
39383: AND
39384: IFFALSE 39904
39386: GO 39388
39388: DISABLE
39389: LD_INT 0
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
// begin enable ;
39395: ENABLE
// for i := minerMinesList downto 1 do
39396: LD_ADDR_VAR 0 1
39400: PUSH
39401: DOUBLE
39402: LD_EXP 124
39406: INC
39407: ST_TO_ADDR
39408: LD_INT 1
39410: PUSH
39411: FOR_DOWNTO
39412: IFFALSE 39902
// begin side := GetSide ( minersList [ i ] ) ;
39414: LD_ADDR_VAR 0 3
39418: PUSH
39419: LD_EXP 123
39423: PUSH
39424: LD_VAR 0 1
39428: ARRAY
39429: PPUSH
39430: CALL_OW 255
39434: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
39435: LD_EXP 123
39439: PUSH
39440: LD_VAR 0 1
39444: ARRAY
39445: PPUSH
39446: CALL_OW 300
39450: IFFALSE 39471
39452: PUSH
39453: LD_VAR 0 3
39457: PUSH
39458: LD_OWVAR 2
39462: PUSH
39463: LD_INT 9
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: IN
39470: AND
39471: IFFALSE 39504
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
39473: LD_EXP 123
39477: PUSH
39478: LD_VAR 0 1
39482: ARRAY
39483: PPUSH
39484: LD_EXP 124
39488: PUSH
39489: LD_VAR 0 1
39493: ARRAY
39494: PPUSH
39495: CALL 44460 0 1
39499: PPUSH
39500: CALL_OW 505
// if not minerMinesList [ i ] then
39504: LD_EXP 124
39508: PUSH
39509: LD_VAR 0 1
39513: ARRAY
39514: NOT
39515: IFFALSE 39519
// continue ;
39517: GO 39411
// for j := minerMinesList [ i ] downto 1 do
39519: LD_ADDR_VAR 0 2
39523: PUSH
39524: DOUBLE
39525: LD_EXP 124
39529: PUSH
39530: LD_VAR 0 1
39534: ARRAY
39535: INC
39536: ST_TO_ADDR
39537: LD_INT 1
39539: PUSH
39540: FOR_DOWNTO
39541: IFFALSE 39898
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
39543: LD_EXP 123
39547: PUSH
39548: LD_VAR 0 1
39552: ARRAY
39553: PPUSH
39554: CALL_OW 301
39558: IFTRUE 39578
39560: PUSH
39561: LD_EXP 123
39565: PUSH
39566: LD_VAR 0 1
39570: ARRAY
39571: PPUSH
39572: CALL_OW 305
39576: NOT
39577: OR
39578: IFFALSE 39669
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39580: LD_EXP 124
39584: PUSH
39585: LD_VAR 0 1
39589: ARRAY
39590: PUSH
39591: LD_VAR 0 2
39595: ARRAY
39596: PUSH
39597: LD_INT 1
39599: ARRAY
39600: PPUSH
39601: LD_EXP 124
39605: PUSH
39606: LD_VAR 0 1
39610: ARRAY
39611: PUSH
39612: LD_VAR 0 2
39616: ARRAY
39617: PUSH
39618: LD_INT 2
39620: ARRAY
39621: PPUSH
39622: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39626: LD_ADDR_EXP 124
39630: PUSH
39631: LD_EXP 124
39635: PPUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: LD_EXP 124
39645: PUSH
39646: LD_VAR 0 1
39650: ARRAY
39651: PPUSH
39652: LD_VAR 0 2
39656: PPUSH
39657: CALL_OW 3
39661: PPUSH
39662: CALL_OW 1
39666: ST_TO_ADDR
// continue ;
39667: GO 39540
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39669: LD_ADDR_VAR 0 4
39673: PUSH
39674: LD_EXP 124
39678: PUSH
39679: LD_VAR 0 1
39683: ARRAY
39684: PUSH
39685: LD_VAR 0 2
39689: ARRAY
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: PPUSH
39695: LD_EXP 124
39699: PUSH
39700: LD_VAR 0 1
39704: ARRAY
39705: PUSH
39706: LD_VAR 0 2
39710: ARRAY
39711: PUSH
39712: LD_INT 2
39714: ARRAY
39715: PPUSH
39716: CALL_OW 428
39720: ST_TO_ADDR
// if not tmp then
39721: LD_VAR 0 4
39725: NOT
39726: IFFALSE 39730
// continue ;
39728: GO 39540
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39730: LD_VAR 0 4
39734: PUSH
39735: LD_INT 81
39737: PUSH
39738: LD_VAR 0 3
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PPUSH
39747: CALL_OW 69
39751: IN
39752: IFFALSE 39802
39754: PUSH
39755: LD_EXP 124
39759: PUSH
39760: LD_VAR 0 1
39764: ARRAY
39765: PUSH
39766: LD_VAR 0 2
39770: ARRAY
39771: PUSH
39772: LD_INT 1
39774: ARRAY
39775: PPUSH
39776: LD_EXP 124
39780: PUSH
39781: LD_VAR 0 1
39785: ARRAY
39786: PUSH
39787: LD_VAR 0 2
39791: ARRAY
39792: PUSH
39793: LD_INT 2
39795: ARRAY
39796: PPUSH
39797: CALL_OW 458
39801: AND
39802: IFFALSE 39896
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39804: LD_EXP 124
39808: PUSH
39809: LD_VAR 0 1
39813: ARRAY
39814: PUSH
39815: LD_VAR 0 2
39819: ARRAY
39820: PUSH
39821: LD_INT 1
39823: ARRAY
39824: PPUSH
39825: LD_EXP 124
39829: PUSH
39830: LD_VAR 0 1
39834: ARRAY
39835: PUSH
39836: LD_VAR 0 2
39840: ARRAY
39841: PUSH
39842: LD_INT 2
39844: ARRAY
39845: PPUSH
39846: LD_VAR 0 3
39850: PPUSH
39851: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39855: LD_ADDR_EXP 124
39859: PUSH
39860: LD_EXP 124
39864: PPUSH
39865: LD_VAR 0 1
39869: PPUSH
39870: LD_EXP 124
39874: PUSH
39875: LD_VAR 0 1
39879: ARRAY
39880: PPUSH
39881: LD_VAR 0 2
39885: PPUSH
39886: CALL_OW 3
39890: PPUSH
39891: CALL_OW 1
39895: ST_TO_ADDR
// end ; end ;
39896: GO 39540
39898: POP
39899: POP
// end ;
39900: GO 39411
39902: POP
39903: POP
// end ;
39904: PPOPN 4
39906: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
39907: LD_INT 0
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
// result := false ;
39913: LD_ADDR_VAR 0 4
39917: PUSH
39918: LD_INT 0
39920: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 264
39930: PUSH
39931: LD_INT 81
39933: EQUAL
39934: NOT
39935: IFFALSE 39939
// exit ;
39937: GO 40309
// side := GetSide ( unit ) ;
39939: LD_ADDR_VAR 0 6
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 255
39953: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
39954: LD_ADDR_VAR 0 5
39958: PUSH
39959: LD_EXP 123
39963: PPUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL 47161 0 2
39973: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39974: LD_EXP 124
39978: PUSH
39979: LD_VAR 0 5
39983: ARRAY
39984: PUSH
39985: LD_EXP 125
39989: GREATEREQUAL
39990: IFFALSE 39994
// exit ;
39992: GO 40309
// ComMoveXY ( unit , x , y ) ;
39994: LD_VAR 0 1
39998: PPUSH
39999: LD_VAR 0 2
40003: PPUSH
40004: LD_VAR 0 3
40008: PPUSH
40009: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40013: LD_INT 35
40015: PPUSH
40016: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40020: LD_VAR 0 1
40024: PPUSH
40025: LD_VAR 0 2
40029: PPUSH
40030: LD_VAR 0 3
40034: PPUSH
40035: CALL 79217 0 3
40039: NOT
40040: IFFALSE 40053
40042: PUSH
40043: LD_VAR 0 1
40047: PPUSH
40048: CALL_OW 314
40052: AND
40053: IFFALSE 40057
// exit ;
40055: GO 40309
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40057: LD_VAR 0 2
40061: PPUSH
40062: LD_VAR 0 3
40066: PPUSH
40067: CALL_OW 428
40071: PUSH
40072: LD_VAR 0 1
40076: EQUAL
40077: IFFALSE 40091
40079: PUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 314
40089: NOT
40090: AND
40091: IFFALSE 40013
// if MineAtPos ( x , y ) then
40093: LD_VAR 0 2
40097: PPUSH
40098: LD_VAR 0 3
40102: PPUSH
40103: CALL_OW 458
40107: IFFALSE 40111
// exit ;
40109: GO 40309
// if your_side = side then
40111: LD_OWVAR 2
40115: PUSH
40116: LD_VAR 0 6
40120: EQUAL
40121: IFFALSE 40140
// PlaySoundXY ( x , y , PlantMine ) ;
40123: LD_VAR 0 2
40127: PPUSH
40128: LD_VAR 0 3
40132: PPUSH
40133: LD_STRING PlantMine
40135: PPUSH
40136: CALL_OW 366
// repeat wait ( 1 ) ;
40140: LD_INT 1
40142: PPUSH
40143: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
40147: LD_VAR 0 2
40151: PPUSH
40152: LD_VAR 0 3
40156: PPUSH
40157: LD_VAR 0 6
40161: PPUSH
40162: LD_INT 0
40164: PPUSH
40165: CALL_OW 454
40169: IFFALSE 40140
// if MineAtPos ( x , y ) then
40171: LD_VAR 0 2
40175: PPUSH
40176: LD_VAR 0 3
40180: PPUSH
40181: CALL_OW 458
40185: IFFALSE 40301
// begin for i in minerMinesList [ index ] do
40187: LD_ADDR_VAR 0 7
40191: PUSH
40192: LD_EXP 124
40196: PUSH
40197: LD_VAR 0 5
40201: ARRAY
40202: PUSH
40203: FOR_IN
40204: IFFALSE 40246
// if i [ 1 ] = x and i [ 2 ] = y then
40206: LD_VAR 0 7
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PUSH
40215: LD_VAR 0 2
40219: EQUAL
40220: IFFALSE 40238
40222: PUSH
40223: LD_VAR 0 7
40227: PUSH
40228: LD_INT 2
40230: ARRAY
40231: PUSH
40232: LD_VAR 0 3
40236: EQUAL
40237: AND
40238: IFFALSE 40244
// exit ;
40240: POP
40241: POP
40242: GO 40309
40244: GO 40203
40246: POP
40247: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40248: LD_ADDR_EXP 124
40252: PUSH
40253: LD_EXP 124
40257: PPUSH
40258: LD_VAR 0 5
40262: PUSH
40263: LD_EXP 124
40267: PUSH
40268: LD_VAR 0 5
40272: ARRAY
40273: PUSH
40274: LD_INT 1
40276: PLUS
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PPUSH
40282: LD_VAR 0 2
40286: PUSH
40287: LD_VAR 0 3
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PPUSH
40296: CALL 47378 0 3
40300: ST_TO_ADDR
// end ; result := true ;
40301: LD_ADDR_VAR 0 4
40305: PUSH
40306: LD_INT 1
40308: ST_TO_ADDR
// end ;
40309: LD_VAR 0 4
40313: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40314: LD_INT 0
40316: PPUSH
40317: PPUSH
40318: PPUSH
// if not unit in minersList then
40319: LD_VAR 0 1
40323: PUSH
40324: LD_EXP 123
40328: IN
40329: NOT
40330: IFFALSE 40334
// exit ;
40332: GO 40541
// index := GetElementIndex ( minersList , unit ) ;
40334: LD_ADDR_VAR 0 6
40338: PUSH
40339: LD_EXP 123
40343: PPUSH
40344: LD_VAR 0 1
40348: PPUSH
40349: CALL 47161 0 2
40353: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40354: LD_ADDR_VAR 0 5
40358: PUSH
40359: DOUBLE
40360: LD_EXP 124
40364: PUSH
40365: LD_VAR 0 6
40369: ARRAY
40370: INC
40371: ST_TO_ADDR
40372: LD_INT 1
40374: PUSH
40375: FOR_DOWNTO
40376: IFFALSE 40539
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40378: LD_EXP 124
40382: PUSH
40383: LD_VAR 0 6
40387: ARRAY
40388: PUSH
40389: LD_VAR 0 5
40393: ARRAY
40394: PUSH
40395: LD_INT 1
40397: ARRAY
40398: PPUSH
40399: LD_EXP 124
40403: PUSH
40404: LD_VAR 0 6
40408: ARRAY
40409: PUSH
40410: LD_VAR 0 5
40414: ARRAY
40415: PUSH
40416: LD_INT 2
40418: ARRAY
40419: PPUSH
40420: LD_VAR 0 2
40424: PPUSH
40425: LD_VAR 0 3
40429: PPUSH
40430: CALL_OW 298
40434: PUSH
40435: LD_INT 6
40437: LESS
40438: IFFALSE 40537
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40440: LD_EXP 124
40444: PUSH
40445: LD_VAR 0 6
40449: ARRAY
40450: PUSH
40451: LD_VAR 0 5
40455: ARRAY
40456: PUSH
40457: LD_INT 1
40459: ARRAY
40460: PPUSH
40461: LD_EXP 124
40465: PUSH
40466: LD_VAR 0 6
40470: ARRAY
40471: PUSH
40472: LD_VAR 0 5
40476: ARRAY
40477: PUSH
40478: LD_INT 2
40480: ARRAY
40481: PPUSH
40482: LD_VAR 0 1
40486: PPUSH
40487: CALL_OW 255
40491: PPUSH
40492: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40496: LD_ADDR_EXP 124
40500: PUSH
40501: LD_EXP 124
40505: PPUSH
40506: LD_VAR 0 6
40510: PPUSH
40511: LD_EXP 124
40515: PUSH
40516: LD_VAR 0 6
40520: ARRAY
40521: PPUSH
40522: LD_VAR 0 5
40526: PPUSH
40527: CALL_OW 3
40531: PPUSH
40532: CALL_OW 1
40536: ST_TO_ADDR
// end ; end ;
40537: GO 40375
40539: POP
40540: POP
// end ;
40541: LD_VAR 0 4
40545: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40546: LD_INT 0
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 264
40566: PUSH
40567: LD_INT 81
40569: EQUAL
40570: NOT
40571: IFTRUE 40586
40573: PUSH
40574: LD_VAR 0 1
40578: PUSH
40579: LD_EXP 123
40583: IN
40584: NOT
40585: OR
40586: IFFALSE 40590
// exit ;
40588: GO 40916
// index := GetElementIndex ( minersList , unit ) ;
40590: LD_ADDR_VAR 0 6
40594: PUSH
40595: LD_EXP 123
40599: PPUSH
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL 47161 0 2
40609: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40610: LD_ADDR_VAR 0 8
40614: PUSH
40615: LD_EXP 125
40619: PUSH
40620: LD_EXP 124
40624: PUSH
40625: LD_VAR 0 6
40629: ARRAY
40630: MINUS
40631: ST_TO_ADDR
// if not minesFreeAmount then
40632: LD_VAR 0 8
40636: NOT
40637: IFFALSE 40641
// exit ;
40639: GO 40916
// tmp := [ ] ;
40641: LD_ADDR_VAR 0 7
40645: PUSH
40646: EMPTY
40647: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40648: LD_ADDR_VAR 0 5
40652: PUSH
40653: DOUBLE
40654: LD_INT 1
40656: DEC
40657: ST_TO_ADDR
40658: LD_VAR 0 8
40662: PUSH
40663: FOR_TO
40664: IFFALSE 40863
// begin _d := rand ( 0 , 5 ) ;
40666: LD_ADDR_VAR 0 11
40670: PUSH
40671: LD_INT 0
40673: PPUSH
40674: LD_INT 5
40676: PPUSH
40677: CALL_OW 12
40681: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40682: LD_ADDR_VAR 0 12
40686: PUSH
40687: LD_INT 2
40689: PPUSH
40690: LD_INT 6
40692: PPUSH
40693: CALL_OW 12
40697: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40698: LD_ADDR_VAR 0 9
40702: PUSH
40703: LD_VAR 0 2
40707: PPUSH
40708: LD_VAR 0 11
40712: PPUSH
40713: LD_VAR 0 12
40717: PPUSH
40718: CALL_OW 272
40722: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40723: LD_ADDR_VAR 0 10
40727: PUSH
40728: LD_VAR 0 3
40732: PPUSH
40733: LD_VAR 0 11
40737: PPUSH
40738: LD_VAR 0 12
40742: PPUSH
40743: CALL_OW 273
40747: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40748: LD_VAR 0 9
40752: PPUSH
40753: LD_VAR 0 10
40757: PPUSH
40758: CALL_OW 488
40762: IFFALSE 40786
40764: PUSH
40765: LD_VAR 0 9
40769: PUSH
40770: LD_VAR 0 10
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_VAR 0 7
40783: IN
40784: NOT
40785: AND
40786: IFFALSE 40805
40788: PUSH
40789: LD_VAR 0 9
40793: PPUSH
40794: LD_VAR 0 10
40798: PPUSH
40799: CALL_OW 458
40803: NOT
40804: AND
40805: IFFALSE 40847
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40807: LD_ADDR_VAR 0 7
40811: PUSH
40812: LD_VAR 0 7
40816: PPUSH
40817: LD_VAR 0 7
40821: PUSH
40822: LD_INT 1
40824: PLUS
40825: PPUSH
40826: LD_VAR 0 9
40830: PUSH
40831: LD_VAR 0 10
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PPUSH
40840: CALL_OW 1
40844: ST_TO_ADDR
40845: GO 40861
// i := i - 1 ;
40847: LD_ADDR_VAR 0 5
40851: PUSH
40852: LD_VAR 0 5
40856: PUSH
40857: LD_INT 1
40859: MINUS
40860: ST_TO_ADDR
// end ;
40861: GO 40663
40863: POP
40864: POP
// for i in tmp do
40865: LD_ADDR_VAR 0 5
40869: PUSH
40870: LD_VAR 0 7
40874: PUSH
40875: FOR_IN
40876: IFFALSE 40914
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40878: LD_VAR 0 1
40882: PPUSH
40883: LD_VAR 0 5
40887: PUSH
40888: LD_INT 1
40890: ARRAY
40891: PPUSH
40892: LD_VAR 0 5
40896: PUSH
40897: LD_INT 2
40899: ARRAY
40900: PPUSH
40901: CALL 39907 0 3
40905: NOT
40906: IFFALSE 40912
// exit ;
40908: POP
40909: POP
40910: GO 40916
40912: GO 40875
40914: POP
40915: POP
// end ;
40916: LD_VAR 0 4
40920: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40921: LD_INT 0
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
40927: PPUSH
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
// if GetClass ( unit ) <> class_sniper then
40932: LD_VAR 0 1
40936: PPUSH
40937: CALL_OW 257
40941: PUSH
40942: LD_INT 5
40944: NONEQUAL
40945: IFFALSE 40949
// exit ;
40947: GO 41419
// dist := 8 ;
40949: LD_ADDR_VAR 0 5
40953: PUSH
40954: LD_INT 8
40956: ST_TO_ADDR
// viewRange := 12 ;
40957: LD_ADDR_VAR 0 8
40961: PUSH
40962: LD_INT 12
40964: ST_TO_ADDR
// side := GetSide ( unit ) ;
40965: LD_ADDR_VAR 0 6
40969: PUSH
40970: LD_VAR 0 1
40974: PPUSH
40975: CALL_OW 255
40979: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40980: LD_INT 61
40982: PPUSH
40983: LD_VAR 0 6
40987: PPUSH
40988: CALL_OW 321
40992: PUSH
40993: LD_INT 2
40995: EQUAL
40996: IFFALSE 41006
// viewRange := 16 ;
40998: LD_ADDR_VAR 0 8
41002: PUSH
41003: LD_INT 16
41005: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41006: LD_VAR 0 1
41010: PPUSH
41011: LD_VAR 0 2
41015: PPUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: CALL_OW 297
41025: PUSH
41026: LD_VAR 0 5
41030: GREATER
41031: IFFALSE 41110
// begin ComMoveXY ( unit , x , y ) ;
41033: LD_VAR 0 1
41037: PPUSH
41038: LD_VAR 0 2
41042: PPUSH
41043: LD_VAR 0 3
41047: PPUSH
41048: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41052: LD_INT 35
41054: PPUSH
41055: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41059: LD_VAR 0 1
41063: PPUSH
41064: LD_VAR 0 2
41068: PPUSH
41069: LD_VAR 0 3
41073: PPUSH
41074: CALL 79217 0 3
41078: NOT
41079: IFFALSE 41083
// exit ;
41081: GO 41419
// until GetDistUnitXY ( unit , x , y ) < dist ;
41083: LD_VAR 0 1
41087: PPUSH
41088: LD_VAR 0 2
41092: PPUSH
41093: LD_VAR 0 3
41097: PPUSH
41098: CALL_OW 297
41102: PUSH
41103: LD_VAR 0 5
41107: LESS
41108: IFFALSE 41052
// end ; ComTurnXY ( unit , x , y ) ;
41110: LD_VAR 0 1
41114: PPUSH
41115: LD_VAR 0 2
41119: PPUSH
41120: LD_VAR 0 3
41124: PPUSH
41125: CALL_OW 118
// repeat if Multiplayer then
41129: LD_OWVAR 4
41133: IFFALSE 41144
// wait ( 35 ) else
41135: LD_INT 35
41137: PPUSH
41138: CALL_OW 67
41142: GO 41151
// wait ( 5 ) ;
41144: LD_INT 5
41146: PPUSH
41147: CALL_OW 67
// _d := GetDir ( unit ) ;
41151: LD_ADDR_VAR 0 11
41155: PUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: CALL_OW 254
41165: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41166: LD_ADDR_VAR 0 7
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: CALL_OW 250
41180: PPUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 251
41190: PPUSH
41191: LD_VAR 0 2
41195: PPUSH
41196: LD_VAR 0 3
41200: PPUSH
41201: CALL 81853 0 4
41205: ST_TO_ADDR
// until dir = _d ;
41206: LD_VAR 0 7
41210: PUSH
41211: LD_VAR 0 11
41215: EQUAL
41216: IFFALSE 41129
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41218: LD_ADDR_VAR 0 9
41222: PUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 250
41232: PPUSH
41233: LD_VAR 0 7
41237: PPUSH
41238: LD_VAR 0 5
41242: PPUSH
41243: CALL_OW 272
41247: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41248: LD_ADDR_VAR 0 10
41252: PUSH
41253: LD_VAR 0 1
41257: PPUSH
41258: CALL_OW 251
41262: PPUSH
41263: LD_VAR 0 7
41267: PPUSH
41268: LD_VAR 0 5
41272: PPUSH
41273: CALL_OW 273
41277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41278: LD_VAR 0 9
41282: PPUSH
41283: LD_VAR 0 10
41287: PPUSH
41288: CALL_OW 488
41292: NOT
41293: IFFALSE 41297
// exit ;
41295: GO 41419
// ComAnimCustom ( unit , 1 ) ;
41297: LD_VAR 0 1
41301: PPUSH
41302: LD_INT 1
41304: PPUSH
41305: CALL_OW 592
// p := 0 ;
41309: LD_ADDR_VAR 0 12
41313: PUSH
41314: LD_INT 0
41316: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41317: LD_VAR 0 9
41321: PPUSH
41322: LD_VAR 0 10
41326: PPUSH
41327: LD_VAR 0 6
41331: PPUSH
41332: LD_VAR 0 8
41336: PPUSH
41337: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41341: LD_INT 35
41343: PPUSH
41344: CALL_OW 67
// p := Inc ( p ) ;
41348: LD_ADDR_VAR 0 12
41352: PUSH
41353: LD_VAR 0 12
41357: PPUSH
41358: CALL 81809 0 1
41362: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41363: LD_VAR 0 12
41367: PUSH
41368: LD_INT 3
41370: EQUAL
41371: IFTRUE 41385
41373: PUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 302
41383: NOT
41384: OR
41385: IFTRUE 41398
41387: PUSH
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 301
41397: OR
41398: IFFALSE 41341
// RemoveSeeing ( _x , _y , side ) ;
41400: LD_VAR 0 9
41404: PPUSH
41405: LD_VAR 0 10
41409: PPUSH
41410: LD_VAR 0 6
41414: PPUSH
41415: CALL_OW 331
// end ;
41419: LD_VAR 0 4
41423: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41424: LD_INT 0
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
// if not unit then
41437: LD_VAR 0 1
41441: NOT
41442: IFFALSE 41446
// exit ;
41444: GO 41717
// side := GetSide ( unit ) ;
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 255
41460: ST_TO_ADDR
// x := GetX ( unit ) ;
41461: LD_ADDR_VAR 0 5
41465: PUSH
41466: LD_VAR 0 1
41470: PPUSH
41471: CALL_OW 250
41475: ST_TO_ADDR
// y := GetY ( unit ) ;
41476: LD_ADDR_VAR 0 6
41480: PUSH
41481: LD_VAR 0 1
41485: PPUSH
41486: CALL_OW 251
41490: ST_TO_ADDR
// r := 8 ;
41491: LD_ADDR_VAR 0 4
41495: PUSH
41496: LD_INT 8
41498: ST_TO_ADDR
// if x - r < 0 then
41499: LD_VAR 0 5
41503: PUSH
41504: LD_VAR 0 4
41508: MINUS
41509: PUSH
41510: LD_INT 0
41512: LESS
41513: IFFALSE 41525
// min_x := 0 else
41515: LD_ADDR_VAR 0 7
41519: PUSH
41520: LD_INT 0
41522: ST_TO_ADDR
41523: GO 41541
// min_x := x - r ;
41525: LD_ADDR_VAR 0 7
41529: PUSH
41530: LD_VAR 0 5
41534: PUSH
41535: LD_VAR 0 4
41539: MINUS
41540: ST_TO_ADDR
// if y - r < 0 then
41541: LD_VAR 0 6
41545: PUSH
41546: LD_VAR 0 4
41550: MINUS
41551: PUSH
41552: LD_INT 0
41554: LESS
41555: IFFALSE 41567
// min_y := 0 else
41557: LD_ADDR_VAR 0 8
41561: PUSH
41562: LD_INT 0
41564: ST_TO_ADDR
41565: GO 41583
// min_y := y - r ;
41567: LD_ADDR_VAR 0 8
41571: PUSH
41572: LD_VAR 0 6
41576: PUSH
41577: LD_VAR 0 4
41581: MINUS
41582: ST_TO_ADDR
// max_x := x + r ;
41583: LD_ADDR_VAR 0 9
41587: PUSH
41588: LD_VAR 0 5
41592: PUSH
41593: LD_VAR 0 4
41597: PLUS
41598: ST_TO_ADDR
// max_y := y + r ;
41599: LD_ADDR_VAR 0 10
41603: PUSH
41604: LD_VAR 0 6
41608: PUSH
41609: LD_VAR 0 4
41613: PLUS
41614: ST_TO_ADDR
// for _x = min_x to max_x do
41615: LD_ADDR_VAR 0 11
41619: PUSH
41620: DOUBLE
41621: LD_VAR 0 7
41625: DEC
41626: ST_TO_ADDR
41627: LD_VAR 0 9
41631: PUSH
41632: FOR_TO
41633: IFFALSE 41715
// for _y = min_y to max_y do
41635: LD_ADDR_VAR 0 12
41639: PUSH
41640: DOUBLE
41641: LD_VAR 0 8
41645: DEC
41646: ST_TO_ADDR
41647: LD_VAR 0 10
41651: PUSH
41652: FOR_TO
41653: IFFALSE 41711
// begin if not ValidHex ( _x , _y ) then
41655: LD_VAR 0 11
41659: PPUSH
41660: LD_VAR 0 12
41664: PPUSH
41665: CALL_OW 488
41669: NOT
41670: IFFALSE 41674
// continue ;
41672: GO 41652
// if MineAtPos ( _x , _y ) then
41674: LD_VAR 0 11
41678: PPUSH
41679: LD_VAR 0 12
41683: PPUSH
41684: CALL_OW 458
41688: IFFALSE 41709
// ViewMineAtPos ( _x , _y , side ) ;
41690: LD_VAR 0 11
41694: PPUSH
41695: LD_VAR 0 12
41699: PPUSH
41700: LD_VAR 0 3
41704: PPUSH
41705: CALL_OW 457
// end ;
41709: GO 41652
41711: POP
41712: POP
41713: GO 41632
41715: POP
41716: POP
// end ;
41717: LD_VAR 0 2
41721: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
41722: LD_INT 0
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
// if not units then
41731: LD_VAR 0 1
41735: NOT
41736: IFFALSE 41740
// exit ;
41738: GO 42204
// scaners := [ ] ;
41740: LD_ADDR_VAR 0 6
41744: PUSH
41745: EMPTY
41746: ST_TO_ADDR
// for i in units do
41747: LD_ADDR_VAR 0 3
41751: PUSH
41752: LD_VAR 0 1
41756: PUSH
41757: FOR_IN
41758: IFFALSE 41915
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
41760: LD_VAR 0 3
41764: PPUSH
41765: CALL_OW 264
41769: PUSH
41770: LD_INT 11
41772: NONEQUAL
41773: IFTRUE 41787
41775: PUSH
41776: LD_VAR 0 3
41780: PPUSH
41781: CALL_OW 302
41785: NOT
41786: OR
41787: IFTRUE 41804
41789: PUSH
41790: LD_VAR 0 3
41794: PPUSH
41795: CALL_OW 110
41799: PUSH
41800: LD_INT 502
41802: EQUAL
41803: OR
41804: IFFALSE 41808
// continue ;
41806: GO 41757
// ComStop ( i ) ;
41808: LD_VAR 0 3
41812: PPUSH
41813: CALL_OW 141
// x := GetX ( i ) ;
41817: LD_ADDR_VAR 0 4
41821: PUSH
41822: LD_VAR 0 3
41826: PPUSH
41827: CALL_OW 250
41831: ST_TO_ADDR
// y := GetY ( i ) ;
41832: LD_ADDR_VAR 0 5
41836: PUSH
41837: LD_VAR 0 3
41841: PPUSH
41842: CALL_OW 251
41846: ST_TO_ADDR
// if GetSide ( i ) = your_side then
41847: LD_VAR 0 3
41851: PPUSH
41852: CALL_OW 255
41856: PUSH
41857: LD_OWVAR 2
41861: EQUAL
41862: IFFALSE 41881
// PlaySoundXY ( x , y , mineDetector ) ;
41864: LD_VAR 0 4
41868: PPUSH
41869: LD_VAR 0 5
41873: PPUSH
41874: LD_STRING mineDetector
41876: PPUSH
41877: CALL_OW 366
// scaners := Join ( scaners , i ) ;
41881: LD_ADDR_VAR 0 6
41885: PUSH
41886: LD_VAR 0 6
41890: PPUSH
41891: LD_VAR 0 3
41895: PPUSH
41896: CALL 80436 0 2
41900: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
41901: LD_VAR 0 3
41905: PPUSH
41906: LD_INT 502
41908: PPUSH
41909: CALL_OW 109
// end ;
41913: GO 41757
41915: POP
41916: POP
// if not scaners then
41917: LD_VAR 0 6
41921: NOT
41922: IFFALSE 41926
// exit ;
41924: GO 42204
// wait ( 3 ) ;
41926: LD_INT 3
41928: PPUSH
41929: CALL_OW 67
// timer := 6 ;
41933: LD_ADDR_VAR 0 7
41937: PUSH
41938: LD_INT 6
41940: ST_TO_ADDR
// repeat for i in scaners do
41941: LD_ADDR_VAR 0 3
41945: PUSH
41946: LD_VAR 0 6
41950: PUSH
41951: FOR_IN
41952: IFFALSE 42102
// begin side := GetSide ( i ) ;
41954: LD_ADDR_VAR 0 8
41958: PUSH
41959: LD_VAR 0 3
41963: PPUSH
41964: CALL_OW 255
41968: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
41969: LD_VAR 0 3
41973: PPUSH
41974: CALL_OW 302
41978: NOT
41979: IFTRUE 41992
41981: PUSH
41982: LD_VAR 0 3
41986: PPUSH
41987: CALL_OW 314
41991: OR
41992: IFTRUE 42023
41994: PUSH
41995: LD_VAR 0 3
41999: PPUSH
42000: CALL_OW 263
42004: PUSH
42005: LD_INT 1
42007: EQUAL
42008: IFFALSE 42022
42010: PUSH
42011: LD_VAR 0 3
42015: PPUSH
42016: CALL_OW 311
42020: NOT
42021: AND
42022: OR
42023: IFFALSE 42067
// begin SetUnitDisplayNumber ( i , 0 ) ;
42025: LD_VAR 0 3
42029: PPUSH
42030: LD_INT 0
42032: PPUSH
42033: CALL_OW 505
// SetTag ( i , 0 ) ;
42037: LD_VAR 0 3
42041: PPUSH
42042: LD_INT 0
42044: PPUSH
42045: CALL_OW 109
// scaners := scaners diff i ;
42049: LD_ADDR_VAR 0 6
42053: PUSH
42054: LD_VAR 0 6
42058: PUSH
42059: LD_VAR 0 3
42063: DIFF
42064: ST_TO_ADDR
// continue ;
42065: GO 41951
// end ; if side in [ your_side , 9 ] then
42067: LD_VAR 0 8
42071: PUSH
42072: LD_OWVAR 2
42076: PUSH
42077: LD_INT 9
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: IN
42084: IFFALSE 42100
// SetUnitDisplayNumber ( i , timer ) ;
42086: LD_VAR 0 3
42090: PPUSH
42091: LD_VAR 0 7
42095: PPUSH
42096: CALL_OW 505
// end ;
42100: GO 41951
42102: POP
42103: POP
// if not scaners then
42104: LD_VAR 0 6
42108: NOT
42109: IFFALSE 42113
// exit ;
42111: GO 42204
// timer := Dec ( timer ) ;
42113: LD_ADDR_VAR 0 7
42117: PUSH
42118: LD_VAR 0 7
42122: PPUSH
42123: CALL 81831 0 1
42127: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42128: LD_INT 35
42130: PPUSH
42131: CALL_OW 67
// until timer = 0 ;
42135: LD_VAR 0 7
42139: PUSH
42140: LD_INT 0
42142: EQUAL
42143: IFFALSE 41941
// if not scaners then
42145: LD_VAR 0 6
42149: NOT
42150: IFFALSE 42154
// exit ;
42152: GO 42204
// for i in scaners do
42154: LD_ADDR_VAR 0 3
42158: PUSH
42159: LD_VAR 0 6
42163: PUSH
42164: FOR_IN
42165: IFFALSE 42202
// begin SetUnitDisplayNumber ( i , 0 ) ;
42167: LD_VAR 0 3
42171: PPUSH
42172: LD_INT 0
42174: PPUSH
42175: CALL_OW 505
// SetTag ( i , 0 ) ;
42179: LD_VAR 0 3
42183: PPUSH
42184: LD_INT 0
42186: PPUSH
42187: CALL_OW 109
// RevealDetectorMine ( i ) ;
42191: LD_VAR 0 3
42195: PPUSH
42196: CALL 41424 0 1
// end ;
42200: GO 42164
42202: POP
42203: POP
// end ;
42204: LD_VAR 0 2
42208: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
42209: LD_INT 0
42211: PPUSH
// if p1 = mine_detector_mode then
42212: LD_VAR 0 2
42216: PUSH
42217: LD_INT 103
42219: EQUAL
42220: IFFALSE 42231
// DetectMine ( units ) ;
42222: LD_VAR 0 1
42226: PPUSH
42227: CALL 41722 0 1
// end ; end_of_file
42231: LD_VAR 0 7
42235: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42236: LD_INT 0
42238: PPUSH
42239: PPUSH
// if exist_mode then
42240: LD_VAR 0 2
42244: IFFALSE 42290
// begin unit := CreateCharacter ( prefix & ident ) ;
42246: LD_ADDR_VAR 0 5
42250: PUSH
42251: LD_VAR 0 3
42255: PUSH
42256: LD_VAR 0 1
42260: STR
42261: PPUSH
42262: CALL_OW 34
42266: ST_TO_ADDR
// if unit then
42267: LD_VAR 0 5
42271: IFFALSE 42288
// DeleteCharacters ( prefix & ident ) ;
42273: LD_VAR 0 3
42277: PUSH
42278: LD_VAR 0 1
42282: STR
42283: PPUSH
42284: CALL_OW 40
// end else
42288: GO 42305
// unit := NewCharacter ( ident ) ;
42290: LD_ADDR_VAR 0 5
42294: PUSH
42295: LD_VAR 0 1
42299: PPUSH
42300: CALL_OW 25
42304: ST_TO_ADDR
// result := unit ;
42305: LD_ADDR_VAR 0 4
42309: PUSH
42310: LD_VAR 0 5
42314: ST_TO_ADDR
// end ;
42315: LD_VAR 0 4
42319: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42320: LD_INT 0
42322: PPUSH
42323: PPUSH
// if exist_mode then
42324: LD_VAR 0 2
42328: IFFALSE 42353
// unit := CreateCharacter ( prefix & ident ) else
42330: LD_ADDR_VAR 0 5
42334: PUSH
42335: LD_VAR 0 3
42339: PUSH
42340: LD_VAR 0 1
42344: STR
42345: PPUSH
42346: CALL_OW 34
42350: ST_TO_ADDR
42351: GO 42368
// unit := NewCharacter ( ident ) ;
42353: LD_ADDR_VAR 0 5
42357: PUSH
42358: LD_VAR 0 1
42362: PPUSH
42363: CALL_OW 25
42367: ST_TO_ADDR
// result := unit ;
42368: LD_ADDR_VAR 0 4
42372: PUSH
42373: LD_VAR 0 5
42377: ST_TO_ADDR
// end ;
42378: LD_VAR 0 4
42382: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42383: LD_INT 0
42385: PPUSH
42386: PPUSH
// if not side or not nation then
42387: LD_VAR 0 1
42391: NOT
42392: IFTRUE 42401
42394: PUSH
42395: LD_VAR 0 2
42399: NOT
42400: OR
42401: IFFALSE 42405
// exit ;
42403: GO 43199
// case nation of nation_american :
42405: LD_VAR 0 2
42409: PUSH
42410: LD_INT 1
42412: DOUBLE
42413: EQUAL
42414: IFTRUE 42418
42416: GO 42640
42418: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42419: LD_ADDR_VAR 0 4
42423: PUSH
42424: LD_INT 35
42426: PUSH
42427: LD_INT 45
42429: PUSH
42430: LD_INT 46
42432: PUSH
42433: LD_INT 47
42435: PUSH
42436: LD_INT 82
42438: PUSH
42439: LD_INT 83
42441: PUSH
42442: LD_INT 84
42444: PUSH
42445: LD_INT 85
42447: PUSH
42448: LD_INT 86
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 6
42459: PUSH
42460: LD_INT 15
42462: PUSH
42463: LD_INT 16
42465: PUSH
42466: LD_INT 7
42468: PUSH
42469: LD_INT 12
42471: PUSH
42472: LD_INT 13
42474: PUSH
42475: LD_INT 10
42477: PUSH
42478: LD_INT 14
42480: PUSH
42481: LD_INT 20
42483: PUSH
42484: LD_INT 21
42486: PUSH
42487: LD_INT 22
42489: PUSH
42490: LD_INT 25
42492: PUSH
42493: LD_INT 32
42495: PUSH
42496: LD_INT 27
42498: PUSH
42499: LD_INT 36
42501: PUSH
42502: LD_INT 69
42504: PUSH
42505: LD_INT 39
42507: PUSH
42508: LD_INT 34
42510: PUSH
42511: LD_INT 40
42513: PUSH
42514: LD_INT 48
42516: PUSH
42517: LD_INT 49
42519: PUSH
42520: LD_INT 50
42522: PUSH
42523: LD_INT 51
42525: PUSH
42526: LD_INT 52
42528: PUSH
42529: LD_INT 53
42531: PUSH
42532: LD_INT 54
42534: PUSH
42535: LD_INT 55
42537: PUSH
42538: LD_INT 56
42540: PUSH
42541: LD_INT 57
42543: PUSH
42544: LD_INT 58
42546: PUSH
42547: LD_INT 59
42549: PUSH
42550: LD_INT 60
42552: PUSH
42553: LD_INT 61
42555: PUSH
42556: LD_INT 62
42558: PUSH
42559: LD_INT 80
42561: PUSH
42562: LD_INT 82
42564: PUSH
42565: LD_INT 83
42567: PUSH
42568: LD_INT 84
42570: PUSH
42571: LD_INT 85
42573: PUSH
42574: LD_INT 86
42576: PUSH
42577: LD_INT 90
42579: PUSH
42580: LD_INT 93
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: ST_TO_ADDR
42638: GO 43121
42640: LD_INT 2
42642: DOUBLE
42643: EQUAL
42644: IFTRUE 42648
42646: GO 42882
42648: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
42649: LD_ADDR_VAR 0 4
42653: PUSH
42654: LD_INT 35
42656: PUSH
42657: LD_INT 45
42659: PUSH
42660: LD_INT 46
42662: PUSH
42663: LD_INT 47
42665: PUSH
42666: LD_INT 82
42668: PUSH
42669: LD_INT 83
42671: PUSH
42672: LD_INT 84
42674: PUSH
42675: LD_INT 85
42677: PUSH
42678: LD_INT 87
42680: PUSH
42681: LD_INT 70
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 11
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 4
42695: PUSH
42696: LD_INT 5
42698: PUSH
42699: LD_INT 6
42701: PUSH
42702: LD_INT 15
42704: PUSH
42705: LD_INT 18
42707: PUSH
42708: LD_INT 7
42710: PUSH
42711: LD_INT 17
42713: PUSH
42714: LD_INT 8
42716: PUSH
42717: LD_INT 20
42719: PUSH
42720: LD_INT 21
42722: PUSH
42723: LD_INT 22
42725: PUSH
42726: LD_INT 72
42728: PUSH
42729: LD_INT 26
42731: PUSH
42732: LD_INT 69
42734: PUSH
42735: LD_INT 39
42737: PUSH
42738: LD_INT 40
42740: PUSH
42741: LD_INT 41
42743: PUSH
42744: LD_INT 42
42746: PUSH
42747: LD_INT 43
42749: PUSH
42750: LD_INT 48
42752: PUSH
42753: LD_INT 49
42755: PUSH
42756: LD_INT 50
42758: PUSH
42759: LD_INT 51
42761: PUSH
42762: LD_INT 52
42764: PUSH
42765: LD_INT 53
42767: PUSH
42768: LD_INT 54
42770: PUSH
42771: LD_INT 55
42773: PUSH
42774: LD_INT 56
42776: PUSH
42777: LD_INT 60
42779: PUSH
42780: LD_INT 61
42782: PUSH
42783: LD_INT 62
42785: PUSH
42786: LD_INT 66
42788: PUSH
42789: LD_INT 67
42791: PUSH
42792: LD_INT 68
42794: PUSH
42795: LD_INT 81
42797: PUSH
42798: LD_INT 82
42800: PUSH
42801: LD_INT 83
42803: PUSH
42804: LD_INT 84
42806: PUSH
42807: LD_INT 85
42809: PUSH
42810: LD_INT 87
42812: PUSH
42813: LD_INT 88
42815: PUSH
42816: LD_INT 92
42818: PUSH
42819: LD_INT 94
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: ST_TO_ADDR
42880: GO 43121
42882: LD_INT 3
42884: DOUBLE
42885: EQUAL
42886: IFTRUE 42890
42888: GO 43120
42890: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
42891: LD_ADDR_VAR 0 4
42895: PUSH
42896: LD_INT 46
42898: PUSH
42899: LD_INT 47
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 82
42910: PUSH
42911: LD_INT 83
42913: PUSH
42914: LD_INT 84
42916: PUSH
42917: LD_INT 85
42919: PUSH
42920: LD_INT 86
42922: PUSH
42923: LD_INT 11
42925: PUSH
42926: LD_INT 9
42928: PUSH
42929: LD_INT 20
42931: PUSH
42932: LD_INT 19
42934: PUSH
42935: LD_INT 21
42937: PUSH
42938: LD_INT 24
42940: PUSH
42941: LD_INT 22
42943: PUSH
42944: LD_INT 25
42946: PUSH
42947: LD_INT 28
42949: PUSH
42950: LD_INT 29
42952: PUSH
42953: LD_INT 30
42955: PUSH
42956: LD_INT 31
42958: PUSH
42959: LD_INT 37
42961: PUSH
42962: LD_INT 38
42964: PUSH
42965: LD_INT 32
42967: PUSH
42968: LD_INT 27
42970: PUSH
42971: LD_INT 33
42973: PUSH
42974: LD_INT 69
42976: PUSH
42977: LD_INT 39
42979: PUSH
42980: LD_INT 34
42982: PUSH
42983: LD_INT 40
42985: PUSH
42986: LD_INT 71
42988: PUSH
42989: LD_INT 23
42991: PUSH
42992: LD_INT 44
42994: PUSH
42995: LD_INT 48
42997: PUSH
42998: LD_INT 49
43000: PUSH
43001: LD_INT 50
43003: PUSH
43004: LD_INT 51
43006: PUSH
43007: LD_INT 52
43009: PUSH
43010: LD_INT 53
43012: PUSH
43013: LD_INT 54
43015: PUSH
43016: LD_INT 55
43018: PUSH
43019: LD_INT 56
43021: PUSH
43022: LD_INT 57
43024: PUSH
43025: LD_INT 58
43027: PUSH
43028: LD_INT 59
43030: PUSH
43031: LD_INT 63
43033: PUSH
43034: LD_INT 64
43036: PUSH
43037: LD_INT 65
43039: PUSH
43040: LD_INT 82
43042: PUSH
43043: LD_INT 83
43045: PUSH
43046: LD_INT 84
43048: PUSH
43049: LD_INT 85
43051: PUSH
43052: LD_INT 86
43054: PUSH
43055: LD_INT 89
43057: PUSH
43058: LD_INT 91
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
43118: GO 43121
43120: POP
// if state > - 1 and state < 3 then
43121: LD_VAR 0 3
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: GREATER
43130: IFFALSE 43142
43132: PUSH
43133: LD_VAR 0 3
43137: PUSH
43138: LD_INT 3
43140: LESS
43141: AND
43142: IFFALSE 43199
// for i in result do
43144: LD_ADDR_VAR 0 5
43148: PUSH
43149: LD_VAR 0 4
43153: PUSH
43154: FOR_IN
43155: IFFALSE 43197
// if GetTech ( i , side ) <> state then
43157: LD_VAR 0 5
43161: PPUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 321
43171: PUSH
43172: LD_VAR 0 3
43176: NONEQUAL
43177: IFFALSE 43195
// result := result diff i ;
43179: LD_ADDR_VAR 0 4
43183: PUSH
43184: LD_VAR 0 4
43188: PUSH
43189: LD_VAR 0 5
43193: DIFF
43194: ST_TO_ADDR
43195: GO 43154
43197: POP
43198: POP
// end ;
43199: LD_VAR 0 4
43203: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43204: LD_INT 0
43206: PPUSH
43207: PPUSH
43208: PPUSH
// result := true ;
43209: LD_ADDR_VAR 0 3
43213: PUSH
43214: LD_INT 1
43216: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43217: LD_ADDR_VAR 0 5
43221: PUSH
43222: LD_VAR 0 2
43226: PPUSH
43227: CALL_OW 480
43231: ST_TO_ADDR
// if not tmp then
43232: LD_VAR 0 5
43236: NOT
43237: IFFALSE 43241
// exit ;
43239: GO 43290
// for i in tmp do
43241: LD_ADDR_VAR 0 4
43245: PUSH
43246: LD_VAR 0 5
43250: PUSH
43251: FOR_IN
43252: IFFALSE 43288
// if GetTech ( i , side ) <> state_researched then
43254: LD_VAR 0 4
43258: PPUSH
43259: LD_VAR 0 1
43263: PPUSH
43264: CALL_OW 321
43268: PUSH
43269: LD_INT 2
43271: NONEQUAL
43272: IFFALSE 43286
// begin result := false ;
43274: LD_ADDR_VAR 0 3
43278: PUSH
43279: LD_INT 0
43281: ST_TO_ADDR
// exit ;
43282: POP
43283: POP
43284: GO 43290
// end ;
43286: GO 43251
43288: POP
43289: POP
// end ;
43290: LD_VAR 0 3
43294: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43295: LD_INT 0
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43310: LD_VAR 0 1
43314: NOT
43315: IFTRUE 43332
43317: PUSH
43318: LD_VAR 0 1
43322: PPUSH
43323: CALL_OW 257
43327: PUSH
43328: LD_INT 9
43330: NONEQUAL
43331: OR
43332: IFFALSE 43336
// exit ;
43334: GO 43915
// side := GetSide ( unit ) ;
43336: LD_ADDR_VAR 0 9
43340: PUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL_OW 255
43350: ST_TO_ADDR
// tech_space := tech_spacanom ;
43351: LD_ADDR_VAR 0 12
43355: PUSH
43356: LD_INT 29
43358: ST_TO_ADDR
// tech_time := tech_taurad ;
43359: LD_ADDR_VAR 0 13
43363: PUSH
43364: LD_INT 28
43366: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43367: LD_ADDR_VAR 0 11
43371: PUSH
43372: LD_VAR 0 1
43376: PPUSH
43377: CALL_OW 310
43381: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43382: LD_VAR 0 11
43386: PPUSH
43387: CALL_OW 247
43391: PUSH
43392: LD_INT 2
43394: EQUAL
43395: IFFALSE 43399
// exit ;
43397: GO 43915
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43399: LD_ADDR_VAR 0 8
43403: PUSH
43404: LD_INT 81
43406: PUSH
43407: LD_VAR 0 9
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: LD_INT 21
43421: PUSH
43422: LD_INT 3
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PPUSH
43437: CALL_OW 69
43441: ST_TO_ADDR
// if not tmp then
43442: LD_VAR 0 8
43446: NOT
43447: IFFALSE 43451
// exit ;
43449: GO 43915
// if in_unit then
43451: LD_VAR 0 11
43455: IFFALSE 43479
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43457: LD_ADDR_VAR 0 10
43461: PUSH
43462: LD_VAR 0 8
43466: PPUSH
43467: LD_VAR 0 11
43471: PPUSH
43472: CALL_OW 74
43476: ST_TO_ADDR
43477: GO 43499
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43479: LD_ADDR_VAR 0 10
43483: PUSH
43484: LD_VAR 0 8
43488: PPUSH
43489: LD_VAR 0 1
43493: PPUSH
43494: CALL_OW 74
43498: ST_TO_ADDR
// if not enemy then
43499: LD_VAR 0 10
43503: NOT
43504: IFFALSE 43508
// exit ;
43506: GO 43915
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43508: LD_VAR 0 11
43512: IFFALSE 43534
43514: PUSH
43515: LD_VAR 0 11
43519: PPUSH
43520: LD_VAR 0 10
43524: PPUSH
43525: CALL_OW 296
43529: PUSH
43530: LD_INT 13
43532: GREATER
43533: AND
43534: IFTRUE 43556
43536: PUSH
43537: LD_VAR 0 1
43541: PPUSH
43542: LD_VAR 0 10
43546: PPUSH
43547: CALL_OW 296
43551: PUSH
43552: LD_INT 12
43554: GREATER
43555: OR
43556: IFFALSE 43560
// exit ;
43558: GO 43915
// missile := [ 1 ] ;
43560: LD_ADDR_VAR 0 14
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43571: LD_VAR 0 9
43575: PPUSH
43576: LD_VAR 0 12
43580: PPUSH
43581: CALL_OW 325
43585: IFFALSE 43614
// missile := Replace ( missile , missile + 1 , 2 ) ;
43587: LD_ADDR_VAR 0 14
43591: PUSH
43592: LD_VAR 0 14
43596: PPUSH
43597: LD_VAR 0 14
43601: PUSH
43602: LD_INT 1
43604: PLUS
43605: PPUSH
43606: LD_INT 2
43608: PPUSH
43609: CALL_OW 1
43613: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43614: LD_VAR 0 9
43618: PPUSH
43619: LD_VAR 0 13
43623: PPUSH
43624: CALL_OW 325
43628: IFFALSE 43652
43630: PUSH
43631: LD_VAR 0 10
43635: PPUSH
43636: CALL_OW 255
43640: PPUSH
43641: LD_VAR 0 13
43645: PPUSH
43646: CALL_OW 325
43650: NOT
43651: AND
43652: IFFALSE 43681
// missile := Replace ( missile , missile + 1 , 3 ) ;
43654: LD_ADDR_VAR 0 14
43658: PUSH
43659: LD_VAR 0 14
43663: PPUSH
43664: LD_VAR 0 14
43668: PUSH
43669: LD_INT 1
43671: PLUS
43672: PPUSH
43673: LD_INT 3
43675: PPUSH
43676: CALL_OW 1
43680: ST_TO_ADDR
// if missile < 2 then
43681: LD_VAR 0 14
43685: PUSH
43686: LD_INT 2
43688: LESS
43689: IFFALSE 43693
// exit ;
43691: GO 43915
// x := GetX ( enemy ) ;
43693: LD_ADDR_VAR 0 4
43697: PUSH
43698: LD_VAR 0 10
43702: PPUSH
43703: CALL_OW 250
43707: ST_TO_ADDR
// y := GetY ( enemy ) ;
43708: LD_ADDR_VAR 0 5
43712: PUSH
43713: LD_VAR 0 10
43717: PPUSH
43718: CALL_OW 251
43722: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43723: LD_ADDR_VAR 0 6
43727: PUSH
43728: LD_VAR 0 4
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PPUSH
43737: LD_INT 1
43739: PPUSH
43740: CALL_OW 12
43744: PLUS
43745: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43746: LD_ADDR_VAR 0 7
43750: PUSH
43751: LD_VAR 0 5
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PPUSH
43760: LD_INT 1
43762: PPUSH
43763: CALL_OW 12
43767: PLUS
43768: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43769: LD_VAR 0 6
43773: PPUSH
43774: LD_VAR 0 7
43778: PPUSH
43779: CALL_OW 488
43783: NOT
43784: IFFALSE 43806
// begin _x := x ;
43786: LD_ADDR_VAR 0 6
43790: PUSH
43791: LD_VAR 0 4
43795: ST_TO_ADDR
// _y := y ;
43796: LD_ADDR_VAR 0 7
43800: PUSH
43801: LD_VAR 0 5
43805: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43806: LD_ADDR_VAR 0 3
43810: PUSH
43811: LD_INT 1
43813: PPUSH
43814: LD_VAR 0 14
43818: PPUSH
43819: CALL_OW 12
43823: ST_TO_ADDR
// case i of 1 :
43824: LD_VAR 0 3
43828: PUSH
43829: LD_INT 1
43831: DOUBLE
43832: EQUAL
43833: IFTRUE 43837
43835: GO 43854
43837: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43838: LD_VAR 0 1
43842: PPUSH
43843: LD_VAR 0 10
43847: PPUSH
43848: CALL_OW 115
43852: GO 43915
43854: LD_INT 2
43856: DOUBLE
43857: EQUAL
43858: IFTRUE 43862
43860: GO 43884
43862: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43863: LD_VAR 0 1
43867: PPUSH
43868: LD_VAR 0 6
43872: PPUSH
43873: LD_VAR 0 7
43877: PPUSH
43878: CALL_OW 153
43882: GO 43915
43884: LD_INT 3
43886: DOUBLE
43887: EQUAL
43888: IFTRUE 43892
43890: GO 43914
43892: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43893: LD_VAR 0 1
43897: PPUSH
43898: LD_VAR 0 6
43902: PPUSH
43903: LD_VAR 0 7
43907: PPUSH
43908: CALL_OW 154
43912: GO 43915
43914: POP
// end ;
43915: LD_VAR 0 2
43919: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43920: LD_INT 0
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
// if not unit or not building then
43928: LD_VAR 0 1
43932: NOT
43933: IFTRUE 43942
43935: PUSH
43936: LD_VAR 0 2
43940: NOT
43941: OR
43942: IFFALSE 43946
// exit ;
43944: GO 44104
// x := GetX ( building ) ;
43946: LD_ADDR_VAR 0 5
43950: PUSH
43951: LD_VAR 0 2
43955: PPUSH
43956: CALL_OW 250
43960: ST_TO_ADDR
// y := GetY ( building ) ;
43961: LD_ADDR_VAR 0 6
43965: PUSH
43966: LD_VAR 0 2
43970: PPUSH
43971: CALL_OW 251
43975: ST_TO_ADDR
// for i := 0 to 5 do
43976: LD_ADDR_VAR 0 4
43980: PUSH
43981: DOUBLE
43982: LD_INT 0
43984: DEC
43985: ST_TO_ADDR
43986: LD_INT 5
43988: PUSH
43989: FOR_TO
43990: IFFALSE 44102
// begin _x := ShiftX ( x , i , 3 ) ;
43992: LD_ADDR_VAR 0 7
43996: PUSH
43997: LD_VAR 0 5
44001: PPUSH
44002: LD_VAR 0 4
44006: PPUSH
44007: LD_INT 3
44009: PPUSH
44010: CALL_OW 272
44014: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44015: LD_ADDR_VAR 0 8
44019: PUSH
44020: LD_VAR 0 6
44024: PPUSH
44025: LD_VAR 0 4
44029: PPUSH
44030: LD_INT 3
44032: PPUSH
44033: CALL_OW 273
44037: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44038: LD_VAR 0 7
44042: PPUSH
44043: LD_VAR 0 8
44047: PPUSH
44048: CALL_OW 488
44052: NOT
44053: IFFALSE 44057
// continue ;
44055: GO 43989
// if HexInfo ( _x , _y ) = 0 then
44057: LD_VAR 0 7
44061: PPUSH
44062: LD_VAR 0 8
44066: PPUSH
44067: CALL_OW 428
44071: PUSH
44072: LD_INT 0
44074: EQUAL
44075: IFFALSE 44100
// begin ComMoveXY ( unit , _x , _y ) ;
44077: LD_VAR 0 1
44081: PPUSH
44082: LD_VAR 0 7
44086: PPUSH
44087: LD_VAR 0 8
44091: PPUSH
44092: CALL_OW 111
// exit ;
44096: POP
44097: POP
44098: GO 44104
// end ; end ;
44100: GO 43989
44102: POP
44103: POP
// end ;
44104: LD_VAR 0 3
44108: RET
// export function ScanBase ( side , base_area ) ; begin
44109: LD_INT 0
44111: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44112: LD_ADDR_VAR 0 3
44116: PUSH
44117: LD_VAR 0 2
44121: PPUSH
44122: LD_INT 81
44124: PUSH
44125: LD_VAR 0 1
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PPUSH
44134: CALL_OW 70
44138: ST_TO_ADDR
// end ;
44139: LD_VAR 0 3
44143: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44144: LD_INT 0
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
// result := false ;
44150: LD_ADDR_VAR 0 2
44154: PUSH
44155: LD_INT 0
44157: ST_TO_ADDR
// side := GetSide ( unit ) ;
44158: LD_ADDR_VAR 0 3
44162: PUSH
44163: LD_VAR 0 1
44167: PPUSH
44168: CALL_OW 255
44172: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44173: LD_ADDR_VAR 0 4
44177: PUSH
44178: LD_VAR 0 1
44182: PPUSH
44183: CALL_OW 248
44187: ST_TO_ADDR
// case nat of 1 :
44188: LD_VAR 0 4
44192: PUSH
44193: LD_INT 1
44195: DOUBLE
44196: EQUAL
44197: IFTRUE 44201
44199: GO 44212
44201: POP
// tech := tech_lassight ; 2 :
44202: LD_ADDR_VAR 0 5
44206: PUSH
44207: LD_INT 12
44209: ST_TO_ADDR
44210: GO 44251
44212: LD_INT 2
44214: DOUBLE
44215: EQUAL
44216: IFTRUE 44220
44218: GO 44231
44220: POP
// tech := tech_mortar ; 3 :
44221: LD_ADDR_VAR 0 5
44225: PUSH
44226: LD_INT 41
44228: ST_TO_ADDR
44229: GO 44251
44231: LD_INT 3
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44239
44237: GO 44250
44239: POP
// tech := tech_bazooka ; end ;
44240: LD_ADDR_VAR 0 5
44244: PUSH
44245: LD_INT 44
44247: ST_TO_ADDR
44248: GO 44251
44250: POP
// if Researched ( side , tech ) then
44251: LD_VAR 0 3
44255: PPUSH
44256: LD_VAR 0 5
44260: PPUSH
44261: CALL_OW 325
44265: IFFALSE 44292
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44267: LD_ADDR_VAR 0 2
44271: PUSH
44272: LD_INT 5
44274: PUSH
44275: LD_INT 8
44277: PUSH
44278: LD_INT 9
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: PUSH
44286: LD_VAR 0 4
44290: ARRAY
44291: ST_TO_ADDR
// end ;
44292: LD_VAR 0 2
44296: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44297: LD_INT 0
44299: PPUSH
44300: PPUSH
44301: PPUSH
// if not mines then
44302: LD_VAR 0 2
44306: NOT
44307: IFFALSE 44311
// exit ;
44309: GO 44455
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44311: LD_ADDR_VAR 0 5
44315: PUSH
44316: LD_INT 81
44318: PUSH
44319: LD_VAR 0 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: LD_INT 21
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PPUSH
44349: CALL_OW 69
44353: ST_TO_ADDR
// for i in mines do
44354: LD_ADDR_VAR 0 4
44358: PUSH
44359: LD_VAR 0 2
44363: PUSH
44364: FOR_IN
44365: IFFALSE 44453
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44367: LD_VAR 0 4
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: PPUSH
44376: LD_VAR 0 4
44380: PUSH
44381: LD_INT 2
44383: ARRAY
44384: PPUSH
44385: CALL_OW 458
44389: NOT
44390: IFFALSE 44394
// continue ;
44392: GO 44364
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44394: LD_VAR 0 4
44398: PUSH
44399: LD_INT 1
44401: ARRAY
44402: PPUSH
44403: LD_VAR 0 4
44407: PUSH
44408: LD_INT 2
44410: ARRAY
44411: PPUSH
44412: CALL_OW 428
44416: PUSH
44417: LD_VAR 0 5
44421: IN
44422: IFFALSE 44451
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44424: LD_VAR 0 4
44428: PUSH
44429: LD_INT 1
44431: ARRAY
44432: PPUSH
44433: LD_VAR 0 4
44437: PUSH
44438: LD_INT 2
44440: ARRAY
44441: PPUSH
44442: LD_VAR 0 1
44446: PPUSH
44447: CALL_OW 456
// end ;
44451: GO 44364
44453: POP
44454: POP
// end ;
44455: LD_VAR 0 3
44459: RET
// export function Count ( array ) ; begin
44460: LD_INT 0
44462: PPUSH
// result := array + 0 ;
44463: LD_ADDR_VAR 0 2
44467: PUSH
44468: LD_VAR 0 1
44472: PUSH
44473: LD_INT 0
44475: PLUS
44476: ST_TO_ADDR
// end ;
44477: LD_VAR 0 2
44481: RET
// export function IsEmpty ( building ) ; begin
44482: LD_INT 0
44484: PPUSH
// if not building then
44485: LD_VAR 0 1
44489: NOT
44490: IFFALSE 44494
// exit ;
44492: GO 44537
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44494: LD_ADDR_VAR 0 2
44498: PUSH
44499: LD_VAR 0 1
44503: PUSH
44504: LD_INT 22
44506: PUSH
44507: LD_VAR 0 1
44511: PPUSH
44512: CALL_OW 255
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 58
44523: PUSH
44524: EMPTY
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PPUSH
44531: CALL_OW 69
44535: IN
44536: ST_TO_ADDR
// end ;
44537: LD_VAR 0 2
44541: RET
// export function IsNotFull ( building ) ; var places ; begin
44542: LD_INT 0
44544: PPUSH
44545: PPUSH
// if not building then
44546: LD_VAR 0 1
44550: NOT
44551: IFFALSE 44555
// exit ;
44553: GO 44583
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: LD_INT 3
44567: PUSH
44568: LD_INT 62
44570: PUSH
44571: EMPTY
44572: LIST
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PPUSH
44578: CALL_OW 72
44582: ST_TO_ADDR
// end ;
44583: LD_VAR 0 2
44587: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44588: LD_INT 0
44590: PPUSH
44591: PPUSH
44592: PPUSH
44593: PPUSH
// tmp := [ ] ;
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: EMPTY
44600: ST_TO_ADDR
// list := [ ] ;
44601: LD_ADDR_VAR 0 5
44605: PUSH
44606: EMPTY
44607: ST_TO_ADDR
// for i = 16 to 25 do
44608: LD_ADDR_VAR 0 4
44612: PUSH
44613: DOUBLE
44614: LD_INT 16
44616: DEC
44617: ST_TO_ADDR
44618: LD_INT 25
44620: PUSH
44621: FOR_TO
44622: IFFALSE 44695
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44624: LD_ADDR_VAR 0 3
44628: PUSH
44629: LD_VAR 0 3
44633: PUSH
44634: LD_INT 22
44636: PUSH
44637: LD_VAR 0 1
44641: PPUSH
44642: CALL_OW 255
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 91
44653: PUSH
44654: LD_VAR 0 1
44658: PUSH
44659: LD_INT 6
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 30
44669: PUSH
44670: LD_VAR 0 4
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: PPUSH
44687: CALL_OW 69
44691: ADD
44692: ST_TO_ADDR
44693: GO 44621
44695: POP
44696: POP
// for i = 1 to tmp do
44697: LD_ADDR_VAR 0 4
44701: PUSH
44702: DOUBLE
44703: LD_INT 1
44705: DEC
44706: ST_TO_ADDR
44707: LD_VAR 0 3
44711: PUSH
44712: FOR_TO
44713: IFFALSE 44801
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44715: LD_ADDR_VAR 0 5
44719: PUSH
44720: LD_VAR 0 5
44724: PUSH
44725: LD_VAR 0 3
44729: PUSH
44730: LD_VAR 0 4
44734: ARRAY
44735: PPUSH
44736: CALL_OW 266
44740: PUSH
44741: LD_VAR 0 3
44745: PUSH
44746: LD_VAR 0 4
44750: ARRAY
44751: PPUSH
44752: CALL_OW 250
44756: PUSH
44757: LD_VAR 0 3
44761: PUSH
44762: LD_VAR 0 4
44766: ARRAY
44767: PPUSH
44768: CALL_OW 251
44772: PUSH
44773: LD_VAR 0 3
44777: PUSH
44778: LD_VAR 0 4
44782: ARRAY
44783: PPUSH
44784: CALL_OW 254
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: ADD
44798: ST_TO_ADDR
44799: GO 44712
44801: POP
44802: POP
// result := list ;
44803: LD_ADDR_VAR 0 2
44807: PUSH
44808: LD_VAR 0 5
44812: ST_TO_ADDR
// end ;
44813: LD_VAR 0 2
44817: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44818: LD_INT 0
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
// if not factory then
44827: LD_VAR 0 1
44831: NOT
44832: IFFALSE 44836
// exit ;
44834: GO 45439
// if control = control_apeman then
44836: LD_VAR 0 4
44840: PUSH
44841: LD_INT 5
44843: EQUAL
44844: IFFALSE 44953
// begin tmp := UnitsInside ( factory ) ;
44846: LD_ADDR_VAR 0 8
44850: PUSH
44851: LD_VAR 0 1
44855: PPUSH
44856: CALL_OW 313
44860: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44861: LD_VAR 0 8
44865: PPUSH
44866: LD_INT 25
44868: PUSH
44869: LD_INT 12
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PPUSH
44876: CALL_OW 72
44880: NOT
44881: IFFALSE 44891
// control := control_manual ;
44883: LD_ADDR_VAR 0 4
44887: PUSH
44888: LD_INT 1
44890: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44891: LD_ADDR_VAR 0 8
44895: PUSH
44896: LD_VAR 0 1
44900: PPUSH
44901: CALL 44588 0 1
44905: ST_TO_ADDR
// if tmp then
44906: LD_VAR 0 8
44910: IFFALSE 44953
// begin for i in tmp do
44912: LD_ADDR_VAR 0 7
44916: PUSH
44917: LD_VAR 0 8
44921: PUSH
44922: FOR_IN
44923: IFFALSE 44951
// if i [ 1 ] = b_ext_radio then
44925: LD_VAR 0 7
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: PUSH
44934: LD_INT 22
44936: EQUAL
44937: IFFALSE 44949
// begin control := control_remote ;
44939: LD_ADDR_VAR 0 4
44943: PUSH
44944: LD_INT 2
44946: ST_TO_ADDR
// break ;
44947: GO 44951
// end ;
44949: GO 44922
44951: POP
44952: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44953: LD_VAR 0 1
44957: PPUSH
44958: LD_VAR 0 2
44962: PPUSH
44963: LD_VAR 0 3
44967: PPUSH
44968: LD_VAR 0 4
44972: PPUSH
44973: LD_VAR 0 5
44977: PPUSH
44978: CALL_OW 448
44982: IFFALSE 45017
// begin result := [ chassis , engine , control , weapon ] ;
44984: LD_ADDR_VAR 0 6
44988: PUSH
44989: LD_VAR 0 2
44993: PUSH
44994: LD_VAR 0 3
44998: PUSH
44999: LD_VAR 0 4
45003: PUSH
45004: LD_VAR 0 5
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// exit ;
45015: GO 45439
// end ; _chassis := AvailableChassisList ( factory ) ;
45017: LD_ADDR_VAR 0 9
45021: PUSH
45022: LD_VAR 0 1
45026: PPUSH
45027: CALL_OW 475
45031: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45032: LD_ADDR_VAR 0 11
45036: PUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 476
45046: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45047: LD_ADDR_VAR 0 12
45051: PUSH
45052: LD_VAR 0 1
45056: PPUSH
45057: CALL_OW 477
45061: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45062: LD_ADDR_VAR 0 10
45066: PUSH
45067: LD_VAR 0 1
45071: PPUSH
45072: CALL_OW 478
45076: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45077: LD_VAR 0 9
45081: NOT
45082: IFTRUE 45091
45084: PUSH
45085: LD_VAR 0 11
45089: NOT
45090: OR
45091: IFTRUE 45100
45093: PUSH
45094: LD_VAR 0 12
45098: NOT
45099: OR
45100: IFTRUE 45109
45102: PUSH
45103: LD_VAR 0 10
45107: NOT
45108: OR
45109: IFFALSE 45144
// begin result := [ chassis , engine , control , weapon ] ;
45111: LD_ADDR_VAR 0 6
45115: PUSH
45116: LD_VAR 0 2
45120: PUSH
45121: LD_VAR 0 3
45125: PUSH
45126: LD_VAR 0 4
45130: PUSH
45131: LD_VAR 0 5
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: ST_TO_ADDR
// exit ;
45142: GO 45439
// end ; if not chassis in _chassis then
45144: LD_VAR 0 2
45148: PUSH
45149: LD_VAR 0 9
45153: IN
45154: NOT
45155: IFFALSE 45181
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45157: LD_ADDR_VAR 0 2
45161: PUSH
45162: LD_VAR 0 9
45166: PUSH
45167: LD_INT 1
45169: PPUSH
45170: LD_VAR 0 9
45174: PPUSH
45175: CALL_OW 12
45179: ARRAY
45180: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45181: LD_VAR 0 2
45185: PPUSH
45186: LD_VAR 0 3
45190: PPUSH
45191: CALL 45444 0 2
45195: NOT
45196: IFFALSE 45257
// repeat engine := _engine [ 1 ] ;
45198: LD_ADDR_VAR 0 3
45202: PUSH
45203: LD_VAR 0 11
45207: PUSH
45208: LD_INT 1
45210: ARRAY
45211: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45212: LD_ADDR_VAR 0 11
45216: PUSH
45217: LD_VAR 0 11
45221: PPUSH
45222: LD_INT 1
45224: PPUSH
45225: CALL_OW 3
45229: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45230: LD_VAR 0 2
45234: PPUSH
45235: LD_VAR 0 3
45239: PPUSH
45240: CALL 45444 0 2
45244: IFTRUE 45255
45246: PUSH
45247: LD_VAR 0 11
45251: PUSH
45252: EMPTY
45253: EQUAL
45254: OR
45255: IFFALSE 45198
// if not control in _control then
45257: LD_VAR 0 4
45261: PUSH
45262: LD_VAR 0 12
45266: IN
45267: NOT
45268: IFFALSE 45294
// control := _control [ rand ( 1 , _control ) ] ;
45270: LD_ADDR_VAR 0 4
45274: PUSH
45275: LD_VAR 0 12
45279: PUSH
45280: LD_INT 1
45282: PPUSH
45283: LD_VAR 0 12
45287: PPUSH
45288: CALL_OW 12
45292: ARRAY
45293: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45294: LD_VAR 0 2
45298: PPUSH
45299: LD_VAR 0 5
45303: PPUSH
45304: CALL 45666 0 2
45308: NOT
45309: IFFALSE 45370
// repeat weapon := _weapon [ 1 ] ;
45311: LD_ADDR_VAR 0 5
45315: PUSH
45316: LD_VAR 0 10
45320: PUSH
45321: LD_INT 1
45323: ARRAY
45324: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45325: LD_ADDR_VAR 0 10
45329: PUSH
45330: LD_VAR 0 10
45334: PPUSH
45335: LD_INT 1
45337: PPUSH
45338: CALL_OW 3
45342: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45343: LD_VAR 0 2
45347: PPUSH
45348: LD_VAR 0 5
45352: PPUSH
45353: CALL 45666 0 2
45357: IFTRUE 45368
45359: PUSH
45360: LD_VAR 0 10
45364: PUSH
45365: EMPTY
45366: EQUAL
45367: OR
45368: IFFALSE 45311
// result := [ ] ;
45370: LD_ADDR_VAR 0 6
45374: PUSH
45375: EMPTY
45376: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45377: LD_VAR 0 1
45381: PPUSH
45382: LD_VAR 0 2
45386: PPUSH
45387: LD_VAR 0 3
45391: PPUSH
45392: LD_VAR 0 4
45396: PPUSH
45397: LD_VAR 0 5
45401: PPUSH
45402: CALL_OW 448
45406: IFFALSE 45439
// result := [ chassis , engine , control , weapon ] ;
45408: LD_ADDR_VAR 0 6
45412: PUSH
45413: LD_VAR 0 2
45417: PUSH
45418: LD_VAR 0 3
45422: PUSH
45423: LD_VAR 0 4
45427: PUSH
45428: LD_VAR 0 5
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// end ;
45439: LD_VAR 0 6
45443: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45444: LD_INT 0
45446: PPUSH
// if not chassis or not engine then
45447: LD_VAR 0 1
45451: NOT
45452: IFTRUE 45461
45454: PUSH
45455: LD_VAR 0 2
45459: NOT
45460: OR
45461: IFFALSE 45465
// exit ;
45463: GO 45661
// case engine of engine_solar :
45465: LD_VAR 0 2
45469: PUSH
45470: LD_INT 2
45472: DOUBLE
45473: EQUAL
45474: IFTRUE 45478
45476: GO 45516
45478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45479: LD_ADDR_VAR 0 3
45483: PUSH
45484: LD_INT 11
45486: PUSH
45487: LD_INT 12
45489: PUSH
45490: LD_INT 13
45492: PUSH
45493: LD_INT 14
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 3
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: ST_TO_ADDR
45514: GO 45645
45516: LD_INT 1
45518: DOUBLE
45519: EQUAL
45520: IFTRUE 45524
45522: GO 45586
45524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45525: LD_ADDR_VAR 0 3
45529: PUSH
45530: LD_INT 11
45532: PUSH
45533: LD_INT 12
45535: PUSH
45536: LD_INT 13
45538: PUSH
45539: LD_INT 14
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: LD_INT 3
45550: PUSH
45551: LD_INT 4
45553: PUSH
45554: LD_INT 5
45556: PUSH
45557: LD_INT 21
45559: PUSH
45560: LD_INT 23
45562: PUSH
45563: LD_INT 22
45565: PUSH
45566: LD_INT 24
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: ST_TO_ADDR
45584: GO 45645
45586: LD_INT 3
45588: DOUBLE
45589: EQUAL
45590: IFTRUE 45594
45592: GO 45644
45594: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45595: LD_ADDR_VAR 0 3
45599: PUSH
45600: LD_INT 13
45602: PUSH
45603: LD_INT 14
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: LD_INT 4
45614: PUSH
45615: LD_INT 5
45617: PUSH
45618: LD_INT 21
45620: PUSH
45621: LD_INT 22
45623: PUSH
45624: LD_INT 23
45626: PUSH
45627: LD_INT 24
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
45642: GO 45645
45644: POP
// result := ( chassis in result ) ;
45645: LD_ADDR_VAR 0 3
45649: PUSH
45650: LD_VAR 0 1
45654: PUSH
45655: LD_VAR 0 3
45659: IN
45660: ST_TO_ADDR
// end ;
45661: LD_VAR 0 3
45665: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45666: LD_INT 0
45668: PPUSH
// if not chassis or not weapon then
45669: LD_VAR 0 1
45673: NOT
45674: IFTRUE 45683
45676: PUSH
45677: LD_VAR 0 2
45681: NOT
45682: OR
45683: IFFALSE 45687
// exit ;
45685: GO 46781
// case weapon of us_machine_gun :
45687: LD_VAR 0 2
45691: PUSH
45692: LD_INT 2
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45700
45698: GO 45730
45700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45701: LD_ADDR_VAR 0 3
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: LD_INT 3
45714: PUSH
45715: LD_INT 4
45717: PUSH
45718: LD_INT 5
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
45728: GO 46765
45730: LD_INT 3
45732: DOUBLE
45733: EQUAL
45734: IFTRUE 45738
45736: GO 45768
45738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45739: LD_ADDR_VAR 0 3
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: LD_INT 4
45755: PUSH
45756: LD_INT 5
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: ST_TO_ADDR
45766: GO 46765
45768: LD_INT 11
45770: DOUBLE
45771: EQUAL
45772: IFTRUE 45776
45774: GO 45806
45776: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45777: LD_ADDR_VAR 0 3
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: LD_INT 4
45793: PUSH
45794: LD_INT 5
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
45804: GO 46765
45806: LD_INT 4
45808: DOUBLE
45809: EQUAL
45810: IFTRUE 45814
45812: GO 45840
45814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 3
45825: PUSH
45826: LD_INT 4
45828: PUSH
45829: LD_INT 5
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: ST_TO_ADDR
45838: GO 46765
45840: LD_INT 5
45842: DOUBLE
45843: EQUAL
45844: IFTRUE 45848
45846: GO 45874
45848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45849: LD_ADDR_VAR 0 3
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: LD_INT 4
45862: PUSH
45863: LD_INT 5
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: ST_TO_ADDR
45872: GO 46765
45874: LD_INT 9
45876: DOUBLE
45877: EQUAL
45878: IFTRUE 45882
45880: GO 45908
45882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45883: LD_ADDR_VAR 0 3
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 3
45893: PUSH
45894: LD_INT 4
45896: PUSH
45897: LD_INT 5
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
45906: GO 46765
45908: LD_INT 7
45910: DOUBLE
45911: EQUAL
45912: IFTRUE 45916
45914: GO 45942
45916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45917: LD_ADDR_VAR 0 3
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 4
45930: PUSH
45931: LD_INT 5
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
45940: GO 46765
45942: LD_INT 12
45944: DOUBLE
45945: EQUAL
45946: IFTRUE 45950
45948: GO 45976
45950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45951: LD_ADDR_VAR 0 3
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: LD_INT 4
45964: PUSH
45965: LD_INT 5
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
45974: GO 46765
45976: LD_INT 13
45978: DOUBLE
45979: EQUAL
45980: IFTRUE 45984
45982: GO 46010
45984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45985: LD_ADDR_VAR 0 3
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 3
45995: PUSH
45996: LD_INT 4
45998: PUSH
45999: LD_INT 5
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
46008: GO 46765
46010: LD_INT 14
46012: DOUBLE
46013: EQUAL
46014: IFTRUE 46018
46016: GO 46036
46018: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46019: LD_ADDR_VAR 0 3
46023: PUSH
46024: LD_INT 4
46026: PUSH
46027: LD_INT 5
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: ST_TO_ADDR
46034: GO 46765
46036: LD_INT 6
46038: DOUBLE
46039: EQUAL
46040: IFTRUE 46044
46042: GO 46062
46044: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46045: LD_ADDR_VAR 0 3
46049: PUSH
46050: LD_INT 4
46052: PUSH
46053: LD_INT 5
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: ST_TO_ADDR
46060: GO 46765
46062: LD_INT 10
46064: DOUBLE
46065: EQUAL
46066: IFTRUE 46070
46068: GO 46088
46070: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46071: LD_ADDR_VAR 0 3
46075: PUSH
46076: LD_INT 4
46078: PUSH
46079: LD_INT 5
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: ST_TO_ADDR
46086: GO 46765
46088: LD_INT 22
46090: DOUBLE
46091: EQUAL
46092: IFTRUE 46096
46094: GO 46122
46096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46097: LD_ADDR_VAR 0 3
46101: PUSH
46102: LD_INT 11
46104: PUSH
46105: LD_INT 12
46107: PUSH
46108: LD_INT 13
46110: PUSH
46111: LD_INT 14
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: ST_TO_ADDR
46120: GO 46765
46122: LD_INT 23
46124: DOUBLE
46125: EQUAL
46126: IFTRUE 46130
46128: GO 46156
46130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46131: LD_ADDR_VAR 0 3
46135: PUSH
46136: LD_INT 11
46138: PUSH
46139: LD_INT 12
46141: PUSH
46142: LD_INT 13
46144: PUSH
46145: LD_INT 14
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
46154: GO 46765
46156: LD_INT 24
46158: DOUBLE
46159: EQUAL
46160: IFTRUE 46164
46162: GO 46190
46164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46165: LD_ADDR_VAR 0 3
46169: PUSH
46170: LD_INT 11
46172: PUSH
46173: LD_INT 12
46175: PUSH
46176: LD_INT 13
46178: PUSH
46179: LD_INT 14
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
46188: GO 46765
46190: LD_INT 30
46192: DOUBLE
46193: EQUAL
46194: IFTRUE 46198
46196: GO 46224
46198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46199: LD_ADDR_VAR 0 3
46203: PUSH
46204: LD_INT 11
46206: PUSH
46207: LD_INT 12
46209: PUSH
46210: LD_INT 13
46212: PUSH
46213: LD_INT 14
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
46222: GO 46765
46224: LD_INT 25
46226: DOUBLE
46227: EQUAL
46228: IFTRUE 46232
46230: GO 46250
46232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46233: LD_ADDR_VAR 0 3
46237: PUSH
46238: LD_INT 13
46240: PUSH
46241: LD_INT 14
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: ST_TO_ADDR
46248: GO 46765
46250: LD_INT 27
46252: DOUBLE
46253: EQUAL
46254: IFTRUE 46258
46256: GO 46276
46258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46259: LD_ADDR_VAR 0 3
46263: PUSH
46264: LD_INT 13
46266: PUSH
46267: LD_INT 14
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: ST_TO_ADDR
46274: GO 46765
46276: LD_INT 92
46278: DOUBLE
46279: EQUAL
46280: IFTRUE 46284
46282: GO 46310
46284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46285: LD_ADDR_VAR 0 3
46289: PUSH
46290: LD_INT 11
46292: PUSH
46293: LD_INT 12
46295: PUSH
46296: LD_INT 13
46298: PUSH
46299: LD_INT 14
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: ST_TO_ADDR
46308: GO 46765
46310: LD_INT 28
46312: DOUBLE
46313: EQUAL
46314: IFTRUE 46318
46316: GO 46336
46318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46319: LD_ADDR_VAR 0 3
46323: PUSH
46324: LD_INT 13
46326: PUSH
46327: LD_INT 14
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: ST_TO_ADDR
46334: GO 46765
46336: LD_INT 29
46338: DOUBLE
46339: EQUAL
46340: IFTRUE 46344
46342: GO 46362
46344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46345: LD_ADDR_VAR 0 3
46349: PUSH
46350: LD_INT 13
46352: PUSH
46353: LD_INT 14
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: ST_TO_ADDR
46360: GO 46765
46362: LD_INT 31
46364: DOUBLE
46365: EQUAL
46366: IFTRUE 46370
46368: GO 46388
46370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46371: LD_ADDR_VAR 0 3
46375: PUSH
46376: LD_INT 13
46378: PUSH
46379: LD_INT 14
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: ST_TO_ADDR
46386: GO 46765
46388: LD_INT 26
46390: DOUBLE
46391: EQUAL
46392: IFTRUE 46396
46394: GO 46414
46396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46397: LD_ADDR_VAR 0 3
46401: PUSH
46402: LD_INT 13
46404: PUSH
46405: LD_INT 14
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: ST_TO_ADDR
46412: GO 46765
46414: LD_INT 42
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46422
46420: GO 46448
46422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46423: LD_ADDR_VAR 0 3
46427: PUSH
46428: LD_INT 21
46430: PUSH
46431: LD_INT 22
46433: PUSH
46434: LD_INT 23
46436: PUSH
46437: LD_INT 24
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
46446: GO 46765
46448: LD_INT 43
46450: DOUBLE
46451: EQUAL
46452: IFTRUE 46456
46454: GO 46482
46456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46457: LD_ADDR_VAR 0 3
46461: PUSH
46462: LD_INT 21
46464: PUSH
46465: LD_INT 22
46467: PUSH
46468: LD_INT 23
46470: PUSH
46471: LD_INT 24
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: ST_TO_ADDR
46480: GO 46765
46482: LD_INT 44
46484: DOUBLE
46485: EQUAL
46486: IFTRUE 46490
46488: GO 46516
46490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46491: LD_ADDR_VAR 0 3
46495: PUSH
46496: LD_INT 21
46498: PUSH
46499: LD_INT 22
46501: PUSH
46502: LD_INT 23
46504: PUSH
46505: LD_INT 24
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
46514: GO 46765
46516: LD_INT 45
46518: DOUBLE
46519: EQUAL
46520: IFTRUE 46524
46522: GO 46550
46524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46525: LD_ADDR_VAR 0 3
46529: PUSH
46530: LD_INT 21
46532: PUSH
46533: LD_INT 22
46535: PUSH
46536: LD_INT 23
46538: PUSH
46539: LD_INT 24
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: ST_TO_ADDR
46548: GO 46765
46550: LD_INT 49
46552: DOUBLE
46553: EQUAL
46554: IFTRUE 46558
46556: GO 46584
46558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46559: LD_ADDR_VAR 0 3
46563: PUSH
46564: LD_INT 21
46566: PUSH
46567: LD_INT 22
46569: PUSH
46570: LD_INT 23
46572: PUSH
46573: LD_INT 24
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
46582: GO 46765
46584: LD_INT 51
46586: DOUBLE
46587: EQUAL
46588: IFTRUE 46592
46590: GO 46618
46592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46593: LD_ADDR_VAR 0 3
46597: PUSH
46598: LD_INT 21
46600: PUSH
46601: LD_INT 22
46603: PUSH
46604: LD_INT 23
46606: PUSH
46607: LD_INT 24
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
46616: GO 46765
46618: LD_INT 52
46620: DOUBLE
46621: EQUAL
46622: IFTRUE 46626
46624: GO 46652
46626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46627: LD_ADDR_VAR 0 3
46631: PUSH
46632: LD_INT 21
46634: PUSH
46635: LD_INT 22
46637: PUSH
46638: LD_INT 23
46640: PUSH
46641: LD_INT 24
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
46650: GO 46765
46652: LD_INT 53
46654: DOUBLE
46655: EQUAL
46656: IFTRUE 46660
46658: GO 46678
46660: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46661: LD_ADDR_VAR 0 3
46665: PUSH
46666: LD_INT 23
46668: PUSH
46669: LD_INT 24
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: ST_TO_ADDR
46676: GO 46765
46678: LD_INT 46
46680: DOUBLE
46681: EQUAL
46682: IFTRUE 46686
46684: GO 46704
46686: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46687: LD_ADDR_VAR 0 3
46691: PUSH
46692: LD_INT 23
46694: PUSH
46695: LD_INT 24
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: ST_TO_ADDR
46702: GO 46765
46704: LD_INT 47
46706: DOUBLE
46707: EQUAL
46708: IFTRUE 46712
46710: GO 46730
46712: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
46713: LD_ADDR_VAR 0 3
46717: PUSH
46718: LD_INT 23
46720: PUSH
46721: LD_INT 24
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: ST_TO_ADDR
46728: GO 46765
46730: LD_INT 98
46732: DOUBLE
46733: EQUAL
46734: IFTRUE 46738
46736: GO 46764
46738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46739: LD_ADDR_VAR 0 3
46743: PUSH
46744: LD_INT 21
46746: PUSH
46747: LD_INT 22
46749: PUSH
46750: LD_INT 23
46752: PUSH
46753: LD_INT 24
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
46762: GO 46765
46764: POP
// result := ( chassis in result ) ;
46765: LD_ADDR_VAR 0 3
46769: PUSH
46770: LD_VAR 0 1
46774: PUSH
46775: LD_VAR 0 3
46779: IN
46780: ST_TO_ADDR
// end ;
46781: LD_VAR 0 3
46785: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46786: LD_INT 0
46788: PPUSH
46789: PPUSH
46790: PPUSH
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
// result := array ;
46795: LD_ADDR_VAR 0 5
46799: PUSH
46800: LD_VAR 0 1
46804: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46805: LD_VAR 0 1
46809: NOT
46810: IFTRUE 46819
46812: PUSH
46813: LD_VAR 0 2
46817: NOT
46818: OR
46819: IFTRUE 46828
46821: PUSH
46822: LD_VAR 0 3
46826: NOT
46827: OR
46828: IFTRUE 46842
46830: PUSH
46831: LD_VAR 0 2
46835: PUSH
46836: LD_VAR 0 1
46840: GREATER
46841: OR
46842: IFTRUE 46856
46844: PUSH
46845: LD_VAR 0 3
46849: PUSH
46850: LD_VAR 0 1
46854: GREATER
46855: OR
46856: IFFALSE 46860
// exit ;
46858: GO 47156
// if direction then
46860: LD_VAR 0 4
46864: IFFALSE 46928
// begin d := 1 ;
46866: LD_ADDR_VAR 0 9
46870: PUSH
46871: LD_INT 1
46873: ST_TO_ADDR
// if i_from > i_to then
46874: LD_VAR 0 2
46878: PUSH
46879: LD_VAR 0 3
46883: GREATER
46884: IFFALSE 46910
// length := ( array - i_from ) + i_to else
46886: LD_ADDR_VAR 0 11
46890: PUSH
46891: LD_VAR 0 1
46895: PUSH
46896: LD_VAR 0 2
46900: MINUS
46901: PUSH
46902: LD_VAR 0 3
46906: PLUS
46907: ST_TO_ADDR
46908: GO 46926
// length := i_to - i_from ;
46910: LD_ADDR_VAR 0 11
46914: PUSH
46915: LD_VAR 0 3
46919: PUSH
46920: LD_VAR 0 2
46924: MINUS
46925: ST_TO_ADDR
// end else
46926: GO 46989
// begin d := - 1 ;
46928: LD_ADDR_VAR 0 9
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: ST_TO_ADDR
// if i_from > i_to then
46937: LD_VAR 0 2
46941: PUSH
46942: LD_VAR 0 3
46946: GREATER
46947: IFFALSE 46967
// length := i_from - i_to else
46949: LD_ADDR_VAR 0 11
46953: PUSH
46954: LD_VAR 0 2
46958: PUSH
46959: LD_VAR 0 3
46963: MINUS
46964: ST_TO_ADDR
46965: GO 46989
// length := ( array - i_to ) + i_from ;
46967: LD_ADDR_VAR 0 11
46971: PUSH
46972: LD_VAR 0 1
46976: PUSH
46977: LD_VAR 0 3
46981: MINUS
46982: PUSH
46983: LD_VAR 0 2
46987: PLUS
46988: ST_TO_ADDR
// end ; if not length then
46989: LD_VAR 0 11
46993: NOT
46994: IFFALSE 46998
// exit ;
46996: GO 47156
// tmp := array ;
46998: LD_ADDR_VAR 0 10
47002: PUSH
47003: LD_VAR 0 1
47007: ST_TO_ADDR
// for i = 1 to length do
47008: LD_ADDR_VAR 0 6
47012: PUSH
47013: DOUBLE
47014: LD_INT 1
47016: DEC
47017: ST_TO_ADDR
47018: LD_VAR 0 11
47022: PUSH
47023: FOR_TO
47024: IFFALSE 47144
// begin for j = 1 to array do
47026: LD_ADDR_VAR 0 7
47030: PUSH
47031: DOUBLE
47032: LD_INT 1
47034: DEC
47035: ST_TO_ADDR
47036: LD_VAR 0 1
47040: PUSH
47041: FOR_TO
47042: IFFALSE 47130
// begin k := j + d ;
47044: LD_ADDR_VAR 0 8
47048: PUSH
47049: LD_VAR 0 7
47053: PUSH
47054: LD_VAR 0 9
47058: PLUS
47059: ST_TO_ADDR
// if k > array then
47060: LD_VAR 0 8
47064: PUSH
47065: LD_VAR 0 1
47069: GREATER
47070: IFFALSE 47080
// k := 1 ;
47072: LD_ADDR_VAR 0 8
47076: PUSH
47077: LD_INT 1
47079: ST_TO_ADDR
// if not k then
47080: LD_VAR 0 8
47084: NOT
47085: IFFALSE 47097
// k := array ;
47087: LD_ADDR_VAR 0 8
47091: PUSH
47092: LD_VAR 0 1
47096: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47097: LD_ADDR_VAR 0 10
47101: PUSH
47102: LD_VAR 0 10
47106: PPUSH
47107: LD_VAR 0 8
47111: PPUSH
47112: LD_VAR 0 1
47116: PUSH
47117: LD_VAR 0 7
47121: ARRAY
47122: PPUSH
47123: CALL_OW 1
47127: ST_TO_ADDR
// end ;
47128: GO 47041
47130: POP
47131: POP
// array := tmp ;
47132: LD_ADDR_VAR 0 1
47136: PUSH
47137: LD_VAR 0 10
47141: ST_TO_ADDR
// end ;
47142: GO 47023
47144: POP
47145: POP
// result := array ;
47146: LD_ADDR_VAR 0 5
47150: PUSH
47151: LD_VAR 0 1
47155: ST_TO_ADDR
// end ;
47156: LD_VAR 0 5
47160: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47161: LD_INT 0
47163: PPUSH
47164: PPUSH
// result := 0 ;
47165: LD_ADDR_VAR 0 3
47169: PUSH
47170: LD_INT 0
47172: ST_TO_ADDR
// if not array or not value in array then
47173: LD_VAR 0 1
47177: NOT
47178: IFTRUE 47193
47180: PUSH
47181: LD_VAR 0 2
47185: PUSH
47186: LD_VAR 0 1
47190: IN
47191: NOT
47192: OR
47193: IFFALSE 47197
// exit ;
47195: GO 47251
// for i = 1 to array do
47197: LD_ADDR_VAR 0 4
47201: PUSH
47202: DOUBLE
47203: LD_INT 1
47205: DEC
47206: ST_TO_ADDR
47207: LD_VAR 0 1
47211: PUSH
47212: FOR_TO
47213: IFFALSE 47249
// if value = array [ i ] then
47215: LD_VAR 0 2
47219: PUSH
47220: LD_VAR 0 1
47224: PUSH
47225: LD_VAR 0 4
47229: ARRAY
47230: EQUAL
47231: IFFALSE 47247
// begin result := i ;
47233: LD_ADDR_VAR 0 3
47237: PUSH
47238: LD_VAR 0 4
47242: ST_TO_ADDR
// exit ;
47243: POP
47244: POP
47245: GO 47251
// end ;
47247: GO 47212
47249: POP
47250: POP
// end ;
47251: LD_VAR 0 3
47255: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47256: LD_INT 0
47258: PPUSH
// vc_chassis := chassis ;
47259: LD_ADDR_OWVAR 37
47263: PUSH
47264: LD_VAR 0 1
47268: ST_TO_ADDR
// vc_engine := engine ;
47269: LD_ADDR_OWVAR 39
47273: PUSH
47274: LD_VAR 0 2
47278: ST_TO_ADDR
// vc_control := control ;
47279: LD_ADDR_OWVAR 38
47283: PUSH
47284: LD_VAR 0 3
47288: ST_TO_ADDR
// vc_weapon := weapon ;
47289: LD_ADDR_OWVAR 40
47293: PUSH
47294: LD_VAR 0 4
47298: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47299: LD_ADDR_OWVAR 41
47303: PUSH
47304: LD_VAR 0 5
47308: ST_TO_ADDR
// end ;
47309: LD_VAR 0 6
47313: RET
// export function WantPlant ( unit ) ; var task ; begin
47314: LD_INT 0
47316: PPUSH
47317: PPUSH
// result := false ;
47318: LD_ADDR_VAR 0 2
47322: PUSH
47323: LD_INT 0
47325: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47326: LD_ADDR_VAR 0 3
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 437
47340: ST_TO_ADDR
// if task then
47341: LD_VAR 0 3
47345: IFFALSE 47373
// if task [ 1 ] [ 1 ] = p then
47347: LD_VAR 0 3
47351: PUSH
47352: LD_INT 1
47354: ARRAY
47355: PUSH
47356: LD_INT 1
47358: ARRAY
47359: PUSH
47360: LD_STRING p
47362: EQUAL
47363: IFFALSE 47373
// result := true ;
47365: LD_ADDR_VAR 0 2
47369: PUSH
47370: LD_INT 1
47372: ST_TO_ADDR
// end ;
47373: LD_VAR 0 2
47377: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47378: LD_INT 0
47380: PPUSH
47381: PPUSH
47382: PPUSH
47383: PPUSH
// if pos < 1 then
47384: LD_VAR 0 2
47388: PUSH
47389: LD_INT 1
47391: LESS
47392: IFFALSE 47396
// exit ;
47394: GO 47699
// if pos = 1 then
47396: LD_VAR 0 2
47400: PUSH
47401: LD_INT 1
47403: EQUAL
47404: IFFALSE 47437
// result := Replace ( arr , pos [ 1 ] , value ) else
47406: LD_ADDR_VAR 0 4
47410: PUSH
47411: LD_VAR 0 1
47415: PPUSH
47416: LD_VAR 0 2
47420: PUSH
47421: LD_INT 1
47423: ARRAY
47424: PPUSH
47425: LD_VAR 0 3
47429: PPUSH
47430: CALL_OW 1
47434: ST_TO_ADDR
47435: GO 47699
// begin tmp := arr ;
47437: LD_ADDR_VAR 0 6
47441: PUSH
47442: LD_VAR 0 1
47446: ST_TO_ADDR
// s_arr := [ tmp ] ;
47447: LD_ADDR_VAR 0 7
47451: PUSH
47452: LD_VAR 0 6
47456: PUSH
47457: EMPTY
47458: LIST
47459: ST_TO_ADDR
// for i = 1 to pos - 1 do
47460: LD_ADDR_VAR 0 5
47464: PUSH
47465: DOUBLE
47466: LD_INT 1
47468: DEC
47469: ST_TO_ADDR
47470: LD_VAR 0 2
47474: PUSH
47475: LD_INT 1
47477: MINUS
47478: PUSH
47479: FOR_TO
47480: IFFALSE 47525
// begin tmp := tmp [ pos [ i ] ] ;
47482: LD_ADDR_VAR 0 6
47486: PUSH
47487: LD_VAR 0 6
47491: PUSH
47492: LD_VAR 0 2
47496: PUSH
47497: LD_VAR 0 5
47501: ARRAY
47502: ARRAY
47503: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47504: LD_ADDR_VAR 0 7
47508: PUSH
47509: LD_VAR 0 7
47513: PUSH
47514: LD_VAR 0 6
47518: PUSH
47519: EMPTY
47520: LIST
47521: ADD
47522: ST_TO_ADDR
// end ;
47523: GO 47479
47525: POP
47526: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47527: LD_ADDR_VAR 0 6
47531: PUSH
47532: LD_VAR 0 6
47536: PPUSH
47537: LD_VAR 0 2
47541: PUSH
47542: LD_VAR 0 2
47546: ARRAY
47547: PPUSH
47548: LD_VAR 0 3
47552: PPUSH
47553: CALL_OW 1
47557: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47558: LD_ADDR_VAR 0 7
47562: PUSH
47563: LD_VAR 0 7
47567: PPUSH
47568: LD_VAR 0 7
47572: PPUSH
47573: LD_VAR 0 6
47577: PPUSH
47578: CALL_OW 1
47582: ST_TO_ADDR
// for i = s_arr downto 2 do
47583: LD_ADDR_VAR 0 5
47587: PUSH
47588: DOUBLE
47589: LD_VAR 0 7
47593: INC
47594: ST_TO_ADDR
47595: LD_INT 2
47597: PUSH
47598: FOR_DOWNTO
47599: IFFALSE 47683
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47601: LD_ADDR_VAR 0 6
47605: PUSH
47606: LD_VAR 0 7
47610: PUSH
47611: LD_VAR 0 5
47615: PUSH
47616: LD_INT 1
47618: MINUS
47619: ARRAY
47620: PPUSH
47621: LD_VAR 0 2
47625: PUSH
47626: LD_VAR 0 5
47630: PUSH
47631: LD_INT 1
47633: MINUS
47634: ARRAY
47635: PPUSH
47636: LD_VAR 0 7
47640: PUSH
47641: LD_VAR 0 5
47645: ARRAY
47646: PPUSH
47647: CALL_OW 1
47651: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47652: LD_ADDR_VAR 0 7
47656: PUSH
47657: LD_VAR 0 7
47661: PPUSH
47662: LD_VAR 0 5
47666: PUSH
47667: LD_INT 1
47669: MINUS
47670: PPUSH
47671: LD_VAR 0 6
47675: PPUSH
47676: CALL_OW 1
47680: ST_TO_ADDR
// end ;
47681: GO 47598
47683: POP
47684: POP
// result := s_arr [ 1 ] ;
47685: LD_ADDR_VAR 0 4
47689: PUSH
47690: LD_VAR 0 7
47694: PUSH
47695: LD_INT 1
47697: ARRAY
47698: ST_TO_ADDR
// end ; end ;
47699: LD_VAR 0 4
47703: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47704: LD_INT 0
47706: PPUSH
47707: PPUSH
// if not list then
47708: LD_VAR 0 1
47712: NOT
47713: IFFALSE 47717
// exit ;
47715: GO 47808
// i := list [ pos1 ] ;
47717: LD_ADDR_VAR 0 5
47721: PUSH
47722: LD_VAR 0 1
47726: PUSH
47727: LD_VAR 0 2
47731: ARRAY
47732: ST_TO_ADDR
// if not i then
47733: LD_VAR 0 5
47737: NOT
47738: IFFALSE 47742
// exit ;
47740: GO 47808
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47742: LD_ADDR_VAR 0 1
47746: PUSH
47747: LD_VAR 0 1
47751: PPUSH
47752: LD_VAR 0 2
47756: PPUSH
47757: LD_VAR 0 1
47761: PUSH
47762: LD_VAR 0 3
47766: ARRAY
47767: PPUSH
47768: CALL_OW 1
47772: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47773: LD_ADDR_VAR 0 1
47777: PUSH
47778: LD_VAR 0 1
47782: PPUSH
47783: LD_VAR 0 3
47787: PPUSH
47788: LD_VAR 0 5
47792: PPUSH
47793: CALL_OW 1
47797: ST_TO_ADDR
// result := list ;
47798: LD_ADDR_VAR 0 4
47802: PUSH
47803: LD_VAR 0 1
47807: ST_TO_ADDR
// end ;
47808: LD_VAR 0 4
47812: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47813: LD_INT 0
47815: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47816: LD_ADDR_VAR 0 5
47820: PUSH
47821: LD_VAR 0 1
47825: PPUSH
47826: CALL_OW 250
47830: PPUSH
47831: LD_VAR 0 1
47835: PPUSH
47836: CALL_OW 251
47840: PPUSH
47841: LD_VAR 0 2
47845: PPUSH
47846: LD_VAR 0 3
47850: PPUSH
47851: LD_VAR 0 4
47855: PPUSH
47856: CALL 48238 0 5
47860: ST_TO_ADDR
// end ;
47861: LD_VAR 0 5
47865: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47866: LD_INT 0
47868: PPUSH
47869: PPUSH
47870: PPUSH
47871: PPUSH
// if not list or not unit then
47872: LD_VAR 0 2
47876: NOT
47877: IFTRUE 47886
47879: PUSH
47880: LD_VAR 0 1
47884: NOT
47885: OR
47886: IFFALSE 47890
// exit ;
47888: GO 48233
// result := [ ] ;
47890: LD_ADDR_VAR 0 5
47894: PUSH
47895: EMPTY
47896: ST_TO_ADDR
// for i in list do
47897: LD_ADDR_VAR 0 6
47901: PUSH
47902: LD_VAR 0 2
47906: PUSH
47907: FOR_IN
47908: IFFALSE 48126
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47910: LD_ADDR_VAR 0 8
47914: PUSH
47915: LD_VAR 0 1
47919: PPUSH
47920: LD_VAR 0 6
47924: PUSH
47925: LD_INT 1
47927: ARRAY
47928: PPUSH
47929: LD_VAR 0 6
47933: PUSH
47934: LD_INT 2
47936: ARRAY
47937: PPUSH
47938: CALL_OW 297
47942: ST_TO_ADDR
// if not Count ( result ) then
47943: LD_VAR 0 5
47947: PPUSH
47948: CALL 44460 0 1
47952: NOT
47953: IFFALSE 47986
// begin result := Join ( result , [ i , tmp ] ) ;
47955: LD_ADDR_VAR 0 5
47959: PUSH
47960: LD_VAR 0 5
47964: PPUSH
47965: LD_VAR 0 6
47969: PUSH
47970: LD_VAR 0 8
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PPUSH
47979: CALL 80436 0 2
47983: ST_TO_ADDR
// continue ;
47984: GO 47907
// end ; if result [ result ] [ 2 ] <= tmp then
47986: LD_VAR 0 5
47990: PUSH
47991: LD_VAR 0 5
47995: ARRAY
47996: PUSH
47997: LD_INT 2
47999: ARRAY
48000: PUSH
48001: LD_VAR 0 8
48005: LESSEQUAL
48006: IFFALSE 48039
// result := Join ( result , [ i , tmp ] ) else
48008: LD_ADDR_VAR 0 5
48012: PUSH
48013: LD_VAR 0 5
48017: PPUSH
48018: LD_VAR 0 6
48022: PUSH
48023: LD_VAR 0 8
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PPUSH
48032: CALL 80436 0 2
48036: ST_TO_ADDR
48037: GO 48124
// begin for j := 1 to Count ( result ) do
48039: LD_ADDR_VAR 0 7
48043: PUSH
48044: DOUBLE
48045: LD_INT 1
48047: DEC
48048: ST_TO_ADDR
48049: LD_VAR 0 5
48053: PPUSH
48054: CALL 44460 0 1
48058: PUSH
48059: FOR_TO
48060: IFFALSE 48122
// begin if tmp < result [ j ] [ 2 ] then
48062: LD_VAR 0 8
48066: PUSH
48067: LD_VAR 0 5
48071: PUSH
48072: LD_VAR 0 7
48076: ARRAY
48077: PUSH
48078: LD_INT 2
48080: ARRAY
48081: LESS
48082: IFFALSE 48120
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48084: LD_ADDR_VAR 0 5
48088: PUSH
48089: LD_VAR 0 5
48093: PPUSH
48094: LD_VAR 0 7
48098: PPUSH
48099: LD_VAR 0 6
48103: PUSH
48104: LD_VAR 0 8
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PPUSH
48113: CALL_OW 2
48117: ST_TO_ADDR
// break ;
48118: GO 48122
// end ; end ;
48120: GO 48059
48122: POP
48123: POP
// end ; end ;
48124: GO 47907
48126: POP
48127: POP
// if result and not asc then
48128: LD_VAR 0 5
48132: IFFALSE 48141
48134: PUSH
48135: LD_VAR 0 3
48139: NOT
48140: AND
48141: IFFALSE 48158
// result := ReverseArray ( result ) ;
48143: LD_ADDR_VAR 0 5
48147: PUSH
48148: LD_VAR 0 5
48152: PPUSH
48153: CALL 75516 0 1
48157: ST_TO_ADDR
// tmp := [ ] ;
48158: LD_ADDR_VAR 0 8
48162: PUSH
48163: EMPTY
48164: ST_TO_ADDR
// if mode then
48165: LD_VAR 0 4
48169: IFFALSE 48233
// begin for i := 1 to result do
48171: LD_ADDR_VAR 0 6
48175: PUSH
48176: DOUBLE
48177: LD_INT 1
48179: DEC
48180: ST_TO_ADDR
48181: LD_VAR 0 5
48185: PUSH
48186: FOR_TO
48187: IFFALSE 48221
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48189: LD_ADDR_VAR 0 8
48193: PUSH
48194: LD_VAR 0 8
48198: PPUSH
48199: LD_VAR 0 5
48203: PUSH
48204: LD_VAR 0 6
48208: ARRAY
48209: PUSH
48210: LD_INT 1
48212: ARRAY
48213: PPUSH
48214: CALL 80436 0 2
48218: ST_TO_ADDR
48219: GO 48186
48221: POP
48222: POP
// result := tmp ;
48223: LD_ADDR_VAR 0 5
48227: PUSH
48228: LD_VAR 0 8
48232: ST_TO_ADDR
// end ; end ;
48233: LD_VAR 0 5
48237: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48238: LD_INT 0
48240: PPUSH
48241: PPUSH
48242: PPUSH
48243: PPUSH
// if not list then
48244: LD_VAR 0 3
48248: NOT
48249: IFFALSE 48253
// exit ;
48251: GO 48643
// result := [ ] ;
48253: LD_ADDR_VAR 0 6
48257: PUSH
48258: EMPTY
48259: ST_TO_ADDR
// for i in list do
48260: LD_ADDR_VAR 0 7
48264: PUSH
48265: LD_VAR 0 3
48269: PUSH
48270: FOR_IN
48271: IFFALSE 48473
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48273: LD_ADDR_VAR 0 9
48277: PUSH
48278: LD_VAR 0 7
48282: PPUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: LD_VAR 0 2
48292: PPUSH
48293: CALL_OW 297
48297: ST_TO_ADDR
// if not result then
48298: LD_VAR 0 6
48302: NOT
48303: IFFALSE 48329
// result := [ [ i , tmp ] ] else
48305: LD_ADDR_VAR 0 6
48309: PUSH
48310: LD_VAR 0 7
48314: PUSH
48315: LD_VAR 0 9
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: ST_TO_ADDR
48327: GO 48471
// begin if result [ result ] [ 2 ] <= tmp then
48329: LD_VAR 0 6
48333: PUSH
48334: LD_VAR 0 6
48338: ARRAY
48339: PUSH
48340: LD_INT 2
48342: ARRAY
48343: PUSH
48344: LD_VAR 0 9
48348: LESSEQUAL
48349: IFFALSE 48391
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48351: LD_ADDR_VAR 0 6
48355: PUSH
48356: LD_VAR 0 6
48360: PPUSH
48361: LD_VAR 0 6
48365: PUSH
48366: LD_INT 1
48368: PLUS
48369: PPUSH
48370: LD_VAR 0 7
48374: PUSH
48375: LD_VAR 0 9
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PPUSH
48384: CALL_OW 2
48388: ST_TO_ADDR
48389: GO 48471
// for j := 1 to result do
48391: LD_ADDR_VAR 0 8
48395: PUSH
48396: DOUBLE
48397: LD_INT 1
48399: DEC
48400: ST_TO_ADDR
48401: LD_VAR 0 6
48405: PUSH
48406: FOR_TO
48407: IFFALSE 48469
// begin if tmp < result [ j ] [ 2 ] then
48409: LD_VAR 0 9
48413: PUSH
48414: LD_VAR 0 6
48418: PUSH
48419: LD_VAR 0 8
48423: ARRAY
48424: PUSH
48425: LD_INT 2
48427: ARRAY
48428: LESS
48429: IFFALSE 48467
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48431: LD_ADDR_VAR 0 6
48435: PUSH
48436: LD_VAR 0 6
48440: PPUSH
48441: LD_VAR 0 8
48445: PPUSH
48446: LD_VAR 0 7
48450: PUSH
48451: LD_VAR 0 9
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PPUSH
48460: CALL_OW 2
48464: ST_TO_ADDR
// break ;
48465: GO 48469
// end ; end ;
48467: GO 48406
48469: POP
48470: POP
// end ; end ;
48471: GO 48270
48473: POP
48474: POP
// if result and not asc then
48475: LD_VAR 0 6
48479: IFFALSE 48488
48481: PUSH
48482: LD_VAR 0 4
48486: NOT
48487: AND
48488: IFFALSE 48563
// begin tmp := result ;
48490: LD_ADDR_VAR 0 9
48494: PUSH
48495: LD_VAR 0 6
48499: ST_TO_ADDR
// for i = tmp downto 1 do
48500: LD_ADDR_VAR 0 7
48504: PUSH
48505: DOUBLE
48506: LD_VAR 0 9
48510: INC
48511: ST_TO_ADDR
48512: LD_INT 1
48514: PUSH
48515: FOR_DOWNTO
48516: IFFALSE 48561
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48518: LD_ADDR_VAR 0 6
48522: PUSH
48523: LD_VAR 0 6
48527: PPUSH
48528: LD_VAR 0 9
48532: PUSH
48533: LD_VAR 0 7
48537: MINUS
48538: PUSH
48539: LD_INT 1
48541: PLUS
48542: PPUSH
48543: LD_VAR 0 9
48547: PUSH
48548: LD_VAR 0 7
48552: ARRAY
48553: PPUSH
48554: CALL_OW 1
48558: ST_TO_ADDR
48559: GO 48515
48561: POP
48562: POP
// end ; tmp := [ ] ;
48563: LD_ADDR_VAR 0 9
48567: PUSH
48568: EMPTY
48569: ST_TO_ADDR
// if mode then
48570: LD_VAR 0 5
48574: IFFALSE 48643
// begin for i = 1 to result do
48576: LD_ADDR_VAR 0 7
48580: PUSH
48581: DOUBLE
48582: LD_INT 1
48584: DEC
48585: ST_TO_ADDR
48586: LD_VAR 0 6
48590: PUSH
48591: FOR_TO
48592: IFFALSE 48631
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48594: LD_ADDR_VAR 0 9
48598: PUSH
48599: LD_VAR 0 9
48603: PPUSH
48604: LD_VAR 0 7
48608: PPUSH
48609: LD_VAR 0 6
48613: PUSH
48614: LD_VAR 0 7
48618: ARRAY
48619: PUSH
48620: LD_INT 1
48622: ARRAY
48623: PPUSH
48624: CALL_OW 1
48628: ST_TO_ADDR
48629: GO 48591
48631: POP
48632: POP
// result := tmp ;
48633: LD_ADDR_VAR 0 6
48637: PUSH
48638: LD_VAR 0 9
48642: ST_TO_ADDR
// end ; end ;
48643: LD_VAR 0 6
48647: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48648: LD_INT 0
48650: PPUSH
48651: PPUSH
48652: PPUSH
48653: PPUSH
48654: PPUSH
48655: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48656: LD_ADDR_VAR 0 5
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: ST_TO_ADDR
// if not x or not y then
48678: LD_VAR 0 2
48682: NOT
48683: IFTRUE 48692
48685: PUSH
48686: LD_VAR 0 3
48690: NOT
48691: OR
48692: IFFALSE 48696
// exit ;
48694: GO 50352
// if not range then
48696: LD_VAR 0 4
48700: NOT
48701: IFFALSE 48711
// range := 10 ;
48703: LD_ADDR_VAR 0 4
48707: PUSH
48708: LD_INT 10
48710: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48711: LD_ADDR_VAR 0 8
48715: PUSH
48716: LD_INT 81
48718: PUSH
48719: LD_VAR 0 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 92
48730: PUSH
48731: LD_VAR 0 2
48735: PUSH
48736: LD_VAR 0 3
48740: PUSH
48741: LD_VAR 0 4
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 3
48754: PUSH
48755: LD_INT 21
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: PPUSH
48774: CALL_OW 69
48778: ST_TO_ADDR
// if not tmp then
48779: LD_VAR 0 8
48783: NOT
48784: IFFALSE 48788
// exit ;
48786: GO 50352
// for i in tmp do
48788: LD_ADDR_VAR 0 6
48792: PUSH
48793: LD_VAR 0 8
48797: PUSH
48798: FOR_IN
48799: IFFALSE 50327
// begin points := [ 0 , 0 , 0 ] ;
48801: LD_ADDR_VAR 0 9
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// bpoints := 1 ;
48820: LD_ADDR_VAR 0 10
48824: PUSH
48825: LD_INT 1
48827: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48828: LD_VAR 0 6
48832: PPUSH
48833: CALL_OW 247
48837: PUSH
48838: LD_INT 1
48840: DOUBLE
48841: EQUAL
48842: IFTRUE 48846
48844: GO 49428
48846: POP
// begin if GetClass ( i ) = 1 then
48847: LD_VAR 0 6
48851: PPUSH
48852: CALL_OW 257
48856: PUSH
48857: LD_INT 1
48859: EQUAL
48860: IFFALSE 48881
// points := [ 10 , 5 , 3 ] ;
48862: LD_ADDR_VAR 0 9
48866: PUSH
48867: LD_INT 10
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48881: LD_VAR 0 6
48885: PPUSH
48886: CALL_OW 257
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: LD_INT 4
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: IN
48905: IFFALSE 48926
// points := [ 3 , 2 , 1 ] ;
48907: LD_ADDR_VAR 0 9
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48926: LD_VAR 0 6
48930: PPUSH
48931: CALL_OW 257
48935: PUSH
48936: LD_INT 5
48938: EQUAL
48939: IFFALSE 48960
// points := [ 130 , 5 , 2 ] ;
48941: LD_ADDR_VAR 0 9
48945: PUSH
48946: LD_INT 130
48948: PUSH
48949: LD_INT 5
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: LIST
48959: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48960: LD_VAR 0 6
48964: PPUSH
48965: CALL_OW 257
48969: PUSH
48970: LD_INT 8
48972: EQUAL
48973: IFFALSE 48994
// points := [ 35 , 35 , 30 ] ;
48975: LD_ADDR_VAR 0 9
48979: PUSH
48980: LD_INT 35
48982: PUSH
48983: LD_INT 35
48985: PUSH
48986: LD_INT 30
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48994: LD_VAR 0 6
48998: PPUSH
48999: CALL_OW 257
49003: PUSH
49004: LD_INT 9
49006: EQUAL
49007: IFFALSE 49028
// points := [ 20 , 55 , 40 ] ;
49009: LD_ADDR_VAR 0 9
49013: PUSH
49014: LD_INT 20
49016: PUSH
49017: LD_INT 55
49019: PUSH
49020: LD_INT 40
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49028: LD_VAR 0 6
49032: PPUSH
49033: CALL_OW 257
49037: PUSH
49038: LD_INT 12
49040: PUSH
49041: LD_INT 16
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: IN
49048: IFFALSE 49069
// points := [ 5 , 3 , 2 ] ;
49050: LD_ADDR_VAR 0 9
49054: PUSH
49055: LD_INT 5
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49069: LD_VAR 0 6
49073: PPUSH
49074: CALL_OW 257
49078: PUSH
49079: LD_INT 17
49081: EQUAL
49082: IFFALSE 49103
// points := [ 100 , 50 , 75 ] ;
49084: LD_ADDR_VAR 0 9
49088: PUSH
49089: LD_INT 100
49091: PUSH
49092: LD_INT 50
49094: PUSH
49095: LD_INT 75
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49103: LD_VAR 0 6
49107: PPUSH
49108: CALL_OW 257
49112: PUSH
49113: LD_INT 15
49115: EQUAL
49116: IFFALSE 49137
// points := [ 10 , 5 , 3 ] ;
49118: LD_ADDR_VAR 0 9
49122: PUSH
49123: LD_INT 10
49125: PUSH
49126: LD_INT 5
49128: PUSH
49129: LD_INT 3
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49137: LD_VAR 0 6
49141: PPUSH
49142: CALL_OW 257
49146: PUSH
49147: LD_INT 14
49149: EQUAL
49150: IFFALSE 49171
// points := [ 10 , 0 , 0 ] ;
49152: LD_ADDR_VAR 0 9
49156: PUSH
49157: LD_INT 10
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49171: LD_VAR 0 6
49175: PPUSH
49176: CALL_OW 257
49180: PUSH
49181: LD_INT 11
49183: EQUAL
49184: IFFALSE 49205
// points := [ 30 , 10 , 5 ] ;
49186: LD_ADDR_VAR 0 9
49190: PUSH
49191: LD_INT 30
49193: PUSH
49194: LD_INT 10
49196: PUSH
49197: LD_INT 5
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: LIST
49204: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49205: LD_VAR 0 1
49209: PPUSH
49210: LD_INT 5
49212: PPUSH
49213: CALL_OW 321
49217: PUSH
49218: LD_INT 2
49220: EQUAL
49221: IFFALSE 49238
// bpoints := bpoints * 1.8 ;
49223: LD_ADDR_VAR 0 10
49227: PUSH
49228: LD_VAR 0 10
49232: PUSH
49233: LD_REAL  1.80000000000000E+0000
49236: MUL
49237: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49238: LD_VAR 0 6
49242: PPUSH
49243: CALL_OW 257
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: LD_INT 4
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: IN
49266: IFFALSE 49286
49268: PUSH
49269: LD_VAR 0 1
49273: PPUSH
49274: LD_INT 51
49276: PPUSH
49277: CALL_OW 321
49281: PUSH
49282: LD_INT 2
49284: EQUAL
49285: AND
49286: IFFALSE 49303
// bpoints := bpoints * 1.2 ;
49288: LD_ADDR_VAR 0 10
49292: PUSH
49293: LD_VAR 0 10
49297: PUSH
49298: LD_REAL  1.20000000000000E+0000
49301: MUL
49302: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49303: LD_VAR 0 6
49307: PPUSH
49308: CALL_OW 257
49312: PUSH
49313: LD_INT 5
49315: PUSH
49316: LD_INT 7
49318: PUSH
49319: LD_INT 9
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: IN
49327: IFFALSE 49347
49329: PUSH
49330: LD_VAR 0 1
49334: PPUSH
49335: LD_INT 52
49337: PPUSH
49338: CALL_OW 321
49342: PUSH
49343: LD_INT 2
49345: EQUAL
49346: AND
49347: IFFALSE 49364
// bpoints := bpoints * 1.5 ;
49349: LD_ADDR_VAR 0 10
49353: PUSH
49354: LD_VAR 0 10
49358: PUSH
49359: LD_REAL  1.50000000000000E+0000
49362: MUL
49363: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49364: LD_VAR 0 1
49368: PPUSH
49369: LD_INT 66
49371: PPUSH
49372: CALL_OW 321
49376: PUSH
49377: LD_INT 2
49379: EQUAL
49380: IFFALSE 49397
// bpoints := bpoints * 1.1 ;
49382: LD_ADDR_VAR 0 10
49386: PUSH
49387: LD_VAR 0 10
49391: PUSH
49392: LD_REAL  1.10000000000000E+0000
49395: MUL
49396: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49397: LD_ADDR_VAR 0 10
49401: PUSH
49402: LD_VAR 0 10
49406: PUSH
49407: LD_VAR 0 6
49411: PPUSH
49412: LD_INT 1
49414: PPUSH
49415: CALL_OW 259
49419: PUSH
49420: LD_REAL  1.15000000000000E+0000
49423: MUL
49424: MUL
49425: ST_TO_ADDR
// end ; unit_vehicle :
49426: GO 50256
49428: LD_INT 2
49430: DOUBLE
49431: EQUAL
49432: IFTRUE 49436
49434: GO 50244
49436: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49437: LD_VAR 0 6
49441: PPUSH
49442: CALL_OW 264
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 42
49452: PUSH
49453: LD_INT 24
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: LIST
49460: IN
49461: IFFALSE 49482
// points := [ 25 , 5 , 3 ] ;
49463: LD_ADDR_VAR 0 9
49467: PUSH
49468: LD_INT 25
49470: PUSH
49471: LD_INT 5
49473: PUSH
49474: LD_INT 3
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49482: LD_VAR 0 6
49486: PPUSH
49487: CALL_OW 264
49491: PUSH
49492: LD_INT 4
49494: PUSH
49495: LD_INT 43
49497: PUSH
49498: LD_INT 25
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: IN
49506: IFFALSE 49527
// points := [ 40 , 15 , 5 ] ;
49508: LD_ADDR_VAR 0 9
49512: PUSH
49513: LD_INT 40
49515: PUSH
49516: LD_INT 15
49518: PUSH
49519: LD_INT 5
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49527: LD_VAR 0 6
49531: PPUSH
49532: CALL_OW 264
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: LD_INT 23
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: IN
49547: IFFALSE 49568
// points := [ 7 , 25 , 8 ] ;
49549: LD_ADDR_VAR 0 9
49553: PUSH
49554: LD_INT 7
49556: PUSH
49557: LD_INT 25
49559: PUSH
49560: LD_INT 8
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49568: LD_VAR 0 6
49572: PPUSH
49573: CALL_OW 264
49577: PUSH
49578: LD_INT 5
49580: PUSH
49581: LD_INT 27
49583: PUSH
49584: LD_INT 44
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: IN
49592: IFFALSE 49613
// points := [ 14 , 50 , 16 ] ;
49594: LD_ADDR_VAR 0 9
49598: PUSH
49599: LD_INT 14
49601: PUSH
49602: LD_INT 50
49604: PUSH
49605: LD_INT 16
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49613: LD_VAR 0 6
49617: PPUSH
49618: CALL_OW 264
49622: PUSH
49623: LD_INT 6
49625: PUSH
49626: LD_INT 46
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: IN
49633: IFFALSE 49654
// points := [ 32 , 120 , 70 ] ;
49635: LD_ADDR_VAR 0 9
49639: PUSH
49640: LD_INT 32
49642: PUSH
49643: LD_INT 120
49645: PUSH
49646: LD_INT 70
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49654: LD_VAR 0 6
49658: PPUSH
49659: CALL_OW 264
49663: PUSH
49664: LD_INT 7
49666: PUSH
49667: LD_INT 28
49669: PUSH
49670: LD_INT 45
49672: PUSH
49673: LD_INT 92
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: IN
49682: IFFALSE 49703
// points := [ 35 , 20 , 45 ] ;
49684: LD_ADDR_VAR 0 9
49688: PUSH
49689: LD_INT 35
49691: PUSH
49692: LD_INT 20
49694: PUSH
49695: LD_INT 45
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49703: LD_VAR 0 6
49707: PPUSH
49708: CALL_OW 264
49712: PUSH
49713: LD_INT 47
49715: PUSH
49716: EMPTY
49717: LIST
49718: IN
49719: IFFALSE 49740
// points := [ 67 , 45 , 75 ] ;
49721: LD_ADDR_VAR 0 9
49725: PUSH
49726: LD_INT 67
49728: PUSH
49729: LD_INT 45
49731: PUSH
49732: LD_INT 75
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49740: LD_VAR 0 6
49744: PPUSH
49745: CALL_OW 264
49749: PUSH
49750: LD_INT 26
49752: PUSH
49753: EMPTY
49754: LIST
49755: IN
49756: IFFALSE 49777
// points := [ 120 , 30 , 80 ] ;
49758: LD_ADDR_VAR 0 9
49762: PUSH
49763: LD_INT 120
49765: PUSH
49766: LD_INT 30
49768: PUSH
49769: LD_INT 80
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49777: LD_VAR 0 6
49781: PPUSH
49782: CALL_OW 264
49786: PUSH
49787: LD_INT 22
49789: PUSH
49790: EMPTY
49791: LIST
49792: IN
49793: IFFALSE 49814
// points := [ 40 , 1 , 1 ] ;
49795: LD_ADDR_VAR 0 9
49799: PUSH
49800: LD_INT 40
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49814: LD_VAR 0 6
49818: PPUSH
49819: CALL_OW 264
49823: PUSH
49824: LD_INT 29
49826: PUSH
49827: EMPTY
49828: LIST
49829: IN
49830: IFFALSE 49851
// points := [ 70 , 200 , 400 ] ;
49832: LD_ADDR_VAR 0 9
49836: PUSH
49837: LD_INT 70
49839: PUSH
49840: LD_INT 200
49842: PUSH
49843: LD_INT 400
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49851: LD_VAR 0 6
49855: PPUSH
49856: CALL_OW 264
49860: PUSH
49861: LD_INT 14
49863: PUSH
49864: LD_INT 53
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: IN
49871: IFFALSE 49892
// points := [ 40 , 10 , 20 ] ;
49873: LD_ADDR_VAR 0 9
49877: PUSH
49878: LD_INT 40
49880: PUSH
49881: LD_INT 10
49883: PUSH
49884: LD_INT 20
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49892: LD_VAR 0 6
49896: PPUSH
49897: CALL_OW 264
49901: PUSH
49902: LD_INT 9
49904: PUSH
49905: EMPTY
49906: LIST
49907: IN
49908: IFFALSE 49929
// points := [ 5 , 70 , 20 ] ;
49910: LD_ADDR_VAR 0 9
49914: PUSH
49915: LD_INT 5
49917: PUSH
49918: LD_INT 70
49920: PUSH
49921: LD_INT 20
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49929: LD_VAR 0 6
49933: PPUSH
49934: CALL_OW 264
49938: PUSH
49939: LD_INT 10
49941: PUSH
49942: EMPTY
49943: LIST
49944: IN
49945: IFFALSE 49966
// points := [ 35 , 110 , 70 ] ;
49947: LD_ADDR_VAR 0 9
49951: PUSH
49952: LD_INT 35
49954: PUSH
49955: LD_INT 110
49957: PUSH
49958: LD_INT 70
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49966: LD_VAR 0 6
49970: PPUSH
49971: CALL_OW 265
49975: PUSH
49976: LD_INT 25
49978: EQUAL
49979: IFFALSE 50000
// points := [ 80 , 65 , 100 ] ;
49981: LD_ADDR_VAR 0 9
49985: PUSH
49986: LD_INT 80
49988: PUSH
49989: LD_INT 65
49991: PUSH
49992: LD_INT 100
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50000: LD_VAR 0 6
50004: PPUSH
50005: CALL_OW 263
50009: PUSH
50010: LD_INT 1
50012: EQUAL
50013: IFFALSE 50048
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50015: LD_ADDR_VAR 0 10
50019: PUSH
50020: LD_VAR 0 10
50024: PUSH
50025: LD_VAR 0 6
50029: PPUSH
50030: CALL_OW 311
50034: PPUSH
50035: LD_INT 3
50037: PPUSH
50038: CALL_OW 259
50042: PUSH
50043: LD_INT 4
50045: MUL
50046: MUL
50047: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50048: LD_VAR 0 6
50052: PPUSH
50053: CALL_OW 263
50057: PUSH
50058: LD_INT 2
50060: EQUAL
50061: IFFALSE 50112
// begin j := IsControledBy ( i ) ;
50063: LD_ADDR_VAR 0 7
50067: PUSH
50068: LD_VAR 0 6
50072: PPUSH
50073: CALL_OW 312
50077: ST_TO_ADDR
// if j then
50078: LD_VAR 0 7
50082: IFFALSE 50112
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50084: LD_ADDR_VAR 0 10
50088: PUSH
50089: LD_VAR 0 10
50093: PUSH
50094: LD_VAR 0 7
50098: PPUSH
50099: LD_INT 3
50101: PPUSH
50102: CALL_OW 259
50106: PUSH
50107: LD_INT 3
50109: MUL
50110: MUL
50111: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50112: LD_VAR 0 6
50116: PPUSH
50117: CALL_OW 264
50121: PUSH
50122: LD_INT 5
50124: PUSH
50125: LD_INT 6
50127: PUSH
50128: LD_INT 46
50130: PUSH
50131: LD_INT 44
50133: PUSH
50134: LD_INT 47
50136: PUSH
50137: LD_INT 45
50139: PUSH
50140: LD_INT 28
50142: PUSH
50143: LD_INT 7
50145: PUSH
50146: LD_INT 27
50148: PUSH
50149: LD_INT 29
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: IN
50164: IFFALSE 50184
50166: PUSH
50167: LD_VAR 0 1
50171: PPUSH
50172: LD_INT 52
50174: PPUSH
50175: CALL_OW 321
50179: PUSH
50180: LD_INT 2
50182: EQUAL
50183: AND
50184: IFFALSE 50201
// bpoints := bpoints * 1.2 ;
50186: LD_ADDR_VAR 0 10
50190: PUSH
50191: LD_VAR 0 10
50195: PUSH
50196: LD_REAL  1.20000000000000E+0000
50199: MUL
50200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50201: LD_VAR 0 6
50205: PPUSH
50206: CALL_OW 264
50210: PUSH
50211: LD_INT 6
50213: PUSH
50214: LD_INT 46
50216: PUSH
50217: LD_INT 47
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: IN
50225: IFFALSE 50242
// bpoints := bpoints * 1.2 ;
50227: LD_ADDR_VAR 0 10
50231: PUSH
50232: LD_VAR 0 10
50236: PUSH
50237: LD_REAL  1.20000000000000E+0000
50240: MUL
50241: ST_TO_ADDR
// end ; unit_building :
50242: GO 50256
50244: LD_INT 3
50246: DOUBLE
50247: EQUAL
50248: IFTRUE 50252
50250: GO 50255
50252: POP
// ; end ;
50253: GO 50256
50255: POP
// for j = 1 to 3 do
50256: LD_ADDR_VAR 0 7
50260: PUSH
50261: DOUBLE
50262: LD_INT 1
50264: DEC
50265: ST_TO_ADDR
50266: LD_INT 3
50268: PUSH
50269: FOR_TO
50270: IFFALSE 50323
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50272: LD_ADDR_VAR 0 5
50276: PUSH
50277: LD_VAR 0 5
50281: PPUSH
50282: LD_VAR 0 7
50286: PPUSH
50287: LD_VAR 0 5
50291: PUSH
50292: LD_VAR 0 7
50296: ARRAY
50297: PUSH
50298: LD_VAR 0 9
50302: PUSH
50303: LD_VAR 0 7
50307: ARRAY
50308: PUSH
50309: LD_VAR 0 10
50313: MUL
50314: PLUS
50315: PPUSH
50316: CALL_OW 1
50320: ST_TO_ADDR
50321: GO 50269
50323: POP
50324: POP
// end ;
50325: GO 48798
50327: POP
50328: POP
// result := Replace ( result , 4 , tmp ) ;
50329: LD_ADDR_VAR 0 5
50333: PUSH
50334: LD_VAR 0 5
50338: PPUSH
50339: LD_INT 4
50341: PPUSH
50342: LD_VAR 0 8
50346: PPUSH
50347: CALL_OW 1
50351: ST_TO_ADDR
// end ;
50352: LD_VAR 0 5
50356: RET
// export function DangerAtRange ( unit , range ) ; begin
50357: LD_INT 0
50359: PPUSH
// if not unit then
50360: LD_VAR 0 1
50364: NOT
50365: IFFALSE 50369
// exit ;
50367: GO 50414
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50369: LD_ADDR_VAR 0 3
50373: PUSH
50374: LD_VAR 0 1
50378: PPUSH
50379: CALL_OW 255
50383: PPUSH
50384: LD_VAR 0 1
50388: PPUSH
50389: CALL_OW 250
50393: PPUSH
50394: LD_VAR 0 1
50398: PPUSH
50399: CALL_OW 251
50403: PPUSH
50404: LD_VAR 0 2
50408: PPUSH
50409: CALL 48648 0 4
50413: ST_TO_ADDR
// end ;
50414: LD_VAR 0 3
50418: RET
// export function DangerInArea ( side , area ) ; begin
50419: LD_INT 0
50421: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50422: LD_ADDR_VAR 0 3
50426: PUSH
50427: LD_VAR 0 2
50431: PPUSH
50432: LD_INT 81
50434: PUSH
50435: LD_VAR 0 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PPUSH
50444: CALL_OW 70
50448: ST_TO_ADDR
// end ;
50449: LD_VAR 0 3
50453: RET
// export function IsExtension ( b ) ; begin
50454: LD_INT 0
50456: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50457: LD_ADDR_VAR 0 2
50461: PUSH
50462: LD_VAR 0 1
50466: PUSH
50467: LD_INT 23
50469: PUSH
50470: LD_INT 20
50472: PUSH
50473: LD_INT 22
50475: PUSH
50476: LD_INT 17
50478: PUSH
50479: LD_INT 24
50481: PUSH
50482: LD_INT 21
50484: PUSH
50485: LD_INT 19
50487: PUSH
50488: LD_INT 16
50490: PUSH
50491: LD_INT 25
50493: PUSH
50494: LD_INT 18
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: IN
50509: ST_TO_ADDR
// end ;
50510: LD_VAR 0 2
50514: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50515: LD_INT 0
50517: PPUSH
50518: PPUSH
50519: PPUSH
// result := [ ] ;
50520: LD_ADDR_VAR 0 4
50524: PUSH
50525: EMPTY
50526: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50527: LD_ADDR_VAR 0 5
50531: PUSH
50532: LD_VAR 0 2
50536: PPUSH
50537: LD_INT 21
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PPUSH
50547: CALL_OW 70
50551: ST_TO_ADDR
// if not tmp then
50552: LD_VAR 0 5
50556: NOT
50557: IFFALSE 50561
// exit ;
50559: GO 50625
// if checkLink then
50561: LD_VAR 0 3
50565: IFFALSE 50615
// begin for i in tmp do
50567: LD_ADDR_VAR 0 6
50571: PUSH
50572: LD_VAR 0 5
50576: PUSH
50577: FOR_IN
50578: IFFALSE 50613
// if GetBase ( i ) <> base then
50580: LD_VAR 0 6
50584: PPUSH
50585: CALL_OW 274
50589: PUSH
50590: LD_VAR 0 1
50594: NONEQUAL
50595: IFFALSE 50611
// ComLinkToBase ( base , i ) ;
50597: LD_VAR 0 1
50601: PPUSH
50602: LD_VAR 0 6
50606: PPUSH
50607: CALL_OW 169
50611: GO 50577
50613: POP
50614: POP
// end ; result := tmp ;
50615: LD_ADDR_VAR 0 4
50619: PUSH
50620: LD_VAR 0 5
50624: ST_TO_ADDR
// end ;
50625: LD_VAR 0 4
50629: RET
// export function ComComplete ( units , b ) ; var i ; begin
50630: LD_INT 0
50632: PPUSH
50633: PPUSH
// if not units then
50634: LD_VAR 0 1
50638: NOT
50639: IFFALSE 50643
// exit ;
50641: GO 50733
// for i in units do
50643: LD_ADDR_VAR 0 4
50647: PUSH
50648: LD_VAR 0 1
50652: PUSH
50653: FOR_IN
50654: IFFALSE 50731
// if BuildingStatus ( b ) = bs_build then
50656: LD_VAR 0 2
50660: PPUSH
50661: CALL_OW 461
50665: PUSH
50666: LD_INT 1
50668: EQUAL
50669: IFFALSE 50729
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50671: LD_VAR 0 4
50675: PPUSH
50676: LD_STRING h
50678: PUSH
50679: LD_VAR 0 2
50683: PPUSH
50684: CALL_OW 250
50688: PUSH
50689: LD_VAR 0 2
50693: PPUSH
50694: CALL_OW 251
50698: PUSH
50699: LD_VAR 0 2
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: PPUSH
50725: CALL_OW 446
50729: GO 50653
50731: POP
50732: POP
// end ;
50733: LD_VAR 0 3
50737: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50738: LD_INT 0
50740: PPUSH
50741: PPUSH
50742: PPUSH
50743: PPUSH
50744: PPUSH
50745: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50746: LD_VAR 0 1
50750: NOT
50751: IFTRUE 50768
50753: PUSH
50754: LD_VAR 0 1
50758: PPUSH
50759: CALL_OW 263
50763: PUSH
50764: LD_INT 2
50766: NONEQUAL
50767: OR
50768: IFFALSE 50772
// exit ;
50770: GO 51088
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50772: LD_ADDR_VAR 0 6
50776: PUSH
50777: LD_INT 22
50779: PUSH
50780: LD_VAR 0 1
50784: PPUSH
50785: CALL_OW 255
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 30
50799: PUSH
50800: LD_INT 36
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 34
50809: PUSH
50810: LD_INT 31
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PPUSH
50826: CALL_OW 69
50830: ST_TO_ADDR
// if not tmp then
50831: LD_VAR 0 6
50835: NOT
50836: IFFALSE 50840
// exit ;
50838: GO 51088
// result := [ ] ;
50840: LD_ADDR_VAR 0 2
50844: PUSH
50845: EMPTY
50846: ST_TO_ADDR
// for i in tmp do
50847: LD_ADDR_VAR 0 3
50851: PUSH
50852: LD_VAR 0 6
50856: PUSH
50857: FOR_IN
50858: IFFALSE 50929
// begin t := UnitsInside ( i ) ;
50860: LD_ADDR_VAR 0 4
50864: PUSH
50865: LD_VAR 0 3
50869: PPUSH
50870: CALL_OW 313
50874: ST_TO_ADDR
// if t then
50875: LD_VAR 0 4
50879: IFFALSE 50927
// for j in t do
50881: LD_ADDR_VAR 0 7
50885: PUSH
50886: LD_VAR 0 4
50890: PUSH
50891: FOR_IN
50892: IFFALSE 50925
// result := Replace ( result , result + 1 , j ) ;
50894: LD_ADDR_VAR 0 2
50898: PUSH
50899: LD_VAR 0 2
50903: PPUSH
50904: LD_VAR 0 2
50908: PUSH
50909: LD_INT 1
50911: PLUS
50912: PPUSH
50913: LD_VAR 0 7
50917: PPUSH
50918: CALL_OW 1
50922: ST_TO_ADDR
50923: GO 50891
50925: POP
50926: POP
// end ;
50927: GO 50857
50929: POP
50930: POP
// if not result then
50931: LD_VAR 0 2
50935: NOT
50936: IFFALSE 50940
// exit ;
50938: GO 51088
// mech := result [ 1 ] ;
50940: LD_ADDR_VAR 0 5
50944: PUSH
50945: LD_VAR 0 2
50949: PUSH
50950: LD_INT 1
50952: ARRAY
50953: ST_TO_ADDR
// if result > 1 then
50954: LD_VAR 0 2
50958: PUSH
50959: LD_INT 1
50961: GREATER
50962: IFFALSE 51074
// begin for i = 2 to result do
50964: LD_ADDR_VAR 0 3
50968: PUSH
50969: DOUBLE
50970: LD_INT 2
50972: DEC
50973: ST_TO_ADDR
50974: LD_VAR 0 2
50978: PUSH
50979: FOR_TO
50980: IFFALSE 51072
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50982: LD_ADDR_VAR 0 4
50986: PUSH
50987: LD_VAR 0 2
50991: PUSH
50992: LD_VAR 0 3
50996: ARRAY
50997: PPUSH
50998: LD_INT 3
51000: PPUSH
51001: CALL_OW 259
51005: PUSH
51006: LD_VAR 0 2
51010: PUSH
51011: LD_VAR 0 3
51015: ARRAY
51016: PPUSH
51017: CALL_OW 432
51021: MINUS
51022: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51023: LD_VAR 0 4
51027: PUSH
51028: LD_VAR 0 5
51032: PPUSH
51033: LD_INT 3
51035: PPUSH
51036: CALL_OW 259
51040: PUSH
51041: LD_VAR 0 5
51045: PPUSH
51046: CALL_OW 432
51050: MINUS
51051: GREATEREQUAL
51052: IFFALSE 51070
// mech := result [ i ] ;
51054: LD_ADDR_VAR 0 5
51058: PUSH
51059: LD_VAR 0 2
51063: PUSH
51064: LD_VAR 0 3
51068: ARRAY
51069: ST_TO_ADDR
// end ;
51070: GO 50979
51072: POP
51073: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51074: LD_VAR 0 1
51078: PPUSH
51079: LD_VAR 0 5
51083: PPUSH
51084: CALL_OW 135
// end ;
51088: LD_VAR 0 2
51092: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51093: LD_INT 0
51095: PPUSH
51096: PPUSH
51097: PPUSH
51098: PPUSH
51099: PPUSH
51100: PPUSH
51101: PPUSH
51102: PPUSH
51103: PPUSH
51104: PPUSH
51105: PPUSH
51106: PPUSH
51107: PPUSH
// result := [ ] ;
51108: LD_ADDR_VAR 0 7
51112: PUSH
51113: EMPTY
51114: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51115: LD_VAR 0 1
51119: PPUSH
51120: CALL_OW 266
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: IN
51135: NOT
51136: IFFALSE 51140
// exit ;
51138: GO 52780
// if name then
51140: LD_VAR 0 3
51144: IFFALSE 51160
// SetBName ( base_dep , name ) ;
51146: LD_VAR 0 1
51150: PPUSH
51151: LD_VAR 0 3
51155: PPUSH
51156: CALL_OW 500
// base := GetBase ( base_dep ) ;
51160: LD_ADDR_VAR 0 15
51164: PUSH
51165: LD_VAR 0 1
51169: PPUSH
51170: CALL_OW 274
51174: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51175: LD_ADDR_VAR 0 16
51179: PUSH
51180: LD_VAR 0 1
51184: PPUSH
51185: CALL_OW 255
51189: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51190: LD_ADDR_VAR 0 17
51194: PUSH
51195: LD_VAR 0 1
51199: PPUSH
51200: CALL_OW 248
51204: ST_TO_ADDR
// if sources then
51205: LD_VAR 0 5
51209: IFFALSE 51256
// for i = 1 to 3 do
51211: LD_ADDR_VAR 0 8
51215: PUSH
51216: DOUBLE
51217: LD_INT 1
51219: DEC
51220: ST_TO_ADDR
51221: LD_INT 3
51223: PUSH
51224: FOR_TO
51225: IFFALSE 51254
// AddResourceType ( base , i , sources [ i ] ) ;
51227: LD_VAR 0 15
51231: PPUSH
51232: LD_VAR 0 8
51236: PPUSH
51237: LD_VAR 0 5
51241: PUSH
51242: LD_VAR 0 8
51246: ARRAY
51247: PPUSH
51248: CALL_OW 276
51252: GO 51224
51254: POP
51255: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51256: LD_ADDR_VAR 0 18
51260: PUSH
51261: LD_VAR 0 15
51265: PPUSH
51266: LD_VAR 0 2
51270: PPUSH
51271: LD_INT 1
51273: PPUSH
51274: CALL 50515 0 3
51278: ST_TO_ADDR
// InitHc ;
51279: CALL_OW 19
// InitUc ;
51283: CALL_OW 18
// uc_side := side ;
51287: LD_ADDR_OWVAR 20
51291: PUSH
51292: LD_VAR 0 16
51296: ST_TO_ADDR
// uc_nation := nation ;
51297: LD_ADDR_OWVAR 21
51301: PUSH
51302: LD_VAR 0 17
51306: ST_TO_ADDR
// if buildings then
51307: LD_VAR 0 18
51311: IFFALSE 52639
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51313: LD_ADDR_VAR 0 19
51317: PUSH
51318: LD_VAR 0 18
51322: PPUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 30
51328: PUSH
51329: LD_INT 29
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 30
51338: PUSH
51339: LD_INT 30
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: PPUSH
51351: CALL_OW 72
51355: ST_TO_ADDR
// if tmp then
51356: LD_VAR 0 19
51360: IFFALSE 51408
// for i in tmp do
51362: LD_ADDR_VAR 0 8
51366: PUSH
51367: LD_VAR 0 19
51371: PUSH
51372: FOR_IN
51373: IFFALSE 51406
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51375: LD_VAR 0 8
51379: PPUSH
51380: CALL_OW 250
51384: PPUSH
51385: LD_VAR 0 8
51389: PPUSH
51390: CALL_OW 251
51394: PPUSH
51395: LD_VAR 0 16
51399: PPUSH
51400: CALL_OW 441
51404: GO 51372
51406: POP
51407: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51408: LD_VAR 0 18
51412: PPUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 30
51418: PUSH
51419: LD_INT 32
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 30
51428: PUSH
51429: LD_INT 33
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: PPUSH
51441: CALL_OW 72
51445: IFFALSE 51533
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51447: LD_ADDR_VAR 0 8
51451: PUSH
51452: LD_VAR 0 18
51456: PPUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 30
51462: PUSH
51463: LD_INT 32
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 30
51472: PUSH
51473: LD_INT 33
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: PPUSH
51485: CALL_OW 72
51489: PUSH
51490: FOR_IN
51491: IFFALSE 51531
// begin if not GetBWeapon ( i ) then
51493: LD_VAR 0 8
51497: PPUSH
51498: CALL_OW 269
51502: NOT
51503: IFFALSE 51529
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51505: LD_VAR 0 8
51509: PPUSH
51510: LD_VAR 0 8
51514: PPUSH
51515: LD_VAR 0 2
51519: PPUSH
51520: CALL 52785 0 2
51524: PPUSH
51525: CALL_OW 431
// end ;
51529: GO 51490
51531: POP
51532: POP
// end ; for i = 1 to personel do
51533: LD_ADDR_VAR 0 8
51537: PUSH
51538: DOUBLE
51539: LD_INT 1
51541: DEC
51542: ST_TO_ADDR
51543: LD_VAR 0 6
51547: PUSH
51548: FOR_TO
51549: IFFALSE 52619
// begin if i > 4 then
51551: LD_VAR 0 8
51555: PUSH
51556: LD_INT 4
51558: GREATER
51559: IFFALSE 51563
// break ;
51561: GO 52619
// case i of 1 :
51563: LD_VAR 0 8
51567: PUSH
51568: LD_INT 1
51570: DOUBLE
51571: EQUAL
51572: IFTRUE 51576
51574: GO 51656
51576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51577: LD_ADDR_VAR 0 12
51581: PUSH
51582: LD_VAR 0 18
51586: PPUSH
51587: LD_INT 22
51589: PUSH
51590: LD_VAR 0 16
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 58
51601: PUSH
51602: EMPTY
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: LD_INT 30
51610: PUSH
51611: LD_INT 32
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 30
51620: PUSH
51621: LD_INT 4
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 30
51630: PUSH
51631: LD_INT 5
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: PPUSH
51649: CALL_OW 72
51653: ST_TO_ADDR
51654: GO 51878
51656: LD_INT 2
51658: DOUBLE
51659: EQUAL
51660: IFTRUE 51664
51662: GO 51726
51664: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51665: LD_ADDR_VAR 0 12
51669: PUSH
51670: LD_VAR 0 18
51674: PPUSH
51675: LD_INT 22
51677: PUSH
51678: LD_VAR 0 16
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 30
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 30
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PPUSH
51719: CALL_OW 72
51723: ST_TO_ADDR
51724: GO 51878
51726: LD_INT 3
51728: DOUBLE
51729: EQUAL
51730: IFTRUE 51734
51732: GO 51796
51734: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51735: LD_ADDR_VAR 0 12
51739: PUSH
51740: LD_VAR 0 18
51744: PPUSH
51745: LD_INT 22
51747: PUSH
51748: LD_VAR 0 16
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 30
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 30
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PPUSH
51789: CALL_OW 72
51793: ST_TO_ADDR
51794: GO 51878
51796: LD_INT 4
51798: DOUBLE
51799: EQUAL
51800: IFTRUE 51804
51802: GO 51877
51804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51805: LD_ADDR_VAR 0 12
51809: PUSH
51810: LD_VAR 0 18
51814: PPUSH
51815: LD_INT 22
51817: PUSH
51818: LD_VAR 0 16
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 30
51832: PUSH
51833: LD_INT 6
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 30
51842: PUSH
51843: LD_INT 7
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 30
51852: PUSH
51853: LD_INT 8
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PPUSH
51870: CALL_OW 72
51874: ST_TO_ADDR
51875: GO 51878
51877: POP
// if i = 1 then
51878: LD_VAR 0 8
51882: PUSH
51883: LD_INT 1
51885: EQUAL
51886: IFFALSE 51997
// begin tmp := [ ] ;
51888: LD_ADDR_VAR 0 19
51892: PUSH
51893: EMPTY
51894: ST_TO_ADDR
// for j in f do
51895: LD_ADDR_VAR 0 9
51899: PUSH
51900: LD_VAR 0 12
51904: PUSH
51905: FOR_IN
51906: IFFALSE 51979
// if GetBType ( j ) = b_bunker then
51908: LD_VAR 0 9
51912: PPUSH
51913: CALL_OW 266
51917: PUSH
51918: LD_INT 32
51920: EQUAL
51921: IFFALSE 51948
// tmp := Insert ( tmp , 1 , j ) else
51923: LD_ADDR_VAR 0 19
51927: PUSH
51928: LD_VAR 0 19
51932: PPUSH
51933: LD_INT 1
51935: PPUSH
51936: LD_VAR 0 9
51940: PPUSH
51941: CALL_OW 2
51945: ST_TO_ADDR
51946: GO 51977
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51948: LD_ADDR_VAR 0 19
51952: PUSH
51953: LD_VAR 0 19
51957: PPUSH
51958: LD_VAR 0 19
51962: PUSH
51963: LD_INT 1
51965: PLUS
51966: PPUSH
51967: LD_VAR 0 9
51971: PPUSH
51972: CALL_OW 2
51976: ST_TO_ADDR
51977: GO 51905
51979: POP
51980: POP
// if tmp then
51981: LD_VAR 0 19
51985: IFFALSE 51997
// f := tmp ;
51987: LD_ADDR_VAR 0 12
51991: PUSH
51992: LD_VAR 0 19
51996: ST_TO_ADDR
// end ; x := personel [ i ] ;
51997: LD_ADDR_VAR 0 13
52001: PUSH
52002: LD_VAR 0 6
52006: PUSH
52007: LD_VAR 0 8
52011: ARRAY
52012: ST_TO_ADDR
// if x = - 1 then
52013: LD_VAR 0 13
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: EQUAL
52022: IFFALSE 52233
// begin for j in f do
52024: LD_ADDR_VAR 0 9
52028: PUSH
52029: LD_VAR 0 12
52033: PUSH
52034: FOR_IN
52035: IFFALSE 52229
// repeat InitHc ;
52037: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52041: LD_VAR 0 9
52045: PPUSH
52046: CALL_OW 266
52050: PUSH
52051: LD_INT 5
52053: EQUAL
52054: IFFALSE 52124
// begin if UnitsInside ( j ) < 3 then
52056: LD_VAR 0 9
52060: PPUSH
52061: CALL_OW 313
52065: PUSH
52066: LD_INT 3
52068: LESS
52069: IFFALSE 52105
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52071: LD_INT 0
52073: PPUSH
52074: LD_INT 5
52076: PUSH
52077: LD_INT 8
52079: PUSH
52080: LD_INT 9
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: PUSH
52088: LD_VAR 0 17
52092: ARRAY
52093: PPUSH
52094: LD_VAR 0 4
52098: PPUSH
52099: CALL_OW 380
52103: GO 52122
// PrepareHuman ( false , i , skill ) ;
52105: LD_INT 0
52107: PPUSH
52108: LD_VAR 0 8
52112: PPUSH
52113: LD_VAR 0 4
52117: PPUSH
52118: CALL_OW 380
// end else
52122: GO 52141
// PrepareHuman ( false , i , skill ) ;
52124: LD_INT 0
52126: PPUSH
52127: LD_VAR 0 8
52131: PPUSH
52132: LD_VAR 0 4
52136: PPUSH
52137: CALL_OW 380
// un := CreateHuman ;
52141: LD_ADDR_VAR 0 14
52145: PUSH
52146: CALL_OW 44
52150: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52151: LD_ADDR_VAR 0 7
52155: PUSH
52156: LD_VAR 0 7
52160: PPUSH
52161: LD_INT 1
52163: PPUSH
52164: LD_VAR 0 14
52168: PPUSH
52169: CALL_OW 2
52173: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52174: LD_VAR 0 14
52178: PPUSH
52179: LD_VAR 0 9
52183: PPUSH
52184: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52188: LD_VAR 0 9
52192: PPUSH
52193: CALL_OW 313
52197: PUSH
52198: LD_INT 6
52200: EQUAL
52201: IFTRUE 52225
52203: PUSH
52204: LD_VAR 0 9
52208: PPUSH
52209: CALL_OW 266
52213: PUSH
52214: LD_INT 32
52216: PUSH
52217: LD_INT 31
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: IN
52224: OR
52225: IFFALSE 52037
52227: GO 52034
52229: POP
52230: POP
// end else
52231: GO 52617
// for j = 1 to x do
52233: LD_ADDR_VAR 0 9
52237: PUSH
52238: DOUBLE
52239: LD_INT 1
52241: DEC
52242: ST_TO_ADDR
52243: LD_VAR 0 13
52247: PUSH
52248: FOR_TO
52249: IFFALSE 52615
// begin InitHc ;
52251: CALL_OW 19
// if not f then
52255: LD_VAR 0 12
52259: NOT
52260: IFFALSE 52349
// begin PrepareHuman ( false , i , skill ) ;
52262: LD_INT 0
52264: PPUSH
52265: LD_VAR 0 8
52269: PPUSH
52270: LD_VAR 0 4
52274: PPUSH
52275: CALL_OW 380
// un := CreateHuman ;
52279: LD_ADDR_VAR 0 14
52283: PUSH
52284: CALL_OW 44
52288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52289: LD_ADDR_VAR 0 7
52293: PUSH
52294: LD_VAR 0 7
52298: PPUSH
52299: LD_INT 1
52301: PPUSH
52302: LD_VAR 0 14
52306: PPUSH
52307: CALL_OW 2
52311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52312: LD_VAR 0 14
52316: PPUSH
52317: LD_VAR 0 1
52321: PPUSH
52322: CALL_OW 250
52326: PPUSH
52327: LD_VAR 0 1
52331: PPUSH
52332: CALL_OW 251
52336: PPUSH
52337: LD_INT 10
52339: PPUSH
52340: LD_INT 0
52342: PPUSH
52343: CALL_OW 50
// continue ;
52347: GO 52248
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52349: LD_VAR 0 12
52353: PUSH
52354: LD_INT 1
52356: ARRAY
52357: PPUSH
52358: CALL_OW 313
52362: IFFALSE 52390
52364: PUSH
52365: LD_VAR 0 12
52369: PUSH
52370: LD_INT 1
52372: ARRAY
52373: PPUSH
52374: CALL_OW 266
52378: PUSH
52379: LD_INT 32
52381: PUSH
52382: LD_INT 31
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: IN
52389: AND
52390: IFTRUE 52411
52392: PUSH
52393: LD_VAR 0 12
52397: PUSH
52398: LD_INT 1
52400: ARRAY
52401: PPUSH
52402: CALL_OW 313
52406: PUSH
52407: LD_INT 6
52409: EQUAL
52410: OR
52411: IFFALSE 52431
// f := Delete ( f , 1 ) ;
52413: LD_ADDR_VAR 0 12
52417: PUSH
52418: LD_VAR 0 12
52422: PPUSH
52423: LD_INT 1
52425: PPUSH
52426: CALL_OW 3
52430: ST_TO_ADDR
// if not f then
52431: LD_VAR 0 12
52435: NOT
52436: IFFALSE 52454
// begin x := x + 2 ;
52438: LD_ADDR_VAR 0 13
52442: PUSH
52443: LD_VAR 0 13
52447: PUSH
52448: LD_INT 2
52450: PLUS
52451: ST_TO_ADDR
// continue ;
52452: GO 52248
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52454: LD_VAR 0 12
52458: PUSH
52459: LD_INT 1
52461: ARRAY
52462: PPUSH
52463: CALL_OW 266
52467: PUSH
52468: LD_INT 5
52470: EQUAL
52471: IFFALSE 52545
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52473: LD_VAR 0 12
52477: PUSH
52478: LD_INT 1
52480: ARRAY
52481: PPUSH
52482: CALL_OW 313
52486: PUSH
52487: LD_INT 3
52489: LESS
52490: IFFALSE 52526
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52492: LD_INT 0
52494: PPUSH
52495: LD_INT 5
52497: PUSH
52498: LD_INT 8
52500: PUSH
52501: LD_INT 9
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: LIST
52508: PUSH
52509: LD_VAR 0 17
52513: ARRAY
52514: PPUSH
52515: LD_VAR 0 4
52519: PPUSH
52520: CALL_OW 380
52524: GO 52543
// PrepareHuman ( false , i , skill ) ;
52526: LD_INT 0
52528: PPUSH
52529: LD_VAR 0 8
52533: PPUSH
52534: LD_VAR 0 4
52538: PPUSH
52539: CALL_OW 380
// end else
52543: GO 52562
// PrepareHuman ( false , i , skill ) ;
52545: LD_INT 0
52547: PPUSH
52548: LD_VAR 0 8
52552: PPUSH
52553: LD_VAR 0 4
52557: PPUSH
52558: CALL_OW 380
// un := CreateHuman ;
52562: LD_ADDR_VAR 0 14
52566: PUSH
52567: CALL_OW 44
52571: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52572: LD_ADDR_VAR 0 7
52576: PUSH
52577: LD_VAR 0 7
52581: PPUSH
52582: LD_INT 1
52584: PPUSH
52585: LD_VAR 0 14
52589: PPUSH
52590: CALL_OW 2
52594: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52595: LD_VAR 0 14
52599: PPUSH
52600: LD_VAR 0 12
52604: PUSH
52605: LD_INT 1
52607: ARRAY
52608: PPUSH
52609: CALL_OW 52
// end ;
52613: GO 52248
52615: POP
52616: POP
// end ;
52617: GO 51548
52619: POP
52620: POP
// result := result ^ buildings ;
52621: LD_ADDR_VAR 0 7
52625: PUSH
52626: LD_VAR 0 7
52630: PUSH
52631: LD_VAR 0 18
52635: ADD
52636: ST_TO_ADDR
// end else
52637: GO 52780
// begin for i = 1 to personel do
52639: LD_ADDR_VAR 0 8
52643: PUSH
52644: DOUBLE
52645: LD_INT 1
52647: DEC
52648: ST_TO_ADDR
52649: LD_VAR 0 6
52653: PUSH
52654: FOR_TO
52655: IFFALSE 52778
// begin if i > 4 then
52657: LD_VAR 0 8
52661: PUSH
52662: LD_INT 4
52664: GREATER
52665: IFFALSE 52669
// break ;
52667: GO 52778
// x := personel [ i ] ;
52669: LD_ADDR_VAR 0 13
52673: PUSH
52674: LD_VAR 0 6
52678: PUSH
52679: LD_VAR 0 8
52683: ARRAY
52684: ST_TO_ADDR
// if x = - 1 then
52685: LD_VAR 0 13
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: EQUAL
52694: IFFALSE 52698
// continue ;
52696: GO 52654
// PrepareHuman ( false , i , skill ) ;
52698: LD_INT 0
52700: PPUSH
52701: LD_VAR 0 8
52705: PPUSH
52706: LD_VAR 0 4
52710: PPUSH
52711: CALL_OW 380
// un := CreateHuman ;
52715: LD_ADDR_VAR 0 14
52719: PUSH
52720: CALL_OW 44
52724: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52725: LD_VAR 0 14
52729: PPUSH
52730: LD_VAR 0 1
52734: PPUSH
52735: CALL_OW 250
52739: PPUSH
52740: LD_VAR 0 1
52744: PPUSH
52745: CALL_OW 251
52749: PPUSH
52750: LD_INT 10
52752: PPUSH
52753: LD_INT 0
52755: PPUSH
52756: CALL_OW 50
// result := result ^ un ;
52760: LD_ADDR_VAR 0 7
52764: PUSH
52765: LD_VAR 0 7
52769: PUSH
52770: LD_VAR 0 14
52774: ADD
52775: ST_TO_ADDR
// end ;
52776: GO 52654
52778: POP
52779: POP
// end ; end ;
52780: LD_VAR 0 7
52784: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52785: LD_INT 0
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
52792: PPUSH
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
52799: PPUSH
52800: PPUSH
52801: PPUSH
52802: PPUSH
// result := false ;
52803: LD_ADDR_VAR 0 3
52807: PUSH
52808: LD_INT 0
52810: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52811: LD_VAR 0 1
52815: NOT
52816: IFTRUE 52841
52818: PUSH
52819: LD_VAR 0 1
52823: PPUSH
52824: CALL_OW 266
52828: PUSH
52829: LD_INT 32
52831: PUSH
52832: LD_INT 33
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: IN
52839: NOT
52840: OR
52841: IFFALSE 52845
// exit ;
52843: GO 53980
// nat := GetNation ( tower ) ;
52845: LD_ADDR_VAR 0 12
52849: PUSH
52850: LD_VAR 0 1
52854: PPUSH
52855: CALL_OW 248
52859: ST_TO_ADDR
// side := GetSide ( tower ) ;
52860: LD_ADDR_VAR 0 16
52864: PUSH
52865: LD_VAR 0 1
52869: PPUSH
52870: CALL_OW 255
52874: ST_TO_ADDR
// x := GetX ( tower ) ;
52875: LD_ADDR_VAR 0 10
52879: PUSH
52880: LD_VAR 0 1
52884: PPUSH
52885: CALL_OW 250
52889: ST_TO_ADDR
// y := GetY ( tower ) ;
52890: LD_ADDR_VAR 0 11
52894: PUSH
52895: LD_VAR 0 1
52899: PPUSH
52900: CALL_OW 251
52904: ST_TO_ADDR
// if not x or not y then
52905: LD_VAR 0 10
52909: NOT
52910: IFTRUE 52919
52912: PUSH
52913: LD_VAR 0 11
52917: NOT
52918: OR
52919: IFFALSE 52923
// exit ;
52921: GO 53980
// weapon := 0 ;
52923: LD_ADDR_VAR 0 18
52927: PUSH
52928: LD_INT 0
52930: ST_TO_ADDR
// fac_list := [ ] ;
52931: LD_ADDR_VAR 0 17
52935: PUSH
52936: EMPTY
52937: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52938: LD_ADDR_VAR 0 6
52942: PUSH
52943: LD_VAR 0 1
52947: PPUSH
52948: CALL_OW 274
52952: PPUSH
52953: LD_VAR 0 2
52957: PPUSH
52958: LD_INT 0
52960: PPUSH
52961: CALL 50515 0 3
52965: PPUSH
52966: LD_INT 30
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PPUSH
52976: CALL_OW 72
52980: ST_TO_ADDR
// if not factories then
52981: LD_VAR 0 6
52985: NOT
52986: IFFALSE 52990
// exit ;
52988: GO 53980
// for i in factories do
52990: LD_ADDR_VAR 0 8
52994: PUSH
52995: LD_VAR 0 6
52999: PUSH
53000: FOR_IN
53001: IFFALSE 53026
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53003: LD_ADDR_VAR 0 17
53007: PUSH
53008: LD_VAR 0 17
53012: PUSH
53013: LD_VAR 0 8
53017: PPUSH
53018: CALL_OW 478
53022: UNION
53023: ST_TO_ADDR
53024: GO 53000
53026: POP
53027: POP
// if not fac_list then
53028: LD_VAR 0 17
53032: NOT
53033: IFFALSE 53037
// exit ;
53035: GO 53980
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53037: LD_ADDR_VAR 0 5
53041: PUSH
53042: LD_INT 4
53044: PUSH
53045: LD_INT 5
53047: PUSH
53048: LD_INT 9
53050: PUSH
53051: LD_INT 10
53053: PUSH
53054: LD_INT 6
53056: PUSH
53057: LD_INT 7
53059: PUSH
53060: LD_INT 11
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 27
53074: PUSH
53075: LD_INT 28
53077: PUSH
53078: LD_INT 26
53080: PUSH
53081: LD_INT 30
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 43
53092: PUSH
53093: LD_INT 44
53095: PUSH
53096: LD_INT 46
53098: PUSH
53099: LD_INT 45
53101: PUSH
53102: LD_INT 47
53104: PUSH
53105: LD_INT 49
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: LD_VAR 0 12
53125: ARRAY
53126: ST_TO_ADDR
// list := list isect fac_list ;
53127: LD_ADDR_VAR 0 5
53131: PUSH
53132: LD_VAR 0 5
53136: PUSH
53137: LD_VAR 0 17
53141: ISECT
53142: ST_TO_ADDR
// if not list then
53143: LD_VAR 0 5
53147: NOT
53148: IFFALSE 53152
// exit ;
53150: GO 53980
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53152: LD_VAR 0 12
53156: PUSH
53157: LD_INT 3
53159: EQUAL
53160: IFFALSE 53172
53162: PUSH
53163: LD_INT 49
53165: PUSH
53166: LD_VAR 0 5
53170: IN
53171: AND
53172: IFFALSE 53192
53174: PUSH
53175: LD_INT 31
53177: PPUSH
53178: LD_VAR 0 16
53182: PPUSH
53183: CALL_OW 321
53187: PUSH
53188: LD_INT 2
53190: EQUAL
53191: AND
53192: IFFALSE 53252
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53194: LD_INT 22
53196: PUSH
53197: LD_VAR 0 16
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 35
53208: PUSH
53209: LD_INT 49
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 91
53218: PUSH
53219: LD_VAR 0 1
53223: PUSH
53224: LD_INT 10
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: PPUSH
53237: CALL_OW 69
53241: NOT
53242: IFFALSE 53252
// weapon := ru_time_lapser ;
53244: LD_ADDR_VAR 0 18
53248: PUSH
53249: LD_INT 49
53251: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53252: LD_VAR 0 12
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: IN
53267: IFFALSE 53291
53269: PUSH
53270: LD_INT 11
53272: PUSH
53273: LD_VAR 0 5
53277: IN
53278: IFTRUE 53290
53280: PUSH
53281: LD_INT 30
53283: PUSH
53284: LD_VAR 0 5
53288: IN
53289: OR
53290: AND
53291: IFFALSE 53311
53293: PUSH
53294: LD_INT 6
53296: PPUSH
53297: LD_VAR 0 16
53301: PPUSH
53302: CALL_OW 321
53306: PUSH
53307: LD_INT 2
53309: EQUAL
53310: AND
53311: IFFALSE 53478
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53313: LD_INT 22
53315: PUSH
53316: LD_VAR 0 16
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: LD_INT 35
53330: PUSH
53331: LD_INT 11
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 35
53340: PUSH
53341: LD_INT 30
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 91
53355: PUSH
53356: LD_VAR 0 1
53360: PUSH
53361: LD_INT 18
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: PPUSH
53374: CALL_OW 69
53378: NOT
53379: IFFALSE 53455
53381: PUSH
53382: LD_INT 22
53384: PUSH
53385: LD_VAR 0 16
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 30
53399: PUSH
53400: LD_INT 32
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 30
53409: PUSH
53410: LD_INT 33
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 91
53424: PUSH
53425: LD_VAR 0 1
53429: PUSH
53430: LD_INT 12
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: PPUSH
53446: CALL_OW 69
53450: PUSH
53451: LD_INT 2
53453: GREATER
53454: AND
53455: IFFALSE 53478
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53457: LD_ADDR_VAR 0 18
53461: PUSH
53462: LD_INT 11
53464: PUSH
53465: LD_INT 30
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_VAR 0 12
53476: ARRAY
53477: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53478: LD_VAR 0 18
53482: NOT
53483: IFFALSE 53503
53485: PUSH
53486: LD_INT 40
53488: PPUSH
53489: LD_VAR 0 16
53493: PPUSH
53494: CALL_OW 321
53498: PUSH
53499: LD_INT 2
53501: EQUAL
53502: AND
53503: IFFALSE 53539
53505: PUSH
53506: LD_INT 7
53508: PUSH
53509: LD_VAR 0 5
53513: IN
53514: IFTRUE 53526
53516: PUSH
53517: LD_INT 28
53519: PUSH
53520: LD_VAR 0 5
53524: IN
53525: OR
53526: IFTRUE 53538
53528: PUSH
53529: LD_INT 45
53531: PUSH
53532: LD_VAR 0 5
53536: IN
53537: OR
53538: AND
53539: IFFALSE 53793
// begin hex := GetHexInfo ( x , y ) ;
53541: LD_ADDR_VAR 0 4
53545: PUSH
53546: LD_VAR 0 10
53550: PPUSH
53551: LD_VAR 0 11
53555: PPUSH
53556: CALL_OW 546
53560: ST_TO_ADDR
// if hex [ 1 ] then
53561: LD_VAR 0 4
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: IFFALSE 53573
// exit ;
53571: GO 53980
// height := hex [ 2 ] ;
53573: LD_ADDR_VAR 0 15
53577: PUSH
53578: LD_VAR 0 4
53582: PUSH
53583: LD_INT 2
53585: ARRAY
53586: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53587: LD_ADDR_VAR 0 14
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 3
53600: PUSH
53601: LD_INT 5
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// for i in tmp do
53610: LD_ADDR_VAR 0 8
53614: PUSH
53615: LD_VAR 0 14
53619: PUSH
53620: FOR_IN
53621: IFFALSE 53791
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53623: LD_ADDR_VAR 0 9
53627: PUSH
53628: LD_VAR 0 10
53632: PPUSH
53633: LD_VAR 0 8
53637: PPUSH
53638: LD_INT 5
53640: PPUSH
53641: CALL_OW 272
53645: PUSH
53646: LD_VAR 0 11
53650: PPUSH
53651: LD_VAR 0 8
53655: PPUSH
53656: LD_INT 5
53658: PPUSH
53659: CALL_OW 273
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53668: LD_VAR 0 9
53672: PUSH
53673: LD_INT 1
53675: ARRAY
53676: PPUSH
53677: LD_VAR 0 9
53681: PUSH
53682: LD_INT 2
53684: ARRAY
53685: PPUSH
53686: CALL_OW 488
53690: IFFALSE 53789
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53692: LD_ADDR_VAR 0 4
53696: PUSH
53697: LD_VAR 0 9
53701: PUSH
53702: LD_INT 1
53704: ARRAY
53705: PPUSH
53706: LD_VAR 0 9
53710: PUSH
53711: LD_INT 2
53713: ARRAY
53714: PPUSH
53715: CALL_OW 546
53719: ST_TO_ADDR
// if hex [ 1 ] then
53720: LD_VAR 0 4
53724: PUSH
53725: LD_INT 1
53727: ARRAY
53728: IFFALSE 53732
// continue ;
53730: GO 53620
// h := hex [ 2 ] ;
53732: LD_ADDR_VAR 0 13
53736: PUSH
53737: LD_VAR 0 4
53741: PUSH
53742: LD_INT 2
53744: ARRAY
53745: ST_TO_ADDR
// if h + 7 < height then
53746: LD_VAR 0 13
53750: PUSH
53751: LD_INT 7
53753: PLUS
53754: PUSH
53755: LD_VAR 0 15
53759: LESS
53760: IFFALSE 53789
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53762: LD_ADDR_VAR 0 18
53766: PUSH
53767: LD_INT 7
53769: PUSH
53770: LD_INT 28
53772: PUSH
53773: LD_INT 45
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: PUSH
53781: LD_VAR 0 12
53785: ARRAY
53786: ST_TO_ADDR
// break ;
53787: GO 53791
// end ; end ; end ;
53789: GO 53620
53791: POP
53792: POP
// end ; if not weapon then
53793: LD_VAR 0 18
53797: NOT
53798: IFFALSE 53858
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53800: LD_ADDR_VAR 0 5
53804: PUSH
53805: LD_VAR 0 5
53809: PUSH
53810: LD_INT 11
53812: PUSH
53813: LD_INT 30
53815: PUSH
53816: LD_INT 49
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: DIFF
53824: ST_TO_ADDR
// if not list then
53825: LD_VAR 0 5
53829: NOT
53830: IFFALSE 53834
// exit ;
53832: GO 53980
// weapon := list [ rand ( 1 , list ) ] ;
53834: LD_ADDR_VAR 0 18
53838: PUSH
53839: LD_VAR 0 5
53843: PUSH
53844: LD_INT 1
53846: PPUSH
53847: LD_VAR 0 5
53851: PPUSH
53852: CALL_OW 12
53856: ARRAY
53857: ST_TO_ADDR
// end ; if weapon then
53858: LD_VAR 0 18
53862: IFFALSE 53980
// begin tmp := CostOfWeapon ( weapon ) ;
53864: LD_ADDR_VAR 0 14
53868: PUSH
53869: LD_VAR 0 18
53873: PPUSH
53874: CALL_OW 451
53878: ST_TO_ADDR
// j := GetBase ( tower ) ;
53879: LD_ADDR_VAR 0 9
53883: PUSH
53884: LD_VAR 0 1
53888: PPUSH
53889: CALL_OW 274
53893: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53894: LD_VAR 0 9
53898: PPUSH
53899: LD_INT 1
53901: PPUSH
53902: CALL_OW 275
53906: PUSH
53907: LD_VAR 0 14
53911: PUSH
53912: LD_INT 1
53914: ARRAY
53915: GREATEREQUAL
53916: IFFALSE 53942
53918: PUSH
53919: LD_VAR 0 9
53923: PPUSH
53924: LD_INT 2
53926: PPUSH
53927: CALL_OW 275
53931: PUSH
53932: LD_VAR 0 14
53936: PUSH
53937: LD_INT 2
53939: ARRAY
53940: GREATEREQUAL
53941: AND
53942: IFFALSE 53968
53944: PUSH
53945: LD_VAR 0 9
53949: PPUSH
53950: LD_INT 3
53952: PPUSH
53953: CALL_OW 275
53957: PUSH
53958: LD_VAR 0 14
53962: PUSH
53963: LD_INT 3
53965: ARRAY
53966: GREATEREQUAL
53967: AND
53968: IFFALSE 53980
// result := weapon ;
53970: LD_ADDR_VAR 0 3
53974: PUSH
53975: LD_VAR 0 18
53979: ST_TO_ADDR
// end ; end ;
53980: LD_VAR 0 3
53984: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53985: LD_INT 0
53987: PPUSH
53988: PPUSH
// result := true ;
53989: LD_ADDR_VAR 0 3
53993: PUSH
53994: LD_INT 1
53996: ST_TO_ADDR
// if array1 = array2 then
53997: LD_VAR 0 1
54001: PUSH
54002: LD_VAR 0 2
54006: EQUAL
54007: IFFALSE 54067
// begin for i = 1 to array1 do
54009: LD_ADDR_VAR 0 4
54013: PUSH
54014: DOUBLE
54015: LD_INT 1
54017: DEC
54018: ST_TO_ADDR
54019: LD_VAR 0 1
54023: PUSH
54024: FOR_TO
54025: IFFALSE 54063
// if array1 [ i ] <> array2 [ i ] then
54027: LD_VAR 0 1
54031: PUSH
54032: LD_VAR 0 4
54036: ARRAY
54037: PUSH
54038: LD_VAR 0 2
54042: PUSH
54043: LD_VAR 0 4
54047: ARRAY
54048: NONEQUAL
54049: IFFALSE 54061
// begin result := false ;
54051: LD_ADDR_VAR 0 3
54055: PUSH
54056: LD_INT 0
54058: ST_TO_ADDR
// break ;
54059: GO 54063
// end ;
54061: GO 54024
54063: POP
54064: POP
// end else
54065: GO 54075
// result := false ;
54067: LD_ADDR_VAR 0 3
54071: PUSH
54072: LD_INT 0
54074: ST_TO_ADDR
// end ;
54075: LD_VAR 0 3
54079: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54080: LD_INT 0
54082: PPUSH
54083: PPUSH
// if not array1 or not array2 then
54084: LD_VAR 0 1
54088: NOT
54089: IFTRUE 54098
54091: PUSH
54092: LD_VAR 0 2
54096: NOT
54097: OR
54098: IFFALSE 54102
// exit ;
54100: GO 54166
// result := true ;
54102: LD_ADDR_VAR 0 3
54106: PUSH
54107: LD_INT 1
54109: ST_TO_ADDR
// for i = 1 to array1 do
54110: LD_ADDR_VAR 0 4
54114: PUSH
54115: DOUBLE
54116: LD_INT 1
54118: DEC
54119: ST_TO_ADDR
54120: LD_VAR 0 1
54124: PUSH
54125: FOR_TO
54126: IFFALSE 54164
// if array1 [ i ] <> array2 [ i ] then
54128: LD_VAR 0 1
54132: PUSH
54133: LD_VAR 0 4
54137: ARRAY
54138: PUSH
54139: LD_VAR 0 2
54143: PUSH
54144: LD_VAR 0 4
54148: ARRAY
54149: NONEQUAL
54150: IFFALSE 54162
// begin result := false ;
54152: LD_ADDR_VAR 0 3
54156: PUSH
54157: LD_INT 0
54159: ST_TO_ADDR
// break ;
54160: GO 54164
// end ;
54162: GO 54125
54164: POP
54165: POP
// end ;
54166: LD_VAR 0 3
54170: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54171: LD_INT 0
54173: PPUSH
54174: PPUSH
54175: PPUSH
// pom := GetBase ( fac ) ;
54176: LD_ADDR_VAR 0 5
54180: PUSH
54181: LD_VAR 0 1
54185: PPUSH
54186: CALL_OW 274
54190: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54191: LD_ADDR_VAR 0 4
54195: PUSH
54196: LD_VAR 0 2
54200: PUSH
54201: LD_INT 1
54203: ARRAY
54204: PPUSH
54205: LD_VAR 0 2
54209: PUSH
54210: LD_INT 2
54212: ARRAY
54213: PPUSH
54214: LD_VAR 0 2
54218: PUSH
54219: LD_INT 3
54221: ARRAY
54222: PPUSH
54223: LD_VAR 0 2
54227: PUSH
54228: LD_INT 4
54230: ARRAY
54231: PPUSH
54232: CALL_OW 449
54236: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54237: LD_ADDR_VAR 0 3
54241: PUSH
54242: LD_VAR 0 5
54246: PPUSH
54247: LD_INT 1
54249: PPUSH
54250: CALL_OW 275
54254: PUSH
54255: LD_VAR 0 4
54259: PUSH
54260: LD_INT 1
54262: ARRAY
54263: GREATEREQUAL
54264: IFFALSE 54290
54266: PUSH
54267: LD_VAR 0 5
54271: PPUSH
54272: LD_INT 2
54274: PPUSH
54275: CALL_OW 275
54279: PUSH
54280: LD_VAR 0 4
54284: PUSH
54285: LD_INT 2
54287: ARRAY
54288: GREATEREQUAL
54289: AND
54290: IFFALSE 54316
54292: PUSH
54293: LD_VAR 0 5
54297: PPUSH
54298: LD_INT 3
54300: PPUSH
54301: CALL_OW 275
54305: PUSH
54306: LD_VAR 0 4
54310: PUSH
54311: LD_INT 3
54313: ARRAY
54314: GREATEREQUAL
54315: AND
54316: ST_TO_ADDR
// end ;
54317: LD_VAR 0 3
54321: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54322: LD_INT 0
54324: PPUSH
54325: PPUSH
54326: PPUSH
54327: PPUSH
// pom := GetBase ( building ) ;
54328: LD_ADDR_VAR 0 3
54332: PUSH
54333: LD_VAR 0 1
54337: PPUSH
54338: CALL_OW 274
54342: ST_TO_ADDR
// if not pom then
54343: LD_VAR 0 3
54347: NOT
54348: IFFALSE 54352
// exit ;
54350: GO 54526
// btype := GetBType ( building ) ;
54352: LD_ADDR_VAR 0 5
54356: PUSH
54357: LD_VAR 0 1
54361: PPUSH
54362: CALL_OW 266
54366: ST_TO_ADDR
// if btype = b_armoury then
54367: LD_VAR 0 5
54371: PUSH
54372: LD_INT 4
54374: EQUAL
54375: IFFALSE 54385
// btype := b_barracks ;
54377: LD_ADDR_VAR 0 5
54381: PUSH
54382: LD_INT 5
54384: ST_TO_ADDR
// if btype = b_depot then
54385: LD_VAR 0 5
54389: PUSH
54390: LD_INT 0
54392: EQUAL
54393: IFFALSE 54403
// btype := b_warehouse ;
54395: LD_ADDR_VAR 0 5
54399: PUSH
54400: LD_INT 1
54402: ST_TO_ADDR
// if btype = b_workshop then
54403: LD_VAR 0 5
54407: PUSH
54408: LD_INT 2
54410: EQUAL
54411: IFFALSE 54421
// btype := b_factory ;
54413: LD_ADDR_VAR 0 5
54417: PUSH
54418: LD_INT 3
54420: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54421: LD_ADDR_VAR 0 4
54425: PUSH
54426: LD_VAR 0 5
54430: PPUSH
54431: LD_VAR 0 1
54435: PPUSH
54436: CALL_OW 248
54440: PPUSH
54441: CALL_OW 450
54445: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54446: LD_ADDR_VAR 0 2
54450: PUSH
54451: LD_VAR 0 3
54455: PPUSH
54456: LD_INT 1
54458: PPUSH
54459: CALL_OW 275
54463: PUSH
54464: LD_VAR 0 4
54468: PUSH
54469: LD_INT 1
54471: ARRAY
54472: GREATEREQUAL
54473: IFFALSE 54499
54475: PUSH
54476: LD_VAR 0 3
54480: PPUSH
54481: LD_INT 2
54483: PPUSH
54484: CALL_OW 275
54488: PUSH
54489: LD_VAR 0 4
54493: PUSH
54494: LD_INT 2
54496: ARRAY
54497: GREATEREQUAL
54498: AND
54499: IFFALSE 54525
54501: PUSH
54502: LD_VAR 0 3
54506: PPUSH
54507: LD_INT 3
54509: PPUSH
54510: CALL_OW 275
54514: PUSH
54515: LD_VAR 0 4
54519: PUSH
54520: LD_INT 3
54522: ARRAY
54523: GREATEREQUAL
54524: AND
54525: ST_TO_ADDR
// end ;
54526: LD_VAR 0 2
54530: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54531: LD_INT 0
54533: PPUSH
54534: PPUSH
54535: PPUSH
// pom := GetBase ( building ) ;
54536: LD_ADDR_VAR 0 4
54540: PUSH
54541: LD_VAR 0 1
54545: PPUSH
54546: CALL_OW 274
54550: ST_TO_ADDR
// if not pom then
54551: LD_VAR 0 4
54555: NOT
54556: IFFALSE 54560
// exit ;
54558: GO 54665
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54560: LD_ADDR_VAR 0 5
54564: PUSH
54565: LD_VAR 0 2
54569: PPUSH
54570: LD_VAR 0 1
54574: PPUSH
54575: CALL_OW 248
54579: PPUSH
54580: CALL_OW 450
54584: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54585: LD_ADDR_VAR 0 3
54589: PUSH
54590: LD_VAR 0 4
54594: PPUSH
54595: LD_INT 1
54597: PPUSH
54598: CALL_OW 275
54602: PUSH
54603: LD_VAR 0 5
54607: PUSH
54608: LD_INT 1
54610: ARRAY
54611: GREATEREQUAL
54612: IFFALSE 54638
54614: PUSH
54615: LD_VAR 0 4
54619: PPUSH
54620: LD_INT 2
54622: PPUSH
54623: CALL_OW 275
54627: PUSH
54628: LD_VAR 0 5
54632: PUSH
54633: LD_INT 2
54635: ARRAY
54636: GREATEREQUAL
54637: AND
54638: IFFALSE 54664
54640: PUSH
54641: LD_VAR 0 4
54645: PPUSH
54646: LD_INT 3
54648: PPUSH
54649: CALL_OW 275
54653: PUSH
54654: LD_VAR 0 5
54658: PUSH
54659: LD_INT 3
54661: ARRAY
54662: GREATEREQUAL
54663: AND
54664: ST_TO_ADDR
// end ;
54665: LD_VAR 0 3
54669: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54670: LD_INT 0
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
54676: PPUSH
54677: PPUSH
54678: PPUSH
54679: PPUSH
54680: PPUSH
54681: PPUSH
54682: PPUSH
// result := false ;
54683: LD_ADDR_VAR 0 8
54687: PUSH
54688: LD_INT 0
54690: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54691: LD_VAR 0 5
54695: NOT
54696: IFTRUE 54705
54698: PUSH
54699: LD_VAR 0 1
54703: NOT
54704: OR
54705: IFTRUE 54714
54707: PUSH
54708: LD_VAR 0 2
54712: NOT
54713: OR
54714: IFTRUE 54723
54716: PUSH
54717: LD_VAR 0 3
54721: NOT
54722: OR
54723: IFFALSE 54727
// exit ;
54725: GO 55553
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54727: LD_ADDR_VAR 0 14
54731: PUSH
54732: LD_VAR 0 1
54736: PPUSH
54737: LD_VAR 0 2
54741: PPUSH
54742: LD_VAR 0 3
54746: PPUSH
54747: LD_VAR 0 4
54751: PPUSH
54752: LD_VAR 0 5
54756: PUSH
54757: LD_INT 1
54759: ARRAY
54760: PPUSH
54761: CALL_OW 248
54765: PPUSH
54766: LD_INT 0
54768: PPUSH
54769: CALL 56834 0 6
54773: ST_TO_ADDR
// if not hexes then
54774: LD_VAR 0 14
54778: NOT
54779: IFFALSE 54783
// exit ;
54781: GO 55553
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54783: LD_ADDR_VAR 0 17
54787: PUSH
54788: LD_VAR 0 5
54792: PPUSH
54793: LD_INT 22
54795: PUSH
54796: LD_VAR 0 13
54800: PPUSH
54801: CALL_OW 255
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 30
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 30
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PPUSH
54842: CALL_OW 72
54846: ST_TO_ADDR
// for i = 1 to hexes do
54847: LD_ADDR_VAR 0 9
54851: PUSH
54852: DOUBLE
54853: LD_INT 1
54855: DEC
54856: ST_TO_ADDR
54857: LD_VAR 0 14
54861: PUSH
54862: FOR_TO
54863: IFFALSE 55551
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54865: LD_ADDR_VAR 0 13
54869: PUSH
54870: LD_VAR 0 14
54874: PUSH
54875: LD_VAR 0 9
54879: ARRAY
54880: PUSH
54881: LD_INT 1
54883: ARRAY
54884: PPUSH
54885: LD_VAR 0 14
54889: PUSH
54890: LD_VAR 0 9
54894: ARRAY
54895: PUSH
54896: LD_INT 2
54898: ARRAY
54899: PPUSH
54900: CALL_OW 428
54904: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54905: LD_VAR 0 14
54909: PUSH
54910: LD_VAR 0 9
54914: ARRAY
54915: PUSH
54916: LD_INT 1
54918: ARRAY
54919: PPUSH
54920: LD_VAR 0 14
54924: PUSH
54925: LD_VAR 0 9
54929: ARRAY
54930: PUSH
54931: LD_INT 2
54933: ARRAY
54934: PPUSH
54935: CALL_OW 351
54939: IFTRUE 54978
54941: PUSH
54942: LD_VAR 0 14
54946: PUSH
54947: LD_VAR 0 9
54951: ARRAY
54952: PUSH
54953: LD_INT 1
54955: ARRAY
54956: PPUSH
54957: LD_VAR 0 14
54961: PUSH
54962: LD_VAR 0 9
54966: ARRAY
54967: PUSH
54968: LD_INT 2
54970: ARRAY
54971: PPUSH
54972: CALL_OW 488
54976: NOT
54977: OR
54978: IFTRUE 54995
54980: PUSH
54981: LD_VAR 0 13
54985: PPUSH
54986: CALL_OW 247
54990: PUSH
54991: LD_INT 3
54993: EQUAL
54994: OR
54995: IFFALSE 55001
// exit ;
54997: POP
54998: POP
54999: GO 55553
// if not tmp then
55001: LD_VAR 0 13
55005: NOT
55006: IFFALSE 55010
// continue ;
55008: GO 54862
// result := true ;
55010: LD_ADDR_VAR 0 8
55014: PUSH
55015: LD_INT 1
55017: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55018: LD_VAR 0 6
55022: IFFALSE 55039
55024: PUSH
55025: LD_VAR 0 13
55029: PPUSH
55030: CALL_OW 247
55034: PUSH
55035: LD_INT 2
55037: EQUAL
55038: AND
55039: IFFALSE 55056
55041: PUSH
55042: LD_VAR 0 13
55046: PPUSH
55047: CALL_OW 263
55051: PUSH
55052: LD_INT 1
55054: EQUAL
55055: AND
55056: IFFALSE 55220
// begin if IsDrivenBy ( tmp ) then
55058: LD_VAR 0 13
55062: PPUSH
55063: CALL_OW 311
55067: IFFALSE 55071
// continue ;
55069: GO 54862
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55071: LD_VAR 0 6
55075: PPUSH
55076: LD_INT 3
55078: PUSH
55079: LD_INT 60
55081: PUSH
55082: EMPTY
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: LD_INT 55
55094: PUSH
55095: EMPTY
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PPUSH
55106: CALL_OW 72
55110: IFFALSE 55218
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55112: LD_ADDR_VAR 0 18
55116: PUSH
55117: LD_VAR 0 6
55121: PPUSH
55122: LD_INT 3
55124: PUSH
55125: LD_INT 60
55127: PUSH
55128: EMPTY
55129: LIST
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: LD_INT 55
55140: PUSH
55141: EMPTY
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PPUSH
55152: CALL_OW 72
55156: PUSH
55157: LD_INT 1
55159: ARRAY
55160: ST_TO_ADDR
// if IsInUnit ( driver ) then
55161: LD_VAR 0 18
55165: PPUSH
55166: CALL_OW 310
55170: IFFALSE 55181
// ComExit ( driver ) ;
55172: LD_VAR 0 18
55176: PPUSH
55177: CALL 80834 0 1
// AddComEnterUnit ( driver , tmp ) ;
55181: LD_VAR 0 18
55185: PPUSH
55186: LD_VAR 0 13
55190: PPUSH
55191: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55195: LD_VAR 0 18
55199: PPUSH
55200: LD_VAR 0 7
55204: PPUSH
55205: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55209: LD_VAR 0 18
55213: PPUSH
55214: CALL_OW 181
// end ; continue ;
55218: GO 54862
// end ; if not cleaners or not tmp in cleaners then
55220: LD_VAR 0 6
55224: NOT
55225: IFTRUE 55240
55227: PUSH
55228: LD_VAR 0 13
55232: PUSH
55233: LD_VAR 0 6
55237: IN
55238: NOT
55239: OR
55240: IFFALSE 55549
// begin if dep then
55242: LD_VAR 0 17
55246: IFFALSE 55382
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55248: LD_ADDR_VAR 0 16
55252: PUSH
55253: LD_VAR 0 17
55257: PUSH
55258: LD_INT 1
55260: ARRAY
55261: PPUSH
55262: CALL_OW 250
55266: PPUSH
55267: LD_VAR 0 17
55271: PUSH
55272: LD_INT 1
55274: ARRAY
55275: PPUSH
55276: CALL_OW 254
55280: PPUSH
55281: LD_INT 5
55283: PPUSH
55284: CALL_OW 272
55288: PUSH
55289: LD_VAR 0 17
55293: PUSH
55294: LD_INT 1
55296: ARRAY
55297: PPUSH
55298: CALL_OW 251
55302: PPUSH
55303: LD_VAR 0 17
55307: PUSH
55308: LD_INT 1
55310: ARRAY
55311: PPUSH
55312: CALL_OW 254
55316: PPUSH
55317: LD_INT 5
55319: PPUSH
55320: CALL_OW 273
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55329: LD_VAR 0 16
55333: PUSH
55334: LD_INT 1
55336: ARRAY
55337: PPUSH
55338: LD_VAR 0 16
55342: PUSH
55343: LD_INT 2
55345: ARRAY
55346: PPUSH
55347: CALL_OW 488
55351: IFFALSE 55382
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55353: LD_VAR 0 13
55357: PPUSH
55358: LD_VAR 0 16
55362: PUSH
55363: LD_INT 1
55365: ARRAY
55366: PPUSH
55367: LD_VAR 0 16
55371: PUSH
55372: LD_INT 2
55374: ARRAY
55375: PPUSH
55376: CALL_OW 111
// continue ;
55380: GO 54862
// end ; end ; r := GetDir ( tmp ) ;
55382: LD_ADDR_VAR 0 15
55386: PUSH
55387: LD_VAR 0 13
55391: PPUSH
55392: CALL_OW 254
55396: ST_TO_ADDR
// if r = 5 then
55397: LD_VAR 0 15
55401: PUSH
55402: LD_INT 5
55404: EQUAL
55405: IFFALSE 55415
// r := 0 ;
55407: LD_ADDR_VAR 0 15
55411: PUSH
55412: LD_INT 0
55414: ST_TO_ADDR
// for j = r to 5 do
55415: LD_ADDR_VAR 0 10
55419: PUSH
55420: DOUBLE
55421: LD_VAR 0 15
55425: DEC
55426: ST_TO_ADDR
55427: LD_INT 5
55429: PUSH
55430: FOR_TO
55431: IFFALSE 55547
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55433: LD_ADDR_VAR 0 11
55437: PUSH
55438: LD_VAR 0 13
55442: PPUSH
55443: CALL_OW 250
55447: PPUSH
55448: LD_VAR 0 10
55452: PPUSH
55453: LD_INT 2
55455: PPUSH
55456: CALL_OW 272
55460: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55461: LD_ADDR_VAR 0 12
55465: PUSH
55466: LD_VAR 0 13
55470: PPUSH
55471: CALL_OW 251
55475: PPUSH
55476: LD_VAR 0 10
55480: PPUSH
55481: LD_INT 2
55483: PPUSH
55484: CALL_OW 273
55488: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55489: LD_VAR 0 11
55493: PPUSH
55494: LD_VAR 0 12
55498: PPUSH
55499: CALL_OW 488
55503: IFFALSE 55522
55505: PUSH
55506: LD_VAR 0 11
55510: PPUSH
55511: LD_VAR 0 12
55515: PPUSH
55516: CALL_OW 428
55520: NOT
55521: AND
55522: IFFALSE 55545
// begin ComMoveXY ( tmp , _x , _y ) ;
55524: LD_VAR 0 13
55528: PPUSH
55529: LD_VAR 0 11
55533: PPUSH
55534: LD_VAR 0 12
55538: PPUSH
55539: CALL_OW 111
// break ;
55543: GO 55547
// end ; end ;
55545: GO 55430
55547: POP
55548: POP
// end ; end ;
55549: GO 54862
55551: POP
55552: POP
// end ;
55553: LD_VAR 0 8
55557: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55558: LD_INT 0
55560: PPUSH
// result := true ;
55561: LD_ADDR_VAR 0 3
55565: PUSH
55566: LD_INT 1
55568: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55569: LD_VAR 0 2
55573: PUSH
55574: LD_INT 24
55576: DOUBLE
55577: EQUAL
55578: IFTRUE 55588
55580: LD_INT 33
55582: DOUBLE
55583: EQUAL
55584: IFTRUE 55588
55586: GO 55613
55588: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55589: LD_ADDR_VAR 0 3
55593: PUSH
55594: LD_INT 32
55596: PPUSH
55597: LD_VAR 0 1
55601: PPUSH
55602: CALL_OW 321
55606: PUSH
55607: LD_INT 2
55609: EQUAL
55610: ST_TO_ADDR
55611: GO 55929
55613: LD_INT 20
55615: DOUBLE
55616: EQUAL
55617: IFTRUE 55621
55619: GO 55646
55621: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55622: LD_ADDR_VAR 0 3
55626: PUSH
55627: LD_INT 6
55629: PPUSH
55630: LD_VAR 0 1
55634: PPUSH
55635: CALL_OW 321
55639: PUSH
55640: LD_INT 2
55642: EQUAL
55643: ST_TO_ADDR
55644: GO 55929
55646: LD_INT 22
55648: DOUBLE
55649: EQUAL
55650: IFTRUE 55660
55652: LD_INT 36
55654: DOUBLE
55655: EQUAL
55656: IFTRUE 55660
55658: GO 55685
55660: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55661: LD_ADDR_VAR 0 3
55665: PUSH
55666: LD_INT 15
55668: PPUSH
55669: LD_VAR 0 1
55673: PPUSH
55674: CALL_OW 321
55678: PUSH
55679: LD_INT 2
55681: EQUAL
55682: ST_TO_ADDR
55683: GO 55929
55685: LD_INT 30
55687: DOUBLE
55688: EQUAL
55689: IFTRUE 55693
55691: GO 55718
55693: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55694: LD_ADDR_VAR 0 3
55698: PUSH
55699: LD_INT 20
55701: PPUSH
55702: LD_VAR 0 1
55706: PPUSH
55707: CALL_OW 321
55711: PUSH
55712: LD_INT 2
55714: EQUAL
55715: ST_TO_ADDR
55716: GO 55929
55718: LD_INT 28
55720: DOUBLE
55721: EQUAL
55722: IFTRUE 55732
55724: LD_INT 21
55726: DOUBLE
55727: EQUAL
55728: IFTRUE 55732
55730: GO 55757
55732: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55733: LD_ADDR_VAR 0 3
55737: PUSH
55738: LD_INT 21
55740: PPUSH
55741: LD_VAR 0 1
55745: PPUSH
55746: CALL_OW 321
55750: PUSH
55751: LD_INT 2
55753: EQUAL
55754: ST_TO_ADDR
55755: GO 55929
55757: LD_INT 16
55759: DOUBLE
55760: EQUAL
55761: IFTRUE 55765
55763: GO 55790
55765: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55766: LD_ADDR_VAR 0 3
55770: PUSH
55771: LD_INT 84
55773: PPUSH
55774: LD_VAR 0 1
55778: PPUSH
55779: CALL_OW 321
55783: PUSH
55784: LD_INT 2
55786: EQUAL
55787: ST_TO_ADDR
55788: GO 55929
55790: LD_INT 19
55792: DOUBLE
55793: EQUAL
55794: IFTRUE 55804
55796: LD_INT 23
55798: DOUBLE
55799: EQUAL
55800: IFTRUE 55804
55802: GO 55829
55804: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55805: LD_ADDR_VAR 0 3
55809: PUSH
55810: LD_INT 83
55812: PPUSH
55813: LD_VAR 0 1
55817: PPUSH
55818: CALL_OW 321
55822: PUSH
55823: LD_INT 2
55825: EQUAL
55826: ST_TO_ADDR
55827: GO 55929
55829: LD_INT 17
55831: DOUBLE
55832: EQUAL
55833: IFTRUE 55837
55835: GO 55862
55837: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55838: LD_ADDR_VAR 0 3
55842: PUSH
55843: LD_INT 39
55845: PPUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 321
55855: PUSH
55856: LD_INT 2
55858: EQUAL
55859: ST_TO_ADDR
55860: GO 55929
55862: LD_INT 18
55864: DOUBLE
55865: EQUAL
55866: IFTRUE 55870
55868: GO 55895
55870: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55871: LD_ADDR_VAR 0 3
55875: PUSH
55876: LD_INT 40
55878: PPUSH
55879: LD_VAR 0 1
55883: PPUSH
55884: CALL_OW 321
55888: PUSH
55889: LD_INT 2
55891: EQUAL
55892: ST_TO_ADDR
55893: GO 55929
55895: LD_INT 27
55897: DOUBLE
55898: EQUAL
55899: IFTRUE 55903
55901: GO 55928
55903: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55904: LD_ADDR_VAR 0 3
55908: PUSH
55909: LD_INT 35
55911: PPUSH
55912: LD_VAR 0 1
55916: PPUSH
55917: CALL_OW 321
55921: PUSH
55922: LD_INT 2
55924: EQUAL
55925: ST_TO_ADDR
55926: GO 55929
55928: POP
// end ;
55929: LD_VAR 0 3
55933: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55934: LD_INT 0
55936: PPUSH
55937: PPUSH
55938: PPUSH
55939: PPUSH
55940: PPUSH
55941: PPUSH
55942: PPUSH
55943: PPUSH
55944: PPUSH
55945: PPUSH
55946: PPUSH
// result := false ;
55947: LD_ADDR_VAR 0 6
55951: PUSH
55952: LD_INT 0
55954: ST_TO_ADDR
// if btype = b_depot then
55955: LD_VAR 0 2
55959: PUSH
55960: LD_INT 0
55962: EQUAL
55963: IFFALSE 55975
// begin result := true ;
55965: LD_ADDR_VAR 0 6
55969: PUSH
55970: LD_INT 1
55972: ST_TO_ADDR
// exit ;
55973: GO 56829
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55975: LD_VAR 0 1
55979: NOT
55980: IFTRUE 56005
55982: PUSH
55983: LD_VAR 0 1
55987: PPUSH
55988: CALL_OW 266
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: IN
56003: NOT
56004: OR
56005: IFTRUE 56014
56007: PUSH
56008: LD_VAR 0 2
56012: NOT
56013: OR
56014: IFTRUE 56050
56016: PUSH
56017: LD_VAR 0 5
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: LD_INT 4
56036: PUSH
56037: LD_INT 5
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: IN
56048: NOT
56049: OR
56050: IFTRUE 56069
56052: PUSH
56053: LD_VAR 0 3
56057: PPUSH
56058: LD_VAR 0 4
56062: PPUSH
56063: CALL_OW 488
56067: NOT
56068: OR
56069: IFFALSE 56073
// exit ;
56071: GO 56829
// side := GetSide ( depot ) ;
56073: LD_ADDR_VAR 0 9
56077: PUSH
56078: LD_VAR 0 1
56082: PPUSH
56083: CALL_OW 255
56087: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56088: LD_VAR 0 9
56092: PPUSH
56093: LD_VAR 0 2
56097: PPUSH
56098: CALL 55558 0 2
56102: NOT
56103: IFFALSE 56107
// exit ;
56105: GO 56829
// pom := GetBase ( depot ) ;
56107: LD_ADDR_VAR 0 10
56111: PUSH
56112: LD_VAR 0 1
56116: PPUSH
56117: CALL_OW 274
56121: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56122: LD_ADDR_VAR 0 11
56126: PUSH
56127: LD_VAR 0 2
56131: PPUSH
56132: LD_VAR 0 1
56136: PPUSH
56137: CALL_OW 248
56141: PPUSH
56142: CALL_OW 450
56146: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56147: LD_VAR 0 10
56151: PPUSH
56152: LD_INT 1
56154: PPUSH
56155: CALL_OW 275
56159: PUSH
56160: LD_VAR 0 11
56164: PUSH
56165: LD_INT 1
56167: ARRAY
56168: GREATEREQUAL
56169: IFFALSE 56195
56171: PUSH
56172: LD_VAR 0 10
56176: PPUSH
56177: LD_INT 2
56179: PPUSH
56180: CALL_OW 275
56184: PUSH
56185: LD_VAR 0 11
56189: PUSH
56190: LD_INT 2
56192: ARRAY
56193: GREATEREQUAL
56194: AND
56195: IFFALSE 56221
56197: PUSH
56198: LD_VAR 0 10
56202: PPUSH
56203: LD_INT 3
56205: PPUSH
56206: CALL_OW 275
56210: PUSH
56211: LD_VAR 0 11
56215: PUSH
56216: LD_INT 3
56218: ARRAY
56219: GREATEREQUAL
56220: AND
56221: NOT
56222: IFFALSE 56226
// exit ;
56224: GO 56829
// if GetBType ( depot ) = b_depot then
56226: LD_VAR 0 1
56230: PPUSH
56231: CALL_OW 266
56235: PUSH
56236: LD_INT 0
56238: EQUAL
56239: IFFALSE 56251
// dist := 28 else
56241: LD_ADDR_VAR 0 14
56245: PUSH
56246: LD_INT 28
56248: ST_TO_ADDR
56249: GO 56259
// dist := 36 ;
56251: LD_ADDR_VAR 0 14
56255: PUSH
56256: LD_INT 36
56258: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56259: LD_VAR 0 1
56263: PPUSH
56264: LD_VAR 0 3
56268: PPUSH
56269: LD_VAR 0 4
56273: PPUSH
56274: CALL_OW 297
56278: PUSH
56279: LD_VAR 0 14
56283: GREATER
56284: IFFALSE 56288
// exit ;
56286: GO 56829
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56288: LD_ADDR_VAR 0 12
56292: PUSH
56293: LD_VAR 0 2
56297: PPUSH
56298: LD_VAR 0 3
56302: PPUSH
56303: LD_VAR 0 4
56307: PPUSH
56308: LD_VAR 0 5
56312: PPUSH
56313: LD_VAR 0 1
56317: PPUSH
56318: CALL_OW 248
56322: PPUSH
56323: LD_INT 0
56325: PPUSH
56326: CALL 56834 0 6
56330: ST_TO_ADDR
// if not hexes then
56331: LD_VAR 0 12
56335: NOT
56336: IFFALSE 56340
// exit ;
56338: GO 56829
// hex := GetHexInfo ( x , y ) ;
56340: LD_ADDR_VAR 0 15
56344: PUSH
56345: LD_VAR 0 3
56349: PPUSH
56350: LD_VAR 0 4
56354: PPUSH
56355: CALL_OW 546
56359: ST_TO_ADDR
// if hex [ 1 ] then
56360: LD_VAR 0 15
56364: PUSH
56365: LD_INT 1
56367: ARRAY
56368: IFFALSE 56372
// exit ;
56370: GO 56829
// height := hex [ 2 ] ;
56372: LD_ADDR_VAR 0 13
56376: PUSH
56377: LD_VAR 0 15
56381: PUSH
56382: LD_INT 2
56384: ARRAY
56385: ST_TO_ADDR
// for i = 1 to hexes do
56386: LD_ADDR_VAR 0 7
56390: PUSH
56391: DOUBLE
56392: LD_INT 1
56394: DEC
56395: ST_TO_ADDR
56396: LD_VAR 0 12
56400: PUSH
56401: FOR_TO
56402: IFFALSE 56746
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56404: LD_VAR 0 12
56408: PUSH
56409: LD_VAR 0 7
56413: ARRAY
56414: PUSH
56415: LD_INT 1
56417: ARRAY
56418: PPUSH
56419: LD_VAR 0 12
56423: PUSH
56424: LD_VAR 0 7
56428: ARRAY
56429: PUSH
56430: LD_INT 2
56432: ARRAY
56433: PPUSH
56434: CALL_OW 488
56438: NOT
56439: IFTRUE 56481
56441: PUSH
56442: LD_VAR 0 12
56446: PUSH
56447: LD_VAR 0 7
56451: ARRAY
56452: PUSH
56453: LD_INT 1
56455: ARRAY
56456: PPUSH
56457: LD_VAR 0 12
56461: PUSH
56462: LD_VAR 0 7
56466: ARRAY
56467: PUSH
56468: LD_INT 2
56470: ARRAY
56471: PPUSH
56472: CALL_OW 428
56476: PUSH
56477: LD_INT 0
56479: GREATER
56480: OR
56481: IFTRUE 56519
56483: PUSH
56484: LD_VAR 0 12
56488: PUSH
56489: LD_VAR 0 7
56493: ARRAY
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PPUSH
56499: LD_VAR 0 12
56503: PUSH
56504: LD_VAR 0 7
56508: ARRAY
56509: PUSH
56510: LD_INT 2
56512: ARRAY
56513: PPUSH
56514: CALL_OW 351
56518: OR
56519: IFFALSE 56525
// exit ;
56521: POP
56522: POP
56523: GO 56829
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56525: LD_ADDR_VAR 0 8
56529: PUSH
56530: LD_VAR 0 12
56534: PUSH
56535: LD_VAR 0 7
56539: ARRAY
56540: PUSH
56541: LD_INT 1
56543: ARRAY
56544: PPUSH
56545: LD_VAR 0 12
56549: PUSH
56550: LD_VAR 0 7
56554: ARRAY
56555: PUSH
56556: LD_INT 2
56558: ARRAY
56559: PPUSH
56560: CALL_OW 546
56564: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56565: LD_VAR 0 8
56569: PUSH
56570: LD_INT 1
56572: ARRAY
56573: IFTRUE 56595
56575: PUSH
56576: LD_VAR 0 8
56580: PUSH
56581: LD_INT 2
56583: ARRAY
56584: PUSH
56585: LD_VAR 0 13
56589: PUSH
56590: LD_INT 2
56592: PLUS
56593: GREATER
56594: OR
56595: IFTRUE 56617
56597: PUSH
56598: LD_VAR 0 8
56602: PUSH
56603: LD_INT 2
56605: ARRAY
56606: PUSH
56607: LD_VAR 0 13
56611: PUSH
56612: LD_INT 2
56614: MINUS
56615: LESS
56616: OR
56617: IFTRUE 56685
56619: PUSH
56620: LD_VAR 0 8
56624: PUSH
56625: LD_INT 3
56627: ARRAY
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 8
56634: PUSH
56635: LD_INT 9
56637: PUSH
56638: LD_INT 10
56640: PUSH
56641: LD_INT 11
56643: PUSH
56644: LD_INT 12
56646: PUSH
56647: LD_INT 13
56649: PUSH
56650: LD_INT 16
56652: PUSH
56653: LD_INT 17
56655: PUSH
56656: LD_INT 18
56658: PUSH
56659: LD_INT 19
56661: PUSH
56662: LD_INT 20
56664: PUSH
56665: LD_INT 21
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: IN
56683: NOT
56684: OR
56685: IFTRUE 56698
56687: PUSH
56688: LD_VAR 0 8
56692: PUSH
56693: LD_INT 5
56695: ARRAY
56696: NOT
56697: OR
56698: IFTRUE 56738
56700: PUSH
56701: LD_VAR 0 8
56705: PUSH
56706: LD_INT 6
56708: ARRAY
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: LD_INT 7
56718: PUSH
56719: LD_INT 9
56721: PUSH
56722: LD_INT 10
56724: PUSH
56725: LD_INT 11
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: IN
56736: NOT
56737: OR
56738: IFFALSE 56744
// exit ;
56740: POP
56741: POP
56742: GO 56829
// end ;
56744: GO 56401
56746: POP
56747: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56748: LD_VAR 0 9
56752: PPUSH
56753: LD_VAR 0 3
56757: PPUSH
56758: LD_VAR 0 4
56762: PPUSH
56763: LD_INT 20
56765: PPUSH
56766: CALL 48648 0 4
56770: PUSH
56771: LD_INT 4
56773: ARRAY
56774: IFFALSE 56778
// exit ;
56776: GO 56829
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56778: LD_VAR 0 2
56782: PUSH
56783: LD_INT 29
56785: PUSH
56786: LD_INT 30
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: IN
56793: IFFALSE 56817
56795: PUSH
56796: LD_VAR 0 3
56800: PPUSH
56801: LD_VAR 0 4
56805: PPUSH
56806: LD_VAR 0 9
56810: PPUSH
56811: CALL_OW 440
56815: NOT
56816: AND
56817: IFFALSE 56821
// exit ;
56819: GO 56829
// result := true ;
56821: LD_ADDR_VAR 0 6
56825: PUSH
56826: LD_INT 1
56828: ST_TO_ADDR
// end ;
56829: LD_VAR 0 6
56833: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56834: LD_INT 0
56836: PPUSH
56837: PPUSH
56838: PPUSH
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
56843: PPUSH
56844: PPUSH
56845: PPUSH
56846: PPUSH
56847: PPUSH
56848: PPUSH
56849: PPUSH
56850: PPUSH
56851: PPUSH
56852: PPUSH
56853: PPUSH
56854: PPUSH
56855: PPUSH
56856: PPUSH
56857: PPUSH
56858: PPUSH
56859: PPUSH
56860: PPUSH
56861: PPUSH
56862: PPUSH
56863: PPUSH
56864: PPUSH
56865: PPUSH
56866: PPUSH
56867: PPUSH
56868: PPUSH
56869: PPUSH
56870: PPUSH
56871: PPUSH
56872: PPUSH
56873: PPUSH
56874: PPUSH
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
56879: PPUSH
56880: PPUSH
56881: PPUSH
56882: PPUSH
56883: PPUSH
56884: PPUSH
56885: PPUSH
56886: PPUSH
56887: PPUSH
56888: PPUSH
56889: PPUSH
56890: PPUSH
56891: PPUSH
56892: PPUSH
56893: PPUSH
// result = [ ] ;
56894: LD_ADDR_VAR 0 7
56898: PUSH
56899: EMPTY
56900: ST_TO_ADDR
// temp_list = [ ] ;
56901: LD_ADDR_VAR 0 9
56905: PUSH
56906: EMPTY
56907: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56908: LD_VAR 0 4
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: LD_INT 4
56927: PUSH
56928: LD_INT 5
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: IN
56939: NOT
56940: IFTRUE 56983
56942: PUSH
56943: LD_VAR 0 1
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: IN
56958: IFFALSE 56982
56960: PUSH
56961: LD_VAR 0 5
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: IN
56980: NOT
56981: AND
56982: OR
56983: IFFALSE 56987
// exit ;
56985: GO 75386
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56987: LD_VAR 0 1
56991: PUSH
56992: LD_INT 6
56994: PUSH
56995: LD_INT 7
56997: PUSH
56998: LD_INT 8
57000: PUSH
57001: LD_INT 13
57003: PUSH
57004: LD_INT 12
57006: PUSH
57007: LD_INT 15
57009: PUSH
57010: LD_INT 11
57012: PUSH
57013: LD_INT 14
57015: PUSH
57016: LD_INT 10
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: IN
57030: IFFALSE 57040
// btype = b_lab ;
57032: LD_ADDR_VAR 0 1
57036: PUSH
57037: LD_INT 6
57039: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57040: LD_VAR 0 6
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: LIST
57058: IN
57059: NOT
57060: IFTRUE 57128
57062: PUSH
57063: LD_VAR 0 1
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: LD_INT 3
57079: PUSH
57080: LD_INT 6
57082: PUSH
57083: LD_INT 36
57085: PUSH
57086: LD_INT 4
57088: PUSH
57089: LD_INT 5
57091: PUSH
57092: LD_INT 31
57094: PUSH
57095: LD_INT 32
57097: PUSH
57098: LD_INT 33
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: IN
57114: NOT
57115: IFFALSE 57127
57117: PUSH
57118: LD_VAR 0 6
57122: PUSH
57123: LD_INT 1
57125: EQUAL
57126: AND
57127: OR
57128: IFTRUE 57160
57130: PUSH
57131: LD_VAR 0 1
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: IN
57146: NOT
57147: IFFALSE 57159
57149: PUSH
57150: LD_VAR 0 6
57154: PUSH
57155: LD_INT 2
57157: EQUAL
57158: AND
57159: OR
57160: IFFALSE 57170
// mode = 0 ;
57162: LD_ADDR_VAR 0 6
57166: PUSH
57167: LD_INT 0
57169: ST_TO_ADDR
// case mode of 0 :
57170: LD_VAR 0 6
57174: PUSH
57175: LD_INT 0
57177: DOUBLE
57178: EQUAL
57179: IFTRUE 57183
57181: GO 68636
57183: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57184: LD_ADDR_VAR 0 11
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57377: LD_ADDR_VAR 0 12
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: NEG
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57573: LD_ADDR_VAR 0 13
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: LD_INT 2
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 3
57744: NEG
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57772: LD_ADDR_VAR 0 14
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57968: LD_ADDR_VAR 0 15
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58161: LD_ADDR_VAR 0 16
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58354: LD_ADDR_VAR 0 17
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: LD_INT 2
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58584: LD_ADDR_VAR 0 18
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58814: LD_ADDR_VAR 0 19
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: NEG
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59044: LD_ADDR_VAR 0 20
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59274: LD_ADDR_VAR 0 21
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59504: LD_ADDR_VAR 0 22
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59734: LD_ADDR_VAR 0 23
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: NEG
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60014: LD_ADDR_VAR 0 24
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60290: LD_ADDR_VAR 0 25
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 2
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 2
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60564: LD_ADDR_VAR 0 26
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 2
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 2
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: LD_INT 2
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60840: LD_ADDR_VAR 0 27
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61120: LD_ADDR_VAR 0 28
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: NEG
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: NEG
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61402: LD_ADDR_VAR 0 29
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61681: LD_ADDR_VAR 0 30
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 2
61913: NEG
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 3
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61959: LD_ADDR_VAR 0 31
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: NEG
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: LD_INT 2
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: LD_INT 3
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 3
62202: NEG
62203: PUSH
62204: LD_INT 2
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62237: LD_ADDR_VAR 0 32
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 3
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: NEG
62481: PUSH
62482: LD_INT 1
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62515: LD_ADDR_VAR 0 33
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: NEG
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: LD_INT 3
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62794: LD_ADDR_VAR 0 34
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: LD_INT 2
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: NEG
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: LD_INT 3
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 3
63039: NEG
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63074: LD_ADDR_VAR 0 35
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63186: LD_ADDR_VAR 0 36
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 1
63267: NEG
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63298: LD_ADDR_VAR 0 37
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63410: LD_ADDR_VAR 0 38
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63522: LD_ADDR_VAR 0 39
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: LD_INT 2
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63634: LD_ADDR_VAR 0 40
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63746: LD_ADDR_VAR 0 41
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 3
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 3
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: PUSH
63980: LD_INT 2
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: LD_INT 3
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 3
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 2
64009: NEG
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 3
64020: NEG
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 3
64031: NEG
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: NEG
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 3
64055: NEG
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64096: LD_ADDR_VAR 0 42
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: LD_INT 2
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 2
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 2
64262: NEG
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 2
64274: NEG
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: NEG
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: LD_INT 3
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 3
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 3
64332: PUSH
64333: LD_INT 2
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 3
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 3
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 3
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 3
64393: NEG
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 3
64405: NEG
64406: PUSH
64407: LD_INT 3
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64446: LD_ADDR_VAR 0 43
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: LD_INT 2
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 2
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 2
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 2
64623: NEG
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 3
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 3
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 2
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 3
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: NEG
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 3
64753: NEG
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64794: LD_ADDR_VAR 0 44
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 1
64863: NEG
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 2
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 2
64949: NEG
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: NEG
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 2
64984: NEG
64985: PUSH
64986: LD_INT 3
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 3
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 2
65047: PUSH
65048: LD_INT 3
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 3
65068: NEG
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 3
65079: NEG
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: NEG
65092: PUSH
65093: LD_INT 2
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 3
65103: NEG
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65144: LD_ADDR_VAR 0 45
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 0
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 2
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 2
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 2
65310: NEG
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 2
65322: NEG
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 2
65334: NEG
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: LD_INT 3
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 3
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 2
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: LD_INT 3
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 3
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: LD_INT 2
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 3
65441: NEG
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: NEG
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65494: LD_ADDR_VAR 0 46
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: NEG
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: LD_INT 2
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: LD_INT 3
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 3
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 2
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 3
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: LD_INT 3
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 3
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: NEG
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: NEG
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 3
65801: NEG
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65842: LD_ADDR_VAR 0 47
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 1
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 2
65957: NEG
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: LD_INT 2
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65993: LD_ADDR_VAR 0 48
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 1
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: LD_INT 2
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: LD_INT 2
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: LD_INT 1
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66140: LD_ADDR_VAR 0 49
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: LD_INT 1
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: LD_INT 0
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66284: LD_ADDR_VAR 0 50
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 0
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: LD_INT 0
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 1
66342: NEG
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 1
66385: PUSH
66386: LD_INT 2
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: LD_INT 2
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 1
66405: NEG
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66428: LD_ADDR_VAR 0 51
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: NEG
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: NEG
66552: PUSH
66553: LD_INT 1
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66575: LD_ADDR_VAR 0 52
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: LD_INT 1
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: LD_INT 1
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 2
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 2
66690: NEG
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 2
66702: NEG
66703: PUSH
66704: LD_INT 2
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66726: LD_ADDR_VAR 0 53
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 2
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: LD_INT 2
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: LD_INT 2
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 2
66913: NEG
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66956: LD_ADDR_VAR 0 54
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 2
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 2
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 2
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: LD_INT 2
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 1
67121: NEG
67122: PUSH
67123: LD_INT 1
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 2
67132: NEG
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: LD_INT 1
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 2
67155: NEG
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67186: LD_ADDR_VAR 0 55
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: LD_INT 1
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 1
67224: PUSH
67225: LD_INT 1
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: LD_INT 2
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 2
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: LD_INT 1
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 2
67311: PUSH
67312: LD_INT 1
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 2
67321: PUSH
67322: LD_INT 2
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 2
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: LD_INT 1
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 2
67385: NEG
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67416: LD_ADDR_VAR 0 56
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 0
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 1
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 1
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 2
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: LD_INT 1
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 2
67551: PUSH
67552: LD_INT 2
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 1
67561: PUSH
67562: LD_INT 2
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 2
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: NEG
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 2
67603: NEG
67604: PUSH
67605: LD_INT 1
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 2
67615: NEG
67616: PUSH
67617: LD_INT 2
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67646: LD_ADDR_VAR 0 57
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: LD_INT 0
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 0
67663: PUSH
67664: LD_INT 1
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 1
67674: PUSH
67675: LD_INT 0
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 1
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 1
67715: NEG
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: LD_INT 2
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: LD_INT 2
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 1
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 2
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 2
67781: PUSH
67782: LD_INT 2
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: LD_INT 2
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 1
67811: NEG
67812: PUSH
67813: LD_INT 1
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 2
67822: NEG
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 2
67833: NEG
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 2
67845: NEG
67846: PUSH
67847: LD_INT 2
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67876: LD_ADDR_VAR 0 58
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 1
67934: NEG
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: LD_INT 2
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_INT 2
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 1
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 2
68011: PUSH
68012: LD_INT 2
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 1
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 2
68063: NEG
68064: PUSH
68065: LD_INT 1
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 2
68075: NEG
68076: PUSH
68077: LD_INT 2
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68106: LD_ADDR_VAR 0 59
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 1
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: LD_INT 1
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: NEG
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: LD_INT 1
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68194: LD_ADDR_VAR 0 60
68198: PUSH
68199: LD_INT 0
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: NEG
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68282: LD_ADDR_VAR 0 61
68286: PUSH
68287: LD_INT 0
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: LD_INT 1
68302: NEG
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: LD_INT 0
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 1
68351: NEG
68352: PUSH
68353: LD_INT 1
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68370: LD_ADDR_VAR 0 62
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: LD_INT 0
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: LD_INT 1
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: LD_INT 1
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 1
68439: NEG
68440: PUSH
68441: LD_INT 1
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68458: LD_ADDR_VAR 0 63
68462: PUSH
68463: LD_INT 0
68465: PUSH
68466: LD_INT 0
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 1
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: LD_INT 1
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 1
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: NEG
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 1
68527: NEG
68528: PUSH
68529: LD_INT 1
68531: NEG
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68546: LD_ADDR_VAR 0 64
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: LD_INT 1
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: LD_INT 1
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: NEG
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: LD_INT 1
68619: NEG
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: ST_TO_ADDR
// end ; 1 :
68634: GO 74531
68636: LD_INT 1
68638: DOUBLE
68639: EQUAL
68640: IFTRUE 68644
68642: GO 71267
68644: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68645: LD_ADDR_VAR 0 11
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: LD_INT 3
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 0
68664: PUSH
68665: LD_INT 3
68667: NEG
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 1
68675: PUSH
68676: LD_INT 2
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: LIST
68688: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68689: LD_ADDR_VAR 0 12
68693: PUSH
68694: LD_INT 2
68696: PUSH
68697: LD_INT 1
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 3
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: LD_INT 1
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68730: LD_ADDR_VAR 0 13
68734: PUSH
68735: LD_INT 3
68737: PUSH
68738: LD_INT 2
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 3
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68770: LD_ADDR_VAR 0 14
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: LD_INT 3
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 1
68797: NEG
68798: PUSH
68799: LD_INT 2
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68811: LD_ADDR_VAR 0 15
68815: PUSH
68816: LD_INT 2
68818: NEG
68819: PUSH
68820: LD_INT 1
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: NEG
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 3
68840: NEG
68841: PUSH
68842: LD_INT 1
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: LIST
68854: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68855: LD_ADDR_VAR 0 16
68859: PUSH
68860: LD_INT 2
68862: NEG
68863: PUSH
68864: LD_INT 3
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: NEG
68875: PUSH
68876: LD_INT 2
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 3
68886: NEG
68887: PUSH
68888: LD_INT 3
68890: NEG
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: LIST
68900: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68901: LD_ADDR_VAR 0 17
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: LD_INT 3
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: LD_INT 3
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: PUSH
68932: LD_INT 2
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68945: LD_ADDR_VAR 0 18
68949: PUSH
68950: LD_INT 2
68952: PUSH
68953: LD_INT 1
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 3
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 3
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: LIST
68985: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68986: LD_ADDR_VAR 0 19
68990: PUSH
68991: LD_INT 3
68993: PUSH
68994: LD_INT 2
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 3
69003: PUSH
69004: LD_INT 3
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 2
69013: PUSH
69014: LD_INT 3
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69026: LD_ADDR_VAR 0 20
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: LD_INT 3
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: LD_INT 3
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: LIST
69066: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69067: LD_ADDR_VAR 0 21
69071: PUSH
69072: LD_INT 2
69074: NEG
69075: PUSH
69076: LD_INT 1
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 3
69085: NEG
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: NEG
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: LIST
69110: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69111: LD_ADDR_VAR 0 22
69115: PUSH
69116: LD_INT 2
69118: NEG
69119: PUSH
69120: LD_INT 3
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 3
69130: NEG
69131: PUSH
69132: LD_INT 2
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 3
69142: NEG
69143: PUSH
69144: LD_INT 3
69146: NEG
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69157: LD_ADDR_VAR 0 23
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: LD_INT 3
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: LD_INT 4
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: LD_INT 3
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69201: LD_ADDR_VAR 0 24
69205: PUSH
69206: LD_INT 3
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 3
69218: PUSH
69219: LD_INT 1
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 4
69229: PUSH
69230: LD_INT 1
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: LIST
69241: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69242: LD_ADDR_VAR 0 25
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 4
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 3
69269: PUSH
69270: LD_INT 4
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69282: LD_ADDR_VAR 0 26
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 3
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: LD_INT 4
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 1
69309: NEG
69310: PUSH
69311: LD_INT 3
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: LIST
69322: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69323: LD_ADDR_VAR 0 27
69327: PUSH
69328: LD_INT 3
69330: NEG
69331: PUSH
69332: LD_INT 0
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 3
69341: NEG
69342: PUSH
69343: LD_INT 1
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 4
69352: NEG
69353: PUSH
69354: LD_INT 1
69356: NEG
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69367: LD_ADDR_VAR 0 28
69371: PUSH
69372: LD_INT 3
69374: NEG
69375: PUSH
69376: LD_INT 3
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 3
69386: NEG
69387: PUSH
69388: LD_INT 4
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 4
69398: NEG
69399: PUSH
69400: LD_INT 3
69402: NEG
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: LIST
69412: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69413: LD_ADDR_VAR 0 29
69417: PUSH
69418: LD_INT 1
69420: NEG
69421: PUSH
69422: LD_INT 3
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 0
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 1
69443: PUSH
69444: LD_INT 2
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 1
69454: NEG
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 4
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: LD_INT 3
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: LD_INT 5
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: LD_INT 5
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: LD_INT 4
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: LD_INT 6
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 6
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: LD_INT 5
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69568: LD_ADDR_VAR 0 30
69572: PUSH
69573: LD_INT 2
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 3
69596: PUSH
69597: LD_INT 1
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 3
69606: PUSH
69607: LD_INT 1
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 4
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 4
69637: PUSH
69638: LD_INT 1
69640: NEG
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 5
69648: PUSH
69649: LD_INT 0
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 5
69658: PUSH
69659: LD_INT 1
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 5
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 6
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 6
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69711: LD_ADDR_VAR 0 31
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 3
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 2
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 4
69748: PUSH
69749: LD_INT 3
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 4
69758: PUSH
69759: LD_INT 4
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 3
69768: PUSH
69769: LD_INT 4
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 5
69778: PUSH
69779: LD_INT 4
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 5
69788: PUSH
69789: LD_INT 5
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 4
69798: PUSH
69799: LD_INT 5
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 6
69808: PUSH
69809: LD_INT 5
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 6
69818: PUSH
69819: LD_INT 6
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 5
69828: PUSH
69829: LD_INT 6
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69850: LD_ADDR_VAR 0 32
69854: PUSH
69855: LD_INT 1
69857: PUSH
69858: LD_INT 3
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: LD_INT 2
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: LD_INT 4
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 0
69898: PUSH
69899: LD_INT 4
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: NEG
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 1
69919: PUSH
69920: LD_INT 5
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: LD_INT 5
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 1
69939: NEG
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 1
69950: PUSH
69951: LD_INT 6
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: LD_INT 6
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 1
69970: NEG
69971: PUSH
69972: LD_INT 5
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69993: LD_ADDR_VAR 0 33
69997: PUSH
69998: LD_INT 2
70000: NEG
70001: PUSH
70002: LD_INT 1
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 3
70011: NEG
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 3
70022: NEG
70023: PUSH
70024: LD_INT 1
70026: NEG
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 3
70034: NEG
70035: PUSH
70036: LD_INT 1
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 4
70045: NEG
70046: PUSH
70047: LD_INT 0
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 4
70056: NEG
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 4
70068: NEG
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 5
70079: NEG
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 5
70090: NEG
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 5
70102: NEG
70103: PUSH
70104: LD_INT 1
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 6
70113: NEG
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 6
70124: NEG
70125: PUSH
70126: LD_INT 1
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70148: LD_ADDR_VAR 0 34
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: LD_INT 3
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 3
70167: NEG
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: NEG
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 3
70191: NEG
70192: PUSH
70193: LD_INT 4
70195: NEG
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 4
70203: NEG
70204: PUSH
70205: LD_INT 3
70207: NEG
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 4
70215: NEG
70216: PUSH
70217: LD_INT 4
70219: NEG
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 4
70227: NEG
70228: PUSH
70229: LD_INT 5
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 5
70239: NEG
70240: PUSH
70241: LD_INT 4
70243: NEG
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 5
70251: NEG
70252: PUSH
70253: LD_INT 5
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 5
70263: NEG
70264: PUSH
70265: LD_INT 6
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 6
70275: NEG
70276: PUSH
70277: LD_INT 5
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 6
70287: NEG
70288: PUSH
70289: LD_INT 6
70291: NEG
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70311: LD_ADDR_VAR 0 41
70315: PUSH
70316: LD_INT 0
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 1
70329: NEG
70330: PUSH
70331: LD_INT 3
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 1
70341: PUSH
70342: LD_INT 2
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: LIST
70354: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70355: LD_ADDR_VAR 0 42
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: LD_INT 1
70375: NEG
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 3
70383: PUSH
70384: LD_INT 1
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: LIST
70395: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70396: LD_ADDR_VAR 0 43
70400: PUSH
70401: LD_INT 2
70403: PUSH
70404: LD_INT 2
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 3
70413: PUSH
70414: LD_INT 2
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 2
70423: PUSH
70424: LD_INT 3
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: LIST
70435: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70436: LD_ADDR_VAR 0 44
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: LD_INT 2
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 1
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: LD_INT 2
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: LIST
70476: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70477: LD_ADDR_VAR 0 45
70481: PUSH
70482: LD_INT 2
70484: NEG
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 2
70495: NEG
70496: PUSH
70497: LD_INT 1
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 3
70506: NEG
70507: PUSH
70508: LD_INT 1
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: LIST
70520: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70521: LD_ADDR_VAR 0 46
70525: PUSH
70526: LD_INT 2
70528: NEG
70529: PUSH
70530: LD_INT 2
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 2
70540: NEG
70541: PUSH
70542: LD_INT 3
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 3
70552: NEG
70553: PUSH
70554: LD_INT 2
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: LIST
70566: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70567: LD_ADDR_VAR 0 47
70571: PUSH
70572: LD_INT 2
70574: NEG
70575: PUSH
70576: LD_INT 3
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: LD_INT 3
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70600: LD_ADDR_VAR 0 48
70604: PUSH
70605: LD_INT 1
70607: PUSH
70608: LD_INT 2
70610: NEG
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 2
70618: PUSH
70619: LD_INT 1
70621: NEG
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70631: LD_ADDR_VAR 0 49
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: LD_INT 1
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 3
70648: PUSH
70649: LD_INT 2
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70660: LD_ADDR_VAR 0 50
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: LD_INT 3
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 1
70677: PUSH
70678: LD_INT 3
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70689: LD_ADDR_VAR 0 51
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: LD_INT 2
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 2
70707: NEG
70708: PUSH
70709: LD_INT 1
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70720: LD_ADDR_VAR 0 52
70724: PUSH
70725: LD_INT 3
70727: NEG
70728: PUSH
70729: LD_INT 1
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 3
70739: NEG
70740: PUSH
70741: LD_INT 2
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70753: LD_ADDR_VAR 0 53
70757: PUSH
70758: LD_INT 1
70760: NEG
70761: PUSH
70762: LD_INT 3
70764: NEG
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 0
70772: PUSH
70773: LD_INT 3
70775: NEG
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 1
70783: PUSH
70784: LD_INT 2
70786: NEG
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: LIST
70796: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70797: LD_ADDR_VAR 0 54
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: LD_INT 1
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 3
70815: PUSH
70816: LD_INT 0
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 3
70825: PUSH
70826: LD_INT 1
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70838: LD_ADDR_VAR 0 55
70842: PUSH
70843: LD_INT 3
70845: PUSH
70846: LD_INT 2
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 3
70855: PUSH
70856: LD_INT 3
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 2
70865: PUSH
70866: LD_INT 3
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: LIST
70877: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70878: LD_ADDR_VAR 0 56
70882: PUSH
70883: LD_INT 1
70885: PUSH
70886: LD_INT 3
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 0
70895: PUSH
70896: LD_INT 3
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 1
70905: NEG
70906: PUSH
70907: LD_INT 2
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: LIST
70918: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70919: LD_ADDR_VAR 0 57
70923: PUSH
70924: LD_INT 2
70926: NEG
70927: PUSH
70928: LD_INT 1
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 3
70937: NEG
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 3
70948: NEG
70949: PUSH
70950: LD_INT 1
70952: NEG
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70963: LD_ADDR_VAR 0 58
70967: PUSH
70968: LD_INT 2
70970: NEG
70971: PUSH
70972: LD_INT 3
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 3
70982: NEG
70983: PUSH
70984: LD_INT 2
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 3
70994: NEG
70995: PUSH
70996: LD_INT 3
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: LIST
71008: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71009: LD_ADDR_VAR 0 59
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: LD_INT 2
71020: NEG
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 0
71028: PUSH
71029: LD_INT 2
71031: NEG
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 1
71039: PUSH
71040: LD_INT 1
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: LIST
71052: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71053: LD_ADDR_VAR 0 60
71057: PUSH
71058: LD_INT 1
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: LD_INT 0
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 2
71081: PUSH
71082: LD_INT 1
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: LIST
71093: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71094: LD_ADDR_VAR 0 61
71098: PUSH
71099: LD_INT 2
71101: PUSH
71102: LD_INT 1
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 2
71111: PUSH
71112: LD_INT 2
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 1
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: LIST
71133: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71134: LD_ADDR_VAR 0 62
71138: PUSH
71139: LD_INT 1
71141: PUSH
71142: LD_INT 2
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 0
71151: PUSH
71152: LD_INT 2
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: NEG
71162: PUSH
71163: LD_INT 1
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: LIST
71174: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71175: LD_ADDR_VAR 0 63
71179: PUSH
71180: LD_INT 1
71182: NEG
71183: PUSH
71184: LD_INT 1
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 2
71193: NEG
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 2
71204: NEG
71205: PUSH
71206: LD_INT 1
71208: NEG
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: LIST
71218: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71219: LD_ADDR_VAR 0 64
71223: PUSH
71224: LD_INT 1
71226: NEG
71227: PUSH
71228: LD_INT 2
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 2
71238: NEG
71239: PUSH
71240: LD_INT 1
71242: NEG
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 2
71250: NEG
71251: PUSH
71252: LD_INT 2
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: LIST
71264: ST_TO_ADDR
// end ; 2 :
71265: GO 74531
71267: LD_INT 2
71269: DOUBLE
71270: EQUAL
71271: IFTRUE 71275
71273: GO 74530
71275: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71276: LD_ADDR_VAR 0 29
71280: PUSH
71281: LD_INT 4
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 4
71293: PUSH
71294: LD_INT 1
71296: NEG
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 5
71304: PUSH
71305: LD_INT 0
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 5
71314: PUSH
71315: LD_INT 1
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 4
71324: PUSH
71325: LD_INT 1
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 3
71334: PUSH
71335: LD_INT 0
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 3
71344: PUSH
71345: LD_INT 1
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 3
71355: PUSH
71356: LD_INT 2
71358: NEG
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 5
71366: PUSH
71367: LD_INT 2
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 3
71376: PUSH
71377: LD_INT 3
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 3
71386: PUSH
71387: LD_INT 2
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 4
71396: PUSH
71397: LD_INT 3
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 4
71406: PUSH
71407: LD_INT 4
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 3
71416: PUSH
71417: LD_INT 4
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 2
71426: PUSH
71427: LD_INT 3
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 2
71436: PUSH
71437: LD_INT 2
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 4
71446: PUSH
71447: LD_INT 2
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 2
71456: PUSH
71457: LD_INT 4
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: LD_INT 4
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: LD_INT 3
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 1
71486: PUSH
71487: LD_INT 4
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 1
71496: PUSH
71497: LD_INT 5
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 0
71506: PUSH
71507: LD_INT 5
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 1
71516: NEG
71517: PUSH
71518: LD_INT 4
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 1
71527: NEG
71528: PUSH
71529: LD_INT 3
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 2
71538: PUSH
71539: LD_INT 5
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 2
71548: NEG
71549: PUSH
71550: LD_INT 3
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 3
71559: NEG
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: LD_INT 3
71570: NEG
71571: PUSH
71572: LD_INT 1
71574: NEG
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: LD_INT 2
71582: NEG
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 2
71593: NEG
71594: PUSH
71595: LD_INT 1
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 3
71604: NEG
71605: PUSH
71606: LD_INT 1
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 4
71615: NEG
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 4
71626: NEG
71627: PUSH
71628: LD_INT 1
71630: NEG
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 4
71638: NEG
71639: PUSH
71640: LD_INT 2
71642: NEG
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 2
71650: NEG
71651: PUSH
71652: LD_INT 2
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 4
71661: NEG
71662: PUSH
71663: LD_INT 4
71665: NEG
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 4
71673: NEG
71674: PUSH
71675: LD_INT 5
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 3
71685: NEG
71686: PUSH
71687: LD_INT 4
71689: NEG
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 3
71697: NEG
71698: PUSH
71699: LD_INT 3
71701: NEG
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 4
71709: NEG
71710: PUSH
71711: LD_INT 3
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 5
71721: NEG
71722: PUSH
71723: LD_INT 4
71725: NEG
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 5
71733: NEG
71734: PUSH
71735: LD_INT 5
71737: NEG
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 3
71745: NEG
71746: PUSH
71747: LD_INT 5
71749: NEG
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 5
71757: NEG
71758: PUSH
71759: LD_INT 3
71761: NEG
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71814: LD_ADDR_VAR 0 30
71818: PUSH
71819: LD_INT 4
71821: PUSH
71822: LD_INT 4
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 4
71831: PUSH
71832: LD_INT 3
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 5
71841: PUSH
71842: LD_INT 4
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 5
71851: PUSH
71852: LD_INT 5
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 4
71861: PUSH
71862: LD_INT 5
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 3
71871: PUSH
71872: LD_INT 4
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 3
71881: PUSH
71882: LD_INT 3
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 5
71891: PUSH
71892: LD_INT 3
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 3
71901: PUSH
71902: LD_INT 5
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: LD_INT 3
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: LD_INT 2
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 1
71931: PUSH
71932: LD_INT 3
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: LD_INT 4
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 0
71951: PUSH
71952: LD_INT 4
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 1
71961: NEG
71962: PUSH
71963: LD_INT 3
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 1
71972: NEG
71973: PUSH
71974: LD_INT 2
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 2
71983: PUSH
71984: LD_INT 4
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 2
71993: NEG
71994: PUSH
71995: LD_INT 2
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 4
72004: NEG
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 4
72015: NEG
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 3
72027: NEG
72028: PUSH
72029: LD_INT 0
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 3
72038: NEG
72039: PUSH
72040: LD_INT 1
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 4
72049: NEG
72050: PUSH
72051: LD_INT 1
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 5
72060: NEG
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 5
72071: NEG
72072: PUSH
72073: LD_INT 1
72075: NEG
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 5
72083: NEG
72084: PUSH
72085: LD_INT 2
72087: NEG
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 3
72095: NEG
72096: PUSH
72097: LD_INT 2
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 3
72106: NEG
72107: PUSH
72108: LD_INT 3
72110: NEG
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 3
72118: NEG
72119: PUSH
72120: LD_INT 4
72122: NEG
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 2
72130: NEG
72131: PUSH
72132: LD_INT 3
72134: NEG
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 2
72142: NEG
72143: PUSH
72144: LD_INT 2
72146: NEG
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 3
72154: NEG
72155: PUSH
72156: LD_INT 2
72158: NEG
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 4
72166: NEG
72167: PUSH
72168: LD_INT 3
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 4
72178: NEG
72179: PUSH
72180: LD_INT 4
72182: NEG
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 2
72190: NEG
72191: PUSH
72192: LD_INT 4
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 4
72202: NEG
72203: PUSH
72204: LD_INT 2
72206: NEG
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 0
72214: PUSH
72215: LD_INT 4
72217: NEG
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 0
72225: PUSH
72226: LD_INT 5
72228: NEG
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 1
72236: PUSH
72237: LD_INT 4
72239: NEG
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 1
72247: PUSH
72248: LD_INT 3
72250: NEG
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 0
72258: PUSH
72259: LD_INT 3
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 1
72269: NEG
72270: PUSH
72271: LD_INT 4
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 1
72281: NEG
72282: PUSH
72283: LD_INT 5
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 2
72293: PUSH
72294: LD_INT 3
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 2
72304: NEG
72305: PUSH
72306: LD_INT 5
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72361: LD_ADDR_VAR 0 31
72365: PUSH
72366: LD_INT 0
72368: PUSH
72369: LD_INT 4
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 0
72378: PUSH
72379: LD_INT 3
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 1
72388: PUSH
72389: LD_INT 4
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 1
72398: PUSH
72399: LD_INT 5
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 0
72408: PUSH
72409: LD_INT 5
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 1
72418: NEG
72419: PUSH
72420: LD_INT 4
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 1
72429: NEG
72430: PUSH
72431: LD_INT 3
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 2
72440: PUSH
72441: LD_INT 5
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 2
72450: NEG
72451: PUSH
72452: LD_INT 3
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 3
72461: NEG
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 3
72472: NEG
72473: PUSH
72474: LD_INT 1
72476: NEG
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 2
72484: NEG
72485: PUSH
72486: LD_INT 0
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 2
72495: NEG
72496: PUSH
72497: LD_INT 1
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 3
72506: NEG
72507: PUSH
72508: LD_INT 1
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 4
72517: NEG
72518: PUSH
72519: LD_INT 0
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 4
72528: NEG
72529: PUSH
72530: LD_INT 1
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 4
72540: NEG
72541: PUSH
72542: LD_INT 2
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 2
72552: NEG
72553: PUSH
72554: LD_INT 2
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 4
72563: NEG
72564: PUSH
72565: LD_INT 4
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 4
72575: NEG
72576: PUSH
72577: LD_INT 5
72579: NEG
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 3
72587: NEG
72588: PUSH
72589: LD_INT 4
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 3
72599: NEG
72600: PUSH
72601: LD_INT 3
72603: NEG
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 4
72611: NEG
72612: PUSH
72613: LD_INT 3
72615: NEG
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 5
72623: NEG
72624: PUSH
72625: LD_INT 4
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 5
72635: NEG
72636: PUSH
72637: LD_INT 5
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 3
72647: NEG
72648: PUSH
72649: LD_INT 5
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 5
72659: NEG
72660: PUSH
72661: LD_INT 3
72663: NEG
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 0
72671: PUSH
72672: LD_INT 3
72674: NEG
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 0
72682: PUSH
72683: LD_INT 4
72685: NEG
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 1
72693: PUSH
72694: LD_INT 3
72696: NEG
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 1
72704: PUSH
72705: LD_INT 2
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 0
72715: PUSH
72716: LD_INT 2
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 1
72726: NEG
72727: PUSH
72728: LD_INT 3
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 1
72738: NEG
72739: PUSH
72740: LD_INT 4
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 2
72750: PUSH
72751: LD_INT 2
72753: NEG
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 2
72761: NEG
72762: PUSH
72763: LD_INT 4
72765: NEG
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 4
72773: PUSH
72774: LD_INT 0
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 4
72783: PUSH
72784: LD_INT 1
72786: NEG
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 5
72794: PUSH
72795: LD_INT 0
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 5
72804: PUSH
72805: LD_INT 1
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 4
72814: PUSH
72815: LD_INT 1
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 3
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 3
72834: PUSH
72835: LD_INT 1
72837: NEG
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: LD_INT 3
72845: PUSH
72846: LD_INT 2
72848: NEG
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 5
72856: PUSH
72857: LD_INT 2
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72911: LD_ADDR_VAR 0 32
72915: PUSH
72916: LD_INT 4
72918: NEG
72919: PUSH
72920: LD_INT 0
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 4
72929: NEG
72930: PUSH
72931: LD_INT 1
72933: NEG
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 3
72941: NEG
72942: PUSH
72943: LD_INT 0
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 3
72952: NEG
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 4
72963: NEG
72964: PUSH
72965: LD_INT 1
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 5
72974: NEG
72975: PUSH
72976: LD_INT 0
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 5
72985: NEG
72986: PUSH
72987: LD_INT 1
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 5
72997: NEG
72998: PUSH
72999: LD_INT 2
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 3
73009: NEG
73010: PUSH
73011: LD_INT 2
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 3
73020: NEG
73021: PUSH
73022: LD_INT 3
73024: NEG
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 3
73032: NEG
73033: PUSH
73034: LD_INT 4
73036: NEG
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 2
73044: NEG
73045: PUSH
73046: LD_INT 3
73048: NEG
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 2
73056: NEG
73057: PUSH
73058: LD_INT 2
73060: NEG
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: PUSH
73066: LD_INT 3
73068: NEG
73069: PUSH
73070: LD_INT 2
73072: NEG
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 4
73080: NEG
73081: PUSH
73082: LD_INT 3
73084: NEG
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 4
73092: NEG
73093: PUSH
73094: LD_INT 4
73096: NEG
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: NEG
73105: PUSH
73106: LD_INT 4
73108: NEG
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 4
73116: NEG
73117: PUSH
73118: LD_INT 2
73120: NEG
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PUSH
73126: LD_INT 0
73128: PUSH
73129: LD_INT 4
73131: NEG
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: LD_INT 5
73142: NEG
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 1
73150: PUSH
73151: LD_INT 4
73153: NEG
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 1
73161: PUSH
73162: LD_INT 3
73164: NEG
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 0
73172: PUSH
73173: LD_INT 3
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 1
73183: NEG
73184: PUSH
73185: LD_INT 4
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 1
73195: NEG
73196: PUSH
73197: LD_INT 5
73199: NEG
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 2
73207: PUSH
73208: LD_INT 3
73210: NEG
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 2
73218: NEG
73219: PUSH
73220: LD_INT 5
73222: NEG
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 3
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: LD_INT 3
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 4
73251: PUSH
73252: LD_INT 0
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 4
73261: PUSH
73262: LD_INT 1
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 3
73271: PUSH
73272: LD_INT 1
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 2
73281: PUSH
73282: LD_INT 0
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 2
73291: PUSH
73292: LD_INT 1
73294: NEG
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: LD_INT 2
73302: PUSH
73303: LD_INT 2
73305: NEG
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 4
73313: PUSH
73314: LD_INT 2
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 4
73323: PUSH
73324: LD_INT 4
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 4
73333: PUSH
73334: LD_INT 3
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 5
73343: PUSH
73344: LD_INT 4
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 5
73353: PUSH
73354: LD_INT 5
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 4
73363: PUSH
73364: LD_INT 5
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 3
73373: PUSH
73374: LD_INT 4
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 3
73383: PUSH
73384: LD_INT 3
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 5
73393: PUSH
73394: LD_INT 3
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 3
73403: PUSH
73404: LD_INT 5
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73458: LD_ADDR_VAR 0 33
73462: PUSH
73463: LD_INT 4
73465: NEG
73466: PUSH
73467: LD_INT 4
73469: NEG
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PUSH
73475: LD_INT 4
73477: NEG
73478: PUSH
73479: LD_INT 5
73481: NEG
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 3
73489: NEG
73490: PUSH
73491: LD_INT 4
73493: NEG
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 3
73501: NEG
73502: PUSH
73503: LD_INT 3
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 4
73513: NEG
73514: PUSH
73515: LD_INT 3
73517: NEG
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 5
73525: NEG
73526: PUSH
73527: LD_INT 4
73529: NEG
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 5
73537: NEG
73538: PUSH
73539: LD_INT 5
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 3
73549: NEG
73550: PUSH
73551: LD_INT 5
73553: NEG
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 5
73561: NEG
73562: PUSH
73563: LD_INT 3
73565: NEG
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 0
73573: PUSH
73574: LD_INT 3
73576: NEG
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: LD_INT 0
73584: PUSH
73585: LD_INT 4
73587: NEG
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 1
73595: PUSH
73596: LD_INT 3
73598: NEG
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 1
73606: PUSH
73607: LD_INT 2
73609: NEG
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 0
73617: PUSH
73618: LD_INT 2
73620: NEG
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 1
73628: NEG
73629: PUSH
73630: LD_INT 3
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 1
73640: NEG
73641: PUSH
73642: LD_INT 4
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 2
73652: PUSH
73653: LD_INT 2
73655: NEG
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 2
73663: NEG
73664: PUSH
73665: LD_INT 4
73667: NEG
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 4
73675: PUSH
73676: LD_INT 0
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 4
73685: PUSH
73686: LD_INT 1
73688: NEG
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: LD_INT 5
73696: PUSH
73697: LD_INT 0
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 5
73706: PUSH
73707: LD_INT 1
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 4
73716: PUSH
73717: LD_INT 1
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 3
73726: PUSH
73727: LD_INT 0
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 3
73736: PUSH
73737: LD_INT 1
73739: NEG
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 3
73747: PUSH
73748: LD_INT 2
73750: NEG
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 5
73758: PUSH
73759: LD_INT 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 3
73768: PUSH
73769: LD_INT 3
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 3
73778: PUSH
73779: LD_INT 2
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 4
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 4
73798: PUSH
73799: LD_INT 4
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 3
73808: PUSH
73809: LD_INT 4
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 2
73818: PUSH
73819: LD_INT 3
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 2
73828: PUSH
73829: LD_INT 2
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: LD_INT 2
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 2
73848: PUSH
73849: LD_INT 4
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 0
73858: PUSH
73859: LD_INT 4
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 0
73868: PUSH
73869: LD_INT 3
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 1
73878: PUSH
73879: LD_INT 4
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 1
73888: PUSH
73889: LD_INT 5
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 0
73898: PUSH
73899: LD_INT 5
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 1
73908: NEG
73909: PUSH
73910: LD_INT 4
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 1
73919: NEG
73920: PUSH
73921: LD_INT 3
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 2
73930: PUSH
73931: LD_INT 5
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 2
73940: NEG
73941: PUSH
73942: LD_INT 3
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: LIST
73973: LIST
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73996: LD_ADDR_VAR 0 34
74000: PUSH
74001: LD_INT 0
74003: PUSH
74004: LD_INT 4
74006: NEG
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PUSH
74012: LD_INT 0
74014: PUSH
74015: LD_INT 5
74017: NEG
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 1
74025: PUSH
74026: LD_INT 4
74028: NEG
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 1
74036: PUSH
74037: LD_INT 3
74039: NEG
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_INT 0
74047: PUSH
74048: LD_INT 3
74050: NEG
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 1
74058: NEG
74059: PUSH
74060: LD_INT 4
74062: NEG
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 1
74070: NEG
74071: PUSH
74072: LD_INT 5
74074: NEG
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 2
74082: PUSH
74083: LD_INT 3
74085: NEG
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 2
74093: NEG
74094: PUSH
74095: LD_INT 5
74097: NEG
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 3
74105: PUSH
74106: LD_INT 0
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 3
74115: PUSH
74116: LD_INT 1
74118: NEG
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 4
74126: PUSH
74127: LD_INT 0
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 4
74136: PUSH
74137: LD_INT 1
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 3
74146: PUSH
74147: LD_INT 1
74149: PUSH
74150: EMPTY
74151: LIST
74152: LIST
74153: PUSH
74154: LD_INT 2
74156: PUSH
74157: LD_INT 0
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: PUSH
74164: LD_INT 2
74166: PUSH
74167: LD_INT 1
74169: NEG
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 2
74177: PUSH
74178: LD_INT 2
74180: NEG
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 4
74188: PUSH
74189: LD_INT 2
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 4
74198: PUSH
74199: LD_INT 4
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 4
74208: PUSH
74209: LD_INT 3
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 5
74218: PUSH
74219: LD_INT 4
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 5
74228: PUSH
74229: LD_INT 5
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 4
74238: PUSH
74239: LD_INT 5
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 3
74248: PUSH
74249: LD_INT 4
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 3
74258: PUSH
74259: LD_INT 3
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 5
74268: PUSH
74269: LD_INT 3
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 3
74278: PUSH
74279: LD_INT 5
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: LD_INT 3
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 0
74298: PUSH
74299: LD_INT 2
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 1
74308: PUSH
74309: LD_INT 3
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: PUSH
74316: LD_INT 1
74318: PUSH
74319: LD_INT 4
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: LD_INT 0
74328: PUSH
74329: LD_INT 4
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: LD_INT 1
74338: NEG
74339: PUSH
74340: LD_INT 3
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 1
74349: NEG
74350: PUSH
74351: LD_INT 2
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: PUSH
74358: LD_INT 2
74360: PUSH
74361: LD_INT 4
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: PUSH
74368: LD_INT 2
74370: NEG
74371: PUSH
74372: LD_INT 2
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 4
74381: NEG
74382: PUSH
74383: LD_INT 0
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: LD_INT 4
74392: NEG
74393: PUSH
74394: LD_INT 1
74396: NEG
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: LD_INT 3
74404: NEG
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 3
74415: NEG
74416: PUSH
74417: LD_INT 1
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: LD_INT 4
74426: NEG
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 5
74437: NEG
74438: PUSH
74439: LD_INT 0
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 5
74448: NEG
74449: PUSH
74450: LD_INT 1
74452: NEG
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 5
74460: NEG
74461: PUSH
74462: LD_INT 2
74464: NEG
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 3
74472: NEG
74473: PUSH
74474: LD_INT 2
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: ST_TO_ADDR
// end ; end ;
74528: GO 74531
74530: POP
// case btype of b_depot , b_warehouse :
74531: LD_VAR 0 1
74535: PUSH
74536: LD_INT 0
74538: DOUBLE
74539: EQUAL
74540: IFTRUE 74550
74542: LD_INT 1
74544: DOUBLE
74545: EQUAL
74546: IFTRUE 74550
74548: GO 74751
74550: POP
// case nation of nation_american :
74551: LD_VAR 0 5
74555: PUSH
74556: LD_INT 1
74558: DOUBLE
74559: EQUAL
74560: IFTRUE 74564
74562: GO 74620
74564: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74565: LD_ADDR_VAR 0 9
74569: PUSH
74570: LD_VAR 0 11
74574: PUSH
74575: LD_VAR 0 12
74579: PUSH
74580: LD_VAR 0 13
74584: PUSH
74585: LD_VAR 0 14
74589: PUSH
74590: LD_VAR 0 15
74594: PUSH
74595: LD_VAR 0 16
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: LIST
74607: PUSH
74608: LD_VAR 0 4
74612: PUSH
74613: LD_INT 1
74615: PLUS
74616: ARRAY
74617: ST_TO_ADDR
74618: GO 74749
74620: LD_INT 2
74622: DOUBLE
74623: EQUAL
74624: IFTRUE 74628
74626: GO 74684
74628: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74629: LD_ADDR_VAR 0 9
74633: PUSH
74634: LD_VAR 0 17
74638: PUSH
74639: LD_VAR 0 18
74643: PUSH
74644: LD_VAR 0 19
74648: PUSH
74649: LD_VAR 0 20
74653: PUSH
74654: LD_VAR 0 21
74658: PUSH
74659: LD_VAR 0 22
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: PUSH
74672: LD_VAR 0 4
74676: PUSH
74677: LD_INT 1
74679: PLUS
74680: ARRAY
74681: ST_TO_ADDR
74682: GO 74749
74684: LD_INT 3
74686: DOUBLE
74687: EQUAL
74688: IFTRUE 74692
74690: GO 74748
74692: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74693: LD_ADDR_VAR 0 9
74697: PUSH
74698: LD_VAR 0 23
74702: PUSH
74703: LD_VAR 0 24
74707: PUSH
74708: LD_VAR 0 25
74712: PUSH
74713: LD_VAR 0 26
74717: PUSH
74718: LD_VAR 0 27
74722: PUSH
74723: LD_VAR 0 28
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: LIST
74732: LIST
74733: LIST
74734: LIST
74735: PUSH
74736: LD_VAR 0 4
74740: PUSH
74741: LD_INT 1
74743: PLUS
74744: ARRAY
74745: ST_TO_ADDR
74746: GO 74749
74748: POP
74749: GO 75304
74751: LD_INT 2
74753: DOUBLE
74754: EQUAL
74755: IFTRUE 74765
74757: LD_INT 3
74759: DOUBLE
74760: EQUAL
74761: IFTRUE 74765
74763: GO 74821
74765: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74766: LD_ADDR_VAR 0 9
74770: PUSH
74771: LD_VAR 0 29
74775: PUSH
74776: LD_VAR 0 30
74780: PUSH
74781: LD_VAR 0 31
74785: PUSH
74786: LD_VAR 0 32
74790: PUSH
74791: LD_VAR 0 33
74795: PUSH
74796: LD_VAR 0 34
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: PUSH
74809: LD_VAR 0 4
74813: PUSH
74814: LD_INT 1
74816: PLUS
74817: ARRAY
74818: ST_TO_ADDR
74819: GO 75304
74821: LD_INT 16
74823: DOUBLE
74824: EQUAL
74825: IFTRUE 74883
74827: LD_INT 17
74829: DOUBLE
74830: EQUAL
74831: IFTRUE 74883
74833: LD_INT 18
74835: DOUBLE
74836: EQUAL
74837: IFTRUE 74883
74839: LD_INT 19
74841: DOUBLE
74842: EQUAL
74843: IFTRUE 74883
74845: LD_INT 22
74847: DOUBLE
74848: EQUAL
74849: IFTRUE 74883
74851: LD_INT 20
74853: DOUBLE
74854: EQUAL
74855: IFTRUE 74883
74857: LD_INT 21
74859: DOUBLE
74860: EQUAL
74861: IFTRUE 74883
74863: LD_INT 23
74865: DOUBLE
74866: EQUAL
74867: IFTRUE 74883
74869: LD_INT 24
74871: DOUBLE
74872: EQUAL
74873: IFTRUE 74883
74875: LD_INT 25
74877: DOUBLE
74878: EQUAL
74879: IFTRUE 74883
74881: GO 74939
74883: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74884: LD_ADDR_VAR 0 9
74888: PUSH
74889: LD_VAR 0 35
74893: PUSH
74894: LD_VAR 0 36
74898: PUSH
74899: LD_VAR 0 37
74903: PUSH
74904: LD_VAR 0 38
74908: PUSH
74909: LD_VAR 0 39
74913: PUSH
74914: LD_VAR 0 40
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: PUSH
74927: LD_VAR 0 4
74931: PUSH
74932: LD_INT 1
74934: PLUS
74935: ARRAY
74936: ST_TO_ADDR
74937: GO 75304
74939: LD_INT 6
74941: DOUBLE
74942: EQUAL
74943: IFTRUE 74995
74945: LD_INT 7
74947: DOUBLE
74948: EQUAL
74949: IFTRUE 74995
74951: LD_INT 8
74953: DOUBLE
74954: EQUAL
74955: IFTRUE 74995
74957: LD_INT 13
74959: DOUBLE
74960: EQUAL
74961: IFTRUE 74995
74963: LD_INT 12
74965: DOUBLE
74966: EQUAL
74967: IFTRUE 74995
74969: LD_INT 15
74971: DOUBLE
74972: EQUAL
74973: IFTRUE 74995
74975: LD_INT 11
74977: DOUBLE
74978: EQUAL
74979: IFTRUE 74995
74981: LD_INT 14
74983: DOUBLE
74984: EQUAL
74985: IFTRUE 74995
74987: LD_INT 10
74989: DOUBLE
74990: EQUAL
74991: IFTRUE 74995
74993: GO 75051
74995: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74996: LD_ADDR_VAR 0 9
75000: PUSH
75001: LD_VAR 0 41
75005: PUSH
75006: LD_VAR 0 42
75010: PUSH
75011: LD_VAR 0 43
75015: PUSH
75016: LD_VAR 0 44
75020: PUSH
75021: LD_VAR 0 45
75025: PUSH
75026: LD_VAR 0 46
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: PUSH
75039: LD_VAR 0 4
75043: PUSH
75044: LD_INT 1
75046: PLUS
75047: ARRAY
75048: ST_TO_ADDR
75049: GO 75304
75051: LD_INT 36
75053: DOUBLE
75054: EQUAL
75055: IFTRUE 75059
75057: GO 75115
75059: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75060: LD_ADDR_VAR 0 9
75064: PUSH
75065: LD_VAR 0 47
75069: PUSH
75070: LD_VAR 0 48
75074: PUSH
75075: LD_VAR 0 49
75079: PUSH
75080: LD_VAR 0 50
75084: PUSH
75085: LD_VAR 0 51
75089: PUSH
75090: LD_VAR 0 52
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: PUSH
75103: LD_VAR 0 4
75107: PUSH
75108: LD_INT 1
75110: PLUS
75111: ARRAY
75112: ST_TO_ADDR
75113: GO 75304
75115: LD_INT 4
75117: DOUBLE
75118: EQUAL
75119: IFTRUE 75141
75121: LD_INT 5
75123: DOUBLE
75124: EQUAL
75125: IFTRUE 75141
75127: LD_INT 34
75129: DOUBLE
75130: EQUAL
75131: IFTRUE 75141
75133: LD_INT 37
75135: DOUBLE
75136: EQUAL
75137: IFTRUE 75141
75139: GO 75197
75141: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75142: LD_ADDR_VAR 0 9
75146: PUSH
75147: LD_VAR 0 53
75151: PUSH
75152: LD_VAR 0 54
75156: PUSH
75157: LD_VAR 0 55
75161: PUSH
75162: LD_VAR 0 56
75166: PUSH
75167: LD_VAR 0 57
75171: PUSH
75172: LD_VAR 0 58
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: PUSH
75185: LD_VAR 0 4
75189: PUSH
75190: LD_INT 1
75192: PLUS
75193: ARRAY
75194: ST_TO_ADDR
75195: GO 75304
75197: LD_INT 31
75199: DOUBLE
75200: EQUAL
75201: IFTRUE 75247
75203: LD_INT 32
75205: DOUBLE
75206: EQUAL
75207: IFTRUE 75247
75209: LD_INT 33
75211: DOUBLE
75212: EQUAL
75213: IFTRUE 75247
75215: LD_INT 27
75217: DOUBLE
75218: EQUAL
75219: IFTRUE 75247
75221: LD_INT 26
75223: DOUBLE
75224: EQUAL
75225: IFTRUE 75247
75227: LD_INT 28
75229: DOUBLE
75230: EQUAL
75231: IFTRUE 75247
75233: LD_INT 29
75235: DOUBLE
75236: EQUAL
75237: IFTRUE 75247
75239: LD_INT 30
75241: DOUBLE
75242: EQUAL
75243: IFTRUE 75247
75245: GO 75303
75247: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75248: LD_ADDR_VAR 0 9
75252: PUSH
75253: LD_VAR 0 59
75257: PUSH
75258: LD_VAR 0 60
75262: PUSH
75263: LD_VAR 0 61
75267: PUSH
75268: LD_VAR 0 62
75272: PUSH
75273: LD_VAR 0 63
75277: PUSH
75278: LD_VAR 0 64
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: PUSH
75291: LD_VAR 0 4
75295: PUSH
75296: LD_INT 1
75298: PLUS
75299: ARRAY
75300: ST_TO_ADDR
75301: GO 75304
75303: POP
// temp_list2 = [ ] ;
75304: LD_ADDR_VAR 0 10
75308: PUSH
75309: EMPTY
75310: ST_TO_ADDR
// for i in temp_list do
75311: LD_ADDR_VAR 0 8
75315: PUSH
75316: LD_VAR 0 9
75320: PUSH
75321: FOR_IN
75322: IFFALSE 75374
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75324: LD_ADDR_VAR 0 10
75328: PUSH
75329: LD_VAR 0 10
75333: PUSH
75334: LD_VAR 0 8
75338: PUSH
75339: LD_INT 1
75341: ARRAY
75342: PUSH
75343: LD_VAR 0 2
75347: PLUS
75348: PUSH
75349: LD_VAR 0 8
75353: PUSH
75354: LD_INT 2
75356: ARRAY
75357: PUSH
75358: LD_VAR 0 3
75362: PLUS
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: EMPTY
75369: LIST
75370: ADD
75371: ST_TO_ADDR
75372: GO 75321
75374: POP
75375: POP
// result = temp_list2 ;
75376: LD_ADDR_VAR 0 7
75380: PUSH
75381: LD_VAR 0 10
75385: ST_TO_ADDR
// end ;
75386: LD_VAR 0 7
75390: RET
// export function EnemyInRange ( unit , dist ) ; begin
75391: LD_INT 0
75393: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75394: LD_ADDR_VAR 0 3
75398: PUSH
75399: LD_VAR 0 1
75403: PPUSH
75404: CALL_OW 255
75408: PPUSH
75409: LD_VAR 0 1
75413: PPUSH
75414: CALL_OW 250
75418: PPUSH
75419: LD_VAR 0 1
75423: PPUSH
75424: CALL_OW 251
75428: PPUSH
75429: LD_VAR 0 2
75433: PPUSH
75434: CALL 48648 0 4
75438: PUSH
75439: LD_INT 4
75441: ARRAY
75442: ST_TO_ADDR
// end ;
75443: LD_VAR 0 3
75447: RET
// export function PlayerSeeMe ( unit ) ; begin
75448: LD_INT 0
75450: PPUSH
// result := See ( your_side , unit ) ;
75451: LD_ADDR_VAR 0 2
75455: PUSH
75456: LD_OWVAR 2
75460: PPUSH
75461: LD_VAR 0 1
75465: PPUSH
75466: CALL_OW 292
75470: ST_TO_ADDR
// end ;
75471: LD_VAR 0 2
75475: RET
// export function ReverseDir ( unit ) ; begin
75476: LD_INT 0
75478: PPUSH
// if not unit then
75479: LD_VAR 0 1
75483: NOT
75484: IFFALSE 75488
// exit ;
75486: GO 75511
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75488: LD_ADDR_VAR 0 2
75492: PUSH
75493: LD_VAR 0 1
75497: PPUSH
75498: CALL_OW 254
75502: PUSH
75503: LD_INT 3
75505: PLUS
75506: PUSH
75507: LD_INT 6
75509: MOD
75510: ST_TO_ADDR
// end ;
75511: LD_VAR 0 2
75515: RET
// export function ReverseArray ( array ) ; var i ; begin
75516: LD_INT 0
75518: PPUSH
75519: PPUSH
// if not array then
75520: LD_VAR 0 1
75524: NOT
75525: IFFALSE 75529
// exit ;
75527: GO 75584
// result := [ ] ;
75529: LD_ADDR_VAR 0 2
75533: PUSH
75534: EMPTY
75535: ST_TO_ADDR
// for i := array downto 1 do
75536: LD_ADDR_VAR 0 3
75540: PUSH
75541: DOUBLE
75542: LD_VAR 0 1
75546: INC
75547: ST_TO_ADDR
75548: LD_INT 1
75550: PUSH
75551: FOR_DOWNTO
75552: IFFALSE 75582
// result := Join ( result , array [ i ] ) ;
75554: LD_ADDR_VAR 0 2
75558: PUSH
75559: LD_VAR 0 2
75563: PPUSH
75564: LD_VAR 0 1
75568: PUSH
75569: LD_VAR 0 3
75573: ARRAY
75574: PPUSH
75575: CALL 80436 0 2
75579: ST_TO_ADDR
75580: GO 75551
75582: POP
75583: POP
// end ;
75584: LD_VAR 0 2
75588: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75589: LD_INT 0
75591: PPUSH
75592: PPUSH
75593: PPUSH
75594: PPUSH
75595: PPUSH
75596: PPUSH
// if not unit or not hexes then
75597: LD_VAR 0 1
75601: NOT
75602: IFTRUE 75611
75604: PUSH
75605: LD_VAR 0 2
75609: NOT
75610: OR
75611: IFFALSE 75615
// exit ;
75613: GO 75738
// dist := 9999 ;
75615: LD_ADDR_VAR 0 5
75619: PUSH
75620: LD_INT 9999
75622: ST_TO_ADDR
// for i = 1 to hexes do
75623: LD_ADDR_VAR 0 4
75627: PUSH
75628: DOUBLE
75629: LD_INT 1
75631: DEC
75632: ST_TO_ADDR
75633: LD_VAR 0 2
75637: PUSH
75638: FOR_TO
75639: IFFALSE 75726
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75641: LD_ADDR_VAR 0 6
75645: PUSH
75646: LD_VAR 0 1
75650: PPUSH
75651: LD_VAR 0 2
75655: PUSH
75656: LD_VAR 0 4
75660: ARRAY
75661: PUSH
75662: LD_INT 1
75664: ARRAY
75665: PPUSH
75666: LD_VAR 0 2
75670: PUSH
75671: LD_VAR 0 4
75675: ARRAY
75676: PUSH
75677: LD_INT 2
75679: ARRAY
75680: PPUSH
75681: CALL_OW 297
75685: ST_TO_ADDR
// if tdist < dist then
75686: LD_VAR 0 6
75690: PUSH
75691: LD_VAR 0 5
75695: LESS
75696: IFFALSE 75724
// begin hex := hexes [ i ] ;
75698: LD_ADDR_VAR 0 8
75702: PUSH
75703: LD_VAR 0 2
75707: PUSH
75708: LD_VAR 0 4
75712: ARRAY
75713: ST_TO_ADDR
// dist := tdist ;
75714: LD_ADDR_VAR 0 5
75718: PUSH
75719: LD_VAR 0 6
75723: ST_TO_ADDR
// end ; end ;
75724: GO 75638
75726: POP
75727: POP
// result := hex ;
75728: LD_ADDR_VAR 0 3
75732: PUSH
75733: LD_VAR 0 8
75737: ST_TO_ADDR
// end ;
75738: LD_VAR 0 3
75742: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75743: LD_INT 0
75745: PPUSH
75746: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75747: LD_VAR 0 1
75751: NOT
75752: IFTRUE 75791
75754: PUSH
75755: LD_VAR 0 1
75759: PUSH
75760: LD_INT 21
75762: PUSH
75763: LD_INT 2
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PUSH
75770: LD_INT 23
75772: PUSH
75773: LD_INT 2
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PPUSH
75784: CALL_OW 69
75788: IN
75789: NOT
75790: OR
75791: IFFALSE 75795
// exit ;
75793: GO 75842
// for i = 1 to 3 do
75795: LD_ADDR_VAR 0 3
75799: PUSH
75800: DOUBLE
75801: LD_INT 1
75803: DEC
75804: ST_TO_ADDR
75805: LD_INT 3
75807: PUSH
75808: FOR_TO
75809: IFFALSE 75840
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75811: LD_VAR 0 1
75815: PPUSH
75816: CALL_OW 250
75820: PPUSH
75821: LD_VAR 0 1
75825: PPUSH
75826: CALL_OW 251
75830: PPUSH
75831: LD_INT 1
75833: PPUSH
75834: CALL_OW 453
75838: GO 75808
75840: POP
75841: POP
// end ;
75842: LD_VAR 0 2
75846: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75847: LD_INT 0
75849: PPUSH
75850: PPUSH
75851: PPUSH
75852: PPUSH
75853: PPUSH
75854: PPUSH
// if not unit or not enemy_unit then
75855: LD_VAR 0 1
75859: NOT
75860: IFTRUE 75869
75862: PUSH
75863: LD_VAR 0 2
75867: NOT
75868: OR
75869: IFFALSE 75873
// exit ;
75871: GO 76354
// if GetLives ( i ) < 250 then
75873: LD_VAR 0 4
75877: PPUSH
75878: CALL_OW 256
75882: PUSH
75883: LD_INT 250
75885: LESS
75886: IFFALSE 75899
// begin ComAutodestruct ( i ) ;
75888: LD_VAR 0 4
75892: PPUSH
75893: CALL 75743 0 1
// exit ;
75897: GO 76354
// end ; x := GetX ( enemy_unit ) ;
75899: LD_ADDR_VAR 0 7
75903: PUSH
75904: LD_VAR 0 2
75908: PPUSH
75909: CALL_OW 250
75913: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75914: LD_ADDR_VAR 0 8
75918: PUSH
75919: LD_VAR 0 2
75923: PPUSH
75924: CALL_OW 251
75928: ST_TO_ADDR
// if not x or not y then
75929: LD_VAR 0 7
75933: NOT
75934: IFTRUE 75943
75936: PUSH
75937: LD_VAR 0 8
75941: NOT
75942: OR
75943: IFFALSE 75947
// exit ;
75945: GO 76354
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75947: LD_ADDR_VAR 0 6
75951: PUSH
75952: LD_VAR 0 7
75956: PPUSH
75957: LD_INT 0
75959: PPUSH
75960: LD_INT 4
75962: PPUSH
75963: CALL_OW 272
75967: PUSH
75968: LD_VAR 0 8
75972: PPUSH
75973: LD_INT 0
75975: PPUSH
75976: LD_INT 4
75978: PPUSH
75979: CALL_OW 273
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: LD_VAR 0 7
75992: PPUSH
75993: LD_INT 1
75995: PPUSH
75996: LD_INT 4
75998: PPUSH
75999: CALL_OW 272
76003: PUSH
76004: LD_VAR 0 8
76008: PPUSH
76009: LD_INT 1
76011: PPUSH
76012: LD_INT 4
76014: PPUSH
76015: CALL_OW 273
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_VAR 0 7
76028: PPUSH
76029: LD_INT 2
76031: PPUSH
76032: LD_INT 4
76034: PPUSH
76035: CALL_OW 272
76039: PUSH
76040: LD_VAR 0 8
76044: PPUSH
76045: LD_INT 2
76047: PPUSH
76048: LD_INT 4
76050: PPUSH
76051: CALL_OW 273
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: LD_VAR 0 7
76064: PPUSH
76065: LD_INT 3
76067: PPUSH
76068: LD_INT 4
76070: PPUSH
76071: CALL_OW 272
76075: PUSH
76076: LD_VAR 0 8
76080: PPUSH
76081: LD_INT 3
76083: PPUSH
76084: LD_INT 4
76086: PPUSH
76087: CALL_OW 273
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_VAR 0 7
76100: PPUSH
76101: LD_INT 4
76103: PPUSH
76104: LD_INT 4
76106: PPUSH
76107: CALL_OW 272
76111: PUSH
76112: LD_VAR 0 8
76116: PPUSH
76117: LD_INT 4
76119: PPUSH
76120: LD_INT 4
76122: PPUSH
76123: CALL_OW 273
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_VAR 0 7
76136: PPUSH
76137: LD_INT 5
76139: PPUSH
76140: LD_INT 4
76142: PPUSH
76143: CALL_OW 272
76147: PUSH
76148: LD_VAR 0 8
76152: PPUSH
76153: LD_INT 5
76155: PPUSH
76156: LD_INT 4
76158: PPUSH
76159: CALL_OW 273
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: EMPTY
76169: LIST
76170: LIST
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: ST_TO_ADDR
// for i = tmp downto 1 do
76176: LD_ADDR_VAR 0 4
76180: PUSH
76181: DOUBLE
76182: LD_VAR 0 6
76186: INC
76187: ST_TO_ADDR
76188: LD_INT 1
76190: PUSH
76191: FOR_DOWNTO
76192: IFFALSE 76295
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76194: LD_VAR 0 6
76198: PUSH
76199: LD_VAR 0 4
76203: ARRAY
76204: PUSH
76205: LD_INT 1
76207: ARRAY
76208: PPUSH
76209: LD_VAR 0 6
76213: PUSH
76214: LD_VAR 0 4
76218: ARRAY
76219: PUSH
76220: LD_INT 2
76222: ARRAY
76223: PPUSH
76224: CALL_OW 488
76228: NOT
76229: IFTRUE 76271
76231: PUSH
76232: LD_VAR 0 6
76236: PUSH
76237: LD_VAR 0 4
76241: ARRAY
76242: PUSH
76243: LD_INT 1
76245: ARRAY
76246: PPUSH
76247: LD_VAR 0 6
76251: PUSH
76252: LD_VAR 0 4
76256: ARRAY
76257: PUSH
76258: LD_INT 2
76260: ARRAY
76261: PPUSH
76262: CALL_OW 428
76266: PUSH
76267: LD_INT 0
76269: NONEQUAL
76270: OR
76271: IFFALSE 76293
// tmp := Delete ( tmp , i ) ;
76273: LD_ADDR_VAR 0 6
76277: PUSH
76278: LD_VAR 0 6
76282: PPUSH
76283: LD_VAR 0 4
76287: PPUSH
76288: CALL_OW 3
76292: ST_TO_ADDR
76293: GO 76191
76295: POP
76296: POP
// j := GetClosestHex ( unit , tmp ) ;
76297: LD_ADDR_VAR 0 5
76301: PUSH
76302: LD_VAR 0 1
76306: PPUSH
76307: LD_VAR 0 6
76311: PPUSH
76312: CALL 75589 0 2
76316: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76317: LD_VAR 0 1
76321: PPUSH
76322: LD_VAR 0 5
76326: PUSH
76327: LD_INT 1
76329: ARRAY
76330: PPUSH
76331: LD_VAR 0 5
76335: PUSH
76336: LD_INT 2
76338: ARRAY
76339: PPUSH
76340: CALL_OW 111
// result := j ;
76344: LD_ADDR_VAR 0 3
76348: PUSH
76349: LD_VAR 0 5
76353: ST_TO_ADDR
// end ;
76354: LD_VAR 0 3
76358: RET
// export function PrepareApemanSoldier ( ) ; begin
76359: LD_INT 0
76361: PPUSH
// uc_nation := 0 ;
76362: LD_ADDR_OWVAR 21
76366: PUSH
76367: LD_INT 0
76369: ST_TO_ADDR
// hc_sex := sex_male ;
76370: LD_ADDR_OWVAR 27
76374: PUSH
76375: LD_INT 1
76377: ST_TO_ADDR
// hc_name :=  ;
76378: LD_ADDR_OWVAR 26
76382: PUSH
76383: LD_STRING 
76385: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76386: LD_ADDR_OWVAR 28
76390: PUSH
76391: LD_INT 15
76393: ST_TO_ADDR
// hc_gallery :=  ;
76394: LD_ADDR_OWVAR 33
76398: PUSH
76399: LD_STRING 
76401: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76402: LD_ADDR_OWVAR 31
76406: PUSH
76407: LD_INT 0
76409: PPUSH
76410: LD_INT 3
76412: PPUSH
76413: CALL_OW 12
76417: PUSH
76418: LD_INT 0
76420: PPUSH
76421: LD_INT 3
76423: PPUSH
76424: CALL_OW 12
76428: PUSH
76429: LD_INT 0
76431: PUSH
76432: LD_INT 0
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76441: LD_ADDR_OWVAR 29
76445: PUSH
76446: LD_INT 10
76448: PUSH
76449: LD_INT 12
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: ST_TO_ADDR
// end ;
76456: LD_VAR 0 1
76460: RET
// export function PrepareApemanEngineer ( ) ; begin
76461: LD_INT 0
76463: PPUSH
// uc_nation := 0 ;
76464: LD_ADDR_OWVAR 21
76468: PUSH
76469: LD_INT 0
76471: ST_TO_ADDR
// hc_sex := sex_male ;
76472: LD_ADDR_OWVAR 27
76476: PUSH
76477: LD_INT 1
76479: ST_TO_ADDR
// hc_name :=  ;
76480: LD_ADDR_OWVAR 26
76484: PUSH
76485: LD_STRING 
76487: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76488: LD_ADDR_OWVAR 28
76492: PUSH
76493: LD_INT 16
76495: ST_TO_ADDR
// hc_gallery :=  ;
76496: LD_ADDR_OWVAR 33
76500: PUSH
76501: LD_STRING 
76503: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76504: LD_ADDR_OWVAR 31
76508: PUSH
76509: LD_INT 0
76511: PPUSH
76512: LD_INT 3
76514: PPUSH
76515: CALL_OW 12
76519: PUSH
76520: LD_INT 0
76522: PPUSH
76523: LD_INT 3
76525: PPUSH
76526: CALL_OW 12
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: LD_INT 0
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76543: LD_ADDR_OWVAR 29
76547: PUSH
76548: LD_INT 10
76550: PUSH
76551: LD_INT 12
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: ST_TO_ADDR
// end ;
76558: LD_VAR 0 1
76562: RET
// export function PrepareApeman ( agressivity ) ; begin
76563: LD_INT 0
76565: PPUSH
// uc_side := 0 ;
76566: LD_ADDR_OWVAR 20
76570: PUSH
76571: LD_INT 0
76573: ST_TO_ADDR
// uc_nation := 0 ;
76574: LD_ADDR_OWVAR 21
76578: PUSH
76579: LD_INT 0
76581: ST_TO_ADDR
// hc_sex := sex_male ;
76582: LD_ADDR_OWVAR 27
76586: PUSH
76587: LD_INT 1
76589: ST_TO_ADDR
// hc_class := class_apeman ;
76590: LD_ADDR_OWVAR 28
76594: PUSH
76595: LD_INT 12
76597: ST_TO_ADDR
// hc_gallery :=  ;
76598: LD_ADDR_OWVAR 33
76602: PUSH
76603: LD_STRING 
76605: ST_TO_ADDR
// hc_name :=  ;
76606: LD_ADDR_OWVAR 26
76610: PUSH
76611: LD_STRING 
76613: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76614: LD_ADDR_OWVAR 29
76618: PUSH
76619: LD_INT 10
76621: PUSH
76622: LD_INT 12
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: ST_TO_ADDR
// if agressivity = 0 then
76629: LD_VAR 0 1
76633: PUSH
76634: LD_INT 0
76636: EQUAL
76637: IFFALSE 76649
// hc_agressivity := 0 else
76639: LD_ADDR_OWVAR 35
76643: PUSH
76644: LD_INT 0
76646: ST_TO_ADDR
76647: GO 76670
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76649: LD_ADDR_OWVAR 35
76653: PUSH
76654: LD_VAR 0 1
76658: NEG
76659: PPUSH
76660: LD_VAR 0 1
76664: PPUSH
76665: CALL_OW 12
76669: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76670: LD_ADDR_OWVAR 31
76674: PUSH
76675: LD_INT 0
76677: PPUSH
76678: LD_INT 3
76680: PPUSH
76681: CALL_OW 12
76685: PUSH
76686: LD_INT 0
76688: PPUSH
76689: LD_INT 3
76691: PPUSH
76692: CALL_OW 12
76696: PUSH
76697: LD_INT 0
76699: PUSH
76700: LD_INT 0
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: ST_TO_ADDR
// end ;
76709: LD_VAR 0 2
76713: RET
// export function PrepareTiger ( agressivity ) ; begin
76714: LD_INT 0
76716: PPUSH
// uc_side := 0 ;
76717: LD_ADDR_OWVAR 20
76721: PUSH
76722: LD_INT 0
76724: ST_TO_ADDR
// uc_nation := 0 ;
76725: LD_ADDR_OWVAR 21
76729: PUSH
76730: LD_INT 0
76732: ST_TO_ADDR
// InitHc ;
76733: CALL_OW 19
// hc_class := class_tiger ;
76737: LD_ADDR_OWVAR 28
76741: PUSH
76742: LD_INT 14
76744: ST_TO_ADDR
// hc_gallery :=  ;
76745: LD_ADDR_OWVAR 33
76749: PUSH
76750: LD_STRING 
76752: ST_TO_ADDR
// hc_name :=  ;
76753: LD_ADDR_OWVAR 26
76757: PUSH
76758: LD_STRING 
76760: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76761: LD_ADDR_OWVAR 35
76765: PUSH
76766: LD_VAR 0 1
76770: NEG
76771: PPUSH
76772: LD_VAR 0 1
76776: PPUSH
76777: CALL_OW 12
76781: ST_TO_ADDR
// end ;
76782: LD_VAR 0 2
76786: RET
// export function PrepareEnchidna ( ) ; begin
76787: LD_INT 0
76789: PPUSH
// uc_side := 0 ;
76790: LD_ADDR_OWVAR 20
76794: PUSH
76795: LD_INT 0
76797: ST_TO_ADDR
// uc_nation := 0 ;
76798: LD_ADDR_OWVAR 21
76802: PUSH
76803: LD_INT 0
76805: ST_TO_ADDR
// InitHc ;
76806: CALL_OW 19
// hc_class := class_baggie ;
76810: LD_ADDR_OWVAR 28
76814: PUSH
76815: LD_INT 13
76817: ST_TO_ADDR
// hc_gallery :=  ;
76818: LD_ADDR_OWVAR 33
76822: PUSH
76823: LD_STRING 
76825: ST_TO_ADDR
// hc_name :=  ;
76826: LD_ADDR_OWVAR 26
76830: PUSH
76831: LD_STRING 
76833: ST_TO_ADDR
// end ;
76834: LD_VAR 0 1
76838: RET
// export function PrepareFrog ( ) ; begin
76839: LD_INT 0
76841: PPUSH
// uc_side := 0 ;
76842: LD_ADDR_OWVAR 20
76846: PUSH
76847: LD_INT 0
76849: ST_TO_ADDR
// uc_nation := 0 ;
76850: LD_ADDR_OWVAR 21
76854: PUSH
76855: LD_INT 0
76857: ST_TO_ADDR
// InitHc ;
76858: CALL_OW 19
// hc_class := class_frog ;
76862: LD_ADDR_OWVAR 28
76866: PUSH
76867: LD_INT 19
76869: ST_TO_ADDR
// hc_gallery :=  ;
76870: LD_ADDR_OWVAR 33
76874: PUSH
76875: LD_STRING 
76877: ST_TO_ADDR
// hc_name :=  ;
76878: LD_ADDR_OWVAR 26
76882: PUSH
76883: LD_STRING 
76885: ST_TO_ADDR
// end ;
76886: LD_VAR 0 1
76890: RET
// export function PrepareFish ( ) ; begin
76891: LD_INT 0
76893: PPUSH
// uc_side := 0 ;
76894: LD_ADDR_OWVAR 20
76898: PUSH
76899: LD_INT 0
76901: ST_TO_ADDR
// uc_nation := 0 ;
76902: LD_ADDR_OWVAR 21
76906: PUSH
76907: LD_INT 0
76909: ST_TO_ADDR
// InitHc ;
76910: CALL_OW 19
// hc_class := class_fish ;
76914: LD_ADDR_OWVAR 28
76918: PUSH
76919: LD_INT 20
76921: ST_TO_ADDR
// hc_gallery :=  ;
76922: LD_ADDR_OWVAR 33
76926: PUSH
76927: LD_STRING 
76929: ST_TO_ADDR
// hc_name :=  ;
76930: LD_ADDR_OWVAR 26
76934: PUSH
76935: LD_STRING 
76937: ST_TO_ADDR
// end ;
76938: LD_VAR 0 1
76942: RET
// export function PrepareBird ( ) ; begin
76943: LD_INT 0
76945: PPUSH
// uc_side := 0 ;
76946: LD_ADDR_OWVAR 20
76950: PUSH
76951: LD_INT 0
76953: ST_TO_ADDR
// uc_nation := 0 ;
76954: LD_ADDR_OWVAR 21
76958: PUSH
76959: LD_INT 0
76961: ST_TO_ADDR
// InitHc ;
76962: CALL_OW 19
// hc_class := class_phororhacos ;
76966: LD_ADDR_OWVAR 28
76970: PUSH
76971: LD_INT 18
76973: ST_TO_ADDR
// hc_gallery :=  ;
76974: LD_ADDR_OWVAR 33
76978: PUSH
76979: LD_STRING 
76981: ST_TO_ADDR
// hc_name :=  ;
76982: LD_ADDR_OWVAR 26
76986: PUSH
76987: LD_STRING 
76989: ST_TO_ADDR
// end ;
76990: LD_VAR 0 1
76994: RET
// export function PrepareHorse ( ) ; begin
76995: LD_INT 0
76997: PPUSH
// uc_side := 0 ;
76998: LD_ADDR_OWVAR 20
77002: PUSH
77003: LD_INT 0
77005: ST_TO_ADDR
// uc_nation := 0 ;
77006: LD_ADDR_OWVAR 21
77010: PUSH
77011: LD_INT 0
77013: ST_TO_ADDR
// InitHc ;
77014: CALL_OW 19
// hc_class := class_horse ;
77018: LD_ADDR_OWVAR 28
77022: PUSH
77023: LD_INT 21
77025: ST_TO_ADDR
// hc_gallery :=  ;
77026: LD_ADDR_OWVAR 33
77030: PUSH
77031: LD_STRING 
77033: ST_TO_ADDR
// hc_name :=  ;
77034: LD_ADDR_OWVAR 26
77038: PUSH
77039: LD_STRING 
77041: ST_TO_ADDR
// end ;
77042: LD_VAR 0 1
77046: RET
// export function PrepareMastodont ( ) ; begin
77047: LD_INT 0
77049: PPUSH
// uc_side := 0 ;
77050: LD_ADDR_OWVAR 20
77054: PUSH
77055: LD_INT 0
77057: ST_TO_ADDR
// uc_nation := 0 ;
77058: LD_ADDR_OWVAR 21
77062: PUSH
77063: LD_INT 0
77065: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77066: LD_ADDR_OWVAR 37
77070: PUSH
77071: LD_INT 31
77073: ST_TO_ADDR
// vc_control := control_rider ;
77074: LD_ADDR_OWVAR 38
77078: PUSH
77079: LD_INT 4
77081: ST_TO_ADDR
// end ;
77082: LD_VAR 0 1
77086: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77087: LD_INT 0
77089: PPUSH
77090: PPUSH
77091: PPUSH
// uc_side = 0 ;
77092: LD_ADDR_OWVAR 20
77096: PUSH
77097: LD_INT 0
77099: ST_TO_ADDR
// uc_nation = 0 ;
77100: LD_ADDR_OWVAR 21
77104: PUSH
77105: LD_INT 0
77107: ST_TO_ADDR
// InitHc_All ( ) ;
77108: CALL_OW 584
// InitVc ;
77112: CALL_OW 20
// if mastodonts then
77116: LD_VAR 0 6
77120: IFFALSE 77187
// for i = 1 to mastodonts do
77122: LD_ADDR_VAR 0 11
77126: PUSH
77127: DOUBLE
77128: LD_INT 1
77130: DEC
77131: ST_TO_ADDR
77132: LD_VAR 0 6
77136: PUSH
77137: FOR_TO
77138: IFFALSE 77185
// begin vc_chassis := 31 ;
77140: LD_ADDR_OWVAR 37
77144: PUSH
77145: LD_INT 31
77147: ST_TO_ADDR
// vc_control := control_rider ;
77148: LD_ADDR_OWVAR 38
77152: PUSH
77153: LD_INT 4
77155: ST_TO_ADDR
// animal := CreateVehicle ;
77156: LD_ADDR_VAR 0 12
77160: PUSH
77161: CALL_OW 45
77165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77166: LD_VAR 0 12
77170: PPUSH
77171: LD_VAR 0 8
77175: PPUSH
77176: LD_INT 0
77178: PPUSH
77179: CALL 79329 0 3
// end ;
77183: GO 77137
77185: POP
77186: POP
// if horses then
77187: LD_VAR 0 5
77191: IFFALSE 77258
// for i = 1 to horses do
77193: LD_ADDR_VAR 0 11
77197: PUSH
77198: DOUBLE
77199: LD_INT 1
77201: DEC
77202: ST_TO_ADDR
77203: LD_VAR 0 5
77207: PUSH
77208: FOR_TO
77209: IFFALSE 77256
// begin hc_class := 21 ;
77211: LD_ADDR_OWVAR 28
77215: PUSH
77216: LD_INT 21
77218: ST_TO_ADDR
// hc_gallery :=  ;
77219: LD_ADDR_OWVAR 33
77223: PUSH
77224: LD_STRING 
77226: ST_TO_ADDR
// animal := CreateHuman ;
77227: LD_ADDR_VAR 0 12
77231: PUSH
77232: CALL_OW 44
77236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77237: LD_VAR 0 12
77241: PPUSH
77242: LD_VAR 0 8
77246: PPUSH
77247: LD_INT 0
77249: PPUSH
77250: CALL 79329 0 3
// end ;
77254: GO 77208
77256: POP
77257: POP
// if birds then
77258: LD_VAR 0 1
77262: IFFALSE 77329
// for i = 1 to birds do
77264: LD_ADDR_VAR 0 11
77268: PUSH
77269: DOUBLE
77270: LD_INT 1
77272: DEC
77273: ST_TO_ADDR
77274: LD_VAR 0 1
77278: PUSH
77279: FOR_TO
77280: IFFALSE 77327
// begin hc_class := 18 ;
77282: LD_ADDR_OWVAR 28
77286: PUSH
77287: LD_INT 18
77289: ST_TO_ADDR
// hc_gallery =  ;
77290: LD_ADDR_OWVAR 33
77294: PUSH
77295: LD_STRING 
77297: ST_TO_ADDR
// animal := CreateHuman ;
77298: LD_ADDR_VAR 0 12
77302: PUSH
77303: CALL_OW 44
77307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77308: LD_VAR 0 12
77312: PPUSH
77313: LD_VAR 0 8
77317: PPUSH
77318: LD_INT 0
77320: PPUSH
77321: CALL 79329 0 3
// end ;
77325: GO 77279
77327: POP
77328: POP
// if tigers then
77329: LD_VAR 0 2
77333: IFFALSE 77417
// for i = 1 to tigers do
77335: LD_ADDR_VAR 0 11
77339: PUSH
77340: DOUBLE
77341: LD_INT 1
77343: DEC
77344: ST_TO_ADDR
77345: LD_VAR 0 2
77349: PUSH
77350: FOR_TO
77351: IFFALSE 77415
// begin hc_class = class_tiger ;
77353: LD_ADDR_OWVAR 28
77357: PUSH
77358: LD_INT 14
77360: ST_TO_ADDR
// hc_gallery =  ;
77361: LD_ADDR_OWVAR 33
77365: PUSH
77366: LD_STRING 
77368: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77369: LD_ADDR_OWVAR 35
77373: PUSH
77374: LD_INT 7
77376: NEG
77377: PPUSH
77378: LD_INT 7
77380: PPUSH
77381: CALL_OW 12
77385: ST_TO_ADDR
// animal := CreateHuman ;
77386: LD_ADDR_VAR 0 12
77390: PUSH
77391: CALL_OW 44
77395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77396: LD_VAR 0 12
77400: PPUSH
77401: LD_VAR 0 8
77405: PPUSH
77406: LD_INT 0
77408: PPUSH
77409: CALL 79329 0 3
// end ;
77413: GO 77350
77415: POP
77416: POP
// if apemans then
77417: LD_VAR 0 3
77421: IFFALSE 77544
// for i = 1 to apemans do
77423: LD_ADDR_VAR 0 11
77427: PUSH
77428: DOUBLE
77429: LD_INT 1
77431: DEC
77432: ST_TO_ADDR
77433: LD_VAR 0 3
77437: PUSH
77438: FOR_TO
77439: IFFALSE 77542
// begin hc_class = class_apeman ;
77441: LD_ADDR_OWVAR 28
77445: PUSH
77446: LD_INT 12
77448: ST_TO_ADDR
// hc_gallery =  ;
77449: LD_ADDR_OWVAR 33
77453: PUSH
77454: LD_STRING 
77456: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77457: LD_ADDR_OWVAR 35
77461: PUSH
77462: LD_INT 2
77464: NEG
77465: PPUSH
77466: LD_INT 2
77468: PPUSH
77469: CALL_OW 12
77473: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77474: LD_ADDR_OWVAR 31
77478: PUSH
77479: LD_INT 1
77481: PPUSH
77482: LD_INT 3
77484: PPUSH
77485: CALL_OW 12
77489: PUSH
77490: LD_INT 1
77492: PPUSH
77493: LD_INT 3
77495: PPUSH
77496: CALL_OW 12
77500: PUSH
77501: LD_INT 0
77503: PUSH
77504: LD_INT 0
77506: PUSH
77507: EMPTY
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: ST_TO_ADDR
// animal := CreateHuman ;
77513: LD_ADDR_VAR 0 12
77517: PUSH
77518: CALL_OW 44
77522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77523: LD_VAR 0 12
77527: PPUSH
77528: LD_VAR 0 8
77532: PPUSH
77533: LD_INT 0
77535: PPUSH
77536: CALL 79329 0 3
// end ;
77540: GO 77438
77542: POP
77543: POP
// if enchidnas then
77544: LD_VAR 0 4
77548: IFFALSE 77615
// for i = 1 to enchidnas do
77550: LD_ADDR_VAR 0 11
77554: PUSH
77555: DOUBLE
77556: LD_INT 1
77558: DEC
77559: ST_TO_ADDR
77560: LD_VAR 0 4
77564: PUSH
77565: FOR_TO
77566: IFFALSE 77613
// begin hc_class = 13 ;
77568: LD_ADDR_OWVAR 28
77572: PUSH
77573: LD_INT 13
77575: ST_TO_ADDR
// hc_gallery =  ;
77576: LD_ADDR_OWVAR 33
77580: PUSH
77581: LD_STRING 
77583: ST_TO_ADDR
// animal := CreateHuman ;
77584: LD_ADDR_VAR 0 12
77588: PUSH
77589: CALL_OW 44
77593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77594: LD_VAR 0 12
77598: PPUSH
77599: LD_VAR 0 8
77603: PPUSH
77604: LD_INT 0
77606: PPUSH
77607: CALL 79329 0 3
// end ;
77611: GO 77565
77613: POP
77614: POP
// if fishes then
77615: LD_VAR 0 7
77619: IFFALSE 77686
// for i = 1 to fishes do
77621: LD_ADDR_VAR 0 11
77625: PUSH
77626: DOUBLE
77627: LD_INT 1
77629: DEC
77630: ST_TO_ADDR
77631: LD_VAR 0 7
77635: PUSH
77636: FOR_TO
77637: IFFALSE 77684
// begin hc_class = 20 ;
77639: LD_ADDR_OWVAR 28
77643: PUSH
77644: LD_INT 20
77646: ST_TO_ADDR
// hc_gallery =  ;
77647: LD_ADDR_OWVAR 33
77651: PUSH
77652: LD_STRING 
77654: ST_TO_ADDR
// animal := CreateHuman ;
77655: LD_ADDR_VAR 0 12
77659: PUSH
77660: CALL_OW 44
77664: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77665: LD_VAR 0 12
77669: PPUSH
77670: LD_VAR 0 9
77674: PPUSH
77675: LD_INT 0
77677: PPUSH
77678: CALL 79329 0 3
// end ;
77682: GO 77636
77684: POP
77685: POP
// end ;
77686: LD_VAR 0 10
77690: RET
// export function WantHeal ( sci , unit ) ; begin
77691: LD_INT 0
77693: PPUSH
// if GetTaskList ( sci ) > 0 then
77694: LD_VAR 0 1
77698: PPUSH
77699: CALL_OW 437
77703: PUSH
77704: LD_INT 0
77706: GREATER
77707: IFFALSE 77779
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77709: LD_VAR 0 1
77713: PPUSH
77714: CALL_OW 437
77718: PUSH
77719: LD_INT 1
77721: ARRAY
77722: PUSH
77723: LD_INT 1
77725: ARRAY
77726: PUSH
77727: LD_STRING l
77729: EQUAL
77730: IFFALSE 77757
77732: PUSH
77733: LD_VAR 0 1
77737: PPUSH
77738: CALL_OW 437
77742: PUSH
77743: LD_INT 1
77745: ARRAY
77746: PUSH
77747: LD_INT 4
77749: ARRAY
77750: PUSH
77751: LD_VAR 0 2
77755: EQUAL
77756: AND
77757: IFFALSE 77769
// result := true else
77759: LD_ADDR_VAR 0 3
77763: PUSH
77764: LD_INT 1
77766: ST_TO_ADDR
77767: GO 77777
// result := false ;
77769: LD_ADDR_VAR 0 3
77773: PUSH
77774: LD_INT 0
77776: ST_TO_ADDR
// end else
77777: GO 77787
// result := false ;
77779: LD_ADDR_VAR 0 3
77783: PUSH
77784: LD_INT 0
77786: ST_TO_ADDR
// end ;
77787: LD_VAR 0 3
77791: RET
// export function HealTarget ( sci ) ; begin
77792: LD_INT 0
77794: PPUSH
// if not sci then
77795: LD_VAR 0 1
77799: NOT
77800: IFFALSE 77804
// exit ;
77802: GO 77869
// result := 0 ;
77804: LD_ADDR_VAR 0 2
77808: PUSH
77809: LD_INT 0
77811: ST_TO_ADDR
// if GetTaskList ( sci ) then
77812: LD_VAR 0 1
77816: PPUSH
77817: CALL_OW 437
77821: IFFALSE 77869
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77823: LD_VAR 0 1
77827: PPUSH
77828: CALL_OW 437
77832: PUSH
77833: LD_INT 1
77835: ARRAY
77836: PUSH
77837: LD_INT 1
77839: ARRAY
77840: PUSH
77841: LD_STRING l
77843: EQUAL
77844: IFFALSE 77869
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77846: LD_ADDR_VAR 0 2
77850: PUSH
77851: LD_VAR 0 1
77855: PPUSH
77856: CALL_OW 437
77860: PUSH
77861: LD_INT 1
77863: ARRAY
77864: PUSH
77865: LD_INT 4
77867: ARRAY
77868: ST_TO_ADDR
// end ;
77869: LD_VAR 0 2
77873: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77874: LD_INT 0
77876: PPUSH
77877: PPUSH
77878: PPUSH
77879: PPUSH
// if not base_units then
77880: LD_VAR 0 1
77884: NOT
77885: IFFALSE 77889
// exit ;
77887: GO 77976
// result := false ;
77889: LD_ADDR_VAR 0 2
77893: PUSH
77894: LD_INT 0
77896: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77897: LD_ADDR_VAR 0 5
77901: PUSH
77902: LD_VAR 0 1
77906: PPUSH
77907: LD_INT 21
77909: PUSH
77910: LD_INT 3
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PPUSH
77917: CALL_OW 72
77921: ST_TO_ADDR
// if not tmp then
77922: LD_VAR 0 5
77926: NOT
77927: IFFALSE 77931
// exit ;
77929: GO 77976
// for i in tmp do
77931: LD_ADDR_VAR 0 3
77935: PUSH
77936: LD_VAR 0 5
77940: PUSH
77941: FOR_IN
77942: IFFALSE 77974
// begin result := EnemyInRange ( i , 22 ) ;
77944: LD_ADDR_VAR 0 2
77948: PUSH
77949: LD_VAR 0 3
77953: PPUSH
77954: LD_INT 22
77956: PPUSH
77957: CALL 75391 0 2
77961: ST_TO_ADDR
// if result then
77962: LD_VAR 0 2
77966: IFFALSE 77972
// exit ;
77968: POP
77969: POP
77970: GO 77976
// end ;
77972: GO 77941
77974: POP
77975: POP
// end ;
77976: LD_VAR 0 2
77980: RET
// export function FilterByTag ( units , tag ) ; begin
77981: LD_INT 0
77983: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77984: LD_ADDR_VAR 0 3
77988: PUSH
77989: LD_VAR 0 1
77993: PPUSH
77994: LD_INT 120
77996: PUSH
77997: LD_VAR 0 2
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: PPUSH
78006: CALL_OW 72
78010: ST_TO_ADDR
// end ;
78011: LD_VAR 0 3
78015: RET
// export function IsDriver ( un ) ; begin
78016: LD_INT 0
78018: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78019: LD_ADDR_VAR 0 2
78023: PUSH
78024: LD_VAR 0 1
78028: PUSH
78029: LD_INT 55
78031: PUSH
78032: EMPTY
78033: LIST
78034: PPUSH
78035: CALL_OW 69
78039: IN
78040: ST_TO_ADDR
// end ;
78041: LD_VAR 0 2
78045: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78046: LD_INT 0
78048: PPUSH
78049: PPUSH
// list := [ ] ;
78050: LD_ADDR_VAR 0 5
78054: PUSH
78055: EMPTY
78056: ST_TO_ADDR
// case d of 0 :
78057: LD_VAR 0 3
78061: PUSH
78062: LD_INT 0
78064: DOUBLE
78065: EQUAL
78066: IFTRUE 78070
78068: GO 78203
78070: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78071: LD_ADDR_VAR 0 5
78075: PUSH
78076: LD_VAR 0 1
78080: PUSH
78081: LD_INT 4
78083: MINUS
78084: PUSH
78085: LD_VAR 0 2
78089: PUSH
78090: LD_INT 4
78092: MINUS
78093: PUSH
78094: LD_INT 2
78096: PUSH
78097: EMPTY
78098: LIST
78099: LIST
78100: LIST
78101: PUSH
78102: LD_VAR 0 1
78106: PUSH
78107: LD_INT 3
78109: MINUS
78110: PUSH
78111: LD_VAR 0 2
78115: PUSH
78116: LD_INT 1
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: LIST
78123: PUSH
78124: LD_VAR 0 1
78128: PUSH
78129: LD_INT 4
78131: PLUS
78132: PUSH
78133: LD_VAR 0 2
78137: PUSH
78138: LD_INT 4
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: LIST
78145: PUSH
78146: LD_VAR 0 1
78150: PUSH
78151: LD_INT 3
78153: PLUS
78154: PUSH
78155: LD_VAR 0 2
78159: PUSH
78160: LD_INT 3
78162: PLUS
78163: PUSH
78164: LD_INT 5
78166: PUSH
78167: EMPTY
78168: LIST
78169: LIST
78170: LIST
78171: PUSH
78172: LD_VAR 0 1
78176: PUSH
78177: LD_VAR 0 2
78181: PUSH
78182: LD_INT 4
78184: PLUS
78185: PUSH
78186: LD_INT 0
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: LIST
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: ST_TO_ADDR
// end ; 1 :
78201: GO 78901
78203: LD_INT 1
78205: DOUBLE
78206: EQUAL
78207: IFTRUE 78211
78209: GO 78344
78211: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78212: LD_ADDR_VAR 0 5
78216: PUSH
78217: LD_VAR 0 1
78221: PUSH
78222: LD_VAR 0 2
78226: PUSH
78227: LD_INT 4
78229: MINUS
78230: PUSH
78231: LD_INT 3
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: LIST
78238: PUSH
78239: LD_VAR 0 1
78243: PUSH
78244: LD_INT 3
78246: MINUS
78247: PUSH
78248: LD_VAR 0 2
78252: PUSH
78253: LD_INT 3
78255: MINUS
78256: PUSH
78257: LD_INT 2
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: LIST
78264: PUSH
78265: LD_VAR 0 1
78269: PUSH
78270: LD_INT 4
78272: MINUS
78273: PUSH
78274: LD_VAR 0 2
78278: PUSH
78279: LD_INT 1
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: LIST
78286: PUSH
78287: LD_VAR 0 1
78291: PUSH
78292: LD_VAR 0 2
78296: PUSH
78297: LD_INT 3
78299: PLUS
78300: PUSH
78301: LD_INT 0
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: LIST
78308: PUSH
78309: LD_VAR 0 1
78313: PUSH
78314: LD_INT 4
78316: PLUS
78317: PUSH
78318: LD_VAR 0 2
78322: PUSH
78323: LD_INT 4
78325: PLUS
78326: PUSH
78327: LD_INT 5
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: LIST
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: LIST
78339: LIST
78340: LIST
78341: ST_TO_ADDR
// end ; 2 :
78342: GO 78901
78344: LD_INT 2
78346: DOUBLE
78347: EQUAL
78348: IFTRUE 78352
78350: GO 78481
78352: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78353: LD_ADDR_VAR 0 5
78357: PUSH
78358: LD_VAR 0 1
78362: PUSH
78363: LD_VAR 0 2
78367: PUSH
78368: LD_INT 3
78370: MINUS
78371: PUSH
78372: LD_INT 3
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: LIST
78379: PUSH
78380: LD_VAR 0 1
78384: PUSH
78385: LD_INT 4
78387: PLUS
78388: PUSH
78389: LD_VAR 0 2
78393: PUSH
78394: LD_INT 4
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: LIST
78401: PUSH
78402: LD_VAR 0 1
78406: PUSH
78407: LD_VAR 0 2
78411: PUSH
78412: LD_INT 4
78414: PLUS
78415: PUSH
78416: LD_INT 0
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: LIST
78423: PUSH
78424: LD_VAR 0 1
78428: PUSH
78429: LD_INT 3
78431: MINUS
78432: PUSH
78433: LD_VAR 0 2
78437: PUSH
78438: LD_INT 1
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: LIST
78445: PUSH
78446: LD_VAR 0 1
78450: PUSH
78451: LD_INT 4
78453: MINUS
78454: PUSH
78455: LD_VAR 0 2
78459: PUSH
78460: LD_INT 4
78462: MINUS
78463: PUSH
78464: LD_INT 2
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: LIST
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: ST_TO_ADDR
// end ; 3 :
78479: GO 78901
78481: LD_INT 3
78483: DOUBLE
78484: EQUAL
78485: IFTRUE 78489
78487: GO 78622
78489: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78490: LD_ADDR_VAR 0 5
78494: PUSH
78495: LD_VAR 0 1
78499: PUSH
78500: LD_INT 3
78502: PLUS
78503: PUSH
78504: LD_VAR 0 2
78508: PUSH
78509: LD_INT 4
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: LIST
78516: PUSH
78517: LD_VAR 0 1
78521: PUSH
78522: LD_INT 4
78524: PLUS
78525: PUSH
78526: LD_VAR 0 2
78530: PUSH
78531: LD_INT 4
78533: PLUS
78534: PUSH
78535: LD_INT 5
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: LIST
78542: PUSH
78543: LD_VAR 0 1
78547: PUSH
78548: LD_INT 4
78550: MINUS
78551: PUSH
78552: LD_VAR 0 2
78556: PUSH
78557: LD_INT 1
78559: PUSH
78560: EMPTY
78561: LIST
78562: LIST
78563: LIST
78564: PUSH
78565: LD_VAR 0 1
78569: PUSH
78570: LD_VAR 0 2
78574: PUSH
78575: LD_INT 4
78577: MINUS
78578: PUSH
78579: LD_INT 3
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: LIST
78586: PUSH
78587: LD_VAR 0 1
78591: PUSH
78592: LD_INT 3
78594: MINUS
78595: PUSH
78596: LD_VAR 0 2
78600: PUSH
78601: LD_INT 3
78603: MINUS
78604: PUSH
78605: LD_INT 2
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: LIST
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: ST_TO_ADDR
// end ; 4 :
78620: GO 78901
78622: LD_INT 4
78624: DOUBLE
78625: EQUAL
78626: IFTRUE 78630
78628: GO 78763
78630: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78631: LD_ADDR_VAR 0 5
78635: PUSH
78636: LD_VAR 0 1
78640: PUSH
78641: LD_VAR 0 2
78645: PUSH
78646: LD_INT 4
78648: PLUS
78649: PUSH
78650: LD_INT 0
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: LIST
78657: PUSH
78658: LD_VAR 0 1
78662: PUSH
78663: LD_INT 3
78665: PLUS
78666: PUSH
78667: LD_VAR 0 2
78671: PUSH
78672: LD_INT 3
78674: PLUS
78675: PUSH
78676: LD_INT 5
78678: PUSH
78679: EMPTY
78680: LIST
78681: LIST
78682: LIST
78683: PUSH
78684: LD_VAR 0 1
78688: PUSH
78689: LD_INT 4
78691: PLUS
78692: PUSH
78693: LD_VAR 0 2
78697: PUSH
78698: LD_INT 4
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: LIST
78705: PUSH
78706: LD_VAR 0 1
78710: PUSH
78711: LD_VAR 0 2
78715: PUSH
78716: LD_INT 3
78718: MINUS
78719: PUSH
78720: LD_INT 3
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: LIST
78727: PUSH
78728: LD_VAR 0 1
78732: PUSH
78733: LD_INT 4
78735: MINUS
78736: PUSH
78737: LD_VAR 0 2
78741: PUSH
78742: LD_INT 4
78744: MINUS
78745: PUSH
78746: LD_INT 2
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: LIST
78753: PUSH
78754: EMPTY
78755: LIST
78756: LIST
78757: LIST
78758: LIST
78759: LIST
78760: ST_TO_ADDR
// end ; 5 :
78761: GO 78901
78763: LD_INT 5
78765: DOUBLE
78766: EQUAL
78767: IFTRUE 78771
78769: GO 78900
78771: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78772: LD_ADDR_VAR 0 5
78776: PUSH
78777: LD_VAR 0 1
78781: PUSH
78782: LD_INT 4
78784: MINUS
78785: PUSH
78786: LD_VAR 0 2
78790: PUSH
78791: LD_INT 1
78793: PUSH
78794: EMPTY
78795: LIST
78796: LIST
78797: LIST
78798: PUSH
78799: LD_VAR 0 1
78803: PUSH
78804: LD_VAR 0 2
78808: PUSH
78809: LD_INT 4
78811: MINUS
78812: PUSH
78813: LD_INT 3
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: LIST
78820: PUSH
78821: LD_VAR 0 1
78825: PUSH
78826: LD_INT 4
78828: PLUS
78829: PUSH
78830: LD_VAR 0 2
78834: PUSH
78835: LD_INT 4
78837: PLUS
78838: PUSH
78839: LD_INT 5
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: PUSH
78847: LD_VAR 0 1
78851: PUSH
78852: LD_INT 3
78854: PLUS
78855: PUSH
78856: LD_VAR 0 2
78860: PUSH
78861: LD_INT 4
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: LIST
78868: PUSH
78869: LD_VAR 0 1
78873: PUSH
78874: LD_VAR 0 2
78878: PUSH
78879: LD_INT 3
78881: PLUS
78882: PUSH
78883: LD_INT 0
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: LIST
78890: PUSH
78891: EMPTY
78892: LIST
78893: LIST
78894: LIST
78895: LIST
78896: LIST
78897: ST_TO_ADDR
// end ; end ;
78898: GO 78901
78900: POP
// result := list ;
78901: LD_ADDR_VAR 0 4
78905: PUSH
78906: LD_VAR 0 5
78910: ST_TO_ADDR
// end ;
78911: LD_VAR 0 4
78915: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78916: LD_INT 0
78918: PPUSH
78919: PPUSH
78920: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78921: LD_VAR 0 1
78925: NOT
78926: IFTRUE 78954
78928: PUSH
78929: LD_VAR 0 2
78933: PUSH
78934: LD_INT 1
78936: PUSH
78937: LD_INT 2
78939: PUSH
78940: LD_INT 3
78942: PUSH
78943: LD_INT 4
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: IN
78952: NOT
78953: OR
78954: IFFALSE 78958
// exit ;
78956: GO 79041
// tmp := [ ] ;
78958: LD_ADDR_VAR 0 5
78962: PUSH
78963: EMPTY
78964: ST_TO_ADDR
// for i in units do
78965: LD_ADDR_VAR 0 4
78969: PUSH
78970: LD_VAR 0 1
78974: PUSH
78975: FOR_IN
78976: IFFALSE 79010
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78978: LD_ADDR_VAR 0 5
78982: PUSH
78983: LD_VAR 0 5
78987: PPUSH
78988: LD_VAR 0 4
78992: PPUSH
78993: LD_VAR 0 2
78997: PPUSH
78998: CALL_OW 259
79002: PPUSH
79003: CALL 80436 0 2
79007: ST_TO_ADDR
79008: GO 78975
79010: POP
79011: POP
// if not tmp then
79012: LD_VAR 0 5
79016: NOT
79017: IFFALSE 79021
// exit ;
79019: GO 79041
// result := SortListByListDesc ( units , tmp ) ;
79021: LD_ADDR_VAR 0 3
79025: PUSH
79026: LD_VAR 0 1
79030: PPUSH
79031: LD_VAR 0 5
79035: PPUSH
79036: CALL_OW 77
79040: ST_TO_ADDR
// end ;
79041: LD_VAR 0 3
79045: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79046: LD_INT 0
79048: PPUSH
79049: PPUSH
79050: PPUSH
// result := false ;
79051: LD_ADDR_VAR 0 3
79055: PUSH
79056: LD_INT 0
79058: ST_TO_ADDR
// if not building then
79059: LD_VAR 0 2
79063: NOT
79064: IFFALSE 79068
// exit ;
79066: GO 79212
// x := GetX ( building ) ;
79068: LD_ADDR_VAR 0 4
79072: PUSH
79073: LD_VAR 0 2
79077: PPUSH
79078: CALL_OW 250
79082: ST_TO_ADDR
// y := GetY ( building ) ;
79083: LD_ADDR_VAR 0 5
79087: PUSH
79088: LD_VAR 0 2
79092: PPUSH
79093: CALL_OW 251
79097: ST_TO_ADDR
// if not x or not y then
79098: LD_VAR 0 4
79102: NOT
79103: IFTRUE 79112
79105: PUSH
79106: LD_VAR 0 5
79110: NOT
79111: OR
79112: IFFALSE 79116
// exit ;
79114: GO 79212
// if GetTaskList ( unit ) then
79116: LD_VAR 0 1
79120: PPUSH
79121: CALL_OW 437
79125: IFFALSE 79212
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79127: LD_STRING e
79129: PUSH
79130: LD_VAR 0 1
79134: PPUSH
79135: CALL_OW 437
79139: PUSH
79140: LD_INT 1
79142: ARRAY
79143: PUSH
79144: LD_INT 1
79146: ARRAY
79147: EQUAL
79148: IFFALSE 79175
79150: PUSH
79151: LD_VAR 0 4
79155: PUSH
79156: LD_VAR 0 1
79160: PPUSH
79161: CALL_OW 437
79165: PUSH
79166: LD_INT 1
79168: ARRAY
79169: PUSH
79170: LD_INT 2
79172: ARRAY
79173: EQUAL
79174: AND
79175: IFFALSE 79202
79177: PUSH
79178: LD_VAR 0 5
79182: PUSH
79183: LD_VAR 0 1
79187: PPUSH
79188: CALL_OW 437
79192: PUSH
79193: LD_INT 1
79195: ARRAY
79196: PUSH
79197: LD_INT 3
79199: ARRAY
79200: EQUAL
79201: AND
79202: IFFALSE 79212
// result := true end ;
79204: LD_ADDR_VAR 0 3
79208: PUSH
79209: LD_INT 1
79211: ST_TO_ADDR
// end ;
79212: LD_VAR 0 3
79216: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79217: LD_INT 0
79219: PPUSH
// result := false ;
79220: LD_ADDR_VAR 0 4
79224: PUSH
79225: LD_INT 0
79227: ST_TO_ADDR
// if GetTaskList ( unit ) then
79228: LD_VAR 0 1
79232: PPUSH
79233: CALL_OW 437
79237: IFFALSE 79324
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79239: LD_STRING M
79241: PUSH
79242: LD_VAR 0 1
79246: PPUSH
79247: CALL_OW 437
79251: PUSH
79252: LD_INT 1
79254: ARRAY
79255: PUSH
79256: LD_INT 1
79258: ARRAY
79259: EQUAL
79260: IFFALSE 79287
79262: PUSH
79263: LD_VAR 0 2
79267: PUSH
79268: LD_VAR 0 1
79272: PPUSH
79273: CALL_OW 437
79277: PUSH
79278: LD_INT 1
79280: ARRAY
79281: PUSH
79282: LD_INT 2
79284: ARRAY
79285: EQUAL
79286: AND
79287: IFFALSE 79314
79289: PUSH
79290: LD_VAR 0 3
79294: PUSH
79295: LD_VAR 0 1
79299: PPUSH
79300: CALL_OW 437
79304: PUSH
79305: LD_INT 1
79307: ARRAY
79308: PUSH
79309: LD_INT 3
79311: ARRAY
79312: EQUAL
79313: AND
79314: IFFALSE 79324
// result := true ;
79316: LD_ADDR_VAR 0 4
79320: PUSH
79321: LD_INT 1
79323: ST_TO_ADDR
// end ; end ;
79324: LD_VAR 0 4
79328: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79329: LD_INT 0
79331: PPUSH
79332: PPUSH
79333: PPUSH
79334: PPUSH
// if not unit or not area then
79335: LD_VAR 0 1
79339: NOT
79340: IFTRUE 79349
79342: PUSH
79343: LD_VAR 0 2
79347: NOT
79348: OR
79349: IFFALSE 79353
// exit ;
79351: GO 79529
// tmp := AreaToList ( area , i ) ;
79353: LD_ADDR_VAR 0 6
79357: PUSH
79358: LD_VAR 0 2
79362: PPUSH
79363: LD_VAR 0 5
79367: PPUSH
79368: CALL_OW 517
79372: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79373: LD_ADDR_VAR 0 5
79377: PUSH
79378: DOUBLE
79379: LD_INT 1
79381: DEC
79382: ST_TO_ADDR
79383: LD_VAR 0 6
79387: PUSH
79388: LD_INT 1
79390: ARRAY
79391: PUSH
79392: FOR_TO
79393: IFFALSE 79527
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79395: LD_ADDR_VAR 0 7
79399: PUSH
79400: LD_VAR 0 6
79404: PUSH
79405: LD_INT 1
79407: ARRAY
79408: PUSH
79409: LD_VAR 0 5
79413: ARRAY
79414: PUSH
79415: LD_VAR 0 6
79419: PUSH
79420: LD_INT 2
79422: ARRAY
79423: PUSH
79424: LD_VAR 0 5
79428: ARRAY
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79434: LD_INT 92
79436: PUSH
79437: LD_VAR 0 7
79441: PUSH
79442: LD_INT 1
79444: ARRAY
79445: PUSH
79446: LD_VAR 0 7
79450: PUSH
79451: LD_INT 2
79453: ARRAY
79454: PUSH
79455: LD_INT 2
79457: PUSH
79458: EMPTY
79459: LIST
79460: LIST
79461: LIST
79462: LIST
79463: PPUSH
79464: CALL_OW 69
79468: PUSH
79469: LD_INT 0
79471: EQUAL
79472: IFFALSE 79525
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79474: LD_VAR 0 1
79478: PPUSH
79479: LD_VAR 0 7
79483: PUSH
79484: LD_INT 1
79486: ARRAY
79487: PPUSH
79488: LD_VAR 0 7
79492: PUSH
79493: LD_INT 2
79495: ARRAY
79496: PPUSH
79497: LD_VAR 0 3
79501: PPUSH
79502: CALL_OW 48
// result := IsPlaced ( unit ) ;
79506: LD_ADDR_VAR 0 4
79510: PUSH
79511: LD_VAR 0 1
79515: PPUSH
79516: CALL_OW 305
79520: ST_TO_ADDR
// exit ;
79521: POP
79522: POP
79523: GO 79529
// end ; end ;
79525: GO 79392
79527: POP
79528: POP
// end ;
79529: LD_VAR 0 4
79533: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79534: LD_INT 0
79536: PPUSH
79537: PPUSH
79538: PPUSH
// if not side or side > 8 then
79539: LD_VAR 0 1
79543: NOT
79544: IFTRUE 79556
79546: PUSH
79547: LD_VAR 0 1
79551: PUSH
79552: LD_INT 8
79554: GREATER
79555: OR
79556: IFFALSE 79560
// exit ;
79558: GO 79747
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79560: LD_ADDR_VAR 0 4
79564: PUSH
79565: LD_INT 22
79567: PUSH
79568: LD_VAR 0 1
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: PUSH
79577: LD_INT 21
79579: PUSH
79580: LD_INT 3
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: EMPTY
79588: LIST
79589: LIST
79590: PPUSH
79591: CALL_OW 69
79595: ST_TO_ADDR
// if not tmp then
79596: LD_VAR 0 4
79600: NOT
79601: IFFALSE 79605
// exit ;
79603: GO 79747
// enable_addtolog := true ;
79605: LD_ADDR_OWVAR 81
79609: PUSH
79610: LD_INT 1
79612: ST_TO_ADDR
// AddToLog ( [ ) ;
79613: LD_STRING [
79615: PPUSH
79616: CALL_OW 561
// for i in tmp do
79620: LD_ADDR_VAR 0 3
79624: PUSH
79625: LD_VAR 0 4
79629: PUSH
79630: FOR_IN
79631: IFFALSE 79738
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79633: LD_STRING [
79635: PUSH
79636: LD_VAR 0 3
79640: PPUSH
79641: CALL_OW 266
79645: STR
79646: PUSH
79647: LD_STRING , 
79649: STR
79650: PUSH
79651: LD_VAR 0 3
79655: PPUSH
79656: CALL_OW 250
79660: STR
79661: PUSH
79662: LD_STRING , 
79664: STR
79665: PUSH
79666: LD_VAR 0 3
79670: PPUSH
79671: CALL_OW 251
79675: STR
79676: PUSH
79677: LD_STRING , 
79679: STR
79680: PUSH
79681: LD_VAR 0 3
79685: PPUSH
79686: CALL_OW 254
79690: STR
79691: PUSH
79692: LD_STRING , 
79694: STR
79695: PUSH
79696: LD_VAR 0 3
79700: PPUSH
79701: LD_INT 1
79703: PPUSH
79704: CALL_OW 268
79708: STR
79709: PUSH
79710: LD_STRING , 
79712: STR
79713: PUSH
79714: LD_VAR 0 3
79718: PPUSH
79719: LD_INT 2
79721: PPUSH
79722: CALL_OW 268
79726: STR
79727: PUSH
79728: LD_STRING ],
79730: STR
79731: PPUSH
79732: CALL_OW 561
// end ;
79736: GO 79630
79738: POP
79739: POP
// AddToLog ( ]; ) ;
79740: LD_STRING ];
79742: PPUSH
79743: CALL_OW 561
// end ;
79747: LD_VAR 0 2
79751: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79752: LD_INT 0
79754: PPUSH
79755: PPUSH
79756: PPUSH
79757: PPUSH
79758: PPUSH
// if not area or not rate or not max then
79759: LD_VAR 0 1
79763: NOT
79764: IFTRUE 79773
79766: PUSH
79767: LD_VAR 0 2
79771: NOT
79772: OR
79773: IFTRUE 79782
79775: PUSH
79776: LD_VAR 0 4
79780: NOT
79781: OR
79782: IFFALSE 79786
// exit ;
79784: GO 79975
// while 1 do
79786: LD_INT 1
79788: IFFALSE 79975
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79790: LD_ADDR_VAR 0 9
79794: PUSH
79795: LD_VAR 0 1
79799: PPUSH
79800: LD_INT 1
79802: PPUSH
79803: CALL_OW 287
79807: PUSH
79808: LD_INT 10
79810: MUL
79811: ST_TO_ADDR
// r := rate / 10 ;
79812: LD_ADDR_VAR 0 7
79816: PUSH
79817: LD_VAR 0 2
79821: PUSH
79822: LD_INT 10
79824: DIVREAL
79825: ST_TO_ADDR
// time := 1 1$00 ;
79826: LD_ADDR_VAR 0 8
79830: PUSH
79831: LD_INT 2100
79833: ST_TO_ADDR
// if amount < min then
79834: LD_VAR 0 9
79838: PUSH
79839: LD_VAR 0 3
79843: LESS
79844: IFFALSE 79862
// r := r * 2 else
79846: LD_ADDR_VAR 0 7
79850: PUSH
79851: LD_VAR 0 7
79855: PUSH
79856: LD_INT 2
79858: MUL
79859: ST_TO_ADDR
79860: GO 79888
// if amount > max then
79862: LD_VAR 0 9
79866: PUSH
79867: LD_VAR 0 4
79871: GREATER
79872: IFFALSE 79888
// r := r / 2 ;
79874: LD_ADDR_VAR 0 7
79878: PUSH
79879: LD_VAR 0 7
79883: PUSH
79884: LD_INT 2
79886: DIVREAL
79887: ST_TO_ADDR
// time := time / r ;
79888: LD_ADDR_VAR 0 8
79892: PUSH
79893: LD_VAR 0 8
79897: PUSH
79898: LD_VAR 0 7
79902: DIVREAL
79903: ST_TO_ADDR
// if time < 0 then
79904: LD_VAR 0 8
79908: PUSH
79909: LD_INT 0
79911: LESS
79912: IFFALSE 79929
// time := time * - 1 ;
79914: LD_ADDR_VAR 0 8
79918: PUSH
79919: LD_VAR 0 8
79923: PUSH
79924: LD_INT 1
79926: NEG
79927: MUL
79928: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79929: LD_VAR 0 8
79933: PUSH
79934: LD_INT 35
79936: PPUSH
79937: LD_INT 875
79939: PPUSH
79940: CALL_OW 12
79944: PLUS
79945: PPUSH
79946: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79950: LD_INT 1
79952: PPUSH
79953: LD_INT 5
79955: PPUSH
79956: CALL_OW 12
79960: PPUSH
79961: LD_VAR 0 1
79965: PPUSH
79966: LD_INT 1
79968: PPUSH
79969: CALL_OW 55
// end ;
79973: GO 79786
// end ;
79975: LD_VAR 0 5
79979: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79980: LD_INT 0
79982: PPUSH
79983: PPUSH
79984: PPUSH
79985: PPUSH
79986: PPUSH
79987: PPUSH
79988: PPUSH
79989: PPUSH
// if not turrets or not factories then
79990: LD_VAR 0 1
79994: NOT
79995: IFTRUE 80004
79997: PUSH
79998: LD_VAR 0 2
80002: NOT
80003: OR
80004: IFFALSE 80008
// exit ;
80006: GO 80315
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80008: LD_ADDR_VAR 0 10
80012: PUSH
80013: LD_INT 5
80015: PUSH
80016: LD_INT 6
80018: PUSH
80019: EMPTY
80020: LIST
80021: LIST
80022: PUSH
80023: LD_INT 2
80025: PUSH
80026: LD_INT 4
80028: PUSH
80029: EMPTY
80030: LIST
80031: LIST
80032: PUSH
80033: LD_INT 3
80035: PUSH
80036: LD_INT 5
80038: PUSH
80039: EMPTY
80040: LIST
80041: LIST
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: LIST
80047: PUSH
80048: LD_INT 24
80050: PUSH
80051: LD_INT 25
80053: PUSH
80054: EMPTY
80055: LIST
80056: LIST
80057: PUSH
80058: LD_INT 23
80060: PUSH
80061: LD_INT 27
80063: PUSH
80064: EMPTY
80065: LIST
80066: LIST
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: LD_INT 42
80074: PUSH
80075: LD_INT 43
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: PUSH
80082: LD_INT 44
80084: PUSH
80085: LD_INT 46
80087: PUSH
80088: EMPTY
80089: LIST
80090: LIST
80091: PUSH
80092: LD_INT 45
80094: PUSH
80095: LD_INT 47
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: PUSH
80102: EMPTY
80103: LIST
80104: LIST
80105: LIST
80106: PUSH
80107: EMPTY
80108: LIST
80109: LIST
80110: LIST
80111: ST_TO_ADDR
// result := [ ] ;
80112: LD_ADDR_VAR 0 3
80116: PUSH
80117: EMPTY
80118: ST_TO_ADDR
// for i in turrets do
80119: LD_ADDR_VAR 0 4
80123: PUSH
80124: LD_VAR 0 1
80128: PUSH
80129: FOR_IN
80130: IFFALSE 80313
// begin nat := GetNation ( i ) ;
80132: LD_ADDR_VAR 0 7
80136: PUSH
80137: LD_VAR 0 4
80141: PPUSH
80142: CALL_OW 248
80146: ST_TO_ADDR
// weapon := 0 ;
80147: LD_ADDR_VAR 0 8
80151: PUSH
80152: LD_INT 0
80154: ST_TO_ADDR
// if not nat then
80155: LD_VAR 0 7
80159: NOT
80160: IFFALSE 80164
// continue ;
80162: GO 80129
// for j in list [ nat ] do
80164: LD_ADDR_VAR 0 5
80168: PUSH
80169: LD_VAR 0 10
80173: PUSH
80174: LD_VAR 0 7
80178: ARRAY
80179: PUSH
80180: FOR_IN
80181: IFFALSE 80222
// if GetBWeapon ( i ) = j [ 1 ] then
80183: LD_VAR 0 4
80187: PPUSH
80188: CALL_OW 269
80192: PUSH
80193: LD_VAR 0 5
80197: PUSH
80198: LD_INT 1
80200: ARRAY
80201: EQUAL
80202: IFFALSE 80220
// begin weapon := j [ 2 ] ;
80204: LD_ADDR_VAR 0 8
80208: PUSH
80209: LD_VAR 0 5
80213: PUSH
80214: LD_INT 2
80216: ARRAY
80217: ST_TO_ADDR
// break ;
80218: GO 80222
// end ;
80220: GO 80180
80222: POP
80223: POP
// if not weapon then
80224: LD_VAR 0 8
80228: NOT
80229: IFFALSE 80233
// continue ;
80231: GO 80129
// for k in factories do
80233: LD_ADDR_VAR 0 6
80237: PUSH
80238: LD_VAR 0 2
80242: PUSH
80243: FOR_IN
80244: IFFALSE 80309
// begin weapons := AvailableWeaponList ( k ) ;
80246: LD_ADDR_VAR 0 9
80250: PUSH
80251: LD_VAR 0 6
80255: PPUSH
80256: CALL_OW 478
80260: ST_TO_ADDR
// if not weapons then
80261: LD_VAR 0 9
80265: NOT
80266: IFFALSE 80270
// continue ;
80268: GO 80243
// if weapon in weapons then
80270: LD_VAR 0 8
80274: PUSH
80275: LD_VAR 0 9
80279: IN
80280: IFFALSE 80307
// begin result := [ i , weapon ] ;
80282: LD_ADDR_VAR 0 3
80286: PUSH
80287: LD_VAR 0 4
80291: PUSH
80292: LD_VAR 0 8
80296: PUSH
80297: EMPTY
80298: LIST
80299: LIST
80300: ST_TO_ADDR
// exit ;
80301: POP
80302: POP
80303: POP
80304: POP
80305: GO 80315
// end ; end ;
80307: GO 80243
80309: POP
80310: POP
// end ;
80311: GO 80129
80313: POP
80314: POP
// end ;
80315: LD_VAR 0 3
80319: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80320: LD_INT 0
80322: PPUSH
// if not side or side > 8 then
80323: LD_VAR 0 3
80327: NOT
80328: IFTRUE 80340
80330: PUSH
80331: LD_VAR 0 3
80335: PUSH
80336: LD_INT 8
80338: GREATER
80339: OR
80340: IFFALSE 80344
// exit ;
80342: GO 80403
// if not range then
80344: LD_VAR 0 4
80348: NOT
80349: IFFALSE 80360
// range := - 12 ;
80351: LD_ADDR_VAR 0 4
80355: PUSH
80356: LD_INT 12
80358: NEG
80359: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80360: LD_VAR 0 1
80364: PPUSH
80365: LD_VAR 0 2
80369: PPUSH
80370: LD_VAR 0 3
80374: PPUSH
80375: LD_VAR 0 4
80379: PPUSH
80380: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80384: LD_VAR 0 1
80388: PPUSH
80389: LD_VAR 0 2
80393: PPUSH
80394: LD_VAR 0 3
80398: PPUSH
80399: CALL_OW 331
// end ;
80403: LD_VAR 0 5
80407: RET
// export function Video ( mode ) ; begin
80408: LD_INT 0
80410: PPUSH
// ingame_video = mode ;
80411: LD_ADDR_OWVAR 52
80415: PUSH
80416: LD_VAR 0 1
80420: ST_TO_ADDR
// interface_hidden = mode ;
80421: LD_ADDR_OWVAR 54
80425: PUSH
80426: LD_VAR 0 1
80430: ST_TO_ADDR
// end ;
80431: LD_VAR 0 2
80435: RET
// export function Join ( array , element ) ; begin
80436: LD_INT 0
80438: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80439: LD_ADDR_VAR 0 3
80443: PUSH
80444: LD_VAR 0 1
80448: PPUSH
80449: LD_VAR 0 1
80453: PUSH
80454: LD_INT 1
80456: PLUS
80457: PPUSH
80458: LD_VAR 0 2
80462: PPUSH
80463: CALL_OW 1
80467: ST_TO_ADDR
// end ;
80468: LD_VAR 0 3
80472: RET
// export function JoinUnion ( array , element ) ; begin
80473: LD_INT 0
80475: PPUSH
// result := array union element ;
80476: LD_ADDR_VAR 0 3
80480: PUSH
80481: LD_VAR 0 1
80485: PUSH
80486: LD_VAR 0 2
80490: UNION
80491: ST_TO_ADDR
// end ;
80492: LD_VAR 0 3
80496: RET
// export function GetBehemoths ( side ) ; begin
80497: LD_INT 0
80499: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80500: LD_ADDR_VAR 0 2
80504: PUSH
80505: LD_INT 22
80507: PUSH
80508: LD_VAR 0 1
80512: PUSH
80513: EMPTY
80514: LIST
80515: LIST
80516: PUSH
80517: LD_INT 31
80519: PUSH
80520: LD_INT 25
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: PUSH
80527: EMPTY
80528: LIST
80529: LIST
80530: PPUSH
80531: CALL_OW 69
80535: ST_TO_ADDR
// end ;
80536: LD_VAR 0 2
80540: RET
// export function Shuffle ( array ) ; var i , index ; begin
80541: LD_INT 0
80543: PPUSH
80544: PPUSH
80545: PPUSH
// result := [ ] ;
80546: LD_ADDR_VAR 0 2
80550: PUSH
80551: EMPTY
80552: ST_TO_ADDR
// if not array then
80553: LD_VAR 0 1
80557: NOT
80558: IFFALSE 80562
// exit ;
80560: GO 80661
// Randomize ;
80562: CALL_OW 10
// for i = array downto 1 do
80566: LD_ADDR_VAR 0 3
80570: PUSH
80571: DOUBLE
80572: LD_VAR 0 1
80576: INC
80577: ST_TO_ADDR
80578: LD_INT 1
80580: PUSH
80581: FOR_DOWNTO
80582: IFFALSE 80659
// begin index := rand ( 1 , array ) ;
80584: LD_ADDR_VAR 0 4
80588: PUSH
80589: LD_INT 1
80591: PPUSH
80592: LD_VAR 0 1
80596: PPUSH
80597: CALL_OW 12
80601: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80602: LD_ADDR_VAR 0 2
80606: PUSH
80607: LD_VAR 0 2
80611: PPUSH
80612: LD_VAR 0 2
80616: PUSH
80617: LD_INT 1
80619: PLUS
80620: PPUSH
80621: LD_VAR 0 1
80625: PUSH
80626: LD_VAR 0 4
80630: ARRAY
80631: PPUSH
80632: CALL_OW 2
80636: ST_TO_ADDR
// array := Delete ( array , index ) ;
80637: LD_ADDR_VAR 0 1
80641: PUSH
80642: LD_VAR 0 1
80646: PPUSH
80647: LD_VAR 0 4
80651: PPUSH
80652: CALL_OW 3
80656: ST_TO_ADDR
// end ;
80657: GO 80581
80659: POP
80660: POP
// end ;
80661: LD_VAR 0 2
80665: RET
// export function GetBaseMaterials ( base ) ; begin
80666: LD_INT 0
80668: PPUSH
// result := [ 0 , 0 , 0 ] ;
80669: LD_ADDR_VAR 0 2
80673: PUSH
80674: LD_INT 0
80676: PUSH
80677: LD_INT 0
80679: PUSH
80680: LD_INT 0
80682: PUSH
80683: EMPTY
80684: LIST
80685: LIST
80686: LIST
80687: ST_TO_ADDR
// if not base then
80688: LD_VAR 0 1
80692: NOT
80693: IFFALSE 80697
// exit ;
80695: GO 80746
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80697: LD_ADDR_VAR 0 2
80701: PUSH
80702: LD_VAR 0 1
80706: PPUSH
80707: LD_INT 1
80709: PPUSH
80710: CALL_OW 275
80714: PUSH
80715: LD_VAR 0 1
80719: PPUSH
80720: LD_INT 2
80722: PPUSH
80723: CALL_OW 275
80727: PUSH
80728: LD_VAR 0 1
80732: PPUSH
80733: LD_INT 3
80735: PPUSH
80736: CALL_OW 275
80740: PUSH
80741: EMPTY
80742: LIST
80743: LIST
80744: LIST
80745: ST_TO_ADDR
// end ;
80746: LD_VAR 0 2
80750: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80751: LD_INT 0
80753: PPUSH
80754: PPUSH
// result := array ;
80755: LD_ADDR_VAR 0 3
80759: PUSH
80760: LD_VAR 0 1
80764: ST_TO_ADDR
// if size >= result then
80765: LD_VAR 0 2
80769: PUSH
80770: LD_VAR 0 3
80774: GREATEREQUAL
80775: IFFALSE 80779
// exit ;
80777: GO 80829
// if size then
80779: LD_VAR 0 2
80783: IFFALSE 80829
// for i := array downto size do
80785: LD_ADDR_VAR 0 4
80789: PUSH
80790: DOUBLE
80791: LD_VAR 0 1
80795: INC
80796: ST_TO_ADDR
80797: LD_VAR 0 2
80801: PUSH
80802: FOR_DOWNTO
80803: IFFALSE 80827
// result := Delete ( result , result ) ;
80805: LD_ADDR_VAR 0 3
80809: PUSH
80810: LD_VAR 0 3
80814: PPUSH
80815: LD_VAR 0 3
80819: PPUSH
80820: CALL_OW 3
80824: ST_TO_ADDR
80825: GO 80802
80827: POP
80828: POP
// end ;
80829: LD_VAR 0 3
80833: RET
// export function ComExit ( unit ) ; var tmp ; begin
80834: LD_INT 0
80836: PPUSH
80837: PPUSH
// if not IsInUnit ( unit ) then
80838: LD_VAR 0 1
80842: PPUSH
80843: CALL_OW 310
80847: NOT
80848: IFFALSE 80852
// exit ;
80850: GO 80912
// tmp := IsInUnit ( unit ) ;
80852: LD_ADDR_VAR 0 3
80856: PUSH
80857: LD_VAR 0 1
80861: PPUSH
80862: CALL_OW 310
80866: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80867: LD_VAR 0 3
80871: PPUSH
80872: CALL_OW 247
80876: PUSH
80877: LD_INT 2
80879: EQUAL
80880: IFFALSE 80893
// ComExitVehicle ( unit ) else
80882: LD_VAR 0 1
80886: PPUSH
80887: CALL_OW 121
80891: GO 80902
// ComExitBuilding ( unit ) ;
80893: LD_VAR 0 1
80897: PPUSH
80898: CALL_OW 122
// result := tmp ;
80902: LD_ADDR_VAR 0 2
80906: PUSH
80907: LD_VAR 0 3
80911: ST_TO_ADDR
// end ;
80912: LD_VAR 0 2
80916: RET
// export function ComExitAll ( units ) ; var i ; begin
80917: LD_INT 0
80919: PPUSH
80920: PPUSH
// if not units then
80921: LD_VAR 0 1
80925: NOT
80926: IFFALSE 80930
// exit ;
80928: GO 80956
// for i in units do
80930: LD_ADDR_VAR 0 3
80934: PUSH
80935: LD_VAR 0 1
80939: PUSH
80940: FOR_IN
80941: IFFALSE 80954
// ComExit ( i ) ;
80943: LD_VAR 0 3
80947: PPUSH
80948: CALL 80834 0 1
80952: GO 80940
80954: POP
80955: POP
// end ;
80956: LD_VAR 0 2
80960: RET
// export function ResetHc ; begin
80961: LD_INT 0
80963: PPUSH
// InitHc ;
80964: CALL_OW 19
// hc_importance := 0 ;
80968: LD_ADDR_OWVAR 32
80972: PUSH
80973: LD_INT 0
80975: ST_TO_ADDR
// end ;
80976: LD_VAR 0 1
80980: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80981: LD_INT 0
80983: PPUSH
80984: PPUSH
80985: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80986: LD_ADDR_VAR 0 6
80990: PUSH
80991: LD_VAR 0 1
80995: PUSH
80996: LD_VAR 0 3
81000: PLUS
81001: PUSH
81002: LD_INT 2
81004: DIV
81005: ST_TO_ADDR
// if _x < 0 then
81006: LD_VAR 0 6
81010: PUSH
81011: LD_INT 0
81013: LESS
81014: IFFALSE 81031
// _x := _x * - 1 ;
81016: LD_ADDR_VAR 0 6
81020: PUSH
81021: LD_VAR 0 6
81025: PUSH
81026: LD_INT 1
81028: NEG
81029: MUL
81030: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81031: LD_ADDR_VAR 0 7
81035: PUSH
81036: LD_VAR 0 2
81040: PUSH
81041: LD_VAR 0 4
81045: PLUS
81046: PUSH
81047: LD_INT 2
81049: DIV
81050: ST_TO_ADDR
// if _y < 0 then
81051: LD_VAR 0 7
81055: PUSH
81056: LD_INT 0
81058: LESS
81059: IFFALSE 81076
// _y := _y * - 1 ;
81061: LD_ADDR_VAR 0 7
81065: PUSH
81066: LD_VAR 0 7
81070: PUSH
81071: LD_INT 1
81073: NEG
81074: MUL
81075: ST_TO_ADDR
// result := [ _x , _y ] ;
81076: LD_ADDR_VAR 0 5
81080: PUSH
81081: LD_VAR 0 6
81085: PUSH
81086: LD_VAR 0 7
81090: PUSH
81091: EMPTY
81092: LIST
81093: LIST
81094: ST_TO_ADDR
// end ;
81095: LD_VAR 0 5
81099: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81100: LD_INT 0
81102: PPUSH
81103: PPUSH
81104: PPUSH
81105: PPUSH
// task := GetTaskList ( unit ) ;
81106: LD_ADDR_VAR 0 7
81110: PUSH
81111: LD_VAR 0 1
81115: PPUSH
81116: CALL_OW 437
81120: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81121: LD_VAR 0 7
81125: NOT
81126: IFFALSE 81145
81128: PUSH
81129: LD_VAR 0 1
81133: PPUSH
81134: LD_VAR 0 2
81138: PPUSH
81139: CALL_OW 308
81143: NOT
81144: AND
81145: IFFALSE 81149
// exit ;
81147: GO 81267
// if IsInArea ( unit , area ) then
81149: LD_VAR 0 1
81153: PPUSH
81154: LD_VAR 0 2
81158: PPUSH
81159: CALL_OW 308
81163: IFFALSE 81181
// begin ComMoveToArea ( unit , goAway ) ;
81165: LD_VAR 0 1
81169: PPUSH
81170: LD_VAR 0 3
81174: PPUSH
81175: CALL_OW 113
// exit ;
81179: GO 81267
// end ; if task [ 1 ] [ 1 ] <> M then
81181: LD_VAR 0 7
81185: PUSH
81186: LD_INT 1
81188: ARRAY
81189: PUSH
81190: LD_INT 1
81192: ARRAY
81193: PUSH
81194: LD_STRING M
81196: NONEQUAL
81197: IFFALSE 81201
// exit ;
81199: GO 81267
// x := task [ 1 ] [ 2 ] ;
81201: LD_ADDR_VAR 0 5
81205: PUSH
81206: LD_VAR 0 7
81210: PUSH
81211: LD_INT 1
81213: ARRAY
81214: PUSH
81215: LD_INT 2
81217: ARRAY
81218: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81219: LD_ADDR_VAR 0 6
81223: PUSH
81224: LD_VAR 0 7
81228: PUSH
81229: LD_INT 1
81231: ARRAY
81232: PUSH
81233: LD_INT 3
81235: ARRAY
81236: ST_TO_ADDR
// if InArea ( x , y , area ) then
81237: LD_VAR 0 5
81241: PPUSH
81242: LD_VAR 0 6
81246: PPUSH
81247: LD_VAR 0 2
81251: PPUSH
81252: CALL_OW 309
81256: IFFALSE 81267
// ComStop ( unit ) ;
81258: LD_VAR 0 1
81262: PPUSH
81263: CALL_OW 141
// end ;
81267: LD_VAR 0 4
81271: RET
// export function Abs ( value ) ; begin
81272: LD_INT 0
81274: PPUSH
// result := value ;
81275: LD_ADDR_VAR 0 2
81279: PUSH
81280: LD_VAR 0 1
81284: ST_TO_ADDR
// if value < 0 then
81285: LD_VAR 0 1
81289: PUSH
81290: LD_INT 0
81292: LESS
81293: IFFALSE 81310
// result := value * - 1 ;
81295: LD_ADDR_VAR 0 2
81299: PUSH
81300: LD_VAR 0 1
81304: PUSH
81305: LD_INT 1
81307: NEG
81308: MUL
81309: ST_TO_ADDR
// end ;
81310: LD_VAR 0 2
81314: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81315: LD_INT 0
81317: PPUSH
81318: PPUSH
81319: PPUSH
81320: PPUSH
81321: PPUSH
81322: PPUSH
81323: PPUSH
81324: PPUSH
// if not unit or not building then
81325: LD_VAR 0 1
81329: NOT
81330: IFTRUE 81339
81332: PUSH
81333: LD_VAR 0 2
81337: NOT
81338: OR
81339: IFFALSE 81343
// exit ;
81341: GO 81571
// x := GetX ( building ) ;
81343: LD_ADDR_VAR 0 4
81347: PUSH
81348: LD_VAR 0 2
81352: PPUSH
81353: CALL_OW 250
81357: ST_TO_ADDR
// y := GetY ( building ) ;
81358: LD_ADDR_VAR 0 6
81362: PUSH
81363: LD_VAR 0 2
81367: PPUSH
81368: CALL_OW 251
81372: ST_TO_ADDR
// d := GetDir ( building ) ;
81373: LD_ADDR_VAR 0 8
81377: PUSH
81378: LD_VAR 0 2
81382: PPUSH
81383: CALL_OW 254
81387: ST_TO_ADDR
// r := 4 ;
81388: LD_ADDR_VAR 0 9
81392: PUSH
81393: LD_INT 4
81395: ST_TO_ADDR
// for i := 1 to 5 do
81396: LD_ADDR_VAR 0 10
81400: PUSH
81401: DOUBLE
81402: LD_INT 1
81404: DEC
81405: ST_TO_ADDR
81406: LD_INT 5
81408: PUSH
81409: FOR_TO
81410: IFFALSE 81569
// begin _x := ShiftX ( x , d , r + i ) ;
81412: LD_ADDR_VAR 0 5
81416: PUSH
81417: LD_VAR 0 4
81421: PPUSH
81422: LD_VAR 0 8
81426: PPUSH
81427: LD_VAR 0 9
81431: PUSH
81432: LD_VAR 0 10
81436: PLUS
81437: PPUSH
81438: CALL_OW 272
81442: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81443: LD_ADDR_VAR 0 7
81447: PUSH
81448: LD_VAR 0 6
81452: PPUSH
81453: LD_VAR 0 8
81457: PPUSH
81458: LD_VAR 0 9
81462: PUSH
81463: LD_VAR 0 10
81467: PLUS
81468: PPUSH
81469: CALL_OW 273
81473: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81474: LD_VAR 0 5
81478: PPUSH
81479: LD_VAR 0 7
81483: PPUSH
81484: CALL_OW 488
81488: IFFALSE 81523
81490: PUSH
81491: LD_VAR 0 5
81495: PPUSH
81496: LD_VAR 0 7
81500: PPUSH
81501: CALL_OW 428
81505: PPUSH
81506: CALL_OW 247
81510: PUSH
81511: LD_INT 3
81513: PUSH
81514: LD_INT 2
81516: PUSH
81517: EMPTY
81518: LIST
81519: LIST
81520: IN
81521: NOT
81522: AND
81523: IFFALSE 81567
// begin ComMoveXY ( unit , _x , _y ) ;
81525: LD_VAR 0 1
81529: PPUSH
81530: LD_VAR 0 5
81534: PPUSH
81535: LD_VAR 0 7
81539: PPUSH
81540: CALL_OW 111
// result := [ _x , _y ] ;
81544: LD_ADDR_VAR 0 3
81548: PUSH
81549: LD_VAR 0 5
81553: PUSH
81554: LD_VAR 0 7
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: ST_TO_ADDR
// exit ;
81563: POP
81564: POP
81565: GO 81571
// end ; end ;
81567: GO 81409
81569: POP
81570: POP
// end ;
81571: LD_VAR 0 3
81575: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81576: LD_INT 0
81578: PPUSH
81579: PPUSH
81580: PPUSH
// result := 0 ;
81581: LD_ADDR_VAR 0 3
81585: PUSH
81586: LD_INT 0
81588: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81589: LD_VAR 0 1
81593: PUSH
81594: LD_INT 0
81596: LESS
81597: IFTRUE 81609
81599: PUSH
81600: LD_VAR 0 1
81604: PUSH
81605: LD_INT 8
81607: GREATER
81608: OR
81609: IFTRUE 81621
81611: PUSH
81612: LD_VAR 0 2
81616: PUSH
81617: LD_INT 0
81619: LESS
81620: OR
81621: IFTRUE 81633
81623: PUSH
81624: LD_VAR 0 2
81628: PUSH
81629: LD_INT 8
81631: GREATER
81632: OR
81633: IFFALSE 81637
// exit ;
81635: GO 81712
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81637: LD_ADDR_VAR 0 4
81641: PUSH
81642: LD_INT 22
81644: PUSH
81645: LD_VAR 0 2
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PPUSH
81654: CALL_OW 69
81658: PUSH
81659: FOR_IN
81660: IFFALSE 81710
// begin un := UnitShoot ( i ) ;
81662: LD_ADDR_VAR 0 5
81666: PUSH
81667: LD_VAR 0 4
81671: PPUSH
81672: CALL_OW 504
81676: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81677: LD_VAR 0 5
81681: PPUSH
81682: CALL_OW 255
81686: PUSH
81687: LD_VAR 0 1
81691: EQUAL
81692: IFFALSE 81708
// begin result := un ;
81694: LD_ADDR_VAR 0 3
81698: PUSH
81699: LD_VAR 0 5
81703: ST_TO_ADDR
// exit ;
81704: POP
81705: POP
81706: GO 81712
// end ; end ;
81708: GO 81659
81710: POP
81711: POP
// end ;
81712: LD_VAR 0 3
81716: RET
// export function GetCargoBay ( units ) ; begin
81717: LD_INT 0
81719: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81720: LD_ADDR_VAR 0 2
81724: PUSH
81725: LD_VAR 0 1
81729: PPUSH
81730: LD_INT 2
81732: PUSH
81733: LD_INT 34
81735: PUSH
81736: LD_INT 12
81738: PUSH
81739: EMPTY
81740: LIST
81741: LIST
81742: PUSH
81743: LD_INT 34
81745: PUSH
81746: LD_INT 51
81748: PUSH
81749: EMPTY
81750: LIST
81751: LIST
81752: PUSH
81753: LD_INT 34
81755: PUSH
81756: LD_INT 32
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: PUSH
81763: LD_INT 34
81765: PUSH
81766: LD_INT 89
81768: PUSH
81769: EMPTY
81770: LIST
81771: LIST
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: LIST
81779: PPUSH
81780: CALL_OW 72
81784: ST_TO_ADDR
// end ;
81785: LD_VAR 0 2
81789: RET
// export function Negate ( value ) ; begin
81790: LD_INT 0
81792: PPUSH
// result := not value ;
81793: LD_ADDR_VAR 0 2
81797: PUSH
81798: LD_VAR 0 1
81802: NOT
81803: ST_TO_ADDR
// end ;
81804: LD_VAR 0 2
81808: RET
// export function Inc ( value ) ; begin
81809: LD_INT 0
81811: PPUSH
// result := value + 1 ;
81812: LD_ADDR_VAR 0 2
81816: PUSH
81817: LD_VAR 0 1
81821: PUSH
81822: LD_INT 1
81824: PLUS
81825: ST_TO_ADDR
// end ;
81826: LD_VAR 0 2
81830: RET
// export function Dec ( value ) ; begin
81831: LD_INT 0
81833: PPUSH
// result := value - 1 ;
81834: LD_ADDR_VAR 0 2
81838: PUSH
81839: LD_VAR 0 1
81843: PUSH
81844: LD_INT 1
81846: MINUS
81847: ST_TO_ADDR
// end ;
81848: LD_VAR 0 2
81852: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81853: LD_INT 0
81855: PPUSH
81856: PPUSH
81857: PPUSH
81858: PPUSH
81859: PPUSH
81860: PPUSH
81861: PPUSH
81862: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81863: LD_VAR 0 1
81867: PPUSH
81868: LD_VAR 0 2
81872: PPUSH
81873: CALL_OW 488
81877: NOT
81878: IFTRUE 81897
81880: PUSH
81881: LD_VAR 0 3
81885: PPUSH
81886: LD_VAR 0 4
81890: PPUSH
81891: CALL_OW 488
81895: NOT
81896: OR
81897: IFFALSE 81910
// begin result := - 1 ;
81899: LD_ADDR_VAR 0 5
81903: PUSH
81904: LD_INT 1
81906: NEG
81907: ST_TO_ADDR
// exit ;
81908: GO 82145
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81910: LD_ADDR_VAR 0 12
81914: PUSH
81915: LD_VAR 0 1
81919: PPUSH
81920: LD_VAR 0 2
81924: PPUSH
81925: LD_VAR 0 3
81929: PPUSH
81930: LD_VAR 0 4
81934: PPUSH
81935: CALL 80981 0 4
81939: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81940: LD_ADDR_VAR 0 11
81944: PUSH
81945: LD_VAR 0 1
81949: PPUSH
81950: LD_VAR 0 2
81954: PPUSH
81955: LD_VAR 0 12
81959: PUSH
81960: LD_INT 1
81962: ARRAY
81963: PPUSH
81964: LD_VAR 0 12
81968: PUSH
81969: LD_INT 2
81971: ARRAY
81972: PPUSH
81973: CALL_OW 298
81977: ST_TO_ADDR
// distance := 9999 ;
81978: LD_ADDR_VAR 0 10
81982: PUSH
81983: LD_INT 9999
81985: ST_TO_ADDR
// for i := 0 to 5 do
81986: LD_ADDR_VAR 0 6
81990: PUSH
81991: DOUBLE
81992: LD_INT 0
81994: DEC
81995: ST_TO_ADDR
81996: LD_INT 5
81998: PUSH
81999: FOR_TO
82000: IFFALSE 82143
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82002: LD_ADDR_VAR 0 7
82006: PUSH
82007: LD_VAR 0 1
82011: PPUSH
82012: LD_VAR 0 6
82016: PPUSH
82017: LD_VAR 0 11
82021: PPUSH
82022: CALL_OW 272
82026: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82027: LD_ADDR_VAR 0 8
82031: PUSH
82032: LD_VAR 0 2
82036: PPUSH
82037: LD_VAR 0 6
82041: PPUSH
82042: LD_VAR 0 11
82046: PPUSH
82047: CALL_OW 273
82051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82052: LD_VAR 0 7
82056: PPUSH
82057: LD_VAR 0 8
82061: PPUSH
82062: CALL_OW 488
82066: NOT
82067: IFFALSE 82071
// continue ;
82069: GO 81999
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82071: LD_ADDR_VAR 0 9
82075: PUSH
82076: LD_VAR 0 12
82080: PUSH
82081: LD_INT 1
82083: ARRAY
82084: PPUSH
82085: LD_VAR 0 12
82089: PUSH
82090: LD_INT 2
82092: ARRAY
82093: PPUSH
82094: LD_VAR 0 7
82098: PPUSH
82099: LD_VAR 0 8
82103: PPUSH
82104: CALL_OW 298
82108: ST_TO_ADDR
// if tmp < distance then
82109: LD_VAR 0 9
82113: PUSH
82114: LD_VAR 0 10
82118: LESS
82119: IFFALSE 82141
// begin result := i ;
82121: LD_ADDR_VAR 0 5
82125: PUSH
82126: LD_VAR 0 6
82130: ST_TO_ADDR
// distance := tmp ;
82131: LD_ADDR_VAR 0 10
82135: PUSH
82136: LD_VAR 0 9
82140: ST_TO_ADDR
// end ; end ;
82141: GO 81999
82143: POP
82144: POP
// end ;
82145: LD_VAR 0 5
82149: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82150: LD_INT 0
82152: PPUSH
82153: PPUSH
// if not driver or not IsInUnit ( driver ) then
82154: LD_VAR 0 1
82158: NOT
82159: IFTRUE 82173
82161: PUSH
82162: LD_VAR 0 1
82166: PPUSH
82167: CALL_OW 310
82171: NOT
82172: OR
82173: IFFALSE 82177
// exit ;
82175: GO 82267
// vehicle := IsInUnit ( driver ) ;
82177: LD_ADDR_VAR 0 3
82181: PUSH
82182: LD_VAR 0 1
82186: PPUSH
82187: CALL_OW 310
82191: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82192: LD_VAR 0 1
82196: PPUSH
82197: LD_STRING \
82199: PUSH
82200: LD_INT 0
82202: PUSH
82203: LD_INT 0
82205: PUSH
82206: LD_INT 0
82208: PUSH
82209: LD_INT 0
82211: PUSH
82212: LD_INT 0
82214: PUSH
82215: LD_INT 0
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: LIST
82222: LIST
82223: LIST
82224: LIST
82225: LIST
82226: PUSH
82227: LD_STRING E
82229: PUSH
82230: LD_INT 0
82232: PUSH
82233: LD_INT 0
82235: PUSH
82236: LD_VAR 0 3
82240: PUSH
82241: LD_INT 0
82243: PUSH
82244: LD_INT 0
82246: PUSH
82247: LD_INT 0
82249: PUSH
82250: EMPTY
82251: LIST
82252: LIST
82253: LIST
82254: LIST
82255: LIST
82256: LIST
82257: LIST
82258: PUSH
82259: EMPTY
82260: LIST
82261: LIST
82262: PPUSH
82263: CALL_OW 446
// end ;
82267: LD_VAR 0 2
82271: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82272: LD_INT 0
82274: PPUSH
82275: PPUSH
// if not driver or not IsInUnit ( driver ) then
82276: LD_VAR 0 1
82280: NOT
82281: IFTRUE 82295
82283: PUSH
82284: LD_VAR 0 1
82288: PPUSH
82289: CALL_OW 310
82293: NOT
82294: OR
82295: IFFALSE 82299
// exit ;
82297: GO 82389
// vehicle := IsInUnit ( driver ) ;
82299: LD_ADDR_VAR 0 3
82303: PUSH
82304: LD_VAR 0 1
82308: PPUSH
82309: CALL_OW 310
82313: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82314: LD_VAR 0 1
82318: PPUSH
82319: LD_STRING \
82321: PUSH
82322: LD_INT 0
82324: PUSH
82325: LD_INT 0
82327: PUSH
82328: LD_INT 0
82330: PUSH
82331: LD_INT 0
82333: PUSH
82334: LD_INT 0
82336: PUSH
82337: LD_INT 0
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: LIST
82348: PUSH
82349: LD_STRING E
82351: PUSH
82352: LD_INT 0
82354: PUSH
82355: LD_INT 0
82357: PUSH
82358: LD_VAR 0 3
82362: PUSH
82363: LD_INT 0
82365: PUSH
82366: LD_INT 0
82368: PUSH
82369: LD_INT 0
82371: PUSH
82372: EMPTY
82373: LIST
82374: LIST
82375: LIST
82376: LIST
82377: LIST
82378: LIST
82379: LIST
82380: PUSH
82381: EMPTY
82382: LIST
82383: LIST
82384: PPUSH
82385: CALL_OW 447
// end ;
82389: LD_VAR 0 2
82393: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82394: LD_INT 0
82396: PPUSH
82397: PPUSH
82398: PPUSH
// tmp := [ ] ;
82399: LD_ADDR_VAR 0 5
82403: PUSH
82404: EMPTY
82405: ST_TO_ADDR
// for i in units do
82406: LD_ADDR_VAR 0 4
82410: PUSH
82411: LD_VAR 0 1
82415: PUSH
82416: FOR_IN
82417: IFFALSE 82455
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82419: LD_ADDR_VAR 0 5
82423: PUSH
82424: LD_VAR 0 5
82428: PPUSH
82429: LD_VAR 0 5
82433: PUSH
82434: LD_INT 1
82436: PLUS
82437: PPUSH
82438: LD_VAR 0 4
82442: PPUSH
82443: CALL_OW 256
82447: PPUSH
82448: CALL_OW 2
82452: ST_TO_ADDR
82453: GO 82416
82455: POP
82456: POP
// if not tmp then
82457: LD_VAR 0 5
82461: NOT
82462: IFFALSE 82466
// exit ;
82464: GO 82514
// if asc then
82466: LD_VAR 0 2
82470: IFFALSE 82494
// result := SortListByListAsc ( units , tmp ) else
82472: LD_ADDR_VAR 0 3
82476: PUSH
82477: LD_VAR 0 1
82481: PPUSH
82482: LD_VAR 0 5
82486: PPUSH
82487: CALL_OW 76
82491: ST_TO_ADDR
82492: GO 82514
// result := SortListByListDesc ( units , tmp ) ;
82494: LD_ADDR_VAR 0 3
82498: PUSH
82499: LD_VAR 0 1
82503: PPUSH
82504: LD_VAR 0 5
82508: PPUSH
82509: CALL_OW 77
82513: ST_TO_ADDR
// end ;
82514: LD_VAR 0 3
82518: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82519: LD_INT 0
82521: PPUSH
82522: PPUSH
// task := GetTaskList ( mech ) ;
82523: LD_ADDR_VAR 0 4
82527: PUSH
82528: LD_VAR 0 1
82532: PPUSH
82533: CALL_OW 437
82537: ST_TO_ADDR
// if not task then
82538: LD_VAR 0 4
82542: NOT
82543: IFFALSE 82547
// exit ;
82545: GO 82591
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82547: LD_ADDR_VAR 0 3
82551: PUSH
82552: LD_VAR 0 4
82556: PUSH
82557: LD_INT 1
82559: ARRAY
82560: PUSH
82561: LD_INT 1
82563: ARRAY
82564: PUSH
82565: LD_STRING r
82567: EQUAL
82568: IFFALSE 82590
82570: PUSH
82571: LD_VAR 0 4
82575: PUSH
82576: LD_INT 1
82578: ARRAY
82579: PUSH
82580: LD_INT 4
82582: ARRAY
82583: PUSH
82584: LD_VAR 0 2
82588: EQUAL
82589: AND
82590: ST_TO_ADDR
// end ;
82591: LD_VAR 0 3
82595: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82596: LD_INT 0
82598: PPUSH
// SetDir ( unit , d ) ;
82599: LD_VAR 0 1
82603: PPUSH
82604: LD_VAR 0 4
82608: PPUSH
82609: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82613: LD_ADDR_VAR 0 6
82617: PUSH
82618: LD_VAR 0 1
82622: PPUSH
82623: LD_VAR 0 2
82627: PPUSH
82628: LD_VAR 0 3
82632: PPUSH
82633: LD_VAR 0 5
82637: PPUSH
82638: CALL_OW 48
82642: ST_TO_ADDR
// end ;
82643: LD_VAR 0 6
82647: RET
// export function ToNaturalNumber ( number ) ; begin
82648: LD_INT 0
82650: PPUSH
// result := number div 1 ;
82651: LD_ADDR_VAR 0 2
82655: PUSH
82656: LD_VAR 0 1
82660: PUSH
82661: LD_INT 1
82663: DIV
82664: ST_TO_ADDR
// if number < 0 then
82665: LD_VAR 0 1
82669: PUSH
82670: LD_INT 0
82672: LESS
82673: IFFALSE 82683
// result := 0 ;
82675: LD_ADDR_VAR 0 2
82679: PUSH
82680: LD_INT 0
82682: ST_TO_ADDR
// end ;
82683: LD_VAR 0 2
82687: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82688: LD_INT 0
82690: PPUSH
82691: PPUSH
82692: PPUSH
// if not buildings then
82693: LD_VAR 0 1
82697: NOT
82698: IFFALSE 82702
// exit ;
82700: GO 82817
// tmp := [ ] ;
82702: LD_ADDR_VAR 0 5
82706: PUSH
82707: EMPTY
82708: ST_TO_ADDR
// for b in buildings do
82709: LD_ADDR_VAR 0 4
82713: PUSH
82714: LD_VAR 0 1
82718: PUSH
82719: FOR_IN
82720: IFFALSE 82758
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82722: LD_ADDR_VAR 0 5
82726: PUSH
82727: LD_VAR 0 5
82731: PPUSH
82732: LD_VAR 0 5
82736: PUSH
82737: LD_INT 1
82739: PLUS
82740: PPUSH
82741: LD_VAR 0 4
82745: PPUSH
82746: CALL_OW 266
82750: PPUSH
82751: CALL_OW 1
82755: ST_TO_ADDR
82756: GO 82719
82758: POP
82759: POP
// if not tmp then
82760: LD_VAR 0 5
82764: NOT
82765: IFFALSE 82769
// exit ;
82767: GO 82817
// if asc then
82769: LD_VAR 0 2
82773: IFFALSE 82797
// result := SortListByListAsc ( buildings , tmp ) else
82775: LD_ADDR_VAR 0 3
82779: PUSH
82780: LD_VAR 0 1
82784: PPUSH
82785: LD_VAR 0 5
82789: PPUSH
82790: CALL_OW 76
82794: ST_TO_ADDR
82795: GO 82817
// result := SortListByListDesc ( buildings , tmp ) ;
82797: LD_ADDR_VAR 0 3
82801: PUSH
82802: LD_VAR 0 1
82806: PPUSH
82807: LD_VAR 0 5
82811: PPUSH
82812: CALL_OW 77
82816: ST_TO_ADDR
// end ;
82817: LD_VAR 0 3
82821: RET
// export function SortByClass ( units , class ) ; var un ; begin
82822: LD_INT 0
82824: PPUSH
82825: PPUSH
// if not units or not class then
82826: LD_VAR 0 1
82830: NOT
82831: IFTRUE 82840
82833: PUSH
82834: LD_VAR 0 2
82838: NOT
82839: OR
82840: IFFALSE 82844
// exit ;
82842: GO 82939
// result := [ ] ;
82844: LD_ADDR_VAR 0 3
82848: PUSH
82849: EMPTY
82850: ST_TO_ADDR
// for un in units do
82851: LD_ADDR_VAR 0 4
82855: PUSH
82856: LD_VAR 0 1
82860: PUSH
82861: FOR_IN
82862: IFFALSE 82937
// if GetClass ( un ) = class then
82864: LD_VAR 0 4
82868: PPUSH
82869: CALL_OW 257
82873: PUSH
82874: LD_VAR 0 2
82878: EQUAL
82879: IFFALSE 82906
// result := Insert ( result , 1 , un ) else
82881: LD_ADDR_VAR 0 3
82885: PUSH
82886: LD_VAR 0 3
82890: PPUSH
82891: LD_INT 1
82893: PPUSH
82894: LD_VAR 0 4
82898: PPUSH
82899: CALL_OW 2
82903: ST_TO_ADDR
82904: GO 82935
// result := Replace ( result , result + 1 , un ) ;
82906: LD_ADDR_VAR 0 3
82910: PUSH
82911: LD_VAR 0 3
82915: PPUSH
82916: LD_VAR 0 3
82920: PUSH
82921: LD_INT 1
82923: PLUS
82924: PPUSH
82925: LD_VAR 0 4
82929: PPUSH
82930: CALL_OW 1
82934: ST_TO_ADDR
82935: GO 82861
82937: POP
82938: POP
// end ;
82939: LD_VAR 0 3
82943: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82944: LD_INT 0
82946: PPUSH
82947: PPUSH
82948: PPUSH
82949: PPUSH
82950: PPUSH
82951: PPUSH
82952: PPUSH
// result := [ ] ;
82953: LD_ADDR_VAR 0 4
82957: PUSH
82958: EMPTY
82959: ST_TO_ADDR
// if x - r < 0 then
82960: LD_VAR 0 1
82964: PUSH
82965: LD_VAR 0 3
82969: MINUS
82970: PUSH
82971: LD_INT 0
82973: LESS
82974: IFFALSE 82986
// min_x := 0 else
82976: LD_ADDR_VAR 0 8
82980: PUSH
82981: LD_INT 0
82983: ST_TO_ADDR
82984: GO 83002
// min_x := x - r ;
82986: LD_ADDR_VAR 0 8
82990: PUSH
82991: LD_VAR 0 1
82995: PUSH
82996: LD_VAR 0 3
83000: MINUS
83001: ST_TO_ADDR
// if y - r < 0 then
83002: LD_VAR 0 2
83006: PUSH
83007: LD_VAR 0 3
83011: MINUS
83012: PUSH
83013: LD_INT 0
83015: LESS
83016: IFFALSE 83028
// min_y := 0 else
83018: LD_ADDR_VAR 0 7
83022: PUSH
83023: LD_INT 0
83025: ST_TO_ADDR
83026: GO 83044
// min_y := y - r ;
83028: LD_ADDR_VAR 0 7
83032: PUSH
83033: LD_VAR 0 2
83037: PUSH
83038: LD_VAR 0 3
83042: MINUS
83043: ST_TO_ADDR
// max_x := x + r ;
83044: LD_ADDR_VAR 0 9
83048: PUSH
83049: LD_VAR 0 1
83053: PUSH
83054: LD_VAR 0 3
83058: PLUS
83059: ST_TO_ADDR
// max_y := y + r ;
83060: LD_ADDR_VAR 0 10
83064: PUSH
83065: LD_VAR 0 2
83069: PUSH
83070: LD_VAR 0 3
83074: PLUS
83075: ST_TO_ADDR
// for _x = min_x to max_x do
83076: LD_ADDR_VAR 0 5
83080: PUSH
83081: DOUBLE
83082: LD_VAR 0 8
83086: DEC
83087: ST_TO_ADDR
83088: LD_VAR 0 9
83092: PUSH
83093: FOR_TO
83094: IFFALSE 83195
// for _y = min_y to max_y do
83096: LD_ADDR_VAR 0 6
83100: PUSH
83101: DOUBLE
83102: LD_VAR 0 7
83106: DEC
83107: ST_TO_ADDR
83108: LD_VAR 0 10
83112: PUSH
83113: FOR_TO
83114: IFFALSE 83191
// begin if not ValidHex ( _x , _y ) then
83116: LD_VAR 0 5
83120: PPUSH
83121: LD_VAR 0 6
83125: PPUSH
83126: CALL_OW 488
83130: NOT
83131: IFFALSE 83135
// continue ;
83133: GO 83113
// if GetResourceTypeXY ( _x , _y ) then
83135: LD_VAR 0 5
83139: PPUSH
83140: LD_VAR 0 6
83144: PPUSH
83145: CALL_OW 283
83149: IFFALSE 83189
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83151: LD_ADDR_VAR 0 4
83155: PUSH
83156: LD_VAR 0 4
83160: PPUSH
83161: LD_VAR 0 4
83165: PUSH
83166: LD_INT 1
83168: PLUS
83169: PPUSH
83170: LD_VAR 0 5
83174: PUSH
83175: LD_VAR 0 6
83179: PUSH
83180: EMPTY
83181: LIST
83182: LIST
83183: PPUSH
83184: CALL_OW 1
83188: ST_TO_ADDR
// end ;
83189: GO 83113
83191: POP
83192: POP
83193: GO 83093
83195: POP
83196: POP
// end ;
83197: LD_VAR 0 4
83201: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83202: LD_INT 0
83204: PPUSH
83205: PPUSH
83206: PPUSH
83207: PPUSH
83208: PPUSH
83209: PPUSH
83210: PPUSH
83211: PPUSH
// if not units then
83212: LD_VAR 0 1
83216: NOT
83217: IFFALSE 83221
// exit ;
83219: GO 83753
// result := UnitFilter ( units , [ f_ok ] ) ;
83221: LD_ADDR_VAR 0 3
83225: PUSH
83226: LD_VAR 0 1
83230: PPUSH
83231: LD_INT 50
83233: PUSH
83234: EMPTY
83235: LIST
83236: PPUSH
83237: CALL_OW 72
83241: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83242: LD_ADDR_VAR 0 8
83246: PUSH
83247: LD_VAR 0 1
83251: PUSH
83252: LD_INT 1
83254: ARRAY
83255: PPUSH
83256: CALL_OW 255
83260: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83261: LD_ADDR_VAR 0 10
83265: PUSH
83266: LD_INT 29
83268: PUSH
83269: LD_INT 91
83271: PUSH
83272: LD_INT 49
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: LIST
83279: ST_TO_ADDR
// if not result then
83280: LD_VAR 0 3
83284: NOT
83285: IFFALSE 83289
// exit ;
83287: GO 83753
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83289: LD_ADDR_VAR 0 5
83293: PUSH
83294: LD_INT 81
83296: PUSH
83297: LD_VAR 0 8
83301: PUSH
83302: EMPTY
83303: LIST
83304: LIST
83305: PPUSH
83306: CALL_OW 69
83310: ST_TO_ADDR
// for i in result do
83311: LD_ADDR_VAR 0 4
83315: PUSH
83316: LD_VAR 0 3
83320: PUSH
83321: FOR_IN
83322: IFFALSE 83751
// begin tag := GetTag ( i ) + 1 ;
83324: LD_ADDR_VAR 0 9
83328: PUSH
83329: LD_VAR 0 4
83333: PPUSH
83334: CALL_OW 110
83338: PUSH
83339: LD_INT 1
83341: PLUS
83342: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83343: LD_ADDR_VAR 0 7
83347: PUSH
83348: LD_VAR 0 4
83352: PPUSH
83353: CALL_OW 250
83357: PPUSH
83358: LD_VAR 0 4
83362: PPUSH
83363: CALL_OW 251
83367: PPUSH
83368: LD_INT 4
83370: PPUSH
83371: CALL 82944 0 3
83375: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83376: LD_VAR 0 4
83380: PPUSH
83381: CALL_OW 247
83385: PUSH
83386: LD_INT 2
83388: EQUAL
83389: IFFALSE 83401
83391: PUSH
83392: LD_VAR 0 7
83396: PUSH
83397: LD_INT 2
83399: GREATER
83400: AND
83401: IFFALSE 83421
83403: PUSH
83404: LD_VAR 0 4
83408: PPUSH
83409: CALL_OW 264
83413: PUSH
83414: LD_VAR 0 10
83418: IN
83419: NOT
83420: AND
83421: IFFALSE 83460
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83423: LD_VAR 0 4
83427: PPUSH
83428: LD_VAR 0 7
83432: PUSH
83433: LD_INT 1
83435: ARRAY
83436: PUSH
83437: LD_INT 1
83439: ARRAY
83440: PPUSH
83441: LD_VAR 0 7
83445: PUSH
83446: LD_INT 1
83448: ARRAY
83449: PUSH
83450: LD_INT 2
83452: ARRAY
83453: PPUSH
83454: CALL_OW 116
83458: GO 83749
// if path > tag then
83460: LD_VAR 0 2
83464: PUSH
83465: LD_VAR 0 9
83469: GREATER
83470: IFFALSE 83678
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83472: LD_ADDR_VAR 0 6
83476: PUSH
83477: LD_VAR 0 5
83481: PPUSH
83482: LD_INT 91
83484: PUSH
83485: LD_VAR 0 4
83489: PUSH
83490: LD_INT 8
83492: PUSH
83493: EMPTY
83494: LIST
83495: LIST
83496: LIST
83497: PPUSH
83498: CALL_OW 72
83502: ST_TO_ADDR
// if nearEnemy then
83503: LD_VAR 0 6
83507: IFFALSE 83576
// begin if GetWeapon ( i ) = ru_time_lapser then
83509: LD_VAR 0 4
83513: PPUSH
83514: CALL_OW 264
83518: PUSH
83519: LD_INT 49
83521: EQUAL
83522: IFFALSE 83550
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83524: LD_VAR 0 4
83528: PPUSH
83529: LD_VAR 0 6
83533: PPUSH
83534: LD_VAR 0 4
83538: PPUSH
83539: CALL_OW 74
83543: PPUSH
83544: CALL_OW 112
83548: GO 83574
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83550: LD_VAR 0 4
83554: PPUSH
83555: LD_VAR 0 6
83559: PPUSH
83560: LD_VAR 0 4
83564: PPUSH
83565: CALL_OW 74
83569: PPUSH
83570: CALL 84834 0 2
// end else
83574: GO 83676
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83576: LD_VAR 0 4
83580: PPUSH
83581: LD_VAR 0 2
83585: PUSH
83586: LD_VAR 0 9
83590: ARRAY
83591: PUSH
83592: LD_INT 1
83594: ARRAY
83595: PPUSH
83596: LD_VAR 0 2
83600: PUSH
83601: LD_VAR 0 9
83605: ARRAY
83606: PUSH
83607: LD_INT 2
83609: ARRAY
83610: PPUSH
83611: CALL_OW 297
83615: PUSH
83616: LD_INT 6
83618: GREATER
83619: IFFALSE 83662
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83621: LD_VAR 0 4
83625: PPUSH
83626: LD_VAR 0 2
83630: PUSH
83631: LD_VAR 0 9
83635: ARRAY
83636: PUSH
83637: LD_INT 1
83639: ARRAY
83640: PPUSH
83641: LD_VAR 0 2
83645: PUSH
83646: LD_VAR 0 9
83650: ARRAY
83651: PUSH
83652: LD_INT 2
83654: ARRAY
83655: PPUSH
83656: CALL_OW 114
83660: GO 83676
// SetTag ( i , tag ) ;
83662: LD_VAR 0 4
83666: PPUSH
83667: LD_VAR 0 9
83671: PPUSH
83672: CALL_OW 109
// end else
83676: GO 83749
// if enemy then
83678: LD_VAR 0 5
83682: IFFALSE 83749
// begin if GetWeapon ( i ) = ru_time_lapser then
83684: LD_VAR 0 4
83688: PPUSH
83689: CALL_OW 264
83693: PUSH
83694: LD_INT 49
83696: EQUAL
83697: IFFALSE 83725
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83699: LD_VAR 0 4
83703: PPUSH
83704: LD_VAR 0 5
83708: PPUSH
83709: LD_VAR 0 4
83713: PPUSH
83714: CALL_OW 74
83718: PPUSH
83719: CALL_OW 112
83723: GO 83749
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83725: LD_VAR 0 4
83729: PPUSH
83730: LD_VAR 0 5
83734: PPUSH
83735: LD_VAR 0 4
83739: PPUSH
83740: CALL_OW 74
83744: PPUSH
83745: CALL 84834 0 2
// end ; end ;
83749: GO 83321
83751: POP
83752: POP
// end ;
83753: LD_VAR 0 3
83757: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83758: LD_INT 0
83760: PPUSH
83761: PPUSH
83762: PPUSH
// if not unit or IsInUnit ( unit ) then
83763: LD_VAR 0 1
83767: NOT
83768: IFTRUE 83781
83770: PUSH
83771: LD_VAR 0 1
83775: PPUSH
83776: CALL_OW 310
83780: OR
83781: IFFALSE 83785
// exit ;
83783: GO 83876
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83785: LD_ADDR_VAR 0 4
83789: PUSH
83790: LD_VAR 0 1
83794: PPUSH
83795: CALL_OW 250
83799: PPUSH
83800: LD_VAR 0 2
83804: PPUSH
83805: LD_INT 1
83807: PPUSH
83808: CALL_OW 272
83812: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83813: LD_ADDR_VAR 0 5
83817: PUSH
83818: LD_VAR 0 1
83822: PPUSH
83823: CALL_OW 251
83827: PPUSH
83828: LD_VAR 0 2
83832: PPUSH
83833: LD_INT 1
83835: PPUSH
83836: CALL_OW 273
83840: ST_TO_ADDR
// if ValidHex ( x , y ) then
83841: LD_VAR 0 4
83845: PPUSH
83846: LD_VAR 0 5
83850: PPUSH
83851: CALL_OW 488
83855: IFFALSE 83876
// ComTurnXY ( unit , x , y ) ;
83857: LD_VAR 0 1
83861: PPUSH
83862: LD_VAR 0 4
83866: PPUSH
83867: LD_VAR 0 5
83871: PPUSH
83872: CALL_OW 118
// end ;
83876: LD_VAR 0 3
83880: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83881: LD_INT 0
83883: PPUSH
83884: PPUSH
// result := false ;
83885: LD_ADDR_VAR 0 3
83889: PUSH
83890: LD_INT 0
83892: ST_TO_ADDR
// if not units then
83893: LD_VAR 0 2
83897: NOT
83898: IFFALSE 83902
// exit ;
83900: GO 83947
// for i in units do
83902: LD_ADDR_VAR 0 4
83906: PUSH
83907: LD_VAR 0 2
83911: PUSH
83912: FOR_IN
83913: IFFALSE 83945
// if See ( side , i ) then
83915: LD_VAR 0 1
83919: PPUSH
83920: LD_VAR 0 4
83924: PPUSH
83925: CALL_OW 292
83929: IFFALSE 83943
// begin result := true ;
83931: LD_ADDR_VAR 0 3
83935: PUSH
83936: LD_INT 1
83938: ST_TO_ADDR
// exit ;
83939: POP
83940: POP
83941: GO 83947
// end ;
83943: GO 83912
83945: POP
83946: POP
// end ;
83947: LD_VAR 0 3
83951: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83952: LD_INT 0
83954: PPUSH
83955: PPUSH
83956: PPUSH
83957: PPUSH
// if not unit or not points then
83958: LD_VAR 0 1
83962: NOT
83963: IFTRUE 83972
83965: PUSH
83966: LD_VAR 0 2
83970: NOT
83971: OR
83972: IFFALSE 83976
// exit ;
83974: GO 84066
// dist := 99999 ;
83976: LD_ADDR_VAR 0 5
83980: PUSH
83981: LD_INT 99999
83983: ST_TO_ADDR
// for i in points do
83984: LD_ADDR_VAR 0 4
83988: PUSH
83989: LD_VAR 0 2
83993: PUSH
83994: FOR_IN
83995: IFFALSE 84064
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83997: LD_ADDR_VAR 0 6
84001: PUSH
84002: LD_VAR 0 1
84006: PPUSH
84007: LD_VAR 0 4
84011: PUSH
84012: LD_INT 1
84014: ARRAY
84015: PPUSH
84016: LD_VAR 0 4
84020: PUSH
84021: LD_INT 2
84023: ARRAY
84024: PPUSH
84025: CALL_OW 297
84029: ST_TO_ADDR
// if tmpDist < dist then
84030: LD_VAR 0 6
84034: PUSH
84035: LD_VAR 0 5
84039: LESS
84040: IFFALSE 84062
// begin result := i ;
84042: LD_ADDR_VAR 0 3
84046: PUSH
84047: LD_VAR 0 4
84051: ST_TO_ADDR
// dist := tmpDist ;
84052: LD_ADDR_VAR 0 5
84056: PUSH
84057: LD_VAR 0 6
84061: ST_TO_ADDR
// end ; end ;
84062: GO 83994
84064: POP
84065: POP
// end ;
84066: LD_VAR 0 3
84070: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84071: LD_INT 0
84073: PPUSH
// uc_side := side ;
84074: LD_ADDR_OWVAR 20
84078: PUSH
84079: LD_VAR 0 1
84083: ST_TO_ADDR
// uc_nation := 3 ;
84084: LD_ADDR_OWVAR 21
84088: PUSH
84089: LD_INT 3
84091: ST_TO_ADDR
// vc_chassis := 25 ;
84092: LD_ADDR_OWVAR 37
84096: PUSH
84097: LD_INT 25
84099: ST_TO_ADDR
// vc_engine := engine_siberite ;
84100: LD_ADDR_OWVAR 39
84104: PUSH
84105: LD_INT 3
84107: ST_TO_ADDR
// vc_control := control_computer ;
84108: LD_ADDR_OWVAR 38
84112: PUSH
84113: LD_INT 3
84115: ST_TO_ADDR
// vc_weapon := 59 ;
84116: LD_ADDR_OWVAR 40
84120: PUSH
84121: LD_INT 59
84123: ST_TO_ADDR
// result := CreateVehicle ;
84124: LD_ADDR_VAR 0 5
84128: PUSH
84129: CALL_OW 45
84133: ST_TO_ADDR
// SetDir ( result , d ) ;
84134: LD_VAR 0 5
84138: PPUSH
84139: LD_VAR 0 4
84143: PPUSH
84144: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84148: LD_VAR 0 5
84152: PPUSH
84153: LD_VAR 0 2
84157: PPUSH
84158: LD_VAR 0 3
84162: PPUSH
84163: LD_INT 0
84165: PPUSH
84166: CALL_OW 48
// end ;
84170: LD_VAR 0 5
84174: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84175: LD_INT 0
84177: PPUSH
84178: PPUSH
84179: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84180: LD_ADDR_VAR 0 2
84184: PUSH
84185: LD_INT 0
84187: PUSH
84188: LD_INT 0
84190: PUSH
84191: LD_INT 0
84193: PUSH
84194: LD_INT 0
84196: PUSH
84197: EMPTY
84198: LIST
84199: LIST
84200: LIST
84201: LIST
84202: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84203: LD_VAR 0 1
84207: NOT
84208: IFTRUE 84241
84210: PUSH
84211: LD_VAR 0 1
84215: PPUSH
84216: CALL_OW 264
84220: PUSH
84221: LD_INT 12
84223: PUSH
84224: LD_INT 51
84226: PUSH
84227: LD_INT 32
84229: PUSH
84230: LD_INT 89
84232: PUSH
84233: EMPTY
84234: LIST
84235: LIST
84236: LIST
84237: LIST
84238: IN
84239: NOT
84240: OR
84241: IFFALSE 84245
// exit ;
84243: GO 84343
// for i := 1 to 3 do
84245: LD_ADDR_VAR 0 3
84249: PUSH
84250: DOUBLE
84251: LD_INT 1
84253: DEC
84254: ST_TO_ADDR
84255: LD_INT 3
84257: PUSH
84258: FOR_TO
84259: IFFALSE 84341
// begin tmp := GetCargo ( cargo , i ) ;
84261: LD_ADDR_VAR 0 4
84265: PUSH
84266: LD_VAR 0 1
84270: PPUSH
84271: LD_VAR 0 3
84275: PPUSH
84276: CALL_OW 289
84280: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84281: LD_ADDR_VAR 0 2
84285: PUSH
84286: LD_VAR 0 2
84290: PPUSH
84291: LD_VAR 0 3
84295: PPUSH
84296: LD_VAR 0 4
84300: PPUSH
84301: CALL_OW 1
84305: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84306: LD_ADDR_VAR 0 2
84310: PUSH
84311: LD_VAR 0 2
84315: PPUSH
84316: LD_INT 4
84318: PPUSH
84319: LD_VAR 0 2
84323: PUSH
84324: LD_INT 4
84326: ARRAY
84327: PUSH
84328: LD_VAR 0 4
84332: PLUS
84333: PPUSH
84334: CALL_OW 1
84338: ST_TO_ADDR
// end ;
84339: GO 84258
84341: POP
84342: POP
// end ;
84343: LD_VAR 0 2
84347: RET
// export function Length ( array ) ; begin
84348: LD_INT 0
84350: PPUSH
// result := array + 0 ;
84351: LD_ADDR_VAR 0 2
84355: PUSH
84356: LD_VAR 0 1
84360: PUSH
84361: LD_INT 0
84363: PLUS
84364: ST_TO_ADDR
// end ;
84365: LD_VAR 0 2
84369: RET
// export function PrepareArray ( array ) ; begin
84370: LD_INT 0
84372: PPUSH
// result := array diff 0 ;
84373: LD_ADDR_VAR 0 2
84377: PUSH
84378: LD_VAR 0 1
84382: PUSH
84383: LD_INT 0
84385: DIFF
84386: ST_TO_ADDR
// if not result [ 1 ] then
84387: LD_VAR 0 2
84391: PUSH
84392: LD_INT 1
84394: ARRAY
84395: NOT
84396: IFFALSE 84416
// result := Delete ( result , 1 ) ;
84398: LD_ADDR_VAR 0 2
84402: PUSH
84403: LD_VAR 0 2
84407: PPUSH
84408: LD_INT 1
84410: PPUSH
84411: CALL_OW 3
84415: ST_TO_ADDR
// end ;
84416: LD_VAR 0 2
84420: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84421: LD_INT 0
84423: PPUSH
84424: PPUSH
84425: PPUSH
84426: PPUSH
// sibRocketRange := 25 ;
84427: LD_ADDR_VAR 0 6
84431: PUSH
84432: LD_INT 25
84434: ST_TO_ADDR
// result := false ;
84435: LD_ADDR_VAR 0 4
84439: PUSH
84440: LD_INT 0
84442: ST_TO_ADDR
// for i := 0 to 5 do
84443: LD_ADDR_VAR 0 5
84447: PUSH
84448: DOUBLE
84449: LD_INT 0
84451: DEC
84452: ST_TO_ADDR
84453: LD_INT 5
84455: PUSH
84456: FOR_TO
84457: IFFALSE 84524
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84459: LD_VAR 0 1
84463: PPUSH
84464: LD_VAR 0 5
84468: PPUSH
84469: LD_VAR 0 6
84473: PPUSH
84474: CALL_OW 272
84478: PPUSH
84479: LD_VAR 0 2
84483: PPUSH
84484: LD_VAR 0 5
84488: PPUSH
84489: LD_VAR 0 6
84493: PPUSH
84494: CALL_OW 273
84498: PPUSH
84499: LD_VAR 0 3
84503: PPUSH
84504: CALL_OW 309
84508: IFFALSE 84522
// begin result := true ;
84510: LD_ADDR_VAR 0 4
84514: PUSH
84515: LD_INT 1
84517: ST_TO_ADDR
// exit ;
84518: POP
84519: POP
84520: GO 84526
// end ;
84522: GO 84456
84524: POP
84525: POP
// end ;
84526: LD_VAR 0 4
84530: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84531: LD_INT 0
84533: PPUSH
84534: PPUSH
84535: PPUSH
// if btype = b_depot then
84536: LD_VAR 0 2
84540: PUSH
84541: LD_INT 0
84543: EQUAL
84544: IFFALSE 84556
// begin result := true ;
84546: LD_ADDR_VAR 0 3
84550: PUSH
84551: LD_INT 1
84553: ST_TO_ADDR
// exit ;
84554: GO 84676
// end ; pom := GetBase ( depot ) ;
84556: LD_ADDR_VAR 0 4
84560: PUSH
84561: LD_VAR 0 1
84565: PPUSH
84566: CALL_OW 274
84570: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84571: LD_ADDR_VAR 0 5
84575: PUSH
84576: LD_VAR 0 2
84580: PPUSH
84581: LD_VAR 0 1
84585: PPUSH
84586: CALL_OW 248
84590: PPUSH
84591: CALL_OW 450
84595: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84596: LD_ADDR_VAR 0 3
84600: PUSH
84601: LD_VAR 0 4
84605: PPUSH
84606: LD_INT 1
84608: PPUSH
84609: CALL_OW 275
84613: PUSH
84614: LD_VAR 0 5
84618: PUSH
84619: LD_INT 1
84621: ARRAY
84622: GREATEREQUAL
84623: IFFALSE 84649
84625: PUSH
84626: LD_VAR 0 4
84630: PPUSH
84631: LD_INT 2
84633: PPUSH
84634: CALL_OW 275
84638: PUSH
84639: LD_VAR 0 5
84643: PUSH
84644: LD_INT 2
84646: ARRAY
84647: GREATEREQUAL
84648: AND
84649: IFFALSE 84675
84651: PUSH
84652: LD_VAR 0 4
84656: PPUSH
84657: LD_INT 3
84659: PPUSH
84660: CALL_OW 275
84664: PUSH
84665: LD_VAR 0 5
84669: PUSH
84670: LD_INT 3
84672: ARRAY
84673: GREATEREQUAL
84674: AND
84675: ST_TO_ADDR
// end ;
84676: LD_VAR 0 3
84680: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84681: LD_INT 0
84683: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84684: LD_VAR 0 1
84688: PPUSH
84689: LD_VAR 0 2
84693: PPUSH
84694: LD_INT 0
84696: PPUSH
84697: LD_INT 0
84699: PPUSH
84700: LD_INT 1
84702: PPUSH
84703: LD_INT 0
84705: PPUSH
84706: CALL_OW 587
// end ;
84710: LD_VAR 0 3
84714: RET
// export function CenterOnNow ( unit ) ; begin
84715: LD_INT 0
84717: PPUSH
// result := IsInUnit ( unit ) ;
84718: LD_ADDR_VAR 0 2
84722: PUSH
84723: LD_VAR 0 1
84727: PPUSH
84728: CALL_OW 310
84732: ST_TO_ADDR
// if not result then
84733: LD_VAR 0 2
84737: NOT
84738: IFFALSE 84750
// result := unit ;
84740: LD_ADDR_VAR 0 2
84744: PUSH
84745: LD_VAR 0 1
84749: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84750: LD_VAR 0 1
84754: PPUSH
84755: CALL_OW 87
// end ;
84759: LD_VAR 0 2
84763: RET
// export function ComMoveHex ( unit , hex ) ; begin
84764: LD_INT 0
84766: PPUSH
// if not hex then
84767: LD_VAR 0 2
84771: NOT
84772: IFFALSE 84776
// exit ;
84774: GO 84829
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84776: LD_VAR 0 2
84780: PUSH
84781: LD_INT 1
84783: ARRAY
84784: PPUSH
84785: LD_VAR 0 2
84789: PUSH
84790: LD_INT 2
84792: ARRAY
84793: PPUSH
84794: CALL_OW 428
84798: IFFALSE 84802
// exit ;
84800: GO 84829
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84802: LD_VAR 0 1
84806: PPUSH
84807: LD_VAR 0 2
84811: PUSH
84812: LD_INT 1
84814: ARRAY
84815: PPUSH
84816: LD_VAR 0 2
84820: PUSH
84821: LD_INT 2
84823: ARRAY
84824: PPUSH
84825: CALL_OW 111
// end ;
84829: LD_VAR 0 3
84833: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84834: LD_INT 0
84836: PPUSH
84837: PPUSH
84838: PPUSH
// if not unit or not enemy then
84839: LD_VAR 0 1
84843: NOT
84844: IFTRUE 84853
84846: PUSH
84847: LD_VAR 0 2
84851: NOT
84852: OR
84853: IFFALSE 84857
// exit ;
84855: GO 84983
// x := GetX ( enemy ) ;
84857: LD_ADDR_VAR 0 4
84861: PUSH
84862: LD_VAR 0 2
84866: PPUSH
84867: CALL_OW 250
84871: ST_TO_ADDR
// y := GetY ( enemy ) ;
84872: LD_ADDR_VAR 0 5
84876: PUSH
84877: LD_VAR 0 2
84881: PPUSH
84882: CALL_OW 251
84886: ST_TO_ADDR
// if ValidHex ( x , y ) then
84887: LD_VAR 0 4
84891: PPUSH
84892: LD_VAR 0 5
84896: PPUSH
84897: CALL_OW 488
84901: IFFALSE 84983
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84903: LD_VAR 0 2
84907: PPUSH
84908: CALL_OW 247
84912: PUSH
84913: LD_INT 3
84915: PUSH
84916: LD_INT 2
84918: PUSH
84919: EMPTY
84920: LIST
84921: LIST
84922: IN
84923: IFTRUE 84946
84925: PUSH
84926: LD_VAR 0 1
84930: PPUSH
84931: CALL_OW 255
84935: PPUSH
84936: LD_VAR 0 2
84940: PPUSH
84941: CALL_OW 292
84945: OR
84946: IFFALSE 84964
// ComAttackUnit ( unit , enemy ) else
84948: LD_VAR 0 1
84952: PPUSH
84953: LD_VAR 0 2
84957: PPUSH
84958: CALL_OW 115
84962: GO 84983
// ComAgressiveMove ( unit , x , y ) ;
84964: LD_VAR 0 1
84968: PPUSH
84969: LD_VAR 0 4
84973: PPUSH
84974: LD_VAR 0 5
84978: PPUSH
84979: CALL_OW 114
// end ;
84983: LD_VAR 0 3
84987: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84988: LD_INT 0
84990: PPUSH
84991: PPUSH
84992: PPUSH
// list := AreaToList ( area , 0 ) ;
84993: LD_ADDR_VAR 0 5
84997: PUSH
84998: LD_VAR 0 1
85002: PPUSH
85003: LD_INT 0
85005: PPUSH
85006: CALL_OW 517
85010: ST_TO_ADDR
// if not list then
85011: LD_VAR 0 5
85015: NOT
85016: IFFALSE 85020
// exit ;
85018: GO 85150
// if all then
85020: LD_VAR 0 2
85024: IFFALSE 85112
// begin for i := 1 to list [ 1 ] do
85026: LD_ADDR_VAR 0 4
85030: PUSH
85031: DOUBLE
85032: LD_INT 1
85034: DEC
85035: ST_TO_ADDR
85036: LD_VAR 0 5
85040: PUSH
85041: LD_INT 1
85043: ARRAY
85044: PUSH
85045: FOR_TO
85046: IFFALSE 85108
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85048: LD_ADDR_VAR 0 3
85052: PUSH
85053: LD_VAR 0 3
85057: PPUSH
85058: LD_VAR 0 3
85062: PUSH
85063: LD_INT 1
85065: PLUS
85066: PPUSH
85067: LD_VAR 0 5
85071: PUSH
85072: LD_INT 1
85074: ARRAY
85075: PUSH
85076: LD_VAR 0 4
85080: ARRAY
85081: PUSH
85082: LD_VAR 0 5
85086: PUSH
85087: LD_INT 2
85089: ARRAY
85090: PUSH
85091: LD_VAR 0 4
85095: ARRAY
85096: PUSH
85097: EMPTY
85098: LIST
85099: LIST
85100: PPUSH
85101: CALL_OW 1
85105: ST_TO_ADDR
85106: GO 85045
85108: POP
85109: POP
// exit ;
85110: GO 85150
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85112: LD_ADDR_VAR 0 3
85116: PUSH
85117: LD_VAR 0 5
85121: PUSH
85122: LD_INT 1
85124: ARRAY
85125: PUSH
85126: LD_INT 1
85128: ARRAY
85129: PUSH
85130: LD_VAR 0 5
85134: PUSH
85135: LD_INT 2
85137: ARRAY
85138: PUSH
85139: LD_INT 1
85141: ARRAY
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: EMPTY
85148: LIST
85149: ST_TO_ADDR
// end ;
85150: LD_VAR 0 3
85154: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85155: LD_INT 0
85157: PPUSH
85158: PPUSH
// list := AreaToList ( area , 0 ) ;
85159: LD_ADDR_VAR 0 4
85163: PUSH
85164: LD_VAR 0 1
85168: PPUSH
85169: LD_INT 0
85171: PPUSH
85172: CALL_OW 517
85176: ST_TO_ADDR
// if not list then
85177: LD_VAR 0 4
85181: NOT
85182: IFFALSE 85186
// exit ;
85184: GO 85227
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85186: LD_ADDR_VAR 0 3
85190: PUSH
85191: LD_VAR 0 4
85195: PUSH
85196: LD_INT 1
85198: ARRAY
85199: PUSH
85200: LD_INT 1
85202: ARRAY
85203: PUSH
85204: LD_VAR 0 4
85208: PUSH
85209: LD_INT 2
85211: ARRAY
85212: PUSH
85213: LD_INT 1
85215: ARRAY
85216: PUSH
85217: LD_VAR 0 2
85221: PUSH
85222: EMPTY
85223: LIST
85224: LIST
85225: LIST
85226: ST_TO_ADDR
// end ;
85227: LD_VAR 0 3
85231: RET
// export function First ( array ) ; begin
85232: LD_INT 0
85234: PPUSH
// if not array then
85235: LD_VAR 0 1
85239: NOT
85240: IFFALSE 85244
// exit ;
85242: GO 85258
// result := array [ 1 ] ;
85244: LD_ADDR_VAR 0 2
85248: PUSH
85249: LD_VAR 0 1
85253: PUSH
85254: LD_INT 1
85256: ARRAY
85257: ST_TO_ADDR
// end ;
85258: LD_VAR 0 2
85262: RET
// export function Last ( array ) ; begin
85263: LD_INT 0
85265: PPUSH
// if not array then
85266: LD_VAR 0 1
85270: NOT
85271: IFFALSE 85275
// exit ;
85273: GO 85291
// result := array [ array ] ;
85275: LD_ADDR_VAR 0 2
85279: PUSH
85280: LD_VAR 0 1
85284: PUSH
85285: LD_VAR 0 1
85289: ARRAY
85290: ST_TO_ADDR
// end ;
85291: LD_VAR 0 2
85295: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85296: LD_INT 0
85298: PPUSH
85299: PPUSH
// result := [ ] ;
85300: LD_ADDR_VAR 0 5
85304: PUSH
85305: EMPTY
85306: ST_TO_ADDR
// if not array then
85307: LD_VAR 0 1
85311: NOT
85312: IFFALSE 85316
// exit ;
85314: GO 85428
// for i := 1 to array do
85316: LD_ADDR_VAR 0 6
85320: PUSH
85321: DOUBLE
85322: LD_INT 1
85324: DEC
85325: ST_TO_ADDR
85326: LD_VAR 0 1
85330: PUSH
85331: FOR_TO
85332: IFFALSE 85426
// if array [ i ] [ index ] = value then
85334: LD_VAR 0 1
85338: PUSH
85339: LD_VAR 0 6
85343: ARRAY
85344: PUSH
85345: LD_VAR 0 2
85349: ARRAY
85350: PUSH
85351: LD_VAR 0 3
85355: EQUAL
85356: IFFALSE 85424
// begin if indexColumn then
85358: LD_VAR 0 4
85362: IFFALSE 85398
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85364: LD_ADDR_VAR 0 5
85368: PUSH
85369: LD_VAR 0 5
85373: PPUSH
85374: LD_VAR 0 1
85378: PUSH
85379: LD_VAR 0 6
85383: ARRAY
85384: PUSH
85385: LD_VAR 0 4
85389: ARRAY
85390: PPUSH
85391: CALL 80436 0 2
85395: ST_TO_ADDR
85396: GO 85424
// result := Join ( result , array [ i ] ) ;
85398: LD_ADDR_VAR 0 5
85402: PUSH
85403: LD_VAR 0 5
85407: PPUSH
85408: LD_VAR 0 1
85412: PUSH
85413: LD_VAR 0 6
85417: ARRAY
85418: PPUSH
85419: CALL 80436 0 2
85423: ST_TO_ADDR
// end ;
85424: GO 85331
85426: POP
85427: POP
// end ;
85428: LD_VAR 0 5
85432: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85433: LD_INT 0
85435: PPUSH
// if not vehicles or not parkingPoint then
85436: LD_VAR 0 1
85440: NOT
85441: IFTRUE 85450
85443: PUSH
85444: LD_VAR 0 2
85448: NOT
85449: OR
85450: IFFALSE 85454
// exit ;
85452: GO 85552
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85454: LD_ADDR_VAR 0 1
85458: PUSH
85459: LD_VAR 0 1
85463: PPUSH
85464: LD_INT 50
85466: PUSH
85467: EMPTY
85468: LIST
85469: PUSH
85470: LD_INT 3
85472: PUSH
85473: LD_INT 92
85475: PUSH
85476: LD_VAR 0 2
85480: PUSH
85481: LD_INT 1
85483: ARRAY
85484: PUSH
85485: LD_VAR 0 2
85489: PUSH
85490: LD_INT 2
85492: ARRAY
85493: PUSH
85494: LD_INT 8
85496: PUSH
85497: EMPTY
85498: LIST
85499: LIST
85500: LIST
85501: LIST
85502: PUSH
85503: EMPTY
85504: LIST
85505: LIST
85506: PUSH
85507: EMPTY
85508: LIST
85509: LIST
85510: PPUSH
85511: CALL_OW 72
85515: ST_TO_ADDR
// if not vehicles then
85516: LD_VAR 0 1
85520: NOT
85521: IFFALSE 85525
// exit ;
85523: GO 85552
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85525: LD_VAR 0 1
85529: PPUSH
85530: LD_VAR 0 2
85534: PUSH
85535: LD_INT 1
85537: ARRAY
85538: PPUSH
85539: LD_VAR 0 2
85543: PUSH
85544: LD_INT 2
85546: ARRAY
85547: PPUSH
85548: CALL_OW 111
// end ;
85552: LD_VAR 0 3
85556: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85557: LD_INT 0
85559: PPUSH
85560: PPUSH
85561: PPUSH
// if not side or not area then
85562: LD_VAR 0 1
85566: NOT
85567: IFTRUE 85576
85569: PUSH
85570: LD_VAR 0 2
85574: NOT
85575: OR
85576: IFFALSE 85580
// exit ;
85578: GO 85699
// tmp := AreaToList ( area , 0 ) ;
85580: LD_ADDR_VAR 0 5
85584: PUSH
85585: LD_VAR 0 2
85589: PPUSH
85590: LD_INT 0
85592: PPUSH
85593: CALL_OW 517
85597: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85598: LD_ADDR_VAR 0 4
85602: PUSH
85603: DOUBLE
85604: LD_INT 1
85606: DEC
85607: ST_TO_ADDR
85608: LD_VAR 0 5
85612: PUSH
85613: LD_INT 1
85615: ARRAY
85616: PUSH
85617: FOR_TO
85618: IFFALSE 85697
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85620: LD_VAR 0 5
85624: PUSH
85625: LD_INT 1
85627: ARRAY
85628: PUSH
85629: LD_VAR 0 4
85633: ARRAY
85634: PPUSH
85635: LD_VAR 0 5
85639: PUSH
85640: LD_INT 2
85642: ARRAY
85643: PUSH
85644: LD_VAR 0 4
85648: ARRAY
85649: PPUSH
85650: CALL_OW 351
85654: IFFALSE 85695
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85656: LD_VAR 0 5
85660: PUSH
85661: LD_INT 1
85663: ARRAY
85664: PUSH
85665: LD_VAR 0 4
85669: ARRAY
85670: PPUSH
85671: LD_VAR 0 5
85675: PUSH
85676: LD_INT 2
85678: ARRAY
85679: PUSH
85680: LD_VAR 0 4
85684: ARRAY
85685: PPUSH
85686: LD_VAR 0 1
85690: PPUSH
85691: CALL_OW 244
// end ;
85695: GO 85617
85697: POP
85698: POP
// end ;
85699: LD_VAR 0 3
85703: RET
// export function UniqueArray ( array ) ; var i ; begin
85704: LD_INT 0
85706: PPUSH
85707: PPUSH
// result := [ ] ;
85708: LD_ADDR_VAR 0 2
85712: PUSH
85713: EMPTY
85714: ST_TO_ADDR
// if not array then
85715: LD_VAR 0 1
85719: NOT
85720: IFFALSE 85724
// exit ;
85722: GO 85785
// for i := 1 to array do
85724: LD_ADDR_VAR 0 3
85728: PUSH
85729: DOUBLE
85730: LD_INT 1
85732: DEC
85733: ST_TO_ADDR
85734: LD_VAR 0 1
85738: PUSH
85739: FOR_TO
85740: IFFALSE 85783
// if not array [ i ] in result then
85742: LD_VAR 0 1
85746: PUSH
85747: LD_VAR 0 3
85751: ARRAY
85752: PUSH
85753: LD_VAR 0 2
85757: IN
85758: NOT
85759: IFFALSE 85781
// result := Join ( result , i ) ;
85761: LD_ADDR_VAR 0 2
85765: PUSH
85766: LD_VAR 0 2
85770: PPUSH
85771: LD_VAR 0 3
85775: PPUSH
85776: CALL 80436 0 2
85780: ST_TO_ADDR
85781: GO 85739
85783: POP
85784: POP
// end ; end_of_file
85785: LD_VAR 0 2
85789: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85790: LD_VAR 0 1
85794: PUSH
85795: LD_INT 200
85797: DOUBLE
85798: GREATEREQUAL
85799: IFFALSE 85807
85801: LD_INT 299
85803: DOUBLE
85804: LESSEQUAL
85805: IFTRUE 85809
85807: GO 85841
85809: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85810: LD_VAR 0 1
85814: PPUSH
85815: LD_VAR 0 2
85819: PPUSH
85820: LD_VAR 0 3
85824: PPUSH
85825: LD_VAR 0 4
85829: PPUSH
85830: LD_VAR 0 5
85834: PPUSH
85835: CALL 36512 0 5
85839: GO 85918
85841: LD_INT 300
85843: DOUBLE
85844: GREATEREQUAL
85845: IFFALSE 85853
85847: LD_INT 399
85849: DOUBLE
85850: LESSEQUAL
85851: IFTRUE 85855
85853: GO 85917
85855: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85856: LD_VAR 0 1
85860: PPUSH
85861: LD_VAR 0 2
85865: PPUSH
85866: LD_VAR 0 3
85870: PPUSH
85871: LD_VAR 0 4
85875: PPUSH
85876: LD_VAR 0 5
85880: PPUSH
85881: LD_VAR 0 6
85885: PPUSH
85886: LD_VAR 0 7
85890: PPUSH
85891: LD_VAR 0 8
85895: PPUSH
85896: LD_VAR 0 9
85900: PPUSH
85901: LD_VAR 0 10
85905: PPUSH
85906: LD_VAR 0 11
85910: PPUSH
85911: CALL 32315 0 11
85915: GO 85918
85917: POP
// end ;
85918: PPOPN 11
85920: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85921: LD_VAR 0 1
85925: PPUSH
85926: LD_VAR 0 2
85930: PPUSH
85931: LD_VAR 0 3
85935: PPUSH
85936: LD_VAR 0 4
85940: PPUSH
85941: LD_VAR 0 5
85945: PPUSH
85946: CALL 35812 0 5
// end ; end_of_file
85950: PPOPN 5
85952: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85953: LD_VAR 0 1
85957: PPUSH
85958: LD_VAR 0 2
85962: PPUSH
85963: LD_VAR 0 3
85967: PPUSH
85968: LD_VAR 0 4
85972: PPUSH
85973: LD_VAR 0 5
85977: PPUSH
85978: LD_VAR 0 6
85982: PPUSH
85983: CALL 19855 0 6
// end ;
85987: PPOPN 6
85989: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85990: LD_INT 0
85992: PPUSH
// begin if not units then
85993: LD_VAR 0 1
85997: NOT
85998: IFFALSE 86002
// exit ;
86000: GO 86036
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86002: LD_VAR 0 1
86006: PPUSH
86007: LD_VAR 0 2
86011: PPUSH
86012: LD_VAR 0 3
86016: PPUSH
86017: LD_VAR 0 4
86021: PPUSH
86022: LD_VAR 0 5
86026: PPUSH
86027: LD_VAR 0 6
86031: PPUSH
86032: CALL 42209 0 6
// end ;
86036: PPOPN 7
86038: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86039: CALL 19735 0 0
// end ;
86043: PPOPN 1
86045: END
