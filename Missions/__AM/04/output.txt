// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export reliefOfCommand ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4659 0 0
// PrepareRussianBase ;
  29: CALL 2948 0 0
// PrepareRussianCommander ;
  33: CALL 2899 0 0
// PrepareHeroes ;
  37: CALL 473 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8278 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 49
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 50
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode := 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible := 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack := 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson := 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase := 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer := 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus := 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer := 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog := 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog := 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog := 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil := 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower := 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable := 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter := 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor := true ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// reliefOfCommand := false ;
 298: LD_ADDR_EXP 48
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// escapeAvalaible = 0 ;
 306: LD_ADDR_EXP 40
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// specAttack := false ;
 314: LD_ADDR_EXP 47
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// ruMobile := [ ] ;
 322: LD_ADDR_EXP 46
 326: PUSH
 327: EMPTY
 328: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 329: LD_ADDR_EXP 43
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: LD_INT 5
 342: PUSH
 343: LD_INT 6
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: PUSH
 352: LD_OWVAR 67
 356: ARRAY
 357: ST_TO_ADDR
// end ;
 358: LD_VAR 0 1
 362: RET
// every 0 0$1 trigger debugMode do var i ;
 363: LD_EXP 45
 367: IFFALSE 429
 369: GO 371
 371: DISABLE
 372: LD_INT 0
 374: PPUSH
// begin enable ;
 375: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 376: LD_ADDR_VAR 0 1
 380: PUSH
 381: LD_INT 22
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: PUSH
 391: LD_INT 21
 393: PUSH
 394: LD_INT 1
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 427
// SetLives ( i , 1000 ) ;
 413: LD_VAR 0 1
 417: PPUSH
 418: LD_INT 1000
 420: PPUSH
 421: CALL_OW 234
 425: GO 410
 427: POP
 428: POP
// end ;
 429: PPOPN 1
 431: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 34
 444: PUSH
 445: LD_INT 44
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PPUSH
 456: CALL_OW 69
 460: IFFALSE 472
 462: GO 464
 464: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 465: LD_STRING ACH_GUN
 467: PPUSH
 468: CALL_OW 543
 472: END
// export function PrepareHeroes ; var i , tmp ; begin
 473: LD_INT 0
 475: PPUSH
 476: PPUSH
 477: PPUSH
// uc_side = 1 ;
 478: LD_ADDR_OWVAR 20
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// uc_nation = 1 ;
 486: LD_ADDR_OWVAR 21
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 494: LD_ADDR_EXP 1
 498: PUSH
 499: LD_STRING JMM
 501: PPUSH
 502: LD_EXP 45
 506: NOT
 507: PPUSH
 508: LD_EXP 50
 512: PPUSH
 513: CALL 41317 0 3
 517: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 518: LD_ADDR_EXP 4
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_EXP 45
 530: NOT
 531: PPUSH
 532: LD_EXP 50
 536: PPUSH
 537: CALL 41317 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 50
 557: PPUSH
 558: CALL 41317 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 50
 578: PPUSH
 579: CALL 41317 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 50
 599: PPUSH
 600: CALL 41317 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 50
 620: PPUSH
 621: CALL 41317 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 50
 641: PPUSH
 642: CALL 41317 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 50
 662: PPUSH
 663: CALL 41317 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 50
 683: PPUSH
 684: CALL 41317 0 3
 688: ST_TO_ADDR
// if not Lisa then
 689: LD_EXP 4
 693: NOT
 694: IFFALSE 717
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 2
 700: PUSH
 701: LD_STRING Bobby
 703: PPUSH
 704: LD_INT 1
 706: PPUSH
 707: LD_EXP 50
 711: PPUSH
 712: CALL 41317 0 3
 716: ST_TO_ADDR
// if not Lisa and not Bobby then
 717: LD_EXP 4
 721: NOT
 722: PUSH
 723: LD_EXP 2
 727: NOT
 728: AND
 729: IFFALSE 752
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 731: LD_ADDR_EXP 3
 735: PUSH
 736: LD_STRING Cyrus
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: LD_EXP 50
 746: PPUSH
 747: CALL 41317 0 3
 751: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 752: LD_EXP 4
 756: NOT
 757: PUSH
 758: LD_EXP 2
 762: NOT
 763: AND
 764: PUSH
 765: LD_EXP 3
 769: NOT
 770: AND
 771: IFFALSE 870
// begin tmp = CreateCharacterSet ( 03_others ) ;
 773: LD_ADDR_VAR 0 3
 777: PUSH
 778: LD_STRING 03_others
 780: PPUSH
 781: CALL_OW 31
 785: ST_TO_ADDR
// if tmp then
 786: LD_VAR 0 3
 790: IFFALSE 847
// begin RandomBeforeMission = tmp [ 1 ] ;
 792: LD_ADDR_EXP 6
 796: PUSH
 797: LD_VAR 0 3
 801: PUSH
 802: LD_INT 1
 804: ARRAY
 805: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 40
// if tmp > 1 then
 813: LD_VAR 0 3
 817: PUSH
 818: LD_INT 1
 820: GREATER
 821: IFFALSE 845
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 823: LD_VAR 0 3
 827: PUSH
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 1
 835: ARRAY
 836: DIFF
 837: PPUSH
 838: LD_STRING 03_others
 840: PPUSH
 841: CALL_OW 38
// end else
 845: GO 870
// begin PrepareHuman ( false , 1 , 3 ) ;
 847: LD_INT 0
 849: PPUSH
 850: LD_INT 1
 852: PPUSH
 853: LD_INT 3
 855: PPUSH
 856: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 860: LD_ADDR_EXP 6
 864: PUSH
 865: CALL_OW 44
 869: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 870: LD_ADDR_OWVAR 20
 874: PUSH
 875: LD_INT 4
 877: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 878: LD_ADDR_EXP 13
 882: PUSH
 883: LD_STRING Donaldson
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_EXP 50
 893: PPUSH
 894: CALL 41317 0 3
 898: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 899: LD_ADDR_EXP 5
 903: PUSH
 904: LD_STRING Frank
 906: PPUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_EXP 50
 914: PPUSH
 915: CALL 41317 0 3
 919: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 920: LD_EXP 1
 924: PPUSH
 925: LD_INT 32
 927: PPUSH
 928: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 932: LD_EXP 7
 936: PPUSH
 937: LD_INT 1
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 947: LD_EXP 7
 951: PPUSH
 952: LD_INT 32
 954: PPUSH
 955: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 959: LD_EXP 8
 963: PPUSH
 964: LD_INT 2
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 974: LD_EXP 9
 978: PPUSH
 979: LD_INT 2
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 989: LD_EXP 12
 993: PPUSH
 994: LD_INT 2
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1004: LD_EXP 10
1008: PPUSH
1009: LD_INT 2
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1019: LD_EXP 11
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1034: LD_EXP 4
1038: PPUSH
1039: LD_INT 2
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// if Lisa = false then
1049: LD_EXP 4
1053: PUSH
1054: LD_INT 0
1056: EQUAL
1057: IFFALSE 1074
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1059: LD_EXP 2
1063: PPUSH
1064: LD_INT 2
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 49
// if Lisa = false and Bobby = false then
1074: LD_EXP 4
1078: PUSH
1079: LD_INT 0
1081: EQUAL
1082: PUSH
1083: LD_EXP 2
1087: PUSH
1088: LD_INT 0
1090: EQUAL
1091: AND
1092: IFFALSE 1109
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1094: LD_EXP 3
1098: PPUSH
1099: LD_INT 2
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1109: LD_EXP 4
1113: PUSH
1114: LD_INT 0
1116: EQUAL
1117: PUSH
1118: LD_EXP 2
1122: PUSH
1123: LD_INT 0
1125: EQUAL
1126: AND
1127: PUSH
1128: LD_EXP 3
1132: PUSH
1133: LD_INT 0
1135: EQUAL
1136: AND
1137: IFFALSE 1154
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1139: LD_EXP 6
1143: PPUSH
1144: LD_INT 2
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: CALL_OW 49
// end ;
1154: LD_VAR 0 1
1158: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1159: LD_INT 0
1161: PPUSH
1162: PPUSH
1163: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1164: LD_EXP 13
1168: PPUSH
1169: LD_INT 10
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// if Frank then
1179: LD_EXP 5
1183: IFFALSE 1200
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1185: LD_EXP 5
1189: PPUSH
1190: LD_INT 10
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// uc_nation = 1 ;
1200: LD_ADDR_OWVAR 21
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// uc_side = 4 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 4
1215: ST_TO_ADDR
// hc_class := 3 ;
1216: LD_ADDR_OWVAR 28
1220: PUSH
1221: LD_INT 3
1223: ST_TO_ADDR
// hc_sex := sex_male ;
1224: LD_ADDR_OWVAR 27
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1232: LD_ADDR_OWVAR 33
1236: PUSH
1237: LD_STRING SecondCharsGal
1239: ST_TO_ADDR
// hc_face_number := 53 ;
1240: LD_ADDR_OWVAR 34
1244: PUSH
1245: LD_INT 53
1247: ST_TO_ADDR
// hc_name := Freddie Warner ;
1248: LD_ADDR_OWVAR 26
1252: PUSH
1253: LD_STRING Freddie Warner
1255: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1256: LD_ADDR_OWVAR 29
1260: PUSH
1261: LD_INT 8
1263: PUSH
1264: LD_INT 11
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
1271: LD_ADDR_OWVAR 30
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 0
1281: PUSH
1282: LD_INT 2
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1294: LD_ADDR_OWVAR 31
1298: PUSH
1299: LD_INT 1
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 2
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: ST_TO_ADDR
// un = CreateHuman ;
1317: LD_ADDR_VAR 0 3
1321: PUSH
1322: CALL_OW 44
1326: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1327: LD_VAR 0 3
1331: PPUSH
1332: LD_INT 10
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 49
// hc_class := 1 ;
1342: LD_ADDR_OWVAR 28
1346: PUSH
1347: LD_INT 1
1349: ST_TO_ADDR
// hc_sex := sex_male ;
1350: LD_ADDR_OWVAR 27
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1358: LD_ADDR_OWVAR 33
1362: PUSH
1363: LD_STRING SecondCharsGal
1365: ST_TO_ADDR
// hc_face_number := 56 ;
1366: LD_ADDR_OWVAR 34
1370: PUSH
1371: LD_INT 56
1373: ST_TO_ADDR
// hc_name := Mel Brennan ;
1374: LD_ADDR_OWVAR 26
1378: PUSH
1379: LD_STRING Mel Brennan
1381: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1382: LD_ADDR_OWVAR 29
1386: PUSH
1387: LD_INT 12
1389: PUSH
1390: LD_INT 11
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
1397: LD_ADDR_OWVAR 30
1401: PUSH
1402: LD_INT 2
1404: PUSH
1405: LD_INT 0
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1420: LD_ADDR_OWVAR 31
1424: PUSH
1425: LD_INT 4
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: ST_TO_ADDR
// un = CreateHuman ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: CALL_OW 44
1452: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1453: LD_VAR 0 3
1457: PPUSH
1458: LD_INT 10
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 49
// hc_class := 1 ;
1468: LD_ADDR_OWVAR 28
1472: PUSH
1473: LD_INT 1
1475: ST_TO_ADDR
// hc_sex := sex_male ;
1476: LD_ADDR_OWVAR 27
1480: PUSH
1481: LD_INT 1
1483: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1484: LD_ADDR_OWVAR 33
1488: PUSH
1489: LD_STRING AmGalRemake
1491: ST_TO_ADDR
// hc_face_number := 5 ;
1492: LD_ADDR_OWVAR 34
1496: PUSH
1497: LD_INT 5
1499: ST_TO_ADDR
// hc_name := Bob Joplin ;
1500: LD_ADDR_OWVAR 26
1504: PUSH
1505: LD_STRING Bob Joplin
1507: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1508: LD_ADDR_OWVAR 29
1512: PUSH
1513: LD_INT 10
1515: PUSH
1516: LD_INT 11
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
1523: LD_ADDR_OWVAR 30
1527: PUSH
1528: LD_INT 0
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1546: LD_ADDR_OWVAR 31
1550: PUSH
1551: LD_INT 3
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// un = CreateHuman ;
1569: LD_ADDR_VAR 0 3
1573: PUSH
1574: CALL_OW 44
1578: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1579: LD_VAR 0 3
1583: PPUSH
1584: LD_INT 10
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 49
// hc_class := 3 ;
1594: LD_ADDR_OWVAR 28
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// hc_sex := sex_female ;
1602: LD_ADDR_OWVAR 27
1606: PUSH
1607: LD_INT 2
1609: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1610: LD_ADDR_OWVAR 33
1614: PUSH
1615: LD_STRING AmGalRemake
1617: ST_TO_ADDR
// hc_face_number := 8 ;
1618: LD_ADDR_OWVAR 34
1622: PUSH
1623: LD_INT 8
1625: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1626: LD_ADDR_OWVAR 26
1630: PUSH
1631: LD_STRING Elizabeth Whitney
1633: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1634: LD_ADDR_OWVAR 29
1638: PUSH
1639: LD_INT 9
1641: PUSH
1642: LD_INT 11
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
1649: LD_ADDR_OWVAR 30
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 4 , 1 ] ;
1672: LD_ADDR_OWVAR 31
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 4
1685: PUSH
1686: LD_INT 1
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// un = CreateHuman ;
1695: LD_ADDR_VAR 0 3
1699: PUSH
1700: CALL_OW 44
1704: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1705: LD_VAR 0 3
1709: PPUSH
1710: LD_INT 10
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
// InitHc ;
1720: CALL_OW 19
// end ;
1724: LD_VAR 0 1
1728: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
1734: PPUSH
// uc_nation = 1 ;
1735: LD_ADDR_OWVAR 21
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// uc_side = 1 ;
1743: LD_ADDR_OWVAR 20
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1751: LD_ADDR_OWVAR 37
1755: PUSH
1756: LD_INT 2
1758: ST_TO_ADDR
// vc_engine := engine_combustion ;
1759: LD_ADDR_OWVAR 39
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// vc_control := control_manual ;
1767: LD_ADDR_OWVAR 38
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1775: LD_ADDR_OWVAR 41
1779: PUSH
1780: LD_INT 65
1782: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 5
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 4
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PUSH
1806: LD_OWVAR 67
1810: ARRAY
1811: ST_TO_ADDR
// veh := CreateVehicle ;
1812: LD_ADDR_VAR 0 5
1816: PUSH
1817: CALL_OW 45
1821: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1822: LD_VAR 0 5
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1834: LD_INT 17
1836: PPUSH
1837: LD_INT 4
1839: PPUSH
1840: CALL_OW 428
1844: PUSH
1845: LD_INT 0
1847: EQUAL
1848: IFFALSE 1870
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 17
1857: PPUSH
1858: LD_INT 4
1860: PPUSH
1861: LD_INT 0
1863: PPUSH
1864: CALL_OW 48
1868: GO 1888
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1870: LD_VAR 0 5
1874: PPUSH
1875: LD_INT 23
1877: PPUSH
1878: LD_INT 10
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 48
// hc_class := 1 ;
1888: LD_ADDR_OWVAR 28
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// hc_sex := sex_male ;
1896: LD_ADDR_OWVAR 27
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1904: LD_ADDR_OWVAR 33
1908: PUSH
1909: LD_STRING SecondCharsGal
1911: ST_TO_ADDR
// hc_face_number := 59 ;
1912: LD_ADDR_OWVAR 34
1916: PUSH
1917: LD_INT 59
1919: ST_TO_ADDR
// hc_name := Max Gray ;
1920: LD_ADDR_OWVAR 26
1924: PUSH
1925: LD_STRING Max Gray
1927: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1928: LD_ADDR_OWVAR 29
1932: PUSH
1933: LD_INT 9
1935: PUSH
1936: LD_INT 11
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
1943: LD_ADDR_OWVAR 30
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 1
1953: PUSH
1954: LD_INT 0
1956: PUSH
1957: LD_INT 0
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 4
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: LD_INT 0
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// un = CreateHuman ;
1989: LD_ADDR_VAR 0 4
1993: PUSH
1994: CALL_OW 44
1998: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1999: LD_VAR 0 4
2003: PPUSH
2004: LD_INT 11
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// hc_class := 2 ;
2014: LD_ADDR_OWVAR 28
2018: PUSH
2019: LD_INT 2
2021: ST_TO_ADDR
// hc_sex := sex_male ;
2022: LD_ADDR_OWVAR 27
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2030: LD_ADDR_OWVAR 33
2034: PUSH
2035: LD_STRING SecondCharsGal
2037: ST_TO_ADDR
// hc_face_number := 50 ;
2038: LD_ADDR_OWVAR 34
2042: PUSH
2043: LD_INT 50
2045: ST_TO_ADDR
// hc_name := Frank Hughes ;
2046: LD_ADDR_OWVAR 26
2050: PUSH
2051: LD_STRING Frank Hughes
2053: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2054: LD_ADDR_OWVAR 29
2058: PUSH
2059: LD_INT 10
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2069: LD_ADDR_OWVAR 30
2073: PUSH
2074: LD_INT 1
2076: PUSH
2077: LD_INT 2
2079: PUSH
2080: LD_INT 0
2082: PUSH
2083: LD_INT 0
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: ST_TO_ADDR
// hc_skills := [ 1 , 4 , 0 , 1 ] ;
2092: LD_ADDR_OWVAR 31
2096: PUSH
2097: LD_INT 1
2099: PUSH
2100: LD_INT 4
2102: PUSH
2103: LD_INT 0
2105: PUSH
2106: LD_INT 1
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: ST_TO_ADDR
// un = CreateHuman ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: CALL_OW 44
2124: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2125: LD_VAR 0 4
2129: PPUSH
2130: LD_INT 11
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// hc_class := 1 ;
2140: LD_ADDR_OWVAR 28
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_sex := sex_male ;
2148: LD_ADDR_OWVAR 27
2152: PUSH
2153: LD_INT 1
2155: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2156: LD_ADDR_OWVAR 33
2160: PUSH
2161: LD_STRING SecondCharsGal
2163: ST_TO_ADDR
// hc_face_number := 54 ;
2164: LD_ADDR_OWVAR 34
2168: PUSH
2169: LD_INT 54
2171: ST_TO_ADDR
// hc_name := Luigi Ghibellini ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING Luigi Ghibellini
2179: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2180: LD_ADDR_OWVAR 29
2184: PUSH
2185: LD_INT 11
2187: PUSH
2188: LD_INT 11
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 1 ] ;
2195: LD_ADDR_OWVAR 30
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 0
2205: PUSH
2206: LD_INT 1
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 2 ] ;
2218: LD_ADDR_OWVAR 31
2222: PUSH
2223: LD_INT 2
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: ST_TO_ADDR
// un = CreateHuman ;
2241: LD_ADDR_VAR 0 4
2245: PUSH
2246: CALL_OW 44
2250: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2251: LD_VAR 0 4
2255: PPUSH
2256: LD_INT 11
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// hc_class := 3 ;
2266: LD_ADDR_OWVAR 28
2270: PUSH
2271: LD_INT 3
2273: ST_TO_ADDR
// hc_sex := sex_male ;
2274: LD_ADDR_OWVAR 27
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2282: LD_ADDR_OWVAR 33
2286: PUSH
2287: LD_STRING AmGalRemake
2289: ST_TO_ADDR
// hc_face_number := 6 ;
2290: LD_ADDR_OWVAR 34
2294: PUSH
2295: LD_INT 6
2297: ST_TO_ADDR
// hc_name := Leon Carter ;
2298: LD_ADDR_OWVAR 26
2302: PUSH
2303: LD_STRING Leon Carter
2305: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2306: LD_ADDR_OWVAR 29
2310: PUSH
2311: LD_INT 10
2313: PUSH
2314: LD_INT 9
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
2321: LD_ADDR_OWVAR 30
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 0
2331: PUSH
2332: LD_INT 2
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2344: LD_ADDR_OWVAR 31
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: LD_INT 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: ST_TO_ADDR
// un = CreateHuman ;
2367: LD_ADDR_VAR 0 4
2371: PUSH
2372: CALL_OW 44
2376: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2377: LD_VAR 0 4
2381: PPUSH
2382: LD_VAR 0 5
2386: PPUSH
2387: CALL_OW 52
// if count = 4 then
2391: LD_VAR 0 1
2395: PUSH
2396: LD_INT 4
2398: EQUAL
2399: IFFALSE 2527
// begin hc_class := 1 ;
2401: LD_ADDR_OWVAR 28
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// hc_sex := sex_male ;
2409: LD_ADDR_OWVAR 27
2413: PUSH
2414: LD_INT 1
2416: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2417: LD_ADDR_OWVAR 33
2421: PUSH
2422: LD_STRING SecondCharsGal
2424: ST_TO_ADDR
// hc_face_number := 34 ;
2425: LD_ADDR_OWVAR 34
2429: PUSH
2430: LD_INT 34
2432: ST_TO_ADDR
// hc_name := Ian Hill ;
2433: LD_ADDR_OWVAR 26
2437: PUSH
2438: LD_STRING Ian Hill
2440: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2441: LD_ADDR_OWVAR 29
2445: PUSH
2446: LD_INT 10
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2456: LD_ADDR_OWVAR 30
2460: PUSH
2461: LD_INT 3
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: LD_INT 0
2469: PUSH
2470: LD_INT 0
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2479: LD_ADDR_OWVAR 31
2483: PUSH
2484: LD_INT 4
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: ST_TO_ADDR
// un = CreateHuman ;
2502: LD_ADDR_VAR 0 4
2506: PUSH
2507: CALL_OW 44
2511: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2512: LD_VAR 0 4
2516: PPUSH
2517: LD_INT 11
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: CALL_OW 49
// end ; if count = 5 then
2527: LD_VAR 0 1
2531: PUSH
2532: LD_INT 5
2534: EQUAL
2535: IFFALSE 2789
// begin hc_class := 1 ;
2537: LD_ADDR_OWVAR 28
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// hc_sex := sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2553: LD_ADDR_OWVAR 33
2557: PUSH
2558: LD_STRING SecondCharsGal
2560: ST_TO_ADDR
// hc_face_number := 34 ;
2561: LD_ADDR_OWVAR 34
2565: PUSH
2566: LD_INT 34
2568: ST_TO_ADDR
// hc_name := Ian Hill ;
2569: LD_ADDR_OWVAR 26
2573: PUSH
2574: LD_STRING Ian Hill
2576: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2577: LD_ADDR_OWVAR 29
2581: PUSH
2582: LD_INT 10
2584: PUSH
2585: LD_INT 12
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2592: LD_ADDR_OWVAR 30
2596: PUSH
2597: LD_INT 3
2599: PUSH
2600: LD_INT 0
2602: PUSH
2603: LD_INT 0
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2615: LD_ADDR_OWVAR 31
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: LD_INT 1
2625: PUSH
2626: LD_INT 1
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: ST_TO_ADDR
// un = CreateHuman ;
2638: LD_ADDR_VAR 0 4
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2648: LD_VAR 0 4
2652: PPUSH
2653: LD_INT 11
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// hc_class := 1 ;
2663: LD_ADDR_OWVAR 28
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// hc_sex := sex_female ;
2671: LD_ADDR_OWVAR 27
2675: PUSH
2676: LD_INT 2
2678: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2679: LD_ADDR_OWVAR 33
2683: PUSH
2684: LD_STRING SecondCharsGal
2686: ST_TO_ADDR
// hc_face_number := 41 ;
2687: LD_ADDR_OWVAR 34
2691: PUSH
2692: LD_INT 41
2694: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2695: LD_ADDR_OWVAR 26
2699: PUSH
2700: LD_STRING Kate Wadsworth
2702: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2703: LD_ADDR_OWVAR 29
2707: PUSH
2708: LD_INT 9
2710: PUSH
2711: LD_INT 9
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2718: LD_ADDR_OWVAR 30
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: LD_INT 2
2728: PUSH
2729: LD_INT 0
2731: PUSH
2732: LD_INT 0
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2741: LD_ADDR_OWVAR 31
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: LD_INT 3
2751: PUSH
2752: LD_INT 1
2754: PUSH
2755: LD_INT 0
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: ST_TO_ADDR
// un = CreateHuman ;
2764: LD_ADDR_VAR 0 4
2768: PUSH
2769: CALL_OW 44
2773: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2774: LD_VAR 0 4
2778: PPUSH
2779: LD_INT 11
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2789: LD_INT 11
2791: PPUSH
2792: LD_INT 22
2794: PUSH
2795: LD_INT 1
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 21
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 26
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: PPUSH
2827: CALL_OW 70
2831: PUSH
2832: LD_INT 1
2834: ARRAY
2835: PPUSH
2836: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2840: LD_INT 11
2842: PPUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: LD_INT 21
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_INT 26
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 70
2882: PUSH
2883: LD_INT 1
2885: ARRAY
2886: PPUSH
2887: LD_STRING D6-Sol3-1
2889: PPUSH
2890: CALL_OW 88
// end ; end_of_file
2894: LD_VAR 0 2
2898: RET
// export function PrepareRussianCommander ; begin
2899: LD_INT 0
2901: PPUSH
// uc_side = 3 ;
2902: LD_ADDR_OWVAR 20
2906: PUSH
2907: LD_INT 3
2909: ST_TO_ADDR
// uc_nation = 3 ;
2910: LD_ADDR_OWVAR 21
2914: PUSH
2915: LD_INT 3
2917: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2918: LD_ADDR_EXP 15
2922: PUSH
2923: LD_STRING Stolypin
2925: PPUSH
2926: CALL_OW 25
2930: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 21
2938: PPUSH
2939: CALL_OW 52
// end ;
2943: LD_VAR 0 1
2947: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2948: LD_INT 0
2950: PPUSH
2951: PPUSH
2952: PPUSH
2953: PPUSH
// if Difficulty > 1 then
2954: LD_OWVAR 67
2958: PUSH
2959: LD_INT 1
2961: GREATER
2962: IFFALSE 3072
// begin uc_side := 3 ;
2964: LD_ADDR_OWVAR 20
2968: PUSH
2969: LD_INT 3
2971: ST_TO_ADDR
// uc_nation := 3 ;
2972: LD_ADDR_OWVAR 21
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// InitHc_All ( ) ;
2980: CALL_OW 584
// InitBc ;
2984: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
2988: LD_INT 0
2990: PPUSH
2991: LD_INT 1
2993: PPUSH
2994: LD_INT 4
2996: PPUSH
2997: CALL_OW 380
// bc_type := b_breastwork ;
3001: LD_ADDR_OWVAR 42
3005: PUSH
3006: LD_INT 31
3008: ST_TO_ADDR
// bc_level := 4 ;
3009: LD_ADDR_OWVAR 43
3013: PUSH
3014: LD_INT 4
3016: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 100
3024: PPUSH
3025: LD_INT 58
3027: PPUSH
3028: LD_INT 2
3030: PPUSH
3031: CALL_OW 47
3035: ST_TO_ADDR
// un := CreateHuman ;
3036: LD_ADDR_VAR 0 4
3040: PUSH
3041: CALL_OW 44
3045: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_INT 5
3053: PPUSH
3054: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3058: LD_VAR 0 4
3062: PPUSH
3063: LD_VAR 0 3
3067: PPUSH
3068: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3072: LD_INT 3
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: LD_INT 22
3080: PPUSH
3081: LD_EXP 16
3085: PPUSH
3086: LD_EXP 17
3090: PPUSH
3091: CALL_OW 12
3095: PPUSH
3096: LD_INT 1
3098: PPUSH
3099: LD_INT 3
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 5
3107: PUSH
3108: LD_INT 6
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: LD_OWVAR 67
3121: ARRAY
3122: PPUSH
3123: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 21
3135: PPUSH
3136: LD_EXP 16
3140: PPUSH
3141: LD_EXP 17
3145: PPUSH
3146: CALL_OW 12
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_EXP 16
3174: PPUSH
3175: LD_EXP 17
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL 4325 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3195: LD_INT 3
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: LD_INT 24
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: LD_INT 3
3221: PPUSH
3222: LD_INT 5
3224: PPUSH
3225: CALL 4325 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3229: LD_ADDR_VAR 0 2
3233: PUSH
3234: LD_INT 22
3236: PUSH
3237: LD_INT 3
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 30
3246: PUSH
3247: LD_INT 32
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: PUSH
3263: FOR_IN
3264: IFFALSE 3304
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3266: LD_INT 3
3268: PPUSH
3269: LD_INT 3
3271: PPUSH
3272: LD_VAR 0 2
3276: PPUSH
3277: LD_EXP 16
3281: PPUSH
3282: LD_EXP 17
3286: PPUSH
3287: CALL_OW 12
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: CALL 4325 0 6
3302: GO 3263
3304: POP
3305: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3306: LD_ADDR_VAR 0 2
3310: PUSH
3311: LD_INT 22
3313: PUSH
3314: LD_INT 3
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: LD_INT 30
3323: PUSH
3324: LD_INT 31
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: PUSH
3340: FOR_IN
3341: IFFALSE 3369
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3343: LD_EXP 16
3347: PPUSH
3348: LD_EXP 17
3352: PPUSH
3353: CALL_OW 12
3357: PPUSH
3358: LD_VAR 0 2
3362: PPUSH
3363: CALL 4434 0 2
3367: GO 3340
3369: POP
3370: POP
// end ;
3371: LD_VAR 0 1
3375: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3376: LD_INT 0
3378: PPUSH
3379: PPUSH
3380: PPUSH
3381: PPUSH
// uc_side = 6 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 6
3389: ST_TO_ADDR
// uc_nation = 3 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 3
3397: ST_TO_ADDR
// InitHC_All ( ) ;
3398: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 1
3414: PUSH
3415: LD_INT 2
3417: PUSH
3418: LD_INT 2
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PUSH
3430: LD_OWVAR 67
3434: ARRAY
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3605
// begin vc_engine = 1 ;
3439: LD_ADDR_OWVAR 39
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// vc_control = 1 ;
3447: LD_ADDR_OWVAR 38
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3455: LD_ADDR_OWVAR 40
3459: PUSH
3460: LD_INT 42
3462: PUSH
3463: LD_INT 42
3465: PUSH
3466: LD_INT 43
3468: PUSH
3469: LD_INT 43
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_OWVAR 67
3482: ARRAY
3483: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3484: LD_ADDR_OWVAR 37
3488: PUSH
3489: LD_INT 21
3491: PUSH
3492: LD_INT 22
3494: PUSH
3495: LD_INT 22
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_OWVAR 67
3511: ARRAY
3512: ST_TO_ADDR
// veh = CreateVehicle ;
3513: LD_ADDR_VAR 0 3
3517: PUSH
3518: CALL_OW 45
3522: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3523: LD_VAR 0 3
3527: PPUSH
3528: LD_INT 3
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 49
// hc_gallery =  ;
3538: LD_ADDR_OWVAR 33
3542: PUSH
3543: LD_STRING 
3545: ST_TO_ADDR
// hc_name =  ;
3546: LD_ADDR_OWVAR 26
3550: PUSH
3551: LD_STRING 
3553: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 3
3559: PPUSH
3560: LD_EXP 16
3564: PPUSH
3565: LD_EXP 17
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: CALL_OW 380
// un = CreateHuman ;
3579: LD_ADDR_VAR 0 4
3583: PUSH
3584: CALL_OW 44
3588: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3589: LD_VAR 0 4
3593: PPUSH
3594: LD_VAR 0 3
3598: PPUSH
3599: CALL_OW 52
// end ;
3603: GO 3436
3605: POP
3606: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: LD_EXP 16
3617: PPUSH
3618: LD_EXP 17
3622: PPUSH
3623: CALL_OW 12
3627: PUSH
3628: LD_INT 2
3630: PLUS
3631: PPUSH
3632: CALL_OW 380
// un = CreateHuman ;
3636: LD_ADDR_VAR 0 4
3640: PUSH
3641: CALL_OW 44
3645: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3646: LD_VAR 0 4
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: LD_INT 0
3656: PPUSH
3657: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 4
3666: PPUSH
3667: LD_EXP 16
3671: PPUSH
3672: LD_EXP 17
3676: PPUSH
3677: CALL_OW 12
3681: PUSH
3682: LD_INT 2
3684: PLUS
3685: PPUSH
3686: CALL_OW 380
// un = CreateHuman ;
3690: LD_ADDR_VAR 0 4
3694: PUSH
3695: CALL_OW 44
3699: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3700: LD_VAR 0 4
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 0
3710: PPUSH
3711: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3715: LD_ADDR_VAR 0 2
3719: PUSH
3720: DOUBLE
3721: LD_INT 1
3723: DEC
3724: ST_TO_ADDR
3725: LD_INT 2
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 3
3733: PUSH
3734: LD_INT 4
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_OWVAR 67
3747: ARRAY
3748: PUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 12
3759: PLUS
3760: PUSH
3761: FOR_TO
3762: IFFALSE 3832
// begin hc_gallery =  ;
3764: LD_ADDR_OWVAR 33
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// hc_name =  ;
3772: LD_ADDR_OWVAR 26
3776: PUSH
3777: LD_STRING 
3779: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3780: LD_INT 0
3782: PPUSH
3783: LD_INT 1
3785: PPUSH
3786: LD_EXP 16
3790: PPUSH
3791: LD_EXP 17
3795: PPUSH
3796: CALL_OW 12
3800: PPUSH
3801: CALL_OW 380
// un = CreateHuman ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: CALL_OW 44
3814: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_INT 3
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: CALL_OW 49
// end ;
3830: GO 3761
3832: POP
3833: POP
// vc_engine = 1 ;
3834: LD_ADDR_OWVAR 39
3838: PUSH
3839: LD_INT 1
3841: ST_TO_ADDR
// vc_control = 1 ;
3842: LD_ADDR_OWVAR 38
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// vc_weapon = 51 ;
3850: LD_ADDR_OWVAR 40
3854: PUSH
3855: LD_INT 51
3857: ST_TO_ADDR
// vc_chassis = 22 ;
3858: LD_ADDR_OWVAR 37
3862: PUSH
3863: LD_INT 22
3865: ST_TO_ADDR
// veh = CreateVehicle ;
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: CALL_OW 45
3875: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: LD_INT 3
3883: PPUSH
3884: LD_INT 0
3886: PPUSH
3887: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 100
3901: PPUSH
3902: CALL_OW 290
// hc_gallery =  ;
3906: LD_ADDR_OWVAR 33
3910: PUSH
3911: LD_STRING 
3913: ST_TO_ADDR
// hc_name =  ;
3914: LD_ADDR_OWVAR 26
3918: PUSH
3919: LD_STRING 
3921: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_EXP 16
3932: PPUSH
3933: LD_EXP 17
3937: PPUSH
3938: CALL_OW 12
3942: PPUSH
3943: CALL_OW 380
// un = CreateHuman ;
3947: LD_ADDR_VAR 0 4
3951: PUSH
3952: CALL_OW 44
3956: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3957: LD_VAR 0 4
3961: PPUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3971: LD_ADDR_VAR 0 2
3975: PUSH
3976: LD_INT 22
3978: PUSH
3979: LD_INT 6
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 1
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: LD_INT 25
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: LD_INT 25
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: FOR_IN
4038: IFFALSE 4057
// ComAgressiveMove ( i , 45 , 46 ) ;
4040: LD_VAR 0 2
4044: PPUSH
4045: LD_INT 45
4047: PPUSH
4048: LD_INT 46
4050: PPUSH
4051: CALL_OW 114
4055: GO 4037
4057: POP
4058: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4059: LD_ADDR_VAR 0 2
4063: PUSH
4064: LD_INT 22
4066: PUSH
4067: LD_INT 6
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: LD_INT 25
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: FOR_IN
4094: IFFALSE 4125
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4096: LD_ADDR_EXP 21
4100: PUSH
4101: LD_VAR 0 2
4105: PPUSH
4106: LD_INT 0
4108: PPUSH
4109: LD_INT 48
4111: PPUSH
4112: LD_INT 55
4114: PPUSH
4115: LD_INT 5
4117: PPUSH
4118: CALL_OW 145
4122: ST_TO_ADDR
4123: GO 4093
4125: POP
4126: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 22
4134: PUSH
4135: LD_INT 6
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 4
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 69
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4181
// ComMoveXY ( i , 39 , 55 ) ;
4164: LD_VAR 0 2
4168: PPUSH
4169: LD_INT 39
4171: PPUSH
4172: LD_INT 55
4174: PPUSH
4175: CALL_OW 111
4179: GO 4161
4181: POP
4182: POP
// end ;
4183: LD_VAR 0 1
4187: RET
// export function PrepareFirstAttack ; var i , un ; begin
4188: LD_INT 0
4190: PPUSH
4191: PPUSH
4192: PPUSH
// uc_side = 5 ;
4193: LD_ADDR_OWVAR 20
4197: PUSH
4198: LD_INT 5
4200: ST_TO_ADDR
// uc_nation = 3 ;
4201: LD_ADDR_OWVAR 21
4205: PUSH
4206: LD_INT 3
4208: ST_TO_ADDR
// for i := 1 to 4 do
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: DOUBLE
4215: LD_INT 1
4217: DEC
4218: ST_TO_ADDR
4219: LD_INT 4
4221: PUSH
4222: FOR_TO
4223: IFFALSE 4310
// begin InitHC_All ( ) ;
4225: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4229: LD_INT 0
4231: PPUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_EXP 16
4239: PPUSH
4240: LD_EXP 17
4244: PPUSH
4245: CALL_OW 12
4249: PPUSH
4250: CALL_OW 380
// un = CreateHuman ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 44
4263: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 4
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4279: LD_VAR 0 3
4283: PPUSH
4284: LD_EXP 1
4288: PPUSH
4289: CALL_OW 250
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 251
4303: PPUSH
4304: CALL_OW 114
// end ;
4308: GO 4222
4310: POP
4311: POP
// firstRussianAttack = 1 ;
4312: LD_ADDR_EXP 23
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// end ; end_of_file
4320: LD_VAR 0 1
4324: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4325: LD_INT 0
4327: PPUSH
4328: PPUSH
4329: PPUSH
// for i = 1 to count do
4330: LD_ADDR_VAR 0 8
4334: PUSH
4335: DOUBLE
4336: LD_INT 1
4338: DEC
4339: ST_TO_ADDR
4340: LD_VAR 0 6
4344: PUSH
4345: FOR_TO
4346: IFFALSE 4427
// begin uc_side = side ;
4348: LD_ADDR_OWVAR 20
4352: PUSH
4353: LD_VAR 0 1
4357: ST_TO_ADDR
// uc_nation = nation ;
4358: LD_ADDR_OWVAR 21
4362: PUSH
4363: LD_VAR 0 2
4367: ST_TO_ADDR
// hc_gallery =  ;
4368: LD_ADDR_OWVAR 33
4372: PUSH
4373: LD_STRING 
4375: ST_TO_ADDR
// hc_name =  ;
4376: LD_ADDR_OWVAR 26
4380: PUSH
4381: LD_STRING 
4383: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4384: LD_INT 0
4386: PPUSH
4387: LD_VAR 0 5
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 380
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4411: LD_VAR 0 9
4415: PPUSH
4416: LD_VAR 0 3
4420: PPUSH
4421: CALL_OW 52
// end ;
4425: GO 4345
4427: POP
4428: POP
// end ;
4429: LD_VAR 0 7
4433: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4434: LD_INT 0
4436: PPUSH
4437: PPUSH
4438: PPUSH
// uc_side := GetSide ( b ) ;
4439: LD_ADDR_OWVAR 20
4443: PUSH
4444: LD_VAR 0 2
4448: PPUSH
4449: CALL_OW 255
4453: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4454: LD_ADDR_OWVAR 21
4458: PUSH
4459: LD_VAR 0 2
4463: PPUSH
4464: CALL_OW 248
4468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: CALL_OW 380
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 4
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4494: LD_ADDR_VAR 0 5
4498: PUSH
4499: LD_VAR 0 2
4503: PPUSH
4504: CALL_OW 254
4508: PUSH
4509: LD_INT 3
4511: MINUS
4512: ST_TO_ADDR
// if dir < 0 then
4513: LD_VAR 0 5
4517: PUSH
4518: LD_INT 0
4520: LESS
4521: IFFALSE 4537
// dir := 6 + dir ;
4523: LD_ADDR_VAR 0 5
4527: PUSH
4528: LD_INT 6
4530: PUSH
4531: LD_VAR 0 5
4535: PLUS
4536: ST_TO_ADDR
// SetDir ( un , dir ) ;
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4551: LD_VAR 0 4
4555: PPUSH
4556: LD_VAR 0 2
4560: PPUSH
4561: CALL_OW 52
// end ;
4565: LD_VAR 0 3
4569: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4570: LD_INT 0
4572: PPUSH
4573: PPUSH
4574: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4575: LD_ADDR_VAR 0 6
4579: PUSH
4580: LD_VAR 0 1
4584: PUSH
4585: LD_INT 1
4587: PPUSH
4588: LD_VAR 0 1
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4599: LD_VAR 0 6
4603: PPUSH
4604: CALL_OW 258
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4630
// Say ( speaker , dialogMID ) else
4614: LD_VAR 0 6
4618: PPUSH
4619: LD_VAR 0 2
4623: PPUSH
4624: CALL_OW 88
4628: GO 4644
// Say ( speaker , dialogFID ) ;
4630: LD_VAR 0 6
4634: PPUSH
4635: LD_VAR 0 3
4639: PPUSH
4640: CALL_OW 88
// result := speaker ;
4644: LD_ADDR_VAR 0 4
4648: PUSH
4649: LD_VAR 0 6
4653: ST_TO_ADDR
// end ;
4654: LD_VAR 0 4
4658: RET
// export function PrepareDifficulty ; var tmp ; begin
4659: LD_INT 0
4661: PPUSH
4662: PPUSH
// if Difficulty = 1 then
4663: LD_OWVAR 67
4667: PUSH
4668: LD_INT 1
4670: EQUAL
4671: IFFALSE 4689
// begin RuSoldMinLevel = 1 ;
4673: LD_ADDR_EXP 16
4677: PUSH
4678: LD_INT 1
4680: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4681: LD_ADDR_EXP 17
4685: PUSH
4686: LD_INT 2
4688: ST_TO_ADDR
// end ; if Difficulty = 2 then
4689: LD_OWVAR 67
4693: PUSH
4694: LD_INT 2
4696: EQUAL
4697: IFFALSE 4798
// begin RuSoldMinLevel = 2 ;
4699: LD_ADDR_EXP 16
4703: PUSH
4704: LD_INT 2
4706: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4707: LD_ADDR_EXP 17
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4715: LD_INT 23
4717: PPUSH
4718: CALL_OW 64
// uc_nation = 3 ;
4722: LD_ADDR_OWVAR 21
4726: PUSH
4727: LD_INT 3
4729: ST_TO_ADDR
// uc_side = 3 ;
4730: LD_ADDR_OWVAR 20
4734: PUSH
4735: LD_INT 3
4737: ST_TO_ADDR
// bc_level = 5 ;
4738: LD_ADDR_OWVAR 43
4742: PUSH
4743: LD_INT 5
4745: ST_TO_ADDR
// bc_type = 32 ;
4746: LD_ADDR_OWVAR 42
4750: PUSH
4751: LD_INT 32
4753: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4754: LD_ADDR_VAR 0 2
4758: PUSH
4759: LD_INT 76
4761: PPUSH
4762: LD_INT 91
4764: PPUSH
4765: LD_INT 2
4767: PPUSH
4768: CALL_OW 47
4772: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 43
4780: PPUSH
4781: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4785: LD_INT 51
4787: PPUSH
4788: LD_INT 3
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 322
// end ; if Difficulty >= 3 then
4798: LD_OWVAR 67
4802: PUSH
4803: LD_INT 3
4805: GREATEREQUAL
4806: IFFALSE 4970
// begin RuSoldMinLevel = Difficulty ;
4808: LD_ADDR_EXP 16
4812: PUSH
4813: LD_OWVAR 67
4817: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4818: LD_ADDR_EXP 17
4822: PUSH
4823: LD_INT 4
4825: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4826: LD_INT 26
4828: PPUSH
4829: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4833: LD_INT 23
4835: PPUSH
4836: CALL_OW 64
// uc_nation = 3 ;
4840: LD_ADDR_OWVAR 21
4844: PUSH
4845: LD_INT 3
4847: ST_TO_ADDR
// uc_side = 3 ;
4848: LD_ADDR_OWVAR 20
4852: PUSH
4853: LD_INT 3
4855: ST_TO_ADDR
// bc_level = 5 ;
4856: LD_ADDR_OWVAR 43
4860: PUSH
4861: LD_INT 5
4863: ST_TO_ADDR
// bc_type = 32 ;
4864: LD_ADDR_OWVAR 42
4868: PUSH
4869: LD_INT 32
4871: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4872: LD_ADDR_VAR 0 2
4876: PUSH
4877: LD_INT 76
4879: PPUSH
4880: LD_INT 91
4882: PPUSH
4883: LD_INT 2
4885: PPUSH
4886: CALL_OW 47
4890: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: LD_INT 44
4898: PPUSH
4899: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: LD_INT 83
4910: PPUSH
4911: LD_INT 84
4913: PPUSH
4914: LD_INT 2
4916: PPUSH
4917: CALL_OW 47
4921: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 43
4929: PPUSH
4930: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4934: LD_INT 51
4936: PPUSH
4937: LD_INT 3
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4947: LD_INT 52
4949: PPUSH
4950: LD_INT 3
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4960: LD_INT 25
4962: PPUSH
4963: LD_INT 44
4965: PPUSH
4966: CALL_OW 431
// end ; end ;
4970: LD_VAR 0 1
4974: RET
// export function EnergyDialog ; begin
4975: LD_INT 0
4977: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4978: LD_INT 46
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 321
4988: PUSH
4989: LD_INT 1
4991: EQUAL
4992: PUSH
4993: LD_INT 35
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: CALL_OW 321
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5032
// begin Say ( JMM , D9c-JMM-1 ) ;
5010: LD_EXP 1
5014: PPUSH
5015: LD_STRING D9c-JMM-1
5017: PPUSH
5018: CALL_OW 88
// energyVDialog = 1 ;
5022: LD_ADDR_EXP 33
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// end else
5030: GO 5186
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5032: LD_INT 35
5034: PPUSH
5035: LD_INT 1
5037: PPUSH
5038: CALL_OW 321
5042: PUSH
5043: LD_INT 2
5045: EQUAL
5046: PUSH
5047: LD_EXP 33
5051: PUSH
5052: LD_INT 0
5054: EQUAL
5055: AND
5056: IFFALSE 5078
// begin Say ( JMM , D9c-JMM-1a ) ;
5058: LD_EXP 1
5062: PPUSH
5063: LD_STRING D9c-JMM-1a
5065: PPUSH
5066: CALL_OW 88
// energyVDialog = 1 ;
5070: LD_ADDR_EXP 33
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5078: LD_INT 46
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 321
5088: PUSH
5089: LD_INT 2
5091: EQUAL
5092: PUSH
5093: LD_EXP 33
5097: PUSH
5098: LD_INT 0
5100: EQUAL
5101: AND
5102: IFFALSE 5124
// begin Say ( JMM , D9c-JMM-1b ) ;
5104: LD_EXP 1
5108: PPUSH
5109: LD_STRING D9c-JMM-1b
5111: PPUSH
5112: CALL_OW 88
// energyVDialog = 1 ;
5116: LD_ADDR_EXP 33
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5124: LD_INT 46
5126: PPUSH
5127: LD_INT 1
5129: PPUSH
5130: CALL_OW 321
5134: PUSH
5135: LD_INT 2
5137: EQUAL
5138: PUSH
5139: LD_INT 21
5141: PPUSH
5142: LD_INT 1
5144: PPUSH
5145: CALL_OW 321
5149: PUSH
5150: LD_INT 2
5152: EQUAL
5153: AND
5154: PUSH
5155: LD_EXP 33
5159: PUSH
5160: LD_INT 0
5162: EQUAL
5163: AND
5164: IFFALSE 5186
// begin Say ( JMM , D9c-JMM-1c ) ;
5166: LD_EXP 1
5170: PPUSH
5171: LD_STRING D9c-JMM-1c
5173: PPUSH
5174: CALL_OW 88
// energyVDialog = 1 ;
5178: LD_ADDR_EXP 33
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// end ; end ; end ;
5186: LD_VAR 0 1
5190: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5198: LD_VAR 0 1
5202: NOT
5203: PUSH
5204: LD_VAR 0 1
5208: PPUSH
5209: CALL_OW 256
5213: PUSH
5214: LD_INT 250
5216: LESS
5217: OR
5218: PUSH
5219: LD_VAR 0 1
5223: PPUSH
5224: CALL_OW 314
5228: PUSH
5229: LD_VAR 0 1
5233: PPUSH
5234: CALL_OW 261
5238: PUSH
5239: LD_INT 20
5241: GREATER
5242: AND
5243: OR
5244: IFFALSE 5248
// exit ;
5246: GO 5613
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5248: LD_VAR 0 1
5252: PPUSH
5253: CALL_OW 261
5257: PUSH
5258: LD_INT 20
5260: LESS
5261: PUSH
5262: LD_VAR 0 1
5266: PPUSH
5267: CALL_OW 110
5271: PUSH
5272: LD_INT 21
5274: EQUAL
5275: NOT
5276: AND
5277: IFFALSE 5304
// begin ComStop ( bulldozer ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: LD_INT 21
5295: PPUSH
5296: CALL_OW 109
// exit ;
5300: GO 5613
// end else
5302: GO 5331
// if GetFuel ( bulldozer ) > 20 then
5304: LD_VAR 0 1
5308: PPUSH
5309: CALL_OW 261
5313: PUSH
5314: LD_INT 20
5316: GREATER
5317: IFFALSE 5331
// SetTag ( bulldozer , 0 ) ;
5319: LD_VAR 0 1
5323: PPUSH
5324: LD_INT 0
5326: PPUSH
5327: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5331: LD_ADDR_VAR 0 5
5335: PUSH
5336: LD_VAR 0 2
5340: PPUSH
5341: CALL_OW 353
5345: ST_TO_ADDR
// tmp := [ ] ;
5346: LD_ADDR_VAR 0 6
5350: PUSH
5351: EMPTY
5352: ST_TO_ADDR
// for i = 1 to list do
5353: LD_ADDR_VAR 0 4
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 5
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5467
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5371: LD_VAR 0 5
5375: PUSH
5376: LD_VAR 0 4
5380: ARRAY
5381: PUSH
5382: LD_INT 1
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PUSH
5391: LD_VAR 0 4
5395: ARRAY
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 554
5405: IFFALSE 5465
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5407: LD_ADDR_VAR 0 6
5411: PUSH
5412: LD_VAR 0 6
5416: PPUSH
5417: LD_VAR 0 6
5421: PUSH
5422: LD_INT 1
5424: PLUS
5425: PPUSH
5426: LD_VAR 0 5
5430: PUSH
5431: LD_VAR 0 4
5435: ARRAY
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PPUSH
5460: CALL_OW 1
5464: ST_TO_ADDR
// end ;
5465: GO 5368
5467: POP
5468: POP
// ComStop ( bulldozer ) ;
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5478: LD_ADDR_VAR 0 7
5482: PUSH
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 250
5492: PUSH
5493: LD_VAR 0 1
5497: PPUSH
5498: CALL_OW 251
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: ST_TO_ADDR
// for i = tmp downto 1 do
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: DOUBLE
5513: LD_VAR 0 6
5517: INC
5518: ST_TO_ADDR
5519: LD_INT 1
5521: PUSH
5522: FOR_DOWNTO
5523: IFFALSE 5611
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5525: LD_ADDR_VAR 0 7
5529: PUSH
5530: LD_VAR 0 7
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: PPUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 2
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 6
5552: PPUSH
5553: CALL 5714 0 3
5557: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_VAR 0 7
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 2
5579: ARRAY
5580: PPUSH
5581: CALL 5618 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5585: LD_ADDR_VAR 0 6
5589: PUSH
5590: LD_VAR 0 6
5594: PPUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 3
5602: ARRAY
5603: PPUSH
5604: CALL_OW 3
5608: ST_TO_ADDR
// end ;
5609: GO 5522
5611: POP
5612: POP
// end ;
5613: LD_VAR 0 3
5617: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5618: LD_INT 0
5620: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5621: LD_VAR 0 2
5625: PPUSH
5626: LD_VAR 0 3
5630: PPUSH
5631: CALL_OW 351
5635: PUSH
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_VAR 0 3
5645: PPUSH
5646: CALL_OW 554
5650: AND
5651: PUSH
5652: LD_VAR 0 2
5656: PPUSH
5657: LD_VAR 0 3
5661: PPUSH
5662: CALL_OW 488
5666: AND
5667: PUSH
5668: LD_VAR 0 2
5672: PPUSH
5673: LD_VAR 0 3
5677: PPUSH
5678: CALL_OW 428
5682: PUSH
5683: LD_INT 1
5685: NEG
5686: EQUAL
5687: AND
5688: IFFALSE 5709
// AddComMoveXY ( bulldozer , x , y ) ;
5690: LD_VAR 0 1
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: LD_VAR 0 3
5704: PPUSH
5705: CALL_OW 171
// end ;
5709: LD_VAR 0 4
5713: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5714: LD_INT 0
5716: PPUSH
5717: PPUSH
5718: PPUSH
5719: PPUSH
5720: PPUSH
5721: PPUSH
5722: PPUSH
// dist := 99999 ;
5723: LD_ADDR_VAR 0 6
5727: PUSH
5728: LD_INT 99999
5730: ST_TO_ADDR
// for i = 1 to list do
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: DOUBLE
5737: LD_INT 1
5739: DEC
5740: ST_TO_ADDR
5741: LD_VAR 0 3
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5885
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5749: LD_ADDR_VAR 0 7
5753: PUSH
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_VAR 0 2
5763: PPUSH
5764: LD_VAR 0 3
5768: PUSH
5769: LD_VAR 0 5
5773: ARRAY
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_VAR 0 3
5783: PUSH
5784: LD_VAR 0 5
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 298
5798: ST_TO_ADDR
// if d = 0 then
5799: LD_VAR 0 7
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5811
// continue ;
5809: GO 5746
// if d < dist then
5811: LD_VAR 0 7
5815: PUSH
5816: LD_VAR 0 6
5820: LESS
5821: IFFALSE 5883
// begin _x := list [ i ] [ 1 ] ;
5823: LD_ADDR_VAR 0 8
5827: PUSH
5828: LD_VAR 0 3
5832: PUSH
5833: LD_VAR 0 5
5837: ARRAY
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5843: LD_ADDR_VAR 0 9
5847: PUSH
5848: LD_VAR 0 3
5852: PUSH
5853: LD_VAR 0 5
5857: ARRAY
5858: PUSH
5859: LD_INT 2
5861: ARRAY
5862: ST_TO_ADDR
// _i := i ;
5863: LD_ADDR_VAR 0 10
5867: PUSH
5868: LD_VAR 0 5
5872: ST_TO_ADDR
// dist := d ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 7
5882: ST_TO_ADDR
// end ; end ;
5883: GO 5746
5885: POP
5886: POP
// result := [ _x , _y , _i , dist ] ;
5887: LD_ADDR_VAR 0 4
5891: PUSH
5892: LD_VAR 0 8
5896: PUSH
5897: LD_VAR 0 9
5901: PUSH
5902: LD_VAR 0 10
5906: PUSH
5907: LD_VAR 0 6
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: ST_TO_ADDR
// end ;
5918: LD_VAR 0 4
5922: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5923: LD_INT 0
5925: PPUSH
5926: PPUSH
// for i = 1 to 72 do
5927: LD_ADDR_VAR 0 5
5931: PUSH
5932: DOUBLE
5933: LD_INT 1
5935: DEC
5936: ST_TO_ADDR
5937: LD_INT 72
5939: PUSH
5940: FOR_TO
5941: IFFALSE 5995
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5943: LD_VAR 0 5
5947: PPUSH
5948: LD_VAR 0 1
5952: PPUSH
5953: CALL_OW 321
5957: PUSH
5958: LD_INT 1
5960: EQUAL
5961: PUSH
5962: LD_VAR 0 5
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: CALL_OW 482
5976: AND
5977: IFFALSE 5993
// AddComResearch ( lab , i ) ;
5979: LD_VAR 0 2
5983: PPUSH
5984: LD_VAR 0 5
5988: PPUSH
5989: CALL_OW 184
5993: GO 5940
5995: POP
5996: POP
// end ;
5997: LD_VAR 0 4
6001: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6002: LD_INT 0
6004: PPUSH
6005: PPUSH
6006: PPUSH
6007: PPUSH
6008: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6009: LD_ADDR_VAR 0 7
6013: PUSH
6014: LD_VAR 0 2
6018: PPUSH
6019: CALL_OW 313
6023: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6024: LD_ADDR_VAR 0 8
6028: PUSH
6029: LD_VAR 0 3
6033: PPUSH
6034: LD_INT 22
6036: PUSH
6037: LD_VAR 0 1
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 25
6048: PUSH
6049: LD_INT 2
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 24
6058: PUSH
6059: LD_INT 750
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 3
6068: PUSH
6069: LD_INT 54
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PPUSH
6085: CALL_OW 70
6089: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6090: LD_ADDR_VAR 0 5
6094: PUSH
6095: LD_VAR 0 3
6099: PPUSH
6100: LD_INT 22
6102: PUSH
6103: LD_VAR 0 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 21
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: LD_INT 24
6127: PUSH
6128: LD_INT 1000
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: PPUSH
6147: CALL_OW 70
6151: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6152: LD_VAR 0 5
6156: NOT
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_VAR 0 1
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 25
6172: PUSH
6173: LD_INT 2
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 24
6182: PUSH
6183: LD_INT 250
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: NOT
6200: AND
6201: IFFALSE 6205
// exit ;
6203: GO 6301
// if buildingsList and engineerOkInside then
6205: LD_VAR 0 5
6209: PUSH
6210: LD_VAR 0 7
6214: AND
6215: IFFALSE 6241
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6217: LD_VAR 0 7
6221: PPUSH
6222: LD_INT 25
6224: PUSH
6225: LD_INT 2
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 72
6236: PPUSH
6237: CALL_OW 122
// if buildingsList and engineerOkOutside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 8
6250: AND
6251: IFFALSE 6271
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6253: LD_VAR 0 8
6257: PPUSH
6258: LD_VAR 0 5
6262: PUSH
6263: LD_INT 1
6265: ARRAY
6266: PPUSH
6267: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6271: LD_VAR 0 5
6275: PUSH
6276: LD_INT 0
6278: EQUAL
6279: PUSH
6280: LD_VAR 0 8
6284: AND
6285: IFFALSE 6301
// ComEnterUnit ( engineerOkOutside , building ) ;
6287: LD_VAR 0 8
6291: PPUSH
6292: LD_VAR 0 2
6296: PPUSH
6297: CALL_OW 120
// end ;
6301: LD_VAR 0 4
6305: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
6310: PPUSH
6311: PPUSH
6312: PPUSH
6313: PPUSH
6314: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6315: LD_ADDR_VAR 0 6
6319: PUSH
6320: LD_INT 22
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 25
6334: PUSH
6335: LD_INT 4
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 23
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 24
6354: PUSH
6355: LD_INT 251
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PPUSH
6368: CALL_OW 69
6372: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6373: LD_ADDR_VAR 0 7
6377: PUSH
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_INT 22
6385: PUSH
6386: LD_VAR 0 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 23
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 50
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 70
6431: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6432: LD_ADDR_VAR 0 8
6436: PUSH
6437: LD_VAR 0 3
6441: PPUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 1
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 21
6456: PUSH
6457: LD_INT 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 25
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 3
6483: PUSH
6484: LD_INT 24
6486: PUSH
6487: LD_INT 750
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 70
6508: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6509: LD_ADDR_VAR 0 9
6513: PUSH
6514: LD_VAR 0 2
6518: PPUSH
6519: LD_INT 22
6521: PUSH
6522: LD_VAR 0 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 21
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 25
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 3
6560: PUSH
6561: LD_INT 24
6563: PUSH
6564: LD_INT 1000
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PPUSH
6581: CALL_OW 70
6585: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6586: LD_VAR 0 8
6590: NOT
6591: PUSH
6592: LD_VAR 0 9
6596: NOT
6597: AND
6598: PUSH
6599: LD_VAR 0 6
6603: NOT
6604: AND
6605: IFFALSE 6609
// exit ;
6607: GO 6815
// if damageUnits and sciList then
6609: LD_VAR 0 8
6613: PUSH
6614: LD_VAR 0 6
6618: AND
6619: IFFALSE 6635
// ComMoveToArea ( damageUnits , healArea ) ;
6621: LD_VAR 0 8
6625: PPUSH
6626: LD_VAR 0 2
6630: PPUSH
6631: CALL_OW 113
// if unitsToHeal and sciList then
6635: LD_VAR 0 9
6639: PUSH
6640: LD_VAR 0 6
6644: AND
6645: IFFALSE 6656
// ComExitBuilding ( sciList ) ;
6647: LD_VAR 0 6
6651: PPUSH
6652: CALL_OW 122
// if unitsToHeal and sciListOutside then
6656: LD_VAR 0 9
6660: PUSH
6661: LD_VAR 0 7
6665: AND
6666: IFFALSE 6686
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6668: LD_VAR 0 7
6672: PPUSH
6673: LD_VAR 0 9
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: PPUSH
6682: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6686: LD_VAR 0 8
6690: PUSH
6691: LD_INT 0
6693: EQUAL
6694: PUSH
6695: LD_VAR 0 9
6699: PUSH
6700: LD_INT 0
6702: EQUAL
6703: AND
6704: PUSH
6705: LD_VAR 0 7
6709: AND
6710: IFFALSE 6815
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6712: LD_ADDR_VAR 0 10
6716: PUSH
6717: LD_INT 22
6719: PUSH
6720: LD_VAR 0 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 21
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 30
6741: PUSH
6742: LD_INT 8
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL_OW 69
6758: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6759: LD_ADDR_VAR 0 11
6763: PUSH
6764: LD_INT 1
6766: PPUSH
6767: LD_VAR 0 10
6771: PPUSH
6772: CALL_OW 12
6776: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6777: LD_VAR 0 7
6781: PPUSH
6782: LD_INT 3
6784: PUSH
6785: LD_INT 60
6787: PUSH
6788: EMPTY
6789: LIST
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: PPUSH
6800: LD_VAR 0 10
6804: PUSH
6805: LD_VAR 0 11
6809: ARRAY
6810: PPUSH
6811: CALL_OW 120
// end ; end ;
6815: LD_VAR 0 5
6819: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6820: LD_INT 0
6822: PPUSH
6823: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6824: LD_INT 22
6826: PUSH
6827: LD_VAR 0 1
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 21
6838: PUSH
6839: LD_INT 2
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 69
6854: PUSH
6855: LD_VAR 0 3
6859: LESSEQUAL
6860: IFFALSE 6927
// for i = 1 to vehCount do
6862: LD_ADDR_VAR 0 9
6866: PUSH
6867: DOUBLE
6868: LD_INT 1
6870: DEC
6871: ST_TO_ADDR
6872: LD_VAR 0 3
6876: PUSH
6877: FOR_TO
6878: IFFALSE 6925
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 7
6889: PPUSH
6890: LD_VAR 0 5
6894: PPUSH
6895: LD_VAR 0 6
6899: PPUSH
6900: LD_VAR 0 4
6904: PUSH
6905: LD_INT 1
6907: PPUSH
6908: LD_VAR 0 4
6912: PPUSH
6913: CALL_OW 12
6917: ARRAY
6918: PPUSH
6919: CALL_OW 185
6923: GO 6877
6925: POP
6926: POP
// end ;
6927: LD_VAR 0 8
6931: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
6936: PPUSH
6937: PPUSH
6938: PPUSH
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
// for i = 1 to medicCount do
6945: LD_ADDR_VAR 0 11
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_VAR 0 4
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7031
// begin uc_side = side ;
6963: LD_ADDR_OWVAR 20
6967: PUSH
6968: LD_VAR 0 1
6972: ST_TO_ADDR
// uc_nation = nation ;
6973: LD_ADDR_OWVAR 21
6977: PUSH
6978: LD_VAR 0 2
6982: ST_TO_ADDR
// InitHC_All ( ) ;
6983: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
6987: LD_INT 0
6989: PPUSH
6990: LD_INT 4
6992: PPUSH
6993: LD_VAR 0 5
6997: PPUSH
6998: CALL_OW 380
// un = CreateHuman ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: CALL_OW 44
7011: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7012: LD_VAR 0 13
7016: PPUSH
7017: LD_VAR 0 6
7021: PPUSH
7022: LD_INT 0
7024: PPUSH
7025: CALL_OW 49
// end ;
7029: GO 6960
7031: POP
7032: POP
// for i = 1 to soldierCount do
7033: LD_ADDR_VAR 0 11
7037: PUSH
7038: DOUBLE
7039: LD_INT 1
7041: DEC
7042: ST_TO_ADDR
7043: LD_VAR 0 3
7047: PUSH
7048: FOR_TO
7049: IFFALSE 7119
// begin uc_side = side ;
7051: LD_ADDR_OWVAR 20
7055: PUSH
7056: LD_VAR 0 1
7060: ST_TO_ADDR
// uc_nation = nation ;
7061: LD_ADDR_OWVAR 21
7065: PUSH
7066: LD_VAR 0 2
7070: ST_TO_ADDR
// InitHC_All ( ) ;
7071: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7075: LD_INT 0
7077: PPUSH
7078: LD_INT 1
7080: PPUSH
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 380
// un = CreateHuman ;
7090: LD_ADDR_VAR 0 13
7094: PUSH
7095: CALL_OW 44
7099: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7100: LD_VAR 0 13
7104: PPUSH
7105: LD_VAR 0 6
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 49
// end ;
7117: GO 7048
7119: POP
7120: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7121: LD_ADDR_VAR 0 16
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_VAR 0 1
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 2
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 5
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 8
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 25
7173: PUSH
7174: LD_INT 9
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PPUSH
7192: CALL_OW 69
7196: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7197: LD_ADDR_VAR 0 15
7201: PUSH
7202: LD_INT 22
7204: PUSH
7205: LD_VAR 0 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 4
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7233: LD_VAR 0 15
7237: PPUSH
7238: LD_VAR 0 7
7242: PPUSH
7243: CALL_OW 113
// if strategy = 1 then
7247: LD_VAR 0 9
7251: PUSH
7252: LD_INT 1
7254: EQUAL
7255: IFFALSE 7703
// begin for i in soldiersOK_list do
7257: LD_ADDR_VAR 0 11
7261: PUSH
7262: LD_VAR 0 16
7266: PUSH
7267: FOR_IN
7268: IFFALSE 7332
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7270: LD_VAR 0 11
7274: PPUSH
7275: LD_INT 91
7277: PPUSH
7278: LD_INT 63
7280: PPUSH
7281: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7285: LD_VAR 0 11
7289: PPUSH
7290: LD_INT 101
7292: PPUSH
7293: LD_INT 53
7295: PPUSH
7296: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7300: LD_VAR 0 11
7304: PPUSH
7305: LD_INT 75
7307: PPUSH
7308: LD_INT 23
7310: PPUSH
7311: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7315: LD_VAR 0 11
7319: PPUSH
7320: LD_INT 78
7322: PPUSH
7323: LD_INT 8
7325: PPUSH
7326: CALL_OW 174
// end ;
7330: GO 7267
7332: POP
7333: POP
// wait ( 0 0$30 ) ;
7334: LD_INT 1050
7336: PPUSH
7337: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7341: LD_INT 35
7343: PPUSH
7344: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7348: LD_ADDR_VAR 0 14
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_VAR 0 1
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 1
7367: PUSH
7368: LD_INT 3
7370: PUSH
7371: LD_INT 24
7373: PUSH
7374: LD_INT 550
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: LD_INT 250
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 69
7408: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7409: LD_ADDR_VAR 0 16
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 1
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 24
7438: PUSH
7439: LD_INT 1000
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: ST_TO_ADDR
// if medicCount then
7456: LD_VAR 0 4
7460: IFFALSE 7500
// begin if damageUnit_list then
7462: LD_VAR 0 14
7466: IFFALSE 7500
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7468: LD_VAR 0 14
7472: PPUSH
7473: LD_VAR 0 7
7477: PPUSH
7478: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7482: LD_VAR 0 4
7486: PPUSH
7487: LD_VAR 0 14
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7500: LD_ADDR_VAR 0 11
7504: PUSH
7505: LD_VAR 0 16
7509: PUSH
7510: FOR_IN
7511: IFFALSE 7687
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7513: LD_ADDR_VAR 0 19
7517: PUSH
7518: LD_INT 22
7520: PUSH
7521: LD_VAR 0 8
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: PPUSH
7535: LD_VAR 0 11
7539: PPUSH
7540: CALL_OW 74
7544: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7545: LD_ADDR_VAR 0 20
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_VAR 0 8
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 2
7564: PUSH
7565: LD_INT 59
7567: PUSH
7568: EMPTY
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 21
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: PPUSH
7604: CALL_OW 69
7608: PPUSH
7609: LD_VAR 0 11
7613: PPUSH
7614: CALL_OW 74
7618: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7619: LD_VAR 0 11
7623: PPUSH
7624: LD_VAR 0 19
7628: PPUSH
7629: CALL_OW 296
7633: PUSH
7634: LD_INT 8
7636: PLUS
7637: PUSH
7638: LD_VAR 0 11
7642: PPUSH
7643: LD_VAR 0 20
7647: PPUSH
7648: CALL_OW 296
7652: LESS
7653: IFFALSE 7671
// ComAttackUnit ( i , target1 ) else
7655: LD_VAR 0 11
7659: PPUSH
7660: LD_VAR 0 19
7664: PPUSH
7665: CALL_OW 115
7669: GO 7685
// ComAttackUnit ( i , target2 ) ;
7671: LD_VAR 0 11
7675: PPUSH
7676: LD_VAR 0 20
7680: PPUSH
7681: CALL_OW 115
// end ;
7685: GO 7510
7687: POP
7688: POP
// until not soldiersOK_list and not damageUnit_list ;
7689: LD_VAR 0 16
7693: NOT
7694: PUSH
7695: LD_VAR 0 14
7699: NOT
7700: AND
7701: IFFALSE 7341
// end ; if strategy = 2 then
7703: LD_VAR 0 9
7707: PUSH
7708: LD_INT 2
7710: EQUAL
7711: IFFALSE 8129
// begin for i in soldiersOK_list do
7713: LD_ADDR_VAR 0 11
7717: PUSH
7718: LD_VAR 0 16
7722: PUSH
7723: FOR_IN
7724: IFFALSE 7758
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7726: LD_VAR 0 11
7730: PPUSH
7731: LD_INT 91
7733: PPUSH
7734: LD_INT 63
7736: PPUSH
7737: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7741: LD_VAR 0 11
7745: PPUSH
7746: LD_INT 75
7748: PPUSH
7749: LD_INT 33
7751: PPUSH
7752: CALL_OW 174
// end ;
7756: GO 7723
7758: POP
7759: POP
// wait ( 0 0$10 ) ;
7760: LD_INT 350
7762: PPUSH
7763: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7767: LD_INT 105
7769: PPUSH
7770: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7774: LD_ADDR_VAR 0 14
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_VAR 0 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: LD_INT 3
7796: PUSH
7797: LD_INT 24
7799: PUSH
7800: LD_INT 550
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 24
7813: PUSH
7814: LD_INT 250
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7835: LD_ADDR_VAR 0 16
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_VAR 0 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 24
7864: PUSH
7865: LD_INT 1000
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 69
7881: ST_TO_ADDR
// if medicCount then
7882: LD_VAR 0 4
7886: IFFALSE 7926
// begin if damageUnit_list then
7888: LD_VAR 0 14
7892: IFFALSE 7926
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7894: LD_VAR 0 14
7898: PPUSH
7899: LD_VAR 0 7
7903: PPUSH
7904: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7908: LD_VAR 0 4
7912: PPUSH
7913: LD_VAR 0 14
7917: PUSH
7918: LD_INT 1
7920: ARRAY
7921: PPUSH
7922: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7926: LD_ADDR_VAR 0 11
7930: PUSH
7931: LD_VAR 0 16
7935: PUSH
7936: FOR_IN
7937: IFFALSE 8113
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7939: LD_ADDR_VAR 0 19
7943: PUSH
7944: LD_INT 22
7946: PUSH
7947: LD_VAR 0 8
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: PPUSH
7961: LD_VAR 0 11
7965: PPUSH
7966: CALL_OW 74
7970: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7971: LD_ADDR_VAR 0 20
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_VAR 0 8
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: LD_INT 59
7993: PUSH
7994: EMPTY
7995: LIST
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 1
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 21
8009: PUSH
8010: LD_INT 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: PPUSH
8030: CALL_OW 69
8034: PPUSH
8035: LD_VAR 0 11
8039: PPUSH
8040: CALL_OW 74
8044: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8045: LD_VAR 0 11
8049: PPUSH
8050: LD_VAR 0 19
8054: PPUSH
8055: CALL_OW 296
8059: PUSH
8060: LD_INT 8
8062: PLUS
8063: PUSH
8064: LD_VAR 0 11
8068: PPUSH
8069: LD_VAR 0 20
8073: PPUSH
8074: CALL_OW 296
8078: LESS
8079: IFFALSE 8097
// ComAttackUnit ( i , target1 ) else
8081: LD_VAR 0 11
8085: PPUSH
8086: LD_VAR 0 19
8090: PPUSH
8091: CALL_OW 115
8095: GO 8111
// ComAttackUnit ( i , target2 ) ;
8097: LD_VAR 0 11
8101: PPUSH
8102: LD_VAR 0 20
8106: PPUSH
8107: CALL_OW 115
// end ;
8111: GO 7936
8113: POP
8114: POP
// until not soldiersOK_list and not damageUnit_list ;
8115: LD_VAR 0 16
8119: NOT
8120: PUSH
8121: LD_VAR 0 14
8125: NOT
8126: AND
8127: IFFALSE 7767
// end ; if medic_list then
8129: LD_VAR 0 15
8133: IFFALSE 8273
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8135: LD_ADDR_VAR 0 15
8139: PUSH
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: LD_INT 50
8164: PUSH
8165: EMPTY
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8178: LD_INT 35
8180: PPUSH
8181: CALL_OW 67
// for i in medic_list do
8185: LD_ADDR_VAR 0 11
8189: PUSH
8190: LD_VAR 0 15
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8264
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8198: LD_VAR 0 11
8202: PPUSH
8203: CALL_OW 314
8207: NOT
8208: PUSH
8209: LD_VAR 0 11
8213: PPUSH
8214: LD_INT 4
8216: PPUSH
8217: CALL_OW 308
8221: NOT
8222: AND
8223: IFFALSE 8239
// ComMoveToArea ( i , RussianAttack ) else
8225: LD_VAR 0 11
8229: PPUSH
8230: LD_INT 4
8232: PPUSH
8233: CALL_OW 113
8237: GO 8262
// if IsInArea ( i , RussianAttack ) then
8239: LD_VAR 0 11
8243: PPUSH
8244: LD_INT 4
8246: PPUSH
8247: CALL_OW 308
8251: IFFALSE 8262
// RemoveUnit ( i ) ;
8253: LD_VAR 0 11
8257: PPUSH
8258: CALL_OW 64
8262: GO 8195
8264: POP
8265: POP
// until not medic_list ;
8266: LD_VAR 0 15
8270: NOT
8271: IFFALSE 8135
// end ; end ; end_of_file
8273: LD_VAR 0 10
8277: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
// InGameOn ;
8285: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8289: LD_ADDR_VAR 0 3
8293: PUSH
8294: LD_EXP 8
8298: PUSH
8299: LD_EXP 9
8303: PUSH
8304: LD_EXP 10
8308: PUSH
8309: LD_EXP 11
8313: PUSH
8314: LD_EXP 12
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8326: LD_ADDR_VAR 0 4
8330: PUSH
8331: LD_INT 46
8333: PUSH
8334: LD_INT 45
8336: PUSH
8337: LD_INT 44
8339: PUSH
8340: LD_INT 43
8342: PUSH
8343: LD_INT 42
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_INT 14
8360: PUSH
8361: LD_INT 12
8363: PUSH
8364: LD_INT 10
8366: PUSH
8367: LD_INT 8
8369: PUSH
8370: LD_INT 6
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8380: LD_EXP 11
8384: PPUSH
8385: LD_INT 31
8387: PPUSH
8388: LD_INT 59
8390: PPUSH
8391: LD_INT 19
8393: PPUSH
8394: LD_INT 5
8396: PPUSH
8397: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8401: LD_INT 32
8403: PPUSH
8404: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8408: LD_INT 32
8410: PPUSH
8411: LD_INT 51
8413: PPUSH
8414: LD_INT 26
8416: PPUSH
8417: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8421: LD_INT 32
8423: PPUSH
8424: LD_INT 53
8426: PPUSH
8427: LD_INT 23
8429: PPUSH
8430: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8434: LD_INT 32
8436: PPUSH
8437: LD_INT 52
8439: PPUSH
8440: LD_INT 19
8442: PPUSH
8443: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8447: LD_INT 35
8449: PPUSH
8450: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8454: LD_INT 32
8456: PPUSH
8457: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 250
8468: PUSH
8469: LD_INT 52
8471: EQUAL
8472: PUSH
8473: LD_INT 32
8475: PPUSH
8476: CALL_OW 251
8480: PUSH
8481: LD_INT 19
8483: EQUAL
8484: AND
8485: IFFALSE 8447
// ComExitVehicle ( JMM ) ;
8487: LD_EXP 1
8491: PPUSH
8492: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8496: LD_EXP 7
8500: PPUSH
8501: LD_EXP 1
8505: PPUSH
8506: CALL_OW 119
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8517: LD_EXP 1
8521: PPUSH
8522: LD_INT 46
8524: PPUSH
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8532: LD_EXP 1
8536: PPUSH
8537: LD_EXP 7
8541: PPUSH
8542: CALL_OW 179
// wait ( 0 0$4 ) ;
8546: LD_INT 140
8548: PPUSH
8549: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8553: LD_EXP 1
8557: PPUSH
8558: LD_STRING D1-JMM-1
8560: PPUSH
8561: CALL_OW 88
// if not dialogue_skipped then
8565: LD_OWVAR 59
8569: NOT
8570: IFFALSE 9227
// begin for i := 1 to gammaSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: DOUBLE
8578: LD_INT 1
8580: DEC
8581: ST_TO_ADDR
8582: LD_VAR 0 3
8586: PUSH
8587: FOR_TO
8588: IFFALSE 8649
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8590: LD_VAR 0 3
8594: PUSH
8595: LD_VAR 0 2
8599: ARRAY
8600: PPUSH
8601: LD_VAR 0 4
8605: PUSH
8606: LD_VAR 0 2
8610: ARRAY
8611: PPUSH
8612: LD_VAR 0 5
8616: PUSH
8617: LD_VAR 0 2
8621: ARRAY
8622: PPUSH
8623: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8627: LD_VAR 0 3
8631: PUSH
8632: LD_VAR 0 2
8636: ARRAY
8637: PPUSH
8638: LD_EXP 1
8642: PPUSH
8643: CALL_OW 179
// end ;
8647: GO 8587
8649: POP
8650: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8651: LD_EXP 4
8655: PPUSH
8656: LD_INT 41
8658: PPUSH
8659: LD_INT 4
8661: PPUSH
8662: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8666: LD_EXP 4
8670: PPUSH
8671: LD_EXP 1
8675: PPUSH
8676: CALL_OW 179
// if Lisa = false and Bobby then
8680: LD_EXP 4
8684: PUSH
8685: LD_INT 0
8687: EQUAL
8688: PUSH
8689: LD_EXP 2
8693: AND
8694: IFFALSE 8725
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8696: LD_EXP 2
8700: PPUSH
8701: LD_INT 41
8703: PPUSH
8704: LD_INT 4
8706: PPUSH
8707: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8711: LD_EXP 2
8715: PPUSH
8716: LD_EXP 1
8720: PPUSH
8721: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8725: LD_EXP 4
8729: PUSH
8730: LD_INT 0
8732: EQUAL
8733: PUSH
8734: LD_EXP 2
8738: PUSH
8739: LD_INT 0
8741: EQUAL
8742: AND
8743: PUSH
8744: LD_EXP 3
8748: AND
8749: IFFALSE 8780
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8751: LD_EXP 3
8755: PPUSH
8756: LD_INT 41
8758: PPUSH
8759: LD_INT 4
8761: PPUSH
8762: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8766: LD_EXP 3
8770: PPUSH
8771: LD_EXP 1
8775: PPUSH
8776: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8780: LD_EXP 4
8784: PUSH
8785: LD_INT 0
8787: EQUAL
8788: PUSH
8789: LD_EXP 2
8793: PUSH
8794: LD_INT 0
8796: EQUAL
8797: AND
8798: PUSH
8799: LD_EXP 3
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: AND
8808: IFFALSE 8839
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8810: LD_EXP 6
8814: PPUSH
8815: LD_INT 41
8817: PPUSH
8818: LD_INT 4
8820: PPUSH
8821: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8825: LD_EXP 6
8829: PPUSH
8830: LD_EXP 1
8834: PPUSH
8835: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8839: LD_EXP 7
8843: PPUSH
8844: LD_STRING D1-Brown-1
8846: PPUSH
8847: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8851: LD_EXP 1
8855: PPUSH
8856: LD_STRING D1-JMM-2
8858: PPUSH
8859: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8863: LD_EXP 7
8867: PPUSH
8868: LD_STRING D1-Brown-2
8870: PPUSH
8871: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8875: LD_EXP 1
8879: PPUSH
8880: LD_EXP 9
8884: PPUSH
8885: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8889: LD_EXP 9
8893: PPUSH
8894: LD_STRING D1-FSol1-2
8896: PPUSH
8897: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8901: LD_EXP 1
8905: PPUSH
8906: LD_EXP 8
8910: PPUSH
8911: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8915: LD_EXP 8
8919: PPUSH
8920: LD_STRING D1-Sol2-2
8922: PPUSH
8923: CALL_OW 88
// if Lisa then
8927: LD_EXP 4
8931: IFFALSE 8971
// begin ComTurnUnit ( JMM , Lisa ) ;
8933: LD_EXP 1
8937: PPUSH
8938: LD_EXP 4
8942: PPUSH
8943: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8947: LD_EXP 4
8951: PPUSH
8952: LD_STRING D1-Lisa-2
8954: PPUSH
8955: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8959: LD_EXP 1
8963: PPUSH
8964: LD_STRING D1-JMM-3
8966: PPUSH
8967: CALL_OW 88
// end ; if Bobby then
8971: LD_EXP 2
8975: IFFALSE 9015
// begin ComTurnUnit ( JMM , Bobby ) ;
8977: LD_EXP 1
8981: PPUSH
8982: LD_EXP 2
8986: PPUSH
8987: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
8991: LD_EXP 2
8995: PPUSH
8996: LD_STRING D1-Bobby-2
8998: PPUSH
8999: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9003: LD_EXP 1
9007: PPUSH
9008: LD_STRING D1-JMM-3
9010: PPUSH
9011: CALL_OW 88
// end ; if Cyrus then
9015: LD_EXP 3
9019: IFFALSE 9059
// begin ComTurnUnit ( JMM , Cyrus ) ;
9021: LD_EXP 1
9025: PPUSH
9026: LD_EXP 3
9030: PPUSH
9031: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9035: LD_EXP 3
9039: PPUSH
9040: LD_STRING D1-Cyrus-2
9042: PPUSH
9043: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9047: LD_EXP 1
9051: PPUSH
9052: LD_STRING D1-JMM-3
9054: PPUSH
9055: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_EXP 7
9068: PPUSH
9069: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9073: LD_EXP 1
9077: PPUSH
9078: LD_STRING D1-JMM-3a
9080: PPUSH
9081: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9085: LD_EXP 7
9089: PPUSH
9090: LD_INT 38
9092: PPUSH
9093: LD_INT 5
9095: PPUSH
9096: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9100: LD_EXP 7
9104: PPUSH
9105: LD_EXP 1
9109: PPUSH
9110: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9114: LD_EXP 1
9118: PPUSH
9119: LD_INT 40
9121: PPUSH
9122: LD_INT 7
9124: PPUSH
9125: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9129: LD_EXP 1
9133: PPUSH
9134: LD_EXP 7
9138: PPUSH
9139: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9143: LD_EXP 7
9147: PPUSH
9148: LD_STRING D1-Brown-3
9150: PPUSH
9151: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9155: LD_EXP 14
9159: PPUSH
9160: LD_STRING D1-Har-3
9162: PPUSH
9163: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D1-JMM-4
9174: PPUSH
9175: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D1-Har-4
9186: PPUSH
9187: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9191: LD_EXP 1
9195: PPUSH
9196: LD_STRING D1-JMM-5
9198: PPUSH
9199: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9203: LD_EXP 14
9207: PPUSH
9208: LD_STRING D1-Har-5
9210: PPUSH
9211: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9215: LD_EXP 1
9219: PPUSH
9220: LD_STRING D1-JMM-6
9222: PPUSH
9223: CALL_OW 88
// end ; InGameOff ;
9227: CALL_OW 9
// PrepareRussianConvoy ;
9231: CALL 3376 0 0
// ChangeMissionObjectives ( M1 ) ;
9235: LD_STRING M1
9237: PPUSH
9238: CALL_OW 337
// SaveForQuickRestart ;
9242: CALL_OW 22
// timerStatus = 1 ;
9246: LD_ADDR_EXP 29
9250: PUSH
9251: LD_INT 1
9253: ST_TO_ADDR
// startTimer = 1 ;
9254: LD_ADDR_EXP 30
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// bonusAvalaible = 1 ;
9262: LD_ADDR_EXP 44
9266: PUSH
9267: LD_INT 1
9269: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9270: LD_INT 105
9272: PPUSH
9273: CALL_OW 67
// DialogueOn ;
9277: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9281: LD_EXP 12
9285: PPUSH
9286: LD_STRING D9-Mech1-1
9288: PPUSH
9289: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9293: LD_EXP 1
9297: PPUSH
9298: LD_STRING D9-JMM-1
9300: PPUSH
9301: CALL_OW 88
// DialogueOff ;
9305: CALL_OW 7
// end ;
9309: LD_VAR 0 1
9313: RET
// export function JMMTraitor ; begin
9314: LD_INT 0
9316: PPUSH
// wait ( 0 0$2 ) ;
9317: LD_INT 70
9319: PPUSH
9320: CALL_OW 67
// DialogueOn ;
9324: CALL_OW 6
// InGameOn ;
9328: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
9332: LD_EXP 14
9336: PPUSH
9337: LD_STRING D8-Har-1b
9339: PPUSH
9340: CALL_OW 94
// YouLost ( LostCommand ) ;
9344: LD_STRING LostCommand
9346: PPUSH
9347: CALL_OW 104
// InGameOff ;
9351: CALL_OW 9
// DialogueOff ;
9355: CALL_OW 7
// end ;
9359: LD_VAR 0 1
9363: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9364: LD_INT 47
9366: PPUSH
9367: LD_INT 1
9369: PPUSH
9370: CALL_OW 321
9374: PUSH
9375: LD_INT 2
9377: EQUAL
9378: PUSH
9379: LD_EXP 31
9383: NOT
9384: AND
9385: PUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 1
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 57
9418: PUSH
9419: EMPTY
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 69
9432: AND
9433: IFFALSE 9667
9435: GO 9437
9437: DISABLE
// begin factoryDialog := true ;
9438: LD_ADDR_EXP 31
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// if IsOk ( Campell ) then
9446: LD_EXP 12
9450: PPUSH
9451: CALL_OW 302
9455: IFFALSE 9471
// Say ( Campell , D10-Mech1-1 ) else
9457: LD_EXP 12
9461: PPUSH
9462: LD_STRING D10-Mech1-1
9464: PPUSH
9465: CALL_OW 88
9469: GO 9667
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9471: LD_INT 22
9473: PUSH
9474: LD_INT 1
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 25
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 26
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: PUSH
9522: LD_EXP 1
9526: PUSH
9527: EMPTY
9528: LIST
9529: DIFF
9530: IFFALSE 9604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9532: LD_INT 22
9534: PUSH
9535: LD_INT 1
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 25
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 26
9564: PUSH
9565: LD_INT 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PPUSH
9578: CALL_OW 69
9582: PUSH
9583: LD_EXP 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: DIFF
9591: PPUSH
9592: LD_STRING D10-Mech1-1
9594: PPUSH
9595: LD_STRING D10-Mech1-1
9597: PPUSH
9598: CALL 4570 0 3
9602: GO 9667
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9604: LD_INT 22
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 26
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: CALL_OW 69
9647: PUSH
9648: LD_EXP 1
9652: PUSH
9653: EMPTY
9654: LIST
9655: DIFF
9656: PPUSH
9657: LD_STRING D10-Mech1-1
9659: PPUSH
9660: LD_STRING D10-Mech1-1
9662: PPUSH
9663: CALL 4570 0 3
// end ; end ;
9667: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9668: LD_INT 22
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 32
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_EXP 32
9701: PUSH
9702: LD_INT 0
9704: EQUAL
9705: AND
9706: IFFALSE 9942
9708: GO 9710
9710: DISABLE
// begin if IsOk ( Claptopn ) then
9711: LD_EXP 11
9715: PPUSH
9716: CALL_OW 302
9720: IFFALSE 9736
// Say ( Claptopn , D9b-Eng1-1 ) else
9722: LD_EXP 11
9726: PPUSH
9727: LD_STRING D9b-Eng1-1
9729: PPUSH
9730: CALL_OW 88
9734: GO 9928
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9736: LD_INT 22
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 21
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 25
9758: PUSH
9759: LD_INT 3
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PPUSH
9782: CALL_OW 69
9786: PUSH
9787: LD_EXP 1
9791: PUSH
9792: EMPTY
9793: LIST
9794: DIFF
9795: IFFALSE 9869
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9797: LD_INT 22
9799: PUSH
9800: LD_INT 1
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 21
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 26
9829: PUSH
9830: LD_INT 1
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: PUSH
9848: LD_EXP 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: DIFF
9856: PPUSH
9857: LD_STRING D9b-Eng1-1
9859: PPUSH
9860: LD_STRING D9b-Eng1-11
9862: PPUSH
9863: CALL 4570 0 3
9867: GO 9928
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9869: LD_INT 22
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 26
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 69
9908: PUSH
9909: LD_EXP 1
9913: PUSH
9914: EMPTY
9915: LIST
9916: DIFF
9917: PPUSH
9918: LD_STRING D9b-Eng1-1
9920: PPUSH
9921: LD_STRING D9b-Eng1-1
9923: PPUSH
9924: CALL 4570 0 3
// end ; if energyVDialog = 0 then
9928: LD_EXP 33
9932: PUSH
9933: LD_INT 0
9935: EQUAL
9936: IFFALSE 9942
// EnergyDialog ;
9938: CALL 4975 0 0
// end ;
9942: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9943: LD_EXP 34
9947: PUSH
9948: LD_INT 1
9950: EQUAL
9951: PUSH
9952: LD_EXP 35
9956: PUSH
9957: LD_INT 1
9959: EQUAL
9960: AND
9961: IFFALSE 9973
9963: GO 9965
9965: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9966: LD_STRING M1a
9968: PPUSH
9969: CALL_OW 337
9973: END
// every 3 3$0 do
9974: GO 9976
9976: DISABLE
// PrepareFirstAttack ;
9977: CALL 4188 0 0
9981: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9982: LD_INT 22
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 24
10007: PUSH
10008: LD_INT 250
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: PUSH
10029: LD_INT 0
10031: GREATER
10032: PUSH
10033: LD_EXP 23
10037: PUSH
10038: LD_INT 1
10040: EQUAL
10041: AND
10042: IFFALSE 10343
10044: GO 10046
10046: DISABLE
10047: LD_INT 0
10049: PPUSH
// begin firstRussianAttack = 2 ;
10050: LD_ADDR_EXP 23
10054: PUSH
10055: LD_INT 2
10057: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10058: LD_INT 22
10060: PUSH
10061: LD_INT 5
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PPUSH
10082: CALL_OW 69
10086: PPUSH
10087: LD_INT 125
10089: PPUSH
10090: LD_INT 98
10092: PPUSH
10093: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10097: LD_INT 22
10099: PUSH
10100: LD_INT 1
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: LD_EXP 7
10135: PUSH
10136: LD_EXP 4
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: DIFF
10146: PPUSH
10147: LD_STRING DAtt1-Sol1-1
10149: PPUSH
10150: LD_STRING DAtt1-FSol1-1
10152: PPUSH
10153: CALL 4570 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10157: LD_EXP 1
10161: PPUSH
10162: LD_STRING DAtt1-JMM-1
10164: PPUSH
10165: CALL_OW 88
// if Lisa then
10169: LD_EXP 4
10173: IFFALSE 10189
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10175: LD_EXP 4
10179: PPUSH
10180: LD_STRING DAtt1a-Lisa-1
10182: PPUSH
10183: CALL_OW 88
10187: GO 10260
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10189: LD_INT 22
10191: PUSH
10192: LD_INT 1
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 26
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: PUSH
10229: LD_EXP 1
10233: PUSH
10234: LD_EXP 7
10238: PUSH
10239: LD_EXP 4
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: DIFF
10249: PPUSH
10250: LD_STRING DAtt1a-Sol1-1
10252: PPUSH
10253: LD_STRING DAtt1-FSol1-1
10255: PPUSH
10256: CALL 4570 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10260: LD_EXP 1
10264: PPUSH
10265: LD_STRING DAtt1a-JMM-1
10267: PPUSH
10268: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10272: LD_INT 22
10274: PUSH
10275: LD_INT 1
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 21
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 26
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: PUSH
10312: LD_EXP 1
10316: PUSH
10317: LD_EXP 7
10321: PUSH
10322: LD_EXP 4
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: DIFF
10332: PPUSH
10333: LD_STRING DAtt1b-Sol1-1
10335: PPUSH
10336: LD_STRING DAtt1a-Sol1-1
10338: PPUSH
10339: CALL 4570 0 3
// end ;
10343: PPOPN 1
10345: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10346: LD_EXP 23
10350: PUSH
10351: LD_INT 2
10353: EQUAL
10354: PUSH
10355: LD_INT 5
10357: PPUSH
10358: LD_INT 22
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 70
10386: AND
10387: IFFALSE 10445
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10395: LD_ADDR_VAR 0 1
10399: PUSH
10400: LD_INT 22
10402: PUSH
10403: LD_INT 5
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PPUSH
10424: CALL_OW 69
10428: PUSH
10429: FOR_IN
10430: IFFALSE 10443
// RemoveUnit ( i ) ;
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 64
10441: GO 10429
10443: POP
10444: POP
// end ;
10445: PPOPN 1
10447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10448: LD_INT 22
10450: PUSH
10451: LD_INT 5
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: PPUSH
10461: CALL_OW 69
10465: PUSH
10466: LD_INT 0
10468: EQUAL
10469: PUSH
10470: LD_EXP 23
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: IFFALSE 10492
10481: GO 10483
10483: DISABLE
// firstRussianAttack = 3 ;
10484: LD_ADDR_EXP 23
10488: PUSH
10489: LD_INT 3
10491: ST_TO_ADDR
10492: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10493: LD_EXP 28
10497: PUSH
10498: LD_INT 0
10500: EQUAL
10501: IFFALSE 10582
10503: GO 10505
10505: DISABLE
// begin timerStatus = 4 ;
10506: LD_ADDR_EXP 29
10510: PUSH
10511: LD_INT 4
10513: ST_TO_ADDR
// DialogueOn ;
10514: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10518: LD_EXP 13
10522: PPUSH
10523: LD_STRING D2-Don-1
10525: PPUSH
10526: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10530: LD_EXP 1
10534: PPUSH
10535: LD_STRING D2-JMM-1
10537: PPUSH
10538: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10542: LD_EXP 13
10546: PPUSH
10547: LD_STRING D2-Don-2
10549: PPUSH
10550: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10554: LD_EXP 1
10558: PPUSH
10559: LD_STRING D2-JMM-2
10561: PPUSH
10562: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10566: LD_EXP 13
10570: PPUSH
10571: LD_STRING D2-Don-3
10573: PPUSH
10574: CALL_OW 94
// DialogueOff ;
10578: CALL_OW 7
// end ;
10582: END
// every 12 12$0 do var tmp ;
10583: GO 10585
10585: DISABLE
10586: LD_INT 0
10588: PPUSH
// begin PrepareDonaldsonArmy ;
10589: CALL 1159 0 0
// CenterNowOnUnits ( Donaldson ) ;
10593: LD_EXP 13
10597: PPUSH
10598: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10602: LD_INT 22
10604: PUSH
10605: LD_INT 6
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 69
10616: NOT
10617: IFFALSE 10633
// begin wait ( 3 ) ;
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10626: LD_STRING ACH_BASE
10628: PPUSH
10629: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10633: LD_ADDR_VAR 0 1
10637: PUSH
10638: LD_INT 22
10640: PUSH
10641: LD_INT 4
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 21
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 26
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: PUSH
10678: LD_EXP 5
10682: PUSH
10683: EMPTY
10684: LIST
10685: DIFF
10686: ST_TO_ADDR
// DialogueOn ;
10687: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 1
10700: PUSH
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_STRING D3-Sol1-1
10708: PPUSH
10709: LD_STRING D3-Sol1-1
10711: PPUSH
10712: CALL 4570 0 3
10716: DIFF
10717: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10718: LD_VAR 0 1
10722: PPUSH
10723: LD_STRING D3-Sol2-1
10725: PPUSH
10726: LD_STRING D3-Sol2-1
10728: PPUSH
10729: CALL 4570 0 3
// if Frank then
10733: LD_EXP 5
10737: IFFALSE 10751
// Say ( Frank , D3-Frank-1 ) ;
10739: LD_EXP 5
10743: PPUSH
10744: LD_STRING D3-Frank-1
10746: PPUSH
10747: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10751: LD_EXP 13
10755: PPUSH
10756: LD_STRING D3-Don-1
10758: PPUSH
10759: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10763: LD_EXP 13
10767: PPUSH
10768: LD_STRING D3-Don-1a
10770: PPUSH
10771: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D3-JMM-1
10782: PPUSH
10783: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10787: LD_EXP 13
10791: PPUSH
10792: LD_STRING D3-Don-2
10794: PPUSH
10795: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10799: LD_INT 22
10801: PUSH
10802: LD_INT 6
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 21
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 69
10827: IFFALSE 10965
// begin Say ( JMM , D3-JMM-2 ) ;
10829: LD_EXP 1
10833: PPUSH
10834: LD_STRING D3-JMM-2
10836: PPUSH
10837: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10841: LD_EXP 13
10845: PPUSH
10846: LD_STRING D3-Don-3
10848: PPUSH
10849: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10853: LD_EXP 1
10857: PPUSH
10858: LD_STRING D3-JMM-3
10860: PPUSH
10861: CALL_OW 88
// if IsOK ( Frank ) then
10865: LD_EXP 5
10869: PPUSH
10870: CALL_OW 302
10874: IFFALSE 10888
// Say ( Frank , D3-Frank-3 ) ;
10876: LD_EXP 5
10880: PPUSH
10881: LD_STRING D3-Frank-3
10883: PPUSH
10884: CALL_OW 88
// DialogueOff ;
10888: CALL_OW 7
// if IsOk ( Frank ) then
10892: LD_EXP 5
10896: PPUSH
10897: CALL_OW 302
10901: IFFALSE 10963
// begin SetSide ( Frank , 0 ) ;
10903: LD_EXP 5
10907: PPUSH
10908: LD_INT 0
10910: PPUSH
10911: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10915: LD_EXP 5
10919: PPUSH
10920: LD_INT 12
10922: PPUSH
10923: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10927: LD_EXP 5
10931: PPUSH
10932: LD_STRING 04t_Frank
10934: PPUSH
10935: CALL_OW 38
// wait ( 0 0$3 ) ;
10939: LD_INT 105
10941: PPUSH
10942: CALL_OW 67
// frankScoutBase = 1 ;
10946: LD_ADDR_EXP 25
10950: PUSH
10951: LD_INT 1
10953: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10954: LD_EXP 5
10958: PPUSH
10959: CALL_OW 64
// end ; end else
10963: GO 11052
// begin Say ( JMM , D3-JMM-4 ) ;
10965: LD_EXP 1
10969: PPUSH
10970: LD_STRING D3-JMM-4
10972: PPUSH
10973: CALL_OW 88
// DialogueOff ;
10977: CALL_OW 7
// if IsOk ( Frank ) then
10981: LD_EXP 5
10985: PPUSH
10986: CALL_OW 302
10990: IFFALSE 11052
// begin SetSide ( Frank , 0 ) ;
10992: LD_EXP 5
10996: PPUSH
10997: LD_INT 0
10999: PPUSH
11000: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11004: LD_EXP 5
11008: PPUSH
11009: LD_INT 12
11011: PPUSH
11012: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11016: LD_EXP 5
11020: PPUSH
11021: LD_STRING 04t_Frank
11023: PPUSH
11024: CALL_OW 38
// wait ( 0 0$3 ) ;
11028: LD_INT 105
11030: PPUSH
11031: CALL_OW 67
// frankScoutBase = 1 ;
11035: LD_ADDR_EXP 25
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11043: LD_EXP 5
11047: PPUSH
11048: CALL_OW 64
// end ; end ; end ;
11052: PPOPN 1
11054: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11055: LD_EXP 13
11059: PPUSH
11060: CALL_OW 255
11064: PUSH
11065: LD_INT 4
11067: EQUAL
11068: PUSH
11069: LD_EXP 13
11073: PPUSH
11074: CALL_OW 302
11078: AND
11079: IFFALSE 11319
11081: GO 11083
11083: DISABLE
11084: LD_INT 0
11086: PPUSH
11087: PPUSH
// begin wait ( 5 5$00 ) ;
11088: LD_INT 10500
11090: PPUSH
11091: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11095: LD_EXP 13
11099: PPUSH
11100: CALL_OW 255
11104: PUSH
11105: LD_INT 1
11107: EQUAL
11108: PUSH
11109: LD_EXP 13
11113: PPUSH
11114: CALL_OW 301
11118: OR
11119: IFFALSE 11123
// exit ;
11121: GO 11319
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11123: LD_EXP 13
11127: PPUSH
11128: LD_STRING D3b-Don-1
11130: PPUSH
11131: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11135: LD_ADDR_EXP 41
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11163: LD_INT 35
11165: PPUSH
11166: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11170: LD_VAR 0 2
11174: NOT
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 6
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 101
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: OR
11205: IFFALSE 11163
// if not tmp then
11207: LD_VAR 0 2
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 11319
// for i in tmp do
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: LD_VAR 0 2
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// ComAgressiveMove ( i , 52 , 64 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 52
11236: PPUSH
11237: LD_INT 64
11239: PPUSH
11240: CALL_OW 114
11244: GO 11226
11246: POP
11247: POP
// wait ( 0 0$10 ) ;
11248: LD_INT 350
11250: PPUSH
11251: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11255: LD_ADDR_VAR 0 1
11259: PUSH
11260: LD_INT 22
11262: PUSH
11263: LD_INT 4
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PUSH
11275: LD_EXP 5
11279: DIFF
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11298
// SetSide ( i , 1 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 235
11296: GO 11281
11298: POP
11299: POP
// if IsLive ( Donaldson ) then
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 300
11309: IFFALSE 11319
// saveDonaldson := 1 ;
11311: LD_ADDR_EXP 24
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// end ;
11319: PPOPN 2
11321: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11322: LD_EXP 13
11326: PPUSH
11327: CALL_OW 302
11331: PUSH
11332: LD_EXP 24
11336: NOT
11337: AND
11338: PUSH
11339: LD_EXP 41
11343: NOT
11344: AND
11345: PUSH
11346: LD_INT 26
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: PUSH
11364: LD_EXP 13
11368: PPUSH
11369: LD_EXP 1
11373: PPUSH
11374: CALL_OW 296
11378: PUSH
11379: LD_INT 6
11381: LESS
11382: OR
11383: AND
11384: IFFALSE 11439
11386: GO 11388
11388: DISABLE
11389: LD_INT 0
11391: PPUSH
// begin saveDonaldson := 1 ;
11392: LD_ADDR_EXP 24
11396: PUSH
11397: LD_INT 1
11399: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11400: LD_ADDR_VAR 0 1
11404: PUSH
11405: LD_INT 22
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: FOR_IN
11421: IFFALSE 11437
// SetSide ( i , 1 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 235
11435: GO 11420
11437: POP
11438: POP
// end ;
11439: PPOPN 1
11441: END
// every 0 0$1 trigger frankScoutBase do
11442: LD_EXP 25
11446: IFFALSE 11811
11448: GO 11450
11450: DISABLE
// begin wait ( 2 2$30 ) ;
11451: LD_INT 5250
11453: PPUSH
11454: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11458: LD_INT 35
11460: PPUSH
11461: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11465: LD_INT 81
11467: PUSH
11468: LD_INT 4
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 92
11477: PUSH
11478: LD_INT 84
11480: PUSH
11481: LD_INT 28
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PPUSH
11497: CALL_OW 69
11501: NOT
11502: IFFALSE 11458
// uc_side = 4 ;
11504: LD_ADDR_OWVAR 20
11508: PUSH
11509: LD_INT 4
11511: ST_TO_ADDR
// uc_nation = 1 ;
11512: LD_ADDR_OWVAR 21
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11520: LD_ADDR_EXP 5
11524: PUSH
11525: LD_STRING 04t_Frank
11527: PPUSH
11528: CALL_OW 34
11532: ST_TO_ADDR
// if not Frank then
11533: LD_EXP 5
11537: NOT
11538: IFFALSE 11542
// exit ;
11540: GO 11811
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11542: LD_EXP 5
11546: PPUSH
11547: LD_INT 13
11549: PPUSH
11550: LD_INT 0
11552: PPUSH
11553: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11557: LD_INT 35
11559: PPUSH
11560: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11564: LD_EXP 1
11568: PPUSH
11569: CALL_OW 310
11573: NOT
11574: PUSH
11575: LD_EXP 1
11579: PPUSH
11580: LD_INT 4
11582: PPUSH
11583: CALL_OW 296
11587: PUSH
11588: LD_INT 20
11590: LESS
11591: AND
11592: IFFALSE 11625
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11594: LD_EXP 5
11598: PPUSH
11599: LD_EXP 1
11603: PPUSH
11604: CALL_OW 250
11608: PPUSH
11609: LD_EXP 1
11613: PPUSH
11614: CALL_OW 251
11618: PPUSH
11619: CALL_OW 111
11623: GO 11640
// ComMoveXY ( Frank , 51 , 15 ) ;
11625: LD_EXP 5
11629: PPUSH
11630: LD_INT 51
11632: PPUSH
11633: LD_INT 15
11635: PPUSH
11636: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11640: LD_EXP 5
11644: PPUSH
11645: LD_EXP 1
11649: PPUSH
11650: CALL_OW 296
11654: PUSH
11655: LD_INT 10
11657: LESS
11658: IFFALSE 11557
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11660: LD_EXP 1
11664: PUSH
11665: LD_EXP 5
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 87
// DialogueOn ;
11678: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11682: LD_EXP 5
11686: PPUSH
11687: LD_STRING D3a-Frank-1
11689: PPUSH
11690: CALL_OW 88
// if Lisa then
11694: LD_EXP 4
11698: IFFALSE 11748
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11700: LD_EXP 4
11704: PPUSH
11705: LD_STRING D3a-Lisa-1
11707: PPUSH
11708: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11712: LD_EXP 5
11716: PPUSH
11717: LD_STRING D3a-Frank-2
11719: PPUSH
11720: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11724: LD_EXP 4
11728: PPUSH
11729: LD_STRING D3a-Lisa-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11736: LD_EXP 5
11740: PPUSH
11741: LD_STRING D3a-Frank-3
11743: PPUSH
11744: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11748: LD_EXP 1
11752: PPUSH
11753: LD_STRING D3a-JMM-3
11755: PPUSH
11756: CALL_OW 88
// DialogueOff ;
11760: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11764: LD_EXP 5
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 235
// InGameOn ;
11776: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11780: LD_INT 1
11782: PPUSH
11783: LD_INT 7
11785: PPUSH
11786: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11790: LD_INT 93
11792: PPUSH
11793: LD_INT 91
11795: PPUSH
11796: CALL_OW 84
// wait ( 0 0$5 ) ;
11800: LD_INT 175
11802: PPUSH
11803: CALL_OW 67
// InGameOff ;
11807: CALL_OW 9
// end ;
11811: END
// every 12 12$0 trigger Difficulty > 1 do
11812: LD_OWVAR 67
11816: PUSH
11817: LD_INT 1
11819: GREATER
11820: IFFALSE 11844
11822: GO 11824
11824: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11825: LD_INT 24
11827: PPUSH
11828: LD_INT 24
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: LD_INT 53
11839: PPUSH
11840: CALL_OW 185
11844: END
// every 18 18$0 do
11845: GO 11847
11847: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11848: LD_EXP 14
11852: PPUSH
11853: LD_STRING D4-Har-1
11855: PPUSH
11856: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11860: LD_EXP 1
11864: PPUSH
11865: LD_STRING D4-JMM-1
11867: PPUSH
11868: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11872: LD_EXP 14
11876: PPUSH
11877: LD_STRING D4-Har-2
11879: PPUSH
11880: CALL_OW 94
// case Query ( Q1 ) of 1 :
11884: LD_STRING Q1
11886: PPUSH
11887: CALL_OW 97
11891: PUSH
11892: LD_INT 1
11894: DOUBLE
11895: EQUAL
11896: IFTRUE 11900
11898: GO 11959
11900: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11901: LD_EXP 1
11905: PPUSH
11906: LD_STRING D5-JMM-1
11908: PPUSH
11909: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11913: LD_EXP 14
11917: PPUSH
11918: LD_STRING D5-Har-1
11920: PPUSH
11921: CALL_OW 94
// timeToSupport = 10 10$0 ;
11925: LD_ADDR_EXP 28
11929: PUSH
11930: LD_INT 21000
11932: ST_TO_ADDR
// timerStatus = 2 ;
11933: LD_ADDR_EXP 29
11937: PUSH
11938: LD_INT 2
11940: ST_TO_ADDR
// startTimer = 1 ;
11941: LD_ADDR_EXP 30
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// harrAnswer = 1 ;
11949: LD_ADDR_EXP 26
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// end ; 2 :
11957: GO 12094
11959: LD_INT 2
11961: DOUBLE
11962: EQUAL
11963: IFTRUE 11967
11965: GO 12026
11967: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11968: LD_EXP 1
11972: PPUSH
11973: LD_STRING D5-JMM-2
11975: PPUSH
11976: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11980: LD_EXP 14
11984: PPUSH
11985: LD_STRING D5-Har-2
11987: PPUSH
11988: CALL_OW 94
// timeToSupport = 5 5$0 ;
11992: LD_ADDR_EXP 28
11996: PUSH
11997: LD_INT 10500
11999: ST_TO_ADDR
// timerStatus = 2 ;
12000: LD_ADDR_EXP 29
12004: PUSH
12005: LD_INT 2
12007: ST_TO_ADDR
// startTimer = 1 ;
12008: LD_ADDR_EXP 30
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// harrAnswer = 2 ;
12016: LD_ADDR_EXP 26
12020: PUSH
12021: LD_INT 2
12023: ST_TO_ADDR
// end ; 3 :
12024: GO 12094
12026: LD_INT 3
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12093
12034: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12035: LD_EXP 1
12039: PPUSH
12040: LD_STRING D5-JMM-3
12042: PPUSH
12043: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12047: LD_EXP 14
12051: PPUSH
12052: LD_STRING D5-Har-3
12054: PPUSH
12055: CALL_OW 94
// timeToSupport = 5 5$0 ;
12059: LD_ADDR_EXP 28
12063: PUSH
12064: LD_INT 10500
12066: ST_TO_ADDR
// timerStatus = 2 ;
12067: LD_ADDR_EXP 29
12071: PUSH
12072: LD_INT 2
12074: ST_TO_ADDR
// startTimer = 1 ;
12075: LD_ADDR_EXP 30
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// harrAnswer = 3 ;
12083: LD_ADDR_EXP 26
12087: PUSH
12088: LD_INT 3
12090: ST_TO_ADDR
// end ; end ;
12091: GO 12094
12093: POP
// end ;
12094: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12095: LD_EXP 29
12099: PUSH
12100: LD_INT 2
12102: EQUAL
12103: PUSH
12104: LD_EXP 28
12108: PUSH
12109: LD_INT 0
12111: EQUAL
12112: AND
12113: IFFALSE 12402
12115: GO 12117
12117: DISABLE
// begin timerStatus = 4 ;
12118: LD_ADDR_EXP 29
12122: PUSH
12123: LD_INT 4
12125: ST_TO_ADDR
// if harrAnswer = 1 then
12126: LD_EXP 26
12130: PUSH
12131: LD_INT 1
12133: EQUAL
12134: IFFALSE 12218
// begin PrepareHarrisonSupport ( 3 ) ;
12136: LD_INT 3
12138: PPUSH
12139: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12143: LD_INT 2100
12145: PPUSH
12146: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12150: LD_EXP 14
12154: PPUSH
12155: LD_STRING D7-Har-1
12157: PPUSH
12158: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12162: LD_STRING M2
12164: PPUSH
12165: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12169: LD_ADDR_EXP 27
12173: PUSH
12174: LD_INT 31500
12176: PUSH
12177: LD_INT 10500
12179: PUSH
12180: LD_INT 8400
12182: PUSH
12183: LD_INT 6300
12185: PUSH
12186: LD_INT 6300
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: LD_OWVAR 67
12199: ARRAY
12200: PLUS
12201: ST_TO_ADDR
// startTimer = 1 ;
12202: LD_ADDR_EXP 30
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// timerStatus = 3 ;
12210: LD_ADDR_EXP 29
12214: PUSH
12215: LD_INT 3
12217: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12218: LD_EXP 26
12222: PUSH
12223: LD_INT 2
12225: EQUAL
12226: IFFALSE 12310
// begin PrepareHarrisonSupport ( 4 ) ;
12228: LD_INT 4
12230: PPUSH
12231: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12235: LD_INT 2100
12237: PPUSH
12238: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12242: LD_EXP 14
12246: PPUSH
12247: LD_STRING D7-Har-1
12249: PPUSH
12250: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12254: LD_STRING M2
12256: PPUSH
12257: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12261: LD_ADDR_EXP 27
12265: PUSH
12266: LD_INT 33600
12268: PUSH
12269: LD_INT 10500
12271: PUSH
12272: LD_INT 8400
12274: PUSH
12275: LD_INT 6300
12277: PUSH
12278: LD_INT 5250
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_OWVAR 67
12291: ARRAY
12292: PLUS
12293: ST_TO_ADDR
// startTimer = 1 ;
12294: LD_ADDR_EXP 30
12298: PUSH
12299: LD_INT 1
12301: ST_TO_ADDR
// timerStatus = 3 ;
12302: LD_ADDR_EXP 29
12306: PUSH
12307: LD_INT 3
12309: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12310: LD_EXP 26
12314: PUSH
12315: LD_INT 3
12317: EQUAL
12318: IFFALSE 12402
// begin PrepareHarrisonSupport ( 5 ) ;
12320: LD_INT 5
12322: PPUSH
12323: CALL 1729 0 1
// wait ( 1 1$0 ) ;
12327: LD_INT 2100
12329: PPUSH
12330: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12334: LD_EXP 14
12338: PPUSH
12339: LD_STRING D7-Har-1
12341: PPUSH
12342: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12346: LD_STRING M2
12348: PPUSH
12349: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12353: LD_ADDR_EXP 27
12357: PUSH
12358: LD_INT 35700
12360: PUSH
12361: LD_INT 10500
12363: PUSH
12364: LD_INT 6300
12366: PUSH
12367: LD_INT 4200
12369: PUSH
12370: LD_INT 3150
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: LD_OWVAR 67
12383: ARRAY
12384: PLUS
12385: ST_TO_ADDR
// startTimer = 1 ;
12386: LD_ADDR_EXP 30
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// timerStatus = 3 ;
12394: LD_ADDR_EXP 29
12398: PUSH
12399: LD_INT 3
12401: ST_TO_ADDR
// end ; end ;
12402: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12403: LD_EXP 27
12407: PUSH
12408: LD_INT 8400
12410: LESSEQUAL
12411: PUSH
12412: LD_EXP 29
12416: PUSH
12417: LD_INT 3
12419: EQUAL
12420: AND
12421: IFFALSE 12453
12423: GO 12425
12425: DISABLE
// begin DialogueOn ;
12426: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12430: LD_EXP 14
12434: PPUSH
12435: LD_STRING D7a-Har-1
12437: PPUSH
12438: CALL_OW 94
// DialogueOff ;
12442: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12446: LD_STRING M2a
12448: PPUSH
12449: CALL_OW 337
// end ;
12453: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12454: LD_EXP 27
12458: PUSH
12459: LD_INT 0
12461: LESSEQUAL
12462: PUSH
12463: LD_EXP 29
12467: PUSH
12468: LD_INT 3
12470: EQUAL
12471: AND
12472: PUSH
12473: LD_EXP 40
12477: NOT
12478: AND
12479: IFFALSE 12618
12481: GO 12483
12483: DISABLE
12484: LD_INT 0
12486: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12487: LD_ADDR_VAR 0 1
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 69
12506: PUSH
12507: LD_EXP 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: DIFF
12515: ST_TO_ADDR
// saveDonaldson := 2 ;
12516: LD_ADDR_EXP 24
12520: PUSH
12521: LD_INT 2
12523: ST_TO_ADDR
// DialogueOn ;
12524: CALL_OW 6
// if IsOk ( Donaldson ) then
12528: LD_EXP 13
12532: PPUSH
12533: CALL_OW 302
12537: IFFALSE 12553
// SayRadio ( Harisson , D8-Har-1 ) else
12539: LD_EXP 14
12543: PPUSH
12544: LD_STRING D8-Har-1
12546: PPUSH
12547: CALL_OW 94
12551: GO 12565
// SayRadio ( Harisson , D8-Har-1a ) ;
12553: LD_EXP 14
12557: PPUSH
12558: LD_STRING D8-Har-1a
12560: PPUSH
12561: CALL_OW 94
// DialogueOff ;
12565: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_INT 4
12576: PPUSH
12577: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 88
12588: PPUSH
12589: LD_INT 89
12591: PPUSH
12592: CALL_OW 114
// reliefOfCommand := true ;
12596: LD_ADDR_EXP 48
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12604: LD_INT 350
12606: PPUSH
12607: CALL_OW 67
// YouLost ( LostCommand ) ;
12611: LD_STRING LostCommand
12613: PPUSH
12614: CALL_OW 104
// end ;
12618: PPOPN 1
12620: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12621: LD_INT 22
12623: PUSH
12624: LD_INT 6
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 21
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: PUSH
12650: LD_INT 0
12652: EQUAL
12653: PUSH
12654: LD_EXP 20
12658: PUSH
12659: LD_INT 0
12661: EQUAL
12662: AND
12663: PUSH
12664: LD_EXP 44
12668: PUSH
12669: LD_INT 1
12671: EQUAL
12672: AND
12673: IFFALSE 12767
12675: GO 12677
12677: DISABLE
12678: LD_INT 0
12680: PPUSH
12681: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_INT 22
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 21
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 23
12709: PUSH
12710: LD_INT 1
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: ST_TO_ADDR
// for i in tmp do
12727: LD_ADDR_VAR 0 1
12731: PUSH
12732: LD_VAR 0 2
12736: PUSH
12737: FOR_IN
12738: IFFALSE 12765
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12740: LD_VAR 0 1
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: LD_INT 4
12750: PPUSH
12751: CALL_OW 12
12755: PPUSH
12756: LD_INT 500
12758: PPUSH
12759: CALL_OW 492
12763: GO 12737
12765: POP
12766: POP
// end ; end_of_file
12767: PPOPN 2
12769: END
// every 0 0$1 trigger AIEnable do
12770: LD_EXP 37
12774: IFFALSE 12868
12776: GO 12778
12778: DISABLE
// begin enable ;
12779: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12780: LD_INT 3
12782: PPUSH
12783: LD_INT 21
12785: PPUSH
12786: LD_INT 7
12788: PPUSH
12789: CALL 6002 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12793: LD_INT 3
12795: PPUSH
12796: LD_INT 8
12798: PPUSH
12799: LD_INT 7
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL 6306 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12809: LD_EXP 20
12813: PUSH
12814: LD_INT 2
12816: EQUAL
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 6
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PPUSH
12828: CALL_OW 69
12832: AND
12833: IFFALSE 12868
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12835: LD_INT 6
12837: PPUSH
12838: LD_EXP 21
12842: PPUSH
12843: LD_INT 6
12845: PPUSH
12846: CALL 6002 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12850: LD_INT 6
12852: PPUSH
12853: LD_INT 9
12855: PPUSH
12856: LD_INT 6
12858: PPUSH
12859: LD_EXP 22
12863: PPUSH
12864: CALL 6306 0 4
// end ; end ;
12868: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12869: LD_EXP 15
12873: PPUSH
12874: CALL_OW 310
12878: NOT
12879: PUSH
12880: LD_INT 21
12882: PPUSH
12883: CALL_OW 302
12887: AND
12888: PUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 255
12896: PUSH
12897: LD_INT 3
12899: EQUAL
12900: AND
12901: IFFALSE 12918
12903: GO 12905
12905: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12906: LD_EXP 15
12910: PPUSH
12911: LD_INT 21
12913: PPUSH
12914: CALL_OW 120
12918: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12919: LD_INT 22
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 55
12941: PUSH
12942: EMPTY
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: PPUSH
12950: CALL_OW 69
12954: PUSH
12955: LD_INT 0
12957: EQUAL
12958: PUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: PUSH
12981: LD_INT 21
12983: PPUSH
12984: CALL_OW 255
12988: PUSH
12989: LD_INT 3
12991: EQUAL
12992: AND
12993: PUSH
12994: LD_INT 21
12996: PPUSH
12997: CALL_OW 302
13001: AND
13002: IFFALSE 13214
13004: GO 13006
13006: DISABLE
// begin enable ;
13007: ENABLE
// if Difficulty = 1 then
13008: LD_OWVAR 67
13012: PUSH
13013: LD_INT 1
13015: EQUAL
13016: IFFALSE 13060
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13018: LD_INT 3
13020: PPUSH
13021: LD_INT 24
13023: PPUSH
13024: LD_OWVAR 67
13028: PUSH
13029: LD_INT 2
13031: PLUS
13032: PPUSH
13033: LD_INT 42
13035: PUSH
13036: LD_INT 44
13038: PUSH
13039: LD_INT 43
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: LD_INT 21
13055: PPUSH
13056: CALL 6820 0 7
// if Difficulty = 2 then
13060: LD_OWVAR 67
13064: PUSH
13065: LD_INT 2
13067: EQUAL
13068: IFFALSE 13135
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13070: LD_INT 3
13072: PPUSH
13073: LD_INT 24
13075: PPUSH
13076: LD_OWVAR 67
13080: PUSH
13081: LD_INT 2
13083: PLUS
13084: PPUSH
13085: LD_INT 44
13087: PUSH
13088: LD_INT 44
13090: PUSH
13091: LD_INT 43
13093: PUSH
13094: LD_INT 43
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 1
13121: PPUSH
13122: LD_INT 2
13124: PPUSH
13125: CALL_OW 12
13129: ARRAY
13130: PPUSH
13131: CALL 6820 0 7
// if Difficulty >= 3 then
13135: LD_OWVAR 67
13139: PUSH
13140: LD_INT 3
13142: GREATEREQUAL
13143: IFFALSE 13214
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13145: LD_INT 3
13147: PPUSH
13148: LD_INT 24
13150: PPUSH
13151: LD_OWVAR 67
13155: PUSH
13156: LD_INT 2
13158: PPUSH
13159: LD_INT 3
13161: PPUSH
13162: CALL_OW 12
13166: PLUS
13167: PPUSH
13168: LD_INT 44
13170: PUSH
13171: LD_INT 44
13173: PUSH
13174: LD_INT 43
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 23
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 2
13203: PPUSH
13204: CALL_OW 12
13208: ARRAY
13209: PPUSH
13210: CALL 6820 0 7
// end ;
13214: END
// every 0 0$1 do
13215: GO 13217
13217: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13218: LD_INT 3
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: CALL 5923 0 3
13231: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13232: LD_EXP 20
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: IFFALSE 13387
13242: GO 13244
13244: DISABLE
13245: LD_INT 0
13247: PPUSH
13248: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_INT 6
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 21
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 34
13276: PUSH
13277: LD_INT 51
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13294: LD_VAR 0 2
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: LD_EXP 21
13307: PPUSH
13308: CALL_OW 250
13312: PUSH
13313: LD_INT 5
13315: MINUS
13316: PPUSH
13317: LD_EXP 21
13321: PPUSH
13322: CALL_OW 251
13326: PUSH
13327: LD_INT 5
13329: MINUS
13330: PPUSH
13331: CALL_OW 111
// wait ( 0 0$5 ) ;
13335: LD_INT 175
13337: PPUSH
13338: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13342: LD_VAR 0 2
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PPUSH
13351: LD_INT 41
13353: PPUSH
13354: LD_INT 52
13356: PPUSH
13357: CALL_OW 177
// wait ( 0 0$40 ) ;
13361: LD_INT 1400
13363: PPUSH
13364: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13368: LD_VAR 0 2
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PPUSH
13377: LD_INT 41
13379: PPUSH
13380: LD_INT 44
13382: PPUSH
13383: CALL_OW 111
// end ;
13387: PPOPN 2
13389: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13390: LD_EXP 21
13394: PPUSH
13395: CALL_OW 274
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 275
13407: PUSH
13408: LD_INT 100
13410: GREATEREQUAL
13411: IFFALSE 13639
13413: GO 13415
13415: DISABLE
13416: LD_INT 0
13418: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 6
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 21
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_INT 4
13475: PPUSH
13476: LD_INT 39
13478: PPUSH
13479: LD_INT 37
13481: PPUSH
13482: LD_INT 3
13484: PPUSH
13485: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13489: LD_VAR 0 1
13493: PUSH
13494: LD_INT 1
13496: ARRAY
13497: PPUSH
13498: LD_INT 29
13500: PPUSH
13501: LD_INT 42
13503: PPUSH
13504: LD_INT 54
13506: PPUSH
13507: LD_INT 3
13509: PPUSH
13510: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13514: LD_VAR 0 1
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: LD_INT 6
13525: PPUSH
13526: LD_INT 38
13528: PPUSH
13529: LD_INT 48
13531: PPUSH
13532: LD_INT 0
13534: PPUSH
13535: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13539: LD_VAR 0 1
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PPUSH
13548: LD_INT 2
13550: PPUSH
13551: LD_INT 32
13553: PPUSH
13554: LD_INT 38
13556: PPUSH
13557: LD_INT 2
13559: PPUSH
13560: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13564: LD_VAR 0 1
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: LD_INT 26
13575: PPUSH
13576: LD_INT 39
13578: PPUSH
13579: LD_INT 55
13581: PPUSH
13582: LD_INT 3
13584: PPUSH
13585: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: LD_INT 32
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 31
13606: PPUSH
13607: LD_INT 3
13609: PPUSH
13610: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_INT 31
13625: PPUSH
13626: LD_INT 50
13628: PPUSH
13629: LD_INT 51
13631: PPUSH
13632: LD_INT 4
13634: PPUSH
13635: CALL_OW 205
// end ;
13639: PPOPN 1
13641: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13642: LD_EXP 46
13646: IFFALSE 14207
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
13654: PPUSH
13655: PPUSH
// begin enable ;
13656: ENABLE
// if not ruMobile then
13657: LD_EXP 46
13661: NOT
13662: IFFALSE 13666
// exit ;
13664: GO 14207
// for i in ruMobile do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: LD_EXP 46
13675: PUSH
13676: FOR_IN
13677: IFFALSE 14205
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 302
13688: NOT
13689: PUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 255
13699: PUSH
13700: LD_INT 3
13702: NONEQUAL
13703: OR
13704: IFFALSE 13724
// begin ruMobile := ruMobile diff i ;
13706: LD_ADDR_EXP 46
13710: PUSH
13711: LD_EXP 46
13715: PUSH
13716: LD_VAR 0 1
13720: DIFF
13721: ST_TO_ADDR
// continue ;
13722: GO 13676
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 110
13733: NOT
13734: PUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 110
13744: PUSH
13745: LD_INT 0
13747: EQUAL
13748: OR
13749: IFFALSE 13864
// begin if GetFuel ( i ) < 50 then
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 261
13760: PUSH
13761: LD_INT 50
13763: LESS
13764: IFFALSE 13823
// begin ComMoveXY ( i , 106 , 88 ) ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13781: LD_INT 35
13783: PPUSH
13784: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_INT 106
13795: PPUSH
13796: LD_INT 88
13798: PPUSH
13799: CALL_OW 297
13803: PUSH
13804: LD_INT 4
13806: LESS
13807: IFFALSE 13781
// SetFuel ( i , 100 ) ;
13809: LD_VAR 0 1
13813: PPUSH
13814: LD_INT 100
13816: PPUSH
13817: CALL_OW 240
// end else
13821: GO 13864
// if not IsInArea ( i , ruParking ) then
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_INT 25
13830: PPUSH
13831: CALL_OW 308
13835: NOT
13836: IFFALSE 13852
// ComMoveToArea ( i , ruParking ) else
13838: LD_VAR 0 1
13842: PPUSH
13843: LD_INT 25
13845: PPUSH
13846: CALL_OW 113
13850: GO 13864
// SetTag ( i , 101 ) ;
13852: LD_VAR 0 1
13856: PPUSH
13857: LD_INT 101
13859: PPUSH
13860: CALL_OW 109
// end ; if GetTag ( i ) = 101 then
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 110
13873: PUSH
13874: LD_INT 101
13876: EQUAL
13877: IFFALSE 14007
// begin if GetLives ( i ) < 650 then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 256
13888: PUSH
13889: LD_INT 650
13891: LESS
13892: IFFALSE 13984
// begin if not IsDrivenBy ( i ) then
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 311
13903: NOT
13904: IFFALSE 13908
// continue ;
13906: GO 13676
// mech := IsDrivenBy ( i ) ;
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_VAR 0 1
13917: PPUSH
13918: CALL_OW 311
13922: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13923: LD_VAR 0 2
13927: PPUSH
13928: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13946: LD_INT 35
13948: PPUSH
13949: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 256
13962: PUSH
13963: LD_INT 1000
13965: EQUAL
13966: IFFALSE 13946
// ComEnterUnit ( mech , i ) ;
13968: LD_VAR 0 2
13972: PPUSH
13973: LD_VAR 0 1
13977: PPUSH
13978: CALL_OW 120
// end else
13982: GO 14007
// if IsDrivenBy ( i ) then
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 311
13993: IFFALSE 14007
// SetTag ( i , 102 ) ;
13995: LD_VAR 0 1
13999: PPUSH
14000: LD_INT 102
14002: PPUSH
14003: CALL_OW 109
// end ; if GetTag ( i ) = 102 then
14007: LD_VAR 0 1
14011: PPUSH
14012: CALL_OW 110
14016: PUSH
14017: LD_INT 102
14019: EQUAL
14020: IFFALSE 14203
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: LD_INT 24
14029: PPUSH
14030: LD_INT 81
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 70
14044: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14045: LD_VAR 0 1
14049: PPUSH
14050: CALL_OW 256
14054: PUSH
14055: LD_INT 650
14057: LESS
14058: IFFALSE 14083
// begin ComStop ( i ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 141
// SetTag ( i , 0 ) ;
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL_OW 109
// continue ;
14081: GO 13676
// end ; if enemy then
14083: LD_VAR 0 3
14087: IFFALSE 14127
// begin if not HasTask ( i ) then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 314
14098: NOT
14099: IFFALSE 14125
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 74
14120: PPUSH
14121: CALL_OW 115
// end else
14125: GO 14203
// if ruMobile then
14127: LD_EXP 46
14131: IFFALSE 14203
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: LD_INT 81
14140: PUSH
14141: LD_INT 3
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// if enemy then
14153: LD_VAR 0 3
14157: IFFALSE 14203
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14159: LD_VAR 0 1
14163: PPUSH
14164: LD_INT 95
14166: PUSH
14167: LD_INT 74
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 67
14176: PUSH
14177: LD_INT 59
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 55
14186: PUSH
14187: LD_INT 41
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PPUSH
14199: CALL 81722 0 2
// end ; end ; end ;
14203: GO 13676
14205: POP
14206: POP
// end ; end_of_file
14207: PPOPN 3
14209: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14210: LD_INT 0
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14219: LD_ADDR_VAR 0 3
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 6
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 25
14246: PUSH
14247: LD_INT 1
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 3
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14278: LD_ADDR_VAR 0 7
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_INT 6
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 21
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 25
14305: PUSH
14306: LD_INT 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 54
14315: PUSH
14316: EMPTY
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14330: LD_ADDR_VAR 0 4
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_INT 6
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 25
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: PPUSH
14370: CALL_OW 69
14374: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14375: LD_ADDR_VAR 0 6
14379: PUSH
14380: LD_INT 22
14382: PUSH
14383: LD_INT 6
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14420: LD_ADDR_VAR 0 8
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 6
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 34
14447: PUSH
14448: LD_INT 51
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 6
14477: EQUAL
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 266
14488: PUSH
14489: LD_INT 0
14491: EQUAL
14492: AND
14493: IFFALSE 14513
// begin ruPDepot = building ;
14495: LD_ADDR_EXP 21
14499: PUSH
14500: LD_VAR 0 1
14504: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14505: LD_ADDR_EXP 20
14509: PUSH
14510: LD_INT 1
14512: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 266
14522: PUSH
14523: LD_INT 4
14525: EQUAL
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 255
14536: PUSH
14537: LD_INT 6
14539: EQUAL
14540: AND
14541: IFFALSE 14574
// for i in tmpSold do
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_VAR 0 3
14552: PUSH
14553: FOR_IN
14554: IFFALSE 14572
// ComEnterUnit ( i , building ) ;
14556: LD_VAR 0 2
14560: PPUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 120
14570: GO 14553
14572: POP
14573: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 266
14583: PUSH
14584: LD_INT 6
14586: EQUAL
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 255
14597: PUSH
14598: LD_INT 6
14600: EQUAL
14601: AND
14602: IFFALSE 14660
// begin for i in tmpSci do
14604: LD_ADDR_VAR 0 2
14608: PUSH
14609: LD_VAR 0 6
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14633
// ComEnterUnit ( i , building ) ;
14617: LD_VAR 0 2
14621: PPUSH
14622: LD_VAR 0 1
14626: PPUSH
14627: CALL_OW 120
14631: GO 14614
14633: POP
14634: POP
// ResAllTechs ( 6 , building , 3 ) ;
14635: LD_INT 6
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_INT 3
14645: PPUSH
14646: CALL 5923 0 3
// ruPLab = building ;
14650: LD_ADDR_EXP 22
14654: PUSH
14655: LD_VAR 0 1
14659: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 266
14669: PUSH
14670: LD_INT 2
14672: EQUAL
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 255
14683: PUSH
14684: LD_INT 6
14686: EQUAL
14687: AND
14688: IFFALSE 14739
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14690: LD_ADDR_VAR 0 5
14694: PUSH
14695: LD_VAR 0 8
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: PPUSH
14704: CALL_OW 313
14708: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14709: LD_VAR 0 5
14713: PPUSH
14714: CALL_OW 121
// wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 266
14748: PUSH
14749: LD_INT 32
14751: EQUAL
14752: PUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 255
14762: PUSH
14763: LD_INT 6
14765: EQUAL
14766: AND
14767: IFFALSE 14819
// begin ComPlaceWeapon ( building , 42 ) ;
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 42
14776: PPUSH
14777: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14781: LD_VAR 0 7
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 122
// wait ( 0 0$1 ) ;
14794: LD_INT 35
14796: PPUSH
14797: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14801: LD_VAR 0 7
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14819: LD_VAR 0 1
14823: PPUSH
14824: CALL_OW 266
14828: PUSH
14829: LD_INT 31
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 255
14842: PUSH
14843: LD_INT 6
14845: EQUAL
14846: AND
14847: IFFALSE 14913
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14849: LD_VAR 0 7
14853: PUSH
14854: LD_INT 2
14856: ARRAY
14857: PPUSH
14858: CALL_OW 122
// wait ( 0 0$1 ) ;
14862: LD_INT 35
14864: PPUSH
14865: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14869: LD_VAR 0 7
14873: PUSH
14874: LD_INT 2
14876: ARRAY
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14887: LD_VAR 0 4
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PPUSH
14896: LD_EXP 21
14900: PPUSH
14901: CALL_OW 120
// baseReadyToBuild = 2 ;
14905: LD_ADDR_EXP 20
14909: PUSH
14910: LD_INT 2
14912: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 266
14922: PUSH
14923: LD_INT 32
14925: EQUAL
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 255
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: AND
14941: PUSH
14942: LD_EXP 32
14946: PUSH
14947: LD_INT 0
14949: EQUAL
14950: AND
14951: IFFALSE 15196
// begin bunkerDialog = 1 ;
14953: LD_ADDR_EXP 32
14957: PUSH
14958: LD_INT 1
14960: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14961: LD_EXP 11
14965: PPUSH
14966: CALL_OW 302
14970: IFFALSE 14986
// Say ( Claptopn , D11-Eng1-1 ) else
14972: LD_EXP 11
14976: PPUSH
14977: LD_STRING D11-Eng1-1
14979: PPUSH
14980: CALL_OW 88
14984: GO 15182
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14986: LD_INT 22
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 26
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 69
15036: PUSH
15037: LD_EXP 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: PUSH
15045: LD_INT 0
15047: GREATER
15048: DIFF
15049: IFFALSE 15123
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15051: LD_INT 22
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 21
15063: PUSH
15064: LD_INT 1
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 26
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_EXP 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: DIFF
15110: PPUSH
15111: LD_STRING D11-Eng1-1
15113: PPUSH
15114: LD_STRING D11-Eng1-1
15116: PPUSH
15117: CALL 4570 0 3
15121: GO 15182
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15123: LD_INT 22
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 21
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 26
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: PUSH
15163: LD_EXP 1
15167: PUSH
15168: EMPTY
15169: LIST
15170: DIFF
15171: PPUSH
15172: LD_STRING D11-Eng1-1
15174: PPUSH
15175: LD_STRING D11-Eng1-1
15177: PPUSH
15178: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15182: LD_EXP 33
15186: PUSH
15187: LD_INT 0
15189: EQUAL
15190: IFFALSE 15196
// EnergyDialog ;
15192: CALL 4975 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 266
15205: PUSH
15206: LD_INT 29
15208: EQUAL
15209: PUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 255
15219: PUSH
15220: LD_INT 1
15222: EQUAL
15223: AND
15224: IFFALSE 15234
// buildOil = 1 ;
15226: LD_ADDR_EXP 34
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 266
15243: PUSH
15244: LD_INT 26
15246: EQUAL
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 255
15257: PUSH
15258: LD_INT 1
15260: EQUAL
15261: AND
15262: IFFALSE 15272
// buildPower = 1 ;
15264: LD_ADDR_EXP 35
15268: PUSH
15269: LD_INT 1
15271: ST_TO_ADDR
// end ;
15272: PPOPN 8
15274: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 266
15284: PUSH
15285: LD_INT 3
15287: EQUAL
15288: PUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL_OW 255
15298: PUSH
15299: LD_INT 1
15301: EQUAL
15302: AND
15303: PUSH
15304: LD_EXP 31
15308: PUSH
15309: LD_INT 0
15311: EQUAL
15312: AND
15313: IFFALSE 15661
// begin factoryDialog = 1 ;
15315: LD_ADDR_EXP 31
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15323: LD_INT 47
15325: PPUSH
15326: LD_INT 1
15328: PPUSH
15329: CALL_OW 321
15333: PUSH
15334: LD_INT 1
15336: EQUAL
15337: PUSH
15338: LD_INT 45
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 321
15348: PUSH
15349: LD_INT 1
15351: EQUAL
15352: AND
15353: IFFALSE 15661
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15355: LD_INT 22
15357: PUSH
15358: LD_INT 1
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 21
15367: PUSH
15368: LD_INT 3
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 24
15387: PUSH
15388: LD_INT 1000
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_INT 1
15408: ARRAY
15409: PPUSH
15410: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15414: LD_EXP 1
15418: PPUSH
15419: LD_STRING D9a-JMM-1
15421: PPUSH
15422: CALL_OW 88
// if IsOK ( Campell ) then
15426: LD_EXP 12
15430: PPUSH
15431: CALL_OW 302
15435: IFFALSE 15451
// Say ( Campell , D9a-Mech1-1 ) else
15437: LD_EXP 12
15441: PPUSH
15442: LD_STRING D9a-Mech1-1
15444: PPUSH
15445: CALL_OW 88
15449: GO 15647
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15451: LD_INT 22
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 21
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 26
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: PUSH
15502: LD_EXP 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: PUSH
15510: LD_INT 0
15512: GREATER
15513: DIFF
15514: IFFALSE 15588
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15516: LD_INT 22
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 21
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 25
15538: PUSH
15539: LD_INT 3
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 26
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 69
15566: PUSH
15567: LD_EXP 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: DIFF
15575: PPUSH
15576: LD_STRING D9a-Mech1-1
15578: PPUSH
15579: LD_STRING D9a-Mech1-1
15581: PPUSH
15582: CALL 4570 0 3
15586: GO 15647
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15588: LD_INT 22
15590: PUSH
15591: LD_INT 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: PPUSH
15623: CALL_OW 69
15627: PUSH
15628: LD_EXP 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: DIFF
15636: PPUSH
15637: LD_STRING D9a-Mech1-1
15639: PPUSH
15640: LD_STRING D9a-Mech1-1
15642: PPUSH
15643: CALL 4570 0 3
// end ; if energyVDialog = 0 then
15647: LD_EXP 33
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: IFFALSE 15661
// EnergyDialog ;
15657: CALL 4975 0 0
// end ; end ; end ;
15661: PPOPN 1
15663: END
// on UnitDestroyed ( unit ) do var mech ;
15664: LD_INT 0
15666: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL 35953 0 1
// if unit = JMM then
15676: LD_VAR 0 1
15680: PUSH
15681: LD_EXP 1
15685: EQUAL
15686: IFFALSE 15695
// YouLost ( JMM ) ;
15688: LD_STRING JMM
15690: PPUSH
15691: CALL_OW 104
// if unit = ambdept0 then
15695: LD_VAR 0 1
15699: PUSH
15700: LD_INT 4
15702: EQUAL
15703: IFFALSE 15712
// YouLost ( Base ) ;
15705: LD_STRING Base
15707: PPUSH
15708: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and IsInArea ( unit , ruDefArea ) then
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 255
15721: PUSH
15722: LD_INT 1
15724: EQUAL
15725: PUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 247
15735: PUSH
15736: LD_INT 1
15738: EQUAL
15739: AND
15740: PUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_INT 24
15748: PPUSH
15749: CALL_OW 308
15753: AND
15754: IFFALSE 15764
// honor := false ;
15756: LD_ADDR_EXP 39
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// if unit in ruMobile then
15764: LD_VAR 0 1
15768: PUSH
15769: LD_EXP 46
15773: IN
15774: IFFALSE 15792
// ruMobile = ruMobile diff ruMobile ;
15776: LD_ADDR_EXP 46
15780: PUSH
15781: LD_EXP 46
15785: PUSH
15786: LD_EXP 46
15790: DIFF
15791: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 247
15801: PUSH
15802: LD_INT 1
15804: EQUAL
15805: PUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 255
15815: PUSH
15816: LD_INT 1
15818: EQUAL
15819: AND
15820: IFFALSE 15836
// lostCounter = lostCounter + 1 ;
15822: LD_ADDR_EXP 38
15826: PUSH
15827: LD_EXP 38
15831: PUSH
15832: LD_INT 1
15834: PLUS
15835: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15836: LD_EXP 43
15840: PUSH
15841: LD_INT 24
15843: PPUSH
15844: CALL_OW 313
15848: PUSH
15849: LD_INT 6
15851: LESS
15852: AND
15853: PUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 257
15863: PUSH
15864: LD_INT 3
15866: EQUAL
15867: AND
15868: PUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 255
15878: PUSH
15879: LD_INT 3
15881: EQUAL
15882: AND
15883: PUSH
15884: LD_INT 24
15886: PPUSH
15887: CALL_OW 302
15891: AND
15892: PUSH
15893: LD_INT 24
15895: PPUSH
15896: CALL_OW 255
15900: PUSH
15901: LD_INT 3
15903: EQUAL
15904: AND
15905: IFFALSE 16034
// begin ruMech := ruMech - 1 ;
15907: LD_ADDR_EXP 43
15911: PUSH
15912: LD_EXP 43
15916: PUSH
15917: LD_INT 1
15919: MINUS
15920: ST_TO_ADDR
// if ruMech = 0 then
15921: LD_EXP 43
15925: PUSH
15926: LD_INT 0
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 16034
// wait ( 0 0$40 ) ;
15933: LD_INT 1400
15935: PPUSH
15936: CALL_OW 67
// uc_side = 3 ;
15940: LD_ADDR_OWVAR 20
15944: PUSH
15945: LD_INT 3
15947: ST_TO_ADDR
// uc_nation = 3 ;
15948: LD_ADDR_OWVAR 21
15952: PUSH
15953: LD_INT 3
15955: ST_TO_ADDR
// hc_gallery :=  ;
15956: LD_ADDR_OWVAR 33
15960: PUSH
15961: LD_STRING 
15963: ST_TO_ADDR
// hc_name :=  ;
15964: LD_ADDR_OWVAR 26
15968: PUSH
15969: LD_STRING 
15971: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15972: LD_INT 0
15974: PPUSH
15975: LD_EXP 16
15979: PPUSH
15980: LD_EXP 17
15984: PPUSH
15985: CALL_OW 12
15989: PPUSH
15990: CALL_OW 383
// mech := CreateHuman ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: CALL_OW 44
16003: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
16004: LD_VAR 0 2
16008: PPUSH
16009: LD_INT 124
16011: PPUSH
16012: LD_INT 97
16014: PPUSH
16015: LD_INT 0
16017: PPUSH
16018: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16022: LD_VAR 0 2
16026: PPUSH
16027: LD_INT 24
16029: PPUSH
16030: CALL_OW 120
// end ; end ;
16034: PPOPN 2
16036: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16037: LD_INT 0
16039: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 36011 0 2
// if GetSide ( vehicle ) = 1 then
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 255
16063: PUSH
16064: LD_INT 1
16066: EQUAL
16067: IFFALSE 16083
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16069: LD_ADDR_EXP 42
16073: PUSH
16074: LD_EXP 42
16078: PUSH
16079: LD_INT 1
16081: PLUS
16082: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 255
16092: PUSH
16093: LD_INT 3
16095: EQUAL
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 264
16106: PUSH
16107: LD_INT 42
16109: PUSH
16110: LD_INT 43
16112: PUSH
16113: LD_INT 44
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: IN
16121: AND
16122: IFFALSE 16140
// ruMobile := ruMobile union vehicle ;
16124: LD_ADDR_EXP 46
16128: PUSH
16129: LD_EXP 46
16133: PUSH
16134: LD_VAR 0 1
16138: UNION
16139: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 264
16149: PUSH
16150: LD_INT 53
16152: EQUAL
16153: IFFALSE 16289
// begin uc_side = 3 ;
16155: LD_ADDR_OWVAR 20
16159: PUSH
16160: LD_INT 3
16162: ST_TO_ADDR
// uc_nation = 3 ;
16163: LD_ADDR_OWVAR 21
16167: PUSH
16168: LD_INT 3
16170: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16171: LD_INT 0
16173: PPUSH
16174: LD_EXP 17
16178: PPUSH
16179: CALL_OW 383
// driver := CreateHuman ;
16183: LD_ADDR_VAR 0 3
16187: PUSH
16188: CALL_OW 44
16192: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16193: LD_VAR 0 3
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: LD_INT 21
16214: PPUSH
16215: CALL 5191 0 2
// repeat wait ( 0 0$1 ) ;
16219: LD_INT 35
16221: PPUSH
16222: CALL_OW 67
// until not HasTask ( vehicle ) ;
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL_OW 314
16235: NOT
16236: IFFALSE 16219
// driver := IsDrivenBy ( vehicle ) ;
16238: LD_ADDR_VAR 0 3
16242: PUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 311
16252: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16253: LD_VAR 0 3
16257: PPUSH
16258: LD_INT 104
16260: PPUSH
16261: LD_INT 73
16263: PPUSH
16264: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16268: LD_VAR 0 3
16272: PPUSH
16273: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16277: LD_VAR 0 3
16281: PPUSH
16282: LD_INT 24
16284: PPUSH
16285: CALL_OW 180
// end ; end ;
16289: PPOPN 3
16291: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16292: LD_VAR 0 1
16296: PPUSH
16297: CALL_OW 255
16301: PUSH
16302: LD_INT 3
16304: EQUAL
16305: PUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 247
16315: PUSH
16316: LD_INT 2
16318: EQUAL
16319: AND
16320: PUSH
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 264
16330: PUSH
16331: LD_INT 42
16333: PUSH
16334: LD_INT 43
16336: PUSH
16337: LD_INT 44
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: IN
16345: AND
16346: IFFALSE 16395
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16348: LD_INT 24
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 265
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 262
16370: PPUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 263
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 264
16390: PPUSH
16391: CALL_OW 185
// end ;
16395: PPOPN 1
16397: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 255
16407: PUSH
16408: LD_INT 3
16410: EQUAL
16411: PUSH
16412: LD_VAR 0 2
16416: PPUSH
16417: CALL_OW 255
16421: PUSH
16422: LD_INT 3
16424: EQUAL
16425: AND
16426: PUSH
16427: LD_INT 24
16429: PPUSH
16430: CALL_OW 302
16434: AND
16435: PUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 302
16445: NOT
16446: AND
16447: IFFALSE 16461
// ComEnterUnit ( human , rubfact0 ) ;
16449: LD_VAR 0 2
16453: PPUSH
16454: LD_INT 24
16456: PPUSH
16457: CALL_OW 120
// end ;
16461: PPOPN 2
16463: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 5 then
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 255
16473: PUSH
16474: LD_INT 5
16476: EQUAL
16477: IFFALSE 16551
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 125
16486: PPUSH
16487: LD_INT 97
16489: PPUSH
16490: CALL_OW 111
// wait ( 0 0$1 ) ;
16494: LD_INT 35
16496: PPUSH
16497: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 301
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: LD_INT 125
16518: PPUSH
16519: LD_INT 97
16521: PPUSH
16522: CALL_OW 307
16526: OR
16527: IFFALSE 16479
// if IsDead ( driver ) then
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 301
16538: IFFALSE 16542
// exit ;
16540: GO 16551
// RemoveUnit ( driver ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 64
// end ; end ;
16551: PPOPN 4
16553: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16554: LD_VAR 0 1
16558: PUSH
16559: LD_INT 24
16561: EQUAL
16562: PUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: CALL_OW 256
16572: PUSH
16573: LD_INT 1000
16575: LESS
16576: AND
16577: IFFALSE 16591
// SetLives ( un , 1000 ) ;
16579: LD_VAR 0 2
16583: PPUSH
16584: LD_INT 1000
16586: PPUSH
16587: CALL_OW 234
// end ;
16591: PPOPN 2
16593: END
// on Command ( comandid ) do var i , j , tmp ;
16594: LD_INT 0
16596: PPUSH
16597: PPUSH
16598: PPUSH
// begin SOS_Command ( comandid ) ;
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL 35995 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16608: LD_INT 22
16610: PUSH
16611: LD_INT 4
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: NOT
16623: IFFALSE 16627
// exit ;
16625: GO 16792
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16627: LD_ADDR_VAR 0 2
16631: PUSH
16632: LD_INT 22
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 21
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 21
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: PUSH
16679: FOR_IN
16680: IFFALSE 16790
// begin if GetTaskList ( i ) > 0 then
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 437
16691: PUSH
16692: LD_INT 0
16694: GREATER
16695: IFFALSE 16788
// begin for j = 1 to GetTaskList ( i ) do
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: DOUBLE
16703: LD_INT 1
16705: DEC
16706: ST_TO_ADDR
16707: LD_VAR 0 2
16711: PPUSH
16712: CALL_OW 437
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16786
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16720: LD_ADDR_VAR 0 4
16724: PUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: CALL_OW 437
16734: PUSH
16735: LD_VAR 0 3
16739: ARRAY
16740: PUSH
16741: LD_INT 4
16743: ARRAY
16744: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16745: LD_VAR 0 4
16749: PPUSH
16750: CALL_OW 255
16754: PUSH
16755: LD_INT 4
16757: EQUAL
16758: PUSH
16759: LD_VAR 0 4
16763: PPUSH
16764: CALL_OW 255
16768: PUSH
16769: LD_INT 0
16771: EQUAL
16772: OR
16773: IFFALSE 16784
// ComStop ( i ) ;
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 141
// end ;
16784: GO 16717
16786: POP
16787: POP
// end ; end ;
16788: GO 16679
16790: POP
16791: POP
// end ;
16792: PPOPN 4
16794: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16795: LD_VAR 0 1
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 23
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: IN
16840: PUSH
16841: LD_VAR 0 2
16845: PUSH
16846: LD_INT 1
16848: EQUAL
16849: AND
16850: IFFALSE 16856
// JMMTraitor ;
16852: CALL 9314 0 0
// end ; end_of_file
16856: PPOPN 3
16858: END
// every 10 10$0 do
16859: GO 16861
16861: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16862: LD_INT 5
16864: PPUSH
16865: LD_INT 3
16867: PPUSH
16868: LD_INT 2
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 3
16876: PUSH
16877: LD_INT 4
16879: PUSH
16880: LD_INT 4
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: LD_OWVAR 67
16893: ARRAY
16894: PLUS
16895: PPUSH
16896: LD_INT 0
16898: PPUSH
16899: LD_EXP 16
16903: PPUSH
16904: LD_EXP 17
16908: PPUSH
16909: CALL_OW 12
16913: PPUSH
16914: LD_INT 4
16916: PPUSH
16917: LD_INT 14
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: LD_INT 2
16925: PPUSH
16926: CALL 6932 0 9
16930: END
// every 20 20$0 do
16931: GO 16933
16933: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16934: LD_INT 5
16936: PPUSH
16937: LD_INT 3
16939: PPUSH
16940: LD_INT 4
16942: PUSH
16943: LD_INT 2
16945: PUSH
16946: LD_INT 3
16948: PUSH
16949: LD_INT 4
16951: PUSH
16952: LD_INT 5
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: LD_OWVAR 67
16965: ARRAY
16966: PLUS
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: LD_EXP 16
16975: PPUSH
16976: LD_EXP 17
16980: PPUSH
16981: CALL_OW 12
16985: PPUSH
16986: LD_INT 4
16988: PPUSH
16989: LD_INT 14
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL 6932 0 9
17002: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
17003: GO 17005
17005: DISABLE
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
17012: PPUSH
// begin hex := [ 123 , 95 ] ;
17013: LD_ADDR_VAR 0 4
17017: PUSH
17018: LD_INT 123
17020: PUSH
17021: LD_INT 95
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: ST_TO_ADDR
// tmp := [ ] ;
17028: LD_ADDR_VAR 0 5
17032: PUSH
17033: EMPTY
17034: ST_TO_ADDR
// if Difficulty > 1 then
17035: LD_OWVAR 67
17039: PUSH
17040: LD_INT 1
17042: GREATER
17043: IFFALSE 17053
// specAttack := true ;
17045: LD_ADDR_EXP 47
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: DOUBLE
17059: LD_INT 1
17061: DEC
17062: ST_TO_ADDR
17063: LD_INT 4
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 7
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_OWVAR 67
17085: ARRAY
17086: PUSH
17087: FOR_TO
17088: IFFALSE 17390
// begin uc_side := 5 ;
17090: LD_ADDR_OWVAR 20
17094: PUSH
17095: LD_INT 5
17097: ST_TO_ADDR
// uc_nation := 3 ;
17098: LD_ADDR_OWVAR 21
17102: PUSH
17103: LD_INT 3
17105: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
17106: LD_ADDR_OWVAR 37
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 22
17116: PUSH
17117: LD_INT 23
17119: PUSH
17120: LD_INT 24
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: LD_VAR 0 1
17133: PUSH
17134: LD_OWVAR 67
17138: MOD
17139: PUSH
17140: LD_INT 1
17142: PLUS
17143: ARRAY
17144: ST_TO_ADDR
// vc_engine := engine_combustion ;
17145: LD_ADDR_OWVAR 39
17149: PUSH
17150: LD_INT 1
17152: ST_TO_ADDR
// vc_control := control_manual ;
17153: LD_ADDR_OWVAR 38
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
17161: LD_ADDR_OWVAR 40
17165: PUSH
17166: LD_INT 42
17168: PUSH
17169: LD_INT 43
17171: PUSH
17172: LD_INT 44
17174: PUSH
17175: LD_INT 44
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: LD_VAR 0 1
17188: PUSH
17189: LD_OWVAR 67
17193: MOD
17194: PUSH
17195: LD_INT 1
17197: PLUS
17198: ARRAY
17199: ST_TO_ADDR
// veh := CreateVehicle ;
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: CALL_OW 45
17209: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 5
17217: PPUSH
17218: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17222: LD_INT 35
17224: PPUSH
17225: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17229: LD_VAR 0 4
17233: PUSH
17234: LD_INT 1
17236: ARRAY
17237: PPUSH
17238: LD_VAR 0 4
17242: PUSH
17243: LD_INT 2
17245: ARRAY
17246: PPUSH
17247: CALL_OW 428
17251: PUSH
17252: LD_INT 0
17254: EQUAL
17255: IFFALSE 17222
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_VAR 0 4
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PPUSH
17271: LD_VAR 0 4
17275: PUSH
17276: LD_INT 2
17278: ARRAY
17279: PPUSH
17280: LD_INT 0
17282: PPUSH
17283: CALL_OW 48
// uc_side := 5 ;
17287: LD_ADDR_OWVAR 20
17291: PUSH
17292: LD_INT 5
17294: ST_TO_ADDR
// uc_nation := 3 ;
17295: LD_ADDR_OWVAR 21
17299: PUSH
17300: LD_INT 3
17302: ST_TO_ADDR
// InitHC_All ( ) ;
17303: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17307: LD_INT 0
17309: PPUSH
17310: LD_INT 2
17312: PUSH
17313: LD_OWVAR 67
17317: PLUS
17318: PPUSH
17319: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17323: CALL_OW 44
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 101
17344: PPUSH
17345: LD_INT 77
17347: PPUSH
17348: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17352: LD_ADDR_VAR 0 5
17356: PUSH
17357: LD_VAR 0 5
17361: PPUSH
17362: LD_VAR 0 5
17366: PUSH
17367: LD_INT 1
17369: PLUS
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: CALL_OW 1
17380: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17381: LD_INT 105
17383: PPUSH
17384: CALL_OW 67
// end ;
17388: GO 17087
17390: POP
17391: POP
// repeat wait ( 0 0$1 ) ;
17392: LD_INT 35
17394: PPUSH
17395: CALL_OW 67
// for i in tmp do
17399: LD_ADDR_VAR 0 1
17403: PUSH
17404: LD_VAR 0 5
17408: PUSH
17409: FOR_IN
17410: IFFALSE 17478
// if not IsOk ( i ) then
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 302
17421: NOT
17422: IFFALSE 17442
// tmp := tmp diff i else
17424: LD_ADDR_VAR 0 5
17428: PUSH
17429: LD_VAR 0 5
17433: PUSH
17434: LD_VAR 0 1
17438: DIFF
17439: ST_TO_ADDR
17440: GO 17476
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17442: LD_VAR 0 1
17446: PPUSH
17447: LD_INT 22
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 74
17471: PPUSH
17472: CALL_OW 115
17476: GO 17409
17478: POP
17479: POP
// until not tmp ;
17480: LD_VAR 0 5
17484: NOT
17485: IFFALSE 17392
// end ;
17487: PPOPN 5
17489: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17490: LD_EXP 47
17494: IFFALSE 17872
17496: GO 17498
17498: DISABLE
17499: LD_INT 0
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
// begin wait ( 0 0$20 ) ;
17505: LD_INT 700
17507: PPUSH
17508: CALL_OW 67
// uc_side := 5 ;
17512: LD_ADDR_OWVAR 20
17516: PUSH
17517: LD_INT 5
17519: ST_TO_ADDR
// uc_nation := 3 ;
17520: LD_ADDR_OWVAR 21
17524: PUSH
17525: LD_INT 3
17527: ST_TO_ADDR
// InitHc ;
17528: CALL_OW 19
// hc_importance := 0 ;
17532: LD_ADDR_OWVAR 32
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// tmp := [ ] ;
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: EMPTY
17546: ST_TO_ADDR
// InitHC_All ( ) ;
17547: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17551: LD_INT 0
17553: PPUSH
17554: LD_INT 2
17556: PPUSH
17557: LD_INT 6
17559: PPUSH
17560: CALL_OW 380
// eng := CreateHuman ;
17564: LD_ADDR_VAR 0 4
17568: PUSH
17569: CALL_OW 44
17573: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17574: LD_VAR 0 4
17578: PPUSH
17579: LD_INT 78
17581: PPUSH
17582: LD_INT 2
17584: PPUSH
17585: LD_INT 4
17587: PPUSH
17588: LD_INT 0
17590: PPUSH
17591: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17595: LD_ADDR_VAR 0 3
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_INT 3
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: LD_INT 4
17613: PUSH
17614: LD_INT 5
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: LD_OWVAR 67
17627: ARRAY
17628: PUSH
17629: FOR_TO
17630: IFFALSE 17719
// begin InitHC_All ( ) ;
17632: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17636: LD_INT 0
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: LD_INT 4
17644: PUSH
17645: LD_INT 5
17647: PUSH
17648: LD_INT 6
17650: PUSH
17651: LD_INT 6
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: LD_OWVAR 67
17664: ARRAY
17665: PPUSH
17666: CALL_OW 380
// un := CreateHuman ;
17670: LD_ADDR_VAR 0 1
17674: PUSH
17675: CALL_OW 44
17679: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 78
17687: PPUSH
17688: LD_INT 2
17690: PPUSH
17691: LD_INT 4
17693: PPUSH
17694: LD_INT 0
17696: PPUSH
17697: CALL_OW 50
// tmp := tmp ^ un ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_VAR 0 2
17710: PUSH
17711: LD_VAR 0 1
17715: ADD
17716: ST_TO_ADDR
// end ;
17717: GO 17629
17719: POP
17720: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17721: LD_VAR 0 2
17725: PPUSH
17726: LD_INT 49
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: CALL_OW 111
// wait ( 0 0$2 ) ;
17736: LD_INT 70
17738: PPUSH
17739: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17743: LD_VAR 0 4
17747: PPUSH
17748: LD_INT 49
17750: PPUSH
17751: LD_INT 3
17753: PPUSH
17754: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17758: LD_VAR 0 4
17762: PPUSH
17763: LD_INT 4
17765: PPUSH
17766: CALL_OW 227
// wait ( 0 0$10 ) ;
17770: LD_INT 350
17772: PPUSH
17773: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17777: LD_INT 35
17779: PPUSH
17780: CALL_OW 67
// for i in tmp do
17784: LD_ADDR_VAR 0 3
17788: PUSH
17789: LD_VAR 0 2
17793: PUSH
17794: FOR_IN
17795: IFFALSE 17863
// if not IsOk ( i ) then
17797: LD_VAR 0 3
17801: PPUSH
17802: CALL_OW 302
17806: NOT
17807: IFFALSE 17827
// tmp := tmp diff i else
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 3
17823: DIFF
17824: ST_TO_ADDR
17825: GO 17861
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17827: LD_VAR 0 3
17831: PPUSH
17832: LD_INT 22
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PPUSH
17842: CALL_OW 69
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: CALL_OW 74
17856: PPUSH
17857: CALL_OW 115
17861: GO 17794
17863: POP
17864: POP
// until not tmp ;
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17777
// end ; end_of_file
17872: PPOPN 4
17874: END
// every 0 0$1 trigger startTimer = 1 do
17875: LD_EXP 30
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 18013
17885: GO 17887
17887: DISABLE
// begin enable ;
17888: ENABLE
// if timerStatus = 1 then
17889: LD_EXP 29
17893: PUSH
17894: LD_INT 1
17896: EQUAL
17897: IFFALSE 17930
// begin timeToSupport = timeToSupport - 0 0$01 ;
17899: LD_ADDR_EXP 28
17903: PUSH
17904: LD_EXP 28
17908: PUSH
17909: LD_INT 35
17911: MINUS
17912: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17913: LD_ADDR_OWVAR 47
17917: PUSH
17918: LD_STRING #Am04-1
17920: PUSH
17921: LD_EXP 28
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: ST_TO_ADDR
// end ; if timerStatus = 2 then
17930: LD_EXP 29
17934: PUSH
17935: LD_INT 2
17937: EQUAL
17938: IFFALSE 17971
// begin timeToSupport = timeToSupport - 0 0$01 ;
17940: LD_ADDR_EXP 28
17944: PUSH
17945: LD_EXP 28
17949: PUSH
17950: LD_INT 35
17952: MINUS
17953: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17954: LD_ADDR_OWVAR 47
17958: PUSH
17959: LD_STRING #Am04-2
17961: PUSH
17962: LD_EXP 28
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: ST_TO_ADDR
// end ; if timerStatus = 3 then
17971: LD_EXP 29
17975: PUSH
17976: LD_INT 3
17978: EQUAL
17979: IFFALSE 17995
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17981: LD_ADDR_EXP 27
17985: PUSH
17986: LD_EXP 27
17990: PUSH
17991: LD_INT 35
17993: MINUS
17994: ST_TO_ADDR
// if timerStatus = 4 then
17995: LD_EXP 29
17999: PUSH
18000: LD_INT 4
18002: EQUAL
18003: IFFALSE 18013
// display_strings =  ;
18005: LD_ADDR_OWVAR 47
18009: PUSH
18010: LD_STRING 
18012: ST_TO_ADDR
// end ; end_of_file
18013: END
// every 0 0$1 trigger not reliefOfCommand and IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
18014: LD_EXP 48
18018: NOT
18019: PUSH
18020: LD_EXP 15
18024: PPUSH
18025: CALL_OW 301
18029: AND
18030: PUSH
18031: LD_INT 22
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 21
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: PUSH
18060: LD_INT 14
18062: PUSH
18063: LD_INT 13
18065: PUSH
18066: LD_INT 12
18068: PUSH
18069: LD_INT 11
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: PUSH
18078: LD_OWVAR 67
18082: ARRAY
18083: LESS
18084: AND
18085: IFFALSE 18671
18087: GO 18089
18089: DISABLE
18090: LD_INT 0
18092: PPUSH
18093: PPUSH
18094: PPUSH
// begin AIEnable = 0 ;
18095: LD_ADDR_EXP 37
18099: PUSH
18100: LD_INT 0
18102: ST_TO_ADDR
// escapeAvalaible = 1 ;
18103: LD_ADDR_EXP 40
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// Video ( true ) ;
18111: LD_INT 1
18113: PPUSH
18114: CALL 79084 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18118: LD_INT 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_INT 1
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18134: LD_INT 6
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18150: LD_INT 5
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: LD_INT 1
18158: PPUSH
18159: LD_INT 0
18161: PPUSH
18162: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18166: LD_INT 3
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18176: LD_INT 97
18178: PPUSH
18179: LD_INT 91
18181: PPUSH
18182: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18186: LD_INT 22
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PPUSH
18215: CALL_OW 121
// wait ( 0 0$01 ) ;
18219: LD_INT 35
18221: PPUSH
18222: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PPUSH
18255: LD_INT 124
18257: PPUSH
18258: LD_INT 98
18260: PPUSH
18261: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18265: LD_INT 22
18267: PUSH
18268: LD_INT 5
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PPUSH
18289: CALL_OW 69
18293: PPUSH
18294: CALL_OW 121
// wait ( 0 0$01 ) ;
18298: LD_INT 35
18300: PPUSH
18301: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18305: LD_INT 22
18307: PUSH
18308: LD_INT 5
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: PPUSH
18334: LD_INT 124
18336: PPUSH
18337: LD_INT 98
18339: PPUSH
18340: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18344: LD_INT 22
18346: PUSH
18347: LD_INT 6
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 21
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: PPUSH
18373: CALL_OW 121
// wait ( 0 0$01 ) ;
18377: LD_INT 35
18379: PPUSH
18380: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18384: LD_INT 22
18386: PUSH
18387: LD_INT 6
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 21
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PPUSH
18408: CALL_OW 69
18412: PPUSH
18413: LD_INT 124
18415: PPUSH
18416: LD_INT 98
18418: PPUSH
18419: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18423: LD_INT 22
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 21
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PPUSH
18452: LD_INT 124
18454: PPUSH
18455: LD_INT 96
18457: PPUSH
18458: CALL_OW 114
// wait ( 0 0$1 ) ;
18462: LD_INT 35
18464: PPUSH
18465: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18469: LD_INT 124
18471: PPUSH
18472: LD_INT 96
18474: PPUSH
18475: CALL_OW 84
// p := 0 0$0 ;
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18487: LD_ADDR_VAR 0 2
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 6
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 21
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18539: LD_INT 35
18541: PPUSH
18542: CALL_OW 67
// p := p + 0 0$1 ;
18546: LD_ADDR_VAR 0 3
18550: PUSH
18551: LD_VAR 0 3
18555: PUSH
18556: LD_INT 35
18558: PLUS
18559: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_INT 5
18567: PPUSH
18568: CALL_OW 113
// for i in tmp do
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_VAR 0 2
18581: PUSH
18582: FOR_IN
18583: IFFALSE 18610
// if IsInArea ( tmp , RussianEscape ) then
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_INT 5
18592: PPUSH
18593: CALL_OW 308
18597: IFFALSE 18608
// RemoveUnit ( i ) ;
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 64
18608: GO 18582
18610: POP
18611: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18612: LD_INT 23
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 21
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 24
18634: PUSH
18635: LD_INT 250
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: PUSH
18652: LD_INT 0
18654: EQUAL
18655: PUSH
18656: LD_VAR 0 3
18660: PUSH
18661: LD_INT 245
18663: GREATEREQUAL
18664: OR
18665: IFFALSE 18539
// FinishMission ;
18667: CALL 18674 0 0
// end ;
18671: PPOPN 3
18673: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18674: LD_INT 0
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18681: LD_INT 22
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 21
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 23
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 50
18713: PUSH
18714: EMPTY
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 69
18727: PPUSH
18728: CALL 43503 0 1
18732: PUSH
18733: LD_INT 5
18735: LESS
18736: IFFALSE 18747
// begin YouLost ( LostVictory ) ;
18738: LD_STRING LostVictory
18740: PPUSH
18741: CALL_OW 104
// exit ;
18745: GO 19434
// end ; if not vehicleProduceCounter then
18747: LD_EXP 42
18751: NOT
18752: IFFALSE 18761
// SetAchievement ( ACH_INFANTRY ) ;
18754: LD_STRING ACH_INFANTRY
18756: PPUSH
18757: CALL_OW 543
// if tick <= 20 20$00 then
18761: LD_OWVAR 1
18765: PUSH
18766: LD_INT 42000
18768: LESSEQUAL
18769: IFFALSE 18785
// begin wait ( 3 ) ;
18771: LD_INT 3
18773: PPUSH
18774: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18778: LD_STRING ACH_ASPEED_4
18780: PPUSH
18781: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18785: LD_INT 22
18787: PPUSH
18788: CALL 19439 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18792: LD_INT 69
18794: PPUSH
18795: LD_INT 1
18797: PPUSH
18798: CALL_OW 321
18802: PPUSH
18803: LD_STRING GatlingInGamma
18805: PPUSH
18806: CALL_OW 39
// m1 := false ;
18810: LD_ADDR_VAR 0 3
18814: PUSH
18815: LD_INT 0
18817: ST_TO_ADDR
// m2 := false ;
18818: LD_ADDR_VAR 0 4
18822: PUSH
18823: LD_INT 0
18825: ST_TO_ADDR
// m3 := false ;
18826: LD_ADDR_VAR 0 5
18830: PUSH
18831: LD_INT 0
18833: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18834: LD_EXP 34
18838: PUSH
18839: LD_INT 1
18841: EQUAL
18842: PUSH
18843: LD_EXP 35
18847: PUSH
18848: LD_INT 1
18850: EQUAL
18851: AND
18852: IFFALSE 18874
// begin AddMedal ( oil , 1 ) ;
18854: LD_STRING oil
18856: PPUSH
18857: LD_INT 1
18859: PPUSH
18860: CALL_OW 101
// m1 := true ;
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 1
18871: ST_TO_ADDR
// end else
18872: GO 18967
// begin if buildOil = 1 and buildPower = 0 then
18874: LD_EXP 34
18878: PUSH
18879: LD_INT 1
18881: EQUAL
18882: PUSH
18883: LD_EXP 35
18887: PUSH
18888: LD_INT 0
18890: EQUAL
18891: AND
18892: IFFALSE 18905
// AddMedal ( oil , - 1 ) ;
18894: LD_STRING oil
18896: PPUSH
18897: LD_INT 1
18899: NEG
18900: PPUSH
18901: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18905: LD_EXP 34
18909: PUSH
18910: LD_INT 0
18912: EQUAL
18913: PUSH
18914: LD_EXP 35
18918: PUSH
18919: LD_INT 1
18921: EQUAL
18922: AND
18923: IFFALSE 18936
// AddMedal ( oil , - 2 ) ;
18925: LD_STRING oil
18927: PPUSH
18928: LD_INT 2
18930: NEG
18931: PPUSH
18932: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18936: LD_EXP 34
18940: PUSH
18941: LD_INT 0
18943: EQUAL
18944: PUSH
18945: LD_EXP 35
18949: PUSH
18950: LD_INT 0
18952: EQUAL
18953: AND
18954: IFFALSE 18967
// AddMedal ( oil , - 3 ) ;
18956: LD_STRING oil
18958: PPUSH
18959: LD_INT 3
18961: NEG
18962: PPUSH
18963: CALL_OW 101
// end ; if lostCounter > 3 then
18967: LD_EXP 38
18971: PUSH
18972: LD_INT 3
18974: GREATER
18975: IFFALSE 18990
// AddMedal ( deaths , - 1 ) else
18977: LD_STRING deaths
18979: PPUSH
18980: LD_INT 1
18982: NEG
18983: PPUSH
18984: CALL_OW 101
18988: GO 19008
// begin AddMedal ( deaths , 1 ) ;
18990: LD_STRING deaths
18992: PPUSH
18993: LD_INT 1
18995: PPUSH
18996: CALL_OW 101
// m2 := true ;
19000: LD_ADDR_VAR 0 4
19004: PUSH
19005: LD_INT 1
19007: ST_TO_ADDR
// end ; if honor then
19008: LD_EXP 39
19012: IFFALSE 19034
// begin AddMedal ( honour , 1 ) ;
19014: LD_STRING honour
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 101
// m3 := true ;
19024: LD_ADDR_VAR 0 5
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// end else
19032: GO 19045
// AddMedal ( honour , - 1 ) ;
19034: LD_STRING honour
19036: PPUSH
19037: LD_INT 1
19039: NEG
19040: PPUSH
19041: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_VAR 0 4
19054: AND
19055: PUSH
19056: LD_VAR 0 5
19060: AND
19061: PUSH
19062: LD_OWVAR 67
19066: PUSH
19067: LD_INT 3
19069: GREATEREQUAL
19070: AND
19071: IFFALSE 19083
// SetAchievementEX ( ACH_AMER , 4 ) ;
19073: LD_STRING ACH_AMER
19075: PPUSH
19076: LD_INT 4
19078: PPUSH
19079: CALL_OW 564
// GiveMedals ( Main ) ;
19083: LD_STRING Main
19085: PPUSH
19086: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19090: LD_INT 22
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 23
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 21
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: PPUSH
19130: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19134: LD_EXP 1
19138: PPUSH
19139: LD_EXP 49
19143: PUSH
19144: LD_STRING JMM
19146: STR
19147: PPUSH
19148: CALL_OW 38
// if IsOK ( Bobby ) then
19152: LD_EXP 2
19156: PPUSH
19157: CALL_OW 302
19161: IFFALSE 19181
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19163: LD_EXP 2
19167: PPUSH
19168: LD_EXP 49
19172: PUSH
19173: LD_STRING Bobby
19175: STR
19176: PPUSH
19177: CALL_OW 38
// if IsOK ( Cyrus ) then
19181: LD_EXP 3
19185: PPUSH
19186: CALL_OW 302
19190: IFFALSE 19210
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19192: LD_EXP 3
19196: PPUSH
19197: LD_EXP 49
19201: PUSH
19202: LD_STRING Cyrus
19204: STR
19205: PPUSH
19206: CALL_OW 38
// if IsOK ( Lisa ) then
19210: LD_EXP 4
19214: PPUSH
19215: CALL_OW 302
19219: IFFALSE 19239
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19221: LD_EXP 4
19225: PPUSH
19226: LD_EXP 49
19230: PUSH
19231: LD_STRING Lisa
19233: STR
19234: PPUSH
19235: CALL_OW 38
// if IsOK ( Brown ) then
19239: LD_EXP 7
19243: PPUSH
19244: CALL_OW 302
19248: IFFALSE 19275
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
19250: LD_STRING enableBioCharacter(BIO_JEFF)
19252: PPUSH
19253: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19257: LD_EXP 7
19261: PPUSH
19262: LD_EXP 49
19266: PUSH
19267: LD_STRING Brown
19269: STR
19270: PPUSH
19271: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
19275: LD_EXP 13
19279: PPUSH
19280: CALL_OW 301
19284: NOT
19285: IFFALSE 19312
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
19287: LD_STRING enableBioCharacter(BIO_LUCY)
19289: PPUSH
19290: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19294: LD_EXP 13
19298: PPUSH
19299: LD_EXP 49
19303: PUSH
19304: LD_STRING Donaldson
19306: STR
19307: PPUSH
19308: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19312: LD_EXP 5
19316: PPUSH
19317: CALL_OW 301
19321: NOT
19322: IFFALSE 19342
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19324: LD_EXP 5
19328: PPUSH
19329: LD_EXP 49
19333: PUSH
19334: LD_STRING Frank
19336: STR
19337: PPUSH
19338: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19342: LD_INT 50
19344: PUSH
19345: EMPTY
19346: LIST
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 21
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: PPUSH
19373: CALL_OW 69
19377: PUSH
19378: LD_EXP 1
19382: PUSH
19383: LD_EXP 2
19387: PUSH
19388: LD_EXP 3
19392: PUSH
19393: LD_EXP 4
19397: PUSH
19398: LD_EXP 7
19402: PUSH
19403: LD_EXP 13
19407: PUSH
19408: LD_EXP 5
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: DIFF
19422: PPUSH
19423: LD_STRING 04_other_survivors
19425: PPUSH
19426: CALL_OW 38
// YouWin ;
19430: CALL_OW 103
// end ;
19434: LD_VAR 0 1
19438: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
19443: PPUSH
19444: PPUSH
// gammaBase = [ ] ;
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: EMPTY
19451: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19452: LD_ADDR_VAR 0 5
19456: PUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: LD_INT 22
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 21
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// for i in buildings do
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_VAR 0 5
19500: PUSH
19501: FOR_IN
19502: IFFALSE 19839
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19504: LD_VAR 0 3
19508: PPUSH
19509: CALL_OW 266
19513: PUSH
19514: LD_INT 6
19516: PUSH
19517: LD_INT 7
19519: PUSH
19520: LD_INT 8
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: IN
19528: IFFALSE 19642
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: LD_VAR 0 4
19539: PUSH
19540: LD_VAR 0 3
19544: PPUSH
19545: CALL_OW 266
19549: PUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: CALL_OW 250
19559: PUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: CALL_OW 251
19569: PUSH
19570: LD_VAR 0 3
19574: PPUSH
19575: CALL_OW 254
19579: PUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: CALL_OW 267
19589: PUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: CALL_OW 248
19599: PUSH
19600: LD_VAR 0 3
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: CALL_OW 268
19612: PUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: LD_INT 2
19620: PPUSH
19621: CALL_OW 268
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: EMPTY
19637: LIST
19638: ADD
19639: ST_TO_ADDR
19640: GO 19837
// if GetBType ( i ) in [ b_bunker ] then
19642: LD_VAR 0 3
19646: PPUSH
19647: CALL_OW 266
19651: PUSH
19652: LD_INT 32
19654: PUSH
19655: EMPTY
19656: LIST
19657: IN
19658: IFFALSE 19755
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19660: LD_ADDR_VAR 0 4
19664: PUSH
19665: LD_VAR 0 4
19669: PUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: CALL_OW 266
19679: PUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: CALL_OW 250
19689: PUSH
19690: LD_VAR 0 3
19694: PPUSH
19695: CALL_OW 251
19699: PUSH
19700: LD_VAR 0 3
19704: PPUSH
19705: CALL_OW 254
19709: PUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: CALL_OW 267
19719: PUSH
19720: LD_VAR 0 3
19724: PPUSH
19725: CALL_OW 248
19729: PUSH
19730: LD_VAR 0 3
19734: PPUSH
19735: CALL_OW 269
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: ADD
19752: ST_TO_ADDR
19753: GO 19837
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19755: LD_ADDR_VAR 0 4
19759: PUSH
19760: LD_VAR 0 4
19764: PUSH
19765: LD_VAR 0 3
19769: PPUSH
19770: CALL_OW 266
19774: PUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: CALL_OW 250
19784: PUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: CALL_OW 251
19794: PUSH
19795: LD_VAR 0 3
19799: PPUSH
19800: CALL_OW 254
19804: PUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: CALL_OW 267
19814: PUSH
19815: LD_VAR 0 3
19819: PPUSH
19820: CALL_OW 248
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: ADD
19836: ST_TO_ADDR
// end ;
19837: GO 19501
19839: POP
19840: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19841: LD_VAR 0 4
19845: PPUSH
19846: LD_STRING GammaBase
19848: PPUSH
19849: CALL_OW 39
// end ; end_of_file
19853: LD_VAR 0 2
19857: RET
// every 1 1$15 do
19858: GO 19860
19860: DISABLE
// begin if supply <= 13 and supply > 7 then
19861: LD_EXP 36
19865: PUSH
19866: LD_INT 13
19868: LESSEQUAL
19869: PUSH
19870: LD_EXP 36
19874: PUSH
19875: LD_INT 7
19877: GREATER
19878: AND
19879: IFFALSE 19902
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19881: LD_INT 3
19883: PPUSH
19884: LD_INT 5
19886: PPUSH
19887: CALL_OW 12
19891: PPUSH
19892: LD_INT 18
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 55
// if supply <= 7 and supply > 4 then
19902: LD_EXP 36
19906: PUSH
19907: LD_INT 7
19909: LESSEQUAL
19910: PUSH
19911: LD_EXP 36
19915: PUSH
19916: LD_INT 4
19918: GREATER
19919: AND
19920: IFFALSE 19943
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19922: LD_INT 3
19924: PPUSH
19925: LD_INT 5
19927: PPUSH
19928: CALL_OW 12
19932: PPUSH
19933: LD_INT 19
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 55
// if supply <= 4 and supply > 0 then
19943: LD_EXP 36
19947: PUSH
19948: LD_INT 4
19950: LESSEQUAL
19951: PUSH
19952: LD_EXP 36
19956: PUSH
19957: LD_INT 0
19959: GREATER
19960: AND
19961: IFFALSE 19984
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19963: LD_INT 3
19965: PPUSH
19966: LD_INT 5
19968: PPUSH
19969: CALL_OW 12
19973: PPUSH
19974: LD_INT 20
19976: PPUSH
19977: LD_INT 1
19979: PPUSH
19980: CALL_OW 55
// if supply then
19984: LD_EXP 36
19988: IFFALSE 20005
// begin supply = supply - 1 ;
19990: LD_ADDR_EXP 36
19994: PUSH
19995: LD_EXP 36
19999: PUSH
20000: LD_INT 1
20002: MINUS
20003: ST_TO_ADDR
// enable ;
20004: ENABLE
// end ; end ; end_of_file end_of_file
20005: END
// export globalGameSaveCounter ; every 0 0$1 do
20006: GO 20008
20008: DISABLE
// begin enable ;
20009: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20010: LD_STRING updateTimer(
20012: PUSH
20013: LD_OWVAR 1
20017: STR
20018: PUSH
20019: LD_STRING );
20021: STR
20022: PPUSH
20023: CALL_OW 559
// end ;
20027: END
// every 0 0$1 do
20028: GO 20030
20030: DISABLE
// begin globalGameSaveCounter := 0 ;
20031: LD_ADDR_EXP 51
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20039: LD_STRING setGameSaveCounter(0)
20041: PPUSH
20042: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20046: LD_STRING initStreamRollete();
20048: PPUSH
20049: CALL_OW 559
// InitStreamMode ;
20053: CALL 21396 0 0
// DefineStreamItems ( false ) ;
20057: LD_INT 0
20059: PPUSH
20060: CALL 21860 0 1
// end ;
20064: END
// export function SOS_MapStart ( ) ; begin
20065: LD_INT 0
20067: PPUSH
// if streamModeActive then
20068: LD_EXP 52
20072: IFFALSE 20081
// DefineStreamItems ( true ) ;
20074: LD_INT 1
20076: PPUSH
20077: CALL 21860 0 1
// UpdateLuaVariables ( ) ;
20081: CALL 20098 0 0
// UpdateFactoryWaypoints ( ) ;
20085: CALL 34862 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20089: CALL 35114 0 0
// end ;
20093: LD_VAR 0 1
20097: RET
// function UpdateLuaVariables ( ) ; begin
20098: LD_INT 0
20100: PPUSH
// if globalGameSaveCounter then
20101: LD_EXP 51
20105: IFFALSE 20139
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20107: LD_ADDR_EXP 51
20111: PUSH
20112: LD_EXP 51
20116: PPUSH
20117: CALL 80473 0 1
20121: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20122: LD_STRING setGameSaveCounter(
20124: PUSH
20125: LD_EXP 51
20129: STR
20130: PUSH
20131: LD_STRING )
20133: STR
20134: PPUSH
20135: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20139: LD_STRING setGameDifficulty(
20141: PUSH
20142: LD_OWVAR 67
20146: STR
20147: PUSH
20148: LD_STRING )
20150: STR
20151: PPUSH
20152: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20156: LD_STRING displayDifficulty(
20158: PUSH
20159: LD_OWVAR 67
20163: STR
20164: PUSH
20165: LD_STRING )
20167: STR
20168: PPUSH
20169: CALL_OW 559
// end ;
20173: LD_VAR 0 1
20177: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20178: LD_INT 0
20180: PPUSH
// if p2 = stream_mode then
20181: LD_VAR 0 2
20185: PUSH
20186: LD_INT 100
20188: EQUAL
20189: IFFALSE 21192
// begin if not StreamModeActive then
20191: LD_EXP 52
20195: NOT
20196: IFFALSE 20206
// StreamModeActive := true ;
20198: LD_ADDR_EXP 52
20202: PUSH
20203: LD_INT 1
20205: ST_TO_ADDR
// if p3 = 0 then
20206: LD_VAR 0 3
20210: PUSH
20211: LD_INT 0
20213: EQUAL
20214: IFFALSE 20220
// InitStreamMode ;
20216: CALL 21396 0 0
// if p3 = 1 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 1
20227: EQUAL
20228: IFFALSE 20238
// sRocket := true ;
20230: LD_ADDR_EXP 57
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 2 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 2
20245: EQUAL
20246: IFFALSE 20256
// sSpeed := true ;
20248: LD_ADDR_EXP 56
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 3 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 3
20263: EQUAL
20264: IFFALSE 20274
// sEngine := true ;
20266: LD_ADDR_EXP 58
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 4 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 4
20281: EQUAL
20282: IFFALSE 20292
// sSpec := true ;
20284: LD_ADDR_EXP 55
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 5 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 5
20299: EQUAL
20300: IFFALSE 20310
// sLevel := true ;
20302: LD_ADDR_EXP 59
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 6 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 6
20317: EQUAL
20318: IFFALSE 20328
// sArmoury := true ;
20320: LD_ADDR_EXP 60
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 7 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 7
20335: EQUAL
20336: IFFALSE 20346
// sRadar := true ;
20338: LD_ADDR_EXP 61
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 8 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 8
20353: EQUAL
20354: IFFALSE 20364
// sBunker := true ;
20356: LD_ADDR_EXP 62
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 9 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 9
20371: EQUAL
20372: IFFALSE 20382
// sHack := true ;
20374: LD_ADDR_EXP 63
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 10 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 10
20389: EQUAL
20390: IFFALSE 20400
// sFire := true ;
20392: LD_ADDR_EXP 64
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 11 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 11
20407: EQUAL
20408: IFFALSE 20418
// sRefresh := true ;
20410: LD_ADDR_EXP 65
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 12 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 12
20425: EQUAL
20426: IFFALSE 20436
// sExp := true ;
20428: LD_ADDR_EXP 66
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// if p3 = 13 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 13
20443: EQUAL
20444: IFFALSE 20454
// sDepot := true ;
20446: LD_ADDR_EXP 67
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// if p3 = 14 then
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 14
20461: EQUAL
20462: IFFALSE 20472
// sFlag := true ;
20464: LD_ADDR_EXP 68
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// if p3 = 15 then
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 15
20479: EQUAL
20480: IFFALSE 20490
// sKamikadze := true ;
20482: LD_ADDR_EXP 76
20486: PUSH
20487: LD_INT 1
20489: ST_TO_ADDR
// if p3 = 16 then
20490: LD_VAR 0 3
20494: PUSH
20495: LD_INT 16
20497: EQUAL
20498: IFFALSE 20508
// sTroll := true ;
20500: LD_ADDR_EXP 77
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if p3 = 17 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 17
20515: EQUAL
20516: IFFALSE 20526
// sSlow := true ;
20518: LD_ADDR_EXP 78
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// if p3 = 18 then
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 18
20533: EQUAL
20534: IFFALSE 20544
// sLack := true ;
20536: LD_ADDR_EXP 79
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// if p3 = 19 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_INT 19
20551: EQUAL
20552: IFFALSE 20562
// sTank := true ;
20554: LD_ADDR_EXP 81
20558: PUSH
20559: LD_INT 1
20561: ST_TO_ADDR
// if p3 = 20 then
20562: LD_VAR 0 3
20566: PUSH
20567: LD_INT 20
20569: EQUAL
20570: IFFALSE 20580
// sRemote := true ;
20572: LD_ADDR_EXP 82
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// if p3 = 21 then
20580: LD_VAR 0 3
20584: PUSH
20585: LD_INT 21
20587: EQUAL
20588: IFFALSE 20598
// sPowell := true ;
20590: LD_ADDR_EXP 83
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// if p3 = 22 then
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 22
20605: EQUAL
20606: IFFALSE 20616
// sTeleport := true ;
20608: LD_ADDR_EXP 86
20612: PUSH
20613: LD_INT 1
20615: ST_TO_ADDR
// if p3 = 23 then
20616: LD_VAR 0 3
20620: PUSH
20621: LD_INT 23
20623: EQUAL
20624: IFFALSE 20634
// sOilTower := true ;
20626: LD_ADDR_EXP 88
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// if p3 = 24 then
20634: LD_VAR 0 3
20638: PUSH
20639: LD_INT 24
20641: EQUAL
20642: IFFALSE 20652
// sShovel := true ;
20644: LD_ADDR_EXP 89
20648: PUSH
20649: LD_INT 1
20651: ST_TO_ADDR
// if p3 = 25 then
20652: LD_VAR 0 3
20656: PUSH
20657: LD_INT 25
20659: EQUAL
20660: IFFALSE 20670
// sSheik := true ;
20662: LD_ADDR_EXP 90
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// if p3 = 26 then
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 26
20677: EQUAL
20678: IFFALSE 20688
// sEarthquake := true ;
20680: LD_ADDR_EXP 92
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// if p3 = 27 then
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 27
20695: EQUAL
20696: IFFALSE 20706
// sAI := true ;
20698: LD_ADDR_EXP 93
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// if p3 = 28 then
20706: LD_VAR 0 3
20710: PUSH
20711: LD_INT 28
20713: EQUAL
20714: IFFALSE 20724
// sCargo := true ;
20716: LD_ADDR_EXP 96
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if p3 = 29 then
20724: LD_VAR 0 3
20728: PUSH
20729: LD_INT 29
20731: EQUAL
20732: IFFALSE 20742
// sDLaser := true ;
20734: LD_ADDR_EXP 97
20738: PUSH
20739: LD_INT 1
20741: ST_TO_ADDR
// if p3 = 30 then
20742: LD_VAR 0 3
20746: PUSH
20747: LD_INT 30
20749: EQUAL
20750: IFFALSE 20760
// sExchange := true ;
20752: LD_ADDR_EXP 98
20756: PUSH
20757: LD_INT 1
20759: ST_TO_ADDR
// if p3 = 31 then
20760: LD_VAR 0 3
20764: PUSH
20765: LD_INT 31
20767: EQUAL
20768: IFFALSE 20778
// sFac := true ;
20770: LD_ADDR_EXP 99
20774: PUSH
20775: LD_INT 1
20777: ST_TO_ADDR
// if p3 = 32 then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 32
20785: EQUAL
20786: IFFALSE 20796
// sPower := true ;
20788: LD_ADDR_EXP 100
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
// if p3 = 33 then
20796: LD_VAR 0 3
20800: PUSH
20801: LD_INT 33
20803: EQUAL
20804: IFFALSE 20814
// sRandom := true ;
20806: LD_ADDR_EXP 101
20810: PUSH
20811: LD_INT 1
20813: ST_TO_ADDR
// if p3 = 34 then
20814: LD_VAR 0 3
20818: PUSH
20819: LD_INT 34
20821: EQUAL
20822: IFFALSE 20832
// sShield := true ;
20824: LD_ADDR_EXP 102
20828: PUSH
20829: LD_INT 1
20831: ST_TO_ADDR
// if p3 = 35 then
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 35
20839: EQUAL
20840: IFFALSE 20850
// sTime := true ;
20842: LD_ADDR_EXP 103
20846: PUSH
20847: LD_INT 1
20849: ST_TO_ADDR
// if p3 = 36 then
20850: LD_VAR 0 3
20854: PUSH
20855: LD_INT 36
20857: EQUAL
20858: IFFALSE 20868
// sTools := true ;
20860: LD_ADDR_EXP 104
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// if p3 = 101 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 101
20875: EQUAL
20876: IFFALSE 20886
// sSold := true ;
20878: LD_ADDR_EXP 69
20882: PUSH
20883: LD_INT 1
20885: ST_TO_ADDR
// if p3 = 102 then
20886: LD_VAR 0 3
20890: PUSH
20891: LD_INT 102
20893: EQUAL
20894: IFFALSE 20904
// sDiff := true ;
20896: LD_ADDR_EXP 70
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// if p3 = 103 then
20904: LD_VAR 0 3
20908: PUSH
20909: LD_INT 103
20911: EQUAL
20912: IFFALSE 20922
// sFog := true ;
20914: LD_ADDR_EXP 73
20918: PUSH
20919: LD_INT 1
20921: ST_TO_ADDR
// if p3 = 104 then
20922: LD_VAR 0 3
20926: PUSH
20927: LD_INT 104
20929: EQUAL
20930: IFFALSE 20940
// sReset := true ;
20932: LD_ADDR_EXP 74
20936: PUSH
20937: LD_INT 1
20939: ST_TO_ADDR
// if p3 = 105 then
20940: LD_VAR 0 3
20944: PUSH
20945: LD_INT 105
20947: EQUAL
20948: IFFALSE 20958
// sSun := true ;
20950: LD_ADDR_EXP 75
20954: PUSH
20955: LD_INT 1
20957: ST_TO_ADDR
// if p3 = 106 then
20958: LD_VAR 0 3
20962: PUSH
20963: LD_INT 106
20965: EQUAL
20966: IFFALSE 20976
// sTiger := true ;
20968: LD_ADDR_EXP 71
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// if p3 = 107 then
20976: LD_VAR 0 3
20980: PUSH
20981: LD_INT 107
20983: EQUAL
20984: IFFALSE 20994
// sBomb := true ;
20986: LD_ADDR_EXP 72
20990: PUSH
20991: LD_INT 1
20993: ST_TO_ADDR
// if p3 = 108 then
20994: LD_VAR 0 3
20998: PUSH
20999: LD_INT 108
21001: EQUAL
21002: IFFALSE 21012
// sWound := true ;
21004: LD_ADDR_EXP 80
21008: PUSH
21009: LD_INT 1
21011: ST_TO_ADDR
// if p3 = 109 then
21012: LD_VAR 0 3
21016: PUSH
21017: LD_INT 109
21019: EQUAL
21020: IFFALSE 21030
// sBetray := true ;
21022: LD_ADDR_EXP 84
21026: PUSH
21027: LD_INT 1
21029: ST_TO_ADDR
// if p3 = 110 then
21030: LD_VAR 0 3
21034: PUSH
21035: LD_INT 110
21037: EQUAL
21038: IFFALSE 21048
// sContamin := true ;
21040: LD_ADDR_EXP 85
21044: PUSH
21045: LD_INT 1
21047: ST_TO_ADDR
// if p3 = 111 then
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 111
21055: EQUAL
21056: IFFALSE 21066
// sOil := true ;
21058: LD_ADDR_EXP 87
21062: PUSH
21063: LD_INT 1
21065: ST_TO_ADDR
// if p3 = 112 then
21066: LD_VAR 0 3
21070: PUSH
21071: LD_INT 112
21073: EQUAL
21074: IFFALSE 21084
// sStu := true ;
21076: LD_ADDR_EXP 91
21080: PUSH
21081: LD_INT 1
21083: ST_TO_ADDR
// if p3 = 113 then
21084: LD_VAR 0 3
21088: PUSH
21089: LD_INT 113
21091: EQUAL
21092: IFFALSE 21102
// sBazooka := true ;
21094: LD_ADDR_EXP 94
21098: PUSH
21099: LD_INT 1
21101: ST_TO_ADDR
// if p3 = 114 then
21102: LD_VAR 0 3
21106: PUSH
21107: LD_INT 114
21109: EQUAL
21110: IFFALSE 21120
// sMortar := true ;
21112: LD_ADDR_EXP 95
21116: PUSH
21117: LD_INT 1
21119: ST_TO_ADDR
// if p3 = 115 then
21120: LD_VAR 0 3
21124: PUSH
21125: LD_INT 115
21127: EQUAL
21128: IFFALSE 21138
// sRanger := true ;
21130: LD_ADDR_EXP 105
21134: PUSH
21135: LD_INT 1
21137: ST_TO_ADDR
// if p3 = 116 then
21138: LD_VAR 0 3
21142: PUSH
21143: LD_INT 116
21145: EQUAL
21146: IFFALSE 21156
// sComputer := true ;
21148: LD_ADDR_EXP 106
21152: PUSH
21153: LD_INT 1
21155: ST_TO_ADDR
// if p3 = 117 then
21156: LD_VAR 0 3
21160: PUSH
21161: LD_INT 117
21163: EQUAL
21164: IFFALSE 21174
// s30 := true ;
21166: LD_ADDR_EXP 107
21170: PUSH
21171: LD_INT 1
21173: ST_TO_ADDR
// if p3 = 118 then
21174: LD_VAR 0 3
21178: PUSH
21179: LD_INT 118
21181: EQUAL
21182: IFFALSE 21192
// s60 := true ;
21184: LD_ADDR_EXP 108
21188: PUSH
21189: LD_INT 1
21191: ST_TO_ADDR
// end ; if p2 = hack_mode then
21192: LD_VAR 0 2
21196: PUSH
21197: LD_INT 101
21199: EQUAL
21200: IFFALSE 21328
// begin case p3 of 1 :
21202: LD_VAR 0 3
21206: PUSH
21207: LD_INT 1
21209: DOUBLE
21210: EQUAL
21211: IFTRUE 21215
21213: GO 21222
21215: POP
// hHackUnlimitedResources ; 2 :
21216: CALL 33475 0 0
21220: GO 21328
21222: LD_INT 2
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21237
21230: POP
// hHackSetLevel10 ; 3 :
21231: CALL 33608 0 0
21235: GO 21328
21237: LD_INT 3
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21252
21245: POP
// hHackSetLevel10YourUnits ; 4 :
21246: CALL 33693 0 0
21250: GO 21328
21252: LD_INT 4
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21267
21260: POP
// hHackInvincible ; 5 :
21261: CALL 34141 0 0
21265: GO 21328
21267: LD_INT 5
21269: DOUBLE
21270: EQUAL
21271: IFTRUE 21275
21273: GO 21282
21275: POP
// hHackInvisible ; 6 :
21276: CALL 34252 0 0
21280: GO 21328
21282: LD_INT 6
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21297
21290: POP
// hHackChangeYourSide ; 7 :
21291: CALL 34309 0 0
21295: GO 21328
21297: LD_INT 7
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21312
21305: POP
// hHackChangeUnitSide ; 8 :
21306: CALL 34351 0 0
21310: GO 21328
21312: LD_INT 8
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21327
21320: POP
// hHackFog ; end ;
21321: CALL 34452 0 0
21325: GO 21328
21327: POP
// end ; if p2 = game_save_mode then
21328: LD_VAR 0 2
21332: PUSH
21333: LD_INT 102
21335: EQUAL
21336: IFFALSE 21391
// begin if p3 = 1 then
21338: LD_VAR 0 3
21342: PUSH
21343: LD_INT 1
21345: EQUAL
21346: IFFALSE 21358
// globalGameSaveCounter := p4 ;
21348: LD_ADDR_EXP 51
21352: PUSH
21353: LD_VAR 0 4
21357: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21358: LD_VAR 0 3
21362: PUSH
21363: LD_INT 2
21365: EQUAL
21366: PUSH
21367: LD_EXP 51
21371: AND
21372: IFFALSE 21391
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21374: LD_STRING setGameSaveCounter(
21376: PUSH
21377: LD_EXP 51
21381: STR
21382: PUSH
21383: LD_STRING )
21385: STR
21386: PPUSH
21387: CALL_OW 559
// end ; end ;
21391: LD_VAR 0 7
21395: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21396: LD_INT 0
21398: PPUSH
// streamModeActive := false ;
21399: LD_ADDR_EXP 52
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// normalCounter := 36 ;
21407: LD_ADDR_EXP 53
21411: PUSH
21412: LD_INT 36
21414: ST_TO_ADDR
// hardcoreCounter := 18 ;
21415: LD_ADDR_EXP 54
21419: PUSH
21420: LD_INT 18
21422: ST_TO_ADDR
// sRocket := false ;
21423: LD_ADDR_EXP 57
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sSpeed := false ;
21431: LD_ADDR_EXP 56
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sEngine := false ;
21439: LD_ADDR_EXP 58
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sSpec := false ;
21447: LD_ADDR_EXP 55
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sLevel := false ;
21455: LD_ADDR_EXP 59
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// sArmoury := false ;
21463: LD_ADDR_EXP 60
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
// sRadar := false ;
21471: LD_ADDR_EXP 61
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// sBunker := false ;
21479: LD_ADDR_EXP 62
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sHack := false ;
21487: LD_ADDR_EXP 63
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sFire := false ;
21495: LD_ADDR_EXP 64
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sRefresh := false ;
21503: LD_ADDR_EXP 65
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sExp := false ;
21511: LD_ADDR_EXP 66
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// sDepot := false ;
21519: LD_ADDR_EXP 67
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// sFlag := false ;
21527: LD_ADDR_EXP 68
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// sKamikadze := false ;
21535: LD_ADDR_EXP 76
21539: PUSH
21540: LD_INT 0
21542: ST_TO_ADDR
// sTroll := false ;
21543: LD_ADDR_EXP 77
21547: PUSH
21548: LD_INT 0
21550: ST_TO_ADDR
// sSlow := false ;
21551: LD_ADDR_EXP 78
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// sLack := false ;
21559: LD_ADDR_EXP 79
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// sTank := false ;
21567: LD_ADDR_EXP 81
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sRemote := false ;
21575: LD_ADDR_EXP 82
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// sPowell := false ;
21583: LD_ADDR_EXP 83
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sTeleport := false ;
21591: LD_ADDR_EXP 86
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sOilTower := false ;
21599: LD_ADDR_EXP 88
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sShovel := false ;
21607: LD_ADDR_EXP 89
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sSheik := false ;
21615: LD_ADDR_EXP 90
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sEarthquake := false ;
21623: LD_ADDR_EXP 92
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sAI := false ;
21631: LD_ADDR_EXP 93
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sCargo := false ;
21639: LD_ADDR_EXP 96
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sDLaser := false ;
21647: LD_ADDR_EXP 97
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sExchange := false ;
21655: LD_ADDR_EXP 98
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sFac := false ;
21663: LD_ADDR_EXP 99
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sPower := false ;
21671: LD_ADDR_EXP 100
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sRandom := false ;
21679: LD_ADDR_EXP 101
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sShield := false ;
21687: LD_ADDR_EXP 102
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sTime := false ;
21695: LD_ADDR_EXP 103
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sTools := false ;
21703: LD_ADDR_EXP 104
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sSold := false ;
21711: LD_ADDR_EXP 69
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sDiff := false ;
21719: LD_ADDR_EXP 70
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sFog := false ;
21727: LD_ADDR_EXP 73
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sReset := false ;
21735: LD_ADDR_EXP 74
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sSun := false ;
21743: LD_ADDR_EXP 75
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTiger := false ;
21751: LD_ADDR_EXP 71
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sBomb := false ;
21759: LD_ADDR_EXP 72
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sWound := false ;
21767: LD_ADDR_EXP 80
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sBetray := false ;
21775: LD_ADDR_EXP 84
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sContamin := false ;
21783: LD_ADDR_EXP 85
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sOil := false ;
21791: LD_ADDR_EXP 87
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sStu := false ;
21799: LD_ADDR_EXP 91
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sBazooka := false ;
21807: LD_ADDR_EXP 94
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sMortar := false ;
21815: LD_ADDR_EXP 95
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sRanger := false ;
21823: LD_ADDR_EXP 105
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sComputer := false ;
21831: LD_ADDR_EXP 106
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// s30 := false ;
21839: LD_ADDR_EXP 107
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// s60 := false ;
21847: LD_ADDR_EXP 108
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// end ;
21855: LD_VAR 0 1
21859: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
// result := [ ] ;
21869: LD_ADDR_VAR 0 2
21873: PUSH
21874: EMPTY
21875: ST_TO_ADDR
// if campaign_id = 1 then
21876: LD_OWVAR 69
21880: PUSH
21881: LD_INT 1
21883: EQUAL
21884: IFFALSE 25050
// begin case mission_number of 1 :
21886: LD_OWVAR 70
21890: PUSH
21891: LD_INT 1
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 21975
21899: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21900: LD_ADDR_VAR 0 2
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 4
21910: PUSH
21911: LD_INT 11
21913: PUSH
21914: LD_INT 12
21916: PUSH
21917: LD_INT 15
21919: PUSH
21920: LD_INT 16
21922: PUSH
21923: LD_INT 22
21925: PUSH
21926: LD_INT 23
21928: PUSH
21929: LD_INT 26
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 101
21945: PUSH
21946: LD_INT 102
21948: PUSH
21949: LD_INT 106
21951: PUSH
21952: LD_INT 116
21954: PUSH
21955: LD_INT 117
21957: PUSH
21958: LD_INT 118
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: ST_TO_ADDR
21973: GO 25048
21975: LD_INT 2
21977: DOUBLE
21978: EQUAL
21979: IFTRUE 21983
21981: GO 22067
21983: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21984: LD_ADDR_VAR 0 2
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 4
21994: PUSH
21995: LD_INT 11
21997: PUSH
21998: LD_INT 12
22000: PUSH
22001: LD_INT 15
22003: PUSH
22004: LD_INT 16
22006: PUSH
22007: LD_INT 22
22009: PUSH
22010: LD_INT 23
22012: PUSH
22013: LD_INT 26
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 101
22029: PUSH
22030: LD_INT 102
22032: PUSH
22033: LD_INT 105
22035: PUSH
22036: LD_INT 106
22038: PUSH
22039: LD_INT 108
22041: PUSH
22042: LD_INT 116
22044: PUSH
22045: LD_INT 117
22047: PUSH
22048: LD_INT 118
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 25048
22067: LD_INT 3
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22163
22075: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 11
22092: PUSH
22093: LD_INT 12
22095: PUSH
22096: LD_INT 15
22098: PUSH
22099: LD_INT 16
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 26
22107: PUSH
22108: LD_INT 36
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 101
22125: PUSH
22126: LD_INT 102
22128: PUSH
22129: LD_INT 105
22131: PUSH
22132: LD_INT 106
22134: PUSH
22135: LD_INT 108
22137: PUSH
22138: LD_INT 116
22140: PUSH
22141: LD_INT 117
22143: PUSH
22144: LD_INT 118
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: ST_TO_ADDR
22161: GO 25048
22163: LD_INT 4
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22267
22171: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22172: LD_ADDR_VAR 0 2
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: LD_INT 4
22182: PUSH
22183: LD_INT 5
22185: PUSH
22186: LD_INT 8
22188: PUSH
22189: LD_INT 11
22191: PUSH
22192: LD_INT 12
22194: PUSH
22195: LD_INT 15
22197: PUSH
22198: LD_INT 16
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 36
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 101
22229: PUSH
22230: LD_INT 102
22232: PUSH
22233: LD_INT 105
22235: PUSH
22236: LD_INT 106
22238: PUSH
22239: LD_INT 108
22241: PUSH
22242: LD_INT 116
22244: PUSH
22245: LD_INT 117
22247: PUSH
22248: LD_INT 118
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: ST_TO_ADDR
22265: GO 25048
22267: LD_INT 5
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22387
22275: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22276: LD_ADDR_VAR 0 2
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: LD_INT 4
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: LD_INT 6
22292: PUSH
22293: LD_INT 8
22295: PUSH
22296: LD_INT 11
22298: PUSH
22299: LD_INT 12
22301: PUSH
22302: LD_INT 15
22304: PUSH
22305: LD_INT 16
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_INT 23
22313: PUSH
22314: LD_INT 25
22316: PUSH
22317: LD_INT 26
22319: PUSH
22320: LD_INT 36
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 101
22341: PUSH
22342: LD_INT 102
22344: PUSH
22345: LD_INT 105
22347: PUSH
22348: LD_INT 106
22350: PUSH
22351: LD_INT 108
22353: PUSH
22354: LD_INT 109
22356: PUSH
22357: LD_INT 112
22359: PUSH
22360: LD_INT 116
22362: PUSH
22363: LD_INT 117
22365: PUSH
22366: LD_INT 118
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: ST_TO_ADDR
22385: GO 25048
22387: LD_INT 6
22389: DOUBLE
22390: EQUAL
22391: IFTRUE 22395
22393: GO 22527
22395: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22396: LD_ADDR_VAR 0 2
22400: PUSH
22401: LD_INT 2
22403: PUSH
22404: LD_INT 4
22406: PUSH
22407: LD_INT 5
22409: PUSH
22410: LD_INT 6
22412: PUSH
22413: LD_INT 8
22415: PUSH
22416: LD_INT 11
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: LD_INT 15
22424: PUSH
22425: LD_INT 16
22427: PUSH
22428: LD_INT 20
22430: PUSH
22431: LD_INT 21
22433: PUSH
22434: LD_INT 22
22436: PUSH
22437: LD_INT 23
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 26
22445: PUSH
22446: LD_INT 30
22448: PUSH
22449: LD_INT 31
22451: PUSH
22452: LD_INT 32
22454: PUSH
22455: LD_INT 36
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 101
22481: PUSH
22482: LD_INT 102
22484: PUSH
22485: LD_INT 105
22487: PUSH
22488: LD_INT 106
22490: PUSH
22491: LD_INT 108
22493: PUSH
22494: LD_INT 109
22496: PUSH
22497: LD_INT 112
22499: PUSH
22500: LD_INT 116
22502: PUSH
22503: LD_INT 117
22505: PUSH
22506: LD_INT 118
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: ST_TO_ADDR
22525: GO 25048
22527: LD_INT 7
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 22647
22535: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22536: LD_ADDR_VAR 0 2
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 4
22546: PUSH
22547: LD_INT 5
22549: PUSH
22550: LD_INT 7
22552: PUSH
22553: LD_INT 11
22555: PUSH
22556: LD_INT 12
22558: PUSH
22559: LD_INT 15
22561: PUSH
22562: LD_INT 16
22564: PUSH
22565: LD_INT 20
22567: PUSH
22568: LD_INT 21
22570: PUSH
22571: LD_INT 22
22573: PUSH
22574: LD_INT 23
22576: PUSH
22577: LD_INT 25
22579: PUSH
22580: LD_INT 26
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 101
22601: PUSH
22602: LD_INT 102
22604: PUSH
22605: LD_INT 103
22607: PUSH
22608: LD_INT 105
22610: PUSH
22611: LD_INT 106
22613: PUSH
22614: LD_INT 108
22616: PUSH
22617: LD_INT 112
22619: PUSH
22620: LD_INT 116
22622: PUSH
22623: LD_INT 117
22625: PUSH
22626: LD_INT 118
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: ST_TO_ADDR
22645: GO 25048
22647: LD_INT 8
22649: DOUBLE
22650: EQUAL
22651: IFTRUE 22655
22653: GO 22795
22655: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22656: LD_ADDR_VAR 0 2
22660: PUSH
22661: LD_INT 2
22663: PUSH
22664: LD_INT 4
22666: PUSH
22667: LD_INT 5
22669: PUSH
22670: LD_INT 6
22672: PUSH
22673: LD_INT 7
22675: PUSH
22676: LD_INT 8
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 15
22687: PUSH
22688: LD_INT 16
22690: PUSH
22691: LD_INT 20
22693: PUSH
22694: LD_INT 21
22696: PUSH
22697: LD_INT 22
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 25
22705: PUSH
22706: LD_INT 26
22708: PUSH
22709: LD_INT 30
22711: PUSH
22712: LD_INT 31
22714: PUSH
22715: LD_INT 32
22717: PUSH
22718: LD_INT 36
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 101
22745: PUSH
22746: LD_INT 102
22748: PUSH
22749: LD_INT 103
22751: PUSH
22752: LD_INT 105
22754: PUSH
22755: LD_INT 106
22757: PUSH
22758: LD_INT 108
22760: PUSH
22761: LD_INT 109
22763: PUSH
22764: LD_INT 112
22766: PUSH
22767: LD_INT 116
22769: PUSH
22770: LD_INT 117
22772: PUSH
22773: LD_INT 118
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: ST_TO_ADDR
22793: GO 25048
22795: LD_INT 9
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22951
22803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: LD_INT 4
22814: PUSH
22815: LD_INT 5
22817: PUSH
22818: LD_INT 6
22820: PUSH
22821: LD_INT 7
22823: PUSH
22824: LD_INT 8
22826: PUSH
22827: LD_INT 11
22829: PUSH
22830: LD_INT 12
22832: PUSH
22833: LD_INT 15
22835: PUSH
22836: LD_INT 16
22838: PUSH
22839: LD_INT 20
22841: PUSH
22842: LD_INT 21
22844: PUSH
22845: LD_INT 22
22847: PUSH
22848: LD_INT 23
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 28
22859: PUSH
22860: LD_INT 30
22862: PUSH
22863: LD_INT 31
22865: PUSH
22866: LD_INT 32
22868: PUSH
22869: LD_INT 36
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 101
22897: PUSH
22898: LD_INT 102
22900: PUSH
22901: LD_INT 103
22903: PUSH
22904: LD_INT 105
22906: PUSH
22907: LD_INT 106
22909: PUSH
22910: LD_INT 108
22912: PUSH
22913: LD_INT 109
22915: PUSH
22916: LD_INT 112
22918: PUSH
22919: LD_INT 114
22921: PUSH
22922: LD_INT 116
22924: PUSH
22925: LD_INT 117
22927: PUSH
22928: LD_INT 118
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: ST_TO_ADDR
22949: GO 25048
22951: LD_INT 10
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 23155
22959: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22960: LD_ADDR_VAR 0 2
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 4
22970: PUSH
22971: LD_INT 5
22973: PUSH
22974: LD_INT 6
22976: PUSH
22977: LD_INT 7
22979: PUSH
22980: LD_INT 8
22982: PUSH
22983: LD_INT 9
22985: PUSH
22986: LD_INT 10
22988: PUSH
22989: LD_INT 11
22991: PUSH
22992: LD_INT 12
22994: PUSH
22995: LD_INT 13
22997: PUSH
22998: LD_INT 14
23000: PUSH
23001: LD_INT 15
23003: PUSH
23004: LD_INT 16
23006: PUSH
23007: LD_INT 17
23009: PUSH
23010: LD_INT 18
23012: PUSH
23013: LD_INT 19
23015: PUSH
23016: LD_INT 20
23018: PUSH
23019: LD_INT 21
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_INT 23
23027: PUSH
23028: LD_INT 24
23030: PUSH
23031: LD_INT 25
23033: PUSH
23034: LD_INT 26
23036: PUSH
23037: LD_INT 28
23039: PUSH
23040: LD_INT 30
23042: PUSH
23043: LD_INT 31
23045: PUSH
23046: LD_INT 32
23048: PUSH
23049: LD_INT 36
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 101
23085: PUSH
23086: LD_INT 102
23088: PUSH
23089: LD_INT 103
23091: PUSH
23092: LD_INT 104
23094: PUSH
23095: LD_INT 105
23097: PUSH
23098: LD_INT 106
23100: PUSH
23101: LD_INT 107
23103: PUSH
23104: LD_INT 108
23106: PUSH
23107: LD_INT 109
23109: PUSH
23110: LD_INT 110
23112: PUSH
23113: LD_INT 111
23115: PUSH
23116: LD_INT 112
23118: PUSH
23119: LD_INT 114
23121: PUSH
23122: LD_INT 116
23124: PUSH
23125: LD_INT 117
23127: PUSH
23128: LD_INT 118
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: ST_TO_ADDR
23153: GO 25048
23155: LD_INT 11
23157: DOUBLE
23158: EQUAL
23159: IFTRUE 23163
23161: GO 23367
23163: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23164: LD_ADDR_VAR 0 2
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 3
23174: PUSH
23175: LD_INT 4
23177: PUSH
23178: LD_INT 5
23180: PUSH
23181: LD_INT 6
23183: PUSH
23184: LD_INT 7
23186: PUSH
23187: LD_INT 8
23189: PUSH
23190: LD_INT 9
23192: PUSH
23193: LD_INT 10
23195: PUSH
23196: LD_INT 11
23198: PUSH
23199: LD_INT 12
23201: PUSH
23202: LD_INT 13
23204: PUSH
23205: LD_INT 14
23207: PUSH
23208: LD_INT 15
23210: PUSH
23211: LD_INT 16
23213: PUSH
23214: LD_INT 17
23216: PUSH
23217: LD_INT 18
23219: PUSH
23220: LD_INT 19
23222: PUSH
23223: LD_INT 20
23225: PUSH
23226: LD_INT 21
23228: PUSH
23229: LD_INT 22
23231: PUSH
23232: LD_INT 23
23234: PUSH
23235: LD_INT 24
23237: PUSH
23238: LD_INT 25
23240: PUSH
23241: LD_INT 26
23243: PUSH
23244: LD_INT 28
23246: PUSH
23247: LD_INT 30
23249: PUSH
23250: LD_INT 31
23252: PUSH
23253: LD_INT 32
23255: PUSH
23256: LD_INT 34
23258: PUSH
23259: LD_INT 36
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 101
23297: PUSH
23298: LD_INT 102
23300: PUSH
23301: LD_INT 103
23303: PUSH
23304: LD_INT 104
23306: PUSH
23307: LD_INT 105
23309: PUSH
23310: LD_INT 106
23312: PUSH
23313: LD_INT 107
23315: PUSH
23316: LD_INT 108
23318: PUSH
23319: LD_INT 109
23321: PUSH
23322: LD_INT 110
23324: PUSH
23325: LD_INT 111
23327: PUSH
23328: LD_INT 112
23330: PUSH
23331: LD_INT 114
23333: PUSH
23334: LD_INT 116
23336: PUSH
23337: LD_INT 117
23339: PUSH
23340: LD_INT 118
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: ST_TO_ADDR
23365: GO 25048
23367: LD_INT 12
23369: DOUBLE
23370: EQUAL
23371: IFTRUE 23375
23373: GO 23595
23375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 2
23386: PUSH
23387: LD_INT 3
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 6
23398: PUSH
23399: LD_INT 7
23401: PUSH
23402: LD_INT 8
23404: PUSH
23405: LD_INT 9
23407: PUSH
23408: LD_INT 10
23410: PUSH
23411: LD_INT 11
23413: PUSH
23414: LD_INT 12
23416: PUSH
23417: LD_INT 13
23419: PUSH
23420: LD_INT 14
23422: PUSH
23423: LD_INT 15
23425: PUSH
23426: LD_INT 16
23428: PUSH
23429: LD_INT 17
23431: PUSH
23432: LD_INT 18
23434: PUSH
23435: LD_INT 19
23437: PUSH
23438: LD_INT 20
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 22
23446: PUSH
23447: LD_INT 23
23449: PUSH
23450: LD_INT 24
23452: PUSH
23453: LD_INT 25
23455: PUSH
23456: LD_INT 26
23458: PUSH
23459: LD_INT 27
23461: PUSH
23462: LD_INT 28
23464: PUSH
23465: LD_INT 30
23467: PUSH
23468: LD_INT 31
23470: PUSH
23471: LD_INT 32
23473: PUSH
23474: LD_INT 33
23476: PUSH
23477: LD_INT 34
23479: PUSH
23480: LD_INT 36
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 101
23521: PUSH
23522: LD_INT 102
23524: PUSH
23525: LD_INT 103
23527: PUSH
23528: LD_INT 104
23530: PUSH
23531: LD_INT 105
23533: PUSH
23534: LD_INT 106
23536: PUSH
23537: LD_INT 107
23539: PUSH
23540: LD_INT 108
23542: PUSH
23543: LD_INT 109
23545: PUSH
23546: LD_INT 110
23548: PUSH
23549: LD_INT 111
23551: PUSH
23552: LD_INT 112
23554: PUSH
23555: LD_INT 113
23557: PUSH
23558: LD_INT 114
23560: PUSH
23561: LD_INT 116
23563: PUSH
23564: LD_INT 117
23566: PUSH
23567: LD_INT 118
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: ST_TO_ADDR
23593: GO 25048
23595: LD_INT 13
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23811
23603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23604: LD_ADDR_VAR 0 2
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: LD_INT 4
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: LD_INT 8
23626: PUSH
23627: LD_INT 9
23629: PUSH
23630: LD_INT 10
23632: PUSH
23633: LD_INT 11
23635: PUSH
23636: LD_INT 12
23638: PUSH
23639: LD_INT 14
23641: PUSH
23642: LD_INT 15
23644: PUSH
23645: LD_INT 16
23647: PUSH
23648: LD_INT 17
23650: PUSH
23651: LD_INT 18
23653: PUSH
23654: LD_INT 19
23656: PUSH
23657: LD_INT 20
23659: PUSH
23660: LD_INT 21
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 23
23668: PUSH
23669: LD_INT 24
23671: PUSH
23672: LD_INT 25
23674: PUSH
23675: LD_INT 26
23677: PUSH
23678: LD_INT 27
23680: PUSH
23681: LD_INT 28
23683: PUSH
23684: LD_INT 30
23686: PUSH
23687: LD_INT 31
23689: PUSH
23690: LD_INT 32
23692: PUSH
23693: LD_INT 33
23695: PUSH
23696: LD_INT 34
23698: PUSH
23699: LD_INT 36
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 101
23737: PUSH
23738: LD_INT 102
23740: PUSH
23741: LD_INT 103
23743: PUSH
23744: LD_INT 104
23746: PUSH
23747: LD_INT 105
23749: PUSH
23750: LD_INT 106
23752: PUSH
23753: LD_INT 107
23755: PUSH
23756: LD_INT 108
23758: PUSH
23759: LD_INT 109
23761: PUSH
23762: LD_INT 110
23764: PUSH
23765: LD_INT 111
23767: PUSH
23768: LD_INT 112
23770: PUSH
23771: LD_INT 113
23773: PUSH
23774: LD_INT 114
23776: PUSH
23777: LD_INT 116
23779: PUSH
23780: LD_INT 117
23782: PUSH
23783: LD_INT 118
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: ST_TO_ADDR
23809: GO 25048
23811: LD_INT 14
23813: DOUBLE
23814: EQUAL
23815: IFTRUE 23819
23817: GO 24043
23819: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: LD_INT 4
23836: PUSH
23837: LD_INT 5
23839: PUSH
23840: LD_INT 6
23842: PUSH
23843: LD_INT 7
23845: PUSH
23846: LD_INT 8
23848: PUSH
23849: LD_INT 9
23851: PUSH
23852: LD_INT 10
23854: PUSH
23855: LD_INT 11
23857: PUSH
23858: LD_INT 12
23860: PUSH
23861: LD_INT 13
23863: PUSH
23864: LD_INT 14
23866: PUSH
23867: LD_INT 15
23869: PUSH
23870: LD_INT 16
23872: PUSH
23873: LD_INT 17
23875: PUSH
23876: LD_INT 18
23878: PUSH
23879: LD_INT 19
23881: PUSH
23882: LD_INT 20
23884: PUSH
23885: LD_INT 21
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_INT 23
23893: PUSH
23894: LD_INT 24
23896: PUSH
23897: LD_INT 25
23899: PUSH
23900: LD_INT 26
23902: PUSH
23903: LD_INT 27
23905: PUSH
23906: LD_INT 28
23908: PUSH
23909: LD_INT 29
23911: PUSH
23912: LD_INT 30
23914: PUSH
23915: LD_INT 31
23917: PUSH
23918: LD_INT 32
23920: PUSH
23921: LD_INT 33
23923: PUSH
23924: LD_INT 34
23926: PUSH
23927: LD_INT 36
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 101
23969: PUSH
23970: LD_INT 102
23972: PUSH
23973: LD_INT 103
23975: PUSH
23976: LD_INT 104
23978: PUSH
23979: LD_INT 105
23981: PUSH
23982: LD_INT 106
23984: PUSH
23985: LD_INT 107
23987: PUSH
23988: LD_INT 108
23990: PUSH
23991: LD_INT 109
23993: PUSH
23994: LD_INT 110
23996: PUSH
23997: LD_INT 111
23999: PUSH
24000: LD_INT 112
24002: PUSH
24003: LD_INT 113
24005: PUSH
24006: LD_INT 114
24008: PUSH
24009: LD_INT 116
24011: PUSH
24012: LD_INT 117
24014: PUSH
24015: LD_INT 118
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: ST_TO_ADDR
24041: GO 25048
24043: LD_INT 15
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24275
24051: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24052: LD_ADDR_VAR 0 2
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: LD_INT 3
24065: PUSH
24066: LD_INT 4
24068: PUSH
24069: LD_INT 5
24071: PUSH
24072: LD_INT 6
24074: PUSH
24075: LD_INT 7
24077: PUSH
24078: LD_INT 8
24080: PUSH
24081: LD_INT 9
24083: PUSH
24084: LD_INT 10
24086: PUSH
24087: LD_INT 11
24089: PUSH
24090: LD_INT 12
24092: PUSH
24093: LD_INT 13
24095: PUSH
24096: LD_INT 14
24098: PUSH
24099: LD_INT 15
24101: PUSH
24102: LD_INT 16
24104: PUSH
24105: LD_INT 17
24107: PUSH
24108: LD_INT 18
24110: PUSH
24111: LD_INT 19
24113: PUSH
24114: LD_INT 20
24116: PUSH
24117: LD_INT 21
24119: PUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 23
24125: PUSH
24126: LD_INT 24
24128: PUSH
24129: LD_INT 25
24131: PUSH
24132: LD_INT 26
24134: PUSH
24135: LD_INT 27
24137: PUSH
24138: LD_INT 28
24140: PUSH
24141: LD_INT 29
24143: PUSH
24144: LD_INT 30
24146: PUSH
24147: LD_INT 31
24149: PUSH
24150: LD_INT 32
24152: PUSH
24153: LD_INT 33
24155: PUSH
24156: LD_INT 34
24158: PUSH
24159: LD_INT 36
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 101
24201: PUSH
24202: LD_INT 102
24204: PUSH
24205: LD_INT 103
24207: PUSH
24208: LD_INT 104
24210: PUSH
24211: LD_INT 105
24213: PUSH
24214: LD_INT 106
24216: PUSH
24217: LD_INT 107
24219: PUSH
24220: LD_INT 108
24222: PUSH
24223: LD_INT 109
24225: PUSH
24226: LD_INT 110
24228: PUSH
24229: LD_INT 111
24231: PUSH
24232: LD_INT 112
24234: PUSH
24235: LD_INT 113
24237: PUSH
24238: LD_INT 114
24240: PUSH
24241: LD_INT 116
24243: PUSH
24244: LD_INT 117
24246: PUSH
24247: LD_INT 118
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: ST_TO_ADDR
24273: GO 25048
24275: LD_INT 16
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24419
24283: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 4
24294: PUSH
24295: LD_INT 5
24297: PUSH
24298: LD_INT 7
24300: PUSH
24301: LD_INT 11
24303: PUSH
24304: LD_INT 12
24306: PUSH
24307: LD_INT 15
24309: PUSH
24310: LD_INT 16
24312: PUSH
24313: LD_INT 20
24315: PUSH
24316: LD_INT 21
24318: PUSH
24319: LD_INT 22
24321: PUSH
24322: LD_INT 23
24324: PUSH
24325: LD_INT 25
24327: PUSH
24328: LD_INT 26
24330: PUSH
24331: LD_INT 30
24333: PUSH
24334: LD_INT 31
24336: PUSH
24337: LD_INT 32
24339: PUSH
24340: LD_INT 33
24342: PUSH
24343: LD_INT 34
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 101
24369: PUSH
24370: LD_INT 102
24372: PUSH
24373: LD_INT 103
24375: PUSH
24376: LD_INT 106
24378: PUSH
24379: LD_INT 108
24381: PUSH
24382: LD_INT 112
24384: PUSH
24385: LD_INT 113
24387: PUSH
24388: LD_INT 114
24390: PUSH
24391: LD_INT 116
24393: PUSH
24394: LD_INT 117
24396: PUSH
24397: LD_INT 118
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: ST_TO_ADDR
24417: GO 25048
24419: LD_INT 17
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24651
24427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: LD_INT 4
24444: PUSH
24445: LD_INT 5
24447: PUSH
24448: LD_INT 6
24450: PUSH
24451: LD_INT 7
24453: PUSH
24454: LD_INT 8
24456: PUSH
24457: LD_INT 9
24459: PUSH
24460: LD_INT 10
24462: PUSH
24463: LD_INT 11
24465: PUSH
24466: LD_INT 12
24468: PUSH
24469: LD_INT 13
24471: PUSH
24472: LD_INT 14
24474: PUSH
24475: LD_INT 15
24477: PUSH
24478: LD_INT 16
24480: PUSH
24481: LD_INT 17
24483: PUSH
24484: LD_INT 18
24486: PUSH
24487: LD_INT 19
24489: PUSH
24490: LD_INT 20
24492: PUSH
24493: LD_INT 21
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_INT 23
24501: PUSH
24502: LD_INT 24
24504: PUSH
24505: LD_INT 25
24507: PUSH
24508: LD_INT 26
24510: PUSH
24511: LD_INT 27
24513: PUSH
24514: LD_INT 28
24516: PUSH
24517: LD_INT 29
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 31
24525: PUSH
24526: LD_INT 32
24528: PUSH
24529: LD_INT 33
24531: PUSH
24532: LD_INT 34
24534: PUSH
24535: LD_INT 36
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 101
24577: PUSH
24578: LD_INT 102
24580: PUSH
24581: LD_INT 103
24583: PUSH
24584: LD_INT 104
24586: PUSH
24587: LD_INT 105
24589: PUSH
24590: LD_INT 106
24592: PUSH
24593: LD_INT 107
24595: PUSH
24596: LD_INT 108
24598: PUSH
24599: LD_INT 109
24601: PUSH
24602: LD_INT 110
24604: PUSH
24605: LD_INT 111
24607: PUSH
24608: LD_INT 112
24610: PUSH
24611: LD_INT 113
24613: PUSH
24614: LD_INT 114
24616: PUSH
24617: LD_INT 116
24619: PUSH
24620: LD_INT 117
24622: PUSH
24623: LD_INT 118
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: ST_TO_ADDR
24649: GO 25048
24651: LD_INT 18
24653: DOUBLE
24654: EQUAL
24655: IFTRUE 24659
24657: GO 24807
24659: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24660: LD_ADDR_VAR 0 2
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 4
24670: PUSH
24671: LD_INT 5
24673: PUSH
24674: LD_INT 7
24676: PUSH
24677: LD_INT 11
24679: PUSH
24680: LD_INT 12
24682: PUSH
24683: LD_INT 15
24685: PUSH
24686: LD_INT 16
24688: PUSH
24689: LD_INT 20
24691: PUSH
24692: LD_INT 21
24694: PUSH
24695: LD_INT 22
24697: PUSH
24698: LD_INT 23
24700: PUSH
24701: LD_INT 25
24703: PUSH
24704: LD_INT 26
24706: PUSH
24707: LD_INT 30
24709: PUSH
24710: LD_INT 31
24712: PUSH
24713: LD_INT 32
24715: PUSH
24716: LD_INT 33
24718: PUSH
24719: LD_INT 34
24721: PUSH
24722: LD_INT 35
24724: PUSH
24725: LD_INT 36
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 101
24753: PUSH
24754: LD_INT 102
24756: PUSH
24757: LD_INT 103
24759: PUSH
24760: LD_INT 106
24762: PUSH
24763: LD_INT 108
24765: PUSH
24766: LD_INT 112
24768: PUSH
24769: LD_INT 113
24771: PUSH
24772: LD_INT 114
24774: PUSH
24775: LD_INT 115
24777: PUSH
24778: LD_INT 116
24780: PUSH
24781: LD_INT 117
24783: PUSH
24784: LD_INT 118
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: ST_TO_ADDR
24805: GO 25048
24807: LD_INT 19
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 25047
24815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24816: LD_ADDR_VAR 0 2
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 4
24832: PUSH
24833: LD_INT 5
24835: PUSH
24836: LD_INT 6
24838: PUSH
24839: LD_INT 7
24841: PUSH
24842: LD_INT 8
24844: PUSH
24845: LD_INT 9
24847: PUSH
24848: LD_INT 10
24850: PUSH
24851: LD_INT 11
24853: PUSH
24854: LD_INT 12
24856: PUSH
24857: LD_INT 13
24859: PUSH
24860: LD_INT 14
24862: PUSH
24863: LD_INT 15
24865: PUSH
24866: LD_INT 16
24868: PUSH
24869: LD_INT 17
24871: PUSH
24872: LD_INT 18
24874: PUSH
24875: LD_INT 19
24877: PUSH
24878: LD_INT 20
24880: PUSH
24881: LD_INT 21
24883: PUSH
24884: LD_INT 22
24886: PUSH
24887: LD_INT 23
24889: PUSH
24890: LD_INT 24
24892: PUSH
24893: LD_INT 25
24895: PUSH
24896: LD_INT 26
24898: PUSH
24899: LD_INT 27
24901: PUSH
24902: LD_INT 28
24904: PUSH
24905: LD_INT 29
24907: PUSH
24908: LD_INT 30
24910: PUSH
24911: LD_INT 31
24913: PUSH
24914: LD_INT 32
24916: PUSH
24917: LD_INT 33
24919: PUSH
24920: LD_INT 34
24922: PUSH
24923: LD_INT 35
24925: PUSH
24926: LD_INT 36
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 101
24969: PUSH
24970: LD_INT 102
24972: PUSH
24973: LD_INT 103
24975: PUSH
24976: LD_INT 104
24978: PUSH
24979: LD_INT 105
24981: PUSH
24982: LD_INT 106
24984: PUSH
24985: LD_INT 107
24987: PUSH
24988: LD_INT 108
24990: PUSH
24991: LD_INT 109
24993: PUSH
24994: LD_INT 110
24996: PUSH
24997: LD_INT 111
24999: PUSH
25000: LD_INT 112
25002: PUSH
25003: LD_INT 113
25005: PUSH
25006: LD_INT 114
25008: PUSH
25009: LD_INT 115
25011: PUSH
25012: LD_INT 116
25014: PUSH
25015: LD_INT 117
25017: PUSH
25018: LD_INT 118
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: ST_TO_ADDR
25045: GO 25048
25047: POP
// end else
25048: GO 25279
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25050: LD_ADDR_VAR 0 2
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: LD_INT 4
25066: PUSH
25067: LD_INT 5
25069: PUSH
25070: LD_INT 6
25072: PUSH
25073: LD_INT 7
25075: PUSH
25076: LD_INT 8
25078: PUSH
25079: LD_INT 9
25081: PUSH
25082: LD_INT 10
25084: PUSH
25085: LD_INT 11
25087: PUSH
25088: LD_INT 12
25090: PUSH
25091: LD_INT 13
25093: PUSH
25094: LD_INT 14
25096: PUSH
25097: LD_INT 15
25099: PUSH
25100: LD_INT 16
25102: PUSH
25103: LD_INT 17
25105: PUSH
25106: LD_INT 18
25108: PUSH
25109: LD_INT 19
25111: PUSH
25112: LD_INT 20
25114: PUSH
25115: LD_INT 21
25117: PUSH
25118: LD_INT 22
25120: PUSH
25121: LD_INT 23
25123: PUSH
25124: LD_INT 24
25126: PUSH
25127: LD_INT 25
25129: PUSH
25130: LD_INT 26
25132: PUSH
25133: LD_INT 27
25135: PUSH
25136: LD_INT 28
25138: PUSH
25139: LD_INT 29
25141: PUSH
25142: LD_INT 30
25144: PUSH
25145: LD_INT 31
25147: PUSH
25148: LD_INT 32
25150: PUSH
25151: LD_INT 33
25153: PUSH
25154: LD_INT 34
25156: PUSH
25157: LD_INT 35
25159: PUSH
25160: LD_INT 36
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 101
25203: PUSH
25204: LD_INT 102
25206: PUSH
25207: LD_INT 103
25209: PUSH
25210: LD_INT 104
25212: PUSH
25213: LD_INT 105
25215: PUSH
25216: LD_INT 106
25218: PUSH
25219: LD_INT 107
25221: PUSH
25222: LD_INT 108
25224: PUSH
25225: LD_INT 109
25227: PUSH
25228: LD_INT 110
25230: PUSH
25231: LD_INT 111
25233: PUSH
25234: LD_INT 112
25236: PUSH
25237: LD_INT 113
25239: PUSH
25240: LD_INT 114
25242: PUSH
25243: LD_INT 115
25245: PUSH
25246: LD_INT 116
25248: PUSH
25249: LD_INT 117
25251: PUSH
25252: LD_INT 118
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: ST_TO_ADDR
// if result then
25279: LD_VAR 0 2
25283: IFFALSE 26069
// begin normal :=  ;
25285: LD_ADDR_VAR 0 5
25289: PUSH
25290: LD_STRING 
25292: ST_TO_ADDR
// hardcore :=  ;
25293: LD_ADDR_VAR 0 6
25297: PUSH
25298: LD_STRING 
25300: ST_TO_ADDR
// active :=  ;
25301: LD_ADDR_VAR 0 7
25305: PUSH
25306: LD_STRING 
25308: ST_TO_ADDR
// for i = 1 to normalCounter do
25309: LD_ADDR_VAR 0 8
25313: PUSH
25314: DOUBLE
25315: LD_INT 1
25317: DEC
25318: ST_TO_ADDR
25319: LD_EXP 53
25323: PUSH
25324: FOR_TO
25325: IFFALSE 25426
// begin tmp := 0 ;
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_STRING 0
25334: ST_TO_ADDR
// if result [ 1 ] then
25335: LD_VAR 0 2
25339: PUSH
25340: LD_INT 1
25342: ARRAY
25343: IFFALSE 25408
// if result [ 1 ] [ 1 ] = i then
25345: LD_VAR 0 2
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: PUSH
25354: LD_INT 1
25356: ARRAY
25357: PUSH
25358: LD_VAR 0 8
25362: EQUAL
25363: IFFALSE 25408
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25365: LD_ADDR_VAR 0 2
25369: PUSH
25370: LD_VAR 0 2
25374: PPUSH
25375: LD_INT 1
25377: PPUSH
25378: LD_VAR 0 2
25382: PUSH
25383: LD_INT 1
25385: ARRAY
25386: PPUSH
25387: LD_INT 1
25389: PPUSH
25390: CALL_OW 3
25394: PPUSH
25395: CALL_OW 1
25399: ST_TO_ADDR
// tmp := 1 ;
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_STRING 1
25407: ST_TO_ADDR
// end ; normal := normal & tmp ;
25408: LD_ADDR_VAR 0 5
25412: PUSH
25413: LD_VAR 0 5
25417: PUSH
25418: LD_VAR 0 3
25422: STR
25423: ST_TO_ADDR
// end ;
25424: GO 25324
25426: POP
25427: POP
// for i = 1 to hardcoreCounter do
25428: LD_ADDR_VAR 0 8
25432: PUSH
25433: DOUBLE
25434: LD_INT 1
25436: DEC
25437: ST_TO_ADDR
25438: LD_EXP 54
25442: PUSH
25443: FOR_TO
25444: IFFALSE 25549
// begin tmp := 0 ;
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_STRING 0
25453: ST_TO_ADDR
// if result [ 2 ] then
25454: LD_VAR 0 2
25458: PUSH
25459: LD_INT 2
25461: ARRAY
25462: IFFALSE 25531
// if result [ 2 ] [ 1 ] = 100 + i then
25464: LD_VAR 0 2
25468: PUSH
25469: LD_INT 2
25471: ARRAY
25472: PUSH
25473: LD_INT 1
25475: ARRAY
25476: PUSH
25477: LD_INT 100
25479: PUSH
25480: LD_VAR 0 8
25484: PLUS
25485: EQUAL
25486: IFFALSE 25531
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25488: LD_ADDR_VAR 0 2
25492: PUSH
25493: LD_VAR 0 2
25497: PPUSH
25498: LD_INT 2
25500: PPUSH
25501: LD_VAR 0 2
25505: PUSH
25506: LD_INT 2
25508: ARRAY
25509: PPUSH
25510: LD_INT 1
25512: PPUSH
25513: CALL_OW 3
25517: PPUSH
25518: CALL_OW 1
25522: ST_TO_ADDR
// tmp := 1 ;
25523: LD_ADDR_VAR 0 3
25527: PUSH
25528: LD_STRING 1
25530: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25531: LD_ADDR_VAR 0 6
25535: PUSH
25536: LD_VAR 0 6
25540: PUSH
25541: LD_VAR 0 3
25545: STR
25546: ST_TO_ADDR
// end ;
25547: GO 25443
25549: POP
25550: POP
// if isGameLoad then
25551: LD_VAR 0 1
25555: IFFALSE 26030
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25557: LD_ADDR_VAR 0 4
25561: PUSH
25562: LD_EXP 57
25566: PUSH
25567: LD_EXP 56
25571: PUSH
25572: LD_EXP 58
25576: PUSH
25577: LD_EXP 55
25581: PUSH
25582: LD_EXP 59
25586: PUSH
25587: LD_EXP 60
25591: PUSH
25592: LD_EXP 61
25596: PUSH
25597: LD_EXP 62
25601: PUSH
25602: LD_EXP 63
25606: PUSH
25607: LD_EXP 64
25611: PUSH
25612: LD_EXP 65
25616: PUSH
25617: LD_EXP 66
25621: PUSH
25622: LD_EXP 67
25626: PUSH
25627: LD_EXP 68
25631: PUSH
25632: LD_EXP 76
25636: PUSH
25637: LD_EXP 77
25641: PUSH
25642: LD_EXP 78
25646: PUSH
25647: LD_EXP 79
25651: PUSH
25652: LD_EXP 81
25656: PUSH
25657: LD_EXP 82
25661: PUSH
25662: LD_EXP 83
25666: PUSH
25667: LD_EXP 86
25671: PUSH
25672: LD_EXP 88
25676: PUSH
25677: LD_EXP 89
25681: PUSH
25682: LD_EXP 90
25686: PUSH
25687: LD_EXP 92
25691: PUSH
25692: LD_EXP 93
25696: PUSH
25697: LD_EXP 96
25701: PUSH
25702: LD_EXP 97
25706: PUSH
25707: LD_EXP 98
25711: PUSH
25712: LD_EXP 99
25716: PUSH
25717: LD_EXP 100
25721: PUSH
25722: LD_EXP 101
25726: PUSH
25727: LD_EXP 102
25731: PUSH
25732: LD_EXP 103
25736: PUSH
25737: LD_EXP 104
25741: PUSH
25742: LD_EXP 69
25746: PUSH
25747: LD_EXP 70
25751: PUSH
25752: LD_EXP 73
25756: PUSH
25757: LD_EXP 74
25761: PUSH
25762: LD_EXP 75
25766: PUSH
25767: LD_EXP 71
25771: PUSH
25772: LD_EXP 72
25776: PUSH
25777: LD_EXP 80
25781: PUSH
25782: LD_EXP 84
25786: PUSH
25787: LD_EXP 85
25791: PUSH
25792: LD_EXP 87
25796: PUSH
25797: LD_EXP 91
25801: PUSH
25802: LD_EXP 94
25806: PUSH
25807: LD_EXP 95
25811: PUSH
25812: LD_EXP 105
25816: PUSH
25817: LD_EXP 106
25821: PUSH
25822: LD_EXP 107
25826: PUSH
25827: LD_EXP 108
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// tmp :=  ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_STRING 
25895: ST_TO_ADDR
// for i = 1 to normalCounter do
25896: LD_ADDR_VAR 0 8
25900: PUSH
25901: DOUBLE
25902: LD_INT 1
25904: DEC
25905: ST_TO_ADDR
25906: LD_EXP 53
25910: PUSH
25911: FOR_TO
25912: IFFALSE 25948
// begin if flags [ i ] then
25914: LD_VAR 0 4
25918: PUSH
25919: LD_VAR 0 8
25923: ARRAY
25924: IFFALSE 25946
// tmp := tmp & i & ; ;
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_VAR 0 3
25935: PUSH
25936: LD_VAR 0 8
25940: STR
25941: PUSH
25942: LD_STRING ;
25944: STR
25945: ST_TO_ADDR
// end ;
25946: GO 25911
25948: POP
25949: POP
// for i = 1 to hardcoreCounter do
25950: LD_ADDR_VAR 0 8
25954: PUSH
25955: DOUBLE
25956: LD_INT 1
25958: DEC
25959: ST_TO_ADDR
25960: LD_EXP 54
25964: PUSH
25965: FOR_TO
25966: IFFALSE 26012
// begin if flags [ normalCounter + i ] then
25968: LD_VAR 0 4
25972: PUSH
25973: LD_EXP 53
25977: PUSH
25978: LD_VAR 0 8
25982: PLUS
25983: ARRAY
25984: IFFALSE 26010
// tmp := tmp & ( 100 + i ) & ; ;
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_VAR 0 3
25995: PUSH
25996: LD_INT 100
25998: PUSH
25999: LD_VAR 0 8
26003: PLUS
26004: STR
26005: PUSH
26006: LD_STRING ;
26008: STR
26009: ST_TO_ADDR
// end ;
26010: GO 25965
26012: POP
26013: POP
// if tmp then
26014: LD_VAR 0 3
26018: IFFALSE 26030
// active := tmp ;
26020: LD_ADDR_VAR 0 7
26024: PUSH
26025: LD_VAR 0 3
26029: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26030: LD_STRING getStreamItemsFromMission("
26032: PUSH
26033: LD_VAR 0 5
26037: STR
26038: PUSH
26039: LD_STRING ","
26041: STR
26042: PUSH
26043: LD_VAR 0 6
26047: STR
26048: PUSH
26049: LD_STRING ","
26051: STR
26052: PUSH
26053: LD_VAR 0 7
26057: STR
26058: PUSH
26059: LD_STRING ")
26061: STR
26062: PPUSH
26063: CALL_OW 559
// end else
26067: GO 26076
// ToLua ( getStreamItemsFromMission("","","") ) ;
26069: LD_STRING getStreamItemsFromMission("","","")
26071: PPUSH
26072: CALL_OW 559
// end ;
26076: LD_VAR 0 2
26080: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26081: LD_EXP 52
26085: PUSH
26086: LD_EXP 57
26090: AND
26091: IFFALSE 26215
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
// begin enable ;
26100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_INT 22
26108: PUSH
26109: LD_OWVAR 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: LD_INT 34
26123: PUSH
26124: LD_INT 7
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 34
26133: PUSH
26134: LD_INT 45
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 34
26143: PUSH
26144: LD_INT 28
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 34
26153: PUSH
26154: LD_INT 47
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PPUSH
26172: CALL_OW 69
26176: ST_TO_ADDR
// if not tmp then
26177: LD_VAR 0 2
26181: NOT
26182: IFFALSE 26186
// exit ;
26184: GO 26215
// for i in tmp do
26186: LD_ADDR_VAR 0 1
26190: PUSH
26191: LD_VAR 0 2
26195: PUSH
26196: FOR_IN
26197: IFFALSE 26213
// begin SetLives ( i , 0 ) ;
26199: LD_VAR 0 1
26203: PPUSH
26204: LD_INT 0
26206: PPUSH
26207: CALL_OW 234
// end ;
26211: GO 26196
26213: POP
26214: POP
// end ;
26215: PPOPN 2
26217: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26218: LD_EXP 52
26222: PUSH
26223: LD_EXP 58
26227: AND
26228: IFFALSE 26312
26230: GO 26232
26232: DISABLE
26233: LD_INT 0
26235: PPUSH
26236: PPUSH
// begin enable ;
26237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26238: LD_ADDR_VAR 0 2
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 32
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 2
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26312
// for i in tmp do
26283: LD_ADDR_VAR 0 1
26287: PUSH
26288: LD_VAR 0 2
26292: PUSH
26293: FOR_IN
26294: IFFALSE 26310
// begin SetLives ( i , 0 ) ;
26296: LD_VAR 0 1
26300: PPUSH
26301: LD_INT 0
26303: PPUSH
26304: CALL_OW 234
// end ;
26308: GO 26293
26310: POP
26311: POP
// end ;
26312: PPOPN 2
26314: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26315: LD_EXP 52
26319: PUSH
26320: LD_EXP 55
26324: AND
26325: IFFALSE 26418
26327: GO 26329
26329: DISABLE
26330: LD_INT 0
26332: PPUSH
// begin enable ;
26333: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26334: LD_ADDR_VAR 0 1
26338: PUSH
26339: LD_INT 22
26341: PUSH
26342: LD_OWVAR 2
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: LD_INT 25
26356: PUSH
26357: LD_INT 5
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 25
26366: PUSH
26367: LD_INT 9
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 25
26376: PUSH
26377: LD_INT 8
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26416
// begin SetClass ( i , 1 ) ;
26402: LD_VAR 0 1
26406: PPUSH
26407: LD_INT 1
26409: PPUSH
26410: CALL_OW 336
// end ;
26414: GO 26399
26416: POP
26417: POP
// end ;
26418: PPOPN 1
26420: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26421: LD_EXP 52
26425: PUSH
26426: LD_EXP 56
26430: AND
26431: PUSH
26432: LD_OWVAR 65
26436: PUSH
26437: LD_INT 7
26439: LESS
26440: AND
26441: IFFALSE 26455
26443: GO 26445
26445: DISABLE
// begin enable ;
26446: ENABLE
// game_speed := 7 ;
26447: LD_ADDR_OWVAR 65
26451: PUSH
26452: LD_INT 7
26454: ST_TO_ADDR
// end ;
26455: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26456: LD_EXP 52
26460: PUSH
26461: LD_EXP 59
26465: AND
26466: IFFALSE 26668
26468: GO 26470
26470: DISABLE
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_INT 81
26483: PUSH
26484: LD_OWVAR 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PPUSH
26507: CALL_OW 69
26511: ST_TO_ADDR
// if not tmp then
26512: LD_VAR 0 3
26516: NOT
26517: IFFALSE 26521
// exit ;
26519: GO 26668
// if tmp > 5 then
26521: LD_VAR 0 3
26525: PUSH
26526: LD_INT 5
26528: GREATER
26529: IFFALSE 26541
// k := 5 else
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: LD_INT 5
26538: ST_TO_ADDR
26539: GO 26551
// k := tmp ;
26541: LD_ADDR_VAR 0 2
26545: PUSH
26546: LD_VAR 0 3
26550: ST_TO_ADDR
// for i := 1 to k do
26551: LD_ADDR_VAR 0 1
26555: PUSH
26556: DOUBLE
26557: LD_INT 1
26559: DEC
26560: ST_TO_ADDR
26561: LD_VAR 0 2
26565: PUSH
26566: FOR_TO
26567: IFFALSE 26666
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26569: LD_VAR 0 3
26573: PUSH
26574: LD_VAR 0 1
26578: ARRAY
26579: PPUSH
26580: LD_VAR 0 1
26584: PUSH
26585: LD_INT 4
26587: MOD
26588: PUSH
26589: LD_INT 1
26591: PLUS
26592: PPUSH
26593: CALL_OW 259
26597: PUSH
26598: LD_INT 10
26600: LESS
26601: IFFALSE 26664
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26603: LD_VAR 0 3
26607: PUSH
26608: LD_VAR 0 1
26612: ARRAY
26613: PPUSH
26614: LD_VAR 0 1
26618: PUSH
26619: LD_INT 4
26621: MOD
26622: PUSH
26623: LD_INT 1
26625: PLUS
26626: PPUSH
26627: LD_VAR 0 3
26631: PUSH
26632: LD_VAR 0 1
26636: ARRAY
26637: PPUSH
26638: LD_VAR 0 1
26642: PUSH
26643: LD_INT 4
26645: MOD
26646: PUSH
26647: LD_INT 1
26649: PLUS
26650: PPUSH
26651: CALL_OW 259
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: PPUSH
26660: CALL_OW 237
26664: GO 26566
26666: POP
26667: POP
// end ;
26668: PPOPN 3
26670: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26671: LD_EXP 52
26675: PUSH
26676: LD_EXP 60
26680: AND
26681: IFFALSE 26701
26683: GO 26685
26685: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26686: LD_INT 4
26688: PPUSH
26689: LD_OWVAR 2
26693: PPUSH
26694: LD_INT 0
26696: PPUSH
26697: CALL_OW 324
26701: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26702: LD_EXP 52
26706: PUSH
26707: LD_EXP 89
26711: AND
26712: IFFALSE 26732
26714: GO 26716
26716: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26717: LD_INT 19
26719: PPUSH
26720: LD_OWVAR 2
26724: PPUSH
26725: LD_INT 0
26727: PPUSH
26728: CALL_OW 324
26732: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26733: LD_EXP 52
26737: PUSH
26738: LD_EXP 61
26742: AND
26743: IFFALSE 26845
26745: GO 26747
26747: DISABLE
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
// begin enable ;
26752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26753: LD_ADDR_VAR 0 2
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: LD_INT 34
26775: PUSH
26776: LD_INT 11
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 34
26785: PUSH
26786: LD_INT 30
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 69
26806: ST_TO_ADDR
// if not tmp then
26807: LD_VAR 0 2
26811: NOT
26812: IFFALSE 26816
// exit ;
26814: GO 26845
// for i in tmp do
26816: LD_ADDR_VAR 0 1
26820: PUSH
26821: LD_VAR 0 2
26825: PUSH
26826: FOR_IN
26827: IFFALSE 26843
// begin SetLives ( i , 0 ) ;
26829: LD_VAR 0 1
26833: PPUSH
26834: LD_INT 0
26836: PPUSH
26837: CALL_OW 234
// end ;
26841: GO 26826
26843: POP
26844: POP
// end ;
26845: PPOPN 2
26847: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26848: LD_EXP 52
26852: PUSH
26853: LD_EXP 62
26857: AND
26858: IFFALSE 26878
26860: GO 26862
26862: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26863: LD_INT 32
26865: PPUSH
26866: LD_OWVAR 2
26870: PPUSH
26871: LD_INT 0
26873: PPUSH
26874: CALL_OW 324
26878: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26879: LD_EXP 52
26883: PUSH
26884: LD_EXP 63
26888: AND
26889: IFFALSE 27070
26891: GO 26893
26893: DISABLE
26894: LD_INT 0
26896: PPUSH
26897: PPUSH
26898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: LD_INT 22
26906: PUSH
26907: LD_OWVAR 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 33
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: ST_TO_ADDR
// if not tmp then
26935: LD_VAR 0 2
26939: NOT
26940: IFFALSE 26944
// exit ;
26942: GO 27070
// side := 0 ;
26944: LD_ADDR_VAR 0 3
26948: PUSH
26949: LD_INT 0
26951: ST_TO_ADDR
// for i := 1 to 8 do
26952: LD_ADDR_VAR 0 1
26956: PUSH
26957: DOUBLE
26958: LD_INT 1
26960: DEC
26961: ST_TO_ADDR
26962: LD_INT 8
26964: PUSH
26965: FOR_TO
26966: IFFALSE 27014
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26968: LD_OWVAR 2
26972: PUSH
26973: LD_VAR 0 1
26977: NONEQUAL
26978: PUSH
26979: LD_OWVAR 2
26983: PPUSH
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL_OW 81
26993: PUSH
26994: LD_INT 2
26996: EQUAL
26997: AND
26998: IFFALSE 27012
// begin side := i ;
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: LD_VAR 0 1
27009: ST_TO_ADDR
// break ;
27010: GO 27014
// end ;
27012: GO 26965
27014: POP
27015: POP
// if not side then
27016: LD_VAR 0 3
27020: NOT
27021: IFFALSE 27025
// exit ;
27023: GO 27070
// for i := 1 to tmp do
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: DOUBLE
27031: LD_INT 1
27033: DEC
27034: ST_TO_ADDR
27035: LD_VAR 0 2
27039: PUSH
27040: FOR_TO
27041: IFFALSE 27068
// if Prob ( 60 ) then
27043: LD_INT 60
27045: PPUSH
27046: CALL_OW 13
27050: IFFALSE 27066
// SetSide ( i , side ) ;
27052: LD_VAR 0 1
27056: PPUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: CALL_OW 235
27066: GO 27040
27068: POP
27069: POP
// end ;
27070: PPOPN 3
27072: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27073: LD_EXP 52
27077: PUSH
27078: LD_EXP 65
27082: AND
27083: IFFALSE 27202
27085: GO 27087
27087: DISABLE
27088: LD_INT 0
27090: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27091: LD_ADDR_VAR 0 1
27095: PUSH
27096: LD_INT 22
27098: PUSH
27099: LD_OWVAR 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 21
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: PUSH
27121: LD_INT 23
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 69
27144: PUSH
27145: FOR_IN
27146: IFFALSE 27200
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27148: LD_VAR 0 1
27152: PPUSH
27153: CALL_OW 257
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 3
27166: PUSH
27167: LD_INT 4
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: IN
27176: IFFALSE 27198
// SetClass ( un , rand ( 1 , 4 ) ) ;
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_INT 1
27185: PPUSH
27186: LD_INT 4
27188: PPUSH
27189: CALL_OW 12
27193: PPUSH
27194: CALL_OW 336
27198: GO 27145
27200: POP
27201: POP
// end ;
27202: PPOPN 1
27204: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27205: LD_EXP 52
27209: PUSH
27210: LD_EXP 64
27214: AND
27215: IFFALSE 27294
27217: GO 27219
27219: DISABLE
27220: LD_INT 0
27222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27223: LD_ADDR_VAR 0 1
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 21
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 1
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 27294
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27268: LD_VAR 0 1
27272: PUSH
27273: LD_INT 1
27275: PPUSH
27276: LD_VAR 0 1
27280: PPUSH
27281: CALL_OW 12
27285: ARRAY
27286: PPUSH
27287: LD_INT 100
27289: PPUSH
27290: CALL_OW 234
// end ;
27294: PPOPN 1
27296: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27297: LD_EXP 52
27301: PUSH
27302: LD_EXP 66
27306: AND
27307: IFFALSE 27405
27309: GO 27311
27311: DISABLE
27312: LD_INT 0
27314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27315: LD_ADDR_VAR 0 1
27319: PUSH
27320: LD_INT 22
27322: PUSH
27323: LD_OWVAR 2
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 21
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PPUSH
27346: CALL_OW 69
27350: ST_TO_ADDR
// if not tmp then
27351: LD_VAR 0 1
27355: NOT
27356: IFFALSE 27360
// exit ;
27358: GO 27405
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27360: LD_VAR 0 1
27364: PUSH
27365: LD_INT 1
27367: PPUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL_OW 12
27377: ARRAY
27378: PPUSH
27379: LD_INT 1
27381: PPUSH
27382: LD_INT 4
27384: PPUSH
27385: CALL_OW 12
27389: PPUSH
27390: LD_INT 3000
27392: PPUSH
27393: LD_INT 9000
27395: PPUSH
27396: CALL_OW 12
27400: PPUSH
27401: CALL_OW 492
// end ;
27405: PPOPN 1
27407: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27408: LD_EXP 52
27412: PUSH
27413: LD_EXP 67
27417: AND
27418: IFFALSE 27438
27420: GO 27422
27422: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27423: LD_INT 1
27425: PPUSH
27426: LD_OWVAR 2
27430: PPUSH
27431: LD_INT 0
27433: PPUSH
27434: CALL_OW 324
27438: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27439: LD_EXP 52
27443: PUSH
27444: LD_EXP 68
27448: AND
27449: IFFALSE 27532
27451: GO 27453
27453: DISABLE
27454: LD_INT 0
27456: PPUSH
27457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27458: LD_ADDR_VAR 0 2
27462: PUSH
27463: LD_INT 22
27465: PUSH
27466: LD_OWVAR 2
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 21
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PPUSH
27489: CALL_OW 69
27493: ST_TO_ADDR
// if not tmp then
27494: LD_VAR 0 2
27498: NOT
27499: IFFALSE 27503
// exit ;
27501: GO 27532
// for i in tmp do
27503: LD_ADDR_VAR 0 1
27507: PUSH
27508: LD_VAR 0 2
27512: PUSH
27513: FOR_IN
27514: IFFALSE 27530
// SetBLevel ( i , 10 ) ;
27516: LD_VAR 0 1
27520: PPUSH
27521: LD_INT 10
27523: PPUSH
27524: CALL_OW 241
27528: GO 27513
27530: POP
27531: POP
// end ;
27532: PPOPN 2
27534: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27535: LD_EXP 52
27539: PUSH
27540: LD_EXP 69
27544: AND
27545: IFFALSE 27656
27547: GO 27549
27549: DISABLE
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: LD_INT 22
27562: PUSH
27563: LD_OWVAR 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 25
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PPUSH
27586: CALL_OW 69
27590: ST_TO_ADDR
// if not tmp then
27591: LD_VAR 0 3
27595: NOT
27596: IFFALSE 27600
// exit ;
27598: GO 27656
// un := tmp [ rand ( 1 , tmp ) ] ;
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: LD_VAR 0 3
27609: PUSH
27610: LD_INT 1
27612: PPUSH
27613: LD_VAR 0 3
27617: PPUSH
27618: CALL_OW 12
27622: ARRAY
27623: ST_TO_ADDR
// if Crawls ( un ) then
27624: LD_VAR 0 2
27628: PPUSH
27629: CALL_OW 318
27633: IFFALSE 27644
// ComWalk ( un ) ;
27635: LD_VAR 0 2
27639: PPUSH
27640: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27644: LD_VAR 0 2
27648: PPUSH
27649: LD_INT 5
27651: PPUSH
27652: CALL_OW 336
// end ;
27656: PPOPN 3
27658: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27659: LD_EXP 52
27663: PUSH
27664: LD_EXP 70
27668: AND
27669: PUSH
27670: LD_OWVAR 67
27674: PUSH
27675: LD_INT 4
27677: LESS
27678: AND
27679: IFFALSE 27698
27681: GO 27683
27683: DISABLE
// begin Difficulty := Difficulty + 1 ;
27684: LD_ADDR_OWVAR 67
27688: PUSH
27689: LD_OWVAR 67
27693: PUSH
27694: LD_INT 1
27696: PLUS
27697: ST_TO_ADDR
// end ;
27698: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27699: LD_EXP 52
27703: PUSH
27704: LD_EXP 71
27708: AND
27709: IFFALSE 27812
27711: GO 27713
27713: DISABLE
27714: LD_INT 0
27716: PPUSH
// begin for i := 1 to 5 do
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: DOUBLE
27723: LD_INT 1
27725: DEC
27726: ST_TO_ADDR
27727: LD_INT 5
27729: PUSH
27730: FOR_TO
27731: IFFALSE 27810
// begin uc_nation := nation_nature ;
27733: LD_ADDR_OWVAR 21
27737: PUSH
27738: LD_INT 0
27740: ST_TO_ADDR
// uc_side := 0 ;
27741: LD_ADDR_OWVAR 20
27745: PUSH
27746: LD_INT 0
27748: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27749: LD_ADDR_OWVAR 29
27753: PUSH
27754: LD_INT 12
27756: PUSH
27757: LD_INT 12
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// hc_agressivity := 20 ;
27764: LD_ADDR_OWVAR 35
27768: PUSH
27769: LD_INT 20
27771: ST_TO_ADDR
// hc_class := class_tiger ;
27772: LD_ADDR_OWVAR 28
27776: PUSH
27777: LD_INT 14
27779: ST_TO_ADDR
// hc_gallery :=  ;
27780: LD_ADDR_OWVAR 33
27784: PUSH
27785: LD_STRING 
27787: ST_TO_ADDR
// hc_name :=  ;
27788: LD_ADDR_OWVAR 26
27792: PUSH
27793: LD_STRING 
27795: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27796: CALL_OW 44
27800: PPUSH
27801: LD_INT 0
27803: PPUSH
27804: CALL_OW 51
// end ;
27808: GO 27730
27810: POP
27811: POP
// end ;
27812: PPOPN 1
27814: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27815: LD_EXP 52
27819: PUSH
27820: LD_EXP 72
27824: AND
27825: IFFALSE 27834
27827: GO 27829
27829: DISABLE
// StreamSibBomb ;
27830: CALL 27835 0 0
27834: END
// export function StreamSibBomb ; var i , x , y ; begin
27835: LD_INT 0
27837: PPUSH
27838: PPUSH
27839: PPUSH
27840: PPUSH
// result := false ;
27841: LD_ADDR_VAR 0 1
27845: PUSH
27846: LD_INT 0
27848: ST_TO_ADDR
// for i := 1 to 16 do
27849: LD_ADDR_VAR 0 2
27853: PUSH
27854: DOUBLE
27855: LD_INT 1
27857: DEC
27858: ST_TO_ADDR
27859: LD_INT 16
27861: PUSH
27862: FOR_TO
27863: IFFALSE 28062
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27865: LD_ADDR_VAR 0 3
27869: PUSH
27870: LD_INT 10
27872: PUSH
27873: LD_INT 20
27875: PUSH
27876: LD_INT 30
27878: PUSH
27879: LD_INT 40
27881: PUSH
27882: LD_INT 50
27884: PUSH
27885: LD_INT 60
27887: PUSH
27888: LD_INT 70
27890: PUSH
27891: LD_INT 80
27893: PUSH
27894: LD_INT 90
27896: PUSH
27897: LD_INT 100
27899: PUSH
27900: LD_INT 110
27902: PUSH
27903: LD_INT 120
27905: PUSH
27906: LD_INT 130
27908: PUSH
27909: LD_INT 140
27911: PUSH
27912: LD_INT 150
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PPUSH
27935: LD_INT 15
27937: PPUSH
27938: CALL_OW 12
27942: ARRAY
27943: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27944: LD_ADDR_VAR 0 4
27948: PUSH
27949: LD_INT 10
27951: PUSH
27952: LD_INT 20
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: LD_INT 40
27960: PUSH
27961: LD_INT 50
27963: PUSH
27964: LD_INT 60
27966: PUSH
27967: LD_INT 70
27969: PUSH
27970: LD_INT 80
27972: PUSH
27973: LD_INT 90
27975: PUSH
27976: LD_INT 100
27978: PUSH
27979: LD_INT 110
27981: PUSH
27982: LD_INT 120
27984: PUSH
27985: LD_INT 130
27987: PUSH
27988: LD_INT 140
27990: PUSH
27991: LD_INT 150
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PPUSH
28014: LD_INT 15
28016: PPUSH
28017: CALL_OW 12
28021: ARRAY
28022: ST_TO_ADDR
// if ValidHex ( x , y ) then
28023: LD_VAR 0 3
28027: PPUSH
28028: LD_VAR 0 4
28032: PPUSH
28033: CALL_OW 488
28037: IFFALSE 28060
// begin result := [ x , y ] ;
28039: LD_ADDR_VAR 0 1
28043: PUSH
28044: LD_VAR 0 3
28048: PUSH
28049: LD_VAR 0 4
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// break ;
28058: GO 28062
// end ; end ;
28060: GO 27862
28062: POP
28063: POP
// if result then
28064: LD_VAR 0 1
28068: IFFALSE 28128
// begin ToLua ( playSibBomb() ) ;
28070: LD_STRING playSibBomb()
28072: PPUSH
28073: CALL_OW 559
// wait ( 0 0$14 ) ;
28077: LD_INT 490
28079: PPUSH
28080: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28084: LD_VAR 0 1
28088: PUSH
28089: LD_INT 1
28091: ARRAY
28092: PPUSH
28093: LD_VAR 0 1
28097: PUSH
28098: LD_INT 2
28100: ARRAY
28101: PPUSH
28102: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28106: LD_VAR 0 1
28110: PUSH
28111: LD_INT 1
28113: ARRAY
28114: PPUSH
28115: LD_VAR 0 1
28119: PUSH
28120: LD_INT 2
28122: ARRAY
28123: PPUSH
28124: CALL_OW 429
// end ; end ;
28128: LD_VAR 0 1
28132: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28133: LD_EXP 52
28137: PUSH
28138: LD_EXP 74
28142: AND
28143: IFFALSE 28155
28145: GO 28147
28147: DISABLE
// YouLost (  ) ;
28148: LD_STRING 
28150: PPUSH
28151: CALL_OW 104
28155: END
// every 0 0$1 trigger StreamModeActive and sFog do
28156: LD_EXP 52
28160: PUSH
28161: LD_EXP 73
28165: AND
28166: IFFALSE 28180
28168: GO 28170
28170: DISABLE
// FogOff ( your_side ) ;
28171: LD_OWVAR 2
28175: PPUSH
28176: CALL_OW 344
28180: END
// every 0 0$1 trigger StreamModeActive and sSun do
28181: LD_EXP 52
28185: PUSH
28186: LD_EXP 75
28190: AND
28191: IFFALSE 28219
28193: GO 28195
28195: DISABLE
// begin solar_recharge_percent := 0 ;
28196: LD_ADDR_OWVAR 79
28200: PUSH
28201: LD_INT 0
28203: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28204: LD_INT 10500
28206: PPUSH
28207: CALL_OW 67
// solar_recharge_percent := 100 ;
28211: LD_ADDR_OWVAR 79
28215: PUSH
28216: LD_INT 100
28218: ST_TO_ADDR
// end ;
28219: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28220: LD_EXP 52
28224: PUSH
28225: LD_EXP 76
28229: AND
28230: IFFALSE 28469
28232: GO 28234
28234: DISABLE
28235: LD_INT 0
28237: PPUSH
28238: PPUSH
28239: PPUSH
// begin tmp := [ ] ;
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: EMPTY
28246: ST_TO_ADDR
// for i := 1 to 6 do
28247: LD_ADDR_VAR 0 1
28251: PUSH
28252: DOUBLE
28253: LD_INT 1
28255: DEC
28256: ST_TO_ADDR
28257: LD_INT 6
28259: PUSH
28260: FOR_TO
28261: IFFALSE 28366
// begin uc_nation := nation_nature ;
28263: LD_ADDR_OWVAR 21
28267: PUSH
28268: LD_INT 0
28270: ST_TO_ADDR
// uc_side := 0 ;
28271: LD_ADDR_OWVAR 20
28275: PUSH
28276: LD_INT 0
28278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28279: LD_ADDR_OWVAR 29
28283: PUSH
28284: LD_INT 12
28286: PUSH
28287: LD_INT 12
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// hc_agressivity := 20 ;
28294: LD_ADDR_OWVAR 35
28298: PUSH
28299: LD_INT 20
28301: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28302: LD_ADDR_OWVAR 28
28306: PUSH
28307: LD_INT 17
28309: ST_TO_ADDR
// hc_gallery :=  ;
28310: LD_ADDR_OWVAR 33
28314: PUSH
28315: LD_STRING 
28317: ST_TO_ADDR
// hc_name :=  ;
28318: LD_ADDR_OWVAR 26
28322: PUSH
28323: LD_STRING 
28325: ST_TO_ADDR
// un := CreateHuman ;
28326: LD_ADDR_VAR 0 2
28330: PUSH
28331: CALL_OW 44
28335: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28336: LD_VAR 0 2
28340: PPUSH
28341: LD_INT 1
28343: PPUSH
28344: CALL_OW 51
// tmp := tmp ^ un ;
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_VAR 0 3
28357: PUSH
28358: LD_VAR 0 2
28362: ADD
28363: ST_TO_ADDR
// end ;
28364: GO 28260
28366: POP
28367: POP
// repeat wait ( 0 0$1 ) ;
28368: LD_INT 35
28370: PPUSH
28371: CALL_OW 67
// for un in tmp do
28375: LD_ADDR_VAR 0 2
28379: PUSH
28380: LD_VAR 0 3
28384: PUSH
28385: FOR_IN
28386: IFFALSE 28460
// begin if IsDead ( un ) then
28388: LD_VAR 0 2
28392: PPUSH
28393: CALL_OW 301
28397: IFFALSE 28417
// begin tmp := tmp diff un ;
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_VAR 0 3
28408: PUSH
28409: LD_VAR 0 2
28413: DIFF
28414: ST_TO_ADDR
// continue ;
28415: GO 28385
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28417: LD_VAR 0 2
28421: PPUSH
28422: LD_INT 3
28424: PUSH
28425: LD_INT 22
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PPUSH
28439: CALL_OW 69
28443: PPUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 74
28453: PPUSH
28454: CALL_OW 115
// end ;
28458: GO 28385
28460: POP
28461: POP
// until not tmp ;
28462: LD_VAR 0 3
28466: NOT
28467: IFFALSE 28368
// end ;
28469: PPOPN 3
28471: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28472: LD_EXP 52
28476: PUSH
28477: LD_EXP 77
28481: AND
28482: IFFALSE 28536
28484: GO 28486
28486: DISABLE
// begin ToLua ( displayTroll(); ) ;
28487: LD_STRING displayTroll();
28489: PPUSH
28490: CALL_OW 559
// wait ( 3 3$00 ) ;
28494: LD_INT 6300
28496: PPUSH
28497: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28501: LD_STRING hideTroll();
28503: PPUSH
28504: CALL_OW 559
// wait ( 1 1$00 ) ;
28508: LD_INT 2100
28510: PPUSH
28511: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28515: LD_STRING displayTroll();
28517: PPUSH
28518: CALL_OW 559
// wait ( 1 1$00 ) ;
28522: LD_INT 2100
28524: PPUSH
28525: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28529: LD_STRING hideTroll();
28531: PPUSH
28532: CALL_OW 559
// end ;
28536: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28537: LD_EXP 52
28541: PUSH
28542: LD_EXP 78
28546: AND
28547: IFFALSE 28610
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin p := 0 ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 0
28562: ST_TO_ADDR
// repeat game_speed := 1 ;
28563: LD_ADDR_OWVAR 65
28567: PUSH
28568: LD_INT 1
28570: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28571: LD_INT 35
28573: PPUSH
28574: CALL_OW 67
// p := p + 1 ;
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_VAR 0 1
28587: PUSH
28588: LD_INT 1
28590: PLUS
28591: ST_TO_ADDR
// until p >= 60 ;
28592: LD_VAR 0 1
28596: PUSH
28597: LD_INT 60
28599: GREATEREQUAL
28600: IFFALSE 28563
// game_speed := 4 ;
28602: LD_ADDR_OWVAR 65
28606: PUSH
28607: LD_INT 4
28609: ST_TO_ADDR
// end ;
28610: PPOPN 1
28612: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28613: LD_EXP 52
28617: PUSH
28618: LD_EXP 79
28622: AND
28623: IFFALSE 28769
28625: GO 28627
28627: DISABLE
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28632: LD_ADDR_VAR 0 1
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_OWVAR 2
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 30
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 30
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 69
28685: ST_TO_ADDR
// if not depot then
28686: LD_VAR 0 1
28690: NOT
28691: IFFALSE 28695
// exit ;
28693: GO 28769
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28695: LD_ADDR_VAR 0 2
28699: PUSH
28700: LD_VAR 0 1
28704: PUSH
28705: LD_INT 1
28707: PPUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: CALL_OW 12
28717: ARRAY
28718: PPUSH
28719: CALL_OW 274
28723: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28724: LD_VAR 0 2
28728: PPUSH
28729: LD_INT 1
28731: PPUSH
28732: LD_INT 0
28734: PPUSH
28735: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28739: LD_VAR 0 2
28743: PPUSH
28744: LD_INT 2
28746: PPUSH
28747: LD_INT 0
28749: PPUSH
28750: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28754: LD_VAR 0 2
28758: PPUSH
28759: LD_INT 3
28761: PPUSH
28762: LD_INT 0
28764: PPUSH
28765: CALL_OW 277
// end ;
28769: PPOPN 2
28771: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28772: LD_EXP 52
28776: PUSH
28777: LD_EXP 80
28781: AND
28782: IFFALSE 28879
28784: GO 28786
28786: DISABLE
28787: LD_INT 0
28789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28790: LD_ADDR_VAR 0 1
28794: PUSH
28795: LD_INT 22
28797: PUSH
28798: LD_OWVAR 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 21
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 3
28819: PUSH
28820: LD_INT 23
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 1
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 28879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28853: LD_VAR 0 1
28857: PUSH
28858: LD_INT 1
28860: PPUSH
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL_OW 12
28870: ARRAY
28871: PPUSH
28872: LD_INT 200
28874: PPUSH
28875: CALL_OW 234
// end ;
28879: PPOPN 1
28881: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28882: LD_EXP 52
28886: PUSH
28887: LD_EXP 81
28891: AND
28892: IFFALSE 28971
28894: GO 28896
28896: DISABLE
28897: LD_INT 0
28899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28900: LD_ADDR_VAR 0 1
28904: PUSH
28905: LD_INT 22
28907: PUSH
28908: LD_OWVAR 2
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 21
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PPUSH
28931: CALL_OW 69
28935: ST_TO_ADDR
// if not tmp then
28936: LD_VAR 0 1
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 28971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28945: LD_VAR 0 1
28949: PUSH
28950: LD_INT 1
28952: PPUSH
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 12
28962: ARRAY
28963: PPUSH
28964: LD_INT 60
28966: PPUSH
28967: CALL_OW 234
// end ;
28971: PPOPN 1
28973: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28974: LD_EXP 52
28978: PUSH
28979: LD_EXP 82
28983: AND
28984: IFFALSE 29083
28986: GO 28988
28988: DISABLE
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
// begin enable ;
28993: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28994: LD_ADDR_VAR 0 1
28998: PUSH
28999: LD_INT 22
29001: PUSH
29002: LD_OWVAR 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 61
29013: PUSH
29014: EMPTY
29015: LIST
29016: PUSH
29017: LD_INT 33
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: ST_TO_ADDR
// if not tmp then
29037: LD_VAR 0 1
29041: NOT
29042: IFFALSE 29046
// exit ;
29044: GO 29083
// for i in tmp do
29046: LD_ADDR_VAR 0 2
29050: PUSH
29051: LD_VAR 0 1
29055: PUSH
29056: FOR_IN
29057: IFFALSE 29081
// if IsControledBy ( i ) then
29059: LD_VAR 0 2
29063: PPUSH
29064: CALL_OW 312
29068: IFFALSE 29079
// ComUnlink ( i ) ;
29070: LD_VAR 0 2
29074: PPUSH
29075: CALL_OW 136
29079: GO 29056
29081: POP
29082: POP
// end ;
29083: PPOPN 2
29085: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29086: LD_EXP 52
29090: PUSH
29091: LD_EXP 83
29095: AND
29096: IFFALSE 29236
29098: GO 29100
29100: DISABLE
29101: LD_INT 0
29103: PPUSH
29104: PPUSH
// begin ToLua ( displayPowell(); ) ;
29105: LD_STRING displayPowell();
29107: PPUSH
29108: CALL_OW 559
// uc_side := 0 ;
29112: LD_ADDR_OWVAR 20
29116: PUSH
29117: LD_INT 0
29119: ST_TO_ADDR
// uc_nation := 2 ;
29120: LD_ADDR_OWVAR 21
29124: PUSH
29125: LD_INT 2
29127: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29128: LD_ADDR_OWVAR 37
29132: PUSH
29133: LD_INT 14
29135: ST_TO_ADDR
// vc_engine := engine_siberite ;
29136: LD_ADDR_OWVAR 39
29140: PUSH
29141: LD_INT 3
29143: ST_TO_ADDR
// vc_control := control_apeman ;
29144: LD_ADDR_OWVAR 38
29148: PUSH
29149: LD_INT 5
29151: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29152: LD_ADDR_OWVAR 40
29156: PUSH
29157: LD_INT 29
29159: ST_TO_ADDR
// un := CreateVehicle ;
29160: LD_ADDR_VAR 0 2
29164: PUSH
29165: CALL_OW 45
29169: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29170: LD_VAR 0 2
29174: PPUSH
29175: LD_INT 1
29177: PPUSH
29178: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29182: LD_INT 35
29184: PPUSH
29185: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_INT 22
29196: PUSH
29197: LD_OWVAR 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PPUSH
29206: CALL_OW 69
29210: PPUSH
29211: LD_VAR 0 2
29215: PPUSH
29216: CALL_OW 74
29220: PPUSH
29221: CALL_OW 115
// until IsDead ( un ) ;
29225: LD_VAR 0 2
29229: PPUSH
29230: CALL_OW 301
29234: IFFALSE 29182
// end ;
29236: PPOPN 2
29238: END
// every 0 0$1 trigger StreamModeActive and sStu do
29239: LD_EXP 52
29243: PUSH
29244: LD_EXP 91
29248: AND
29249: IFFALSE 29265
29251: GO 29253
29253: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29254: LD_STRING displayStucuk();
29256: PPUSH
29257: CALL_OW 559
// ResetFog ;
29261: CALL_OW 335
// end ;
29265: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29266: LD_EXP 52
29270: PUSH
29271: LD_EXP 84
29275: AND
29276: IFFALSE 29417
29278: GO 29280
29280: DISABLE
29281: LD_INT 0
29283: PPUSH
29284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_INT 22
29292: PUSH
29293: LD_OWVAR 2
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 21
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PPUSH
29316: CALL_OW 69
29320: ST_TO_ADDR
// if not tmp then
29321: LD_VAR 0 2
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 29417
// un := tmp [ rand ( 1 , tmp ) ] ;
29330: LD_ADDR_VAR 0 1
29334: PUSH
29335: LD_VAR 0 2
29339: PUSH
29340: LD_INT 1
29342: PPUSH
29343: LD_VAR 0 2
29347: PPUSH
29348: CALL_OW 12
29352: ARRAY
29353: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29354: LD_VAR 0 1
29358: PPUSH
29359: LD_INT 0
29361: PPUSH
29362: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29366: LD_VAR 0 1
29370: PPUSH
29371: LD_OWVAR 3
29375: PUSH
29376: LD_VAR 0 1
29380: DIFF
29381: PPUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 74
29391: PPUSH
29392: CALL_OW 115
// wait ( 0 0$20 ) ;
29396: LD_INT 700
29398: PPUSH
29399: CALL_OW 67
// SetSide ( un , your_side ) ;
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_OWVAR 2
29412: PPUSH
29413: CALL_OW 235
// end ;
29417: PPOPN 2
29419: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29420: LD_EXP 52
29424: PUSH
29425: LD_EXP 85
29429: AND
29430: IFFALSE 29536
29432: GO 29434
29434: DISABLE
29435: LD_INT 0
29437: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29438: LD_ADDR_VAR 0 1
29442: PUSH
29443: LD_INT 22
29445: PUSH
29446: LD_OWVAR 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 30
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 30
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PPUSH
29487: CALL_OW 69
29491: ST_TO_ADDR
// if not depot then
29492: LD_VAR 0 1
29496: NOT
29497: IFFALSE 29501
// exit ;
29499: GO 29536
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29501: LD_VAR 0 1
29505: PUSH
29506: LD_INT 1
29508: ARRAY
29509: PPUSH
29510: CALL_OW 250
29514: PPUSH
29515: LD_VAR 0 1
29519: PUSH
29520: LD_INT 1
29522: ARRAY
29523: PPUSH
29524: CALL_OW 251
29528: PPUSH
29529: LD_INT 70
29531: PPUSH
29532: CALL_OW 495
// end ;
29536: PPOPN 1
29538: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29539: LD_EXP 52
29543: PUSH
29544: LD_EXP 86
29548: AND
29549: IFFALSE 29760
29551: GO 29553
29553: DISABLE
29554: LD_INT 0
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_INT 22
29568: PUSH
29569: LD_OWVAR 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 21
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 69
29596: ST_TO_ADDR
// if not tmp then
29597: LD_VAR 0 5
29601: NOT
29602: IFFALSE 29606
// exit ;
29604: GO 29760
// for i in tmp do
29606: LD_ADDR_VAR 0 1
29610: PUSH
29611: LD_VAR 0 5
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29758
// begin d := rand ( 0 , 5 ) ;
29619: LD_ADDR_VAR 0 4
29623: PUSH
29624: LD_INT 0
29626: PPUSH
29627: LD_INT 5
29629: PPUSH
29630: CALL_OW 12
29634: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: LD_VAR 0 1
29644: PPUSH
29645: CALL_OW 250
29649: PPUSH
29650: LD_VAR 0 4
29654: PPUSH
29655: LD_INT 3
29657: PPUSH
29658: LD_INT 12
29660: PPUSH
29661: CALL_OW 12
29665: PPUSH
29666: CALL_OW 272
29670: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_VAR 0 1
29680: PPUSH
29681: CALL_OW 251
29685: PPUSH
29686: LD_VAR 0 4
29690: PPUSH
29691: LD_INT 3
29693: PPUSH
29694: LD_INT 12
29696: PPUSH
29697: CALL_OW 12
29701: PPUSH
29702: CALL_OW 273
29706: ST_TO_ADDR
// if ValidHex ( x , y ) then
29707: LD_VAR 0 2
29711: PPUSH
29712: LD_VAR 0 3
29716: PPUSH
29717: CALL_OW 488
29721: IFFALSE 29756
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_VAR 0 2
29732: PPUSH
29733: LD_VAR 0 3
29737: PPUSH
29738: LD_INT 3
29740: PPUSH
29741: LD_INT 6
29743: PPUSH
29744: CALL_OW 12
29748: PPUSH
29749: LD_INT 1
29751: PPUSH
29752: CALL_OW 483
// end ;
29756: GO 29616
29758: POP
29759: POP
// end ;
29760: PPOPN 5
29762: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29763: LD_EXP 52
29767: PUSH
29768: LD_EXP 87
29772: AND
29773: IFFALSE 29867
29775: GO 29777
29777: DISABLE
29778: LD_INT 0
29780: PPUSH
29781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29782: LD_ADDR_VAR 0 2
29786: PUSH
29787: LD_INT 22
29789: PUSH
29790: LD_OWVAR 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 32
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 21
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: PPUSH
29824: CALL_OW 69
29828: ST_TO_ADDR
// if not tmp then
29829: LD_VAR 0 2
29833: NOT
29834: IFFALSE 29838
// exit ;
29836: GO 29867
// for i in tmp do
29838: LD_ADDR_VAR 0 1
29842: PUSH
29843: LD_VAR 0 2
29847: PUSH
29848: FOR_IN
29849: IFFALSE 29865
// SetFuel ( i , 0 ) ;
29851: LD_VAR 0 1
29855: PPUSH
29856: LD_INT 0
29858: PPUSH
29859: CALL_OW 240
29863: GO 29848
29865: POP
29866: POP
// end ;
29867: PPOPN 2
29869: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29870: LD_EXP 52
29874: PUSH
29875: LD_EXP 88
29879: AND
29880: IFFALSE 29946
29882: GO 29884
29884: DISABLE
29885: LD_INT 0
29887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29888: LD_ADDR_VAR 0 1
29892: PUSH
29893: LD_INT 22
29895: PUSH
29896: LD_OWVAR 2
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 30
29907: PUSH
29908: LD_INT 29
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PPUSH
29919: CALL_OW 69
29923: ST_TO_ADDR
// if not tmp then
29924: LD_VAR 0 1
29928: NOT
29929: IFFALSE 29933
// exit ;
29931: GO 29946
// DestroyUnit ( tmp [ 1 ] ) ;
29933: LD_VAR 0 1
29937: PUSH
29938: LD_INT 1
29940: ARRAY
29941: PPUSH
29942: CALL_OW 65
// end ;
29946: PPOPN 1
29948: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29949: LD_EXP 52
29953: PUSH
29954: LD_EXP 90
29958: AND
29959: IFFALSE 30088
29961: GO 29963
29963: DISABLE
29964: LD_INT 0
29966: PPUSH
// begin uc_side := 0 ;
29967: LD_ADDR_OWVAR 20
29971: PUSH
29972: LD_INT 0
29974: ST_TO_ADDR
// uc_nation := nation_arabian ;
29975: LD_ADDR_OWVAR 21
29979: PUSH
29980: LD_INT 2
29982: ST_TO_ADDR
// hc_gallery :=  ;
29983: LD_ADDR_OWVAR 33
29987: PUSH
29988: LD_STRING 
29990: ST_TO_ADDR
// hc_name :=  ;
29991: LD_ADDR_OWVAR 26
29995: PUSH
29996: LD_STRING 
29998: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 11
30004: PPUSH
30005: LD_INT 10
30007: PPUSH
30008: CALL_OW 380
// un := CreateHuman ;
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: CALL_OW 44
30021: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30022: LD_VAR 0 1
30026: PPUSH
30027: LD_INT 1
30029: PPUSH
30030: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30034: LD_INT 35
30036: PPUSH
30037: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30041: LD_VAR 0 1
30045: PPUSH
30046: LD_INT 22
30048: PUSH
30049: LD_OWVAR 2
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PPUSH
30058: CALL_OW 69
30062: PPUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 74
30072: PPUSH
30073: CALL_OW 115
// until IsDead ( un ) ;
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 301
30086: IFFALSE 30034
// end ;
30088: PPOPN 1
30090: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30091: LD_EXP 52
30095: PUSH
30096: LD_EXP 92
30100: AND
30101: IFFALSE 30113
30103: GO 30105
30105: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30106: LD_STRING earthquake(getX(game), 0, 32)
30108: PPUSH
30109: CALL_OW 559
30113: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30114: LD_EXP 52
30118: PUSH
30119: LD_EXP 93
30123: AND
30124: IFFALSE 30215
30126: GO 30128
30128: DISABLE
30129: LD_INT 0
30131: PPUSH
// begin enable ;
30132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30133: LD_ADDR_VAR 0 1
30137: PUSH
30138: LD_INT 22
30140: PUSH
30141: LD_OWVAR 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 21
30152: PUSH
30153: LD_INT 2
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 33
30162: PUSH
30163: LD_INT 3
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: PPUSH
30175: CALL_OW 69
30179: ST_TO_ADDR
// if not tmp then
30180: LD_VAR 0 1
30184: NOT
30185: IFFALSE 30189
// exit ;
30187: GO 30215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30189: LD_VAR 0 1
30193: PUSH
30194: LD_INT 1
30196: PPUSH
30197: LD_VAR 0 1
30201: PPUSH
30202: CALL_OW 12
30206: ARRAY
30207: PPUSH
30208: LD_INT 1
30210: PPUSH
30211: CALL_OW 234
// end ;
30215: PPOPN 1
30217: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30218: LD_EXP 52
30222: PUSH
30223: LD_EXP 94
30227: AND
30228: IFFALSE 30369
30230: GO 30232
30232: DISABLE
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
30237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30238: LD_ADDR_VAR 0 3
30242: PUSH
30243: LD_INT 22
30245: PUSH
30246: LD_OWVAR 2
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 25
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: ST_TO_ADDR
// if not tmp then
30274: LD_VAR 0 3
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 30369
// un := tmp [ rand ( 1 , tmp ) ] ;
30283: LD_ADDR_VAR 0 2
30287: PUSH
30288: LD_VAR 0 3
30292: PUSH
30293: LD_INT 1
30295: PPUSH
30296: LD_VAR 0 3
30300: PPUSH
30301: CALL_OW 12
30305: ARRAY
30306: ST_TO_ADDR
// if Crawls ( un ) then
30307: LD_VAR 0 2
30311: PPUSH
30312: CALL_OW 318
30316: IFFALSE 30327
// ComWalk ( un ) ;
30318: LD_VAR 0 2
30322: PPUSH
30323: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30327: LD_VAR 0 2
30331: PPUSH
30332: LD_INT 9
30334: PPUSH
30335: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30339: LD_INT 28
30341: PPUSH
30342: LD_OWVAR 2
30346: PPUSH
30347: LD_INT 2
30349: PPUSH
30350: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30354: LD_INT 29
30356: PPUSH
30357: LD_OWVAR 2
30361: PPUSH
30362: LD_INT 2
30364: PPUSH
30365: CALL_OW 322
// end ;
30369: PPOPN 3
30371: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30372: LD_EXP 52
30376: PUSH
30377: LD_EXP 95
30381: AND
30382: IFFALSE 30493
30384: GO 30386
30386: DISABLE
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
30391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: LD_INT 22
30399: PUSH
30400: LD_OWVAR 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 25
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 69
30427: ST_TO_ADDR
// if not tmp then
30428: LD_VAR 0 3
30432: NOT
30433: IFFALSE 30437
// exit ;
30435: GO 30493
// un := tmp [ rand ( 1 , tmp ) ] ;
30437: LD_ADDR_VAR 0 2
30441: PUSH
30442: LD_VAR 0 3
30446: PUSH
30447: LD_INT 1
30449: PPUSH
30450: LD_VAR 0 3
30454: PPUSH
30455: CALL_OW 12
30459: ARRAY
30460: ST_TO_ADDR
// if Crawls ( un ) then
30461: LD_VAR 0 2
30465: PPUSH
30466: CALL_OW 318
30470: IFFALSE 30481
// ComWalk ( un ) ;
30472: LD_VAR 0 2
30476: PPUSH
30477: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30481: LD_VAR 0 2
30485: PPUSH
30486: LD_INT 8
30488: PPUSH
30489: CALL_OW 336
// end ;
30493: PPOPN 3
30495: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30496: LD_EXP 52
30500: PUSH
30501: LD_EXP 96
30505: AND
30506: IFFALSE 30650
30508: GO 30510
30510: DISABLE
30511: LD_INT 0
30513: PPUSH
30514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30515: LD_ADDR_VAR 0 2
30519: PUSH
30520: LD_INT 22
30522: PUSH
30523: LD_OWVAR 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 21
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 34
30547: PUSH
30548: LD_INT 12
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 34
30557: PUSH
30558: LD_INT 51
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 34
30567: PUSH
30568: LD_INT 32
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: ST_TO_ADDR
// if not tmp then
30591: LD_VAR 0 2
30595: NOT
30596: IFFALSE 30600
// exit ;
30598: GO 30650
// for i in tmp do
30600: LD_ADDR_VAR 0 1
30604: PUSH
30605: LD_VAR 0 2
30609: PUSH
30610: FOR_IN
30611: IFFALSE 30648
// if GetCargo ( i , mat_artifact ) = 0 then
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_INT 4
30620: PPUSH
30621: CALL_OW 289
30625: PUSH
30626: LD_INT 0
30628: EQUAL
30629: IFFALSE 30646
// SetCargo ( i , mat_siberit , 100 ) ;
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_INT 3
30638: PPUSH
30639: LD_INT 100
30641: PPUSH
30642: CALL_OW 290
30646: GO 30610
30648: POP
30649: POP
// end ;
30650: PPOPN 2
30652: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30653: LD_EXP 52
30657: PUSH
30658: LD_EXP 97
30662: AND
30663: IFFALSE 30846
30665: GO 30667
30667: DISABLE
30668: LD_INT 0
30670: PPUSH
30671: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30672: LD_ADDR_VAR 0 2
30676: PUSH
30677: LD_INT 22
30679: PUSH
30680: LD_OWVAR 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PPUSH
30689: CALL_OW 69
30693: ST_TO_ADDR
// if not tmp then
30694: LD_VAR 0 2
30698: NOT
30699: IFFALSE 30703
// exit ;
30701: GO 30846
// for i := 1 to 2 do
30703: LD_ADDR_VAR 0 1
30707: PUSH
30708: DOUBLE
30709: LD_INT 1
30711: DEC
30712: ST_TO_ADDR
30713: LD_INT 2
30715: PUSH
30716: FOR_TO
30717: IFFALSE 30844
// begin uc_side := your_side ;
30719: LD_ADDR_OWVAR 20
30723: PUSH
30724: LD_OWVAR 2
30728: ST_TO_ADDR
// uc_nation := nation_american ;
30729: LD_ADDR_OWVAR 21
30733: PUSH
30734: LD_INT 1
30736: ST_TO_ADDR
// vc_chassis := us_morphling ;
30737: LD_ADDR_OWVAR 37
30741: PUSH
30742: LD_INT 5
30744: ST_TO_ADDR
// vc_engine := engine_siberite ;
30745: LD_ADDR_OWVAR 39
30749: PUSH
30750: LD_INT 3
30752: ST_TO_ADDR
// vc_control := control_computer ;
30753: LD_ADDR_OWVAR 38
30757: PUSH
30758: LD_INT 3
30760: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30761: LD_ADDR_OWVAR 40
30765: PUSH
30766: LD_INT 10
30768: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30769: LD_VAR 0 2
30773: PUSH
30774: LD_INT 1
30776: ARRAY
30777: PPUSH
30778: CALL_OW 310
30782: NOT
30783: IFFALSE 30830
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30785: CALL_OW 45
30789: PPUSH
30790: LD_VAR 0 2
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: PPUSH
30799: CALL_OW 250
30803: PPUSH
30804: LD_VAR 0 2
30808: PUSH
30809: LD_INT 1
30811: ARRAY
30812: PPUSH
30813: CALL_OW 251
30817: PPUSH
30818: LD_INT 12
30820: PPUSH
30821: LD_INT 1
30823: PPUSH
30824: CALL_OW 50
30828: GO 30842
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30830: CALL_OW 45
30834: PPUSH
30835: LD_INT 1
30837: PPUSH
30838: CALL_OW 51
// end ;
30842: GO 30716
30844: POP
30845: POP
// end ;
30846: PPOPN 2
30848: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30849: LD_EXP 52
30853: PUSH
30854: LD_EXP 98
30858: AND
30859: IFFALSE 31081
30861: GO 30863
30863: DISABLE
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30872: LD_ADDR_VAR 0 6
30876: PUSH
30877: LD_INT 22
30879: PUSH
30880: LD_OWVAR 2
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 21
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: PUSH
30902: LD_INT 23
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 69
30925: ST_TO_ADDR
// if not tmp then
30926: LD_VAR 0 6
30930: NOT
30931: IFFALSE 30935
// exit ;
30933: GO 31081
// s1 := rand ( 1 , 4 ) ;
30935: LD_ADDR_VAR 0 2
30939: PUSH
30940: LD_INT 1
30942: PPUSH
30943: LD_INT 4
30945: PPUSH
30946: CALL_OW 12
30950: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30951: LD_ADDR_VAR 0 4
30955: PUSH
30956: LD_VAR 0 6
30960: PUSH
30961: LD_INT 1
30963: ARRAY
30964: PPUSH
30965: LD_VAR 0 2
30969: PPUSH
30970: CALL_OW 259
30974: ST_TO_ADDR
// if s1 = 1 then
30975: LD_VAR 0 2
30979: PUSH
30980: LD_INT 1
30982: EQUAL
30983: IFFALSE 31003
// s2 := rand ( 2 , 4 ) else
30985: LD_ADDR_VAR 0 3
30989: PUSH
30990: LD_INT 2
30992: PPUSH
30993: LD_INT 4
30995: PPUSH
30996: CALL_OW 12
31000: ST_TO_ADDR
31001: GO 31011
// s2 := 1 ;
31003: LD_ADDR_VAR 0 3
31007: PUSH
31008: LD_INT 1
31010: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31011: LD_ADDR_VAR 0 5
31015: PUSH
31016: LD_VAR 0 6
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: CALL_OW 259
31034: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31035: LD_VAR 0 6
31039: PUSH
31040: LD_INT 1
31042: ARRAY
31043: PPUSH
31044: LD_VAR 0 2
31048: PPUSH
31049: LD_VAR 0 5
31053: PPUSH
31054: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31058: LD_VAR 0 6
31062: PUSH
31063: LD_INT 1
31065: ARRAY
31066: PPUSH
31067: LD_VAR 0 3
31071: PPUSH
31072: LD_VAR 0 4
31076: PPUSH
31077: CALL_OW 237
// end ;
31081: PPOPN 6
31083: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31084: LD_EXP 52
31088: PUSH
31089: LD_EXP 99
31093: AND
31094: IFFALSE 31173
31096: GO 31098
31098: DISABLE
31099: LD_INT 0
31101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31102: LD_ADDR_VAR 0 1
31106: PUSH
31107: LD_INT 22
31109: PUSH
31110: LD_OWVAR 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 30
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PPUSH
31133: CALL_OW 69
31137: ST_TO_ADDR
// if not tmp then
31138: LD_VAR 0 1
31142: NOT
31143: IFFALSE 31147
// exit ;
31145: GO 31173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31147: LD_VAR 0 1
31151: PUSH
31152: LD_INT 1
31154: PPUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL_OW 12
31164: ARRAY
31165: PPUSH
31166: LD_INT 1
31168: PPUSH
31169: CALL_OW 234
// end ;
31173: PPOPN 1
31175: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31176: LD_EXP 52
31180: PUSH
31181: LD_EXP 100
31185: AND
31186: IFFALSE 31298
31188: GO 31190
31190: DISABLE
31191: LD_INT 0
31193: PPUSH
31194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31195: LD_ADDR_VAR 0 2
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_OWVAR 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: LD_INT 30
31217: PUSH
31218: LD_INT 27
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 30
31227: PUSH
31228: LD_INT 26
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 30
31237: PUSH
31238: LD_INT 28
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PPUSH
31255: CALL_OW 69
31259: ST_TO_ADDR
// if not tmp then
31260: LD_VAR 0 2
31264: NOT
31265: IFFALSE 31269
// exit ;
31267: GO 31298
// for i in tmp do
31269: LD_ADDR_VAR 0 1
31273: PUSH
31274: LD_VAR 0 2
31278: PUSH
31279: FOR_IN
31280: IFFALSE 31296
// SetLives ( i , 1 ) ;
31282: LD_VAR 0 1
31286: PPUSH
31287: LD_INT 1
31289: PPUSH
31290: CALL_OW 234
31294: GO 31279
31296: POP
31297: POP
// end ;
31298: PPOPN 2
31300: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31301: LD_EXP 52
31305: PUSH
31306: LD_EXP 101
31310: AND
31311: IFFALSE 31598
31313: GO 31315
31315: DISABLE
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
// begin i := rand ( 1 , 7 ) ;
31321: LD_ADDR_VAR 0 1
31325: PUSH
31326: LD_INT 1
31328: PPUSH
31329: LD_INT 7
31331: PPUSH
31332: CALL_OW 12
31336: ST_TO_ADDR
// case i of 1 :
31337: LD_VAR 0 1
31341: PUSH
31342: LD_INT 1
31344: DOUBLE
31345: EQUAL
31346: IFTRUE 31350
31348: GO 31360
31350: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31351: LD_STRING earthquake(getX(game), 0, 32)
31353: PPUSH
31354: CALL_OW 559
31358: GO 31598
31360: LD_INT 2
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31382
31368: POP
// begin ToLua ( displayStucuk(); ) ;
31369: LD_STRING displayStucuk();
31371: PPUSH
31372: CALL_OW 559
// ResetFog ;
31376: CALL_OW 335
// end ; 3 :
31380: GO 31598
31382: LD_INT 3
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31494
31390: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31391: LD_ADDR_VAR 0 2
31395: PUSH
31396: LD_INT 22
31398: PUSH
31399: LD_OWVAR 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 25
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 2
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31598
// un := tmp [ rand ( 1 , tmp ) ] ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_VAR 0 2
31445: PUSH
31446: LD_INT 1
31448: PPUSH
31449: LD_VAR 0 2
31453: PPUSH
31454: CALL_OW 12
31458: ARRAY
31459: ST_TO_ADDR
// if Crawls ( un ) then
31460: LD_VAR 0 3
31464: PPUSH
31465: CALL_OW 318
31469: IFFALSE 31480
// ComWalk ( un ) ;
31471: LD_VAR 0 3
31475: PPUSH
31476: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31480: LD_VAR 0 3
31484: PPUSH
31485: LD_INT 8
31487: PPUSH
31488: CALL_OW 336
// end ; 4 :
31492: GO 31598
31494: LD_INT 4
31496: DOUBLE
31497: EQUAL
31498: IFTRUE 31502
31500: GO 31576
31502: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31503: LD_ADDR_VAR 0 2
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_OWVAR 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 30
31522: PUSH
31523: LD_INT 29
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: ST_TO_ADDR
// if not tmp then
31539: LD_VAR 0 2
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31598
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31548: LD_VAR 0 2
31552: PUSH
31553: LD_INT 1
31555: ARRAY
31556: PPUSH
31557: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31561: LD_VAR 0 2
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PPUSH
31570: CALL_OW 65
// end ; 5 .. 7 :
31574: GO 31598
31576: LD_INT 5
31578: DOUBLE
31579: GREATEREQUAL
31580: IFFALSE 31588
31582: LD_INT 7
31584: DOUBLE
31585: LESSEQUAL
31586: IFTRUE 31590
31588: GO 31597
31590: POP
// StreamSibBomb ; end ;
31591: CALL 27835 0 0
31595: GO 31598
31597: POP
// end ;
31598: PPOPN 3
31600: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31601: LD_EXP 52
31605: PUSH
31606: LD_EXP 102
31610: AND
31611: IFFALSE 31767
31613: GO 31615
31615: DISABLE
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
31620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31621: LD_ADDR_VAR 0 2
31625: PUSH
31626: LD_INT 81
31628: PUSH
31629: LD_OWVAR 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 21
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 21
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PPUSH
31670: CALL_OW 69
31674: ST_TO_ADDR
// if not tmp then
31675: LD_VAR 0 2
31679: NOT
31680: IFFALSE 31684
// exit ;
31682: GO 31767
// p := 0 ;
31684: LD_ADDR_VAR 0 3
31688: PUSH
31689: LD_INT 0
31691: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31692: LD_INT 35
31694: PPUSH
31695: CALL_OW 67
// p := p + 1 ;
31699: LD_ADDR_VAR 0 3
31703: PUSH
31704: LD_VAR 0 3
31708: PUSH
31709: LD_INT 1
31711: PLUS
31712: ST_TO_ADDR
// for i in tmp do
31713: LD_ADDR_VAR 0 1
31717: PUSH
31718: LD_VAR 0 2
31722: PUSH
31723: FOR_IN
31724: IFFALSE 31755
// if GetLives ( i ) < 1000 then
31726: LD_VAR 0 1
31730: PPUSH
31731: CALL_OW 256
31735: PUSH
31736: LD_INT 1000
31738: LESS
31739: IFFALSE 31753
// SetLives ( i , 1000 ) ;
31741: LD_VAR 0 1
31745: PPUSH
31746: LD_INT 1000
31748: PPUSH
31749: CALL_OW 234
31753: GO 31723
31755: POP
31756: POP
// until p > 20 ;
31757: LD_VAR 0 3
31761: PUSH
31762: LD_INT 20
31764: GREATER
31765: IFFALSE 31692
// end ;
31767: PPOPN 3
31769: END
// every 0 0$1 trigger StreamModeActive and sTime do
31770: LD_EXP 52
31774: PUSH
31775: LD_EXP 103
31779: AND
31780: IFFALSE 31815
31782: GO 31784
31784: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31785: LD_INT 28
31787: PPUSH
31788: LD_OWVAR 2
31792: PPUSH
31793: LD_INT 2
31795: PPUSH
31796: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31800: LD_INT 30
31802: PPUSH
31803: LD_OWVAR 2
31807: PPUSH
31808: LD_INT 2
31810: PPUSH
31811: CALL_OW 322
// end ;
31815: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31816: LD_EXP 52
31820: PUSH
31821: LD_EXP 104
31825: AND
31826: IFFALSE 31947
31828: GO 31830
31830: DISABLE
31831: LD_INT 0
31833: PPUSH
31834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31835: LD_ADDR_VAR 0 2
31839: PUSH
31840: LD_INT 22
31842: PUSH
31843: LD_OWVAR 2
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 21
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: LD_INT 23
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: PPUSH
31884: CALL_OW 69
31888: ST_TO_ADDR
// if not tmp then
31889: LD_VAR 0 2
31893: NOT
31894: IFFALSE 31898
// exit ;
31896: GO 31947
// for i in tmp do
31898: LD_ADDR_VAR 0 1
31902: PUSH
31903: LD_VAR 0 2
31907: PUSH
31908: FOR_IN
31909: IFFALSE 31945
// begin if Crawls ( i ) then
31911: LD_VAR 0 1
31915: PPUSH
31916: CALL_OW 318
31920: IFFALSE 31931
// ComWalk ( i ) ;
31922: LD_VAR 0 1
31926: PPUSH
31927: CALL_OW 138
// SetClass ( i , 2 ) ;
31931: LD_VAR 0 1
31935: PPUSH
31936: LD_INT 2
31938: PPUSH
31939: CALL_OW 336
// end ;
31943: GO 31908
31945: POP
31946: POP
// end ;
31947: PPOPN 2
31949: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31950: LD_EXP 52
31954: PUSH
31955: LD_EXP 105
31959: AND
31960: IFFALSE 32248
31962: GO 31964
31964: DISABLE
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
31969: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31970: LD_OWVAR 2
31974: PPUSH
31975: LD_INT 9
31977: PPUSH
31978: LD_INT 1
31980: PPUSH
31981: LD_INT 1
31983: PPUSH
31984: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31988: LD_INT 9
31990: PPUSH
31991: LD_OWVAR 2
31995: PPUSH
31996: CALL_OW 343
// uc_side := 9 ;
32000: LD_ADDR_OWVAR 20
32004: PUSH
32005: LD_INT 9
32007: ST_TO_ADDR
// uc_nation := 2 ;
32008: LD_ADDR_OWVAR 21
32012: PUSH
32013: LD_INT 2
32015: ST_TO_ADDR
// hc_name := Dark Warrior ;
32016: LD_ADDR_OWVAR 26
32020: PUSH
32021: LD_STRING Dark Warrior
32023: ST_TO_ADDR
// hc_gallery :=  ;
32024: LD_ADDR_OWVAR 33
32028: PUSH
32029: LD_STRING 
32031: ST_TO_ADDR
// hc_noskilllimit := true ;
32032: LD_ADDR_OWVAR 76
32036: PUSH
32037: LD_INT 1
32039: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32040: LD_ADDR_OWVAR 31
32044: PUSH
32045: LD_INT 30
32047: PUSH
32048: LD_INT 30
32050: PUSH
32051: LD_INT 30
32053: PUSH
32054: LD_INT 30
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// un := CreateHuman ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: CALL_OW 44
32072: ST_TO_ADDR
// hc_noskilllimit := false ;
32073: LD_ADDR_OWVAR 76
32077: PUSH
32078: LD_INT 0
32080: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32081: LD_VAR 0 3
32085: PPUSH
32086: LD_INT 1
32088: PPUSH
32089: CALL_OW 51
// ToLua ( playRanger() ) ;
32093: LD_STRING playRanger()
32095: PPUSH
32096: CALL_OW 559
// p := 0 ;
32100: LD_ADDR_VAR 0 2
32104: PUSH
32105: LD_INT 0
32107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32108: LD_INT 35
32110: PPUSH
32111: CALL_OW 67
// p := p + 1 ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: PLUS
32128: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32129: LD_VAR 0 3
32133: PPUSH
32134: CALL_OW 256
32138: PUSH
32139: LD_INT 1000
32141: LESS
32142: IFFALSE 32156
// SetLives ( un , 1000 ) ;
32144: LD_VAR 0 3
32148: PPUSH
32149: LD_INT 1000
32151: PPUSH
32152: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32156: LD_VAR 0 3
32160: PPUSH
32161: LD_INT 81
32163: PUSH
32164: LD_OWVAR 2
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 91
32175: PUSH
32176: LD_VAR 0 3
32180: PUSH
32181: LD_INT 30
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PPUSH
32193: CALL_OW 69
32197: PPUSH
32198: LD_VAR 0 3
32202: PPUSH
32203: CALL_OW 74
32207: PPUSH
32208: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32212: LD_VAR 0 2
32216: PUSH
32217: LD_INT 80
32219: GREATER
32220: PUSH
32221: LD_VAR 0 3
32225: PPUSH
32226: CALL_OW 301
32230: OR
32231: IFFALSE 32108
// if un then
32233: LD_VAR 0 3
32237: IFFALSE 32248
// RemoveUnit ( un ) ;
32239: LD_VAR 0 3
32243: PPUSH
32244: CALL_OW 64
// end ;
32248: PPOPN 3
32250: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32251: LD_EXP 106
32255: IFFALSE 32371
32257: GO 32259
32259: DISABLE
32260: LD_INT 0
32262: PPUSH
32263: PPUSH
32264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32265: LD_ADDR_VAR 0 2
32269: PUSH
32270: LD_INT 81
32272: PUSH
32273: LD_OWVAR 2
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 21
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PPUSH
32296: CALL_OW 69
32300: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32301: LD_STRING playComputer()
32303: PPUSH
32304: CALL_OW 559
// if not tmp then
32308: LD_VAR 0 2
32312: NOT
32313: IFFALSE 32317
// exit ;
32315: GO 32371
// for i in tmp do
32317: LD_ADDR_VAR 0 1
32321: PUSH
32322: LD_VAR 0 2
32326: PUSH
32327: FOR_IN
32328: IFFALSE 32369
// for j := 1 to 4 do
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: DOUBLE
32336: LD_INT 1
32338: DEC
32339: ST_TO_ADDR
32340: LD_INT 4
32342: PUSH
32343: FOR_TO
32344: IFFALSE 32365
// SetSkill ( i , j , 10 ) ;
32346: LD_VAR 0 1
32350: PPUSH
32351: LD_VAR 0 3
32355: PPUSH
32356: LD_INT 10
32358: PPUSH
32359: CALL_OW 237
32363: GO 32343
32365: POP
32366: POP
32367: GO 32327
32369: POP
32370: POP
// end ;
32371: PPOPN 3
32373: END
// every 0 0$1 trigger s30 do var i , tmp ;
32374: LD_EXP 107
32378: IFFALSE 32447
32380: GO 32382
32382: DISABLE
32383: LD_INT 0
32385: PPUSH
32386: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32387: LD_ADDR_VAR 0 2
32391: PUSH
32392: LD_INT 22
32394: PUSH
32395: LD_OWVAR 2
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PPUSH
32404: CALL_OW 69
32408: ST_TO_ADDR
// if not tmp then
32409: LD_VAR 0 2
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32447
// for i in tmp do
32418: LD_ADDR_VAR 0 1
32422: PUSH
32423: LD_VAR 0 2
32427: PUSH
32428: FOR_IN
32429: IFFALSE 32445
// SetLives ( i , 300 ) ;
32431: LD_VAR 0 1
32435: PPUSH
32436: LD_INT 300
32438: PPUSH
32439: CALL_OW 234
32443: GO 32428
32445: POP
32446: POP
// end ;
32447: PPOPN 2
32449: END
// every 0 0$1 trigger s60 do var i , tmp ;
32450: LD_EXP 108
32454: IFFALSE 32523
32456: GO 32458
32458: DISABLE
32459: LD_INT 0
32461: PPUSH
32462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32463: LD_ADDR_VAR 0 2
32467: PUSH
32468: LD_INT 22
32470: PUSH
32471: LD_OWVAR 2
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PPUSH
32480: CALL_OW 69
32484: ST_TO_ADDR
// if not tmp then
32485: LD_VAR 0 2
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 32523
// for i in tmp do
32494: LD_ADDR_VAR 0 1
32498: PUSH
32499: LD_VAR 0 2
32503: PUSH
32504: FOR_IN
32505: IFFALSE 32521
// SetLives ( i , 600 ) ;
32507: LD_VAR 0 1
32511: PPUSH
32512: LD_INT 600
32514: PPUSH
32515: CALL_OW 234
32519: GO 32504
32521: POP
32522: POP
// end ;
32523: PPOPN 2
32525: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32526: LD_INT 0
32528: PPUSH
// case cmd of 301 :
32529: LD_VAR 0 1
32533: PUSH
32534: LD_INT 301
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32574
32542: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32543: LD_VAR 0 6
32547: PPUSH
32548: LD_VAR 0 7
32552: PPUSH
32553: LD_VAR 0 8
32557: PPUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: LD_VAR 0 5
32567: PPUSH
32568: CALL 33783 0 5
32572: GO 32695
32574: LD_INT 302
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32619
32582: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32583: LD_VAR 0 6
32587: PPUSH
32588: LD_VAR 0 7
32592: PPUSH
32593: LD_VAR 0 8
32597: PPUSH
32598: LD_VAR 0 9
32602: PPUSH
32603: LD_VAR 0 4
32607: PPUSH
32608: LD_VAR 0 5
32612: PPUSH
32613: CALL 33874 0 6
32617: GO 32695
32619: LD_INT 303
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32664
32627: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32628: LD_VAR 0 6
32632: PPUSH
32633: LD_VAR 0 7
32637: PPUSH
32638: LD_VAR 0 8
32642: PPUSH
32643: LD_VAR 0 9
32647: PPUSH
32648: LD_VAR 0 4
32652: PPUSH
32653: LD_VAR 0 5
32657: PPUSH
32658: CALL 32700 0 6
32662: GO 32695
32664: LD_INT 304
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 32694
32672: POP
// hHackTeleport ( unit , x , y ) ; end ;
32673: LD_VAR 0 2
32677: PPUSH
32678: LD_VAR 0 4
32682: PPUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: CALL 34467 0 3
32692: GO 32695
32694: POP
// end ;
32695: LD_VAR 0 12
32699: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32704: LD_VAR 0 1
32708: PUSH
32709: LD_INT 1
32711: LESS
32712: PUSH
32713: LD_VAR 0 1
32717: PUSH
32718: LD_INT 3
32720: GREATER
32721: OR
32722: PUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: LD_VAR 0 6
32732: PPUSH
32733: CALL_OW 428
32737: OR
32738: IFFALSE 32742
// exit ;
32740: GO 33470
// uc_side := your_side ;
32742: LD_ADDR_OWVAR 20
32746: PUSH
32747: LD_OWVAR 2
32751: ST_TO_ADDR
// uc_nation := nation ;
32752: LD_ADDR_OWVAR 21
32756: PUSH
32757: LD_VAR 0 1
32761: ST_TO_ADDR
// bc_level = 1 ;
32762: LD_ADDR_OWVAR 43
32766: PUSH
32767: LD_INT 1
32769: ST_TO_ADDR
// case btype of 1 :
32770: LD_VAR 0 2
32774: PUSH
32775: LD_INT 1
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32794
32783: POP
// bc_type := b_depot ; 2 :
32784: LD_ADDR_OWVAR 42
32788: PUSH
32789: LD_INT 0
32791: ST_TO_ADDR
32792: GO 33414
32794: LD_INT 2
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32813
32802: POP
// bc_type := b_warehouse ; 3 :
32803: LD_ADDR_OWVAR 42
32807: PUSH
32808: LD_INT 1
32810: ST_TO_ADDR
32811: GO 33414
32813: LD_INT 3
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32832
32821: POP
// bc_type := b_lab ; 4 .. 9 :
32822: LD_ADDR_OWVAR 42
32826: PUSH
32827: LD_INT 6
32829: ST_TO_ADDR
32830: GO 33414
32832: LD_INT 4
32834: DOUBLE
32835: GREATEREQUAL
32836: IFFALSE 32844
32838: LD_INT 9
32840: DOUBLE
32841: LESSEQUAL
32842: IFTRUE 32846
32844: GO 32906
32846: POP
// begin bc_type := b_lab_half ;
32847: LD_ADDR_OWVAR 42
32851: PUSH
32852: LD_INT 7
32854: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32855: LD_ADDR_OWVAR 44
32859: PUSH
32860: LD_INT 10
32862: PUSH
32863: LD_INT 11
32865: PUSH
32866: LD_INT 12
32868: PUSH
32869: LD_INT 15
32871: PUSH
32872: LD_INT 14
32874: PUSH
32875: LD_INT 13
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PUSH
32886: LD_VAR 0 2
32890: PUSH
32891: LD_INT 3
32893: MINUS
32894: ARRAY
32895: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32896: LD_ADDR_OWVAR 45
32900: PUSH
32901: LD_INT 9
32903: ST_TO_ADDR
// end ; 10 .. 13 :
32904: GO 33414
32906: LD_INT 10
32908: DOUBLE
32909: GREATEREQUAL
32910: IFFALSE 32918
32912: LD_INT 13
32914: DOUBLE
32915: LESSEQUAL
32916: IFTRUE 32920
32918: GO 32997
32920: POP
// begin bc_type := b_lab_full ;
32921: LD_ADDR_OWVAR 42
32925: PUSH
32926: LD_INT 8
32928: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32929: LD_ADDR_OWVAR 44
32933: PUSH
32934: LD_INT 10
32936: PUSH
32937: LD_INT 12
32939: PUSH
32940: LD_INT 14
32942: PUSH
32943: LD_INT 13
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: PUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_INT 9
32959: MINUS
32960: ARRAY
32961: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32962: LD_ADDR_OWVAR 45
32966: PUSH
32967: LD_INT 11
32969: PUSH
32970: LD_INT 15
32972: PUSH
32973: LD_INT 12
32975: PUSH
32976: LD_INT 15
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: PUSH
32985: LD_VAR 0 2
32989: PUSH
32990: LD_INT 9
32992: MINUS
32993: ARRAY
32994: ST_TO_ADDR
// end ; 14 :
32995: GO 33414
32997: LD_INT 14
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33016
33005: POP
// bc_type := b_workshop ; 15 :
33006: LD_ADDR_OWVAR 42
33010: PUSH
33011: LD_INT 2
33013: ST_TO_ADDR
33014: GO 33414
33016: LD_INT 15
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33035
33024: POP
// bc_type := b_factory ; 16 :
33025: LD_ADDR_OWVAR 42
33029: PUSH
33030: LD_INT 3
33032: ST_TO_ADDR
33033: GO 33414
33035: LD_INT 16
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33054
33043: POP
// bc_type := b_ext_gun ; 17 :
33044: LD_ADDR_OWVAR 42
33048: PUSH
33049: LD_INT 17
33051: ST_TO_ADDR
33052: GO 33414
33054: LD_INT 17
33056: DOUBLE
33057: EQUAL
33058: IFTRUE 33062
33060: GO 33090
33062: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33063: LD_ADDR_OWVAR 42
33067: PUSH
33068: LD_INT 19
33070: PUSH
33071: LD_INT 23
33073: PUSH
33074: LD_INT 19
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_VAR 0 1
33086: ARRAY
33087: ST_TO_ADDR
33088: GO 33414
33090: LD_INT 18
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33109
33098: POP
// bc_type := b_ext_radar ; 19 :
33099: LD_ADDR_OWVAR 42
33103: PUSH
33104: LD_INT 20
33106: ST_TO_ADDR
33107: GO 33414
33109: LD_INT 19
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33128
33117: POP
// bc_type := b_ext_radio ; 20 :
33118: LD_ADDR_OWVAR 42
33122: PUSH
33123: LD_INT 22
33125: ST_TO_ADDR
33126: GO 33414
33128: LD_INT 20
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33147
33136: POP
// bc_type := b_ext_siberium ; 21 :
33137: LD_ADDR_OWVAR 42
33141: PUSH
33142: LD_INT 21
33144: ST_TO_ADDR
33145: GO 33414
33147: LD_INT 21
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33166
33155: POP
// bc_type := b_ext_computer ; 22 :
33156: LD_ADDR_OWVAR 42
33160: PUSH
33161: LD_INT 24
33163: ST_TO_ADDR
33164: GO 33414
33166: LD_INT 22
33168: DOUBLE
33169: EQUAL
33170: IFTRUE 33174
33172: GO 33185
33174: POP
// bc_type := b_ext_track ; 23 :
33175: LD_ADDR_OWVAR 42
33179: PUSH
33180: LD_INT 16
33182: ST_TO_ADDR
33183: GO 33414
33185: LD_INT 23
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33204
33193: POP
// bc_type := b_ext_laser ; 24 :
33194: LD_ADDR_OWVAR 42
33198: PUSH
33199: LD_INT 25
33201: ST_TO_ADDR
33202: GO 33414
33204: LD_INT 24
33206: DOUBLE
33207: EQUAL
33208: IFTRUE 33212
33210: GO 33223
33212: POP
// bc_type := b_control_tower ; 25 :
33213: LD_ADDR_OWVAR 42
33217: PUSH
33218: LD_INT 36
33220: ST_TO_ADDR
33221: GO 33414
33223: LD_INT 25
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33231
33229: GO 33242
33231: POP
// bc_type := b_breastwork ; 26 :
33232: LD_ADDR_OWVAR 42
33236: PUSH
33237: LD_INT 31
33239: ST_TO_ADDR
33240: GO 33414
33242: LD_INT 26
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33261
33250: POP
// bc_type := b_bunker ; 27 :
33251: LD_ADDR_OWVAR 42
33255: PUSH
33256: LD_INT 32
33258: ST_TO_ADDR
33259: GO 33414
33261: LD_INT 27
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33280
33269: POP
// bc_type := b_turret ; 28 :
33270: LD_ADDR_OWVAR 42
33274: PUSH
33275: LD_INT 33
33277: ST_TO_ADDR
33278: GO 33414
33280: LD_INT 28
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33299
33288: POP
// bc_type := b_armoury ; 29 :
33289: LD_ADDR_OWVAR 42
33293: PUSH
33294: LD_INT 4
33296: ST_TO_ADDR
33297: GO 33414
33299: LD_INT 29
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33307
33305: GO 33318
33307: POP
// bc_type := b_barracks ; 30 :
33308: LD_ADDR_OWVAR 42
33312: PUSH
33313: LD_INT 5
33315: ST_TO_ADDR
33316: GO 33414
33318: LD_INT 30
33320: DOUBLE
33321: EQUAL
33322: IFTRUE 33326
33324: GO 33337
33326: POP
// bc_type := b_solar_power ; 31 :
33327: LD_ADDR_OWVAR 42
33331: PUSH
33332: LD_INT 27
33334: ST_TO_ADDR
33335: GO 33414
33337: LD_INT 31
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33356
33345: POP
// bc_type := b_oil_power ; 32 :
33346: LD_ADDR_OWVAR 42
33350: PUSH
33351: LD_INT 26
33353: ST_TO_ADDR
33354: GO 33414
33356: LD_INT 32
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33375
33364: POP
// bc_type := b_siberite_power ; 33 :
33365: LD_ADDR_OWVAR 42
33369: PUSH
33370: LD_INT 28
33372: ST_TO_ADDR
33373: GO 33414
33375: LD_INT 33
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33394
33383: POP
// bc_type := b_oil_mine ; 34 :
33384: LD_ADDR_OWVAR 42
33388: PUSH
33389: LD_INT 29
33391: ST_TO_ADDR
33392: GO 33414
33394: LD_INT 34
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33413
33402: POP
// bc_type := b_siberite_mine ; end ;
33403: LD_ADDR_OWVAR 42
33407: PUSH
33408: LD_INT 30
33410: ST_TO_ADDR
33411: GO 33414
33413: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33414: LD_ADDR_VAR 0 8
33418: PUSH
33419: LD_VAR 0 5
33423: PPUSH
33424: LD_VAR 0 6
33428: PPUSH
33429: LD_VAR 0 3
33433: PPUSH
33434: CALL_OW 47
33438: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33439: LD_OWVAR 42
33443: PUSH
33444: LD_INT 32
33446: PUSH
33447: LD_INT 33
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: IN
33454: IFFALSE 33470
// PlaceWeaponTurret ( b , weapon ) ;
33456: LD_VAR 0 8
33460: PPUSH
33461: LD_VAR 0 4
33465: PPUSH
33466: CALL_OW 431
// end ;
33470: LD_VAR 0 7
33474: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33475: LD_INT 0
33477: PPUSH
33478: PPUSH
33479: PPUSH
33480: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33481: LD_ADDR_VAR 0 4
33485: PUSH
33486: LD_INT 22
33488: PUSH
33489: LD_OWVAR 2
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: LD_INT 30
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 30
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PPUSH
33530: CALL_OW 69
33534: ST_TO_ADDR
// if not tmp then
33535: LD_VAR 0 4
33539: NOT
33540: IFFALSE 33544
// exit ;
33542: GO 33603
// for i in tmp do
33544: LD_ADDR_VAR 0 2
33548: PUSH
33549: LD_VAR 0 4
33553: PUSH
33554: FOR_IN
33555: IFFALSE 33601
// for j = 1 to 3 do
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: DOUBLE
33563: LD_INT 1
33565: DEC
33566: ST_TO_ADDR
33567: LD_INT 3
33569: PUSH
33570: FOR_TO
33571: IFFALSE 33597
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: CALL_OW 274
33582: PPUSH
33583: LD_VAR 0 3
33587: PPUSH
33588: LD_INT 99999
33590: PPUSH
33591: CALL_OW 277
33595: GO 33570
33597: POP
33598: POP
33599: GO 33554
33601: POP
33602: POP
// end ;
33603: LD_VAR 0 1
33607: RET
// export function hHackSetLevel10 ; var i , j ; begin
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
33612: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33613: LD_ADDR_VAR 0 2
33617: PUSH
33618: LD_INT 21
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PPUSH
33628: CALL_OW 69
33632: PUSH
33633: FOR_IN
33634: IFFALSE 33686
// if IsSelected ( i ) then
33636: LD_VAR 0 2
33640: PPUSH
33641: CALL_OW 306
33645: IFFALSE 33684
// begin for j := 1 to 4 do
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: DOUBLE
33653: LD_INT 1
33655: DEC
33656: ST_TO_ADDR
33657: LD_INT 4
33659: PUSH
33660: FOR_TO
33661: IFFALSE 33682
// SetSkill ( i , j , 10 ) ;
33663: LD_VAR 0 2
33667: PPUSH
33668: LD_VAR 0 3
33672: PPUSH
33673: LD_INT 10
33675: PPUSH
33676: CALL_OW 237
33680: GO 33660
33682: POP
33683: POP
// end ;
33684: GO 33633
33686: POP
33687: POP
// end ;
33688: LD_VAR 0 1
33692: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33693: LD_INT 0
33695: PPUSH
33696: PPUSH
33697: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33698: LD_ADDR_VAR 0 2
33702: PUSH
33703: LD_INT 22
33705: PUSH
33706: LD_OWVAR 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 21
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PPUSH
33729: CALL_OW 69
33733: PUSH
33734: FOR_IN
33735: IFFALSE 33776
// begin for j := 1 to 4 do
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: DOUBLE
33743: LD_INT 1
33745: DEC
33746: ST_TO_ADDR
33747: LD_INT 4
33749: PUSH
33750: FOR_TO
33751: IFFALSE 33772
// SetSkill ( i , j , 10 ) ;
33753: LD_VAR 0 2
33757: PPUSH
33758: LD_VAR 0 3
33762: PPUSH
33763: LD_INT 10
33765: PPUSH
33766: CALL_OW 237
33770: GO 33750
33772: POP
33773: POP
// end ;
33774: GO 33734
33776: POP
33777: POP
// end ;
33778: LD_VAR 0 1
33782: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33783: LD_INT 0
33785: PPUSH
// uc_side := your_side ;
33786: LD_ADDR_OWVAR 20
33790: PUSH
33791: LD_OWVAR 2
33795: ST_TO_ADDR
// uc_nation := nation ;
33796: LD_ADDR_OWVAR 21
33800: PUSH
33801: LD_VAR 0 1
33805: ST_TO_ADDR
// InitHc ;
33806: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33810: LD_INT 0
33812: PPUSH
33813: LD_VAR 0 2
33817: PPUSH
33818: LD_VAR 0 3
33822: PPUSH
33823: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33827: LD_VAR 0 4
33831: PPUSH
33832: LD_VAR 0 5
33836: PPUSH
33837: CALL_OW 428
33841: PUSH
33842: LD_INT 0
33844: EQUAL
33845: IFFALSE 33869
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33847: CALL_OW 44
33851: PPUSH
33852: LD_VAR 0 4
33856: PPUSH
33857: LD_VAR 0 5
33861: PPUSH
33862: LD_INT 1
33864: PPUSH
33865: CALL_OW 48
// end ;
33869: LD_VAR 0 6
33873: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
// uc_side := your_side ;
33878: LD_ADDR_OWVAR 20
33882: PUSH
33883: LD_OWVAR 2
33887: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33888: LD_VAR 0 1
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 3
33901: PUSH
33902: LD_INT 4
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: IN
33915: IFFALSE 33927
// uc_nation := nation_american else
33917: LD_ADDR_OWVAR 21
33921: PUSH
33922: LD_INT 1
33924: ST_TO_ADDR
33925: GO 33970
// if chassis in [ 11 , 12 , 13 , 14 ] then
33927: LD_VAR 0 1
33931: PUSH
33932: LD_INT 11
33934: PUSH
33935: LD_INT 12
33937: PUSH
33938: LD_INT 13
33940: PUSH
33941: LD_INT 14
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: IN
33950: IFFALSE 33962
// uc_nation := nation_arabian else
33952: LD_ADDR_OWVAR 21
33956: PUSH
33957: LD_INT 2
33959: ST_TO_ADDR
33960: GO 33970
// uc_nation := nation_russian ;
33962: LD_ADDR_OWVAR 21
33966: PUSH
33967: LD_INT 3
33969: ST_TO_ADDR
// vc_chassis := chassis ;
33970: LD_ADDR_OWVAR 37
33974: PUSH
33975: LD_VAR 0 1
33979: ST_TO_ADDR
// vc_engine := engine ;
33980: LD_ADDR_OWVAR 39
33984: PUSH
33985: LD_VAR 0 2
33989: ST_TO_ADDR
// vc_control := control ;
33990: LD_ADDR_OWVAR 38
33994: PUSH
33995: LD_VAR 0 3
33999: ST_TO_ADDR
// vc_weapon := weapon ;
34000: LD_ADDR_OWVAR 40
34004: PUSH
34005: LD_VAR 0 4
34009: ST_TO_ADDR
// un := CreateVehicle ;
34010: LD_ADDR_VAR 0 8
34014: PUSH
34015: CALL_OW 45
34019: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34020: LD_VAR 0 8
34024: PPUSH
34025: LD_INT 0
34027: PPUSH
34028: LD_INT 5
34030: PPUSH
34031: CALL_OW 12
34035: PPUSH
34036: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34040: LD_VAR 0 8
34044: PPUSH
34045: LD_VAR 0 5
34049: PPUSH
34050: LD_VAR 0 6
34054: PPUSH
34055: LD_INT 1
34057: PPUSH
34058: CALL_OW 48
// end ;
34062: LD_VAR 0 7
34066: RET
// export hInvincible ; every 1 do
34067: GO 34069
34069: DISABLE
// hInvincible := [ ] ;
34070: LD_ADDR_EXP 109
34074: PUSH
34075: EMPTY
34076: ST_TO_ADDR
34077: END
// every 10 do var i ;
34078: GO 34080
34080: DISABLE
34081: LD_INT 0
34083: PPUSH
// begin enable ;
34084: ENABLE
// if not hInvincible then
34085: LD_EXP 109
34089: NOT
34090: IFFALSE 34094
// exit ;
34092: GO 34138
// for i in hInvincible do
34094: LD_ADDR_VAR 0 1
34098: PUSH
34099: LD_EXP 109
34103: PUSH
34104: FOR_IN
34105: IFFALSE 34136
// if GetLives ( i ) < 1000 then
34107: LD_VAR 0 1
34111: PPUSH
34112: CALL_OW 256
34116: PUSH
34117: LD_INT 1000
34119: LESS
34120: IFFALSE 34134
// SetLives ( i , 1000 ) ;
34122: LD_VAR 0 1
34126: PPUSH
34127: LD_INT 1000
34129: PPUSH
34130: CALL_OW 234
34134: GO 34104
34136: POP
34137: POP
// end ;
34138: PPOPN 1
34140: END
// export function hHackInvincible ; var i ; begin
34141: LD_INT 0
34143: PPUSH
34144: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34145: LD_ADDR_VAR 0 2
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 21
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 21
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: PPUSH
34178: CALL_OW 69
34182: PUSH
34183: FOR_IN
34184: IFFALSE 34245
// if IsSelected ( i ) then
34186: LD_VAR 0 2
34190: PPUSH
34191: CALL_OW 306
34195: IFFALSE 34243
// begin if i in hInvincible then
34197: LD_VAR 0 2
34201: PUSH
34202: LD_EXP 109
34206: IN
34207: IFFALSE 34227
// hInvincible := hInvincible diff i else
34209: LD_ADDR_EXP 109
34213: PUSH
34214: LD_EXP 109
34218: PUSH
34219: LD_VAR 0 2
34223: DIFF
34224: ST_TO_ADDR
34225: GO 34243
// hInvincible := hInvincible union i ;
34227: LD_ADDR_EXP 109
34231: PUSH
34232: LD_EXP 109
34236: PUSH
34237: LD_VAR 0 2
34241: UNION
34242: ST_TO_ADDR
// end ;
34243: GO 34183
34245: POP
34246: POP
// end ;
34247: LD_VAR 0 1
34251: RET
// export function hHackInvisible ; var i , j ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
34256: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_INT 21
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PPUSH
34272: CALL_OW 69
34276: PUSH
34277: FOR_IN
34278: IFFALSE 34302
// if IsSelected ( i ) then
34280: LD_VAR 0 2
34284: PPUSH
34285: CALL_OW 306
34289: IFFALSE 34300
// ComForceInvisible ( i ) ;
34291: LD_VAR 0 2
34295: PPUSH
34296: CALL_OW 496
34300: GO 34277
34302: POP
34303: POP
// end ;
34304: LD_VAR 0 1
34308: RET
// export function hHackChangeYourSide ; begin
34309: LD_INT 0
34311: PPUSH
// if your_side = 8 then
34312: LD_OWVAR 2
34316: PUSH
34317: LD_INT 8
34319: EQUAL
34320: IFFALSE 34332
// your_side := 0 else
34322: LD_ADDR_OWVAR 2
34326: PUSH
34327: LD_INT 0
34329: ST_TO_ADDR
34330: GO 34346
// your_side := your_side + 1 ;
34332: LD_ADDR_OWVAR 2
34336: PUSH
34337: LD_OWVAR 2
34341: PUSH
34342: LD_INT 1
34344: PLUS
34345: ST_TO_ADDR
// end ;
34346: LD_VAR 0 1
34350: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34351: LD_INT 0
34353: PPUSH
34354: PPUSH
34355: PPUSH
// for i in all_units do
34356: LD_ADDR_VAR 0 2
34360: PUSH
34361: LD_OWVAR 3
34365: PUSH
34366: FOR_IN
34367: IFFALSE 34445
// if IsSelected ( i ) then
34369: LD_VAR 0 2
34373: PPUSH
34374: CALL_OW 306
34378: IFFALSE 34443
// begin j := GetSide ( i ) ;
34380: LD_ADDR_VAR 0 3
34384: PUSH
34385: LD_VAR 0 2
34389: PPUSH
34390: CALL_OW 255
34394: ST_TO_ADDR
// if j = 8 then
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 8
34402: EQUAL
34403: IFFALSE 34415
// j := 0 else
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_INT 0
34412: ST_TO_ADDR
34413: GO 34429
// j := j + 1 ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_VAR 0 3
34424: PUSH
34425: LD_INT 1
34427: PLUS
34428: ST_TO_ADDR
// SetSide ( i , j ) ;
34429: LD_VAR 0 2
34433: PPUSH
34434: LD_VAR 0 3
34438: PPUSH
34439: CALL_OW 235
// end ;
34443: GO 34366
34445: POP
34446: POP
// end ;
34447: LD_VAR 0 1
34451: RET
// export function hHackFog ; begin
34452: LD_INT 0
34454: PPUSH
// FogOff ( true ) ;
34455: LD_INT 1
34457: PPUSH
34458: CALL_OW 344
// end ;
34462: LD_VAR 0 1
34466: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34467: LD_INT 0
34469: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34470: LD_VAR 0 1
34474: PPUSH
34475: LD_VAR 0 2
34479: PPUSH
34480: LD_VAR 0 3
34484: PPUSH
34485: LD_INT 1
34487: PPUSH
34488: LD_INT 1
34490: PPUSH
34491: CALL_OW 483
// CenterOnXY ( x , y ) ;
34495: LD_VAR 0 2
34499: PPUSH
34500: LD_VAR 0 3
34504: PPUSH
34505: CALL_OW 84
// end ;
34509: LD_VAR 0 4
34513: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34514: LD_INT 0
34516: PPUSH
34517: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34518: LD_VAR 0 1
34522: NOT
34523: PUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: CALL_OW 488
34538: NOT
34539: OR
34540: PUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 266
34550: PUSH
34551: LD_INT 3
34553: NONEQUAL
34554: PUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 247
34564: PUSH
34565: LD_INT 1
34567: EQUAL
34568: NOT
34569: AND
34570: OR
34571: IFFALSE 34575
// exit ;
34573: GO 34857
// if GetType ( factory ) = unit_human then
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 247
34584: PUSH
34585: LD_INT 1
34587: EQUAL
34588: IFFALSE 34605
// factory := IsInUnit ( factory ) ;
34590: LD_ADDR_VAR 0 1
34594: PUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: CALL_OW 310
34604: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34605: LD_VAR 0 1
34609: PPUSH
34610: CALL_OW 266
34614: PUSH
34615: LD_INT 3
34617: NONEQUAL
34618: IFFALSE 34622
// exit ;
34620: GO 34857
// for i := 1 to Count ( factoryWaypoints ) do
34622: LD_ADDR_VAR 0 5
34626: PUSH
34627: DOUBLE
34628: LD_INT 1
34630: DEC
34631: ST_TO_ADDR
34632: LD_EXP 110
34636: PPUSH
34637: CALL 43503 0 1
34641: PUSH
34642: FOR_TO
34643: IFFALSE 34805
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34645: LD_VAR 0 2
34649: PPUSH
34650: LD_VAR 0 3
34654: PPUSH
34655: CALL_OW 428
34659: PUSH
34660: LD_EXP 110
34664: PUSH
34665: LD_VAR 0 5
34669: ARRAY
34670: PUSH
34671: LD_INT 2
34673: ARRAY
34674: EQUAL
34675: IFFALSE 34707
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34677: LD_ADDR_EXP 110
34681: PUSH
34682: LD_EXP 110
34686: PPUSH
34687: LD_VAR 0 5
34691: PPUSH
34692: CALL_OW 3
34696: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34697: CALL 34862 0 0
// exit ;
34701: POP
34702: POP
34703: GO 34857
// end else
34705: GO 34803
// if factory = factoryWaypoints [ i ] [ 2 ] then
34707: LD_VAR 0 1
34711: PUSH
34712: LD_EXP 110
34716: PUSH
34717: LD_VAR 0 5
34721: ARRAY
34722: PUSH
34723: LD_INT 2
34725: ARRAY
34726: EQUAL
34727: IFFALSE 34803
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34729: LD_ADDR_EXP 110
34733: PUSH
34734: LD_EXP 110
34738: PPUSH
34739: LD_VAR 0 5
34743: PPUSH
34744: CALL_OW 3
34748: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34749: LD_ADDR_EXP 110
34753: PUSH
34754: LD_EXP 110
34758: PPUSH
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 255
34768: PUSH
34769: LD_VAR 0 1
34773: PUSH
34774: LD_VAR 0 2
34778: PUSH
34779: LD_VAR 0 3
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: PPUSH
34790: CALL 79112 0 2
34794: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34795: CALL 34862 0 0
// exit ;
34799: POP
34800: POP
34801: GO 34857
// end ; end ;
34803: GO 34642
34805: POP
34806: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34807: LD_ADDR_EXP 110
34811: PUSH
34812: LD_EXP 110
34816: PPUSH
34817: LD_VAR 0 1
34821: PPUSH
34822: CALL_OW 255
34826: PUSH
34827: LD_VAR 0 1
34831: PUSH
34832: LD_VAR 0 2
34836: PUSH
34837: LD_VAR 0 3
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: PPUSH
34848: CALL 79112 0 2
34852: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34853: CALL 34862 0 0
// end ;
34857: LD_VAR 0 4
34861: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34862: LD_INT 0
34864: PPUSH
34865: PPUSH
34866: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34867: LD_STRING resetFactoryWaypoint();
34869: PPUSH
34870: CALL_OW 559
// if factoryWaypoints then
34874: LD_EXP 110
34878: IFFALSE 34999
// begin list := factoryWaypoints ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_EXP 110
34889: ST_TO_ADDR
// for i := 1 to list do
34890: LD_ADDR_VAR 0 2
34894: PUSH
34895: DOUBLE
34896: LD_INT 1
34898: DEC
34899: ST_TO_ADDR
34900: LD_VAR 0 3
34904: PUSH
34905: FOR_TO
34906: IFFALSE 34997
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34908: LD_STRING setFactoryWaypointXY(
34910: PUSH
34911: LD_VAR 0 3
34915: PUSH
34916: LD_VAR 0 2
34920: ARRAY
34921: PUSH
34922: LD_INT 1
34924: ARRAY
34925: STR
34926: PUSH
34927: LD_STRING ,
34929: STR
34930: PUSH
34931: LD_VAR 0 3
34935: PUSH
34936: LD_VAR 0 2
34940: ARRAY
34941: PUSH
34942: LD_INT 2
34944: ARRAY
34945: STR
34946: PUSH
34947: LD_STRING ,
34949: STR
34950: PUSH
34951: LD_VAR 0 3
34955: PUSH
34956: LD_VAR 0 2
34960: ARRAY
34961: PUSH
34962: LD_INT 3
34964: ARRAY
34965: STR
34966: PUSH
34967: LD_STRING ,
34969: STR
34970: PUSH
34971: LD_VAR 0 3
34975: PUSH
34976: LD_VAR 0 2
34980: ARRAY
34981: PUSH
34982: LD_INT 4
34984: ARRAY
34985: STR
34986: PUSH
34987: LD_STRING )
34989: STR
34990: PPUSH
34991: CALL_OW 559
34995: GO 34905
34997: POP
34998: POP
// end ; end ;
34999: LD_VAR 0 1
35003: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35004: LD_INT 0
35006: PPUSH
// if HexInfo ( x , y ) = warehouse then
35007: LD_VAR 0 2
35011: PPUSH
35012: LD_VAR 0 3
35016: PPUSH
35017: CALL_OW 428
35021: PUSH
35022: LD_VAR 0 1
35026: EQUAL
35027: IFFALSE 35054
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35029: LD_ADDR_EXP 112
35033: PUSH
35034: LD_EXP 112
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: LD_INT 0
35046: PPUSH
35047: CALL_OW 1
35051: ST_TO_ADDR
35052: GO 35105
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35054: LD_ADDR_EXP 112
35058: PUSH
35059: LD_EXP 112
35063: PPUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 255
35078: PUSH
35079: LD_VAR 0 1
35083: PUSH
35084: LD_VAR 0 2
35088: PUSH
35089: LD_VAR 0 3
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: PPUSH
35100: CALL_OW 1
35104: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35105: CALL 35114 0 0
// end ;
35109: LD_VAR 0 4
35113: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35114: LD_INT 0
35116: PPUSH
35117: PPUSH
35118: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35119: LD_STRING resetWarehouseGatheringPoints();
35121: PPUSH
35122: CALL_OW 559
// if warehouseGatheringPoints then
35126: LD_EXP 112
35130: IFFALSE 35256
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35132: LD_ADDR_VAR 0 3
35136: PUSH
35137: LD_EXP 112
35141: PPUSH
35142: CALL 82880 0 1
35146: ST_TO_ADDR
// for i := 1 to list do
35147: LD_ADDR_VAR 0 2
35151: PUSH
35152: DOUBLE
35153: LD_INT 1
35155: DEC
35156: ST_TO_ADDR
35157: LD_VAR 0 3
35161: PUSH
35162: FOR_TO
35163: IFFALSE 35254
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35165: LD_STRING setWarehouseGatheringPointXY(
35167: PUSH
35168: LD_VAR 0 3
35172: PUSH
35173: LD_VAR 0 2
35177: ARRAY
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: STR
35183: PUSH
35184: LD_STRING ,
35186: STR
35187: PUSH
35188: LD_VAR 0 3
35192: PUSH
35193: LD_VAR 0 2
35197: ARRAY
35198: PUSH
35199: LD_INT 2
35201: ARRAY
35202: STR
35203: PUSH
35204: LD_STRING ,
35206: STR
35207: PUSH
35208: LD_VAR 0 3
35212: PUSH
35213: LD_VAR 0 2
35217: ARRAY
35218: PUSH
35219: LD_INT 3
35221: ARRAY
35222: STR
35223: PUSH
35224: LD_STRING ,
35226: STR
35227: PUSH
35228: LD_VAR 0 3
35232: PUSH
35233: LD_VAR 0 2
35237: ARRAY
35238: PUSH
35239: LD_INT 4
35241: ARRAY
35242: STR
35243: PUSH
35244: LD_STRING )
35246: STR
35247: PPUSH
35248: CALL_OW 559
35252: GO 35162
35254: POP
35255: POP
// end ; end ;
35256: LD_VAR 0 1
35260: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35261: LD_EXP 112
35265: IFFALSE 35950
35267: GO 35269
35269: DISABLE
35270: LD_INT 0
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
// begin enable ;
35281: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35282: LD_ADDR_VAR 0 3
35286: PUSH
35287: LD_EXP 112
35291: PPUSH
35292: CALL 82880 0 1
35296: ST_TO_ADDR
// if not list then
35297: LD_VAR 0 3
35301: NOT
35302: IFFALSE 35306
// exit ;
35304: GO 35950
// for i := 1 to list do
35306: LD_ADDR_VAR 0 1
35310: PUSH
35311: DOUBLE
35312: LD_INT 1
35314: DEC
35315: ST_TO_ADDR
35316: LD_VAR 0 3
35320: PUSH
35321: FOR_TO
35322: IFFALSE 35948
// begin depot := list [ i ] [ 2 ] ;
35324: LD_ADDR_VAR 0 8
35328: PUSH
35329: LD_VAR 0 3
35333: PUSH
35334: LD_VAR 0 1
35338: ARRAY
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: LD_VAR 0 3
35353: PUSH
35354: LD_VAR 0 1
35358: ARRAY
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35364: LD_VAR 0 8
35368: PPUSH
35369: CALL_OW 301
35373: PUSH
35374: LD_VAR 0 5
35378: PUSH
35379: LD_VAR 0 8
35383: PPUSH
35384: CALL_OW 255
35388: NONEQUAL
35389: OR
35390: IFFALSE 35419
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35392: LD_ADDR_EXP 112
35396: PUSH
35397: LD_EXP 112
35401: PPUSH
35402: LD_VAR 0 8
35406: PPUSH
35407: LD_INT 0
35409: PPUSH
35410: CALL_OW 1
35414: ST_TO_ADDR
// exit ;
35415: POP
35416: POP
35417: GO 35950
// end ; x := list [ i ] [ 3 ] ;
35419: LD_ADDR_VAR 0 6
35423: PUSH
35424: LD_VAR 0 3
35428: PUSH
35429: LD_VAR 0 1
35433: ARRAY
35434: PUSH
35435: LD_INT 3
35437: ARRAY
35438: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35439: LD_ADDR_VAR 0 7
35443: PUSH
35444: LD_VAR 0 3
35448: PUSH
35449: LD_VAR 0 1
35453: ARRAY
35454: PUSH
35455: LD_INT 4
35457: ARRAY
35458: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35459: LD_ADDR_VAR 0 9
35463: PUSH
35464: LD_VAR 0 6
35468: PPUSH
35469: LD_VAR 0 7
35473: PPUSH
35474: LD_INT 16
35476: PPUSH
35477: CALL 81464 0 3
35481: ST_TO_ADDR
// if not cratesNearbyPoint then
35482: LD_VAR 0 9
35486: NOT
35487: IFFALSE 35493
// exit ;
35489: POP
35490: POP
35491: GO 35950
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35493: LD_ADDR_VAR 0 4
35497: PUSH
35498: LD_INT 22
35500: PUSH
35501: LD_VAR 0 5
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: LD_INT 60
35515: PUSH
35516: EMPTY
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 91
35525: PUSH
35526: LD_VAR 0 8
35530: PUSH
35531: LD_INT 6
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 25
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 25
35554: PUSH
35555: LD_INT 16
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: PPUSH
35573: CALL_OW 69
35577: PUSH
35578: LD_VAR 0 8
35582: PPUSH
35583: CALL_OW 313
35587: PPUSH
35588: LD_INT 3
35590: PUSH
35591: LD_INT 60
35593: PUSH
35594: EMPTY
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: LD_INT 25
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 25
35616: PUSH
35617: LD_INT 16
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PPUSH
35633: CALL_OW 72
35637: UNION
35638: ST_TO_ADDR
// if tmp then
35639: LD_VAR 0 4
35643: IFFALSE 35723
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35645: LD_ADDR_VAR 0 4
35649: PUSH
35650: LD_VAR 0 4
35654: PPUSH
35655: LD_INT 3
35657: PPUSH
35658: CALL 79427 0 2
35662: ST_TO_ADDR
// for j in tmp do
35663: LD_ADDR_VAR 0 2
35667: PUSH
35668: LD_VAR 0 4
35672: PUSH
35673: FOR_IN
35674: IFFALSE 35717
// begin if IsInUnit ( j ) then
35676: LD_VAR 0 2
35680: PPUSH
35681: CALL_OW 310
35685: IFFALSE 35696
// ComExit ( j ) ;
35687: LD_VAR 0 2
35691: PPUSH
35692: CALL 79510 0 1
// AddComCollect ( j , x , y ) ;
35696: LD_VAR 0 2
35700: PPUSH
35701: LD_VAR 0 6
35705: PPUSH
35706: LD_VAR 0 7
35710: PPUSH
35711: CALL_OW 177
// end ;
35715: GO 35673
35717: POP
35718: POP
// exit ;
35719: POP
35720: POP
35721: GO 35950
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35723: LD_ADDR_VAR 0 4
35727: PUSH
35728: LD_INT 22
35730: PUSH
35731: LD_VAR 0 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 91
35742: PUSH
35743: LD_VAR 0 8
35747: PUSH
35748: LD_INT 8
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: LD_INT 34
35761: PUSH
35762: LD_INT 12
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 34
35771: PUSH
35772: LD_INT 51
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 34
35781: PUSH
35782: LD_INT 32
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 34
35791: PUSH
35792: LD_INT 89
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: PPUSH
35811: CALL_OW 69
35815: ST_TO_ADDR
// if tmp then
35816: LD_VAR 0 4
35820: IFFALSE 35946
// begin for j in tmp do
35822: LD_ADDR_VAR 0 2
35826: PUSH
35827: LD_VAR 0 4
35831: PUSH
35832: FOR_IN
35833: IFFALSE 35944
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35835: LD_VAR 0 2
35839: PPUSH
35840: CALL_OW 262
35844: PUSH
35845: LD_INT 3
35847: EQUAL
35848: PUSH
35849: LD_VAR 0 2
35853: PPUSH
35854: CALL_OW 261
35858: PUSH
35859: LD_INT 20
35861: GREATER
35862: OR
35863: PUSH
35864: LD_VAR 0 2
35868: PPUSH
35869: CALL_OW 314
35873: NOT
35874: AND
35875: PUSH
35876: LD_VAR 0 2
35880: PPUSH
35881: CALL_OW 263
35885: PUSH
35886: LD_INT 1
35888: NONEQUAL
35889: PUSH
35890: LD_VAR 0 2
35894: PPUSH
35895: CALL_OW 311
35899: OR
35900: AND
35901: IFFALSE 35942
// begin ComCollect ( j , x , y ) ;
35903: LD_VAR 0 2
35907: PPUSH
35908: LD_VAR 0 6
35912: PPUSH
35913: LD_VAR 0 7
35917: PPUSH
35918: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35922: LD_VAR 0 2
35926: PPUSH
35927: LD_VAR 0 8
35931: PPUSH
35932: CALL_OW 172
// exit ;
35936: POP
35937: POP
35938: POP
35939: POP
35940: GO 35950
// end ;
35942: GO 35832
35944: POP
35945: POP
// end ; end ;
35946: GO 35321
35948: POP
35949: POP
// end ; end_of_file
35950: PPOPN 9
35952: END
// export function SOS_UnitDestroyed ( un ) ; begin
35953: LD_INT 0
35955: PPUSH
// ComRadiation ( un ) ;
35956: LD_VAR 0 1
35960: PPUSH
35961: CALL 37022 0 1
// end ;
35965: LD_VAR 0 2
35969: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35970: LD_INT 0
35972: PPUSH
// ComRadiation ( un ) ;
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL 37022 0 1
// end ;
35982: LD_VAR 0 2
35986: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35987: LD_INT 0
35989: PPUSH
// end ;
35990: LD_VAR 0 4
35994: RET
// export function SOS_Command ( cmd ) ; begin
35995: LD_INT 0
35997: PPUSH
// end ;
35998: LD_VAR 0 2
36002: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36003: LD_INT 0
36005: PPUSH
// end ;
36006: LD_VAR 0 6
36010: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
// if not vehicle or not factory then
36017: LD_VAR 0 1
36021: NOT
36022: PUSH
36023: LD_VAR 0 2
36027: NOT
36028: OR
36029: IFFALSE 36033
// exit ;
36031: GO 36613
// if not factoryWaypoints then
36033: LD_EXP 110
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36613
// for i := 1 to Count ( factoryWaypoints ) do
36042: LD_ADDR_VAR 0 4
36046: PUSH
36047: DOUBLE
36048: LD_INT 1
36050: DEC
36051: ST_TO_ADDR
36052: LD_EXP 110
36056: PPUSH
36057: CALL 43503 0 1
36061: PUSH
36062: FOR_TO
36063: IFFALSE 36611
// if factoryWaypoints [ i ] [ 2 ] = factory then
36065: LD_EXP 110
36069: PUSH
36070: LD_VAR 0 4
36074: ARRAY
36075: PUSH
36076: LD_INT 2
36078: ARRAY
36079: PUSH
36080: LD_VAR 0 2
36084: EQUAL
36085: IFFALSE 36609
// begin if GetControl ( vehicle ) = control_manual then
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 263
36096: PUSH
36097: LD_INT 1
36099: EQUAL
36100: IFFALSE 36462
// begin driver := IsDrivenBy ( vehicle ) ;
36102: LD_ADDR_VAR 0 5
36106: PUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 311
36116: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36117: LD_VAR 0 5
36121: PUSH
36122: LD_EXP 111
36126: IN
36127: PUSH
36128: LD_VAR 0 1
36132: PUSH
36133: LD_EXP 111
36137: IN
36138: OR
36139: IFFALSE 36145
// exit ;
36141: POP
36142: POP
36143: GO 36613
// if not HasTask ( driver ) then
36145: LD_VAR 0 5
36149: PPUSH
36150: CALL_OW 314
36154: NOT
36155: IFFALSE 36460
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36157: LD_ADDR_EXP 111
36161: PUSH
36162: LD_EXP 111
36166: PPUSH
36167: LD_VAR 0 5
36171: PPUSH
36172: CALL 79112 0 2
36176: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36177: LD_ADDR_EXP 111
36181: PUSH
36182: LD_EXP 111
36186: PPUSH
36187: LD_VAR 0 1
36191: PPUSH
36192: CALL 79112 0 2
36196: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36197: LD_ADDR_VAR 0 6
36201: PUSH
36202: LD_EXP 110
36206: PUSH
36207: LD_VAR 0 4
36211: ARRAY
36212: PUSH
36213: LD_INT 3
36215: ARRAY
36216: PPUSH
36217: LD_EXP 110
36221: PUSH
36222: LD_VAR 0 4
36226: ARRAY
36227: PUSH
36228: LD_INT 4
36230: ARRAY
36231: PPUSH
36232: CALL_OW 428
36236: ST_TO_ADDR
// if hex then
36237: LD_VAR 0 6
36241: IFFALSE 36259
// ComMoveUnit ( driver , hex ) else
36243: LD_VAR 0 5
36247: PPUSH
36248: LD_VAR 0 6
36252: PPUSH
36253: CALL_OW 112
36257: GO 36343
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36259: LD_VAR 0 1
36263: PPUSH
36264: LD_EXP 110
36268: PUSH
36269: LD_VAR 0 4
36273: ARRAY
36274: PUSH
36275: LD_INT 3
36277: ARRAY
36278: PPUSH
36279: LD_EXP 110
36283: PUSH
36284: LD_VAR 0 4
36288: ARRAY
36289: PUSH
36290: LD_INT 4
36292: ARRAY
36293: PPUSH
36294: CALL_OW 297
36298: PUSH
36299: LD_INT 0
36301: GREATER
36302: IFFALSE 36343
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36304: LD_VAR 0 5
36308: PPUSH
36309: LD_EXP 110
36313: PUSH
36314: LD_VAR 0 4
36318: ARRAY
36319: PUSH
36320: LD_INT 3
36322: ARRAY
36323: PPUSH
36324: LD_EXP 110
36328: PUSH
36329: LD_VAR 0 4
36333: ARRAY
36334: PUSH
36335: LD_INT 4
36337: ARRAY
36338: PPUSH
36339: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36343: LD_VAR 0 5
36347: PPUSH
36348: CALL_OW 181
// if Multiplayer then
36352: LD_OWVAR 4
36356: IFFALSE 36405
// begin repeat wait ( 10 ) ;
36358: LD_INT 10
36360: PPUSH
36361: CALL_OW 67
// until not IsInUnit ( driver ) ;
36365: LD_VAR 0 5
36369: PPUSH
36370: CALL_OW 310
36374: NOT
36375: IFFALSE 36358
// if not HasTask ( driver ) then
36377: LD_VAR 0 5
36381: PPUSH
36382: CALL_OW 314
36386: NOT
36387: IFFALSE 36403
// ComEnterUnit ( driver , factory ) ;
36389: LD_VAR 0 5
36393: PPUSH
36394: LD_VAR 0 2
36398: PPUSH
36399: CALL_OW 120
// end else
36403: GO 36419
// AddComEnterUnit ( driver , factory ) ;
36405: LD_VAR 0 5
36409: PPUSH
36410: LD_VAR 0 2
36414: PPUSH
36415: CALL_OW 180
// wait ( 0 0$1 ) ;
36419: LD_INT 35
36421: PPUSH
36422: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36426: LD_ADDR_EXP 111
36430: PUSH
36431: LD_EXP 111
36435: PUSH
36436: LD_VAR 0 5
36440: DIFF
36441: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36442: LD_ADDR_EXP 111
36446: PUSH
36447: LD_EXP 111
36451: PUSH
36452: LD_VAR 0 1
36456: DIFF
36457: ST_TO_ADDR
// break ;
36458: GO 36611
// end ; end else
36460: GO 36609
// if GetControl ( vehicle ) = control_remote then
36462: LD_VAR 0 1
36466: PPUSH
36467: CALL_OW 263
36471: PUSH
36472: LD_INT 2
36474: EQUAL
36475: IFFALSE 36561
// begin wait ( 0 0$2 ) ;
36477: LD_INT 70
36479: PPUSH
36480: CALL_OW 67
// repeat wait ( 10 ) ;
36484: LD_INT 10
36486: PPUSH
36487: CALL_OW 67
// Connect ( vehicle ) ;
36491: LD_VAR 0 1
36495: PPUSH
36496: CALL 49709 0 1
// until IsControledBy ( vehicle ) ;
36500: LD_VAR 0 1
36504: PPUSH
36505: CALL_OW 312
36509: IFFALSE 36484
// wait ( 10 ) ;
36511: LD_INT 10
36513: PPUSH
36514: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36518: LD_VAR 0 1
36522: PPUSH
36523: LD_EXP 110
36527: PUSH
36528: LD_VAR 0 4
36532: ARRAY
36533: PUSH
36534: LD_INT 3
36536: ARRAY
36537: PPUSH
36538: LD_EXP 110
36542: PUSH
36543: LD_VAR 0 4
36547: ARRAY
36548: PUSH
36549: LD_INT 4
36551: ARRAY
36552: PPUSH
36553: CALL_OW 111
// break ;
36557: GO 36611
// end else
36559: GO 36609
// begin wait ( 0 0$3 ) ;
36561: LD_INT 105
36563: PPUSH
36564: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36568: LD_VAR 0 1
36572: PPUSH
36573: LD_EXP 110
36577: PUSH
36578: LD_VAR 0 4
36582: ARRAY
36583: PUSH
36584: LD_INT 3
36586: ARRAY
36587: PPUSH
36588: LD_EXP 110
36592: PUSH
36593: LD_VAR 0 4
36597: ARRAY
36598: PUSH
36599: LD_INT 4
36601: ARRAY
36602: PPUSH
36603: CALL_OW 111
// break ;
36607: GO 36611
// end ; end ;
36609: GO 36062
36611: POP
36612: POP
// end ;
36613: LD_VAR 0 3
36617: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36618: LD_INT 0
36620: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36621: LD_VAR 0 1
36625: PUSH
36626: LD_INT 250
36628: EQUAL
36629: PUSH
36630: LD_VAR 0 2
36634: PPUSH
36635: CALL_OW 264
36639: PUSH
36640: LD_INT 81
36642: EQUAL
36643: AND
36644: IFFALSE 36665
// MinerPlaceMine ( unit , x , y ) ;
36646: LD_VAR 0 2
36650: PPUSH
36651: LD_VAR 0 4
36655: PPUSH
36656: LD_VAR 0 5
36660: PPUSH
36661: CALL 39757 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36665: LD_VAR 0 1
36669: PUSH
36670: LD_INT 251
36672: EQUAL
36673: PUSH
36674: LD_VAR 0 2
36678: PPUSH
36679: CALL_OW 264
36683: PUSH
36684: LD_INT 81
36686: EQUAL
36687: AND
36688: IFFALSE 36709
// MinerDetonateMine ( unit , x , y ) ;
36690: LD_VAR 0 2
36694: PPUSH
36695: LD_VAR 0 4
36699: PPUSH
36700: LD_VAR 0 5
36704: PPUSH
36705: CALL 40032 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36709: LD_VAR 0 1
36713: PUSH
36714: LD_INT 252
36716: EQUAL
36717: PUSH
36718: LD_VAR 0 2
36722: PPUSH
36723: CALL_OW 264
36727: PUSH
36728: LD_INT 81
36730: EQUAL
36731: AND
36732: IFFALSE 36753
// MinerCreateMinefield ( unit , x , y ) ;
36734: LD_VAR 0 2
36738: PPUSH
36739: LD_VAR 0 4
36743: PPUSH
36744: LD_VAR 0 5
36748: PPUSH
36749: CALL 40449 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36753: LD_VAR 0 1
36757: PUSH
36758: LD_INT 253
36760: EQUAL
36761: PUSH
36762: LD_VAR 0 2
36766: PPUSH
36767: CALL_OW 257
36771: PUSH
36772: LD_INT 5
36774: EQUAL
36775: AND
36776: IFFALSE 36797
// ComBinocular ( unit , x , y ) ;
36778: LD_VAR 0 2
36782: PPUSH
36783: LD_VAR 0 4
36787: PPUSH
36788: LD_VAR 0 5
36792: PPUSH
36793: CALL 40818 0 3
// if selectedUnit then
36797: LD_VAR 0 3
36801: IFFALSE 36857
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36803: LD_VAR 0 1
36807: PUSH
36808: LD_INT 254
36810: EQUAL
36811: PUSH
36812: LD_VAR 0 2
36816: PPUSH
36817: CALL_OW 264
36821: PUSH
36822: LD_INT 99
36824: EQUAL
36825: AND
36826: PUSH
36827: LD_VAR 0 3
36831: PPUSH
36832: CALL_OW 263
36836: PUSH
36837: LD_INT 3
36839: EQUAL
36840: AND
36841: IFFALSE 36857
// HackDestroyVehicle ( unit , selectedUnit ) ;
36843: LD_VAR 0 2
36847: PPUSH
36848: LD_VAR 0 3
36852: PPUSH
36853: CALL 39121 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36857: LD_VAR 0 1
36861: PUSH
36862: LD_INT 255
36864: EQUAL
36865: PUSH
36866: LD_VAR 0 2
36870: PPUSH
36871: CALL_OW 264
36875: PUSH
36876: LD_INT 14
36878: PUSH
36879: LD_INT 53
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: IN
36886: AND
36887: PUSH
36888: LD_VAR 0 4
36892: PPUSH
36893: LD_VAR 0 5
36897: PPUSH
36898: CALL_OW 488
36902: AND
36903: IFFALSE 36927
// CutTreeXYR ( unit , x , y , 12 ) ;
36905: LD_VAR 0 2
36909: PPUSH
36910: LD_VAR 0 4
36914: PPUSH
36915: LD_VAR 0 5
36919: PPUSH
36920: LD_INT 12
36922: PPUSH
36923: CALL 37118 0 4
// if cmd = 256 then
36927: LD_VAR 0 1
36931: PUSH
36932: LD_INT 256
36934: EQUAL
36935: IFFALSE 36956
// SetFactoryWaypoint ( unit , x , y ) ;
36937: LD_VAR 0 2
36941: PPUSH
36942: LD_VAR 0 4
36946: PPUSH
36947: LD_VAR 0 5
36951: PPUSH
36952: CALL 34514 0 3
// if cmd = 257 then
36956: LD_VAR 0 1
36960: PUSH
36961: LD_INT 257
36963: EQUAL
36964: IFFALSE 36985
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36966: LD_VAR 0 2
36970: PPUSH
36971: LD_VAR 0 4
36975: PPUSH
36976: LD_VAR 0 5
36980: PPUSH
36981: CALL 35004 0 3
// if cmd = 258 then
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 258
36992: EQUAL
36993: IFFALSE 37017
// BurnTreeXYR ( unit , x , y , 8 ) ;
36995: LD_VAR 0 2
36999: PPUSH
37000: LD_VAR 0 4
37004: PPUSH
37005: LD_VAR 0 5
37009: PPUSH
37010: LD_INT 8
37012: PPUSH
37013: CALL 37512 0 4
// end ;
37017: LD_VAR 0 6
37021: RET
// export function ComRadiation ( un ) ; var eff ; begin
37022: LD_INT 0
37024: PPUSH
37025: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 264
37035: PUSH
37036: LD_INT 91
37038: NONEQUAL
37039: IFFALSE 37043
// exit ;
37041: GO 37113
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37043: LD_INT 68
37045: PPUSH
37046: LD_VAR 0 1
37050: PPUSH
37051: CALL_OW 255
37055: PPUSH
37056: CALL_OW 321
37060: PUSH
37061: LD_INT 2
37063: EQUAL
37064: IFFALSE 37076
// eff := 50 else
37066: LD_ADDR_VAR 0 3
37070: PUSH
37071: LD_INT 50
37073: ST_TO_ADDR
37074: GO 37084
// eff := 25 ;
37076: LD_ADDR_VAR 0 3
37080: PUSH
37081: LD_INT 25
37083: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37084: LD_VAR 0 1
37088: PPUSH
37089: CALL_OW 250
37093: PPUSH
37094: LD_VAR 0 1
37098: PPUSH
37099: CALL_OW 251
37103: PPUSH
37104: LD_VAR 0 3
37108: PPUSH
37109: CALL_OW 495
// end ;
37113: LD_VAR 0 2
37117: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37118: LD_INT 0
37120: PPUSH
37121: PPUSH
37122: PPUSH
37123: PPUSH
37124: PPUSH
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 302
37138: NOT
37139: PUSH
37140: LD_VAR 0 2
37144: PPUSH
37145: LD_VAR 0 3
37149: PPUSH
37150: CALL_OW 488
37154: NOT
37155: OR
37156: PUSH
37157: LD_VAR 0 4
37161: NOT
37162: OR
37163: IFFALSE 37167
// exit ;
37165: GO 37507
// list := [ ] ;
37167: LD_ADDR_VAR 0 13
37171: PUSH
37172: EMPTY
37173: ST_TO_ADDR
// if x - r < 0 then
37174: LD_VAR 0 2
37178: PUSH
37179: LD_VAR 0 4
37183: MINUS
37184: PUSH
37185: LD_INT 0
37187: LESS
37188: IFFALSE 37200
// min_x := 0 else
37190: LD_ADDR_VAR 0 7
37194: PUSH
37195: LD_INT 0
37197: ST_TO_ADDR
37198: GO 37216
// min_x := x - r ;
37200: LD_ADDR_VAR 0 7
37204: PUSH
37205: LD_VAR 0 2
37209: PUSH
37210: LD_VAR 0 4
37214: MINUS
37215: ST_TO_ADDR
// if y - r < 0 then
37216: LD_VAR 0 3
37220: PUSH
37221: LD_VAR 0 4
37225: MINUS
37226: PUSH
37227: LD_INT 0
37229: LESS
37230: IFFALSE 37242
// min_y := 0 else
37232: LD_ADDR_VAR 0 8
37236: PUSH
37237: LD_INT 0
37239: ST_TO_ADDR
37240: GO 37258
// min_y := y - r ;
37242: LD_ADDR_VAR 0 8
37246: PUSH
37247: LD_VAR 0 3
37251: PUSH
37252: LD_VAR 0 4
37256: MINUS
37257: ST_TO_ADDR
// max_x := x + r ;
37258: LD_ADDR_VAR 0 9
37262: PUSH
37263: LD_VAR 0 2
37267: PUSH
37268: LD_VAR 0 4
37272: PLUS
37273: ST_TO_ADDR
// max_y := y + r ;
37274: LD_ADDR_VAR 0 10
37278: PUSH
37279: LD_VAR 0 3
37283: PUSH
37284: LD_VAR 0 4
37288: PLUS
37289: ST_TO_ADDR
// for _x = min_x to max_x do
37290: LD_ADDR_VAR 0 11
37294: PUSH
37295: DOUBLE
37296: LD_VAR 0 7
37300: DEC
37301: ST_TO_ADDR
37302: LD_VAR 0 9
37306: PUSH
37307: FOR_TO
37308: IFFALSE 37425
// for _y = min_y to max_y do
37310: LD_ADDR_VAR 0 12
37314: PUSH
37315: DOUBLE
37316: LD_VAR 0 8
37320: DEC
37321: ST_TO_ADDR
37322: LD_VAR 0 10
37326: PUSH
37327: FOR_TO
37328: IFFALSE 37421
// begin if not ValidHex ( _x , _y ) then
37330: LD_VAR 0 11
37334: PPUSH
37335: LD_VAR 0 12
37339: PPUSH
37340: CALL_OW 488
37344: NOT
37345: IFFALSE 37349
// continue ;
37347: GO 37327
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37349: LD_VAR 0 11
37353: PPUSH
37354: LD_VAR 0 12
37358: PPUSH
37359: CALL_OW 351
37363: PUSH
37364: LD_VAR 0 11
37368: PPUSH
37369: LD_VAR 0 12
37373: PPUSH
37374: CALL_OW 554
37378: AND
37379: IFFALSE 37419
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37381: LD_ADDR_VAR 0 13
37385: PUSH
37386: LD_VAR 0 13
37390: PPUSH
37391: LD_VAR 0 13
37395: PUSH
37396: LD_INT 1
37398: PLUS
37399: PPUSH
37400: LD_VAR 0 11
37404: PUSH
37405: LD_VAR 0 12
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PPUSH
37414: CALL_OW 2
37418: ST_TO_ADDR
// end ;
37419: GO 37327
37421: POP
37422: POP
37423: GO 37307
37425: POP
37426: POP
// if not list then
37427: LD_VAR 0 13
37431: NOT
37432: IFFALSE 37436
// exit ;
37434: GO 37507
// for i in list do
37436: LD_ADDR_VAR 0 6
37440: PUSH
37441: LD_VAR 0 13
37445: PUSH
37446: FOR_IN
37447: IFFALSE 37505
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37449: LD_VAR 0 1
37453: PPUSH
37454: LD_STRING M
37456: PUSH
37457: LD_VAR 0 6
37461: PUSH
37462: LD_INT 1
37464: ARRAY
37465: PUSH
37466: LD_VAR 0 6
37470: PUSH
37471: LD_INT 2
37473: ARRAY
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: PUSH
37496: EMPTY
37497: LIST
37498: PPUSH
37499: CALL_OW 447
37503: GO 37446
37505: POP
37506: POP
// end ;
37507: LD_VAR 0 5
37511: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37512: LD_INT 0
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37524: LD_VAR 0 1
37528: PPUSH
37529: CALL_OW 302
37533: NOT
37534: PUSH
37535: LD_VAR 0 2
37539: PPUSH
37540: LD_VAR 0 3
37544: PPUSH
37545: CALL_OW 488
37549: NOT
37550: OR
37551: PUSH
37552: LD_VAR 0 4
37556: NOT
37557: OR
37558: IFFALSE 37562
// exit ;
37560: GO 38075
// list := [ ] ;
37562: LD_ADDR_VAR 0 13
37566: PUSH
37567: EMPTY
37568: ST_TO_ADDR
// if x - r < 0 then
37569: LD_VAR 0 2
37573: PUSH
37574: LD_VAR 0 4
37578: MINUS
37579: PUSH
37580: LD_INT 0
37582: LESS
37583: IFFALSE 37595
// min_x := 0 else
37585: LD_ADDR_VAR 0 7
37589: PUSH
37590: LD_INT 0
37592: ST_TO_ADDR
37593: GO 37611
// min_x := x - r ;
37595: LD_ADDR_VAR 0 7
37599: PUSH
37600: LD_VAR 0 2
37604: PUSH
37605: LD_VAR 0 4
37609: MINUS
37610: ST_TO_ADDR
// if y - r < 0 then
37611: LD_VAR 0 3
37615: PUSH
37616: LD_VAR 0 4
37620: MINUS
37621: PUSH
37622: LD_INT 0
37624: LESS
37625: IFFALSE 37637
// min_y := 0 else
37627: LD_ADDR_VAR 0 8
37631: PUSH
37632: LD_INT 0
37634: ST_TO_ADDR
37635: GO 37653
// min_y := y - r ;
37637: LD_ADDR_VAR 0 8
37641: PUSH
37642: LD_VAR 0 3
37646: PUSH
37647: LD_VAR 0 4
37651: MINUS
37652: ST_TO_ADDR
// max_x := x + r ;
37653: LD_ADDR_VAR 0 9
37657: PUSH
37658: LD_VAR 0 2
37662: PUSH
37663: LD_VAR 0 4
37667: PLUS
37668: ST_TO_ADDR
// max_y := y + r ;
37669: LD_ADDR_VAR 0 10
37673: PUSH
37674: LD_VAR 0 3
37678: PUSH
37679: LD_VAR 0 4
37683: PLUS
37684: ST_TO_ADDR
// for _x = min_x to max_x do
37685: LD_ADDR_VAR 0 11
37689: PUSH
37690: DOUBLE
37691: LD_VAR 0 7
37695: DEC
37696: ST_TO_ADDR
37697: LD_VAR 0 9
37701: PUSH
37702: FOR_TO
37703: IFFALSE 37820
// for _y = min_y to max_y do
37705: LD_ADDR_VAR 0 12
37709: PUSH
37710: DOUBLE
37711: LD_VAR 0 8
37715: DEC
37716: ST_TO_ADDR
37717: LD_VAR 0 10
37721: PUSH
37722: FOR_TO
37723: IFFALSE 37816
// begin if not ValidHex ( _x , _y ) then
37725: LD_VAR 0 11
37729: PPUSH
37730: LD_VAR 0 12
37734: PPUSH
37735: CALL_OW 488
37739: NOT
37740: IFFALSE 37744
// continue ;
37742: GO 37722
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37744: LD_VAR 0 11
37748: PPUSH
37749: LD_VAR 0 12
37753: PPUSH
37754: CALL_OW 351
37758: PUSH
37759: LD_VAR 0 11
37763: PPUSH
37764: LD_VAR 0 12
37768: PPUSH
37769: CALL_OW 554
37773: AND
37774: IFFALSE 37814
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37776: LD_ADDR_VAR 0 13
37780: PUSH
37781: LD_VAR 0 13
37785: PPUSH
37786: LD_VAR 0 13
37790: PUSH
37791: LD_INT 1
37793: PLUS
37794: PPUSH
37795: LD_VAR 0 11
37799: PUSH
37800: LD_VAR 0 12
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PPUSH
37809: CALL_OW 2
37813: ST_TO_ADDR
// end ;
37814: GO 37722
37816: POP
37817: POP
37818: GO 37702
37820: POP
37821: POP
// if not list then
37822: LD_VAR 0 13
37826: NOT
37827: IFFALSE 37831
// exit ;
37829: GO 38075
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37831: LD_ADDR_VAR 0 13
37835: PUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: LD_VAR 0 13
37845: PPUSH
37846: LD_INT 1
37848: PPUSH
37849: LD_INT 1
37851: PPUSH
37852: CALL 46851 0 4
37856: ST_TO_ADDR
// ComStop ( flame ) ;
37857: LD_VAR 0 1
37861: PPUSH
37862: CALL_OW 141
// for i in list do
37866: LD_ADDR_VAR 0 6
37870: PUSH
37871: LD_VAR 0 13
37875: PUSH
37876: FOR_IN
37877: IFFALSE 37908
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37879: LD_VAR 0 1
37883: PPUSH
37884: LD_VAR 0 6
37888: PUSH
37889: LD_INT 1
37891: ARRAY
37892: PPUSH
37893: LD_VAR 0 6
37897: PUSH
37898: LD_INT 2
37900: ARRAY
37901: PPUSH
37902: CALL_OW 176
37906: GO 37876
37908: POP
37909: POP
// repeat wait ( 0 0$1 ) ;
37910: LD_INT 35
37912: PPUSH
37913: CALL_OW 67
// task := GetTaskList ( flame ) ;
37917: LD_ADDR_VAR 0 14
37921: PUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL_OW 437
37931: ST_TO_ADDR
// if not task then
37932: LD_VAR 0 14
37936: NOT
37937: IFFALSE 37941
// exit ;
37939: GO 38075
// if task [ 1 ] [ 1 ] <> | then
37941: LD_VAR 0 14
37945: PUSH
37946: LD_INT 1
37948: ARRAY
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PUSH
37954: LD_STRING |
37956: NONEQUAL
37957: IFFALSE 37961
// exit ;
37959: GO 38075
// _x := task [ 1 ] [ 2 ] ;
37961: LD_ADDR_VAR 0 11
37965: PUSH
37966: LD_VAR 0 14
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: PUSH
37975: LD_INT 2
37977: ARRAY
37978: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37979: LD_ADDR_VAR 0 12
37983: PUSH
37984: LD_VAR 0 14
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PUSH
37993: LD_INT 3
37995: ARRAY
37996: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37997: LD_VAR 0 11
38001: PPUSH
38002: LD_VAR 0 12
38006: PPUSH
38007: CALL_OW 351
38011: NOT
38012: PUSH
38013: LD_VAR 0 11
38017: PPUSH
38018: LD_VAR 0 12
38022: PPUSH
38023: CALL_OW 554
38027: NOT
38028: OR
38029: IFFALSE 38063
// begin task := Delete ( task , 1 ) ;
38031: LD_ADDR_VAR 0 14
38035: PUSH
38036: LD_VAR 0 14
38040: PPUSH
38041: LD_INT 1
38043: PPUSH
38044: CALL_OW 3
38048: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38049: LD_VAR 0 1
38053: PPUSH
38054: LD_VAR 0 14
38058: PPUSH
38059: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38063: LD_VAR 0 1
38067: PPUSH
38068: CALL_OW 314
38072: NOT
38073: IFFALSE 37910
// end ;
38075: LD_VAR 0 5
38079: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38080: LD_EXP 114
38084: NOT
38085: IFFALSE 38135
38087: GO 38089
38089: DISABLE
// begin initHack := true ;
38090: LD_ADDR_EXP 114
38094: PUSH
38095: LD_INT 1
38097: ST_TO_ADDR
// hackTanks := [ ] ;
38098: LD_ADDR_EXP 115
38102: PUSH
38103: EMPTY
38104: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38105: LD_ADDR_EXP 116
38109: PUSH
38110: EMPTY
38111: ST_TO_ADDR
// hackLimit := 3 ;
38112: LD_ADDR_EXP 117
38116: PUSH
38117: LD_INT 3
38119: ST_TO_ADDR
// hackDist := 12 ;
38120: LD_ADDR_EXP 118
38124: PUSH
38125: LD_INT 12
38127: ST_TO_ADDR
// hackCounter := [ ] ;
38128: LD_ADDR_EXP 119
38132: PUSH
38133: EMPTY
38134: ST_TO_ADDR
// end ;
38135: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38136: LD_EXP 114
38140: PUSH
38141: LD_INT 34
38143: PUSH
38144: LD_INT 99
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PPUSH
38151: CALL_OW 69
38155: AND
38156: IFFALSE 38409
38158: GO 38160
38160: DISABLE
38161: LD_INT 0
38163: PPUSH
38164: PPUSH
// begin enable ;
38165: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38166: LD_ADDR_VAR 0 1
38170: PUSH
38171: LD_INT 34
38173: PUSH
38174: LD_INT 99
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PPUSH
38181: CALL_OW 69
38185: PUSH
38186: FOR_IN
38187: IFFALSE 38407
// begin if not i in hackTanks then
38189: LD_VAR 0 1
38193: PUSH
38194: LD_EXP 115
38198: IN
38199: NOT
38200: IFFALSE 38283
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38202: LD_ADDR_EXP 115
38206: PUSH
38207: LD_EXP 115
38211: PPUSH
38212: LD_EXP 115
38216: PUSH
38217: LD_INT 1
38219: PLUS
38220: PPUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: CALL_OW 1
38230: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38231: LD_ADDR_EXP 116
38235: PUSH
38236: LD_EXP 116
38240: PPUSH
38241: LD_EXP 116
38245: PUSH
38246: LD_INT 1
38248: PLUS
38249: PPUSH
38250: EMPTY
38251: PPUSH
38252: CALL_OW 1
38256: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38257: LD_ADDR_EXP 119
38261: PUSH
38262: LD_EXP 119
38266: PPUSH
38267: LD_EXP 119
38271: PUSH
38272: LD_INT 1
38274: PLUS
38275: PPUSH
38276: EMPTY
38277: PPUSH
38278: CALL_OW 1
38282: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38283: LD_VAR 0 1
38287: PPUSH
38288: CALL_OW 302
38292: NOT
38293: IFFALSE 38306
// begin HackUnlinkAll ( i ) ;
38295: LD_VAR 0 1
38299: PPUSH
38300: CALL 38412 0 1
// continue ;
38304: GO 38186
// end ; HackCheckCapturedStatus ( i ) ;
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL 38855 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38315: LD_ADDR_VAR 0 2
38319: PUSH
38320: LD_INT 81
38322: PUSH
38323: LD_VAR 0 1
38327: PPUSH
38328: CALL_OW 255
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 33
38339: PUSH
38340: LD_INT 3
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 91
38349: PUSH
38350: LD_VAR 0 1
38354: PUSH
38355: LD_EXP 118
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 50
38367: PUSH
38368: EMPTY
38369: LIST
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: PPUSH
38377: CALL_OW 69
38381: ST_TO_ADDR
// if not tmp then
38382: LD_VAR 0 2
38386: NOT
38387: IFFALSE 38391
// continue ;
38389: GO 38186
// HackLink ( i , tmp ) ;
38391: LD_VAR 0 1
38395: PPUSH
38396: LD_VAR 0 2
38400: PPUSH
38401: CALL 38548 0 2
// end ;
38405: GO 38186
38407: POP
38408: POP
// end ;
38409: PPOPN 2
38411: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38412: LD_INT 0
38414: PPUSH
38415: PPUSH
38416: PPUSH
// if not hack in hackTanks then
38417: LD_VAR 0 1
38421: PUSH
38422: LD_EXP 115
38426: IN
38427: NOT
38428: IFFALSE 38432
// exit ;
38430: GO 38543
// index := GetElementIndex ( hackTanks , hack ) ;
38432: LD_ADDR_VAR 0 4
38436: PUSH
38437: LD_EXP 115
38441: PPUSH
38442: LD_VAR 0 1
38446: PPUSH
38447: CALL 46148 0 2
38451: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38452: LD_EXP 116
38456: PUSH
38457: LD_VAR 0 4
38461: ARRAY
38462: IFFALSE 38543
// begin for i in hackTanksCaptured [ index ] do
38464: LD_ADDR_VAR 0 3
38468: PUSH
38469: LD_EXP 116
38473: PUSH
38474: LD_VAR 0 4
38478: ARRAY
38479: PUSH
38480: FOR_IN
38481: IFFALSE 38507
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38483: LD_VAR 0 3
38487: PUSH
38488: LD_INT 1
38490: ARRAY
38491: PPUSH
38492: LD_VAR 0 3
38496: PUSH
38497: LD_INT 2
38499: ARRAY
38500: PPUSH
38501: CALL_OW 235
38505: GO 38480
38507: POP
38508: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38509: LD_ADDR_EXP 116
38513: PUSH
38514: LD_EXP 116
38518: PPUSH
38519: LD_VAR 0 4
38523: PPUSH
38524: EMPTY
38525: PPUSH
38526: CALL_OW 1
38530: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38531: LD_VAR 0 1
38535: PPUSH
38536: LD_INT 0
38538: PPUSH
38539: CALL_OW 505
// end ; end ;
38543: LD_VAR 0 2
38547: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38548: LD_INT 0
38550: PPUSH
38551: PPUSH
38552: PPUSH
// if not hack in hackTanks or not vehicles then
38553: LD_VAR 0 1
38557: PUSH
38558: LD_EXP 115
38562: IN
38563: NOT
38564: PUSH
38565: LD_VAR 0 2
38569: NOT
38570: OR
38571: IFFALSE 38575
// exit ;
38573: GO 38850
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38575: LD_ADDR_VAR 0 2
38579: PUSH
38580: LD_VAR 0 1
38584: PPUSH
38585: LD_VAR 0 2
38589: PPUSH
38590: LD_INT 1
38592: PPUSH
38593: LD_INT 1
38595: PPUSH
38596: CALL 46798 0 4
38600: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38601: LD_ADDR_VAR 0 5
38605: PUSH
38606: LD_EXP 115
38610: PPUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL 46148 0 2
38620: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38621: LD_EXP 116
38625: PUSH
38626: LD_VAR 0 5
38630: ARRAY
38631: PUSH
38632: LD_EXP 117
38636: LESS
38637: IFFALSE 38826
// begin for i := 1 to vehicles do
38639: LD_ADDR_VAR 0 4
38643: PUSH
38644: DOUBLE
38645: LD_INT 1
38647: DEC
38648: ST_TO_ADDR
38649: LD_VAR 0 2
38653: PUSH
38654: FOR_TO
38655: IFFALSE 38824
// begin if hackTanksCaptured [ index ] = hackLimit then
38657: LD_EXP 116
38661: PUSH
38662: LD_VAR 0 5
38666: ARRAY
38667: PUSH
38668: LD_EXP 117
38672: EQUAL
38673: IFFALSE 38677
// break ;
38675: GO 38824
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38677: LD_ADDR_EXP 119
38681: PUSH
38682: LD_EXP 119
38686: PPUSH
38687: LD_VAR 0 5
38691: PPUSH
38692: LD_EXP 119
38696: PUSH
38697: LD_VAR 0 5
38701: ARRAY
38702: PUSH
38703: LD_INT 1
38705: PLUS
38706: PPUSH
38707: CALL_OW 1
38711: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38712: LD_ADDR_EXP 116
38716: PUSH
38717: LD_EXP 116
38721: PPUSH
38722: LD_VAR 0 5
38726: PUSH
38727: LD_EXP 116
38731: PUSH
38732: LD_VAR 0 5
38736: ARRAY
38737: PUSH
38738: LD_INT 1
38740: PLUS
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PPUSH
38746: LD_VAR 0 2
38750: PUSH
38751: LD_VAR 0 4
38755: ARRAY
38756: PUSH
38757: LD_VAR 0 2
38761: PUSH
38762: LD_VAR 0 4
38766: ARRAY
38767: PPUSH
38768: CALL_OW 255
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PPUSH
38777: CALL 46363 0 3
38781: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38782: LD_VAR 0 2
38786: PUSH
38787: LD_VAR 0 4
38791: ARRAY
38792: PPUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 255
38802: PPUSH
38803: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38807: LD_VAR 0 2
38811: PUSH
38812: LD_VAR 0 4
38816: ARRAY
38817: PPUSH
38818: CALL_OW 141
// end ;
38822: GO 38654
38824: POP
38825: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38826: LD_VAR 0 1
38830: PPUSH
38831: LD_EXP 116
38835: PUSH
38836: LD_VAR 0 5
38840: ARRAY
38841: PUSH
38842: LD_INT 0
38844: PLUS
38845: PPUSH
38846: CALL_OW 505
// end ;
38850: LD_VAR 0 3
38854: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38855: LD_INT 0
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
// if not hack in hackTanks then
38861: LD_VAR 0 1
38865: PUSH
38866: LD_EXP 115
38870: IN
38871: NOT
38872: IFFALSE 38876
// exit ;
38874: GO 39116
// index := GetElementIndex ( hackTanks , hack ) ;
38876: LD_ADDR_VAR 0 4
38880: PUSH
38881: LD_EXP 115
38885: PPUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL 46148 0 2
38895: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38896: LD_ADDR_VAR 0 3
38900: PUSH
38901: DOUBLE
38902: LD_EXP 116
38906: PUSH
38907: LD_VAR 0 4
38911: ARRAY
38912: INC
38913: ST_TO_ADDR
38914: LD_INT 1
38916: PUSH
38917: FOR_DOWNTO
38918: IFFALSE 39090
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38920: LD_ADDR_VAR 0 5
38924: PUSH
38925: LD_EXP 116
38929: PUSH
38930: LD_VAR 0 4
38934: ARRAY
38935: PUSH
38936: LD_VAR 0 3
38940: ARRAY
38941: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38942: LD_VAR 0 5
38946: PUSH
38947: LD_INT 1
38949: ARRAY
38950: PPUSH
38951: CALL_OW 302
38955: NOT
38956: PUSH
38957: LD_VAR 0 5
38961: PUSH
38962: LD_INT 1
38964: ARRAY
38965: PPUSH
38966: CALL_OW 255
38970: PUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: CALL_OW 255
38980: NONEQUAL
38981: OR
38982: IFFALSE 39088
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38984: LD_VAR 0 5
38988: PUSH
38989: LD_INT 1
38991: ARRAY
38992: PPUSH
38993: CALL_OW 305
38997: PUSH
38998: LD_VAR 0 5
39002: PUSH
39003: LD_INT 1
39005: ARRAY
39006: PPUSH
39007: CALL_OW 255
39011: PUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: CALL_OW 255
39021: EQUAL
39022: AND
39023: IFFALSE 39047
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39025: LD_VAR 0 5
39029: PUSH
39030: LD_INT 1
39032: ARRAY
39033: PPUSH
39034: LD_VAR 0 5
39038: PUSH
39039: LD_INT 2
39041: ARRAY
39042: PPUSH
39043: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39047: LD_ADDR_EXP 116
39051: PUSH
39052: LD_EXP 116
39056: PPUSH
39057: LD_VAR 0 4
39061: PPUSH
39062: LD_EXP 116
39066: PUSH
39067: LD_VAR 0 4
39071: ARRAY
39072: PPUSH
39073: LD_VAR 0 3
39077: PPUSH
39078: CALL_OW 3
39082: PPUSH
39083: CALL_OW 1
39087: ST_TO_ADDR
// end ; end ;
39088: GO 38917
39090: POP
39091: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39092: LD_VAR 0 1
39096: PPUSH
39097: LD_EXP 116
39101: PUSH
39102: LD_VAR 0 4
39106: ARRAY
39107: PUSH
39108: LD_INT 0
39110: PLUS
39111: PPUSH
39112: CALL_OW 505
// end ;
39116: LD_VAR 0 2
39120: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
// if not hack in hackTanks then
39127: LD_VAR 0 1
39131: PUSH
39132: LD_EXP 115
39136: IN
39137: NOT
39138: IFFALSE 39142
// exit ;
39140: GO 39227
// index := GetElementIndex ( hackTanks , hack ) ;
39142: LD_ADDR_VAR 0 5
39146: PUSH
39147: LD_EXP 115
39151: PPUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: CALL 46148 0 2
39161: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39162: LD_ADDR_VAR 0 4
39166: PUSH
39167: DOUBLE
39168: LD_INT 1
39170: DEC
39171: ST_TO_ADDR
39172: LD_EXP 116
39176: PUSH
39177: LD_VAR 0 5
39181: ARRAY
39182: PUSH
39183: FOR_TO
39184: IFFALSE 39225
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39186: LD_EXP 116
39190: PUSH
39191: LD_VAR 0 5
39195: ARRAY
39196: PUSH
39197: LD_VAR 0 4
39201: ARRAY
39202: PUSH
39203: LD_INT 1
39205: ARRAY
39206: PUSH
39207: LD_VAR 0 2
39211: EQUAL
39212: IFFALSE 39223
// KillUnit ( vehicle ) ;
39214: LD_VAR 0 2
39218: PPUSH
39219: CALL_OW 66
39223: GO 39183
39225: POP
39226: POP
// end ;
39227: LD_VAR 0 3
39231: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39232: LD_EXP 120
39236: NOT
39237: IFFALSE 39272
39239: GO 39241
39241: DISABLE
// begin initMiner := true ;
39242: LD_ADDR_EXP 120
39246: PUSH
39247: LD_INT 1
39249: ST_TO_ADDR
// minersList := [ ] ;
39250: LD_ADDR_EXP 121
39254: PUSH
39255: EMPTY
39256: ST_TO_ADDR
// minerMinesList := [ ] ;
39257: LD_ADDR_EXP 122
39261: PUSH
39262: EMPTY
39263: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39264: LD_ADDR_EXP 123
39268: PUSH
39269: LD_INT 5
39271: ST_TO_ADDR
// end ;
39272: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39273: LD_EXP 120
39277: PUSH
39278: LD_INT 34
39280: PUSH
39281: LD_INT 81
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PPUSH
39288: CALL_OW 69
39292: AND
39293: IFFALSE 39754
39295: GO 39297
39297: DISABLE
39298: LD_INT 0
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
// begin enable ;
39304: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39305: LD_ADDR_VAR 0 1
39309: PUSH
39310: LD_INT 34
39312: PUSH
39313: LD_INT 81
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PPUSH
39320: CALL_OW 69
39324: PUSH
39325: FOR_IN
39326: IFFALSE 39398
// begin if not i in minersList then
39328: LD_VAR 0 1
39332: PUSH
39333: LD_EXP 121
39337: IN
39338: NOT
39339: IFFALSE 39396
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39341: LD_ADDR_EXP 121
39345: PUSH
39346: LD_EXP 121
39350: PPUSH
39351: LD_EXP 121
39355: PUSH
39356: LD_INT 1
39358: PLUS
39359: PPUSH
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 1
39369: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39370: LD_ADDR_EXP 122
39374: PUSH
39375: LD_EXP 122
39379: PPUSH
39380: LD_EXP 122
39384: PUSH
39385: LD_INT 1
39387: PLUS
39388: PPUSH
39389: EMPTY
39390: PPUSH
39391: CALL_OW 1
39395: ST_TO_ADDR
// end end ;
39396: GO 39325
39398: POP
39399: POP
// for i := minerMinesList downto 1 do
39400: LD_ADDR_VAR 0 1
39404: PUSH
39405: DOUBLE
39406: LD_EXP 122
39410: INC
39411: ST_TO_ADDR
39412: LD_INT 1
39414: PUSH
39415: FOR_DOWNTO
39416: IFFALSE 39752
// begin if IsLive ( minersList [ i ] ) then
39418: LD_EXP 121
39422: PUSH
39423: LD_VAR 0 1
39427: ARRAY
39428: PPUSH
39429: CALL_OW 300
39433: IFFALSE 39461
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39435: LD_EXP 121
39439: PUSH
39440: LD_VAR 0 1
39444: ARRAY
39445: PPUSH
39446: LD_EXP 122
39450: PUSH
39451: LD_VAR 0 1
39455: ARRAY
39456: PPUSH
39457: CALL_OW 505
// if not minerMinesList [ i ] then
39461: LD_EXP 122
39465: PUSH
39466: LD_VAR 0 1
39470: ARRAY
39471: NOT
39472: IFFALSE 39476
// continue ;
39474: GO 39415
// for j := minerMinesList [ i ] downto 1 do
39476: LD_ADDR_VAR 0 2
39480: PUSH
39481: DOUBLE
39482: LD_EXP 122
39486: PUSH
39487: LD_VAR 0 1
39491: ARRAY
39492: INC
39493: ST_TO_ADDR
39494: LD_INT 1
39496: PUSH
39497: FOR_DOWNTO
39498: IFFALSE 39748
// begin side := GetSide ( minersList [ i ] ) ;
39500: LD_ADDR_VAR 0 3
39504: PUSH
39505: LD_EXP 121
39509: PUSH
39510: LD_VAR 0 1
39514: ARRAY
39515: PPUSH
39516: CALL_OW 255
39520: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39521: LD_ADDR_VAR 0 4
39525: PUSH
39526: LD_EXP 122
39530: PUSH
39531: LD_VAR 0 1
39535: ARRAY
39536: PUSH
39537: LD_VAR 0 2
39541: ARRAY
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: PPUSH
39547: LD_EXP 122
39551: PUSH
39552: LD_VAR 0 1
39556: ARRAY
39557: PUSH
39558: LD_VAR 0 2
39562: ARRAY
39563: PUSH
39564: LD_INT 2
39566: ARRAY
39567: PPUSH
39568: CALL_OW 428
39572: ST_TO_ADDR
// if not tmp then
39573: LD_VAR 0 4
39577: NOT
39578: IFFALSE 39582
// continue ;
39580: GO 39497
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39582: LD_VAR 0 4
39586: PUSH
39587: LD_INT 81
39589: PUSH
39590: LD_VAR 0 3
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PPUSH
39599: CALL_OW 69
39603: IN
39604: PUSH
39605: LD_EXP 122
39609: PUSH
39610: LD_VAR 0 1
39614: ARRAY
39615: PUSH
39616: LD_VAR 0 2
39620: ARRAY
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: PPUSH
39626: LD_EXP 122
39630: PUSH
39631: LD_VAR 0 1
39635: ARRAY
39636: PUSH
39637: LD_VAR 0 2
39641: ARRAY
39642: PUSH
39643: LD_INT 2
39645: ARRAY
39646: PPUSH
39647: CALL_OW 458
39651: AND
39652: IFFALSE 39746
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39654: LD_EXP 122
39658: PUSH
39659: LD_VAR 0 1
39663: ARRAY
39664: PUSH
39665: LD_VAR 0 2
39669: ARRAY
39670: PUSH
39671: LD_INT 1
39673: ARRAY
39674: PPUSH
39675: LD_EXP 122
39679: PUSH
39680: LD_VAR 0 1
39684: ARRAY
39685: PUSH
39686: LD_VAR 0 2
39690: ARRAY
39691: PUSH
39692: LD_INT 2
39694: ARRAY
39695: PPUSH
39696: LD_VAR 0 3
39700: PPUSH
39701: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39705: LD_ADDR_EXP 122
39709: PUSH
39710: LD_EXP 122
39714: PPUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: LD_EXP 122
39724: PUSH
39725: LD_VAR 0 1
39729: ARRAY
39730: PPUSH
39731: LD_VAR 0 2
39735: PPUSH
39736: CALL_OW 3
39740: PPUSH
39741: CALL_OW 1
39745: ST_TO_ADDR
// end ; end ;
39746: GO 39497
39748: POP
39749: POP
// end ;
39750: GO 39415
39752: POP
39753: POP
// end ;
39754: PPOPN 4
39756: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39757: LD_INT 0
39759: PPUSH
39760: PPUSH
// result := false ;
39761: LD_ADDR_VAR 0 4
39765: PUSH
39766: LD_INT 0
39768: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 264
39778: PUSH
39779: LD_INT 81
39781: EQUAL
39782: NOT
39783: IFFALSE 39787
// exit ;
39785: GO 40027
// index := GetElementIndex ( minersList , unit ) ;
39787: LD_ADDR_VAR 0 5
39791: PUSH
39792: LD_EXP 121
39796: PPUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL 46148 0 2
39806: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39807: LD_EXP 122
39811: PUSH
39812: LD_VAR 0 5
39816: ARRAY
39817: PUSH
39818: LD_EXP 123
39822: GREATEREQUAL
39823: IFFALSE 39827
// exit ;
39825: GO 40027
// ComMoveXY ( unit , x , y ) ;
39827: LD_VAR 0 1
39831: PPUSH
39832: LD_VAR 0 2
39836: PPUSH
39837: LD_VAR 0 3
39841: PPUSH
39842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39846: LD_INT 35
39848: PPUSH
39849: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39853: LD_VAR 0 1
39857: PPUSH
39858: LD_VAR 0 2
39862: PPUSH
39863: LD_VAR 0 3
39867: PPUSH
39868: CALL 77909 0 3
39872: NOT
39873: PUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 314
39883: AND
39884: IFFALSE 39888
// exit ;
39886: GO 40027
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39888: LD_VAR 0 2
39892: PPUSH
39893: LD_VAR 0 3
39897: PPUSH
39898: CALL_OW 428
39902: PUSH
39903: LD_VAR 0 1
39907: EQUAL
39908: PUSH
39909: LD_VAR 0 1
39913: PPUSH
39914: CALL_OW 314
39918: NOT
39919: AND
39920: IFFALSE 39846
// PlaySoundXY ( x , y , PlantMine ) ;
39922: LD_VAR 0 2
39926: PPUSH
39927: LD_VAR 0 3
39931: PPUSH
39932: LD_STRING PlantMine
39934: PPUSH
39935: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39939: LD_VAR 0 2
39943: PPUSH
39944: LD_VAR 0 3
39948: PPUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 255
39958: PPUSH
39959: LD_INT 0
39961: PPUSH
39962: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39966: LD_ADDR_EXP 122
39970: PUSH
39971: LD_EXP 122
39975: PPUSH
39976: LD_VAR 0 5
39980: PUSH
39981: LD_EXP 122
39985: PUSH
39986: LD_VAR 0 5
39990: ARRAY
39991: PUSH
39992: LD_INT 1
39994: PLUS
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PPUSH
40000: LD_VAR 0 2
40004: PUSH
40005: LD_VAR 0 3
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PPUSH
40014: CALL 46363 0 3
40018: ST_TO_ADDR
// result := true ;
40019: LD_ADDR_VAR 0 4
40023: PUSH
40024: LD_INT 1
40026: ST_TO_ADDR
// end ;
40027: LD_VAR 0 4
40031: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40032: LD_INT 0
40034: PPUSH
40035: PPUSH
40036: PPUSH
// if not unit in minersList then
40037: LD_VAR 0 1
40041: PUSH
40042: LD_EXP 121
40046: IN
40047: NOT
40048: IFFALSE 40052
// exit ;
40050: GO 40444
// index := GetElementIndex ( minersList , unit ) ;
40052: LD_ADDR_VAR 0 6
40056: PUSH
40057: LD_EXP 121
40061: PPUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL 46148 0 2
40071: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40072: LD_ADDR_VAR 0 5
40076: PUSH
40077: DOUBLE
40078: LD_EXP 122
40082: PUSH
40083: LD_VAR 0 6
40087: ARRAY
40088: INC
40089: ST_TO_ADDR
40090: LD_INT 1
40092: PUSH
40093: FOR_DOWNTO
40094: IFFALSE 40255
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40096: LD_EXP 122
40100: PUSH
40101: LD_VAR 0 6
40105: ARRAY
40106: PUSH
40107: LD_VAR 0 5
40111: ARRAY
40112: PUSH
40113: LD_INT 1
40115: ARRAY
40116: PUSH
40117: LD_VAR 0 2
40121: EQUAL
40122: PUSH
40123: LD_EXP 122
40127: PUSH
40128: LD_VAR 0 6
40132: ARRAY
40133: PUSH
40134: LD_VAR 0 5
40138: ARRAY
40139: PUSH
40140: LD_INT 2
40142: ARRAY
40143: PUSH
40144: LD_VAR 0 3
40148: EQUAL
40149: AND
40150: IFFALSE 40253
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40152: LD_EXP 122
40156: PUSH
40157: LD_VAR 0 6
40161: ARRAY
40162: PUSH
40163: LD_VAR 0 5
40167: ARRAY
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: PPUSH
40173: LD_EXP 122
40177: PUSH
40178: LD_VAR 0 6
40182: ARRAY
40183: PUSH
40184: LD_VAR 0 5
40188: ARRAY
40189: PUSH
40190: LD_INT 2
40192: ARRAY
40193: PPUSH
40194: LD_VAR 0 1
40198: PPUSH
40199: CALL_OW 255
40203: PPUSH
40204: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40208: LD_ADDR_EXP 122
40212: PUSH
40213: LD_EXP 122
40217: PPUSH
40218: LD_VAR 0 6
40222: PPUSH
40223: LD_EXP 122
40227: PUSH
40228: LD_VAR 0 6
40232: ARRAY
40233: PPUSH
40234: LD_VAR 0 5
40238: PPUSH
40239: CALL_OW 3
40243: PPUSH
40244: CALL_OW 1
40248: ST_TO_ADDR
// exit ;
40249: POP
40250: POP
40251: GO 40444
// end ; end ;
40253: GO 40093
40255: POP
40256: POP
// for i := minerMinesList [ index ] downto 1 do
40257: LD_ADDR_VAR 0 5
40261: PUSH
40262: DOUBLE
40263: LD_EXP 122
40267: PUSH
40268: LD_VAR 0 6
40272: ARRAY
40273: INC
40274: ST_TO_ADDR
40275: LD_INT 1
40277: PUSH
40278: FOR_DOWNTO
40279: IFFALSE 40442
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40281: LD_EXP 122
40285: PUSH
40286: LD_VAR 0 6
40290: ARRAY
40291: PUSH
40292: LD_VAR 0 5
40296: ARRAY
40297: PUSH
40298: LD_INT 1
40300: ARRAY
40301: PPUSH
40302: LD_EXP 122
40306: PUSH
40307: LD_VAR 0 6
40311: ARRAY
40312: PUSH
40313: LD_VAR 0 5
40317: ARRAY
40318: PUSH
40319: LD_INT 2
40321: ARRAY
40322: PPUSH
40323: LD_VAR 0 2
40327: PPUSH
40328: LD_VAR 0 3
40332: PPUSH
40333: CALL_OW 298
40337: PUSH
40338: LD_INT 6
40340: LESS
40341: IFFALSE 40440
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40343: LD_EXP 122
40347: PUSH
40348: LD_VAR 0 6
40352: ARRAY
40353: PUSH
40354: LD_VAR 0 5
40358: ARRAY
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: PPUSH
40364: LD_EXP 122
40368: PUSH
40369: LD_VAR 0 6
40373: ARRAY
40374: PUSH
40375: LD_VAR 0 5
40379: ARRAY
40380: PUSH
40381: LD_INT 2
40383: ARRAY
40384: PPUSH
40385: LD_VAR 0 1
40389: PPUSH
40390: CALL_OW 255
40394: PPUSH
40395: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40399: LD_ADDR_EXP 122
40403: PUSH
40404: LD_EXP 122
40408: PPUSH
40409: LD_VAR 0 6
40413: PPUSH
40414: LD_EXP 122
40418: PUSH
40419: LD_VAR 0 6
40423: ARRAY
40424: PPUSH
40425: LD_VAR 0 5
40429: PPUSH
40430: CALL_OW 3
40434: PPUSH
40435: CALL_OW 1
40439: ST_TO_ADDR
// end ; end ;
40440: GO 40278
40442: POP
40443: POP
// end ;
40444: LD_VAR 0 4
40448: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40449: LD_INT 0
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 264
40469: PUSH
40470: LD_INT 81
40472: EQUAL
40473: NOT
40474: PUSH
40475: LD_VAR 0 1
40479: PUSH
40480: LD_EXP 121
40484: IN
40485: NOT
40486: OR
40487: IFFALSE 40491
// exit ;
40489: GO 40813
// index := GetElementIndex ( minersList , unit ) ;
40491: LD_ADDR_VAR 0 6
40495: PUSH
40496: LD_EXP 121
40500: PPUSH
40501: LD_VAR 0 1
40505: PPUSH
40506: CALL 46148 0 2
40510: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40511: LD_ADDR_VAR 0 8
40515: PUSH
40516: LD_EXP 123
40520: PUSH
40521: LD_EXP 122
40525: PUSH
40526: LD_VAR 0 6
40530: ARRAY
40531: MINUS
40532: ST_TO_ADDR
// if not minesFreeAmount then
40533: LD_VAR 0 8
40537: NOT
40538: IFFALSE 40542
// exit ;
40540: GO 40813
// tmp := [ ] ;
40542: LD_ADDR_VAR 0 7
40546: PUSH
40547: EMPTY
40548: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40549: LD_ADDR_VAR 0 5
40553: PUSH
40554: DOUBLE
40555: LD_INT 1
40557: DEC
40558: ST_TO_ADDR
40559: LD_VAR 0 8
40563: PUSH
40564: FOR_TO
40565: IFFALSE 40760
// begin _d := rand ( 0 , 5 ) ;
40567: LD_ADDR_VAR 0 11
40571: PUSH
40572: LD_INT 0
40574: PPUSH
40575: LD_INT 5
40577: PPUSH
40578: CALL_OW 12
40582: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40583: LD_ADDR_VAR 0 12
40587: PUSH
40588: LD_INT 2
40590: PPUSH
40591: LD_INT 6
40593: PPUSH
40594: CALL_OW 12
40598: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40599: LD_ADDR_VAR 0 9
40603: PUSH
40604: LD_VAR 0 2
40608: PPUSH
40609: LD_VAR 0 11
40613: PPUSH
40614: LD_VAR 0 12
40618: PPUSH
40619: CALL_OW 272
40623: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40624: LD_ADDR_VAR 0 10
40628: PUSH
40629: LD_VAR 0 3
40633: PPUSH
40634: LD_VAR 0 11
40638: PPUSH
40639: LD_VAR 0 12
40643: PPUSH
40644: CALL_OW 273
40648: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40649: LD_VAR 0 9
40653: PPUSH
40654: LD_VAR 0 10
40658: PPUSH
40659: CALL_OW 488
40663: PUSH
40664: LD_VAR 0 9
40668: PUSH
40669: LD_VAR 0 10
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_VAR 0 7
40682: IN
40683: NOT
40684: AND
40685: PUSH
40686: LD_VAR 0 9
40690: PPUSH
40691: LD_VAR 0 10
40695: PPUSH
40696: CALL_OW 458
40700: NOT
40701: AND
40702: IFFALSE 40744
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40704: LD_ADDR_VAR 0 7
40708: PUSH
40709: LD_VAR 0 7
40713: PPUSH
40714: LD_VAR 0 7
40718: PUSH
40719: LD_INT 1
40721: PLUS
40722: PPUSH
40723: LD_VAR 0 9
40727: PUSH
40728: LD_VAR 0 10
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PPUSH
40737: CALL_OW 1
40741: ST_TO_ADDR
40742: GO 40758
// i := i - 1 ;
40744: LD_ADDR_VAR 0 5
40748: PUSH
40749: LD_VAR 0 5
40753: PUSH
40754: LD_INT 1
40756: MINUS
40757: ST_TO_ADDR
// end ;
40758: GO 40564
40760: POP
40761: POP
// for i in tmp do
40762: LD_ADDR_VAR 0 5
40766: PUSH
40767: LD_VAR 0 7
40771: PUSH
40772: FOR_IN
40773: IFFALSE 40811
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40775: LD_VAR 0 1
40779: PPUSH
40780: LD_VAR 0 5
40784: PUSH
40785: LD_INT 1
40787: ARRAY
40788: PPUSH
40789: LD_VAR 0 5
40793: PUSH
40794: LD_INT 2
40796: ARRAY
40797: PPUSH
40798: CALL 39757 0 3
40802: NOT
40803: IFFALSE 40809
// exit ;
40805: POP
40806: POP
40807: GO 40813
40809: GO 40772
40811: POP
40812: POP
// end ;
40813: LD_VAR 0 4
40817: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40818: LD_INT 0
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
// if GetClass ( unit ) <> class_sniper then
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 257
40838: PUSH
40839: LD_INT 5
40841: NONEQUAL
40842: IFFALSE 40846
// exit ;
40844: GO 41312
// dist := 8 ;
40846: LD_ADDR_VAR 0 5
40850: PUSH
40851: LD_INT 8
40853: ST_TO_ADDR
// viewRange := 12 ;
40854: LD_ADDR_VAR 0 8
40858: PUSH
40859: LD_INT 12
40861: ST_TO_ADDR
// side := GetSide ( unit ) ;
40862: LD_ADDR_VAR 0 6
40866: PUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 255
40876: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40877: LD_INT 61
40879: PPUSH
40880: LD_VAR 0 6
40884: PPUSH
40885: CALL_OW 321
40889: PUSH
40890: LD_INT 2
40892: EQUAL
40893: IFFALSE 40903
// viewRange := 16 ;
40895: LD_ADDR_VAR 0 8
40899: PUSH
40900: LD_INT 16
40902: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40903: LD_VAR 0 1
40907: PPUSH
40908: LD_VAR 0 2
40912: PPUSH
40913: LD_VAR 0 3
40917: PPUSH
40918: CALL_OW 297
40922: PUSH
40923: LD_VAR 0 5
40927: GREATER
40928: IFFALSE 41007
// begin ComMoveXY ( unit , x , y ) ;
40930: LD_VAR 0 1
40934: PPUSH
40935: LD_VAR 0 2
40939: PPUSH
40940: LD_VAR 0 3
40944: PPUSH
40945: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40949: LD_INT 35
40951: PPUSH
40952: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40956: LD_VAR 0 1
40960: PPUSH
40961: LD_VAR 0 2
40965: PPUSH
40966: LD_VAR 0 3
40970: PPUSH
40971: CALL 77909 0 3
40975: NOT
40976: IFFALSE 40980
// exit ;
40978: GO 41312
// until GetDistUnitXY ( unit , x , y ) < dist ;
40980: LD_VAR 0 1
40984: PPUSH
40985: LD_VAR 0 2
40989: PPUSH
40990: LD_VAR 0 3
40994: PPUSH
40995: CALL_OW 297
40999: PUSH
41000: LD_VAR 0 5
41004: LESS
41005: IFFALSE 40949
// end ; ComTurnXY ( unit , x , y ) ;
41007: LD_VAR 0 1
41011: PPUSH
41012: LD_VAR 0 2
41016: PPUSH
41017: LD_VAR 0 3
41021: PPUSH
41022: CALL_OW 118
// repeat if Multiplayer then
41026: LD_OWVAR 4
41030: IFFALSE 41041
// wait ( 35 ) else
41032: LD_INT 35
41034: PPUSH
41035: CALL_OW 67
41039: GO 41048
// wait ( 5 ) ;
41041: LD_INT 5
41043: PPUSH
41044: CALL_OW 67
// _d := GetDir ( unit ) ;
41048: LD_ADDR_VAR 0 11
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 254
41062: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41063: LD_ADDR_VAR 0 7
41067: PUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL_OW 250
41077: PPUSH
41078: LD_VAR 0 1
41082: PPUSH
41083: CALL_OW 251
41087: PPUSH
41088: LD_VAR 0 2
41092: PPUSH
41093: LD_VAR 0 3
41097: PPUSH
41098: CALL 80517 0 4
41102: ST_TO_ADDR
// until dir = _d ;
41103: LD_VAR 0 7
41107: PUSH
41108: LD_VAR 0 11
41112: EQUAL
41113: IFFALSE 41026
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41115: LD_ADDR_VAR 0 9
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 250
41129: PPUSH
41130: LD_VAR 0 7
41134: PPUSH
41135: LD_VAR 0 5
41139: PPUSH
41140: CALL_OW 272
41144: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41145: LD_ADDR_VAR 0 10
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 251
41159: PPUSH
41160: LD_VAR 0 7
41164: PPUSH
41165: LD_VAR 0 5
41169: PPUSH
41170: CALL_OW 273
41174: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41175: LD_VAR 0 9
41179: PPUSH
41180: LD_VAR 0 10
41184: PPUSH
41185: CALL_OW 488
41189: NOT
41190: IFFALSE 41194
// exit ;
41192: GO 41312
// ComAnimCustom ( unit , 1 ) ;
41194: LD_VAR 0 1
41198: PPUSH
41199: LD_INT 1
41201: PPUSH
41202: CALL_OW 592
// p := 0 ;
41206: LD_ADDR_VAR 0 12
41210: PUSH
41211: LD_INT 0
41213: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41214: LD_VAR 0 9
41218: PPUSH
41219: LD_VAR 0 10
41223: PPUSH
41224: LD_VAR 0 6
41228: PPUSH
41229: LD_VAR 0 8
41233: PPUSH
41234: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41238: LD_INT 35
41240: PPUSH
41241: CALL_OW 67
// p := Inc ( p ) ;
41245: LD_ADDR_VAR 0 12
41249: PUSH
41250: LD_VAR 0 12
41254: PPUSH
41255: CALL 80473 0 1
41259: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41260: LD_VAR 0 12
41264: PUSH
41265: LD_INT 3
41267: EQUAL
41268: PUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 302
41278: NOT
41279: OR
41280: PUSH
41281: LD_VAR 0 1
41285: PPUSH
41286: CALL_OW 301
41290: OR
41291: IFFALSE 41238
// RemoveSeeing ( _x , _y , side ) ;
41293: LD_VAR 0 9
41297: PPUSH
41298: LD_VAR 0 10
41302: PPUSH
41303: LD_VAR 0 6
41307: PPUSH
41308: CALL_OW 331
// end ; end_of_file
41312: LD_VAR 0 4
41316: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41317: LD_INT 0
41319: PPUSH
41320: PPUSH
// if exist_mode then
41321: LD_VAR 0 2
41325: IFFALSE 41371
// begin unit := CreateCharacter ( prefix & ident ) ;
41327: LD_ADDR_VAR 0 5
41331: PUSH
41332: LD_VAR 0 3
41336: PUSH
41337: LD_VAR 0 1
41341: STR
41342: PPUSH
41343: CALL_OW 34
41347: ST_TO_ADDR
// if unit then
41348: LD_VAR 0 5
41352: IFFALSE 41369
// DeleteCharacters ( prefix & ident ) ;
41354: LD_VAR 0 3
41358: PUSH
41359: LD_VAR 0 1
41363: STR
41364: PPUSH
41365: CALL_OW 40
// end else
41369: GO 41386
// unit := NewCharacter ( ident ) ;
41371: LD_ADDR_VAR 0 5
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 25
41385: ST_TO_ADDR
// result := unit ;
41386: LD_ADDR_VAR 0 4
41390: PUSH
41391: LD_VAR 0 5
41395: ST_TO_ADDR
// end ;
41396: LD_VAR 0 4
41400: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41401: LD_INT 0
41403: PPUSH
41404: PPUSH
// if exist_mode then
41405: LD_VAR 0 2
41409: IFFALSE 41434
// unit := CreateCharacter ( prefix & ident ) else
41411: LD_ADDR_VAR 0 5
41415: PUSH
41416: LD_VAR 0 3
41420: PUSH
41421: LD_VAR 0 1
41425: STR
41426: PPUSH
41427: CALL_OW 34
41431: ST_TO_ADDR
41432: GO 41449
// unit := NewCharacter ( ident ) ;
41434: LD_ADDR_VAR 0 5
41438: PUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: CALL_OW 25
41448: ST_TO_ADDR
// result := unit ;
41449: LD_ADDR_VAR 0 4
41453: PUSH
41454: LD_VAR 0 5
41458: ST_TO_ADDR
// end ;
41459: LD_VAR 0 4
41463: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41464: LD_INT 0
41466: PPUSH
41467: PPUSH
// if not side or not nation then
41468: LD_VAR 0 1
41472: NOT
41473: PUSH
41474: LD_VAR 0 2
41478: NOT
41479: OR
41480: IFFALSE 41484
// exit ;
41482: GO 42252
// case nation of nation_american :
41484: LD_VAR 0 2
41488: PUSH
41489: LD_INT 1
41491: DOUBLE
41492: EQUAL
41493: IFTRUE 41497
41495: GO 41711
41497: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41498: LD_ADDR_VAR 0 4
41502: PUSH
41503: LD_INT 35
41505: PUSH
41506: LD_INT 45
41508: PUSH
41509: LD_INT 46
41511: PUSH
41512: LD_INT 47
41514: PUSH
41515: LD_INT 82
41517: PUSH
41518: LD_INT 83
41520: PUSH
41521: LD_INT 84
41523: PUSH
41524: LD_INT 85
41526: PUSH
41527: LD_INT 86
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 6
41538: PUSH
41539: LD_INT 15
41541: PUSH
41542: LD_INT 16
41544: PUSH
41545: LD_INT 7
41547: PUSH
41548: LD_INT 12
41550: PUSH
41551: LD_INT 13
41553: PUSH
41554: LD_INT 10
41556: PUSH
41557: LD_INT 14
41559: PUSH
41560: LD_INT 20
41562: PUSH
41563: LD_INT 21
41565: PUSH
41566: LD_INT 22
41568: PUSH
41569: LD_INT 25
41571: PUSH
41572: LD_INT 32
41574: PUSH
41575: LD_INT 27
41577: PUSH
41578: LD_INT 36
41580: PUSH
41581: LD_INT 69
41583: PUSH
41584: LD_INT 39
41586: PUSH
41587: LD_INT 34
41589: PUSH
41590: LD_INT 40
41592: PUSH
41593: LD_INT 48
41595: PUSH
41596: LD_INT 49
41598: PUSH
41599: LD_INT 50
41601: PUSH
41602: LD_INT 51
41604: PUSH
41605: LD_INT 52
41607: PUSH
41608: LD_INT 53
41610: PUSH
41611: LD_INT 54
41613: PUSH
41614: LD_INT 55
41616: PUSH
41617: LD_INT 56
41619: PUSH
41620: LD_INT 57
41622: PUSH
41623: LD_INT 58
41625: PUSH
41626: LD_INT 59
41628: PUSH
41629: LD_INT 60
41631: PUSH
41632: LD_INT 61
41634: PUSH
41635: LD_INT 62
41637: PUSH
41638: LD_INT 80
41640: PUSH
41641: LD_INT 82
41643: PUSH
41644: LD_INT 83
41646: PUSH
41647: LD_INT 84
41649: PUSH
41650: LD_INT 85
41652: PUSH
41653: LD_INT 86
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
41709: GO 42176
41711: LD_INT 2
41713: DOUBLE
41714: EQUAL
41715: IFTRUE 41719
41717: GO 41945
41719: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41720: LD_ADDR_VAR 0 4
41724: PUSH
41725: LD_INT 35
41727: PUSH
41728: LD_INT 45
41730: PUSH
41731: LD_INT 46
41733: PUSH
41734: LD_INT 47
41736: PUSH
41737: LD_INT 82
41739: PUSH
41740: LD_INT 83
41742: PUSH
41743: LD_INT 84
41745: PUSH
41746: LD_INT 85
41748: PUSH
41749: LD_INT 87
41751: PUSH
41752: LD_INT 70
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 11
41760: PUSH
41761: LD_INT 3
41763: PUSH
41764: LD_INT 4
41766: PUSH
41767: LD_INT 5
41769: PUSH
41770: LD_INT 6
41772: PUSH
41773: LD_INT 15
41775: PUSH
41776: LD_INT 18
41778: PUSH
41779: LD_INT 7
41781: PUSH
41782: LD_INT 17
41784: PUSH
41785: LD_INT 8
41787: PUSH
41788: LD_INT 20
41790: PUSH
41791: LD_INT 21
41793: PUSH
41794: LD_INT 22
41796: PUSH
41797: LD_INT 72
41799: PUSH
41800: LD_INT 26
41802: PUSH
41803: LD_INT 69
41805: PUSH
41806: LD_INT 39
41808: PUSH
41809: LD_INT 40
41811: PUSH
41812: LD_INT 41
41814: PUSH
41815: LD_INT 42
41817: PUSH
41818: LD_INT 43
41820: PUSH
41821: LD_INT 48
41823: PUSH
41824: LD_INT 49
41826: PUSH
41827: LD_INT 50
41829: PUSH
41830: LD_INT 51
41832: PUSH
41833: LD_INT 52
41835: PUSH
41836: LD_INT 53
41838: PUSH
41839: LD_INT 54
41841: PUSH
41842: LD_INT 55
41844: PUSH
41845: LD_INT 56
41847: PUSH
41848: LD_INT 60
41850: PUSH
41851: LD_INT 61
41853: PUSH
41854: LD_INT 62
41856: PUSH
41857: LD_INT 66
41859: PUSH
41860: LD_INT 67
41862: PUSH
41863: LD_INT 68
41865: PUSH
41866: LD_INT 81
41868: PUSH
41869: LD_INT 82
41871: PUSH
41872: LD_INT 83
41874: PUSH
41875: LD_INT 84
41877: PUSH
41878: LD_INT 85
41880: PUSH
41881: LD_INT 87
41883: PUSH
41884: LD_INT 88
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
41943: GO 42176
41945: LD_INT 3
41947: DOUBLE
41948: EQUAL
41949: IFTRUE 41953
41951: GO 42175
41953: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41954: LD_ADDR_VAR 0 4
41958: PUSH
41959: LD_INT 46
41961: PUSH
41962: LD_INT 47
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: LD_INT 82
41973: PUSH
41974: LD_INT 83
41976: PUSH
41977: LD_INT 84
41979: PUSH
41980: LD_INT 85
41982: PUSH
41983: LD_INT 86
41985: PUSH
41986: LD_INT 11
41988: PUSH
41989: LD_INT 9
41991: PUSH
41992: LD_INT 20
41994: PUSH
41995: LD_INT 19
41997: PUSH
41998: LD_INT 21
42000: PUSH
42001: LD_INT 24
42003: PUSH
42004: LD_INT 22
42006: PUSH
42007: LD_INT 25
42009: PUSH
42010: LD_INT 28
42012: PUSH
42013: LD_INT 29
42015: PUSH
42016: LD_INT 30
42018: PUSH
42019: LD_INT 31
42021: PUSH
42022: LD_INT 37
42024: PUSH
42025: LD_INT 38
42027: PUSH
42028: LD_INT 32
42030: PUSH
42031: LD_INT 27
42033: PUSH
42034: LD_INT 33
42036: PUSH
42037: LD_INT 69
42039: PUSH
42040: LD_INT 39
42042: PUSH
42043: LD_INT 34
42045: PUSH
42046: LD_INT 40
42048: PUSH
42049: LD_INT 71
42051: PUSH
42052: LD_INT 23
42054: PUSH
42055: LD_INT 44
42057: PUSH
42058: LD_INT 48
42060: PUSH
42061: LD_INT 49
42063: PUSH
42064: LD_INT 50
42066: PUSH
42067: LD_INT 51
42069: PUSH
42070: LD_INT 52
42072: PUSH
42073: LD_INT 53
42075: PUSH
42076: LD_INT 54
42078: PUSH
42079: LD_INT 55
42081: PUSH
42082: LD_INT 56
42084: PUSH
42085: LD_INT 57
42087: PUSH
42088: LD_INT 58
42090: PUSH
42091: LD_INT 59
42093: PUSH
42094: LD_INT 63
42096: PUSH
42097: LD_INT 64
42099: PUSH
42100: LD_INT 65
42102: PUSH
42103: LD_INT 82
42105: PUSH
42106: LD_INT 83
42108: PUSH
42109: LD_INT 84
42111: PUSH
42112: LD_INT 85
42114: PUSH
42115: LD_INT 86
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: ST_TO_ADDR
42173: GO 42176
42175: POP
// if state > - 1 and state < 3 then
42176: LD_VAR 0 3
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: GREATER
42185: PUSH
42186: LD_VAR 0 3
42190: PUSH
42191: LD_INT 3
42193: LESS
42194: AND
42195: IFFALSE 42252
// for i in result do
42197: LD_ADDR_VAR 0 5
42201: PUSH
42202: LD_VAR 0 4
42206: PUSH
42207: FOR_IN
42208: IFFALSE 42250
// if GetTech ( i , side ) <> state then
42210: LD_VAR 0 5
42214: PPUSH
42215: LD_VAR 0 1
42219: PPUSH
42220: CALL_OW 321
42224: PUSH
42225: LD_VAR 0 3
42229: NONEQUAL
42230: IFFALSE 42248
// result := result diff i ;
42232: LD_ADDR_VAR 0 4
42236: PUSH
42237: LD_VAR 0 4
42241: PUSH
42242: LD_VAR 0 5
42246: DIFF
42247: ST_TO_ADDR
42248: GO 42207
42250: POP
42251: POP
// end ;
42252: LD_VAR 0 4
42256: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42257: LD_INT 0
42259: PPUSH
42260: PPUSH
42261: PPUSH
// result := true ;
42262: LD_ADDR_VAR 0 3
42266: PUSH
42267: LD_INT 1
42269: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42270: LD_ADDR_VAR 0 5
42274: PUSH
42275: LD_VAR 0 2
42279: PPUSH
42280: CALL_OW 480
42284: ST_TO_ADDR
// if not tmp then
42285: LD_VAR 0 5
42289: NOT
42290: IFFALSE 42294
// exit ;
42292: GO 42343
// for i in tmp do
42294: LD_ADDR_VAR 0 4
42298: PUSH
42299: LD_VAR 0 5
42303: PUSH
42304: FOR_IN
42305: IFFALSE 42341
// if GetTech ( i , side ) <> state_researched then
42307: LD_VAR 0 4
42311: PPUSH
42312: LD_VAR 0 1
42316: PPUSH
42317: CALL_OW 321
42321: PUSH
42322: LD_INT 2
42324: NONEQUAL
42325: IFFALSE 42339
// begin result := false ;
42327: LD_ADDR_VAR 0 3
42331: PUSH
42332: LD_INT 0
42334: ST_TO_ADDR
// exit ;
42335: POP
42336: POP
42337: GO 42343
// end ;
42339: GO 42304
42341: POP
42342: POP
// end ;
42343: LD_VAR 0 3
42347: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42348: LD_INT 0
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42363: LD_VAR 0 1
42367: NOT
42368: PUSH
42369: LD_VAR 0 1
42373: PPUSH
42374: CALL_OW 257
42378: PUSH
42379: LD_INT 9
42381: NONEQUAL
42382: OR
42383: IFFALSE 42387
// exit ;
42385: GO 42960
// side := GetSide ( unit ) ;
42387: LD_ADDR_VAR 0 9
42391: PUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 255
42401: ST_TO_ADDR
// tech_space := tech_spacanom ;
42402: LD_ADDR_VAR 0 12
42406: PUSH
42407: LD_INT 29
42409: ST_TO_ADDR
// tech_time := tech_taurad ;
42410: LD_ADDR_VAR 0 13
42414: PUSH
42415: LD_INT 28
42417: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42418: LD_ADDR_VAR 0 11
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 310
42432: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42433: LD_VAR 0 11
42437: PPUSH
42438: CALL_OW 247
42442: PUSH
42443: LD_INT 2
42445: EQUAL
42446: IFFALSE 42450
// exit ;
42448: GO 42960
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42450: LD_ADDR_VAR 0 8
42454: PUSH
42455: LD_INT 81
42457: PUSH
42458: LD_VAR 0 9
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 21
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PPUSH
42488: CALL_OW 69
42492: ST_TO_ADDR
// if not tmp then
42493: LD_VAR 0 8
42497: NOT
42498: IFFALSE 42502
// exit ;
42500: GO 42960
// if in_unit then
42502: LD_VAR 0 11
42506: IFFALSE 42530
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42508: LD_ADDR_VAR 0 10
42512: PUSH
42513: LD_VAR 0 8
42517: PPUSH
42518: LD_VAR 0 11
42522: PPUSH
42523: CALL_OW 74
42527: ST_TO_ADDR
42528: GO 42550
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42530: LD_ADDR_VAR 0 10
42534: PUSH
42535: LD_VAR 0 8
42539: PPUSH
42540: LD_VAR 0 1
42544: PPUSH
42545: CALL_OW 74
42549: ST_TO_ADDR
// if not enemy then
42550: LD_VAR 0 10
42554: NOT
42555: IFFALSE 42559
// exit ;
42557: GO 42960
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42559: LD_VAR 0 11
42563: PUSH
42564: LD_VAR 0 11
42568: PPUSH
42569: LD_VAR 0 10
42573: PPUSH
42574: CALL_OW 296
42578: PUSH
42579: LD_INT 13
42581: GREATER
42582: AND
42583: PUSH
42584: LD_VAR 0 1
42588: PPUSH
42589: LD_VAR 0 10
42593: PPUSH
42594: CALL_OW 296
42598: PUSH
42599: LD_INT 12
42601: GREATER
42602: OR
42603: IFFALSE 42607
// exit ;
42605: GO 42960
// missile := [ 1 ] ;
42607: LD_ADDR_VAR 0 14
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42618: LD_VAR 0 9
42622: PPUSH
42623: LD_VAR 0 12
42627: PPUSH
42628: CALL_OW 325
42632: IFFALSE 42661
// missile := Replace ( missile , missile + 1 , 2 ) ;
42634: LD_ADDR_VAR 0 14
42638: PUSH
42639: LD_VAR 0 14
42643: PPUSH
42644: LD_VAR 0 14
42648: PUSH
42649: LD_INT 1
42651: PLUS
42652: PPUSH
42653: LD_INT 2
42655: PPUSH
42656: CALL_OW 1
42660: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42661: LD_VAR 0 9
42665: PPUSH
42666: LD_VAR 0 13
42670: PPUSH
42671: CALL_OW 325
42675: PUSH
42676: LD_VAR 0 10
42680: PPUSH
42681: CALL_OW 255
42685: PPUSH
42686: LD_VAR 0 13
42690: PPUSH
42691: CALL_OW 325
42695: NOT
42696: AND
42697: IFFALSE 42726
// missile := Replace ( missile , missile + 1 , 3 ) ;
42699: LD_ADDR_VAR 0 14
42703: PUSH
42704: LD_VAR 0 14
42708: PPUSH
42709: LD_VAR 0 14
42713: PUSH
42714: LD_INT 1
42716: PLUS
42717: PPUSH
42718: LD_INT 3
42720: PPUSH
42721: CALL_OW 1
42725: ST_TO_ADDR
// if missile < 2 then
42726: LD_VAR 0 14
42730: PUSH
42731: LD_INT 2
42733: LESS
42734: IFFALSE 42738
// exit ;
42736: GO 42960
// x := GetX ( enemy ) ;
42738: LD_ADDR_VAR 0 4
42742: PUSH
42743: LD_VAR 0 10
42747: PPUSH
42748: CALL_OW 250
42752: ST_TO_ADDR
// y := GetY ( enemy ) ;
42753: LD_ADDR_VAR 0 5
42757: PUSH
42758: LD_VAR 0 10
42762: PPUSH
42763: CALL_OW 251
42767: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42768: LD_ADDR_VAR 0 6
42772: PUSH
42773: LD_VAR 0 4
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PPUSH
42782: LD_INT 1
42784: PPUSH
42785: CALL_OW 12
42789: PLUS
42790: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42791: LD_ADDR_VAR 0 7
42795: PUSH
42796: LD_VAR 0 5
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PPUSH
42805: LD_INT 1
42807: PPUSH
42808: CALL_OW 12
42812: PLUS
42813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42814: LD_VAR 0 6
42818: PPUSH
42819: LD_VAR 0 7
42823: PPUSH
42824: CALL_OW 488
42828: NOT
42829: IFFALSE 42851
// begin _x := x ;
42831: LD_ADDR_VAR 0 6
42835: PUSH
42836: LD_VAR 0 4
42840: ST_TO_ADDR
// _y := y ;
42841: LD_ADDR_VAR 0 7
42845: PUSH
42846: LD_VAR 0 5
42850: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42851: LD_ADDR_VAR 0 3
42855: PUSH
42856: LD_INT 1
42858: PPUSH
42859: LD_VAR 0 14
42863: PPUSH
42864: CALL_OW 12
42868: ST_TO_ADDR
// case i of 1 :
42869: LD_VAR 0 3
42873: PUSH
42874: LD_INT 1
42876: DOUBLE
42877: EQUAL
42878: IFTRUE 42882
42880: GO 42899
42882: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42883: LD_VAR 0 1
42887: PPUSH
42888: LD_VAR 0 10
42892: PPUSH
42893: CALL_OW 115
42897: GO 42960
42899: LD_INT 2
42901: DOUBLE
42902: EQUAL
42903: IFTRUE 42907
42905: GO 42929
42907: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42908: LD_VAR 0 1
42912: PPUSH
42913: LD_VAR 0 6
42917: PPUSH
42918: LD_VAR 0 7
42922: PPUSH
42923: CALL_OW 153
42927: GO 42960
42929: LD_INT 3
42931: DOUBLE
42932: EQUAL
42933: IFTRUE 42937
42935: GO 42959
42937: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42938: LD_VAR 0 1
42942: PPUSH
42943: LD_VAR 0 6
42947: PPUSH
42948: LD_VAR 0 7
42952: PPUSH
42953: CALL_OW 154
42957: GO 42960
42959: POP
// end ;
42960: LD_VAR 0 2
42964: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42965: LD_INT 0
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
42972: PPUSH
// if not unit or not building then
42973: LD_VAR 0 1
42977: NOT
42978: PUSH
42979: LD_VAR 0 2
42983: NOT
42984: OR
42985: IFFALSE 42989
// exit ;
42987: GO 43147
// x := GetX ( building ) ;
42989: LD_ADDR_VAR 0 5
42993: PUSH
42994: LD_VAR 0 2
42998: PPUSH
42999: CALL_OW 250
43003: ST_TO_ADDR
// y := GetY ( building ) ;
43004: LD_ADDR_VAR 0 6
43008: PUSH
43009: LD_VAR 0 2
43013: PPUSH
43014: CALL_OW 251
43018: ST_TO_ADDR
// for i = 0 to 5 do
43019: LD_ADDR_VAR 0 4
43023: PUSH
43024: DOUBLE
43025: LD_INT 0
43027: DEC
43028: ST_TO_ADDR
43029: LD_INT 5
43031: PUSH
43032: FOR_TO
43033: IFFALSE 43145
// begin _x := ShiftX ( x , i , 3 ) ;
43035: LD_ADDR_VAR 0 7
43039: PUSH
43040: LD_VAR 0 5
43044: PPUSH
43045: LD_VAR 0 4
43049: PPUSH
43050: LD_INT 3
43052: PPUSH
43053: CALL_OW 272
43057: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43058: LD_ADDR_VAR 0 8
43062: PUSH
43063: LD_VAR 0 6
43067: PPUSH
43068: LD_VAR 0 4
43072: PPUSH
43073: LD_INT 3
43075: PPUSH
43076: CALL_OW 273
43080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43081: LD_VAR 0 7
43085: PPUSH
43086: LD_VAR 0 8
43090: PPUSH
43091: CALL_OW 488
43095: NOT
43096: IFFALSE 43100
// continue ;
43098: GO 43032
// if HexInfo ( _x , _y ) = 0 then
43100: LD_VAR 0 7
43104: PPUSH
43105: LD_VAR 0 8
43109: PPUSH
43110: CALL_OW 428
43114: PUSH
43115: LD_INT 0
43117: EQUAL
43118: IFFALSE 43143
// begin ComMoveXY ( unit , _x , _y ) ;
43120: LD_VAR 0 1
43124: PPUSH
43125: LD_VAR 0 7
43129: PPUSH
43130: LD_VAR 0 8
43134: PPUSH
43135: CALL_OW 111
// exit ;
43139: POP
43140: POP
43141: GO 43147
// end ; end ;
43143: GO 43032
43145: POP
43146: POP
// end ;
43147: LD_VAR 0 3
43151: RET
// export function ScanBase ( side , base_area ) ; begin
43152: LD_INT 0
43154: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43155: LD_ADDR_VAR 0 3
43159: PUSH
43160: LD_VAR 0 2
43164: PPUSH
43165: LD_INT 81
43167: PUSH
43168: LD_VAR 0 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PPUSH
43177: CALL_OW 70
43181: ST_TO_ADDR
// end ;
43182: LD_VAR 0 3
43186: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43187: LD_INT 0
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
// result := false ;
43193: LD_ADDR_VAR 0 2
43197: PUSH
43198: LD_INT 0
43200: ST_TO_ADDR
// side := GetSide ( unit ) ;
43201: LD_ADDR_VAR 0 3
43205: PUSH
43206: LD_VAR 0 1
43210: PPUSH
43211: CALL_OW 255
43215: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43216: LD_ADDR_VAR 0 4
43220: PUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: CALL_OW 248
43230: ST_TO_ADDR
// case nat of 1 :
43231: LD_VAR 0 4
43235: PUSH
43236: LD_INT 1
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43255
43244: POP
// tech := tech_lassight ; 2 :
43245: LD_ADDR_VAR 0 5
43249: PUSH
43250: LD_INT 12
43252: ST_TO_ADDR
43253: GO 43294
43255: LD_INT 2
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43274
43263: POP
// tech := tech_mortar ; 3 :
43264: LD_ADDR_VAR 0 5
43268: PUSH
43269: LD_INT 41
43271: ST_TO_ADDR
43272: GO 43294
43274: LD_INT 3
43276: DOUBLE
43277: EQUAL
43278: IFTRUE 43282
43280: GO 43293
43282: POP
// tech := tech_bazooka ; end ;
43283: LD_ADDR_VAR 0 5
43287: PUSH
43288: LD_INT 44
43290: ST_TO_ADDR
43291: GO 43294
43293: POP
// if Researched ( side , tech ) then
43294: LD_VAR 0 3
43298: PPUSH
43299: LD_VAR 0 5
43303: PPUSH
43304: CALL_OW 325
43308: IFFALSE 43335
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43310: LD_ADDR_VAR 0 2
43314: PUSH
43315: LD_INT 5
43317: PUSH
43318: LD_INT 8
43320: PUSH
43321: LD_INT 9
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: PUSH
43329: LD_VAR 0 4
43333: ARRAY
43334: ST_TO_ADDR
// end ;
43335: LD_VAR 0 2
43339: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43340: LD_INT 0
43342: PPUSH
43343: PPUSH
43344: PPUSH
// if not mines then
43345: LD_VAR 0 2
43349: NOT
43350: IFFALSE 43354
// exit ;
43352: GO 43498
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43354: LD_ADDR_VAR 0 5
43358: PUSH
43359: LD_INT 81
43361: PUSH
43362: LD_VAR 0 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: LD_INT 21
43376: PUSH
43377: LD_INT 3
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PPUSH
43392: CALL_OW 69
43396: ST_TO_ADDR
// for i in mines do
43397: LD_ADDR_VAR 0 4
43401: PUSH
43402: LD_VAR 0 2
43406: PUSH
43407: FOR_IN
43408: IFFALSE 43496
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43410: LD_VAR 0 4
43414: PUSH
43415: LD_INT 1
43417: ARRAY
43418: PPUSH
43419: LD_VAR 0 4
43423: PUSH
43424: LD_INT 2
43426: ARRAY
43427: PPUSH
43428: CALL_OW 458
43432: NOT
43433: IFFALSE 43437
// continue ;
43435: GO 43407
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43437: LD_VAR 0 4
43441: PUSH
43442: LD_INT 1
43444: ARRAY
43445: PPUSH
43446: LD_VAR 0 4
43450: PUSH
43451: LD_INT 2
43453: ARRAY
43454: PPUSH
43455: CALL_OW 428
43459: PUSH
43460: LD_VAR 0 5
43464: IN
43465: IFFALSE 43494
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43467: LD_VAR 0 4
43471: PUSH
43472: LD_INT 1
43474: ARRAY
43475: PPUSH
43476: LD_VAR 0 4
43480: PUSH
43481: LD_INT 2
43483: ARRAY
43484: PPUSH
43485: LD_VAR 0 1
43489: PPUSH
43490: CALL_OW 456
// end ;
43494: GO 43407
43496: POP
43497: POP
// end ;
43498: LD_VAR 0 3
43502: RET
// export function Count ( array ) ; begin
43503: LD_INT 0
43505: PPUSH
// result := array + 0 ;
43506: LD_ADDR_VAR 0 2
43510: PUSH
43511: LD_VAR 0 1
43515: PUSH
43516: LD_INT 0
43518: PLUS
43519: ST_TO_ADDR
// end ;
43520: LD_VAR 0 2
43524: RET
// export function IsEmpty ( building ) ; begin
43525: LD_INT 0
43527: PPUSH
// if not building then
43528: LD_VAR 0 1
43532: NOT
43533: IFFALSE 43537
// exit ;
43535: GO 43580
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43537: LD_ADDR_VAR 0 2
43541: PUSH
43542: LD_VAR 0 1
43546: PUSH
43547: LD_INT 22
43549: PUSH
43550: LD_VAR 0 1
43554: PPUSH
43555: CALL_OW 255
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 58
43566: PUSH
43567: EMPTY
43568: LIST
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PPUSH
43574: CALL_OW 69
43578: IN
43579: ST_TO_ADDR
// end ;
43580: LD_VAR 0 2
43584: RET
// export function IsNotFull ( building ) ; var places ; begin
43585: LD_INT 0
43587: PPUSH
43588: PPUSH
// if not building then
43589: LD_VAR 0 1
43593: NOT
43594: IFFALSE 43598
// exit ;
43596: GO 43626
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43598: LD_ADDR_VAR 0 2
43602: PUSH
43603: LD_VAR 0 1
43607: PPUSH
43608: LD_INT 3
43610: PUSH
43611: LD_INT 62
43613: PUSH
43614: EMPTY
43615: LIST
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PPUSH
43621: CALL_OW 72
43625: ST_TO_ADDR
// end ;
43626: LD_VAR 0 2
43630: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43631: LD_INT 0
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
// tmp := [ ] ;
43637: LD_ADDR_VAR 0 3
43641: PUSH
43642: EMPTY
43643: ST_TO_ADDR
// list := [ ] ;
43644: LD_ADDR_VAR 0 5
43648: PUSH
43649: EMPTY
43650: ST_TO_ADDR
// for i = 16 to 25 do
43651: LD_ADDR_VAR 0 4
43655: PUSH
43656: DOUBLE
43657: LD_INT 16
43659: DEC
43660: ST_TO_ADDR
43661: LD_INT 25
43663: PUSH
43664: FOR_TO
43665: IFFALSE 43738
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_VAR 0 3
43676: PUSH
43677: LD_INT 22
43679: PUSH
43680: LD_VAR 0 1
43684: PPUSH
43685: CALL_OW 255
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 91
43696: PUSH
43697: LD_VAR 0 1
43701: PUSH
43702: LD_INT 6
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 30
43712: PUSH
43713: LD_VAR 0 4
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: PUSH
43727: EMPTY
43728: LIST
43729: PPUSH
43730: CALL_OW 69
43734: ADD
43735: ST_TO_ADDR
43736: GO 43664
43738: POP
43739: POP
// for i = 1 to tmp do
43740: LD_ADDR_VAR 0 4
43744: PUSH
43745: DOUBLE
43746: LD_INT 1
43748: DEC
43749: ST_TO_ADDR
43750: LD_VAR 0 3
43754: PUSH
43755: FOR_TO
43756: IFFALSE 43844
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43758: LD_ADDR_VAR 0 5
43762: PUSH
43763: LD_VAR 0 5
43767: PUSH
43768: LD_VAR 0 3
43772: PUSH
43773: LD_VAR 0 4
43777: ARRAY
43778: PPUSH
43779: CALL_OW 266
43783: PUSH
43784: LD_VAR 0 3
43788: PUSH
43789: LD_VAR 0 4
43793: ARRAY
43794: PPUSH
43795: CALL_OW 250
43799: PUSH
43800: LD_VAR 0 3
43804: PUSH
43805: LD_VAR 0 4
43809: ARRAY
43810: PPUSH
43811: CALL_OW 251
43815: PUSH
43816: LD_VAR 0 3
43820: PUSH
43821: LD_VAR 0 4
43825: ARRAY
43826: PPUSH
43827: CALL_OW 254
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: ADD
43841: ST_TO_ADDR
43842: GO 43755
43844: POP
43845: POP
// result := list ;
43846: LD_ADDR_VAR 0 2
43850: PUSH
43851: LD_VAR 0 5
43855: ST_TO_ADDR
// end ;
43856: LD_VAR 0 2
43860: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43861: LD_INT 0
43863: PPUSH
43864: PPUSH
43865: PPUSH
43866: PPUSH
43867: PPUSH
43868: PPUSH
43869: PPUSH
// if not factory then
43870: LD_VAR 0 1
43874: NOT
43875: IFFALSE 43879
// exit ;
43877: GO 44472
// if control = control_apeman then
43879: LD_VAR 0 4
43883: PUSH
43884: LD_INT 5
43886: EQUAL
43887: IFFALSE 43996
// begin tmp := UnitsInside ( factory ) ;
43889: LD_ADDR_VAR 0 8
43893: PUSH
43894: LD_VAR 0 1
43898: PPUSH
43899: CALL_OW 313
43903: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43904: LD_VAR 0 8
43908: PPUSH
43909: LD_INT 25
43911: PUSH
43912: LD_INT 12
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PPUSH
43919: CALL_OW 72
43923: NOT
43924: IFFALSE 43934
// control := control_manual ;
43926: LD_ADDR_VAR 0 4
43930: PUSH
43931: LD_INT 1
43933: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43934: LD_ADDR_VAR 0 8
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL 43631 0 1
43948: ST_TO_ADDR
// if tmp then
43949: LD_VAR 0 8
43953: IFFALSE 43996
// begin for i in tmp do
43955: LD_ADDR_VAR 0 7
43959: PUSH
43960: LD_VAR 0 8
43964: PUSH
43965: FOR_IN
43966: IFFALSE 43994
// if i [ 1 ] = b_ext_radio then
43968: LD_VAR 0 7
43972: PUSH
43973: LD_INT 1
43975: ARRAY
43976: PUSH
43977: LD_INT 22
43979: EQUAL
43980: IFFALSE 43992
// begin control := control_remote ;
43982: LD_ADDR_VAR 0 4
43986: PUSH
43987: LD_INT 2
43989: ST_TO_ADDR
// break ;
43990: GO 43994
// end ;
43992: GO 43965
43994: POP
43995: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43996: LD_VAR 0 1
44000: PPUSH
44001: LD_VAR 0 2
44005: PPUSH
44006: LD_VAR 0 3
44010: PPUSH
44011: LD_VAR 0 4
44015: PPUSH
44016: LD_VAR 0 5
44020: PPUSH
44021: CALL_OW 448
44025: IFFALSE 44060
// begin result := [ chassis , engine , control , weapon ] ;
44027: LD_ADDR_VAR 0 6
44031: PUSH
44032: LD_VAR 0 2
44036: PUSH
44037: LD_VAR 0 3
44041: PUSH
44042: LD_VAR 0 4
44046: PUSH
44047: LD_VAR 0 5
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// exit ;
44058: GO 44472
// end ; _chassis := AvailableChassisList ( factory ) ;
44060: LD_ADDR_VAR 0 9
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: CALL_OW 475
44074: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44075: LD_ADDR_VAR 0 11
44079: PUSH
44080: LD_VAR 0 1
44084: PPUSH
44085: CALL_OW 476
44089: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44090: LD_ADDR_VAR 0 12
44094: PUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 477
44104: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44105: LD_ADDR_VAR 0 10
44109: PUSH
44110: LD_VAR 0 1
44114: PPUSH
44115: CALL_OW 478
44119: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44120: LD_VAR 0 9
44124: NOT
44125: PUSH
44126: LD_VAR 0 11
44130: NOT
44131: OR
44132: PUSH
44133: LD_VAR 0 12
44137: NOT
44138: OR
44139: PUSH
44140: LD_VAR 0 10
44144: NOT
44145: OR
44146: IFFALSE 44181
// begin result := [ chassis , engine , control , weapon ] ;
44148: LD_ADDR_VAR 0 6
44152: PUSH
44153: LD_VAR 0 2
44157: PUSH
44158: LD_VAR 0 3
44162: PUSH
44163: LD_VAR 0 4
44167: PUSH
44168: LD_VAR 0 5
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: ST_TO_ADDR
// exit ;
44179: GO 44472
// end ; if not chassis in _chassis then
44181: LD_VAR 0 2
44185: PUSH
44186: LD_VAR 0 9
44190: IN
44191: NOT
44192: IFFALSE 44218
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44194: LD_ADDR_VAR 0 2
44198: PUSH
44199: LD_VAR 0 9
44203: PUSH
44204: LD_INT 1
44206: PPUSH
44207: LD_VAR 0 9
44211: PPUSH
44212: CALL_OW 12
44216: ARRAY
44217: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44218: LD_VAR 0 2
44222: PPUSH
44223: LD_VAR 0 3
44227: PPUSH
44228: CALL 44477 0 2
44232: NOT
44233: IFFALSE 44292
// repeat engine := _engine [ 1 ] ;
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_VAR 0 11
44244: PUSH
44245: LD_INT 1
44247: ARRAY
44248: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44249: LD_ADDR_VAR 0 11
44253: PUSH
44254: LD_VAR 0 11
44258: PPUSH
44259: LD_INT 1
44261: PPUSH
44262: CALL_OW 3
44266: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44267: LD_VAR 0 2
44271: PPUSH
44272: LD_VAR 0 3
44276: PPUSH
44277: CALL 44477 0 2
44281: PUSH
44282: LD_VAR 0 11
44286: PUSH
44287: EMPTY
44288: EQUAL
44289: OR
44290: IFFALSE 44235
// if not control in _control then
44292: LD_VAR 0 4
44296: PUSH
44297: LD_VAR 0 12
44301: IN
44302: NOT
44303: IFFALSE 44329
// control := _control [ rand ( 1 , _control ) ] ;
44305: LD_ADDR_VAR 0 4
44309: PUSH
44310: LD_VAR 0 12
44314: PUSH
44315: LD_INT 1
44317: PPUSH
44318: LD_VAR 0 12
44322: PPUSH
44323: CALL_OW 12
44327: ARRAY
44328: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44329: LD_VAR 0 2
44333: PPUSH
44334: LD_VAR 0 5
44338: PPUSH
44339: CALL 44697 0 2
44343: NOT
44344: IFFALSE 44403
// repeat weapon := _weapon [ 1 ] ;
44346: LD_ADDR_VAR 0 5
44350: PUSH
44351: LD_VAR 0 10
44355: PUSH
44356: LD_INT 1
44358: ARRAY
44359: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44360: LD_ADDR_VAR 0 10
44364: PUSH
44365: LD_VAR 0 10
44369: PPUSH
44370: LD_INT 1
44372: PPUSH
44373: CALL_OW 3
44377: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44378: LD_VAR 0 2
44382: PPUSH
44383: LD_VAR 0 5
44387: PPUSH
44388: CALL 44697 0 2
44392: PUSH
44393: LD_VAR 0 10
44397: PUSH
44398: EMPTY
44399: EQUAL
44400: OR
44401: IFFALSE 44346
// result := [ ] ;
44403: LD_ADDR_VAR 0 6
44407: PUSH
44408: EMPTY
44409: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44410: LD_VAR 0 1
44414: PPUSH
44415: LD_VAR 0 2
44419: PPUSH
44420: LD_VAR 0 3
44424: PPUSH
44425: LD_VAR 0 4
44429: PPUSH
44430: LD_VAR 0 5
44434: PPUSH
44435: CALL_OW 448
44439: IFFALSE 44472
// result := [ chassis , engine , control , weapon ] ;
44441: LD_ADDR_VAR 0 6
44445: PUSH
44446: LD_VAR 0 2
44450: PUSH
44451: LD_VAR 0 3
44455: PUSH
44456: LD_VAR 0 4
44460: PUSH
44461: LD_VAR 0 5
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// end ;
44472: LD_VAR 0 6
44476: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44477: LD_INT 0
44479: PPUSH
// if not chassis or not engine then
44480: LD_VAR 0 1
44484: NOT
44485: PUSH
44486: LD_VAR 0 2
44490: NOT
44491: OR
44492: IFFALSE 44496
// exit ;
44494: GO 44692
// case engine of engine_solar :
44496: LD_VAR 0 2
44500: PUSH
44501: LD_INT 2
44503: DOUBLE
44504: EQUAL
44505: IFTRUE 44509
44507: GO 44547
44509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44510: LD_ADDR_VAR 0 3
44514: PUSH
44515: LD_INT 11
44517: PUSH
44518: LD_INT 12
44520: PUSH
44521: LD_INT 13
44523: PUSH
44524: LD_INT 14
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
44545: GO 44676
44547: LD_INT 1
44549: DOUBLE
44550: EQUAL
44551: IFTRUE 44555
44553: GO 44617
44555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44556: LD_ADDR_VAR 0 3
44560: PUSH
44561: LD_INT 11
44563: PUSH
44564: LD_INT 12
44566: PUSH
44567: LD_INT 13
44569: PUSH
44570: LD_INT 14
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 3
44581: PUSH
44582: LD_INT 4
44584: PUSH
44585: LD_INT 5
44587: PUSH
44588: LD_INT 21
44590: PUSH
44591: LD_INT 23
44593: PUSH
44594: LD_INT 22
44596: PUSH
44597: LD_INT 24
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
44615: GO 44676
44617: LD_INT 3
44619: DOUBLE
44620: EQUAL
44621: IFTRUE 44625
44623: GO 44675
44625: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44626: LD_ADDR_VAR 0 3
44630: PUSH
44631: LD_INT 13
44633: PUSH
44634: LD_INT 14
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 3
44642: PUSH
44643: LD_INT 4
44645: PUSH
44646: LD_INT 5
44648: PUSH
44649: LD_INT 21
44651: PUSH
44652: LD_INT 22
44654: PUSH
44655: LD_INT 23
44657: PUSH
44658: LD_INT 24
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: ST_TO_ADDR
44673: GO 44676
44675: POP
// result := ( chassis in result ) ;
44676: LD_ADDR_VAR 0 3
44680: PUSH
44681: LD_VAR 0 1
44685: PUSH
44686: LD_VAR 0 3
44690: IN
44691: ST_TO_ADDR
// end ;
44692: LD_VAR 0 3
44696: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44697: LD_INT 0
44699: PPUSH
// if not chassis or not weapon then
44700: LD_VAR 0 1
44704: NOT
44705: PUSH
44706: LD_VAR 0 2
44710: NOT
44711: OR
44712: IFFALSE 44716
// exit ;
44714: GO 45776
// case weapon of us_machine_gun :
44716: LD_VAR 0 2
44720: PUSH
44721: LD_INT 2
44723: DOUBLE
44724: EQUAL
44725: IFTRUE 44729
44727: GO 44759
44729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44730: LD_ADDR_VAR 0 3
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 4
44746: PUSH
44747: LD_INT 5
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
44757: GO 45760
44759: LD_INT 3
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44767
44765: GO 44797
44767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 2
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: LD_INT 4
44784: PUSH
44785: LD_INT 5
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
44795: GO 45760
44797: LD_INT 11
44799: DOUBLE
44800: EQUAL
44801: IFTRUE 44805
44803: GO 44835
44805: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44806: LD_ADDR_VAR 0 3
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: LD_INT 4
44822: PUSH
44823: LD_INT 5
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
44833: GO 45760
44835: LD_INT 4
44837: DOUBLE
44838: EQUAL
44839: IFTRUE 44843
44841: GO 44869
44843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44844: LD_ADDR_VAR 0 3
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 3
44854: PUSH
44855: LD_INT 4
44857: PUSH
44858: LD_INT 5
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: ST_TO_ADDR
44867: GO 45760
44869: LD_INT 5
44871: DOUBLE
44872: EQUAL
44873: IFTRUE 44877
44875: GO 44903
44877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44878: LD_ADDR_VAR 0 3
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 3
44888: PUSH
44889: LD_INT 4
44891: PUSH
44892: LD_INT 5
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: ST_TO_ADDR
44901: GO 45760
44903: LD_INT 9
44905: DOUBLE
44906: EQUAL
44907: IFTRUE 44911
44909: GO 44937
44911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44912: LD_ADDR_VAR 0 3
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: LD_INT 4
44925: PUSH
44926: LD_INT 5
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
44935: GO 45760
44937: LD_INT 7
44939: DOUBLE
44940: EQUAL
44941: IFTRUE 44945
44943: GO 44971
44945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44946: LD_ADDR_VAR 0 3
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: LD_INT 4
44959: PUSH
44960: LD_INT 5
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
44969: GO 45760
44971: LD_INT 12
44973: DOUBLE
44974: EQUAL
44975: IFTRUE 44979
44977: GO 45005
44979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44980: LD_ADDR_VAR 0 3
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: LD_INT 4
44993: PUSH
44994: LD_INT 5
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
45003: GO 45760
45005: LD_INT 13
45007: DOUBLE
45008: EQUAL
45009: IFTRUE 45013
45011: GO 45039
45013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45014: LD_ADDR_VAR 0 3
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: LD_INT 4
45027: PUSH
45028: LD_INT 5
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
45037: GO 45760
45039: LD_INT 14
45041: DOUBLE
45042: EQUAL
45043: IFTRUE 45047
45045: GO 45065
45047: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45048: LD_ADDR_VAR 0 3
45052: PUSH
45053: LD_INT 4
45055: PUSH
45056: LD_INT 5
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: ST_TO_ADDR
45063: GO 45760
45065: LD_INT 6
45067: DOUBLE
45068: EQUAL
45069: IFTRUE 45073
45071: GO 45091
45073: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45074: LD_ADDR_VAR 0 3
45078: PUSH
45079: LD_INT 4
45081: PUSH
45082: LD_INT 5
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: ST_TO_ADDR
45089: GO 45760
45091: LD_INT 10
45093: DOUBLE
45094: EQUAL
45095: IFTRUE 45099
45097: GO 45117
45099: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45100: LD_ADDR_VAR 0 3
45104: PUSH
45105: LD_INT 4
45107: PUSH
45108: LD_INT 5
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: ST_TO_ADDR
45115: GO 45760
45117: LD_INT 22
45119: DOUBLE
45120: EQUAL
45121: IFTRUE 45125
45123: GO 45151
45125: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45126: LD_ADDR_VAR 0 3
45130: PUSH
45131: LD_INT 11
45133: PUSH
45134: LD_INT 12
45136: PUSH
45137: LD_INT 13
45139: PUSH
45140: LD_INT 14
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: ST_TO_ADDR
45149: GO 45760
45151: LD_INT 23
45153: DOUBLE
45154: EQUAL
45155: IFTRUE 45159
45157: GO 45185
45159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45160: LD_ADDR_VAR 0 3
45164: PUSH
45165: LD_INT 11
45167: PUSH
45168: LD_INT 12
45170: PUSH
45171: LD_INT 13
45173: PUSH
45174: LD_INT 14
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: ST_TO_ADDR
45183: GO 45760
45185: LD_INT 24
45187: DOUBLE
45188: EQUAL
45189: IFTRUE 45193
45191: GO 45219
45193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45194: LD_ADDR_VAR 0 3
45198: PUSH
45199: LD_INT 11
45201: PUSH
45202: LD_INT 12
45204: PUSH
45205: LD_INT 13
45207: PUSH
45208: LD_INT 14
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
45217: GO 45760
45219: LD_INT 30
45221: DOUBLE
45222: EQUAL
45223: IFTRUE 45227
45225: GO 45253
45227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_INT 11
45235: PUSH
45236: LD_INT 12
45238: PUSH
45239: LD_INT 13
45241: PUSH
45242: LD_INT 14
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
45251: GO 45760
45253: LD_INT 25
45255: DOUBLE
45256: EQUAL
45257: IFTRUE 45261
45259: GO 45279
45261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_INT 13
45269: PUSH
45270: LD_INT 14
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: ST_TO_ADDR
45277: GO 45760
45279: LD_INT 27
45281: DOUBLE
45282: EQUAL
45283: IFTRUE 45287
45285: GO 45305
45287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45288: LD_ADDR_VAR 0 3
45292: PUSH
45293: LD_INT 13
45295: PUSH
45296: LD_INT 14
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: ST_TO_ADDR
45303: GO 45760
45305: LD_INT 92
45307: DOUBLE
45308: EQUAL
45309: IFTRUE 45313
45311: GO 45339
45313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45314: LD_ADDR_VAR 0 3
45318: PUSH
45319: LD_INT 11
45321: PUSH
45322: LD_INT 12
45324: PUSH
45325: LD_INT 13
45327: PUSH
45328: LD_INT 14
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
45337: GO 45760
45339: LD_INT 28
45341: DOUBLE
45342: EQUAL
45343: IFTRUE 45347
45345: GO 45365
45347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45348: LD_ADDR_VAR 0 3
45352: PUSH
45353: LD_INT 13
45355: PUSH
45356: LD_INT 14
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: ST_TO_ADDR
45363: GO 45760
45365: LD_INT 29
45367: DOUBLE
45368: EQUAL
45369: IFTRUE 45373
45371: GO 45391
45373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45374: LD_ADDR_VAR 0 3
45378: PUSH
45379: LD_INT 13
45381: PUSH
45382: LD_INT 14
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: ST_TO_ADDR
45389: GO 45760
45391: LD_INT 31
45393: DOUBLE
45394: EQUAL
45395: IFTRUE 45399
45397: GO 45417
45399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45400: LD_ADDR_VAR 0 3
45404: PUSH
45405: LD_INT 13
45407: PUSH
45408: LD_INT 14
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: ST_TO_ADDR
45415: GO 45760
45417: LD_INT 26
45419: DOUBLE
45420: EQUAL
45421: IFTRUE 45425
45423: GO 45443
45425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45426: LD_ADDR_VAR 0 3
45430: PUSH
45431: LD_INT 13
45433: PUSH
45434: LD_INT 14
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: ST_TO_ADDR
45441: GO 45760
45443: LD_INT 42
45445: DOUBLE
45446: EQUAL
45447: IFTRUE 45451
45449: GO 45477
45451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45452: LD_ADDR_VAR 0 3
45456: PUSH
45457: LD_INT 21
45459: PUSH
45460: LD_INT 22
45462: PUSH
45463: LD_INT 23
45465: PUSH
45466: LD_INT 24
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
45475: GO 45760
45477: LD_INT 43
45479: DOUBLE
45480: EQUAL
45481: IFTRUE 45485
45483: GO 45511
45485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45486: LD_ADDR_VAR 0 3
45490: PUSH
45491: LD_INT 21
45493: PUSH
45494: LD_INT 22
45496: PUSH
45497: LD_INT 23
45499: PUSH
45500: LD_INT 24
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
45509: GO 45760
45511: LD_INT 44
45513: DOUBLE
45514: EQUAL
45515: IFTRUE 45519
45517: GO 45545
45519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45520: LD_ADDR_VAR 0 3
45524: PUSH
45525: LD_INT 21
45527: PUSH
45528: LD_INT 22
45530: PUSH
45531: LD_INT 23
45533: PUSH
45534: LD_INT 24
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
45543: GO 45760
45545: LD_INT 45
45547: DOUBLE
45548: EQUAL
45549: IFTRUE 45553
45551: GO 45579
45553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45554: LD_ADDR_VAR 0 3
45558: PUSH
45559: LD_INT 21
45561: PUSH
45562: LD_INT 22
45564: PUSH
45565: LD_INT 23
45567: PUSH
45568: LD_INT 24
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
45577: GO 45760
45579: LD_INT 49
45581: DOUBLE
45582: EQUAL
45583: IFTRUE 45587
45585: GO 45613
45587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45588: LD_ADDR_VAR 0 3
45592: PUSH
45593: LD_INT 21
45595: PUSH
45596: LD_INT 22
45598: PUSH
45599: LD_INT 23
45601: PUSH
45602: LD_INT 24
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: ST_TO_ADDR
45611: GO 45760
45613: LD_INT 51
45615: DOUBLE
45616: EQUAL
45617: IFTRUE 45621
45619: GO 45647
45621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45622: LD_ADDR_VAR 0 3
45626: PUSH
45627: LD_INT 21
45629: PUSH
45630: LD_INT 22
45632: PUSH
45633: LD_INT 23
45635: PUSH
45636: LD_INT 24
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
45645: GO 45760
45647: LD_INT 52
45649: DOUBLE
45650: EQUAL
45651: IFTRUE 45655
45653: GO 45681
45655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45656: LD_ADDR_VAR 0 3
45660: PUSH
45661: LD_INT 21
45663: PUSH
45664: LD_INT 22
45666: PUSH
45667: LD_INT 23
45669: PUSH
45670: LD_INT 24
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
45679: GO 45760
45681: LD_INT 53
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45689
45687: GO 45707
45689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_INT 23
45697: PUSH
45698: LD_INT 24
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: ST_TO_ADDR
45705: GO 45760
45707: LD_INT 46
45709: DOUBLE
45710: EQUAL
45711: IFTRUE 45715
45713: GO 45733
45715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45716: LD_ADDR_VAR 0 3
45720: PUSH
45721: LD_INT 23
45723: PUSH
45724: LD_INT 24
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: ST_TO_ADDR
45731: GO 45760
45733: LD_INT 47
45735: DOUBLE
45736: EQUAL
45737: IFTRUE 45741
45739: GO 45759
45741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45742: LD_ADDR_VAR 0 3
45746: PUSH
45747: LD_INT 23
45749: PUSH
45750: LD_INT 24
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: ST_TO_ADDR
45757: GO 45760
45759: POP
// result := ( chassis in result ) ;
45760: LD_ADDR_VAR 0 3
45764: PUSH
45765: LD_VAR 0 1
45769: PUSH
45770: LD_VAR 0 3
45774: IN
45775: ST_TO_ADDR
// end ;
45776: LD_VAR 0 3
45780: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45781: LD_INT 0
45783: PPUSH
45784: PPUSH
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
45789: PPUSH
// result := array ;
45790: LD_ADDR_VAR 0 5
45794: PUSH
45795: LD_VAR 0 1
45799: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45800: LD_VAR 0 1
45804: NOT
45805: PUSH
45806: LD_VAR 0 2
45810: NOT
45811: OR
45812: PUSH
45813: LD_VAR 0 3
45817: NOT
45818: OR
45819: PUSH
45820: LD_VAR 0 2
45824: PUSH
45825: LD_VAR 0 1
45829: GREATER
45830: OR
45831: PUSH
45832: LD_VAR 0 3
45836: PUSH
45837: LD_VAR 0 1
45841: GREATER
45842: OR
45843: IFFALSE 45847
// exit ;
45845: GO 46143
// if direction then
45847: LD_VAR 0 4
45851: IFFALSE 45915
// begin d := 1 ;
45853: LD_ADDR_VAR 0 9
45857: PUSH
45858: LD_INT 1
45860: ST_TO_ADDR
// if i_from > i_to then
45861: LD_VAR 0 2
45865: PUSH
45866: LD_VAR 0 3
45870: GREATER
45871: IFFALSE 45897
// length := ( array - i_from ) + i_to else
45873: LD_ADDR_VAR 0 11
45877: PUSH
45878: LD_VAR 0 1
45882: PUSH
45883: LD_VAR 0 2
45887: MINUS
45888: PUSH
45889: LD_VAR 0 3
45893: PLUS
45894: ST_TO_ADDR
45895: GO 45913
// length := i_to - i_from ;
45897: LD_ADDR_VAR 0 11
45901: PUSH
45902: LD_VAR 0 3
45906: PUSH
45907: LD_VAR 0 2
45911: MINUS
45912: ST_TO_ADDR
// end else
45913: GO 45976
// begin d := - 1 ;
45915: LD_ADDR_VAR 0 9
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: ST_TO_ADDR
// if i_from > i_to then
45924: LD_VAR 0 2
45928: PUSH
45929: LD_VAR 0 3
45933: GREATER
45934: IFFALSE 45954
// length := i_from - i_to else
45936: LD_ADDR_VAR 0 11
45940: PUSH
45941: LD_VAR 0 2
45945: PUSH
45946: LD_VAR 0 3
45950: MINUS
45951: ST_TO_ADDR
45952: GO 45976
// length := ( array - i_to ) + i_from ;
45954: LD_ADDR_VAR 0 11
45958: PUSH
45959: LD_VAR 0 1
45963: PUSH
45964: LD_VAR 0 3
45968: MINUS
45969: PUSH
45970: LD_VAR 0 2
45974: PLUS
45975: ST_TO_ADDR
// end ; if not length then
45976: LD_VAR 0 11
45980: NOT
45981: IFFALSE 45985
// exit ;
45983: GO 46143
// tmp := array ;
45985: LD_ADDR_VAR 0 10
45989: PUSH
45990: LD_VAR 0 1
45994: ST_TO_ADDR
// for i = 1 to length do
45995: LD_ADDR_VAR 0 6
45999: PUSH
46000: DOUBLE
46001: LD_INT 1
46003: DEC
46004: ST_TO_ADDR
46005: LD_VAR 0 11
46009: PUSH
46010: FOR_TO
46011: IFFALSE 46131
// begin for j = 1 to array do
46013: LD_ADDR_VAR 0 7
46017: PUSH
46018: DOUBLE
46019: LD_INT 1
46021: DEC
46022: ST_TO_ADDR
46023: LD_VAR 0 1
46027: PUSH
46028: FOR_TO
46029: IFFALSE 46117
// begin k := j + d ;
46031: LD_ADDR_VAR 0 8
46035: PUSH
46036: LD_VAR 0 7
46040: PUSH
46041: LD_VAR 0 9
46045: PLUS
46046: ST_TO_ADDR
// if k > array then
46047: LD_VAR 0 8
46051: PUSH
46052: LD_VAR 0 1
46056: GREATER
46057: IFFALSE 46067
// k := 1 ;
46059: LD_ADDR_VAR 0 8
46063: PUSH
46064: LD_INT 1
46066: ST_TO_ADDR
// if not k then
46067: LD_VAR 0 8
46071: NOT
46072: IFFALSE 46084
// k := array ;
46074: LD_ADDR_VAR 0 8
46078: PUSH
46079: LD_VAR 0 1
46083: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46084: LD_ADDR_VAR 0 10
46088: PUSH
46089: LD_VAR 0 10
46093: PPUSH
46094: LD_VAR 0 8
46098: PPUSH
46099: LD_VAR 0 1
46103: PUSH
46104: LD_VAR 0 7
46108: ARRAY
46109: PPUSH
46110: CALL_OW 1
46114: ST_TO_ADDR
// end ;
46115: GO 46028
46117: POP
46118: POP
// array := tmp ;
46119: LD_ADDR_VAR 0 1
46123: PUSH
46124: LD_VAR 0 10
46128: ST_TO_ADDR
// end ;
46129: GO 46010
46131: POP
46132: POP
// result := array ;
46133: LD_ADDR_VAR 0 5
46137: PUSH
46138: LD_VAR 0 1
46142: ST_TO_ADDR
// end ;
46143: LD_VAR 0 5
46147: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46148: LD_INT 0
46150: PPUSH
46151: PPUSH
// result := 0 ;
46152: LD_ADDR_VAR 0 3
46156: PUSH
46157: LD_INT 0
46159: ST_TO_ADDR
// if not array or not value in array then
46160: LD_VAR 0 1
46164: NOT
46165: PUSH
46166: LD_VAR 0 2
46170: PUSH
46171: LD_VAR 0 1
46175: IN
46176: NOT
46177: OR
46178: IFFALSE 46182
// exit ;
46180: GO 46236
// for i = 1 to array do
46182: LD_ADDR_VAR 0 4
46186: PUSH
46187: DOUBLE
46188: LD_INT 1
46190: DEC
46191: ST_TO_ADDR
46192: LD_VAR 0 1
46196: PUSH
46197: FOR_TO
46198: IFFALSE 46234
// if value = array [ i ] then
46200: LD_VAR 0 2
46204: PUSH
46205: LD_VAR 0 1
46209: PUSH
46210: LD_VAR 0 4
46214: ARRAY
46215: EQUAL
46216: IFFALSE 46232
// begin result := i ;
46218: LD_ADDR_VAR 0 3
46222: PUSH
46223: LD_VAR 0 4
46227: ST_TO_ADDR
// exit ;
46228: POP
46229: POP
46230: GO 46236
// end ;
46232: GO 46197
46234: POP
46235: POP
// end ;
46236: LD_VAR 0 3
46240: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46241: LD_INT 0
46243: PPUSH
// vc_chassis := chassis ;
46244: LD_ADDR_OWVAR 37
46248: PUSH
46249: LD_VAR 0 1
46253: ST_TO_ADDR
// vc_engine := engine ;
46254: LD_ADDR_OWVAR 39
46258: PUSH
46259: LD_VAR 0 2
46263: ST_TO_ADDR
// vc_control := control ;
46264: LD_ADDR_OWVAR 38
46268: PUSH
46269: LD_VAR 0 3
46273: ST_TO_ADDR
// vc_weapon := weapon ;
46274: LD_ADDR_OWVAR 40
46278: PUSH
46279: LD_VAR 0 4
46283: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46284: LD_ADDR_OWVAR 41
46288: PUSH
46289: LD_VAR 0 5
46293: ST_TO_ADDR
// end ;
46294: LD_VAR 0 6
46298: RET
// export function WantPlant ( unit ) ; var task ; begin
46299: LD_INT 0
46301: PPUSH
46302: PPUSH
// result := false ;
46303: LD_ADDR_VAR 0 2
46307: PUSH
46308: LD_INT 0
46310: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46311: LD_ADDR_VAR 0 3
46315: PUSH
46316: LD_VAR 0 1
46320: PPUSH
46321: CALL_OW 437
46325: ST_TO_ADDR
// if task then
46326: LD_VAR 0 3
46330: IFFALSE 46358
// if task [ 1 ] [ 1 ] = p then
46332: LD_VAR 0 3
46336: PUSH
46337: LD_INT 1
46339: ARRAY
46340: PUSH
46341: LD_INT 1
46343: ARRAY
46344: PUSH
46345: LD_STRING p
46347: EQUAL
46348: IFFALSE 46358
// result := true ;
46350: LD_ADDR_VAR 0 2
46354: PUSH
46355: LD_INT 1
46357: ST_TO_ADDR
// end ;
46358: LD_VAR 0 2
46362: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46363: LD_INT 0
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
// if pos < 1 then
46369: LD_VAR 0 2
46373: PUSH
46374: LD_INT 1
46376: LESS
46377: IFFALSE 46381
// exit ;
46379: GO 46684
// if pos = 1 then
46381: LD_VAR 0 2
46385: PUSH
46386: LD_INT 1
46388: EQUAL
46389: IFFALSE 46422
// result := Replace ( arr , pos [ 1 ] , value ) else
46391: LD_ADDR_VAR 0 4
46395: PUSH
46396: LD_VAR 0 1
46400: PPUSH
46401: LD_VAR 0 2
46405: PUSH
46406: LD_INT 1
46408: ARRAY
46409: PPUSH
46410: LD_VAR 0 3
46414: PPUSH
46415: CALL_OW 1
46419: ST_TO_ADDR
46420: GO 46684
// begin tmp := arr ;
46422: LD_ADDR_VAR 0 6
46426: PUSH
46427: LD_VAR 0 1
46431: ST_TO_ADDR
// s_arr := [ tmp ] ;
46432: LD_ADDR_VAR 0 7
46436: PUSH
46437: LD_VAR 0 6
46441: PUSH
46442: EMPTY
46443: LIST
46444: ST_TO_ADDR
// for i = 1 to pos - 1 do
46445: LD_ADDR_VAR 0 5
46449: PUSH
46450: DOUBLE
46451: LD_INT 1
46453: DEC
46454: ST_TO_ADDR
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 1
46462: MINUS
46463: PUSH
46464: FOR_TO
46465: IFFALSE 46510
// begin tmp := tmp [ pos [ i ] ] ;
46467: LD_ADDR_VAR 0 6
46471: PUSH
46472: LD_VAR 0 6
46476: PUSH
46477: LD_VAR 0 2
46481: PUSH
46482: LD_VAR 0 5
46486: ARRAY
46487: ARRAY
46488: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46489: LD_ADDR_VAR 0 7
46493: PUSH
46494: LD_VAR 0 7
46498: PUSH
46499: LD_VAR 0 6
46503: PUSH
46504: EMPTY
46505: LIST
46506: ADD
46507: ST_TO_ADDR
// end ;
46508: GO 46464
46510: POP
46511: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46512: LD_ADDR_VAR 0 6
46516: PUSH
46517: LD_VAR 0 6
46521: PPUSH
46522: LD_VAR 0 2
46526: PUSH
46527: LD_VAR 0 2
46531: ARRAY
46532: PPUSH
46533: LD_VAR 0 3
46537: PPUSH
46538: CALL_OW 1
46542: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46543: LD_ADDR_VAR 0 7
46547: PUSH
46548: LD_VAR 0 7
46552: PPUSH
46553: LD_VAR 0 7
46557: PPUSH
46558: LD_VAR 0 6
46562: PPUSH
46563: CALL_OW 1
46567: ST_TO_ADDR
// for i = s_arr downto 2 do
46568: LD_ADDR_VAR 0 5
46572: PUSH
46573: DOUBLE
46574: LD_VAR 0 7
46578: INC
46579: ST_TO_ADDR
46580: LD_INT 2
46582: PUSH
46583: FOR_DOWNTO
46584: IFFALSE 46668
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46586: LD_ADDR_VAR 0 6
46590: PUSH
46591: LD_VAR 0 7
46595: PUSH
46596: LD_VAR 0 5
46600: PUSH
46601: LD_INT 1
46603: MINUS
46604: ARRAY
46605: PPUSH
46606: LD_VAR 0 2
46610: PUSH
46611: LD_VAR 0 5
46615: PUSH
46616: LD_INT 1
46618: MINUS
46619: ARRAY
46620: PPUSH
46621: LD_VAR 0 7
46625: PUSH
46626: LD_VAR 0 5
46630: ARRAY
46631: PPUSH
46632: CALL_OW 1
46636: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46637: LD_ADDR_VAR 0 7
46641: PUSH
46642: LD_VAR 0 7
46646: PPUSH
46647: LD_VAR 0 5
46651: PUSH
46652: LD_INT 1
46654: MINUS
46655: PPUSH
46656: LD_VAR 0 6
46660: PPUSH
46661: CALL_OW 1
46665: ST_TO_ADDR
// end ;
46666: GO 46583
46668: POP
46669: POP
// result := s_arr [ 1 ] ;
46670: LD_ADDR_VAR 0 4
46674: PUSH
46675: LD_VAR 0 7
46679: PUSH
46680: LD_INT 1
46682: ARRAY
46683: ST_TO_ADDR
// end ; end ;
46684: LD_VAR 0 4
46688: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46689: LD_INT 0
46691: PPUSH
46692: PPUSH
// if not list then
46693: LD_VAR 0 1
46697: NOT
46698: IFFALSE 46702
// exit ;
46700: GO 46793
// i := list [ pos1 ] ;
46702: LD_ADDR_VAR 0 5
46706: PUSH
46707: LD_VAR 0 1
46711: PUSH
46712: LD_VAR 0 2
46716: ARRAY
46717: ST_TO_ADDR
// if not i then
46718: LD_VAR 0 5
46722: NOT
46723: IFFALSE 46727
// exit ;
46725: GO 46793
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46727: LD_ADDR_VAR 0 1
46731: PUSH
46732: LD_VAR 0 1
46736: PPUSH
46737: LD_VAR 0 2
46741: PPUSH
46742: LD_VAR 0 1
46746: PUSH
46747: LD_VAR 0 3
46751: ARRAY
46752: PPUSH
46753: CALL_OW 1
46757: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46758: LD_ADDR_VAR 0 1
46762: PUSH
46763: LD_VAR 0 1
46767: PPUSH
46768: LD_VAR 0 3
46772: PPUSH
46773: LD_VAR 0 5
46777: PPUSH
46778: CALL_OW 1
46782: ST_TO_ADDR
// result := list ;
46783: LD_ADDR_VAR 0 4
46787: PUSH
46788: LD_VAR 0 1
46792: ST_TO_ADDR
// end ;
46793: LD_VAR 0 4
46797: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46798: LD_INT 0
46800: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46801: LD_ADDR_VAR 0 5
46805: PUSH
46806: LD_VAR 0 1
46810: PPUSH
46811: CALL_OW 250
46815: PPUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 251
46825: PPUSH
46826: LD_VAR 0 2
46830: PPUSH
46831: LD_VAR 0 3
46835: PPUSH
46836: LD_VAR 0 4
46840: PPUSH
46841: CALL 47219 0 5
46845: ST_TO_ADDR
// end ;
46846: LD_VAR 0 5
46850: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46851: LD_INT 0
46853: PPUSH
46854: PPUSH
46855: PPUSH
46856: PPUSH
// if not list or not unit then
46857: LD_VAR 0 2
46861: NOT
46862: PUSH
46863: LD_VAR 0 1
46867: NOT
46868: OR
46869: IFFALSE 46873
// exit ;
46871: GO 47214
// result := [ ] ;
46873: LD_ADDR_VAR 0 5
46877: PUSH
46878: EMPTY
46879: ST_TO_ADDR
// for i in list do
46880: LD_ADDR_VAR 0 6
46884: PUSH
46885: LD_VAR 0 2
46889: PUSH
46890: FOR_IN
46891: IFFALSE 47109
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46893: LD_ADDR_VAR 0 8
46897: PUSH
46898: LD_VAR 0 1
46902: PPUSH
46903: LD_VAR 0 6
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: PPUSH
46912: LD_VAR 0 6
46916: PUSH
46917: LD_INT 2
46919: ARRAY
46920: PPUSH
46921: CALL_OW 297
46925: ST_TO_ADDR
// if not Count ( result ) then
46926: LD_VAR 0 5
46930: PPUSH
46931: CALL 43503 0 1
46935: NOT
46936: IFFALSE 46969
// begin result := Join ( result , [ i , tmp ] ) ;
46938: LD_ADDR_VAR 0 5
46942: PUSH
46943: LD_VAR 0 5
46947: PPUSH
46948: LD_VAR 0 6
46952: PUSH
46953: LD_VAR 0 8
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PPUSH
46962: CALL 79112 0 2
46966: ST_TO_ADDR
// continue ;
46967: GO 46890
// end ; if result [ result ] [ 2 ] <= tmp then
46969: LD_VAR 0 5
46973: PUSH
46974: LD_VAR 0 5
46978: ARRAY
46979: PUSH
46980: LD_INT 2
46982: ARRAY
46983: PUSH
46984: LD_VAR 0 8
46988: LESSEQUAL
46989: IFFALSE 47022
// result := Join ( result , [ i , tmp ] ) else
46991: LD_ADDR_VAR 0 5
46995: PUSH
46996: LD_VAR 0 5
47000: PPUSH
47001: LD_VAR 0 6
47005: PUSH
47006: LD_VAR 0 8
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PPUSH
47015: CALL 79112 0 2
47019: ST_TO_ADDR
47020: GO 47107
// begin for j := 1 to Count ( result ) do
47022: LD_ADDR_VAR 0 7
47026: PUSH
47027: DOUBLE
47028: LD_INT 1
47030: DEC
47031: ST_TO_ADDR
47032: LD_VAR 0 5
47036: PPUSH
47037: CALL 43503 0 1
47041: PUSH
47042: FOR_TO
47043: IFFALSE 47105
// begin if tmp < result [ j ] [ 2 ] then
47045: LD_VAR 0 8
47049: PUSH
47050: LD_VAR 0 5
47054: PUSH
47055: LD_VAR 0 7
47059: ARRAY
47060: PUSH
47061: LD_INT 2
47063: ARRAY
47064: LESS
47065: IFFALSE 47103
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47067: LD_ADDR_VAR 0 5
47071: PUSH
47072: LD_VAR 0 5
47076: PPUSH
47077: LD_VAR 0 7
47081: PPUSH
47082: LD_VAR 0 6
47086: PUSH
47087: LD_VAR 0 8
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PPUSH
47096: CALL_OW 2
47100: ST_TO_ADDR
// break ;
47101: GO 47105
// end ; end ;
47103: GO 47042
47105: POP
47106: POP
// end ; end ;
47107: GO 46890
47109: POP
47110: POP
// if result and not asc then
47111: LD_VAR 0 5
47115: PUSH
47116: LD_VAR 0 3
47120: NOT
47121: AND
47122: IFFALSE 47139
// result := ReverseArray ( result ) ;
47124: LD_ADDR_VAR 0 5
47128: PUSH
47129: LD_VAR 0 5
47133: PPUSH
47134: CALL 74379 0 1
47138: ST_TO_ADDR
// tmp := [ ] ;
47139: LD_ADDR_VAR 0 8
47143: PUSH
47144: EMPTY
47145: ST_TO_ADDR
// if mode then
47146: LD_VAR 0 4
47150: IFFALSE 47214
// begin for i := 1 to result do
47152: LD_ADDR_VAR 0 6
47156: PUSH
47157: DOUBLE
47158: LD_INT 1
47160: DEC
47161: ST_TO_ADDR
47162: LD_VAR 0 5
47166: PUSH
47167: FOR_TO
47168: IFFALSE 47202
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47170: LD_ADDR_VAR 0 8
47174: PUSH
47175: LD_VAR 0 8
47179: PPUSH
47180: LD_VAR 0 5
47184: PUSH
47185: LD_VAR 0 6
47189: ARRAY
47190: PUSH
47191: LD_INT 1
47193: ARRAY
47194: PPUSH
47195: CALL 79112 0 2
47199: ST_TO_ADDR
47200: GO 47167
47202: POP
47203: POP
// result := tmp ;
47204: LD_ADDR_VAR 0 5
47208: PUSH
47209: LD_VAR 0 8
47213: ST_TO_ADDR
// end ; end ;
47214: LD_VAR 0 5
47218: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47219: LD_INT 0
47221: PPUSH
47222: PPUSH
47223: PPUSH
47224: PPUSH
// if not list then
47225: LD_VAR 0 3
47229: NOT
47230: IFFALSE 47234
// exit ;
47232: GO 47622
// result := [ ] ;
47234: LD_ADDR_VAR 0 6
47238: PUSH
47239: EMPTY
47240: ST_TO_ADDR
// for i in list do
47241: LD_ADDR_VAR 0 7
47245: PUSH
47246: LD_VAR 0 3
47250: PUSH
47251: FOR_IN
47252: IFFALSE 47454
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47254: LD_ADDR_VAR 0 9
47258: PUSH
47259: LD_VAR 0 7
47263: PPUSH
47264: LD_VAR 0 1
47268: PPUSH
47269: LD_VAR 0 2
47273: PPUSH
47274: CALL_OW 297
47278: ST_TO_ADDR
// if not result then
47279: LD_VAR 0 6
47283: NOT
47284: IFFALSE 47310
// result := [ [ i , tmp ] ] else
47286: LD_ADDR_VAR 0 6
47290: PUSH
47291: LD_VAR 0 7
47295: PUSH
47296: LD_VAR 0 9
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: ST_TO_ADDR
47308: GO 47452
// begin if result [ result ] [ 2 ] <= tmp then
47310: LD_VAR 0 6
47314: PUSH
47315: LD_VAR 0 6
47319: ARRAY
47320: PUSH
47321: LD_INT 2
47323: ARRAY
47324: PUSH
47325: LD_VAR 0 9
47329: LESSEQUAL
47330: IFFALSE 47372
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47332: LD_ADDR_VAR 0 6
47336: PUSH
47337: LD_VAR 0 6
47341: PPUSH
47342: LD_VAR 0 6
47346: PUSH
47347: LD_INT 1
47349: PLUS
47350: PPUSH
47351: LD_VAR 0 7
47355: PUSH
47356: LD_VAR 0 9
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PPUSH
47365: CALL_OW 2
47369: ST_TO_ADDR
47370: GO 47452
// for j := 1 to result do
47372: LD_ADDR_VAR 0 8
47376: PUSH
47377: DOUBLE
47378: LD_INT 1
47380: DEC
47381: ST_TO_ADDR
47382: LD_VAR 0 6
47386: PUSH
47387: FOR_TO
47388: IFFALSE 47450
// begin if tmp < result [ j ] [ 2 ] then
47390: LD_VAR 0 9
47394: PUSH
47395: LD_VAR 0 6
47399: PUSH
47400: LD_VAR 0 8
47404: ARRAY
47405: PUSH
47406: LD_INT 2
47408: ARRAY
47409: LESS
47410: IFFALSE 47448
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47412: LD_ADDR_VAR 0 6
47416: PUSH
47417: LD_VAR 0 6
47421: PPUSH
47422: LD_VAR 0 8
47426: PPUSH
47427: LD_VAR 0 7
47431: PUSH
47432: LD_VAR 0 9
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PPUSH
47441: CALL_OW 2
47445: ST_TO_ADDR
// break ;
47446: GO 47450
// end ; end ;
47448: GO 47387
47450: POP
47451: POP
// end ; end ;
47452: GO 47251
47454: POP
47455: POP
// if result and not asc then
47456: LD_VAR 0 6
47460: PUSH
47461: LD_VAR 0 4
47465: NOT
47466: AND
47467: IFFALSE 47542
// begin tmp := result ;
47469: LD_ADDR_VAR 0 9
47473: PUSH
47474: LD_VAR 0 6
47478: ST_TO_ADDR
// for i = tmp downto 1 do
47479: LD_ADDR_VAR 0 7
47483: PUSH
47484: DOUBLE
47485: LD_VAR 0 9
47489: INC
47490: ST_TO_ADDR
47491: LD_INT 1
47493: PUSH
47494: FOR_DOWNTO
47495: IFFALSE 47540
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47497: LD_ADDR_VAR 0 6
47501: PUSH
47502: LD_VAR 0 6
47506: PPUSH
47507: LD_VAR 0 9
47511: PUSH
47512: LD_VAR 0 7
47516: MINUS
47517: PUSH
47518: LD_INT 1
47520: PLUS
47521: PPUSH
47522: LD_VAR 0 9
47526: PUSH
47527: LD_VAR 0 7
47531: ARRAY
47532: PPUSH
47533: CALL_OW 1
47537: ST_TO_ADDR
47538: GO 47494
47540: POP
47541: POP
// end ; tmp := [ ] ;
47542: LD_ADDR_VAR 0 9
47546: PUSH
47547: EMPTY
47548: ST_TO_ADDR
// if mode then
47549: LD_VAR 0 5
47553: IFFALSE 47622
// begin for i = 1 to result do
47555: LD_ADDR_VAR 0 7
47559: PUSH
47560: DOUBLE
47561: LD_INT 1
47563: DEC
47564: ST_TO_ADDR
47565: LD_VAR 0 6
47569: PUSH
47570: FOR_TO
47571: IFFALSE 47610
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47573: LD_ADDR_VAR 0 9
47577: PUSH
47578: LD_VAR 0 9
47582: PPUSH
47583: LD_VAR 0 7
47587: PPUSH
47588: LD_VAR 0 6
47592: PUSH
47593: LD_VAR 0 7
47597: ARRAY
47598: PUSH
47599: LD_INT 1
47601: ARRAY
47602: PPUSH
47603: CALL_OW 1
47607: ST_TO_ADDR
47608: GO 47570
47610: POP
47611: POP
// result := tmp ;
47612: LD_ADDR_VAR 0 6
47616: PUSH
47617: LD_VAR 0 9
47621: ST_TO_ADDR
// end ; end ;
47622: LD_VAR 0 6
47626: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47627: LD_INT 0
47629: PPUSH
47630: PPUSH
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47635: LD_ADDR_VAR 0 5
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: ST_TO_ADDR
// if not x or not y then
47657: LD_VAR 0 2
47661: NOT
47662: PUSH
47663: LD_VAR 0 3
47667: NOT
47668: OR
47669: IFFALSE 47673
// exit ;
47671: GO 49323
// if not range then
47673: LD_VAR 0 4
47677: NOT
47678: IFFALSE 47688
// range := 10 ;
47680: LD_ADDR_VAR 0 4
47684: PUSH
47685: LD_INT 10
47687: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47688: LD_ADDR_VAR 0 8
47692: PUSH
47693: LD_INT 81
47695: PUSH
47696: LD_VAR 0 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 92
47707: PUSH
47708: LD_VAR 0 2
47712: PUSH
47713: LD_VAR 0 3
47717: PUSH
47718: LD_VAR 0 4
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 3
47731: PUSH
47732: LD_INT 21
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: PPUSH
47751: CALL_OW 69
47755: ST_TO_ADDR
// if not tmp then
47756: LD_VAR 0 8
47760: NOT
47761: IFFALSE 47765
// exit ;
47763: GO 49323
// for i in tmp do
47765: LD_ADDR_VAR 0 6
47769: PUSH
47770: LD_VAR 0 8
47774: PUSH
47775: FOR_IN
47776: IFFALSE 49298
// begin points := [ 0 , 0 , 0 ] ;
47778: LD_ADDR_VAR 0 9
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// bpoints := 1 ;
47797: LD_ADDR_VAR 0 10
47801: PUSH
47802: LD_INT 1
47804: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47805: LD_VAR 0 6
47809: PPUSH
47810: CALL_OW 247
47814: PUSH
47815: LD_INT 1
47817: DOUBLE
47818: EQUAL
47819: IFTRUE 47823
47821: GO 48401
47823: POP
// begin if GetClass ( i ) = 1 then
47824: LD_VAR 0 6
47828: PPUSH
47829: CALL_OW 257
47833: PUSH
47834: LD_INT 1
47836: EQUAL
47837: IFFALSE 47858
// points := [ 10 , 5 , 3 ] ;
47839: LD_ADDR_VAR 0 9
47843: PUSH
47844: LD_INT 10
47846: PUSH
47847: LD_INT 5
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47858: LD_VAR 0 6
47862: PPUSH
47863: CALL_OW 257
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: LD_INT 4
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: IN
47882: IFFALSE 47903
// points := [ 3 , 2 , 1 ] ;
47884: LD_ADDR_VAR 0 9
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47903: LD_VAR 0 6
47907: PPUSH
47908: CALL_OW 257
47912: PUSH
47913: LD_INT 5
47915: EQUAL
47916: IFFALSE 47937
// points := [ 130 , 5 , 2 ] ;
47918: LD_ADDR_VAR 0 9
47922: PUSH
47923: LD_INT 130
47925: PUSH
47926: LD_INT 5
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47937: LD_VAR 0 6
47941: PPUSH
47942: CALL_OW 257
47946: PUSH
47947: LD_INT 8
47949: EQUAL
47950: IFFALSE 47971
// points := [ 35 , 35 , 30 ] ;
47952: LD_ADDR_VAR 0 9
47956: PUSH
47957: LD_INT 35
47959: PUSH
47960: LD_INT 35
47962: PUSH
47963: LD_INT 30
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47971: LD_VAR 0 6
47975: PPUSH
47976: CALL_OW 257
47980: PUSH
47981: LD_INT 9
47983: EQUAL
47984: IFFALSE 48005
// points := [ 20 , 55 , 40 ] ;
47986: LD_ADDR_VAR 0 9
47990: PUSH
47991: LD_INT 20
47993: PUSH
47994: LD_INT 55
47996: PUSH
47997: LD_INT 40
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48005: LD_VAR 0 6
48009: PPUSH
48010: CALL_OW 257
48014: PUSH
48015: LD_INT 12
48017: PUSH
48018: LD_INT 16
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: IN
48025: IFFALSE 48046
// points := [ 5 , 3 , 2 ] ;
48027: LD_ADDR_VAR 0 9
48031: PUSH
48032: LD_INT 5
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48046: LD_VAR 0 6
48050: PPUSH
48051: CALL_OW 257
48055: PUSH
48056: LD_INT 17
48058: EQUAL
48059: IFFALSE 48080
// points := [ 100 , 50 , 75 ] ;
48061: LD_ADDR_VAR 0 9
48065: PUSH
48066: LD_INT 100
48068: PUSH
48069: LD_INT 50
48071: PUSH
48072: LD_INT 75
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48080: LD_VAR 0 6
48084: PPUSH
48085: CALL_OW 257
48089: PUSH
48090: LD_INT 15
48092: EQUAL
48093: IFFALSE 48114
// points := [ 10 , 5 , 3 ] ;
48095: LD_ADDR_VAR 0 9
48099: PUSH
48100: LD_INT 10
48102: PUSH
48103: LD_INT 5
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: LIST
48113: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48114: LD_VAR 0 6
48118: PPUSH
48119: CALL_OW 257
48123: PUSH
48124: LD_INT 14
48126: EQUAL
48127: IFFALSE 48148
// points := [ 10 , 0 , 0 ] ;
48129: LD_ADDR_VAR 0 9
48133: PUSH
48134: LD_INT 10
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48148: LD_VAR 0 6
48152: PPUSH
48153: CALL_OW 257
48157: PUSH
48158: LD_INT 11
48160: EQUAL
48161: IFFALSE 48182
// points := [ 30 , 10 , 5 ] ;
48163: LD_ADDR_VAR 0 9
48167: PUSH
48168: LD_INT 30
48170: PUSH
48171: LD_INT 10
48173: PUSH
48174: LD_INT 5
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48182: LD_VAR 0 1
48186: PPUSH
48187: LD_INT 5
48189: PPUSH
48190: CALL_OW 321
48194: PUSH
48195: LD_INT 2
48197: EQUAL
48198: IFFALSE 48215
// bpoints := bpoints * 1.8 ;
48200: LD_ADDR_VAR 0 10
48204: PUSH
48205: LD_VAR 0 10
48209: PUSH
48210: LD_REAL  1.80000000000000E+0000
48213: MUL
48214: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48215: LD_VAR 0 6
48219: PPUSH
48220: CALL_OW 257
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 4
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: IN
48243: PUSH
48244: LD_VAR 0 1
48248: PPUSH
48249: LD_INT 51
48251: PPUSH
48252: CALL_OW 321
48256: PUSH
48257: LD_INT 2
48259: EQUAL
48260: AND
48261: IFFALSE 48278
// bpoints := bpoints * 1.2 ;
48263: LD_ADDR_VAR 0 10
48267: PUSH
48268: LD_VAR 0 10
48272: PUSH
48273: LD_REAL  1.20000000000000E+0000
48276: MUL
48277: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48278: LD_VAR 0 6
48282: PPUSH
48283: CALL_OW 257
48287: PUSH
48288: LD_INT 5
48290: PUSH
48291: LD_INT 7
48293: PUSH
48294: LD_INT 9
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: IN
48302: PUSH
48303: LD_VAR 0 1
48307: PPUSH
48308: LD_INT 52
48310: PPUSH
48311: CALL_OW 321
48315: PUSH
48316: LD_INT 2
48318: EQUAL
48319: AND
48320: IFFALSE 48337
// bpoints := bpoints * 1.5 ;
48322: LD_ADDR_VAR 0 10
48326: PUSH
48327: LD_VAR 0 10
48331: PUSH
48332: LD_REAL  1.50000000000000E+0000
48335: MUL
48336: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48337: LD_VAR 0 1
48341: PPUSH
48342: LD_INT 66
48344: PPUSH
48345: CALL_OW 321
48349: PUSH
48350: LD_INT 2
48352: EQUAL
48353: IFFALSE 48370
// bpoints := bpoints * 1.1 ;
48355: LD_ADDR_VAR 0 10
48359: PUSH
48360: LD_VAR 0 10
48364: PUSH
48365: LD_REAL  1.10000000000000E+0000
48368: MUL
48369: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48370: LD_ADDR_VAR 0 10
48374: PUSH
48375: LD_VAR 0 10
48379: PUSH
48380: LD_VAR 0 6
48384: PPUSH
48385: LD_INT 1
48387: PPUSH
48388: CALL_OW 259
48392: PUSH
48393: LD_REAL  1.15000000000000E+0000
48396: MUL
48397: MUL
48398: ST_TO_ADDR
// end ; unit_vehicle :
48399: GO 49227
48401: LD_INT 2
48403: DOUBLE
48404: EQUAL
48405: IFTRUE 48409
48407: GO 49215
48409: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48410: LD_VAR 0 6
48414: PPUSH
48415: CALL_OW 264
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 42
48425: PUSH
48426: LD_INT 24
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: IN
48434: IFFALSE 48455
// points := [ 25 , 5 , 3 ] ;
48436: LD_ADDR_VAR 0 9
48440: PUSH
48441: LD_INT 25
48443: PUSH
48444: LD_INT 5
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48455: LD_VAR 0 6
48459: PPUSH
48460: CALL_OW 264
48464: PUSH
48465: LD_INT 4
48467: PUSH
48468: LD_INT 43
48470: PUSH
48471: LD_INT 25
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: IN
48479: IFFALSE 48500
// points := [ 40 , 15 , 5 ] ;
48481: LD_ADDR_VAR 0 9
48485: PUSH
48486: LD_INT 40
48488: PUSH
48489: LD_INT 15
48491: PUSH
48492: LD_INT 5
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48500: LD_VAR 0 6
48504: PPUSH
48505: CALL_OW 264
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: LD_INT 23
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: IN
48520: IFFALSE 48541
// points := [ 7 , 25 , 8 ] ;
48522: LD_ADDR_VAR 0 9
48526: PUSH
48527: LD_INT 7
48529: PUSH
48530: LD_INT 25
48532: PUSH
48533: LD_INT 8
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48541: LD_VAR 0 6
48545: PPUSH
48546: CALL_OW 264
48550: PUSH
48551: LD_INT 5
48553: PUSH
48554: LD_INT 27
48556: PUSH
48557: LD_INT 44
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: IN
48565: IFFALSE 48586
// points := [ 14 , 50 , 16 ] ;
48567: LD_ADDR_VAR 0 9
48571: PUSH
48572: LD_INT 14
48574: PUSH
48575: LD_INT 50
48577: PUSH
48578: LD_INT 16
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48586: LD_VAR 0 6
48590: PPUSH
48591: CALL_OW 264
48595: PUSH
48596: LD_INT 6
48598: PUSH
48599: LD_INT 46
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: IN
48606: IFFALSE 48627
// points := [ 32 , 120 , 70 ] ;
48608: LD_ADDR_VAR 0 9
48612: PUSH
48613: LD_INT 32
48615: PUSH
48616: LD_INT 120
48618: PUSH
48619: LD_INT 70
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48627: LD_VAR 0 6
48631: PPUSH
48632: CALL_OW 264
48636: PUSH
48637: LD_INT 7
48639: PUSH
48640: LD_INT 28
48642: PUSH
48643: LD_INT 45
48645: PUSH
48646: LD_INT 92
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: IN
48655: IFFALSE 48676
// points := [ 35 , 20 , 45 ] ;
48657: LD_ADDR_VAR 0 9
48661: PUSH
48662: LD_INT 35
48664: PUSH
48665: LD_INT 20
48667: PUSH
48668: LD_INT 45
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48676: LD_VAR 0 6
48680: PPUSH
48681: CALL_OW 264
48685: PUSH
48686: LD_INT 47
48688: PUSH
48689: EMPTY
48690: LIST
48691: IN
48692: IFFALSE 48713
// points := [ 67 , 45 , 75 ] ;
48694: LD_ADDR_VAR 0 9
48698: PUSH
48699: LD_INT 67
48701: PUSH
48702: LD_INT 45
48704: PUSH
48705: LD_INT 75
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48713: LD_VAR 0 6
48717: PPUSH
48718: CALL_OW 264
48722: PUSH
48723: LD_INT 26
48725: PUSH
48726: EMPTY
48727: LIST
48728: IN
48729: IFFALSE 48750
// points := [ 120 , 30 , 80 ] ;
48731: LD_ADDR_VAR 0 9
48735: PUSH
48736: LD_INT 120
48738: PUSH
48739: LD_INT 30
48741: PUSH
48742: LD_INT 80
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48750: LD_VAR 0 6
48754: PPUSH
48755: CALL_OW 264
48759: PUSH
48760: LD_INT 22
48762: PUSH
48763: EMPTY
48764: LIST
48765: IN
48766: IFFALSE 48787
// points := [ 40 , 1 , 1 ] ;
48768: LD_ADDR_VAR 0 9
48772: PUSH
48773: LD_INT 40
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48787: LD_VAR 0 6
48791: PPUSH
48792: CALL_OW 264
48796: PUSH
48797: LD_INT 29
48799: PUSH
48800: EMPTY
48801: LIST
48802: IN
48803: IFFALSE 48824
// points := [ 70 , 200 , 400 ] ;
48805: LD_ADDR_VAR 0 9
48809: PUSH
48810: LD_INT 70
48812: PUSH
48813: LD_INT 200
48815: PUSH
48816: LD_INT 400
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48824: LD_VAR 0 6
48828: PPUSH
48829: CALL_OW 264
48833: PUSH
48834: LD_INT 14
48836: PUSH
48837: LD_INT 53
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: IN
48844: IFFALSE 48865
// points := [ 40 , 10 , 20 ] ;
48846: LD_ADDR_VAR 0 9
48850: PUSH
48851: LD_INT 40
48853: PUSH
48854: LD_INT 10
48856: PUSH
48857: LD_INT 20
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48865: LD_VAR 0 6
48869: PPUSH
48870: CALL_OW 264
48874: PUSH
48875: LD_INT 9
48877: PUSH
48878: EMPTY
48879: LIST
48880: IN
48881: IFFALSE 48902
// points := [ 5 , 70 , 20 ] ;
48883: LD_ADDR_VAR 0 9
48887: PUSH
48888: LD_INT 5
48890: PUSH
48891: LD_INT 70
48893: PUSH
48894: LD_INT 20
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48902: LD_VAR 0 6
48906: PPUSH
48907: CALL_OW 264
48911: PUSH
48912: LD_INT 10
48914: PUSH
48915: EMPTY
48916: LIST
48917: IN
48918: IFFALSE 48939
// points := [ 35 , 110 , 70 ] ;
48920: LD_ADDR_VAR 0 9
48924: PUSH
48925: LD_INT 35
48927: PUSH
48928: LD_INT 110
48930: PUSH
48931: LD_INT 70
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: LIST
48938: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48939: LD_VAR 0 6
48943: PPUSH
48944: CALL_OW 265
48948: PUSH
48949: LD_INT 25
48951: EQUAL
48952: IFFALSE 48973
// points := [ 80 , 65 , 100 ] ;
48954: LD_ADDR_VAR 0 9
48958: PUSH
48959: LD_INT 80
48961: PUSH
48962: LD_INT 65
48964: PUSH
48965: LD_INT 100
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48973: LD_VAR 0 6
48977: PPUSH
48978: CALL_OW 263
48982: PUSH
48983: LD_INT 1
48985: EQUAL
48986: IFFALSE 49021
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48988: LD_ADDR_VAR 0 10
48992: PUSH
48993: LD_VAR 0 10
48997: PUSH
48998: LD_VAR 0 6
49002: PPUSH
49003: CALL_OW 311
49007: PPUSH
49008: LD_INT 3
49010: PPUSH
49011: CALL_OW 259
49015: PUSH
49016: LD_INT 4
49018: MUL
49019: MUL
49020: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49021: LD_VAR 0 6
49025: PPUSH
49026: CALL_OW 263
49030: PUSH
49031: LD_INT 2
49033: EQUAL
49034: IFFALSE 49085
// begin j := IsControledBy ( i ) ;
49036: LD_ADDR_VAR 0 7
49040: PUSH
49041: LD_VAR 0 6
49045: PPUSH
49046: CALL_OW 312
49050: ST_TO_ADDR
// if j then
49051: LD_VAR 0 7
49055: IFFALSE 49085
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49057: LD_ADDR_VAR 0 10
49061: PUSH
49062: LD_VAR 0 10
49066: PUSH
49067: LD_VAR 0 7
49071: PPUSH
49072: LD_INT 3
49074: PPUSH
49075: CALL_OW 259
49079: PUSH
49080: LD_INT 3
49082: MUL
49083: MUL
49084: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49085: LD_VAR 0 6
49089: PPUSH
49090: CALL_OW 264
49094: PUSH
49095: LD_INT 5
49097: PUSH
49098: LD_INT 6
49100: PUSH
49101: LD_INT 46
49103: PUSH
49104: LD_INT 44
49106: PUSH
49107: LD_INT 47
49109: PUSH
49110: LD_INT 45
49112: PUSH
49113: LD_INT 28
49115: PUSH
49116: LD_INT 7
49118: PUSH
49119: LD_INT 27
49121: PUSH
49122: LD_INT 29
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: IN
49137: PUSH
49138: LD_VAR 0 1
49142: PPUSH
49143: LD_INT 52
49145: PPUSH
49146: CALL_OW 321
49150: PUSH
49151: LD_INT 2
49153: EQUAL
49154: AND
49155: IFFALSE 49172
// bpoints := bpoints * 1.2 ;
49157: LD_ADDR_VAR 0 10
49161: PUSH
49162: LD_VAR 0 10
49166: PUSH
49167: LD_REAL  1.20000000000000E+0000
49170: MUL
49171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49172: LD_VAR 0 6
49176: PPUSH
49177: CALL_OW 264
49181: PUSH
49182: LD_INT 6
49184: PUSH
49185: LD_INT 46
49187: PUSH
49188: LD_INT 47
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: LIST
49195: IN
49196: IFFALSE 49213
// bpoints := bpoints * 1.2 ;
49198: LD_ADDR_VAR 0 10
49202: PUSH
49203: LD_VAR 0 10
49207: PUSH
49208: LD_REAL  1.20000000000000E+0000
49211: MUL
49212: ST_TO_ADDR
// end ; unit_building :
49213: GO 49227
49215: LD_INT 3
49217: DOUBLE
49218: EQUAL
49219: IFTRUE 49223
49221: GO 49226
49223: POP
// ; end ;
49224: GO 49227
49226: POP
// for j = 1 to 3 do
49227: LD_ADDR_VAR 0 7
49231: PUSH
49232: DOUBLE
49233: LD_INT 1
49235: DEC
49236: ST_TO_ADDR
49237: LD_INT 3
49239: PUSH
49240: FOR_TO
49241: IFFALSE 49294
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49243: LD_ADDR_VAR 0 5
49247: PUSH
49248: LD_VAR 0 5
49252: PPUSH
49253: LD_VAR 0 7
49257: PPUSH
49258: LD_VAR 0 5
49262: PUSH
49263: LD_VAR 0 7
49267: ARRAY
49268: PUSH
49269: LD_VAR 0 9
49273: PUSH
49274: LD_VAR 0 7
49278: ARRAY
49279: PUSH
49280: LD_VAR 0 10
49284: MUL
49285: PLUS
49286: PPUSH
49287: CALL_OW 1
49291: ST_TO_ADDR
49292: GO 49240
49294: POP
49295: POP
// end ;
49296: GO 47775
49298: POP
49299: POP
// result := Replace ( result , 4 , tmp ) ;
49300: LD_ADDR_VAR 0 5
49304: PUSH
49305: LD_VAR 0 5
49309: PPUSH
49310: LD_INT 4
49312: PPUSH
49313: LD_VAR 0 8
49317: PPUSH
49318: CALL_OW 1
49322: ST_TO_ADDR
// end ;
49323: LD_VAR 0 5
49327: RET
// export function DangerAtRange ( unit , range ) ; begin
49328: LD_INT 0
49330: PPUSH
// if not unit then
49331: LD_VAR 0 1
49335: NOT
49336: IFFALSE 49340
// exit ;
49338: GO 49385
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49340: LD_ADDR_VAR 0 3
49344: PUSH
49345: LD_VAR 0 1
49349: PPUSH
49350: CALL_OW 255
49354: PPUSH
49355: LD_VAR 0 1
49359: PPUSH
49360: CALL_OW 250
49364: PPUSH
49365: LD_VAR 0 1
49369: PPUSH
49370: CALL_OW 251
49374: PPUSH
49375: LD_VAR 0 2
49379: PPUSH
49380: CALL 47627 0 4
49384: ST_TO_ADDR
// end ;
49385: LD_VAR 0 3
49389: RET
// export function DangerInArea ( side , area ) ; begin
49390: LD_INT 0
49392: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49393: LD_ADDR_VAR 0 3
49397: PUSH
49398: LD_VAR 0 2
49402: PPUSH
49403: LD_INT 81
49405: PUSH
49406: LD_VAR 0 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PPUSH
49415: CALL_OW 70
49419: ST_TO_ADDR
// end ;
49420: LD_VAR 0 3
49424: RET
// export function IsExtension ( b ) ; begin
49425: LD_INT 0
49427: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49428: LD_ADDR_VAR 0 2
49432: PUSH
49433: LD_VAR 0 1
49437: PUSH
49438: LD_INT 23
49440: PUSH
49441: LD_INT 20
49443: PUSH
49444: LD_INT 22
49446: PUSH
49447: LD_INT 17
49449: PUSH
49450: LD_INT 24
49452: PUSH
49453: LD_INT 21
49455: PUSH
49456: LD_INT 19
49458: PUSH
49459: LD_INT 16
49461: PUSH
49462: LD_INT 25
49464: PUSH
49465: LD_INT 18
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: IN
49480: ST_TO_ADDR
// end ;
49481: LD_VAR 0 2
49485: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49486: LD_INT 0
49488: PPUSH
49489: PPUSH
49490: PPUSH
// result := [ ] ;
49491: LD_ADDR_VAR 0 4
49495: PUSH
49496: EMPTY
49497: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49498: LD_ADDR_VAR 0 5
49502: PUSH
49503: LD_VAR 0 2
49507: PPUSH
49508: LD_INT 21
49510: PUSH
49511: LD_INT 3
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PPUSH
49518: CALL_OW 70
49522: ST_TO_ADDR
// if not tmp then
49523: LD_VAR 0 5
49527: NOT
49528: IFFALSE 49532
// exit ;
49530: GO 49596
// if checkLink then
49532: LD_VAR 0 3
49536: IFFALSE 49586
// begin for i in tmp do
49538: LD_ADDR_VAR 0 6
49542: PUSH
49543: LD_VAR 0 5
49547: PUSH
49548: FOR_IN
49549: IFFALSE 49584
// if GetBase ( i ) <> base then
49551: LD_VAR 0 6
49555: PPUSH
49556: CALL_OW 274
49560: PUSH
49561: LD_VAR 0 1
49565: NONEQUAL
49566: IFFALSE 49582
// ComLinkToBase ( base , i ) ;
49568: LD_VAR 0 1
49572: PPUSH
49573: LD_VAR 0 6
49577: PPUSH
49578: CALL_OW 169
49582: GO 49548
49584: POP
49585: POP
// end ; result := tmp ;
49586: LD_ADDR_VAR 0 4
49590: PUSH
49591: LD_VAR 0 5
49595: ST_TO_ADDR
// end ;
49596: LD_VAR 0 4
49600: RET
// export function ComComplete ( units , b ) ; var i ; begin
49601: LD_INT 0
49603: PPUSH
49604: PPUSH
// if not units then
49605: LD_VAR 0 1
49609: NOT
49610: IFFALSE 49614
// exit ;
49612: GO 49704
// for i in units do
49614: LD_ADDR_VAR 0 4
49618: PUSH
49619: LD_VAR 0 1
49623: PUSH
49624: FOR_IN
49625: IFFALSE 49702
// if BuildingStatus ( b ) = bs_build then
49627: LD_VAR 0 2
49631: PPUSH
49632: CALL_OW 461
49636: PUSH
49637: LD_INT 1
49639: EQUAL
49640: IFFALSE 49700
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49642: LD_VAR 0 4
49646: PPUSH
49647: LD_STRING h
49649: PUSH
49650: LD_VAR 0 2
49654: PPUSH
49655: CALL_OW 250
49659: PUSH
49660: LD_VAR 0 2
49664: PPUSH
49665: CALL_OW 251
49669: PUSH
49670: LD_VAR 0 2
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: PPUSH
49696: CALL_OW 446
49700: GO 49624
49702: POP
49703: POP
// end ;
49704: LD_VAR 0 3
49708: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49709: LD_INT 0
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49717: LD_VAR 0 1
49721: NOT
49722: PUSH
49723: LD_VAR 0 1
49727: PPUSH
49728: CALL_OW 263
49732: PUSH
49733: LD_INT 2
49735: NONEQUAL
49736: OR
49737: IFFALSE 49741
// exit ;
49739: GO 50057
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49741: LD_ADDR_VAR 0 6
49745: PUSH
49746: LD_INT 22
49748: PUSH
49749: LD_VAR 0 1
49753: PPUSH
49754: CALL_OW 255
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 30
49768: PUSH
49769: LD_INT 36
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 34
49778: PUSH
49779: LD_INT 31
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PPUSH
49795: CALL_OW 69
49799: ST_TO_ADDR
// if not tmp then
49800: LD_VAR 0 6
49804: NOT
49805: IFFALSE 49809
// exit ;
49807: GO 50057
// result := [ ] ;
49809: LD_ADDR_VAR 0 2
49813: PUSH
49814: EMPTY
49815: ST_TO_ADDR
// for i in tmp do
49816: LD_ADDR_VAR 0 3
49820: PUSH
49821: LD_VAR 0 6
49825: PUSH
49826: FOR_IN
49827: IFFALSE 49898
// begin t := UnitsInside ( i ) ;
49829: LD_ADDR_VAR 0 4
49833: PUSH
49834: LD_VAR 0 3
49838: PPUSH
49839: CALL_OW 313
49843: ST_TO_ADDR
// if t then
49844: LD_VAR 0 4
49848: IFFALSE 49896
// for j in t do
49850: LD_ADDR_VAR 0 7
49854: PUSH
49855: LD_VAR 0 4
49859: PUSH
49860: FOR_IN
49861: IFFALSE 49894
// result := Replace ( result , result + 1 , j ) ;
49863: LD_ADDR_VAR 0 2
49867: PUSH
49868: LD_VAR 0 2
49872: PPUSH
49873: LD_VAR 0 2
49877: PUSH
49878: LD_INT 1
49880: PLUS
49881: PPUSH
49882: LD_VAR 0 7
49886: PPUSH
49887: CALL_OW 1
49891: ST_TO_ADDR
49892: GO 49860
49894: POP
49895: POP
// end ;
49896: GO 49826
49898: POP
49899: POP
// if not result then
49900: LD_VAR 0 2
49904: NOT
49905: IFFALSE 49909
// exit ;
49907: GO 50057
// mech := result [ 1 ] ;
49909: LD_ADDR_VAR 0 5
49913: PUSH
49914: LD_VAR 0 2
49918: PUSH
49919: LD_INT 1
49921: ARRAY
49922: ST_TO_ADDR
// if result > 1 then
49923: LD_VAR 0 2
49927: PUSH
49928: LD_INT 1
49930: GREATER
49931: IFFALSE 50043
// begin for i = 2 to result do
49933: LD_ADDR_VAR 0 3
49937: PUSH
49938: DOUBLE
49939: LD_INT 2
49941: DEC
49942: ST_TO_ADDR
49943: LD_VAR 0 2
49947: PUSH
49948: FOR_TO
49949: IFFALSE 50041
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49951: LD_ADDR_VAR 0 4
49955: PUSH
49956: LD_VAR 0 2
49960: PUSH
49961: LD_VAR 0 3
49965: ARRAY
49966: PPUSH
49967: LD_INT 3
49969: PPUSH
49970: CALL_OW 259
49974: PUSH
49975: LD_VAR 0 2
49979: PUSH
49980: LD_VAR 0 3
49984: ARRAY
49985: PPUSH
49986: CALL_OW 432
49990: MINUS
49991: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49992: LD_VAR 0 4
49996: PUSH
49997: LD_VAR 0 5
50001: PPUSH
50002: LD_INT 3
50004: PPUSH
50005: CALL_OW 259
50009: PUSH
50010: LD_VAR 0 5
50014: PPUSH
50015: CALL_OW 432
50019: MINUS
50020: GREATEREQUAL
50021: IFFALSE 50039
// mech := result [ i ] ;
50023: LD_ADDR_VAR 0 5
50027: PUSH
50028: LD_VAR 0 2
50032: PUSH
50033: LD_VAR 0 3
50037: ARRAY
50038: ST_TO_ADDR
// end ;
50039: GO 49948
50041: POP
50042: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50043: LD_VAR 0 1
50047: PPUSH
50048: LD_VAR 0 5
50052: PPUSH
50053: CALL_OW 135
// end ;
50057: LD_VAR 0 2
50061: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50062: LD_INT 0
50064: PPUSH
50065: PPUSH
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
// result := [ ] ;
50077: LD_ADDR_VAR 0 7
50081: PUSH
50082: EMPTY
50083: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50084: LD_VAR 0 1
50088: PPUSH
50089: CALL_OW 266
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: IN
50104: NOT
50105: IFFALSE 50109
// exit ;
50107: GO 51743
// if name then
50109: LD_VAR 0 3
50113: IFFALSE 50129
// SetBName ( base_dep , name ) ;
50115: LD_VAR 0 1
50119: PPUSH
50120: LD_VAR 0 3
50124: PPUSH
50125: CALL_OW 500
// base := GetBase ( base_dep ) ;
50129: LD_ADDR_VAR 0 15
50133: PUSH
50134: LD_VAR 0 1
50138: PPUSH
50139: CALL_OW 274
50143: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50144: LD_ADDR_VAR 0 16
50148: PUSH
50149: LD_VAR 0 1
50153: PPUSH
50154: CALL_OW 255
50158: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50159: LD_ADDR_VAR 0 17
50163: PUSH
50164: LD_VAR 0 1
50168: PPUSH
50169: CALL_OW 248
50173: ST_TO_ADDR
// if sources then
50174: LD_VAR 0 5
50178: IFFALSE 50225
// for i = 1 to 3 do
50180: LD_ADDR_VAR 0 8
50184: PUSH
50185: DOUBLE
50186: LD_INT 1
50188: DEC
50189: ST_TO_ADDR
50190: LD_INT 3
50192: PUSH
50193: FOR_TO
50194: IFFALSE 50223
// AddResourceType ( base , i , sources [ i ] ) ;
50196: LD_VAR 0 15
50200: PPUSH
50201: LD_VAR 0 8
50205: PPUSH
50206: LD_VAR 0 5
50210: PUSH
50211: LD_VAR 0 8
50215: ARRAY
50216: PPUSH
50217: CALL_OW 276
50221: GO 50193
50223: POP
50224: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50225: LD_ADDR_VAR 0 18
50229: PUSH
50230: LD_VAR 0 15
50234: PPUSH
50235: LD_VAR 0 2
50239: PPUSH
50240: LD_INT 1
50242: PPUSH
50243: CALL 49486 0 3
50247: ST_TO_ADDR
// InitHc ;
50248: CALL_OW 19
// InitUc ;
50252: CALL_OW 18
// uc_side := side ;
50256: LD_ADDR_OWVAR 20
50260: PUSH
50261: LD_VAR 0 16
50265: ST_TO_ADDR
// uc_nation := nation ;
50266: LD_ADDR_OWVAR 21
50270: PUSH
50271: LD_VAR 0 17
50275: ST_TO_ADDR
// if buildings then
50276: LD_VAR 0 18
50280: IFFALSE 51602
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50282: LD_ADDR_VAR 0 19
50286: PUSH
50287: LD_VAR 0 18
50291: PPUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 30
50297: PUSH
50298: LD_INT 29
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 30
50307: PUSH
50308: LD_INT 30
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: PPUSH
50320: CALL_OW 72
50324: ST_TO_ADDR
// if tmp then
50325: LD_VAR 0 19
50329: IFFALSE 50377
// for i in tmp do
50331: LD_ADDR_VAR 0 8
50335: PUSH
50336: LD_VAR 0 19
50340: PUSH
50341: FOR_IN
50342: IFFALSE 50375
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50344: LD_VAR 0 8
50348: PPUSH
50349: CALL_OW 250
50353: PPUSH
50354: LD_VAR 0 8
50358: PPUSH
50359: CALL_OW 251
50363: PPUSH
50364: LD_VAR 0 16
50368: PPUSH
50369: CALL_OW 441
50373: GO 50341
50375: POP
50376: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50377: LD_VAR 0 18
50381: PPUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 30
50387: PUSH
50388: LD_INT 32
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 30
50397: PUSH
50398: LD_INT 33
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: LIST
50409: PPUSH
50410: CALL_OW 72
50414: IFFALSE 50502
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50416: LD_ADDR_VAR 0 8
50420: PUSH
50421: LD_VAR 0 18
50425: PPUSH
50426: LD_INT 2
50428: PUSH
50429: LD_INT 30
50431: PUSH
50432: LD_INT 32
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 30
50441: PUSH
50442: LD_INT 33
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: PPUSH
50454: CALL_OW 72
50458: PUSH
50459: FOR_IN
50460: IFFALSE 50500
// begin if not GetBWeapon ( i ) then
50462: LD_VAR 0 8
50466: PPUSH
50467: CALL_OW 269
50471: NOT
50472: IFFALSE 50498
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50474: LD_VAR 0 8
50478: PPUSH
50479: LD_VAR 0 8
50483: PPUSH
50484: LD_VAR 0 2
50488: PPUSH
50489: CALL 51748 0 2
50493: PPUSH
50494: CALL_OW 431
// end ;
50498: GO 50459
50500: POP
50501: POP
// end ; for i = 1 to personel do
50502: LD_ADDR_VAR 0 8
50506: PUSH
50507: DOUBLE
50508: LD_INT 1
50510: DEC
50511: ST_TO_ADDR
50512: LD_VAR 0 6
50516: PUSH
50517: FOR_TO
50518: IFFALSE 51582
// begin if i > 4 then
50520: LD_VAR 0 8
50524: PUSH
50525: LD_INT 4
50527: GREATER
50528: IFFALSE 50532
// break ;
50530: GO 51582
// case i of 1 :
50532: LD_VAR 0 8
50536: PUSH
50537: LD_INT 1
50539: DOUBLE
50540: EQUAL
50541: IFTRUE 50545
50543: GO 50625
50545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50546: LD_ADDR_VAR 0 12
50550: PUSH
50551: LD_VAR 0 18
50555: PPUSH
50556: LD_INT 22
50558: PUSH
50559: LD_VAR 0 16
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 58
50570: PUSH
50571: EMPTY
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 30
50579: PUSH
50580: LD_INT 32
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 30
50589: PUSH
50590: LD_INT 4
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 30
50599: PUSH
50600: LD_INT 5
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: LIST
50617: PPUSH
50618: CALL_OW 72
50622: ST_TO_ADDR
50623: GO 50847
50625: LD_INT 2
50627: DOUBLE
50628: EQUAL
50629: IFTRUE 50633
50631: GO 50695
50633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50634: LD_ADDR_VAR 0 12
50638: PUSH
50639: LD_VAR 0 18
50643: PPUSH
50644: LD_INT 22
50646: PUSH
50647: LD_VAR 0 16
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 30
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 30
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PPUSH
50688: CALL_OW 72
50692: ST_TO_ADDR
50693: GO 50847
50695: LD_INT 3
50697: DOUBLE
50698: EQUAL
50699: IFTRUE 50703
50701: GO 50765
50703: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50704: LD_ADDR_VAR 0 12
50708: PUSH
50709: LD_VAR 0 18
50713: PPUSH
50714: LD_INT 22
50716: PUSH
50717: LD_VAR 0 16
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 30
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 30
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PPUSH
50758: CALL_OW 72
50762: ST_TO_ADDR
50763: GO 50847
50765: LD_INT 4
50767: DOUBLE
50768: EQUAL
50769: IFTRUE 50773
50771: GO 50846
50773: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50774: LD_ADDR_VAR 0 12
50778: PUSH
50779: LD_VAR 0 18
50783: PPUSH
50784: LD_INT 22
50786: PUSH
50787: LD_VAR 0 16
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 30
50801: PUSH
50802: LD_INT 6
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 30
50811: PUSH
50812: LD_INT 7
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 30
50821: PUSH
50822: LD_INT 8
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PPUSH
50839: CALL_OW 72
50843: ST_TO_ADDR
50844: GO 50847
50846: POP
// if i = 1 then
50847: LD_VAR 0 8
50851: PUSH
50852: LD_INT 1
50854: EQUAL
50855: IFFALSE 50966
// begin tmp := [ ] ;
50857: LD_ADDR_VAR 0 19
50861: PUSH
50862: EMPTY
50863: ST_TO_ADDR
// for j in f do
50864: LD_ADDR_VAR 0 9
50868: PUSH
50869: LD_VAR 0 12
50873: PUSH
50874: FOR_IN
50875: IFFALSE 50948
// if GetBType ( j ) = b_bunker then
50877: LD_VAR 0 9
50881: PPUSH
50882: CALL_OW 266
50886: PUSH
50887: LD_INT 32
50889: EQUAL
50890: IFFALSE 50917
// tmp := Insert ( tmp , 1 , j ) else
50892: LD_ADDR_VAR 0 19
50896: PUSH
50897: LD_VAR 0 19
50901: PPUSH
50902: LD_INT 1
50904: PPUSH
50905: LD_VAR 0 9
50909: PPUSH
50910: CALL_OW 2
50914: ST_TO_ADDR
50915: GO 50946
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50917: LD_ADDR_VAR 0 19
50921: PUSH
50922: LD_VAR 0 19
50926: PPUSH
50927: LD_VAR 0 19
50931: PUSH
50932: LD_INT 1
50934: PLUS
50935: PPUSH
50936: LD_VAR 0 9
50940: PPUSH
50941: CALL_OW 2
50945: ST_TO_ADDR
50946: GO 50874
50948: POP
50949: POP
// if tmp then
50950: LD_VAR 0 19
50954: IFFALSE 50966
// f := tmp ;
50956: LD_ADDR_VAR 0 12
50960: PUSH
50961: LD_VAR 0 19
50965: ST_TO_ADDR
// end ; x := personel [ i ] ;
50966: LD_ADDR_VAR 0 13
50970: PUSH
50971: LD_VAR 0 6
50975: PUSH
50976: LD_VAR 0 8
50980: ARRAY
50981: ST_TO_ADDR
// if x = - 1 then
50982: LD_VAR 0 13
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: EQUAL
50991: IFFALSE 51200
// begin for j in f do
50993: LD_ADDR_VAR 0 9
50997: PUSH
50998: LD_VAR 0 12
51002: PUSH
51003: FOR_IN
51004: IFFALSE 51196
// repeat InitHc ;
51006: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51010: LD_VAR 0 9
51014: PPUSH
51015: CALL_OW 266
51019: PUSH
51020: LD_INT 5
51022: EQUAL
51023: IFFALSE 51093
// begin if UnitsInside ( j ) < 3 then
51025: LD_VAR 0 9
51029: PPUSH
51030: CALL_OW 313
51034: PUSH
51035: LD_INT 3
51037: LESS
51038: IFFALSE 51074
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51040: LD_INT 0
51042: PPUSH
51043: LD_INT 5
51045: PUSH
51046: LD_INT 8
51048: PUSH
51049: LD_INT 9
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: PUSH
51057: LD_VAR 0 17
51061: ARRAY
51062: PPUSH
51063: LD_VAR 0 4
51067: PPUSH
51068: CALL_OW 380
51072: GO 51091
// PrepareHuman ( false , i , skill ) ;
51074: LD_INT 0
51076: PPUSH
51077: LD_VAR 0 8
51081: PPUSH
51082: LD_VAR 0 4
51086: PPUSH
51087: CALL_OW 380
// end else
51091: GO 51110
// PrepareHuman ( false , i , skill ) ;
51093: LD_INT 0
51095: PPUSH
51096: LD_VAR 0 8
51100: PPUSH
51101: LD_VAR 0 4
51105: PPUSH
51106: CALL_OW 380
// un := CreateHuman ;
51110: LD_ADDR_VAR 0 14
51114: PUSH
51115: CALL_OW 44
51119: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51120: LD_ADDR_VAR 0 7
51124: PUSH
51125: LD_VAR 0 7
51129: PPUSH
51130: LD_INT 1
51132: PPUSH
51133: LD_VAR 0 14
51137: PPUSH
51138: CALL_OW 2
51142: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51143: LD_VAR 0 14
51147: PPUSH
51148: LD_VAR 0 9
51152: PPUSH
51153: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51157: LD_VAR 0 9
51161: PPUSH
51162: CALL_OW 313
51166: PUSH
51167: LD_INT 6
51169: EQUAL
51170: PUSH
51171: LD_VAR 0 9
51175: PPUSH
51176: CALL_OW 266
51180: PUSH
51181: LD_INT 32
51183: PUSH
51184: LD_INT 31
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: IN
51191: OR
51192: IFFALSE 51006
51194: GO 51003
51196: POP
51197: POP
// end else
51198: GO 51580
// for j = 1 to x do
51200: LD_ADDR_VAR 0 9
51204: PUSH
51205: DOUBLE
51206: LD_INT 1
51208: DEC
51209: ST_TO_ADDR
51210: LD_VAR 0 13
51214: PUSH
51215: FOR_TO
51216: IFFALSE 51578
// begin InitHc ;
51218: CALL_OW 19
// if not f then
51222: LD_VAR 0 12
51226: NOT
51227: IFFALSE 51316
// begin PrepareHuman ( false , i , skill ) ;
51229: LD_INT 0
51231: PPUSH
51232: LD_VAR 0 8
51236: PPUSH
51237: LD_VAR 0 4
51241: PPUSH
51242: CALL_OW 380
// un := CreateHuman ;
51246: LD_ADDR_VAR 0 14
51250: PUSH
51251: CALL_OW 44
51255: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51256: LD_ADDR_VAR 0 7
51260: PUSH
51261: LD_VAR 0 7
51265: PPUSH
51266: LD_INT 1
51268: PPUSH
51269: LD_VAR 0 14
51273: PPUSH
51274: CALL_OW 2
51278: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51279: LD_VAR 0 14
51283: PPUSH
51284: LD_VAR 0 1
51288: PPUSH
51289: CALL_OW 250
51293: PPUSH
51294: LD_VAR 0 1
51298: PPUSH
51299: CALL_OW 251
51303: PPUSH
51304: LD_INT 10
51306: PPUSH
51307: LD_INT 0
51309: PPUSH
51310: CALL_OW 50
// continue ;
51314: GO 51215
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51316: LD_VAR 0 12
51320: PUSH
51321: LD_INT 1
51323: ARRAY
51324: PPUSH
51325: CALL_OW 313
51329: PUSH
51330: LD_VAR 0 12
51334: PUSH
51335: LD_INT 1
51337: ARRAY
51338: PPUSH
51339: CALL_OW 266
51343: PUSH
51344: LD_INT 32
51346: PUSH
51347: LD_INT 31
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: IN
51354: AND
51355: PUSH
51356: LD_VAR 0 12
51360: PUSH
51361: LD_INT 1
51363: ARRAY
51364: PPUSH
51365: CALL_OW 313
51369: PUSH
51370: LD_INT 6
51372: EQUAL
51373: OR
51374: IFFALSE 51394
// f := Delete ( f , 1 ) ;
51376: LD_ADDR_VAR 0 12
51380: PUSH
51381: LD_VAR 0 12
51385: PPUSH
51386: LD_INT 1
51388: PPUSH
51389: CALL_OW 3
51393: ST_TO_ADDR
// if not f then
51394: LD_VAR 0 12
51398: NOT
51399: IFFALSE 51417
// begin x := x + 2 ;
51401: LD_ADDR_VAR 0 13
51405: PUSH
51406: LD_VAR 0 13
51410: PUSH
51411: LD_INT 2
51413: PLUS
51414: ST_TO_ADDR
// continue ;
51415: GO 51215
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51417: LD_VAR 0 12
51421: PUSH
51422: LD_INT 1
51424: ARRAY
51425: PPUSH
51426: CALL_OW 266
51430: PUSH
51431: LD_INT 5
51433: EQUAL
51434: IFFALSE 51508
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51436: LD_VAR 0 12
51440: PUSH
51441: LD_INT 1
51443: ARRAY
51444: PPUSH
51445: CALL_OW 313
51449: PUSH
51450: LD_INT 3
51452: LESS
51453: IFFALSE 51489
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51455: LD_INT 0
51457: PPUSH
51458: LD_INT 5
51460: PUSH
51461: LD_INT 8
51463: PUSH
51464: LD_INT 9
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: PUSH
51472: LD_VAR 0 17
51476: ARRAY
51477: PPUSH
51478: LD_VAR 0 4
51482: PPUSH
51483: CALL_OW 380
51487: GO 51506
// PrepareHuman ( false , i , skill ) ;
51489: LD_INT 0
51491: PPUSH
51492: LD_VAR 0 8
51496: PPUSH
51497: LD_VAR 0 4
51501: PPUSH
51502: CALL_OW 380
// end else
51506: GO 51525
// PrepareHuman ( false , i , skill ) ;
51508: LD_INT 0
51510: PPUSH
51511: LD_VAR 0 8
51515: PPUSH
51516: LD_VAR 0 4
51520: PPUSH
51521: CALL_OW 380
// un := CreateHuman ;
51525: LD_ADDR_VAR 0 14
51529: PUSH
51530: CALL_OW 44
51534: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51535: LD_ADDR_VAR 0 7
51539: PUSH
51540: LD_VAR 0 7
51544: PPUSH
51545: LD_INT 1
51547: PPUSH
51548: LD_VAR 0 14
51552: PPUSH
51553: CALL_OW 2
51557: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51558: LD_VAR 0 14
51562: PPUSH
51563: LD_VAR 0 12
51567: PUSH
51568: LD_INT 1
51570: ARRAY
51571: PPUSH
51572: CALL_OW 52
// end ;
51576: GO 51215
51578: POP
51579: POP
// end ;
51580: GO 50517
51582: POP
51583: POP
// result := result ^ buildings ;
51584: LD_ADDR_VAR 0 7
51588: PUSH
51589: LD_VAR 0 7
51593: PUSH
51594: LD_VAR 0 18
51598: ADD
51599: ST_TO_ADDR
// end else
51600: GO 51743
// begin for i = 1 to personel do
51602: LD_ADDR_VAR 0 8
51606: PUSH
51607: DOUBLE
51608: LD_INT 1
51610: DEC
51611: ST_TO_ADDR
51612: LD_VAR 0 6
51616: PUSH
51617: FOR_TO
51618: IFFALSE 51741
// begin if i > 4 then
51620: LD_VAR 0 8
51624: PUSH
51625: LD_INT 4
51627: GREATER
51628: IFFALSE 51632
// break ;
51630: GO 51741
// x := personel [ i ] ;
51632: LD_ADDR_VAR 0 13
51636: PUSH
51637: LD_VAR 0 6
51641: PUSH
51642: LD_VAR 0 8
51646: ARRAY
51647: ST_TO_ADDR
// if x = - 1 then
51648: LD_VAR 0 13
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: EQUAL
51657: IFFALSE 51661
// continue ;
51659: GO 51617
// PrepareHuman ( false , i , skill ) ;
51661: LD_INT 0
51663: PPUSH
51664: LD_VAR 0 8
51668: PPUSH
51669: LD_VAR 0 4
51673: PPUSH
51674: CALL_OW 380
// un := CreateHuman ;
51678: LD_ADDR_VAR 0 14
51682: PUSH
51683: CALL_OW 44
51687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51688: LD_VAR 0 14
51692: PPUSH
51693: LD_VAR 0 1
51697: PPUSH
51698: CALL_OW 250
51702: PPUSH
51703: LD_VAR 0 1
51707: PPUSH
51708: CALL_OW 251
51712: PPUSH
51713: LD_INT 10
51715: PPUSH
51716: LD_INT 0
51718: PPUSH
51719: CALL_OW 50
// result := result ^ un ;
51723: LD_ADDR_VAR 0 7
51727: PUSH
51728: LD_VAR 0 7
51732: PUSH
51733: LD_VAR 0 14
51737: ADD
51738: ST_TO_ADDR
// end ;
51739: GO 51617
51741: POP
51742: POP
// end ; end ;
51743: LD_VAR 0 7
51747: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51748: LD_INT 0
51750: PPUSH
51751: PPUSH
51752: PPUSH
51753: PPUSH
51754: PPUSH
51755: PPUSH
51756: PPUSH
51757: PPUSH
51758: PPUSH
51759: PPUSH
51760: PPUSH
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
// result := false ;
51766: LD_ADDR_VAR 0 3
51770: PUSH
51771: LD_INT 0
51773: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51774: LD_VAR 0 1
51778: NOT
51779: PUSH
51780: LD_VAR 0 1
51784: PPUSH
51785: CALL_OW 266
51789: PUSH
51790: LD_INT 32
51792: PUSH
51793: LD_INT 33
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: IN
51800: NOT
51801: OR
51802: IFFALSE 51806
// exit ;
51804: GO 52915
// nat := GetNation ( tower ) ;
51806: LD_ADDR_VAR 0 12
51810: PUSH
51811: LD_VAR 0 1
51815: PPUSH
51816: CALL_OW 248
51820: ST_TO_ADDR
// side := GetSide ( tower ) ;
51821: LD_ADDR_VAR 0 16
51825: PUSH
51826: LD_VAR 0 1
51830: PPUSH
51831: CALL_OW 255
51835: ST_TO_ADDR
// x := GetX ( tower ) ;
51836: LD_ADDR_VAR 0 10
51840: PUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 250
51850: ST_TO_ADDR
// y := GetY ( tower ) ;
51851: LD_ADDR_VAR 0 11
51855: PUSH
51856: LD_VAR 0 1
51860: PPUSH
51861: CALL_OW 251
51865: ST_TO_ADDR
// if not x or not y then
51866: LD_VAR 0 10
51870: NOT
51871: PUSH
51872: LD_VAR 0 11
51876: NOT
51877: OR
51878: IFFALSE 51882
// exit ;
51880: GO 52915
// weapon := 0 ;
51882: LD_ADDR_VAR 0 18
51886: PUSH
51887: LD_INT 0
51889: ST_TO_ADDR
// fac_list := [ ] ;
51890: LD_ADDR_VAR 0 17
51894: PUSH
51895: EMPTY
51896: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51897: LD_ADDR_VAR 0 6
51901: PUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: CALL_OW 274
51911: PPUSH
51912: LD_VAR 0 2
51916: PPUSH
51917: LD_INT 0
51919: PPUSH
51920: CALL 49486 0 3
51924: PPUSH
51925: LD_INT 30
51927: PUSH
51928: LD_INT 3
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PPUSH
51935: CALL_OW 72
51939: ST_TO_ADDR
// if not factories then
51940: LD_VAR 0 6
51944: NOT
51945: IFFALSE 51949
// exit ;
51947: GO 52915
// for i in factories do
51949: LD_ADDR_VAR 0 8
51953: PUSH
51954: LD_VAR 0 6
51958: PUSH
51959: FOR_IN
51960: IFFALSE 51985
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51962: LD_ADDR_VAR 0 17
51966: PUSH
51967: LD_VAR 0 17
51971: PUSH
51972: LD_VAR 0 8
51976: PPUSH
51977: CALL_OW 478
51981: UNION
51982: ST_TO_ADDR
51983: GO 51959
51985: POP
51986: POP
// if not fac_list then
51987: LD_VAR 0 17
51991: NOT
51992: IFFALSE 51996
// exit ;
51994: GO 52915
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51996: LD_ADDR_VAR 0 5
52000: PUSH
52001: LD_INT 4
52003: PUSH
52004: LD_INT 5
52006: PUSH
52007: LD_INT 9
52009: PUSH
52010: LD_INT 10
52012: PUSH
52013: LD_INT 6
52015: PUSH
52016: LD_INT 7
52018: PUSH
52019: LD_INT 11
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 27
52033: PUSH
52034: LD_INT 28
52036: PUSH
52037: LD_INT 26
52039: PUSH
52040: LD_INT 30
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 43
52051: PUSH
52052: LD_INT 44
52054: PUSH
52055: LD_INT 46
52057: PUSH
52058: LD_INT 45
52060: PUSH
52061: LD_INT 47
52063: PUSH
52064: LD_INT 49
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: PUSH
52080: LD_VAR 0 12
52084: ARRAY
52085: ST_TO_ADDR
// list := list isect fac_list ;
52086: LD_ADDR_VAR 0 5
52090: PUSH
52091: LD_VAR 0 5
52095: PUSH
52096: LD_VAR 0 17
52100: ISECT
52101: ST_TO_ADDR
// if not list then
52102: LD_VAR 0 5
52106: NOT
52107: IFFALSE 52111
// exit ;
52109: GO 52915
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52111: LD_VAR 0 12
52115: PUSH
52116: LD_INT 3
52118: EQUAL
52119: PUSH
52120: LD_INT 49
52122: PUSH
52123: LD_VAR 0 5
52127: IN
52128: AND
52129: PUSH
52130: LD_INT 31
52132: PPUSH
52133: LD_VAR 0 16
52137: PPUSH
52138: CALL_OW 321
52142: PUSH
52143: LD_INT 2
52145: EQUAL
52146: AND
52147: IFFALSE 52207
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52149: LD_INT 22
52151: PUSH
52152: LD_VAR 0 16
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 35
52163: PUSH
52164: LD_INT 49
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 91
52173: PUSH
52174: LD_VAR 0 1
52178: PUSH
52179: LD_INT 10
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: PPUSH
52192: CALL_OW 69
52196: NOT
52197: IFFALSE 52207
// weapon := ru_time_lapser ;
52199: LD_ADDR_VAR 0 18
52203: PUSH
52204: LD_INT 49
52206: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52207: LD_VAR 0 12
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: IN
52222: PUSH
52223: LD_INT 11
52225: PUSH
52226: LD_VAR 0 5
52230: IN
52231: PUSH
52232: LD_INT 30
52234: PUSH
52235: LD_VAR 0 5
52239: IN
52240: OR
52241: AND
52242: PUSH
52243: LD_INT 6
52245: PPUSH
52246: LD_VAR 0 16
52250: PPUSH
52251: CALL_OW 321
52255: PUSH
52256: LD_INT 2
52258: EQUAL
52259: AND
52260: IFFALSE 52425
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52262: LD_INT 22
52264: PUSH
52265: LD_VAR 0 16
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: LD_INT 35
52279: PUSH
52280: LD_INT 11
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 35
52289: PUSH
52290: LD_INT 30
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 91
52304: PUSH
52305: LD_VAR 0 1
52309: PUSH
52310: LD_INT 18
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: LIST
52322: PPUSH
52323: CALL_OW 69
52327: NOT
52328: PUSH
52329: LD_INT 22
52331: PUSH
52332: LD_VAR 0 16
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: LD_INT 30
52346: PUSH
52347: LD_INT 32
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 30
52356: PUSH
52357: LD_INT 33
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 91
52371: PUSH
52372: LD_VAR 0 1
52376: PUSH
52377: LD_INT 12
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: PPUSH
52393: CALL_OW 69
52397: PUSH
52398: LD_INT 2
52400: GREATER
52401: AND
52402: IFFALSE 52425
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52404: LD_ADDR_VAR 0 18
52408: PUSH
52409: LD_INT 11
52411: PUSH
52412: LD_INT 30
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_VAR 0 12
52423: ARRAY
52424: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52425: LD_VAR 0 18
52429: NOT
52430: PUSH
52431: LD_INT 40
52433: PPUSH
52434: LD_VAR 0 16
52438: PPUSH
52439: CALL_OW 321
52443: PUSH
52444: LD_INT 2
52446: EQUAL
52447: AND
52448: PUSH
52449: LD_INT 7
52451: PUSH
52452: LD_VAR 0 5
52456: IN
52457: PUSH
52458: LD_INT 28
52460: PUSH
52461: LD_VAR 0 5
52465: IN
52466: OR
52467: PUSH
52468: LD_INT 45
52470: PUSH
52471: LD_VAR 0 5
52475: IN
52476: OR
52477: AND
52478: IFFALSE 52732
// begin hex := GetHexInfo ( x , y ) ;
52480: LD_ADDR_VAR 0 4
52484: PUSH
52485: LD_VAR 0 10
52489: PPUSH
52490: LD_VAR 0 11
52494: PPUSH
52495: CALL_OW 546
52499: ST_TO_ADDR
// if hex [ 1 ] then
52500: LD_VAR 0 4
52504: PUSH
52505: LD_INT 1
52507: ARRAY
52508: IFFALSE 52512
// exit ;
52510: GO 52915
// height := hex [ 2 ] ;
52512: LD_ADDR_VAR 0 15
52516: PUSH
52517: LD_VAR 0 4
52521: PUSH
52522: LD_INT 2
52524: ARRAY
52525: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52526: LD_ADDR_VAR 0 14
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: LD_INT 5
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: ST_TO_ADDR
// for i in tmp do
52549: LD_ADDR_VAR 0 8
52553: PUSH
52554: LD_VAR 0 14
52558: PUSH
52559: FOR_IN
52560: IFFALSE 52730
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52562: LD_ADDR_VAR 0 9
52566: PUSH
52567: LD_VAR 0 10
52571: PPUSH
52572: LD_VAR 0 8
52576: PPUSH
52577: LD_INT 5
52579: PPUSH
52580: CALL_OW 272
52584: PUSH
52585: LD_VAR 0 11
52589: PPUSH
52590: LD_VAR 0 8
52594: PPUSH
52595: LD_INT 5
52597: PPUSH
52598: CALL_OW 273
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52607: LD_VAR 0 9
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: PPUSH
52616: LD_VAR 0 9
52620: PUSH
52621: LD_INT 2
52623: ARRAY
52624: PPUSH
52625: CALL_OW 488
52629: IFFALSE 52728
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52631: LD_ADDR_VAR 0 4
52635: PUSH
52636: LD_VAR 0 9
52640: PUSH
52641: LD_INT 1
52643: ARRAY
52644: PPUSH
52645: LD_VAR 0 9
52649: PUSH
52650: LD_INT 2
52652: ARRAY
52653: PPUSH
52654: CALL_OW 546
52658: ST_TO_ADDR
// if hex [ 1 ] then
52659: LD_VAR 0 4
52663: PUSH
52664: LD_INT 1
52666: ARRAY
52667: IFFALSE 52671
// continue ;
52669: GO 52559
// h := hex [ 2 ] ;
52671: LD_ADDR_VAR 0 13
52675: PUSH
52676: LD_VAR 0 4
52680: PUSH
52681: LD_INT 2
52683: ARRAY
52684: ST_TO_ADDR
// if h + 7 < height then
52685: LD_VAR 0 13
52689: PUSH
52690: LD_INT 7
52692: PLUS
52693: PUSH
52694: LD_VAR 0 15
52698: LESS
52699: IFFALSE 52728
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52701: LD_ADDR_VAR 0 18
52705: PUSH
52706: LD_INT 7
52708: PUSH
52709: LD_INT 28
52711: PUSH
52712: LD_INT 45
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: PUSH
52720: LD_VAR 0 12
52724: ARRAY
52725: ST_TO_ADDR
// break ;
52726: GO 52730
// end ; end ; end ;
52728: GO 52559
52730: POP
52731: POP
// end ; if not weapon then
52732: LD_VAR 0 18
52736: NOT
52737: IFFALSE 52797
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52739: LD_ADDR_VAR 0 5
52743: PUSH
52744: LD_VAR 0 5
52748: PUSH
52749: LD_INT 11
52751: PUSH
52752: LD_INT 30
52754: PUSH
52755: LD_INT 49
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: LIST
52762: DIFF
52763: ST_TO_ADDR
// if not list then
52764: LD_VAR 0 5
52768: NOT
52769: IFFALSE 52773
// exit ;
52771: GO 52915
// weapon := list [ rand ( 1 , list ) ] ;
52773: LD_ADDR_VAR 0 18
52777: PUSH
52778: LD_VAR 0 5
52782: PUSH
52783: LD_INT 1
52785: PPUSH
52786: LD_VAR 0 5
52790: PPUSH
52791: CALL_OW 12
52795: ARRAY
52796: ST_TO_ADDR
// end ; if weapon then
52797: LD_VAR 0 18
52801: IFFALSE 52915
// begin tmp := CostOfWeapon ( weapon ) ;
52803: LD_ADDR_VAR 0 14
52807: PUSH
52808: LD_VAR 0 18
52812: PPUSH
52813: CALL_OW 451
52817: ST_TO_ADDR
// j := GetBase ( tower ) ;
52818: LD_ADDR_VAR 0 9
52822: PUSH
52823: LD_VAR 0 1
52827: PPUSH
52828: CALL_OW 274
52832: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52833: LD_VAR 0 9
52837: PPUSH
52838: LD_INT 1
52840: PPUSH
52841: CALL_OW 275
52845: PUSH
52846: LD_VAR 0 14
52850: PUSH
52851: LD_INT 1
52853: ARRAY
52854: GREATEREQUAL
52855: PUSH
52856: LD_VAR 0 9
52860: PPUSH
52861: LD_INT 2
52863: PPUSH
52864: CALL_OW 275
52868: PUSH
52869: LD_VAR 0 14
52873: PUSH
52874: LD_INT 2
52876: ARRAY
52877: GREATEREQUAL
52878: AND
52879: PUSH
52880: LD_VAR 0 9
52884: PPUSH
52885: LD_INT 3
52887: PPUSH
52888: CALL_OW 275
52892: PUSH
52893: LD_VAR 0 14
52897: PUSH
52898: LD_INT 3
52900: ARRAY
52901: GREATEREQUAL
52902: AND
52903: IFFALSE 52915
// result := weapon ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_VAR 0 18
52914: ST_TO_ADDR
// end ; end ;
52915: LD_VAR 0 3
52919: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52920: LD_INT 0
52922: PPUSH
52923: PPUSH
// result := true ;
52924: LD_ADDR_VAR 0 3
52928: PUSH
52929: LD_INT 1
52931: ST_TO_ADDR
// if array1 = array2 then
52932: LD_VAR 0 1
52936: PUSH
52937: LD_VAR 0 2
52941: EQUAL
52942: IFFALSE 53002
// begin for i = 1 to array1 do
52944: LD_ADDR_VAR 0 4
52948: PUSH
52949: DOUBLE
52950: LD_INT 1
52952: DEC
52953: ST_TO_ADDR
52954: LD_VAR 0 1
52958: PUSH
52959: FOR_TO
52960: IFFALSE 52998
// if array1 [ i ] <> array2 [ i ] then
52962: LD_VAR 0 1
52966: PUSH
52967: LD_VAR 0 4
52971: ARRAY
52972: PUSH
52973: LD_VAR 0 2
52977: PUSH
52978: LD_VAR 0 4
52982: ARRAY
52983: NONEQUAL
52984: IFFALSE 52996
// begin result := false ;
52986: LD_ADDR_VAR 0 3
52990: PUSH
52991: LD_INT 0
52993: ST_TO_ADDR
// break ;
52994: GO 52998
// end ;
52996: GO 52959
52998: POP
52999: POP
// end else
53000: GO 53010
// result := false ;
53002: LD_ADDR_VAR 0 3
53006: PUSH
53007: LD_INT 0
53009: ST_TO_ADDR
// end ;
53010: LD_VAR 0 3
53014: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53015: LD_INT 0
53017: PPUSH
53018: PPUSH
// if not array1 or not array2 then
53019: LD_VAR 0 1
53023: NOT
53024: PUSH
53025: LD_VAR 0 2
53029: NOT
53030: OR
53031: IFFALSE 53035
// exit ;
53033: GO 53099
// result := true ;
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: LD_INT 1
53042: ST_TO_ADDR
// for i = 1 to array1 do
53043: LD_ADDR_VAR 0 4
53047: PUSH
53048: DOUBLE
53049: LD_INT 1
53051: DEC
53052: ST_TO_ADDR
53053: LD_VAR 0 1
53057: PUSH
53058: FOR_TO
53059: IFFALSE 53097
// if array1 [ i ] <> array2 [ i ] then
53061: LD_VAR 0 1
53065: PUSH
53066: LD_VAR 0 4
53070: ARRAY
53071: PUSH
53072: LD_VAR 0 2
53076: PUSH
53077: LD_VAR 0 4
53081: ARRAY
53082: NONEQUAL
53083: IFFALSE 53095
// begin result := false ;
53085: LD_ADDR_VAR 0 3
53089: PUSH
53090: LD_INT 0
53092: ST_TO_ADDR
// break ;
53093: GO 53097
// end ;
53095: GO 53058
53097: POP
53098: POP
// end ;
53099: LD_VAR 0 3
53103: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53104: LD_INT 0
53106: PPUSH
53107: PPUSH
53108: PPUSH
// pom := GetBase ( fac ) ;
53109: LD_ADDR_VAR 0 5
53113: PUSH
53114: LD_VAR 0 1
53118: PPUSH
53119: CALL_OW 274
53123: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53124: LD_ADDR_VAR 0 4
53128: PUSH
53129: LD_VAR 0 2
53133: PUSH
53134: LD_INT 1
53136: ARRAY
53137: PPUSH
53138: LD_VAR 0 2
53142: PUSH
53143: LD_INT 2
53145: ARRAY
53146: PPUSH
53147: LD_VAR 0 2
53151: PUSH
53152: LD_INT 3
53154: ARRAY
53155: PPUSH
53156: LD_VAR 0 2
53160: PUSH
53161: LD_INT 4
53163: ARRAY
53164: PPUSH
53165: CALL_OW 449
53169: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53170: LD_ADDR_VAR 0 3
53174: PUSH
53175: LD_VAR 0 5
53179: PPUSH
53180: LD_INT 1
53182: PPUSH
53183: CALL_OW 275
53187: PUSH
53188: LD_VAR 0 4
53192: PUSH
53193: LD_INT 1
53195: ARRAY
53196: GREATEREQUAL
53197: PUSH
53198: LD_VAR 0 5
53202: PPUSH
53203: LD_INT 2
53205: PPUSH
53206: CALL_OW 275
53210: PUSH
53211: LD_VAR 0 4
53215: PUSH
53216: LD_INT 2
53218: ARRAY
53219: GREATEREQUAL
53220: AND
53221: PUSH
53222: LD_VAR 0 5
53226: PPUSH
53227: LD_INT 3
53229: PPUSH
53230: CALL_OW 275
53234: PUSH
53235: LD_VAR 0 4
53239: PUSH
53240: LD_INT 3
53242: ARRAY
53243: GREATEREQUAL
53244: AND
53245: ST_TO_ADDR
// end ;
53246: LD_VAR 0 3
53250: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53251: LD_INT 0
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
// pom := GetBase ( building ) ;
53257: LD_ADDR_VAR 0 3
53261: PUSH
53262: LD_VAR 0 1
53266: PPUSH
53267: CALL_OW 274
53271: ST_TO_ADDR
// if not pom then
53272: LD_VAR 0 3
53276: NOT
53277: IFFALSE 53281
// exit ;
53279: GO 53451
// btype := GetBType ( building ) ;
53281: LD_ADDR_VAR 0 5
53285: PUSH
53286: LD_VAR 0 1
53290: PPUSH
53291: CALL_OW 266
53295: ST_TO_ADDR
// if btype = b_armoury then
53296: LD_VAR 0 5
53300: PUSH
53301: LD_INT 4
53303: EQUAL
53304: IFFALSE 53314
// btype := b_barracks ;
53306: LD_ADDR_VAR 0 5
53310: PUSH
53311: LD_INT 5
53313: ST_TO_ADDR
// if btype = b_depot then
53314: LD_VAR 0 5
53318: PUSH
53319: LD_INT 0
53321: EQUAL
53322: IFFALSE 53332
// btype := b_warehouse ;
53324: LD_ADDR_VAR 0 5
53328: PUSH
53329: LD_INT 1
53331: ST_TO_ADDR
// if btype = b_workshop then
53332: LD_VAR 0 5
53336: PUSH
53337: LD_INT 2
53339: EQUAL
53340: IFFALSE 53350
// btype := b_factory ;
53342: LD_ADDR_VAR 0 5
53346: PUSH
53347: LD_INT 3
53349: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53350: LD_ADDR_VAR 0 4
53354: PUSH
53355: LD_VAR 0 5
53359: PPUSH
53360: LD_VAR 0 1
53364: PPUSH
53365: CALL_OW 248
53369: PPUSH
53370: CALL_OW 450
53374: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53375: LD_ADDR_VAR 0 2
53379: PUSH
53380: LD_VAR 0 3
53384: PPUSH
53385: LD_INT 1
53387: PPUSH
53388: CALL_OW 275
53392: PUSH
53393: LD_VAR 0 4
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: GREATEREQUAL
53402: PUSH
53403: LD_VAR 0 3
53407: PPUSH
53408: LD_INT 2
53410: PPUSH
53411: CALL_OW 275
53415: PUSH
53416: LD_VAR 0 4
53420: PUSH
53421: LD_INT 2
53423: ARRAY
53424: GREATEREQUAL
53425: AND
53426: PUSH
53427: LD_VAR 0 3
53431: PPUSH
53432: LD_INT 3
53434: PPUSH
53435: CALL_OW 275
53439: PUSH
53440: LD_VAR 0 4
53444: PUSH
53445: LD_INT 3
53447: ARRAY
53448: GREATEREQUAL
53449: AND
53450: ST_TO_ADDR
// end ;
53451: LD_VAR 0 2
53455: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53456: LD_INT 0
53458: PPUSH
53459: PPUSH
53460: PPUSH
// pom := GetBase ( building ) ;
53461: LD_ADDR_VAR 0 4
53465: PUSH
53466: LD_VAR 0 1
53470: PPUSH
53471: CALL_OW 274
53475: ST_TO_ADDR
// if not pom then
53476: LD_VAR 0 4
53480: NOT
53481: IFFALSE 53485
// exit ;
53483: GO 53586
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53485: LD_ADDR_VAR 0 5
53489: PUSH
53490: LD_VAR 0 2
53494: PPUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 248
53504: PPUSH
53505: CALL_OW 450
53509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53510: LD_ADDR_VAR 0 3
53514: PUSH
53515: LD_VAR 0 4
53519: PPUSH
53520: LD_INT 1
53522: PPUSH
53523: CALL_OW 275
53527: PUSH
53528: LD_VAR 0 5
53532: PUSH
53533: LD_INT 1
53535: ARRAY
53536: GREATEREQUAL
53537: PUSH
53538: LD_VAR 0 4
53542: PPUSH
53543: LD_INT 2
53545: PPUSH
53546: CALL_OW 275
53550: PUSH
53551: LD_VAR 0 5
53555: PUSH
53556: LD_INT 2
53558: ARRAY
53559: GREATEREQUAL
53560: AND
53561: PUSH
53562: LD_VAR 0 4
53566: PPUSH
53567: LD_INT 3
53569: PPUSH
53570: CALL_OW 275
53574: PUSH
53575: LD_VAR 0 5
53579: PUSH
53580: LD_INT 3
53582: ARRAY
53583: GREATEREQUAL
53584: AND
53585: ST_TO_ADDR
// end ;
53586: LD_VAR 0 3
53590: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53591: LD_INT 0
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
// result := false ;
53604: LD_ADDR_VAR 0 8
53608: PUSH
53609: LD_INT 0
53611: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53612: LD_VAR 0 5
53616: NOT
53617: PUSH
53618: LD_VAR 0 1
53622: NOT
53623: OR
53624: PUSH
53625: LD_VAR 0 2
53629: NOT
53630: OR
53631: PUSH
53632: LD_VAR 0 3
53636: NOT
53637: OR
53638: IFFALSE 53642
// exit ;
53640: GO 54456
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53642: LD_ADDR_VAR 0 14
53646: PUSH
53647: LD_VAR 0 1
53651: PPUSH
53652: LD_VAR 0 2
53656: PPUSH
53657: LD_VAR 0 3
53661: PPUSH
53662: LD_VAR 0 4
53666: PPUSH
53667: LD_VAR 0 5
53671: PUSH
53672: LD_INT 1
53674: ARRAY
53675: PPUSH
53676: CALL_OW 248
53680: PPUSH
53681: LD_INT 0
53683: PPUSH
53684: CALL 55709 0 6
53688: ST_TO_ADDR
// if not hexes then
53689: LD_VAR 0 14
53693: NOT
53694: IFFALSE 53698
// exit ;
53696: GO 54456
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53698: LD_ADDR_VAR 0 17
53702: PUSH
53703: LD_VAR 0 5
53707: PPUSH
53708: LD_INT 22
53710: PUSH
53711: LD_VAR 0 13
53715: PPUSH
53716: CALL_OW 255
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 30
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 30
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PPUSH
53757: CALL_OW 72
53761: ST_TO_ADDR
// for i = 1 to hexes do
53762: LD_ADDR_VAR 0 9
53766: PUSH
53767: DOUBLE
53768: LD_INT 1
53770: DEC
53771: ST_TO_ADDR
53772: LD_VAR 0 14
53776: PUSH
53777: FOR_TO
53778: IFFALSE 54454
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53780: LD_ADDR_VAR 0 13
53784: PUSH
53785: LD_VAR 0 14
53789: PUSH
53790: LD_VAR 0 9
53794: ARRAY
53795: PUSH
53796: LD_INT 1
53798: ARRAY
53799: PPUSH
53800: LD_VAR 0 14
53804: PUSH
53805: LD_VAR 0 9
53809: ARRAY
53810: PUSH
53811: LD_INT 2
53813: ARRAY
53814: PPUSH
53815: CALL_OW 428
53819: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53820: LD_VAR 0 14
53824: PUSH
53825: LD_VAR 0 9
53829: ARRAY
53830: PUSH
53831: LD_INT 1
53833: ARRAY
53834: PPUSH
53835: LD_VAR 0 14
53839: PUSH
53840: LD_VAR 0 9
53844: ARRAY
53845: PUSH
53846: LD_INT 2
53848: ARRAY
53849: PPUSH
53850: CALL_OW 351
53854: PUSH
53855: LD_VAR 0 14
53859: PUSH
53860: LD_VAR 0 9
53864: ARRAY
53865: PUSH
53866: LD_INT 1
53868: ARRAY
53869: PPUSH
53870: LD_VAR 0 14
53874: PUSH
53875: LD_VAR 0 9
53879: ARRAY
53880: PUSH
53881: LD_INT 2
53883: ARRAY
53884: PPUSH
53885: CALL_OW 488
53889: NOT
53890: OR
53891: PUSH
53892: LD_VAR 0 13
53896: PPUSH
53897: CALL_OW 247
53901: PUSH
53902: LD_INT 3
53904: EQUAL
53905: OR
53906: IFFALSE 53912
// exit ;
53908: POP
53909: POP
53910: GO 54456
// if not tmp then
53912: LD_VAR 0 13
53916: NOT
53917: IFFALSE 53921
// continue ;
53919: GO 53777
// result := true ;
53921: LD_ADDR_VAR 0 8
53925: PUSH
53926: LD_INT 1
53928: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53929: LD_VAR 0 6
53933: PUSH
53934: LD_VAR 0 13
53938: PPUSH
53939: CALL_OW 247
53943: PUSH
53944: LD_INT 2
53946: EQUAL
53947: AND
53948: PUSH
53949: LD_VAR 0 13
53953: PPUSH
53954: CALL_OW 263
53958: PUSH
53959: LD_INT 1
53961: EQUAL
53962: AND
53963: IFFALSE 54127
// begin if IsDrivenBy ( tmp ) then
53965: LD_VAR 0 13
53969: PPUSH
53970: CALL_OW 311
53974: IFFALSE 53978
// continue ;
53976: GO 53777
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53978: LD_VAR 0 6
53982: PPUSH
53983: LD_INT 3
53985: PUSH
53986: LD_INT 60
53988: PUSH
53989: EMPTY
53990: LIST
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: LD_INT 55
54001: PUSH
54002: EMPTY
54003: LIST
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PPUSH
54013: CALL_OW 72
54017: IFFALSE 54125
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54019: LD_ADDR_VAR 0 18
54023: PUSH
54024: LD_VAR 0 6
54028: PPUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 60
54034: PUSH
54035: EMPTY
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: LD_INT 55
54047: PUSH
54048: EMPTY
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PPUSH
54059: CALL_OW 72
54063: PUSH
54064: LD_INT 1
54066: ARRAY
54067: ST_TO_ADDR
// if IsInUnit ( driver ) then
54068: LD_VAR 0 18
54072: PPUSH
54073: CALL_OW 310
54077: IFFALSE 54088
// ComExit ( driver ) ;
54079: LD_VAR 0 18
54083: PPUSH
54084: CALL 79510 0 1
// AddComEnterUnit ( driver , tmp ) ;
54088: LD_VAR 0 18
54092: PPUSH
54093: LD_VAR 0 13
54097: PPUSH
54098: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54102: LD_VAR 0 18
54106: PPUSH
54107: LD_VAR 0 7
54111: PPUSH
54112: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54116: LD_VAR 0 18
54120: PPUSH
54121: CALL_OW 181
// end ; continue ;
54125: GO 53777
// end ; if not cleaners or not tmp in cleaners then
54127: LD_VAR 0 6
54131: NOT
54132: PUSH
54133: LD_VAR 0 13
54137: PUSH
54138: LD_VAR 0 6
54142: IN
54143: NOT
54144: OR
54145: IFFALSE 54452
// begin if dep then
54147: LD_VAR 0 17
54151: IFFALSE 54287
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54153: LD_ADDR_VAR 0 16
54157: PUSH
54158: LD_VAR 0 17
54162: PUSH
54163: LD_INT 1
54165: ARRAY
54166: PPUSH
54167: CALL_OW 250
54171: PPUSH
54172: LD_VAR 0 17
54176: PUSH
54177: LD_INT 1
54179: ARRAY
54180: PPUSH
54181: CALL_OW 254
54185: PPUSH
54186: LD_INT 5
54188: PPUSH
54189: CALL_OW 272
54193: PUSH
54194: LD_VAR 0 17
54198: PUSH
54199: LD_INT 1
54201: ARRAY
54202: PPUSH
54203: CALL_OW 251
54207: PPUSH
54208: LD_VAR 0 17
54212: PUSH
54213: LD_INT 1
54215: ARRAY
54216: PPUSH
54217: CALL_OW 254
54221: PPUSH
54222: LD_INT 5
54224: PPUSH
54225: CALL_OW 273
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54234: LD_VAR 0 16
54238: PUSH
54239: LD_INT 1
54241: ARRAY
54242: PPUSH
54243: LD_VAR 0 16
54247: PUSH
54248: LD_INT 2
54250: ARRAY
54251: PPUSH
54252: CALL_OW 488
54256: IFFALSE 54287
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54258: LD_VAR 0 13
54262: PPUSH
54263: LD_VAR 0 16
54267: PUSH
54268: LD_INT 1
54270: ARRAY
54271: PPUSH
54272: LD_VAR 0 16
54276: PUSH
54277: LD_INT 2
54279: ARRAY
54280: PPUSH
54281: CALL_OW 111
// continue ;
54285: GO 53777
// end ; end ; r := GetDir ( tmp ) ;
54287: LD_ADDR_VAR 0 15
54291: PUSH
54292: LD_VAR 0 13
54296: PPUSH
54297: CALL_OW 254
54301: ST_TO_ADDR
// if r = 5 then
54302: LD_VAR 0 15
54306: PUSH
54307: LD_INT 5
54309: EQUAL
54310: IFFALSE 54320
// r := 0 ;
54312: LD_ADDR_VAR 0 15
54316: PUSH
54317: LD_INT 0
54319: ST_TO_ADDR
// for j = r to 5 do
54320: LD_ADDR_VAR 0 10
54324: PUSH
54325: DOUBLE
54326: LD_VAR 0 15
54330: DEC
54331: ST_TO_ADDR
54332: LD_INT 5
54334: PUSH
54335: FOR_TO
54336: IFFALSE 54450
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54338: LD_ADDR_VAR 0 11
54342: PUSH
54343: LD_VAR 0 13
54347: PPUSH
54348: CALL_OW 250
54352: PPUSH
54353: LD_VAR 0 10
54357: PPUSH
54358: LD_INT 2
54360: PPUSH
54361: CALL_OW 272
54365: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54366: LD_ADDR_VAR 0 12
54370: PUSH
54371: LD_VAR 0 13
54375: PPUSH
54376: CALL_OW 251
54380: PPUSH
54381: LD_VAR 0 10
54385: PPUSH
54386: LD_INT 2
54388: PPUSH
54389: CALL_OW 273
54393: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54394: LD_VAR 0 11
54398: PPUSH
54399: LD_VAR 0 12
54403: PPUSH
54404: CALL_OW 488
54408: PUSH
54409: LD_VAR 0 11
54413: PPUSH
54414: LD_VAR 0 12
54418: PPUSH
54419: CALL_OW 428
54423: NOT
54424: AND
54425: IFFALSE 54448
// begin ComMoveXY ( tmp , _x , _y ) ;
54427: LD_VAR 0 13
54431: PPUSH
54432: LD_VAR 0 11
54436: PPUSH
54437: LD_VAR 0 12
54441: PPUSH
54442: CALL_OW 111
// break ;
54446: GO 54450
// end ; end ;
54448: GO 54335
54450: POP
54451: POP
// end ; end ;
54452: GO 53777
54454: POP
54455: POP
// end ;
54456: LD_VAR 0 8
54460: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54461: LD_INT 0
54463: PPUSH
// result := true ;
54464: LD_ADDR_VAR 0 3
54468: PUSH
54469: LD_INT 1
54471: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54472: LD_VAR 0 2
54476: PUSH
54477: LD_INT 24
54479: DOUBLE
54480: EQUAL
54481: IFTRUE 54491
54483: LD_INT 33
54485: DOUBLE
54486: EQUAL
54487: IFTRUE 54491
54489: GO 54516
54491: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54492: LD_ADDR_VAR 0 3
54496: PUSH
54497: LD_INT 32
54499: PPUSH
54500: LD_VAR 0 1
54504: PPUSH
54505: CALL_OW 321
54509: PUSH
54510: LD_INT 2
54512: EQUAL
54513: ST_TO_ADDR
54514: GO 54832
54516: LD_INT 20
54518: DOUBLE
54519: EQUAL
54520: IFTRUE 54524
54522: GO 54549
54524: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54525: LD_ADDR_VAR 0 3
54529: PUSH
54530: LD_INT 6
54532: PPUSH
54533: LD_VAR 0 1
54537: PPUSH
54538: CALL_OW 321
54542: PUSH
54543: LD_INT 2
54545: EQUAL
54546: ST_TO_ADDR
54547: GO 54832
54549: LD_INT 22
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54563
54555: LD_INT 36
54557: DOUBLE
54558: EQUAL
54559: IFTRUE 54563
54561: GO 54588
54563: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54564: LD_ADDR_VAR 0 3
54568: PUSH
54569: LD_INT 15
54571: PPUSH
54572: LD_VAR 0 1
54576: PPUSH
54577: CALL_OW 321
54581: PUSH
54582: LD_INT 2
54584: EQUAL
54585: ST_TO_ADDR
54586: GO 54832
54588: LD_INT 30
54590: DOUBLE
54591: EQUAL
54592: IFTRUE 54596
54594: GO 54621
54596: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54597: LD_ADDR_VAR 0 3
54601: PUSH
54602: LD_INT 20
54604: PPUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: CALL_OW 321
54614: PUSH
54615: LD_INT 2
54617: EQUAL
54618: ST_TO_ADDR
54619: GO 54832
54621: LD_INT 28
54623: DOUBLE
54624: EQUAL
54625: IFTRUE 54635
54627: LD_INT 21
54629: DOUBLE
54630: EQUAL
54631: IFTRUE 54635
54633: GO 54660
54635: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54636: LD_ADDR_VAR 0 3
54640: PUSH
54641: LD_INT 21
54643: PPUSH
54644: LD_VAR 0 1
54648: PPUSH
54649: CALL_OW 321
54653: PUSH
54654: LD_INT 2
54656: EQUAL
54657: ST_TO_ADDR
54658: GO 54832
54660: LD_INT 16
54662: DOUBLE
54663: EQUAL
54664: IFTRUE 54668
54666: GO 54693
54668: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54669: LD_ADDR_VAR 0 3
54673: PUSH
54674: LD_INT 84
54676: PPUSH
54677: LD_VAR 0 1
54681: PPUSH
54682: CALL_OW 321
54686: PUSH
54687: LD_INT 2
54689: EQUAL
54690: ST_TO_ADDR
54691: GO 54832
54693: LD_INT 19
54695: DOUBLE
54696: EQUAL
54697: IFTRUE 54707
54699: LD_INT 23
54701: DOUBLE
54702: EQUAL
54703: IFTRUE 54707
54705: GO 54732
54707: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54708: LD_ADDR_VAR 0 3
54712: PUSH
54713: LD_INT 83
54715: PPUSH
54716: LD_VAR 0 1
54720: PPUSH
54721: CALL_OW 321
54725: PUSH
54726: LD_INT 2
54728: EQUAL
54729: ST_TO_ADDR
54730: GO 54832
54732: LD_INT 17
54734: DOUBLE
54735: EQUAL
54736: IFTRUE 54740
54738: GO 54765
54740: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54741: LD_ADDR_VAR 0 3
54745: PUSH
54746: LD_INT 39
54748: PPUSH
54749: LD_VAR 0 1
54753: PPUSH
54754: CALL_OW 321
54758: PUSH
54759: LD_INT 2
54761: EQUAL
54762: ST_TO_ADDR
54763: GO 54832
54765: LD_INT 18
54767: DOUBLE
54768: EQUAL
54769: IFTRUE 54773
54771: GO 54798
54773: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54774: LD_ADDR_VAR 0 3
54778: PUSH
54779: LD_INT 40
54781: PPUSH
54782: LD_VAR 0 1
54786: PPUSH
54787: CALL_OW 321
54791: PUSH
54792: LD_INT 2
54794: EQUAL
54795: ST_TO_ADDR
54796: GO 54832
54798: LD_INT 27
54800: DOUBLE
54801: EQUAL
54802: IFTRUE 54806
54804: GO 54831
54806: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54807: LD_ADDR_VAR 0 3
54811: PUSH
54812: LD_INT 35
54814: PPUSH
54815: LD_VAR 0 1
54819: PPUSH
54820: CALL_OW 321
54824: PUSH
54825: LD_INT 2
54827: EQUAL
54828: ST_TO_ADDR
54829: GO 54832
54831: POP
// end ;
54832: LD_VAR 0 3
54836: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54837: LD_INT 0
54839: PPUSH
54840: PPUSH
54841: PPUSH
54842: PPUSH
54843: PPUSH
54844: PPUSH
54845: PPUSH
54846: PPUSH
54847: PPUSH
54848: PPUSH
54849: PPUSH
// result := false ;
54850: LD_ADDR_VAR 0 6
54854: PUSH
54855: LD_INT 0
54857: ST_TO_ADDR
// if btype = b_depot then
54858: LD_VAR 0 2
54862: PUSH
54863: LD_INT 0
54865: EQUAL
54866: IFFALSE 54878
// begin result := true ;
54868: LD_ADDR_VAR 0 6
54872: PUSH
54873: LD_INT 1
54875: ST_TO_ADDR
// exit ;
54876: GO 55704
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54878: LD_VAR 0 1
54882: NOT
54883: PUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 266
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: IN
54904: NOT
54905: OR
54906: PUSH
54907: LD_VAR 0 2
54911: NOT
54912: OR
54913: PUSH
54914: LD_VAR 0 5
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 4
54933: PUSH
54934: LD_INT 5
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: IN
54945: NOT
54946: OR
54947: PUSH
54948: LD_VAR 0 3
54952: PPUSH
54953: LD_VAR 0 4
54957: PPUSH
54958: CALL_OW 488
54962: NOT
54963: OR
54964: IFFALSE 54968
// exit ;
54966: GO 55704
// side := GetSide ( depot ) ;
54968: LD_ADDR_VAR 0 9
54972: PUSH
54973: LD_VAR 0 1
54977: PPUSH
54978: CALL_OW 255
54982: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54983: LD_VAR 0 9
54987: PPUSH
54988: LD_VAR 0 2
54992: PPUSH
54993: CALL 54461 0 2
54997: NOT
54998: IFFALSE 55002
// exit ;
55000: GO 55704
// pom := GetBase ( depot ) ;
55002: LD_ADDR_VAR 0 10
55006: PUSH
55007: LD_VAR 0 1
55011: PPUSH
55012: CALL_OW 274
55016: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55017: LD_ADDR_VAR 0 11
55021: PUSH
55022: LD_VAR 0 2
55026: PPUSH
55027: LD_VAR 0 1
55031: PPUSH
55032: CALL_OW 248
55036: PPUSH
55037: CALL_OW 450
55041: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55042: LD_VAR 0 10
55046: PPUSH
55047: LD_INT 1
55049: PPUSH
55050: CALL_OW 275
55054: PUSH
55055: LD_VAR 0 11
55059: PUSH
55060: LD_INT 1
55062: ARRAY
55063: GREATEREQUAL
55064: PUSH
55065: LD_VAR 0 10
55069: PPUSH
55070: LD_INT 2
55072: PPUSH
55073: CALL_OW 275
55077: PUSH
55078: LD_VAR 0 11
55082: PUSH
55083: LD_INT 2
55085: ARRAY
55086: GREATEREQUAL
55087: AND
55088: PUSH
55089: LD_VAR 0 10
55093: PPUSH
55094: LD_INT 3
55096: PPUSH
55097: CALL_OW 275
55101: PUSH
55102: LD_VAR 0 11
55106: PUSH
55107: LD_INT 3
55109: ARRAY
55110: GREATEREQUAL
55111: AND
55112: NOT
55113: IFFALSE 55117
// exit ;
55115: GO 55704
// if GetBType ( depot ) = b_depot then
55117: LD_VAR 0 1
55121: PPUSH
55122: CALL_OW 266
55126: PUSH
55127: LD_INT 0
55129: EQUAL
55130: IFFALSE 55142
// dist := 28 else
55132: LD_ADDR_VAR 0 14
55136: PUSH
55137: LD_INT 28
55139: ST_TO_ADDR
55140: GO 55150
// dist := 36 ;
55142: LD_ADDR_VAR 0 14
55146: PUSH
55147: LD_INT 36
55149: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55150: LD_VAR 0 1
55154: PPUSH
55155: LD_VAR 0 3
55159: PPUSH
55160: LD_VAR 0 4
55164: PPUSH
55165: CALL_OW 297
55169: PUSH
55170: LD_VAR 0 14
55174: GREATER
55175: IFFALSE 55179
// exit ;
55177: GO 55704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55179: LD_ADDR_VAR 0 12
55183: PUSH
55184: LD_VAR 0 2
55188: PPUSH
55189: LD_VAR 0 3
55193: PPUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: LD_VAR 0 5
55203: PPUSH
55204: LD_VAR 0 1
55208: PPUSH
55209: CALL_OW 248
55213: PPUSH
55214: LD_INT 0
55216: PPUSH
55217: CALL 55709 0 6
55221: ST_TO_ADDR
// if not hexes then
55222: LD_VAR 0 12
55226: NOT
55227: IFFALSE 55231
// exit ;
55229: GO 55704
// hex := GetHexInfo ( x , y ) ;
55231: LD_ADDR_VAR 0 15
55235: PUSH
55236: LD_VAR 0 3
55240: PPUSH
55241: LD_VAR 0 4
55245: PPUSH
55246: CALL_OW 546
55250: ST_TO_ADDR
// if hex [ 1 ] then
55251: LD_VAR 0 15
55255: PUSH
55256: LD_INT 1
55258: ARRAY
55259: IFFALSE 55263
// exit ;
55261: GO 55704
// height := hex [ 2 ] ;
55263: LD_ADDR_VAR 0 13
55267: PUSH
55268: LD_VAR 0 15
55272: PUSH
55273: LD_INT 2
55275: ARRAY
55276: ST_TO_ADDR
// for i = 1 to hexes do
55277: LD_ADDR_VAR 0 7
55281: PUSH
55282: DOUBLE
55283: LD_INT 1
55285: DEC
55286: ST_TO_ADDR
55287: LD_VAR 0 12
55291: PUSH
55292: FOR_TO
55293: IFFALSE 55623
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55295: LD_VAR 0 12
55299: PUSH
55300: LD_VAR 0 7
55304: ARRAY
55305: PUSH
55306: LD_INT 1
55308: ARRAY
55309: PPUSH
55310: LD_VAR 0 12
55314: PUSH
55315: LD_VAR 0 7
55319: ARRAY
55320: PUSH
55321: LD_INT 2
55323: ARRAY
55324: PPUSH
55325: CALL_OW 488
55329: NOT
55330: PUSH
55331: LD_VAR 0 12
55335: PUSH
55336: LD_VAR 0 7
55340: ARRAY
55341: PUSH
55342: LD_INT 1
55344: ARRAY
55345: PPUSH
55346: LD_VAR 0 12
55350: PUSH
55351: LD_VAR 0 7
55355: ARRAY
55356: PUSH
55357: LD_INT 2
55359: ARRAY
55360: PPUSH
55361: CALL_OW 428
55365: PUSH
55366: LD_INT 0
55368: GREATER
55369: OR
55370: PUSH
55371: LD_VAR 0 12
55375: PUSH
55376: LD_VAR 0 7
55380: ARRAY
55381: PUSH
55382: LD_INT 1
55384: ARRAY
55385: PPUSH
55386: LD_VAR 0 12
55390: PUSH
55391: LD_VAR 0 7
55395: ARRAY
55396: PUSH
55397: LD_INT 2
55399: ARRAY
55400: PPUSH
55401: CALL_OW 351
55405: OR
55406: IFFALSE 55412
// exit ;
55408: POP
55409: POP
55410: GO 55704
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55412: LD_ADDR_VAR 0 8
55416: PUSH
55417: LD_VAR 0 12
55421: PUSH
55422: LD_VAR 0 7
55426: ARRAY
55427: PUSH
55428: LD_INT 1
55430: ARRAY
55431: PPUSH
55432: LD_VAR 0 12
55436: PUSH
55437: LD_VAR 0 7
55441: ARRAY
55442: PUSH
55443: LD_INT 2
55445: ARRAY
55446: PPUSH
55447: CALL_OW 546
55451: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55452: LD_VAR 0 8
55456: PUSH
55457: LD_INT 1
55459: ARRAY
55460: PUSH
55461: LD_VAR 0 8
55465: PUSH
55466: LD_INT 2
55468: ARRAY
55469: PUSH
55470: LD_VAR 0 13
55474: PUSH
55475: LD_INT 2
55477: PLUS
55478: GREATER
55479: OR
55480: PUSH
55481: LD_VAR 0 8
55485: PUSH
55486: LD_INT 2
55488: ARRAY
55489: PUSH
55490: LD_VAR 0 13
55494: PUSH
55495: LD_INT 2
55497: MINUS
55498: LESS
55499: OR
55500: PUSH
55501: LD_VAR 0 8
55505: PUSH
55506: LD_INT 3
55508: ARRAY
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 8
55515: PUSH
55516: LD_INT 9
55518: PUSH
55519: LD_INT 10
55521: PUSH
55522: LD_INT 11
55524: PUSH
55525: LD_INT 12
55527: PUSH
55528: LD_INT 13
55530: PUSH
55531: LD_INT 16
55533: PUSH
55534: LD_INT 17
55536: PUSH
55537: LD_INT 18
55539: PUSH
55540: LD_INT 19
55542: PUSH
55543: LD_INT 20
55545: PUSH
55546: LD_INT 21
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: IN
55564: NOT
55565: OR
55566: PUSH
55567: LD_VAR 0 8
55571: PUSH
55572: LD_INT 5
55574: ARRAY
55575: NOT
55576: OR
55577: PUSH
55578: LD_VAR 0 8
55582: PUSH
55583: LD_INT 6
55585: ARRAY
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 7
55595: PUSH
55596: LD_INT 9
55598: PUSH
55599: LD_INT 10
55601: PUSH
55602: LD_INT 11
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: IN
55613: NOT
55614: OR
55615: IFFALSE 55621
// exit ;
55617: POP
55618: POP
55619: GO 55704
// end ;
55621: GO 55292
55623: POP
55624: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55625: LD_VAR 0 9
55629: PPUSH
55630: LD_VAR 0 3
55634: PPUSH
55635: LD_VAR 0 4
55639: PPUSH
55640: LD_INT 20
55642: PPUSH
55643: CALL 47627 0 4
55647: PUSH
55648: LD_INT 4
55650: ARRAY
55651: IFFALSE 55655
// exit ;
55653: GO 55704
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55655: LD_VAR 0 2
55659: PUSH
55660: LD_INT 29
55662: PUSH
55663: LD_INT 30
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: IN
55670: PUSH
55671: LD_VAR 0 3
55675: PPUSH
55676: LD_VAR 0 4
55680: PPUSH
55681: LD_VAR 0 9
55685: PPUSH
55686: CALL_OW 440
55690: NOT
55691: AND
55692: IFFALSE 55696
// exit ;
55694: GO 55704
// result := true ;
55696: LD_ADDR_VAR 0 6
55700: PUSH
55701: LD_INT 1
55703: ST_TO_ADDR
// end ;
55704: LD_VAR 0 6
55708: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55709: LD_INT 0
55711: PPUSH
55712: PPUSH
55713: PPUSH
55714: PPUSH
55715: PPUSH
55716: PPUSH
55717: PPUSH
55718: PPUSH
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
55732: PPUSH
55733: PPUSH
55734: PPUSH
55735: PPUSH
55736: PPUSH
55737: PPUSH
55738: PPUSH
55739: PPUSH
55740: PPUSH
55741: PPUSH
55742: PPUSH
55743: PPUSH
55744: PPUSH
55745: PPUSH
55746: PPUSH
55747: PPUSH
55748: PPUSH
55749: PPUSH
55750: PPUSH
55751: PPUSH
55752: PPUSH
55753: PPUSH
55754: PPUSH
55755: PPUSH
55756: PPUSH
55757: PPUSH
55758: PPUSH
55759: PPUSH
55760: PPUSH
55761: PPUSH
55762: PPUSH
55763: PPUSH
55764: PPUSH
55765: PPUSH
55766: PPUSH
55767: PPUSH
55768: PPUSH
// result = [ ] ;
55769: LD_ADDR_VAR 0 7
55773: PUSH
55774: EMPTY
55775: ST_TO_ADDR
// temp_list = [ ] ;
55776: LD_ADDR_VAR 0 9
55780: PUSH
55781: EMPTY
55782: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55783: LD_VAR 0 4
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: LD_INT 5
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: IN
55814: NOT
55815: PUSH
55816: LD_VAR 0 1
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: IN
55831: PUSH
55832: LD_VAR 0 5
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: IN
55851: NOT
55852: AND
55853: OR
55854: IFFALSE 55858
// exit ;
55856: GO 74249
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55858: LD_VAR 0 1
55862: PUSH
55863: LD_INT 6
55865: PUSH
55866: LD_INT 7
55868: PUSH
55869: LD_INT 8
55871: PUSH
55872: LD_INT 13
55874: PUSH
55875: LD_INT 12
55877: PUSH
55878: LD_INT 15
55880: PUSH
55881: LD_INT 11
55883: PUSH
55884: LD_INT 14
55886: PUSH
55887: LD_INT 10
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: IN
55901: IFFALSE 55911
// btype = b_lab ;
55903: LD_ADDR_VAR 0 1
55907: PUSH
55908: LD_INT 6
55910: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55911: LD_VAR 0 6
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: IN
55930: NOT
55931: PUSH
55932: LD_VAR 0 1
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 6
55951: PUSH
55952: LD_INT 36
55954: PUSH
55955: LD_INT 4
55957: PUSH
55958: LD_INT 5
55960: PUSH
55961: LD_INT 31
55963: PUSH
55964: LD_INT 32
55966: PUSH
55967: LD_INT 33
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: IN
55983: NOT
55984: PUSH
55985: LD_VAR 0 6
55989: PUSH
55990: LD_INT 1
55992: EQUAL
55993: AND
55994: OR
55995: PUSH
55996: LD_VAR 0 1
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: IN
56011: NOT
56012: PUSH
56013: LD_VAR 0 6
56017: PUSH
56018: LD_INT 2
56020: EQUAL
56021: AND
56022: OR
56023: IFFALSE 56033
// mode = 0 ;
56025: LD_ADDR_VAR 0 6
56029: PUSH
56030: LD_INT 0
56032: ST_TO_ADDR
// case mode of 0 :
56033: LD_VAR 0 6
56037: PUSH
56038: LD_INT 0
56040: DOUBLE
56041: EQUAL
56042: IFTRUE 56046
56044: GO 67499
56046: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56047: LD_ADDR_VAR 0 11
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56240: LD_ADDR_VAR 0 12
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56436: LD_ADDR_VAR 0 13
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: LD_INT 3
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56635: LD_ADDR_VAR 0 14
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 3
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56831: LD_ADDR_VAR 0 15
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 2
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57024: LD_ADDR_VAR 0 16
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57217: LD_ADDR_VAR 0 17
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57447: LD_ADDR_VAR 0 18
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57677: LD_ADDR_VAR 0 19
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57907: LD_ADDR_VAR 0 20
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: LD_INT 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58137: LD_ADDR_VAR 0 21
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58367: LD_ADDR_VAR 0 22
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58597: LD_ADDR_VAR 0 23
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58877: LD_ADDR_VAR 0 24
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 2
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59153: LD_ADDR_VAR 0 25
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: LD_INT 3
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 3
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59427: LD_ADDR_VAR 0 26
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59703: LD_ADDR_VAR 0 27
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 3
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59983: LD_ADDR_VAR 0 28
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 3
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: NEG
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60265: LD_ADDR_VAR 0 29
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: LD_INT 2
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60544: LD_ADDR_VAR 0 30
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60822: LD_ADDR_VAR 0 31
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: LD_INT 3
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61100: LD_ADDR_VAR 0 32
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: NEG
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: LD_INT 3
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: NEG
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61378: LD_ADDR_VAR 0 33
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61657: LD_ADDR_VAR 0 34
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 2
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 2
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 2
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: PUSH
61882: LD_INT 3
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: NEG
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61937: LD_ADDR_VAR 0 35
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62049: LD_ADDR_VAR 0 36
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62161: LD_ADDR_VAR 0 37
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62273: LD_ADDR_VAR 0 38
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62385: LD_ADDR_VAR 0 39
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62497: LD_ADDR_VAR 0 40
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62609: LD_ADDR_VAR 0 41
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: LD_INT 2
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: LD_INT 2
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 3
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: PUSH
62853: LD_INT 3
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 3
62883: NEG
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62959: LD_ADDR_VAR 0 42
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 3
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 3
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 3
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 3
63256: NEG
63257: PUSH
63258: LD_INT 2
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: NEG
63269: PUSH
63270: LD_INT 3
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63309: LD_ADDR_VAR 0 43
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 3
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63657: LD_ADDR_VAR 0 44
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 1
63715: NEG
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 2
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: LD_INT 2
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: NEG
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 2
63835: NEG
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: NEG
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 3
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 3
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: LD_INT 2
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: LD_INT 3
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 3
63954: NEG
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 3
63966: NEG
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64007: LD_ADDR_VAR 0 45
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 2
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: NEG
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: NEG
64198: PUSH
64199: LD_INT 3
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 1
64209: NEG
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 3
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: LD_INT 3
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 3
64304: NEG
64305: PUSH
64306: LD_INT 2
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 3
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64357: LD_ADDR_VAR 0 46
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 2
64534: NEG
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 3
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: LD_INT 3
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: LD_INT 1
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64705: LD_ADDR_VAR 0 47
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: NEG
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: LD_INT 1
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: LD_INT 2
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64856: LD_ADDR_VAR 0 48
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 1
64937: NEG
64938: PUSH
64939: LD_INT 2
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 2
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65003: LD_ADDR_VAR 0 49
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65147: LD_ADDR_VAR 0 50
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: NEG
65217: PUSH
65218: LD_INT 1
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 2
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: LD_INT 2
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65291: LD_ADDR_VAR 0 51
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 1
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65438: LD_ADDR_VAR 0 52
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: NEG
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 1
65519: NEG
65520: PUSH
65521: LD_INT 2
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: LD_INT 1
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 2
65542: NEG
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: LD_INT 2
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65589: LD_ADDR_VAR 0 53
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: LD_INT 2
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 2
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 2
65724: PUSH
65725: LD_INT 2
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: LD_INT 2
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 2
65765: NEG
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: LD_INT 2
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65819: LD_ADDR_VAR 0 54
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: LD_INT 1
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: NEG
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: NEG
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: NEG
65901: PUSH
65902: LD_INT 2
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: LD_INT 2
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 2
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: LD_INT 2
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 2
66006: NEG
66007: PUSH
66008: LD_INT 1
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66049: LD_ADDR_VAR 0 55
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 1
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 0
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: NEG
66119: PUSH
66120: LD_INT 1
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: LD_INT 2
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 2
66236: NEG
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: LD_INT 2
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66279: LD_ADDR_VAR 0 56
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 0
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 1
66317: PUSH
66318: LD_INT 1
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: LD_INT 2
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: LD_INT 2
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: LD_INT 2
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 2
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 2
66455: NEG
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 2
66466: NEG
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 2
66478: NEG
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66509: LD_ADDR_VAR 0 57
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: LD_INT 2
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 2
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 2
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: LD_INT 2
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 2
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 2
66708: NEG
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66739: LD_ADDR_VAR 0 58
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: PUSH
66810: LD_INT 1
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 1
66820: NEG
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_INT 2
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 2
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 2
66874: PUSH
66875: LD_INT 2
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: LD_INT 2
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 2
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 2
66915: NEG
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 2
66938: NEG
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66969: LD_ADDR_VAR 0 59
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: LD_INT 1
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: LD_INT 1
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67057: LD_ADDR_VAR 0 60
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: LD_INT 1
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67145: LD_ADDR_VAR 0 61
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: LD_INT 0
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: NEG
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: NEG
67215: PUSH
67216: LD_INT 1
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67233: LD_ADDR_VAR 0 62
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: LD_INT 1
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: LD_INT 1
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67321: LD_ADDR_VAR 0 63
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: NEG
67391: PUSH
67392: LD_INT 1
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67409: LD_ADDR_VAR 0 64
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: LD_INT 0
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: ST_TO_ADDR
// end ; 1 :
67497: GO 73394
67499: LD_INT 1
67501: DOUBLE
67502: EQUAL
67503: IFTRUE 67507
67505: GO 70130
67507: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67508: LD_ADDR_VAR 0 11
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: LD_INT 3
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: LD_INT 3
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: LD_INT 2
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: LIST
67551: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67552: LD_ADDR_VAR 0 12
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: LD_INT 1
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 3
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: LIST
67592: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67593: LD_ADDR_VAR 0 13
67597: PUSH
67598: LD_INT 3
67600: PUSH
67601: LD_INT 2
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: LD_INT 3
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 2
67620: PUSH
67621: LD_INT 3
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67633: LD_ADDR_VAR 0 14
67637: PUSH
67638: LD_INT 1
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: LD_INT 3
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 1
67660: NEG
67661: PUSH
67662: LD_INT 2
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: LIST
67673: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67674: LD_ADDR_VAR 0 15
67678: PUSH
67679: LD_INT 2
67681: NEG
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 3
67692: NEG
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 3
67703: NEG
67704: PUSH
67705: LD_INT 1
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: LIST
67717: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67718: LD_ADDR_VAR 0 16
67722: PUSH
67723: LD_INT 2
67725: NEG
67726: PUSH
67727: LD_INT 3
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 3
67737: NEG
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 3
67749: NEG
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: LIST
67763: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67764: LD_ADDR_VAR 0 17
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: LD_INT 3
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 3
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: LD_INT 2
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67808: LD_ADDR_VAR 0 18
67812: PUSH
67813: LD_INT 2
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: LD_INT 0
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67849: LD_ADDR_VAR 0 19
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 2
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67889: LD_ADDR_VAR 0 20
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: LIST
67929: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67930: LD_ADDR_VAR 0 21
67934: PUSH
67935: LD_INT 2
67937: NEG
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 3
67959: NEG
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: LIST
67973: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67974: LD_ADDR_VAR 0 22
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: LD_INT 3
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: LD_INT 2
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: LD_INT 3
68009: NEG
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: LIST
68019: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68020: LD_ADDR_VAR 0 23
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 1
68038: NEG
68039: PUSH
68040: LD_INT 4
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 1
68050: PUSH
68051: LD_INT 3
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: LIST
68063: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68064: LD_ADDR_VAR 0 24
68068: PUSH
68069: LD_INT 3
68071: PUSH
68072: LD_INT 0
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 3
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 4
68092: PUSH
68093: LD_INT 1
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: LIST
68104: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68105: LD_ADDR_VAR 0 25
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: LD_INT 3
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 4
68122: PUSH
68123: LD_INT 3
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: PUSH
68133: LD_INT 4
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68145: LD_ADDR_VAR 0 26
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 3
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: LD_INT 4
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: LIST
68185: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68186: LD_ADDR_VAR 0 27
68190: PUSH
68191: LD_INT 3
68193: NEG
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 3
68204: NEG
68205: PUSH
68206: LD_INT 1
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 4
68215: NEG
68216: PUSH
68217: LD_INT 1
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68230: LD_ADDR_VAR 0 28
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: LD_INT 3
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 3
68249: NEG
68250: PUSH
68251: LD_INT 4
68253: NEG
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 4
68261: NEG
68262: PUSH
68263: LD_INT 3
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68276: LD_ADDR_VAR 0 29
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: LD_INT 3
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: LD_INT 3
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: LD_INT 2
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: LD_INT 4
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: LD_INT 4
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 1
68340: PUSH
68341: LD_INT 3
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 1
68351: NEG
68352: PUSH
68353: LD_INT 5
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: LD_INT 5
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: LD_INT 4
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: NEG
68386: PUSH
68387: LD_INT 6
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 0
68397: PUSH
68398: LD_INT 6
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: LD_INT 5
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68431: LD_ADDR_VAR 0 30
68435: PUSH
68436: LD_INT 2
68438: PUSH
68439: LD_INT 1
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 3
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 3
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 3
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 4
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: LD_INT 1
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 5
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 5
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 5
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 6
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 6
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68574: LD_ADDR_VAR 0 31
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: LD_INT 2
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 3
68591: PUSH
68592: LD_INT 3
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: LD_INT 3
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 4
68611: PUSH
68612: LD_INT 3
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 4
68621: PUSH
68622: LD_INT 4
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: LD_INT 4
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 5
68641: PUSH
68642: LD_INT 4
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 5
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 4
68661: PUSH
68662: LD_INT 5
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 6
68671: PUSH
68672: LD_INT 5
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 6
68681: PUSH
68682: LD_INT 6
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 5
68691: PUSH
68692: LD_INT 6
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68713: LD_ADDR_VAR 0 32
68717: PUSH
68718: LD_INT 1
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: LD_INT 3
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 1
68740: NEG
68741: PUSH
68742: LD_INT 2
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: LD_INT 4
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 4
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: NEG
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: LD_INT 5
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: LD_INT 5
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: PUSH
68804: LD_INT 4
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: LD_INT 6
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: LD_INT 6
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: LD_INT 5
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68856: LD_ADDR_VAR 0 33
68860: PUSH
68861: LD_INT 2
68863: NEG
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 3
68874: NEG
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 3
68885: NEG
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 3
68897: NEG
68898: PUSH
68899: LD_INT 1
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 4
68919: NEG
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 4
68931: NEG
68932: PUSH
68933: LD_INT 1
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 5
68942: NEG
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 5
68953: NEG
68954: PUSH
68955: LD_INT 1
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 5
68965: NEG
68966: PUSH
68967: LD_INT 1
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 6
68976: NEG
68977: PUSH
68978: LD_INT 0
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 6
68987: NEG
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69011: LD_ADDR_VAR 0 34
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 3
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: NEG
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 3
69054: NEG
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 4
69066: NEG
69067: PUSH
69068: LD_INT 3
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: LD_INT 4
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 4
69090: NEG
69091: PUSH
69092: LD_INT 5
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 5
69102: NEG
69103: PUSH
69104: LD_INT 4
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 5
69114: NEG
69115: PUSH
69116: LD_INT 5
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 5
69126: NEG
69127: PUSH
69128: LD_INT 6
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 6
69138: NEG
69139: PUSH
69140: LD_INT 5
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 6
69150: NEG
69151: PUSH
69152: LD_INT 6
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69174: LD_ADDR_VAR 0 41
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: LD_INT 2
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 1
69192: NEG
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: LD_INT 2
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: LIST
69217: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69218: LD_ADDR_VAR 0 42
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: LD_INT 0
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 2
69235: PUSH
69236: LD_INT 1
69238: NEG
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 3
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: LIST
69258: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69259: LD_ADDR_VAR 0 43
69263: PUSH
69264: LD_INT 2
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: PUSH
69277: LD_INT 2
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 2
69286: PUSH
69287: LD_INT 3
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69299: LD_ADDR_VAR 0 44
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: LD_INT 2
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 1
69316: PUSH
69317: LD_INT 3
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 2
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69340: LD_ADDR_VAR 0 45
69344: PUSH
69345: LD_INT 2
69347: NEG
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 2
69358: NEG
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 3
69369: NEG
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: LIST
69383: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69384: LD_ADDR_VAR 0 46
69388: PUSH
69389: LD_INT 2
69391: NEG
69392: PUSH
69393: LD_INT 2
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 2
69403: NEG
69404: PUSH
69405: LD_INT 3
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: NEG
69416: PUSH
69417: LD_INT 2
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: LIST
69429: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69430: LD_ADDR_VAR 0 47
69434: PUSH
69435: LD_INT 2
69437: NEG
69438: PUSH
69439: LD_INT 3
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 1
69449: NEG
69450: PUSH
69451: LD_INT 3
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69463: LD_ADDR_VAR 0 48
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 2
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 2
69481: PUSH
69482: LD_INT 1
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69494: LD_ADDR_VAR 0 49
69498: PUSH
69499: LD_INT 3
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 3
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69523: LD_ADDR_VAR 0 50
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: LD_INT 3
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: PUSH
69541: LD_INT 3
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69552: LD_ADDR_VAR 0 51
69556: PUSH
69557: LD_INT 1
69559: NEG
69560: PUSH
69561: LD_INT 2
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 2
69570: NEG
69571: PUSH
69572: LD_INT 1
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69583: LD_ADDR_VAR 0 52
69587: PUSH
69588: LD_INT 3
69590: NEG
69591: PUSH
69592: LD_INT 1
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 3
69602: NEG
69603: PUSH
69604: LD_INT 2
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69616: LD_ADDR_VAR 0 53
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: PUSH
69625: LD_INT 3
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: LD_INT 3
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: PUSH
69647: LD_INT 2
69649: NEG
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: LIST
69659: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69660: LD_ADDR_VAR 0 54
69664: PUSH
69665: LD_INT 2
69667: PUSH
69668: LD_INT 1
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 3
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 3
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: LIST
69700: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69701: LD_ADDR_VAR 0 55
69705: PUSH
69706: LD_INT 3
69708: PUSH
69709: LD_INT 2
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 2
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69741: LD_ADDR_VAR 0 56
69745: PUSH
69746: LD_INT 1
69748: PUSH
69749: LD_INT 3
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_INT 3
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: NEG
69769: PUSH
69770: LD_INT 2
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: LIST
69781: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69782: LD_ADDR_VAR 0 57
69786: PUSH
69787: LD_INT 2
69789: NEG
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 3
69800: NEG
69801: PUSH
69802: LD_INT 0
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 3
69811: NEG
69812: PUSH
69813: LD_INT 1
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: LIST
69825: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69826: LD_ADDR_VAR 0 58
69830: PUSH
69831: LD_INT 2
69833: NEG
69834: PUSH
69835: LD_INT 3
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: NEG
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 3
69857: NEG
69858: PUSH
69859: LD_INT 3
69861: NEG
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: LIST
69871: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69872: LD_ADDR_VAR 0 59
69876: PUSH
69877: LD_INT 1
69879: NEG
69880: PUSH
69881: LD_INT 2
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 0
69891: PUSH
69892: LD_INT 2
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: LD_INT 1
69905: NEG
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69916: LD_ADDR_VAR 0 60
69920: PUSH
69921: LD_INT 1
69923: PUSH
69924: LD_INT 1
69926: NEG
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 2
69934: PUSH
69935: LD_INT 0
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 2
69944: PUSH
69945: LD_INT 1
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: LIST
69956: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69957: LD_ADDR_VAR 0 61
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 2
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: LD_INT 2
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: LIST
69996: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69997: LD_ADDR_VAR 0 62
70001: PUSH
70002: LD_INT 1
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: LD_INT 2
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: LD_INT 1
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: LIST
70037: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70038: LD_ADDR_VAR 0 63
70042: PUSH
70043: LD_INT 1
70045: NEG
70046: PUSH
70047: LD_INT 1
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 2
70056: NEG
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: NEG
70068: PUSH
70069: LD_INT 1
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: LIST
70081: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70082: LD_ADDR_VAR 0 64
70086: PUSH
70087: LD_INT 1
70089: NEG
70090: PUSH
70091: LD_INT 2
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 2
70101: NEG
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 2
70113: NEG
70114: PUSH
70115: LD_INT 2
70117: NEG
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: ST_TO_ADDR
// end ; 2 :
70128: GO 73394
70130: LD_INT 2
70132: DOUBLE
70133: EQUAL
70134: IFTRUE 70138
70136: GO 73393
70138: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70139: LD_ADDR_VAR 0 29
70143: PUSH
70144: LD_INT 4
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 4
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 5
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 5
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 4
70187: PUSH
70188: LD_INT 1
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 3
70207: PUSH
70208: LD_INT 1
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 3
70218: PUSH
70219: LD_INT 2
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 5
70229: PUSH
70230: LD_INT 2
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 3
70239: PUSH
70240: LD_INT 3
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 3
70249: PUSH
70250: LD_INT 2
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 4
70259: PUSH
70260: LD_INT 3
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 4
70269: PUSH
70270: LD_INT 4
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 3
70279: PUSH
70280: LD_INT 4
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 2
70289: PUSH
70290: LD_INT 3
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 2
70299: PUSH
70300: LD_INT 2
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 4
70309: PUSH
70310: LD_INT 2
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 2
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 0
70329: PUSH
70330: LD_INT 4
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: LD_INT 3
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 1
70349: PUSH
70350: LD_INT 4
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 1
70359: PUSH
70360: LD_INT 5
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: LD_INT 5
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 1
70379: NEG
70380: PUSH
70381: LD_INT 4
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: PUSH
70392: LD_INT 3
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 2
70401: PUSH
70402: LD_INT 5
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 2
70411: NEG
70412: PUSH
70413: LD_INT 3
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 3
70422: NEG
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 3
70433: NEG
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 2
70445: NEG
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 2
70456: NEG
70457: PUSH
70458: LD_INT 1
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 3
70467: NEG
70468: PUSH
70469: LD_INT 1
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 4
70478: NEG
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 4
70489: NEG
70490: PUSH
70491: LD_INT 1
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 4
70501: NEG
70502: PUSH
70503: LD_INT 2
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 2
70513: NEG
70514: PUSH
70515: LD_INT 2
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: NEG
70525: PUSH
70526: LD_INT 4
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 4
70536: NEG
70537: PUSH
70538: LD_INT 5
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 3
70548: NEG
70549: PUSH
70550: LD_INT 4
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 3
70560: NEG
70561: PUSH
70562: LD_INT 3
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 4
70572: NEG
70573: PUSH
70574: LD_INT 3
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 5
70584: NEG
70585: PUSH
70586: LD_INT 4
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 5
70596: NEG
70597: PUSH
70598: LD_INT 5
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 3
70608: NEG
70609: PUSH
70610: LD_INT 5
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 5
70620: NEG
70621: PUSH
70622: LD_INT 3
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70677: LD_ADDR_VAR 0 30
70681: PUSH
70682: LD_INT 4
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 4
70694: PUSH
70695: LD_INT 3
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 5
70704: PUSH
70705: LD_INT 4
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 5
70714: PUSH
70715: LD_INT 5
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 4
70724: PUSH
70725: LD_INT 5
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 3
70734: PUSH
70735: LD_INT 4
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 5
70754: PUSH
70755: LD_INT 3
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 3
70764: PUSH
70765: LD_INT 5
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 0
70774: PUSH
70775: LD_INT 3
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 2
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: LD_INT 3
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: LD_INT 4
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: LD_INT 4
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 1
70824: NEG
70825: PUSH
70826: LD_INT 3
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 1
70835: NEG
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 2
70846: PUSH
70847: LD_INT 4
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 2
70856: NEG
70857: PUSH
70858: LD_INT 2
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 4
70867: NEG
70868: PUSH
70869: LD_INT 0
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 4
70878: NEG
70879: PUSH
70880: LD_INT 1
70882: NEG
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 3
70890: NEG
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 3
70901: NEG
70902: PUSH
70903: LD_INT 1
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 4
70912: NEG
70913: PUSH
70914: LD_INT 1
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 5
70923: NEG
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 5
70934: NEG
70935: PUSH
70936: LD_INT 1
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 5
70946: NEG
70947: PUSH
70948: LD_INT 2
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 3
70958: NEG
70959: PUSH
70960: LD_INT 2
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 3
70969: NEG
70970: PUSH
70971: LD_INT 3
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: NEG
70982: PUSH
70983: LD_INT 4
70985: NEG
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 2
70993: NEG
70994: PUSH
70995: LD_INT 3
70997: NEG
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 2
71005: NEG
71006: PUSH
71007: LD_INT 2
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 3
71017: NEG
71018: PUSH
71019: LD_INT 2
71021: NEG
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 4
71029: NEG
71030: PUSH
71031: LD_INT 3
71033: NEG
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 4
71041: NEG
71042: PUSH
71043: LD_INT 4
71045: NEG
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 2
71053: NEG
71054: PUSH
71055: LD_INT 4
71057: NEG
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 4
71065: NEG
71066: PUSH
71067: LD_INT 2
71069: NEG
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 0
71077: PUSH
71078: LD_INT 4
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: LD_INT 5
71091: NEG
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 1
71099: PUSH
71100: LD_INT 4
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 1
71110: PUSH
71111: LD_INT 3
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 0
71121: PUSH
71122: LD_INT 3
71124: NEG
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 1
71132: NEG
71133: PUSH
71134: LD_INT 4
71136: NEG
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 1
71144: NEG
71145: PUSH
71146: LD_INT 5
71148: NEG
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 2
71156: PUSH
71157: LD_INT 3
71159: NEG
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 2
71167: NEG
71168: PUSH
71169: LD_INT 5
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71224: LD_ADDR_VAR 0 31
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: LD_INT 4
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: LD_INT 3
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: LD_INT 4
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 1
71261: PUSH
71262: LD_INT 5
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 0
71271: PUSH
71272: LD_INT 5
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 1
71281: NEG
71282: PUSH
71283: LD_INT 4
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 1
71292: NEG
71293: PUSH
71294: LD_INT 3
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 2
71303: PUSH
71304: LD_INT 5
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 2
71313: NEG
71314: PUSH
71315: LD_INT 3
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 3
71324: NEG
71325: PUSH
71326: LD_INT 0
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 3
71335: NEG
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 2
71347: NEG
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 2
71358: NEG
71359: PUSH
71360: LD_INT 1
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 3
71369: NEG
71370: PUSH
71371: LD_INT 1
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 4
71380: NEG
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 4
71391: NEG
71392: PUSH
71393: LD_INT 1
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 4
71403: NEG
71404: PUSH
71405: LD_INT 2
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 2
71415: NEG
71416: PUSH
71417: LD_INT 2
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 4
71426: NEG
71427: PUSH
71428: LD_INT 4
71430: NEG
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 4
71438: NEG
71439: PUSH
71440: LD_INT 5
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 3
71450: NEG
71451: PUSH
71452: LD_INT 4
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 3
71462: NEG
71463: PUSH
71464: LD_INT 3
71466: NEG
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 4
71474: NEG
71475: PUSH
71476: LD_INT 3
71478: NEG
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 5
71486: NEG
71487: PUSH
71488: LD_INT 4
71490: NEG
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 5
71498: NEG
71499: PUSH
71500: LD_INT 5
71502: NEG
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 3
71510: NEG
71511: PUSH
71512: LD_INT 5
71514: NEG
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 5
71522: NEG
71523: PUSH
71524: LD_INT 3
71526: NEG
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 0
71534: PUSH
71535: LD_INT 3
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: LD_INT 4
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 1
71556: PUSH
71557: LD_INT 3
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 0
71578: PUSH
71579: LD_INT 2
71581: NEG
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 1
71589: NEG
71590: PUSH
71591: LD_INT 3
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 1
71601: NEG
71602: PUSH
71603: LD_INT 4
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: LD_INT 2
71616: NEG
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 2
71624: NEG
71625: PUSH
71626: LD_INT 4
71628: NEG
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 4
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 4
71646: PUSH
71647: LD_INT 1
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 5
71657: PUSH
71658: LD_INT 0
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 5
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 4
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 3
71687: PUSH
71688: LD_INT 0
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 3
71697: PUSH
71698: LD_INT 1
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 3
71708: PUSH
71709: LD_INT 2
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 5
71719: PUSH
71720: LD_INT 2
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71774: LD_ADDR_VAR 0 32
71778: PUSH
71779: LD_INT 4
71781: NEG
71782: PUSH
71783: LD_INT 0
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 4
71792: NEG
71793: PUSH
71794: LD_INT 1
71796: NEG
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 3
71804: NEG
71805: PUSH
71806: LD_INT 0
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 3
71815: NEG
71816: PUSH
71817: LD_INT 1
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 4
71826: NEG
71827: PUSH
71828: LD_INT 1
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 5
71837: NEG
71838: PUSH
71839: LD_INT 0
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 5
71848: NEG
71849: PUSH
71850: LD_INT 1
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 5
71860: NEG
71861: PUSH
71862: LD_INT 2
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 3
71872: NEG
71873: PUSH
71874: LD_INT 2
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 3
71883: NEG
71884: PUSH
71885: LD_INT 3
71887: NEG
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 3
71895: NEG
71896: PUSH
71897: LD_INT 4
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 2
71907: NEG
71908: PUSH
71909: LD_INT 3
71911: NEG
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 2
71919: NEG
71920: PUSH
71921: LD_INT 2
71923: NEG
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 3
71931: NEG
71932: PUSH
71933: LD_INT 2
71935: NEG
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 4
71943: NEG
71944: PUSH
71945: LD_INT 3
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 4
71955: NEG
71956: PUSH
71957: LD_INT 4
71959: NEG
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 2
71967: NEG
71968: PUSH
71969: LD_INT 4
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 4
71979: NEG
71980: PUSH
71981: LD_INT 2
71983: NEG
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: LD_INT 4
71994: NEG
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 0
72002: PUSH
72003: LD_INT 5
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: LD_INT 4
72016: NEG
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 1
72024: PUSH
72025: LD_INT 3
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 0
72035: PUSH
72036: LD_INT 3
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 1
72046: NEG
72047: PUSH
72048: LD_INT 4
72050: NEG
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: LD_INT 5
72062: NEG
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 2
72070: PUSH
72071: LD_INT 3
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 2
72081: NEG
72082: PUSH
72083: LD_INT 5
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 3
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: LD_INT 3
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 4
72114: PUSH
72115: LD_INT 0
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 4
72124: PUSH
72125: LD_INT 1
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 3
72134: PUSH
72135: LD_INT 1
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 2
72144: PUSH
72145: LD_INT 0
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 2
72154: PUSH
72155: LD_INT 1
72157: NEG
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 2
72165: PUSH
72166: LD_INT 2
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 4
72176: PUSH
72177: LD_INT 2
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 4
72186: PUSH
72187: LD_INT 4
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 4
72196: PUSH
72197: LD_INT 3
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 5
72206: PUSH
72207: LD_INT 4
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 5
72216: PUSH
72217: LD_INT 5
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 4
72226: PUSH
72227: LD_INT 5
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 3
72236: PUSH
72237: LD_INT 4
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 3
72246: PUSH
72247: LD_INT 3
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 5
72256: PUSH
72257: LD_INT 3
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: PUSH
72264: LD_INT 3
72266: PUSH
72267: LD_INT 5
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72321: LD_ADDR_VAR 0 33
72325: PUSH
72326: LD_INT 4
72328: NEG
72329: PUSH
72330: LD_INT 4
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 4
72340: NEG
72341: PUSH
72342: LD_INT 5
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 3
72352: NEG
72353: PUSH
72354: LD_INT 4
72356: NEG
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 3
72364: NEG
72365: PUSH
72366: LD_INT 3
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 4
72376: NEG
72377: PUSH
72378: LD_INT 3
72380: NEG
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 5
72388: NEG
72389: PUSH
72390: LD_INT 4
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 5
72400: NEG
72401: PUSH
72402: LD_INT 5
72404: NEG
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 3
72412: NEG
72413: PUSH
72414: LD_INT 5
72416: NEG
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 5
72424: NEG
72425: PUSH
72426: LD_INT 3
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 0
72436: PUSH
72437: LD_INT 3
72439: NEG
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: LD_INT 4
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 1
72458: PUSH
72459: LD_INT 3
72461: NEG
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 1
72469: PUSH
72470: LD_INT 2
72472: NEG
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 0
72480: PUSH
72481: LD_INT 2
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 1
72491: NEG
72492: PUSH
72493: LD_INT 3
72495: NEG
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 1
72503: NEG
72504: PUSH
72505: LD_INT 4
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 2
72515: PUSH
72516: LD_INT 2
72518: NEG
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: NEG
72527: PUSH
72528: LD_INT 4
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 4
72538: PUSH
72539: LD_INT 0
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 4
72548: PUSH
72549: LD_INT 1
72551: NEG
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 5
72559: PUSH
72560: LD_INT 0
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 5
72569: PUSH
72570: LD_INT 1
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 4
72579: PUSH
72580: LD_INT 1
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 3
72589: PUSH
72590: LD_INT 0
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 3
72599: PUSH
72600: LD_INT 1
72602: NEG
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 3
72610: PUSH
72611: LD_INT 2
72613: NEG
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 5
72621: PUSH
72622: LD_INT 2
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 3
72631: PUSH
72632: LD_INT 3
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 3
72641: PUSH
72642: LD_INT 2
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 4
72651: PUSH
72652: LD_INT 3
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 4
72661: PUSH
72662: LD_INT 4
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 3
72671: PUSH
72672: LD_INT 4
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 2
72681: PUSH
72682: LD_INT 3
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 2
72691: PUSH
72692: LD_INT 2
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 4
72701: PUSH
72702: LD_INT 2
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 2
72711: PUSH
72712: LD_INT 4
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 0
72721: PUSH
72722: LD_INT 4
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 0
72731: PUSH
72732: LD_INT 3
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: LD_INT 1
72741: PUSH
72742: LD_INT 4
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 1
72751: PUSH
72752: LD_INT 5
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 0
72761: PUSH
72762: LD_INT 5
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 1
72771: NEG
72772: PUSH
72773: LD_INT 4
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 1
72782: NEG
72783: PUSH
72784: LD_INT 3
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 2
72793: PUSH
72794: LD_INT 5
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 2
72803: NEG
72804: PUSH
72805: LD_INT 3
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72859: LD_ADDR_VAR 0 34
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: LD_INT 4
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 0
72877: PUSH
72878: LD_INT 5
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 1
72888: PUSH
72889: LD_INT 4
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 1
72899: PUSH
72900: LD_INT 3
72902: NEG
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 0
72910: PUSH
72911: LD_INT 3
72913: NEG
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 1
72921: NEG
72922: PUSH
72923: LD_INT 4
72925: NEG
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 1
72933: NEG
72934: PUSH
72935: LD_INT 5
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 2
72945: PUSH
72946: LD_INT 3
72948: NEG
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 2
72956: NEG
72957: PUSH
72958: LD_INT 5
72960: NEG
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 3
72968: PUSH
72969: LD_INT 0
72971: PUSH
72972: EMPTY
72973: LIST
72974: LIST
72975: PUSH
72976: LD_INT 3
72978: PUSH
72979: LD_INT 1
72981: NEG
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 4
72989: PUSH
72990: LD_INT 0
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 4
72999: PUSH
73000: LD_INT 1
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 3
73009: PUSH
73010: LD_INT 1
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 2
73019: PUSH
73020: LD_INT 0
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 2
73029: PUSH
73030: LD_INT 1
73032: NEG
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 2
73043: NEG
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 4
73051: PUSH
73052: LD_INT 2
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 4
73061: PUSH
73062: LD_INT 4
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 4
73071: PUSH
73072: LD_INT 3
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 5
73081: PUSH
73082: LD_INT 4
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 5
73091: PUSH
73092: LD_INT 5
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 4
73101: PUSH
73102: LD_INT 5
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 3
73111: PUSH
73112: LD_INT 4
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 3
73121: PUSH
73122: LD_INT 3
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 5
73131: PUSH
73132: LD_INT 3
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: LD_INT 3
73141: PUSH
73142: LD_INT 5
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: PUSH
73149: LD_INT 0
73151: PUSH
73152: LD_INT 3
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 0
73161: PUSH
73162: LD_INT 2
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 1
73171: PUSH
73172: LD_INT 3
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 1
73181: PUSH
73182: LD_INT 4
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 0
73191: PUSH
73192: LD_INT 4
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 1
73201: NEG
73202: PUSH
73203: LD_INT 3
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 1
73212: NEG
73213: PUSH
73214: LD_INT 2
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: LD_INT 4
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 2
73233: NEG
73234: PUSH
73235: LD_INT 2
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 4
73244: NEG
73245: PUSH
73246: LD_INT 0
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 4
73255: NEG
73256: PUSH
73257: LD_INT 1
73259: NEG
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 3
73267: NEG
73268: PUSH
73269: LD_INT 0
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 3
73278: NEG
73279: PUSH
73280: LD_INT 1
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 4
73289: NEG
73290: PUSH
73291: LD_INT 1
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 5
73300: NEG
73301: PUSH
73302: LD_INT 0
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 5
73311: NEG
73312: PUSH
73313: LD_INT 1
73315: NEG
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 5
73323: NEG
73324: PUSH
73325: LD_INT 2
73327: NEG
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: LD_INT 3
73335: NEG
73336: PUSH
73337: LD_INT 2
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: ST_TO_ADDR
// end ; end ;
73391: GO 73394
73393: POP
// case btype of b_depot , b_warehouse :
73394: LD_VAR 0 1
73398: PUSH
73399: LD_INT 0
73401: DOUBLE
73402: EQUAL
73403: IFTRUE 73413
73405: LD_INT 1
73407: DOUBLE
73408: EQUAL
73409: IFTRUE 73413
73411: GO 73614
73413: POP
// case nation of nation_american :
73414: LD_VAR 0 5
73418: PUSH
73419: LD_INT 1
73421: DOUBLE
73422: EQUAL
73423: IFTRUE 73427
73425: GO 73483
73427: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73428: LD_ADDR_VAR 0 9
73432: PUSH
73433: LD_VAR 0 11
73437: PUSH
73438: LD_VAR 0 12
73442: PUSH
73443: LD_VAR 0 13
73447: PUSH
73448: LD_VAR 0 14
73452: PUSH
73453: LD_VAR 0 15
73457: PUSH
73458: LD_VAR 0 16
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: PUSH
73471: LD_VAR 0 4
73475: PUSH
73476: LD_INT 1
73478: PLUS
73479: ARRAY
73480: ST_TO_ADDR
73481: GO 73612
73483: LD_INT 2
73485: DOUBLE
73486: EQUAL
73487: IFTRUE 73491
73489: GO 73547
73491: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73492: LD_ADDR_VAR 0 9
73496: PUSH
73497: LD_VAR 0 17
73501: PUSH
73502: LD_VAR 0 18
73506: PUSH
73507: LD_VAR 0 19
73511: PUSH
73512: LD_VAR 0 20
73516: PUSH
73517: LD_VAR 0 21
73521: PUSH
73522: LD_VAR 0 22
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: PUSH
73535: LD_VAR 0 4
73539: PUSH
73540: LD_INT 1
73542: PLUS
73543: ARRAY
73544: ST_TO_ADDR
73545: GO 73612
73547: LD_INT 3
73549: DOUBLE
73550: EQUAL
73551: IFTRUE 73555
73553: GO 73611
73555: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73556: LD_ADDR_VAR 0 9
73560: PUSH
73561: LD_VAR 0 23
73565: PUSH
73566: LD_VAR 0 24
73570: PUSH
73571: LD_VAR 0 25
73575: PUSH
73576: LD_VAR 0 26
73580: PUSH
73581: LD_VAR 0 27
73585: PUSH
73586: LD_VAR 0 28
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: PUSH
73599: LD_VAR 0 4
73603: PUSH
73604: LD_INT 1
73606: PLUS
73607: ARRAY
73608: ST_TO_ADDR
73609: GO 73612
73611: POP
73612: GO 74167
73614: LD_INT 2
73616: DOUBLE
73617: EQUAL
73618: IFTRUE 73628
73620: LD_INT 3
73622: DOUBLE
73623: EQUAL
73624: IFTRUE 73628
73626: GO 73684
73628: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73629: LD_ADDR_VAR 0 9
73633: PUSH
73634: LD_VAR 0 29
73638: PUSH
73639: LD_VAR 0 30
73643: PUSH
73644: LD_VAR 0 31
73648: PUSH
73649: LD_VAR 0 32
73653: PUSH
73654: LD_VAR 0 33
73658: PUSH
73659: LD_VAR 0 34
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: PUSH
73672: LD_VAR 0 4
73676: PUSH
73677: LD_INT 1
73679: PLUS
73680: ARRAY
73681: ST_TO_ADDR
73682: GO 74167
73684: LD_INT 16
73686: DOUBLE
73687: EQUAL
73688: IFTRUE 73746
73690: LD_INT 17
73692: DOUBLE
73693: EQUAL
73694: IFTRUE 73746
73696: LD_INT 18
73698: DOUBLE
73699: EQUAL
73700: IFTRUE 73746
73702: LD_INT 19
73704: DOUBLE
73705: EQUAL
73706: IFTRUE 73746
73708: LD_INT 22
73710: DOUBLE
73711: EQUAL
73712: IFTRUE 73746
73714: LD_INT 20
73716: DOUBLE
73717: EQUAL
73718: IFTRUE 73746
73720: LD_INT 21
73722: DOUBLE
73723: EQUAL
73724: IFTRUE 73746
73726: LD_INT 23
73728: DOUBLE
73729: EQUAL
73730: IFTRUE 73746
73732: LD_INT 24
73734: DOUBLE
73735: EQUAL
73736: IFTRUE 73746
73738: LD_INT 25
73740: DOUBLE
73741: EQUAL
73742: IFTRUE 73746
73744: GO 73802
73746: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73747: LD_ADDR_VAR 0 9
73751: PUSH
73752: LD_VAR 0 35
73756: PUSH
73757: LD_VAR 0 36
73761: PUSH
73762: LD_VAR 0 37
73766: PUSH
73767: LD_VAR 0 38
73771: PUSH
73772: LD_VAR 0 39
73776: PUSH
73777: LD_VAR 0 40
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: PUSH
73790: LD_VAR 0 4
73794: PUSH
73795: LD_INT 1
73797: PLUS
73798: ARRAY
73799: ST_TO_ADDR
73800: GO 74167
73802: LD_INT 6
73804: DOUBLE
73805: EQUAL
73806: IFTRUE 73858
73808: LD_INT 7
73810: DOUBLE
73811: EQUAL
73812: IFTRUE 73858
73814: LD_INT 8
73816: DOUBLE
73817: EQUAL
73818: IFTRUE 73858
73820: LD_INT 13
73822: DOUBLE
73823: EQUAL
73824: IFTRUE 73858
73826: LD_INT 12
73828: DOUBLE
73829: EQUAL
73830: IFTRUE 73858
73832: LD_INT 15
73834: DOUBLE
73835: EQUAL
73836: IFTRUE 73858
73838: LD_INT 11
73840: DOUBLE
73841: EQUAL
73842: IFTRUE 73858
73844: LD_INT 14
73846: DOUBLE
73847: EQUAL
73848: IFTRUE 73858
73850: LD_INT 10
73852: DOUBLE
73853: EQUAL
73854: IFTRUE 73858
73856: GO 73914
73858: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73859: LD_ADDR_VAR 0 9
73863: PUSH
73864: LD_VAR 0 41
73868: PUSH
73869: LD_VAR 0 42
73873: PUSH
73874: LD_VAR 0 43
73878: PUSH
73879: LD_VAR 0 44
73883: PUSH
73884: LD_VAR 0 45
73888: PUSH
73889: LD_VAR 0 46
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: PUSH
73902: LD_VAR 0 4
73906: PUSH
73907: LD_INT 1
73909: PLUS
73910: ARRAY
73911: ST_TO_ADDR
73912: GO 74167
73914: LD_INT 36
73916: DOUBLE
73917: EQUAL
73918: IFTRUE 73922
73920: GO 73978
73922: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73923: LD_ADDR_VAR 0 9
73927: PUSH
73928: LD_VAR 0 47
73932: PUSH
73933: LD_VAR 0 48
73937: PUSH
73938: LD_VAR 0 49
73942: PUSH
73943: LD_VAR 0 50
73947: PUSH
73948: LD_VAR 0 51
73952: PUSH
73953: LD_VAR 0 52
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: PUSH
73966: LD_VAR 0 4
73970: PUSH
73971: LD_INT 1
73973: PLUS
73974: ARRAY
73975: ST_TO_ADDR
73976: GO 74167
73978: LD_INT 4
73980: DOUBLE
73981: EQUAL
73982: IFTRUE 74004
73984: LD_INT 5
73986: DOUBLE
73987: EQUAL
73988: IFTRUE 74004
73990: LD_INT 34
73992: DOUBLE
73993: EQUAL
73994: IFTRUE 74004
73996: LD_INT 37
73998: DOUBLE
73999: EQUAL
74000: IFTRUE 74004
74002: GO 74060
74004: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74005: LD_ADDR_VAR 0 9
74009: PUSH
74010: LD_VAR 0 53
74014: PUSH
74015: LD_VAR 0 54
74019: PUSH
74020: LD_VAR 0 55
74024: PUSH
74025: LD_VAR 0 56
74029: PUSH
74030: LD_VAR 0 57
74034: PUSH
74035: LD_VAR 0 58
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: PUSH
74048: LD_VAR 0 4
74052: PUSH
74053: LD_INT 1
74055: PLUS
74056: ARRAY
74057: ST_TO_ADDR
74058: GO 74167
74060: LD_INT 31
74062: DOUBLE
74063: EQUAL
74064: IFTRUE 74110
74066: LD_INT 32
74068: DOUBLE
74069: EQUAL
74070: IFTRUE 74110
74072: LD_INT 33
74074: DOUBLE
74075: EQUAL
74076: IFTRUE 74110
74078: LD_INT 27
74080: DOUBLE
74081: EQUAL
74082: IFTRUE 74110
74084: LD_INT 26
74086: DOUBLE
74087: EQUAL
74088: IFTRUE 74110
74090: LD_INT 28
74092: DOUBLE
74093: EQUAL
74094: IFTRUE 74110
74096: LD_INT 29
74098: DOUBLE
74099: EQUAL
74100: IFTRUE 74110
74102: LD_INT 30
74104: DOUBLE
74105: EQUAL
74106: IFTRUE 74110
74108: GO 74166
74110: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74111: LD_ADDR_VAR 0 9
74115: PUSH
74116: LD_VAR 0 59
74120: PUSH
74121: LD_VAR 0 60
74125: PUSH
74126: LD_VAR 0 61
74130: PUSH
74131: LD_VAR 0 62
74135: PUSH
74136: LD_VAR 0 63
74140: PUSH
74141: LD_VAR 0 64
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: PUSH
74154: LD_VAR 0 4
74158: PUSH
74159: LD_INT 1
74161: PLUS
74162: ARRAY
74163: ST_TO_ADDR
74164: GO 74167
74166: POP
// temp_list2 = [ ] ;
74167: LD_ADDR_VAR 0 10
74171: PUSH
74172: EMPTY
74173: ST_TO_ADDR
// for i in temp_list do
74174: LD_ADDR_VAR 0 8
74178: PUSH
74179: LD_VAR 0 9
74183: PUSH
74184: FOR_IN
74185: IFFALSE 74237
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74187: LD_ADDR_VAR 0 10
74191: PUSH
74192: LD_VAR 0 10
74196: PUSH
74197: LD_VAR 0 8
74201: PUSH
74202: LD_INT 1
74204: ARRAY
74205: PUSH
74206: LD_VAR 0 2
74210: PLUS
74211: PUSH
74212: LD_VAR 0 8
74216: PUSH
74217: LD_INT 2
74219: ARRAY
74220: PUSH
74221: LD_VAR 0 3
74225: PLUS
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: EMPTY
74232: LIST
74233: ADD
74234: ST_TO_ADDR
74235: GO 74184
74237: POP
74238: POP
// result = temp_list2 ;
74239: LD_ADDR_VAR 0 7
74243: PUSH
74244: LD_VAR 0 10
74248: ST_TO_ADDR
// end ;
74249: LD_VAR 0 7
74253: RET
// export function EnemyInRange ( unit , dist ) ; begin
74254: LD_INT 0
74256: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74257: LD_ADDR_VAR 0 3
74261: PUSH
74262: LD_VAR 0 1
74266: PPUSH
74267: CALL_OW 255
74271: PPUSH
74272: LD_VAR 0 1
74276: PPUSH
74277: CALL_OW 250
74281: PPUSH
74282: LD_VAR 0 1
74286: PPUSH
74287: CALL_OW 251
74291: PPUSH
74292: LD_VAR 0 2
74296: PPUSH
74297: CALL 47627 0 4
74301: PUSH
74302: LD_INT 4
74304: ARRAY
74305: ST_TO_ADDR
// end ;
74306: LD_VAR 0 3
74310: RET
// export function PlayerSeeMe ( unit ) ; begin
74311: LD_INT 0
74313: PPUSH
// result := See ( your_side , unit ) ;
74314: LD_ADDR_VAR 0 2
74318: PUSH
74319: LD_OWVAR 2
74323: PPUSH
74324: LD_VAR 0 1
74328: PPUSH
74329: CALL_OW 292
74333: ST_TO_ADDR
// end ;
74334: LD_VAR 0 2
74338: RET
// export function ReverseDir ( unit ) ; begin
74339: LD_INT 0
74341: PPUSH
// if not unit then
74342: LD_VAR 0 1
74346: NOT
74347: IFFALSE 74351
// exit ;
74349: GO 74374
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74351: LD_ADDR_VAR 0 2
74355: PUSH
74356: LD_VAR 0 1
74360: PPUSH
74361: CALL_OW 254
74365: PUSH
74366: LD_INT 3
74368: PLUS
74369: PUSH
74370: LD_INT 6
74372: MOD
74373: ST_TO_ADDR
// end ;
74374: LD_VAR 0 2
74378: RET
// export function ReverseArray ( array ) ; var i ; begin
74379: LD_INT 0
74381: PPUSH
74382: PPUSH
// if not array then
74383: LD_VAR 0 1
74387: NOT
74388: IFFALSE 74392
// exit ;
74390: GO 74447
// result := [ ] ;
74392: LD_ADDR_VAR 0 2
74396: PUSH
74397: EMPTY
74398: ST_TO_ADDR
// for i := array downto 1 do
74399: LD_ADDR_VAR 0 3
74403: PUSH
74404: DOUBLE
74405: LD_VAR 0 1
74409: INC
74410: ST_TO_ADDR
74411: LD_INT 1
74413: PUSH
74414: FOR_DOWNTO
74415: IFFALSE 74445
// result := Join ( result , array [ i ] ) ;
74417: LD_ADDR_VAR 0 2
74421: PUSH
74422: LD_VAR 0 2
74426: PPUSH
74427: LD_VAR 0 1
74431: PUSH
74432: LD_VAR 0 3
74436: ARRAY
74437: PPUSH
74438: CALL 79112 0 2
74442: ST_TO_ADDR
74443: GO 74414
74445: POP
74446: POP
// end ;
74447: LD_VAR 0 2
74451: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74452: LD_INT 0
74454: PPUSH
74455: PPUSH
74456: PPUSH
74457: PPUSH
74458: PPUSH
74459: PPUSH
// if not unit or not hexes then
74460: LD_VAR 0 1
74464: NOT
74465: PUSH
74466: LD_VAR 0 2
74470: NOT
74471: OR
74472: IFFALSE 74476
// exit ;
74474: GO 74599
// dist := 9999 ;
74476: LD_ADDR_VAR 0 5
74480: PUSH
74481: LD_INT 9999
74483: ST_TO_ADDR
// for i = 1 to hexes do
74484: LD_ADDR_VAR 0 4
74488: PUSH
74489: DOUBLE
74490: LD_INT 1
74492: DEC
74493: ST_TO_ADDR
74494: LD_VAR 0 2
74498: PUSH
74499: FOR_TO
74500: IFFALSE 74587
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74502: LD_ADDR_VAR 0 6
74506: PUSH
74507: LD_VAR 0 1
74511: PPUSH
74512: LD_VAR 0 2
74516: PUSH
74517: LD_VAR 0 4
74521: ARRAY
74522: PUSH
74523: LD_INT 1
74525: ARRAY
74526: PPUSH
74527: LD_VAR 0 2
74531: PUSH
74532: LD_VAR 0 4
74536: ARRAY
74537: PUSH
74538: LD_INT 2
74540: ARRAY
74541: PPUSH
74542: CALL_OW 297
74546: ST_TO_ADDR
// if tdist < dist then
74547: LD_VAR 0 6
74551: PUSH
74552: LD_VAR 0 5
74556: LESS
74557: IFFALSE 74585
// begin hex := hexes [ i ] ;
74559: LD_ADDR_VAR 0 8
74563: PUSH
74564: LD_VAR 0 2
74568: PUSH
74569: LD_VAR 0 4
74573: ARRAY
74574: ST_TO_ADDR
// dist := tdist ;
74575: LD_ADDR_VAR 0 5
74579: PUSH
74580: LD_VAR 0 6
74584: ST_TO_ADDR
// end ; end ;
74585: GO 74499
74587: POP
74588: POP
// result := hex ;
74589: LD_ADDR_VAR 0 3
74593: PUSH
74594: LD_VAR 0 8
74598: ST_TO_ADDR
// end ;
74599: LD_VAR 0 3
74603: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74604: LD_INT 0
74606: PPUSH
74607: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74608: LD_VAR 0 1
74612: NOT
74613: PUSH
74614: LD_VAR 0 1
74618: PUSH
74619: LD_INT 21
74621: PUSH
74622: LD_INT 2
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 23
74631: PUSH
74632: LD_INT 2
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PPUSH
74643: CALL_OW 69
74647: IN
74648: NOT
74649: OR
74650: IFFALSE 74654
// exit ;
74652: GO 74701
// for i = 1 to 3 do
74654: LD_ADDR_VAR 0 3
74658: PUSH
74659: DOUBLE
74660: LD_INT 1
74662: DEC
74663: ST_TO_ADDR
74664: LD_INT 3
74666: PUSH
74667: FOR_TO
74668: IFFALSE 74699
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74670: LD_VAR 0 1
74674: PPUSH
74675: CALL_OW 250
74679: PPUSH
74680: LD_VAR 0 1
74684: PPUSH
74685: CALL_OW 251
74689: PPUSH
74690: LD_INT 1
74692: PPUSH
74693: CALL_OW 453
74697: GO 74667
74699: POP
74700: POP
// end ;
74701: LD_VAR 0 2
74705: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74706: LD_INT 0
74708: PPUSH
74709: PPUSH
74710: PPUSH
74711: PPUSH
74712: PPUSH
74713: PPUSH
// if not unit or not enemy_unit then
74714: LD_VAR 0 1
74718: NOT
74719: PUSH
74720: LD_VAR 0 2
74724: NOT
74725: OR
74726: IFFALSE 74730
// exit ;
74728: GO 75197
// if GetLives ( i ) < 250 then
74730: LD_VAR 0 4
74734: PPUSH
74735: CALL_OW 256
74739: PUSH
74740: LD_INT 250
74742: LESS
74743: IFFALSE 74756
// begin ComAutodestruct ( i ) ;
74745: LD_VAR 0 4
74749: PPUSH
74750: CALL 74604 0 1
// exit ;
74754: GO 75197
// end ; x := GetX ( enemy_unit ) ;
74756: LD_ADDR_VAR 0 7
74760: PUSH
74761: LD_VAR 0 2
74765: PPUSH
74766: CALL_OW 250
74770: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74771: LD_ADDR_VAR 0 8
74775: PUSH
74776: LD_VAR 0 2
74780: PPUSH
74781: CALL_OW 251
74785: ST_TO_ADDR
// if not x or not y then
74786: LD_VAR 0 7
74790: NOT
74791: PUSH
74792: LD_VAR 0 8
74796: NOT
74797: OR
74798: IFFALSE 74802
// exit ;
74800: GO 75197
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74802: LD_ADDR_VAR 0 6
74806: PUSH
74807: LD_VAR 0 7
74811: PPUSH
74812: LD_INT 0
74814: PPUSH
74815: LD_INT 4
74817: PPUSH
74818: CALL_OW 272
74822: PUSH
74823: LD_VAR 0 8
74827: PPUSH
74828: LD_INT 0
74830: PPUSH
74831: LD_INT 4
74833: PPUSH
74834: CALL_OW 273
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PUSH
74843: LD_VAR 0 7
74847: PPUSH
74848: LD_INT 1
74850: PPUSH
74851: LD_INT 4
74853: PPUSH
74854: CALL_OW 272
74858: PUSH
74859: LD_VAR 0 8
74863: PPUSH
74864: LD_INT 1
74866: PPUSH
74867: LD_INT 4
74869: PPUSH
74870: CALL_OW 273
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_VAR 0 7
74883: PPUSH
74884: LD_INT 2
74886: PPUSH
74887: LD_INT 4
74889: PPUSH
74890: CALL_OW 272
74894: PUSH
74895: LD_VAR 0 8
74899: PPUSH
74900: LD_INT 2
74902: PPUSH
74903: LD_INT 4
74905: PPUSH
74906: CALL_OW 273
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_VAR 0 7
74919: PPUSH
74920: LD_INT 3
74922: PPUSH
74923: LD_INT 4
74925: PPUSH
74926: CALL_OW 272
74930: PUSH
74931: LD_VAR 0 8
74935: PPUSH
74936: LD_INT 3
74938: PPUSH
74939: LD_INT 4
74941: PPUSH
74942: CALL_OW 273
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: LD_VAR 0 7
74955: PPUSH
74956: LD_INT 4
74958: PPUSH
74959: LD_INT 4
74961: PPUSH
74962: CALL_OW 272
74966: PUSH
74967: LD_VAR 0 8
74971: PPUSH
74972: LD_INT 4
74974: PPUSH
74975: LD_INT 4
74977: PPUSH
74978: CALL_OW 273
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_VAR 0 7
74991: PPUSH
74992: LD_INT 5
74994: PPUSH
74995: LD_INT 4
74997: PPUSH
74998: CALL_OW 272
75002: PUSH
75003: LD_VAR 0 8
75007: PPUSH
75008: LD_INT 5
75010: PPUSH
75011: LD_INT 4
75013: PPUSH
75014: CALL_OW 273
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: ST_TO_ADDR
// for i = tmp downto 1 do
75031: LD_ADDR_VAR 0 4
75035: PUSH
75036: DOUBLE
75037: LD_VAR 0 6
75041: INC
75042: ST_TO_ADDR
75043: LD_INT 1
75045: PUSH
75046: FOR_DOWNTO
75047: IFFALSE 75148
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75049: LD_VAR 0 6
75053: PUSH
75054: LD_VAR 0 4
75058: ARRAY
75059: PUSH
75060: LD_INT 1
75062: ARRAY
75063: PPUSH
75064: LD_VAR 0 6
75068: PUSH
75069: LD_VAR 0 4
75073: ARRAY
75074: PUSH
75075: LD_INT 2
75077: ARRAY
75078: PPUSH
75079: CALL_OW 488
75083: NOT
75084: PUSH
75085: LD_VAR 0 6
75089: PUSH
75090: LD_VAR 0 4
75094: ARRAY
75095: PUSH
75096: LD_INT 1
75098: ARRAY
75099: PPUSH
75100: LD_VAR 0 6
75104: PUSH
75105: LD_VAR 0 4
75109: ARRAY
75110: PUSH
75111: LD_INT 2
75113: ARRAY
75114: PPUSH
75115: CALL_OW 428
75119: PUSH
75120: LD_INT 0
75122: NONEQUAL
75123: OR
75124: IFFALSE 75146
// tmp := Delete ( tmp , i ) ;
75126: LD_ADDR_VAR 0 6
75130: PUSH
75131: LD_VAR 0 6
75135: PPUSH
75136: LD_VAR 0 4
75140: PPUSH
75141: CALL_OW 3
75145: ST_TO_ADDR
75146: GO 75046
75148: POP
75149: POP
// j := GetClosestHex ( unit , tmp ) ;
75150: LD_ADDR_VAR 0 5
75154: PUSH
75155: LD_VAR 0 1
75159: PPUSH
75160: LD_VAR 0 6
75164: PPUSH
75165: CALL 74452 0 2
75169: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75170: LD_VAR 0 1
75174: PPUSH
75175: LD_VAR 0 5
75179: PUSH
75180: LD_INT 1
75182: ARRAY
75183: PPUSH
75184: LD_VAR 0 5
75188: PUSH
75189: LD_INT 2
75191: ARRAY
75192: PPUSH
75193: CALL_OW 111
// end ;
75197: LD_VAR 0 3
75201: RET
// export function PrepareApemanSoldier ( ) ; begin
75202: LD_INT 0
75204: PPUSH
// uc_nation := 0 ;
75205: LD_ADDR_OWVAR 21
75209: PUSH
75210: LD_INT 0
75212: ST_TO_ADDR
// hc_sex := sex_male ;
75213: LD_ADDR_OWVAR 27
75217: PUSH
75218: LD_INT 1
75220: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75221: LD_ADDR_OWVAR 28
75225: PUSH
75226: LD_INT 15
75228: ST_TO_ADDR
// hc_gallery :=  ;
75229: LD_ADDR_OWVAR 33
75233: PUSH
75234: LD_STRING 
75236: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75237: LD_ADDR_OWVAR 31
75241: PUSH
75242: LD_INT 0
75244: PPUSH
75245: LD_INT 3
75247: PPUSH
75248: CALL_OW 12
75252: PUSH
75253: LD_INT 0
75255: PPUSH
75256: LD_INT 3
75258: PPUSH
75259: CALL_OW 12
75263: PUSH
75264: LD_INT 0
75266: PUSH
75267: LD_INT 0
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: ST_TO_ADDR
// end ;
75276: LD_VAR 0 1
75280: RET
// export function PrepareApemanEngineer ( ) ; begin
75281: LD_INT 0
75283: PPUSH
// uc_nation := 0 ;
75284: LD_ADDR_OWVAR 21
75288: PUSH
75289: LD_INT 0
75291: ST_TO_ADDR
// hc_sex := sex_male ;
75292: LD_ADDR_OWVAR 27
75296: PUSH
75297: LD_INT 1
75299: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75300: LD_ADDR_OWVAR 28
75304: PUSH
75305: LD_INT 16
75307: ST_TO_ADDR
// hc_gallery :=  ;
75308: LD_ADDR_OWVAR 33
75312: PUSH
75313: LD_STRING 
75315: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75316: LD_ADDR_OWVAR 31
75320: PUSH
75321: LD_INT 0
75323: PPUSH
75324: LD_INT 3
75326: PPUSH
75327: CALL_OW 12
75331: PUSH
75332: LD_INT 0
75334: PPUSH
75335: LD_INT 3
75337: PPUSH
75338: CALL_OW 12
75342: PUSH
75343: LD_INT 0
75345: PUSH
75346: LD_INT 0
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: ST_TO_ADDR
// end ;
75355: LD_VAR 0 1
75359: RET
// export function PrepareApeman ( agressivity ) ; begin
75360: LD_INT 0
75362: PPUSH
// uc_side := 0 ;
75363: LD_ADDR_OWVAR 20
75367: PUSH
75368: LD_INT 0
75370: ST_TO_ADDR
// uc_nation := 0 ;
75371: LD_ADDR_OWVAR 21
75375: PUSH
75376: LD_INT 0
75378: ST_TO_ADDR
// hc_sex := sex_male ;
75379: LD_ADDR_OWVAR 27
75383: PUSH
75384: LD_INT 1
75386: ST_TO_ADDR
// hc_class := class_apeman ;
75387: LD_ADDR_OWVAR 28
75391: PUSH
75392: LD_INT 12
75394: ST_TO_ADDR
// hc_gallery :=  ;
75395: LD_ADDR_OWVAR 33
75399: PUSH
75400: LD_STRING 
75402: ST_TO_ADDR
// if agressivity = 0 then
75403: LD_VAR 0 1
75407: PUSH
75408: LD_INT 0
75410: EQUAL
75411: IFFALSE 75423
// hc_agressivity := 0 else
75413: LD_ADDR_OWVAR 35
75417: PUSH
75418: LD_INT 0
75420: ST_TO_ADDR
75421: GO 75444
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75423: LD_ADDR_OWVAR 35
75427: PUSH
75428: LD_VAR 0 1
75432: NEG
75433: PPUSH
75434: LD_VAR 0 1
75438: PPUSH
75439: CALL_OW 12
75443: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75444: LD_ADDR_OWVAR 31
75448: PUSH
75449: LD_INT 0
75451: PPUSH
75452: LD_INT 3
75454: PPUSH
75455: CALL_OW 12
75459: PUSH
75460: LD_INT 0
75462: PPUSH
75463: LD_INT 3
75465: PPUSH
75466: CALL_OW 12
75470: PUSH
75471: LD_INT 0
75473: PUSH
75474: LD_INT 0
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: ST_TO_ADDR
// end ;
75483: LD_VAR 0 2
75487: RET
// export function PrepareTiger ( agressivity ) ; begin
75488: LD_INT 0
75490: PPUSH
// uc_side := 0 ;
75491: LD_ADDR_OWVAR 20
75495: PUSH
75496: LD_INT 0
75498: ST_TO_ADDR
// uc_nation := 0 ;
75499: LD_ADDR_OWVAR 21
75503: PUSH
75504: LD_INT 0
75506: ST_TO_ADDR
// hc_class := class_tiger ;
75507: LD_ADDR_OWVAR 28
75511: PUSH
75512: LD_INT 14
75514: ST_TO_ADDR
// hc_gallery :=  ;
75515: LD_ADDR_OWVAR 33
75519: PUSH
75520: LD_STRING 
75522: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75523: LD_ADDR_OWVAR 35
75527: PUSH
75528: LD_VAR 0 1
75532: NEG
75533: PPUSH
75534: LD_VAR 0 1
75538: PPUSH
75539: CALL_OW 12
75543: ST_TO_ADDR
// end ;
75544: LD_VAR 0 2
75548: RET
// export function PrepareEnchidna ( ) ; begin
75549: LD_INT 0
75551: PPUSH
// uc_side := 0 ;
75552: LD_ADDR_OWVAR 20
75556: PUSH
75557: LD_INT 0
75559: ST_TO_ADDR
// uc_nation := 0 ;
75560: LD_ADDR_OWVAR 21
75564: PUSH
75565: LD_INT 0
75567: ST_TO_ADDR
// hc_class := class_baggie ;
75568: LD_ADDR_OWVAR 28
75572: PUSH
75573: LD_INT 13
75575: ST_TO_ADDR
// hc_gallery :=  ;
75576: LD_ADDR_OWVAR 33
75580: PUSH
75581: LD_STRING 
75583: ST_TO_ADDR
// end ;
75584: LD_VAR 0 1
75588: RET
// export function PrepareFrog ( ) ; begin
75589: LD_INT 0
75591: PPUSH
// uc_side := 0 ;
75592: LD_ADDR_OWVAR 20
75596: PUSH
75597: LD_INT 0
75599: ST_TO_ADDR
// uc_nation := 0 ;
75600: LD_ADDR_OWVAR 21
75604: PUSH
75605: LD_INT 0
75607: ST_TO_ADDR
// hc_class := class_frog ;
75608: LD_ADDR_OWVAR 28
75612: PUSH
75613: LD_INT 19
75615: ST_TO_ADDR
// hc_gallery :=  ;
75616: LD_ADDR_OWVAR 33
75620: PUSH
75621: LD_STRING 
75623: ST_TO_ADDR
// end ;
75624: LD_VAR 0 1
75628: RET
// export function PrepareFish ( ) ; begin
75629: LD_INT 0
75631: PPUSH
// uc_side := 0 ;
75632: LD_ADDR_OWVAR 20
75636: PUSH
75637: LD_INT 0
75639: ST_TO_ADDR
// uc_nation := 0 ;
75640: LD_ADDR_OWVAR 21
75644: PUSH
75645: LD_INT 0
75647: ST_TO_ADDR
// hc_class := class_fish ;
75648: LD_ADDR_OWVAR 28
75652: PUSH
75653: LD_INT 20
75655: ST_TO_ADDR
// hc_gallery :=  ;
75656: LD_ADDR_OWVAR 33
75660: PUSH
75661: LD_STRING 
75663: ST_TO_ADDR
// end ;
75664: LD_VAR 0 1
75668: RET
// export function PrepareBird ( ) ; begin
75669: LD_INT 0
75671: PPUSH
// uc_side := 0 ;
75672: LD_ADDR_OWVAR 20
75676: PUSH
75677: LD_INT 0
75679: ST_TO_ADDR
// uc_nation := 0 ;
75680: LD_ADDR_OWVAR 21
75684: PUSH
75685: LD_INT 0
75687: ST_TO_ADDR
// hc_class := class_phororhacos ;
75688: LD_ADDR_OWVAR 28
75692: PUSH
75693: LD_INT 18
75695: ST_TO_ADDR
// hc_gallery :=  ;
75696: LD_ADDR_OWVAR 33
75700: PUSH
75701: LD_STRING 
75703: ST_TO_ADDR
// end ;
75704: LD_VAR 0 1
75708: RET
// export function PrepareHorse ( ) ; begin
75709: LD_INT 0
75711: PPUSH
// uc_side := 0 ;
75712: LD_ADDR_OWVAR 20
75716: PUSH
75717: LD_INT 0
75719: ST_TO_ADDR
// uc_nation := 0 ;
75720: LD_ADDR_OWVAR 21
75724: PUSH
75725: LD_INT 0
75727: ST_TO_ADDR
// hc_class := class_horse ;
75728: LD_ADDR_OWVAR 28
75732: PUSH
75733: LD_INT 21
75735: ST_TO_ADDR
// hc_gallery :=  ;
75736: LD_ADDR_OWVAR 33
75740: PUSH
75741: LD_STRING 
75743: ST_TO_ADDR
// end ;
75744: LD_VAR 0 1
75748: RET
// export function PrepareMastodont ( ) ; begin
75749: LD_INT 0
75751: PPUSH
// uc_side := 0 ;
75752: LD_ADDR_OWVAR 20
75756: PUSH
75757: LD_INT 0
75759: ST_TO_ADDR
// uc_nation := 0 ;
75760: LD_ADDR_OWVAR 21
75764: PUSH
75765: LD_INT 0
75767: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75768: LD_ADDR_OWVAR 37
75772: PUSH
75773: LD_INT 31
75775: ST_TO_ADDR
// vc_control := control_rider ;
75776: LD_ADDR_OWVAR 38
75780: PUSH
75781: LD_INT 4
75783: ST_TO_ADDR
// end ;
75784: LD_VAR 0 1
75788: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75789: LD_INT 0
75791: PPUSH
75792: PPUSH
75793: PPUSH
// uc_side = 0 ;
75794: LD_ADDR_OWVAR 20
75798: PUSH
75799: LD_INT 0
75801: ST_TO_ADDR
// uc_nation = 0 ;
75802: LD_ADDR_OWVAR 21
75806: PUSH
75807: LD_INT 0
75809: ST_TO_ADDR
// InitHc_All ( ) ;
75810: CALL_OW 584
// InitVc ;
75814: CALL_OW 20
// if mastodonts then
75818: LD_VAR 0 6
75822: IFFALSE 75889
// for i = 1 to mastodonts do
75824: LD_ADDR_VAR 0 11
75828: PUSH
75829: DOUBLE
75830: LD_INT 1
75832: DEC
75833: ST_TO_ADDR
75834: LD_VAR 0 6
75838: PUSH
75839: FOR_TO
75840: IFFALSE 75887
// begin vc_chassis := 31 ;
75842: LD_ADDR_OWVAR 37
75846: PUSH
75847: LD_INT 31
75849: ST_TO_ADDR
// vc_control := control_rider ;
75850: LD_ADDR_OWVAR 38
75854: PUSH
75855: LD_INT 4
75857: ST_TO_ADDR
// animal := CreateVehicle ;
75858: LD_ADDR_VAR 0 12
75862: PUSH
75863: CALL_OW 45
75867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75868: LD_VAR 0 12
75872: PPUSH
75873: LD_VAR 0 8
75877: PPUSH
75878: LD_INT 0
75880: PPUSH
75881: CALL 78017 0 3
// end ;
75885: GO 75839
75887: POP
75888: POP
// if horses then
75889: LD_VAR 0 5
75893: IFFALSE 75960
// for i = 1 to horses do
75895: LD_ADDR_VAR 0 11
75899: PUSH
75900: DOUBLE
75901: LD_INT 1
75903: DEC
75904: ST_TO_ADDR
75905: LD_VAR 0 5
75909: PUSH
75910: FOR_TO
75911: IFFALSE 75958
// begin hc_class := 21 ;
75913: LD_ADDR_OWVAR 28
75917: PUSH
75918: LD_INT 21
75920: ST_TO_ADDR
// hc_gallery :=  ;
75921: LD_ADDR_OWVAR 33
75925: PUSH
75926: LD_STRING 
75928: ST_TO_ADDR
// animal := CreateHuman ;
75929: LD_ADDR_VAR 0 12
75933: PUSH
75934: CALL_OW 44
75938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75939: LD_VAR 0 12
75943: PPUSH
75944: LD_VAR 0 8
75948: PPUSH
75949: LD_INT 0
75951: PPUSH
75952: CALL 78017 0 3
// end ;
75956: GO 75910
75958: POP
75959: POP
// if birds then
75960: LD_VAR 0 1
75964: IFFALSE 76031
// for i = 1 to birds do
75966: LD_ADDR_VAR 0 11
75970: PUSH
75971: DOUBLE
75972: LD_INT 1
75974: DEC
75975: ST_TO_ADDR
75976: LD_VAR 0 1
75980: PUSH
75981: FOR_TO
75982: IFFALSE 76029
// begin hc_class := 18 ;
75984: LD_ADDR_OWVAR 28
75988: PUSH
75989: LD_INT 18
75991: ST_TO_ADDR
// hc_gallery =  ;
75992: LD_ADDR_OWVAR 33
75996: PUSH
75997: LD_STRING 
75999: ST_TO_ADDR
// animal := CreateHuman ;
76000: LD_ADDR_VAR 0 12
76004: PUSH
76005: CALL_OW 44
76009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76010: LD_VAR 0 12
76014: PPUSH
76015: LD_VAR 0 8
76019: PPUSH
76020: LD_INT 0
76022: PPUSH
76023: CALL 78017 0 3
// end ;
76027: GO 75981
76029: POP
76030: POP
// if tigers then
76031: LD_VAR 0 2
76035: IFFALSE 76119
// for i = 1 to tigers do
76037: LD_ADDR_VAR 0 11
76041: PUSH
76042: DOUBLE
76043: LD_INT 1
76045: DEC
76046: ST_TO_ADDR
76047: LD_VAR 0 2
76051: PUSH
76052: FOR_TO
76053: IFFALSE 76117
// begin hc_class = class_tiger ;
76055: LD_ADDR_OWVAR 28
76059: PUSH
76060: LD_INT 14
76062: ST_TO_ADDR
// hc_gallery =  ;
76063: LD_ADDR_OWVAR 33
76067: PUSH
76068: LD_STRING 
76070: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76071: LD_ADDR_OWVAR 35
76075: PUSH
76076: LD_INT 7
76078: NEG
76079: PPUSH
76080: LD_INT 7
76082: PPUSH
76083: CALL_OW 12
76087: ST_TO_ADDR
// animal := CreateHuman ;
76088: LD_ADDR_VAR 0 12
76092: PUSH
76093: CALL_OW 44
76097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76098: LD_VAR 0 12
76102: PPUSH
76103: LD_VAR 0 8
76107: PPUSH
76108: LD_INT 0
76110: PPUSH
76111: CALL 78017 0 3
// end ;
76115: GO 76052
76117: POP
76118: POP
// if apemans then
76119: LD_VAR 0 3
76123: IFFALSE 76246
// for i = 1 to apemans do
76125: LD_ADDR_VAR 0 11
76129: PUSH
76130: DOUBLE
76131: LD_INT 1
76133: DEC
76134: ST_TO_ADDR
76135: LD_VAR 0 3
76139: PUSH
76140: FOR_TO
76141: IFFALSE 76244
// begin hc_class = class_apeman ;
76143: LD_ADDR_OWVAR 28
76147: PUSH
76148: LD_INT 12
76150: ST_TO_ADDR
// hc_gallery =  ;
76151: LD_ADDR_OWVAR 33
76155: PUSH
76156: LD_STRING 
76158: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76159: LD_ADDR_OWVAR 35
76163: PUSH
76164: LD_INT 2
76166: NEG
76167: PPUSH
76168: LD_INT 2
76170: PPUSH
76171: CALL_OW 12
76175: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76176: LD_ADDR_OWVAR 31
76180: PUSH
76181: LD_INT 1
76183: PPUSH
76184: LD_INT 3
76186: PPUSH
76187: CALL_OW 12
76191: PUSH
76192: LD_INT 1
76194: PPUSH
76195: LD_INT 3
76197: PPUSH
76198: CALL_OW 12
76202: PUSH
76203: LD_INT 0
76205: PUSH
76206: LD_INT 0
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: ST_TO_ADDR
// animal := CreateHuman ;
76215: LD_ADDR_VAR 0 12
76219: PUSH
76220: CALL_OW 44
76224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76225: LD_VAR 0 12
76229: PPUSH
76230: LD_VAR 0 8
76234: PPUSH
76235: LD_INT 0
76237: PPUSH
76238: CALL 78017 0 3
// end ;
76242: GO 76140
76244: POP
76245: POP
// if enchidnas then
76246: LD_VAR 0 4
76250: IFFALSE 76317
// for i = 1 to enchidnas do
76252: LD_ADDR_VAR 0 11
76256: PUSH
76257: DOUBLE
76258: LD_INT 1
76260: DEC
76261: ST_TO_ADDR
76262: LD_VAR 0 4
76266: PUSH
76267: FOR_TO
76268: IFFALSE 76315
// begin hc_class = 13 ;
76270: LD_ADDR_OWVAR 28
76274: PUSH
76275: LD_INT 13
76277: ST_TO_ADDR
// hc_gallery =  ;
76278: LD_ADDR_OWVAR 33
76282: PUSH
76283: LD_STRING 
76285: ST_TO_ADDR
// animal := CreateHuman ;
76286: LD_ADDR_VAR 0 12
76290: PUSH
76291: CALL_OW 44
76295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76296: LD_VAR 0 12
76300: PPUSH
76301: LD_VAR 0 8
76305: PPUSH
76306: LD_INT 0
76308: PPUSH
76309: CALL 78017 0 3
// end ;
76313: GO 76267
76315: POP
76316: POP
// if fishes then
76317: LD_VAR 0 7
76321: IFFALSE 76388
// for i = 1 to fishes do
76323: LD_ADDR_VAR 0 11
76327: PUSH
76328: DOUBLE
76329: LD_INT 1
76331: DEC
76332: ST_TO_ADDR
76333: LD_VAR 0 7
76337: PUSH
76338: FOR_TO
76339: IFFALSE 76386
// begin hc_class = 20 ;
76341: LD_ADDR_OWVAR 28
76345: PUSH
76346: LD_INT 20
76348: ST_TO_ADDR
// hc_gallery =  ;
76349: LD_ADDR_OWVAR 33
76353: PUSH
76354: LD_STRING 
76356: ST_TO_ADDR
// animal := CreateHuman ;
76357: LD_ADDR_VAR 0 12
76361: PUSH
76362: CALL_OW 44
76366: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76367: LD_VAR 0 12
76371: PPUSH
76372: LD_VAR 0 9
76376: PPUSH
76377: LD_INT 0
76379: PPUSH
76380: CALL 78017 0 3
// end ;
76384: GO 76338
76386: POP
76387: POP
// end ;
76388: LD_VAR 0 10
76392: RET
// export function WantHeal ( sci , unit ) ; begin
76393: LD_INT 0
76395: PPUSH
// if GetTaskList ( sci ) > 0 then
76396: LD_VAR 0 1
76400: PPUSH
76401: CALL_OW 437
76405: PUSH
76406: LD_INT 0
76408: GREATER
76409: IFFALSE 76479
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76411: LD_VAR 0 1
76415: PPUSH
76416: CALL_OW 437
76420: PUSH
76421: LD_INT 1
76423: ARRAY
76424: PUSH
76425: LD_INT 1
76427: ARRAY
76428: PUSH
76429: LD_STRING l
76431: EQUAL
76432: PUSH
76433: LD_VAR 0 1
76437: PPUSH
76438: CALL_OW 437
76442: PUSH
76443: LD_INT 1
76445: ARRAY
76446: PUSH
76447: LD_INT 4
76449: ARRAY
76450: PUSH
76451: LD_VAR 0 2
76455: EQUAL
76456: AND
76457: IFFALSE 76469
// result := true else
76459: LD_ADDR_VAR 0 3
76463: PUSH
76464: LD_INT 1
76466: ST_TO_ADDR
76467: GO 76477
// result := false ;
76469: LD_ADDR_VAR 0 3
76473: PUSH
76474: LD_INT 0
76476: ST_TO_ADDR
// end else
76477: GO 76487
// result := false ;
76479: LD_ADDR_VAR 0 3
76483: PUSH
76484: LD_INT 0
76486: ST_TO_ADDR
// end ;
76487: LD_VAR 0 3
76491: RET
// export function HealTarget ( sci ) ; begin
76492: LD_INT 0
76494: PPUSH
// if not sci then
76495: LD_VAR 0 1
76499: NOT
76500: IFFALSE 76504
// exit ;
76502: GO 76569
// result := 0 ;
76504: LD_ADDR_VAR 0 2
76508: PUSH
76509: LD_INT 0
76511: ST_TO_ADDR
// if GetTaskList ( sci ) then
76512: LD_VAR 0 1
76516: PPUSH
76517: CALL_OW 437
76521: IFFALSE 76569
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76523: LD_VAR 0 1
76527: PPUSH
76528: CALL_OW 437
76532: PUSH
76533: LD_INT 1
76535: ARRAY
76536: PUSH
76537: LD_INT 1
76539: ARRAY
76540: PUSH
76541: LD_STRING l
76543: EQUAL
76544: IFFALSE 76569
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76546: LD_ADDR_VAR 0 2
76550: PUSH
76551: LD_VAR 0 1
76555: PPUSH
76556: CALL_OW 437
76560: PUSH
76561: LD_INT 1
76563: ARRAY
76564: PUSH
76565: LD_INT 4
76567: ARRAY
76568: ST_TO_ADDR
// end ;
76569: LD_VAR 0 2
76573: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76574: LD_INT 0
76576: PPUSH
76577: PPUSH
76578: PPUSH
76579: PPUSH
// if not base_units then
76580: LD_VAR 0 1
76584: NOT
76585: IFFALSE 76589
// exit ;
76587: GO 76676
// result := false ;
76589: LD_ADDR_VAR 0 2
76593: PUSH
76594: LD_INT 0
76596: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76597: LD_ADDR_VAR 0 5
76601: PUSH
76602: LD_VAR 0 1
76606: PPUSH
76607: LD_INT 21
76609: PUSH
76610: LD_INT 3
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PPUSH
76617: CALL_OW 72
76621: ST_TO_ADDR
// if not tmp then
76622: LD_VAR 0 5
76626: NOT
76627: IFFALSE 76631
// exit ;
76629: GO 76676
// for i in tmp do
76631: LD_ADDR_VAR 0 3
76635: PUSH
76636: LD_VAR 0 5
76640: PUSH
76641: FOR_IN
76642: IFFALSE 76674
// begin result := EnemyInRange ( i , 22 ) ;
76644: LD_ADDR_VAR 0 2
76648: PUSH
76649: LD_VAR 0 3
76653: PPUSH
76654: LD_INT 22
76656: PPUSH
76657: CALL 74254 0 2
76661: ST_TO_ADDR
// if result then
76662: LD_VAR 0 2
76666: IFFALSE 76672
// exit ;
76668: POP
76669: POP
76670: GO 76676
// end ;
76672: GO 76641
76674: POP
76675: POP
// end ;
76676: LD_VAR 0 2
76680: RET
// export function FilterByTag ( units , tag ) ; begin
76681: LD_INT 0
76683: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76684: LD_ADDR_VAR 0 3
76688: PUSH
76689: LD_VAR 0 1
76693: PPUSH
76694: LD_INT 120
76696: PUSH
76697: LD_VAR 0 2
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PPUSH
76706: CALL_OW 72
76710: ST_TO_ADDR
// end ;
76711: LD_VAR 0 3
76715: RET
// export function IsDriver ( un ) ; begin
76716: LD_INT 0
76718: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76719: LD_ADDR_VAR 0 2
76723: PUSH
76724: LD_VAR 0 1
76728: PUSH
76729: LD_INT 55
76731: PUSH
76732: EMPTY
76733: LIST
76734: PPUSH
76735: CALL_OW 69
76739: IN
76740: ST_TO_ADDR
// end ;
76741: LD_VAR 0 2
76745: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76746: LD_INT 0
76748: PPUSH
76749: PPUSH
// list := [ ] ;
76750: LD_ADDR_VAR 0 5
76754: PUSH
76755: EMPTY
76756: ST_TO_ADDR
// case d of 0 :
76757: LD_VAR 0 3
76761: PUSH
76762: LD_INT 0
76764: DOUBLE
76765: EQUAL
76766: IFTRUE 76770
76768: GO 76903
76770: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76771: LD_ADDR_VAR 0 5
76775: PUSH
76776: LD_VAR 0 1
76780: PUSH
76781: LD_INT 4
76783: MINUS
76784: PUSH
76785: LD_VAR 0 2
76789: PUSH
76790: LD_INT 4
76792: MINUS
76793: PUSH
76794: LD_INT 2
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: PUSH
76802: LD_VAR 0 1
76806: PUSH
76807: LD_INT 3
76809: MINUS
76810: PUSH
76811: LD_VAR 0 2
76815: PUSH
76816: LD_INT 1
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: PUSH
76824: LD_VAR 0 1
76828: PUSH
76829: LD_INT 4
76831: PLUS
76832: PUSH
76833: LD_VAR 0 2
76837: PUSH
76838: LD_INT 4
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: LIST
76845: PUSH
76846: LD_VAR 0 1
76850: PUSH
76851: LD_INT 3
76853: PLUS
76854: PUSH
76855: LD_VAR 0 2
76859: PUSH
76860: LD_INT 3
76862: PLUS
76863: PUSH
76864: LD_INT 5
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: LIST
76871: PUSH
76872: LD_VAR 0 1
76876: PUSH
76877: LD_VAR 0 2
76881: PUSH
76882: LD_INT 4
76884: PLUS
76885: PUSH
76886: LD_INT 0
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: LIST
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: LIST
76898: LIST
76899: LIST
76900: ST_TO_ADDR
// end ; 1 :
76901: GO 77601
76903: LD_INT 1
76905: DOUBLE
76906: EQUAL
76907: IFTRUE 76911
76909: GO 77044
76911: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76912: LD_ADDR_VAR 0 5
76916: PUSH
76917: LD_VAR 0 1
76921: PUSH
76922: LD_VAR 0 2
76926: PUSH
76927: LD_INT 4
76929: MINUS
76930: PUSH
76931: LD_INT 3
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: LIST
76938: PUSH
76939: LD_VAR 0 1
76943: PUSH
76944: LD_INT 3
76946: MINUS
76947: PUSH
76948: LD_VAR 0 2
76952: PUSH
76953: LD_INT 3
76955: MINUS
76956: PUSH
76957: LD_INT 2
76959: PUSH
76960: EMPTY
76961: LIST
76962: LIST
76963: LIST
76964: PUSH
76965: LD_VAR 0 1
76969: PUSH
76970: LD_INT 4
76972: MINUS
76973: PUSH
76974: LD_VAR 0 2
76978: PUSH
76979: LD_INT 1
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: LIST
76986: PUSH
76987: LD_VAR 0 1
76991: PUSH
76992: LD_VAR 0 2
76996: PUSH
76997: LD_INT 3
76999: PLUS
77000: PUSH
77001: LD_INT 0
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: LIST
77008: PUSH
77009: LD_VAR 0 1
77013: PUSH
77014: LD_INT 4
77016: PLUS
77017: PUSH
77018: LD_VAR 0 2
77022: PUSH
77023: LD_INT 4
77025: PLUS
77026: PUSH
77027: LD_INT 5
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: LIST
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: ST_TO_ADDR
// end ; 2 :
77042: GO 77601
77044: LD_INT 2
77046: DOUBLE
77047: EQUAL
77048: IFTRUE 77052
77050: GO 77181
77052: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77053: LD_ADDR_VAR 0 5
77057: PUSH
77058: LD_VAR 0 1
77062: PUSH
77063: LD_VAR 0 2
77067: PUSH
77068: LD_INT 3
77070: MINUS
77071: PUSH
77072: LD_INT 3
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: LIST
77079: PUSH
77080: LD_VAR 0 1
77084: PUSH
77085: LD_INT 4
77087: PLUS
77088: PUSH
77089: LD_VAR 0 2
77093: PUSH
77094: LD_INT 4
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: LIST
77101: PUSH
77102: LD_VAR 0 1
77106: PUSH
77107: LD_VAR 0 2
77111: PUSH
77112: LD_INT 4
77114: PLUS
77115: PUSH
77116: LD_INT 0
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: LIST
77123: PUSH
77124: LD_VAR 0 1
77128: PUSH
77129: LD_INT 3
77131: MINUS
77132: PUSH
77133: LD_VAR 0 2
77137: PUSH
77138: LD_INT 1
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: LIST
77145: PUSH
77146: LD_VAR 0 1
77150: PUSH
77151: LD_INT 4
77153: MINUS
77154: PUSH
77155: LD_VAR 0 2
77159: PUSH
77160: LD_INT 4
77162: MINUS
77163: PUSH
77164: LD_INT 2
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: LIST
77171: PUSH
77172: EMPTY
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: ST_TO_ADDR
// end ; 3 :
77179: GO 77601
77181: LD_INT 3
77183: DOUBLE
77184: EQUAL
77185: IFTRUE 77189
77187: GO 77322
77189: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77190: LD_ADDR_VAR 0 5
77194: PUSH
77195: LD_VAR 0 1
77199: PUSH
77200: LD_INT 3
77202: PLUS
77203: PUSH
77204: LD_VAR 0 2
77208: PUSH
77209: LD_INT 4
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: LIST
77216: PUSH
77217: LD_VAR 0 1
77221: PUSH
77222: LD_INT 4
77224: PLUS
77225: PUSH
77226: LD_VAR 0 2
77230: PUSH
77231: LD_INT 4
77233: PLUS
77234: PUSH
77235: LD_INT 5
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: LIST
77242: PUSH
77243: LD_VAR 0 1
77247: PUSH
77248: LD_INT 4
77250: MINUS
77251: PUSH
77252: LD_VAR 0 2
77256: PUSH
77257: LD_INT 1
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: LIST
77264: PUSH
77265: LD_VAR 0 1
77269: PUSH
77270: LD_VAR 0 2
77274: PUSH
77275: LD_INT 4
77277: MINUS
77278: PUSH
77279: LD_INT 3
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: LIST
77286: PUSH
77287: LD_VAR 0 1
77291: PUSH
77292: LD_INT 3
77294: MINUS
77295: PUSH
77296: LD_VAR 0 2
77300: PUSH
77301: LD_INT 3
77303: MINUS
77304: PUSH
77305: LD_INT 2
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: LIST
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: ST_TO_ADDR
// end ; 4 :
77320: GO 77601
77322: LD_INT 4
77324: DOUBLE
77325: EQUAL
77326: IFTRUE 77330
77328: GO 77463
77330: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77331: LD_ADDR_VAR 0 5
77335: PUSH
77336: LD_VAR 0 1
77340: PUSH
77341: LD_VAR 0 2
77345: PUSH
77346: LD_INT 4
77348: PLUS
77349: PUSH
77350: LD_INT 0
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: LIST
77357: PUSH
77358: LD_VAR 0 1
77362: PUSH
77363: LD_INT 3
77365: PLUS
77366: PUSH
77367: LD_VAR 0 2
77371: PUSH
77372: LD_INT 3
77374: PLUS
77375: PUSH
77376: LD_INT 5
77378: PUSH
77379: EMPTY
77380: LIST
77381: LIST
77382: LIST
77383: PUSH
77384: LD_VAR 0 1
77388: PUSH
77389: LD_INT 4
77391: PLUS
77392: PUSH
77393: LD_VAR 0 2
77397: PUSH
77398: LD_INT 4
77400: PUSH
77401: EMPTY
77402: LIST
77403: LIST
77404: LIST
77405: PUSH
77406: LD_VAR 0 1
77410: PUSH
77411: LD_VAR 0 2
77415: PUSH
77416: LD_INT 3
77418: MINUS
77419: PUSH
77420: LD_INT 3
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: LIST
77427: PUSH
77428: LD_VAR 0 1
77432: PUSH
77433: LD_INT 4
77435: MINUS
77436: PUSH
77437: LD_VAR 0 2
77441: PUSH
77442: LD_INT 4
77444: MINUS
77445: PUSH
77446: LD_INT 2
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: LIST
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: ST_TO_ADDR
// end ; 5 :
77461: GO 77601
77463: LD_INT 5
77465: DOUBLE
77466: EQUAL
77467: IFTRUE 77471
77469: GO 77600
77471: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77472: LD_ADDR_VAR 0 5
77476: PUSH
77477: LD_VAR 0 1
77481: PUSH
77482: LD_INT 4
77484: MINUS
77485: PUSH
77486: LD_VAR 0 2
77490: PUSH
77491: LD_INT 1
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: LIST
77498: PUSH
77499: LD_VAR 0 1
77503: PUSH
77504: LD_VAR 0 2
77508: PUSH
77509: LD_INT 4
77511: MINUS
77512: PUSH
77513: LD_INT 3
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: LIST
77520: PUSH
77521: LD_VAR 0 1
77525: PUSH
77526: LD_INT 4
77528: PLUS
77529: PUSH
77530: LD_VAR 0 2
77534: PUSH
77535: LD_INT 4
77537: PLUS
77538: PUSH
77539: LD_INT 5
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: LIST
77546: PUSH
77547: LD_VAR 0 1
77551: PUSH
77552: LD_INT 3
77554: PLUS
77555: PUSH
77556: LD_VAR 0 2
77560: PUSH
77561: LD_INT 4
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: LIST
77568: PUSH
77569: LD_VAR 0 1
77573: PUSH
77574: LD_VAR 0 2
77578: PUSH
77579: LD_INT 3
77581: PLUS
77582: PUSH
77583: LD_INT 0
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: LIST
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: LIST
77595: LIST
77596: LIST
77597: ST_TO_ADDR
// end ; end ;
77598: GO 77601
77600: POP
// result := list ;
77601: LD_ADDR_VAR 0 4
77605: PUSH
77606: LD_VAR 0 5
77610: ST_TO_ADDR
// end ;
77611: LD_VAR 0 4
77615: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77616: LD_INT 0
77618: PPUSH
77619: PPUSH
77620: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77621: LD_VAR 0 1
77625: NOT
77626: PUSH
77627: LD_VAR 0 2
77631: PUSH
77632: LD_INT 1
77634: PUSH
77635: LD_INT 2
77637: PUSH
77638: LD_INT 3
77640: PUSH
77641: LD_INT 4
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: LIST
77648: LIST
77649: IN
77650: NOT
77651: OR
77652: IFFALSE 77656
// exit ;
77654: GO 77739
// tmp := [ ] ;
77656: LD_ADDR_VAR 0 5
77660: PUSH
77661: EMPTY
77662: ST_TO_ADDR
// for i in units do
77663: LD_ADDR_VAR 0 4
77667: PUSH
77668: LD_VAR 0 1
77672: PUSH
77673: FOR_IN
77674: IFFALSE 77708
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77676: LD_ADDR_VAR 0 5
77680: PUSH
77681: LD_VAR 0 5
77685: PPUSH
77686: LD_VAR 0 4
77690: PPUSH
77691: LD_VAR 0 2
77695: PPUSH
77696: CALL_OW 259
77700: PPUSH
77701: CALL 79112 0 2
77705: ST_TO_ADDR
77706: GO 77673
77708: POP
77709: POP
// if not tmp then
77710: LD_VAR 0 5
77714: NOT
77715: IFFALSE 77719
// exit ;
77717: GO 77739
// result := SortListByListDesc ( units , tmp ) ;
77719: LD_ADDR_VAR 0 3
77723: PUSH
77724: LD_VAR 0 1
77728: PPUSH
77729: LD_VAR 0 5
77733: PPUSH
77734: CALL_OW 77
77738: ST_TO_ADDR
// end ;
77739: LD_VAR 0 3
77743: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77744: LD_INT 0
77746: PPUSH
77747: PPUSH
77748: PPUSH
// result := false ;
77749: LD_ADDR_VAR 0 3
77753: PUSH
77754: LD_INT 0
77756: ST_TO_ADDR
// if not building then
77757: LD_VAR 0 2
77761: NOT
77762: IFFALSE 77766
// exit ;
77764: GO 77904
// x := GetX ( building ) ;
77766: LD_ADDR_VAR 0 4
77770: PUSH
77771: LD_VAR 0 2
77775: PPUSH
77776: CALL_OW 250
77780: ST_TO_ADDR
// y := GetY ( building ) ;
77781: LD_ADDR_VAR 0 5
77785: PUSH
77786: LD_VAR 0 2
77790: PPUSH
77791: CALL_OW 251
77795: ST_TO_ADDR
// if not x or not y then
77796: LD_VAR 0 4
77800: NOT
77801: PUSH
77802: LD_VAR 0 5
77806: NOT
77807: OR
77808: IFFALSE 77812
// exit ;
77810: GO 77904
// if GetTaskList ( unit ) then
77812: LD_VAR 0 1
77816: PPUSH
77817: CALL_OW 437
77821: IFFALSE 77904
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77823: LD_STRING e
77825: PUSH
77826: LD_VAR 0 1
77830: PPUSH
77831: CALL_OW 437
77835: PUSH
77836: LD_INT 1
77838: ARRAY
77839: PUSH
77840: LD_INT 1
77842: ARRAY
77843: EQUAL
77844: PUSH
77845: LD_VAR 0 4
77849: PUSH
77850: LD_VAR 0 1
77854: PPUSH
77855: CALL_OW 437
77859: PUSH
77860: LD_INT 1
77862: ARRAY
77863: PUSH
77864: LD_INT 2
77866: ARRAY
77867: EQUAL
77868: AND
77869: PUSH
77870: LD_VAR 0 5
77874: PUSH
77875: LD_VAR 0 1
77879: PPUSH
77880: CALL_OW 437
77884: PUSH
77885: LD_INT 1
77887: ARRAY
77888: PUSH
77889: LD_INT 3
77891: ARRAY
77892: EQUAL
77893: AND
77894: IFFALSE 77904
// result := true end ;
77896: LD_ADDR_VAR 0 3
77900: PUSH
77901: LD_INT 1
77903: ST_TO_ADDR
// end ;
77904: LD_VAR 0 3
77908: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77909: LD_INT 0
77911: PPUSH
// result := false ;
77912: LD_ADDR_VAR 0 4
77916: PUSH
77917: LD_INT 0
77919: ST_TO_ADDR
// if GetTaskList ( unit ) then
77920: LD_VAR 0 1
77924: PPUSH
77925: CALL_OW 437
77929: IFFALSE 78012
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77931: LD_STRING M
77933: PUSH
77934: LD_VAR 0 1
77938: PPUSH
77939: CALL_OW 437
77943: PUSH
77944: LD_INT 1
77946: ARRAY
77947: PUSH
77948: LD_INT 1
77950: ARRAY
77951: EQUAL
77952: PUSH
77953: LD_VAR 0 2
77957: PUSH
77958: LD_VAR 0 1
77962: PPUSH
77963: CALL_OW 437
77967: PUSH
77968: LD_INT 1
77970: ARRAY
77971: PUSH
77972: LD_INT 2
77974: ARRAY
77975: EQUAL
77976: AND
77977: PUSH
77978: LD_VAR 0 3
77982: PUSH
77983: LD_VAR 0 1
77987: PPUSH
77988: CALL_OW 437
77992: PUSH
77993: LD_INT 1
77995: ARRAY
77996: PUSH
77997: LD_INT 3
77999: ARRAY
78000: EQUAL
78001: AND
78002: IFFALSE 78012
// result := true ;
78004: LD_ADDR_VAR 0 4
78008: PUSH
78009: LD_INT 1
78011: ST_TO_ADDR
// end ; end ;
78012: LD_VAR 0 4
78016: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78017: LD_INT 0
78019: PPUSH
78020: PPUSH
78021: PPUSH
78022: PPUSH
// if not unit or not area then
78023: LD_VAR 0 1
78027: NOT
78028: PUSH
78029: LD_VAR 0 2
78033: NOT
78034: OR
78035: IFFALSE 78039
// exit ;
78037: GO 78215
// tmp := AreaToList ( area , i ) ;
78039: LD_ADDR_VAR 0 6
78043: PUSH
78044: LD_VAR 0 2
78048: PPUSH
78049: LD_VAR 0 5
78053: PPUSH
78054: CALL_OW 517
78058: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78059: LD_ADDR_VAR 0 5
78063: PUSH
78064: DOUBLE
78065: LD_INT 1
78067: DEC
78068: ST_TO_ADDR
78069: LD_VAR 0 6
78073: PUSH
78074: LD_INT 1
78076: ARRAY
78077: PUSH
78078: FOR_TO
78079: IFFALSE 78213
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78081: LD_ADDR_VAR 0 7
78085: PUSH
78086: LD_VAR 0 6
78090: PUSH
78091: LD_INT 1
78093: ARRAY
78094: PUSH
78095: LD_VAR 0 5
78099: ARRAY
78100: PUSH
78101: LD_VAR 0 6
78105: PUSH
78106: LD_INT 2
78108: ARRAY
78109: PUSH
78110: LD_VAR 0 5
78114: ARRAY
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78120: LD_INT 92
78122: PUSH
78123: LD_VAR 0 7
78127: PUSH
78128: LD_INT 1
78130: ARRAY
78131: PUSH
78132: LD_VAR 0 7
78136: PUSH
78137: LD_INT 2
78139: ARRAY
78140: PUSH
78141: LD_INT 2
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: PPUSH
78150: CALL_OW 69
78154: PUSH
78155: LD_INT 0
78157: EQUAL
78158: IFFALSE 78211
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78160: LD_VAR 0 1
78164: PPUSH
78165: LD_VAR 0 7
78169: PUSH
78170: LD_INT 1
78172: ARRAY
78173: PPUSH
78174: LD_VAR 0 7
78178: PUSH
78179: LD_INT 2
78181: ARRAY
78182: PPUSH
78183: LD_VAR 0 3
78187: PPUSH
78188: CALL_OW 48
// result := IsPlaced ( unit ) ;
78192: LD_ADDR_VAR 0 4
78196: PUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: CALL_OW 305
78206: ST_TO_ADDR
// exit ;
78207: POP
78208: POP
78209: GO 78215
// end ; end ;
78211: GO 78078
78213: POP
78214: POP
// end ;
78215: LD_VAR 0 4
78219: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78220: LD_INT 0
78222: PPUSH
78223: PPUSH
78224: PPUSH
// if not side or side > 8 then
78225: LD_VAR 0 1
78229: NOT
78230: PUSH
78231: LD_VAR 0 1
78235: PUSH
78236: LD_INT 8
78238: GREATER
78239: OR
78240: IFFALSE 78244
// exit ;
78242: GO 78431
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78244: LD_ADDR_VAR 0 4
78248: PUSH
78249: LD_INT 22
78251: PUSH
78252: LD_VAR 0 1
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: LD_INT 21
78263: PUSH
78264: LD_INT 3
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PPUSH
78275: CALL_OW 69
78279: ST_TO_ADDR
// if not tmp then
78280: LD_VAR 0 4
78284: NOT
78285: IFFALSE 78289
// exit ;
78287: GO 78431
// enable_addtolog := true ;
78289: LD_ADDR_OWVAR 81
78293: PUSH
78294: LD_INT 1
78296: ST_TO_ADDR
// AddToLog ( [ ) ;
78297: LD_STRING [
78299: PPUSH
78300: CALL_OW 561
// for i in tmp do
78304: LD_ADDR_VAR 0 3
78308: PUSH
78309: LD_VAR 0 4
78313: PUSH
78314: FOR_IN
78315: IFFALSE 78422
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78317: LD_STRING [
78319: PUSH
78320: LD_VAR 0 3
78324: PPUSH
78325: CALL_OW 266
78329: STR
78330: PUSH
78331: LD_STRING , 
78333: STR
78334: PUSH
78335: LD_VAR 0 3
78339: PPUSH
78340: CALL_OW 250
78344: STR
78345: PUSH
78346: LD_STRING , 
78348: STR
78349: PUSH
78350: LD_VAR 0 3
78354: PPUSH
78355: CALL_OW 251
78359: STR
78360: PUSH
78361: LD_STRING , 
78363: STR
78364: PUSH
78365: LD_VAR 0 3
78369: PPUSH
78370: CALL_OW 254
78374: STR
78375: PUSH
78376: LD_STRING , 
78378: STR
78379: PUSH
78380: LD_VAR 0 3
78384: PPUSH
78385: LD_INT 1
78387: PPUSH
78388: CALL_OW 268
78392: STR
78393: PUSH
78394: LD_STRING , 
78396: STR
78397: PUSH
78398: LD_VAR 0 3
78402: PPUSH
78403: LD_INT 2
78405: PPUSH
78406: CALL_OW 268
78410: STR
78411: PUSH
78412: LD_STRING ],
78414: STR
78415: PPUSH
78416: CALL_OW 561
// end ;
78420: GO 78314
78422: POP
78423: POP
// AddToLog ( ]; ) ;
78424: LD_STRING ];
78426: PPUSH
78427: CALL_OW 561
// end ;
78431: LD_VAR 0 2
78435: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78436: LD_INT 0
78438: PPUSH
78439: PPUSH
78440: PPUSH
78441: PPUSH
78442: PPUSH
// if not area or not rate or not max then
78443: LD_VAR 0 1
78447: NOT
78448: PUSH
78449: LD_VAR 0 2
78453: NOT
78454: OR
78455: PUSH
78456: LD_VAR 0 4
78460: NOT
78461: OR
78462: IFFALSE 78466
// exit ;
78464: GO 78655
// while 1 do
78466: LD_INT 1
78468: IFFALSE 78655
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78470: LD_ADDR_VAR 0 9
78474: PUSH
78475: LD_VAR 0 1
78479: PPUSH
78480: LD_INT 1
78482: PPUSH
78483: CALL_OW 287
78487: PUSH
78488: LD_INT 10
78490: MUL
78491: ST_TO_ADDR
// r := rate / 10 ;
78492: LD_ADDR_VAR 0 7
78496: PUSH
78497: LD_VAR 0 2
78501: PUSH
78502: LD_INT 10
78504: DIVREAL
78505: ST_TO_ADDR
// time := 1 1$00 ;
78506: LD_ADDR_VAR 0 8
78510: PUSH
78511: LD_INT 2100
78513: ST_TO_ADDR
// if amount < min then
78514: LD_VAR 0 9
78518: PUSH
78519: LD_VAR 0 3
78523: LESS
78524: IFFALSE 78542
// r := r * 2 else
78526: LD_ADDR_VAR 0 7
78530: PUSH
78531: LD_VAR 0 7
78535: PUSH
78536: LD_INT 2
78538: MUL
78539: ST_TO_ADDR
78540: GO 78568
// if amount > max then
78542: LD_VAR 0 9
78546: PUSH
78547: LD_VAR 0 4
78551: GREATER
78552: IFFALSE 78568
// r := r / 2 ;
78554: LD_ADDR_VAR 0 7
78558: PUSH
78559: LD_VAR 0 7
78563: PUSH
78564: LD_INT 2
78566: DIVREAL
78567: ST_TO_ADDR
// time := time / r ;
78568: LD_ADDR_VAR 0 8
78572: PUSH
78573: LD_VAR 0 8
78577: PUSH
78578: LD_VAR 0 7
78582: DIVREAL
78583: ST_TO_ADDR
// if time < 0 then
78584: LD_VAR 0 8
78588: PUSH
78589: LD_INT 0
78591: LESS
78592: IFFALSE 78609
// time := time * - 1 ;
78594: LD_ADDR_VAR 0 8
78598: PUSH
78599: LD_VAR 0 8
78603: PUSH
78604: LD_INT 1
78606: NEG
78607: MUL
78608: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78609: LD_VAR 0 8
78613: PUSH
78614: LD_INT 35
78616: PPUSH
78617: LD_INT 875
78619: PPUSH
78620: CALL_OW 12
78624: PLUS
78625: PPUSH
78626: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78630: LD_INT 1
78632: PPUSH
78633: LD_INT 5
78635: PPUSH
78636: CALL_OW 12
78640: PPUSH
78641: LD_VAR 0 1
78645: PPUSH
78646: LD_INT 1
78648: PPUSH
78649: CALL_OW 55
// end ;
78653: GO 78466
// end ;
78655: LD_VAR 0 5
78659: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78660: LD_INT 0
78662: PPUSH
78663: PPUSH
78664: PPUSH
78665: PPUSH
78666: PPUSH
78667: PPUSH
78668: PPUSH
78669: PPUSH
// if not turrets or not factories then
78670: LD_VAR 0 1
78674: NOT
78675: PUSH
78676: LD_VAR 0 2
78680: NOT
78681: OR
78682: IFFALSE 78686
// exit ;
78684: GO 78993
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78686: LD_ADDR_VAR 0 10
78690: PUSH
78691: LD_INT 5
78693: PUSH
78694: LD_INT 6
78696: PUSH
78697: EMPTY
78698: LIST
78699: LIST
78700: PUSH
78701: LD_INT 2
78703: PUSH
78704: LD_INT 4
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: PUSH
78711: LD_INT 3
78713: PUSH
78714: LD_INT 5
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: LIST
78725: PUSH
78726: LD_INT 24
78728: PUSH
78729: LD_INT 25
78731: PUSH
78732: EMPTY
78733: LIST
78734: LIST
78735: PUSH
78736: LD_INT 23
78738: PUSH
78739: LD_INT 27
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: PUSH
78746: EMPTY
78747: LIST
78748: LIST
78749: PUSH
78750: LD_INT 42
78752: PUSH
78753: LD_INT 43
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: LD_INT 44
78762: PUSH
78763: LD_INT 46
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: LD_INT 45
78772: PUSH
78773: LD_INT 47
78775: PUSH
78776: EMPTY
78777: LIST
78778: LIST
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: LIST
78784: PUSH
78785: EMPTY
78786: LIST
78787: LIST
78788: LIST
78789: ST_TO_ADDR
// result := [ ] ;
78790: LD_ADDR_VAR 0 3
78794: PUSH
78795: EMPTY
78796: ST_TO_ADDR
// for i in turrets do
78797: LD_ADDR_VAR 0 4
78801: PUSH
78802: LD_VAR 0 1
78806: PUSH
78807: FOR_IN
78808: IFFALSE 78991
// begin nat := GetNation ( i ) ;
78810: LD_ADDR_VAR 0 7
78814: PUSH
78815: LD_VAR 0 4
78819: PPUSH
78820: CALL_OW 248
78824: ST_TO_ADDR
// weapon := 0 ;
78825: LD_ADDR_VAR 0 8
78829: PUSH
78830: LD_INT 0
78832: ST_TO_ADDR
// if not nat then
78833: LD_VAR 0 7
78837: NOT
78838: IFFALSE 78842
// continue ;
78840: GO 78807
// for j in list [ nat ] do
78842: LD_ADDR_VAR 0 5
78846: PUSH
78847: LD_VAR 0 10
78851: PUSH
78852: LD_VAR 0 7
78856: ARRAY
78857: PUSH
78858: FOR_IN
78859: IFFALSE 78900
// if GetBWeapon ( i ) = j [ 1 ] then
78861: LD_VAR 0 4
78865: PPUSH
78866: CALL_OW 269
78870: PUSH
78871: LD_VAR 0 5
78875: PUSH
78876: LD_INT 1
78878: ARRAY
78879: EQUAL
78880: IFFALSE 78898
// begin weapon := j [ 2 ] ;
78882: LD_ADDR_VAR 0 8
78886: PUSH
78887: LD_VAR 0 5
78891: PUSH
78892: LD_INT 2
78894: ARRAY
78895: ST_TO_ADDR
// break ;
78896: GO 78900
// end ;
78898: GO 78858
78900: POP
78901: POP
// if not weapon then
78902: LD_VAR 0 8
78906: NOT
78907: IFFALSE 78911
// continue ;
78909: GO 78807
// for k in factories do
78911: LD_ADDR_VAR 0 6
78915: PUSH
78916: LD_VAR 0 2
78920: PUSH
78921: FOR_IN
78922: IFFALSE 78987
// begin weapons := AvailableWeaponList ( k ) ;
78924: LD_ADDR_VAR 0 9
78928: PUSH
78929: LD_VAR 0 6
78933: PPUSH
78934: CALL_OW 478
78938: ST_TO_ADDR
// if not weapons then
78939: LD_VAR 0 9
78943: NOT
78944: IFFALSE 78948
// continue ;
78946: GO 78921
// if weapon in weapons then
78948: LD_VAR 0 8
78952: PUSH
78953: LD_VAR 0 9
78957: IN
78958: IFFALSE 78985
// begin result := [ i , weapon ] ;
78960: LD_ADDR_VAR 0 3
78964: PUSH
78965: LD_VAR 0 4
78969: PUSH
78970: LD_VAR 0 8
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: ST_TO_ADDR
// exit ;
78979: POP
78980: POP
78981: POP
78982: POP
78983: GO 78993
// end ; end ;
78985: GO 78921
78987: POP
78988: POP
// end ;
78989: GO 78807
78991: POP
78992: POP
// end ;
78993: LD_VAR 0 3
78997: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78998: LD_INT 0
79000: PPUSH
// if not side or side > 8 then
79001: LD_VAR 0 3
79005: NOT
79006: PUSH
79007: LD_VAR 0 3
79011: PUSH
79012: LD_INT 8
79014: GREATER
79015: OR
79016: IFFALSE 79020
// exit ;
79018: GO 79079
// if not range then
79020: LD_VAR 0 4
79024: NOT
79025: IFFALSE 79036
// range := - 12 ;
79027: LD_ADDR_VAR 0 4
79031: PUSH
79032: LD_INT 12
79034: NEG
79035: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79036: LD_VAR 0 1
79040: PPUSH
79041: LD_VAR 0 2
79045: PPUSH
79046: LD_VAR 0 3
79050: PPUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79060: LD_VAR 0 1
79064: PPUSH
79065: LD_VAR 0 2
79069: PPUSH
79070: LD_VAR 0 3
79074: PPUSH
79075: CALL_OW 331
// end ;
79079: LD_VAR 0 5
79083: RET
// export function Video ( mode ) ; begin
79084: LD_INT 0
79086: PPUSH
// ingame_video = mode ;
79087: LD_ADDR_OWVAR 52
79091: PUSH
79092: LD_VAR 0 1
79096: ST_TO_ADDR
// interface_hidden = mode ;
79097: LD_ADDR_OWVAR 54
79101: PUSH
79102: LD_VAR 0 1
79106: ST_TO_ADDR
// end ;
79107: LD_VAR 0 2
79111: RET
// export function Join ( array , element ) ; begin
79112: LD_INT 0
79114: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79115: LD_ADDR_VAR 0 3
79119: PUSH
79120: LD_VAR 0 1
79124: PPUSH
79125: LD_VAR 0 1
79129: PUSH
79130: LD_INT 1
79132: PLUS
79133: PPUSH
79134: LD_VAR 0 2
79138: PPUSH
79139: CALL_OW 1
79143: ST_TO_ADDR
// end ;
79144: LD_VAR 0 3
79148: RET
// export function JoinUnion ( array , element ) ; begin
79149: LD_INT 0
79151: PPUSH
// result := array union element ;
79152: LD_ADDR_VAR 0 3
79156: PUSH
79157: LD_VAR 0 1
79161: PUSH
79162: LD_VAR 0 2
79166: UNION
79167: ST_TO_ADDR
// end ;
79168: LD_VAR 0 3
79172: RET
// export function GetBehemoths ( side ) ; begin
79173: LD_INT 0
79175: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79176: LD_ADDR_VAR 0 2
79180: PUSH
79181: LD_INT 22
79183: PUSH
79184: LD_VAR 0 1
79188: PUSH
79189: EMPTY
79190: LIST
79191: LIST
79192: PUSH
79193: LD_INT 31
79195: PUSH
79196: LD_INT 25
79198: PUSH
79199: EMPTY
79200: LIST
79201: LIST
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PPUSH
79207: CALL_OW 69
79211: ST_TO_ADDR
// end ;
79212: LD_VAR 0 2
79216: RET
// export function Shuffle ( array ) ; var i , index ; begin
79217: LD_INT 0
79219: PPUSH
79220: PPUSH
79221: PPUSH
// result := [ ] ;
79222: LD_ADDR_VAR 0 2
79226: PUSH
79227: EMPTY
79228: ST_TO_ADDR
// if not array then
79229: LD_VAR 0 1
79233: NOT
79234: IFFALSE 79238
// exit ;
79236: GO 79337
// Randomize ;
79238: CALL_OW 10
// for i = array downto 1 do
79242: LD_ADDR_VAR 0 3
79246: PUSH
79247: DOUBLE
79248: LD_VAR 0 1
79252: INC
79253: ST_TO_ADDR
79254: LD_INT 1
79256: PUSH
79257: FOR_DOWNTO
79258: IFFALSE 79335
// begin index := rand ( 1 , array ) ;
79260: LD_ADDR_VAR 0 4
79264: PUSH
79265: LD_INT 1
79267: PPUSH
79268: LD_VAR 0 1
79272: PPUSH
79273: CALL_OW 12
79277: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79278: LD_ADDR_VAR 0 2
79282: PUSH
79283: LD_VAR 0 2
79287: PPUSH
79288: LD_VAR 0 2
79292: PUSH
79293: LD_INT 1
79295: PLUS
79296: PPUSH
79297: LD_VAR 0 1
79301: PUSH
79302: LD_VAR 0 4
79306: ARRAY
79307: PPUSH
79308: CALL_OW 2
79312: ST_TO_ADDR
// array := Delete ( array , index ) ;
79313: LD_ADDR_VAR 0 1
79317: PUSH
79318: LD_VAR 0 1
79322: PPUSH
79323: LD_VAR 0 4
79327: PPUSH
79328: CALL_OW 3
79332: ST_TO_ADDR
// end ;
79333: GO 79257
79335: POP
79336: POP
// end ;
79337: LD_VAR 0 2
79341: RET
// export function GetBaseMaterials ( base ) ; begin
79342: LD_INT 0
79344: PPUSH
// result := [ 0 , 0 , 0 ] ;
79345: LD_ADDR_VAR 0 2
79349: PUSH
79350: LD_INT 0
79352: PUSH
79353: LD_INT 0
79355: PUSH
79356: LD_INT 0
79358: PUSH
79359: EMPTY
79360: LIST
79361: LIST
79362: LIST
79363: ST_TO_ADDR
// if not base then
79364: LD_VAR 0 1
79368: NOT
79369: IFFALSE 79373
// exit ;
79371: GO 79422
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79373: LD_ADDR_VAR 0 2
79377: PUSH
79378: LD_VAR 0 1
79382: PPUSH
79383: LD_INT 1
79385: PPUSH
79386: CALL_OW 275
79390: PUSH
79391: LD_VAR 0 1
79395: PPUSH
79396: LD_INT 2
79398: PPUSH
79399: CALL_OW 275
79403: PUSH
79404: LD_VAR 0 1
79408: PPUSH
79409: LD_INT 3
79411: PPUSH
79412: CALL_OW 275
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: LIST
79421: ST_TO_ADDR
// end ;
79422: LD_VAR 0 2
79426: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79427: LD_INT 0
79429: PPUSH
79430: PPUSH
// result := array ;
79431: LD_ADDR_VAR 0 3
79435: PUSH
79436: LD_VAR 0 1
79440: ST_TO_ADDR
// if size >= result then
79441: LD_VAR 0 2
79445: PUSH
79446: LD_VAR 0 3
79450: GREATEREQUAL
79451: IFFALSE 79455
// exit ;
79453: GO 79505
// if size then
79455: LD_VAR 0 2
79459: IFFALSE 79505
// for i := array downto size do
79461: LD_ADDR_VAR 0 4
79465: PUSH
79466: DOUBLE
79467: LD_VAR 0 1
79471: INC
79472: ST_TO_ADDR
79473: LD_VAR 0 2
79477: PUSH
79478: FOR_DOWNTO
79479: IFFALSE 79503
// result := Delete ( result , result ) ;
79481: LD_ADDR_VAR 0 3
79485: PUSH
79486: LD_VAR 0 3
79490: PPUSH
79491: LD_VAR 0 3
79495: PPUSH
79496: CALL_OW 3
79500: ST_TO_ADDR
79501: GO 79478
79503: POP
79504: POP
// end ;
79505: LD_VAR 0 3
79509: RET
// export function ComExit ( unit ) ; var tmp ; begin
79510: LD_INT 0
79512: PPUSH
79513: PPUSH
// if not IsInUnit ( unit ) then
79514: LD_VAR 0 1
79518: PPUSH
79519: CALL_OW 310
79523: NOT
79524: IFFALSE 79528
// exit ;
79526: GO 79588
// tmp := IsInUnit ( unit ) ;
79528: LD_ADDR_VAR 0 3
79532: PUSH
79533: LD_VAR 0 1
79537: PPUSH
79538: CALL_OW 310
79542: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79543: LD_VAR 0 3
79547: PPUSH
79548: CALL_OW 247
79552: PUSH
79553: LD_INT 2
79555: EQUAL
79556: IFFALSE 79569
// ComExitVehicle ( unit ) else
79558: LD_VAR 0 1
79562: PPUSH
79563: CALL_OW 121
79567: GO 79578
// ComExitBuilding ( unit ) ;
79569: LD_VAR 0 1
79573: PPUSH
79574: CALL_OW 122
// result := tmp ;
79578: LD_ADDR_VAR 0 2
79582: PUSH
79583: LD_VAR 0 3
79587: ST_TO_ADDR
// end ;
79588: LD_VAR 0 2
79592: RET
// export function ComExitAll ( units ) ; var i ; begin
79593: LD_INT 0
79595: PPUSH
79596: PPUSH
// if not units then
79597: LD_VAR 0 1
79601: NOT
79602: IFFALSE 79606
// exit ;
79604: GO 79632
// for i in units do
79606: LD_ADDR_VAR 0 3
79610: PUSH
79611: LD_VAR 0 1
79615: PUSH
79616: FOR_IN
79617: IFFALSE 79630
// ComExit ( i ) ;
79619: LD_VAR 0 3
79623: PPUSH
79624: CALL 79510 0 1
79628: GO 79616
79630: POP
79631: POP
// end ;
79632: LD_VAR 0 2
79636: RET
// export function ResetHc ; begin
79637: LD_INT 0
79639: PPUSH
// InitHc ;
79640: CALL_OW 19
// hc_importance := 0 ;
79644: LD_ADDR_OWVAR 32
79648: PUSH
79649: LD_INT 0
79651: ST_TO_ADDR
// end ;
79652: LD_VAR 0 1
79656: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79657: LD_INT 0
79659: PPUSH
79660: PPUSH
79661: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79662: LD_ADDR_VAR 0 6
79666: PUSH
79667: LD_VAR 0 1
79671: PUSH
79672: LD_VAR 0 3
79676: PLUS
79677: PUSH
79678: LD_INT 2
79680: DIV
79681: ST_TO_ADDR
// if _x < 0 then
79682: LD_VAR 0 6
79686: PUSH
79687: LD_INT 0
79689: LESS
79690: IFFALSE 79707
// _x := _x * - 1 ;
79692: LD_ADDR_VAR 0 6
79696: PUSH
79697: LD_VAR 0 6
79701: PUSH
79702: LD_INT 1
79704: NEG
79705: MUL
79706: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79707: LD_ADDR_VAR 0 7
79711: PUSH
79712: LD_VAR 0 2
79716: PUSH
79717: LD_VAR 0 4
79721: PLUS
79722: PUSH
79723: LD_INT 2
79725: DIV
79726: ST_TO_ADDR
// if _y < 0 then
79727: LD_VAR 0 7
79731: PUSH
79732: LD_INT 0
79734: LESS
79735: IFFALSE 79752
// _y := _y * - 1 ;
79737: LD_ADDR_VAR 0 7
79741: PUSH
79742: LD_VAR 0 7
79746: PUSH
79747: LD_INT 1
79749: NEG
79750: MUL
79751: ST_TO_ADDR
// result := [ _x , _y ] ;
79752: LD_ADDR_VAR 0 5
79756: PUSH
79757: LD_VAR 0 6
79761: PUSH
79762: LD_VAR 0 7
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: ST_TO_ADDR
// end ;
79771: LD_VAR 0 5
79775: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79776: LD_INT 0
79778: PPUSH
79779: PPUSH
79780: PPUSH
79781: PPUSH
// task := GetTaskList ( unit ) ;
79782: LD_ADDR_VAR 0 7
79786: PUSH
79787: LD_VAR 0 1
79791: PPUSH
79792: CALL_OW 437
79796: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79797: LD_VAR 0 7
79801: NOT
79802: PUSH
79803: LD_VAR 0 1
79807: PPUSH
79808: LD_VAR 0 2
79812: PPUSH
79813: CALL_OW 308
79817: NOT
79818: AND
79819: IFFALSE 79823
// exit ;
79821: GO 79941
// if IsInArea ( unit , area ) then
79823: LD_VAR 0 1
79827: PPUSH
79828: LD_VAR 0 2
79832: PPUSH
79833: CALL_OW 308
79837: IFFALSE 79855
// begin ComMoveToArea ( unit , goAway ) ;
79839: LD_VAR 0 1
79843: PPUSH
79844: LD_VAR 0 3
79848: PPUSH
79849: CALL_OW 113
// exit ;
79853: GO 79941
// end ; if task [ 1 ] [ 1 ] <> M then
79855: LD_VAR 0 7
79859: PUSH
79860: LD_INT 1
79862: ARRAY
79863: PUSH
79864: LD_INT 1
79866: ARRAY
79867: PUSH
79868: LD_STRING M
79870: NONEQUAL
79871: IFFALSE 79875
// exit ;
79873: GO 79941
// x := task [ 1 ] [ 2 ] ;
79875: LD_ADDR_VAR 0 5
79879: PUSH
79880: LD_VAR 0 7
79884: PUSH
79885: LD_INT 1
79887: ARRAY
79888: PUSH
79889: LD_INT 2
79891: ARRAY
79892: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79893: LD_ADDR_VAR 0 6
79897: PUSH
79898: LD_VAR 0 7
79902: PUSH
79903: LD_INT 1
79905: ARRAY
79906: PUSH
79907: LD_INT 3
79909: ARRAY
79910: ST_TO_ADDR
// if InArea ( x , y , area ) then
79911: LD_VAR 0 5
79915: PPUSH
79916: LD_VAR 0 6
79920: PPUSH
79921: LD_VAR 0 2
79925: PPUSH
79926: CALL_OW 309
79930: IFFALSE 79941
// ComStop ( unit ) ;
79932: LD_VAR 0 1
79936: PPUSH
79937: CALL_OW 141
// end ;
79941: LD_VAR 0 4
79945: RET
// export function Abs ( value ) ; begin
79946: LD_INT 0
79948: PPUSH
// result := value ;
79949: LD_ADDR_VAR 0 2
79953: PUSH
79954: LD_VAR 0 1
79958: ST_TO_ADDR
// if value < 0 then
79959: LD_VAR 0 1
79963: PUSH
79964: LD_INT 0
79966: LESS
79967: IFFALSE 79984
// result := value * - 1 ;
79969: LD_ADDR_VAR 0 2
79973: PUSH
79974: LD_VAR 0 1
79978: PUSH
79979: LD_INT 1
79981: NEG
79982: MUL
79983: ST_TO_ADDR
// end ;
79984: LD_VAR 0 2
79988: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79989: LD_INT 0
79991: PPUSH
79992: PPUSH
79993: PPUSH
79994: PPUSH
79995: PPUSH
79996: PPUSH
79997: PPUSH
79998: PPUSH
// if not unit or not building then
79999: LD_VAR 0 1
80003: NOT
80004: PUSH
80005: LD_VAR 0 2
80009: NOT
80010: OR
80011: IFFALSE 80015
// exit ;
80013: GO 80241
// x := GetX ( building ) ;
80015: LD_ADDR_VAR 0 4
80019: PUSH
80020: LD_VAR 0 2
80024: PPUSH
80025: CALL_OW 250
80029: ST_TO_ADDR
// y := GetY ( building ) ;
80030: LD_ADDR_VAR 0 6
80034: PUSH
80035: LD_VAR 0 2
80039: PPUSH
80040: CALL_OW 251
80044: ST_TO_ADDR
// d := GetDir ( building ) ;
80045: LD_ADDR_VAR 0 8
80049: PUSH
80050: LD_VAR 0 2
80054: PPUSH
80055: CALL_OW 254
80059: ST_TO_ADDR
// r := 4 ;
80060: LD_ADDR_VAR 0 9
80064: PUSH
80065: LD_INT 4
80067: ST_TO_ADDR
// for i := 1 to 5 do
80068: LD_ADDR_VAR 0 10
80072: PUSH
80073: DOUBLE
80074: LD_INT 1
80076: DEC
80077: ST_TO_ADDR
80078: LD_INT 5
80080: PUSH
80081: FOR_TO
80082: IFFALSE 80239
// begin _x := ShiftX ( x , d , r + i ) ;
80084: LD_ADDR_VAR 0 5
80088: PUSH
80089: LD_VAR 0 4
80093: PPUSH
80094: LD_VAR 0 8
80098: PPUSH
80099: LD_VAR 0 9
80103: PUSH
80104: LD_VAR 0 10
80108: PLUS
80109: PPUSH
80110: CALL_OW 272
80114: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80115: LD_ADDR_VAR 0 7
80119: PUSH
80120: LD_VAR 0 6
80124: PPUSH
80125: LD_VAR 0 8
80129: PPUSH
80130: LD_VAR 0 9
80134: PUSH
80135: LD_VAR 0 10
80139: PLUS
80140: PPUSH
80141: CALL_OW 273
80145: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80146: LD_VAR 0 5
80150: PPUSH
80151: LD_VAR 0 7
80155: PPUSH
80156: CALL_OW 488
80160: PUSH
80161: LD_VAR 0 5
80165: PPUSH
80166: LD_VAR 0 7
80170: PPUSH
80171: CALL_OW 428
80175: PPUSH
80176: CALL_OW 247
80180: PUSH
80181: LD_INT 3
80183: PUSH
80184: LD_INT 2
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: IN
80191: NOT
80192: AND
80193: IFFALSE 80237
// begin ComMoveXY ( unit , _x , _y ) ;
80195: LD_VAR 0 1
80199: PPUSH
80200: LD_VAR 0 5
80204: PPUSH
80205: LD_VAR 0 7
80209: PPUSH
80210: CALL_OW 111
// result := [ _x , _y ] ;
80214: LD_ADDR_VAR 0 3
80218: PUSH
80219: LD_VAR 0 5
80223: PUSH
80224: LD_VAR 0 7
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: ST_TO_ADDR
// exit ;
80233: POP
80234: POP
80235: GO 80241
// end ; end ;
80237: GO 80081
80239: POP
80240: POP
// end ;
80241: LD_VAR 0 3
80245: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80246: LD_INT 0
80248: PPUSH
80249: PPUSH
80250: PPUSH
// result := 0 ;
80251: LD_ADDR_VAR 0 3
80255: PUSH
80256: LD_INT 0
80258: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80259: LD_VAR 0 1
80263: PUSH
80264: LD_INT 0
80266: LESS
80267: PUSH
80268: LD_VAR 0 1
80272: PUSH
80273: LD_INT 8
80275: GREATER
80276: OR
80277: PUSH
80278: LD_VAR 0 2
80282: PUSH
80283: LD_INT 0
80285: LESS
80286: OR
80287: PUSH
80288: LD_VAR 0 2
80292: PUSH
80293: LD_INT 8
80295: GREATER
80296: OR
80297: IFFALSE 80301
// exit ;
80299: GO 80376
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80301: LD_ADDR_VAR 0 4
80305: PUSH
80306: LD_INT 22
80308: PUSH
80309: LD_VAR 0 2
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PPUSH
80318: CALL_OW 69
80322: PUSH
80323: FOR_IN
80324: IFFALSE 80374
// begin un := UnitShoot ( i ) ;
80326: LD_ADDR_VAR 0 5
80330: PUSH
80331: LD_VAR 0 4
80335: PPUSH
80336: CALL_OW 504
80340: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80341: LD_VAR 0 5
80345: PPUSH
80346: CALL_OW 255
80350: PUSH
80351: LD_VAR 0 1
80355: EQUAL
80356: IFFALSE 80372
// begin result := un ;
80358: LD_ADDR_VAR 0 3
80362: PUSH
80363: LD_VAR 0 5
80367: ST_TO_ADDR
// exit ;
80368: POP
80369: POP
80370: GO 80376
// end ; end ;
80372: GO 80323
80374: POP
80375: POP
// end ;
80376: LD_VAR 0 3
80380: RET
// export function GetCargoBay ( units ) ; begin
80381: LD_INT 0
80383: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80384: LD_ADDR_VAR 0 2
80388: PUSH
80389: LD_VAR 0 1
80393: PPUSH
80394: LD_INT 2
80396: PUSH
80397: LD_INT 34
80399: PUSH
80400: LD_INT 12
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PUSH
80407: LD_INT 34
80409: PUSH
80410: LD_INT 51
80412: PUSH
80413: EMPTY
80414: LIST
80415: LIST
80416: PUSH
80417: LD_INT 34
80419: PUSH
80420: LD_INT 32
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: PUSH
80427: LD_INT 34
80429: PUSH
80430: LD_INT 89
80432: PUSH
80433: EMPTY
80434: LIST
80435: LIST
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: PPUSH
80444: CALL_OW 72
80448: ST_TO_ADDR
// end ;
80449: LD_VAR 0 2
80453: RET
// export function Negate ( value ) ; begin
80454: LD_INT 0
80456: PPUSH
// result := not value ;
80457: LD_ADDR_VAR 0 2
80461: PUSH
80462: LD_VAR 0 1
80466: NOT
80467: ST_TO_ADDR
// end ;
80468: LD_VAR 0 2
80472: RET
// export function Inc ( value ) ; begin
80473: LD_INT 0
80475: PPUSH
// result := value + 1 ;
80476: LD_ADDR_VAR 0 2
80480: PUSH
80481: LD_VAR 0 1
80485: PUSH
80486: LD_INT 1
80488: PLUS
80489: ST_TO_ADDR
// end ;
80490: LD_VAR 0 2
80494: RET
// export function Dec ( value ) ; begin
80495: LD_INT 0
80497: PPUSH
// result := value - 1 ;
80498: LD_ADDR_VAR 0 2
80502: PUSH
80503: LD_VAR 0 1
80507: PUSH
80508: LD_INT 1
80510: MINUS
80511: ST_TO_ADDR
// end ;
80512: LD_VAR 0 2
80516: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80517: LD_INT 0
80519: PPUSH
80520: PPUSH
80521: PPUSH
80522: PPUSH
80523: PPUSH
80524: PPUSH
80525: PPUSH
80526: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80527: LD_VAR 0 1
80531: PPUSH
80532: LD_VAR 0 2
80536: PPUSH
80537: CALL_OW 488
80541: NOT
80542: PUSH
80543: LD_VAR 0 3
80547: PPUSH
80548: LD_VAR 0 4
80552: PPUSH
80553: CALL_OW 488
80557: NOT
80558: OR
80559: IFFALSE 80572
// begin result := - 1 ;
80561: LD_ADDR_VAR 0 5
80565: PUSH
80566: LD_INT 1
80568: NEG
80569: ST_TO_ADDR
// exit ;
80570: GO 80807
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80572: LD_ADDR_VAR 0 12
80576: PUSH
80577: LD_VAR 0 1
80581: PPUSH
80582: LD_VAR 0 2
80586: PPUSH
80587: LD_VAR 0 3
80591: PPUSH
80592: LD_VAR 0 4
80596: PPUSH
80597: CALL 79657 0 4
80601: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80602: LD_ADDR_VAR 0 11
80606: PUSH
80607: LD_VAR 0 1
80611: PPUSH
80612: LD_VAR 0 2
80616: PPUSH
80617: LD_VAR 0 12
80621: PUSH
80622: LD_INT 1
80624: ARRAY
80625: PPUSH
80626: LD_VAR 0 12
80630: PUSH
80631: LD_INT 2
80633: ARRAY
80634: PPUSH
80635: CALL_OW 298
80639: ST_TO_ADDR
// distance := 9999 ;
80640: LD_ADDR_VAR 0 10
80644: PUSH
80645: LD_INT 9999
80647: ST_TO_ADDR
// for i := 0 to 5 do
80648: LD_ADDR_VAR 0 6
80652: PUSH
80653: DOUBLE
80654: LD_INT 0
80656: DEC
80657: ST_TO_ADDR
80658: LD_INT 5
80660: PUSH
80661: FOR_TO
80662: IFFALSE 80805
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80664: LD_ADDR_VAR 0 7
80668: PUSH
80669: LD_VAR 0 1
80673: PPUSH
80674: LD_VAR 0 6
80678: PPUSH
80679: LD_VAR 0 11
80683: PPUSH
80684: CALL_OW 272
80688: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80689: LD_ADDR_VAR 0 8
80693: PUSH
80694: LD_VAR 0 2
80698: PPUSH
80699: LD_VAR 0 6
80703: PPUSH
80704: LD_VAR 0 11
80708: PPUSH
80709: CALL_OW 273
80713: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80714: LD_VAR 0 7
80718: PPUSH
80719: LD_VAR 0 8
80723: PPUSH
80724: CALL_OW 488
80728: NOT
80729: IFFALSE 80733
// continue ;
80731: GO 80661
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80733: LD_ADDR_VAR 0 9
80737: PUSH
80738: LD_VAR 0 12
80742: PUSH
80743: LD_INT 1
80745: ARRAY
80746: PPUSH
80747: LD_VAR 0 12
80751: PUSH
80752: LD_INT 2
80754: ARRAY
80755: PPUSH
80756: LD_VAR 0 7
80760: PPUSH
80761: LD_VAR 0 8
80765: PPUSH
80766: CALL_OW 298
80770: ST_TO_ADDR
// if tmp < distance then
80771: LD_VAR 0 9
80775: PUSH
80776: LD_VAR 0 10
80780: LESS
80781: IFFALSE 80803
// begin result := i ;
80783: LD_ADDR_VAR 0 5
80787: PUSH
80788: LD_VAR 0 6
80792: ST_TO_ADDR
// distance := tmp ;
80793: LD_ADDR_VAR 0 10
80797: PUSH
80798: LD_VAR 0 9
80802: ST_TO_ADDR
// end ; end ;
80803: GO 80661
80805: POP
80806: POP
// end ;
80807: LD_VAR 0 5
80811: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80812: LD_INT 0
80814: PPUSH
80815: PPUSH
// if not driver or not IsInUnit ( driver ) then
80816: LD_VAR 0 1
80820: NOT
80821: PUSH
80822: LD_VAR 0 1
80826: PPUSH
80827: CALL_OW 310
80831: NOT
80832: OR
80833: IFFALSE 80837
// exit ;
80835: GO 80927
// vehicle := IsInUnit ( driver ) ;
80837: LD_ADDR_VAR 0 3
80841: PUSH
80842: LD_VAR 0 1
80846: PPUSH
80847: CALL_OW 310
80851: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80852: LD_VAR 0 1
80856: PPUSH
80857: LD_STRING \
80859: PUSH
80860: LD_INT 0
80862: PUSH
80863: LD_INT 0
80865: PUSH
80866: LD_INT 0
80868: PUSH
80869: LD_INT 0
80871: PUSH
80872: LD_INT 0
80874: PUSH
80875: LD_INT 0
80877: PUSH
80878: EMPTY
80879: LIST
80880: LIST
80881: LIST
80882: LIST
80883: LIST
80884: LIST
80885: LIST
80886: PUSH
80887: LD_STRING E
80889: PUSH
80890: LD_INT 0
80892: PUSH
80893: LD_INT 0
80895: PUSH
80896: LD_VAR 0 3
80900: PUSH
80901: LD_INT 0
80903: PUSH
80904: LD_INT 0
80906: PUSH
80907: LD_INT 0
80909: PUSH
80910: EMPTY
80911: LIST
80912: LIST
80913: LIST
80914: LIST
80915: LIST
80916: LIST
80917: LIST
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: PPUSH
80923: CALL_OW 446
// end ;
80927: LD_VAR 0 2
80931: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80932: LD_INT 0
80934: PPUSH
80935: PPUSH
// if not driver or not IsInUnit ( driver ) then
80936: LD_VAR 0 1
80940: NOT
80941: PUSH
80942: LD_VAR 0 1
80946: PPUSH
80947: CALL_OW 310
80951: NOT
80952: OR
80953: IFFALSE 80957
// exit ;
80955: GO 81047
// vehicle := IsInUnit ( driver ) ;
80957: LD_ADDR_VAR 0 3
80961: PUSH
80962: LD_VAR 0 1
80966: PPUSH
80967: CALL_OW 310
80971: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80972: LD_VAR 0 1
80976: PPUSH
80977: LD_STRING \
80979: PUSH
80980: LD_INT 0
80982: PUSH
80983: LD_INT 0
80985: PUSH
80986: LD_INT 0
80988: PUSH
80989: LD_INT 0
80991: PUSH
80992: LD_INT 0
80994: PUSH
80995: LD_INT 0
80997: PUSH
80998: EMPTY
80999: LIST
81000: LIST
81001: LIST
81002: LIST
81003: LIST
81004: LIST
81005: LIST
81006: PUSH
81007: LD_STRING E
81009: PUSH
81010: LD_INT 0
81012: PUSH
81013: LD_INT 0
81015: PUSH
81016: LD_VAR 0 3
81020: PUSH
81021: LD_INT 0
81023: PUSH
81024: LD_INT 0
81026: PUSH
81027: LD_INT 0
81029: PUSH
81030: EMPTY
81031: LIST
81032: LIST
81033: LIST
81034: LIST
81035: LIST
81036: LIST
81037: LIST
81038: PUSH
81039: EMPTY
81040: LIST
81041: LIST
81042: PPUSH
81043: CALL_OW 447
// end ;
81047: LD_VAR 0 2
81051: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81052: LD_INT 0
81054: PPUSH
81055: PPUSH
81056: PPUSH
// tmp := [ ] ;
81057: LD_ADDR_VAR 0 5
81061: PUSH
81062: EMPTY
81063: ST_TO_ADDR
// for i in units do
81064: LD_ADDR_VAR 0 4
81068: PUSH
81069: LD_VAR 0 1
81073: PUSH
81074: FOR_IN
81075: IFFALSE 81113
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81077: LD_ADDR_VAR 0 5
81081: PUSH
81082: LD_VAR 0 5
81086: PPUSH
81087: LD_VAR 0 5
81091: PUSH
81092: LD_INT 1
81094: PLUS
81095: PPUSH
81096: LD_VAR 0 4
81100: PPUSH
81101: CALL_OW 256
81105: PPUSH
81106: CALL_OW 2
81110: ST_TO_ADDR
81111: GO 81074
81113: POP
81114: POP
// if not tmp then
81115: LD_VAR 0 5
81119: NOT
81120: IFFALSE 81124
// exit ;
81122: GO 81172
// if asc then
81124: LD_VAR 0 2
81128: IFFALSE 81152
// result := SortListByListAsc ( units , tmp ) else
81130: LD_ADDR_VAR 0 3
81134: PUSH
81135: LD_VAR 0 1
81139: PPUSH
81140: LD_VAR 0 5
81144: PPUSH
81145: CALL_OW 76
81149: ST_TO_ADDR
81150: GO 81172
// result := SortListByListDesc ( units , tmp ) ;
81152: LD_ADDR_VAR 0 3
81156: PUSH
81157: LD_VAR 0 1
81161: PPUSH
81162: LD_VAR 0 5
81166: PPUSH
81167: CALL_OW 77
81171: ST_TO_ADDR
// end ;
81172: LD_VAR 0 3
81176: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81177: LD_INT 0
81179: PPUSH
81180: PPUSH
// task := GetTaskList ( mech ) ;
81181: LD_ADDR_VAR 0 4
81185: PUSH
81186: LD_VAR 0 1
81190: PPUSH
81191: CALL_OW 437
81195: ST_TO_ADDR
// if not task then
81196: LD_VAR 0 4
81200: NOT
81201: IFFALSE 81205
// exit ;
81203: GO 81247
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81205: LD_ADDR_VAR 0 3
81209: PUSH
81210: LD_VAR 0 4
81214: PUSH
81215: LD_INT 1
81217: ARRAY
81218: PUSH
81219: LD_INT 1
81221: ARRAY
81222: PUSH
81223: LD_STRING r
81225: EQUAL
81226: PUSH
81227: LD_VAR 0 4
81231: PUSH
81232: LD_INT 1
81234: ARRAY
81235: PUSH
81236: LD_INT 4
81238: ARRAY
81239: PUSH
81240: LD_VAR 0 2
81244: EQUAL
81245: AND
81246: ST_TO_ADDR
// end ;
81247: LD_VAR 0 3
81251: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81252: LD_INT 0
81254: PPUSH
// SetDir ( unit , d ) ;
81255: LD_VAR 0 1
81259: PPUSH
81260: LD_VAR 0 4
81264: PPUSH
81265: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81269: LD_ADDR_VAR 0 6
81273: PUSH
81274: LD_VAR 0 1
81278: PPUSH
81279: LD_VAR 0 2
81283: PPUSH
81284: LD_VAR 0 3
81288: PPUSH
81289: LD_VAR 0 5
81293: PPUSH
81294: CALL_OW 48
81298: ST_TO_ADDR
// end ;
81299: LD_VAR 0 6
81303: RET
// export function ToNaturalNumber ( number ) ; begin
81304: LD_INT 0
81306: PPUSH
// result := number div 1 ;
81307: LD_ADDR_VAR 0 2
81311: PUSH
81312: LD_VAR 0 1
81316: PUSH
81317: LD_INT 1
81319: DIV
81320: ST_TO_ADDR
// if number < 0 then
81321: LD_VAR 0 1
81325: PUSH
81326: LD_INT 0
81328: LESS
81329: IFFALSE 81339
// result := 0 ;
81331: LD_ADDR_VAR 0 2
81335: PUSH
81336: LD_INT 0
81338: ST_TO_ADDR
// end ;
81339: LD_VAR 0 2
81343: RET
// export function SortByClass ( units , class ) ; var un ; begin
81344: LD_INT 0
81346: PPUSH
81347: PPUSH
// if not units or not class then
81348: LD_VAR 0 1
81352: NOT
81353: PUSH
81354: LD_VAR 0 2
81358: NOT
81359: OR
81360: IFFALSE 81364
// exit ;
81362: GO 81459
// result := [ ] ;
81364: LD_ADDR_VAR 0 3
81368: PUSH
81369: EMPTY
81370: ST_TO_ADDR
// for un in units do
81371: LD_ADDR_VAR 0 4
81375: PUSH
81376: LD_VAR 0 1
81380: PUSH
81381: FOR_IN
81382: IFFALSE 81457
// if GetClass ( un ) = class then
81384: LD_VAR 0 4
81388: PPUSH
81389: CALL_OW 257
81393: PUSH
81394: LD_VAR 0 2
81398: EQUAL
81399: IFFALSE 81426
// result := Insert ( result , 1 , un ) else
81401: LD_ADDR_VAR 0 3
81405: PUSH
81406: LD_VAR 0 3
81410: PPUSH
81411: LD_INT 1
81413: PPUSH
81414: LD_VAR 0 4
81418: PPUSH
81419: CALL_OW 2
81423: ST_TO_ADDR
81424: GO 81455
// result := Replace ( result , result + 1 , un ) ;
81426: LD_ADDR_VAR 0 3
81430: PUSH
81431: LD_VAR 0 3
81435: PPUSH
81436: LD_VAR 0 3
81440: PUSH
81441: LD_INT 1
81443: PLUS
81444: PPUSH
81445: LD_VAR 0 4
81449: PPUSH
81450: CALL_OW 1
81454: ST_TO_ADDR
81455: GO 81381
81457: POP
81458: POP
// end ;
81459: LD_VAR 0 3
81463: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81464: LD_INT 0
81466: PPUSH
81467: PPUSH
81468: PPUSH
81469: PPUSH
81470: PPUSH
81471: PPUSH
81472: PPUSH
// result := [ ] ;
81473: LD_ADDR_VAR 0 4
81477: PUSH
81478: EMPTY
81479: ST_TO_ADDR
// if x - r < 0 then
81480: LD_VAR 0 1
81484: PUSH
81485: LD_VAR 0 3
81489: MINUS
81490: PUSH
81491: LD_INT 0
81493: LESS
81494: IFFALSE 81506
// min_x := 0 else
81496: LD_ADDR_VAR 0 8
81500: PUSH
81501: LD_INT 0
81503: ST_TO_ADDR
81504: GO 81522
// min_x := x - r ;
81506: LD_ADDR_VAR 0 8
81510: PUSH
81511: LD_VAR 0 1
81515: PUSH
81516: LD_VAR 0 3
81520: MINUS
81521: ST_TO_ADDR
// if y - r < 0 then
81522: LD_VAR 0 2
81526: PUSH
81527: LD_VAR 0 3
81531: MINUS
81532: PUSH
81533: LD_INT 0
81535: LESS
81536: IFFALSE 81548
// min_y := 0 else
81538: LD_ADDR_VAR 0 7
81542: PUSH
81543: LD_INT 0
81545: ST_TO_ADDR
81546: GO 81564
// min_y := y - r ;
81548: LD_ADDR_VAR 0 7
81552: PUSH
81553: LD_VAR 0 2
81557: PUSH
81558: LD_VAR 0 3
81562: MINUS
81563: ST_TO_ADDR
// max_x := x + r ;
81564: LD_ADDR_VAR 0 9
81568: PUSH
81569: LD_VAR 0 1
81573: PUSH
81574: LD_VAR 0 3
81578: PLUS
81579: ST_TO_ADDR
// max_y := y + r ;
81580: LD_ADDR_VAR 0 10
81584: PUSH
81585: LD_VAR 0 2
81589: PUSH
81590: LD_VAR 0 3
81594: PLUS
81595: ST_TO_ADDR
// for _x = min_x to max_x do
81596: LD_ADDR_VAR 0 5
81600: PUSH
81601: DOUBLE
81602: LD_VAR 0 8
81606: DEC
81607: ST_TO_ADDR
81608: LD_VAR 0 9
81612: PUSH
81613: FOR_TO
81614: IFFALSE 81715
// for _y = min_y to max_y do
81616: LD_ADDR_VAR 0 6
81620: PUSH
81621: DOUBLE
81622: LD_VAR 0 7
81626: DEC
81627: ST_TO_ADDR
81628: LD_VAR 0 10
81632: PUSH
81633: FOR_TO
81634: IFFALSE 81711
// begin if not ValidHex ( _x , _y ) then
81636: LD_VAR 0 5
81640: PPUSH
81641: LD_VAR 0 6
81645: PPUSH
81646: CALL_OW 488
81650: NOT
81651: IFFALSE 81655
// continue ;
81653: GO 81633
// if GetResourceTypeXY ( _x , _y ) then
81655: LD_VAR 0 5
81659: PPUSH
81660: LD_VAR 0 6
81664: PPUSH
81665: CALL_OW 283
81669: IFFALSE 81709
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81671: LD_ADDR_VAR 0 4
81675: PUSH
81676: LD_VAR 0 4
81680: PPUSH
81681: LD_VAR 0 4
81685: PUSH
81686: LD_INT 1
81688: PLUS
81689: PPUSH
81690: LD_VAR 0 5
81694: PUSH
81695: LD_VAR 0 6
81699: PUSH
81700: EMPTY
81701: LIST
81702: LIST
81703: PPUSH
81704: CALL_OW 1
81708: ST_TO_ADDR
// end ;
81709: GO 81633
81711: POP
81712: POP
81713: GO 81613
81715: POP
81716: POP
// end ;
81717: LD_VAR 0 4
81721: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81722: LD_INT 0
81724: PPUSH
81725: PPUSH
81726: PPUSH
81727: PPUSH
81728: PPUSH
81729: PPUSH
81730: PPUSH
81731: PPUSH
// if not units then
81732: LD_VAR 0 1
81736: NOT
81737: IFFALSE 81741
// exit ;
81739: GO 82269
// result := UnitFilter ( units , [ f_ok ] ) ;
81741: LD_ADDR_VAR 0 3
81745: PUSH
81746: LD_VAR 0 1
81750: PPUSH
81751: LD_INT 50
81753: PUSH
81754: EMPTY
81755: LIST
81756: PPUSH
81757: CALL_OW 72
81761: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81762: LD_ADDR_VAR 0 8
81766: PUSH
81767: LD_VAR 0 1
81771: PUSH
81772: LD_INT 1
81774: ARRAY
81775: PPUSH
81776: CALL_OW 255
81780: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81781: LD_ADDR_VAR 0 10
81785: PUSH
81786: LD_INT 29
81788: PUSH
81789: LD_INT 91
81791: PUSH
81792: LD_INT 49
81794: PUSH
81795: EMPTY
81796: LIST
81797: LIST
81798: LIST
81799: ST_TO_ADDR
// if not result then
81800: LD_VAR 0 3
81804: NOT
81805: IFFALSE 81809
// exit ;
81807: GO 82269
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81809: LD_ADDR_VAR 0 5
81813: PUSH
81814: LD_INT 81
81816: PUSH
81817: LD_VAR 0 8
81821: PUSH
81822: EMPTY
81823: LIST
81824: LIST
81825: PPUSH
81826: CALL_OW 69
81830: ST_TO_ADDR
// for i in result do
81831: LD_ADDR_VAR 0 4
81835: PUSH
81836: LD_VAR 0 3
81840: PUSH
81841: FOR_IN
81842: IFFALSE 82267
// begin tag := GetTag ( i ) + 1 ;
81844: LD_ADDR_VAR 0 9
81848: PUSH
81849: LD_VAR 0 4
81853: PPUSH
81854: CALL_OW 110
81858: PUSH
81859: LD_INT 1
81861: PLUS
81862: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81863: LD_ADDR_VAR 0 7
81867: PUSH
81868: LD_VAR 0 4
81872: PPUSH
81873: CALL_OW 250
81877: PPUSH
81878: LD_VAR 0 4
81882: PPUSH
81883: CALL_OW 251
81887: PPUSH
81888: LD_INT 4
81890: PPUSH
81891: CALL 81464 0 3
81895: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81896: LD_VAR 0 4
81900: PPUSH
81901: CALL_OW 247
81905: PUSH
81906: LD_INT 2
81908: EQUAL
81909: PUSH
81910: LD_VAR 0 7
81914: PUSH
81915: LD_INT 2
81917: GREATER
81918: AND
81919: PUSH
81920: LD_VAR 0 4
81924: PPUSH
81925: CALL_OW 264
81929: PUSH
81930: LD_VAR 0 10
81934: IN
81935: NOT
81936: AND
81937: IFFALSE 81976
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81939: LD_VAR 0 4
81943: PPUSH
81944: LD_VAR 0 7
81948: PUSH
81949: LD_INT 1
81951: ARRAY
81952: PUSH
81953: LD_INT 1
81955: ARRAY
81956: PPUSH
81957: LD_VAR 0 7
81961: PUSH
81962: LD_INT 1
81964: ARRAY
81965: PUSH
81966: LD_INT 2
81968: ARRAY
81969: PPUSH
81970: CALL_OW 116
81974: GO 82265
// if path > tag then
81976: LD_VAR 0 2
81980: PUSH
81981: LD_VAR 0 9
81985: GREATER
81986: IFFALSE 82194
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81988: LD_ADDR_VAR 0 6
81992: PUSH
81993: LD_VAR 0 5
81997: PPUSH
81998: LD_INT 91
82000: PUSH
82001: LD_VAR 0 4
82005: PUSH
82006: LD_INT 8
82008: PUSH
82009: EMPTY
82010: LIST
82011: LIST
82012: LIST
82013: PPUSH
82014: CALL_OW 72
82018: ST_TO_ADDR
// if nearEnemy then
82019: LD_VAR 0 6
82023: IFFALSE 82092
// begin if GetWeapon ( i ) = ru_time_lapser then
82025: LD_VAR 0 4
82029: PPUSH
82030: CALL_OW 264
82034: PUSH
82035: LD_INT 49
82037: EQUAL
82038: IFFALSE 82066
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82040: LD_VAR 0 4
82044: PPUSH
82045: LD_VAR 0 6
82049: PPUSH
82050: LD_VAR 0 4
82054: PPUSH
82055: CALL_OW 74
82059: PPUSH
82060: CALL_OW 112
82064: GO 82090
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82066: LD_VAR 0 4
82070: PPUSH
82071: LD_VAR 0 6
82075: PPUSH
82076: LD_VAR 0 4
82080: PPUSH
82081: CALL_OW 74
82085: PPUSH
82086: CALL 83340 0 2
// end else
82090: GO 82192
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82092: LD_VAR 0 4
82096: PPUSH
82097: LD_VAR 0 2
82101: PUSH
82102: LD_VAR 0 9
82106: ARRAY
82107: PUSH
82108: LD_INT 1
82110: ARRAY
82111: PPUSH
82112: LD_VAR 0 2
82116: PUSH
82117: LD_VAR 0 9
82121: ARRAY
82122: PUSH
82123: LD_INT 2
82125: ARRAY
82126: PPUSH
82127: CALL_OW 297
82131: PUSH
82132: LD_INT 6
82134: GREATER
82135: IFFALSE 82178
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82137: LD_VAR 0 4
82141: PPUSH
82142: LD_VAR 0 2
82146: PUSH
82147: LD_VAR 0 9
82151: ARRAY
82152: PUSH
82153: LD_INT 1
82155: ARRAY
82156: PPUSH
82157: LD_VAR 0 2
82161: PUSH
82162: LD_VAR 0 9
82166: ARRAY
82167: PUSH
82168: LD_INT 2
82170: ARRAY
82171: PPUSH
82172: CALL_OW 114
82176: GO 82192
// SetTag ( i , tag ) ;
82178: LD_VAR 0 4
82182: PPUSH
82183: LD_VAR 0 9
82187: PPUSH
82188: CALL_OW 109
// end else
82192: GO 82265
// if enemy then
82194: LD_VAR 0 5
82198: IFFALSE 82265
// begin if GetWeapon ( i ) = ru_time_lapser then
82200: LD_VAR 0 4
82204: PPUSH
82205: CALL_OW 264
82209: PUSH
82210: LD_INT 49
82212: EQUAL
82213: IFFALSE 82241
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82215: LD_VAR 0 4
82219: PPUSH
82220: LD_VAR 0 5
82224: PPUSH
82225: LD_VAR 0 4
82229: PPUSH
82230: CALL_OW 74
82234: PPUSH
82235: CALL_OW 112
82239: GO 82265
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82241: LD_VAR 0 4
82245: PPUSH
82246: LD_VAR 0 5
82250: PPUSH
82251: LD_VAR 0 4
82255: PPUSH
82256: CALL_OW 74
82260: PPUSH
82261: CALL 83340 0 2
// end ; end ;
82265: GO 81841
82267: POP
82268: POP
// end ;
82269: LD_VAR 0 3
82273: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82274: LD_INT 0
82276: PPUSH
82277: PPUSH
82278: PPUSH
// if not unit or IsInUnit ( unit ) then
82279: LD_VAR 0 1
82283: NOT
82284: PUSH
82285: LD_VAR 0 1
82289: PPUSH
82290: CALL_OW 310
82294: OR
82295: IFFALSE 82299
// exit ;
82297: GO 82390
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82299: LD_ADDR_VAR 0 4
82303: PUSH
82304: LD_VAR 0 1
82308: PPUSH
82309: CALL_OW 250
82313: PPUSH
82314: LD_VAR 0 2
82318: PPUSH
82319: LD_INT 1
82321: PPUSH
82322: CALL_OW 272
82326: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82327: LD_ADDR_VAR 0 5
82331: PUSH
82332: LD_VAR 0 1
82336: PPUSH
82337: CALL_OW 251
82341: PPUSH
82342: LD_VAR 0 2
82346: PPUSH
82347: LD_INT 1
82349: PPUSH
82350: CALL_OW 273
82354: ST_TO_ADDR
// if ValidHex ( x , y ) then
82355: LD_VAR 0 4
82359: PPUSH
82360: LD_VAR 0 5
82364: PPUSH
82365: CALL_OW 488
82369: IFFALSE 82390
// ComTurnXY ( unit , x , y ) ;
82371: LD_VAR 0 1
82375: PPUSH
82376: LD_VAR 0 4
82380: PPUSH
82381: LD_VAR 0 5
82385: PPUSH
82386: CALL_OW 118
// end ;
82390: LD_VAR 0 3
82394: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82395: LD_INT 0
82397: PPUSH
82398: PPUSH
// result := false ;
82399: LD_ADDR_VAR 0 3
82403: PUSH
82404: LD_INT 0
82406: ST_TO_ADDR
// if not units then
82407: LD_VAR 0 2
82411: NOT
82412: IFFALSE 82416
// exit ;
82414: GO 82461
// for i in units do
82416: LD_ADDR_VAR 0 4
82420: PUSH
82421: LD_VAR 0 2
82425: PUSH
82426: FOR_IN
82427: IFFALSE 82459
// if See ( side , i ) then
82429: LD_VAR 0 1
82433: PPUSH
82434: LD_VAR 0 4
82438: PPUSH
82439: CALL_OW 292
82443: IFFALSE 82457
// begin result := true ;
82445: LD_ADDR_VAR 0 3
82449: PUSH
82450: LD_INT 1
82452: ST_TO_ADDR
// exit ;
82453: POP
82454: POP
82455: GO 82461
// end ;
82457: GO 82426
82459: POP
82460: POP
// end ;
82461: LD_VAR 0 3
82465: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82466: LD_INT 0
82468: PPUSH
82469: PPUSH
82470: PPUSH
82471: PPUSH
// if not unit or not points then
82472: LD_VAR 0 1
82476: NOT
82477: PUSH
82478: LD_VAR 0 2
82482: NOT
82483: OR
82484: IFFALSE 82488
// exit ;
82486: GO 82578
// dist := 99999 ;
82488: LD_ADDR_VAR 0 5
82492: PUSH
82493: LD_INT 99999
82495: ST_TO_ADDR
// for i in points do
82496: LD_ADDR_VAR 0 4
82500: PUSH
82501: LD_VAR 0 2
82505: PUSH
82506: FOR_IN
82507: IFFALSE 82576
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82509: LD_ADDR_VAR 0 6
82513: PUSH
82514: LD_VAR 0 1
82518: PPUSH
82519: LD_VAR 0 4
82523: PUSH
82524: LD_INT 1
82526: ARRAY
82527: PPUSH
82528: LD_VAR 0 4
82532: PUSH
82533: LD_INT 2
82535: ARRAY
82536: PPUSH
82537: CALL_OW 297
82541: ST_TO_ADDR
// if tmpDist < dist then
82542: LD_VAR 0 6
82546: PUSH
82547: LD_VAR 0 5
82551: LESS
82552: IFFALSE 82574
// begin result := i ;
82554: LD_ADDR_VAR 0 3
82558: PUSH
82559: LD_VAR 0 4
82563: ST_TO_ADDR
// dist := tmpDist ;
82564: LD_ADDR_VAR 0 5
82568: PUSH
82569: LD_VAR 0 6
82573: ST_TO_ADDR
// end ; end ;
82574: GO 82506
82576: POP
82577: POP
// end ;
82578: LD_VAR 0 3
82582: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82583: LD_INT 0
82585: PPUSH
// uc_side := side ;
82586: LD_ADDR_OWVAR 20
82590: PUSH
82591: LD_VAR 0 1
82595: ST_TO_ADDR
// uc_nation := 3 ;
82596: LD_ADDR_OWVAR 21
82600: PUSH
82601: LD_INT 3
82603: ST_TO_ADDR
// vc_chassis := 25 ;
82604: LD_ADDR_OWVAR 37
82608: PUSH
82609: LD_INT 25
82611: ST_TO_ADDR
// vc_engine := engine_siberite ;
82612: LD_ADDR_OWVAR 39
82616: PUSH
82617: LD_INT 3
82619: ST_TO_ADDR
// vc_control := control_computer ;
82620: LD_ADDR_OWVAR 38
82624: PUSH
82625: LD_INT 3
82627: ST_TO_ADDR
// vc_weapon := 59 ;
82628: LD_ADDR_OWVAR 40
82632: PUSH
82633: LD_INT 59
82635: ST_TO_ADDR
// result := CreateVehicle ;
82636: LD_ADDR_VAR 0 5
82640: PUSH
82641: CALL_OW 45
82645: ST_TO_ADDR
// SetDir ( result , d ) ;
82646: LD_VAR 0 5
82650: PPUSH
82651: LD_VAR 0 4
82655: PPUSH
82656: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82660: LD_VAR 0 5
82664: PPUSH
82665: LD_VAR 0 2
82669: PPUSH
82670: LD_VAR 0 3
82674: PPUSH
82675: LD_INT 0
82677: PPUSH
82678: CALL_OW 48
// end ;
82682: LD_VAR 0 5
82686: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82687: LD_INT 0
82689: PPUSH
82690: PPUSH
82691: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82692: LD_ADDR_VAR 0 2
82696: PUSH
82697: LD_INT 0
82699: PUSH
82700: LD_INT 0
82702: PUSH
82703: LD_INT 0
82705: PUSH
82706: LD_INT 0
82708: PUSH
82709: EMPTY
82710: LIST
82711: LIST
82712: LIST
82713: LIST
82714: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82715: LD_VAR 0 1
82719: NOT
82720: PUSH
82721: LD_VAR 0 1
82725: PPUSH
82726: CALL_OW 264
82730: PUSH
82731: LD_INT 12
82733: PUSH
82734: LD_INT 51
82736: PUSH
82737: LD_INT 32
82739: PUSH
82740: LD_INT 89
82742: PUSH
82743: EMPTY
82744: LIST
82745: LIST
82746: LIST
82747: LIST
82748: IN
82749: NOT
82750: OR
82751: IFFALSE 82755
// exit ;
82753: GO 82853
// for i := 1 to 3 do
82755: LD_ADDR_VAR 0 3
82759: PUSH
82760: DOUBLE
82761: LD_INT 1
82763: DEC
82764: ST_TO_ADDR
82765: LD_INT 3
82767: PUSH
82768: FOR_TO
82769: IFFALSE 82851
// begin tmp := GetCargo ( cargo , i ) ;
82771: LD_ADDR_VAR 0 4
82775: PUSH
82776: LD_VAR 0 1
82780: PPUSH
82781: LD_VAR 0 3
82785: PPUSH
82786: CALL_OW 289
82790: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82791: LD_ADDR_VAR 0 2
82795: PUSH
82796: LD_VAR 0 2
82800: PPUSH
82801: LD_VAR 0 3
82805: PPUSH
82806: LD_VAR 0 4
82810: PPUSH
82811: CALL_OW 1
82815: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82816: LD_ADDR_VAR 0 2
82820: PUSH
82821: LD_VAR 0 2
82825: PPUSH
82826: LD_INT 4
82828: PPUSH
82829: LD_VAR 0 2
82833: PUSH
82834: LD_INT 4
82836: ARRAY
82837: PUSH
82838: LD_VAR 0 4
82842: PLUS
82843: PPUSH
82844: CALL_OW 1
82848: ST_TO_ADDR
// end ;
82849: GO 82768
82851: POP
82852: POP
// end ;
82853: LD_VAR 0 2
82857: RET
// export function Length ( array ) ; begin
82858: LD_INT 0
82860: PPUSH
// result := array + 0 ;
82861: LD_ADDR_VAR 0 2
82865: PUSH
82866: LD_VAR 0 1
82870: PUSH
82871: LD_INT 0
82873: PLUS
82874: ST_TO_ADDR
// end ;
82875: LD_VAR 0 2
82879: RET
// export function PrepareArray ( array ) ; begin
82880: LD_INT 0
82882: PPUSH
// result := array diff 0 ;
82883: LD_ADDR_VAR 0 2
82887: PUSH
82888: LD_VAR 0 1
82892: PUSH
82893: LD_INT 0
82895: DIFF
82896: ST_TO_ADDR
// if not result [ 1 ] then
82897: LD_VAR 0 2
82901: PUSH
82902: LD_INT 1
82904: ARRAY
82905: NOT
82906: IFFALSE 82926
// result := Delete ( result , 1 ) ;
82908: LD_ADDR_VAR 0 2
82912: PUSH
82913: LD_VAR 0 2
82917: PPUSH
82918: LD_INT 1
82920: PPUSH
82921: CALL_OW 3
82925: ST_TO_ADDR
// end ;
82926: LD_VAR 0 2
82930: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82931: LD_INT 0
82933: PPUSH
82934: PPUSH
82935: PPUSH
82936: PPUSH
// sibRocketRange := 25 ;
82937: LD_ADDR_VAR 0 6
82941: PUSH
82942: LD_INT 25
82944: ST_TO_ADDR
// result := false ;
82945: LD_ADDR_VAR 0 4
82949: PUSH
82950: LD_INT 0
82952: ST_TO_ADDR
// for i := 0 to 5 do
82953: LD_ADDR_VAR 0 5
82957: PUSH
82958: DOUBLE
82959: LD_INT 0
82961: DEC
82962: ST_TO_ADDR
82963: LD_INT 5
82965: PUSH
82966: FOR_TO
82967: IFFALSE 83034
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82969: LD_VAR 0 1
82973: PPUSH
82974: LD_VAR 0 5
82978: PPUSH
82979: LD_VAR 0 6
82983: PPUSH
82984: CALL_OW 272
82988: PPUSH
82989: LD_VAR 0 2
82993: PPUSH
82994: LD_VAR 0 5
82998: PPUSH
82999: LD_VAR 0 6
83003: PPUSH
83004: CALL_OW 273
83008: PPUSH
83009: LD_VAR 0 3
83013: PPUSH
83014: CALL_OW 309
83018: IFFALSE 83032
// begin result := true ;
83020: LD_ADDR_VAR 0 4
83024: PUSH
83025: LD_INT 1
83027: ST_TO_ADDR
// exit ;
83028: POP
83029: POP
83030: GO 83036
// end ;
83032: GO 82966
83034: POP
83035: POP
// end ;
83036: LD_VAR 0 4
83040: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83041: LD_INT 0
83043: PPUSH
83044: PPUSH
83045: PPUSH
// if btype = b_depot then
83046: LD_VAR 0 2
83050: PUSH
83051: LD_INT 0
83053: EQUAL
83054: IFFALSE 83066
// begin result := true ;
83056: LD_ADDR_VAR 0 3
83060: PUSH
83061: LD_INT 1
83063: ST_TO_ADDR
// exit ;
83064: GO 83182
// end ; pom := GetBase ( depot ) ;
83066: LD_ADDR_VAR 0 4
83070: PUSH
83071: LD_VAR 0 1
83075: PPUSH
83076: CALL_OW 274
83080: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83081: LD_ADDR_VAR 0 5
83085: PUSH
83086: LD_VAR 0 2
83090: PPUSH
83091: LD_VAR 0 1
83095: PPUSH
83096: CALL_OW 248
83100: PPUSH
83101: CALL_OW 450
83105: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83106: LD_ADDR_VAR 0 3
83110: PUSH
83111: LD_VAR 0 4
83115: PPUSH
83116: LD_INT 1
83118: PPUSH
83119: CALL_OW 275
83123: PUSH
83124: LD_VAR 0 5
83128: PUSH
83129: LD_INT 1
83131: ARRAY
83132: GREATEREQUAL
83133: PUSH
83134: LD_VAR 0 4
83138: PPUSH
83139: LD_INT 2
83141: PPUSH
83142: CALL_OW 275
83146: PUSH
83147: LD_VAR 0 5
83151: PUSH
83152: LD_INT 2
83154: ARRAY
83155: GREATEREQUAL
83156: AND
83157: PUSH
83158: LD_VAR 0 4
83162: PPUSH
83163: LD_INT 3
83165: PPUSH
83166: CALL_OW 275
83170: PUSH
83171: LD_VAR 0 5
83175: PUSH
83176: LD_INT 3
83178: ARRAY
83179: GREATEREQUAL
83180: AND
83181: ST_TO_ADDR
// end ;
83182: LD_VAR 0 3
83186: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83187: LD_INT 0
83189: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83190: LD_VAR 0 1
83194: PPUSH
83195: LD_VAR 0 2
83199: PPUSH
83200: LD_INT 0
83202: PPUSH
83203: LD_INT 0
83205: PPUSH
83206: LD_INT 1
83208: PPUSH
83209: LD_INT 0
83211: PPUSH
83212: CALL_OW 587
// end ;
83216: LD_VAR 0 3
83220: RET
// export function CenterOnNow ( unit ) ; begin
83221: LD_INT 0
83223: PPUSH
// result := IsInUnit ( unit ) ;
83224: LD_ADDR_VAR 0 2
83228: PUSH
83229: LD_VAR 0 1
83233: PPUSH
83234: CALL_OW 310
83238: ST_TO_ADDR
// if not result then
83239: LD_VAR 0 2
83243: NOT
83244: IFFALSE 83256
// result := unit ;
83246: LD_ADDR_VAR 0 2
83250: PUSH
83251: LD_VAR 0 1
83255: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83256: LD_VAR 0 1
83260: PPUSH
83261: CALL_OW 87
// end ;
83265: LD_VAR 0 2
83269: RET
// export function ComMoveHex ( unit , hex ) ; begin
83270: LD_INT 0
83272: PPUSH
// if not hex then
83273: LD_VAR 0 2
83277: NOT
83278: IFFALSE 83282
// exit ;
83280: GO 83335
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83282: LD_VAR 0 2
83286: PUSH
83287: LD_INT 1
83289: ARRAY
83290: PPUSH
83291: LD_VAR 0 2
83295: PUSH
83296: LD_INT 2
83298: ARRAY
83299: PPUSH
83300: CALL_OW 428
83304: IFFALSE 83308
// exit ;
83306: GO 83335
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83308: LD_VAR 0 1
83312: PPUSH
83313: LD_VAR 0 2
83317: PUSH
83318: LD_INT 1
83320: ARRAY
83321: PPUSH
83322: LD_VAR 0 2
83326: PUSH
83327: LD_INT 2
83329: ARRAY
83330: PPUSH
83331: CALL_OW 111
// end ;
83335: LD_VAR 0 3
83339: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83340: LD_INT 0
83342: PPUSH
83343: PPUSH
83344: PPUSH
// if not unit or not enemy then
83345: LD_VAR 0 1
83349: NOT
83350: PUSH
83351: LD_VAR 0 2
83355: NOT
83356: OR
83357: IFFALSE 83361
// exit ;
83359: GO 83485
// x := GetX ( enemy ) ;
83361: LD_ADDR_VAR 0 4
83365: PUSH
83366: LD_VAR 0 2
83370: PPUSH
83371: CALL_OW 250
83375: ST_TO_ADDR
// y := GetY ( enemy ) ;
83376: LD_ADDR_VAR 0 5
83380: PUSH
83381: LD_VAR 0 2
83385: PPUSH
83386: CALL_OW 251
83390: ST_TO_ADDR
// if ValidHex ( x , y ) then
83391: LD_VAR 0 4
83395: PPUSH
83396: LD_VAR 0 5
83400: PPUSH
83401: CALL_OW 488
83405: IFFALSE 83485
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83407: LD_VAR 0 2
83411: PPUSH
83412: CALL_OW 247
83416: PUSH
83417: LD_INT 3
83419: PUSH
83420: LD_INT 2
83422: PUSH
83423: EMPTY
83424: LIST
83425: LIST
83426: IN
83427: PUSH
83428: LD_VAR 0 1
83432: PPUSH
83433: CALL_OW 255
83437: PPUSH
83438: LD_VAR 0 2
83442: PPUSH
83443: CALL_OW 292
83447: OR
83448: IFFALSE 83466
// ComAttackUnit ( unit , enemy ) else
83450: LD_VAR 0 1
83454: PPUSH
83455: LD_VAR 0 2
83459: PPUSH
83460: CALL_OW 115
83464: GO 83485
// ComAgressiveMove ( unit , x , y ) ;
83466: LD_VAR 0 1
83470: PPUSH
83471: LD_VAR 0 4
83475: PPUSH
83476: LD_VAR 0 5
83480: PPUSH
83481: CALL_OW 114
// end ;
83485: LD_VAR 0 3
83489: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83490: LD_INT 0
83492: PPUSH
83493: PPUSH
83494: PPUSH
// list := AreaToList ( area , 0 ) ;
83495: LD_ADDR_VAR 0 5
83499: PUSH
83500: LD_VAR 0 1
83504: PPUSH
83505: LD_INT 0
83507: PPUSH
83508: CALL_OW 517
83512: ST_TO_ADDR
// if not list then
83513: LD_VAR 0 5
83517: NOT
83518: IFFALSE 83522
// exit ;
83520: GO 83652
// if all then
83522: LD_VAR 0 2
83526: IFFALSE 83614
// begin for i := 1 to list [ 1 ] do
83528: LD_ADDR_VAR 0 4
83532: PUSH
83533: DOUBLE
83534: LD_INT 1
83536: DEC
83537: ST_TO_ADDR
83538: LD_VAR 0 5
83542: PUSH
83543: LD_INT 1
83545: ARRAY
83546: PUSH
83547: FOR_TO
83548: IFFALSE 83610
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83550: LD_ADDR_VAR 0 3
83554: PUSH
83555: LD_VAR 0 3
83559: PPUSH
83560: LD_VAR 0 3
83564: PUSH
83565: LD_INT 1
83567: PLUS
83568: PPUSH
83569: LD_VAR 0 5
83573: PUSH
83574: LD_INT 1
83576: ARRAY
83577: PUSH
83578: LD_VAR 0 4
83582: ARRAY
83583: PUSH
83584: LD_VAR 0 5
83588: PUSH
83589: LD_INT 2
83591: ARRAY
83592: PUSH
83593: LD_VAR 0 4
83597: ARRAY
83598: PUSH
83599: EMPTY
83600: LIST
83601: LIST
83602: PPUSH
83603: CALL_OW 1
83607: ST_TO_ADDR
83608: GO 83547
83610: POP
83611: POP
// exit ;
83612: GO 83652
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83614: LD_ADDR_VAR 0 3
83618: PUSH
83619: LD_VAR 0 5
83623: PUSH
83624: LD_INT 1
83626: ARRAY
83627: PUSH
83628: LD_INT 1
83630: ARRAY
83631: PUSH
83632: LD_VAR 0 5
83636: PUSH
83637: LD_INT 2
83639: ARRAY
83640: PUSH
83641: LD_INT 1
83643: ARRAY
83644: PUSH
83645: EMPTY
83646: LIST
83647: LIST
83648: PUSH
83649: EMPTY
83650: LIST
83651: ST_TO_ADDR
// end ;
83652: LD_VAR 0 3
83656: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83657: LD_INT 0
83659: PPUSH
83660: PPUSH
// list := AreaToList ( area , 0 ) ;
83661: LD_ADDR_VAR 0 4
83665: PUSH
83666: LD_VAR 0 1
83670: PPUSH
83671: LD_INT 0
83673: PPUSH
83674: CALL_OW 517
83678: ST_TO_ADDR
// if not list then
83679: LD_VAR 0 4
83683: NOT
83684: IFFALSE 83688
// exit ;
83686: GO 83729
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83688: LD_ADDR_VAR 0 3
83692: PUSH
83693: LD_VAR 0 4
83697: PUSH
83698: LD_INT 1
83700: ARRAY
83701: PUSH
83702: LD_INT 1
83704: ARRAY
83705: PUSH
83706: LD_VAR 0 4
83710: PUSH
83711: LD_INT 2
83713: ARRAY
83714: PUSH
83715: LD_INT 1
83717: ARRAY
83718: PUSH
83719: LD_VAR 0 2
83723: PUSH
83724: EMPTY
83725: LIST
83726: LIST
83727: LIST
83728: ST_TO_ADDR
// end ;
83729: LD_VAR 0 3
83733: RET
// export function First ( array ) ; begin
83734: LD_INT 0
83736: PPUSH
// if not array then
83737: LD_VAR 0 1
83741: NOT
83742: IFFALSE 83746
// exit ;
83744: GO 83760
// result := array [ 1 ] ;
83746: LD_ADDR_VAR 0 2
83750: PUSH
83751: LD_VAR 0 1
83755: PUSH
83756: LD_INT 1
83758: ARRAY
83759: ST_TO_ADDR
// end ;
83760: LD_VAR 0 2
83764: RET
// export function Last ( array ) ; begin
83765: LD_INT 0
83767: PPUSH
// if not array then
83768: LD_VAR 0 1
83772: NOT
83773: IFFALSE 83777
// exit ;
83775: GO 83793
// result := array [ array ] ;
83777: LD_ADDR_VAR 0 2
83781: PUSH
83782: LD_VAR 0 1
83786: PUSH
83787: LD_VAR 0 1
83791: ARRAY
83792: ST_TO_ADDR
// end ;
83793: LD_VAR 0 2
83797: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83798: LD_INT 0
83800: PPUSH
83801: PPUSH
// result := [ ] ;
83802: LD_ADDR_VAR 0 5
83806: PUSH
83807: EMPTY
83808: ST_TO_ADDR
// if not array then
83809: LD_VAR 0 1
83813: NOT
83814: IFFALSE 83818
// exit ;
83816: GO 83930
// for i := 1 to array do
83818: LD_ADDR_VAR 0 6
83822: PUSH
83823: DOUBLE
83824: LD_INT 1
83826: DEC
83827: ST_TO_ADDR
83828: LD_VAR 0 1
83832: PUSH
83833: FOR_TO
83834: IFFALSE 83928
// if array [ i ] [ index ] = value then
83836: LD_VAR 0 1
83840: PUSH
83841: LD_VAR 0 6
83845: ARRAY
83846: PUSH
83847: LD_VAR 0 2
83851: ARRAY
83852: PUSH
83853: LD_VAR 0 3
83857: EQUAL
83858: IFFALSE 83926
// begin if indexColumn then
83860: LD_VAR 0 4
83864: IFFALSE 83900
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83866: LD_ADDR_VAR 0 5
83870: PUSH
83871: LD_VAR 0 5
83875: PPUSH
83876: LD_VAR 0 1
83880: PUSH
83881: LD_VAR 0 6
83885: ARRAY
83886: PUSH
83887: LD_VAR 0 4
83891: ARRAY
83892: PPUSH
83893: CALL 79112 0 2
83897: ST_TO_ADDR
83898: GO 83926
// result := Join ( result , array [ i ] ) ;
83900: LD_ADDR_VAR 0 5
83904: PUSH
83905: LD_VAR 0 5
83909: PPUSH
83910: LD_VAR 0 1
83914: PUSH
83915: LD_VAR 0 6
83919: ARRAY
83920: PPUSH
83921: CALL 79112 0 2
83925: ST_TO_ADDR
// end ;
83926: GO 83833
83928: POP
83929: POP
// end ;
83930: LD_VAR 0 5
83934: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83935: LD_INT 0
83937: PPUSH
// if not vehicles or not parkingPoint then
83938: LD_VAR 0 1
83942: NOT
83943: PUSH
83944: LD_VAR 0 2
83948: NOT
83949: OR
83950: IFFALSE 83954
// exit ;
83952: GO 84052
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83954: LD_ADDR_VAR 0 1
83958: PUSH
83959: LD_VAR 0 1
83963: PPUSH
83964: LD_INT 50
83966: PUSH
83967: EMPTY
83968: LIST
83969: PUSH
83970: LD_INT 3
83972: PUSH
83973: LD_INT 92
83975: PUSH
83976: LD_VAR 0 2
83980: PUSH
83981: LD_INT 1
83983: ARRAY
83984: PUSH
83985: LD_VAR 0 2
83989: PUSH
83990: LD_INT 2
83992: ARRAY
83993: PUSH
83994: LD_INT 8
83996: PUSH
83997: EMPTY
83998: LIST
83999: LIST
84000: LIST
84001: LIST
84002: PUSH
84003: EMPTY
84004: LIST
84005: LIST
84006: PUSH
84007: EMPTY
84008: LIST
84009: LIST
84010: PPUSH
84011: CALL_OW 72
84015: ST_TO_ADDR
// if not vehicles then
84016: LD_VAR 0 1
84020: NOT
84021: IFFALSE 84025
// exit ;
84023: GO 84052
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84025: LD_VAR 0 1
84029: PPUSH
84030: LD_VAR 0 2
84034: PUSH
84035: LD_INT 1
84037: ARRAY
84038: PPUSH
84039: LD_VAR 0 2
84043: PUSH
84044: LD_INT 2
84046: ARRAY
84047: PPUSH
84048: CALL_OW 111
// end ;
84052: LD_VAR 0 3
84056: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84057: LD_INT 0
84059: PPUSH
84060: PPUSH
84061: PPUSH
// if not side or not area then
84062: LD_VAR 0 1
84066: NOT
84067: PUSH
84068: LD_VAR 0 2
84072: NOT
84073: OR
84074: IFFALSE 84078
// exit ;
84076: GO 84197
// tmp := AreaToList ( area , 0 ) ;
84078: LD_ADDR_VAR 0 5
84082: PUSH
84083: LD_VAR 0 2
84087: PPUSH
84088: LD_INT 0
84090: PPUSH
84091: CALL_OW 517
84095: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84096: LD_ADDR_VAR 0 4
84100: PUSH
84101: DOUBLE
84102: LD_INT 1
84104: DEC
84105: ST_TO_ADDR
84106: LD_VAR 0 5
84110: PUSH
84111: LD_INT 1
84113: ARRAY
84114: PUSH
84115: FOR_TO
84116: IFFALSE 84195
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84118: LD_VAR 0 5
84122: PUSH
84123: LD_INT 1
84125: ARRAY
84126: PUSH
84127: LD_VAR 0 4
84131: ARRAY
84132: PPUSH
84133: LD_VAR 0 5
84137: PUSH
84138: LD_INT 2
84140: ARRAY
84141: PUSH
84142: LD_VAR 0 4
84146: ARRAY
84147: PPUSH
84148: CALL_OW 351
84152: IFFALSE 84193
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84154: LD_VAR 0 5
84158: PUSH
84159: LD_INT 1
84161: ARRAY
84162: PUSH
84163: LD_VAR 0 4
84167: ARRAY
84168: PPUSH
84169: LD_VAR 0 5
84173: PUSH
84174: LD_INT 2
84176: ARRAY
84177: PUSH
84178: LD_VAR 0 4
84182: ARRAY
84183: PPUSH
84184: LD_VAR 0 1
84188: PPUSH
84189: CALL_OW 244
// end ;
84193: GO 84115
84195: POP
84196: POP
// end ; end_of_file
84197: LD_VAR 0 3
84201: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84202: LD_VAR 0 1
84206: PUSH
84207: LD_INT 200
84209: DOUBLE
84210: GREATEREQUAL
84211: IFFALSE 84219
84213: LD_INT 299
84215: DOUBLE
84216: LESSEQUAL
84217: IFTRUE 84221
84219: GO 84253
84221: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84222: LD_VAR 0 1
84226: PPUSH
84227: LD_VAR 0 2
84231: PPUSH
84232: LD_VAR 0 3
84236: PPUSH
84237: LD_VAR 0 4
84241: PPUSH
84242: LD_VAR 0 5
84246: PPUSH
84247: CALL 36618 0 5
84251: GO 84330
84253: LD_INT 300
84255: DOUBLE
84256: GREATEREQUAL
84257: IFFALSE 84265
84259: LD_INT 399
84261: DOUBLE
84262: LESSEQUAL
84263: IFTRUE 84267
84265: GO 84329
84267: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84268: LD_VAR 0 1
84272: PPUSH
84273: LD_VAR 0 2
84277: PPUSH
84278: LD_VAR 0 3
84282: PPUSH
84283: LD_VAR 0 4
84287: PPUSH
84288: LD_VAR 0 5
84292: PPUSH
84293: LD_VAR 0 6
84297: PPUSH
84298: LD_VAR 0 7
84302: PPUSH
84303: LD_VAR 0 8
84307: PPUSH
84308: LD_VAR 0 9
84312: PPUSH
84313: LD_VAR 0 10
84317: PPUSH
84318: LD_VAR 0 11
84322: PPUSH
84323: CALL 32526 0 11
84327: GO 84330
84329: POP
// end ;
84330: PPOPN 11
84332: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84333: LD_VAR 0 1
84337: PPUSH
84338: LD_VAR 0 2
84342: PPUSH
84343: LD_VAR 0 3
84347: PPUSH
84348: LD_VAR 0 4
84352: PPUSH
84353: LD_VAR 0 5
84357: PPUSH
84358: CALL 36003 0 5
// end ; end_of_file
84362: PPOPN 5
84364: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84365: LD_VAR 0 1
84369: PPUSH
84370: LD_VAR 0 2
84374: PPUSH
84375: LD_VAR 0 3
84379: PPUSH
84380: LD_VAR 0 4
84384: PPUSH
84385: LD_VAR 0 5
84389: PPUSH
84390: LD_VAR 0 6
84394: PPUSH
84395: CALL 20178 0 6
// end ;
84399: PPOPN 6
84401: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84402: LD_INT 0
84404: PPUSH
// begin if not units then
84405: LD_VAR 0 1
84409: NOT
84410: IFFALSE 84414
// exit ;
84412: GO 84414
// end ;
84414: PPOPN 7
84416: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84417: CALL 20065 0 0
// end ;
84421: PPOPN 1
84423: END
