// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4670 0 0
// PrepareRussianBase ;
 289: CALL 2962 0 0
// PrepareRussianCommander ;
 293: CALL 2913 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_EXP 49
 515: PPUSH
 516: CALL 39894 0 3
 520: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 521: LD_ADDR_EXP 4
 525: PUSH
 526: LD_STRING Lisa
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_EXP 49
 536: PPUSH
 537: CALL 39894 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 49
 557: PPUSH
 558: CALL 39894 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 49
 578: PPUSH
 579: CALL 39894 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 49
 599: PPUSH
 600: CALL 39894 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 49
 620: PPUSH
 621: CALL 39894 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 49
 641: PPUSH
 642: CALL 39894 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 49
 662: PPUSH
 663: CALL 39894 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 49
 683: PPUSH
 684: CALL 39894 0 3
 688: ST_TO_ADDR
// if Lisa = false then
 689: LD_EXP 4
 693: PUSH
 694: LD_INT 0
 696: EQUAL
 697: IFFALSE 720
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 699: LD_ADDR_EXP 2
 703: PUSH
 704: LD_STRING Bobby
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_EXP 49
 714: PPUSH
 715: CALL 39894 0 3
 719: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 720: LD_EXP 4
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: PUSH
 729: LD_EXP 2
 733: PUSH
 734: LD_INT 0
 736: EQUAL
 737: AND
 738: IFFALSE 761
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_STRING Cyrus
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_EXP 49
 755: PPUSH
 756: CALL 39894 0 3
 760: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 761: LD_EXP 4
 765: PUSH
 766: LD_INT 0
 768: EQUAL
 769: PUSH
 770: LD_EXP 2
 774: PUSH
 775: LD_INT 0
 777: EQUAL
 778: AND
 779: PUSH
 780: LD_EXP 3
 784: PUSH
 785: LD_INT 0
 787: EQUAL
 788: AND
 789: IFFALSE 888
// begin tmp = CreateCharacterSet ( 03_others ) ;
 791: LD_ADDR_VAR 0 3
 795: PUSH
 796: LD_STRING 03_others
 798: PPUSH
 799: CALL_OW 31
 803: ST_TO_ADDR
// if tmp then
 804: LD_VAR 0 3
 808: IFFALSE 865
// begin RandomBeforeMission = tmp [ 1 ] ;
 810: LD_ADDR_EXP 6
 814: PUSH
 815: LD_VAR 0 3
 819: PUSH
 820: LD_INT 1
 822: ARRAY
 823: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 824: LD_STRING 03_others
 826: PPUSH
 827: CALL_OW 40
// if tmp > 1 then
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 1
 838: GREATER
 839: IFFALSE 863
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: DIFF
 855: PPUSH
 856: LD_STRING 03_others
 858: PPUSH
 859: CALL_OW 38
// end else
 863: GO 888
// begin PrepareHuman ( false , 1 , 3 ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 3
 873: PPUSH
 874: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 878: LD_ADDR_EXP 6
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 888: LD_ADDR_OWVAR 20
 892: PUSH
 893: LD_INT 4
 895: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 896: LD_ADDR_EXP 13
 900: PUSH
 901: LD_STRING Donaldson
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: LD_EXP 49
 911: PPUSH
 912: CALL 39894 0 3
 916: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 917: LD_ADDR_EXP 5
 921: PUSH
 922: LD_STRING Frank
 924: PPUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_EXP 49
 932: PPUSH
 933: CALL 39894 0 3
 937: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 938: LD_EXP 1
 942: PPUSH
 943: LD_INT 32
 945: PPUSH
 946: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 950: LD_EXP 7
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 965: LD_EXP 7
 969: PPUSH
 970: LD_INT 32
 972: PPUSH
 973: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 977: LD_EXP 8
 981: PPUSH
 982: LD_INT 2
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 992: LD_EXP 9
 996: PPUSH
 997: LD_INT 2
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1007: LD_EXP 12
1011: PPUSH
1012: LD_INT 2
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1022: LD_EXP 10
1026: PPUSH
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1037: LD_EXP 11
1041: PPUSH
1042: LD_INT 2
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1052: LD_EXP 4
1056: PPUSH
1057: LD_INT 2
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 49
// if Lisa = false then
1067: LD_EXP 4
1071: PUSH
1072: LD_INT 0
1074: EQUAL
1075: IFFALSE 1092
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1077: LD_EXP 2
1081: PPUSH
1082: LD_INT 2
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL_OW 49
// if Lisa = false and Bobby = false then
1092: LD_EXP 4
1096: PUSH
1097: LD_INT 0
1099: EQUAL
1100: PUSH
1101: LD_EXP 2
1105: PUSH
1106: LD_INT 0
1108: EQUAL
1109: AND
1110: IFFALSE 1127
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1112: LD_EXP 3
1116: PPUSH
1117: LD_INT 2
1119: PPUSH
1120: LD_INT 0
1122: PPUSH
1123: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1127: LD_EXP 4
1131: PUSH
1132: LD_INT 0
1134: EQUAL
1135: PUSH
1136: LD_EXP 2
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: PUSH
1146: LD_EXP 3
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: IFFALSE 1172
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1157: LD_EXP 6
1161: PPUSH
1162: LD_INT 2
1164: PPUSH
1165: LD_INT 0
1167: PPUSH
1168: CALL_OW 49
// end ;
1172: LD_VAR 0 1
1176: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1177: LD_INT 0
1179: PPUSH
1180: PPUSH
1181: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1182: LD_EXP 13
1186: PPUSH
1187: LD_INT 10
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: CALL_OW 49
// if Frank then
1197: LD_EXP 5
1201: IFFALSE 1218
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1203: LD_EXP 5
1207: PPUSH
1208: LD_INT 10
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// uc_nation = 1 ;
1218: LD_ADDR_OWVAR 21
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// uc_side = 4 ;
1226: LD_ADDR_OWVAR 20
1230: PUSH
1231: LD_INT 4
1233: ST_TO_ADDR
// hc_class := 3 ;
1234: LD_ADDR_OWVAR 28
1238: PUSH
1239: LD_INT 3
1241: ST_TO_ADDR
// hc_sex := sex_male ;
1242: LD_ADDR_OWVAR 27
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1250: LD_ADDR_OWVAR 33
1254: PUSH
1255: LD_STRING SecondCharsGal
1257: ST_TO_ADDR
// hc_face_number := 53 ;
1258: LD_ADDR_OWVAR 34
1262: PUSH
1263: LD_INT 53
1265: ST_TO_ADDR
// hc_name := Freddie Warner ;
1266: LD_ADDR_OWVAR 26
1270: PUSH
1271: LD_STRING Freddie Warner
1273: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1274: LD_ADDR_OWVAR 29
1278: PUSH
1279: LD_INT 8
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1289: LD_ADDR_OWVAR 30
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 0
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1312: LD_ADDR_OWVAR 31
1316: PUSH
1317: LD_INT 1
1319: PUSH
1320: LD_INT 0
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: ST_TO_ADDR
// un = CreateHuman ;
1335: LD_ADDR_VAR 0 3
1339: PUSH
1340: CALL_OW 44
1344: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1345: LD_VAR 0 3
1349: PPUSH
1350: LD_INT 10
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// hc_class := 1 ;
1360: LD_ADDR_OWVAR 28
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
// hc_sex := sex_male ;
1368: LD_ADDR_OWVAR 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1376: LD_ADDR_OWVAR 33
1380: PUSH
1381: LD_STRING SecondCharsGal
1383: ST_TO_ADDR
// hc_face_number := 56 ;
1384: LD_ADDR_OWVAR 34
1388: PUSH
1389: LD_INT 56
1391: ST_TO_ADDR
// hc_name := Mel Brennan ;
1392: LD_ADDR_OWVAR 26
1396: PUSH
1397: LD_STRING Mel Brennan
1399: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1400: LD_ADDR_OWVAR 29
1404: PUSH
1405: LD_INT 12
1407: PUSH
1408: LD_INT 11
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1415: LD_ADDR_OWVAR 30
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 1
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1438: LD_ADDR_OWVAR 31
1442: PUSH
1443: LD_INT 3
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: ST_TO_ADDR
// un = CreateHuman ;
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1471: LD_VAR 0 3
1475: PPUSH
1476: LD_INT 10
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 49
// hc_class := 1 ;
1486: LD_ADDR_OWVAR 28
1490: PUSH
1491: LD_INT 1
1493: ST_TO_ADDR
// hc_sex := sex_male ;
1494: LD_ADDR_OWVAR 27
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1502: LD_ADDR_OWVAR 33
1506: PUSH
1507: LD_STRING AmGalRemake
1509: ST_TO_ADDR
// hc_face_number := 5 ;
1510: LD_ADDR_OWVAR 34
1514: PUSH
1515: LD_INT 5
1517: ST_TO_ADDR
// hc_name := Bob Joplin ;
1518: LD_ADDR_OWVAR 26
1522: PUSH
1523: LD_STRING Bob Joplin
1525: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1526: LD_ADDR_OWVAR 29
1530: PUSH
1531: LD_INT 10
1533: PUSH
1534: LD_INT 11
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1541: LD_ADDR_OWVAR 30
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1564: LD_ADDR_OWVAR 31
1568: PUSH
1569: LD_INT 3
1571: PUSH
1572: LD_INT 1
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// un = CreateHuman ;
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: CALL_OW 44
1596: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_INT 10
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// hc_class := 3 ;
1612: LD_ADDR_OWVAR 28
1616: PUSH
1617: LD_INT 3
1619: ST_TO_ADDR
// hc_sex := sex_female ;
1620: LD_ADDR_OWVAR 27
1624: PUSH
1625: LD_INT 2
1627: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1628: LD_ADDR_OWVAR 33
1632: PUSH
1633: LD_STRING AmGalRemake
1635: ST_TO_ADDR
// hc_face_number := 8 ;
1636: LD_ADDR_OWVAR 34
1640: PUSH
1641: LD_INT 8
1643: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1644: LD_ADDR_OWVAR 26
1648: PUSH
1649: LD_STRING Elizabeth Whitney
1651: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1652: LD_ADDR_OWVAR 29
1656: PUSH
1657: LD_INT 9
1659: PUSH
1660: LD_INT 11
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1667: LD_ADDR_OWVAR 30
1671: PUSH
1672: LD_INT 0
1674: PUSH
1675: LD_INT 0
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1690: LD_ADDR_OWVAR 31
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// un = CreateHuman ;
1713: LD_ADDR_VAR 0 3
1717: PUSH
1718: CALL_OW 44
1722: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1723: LD_VAR 0 3
1727: PPUSH
1728: LD_INT 10
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 49
// InitHc ;
1738: CALL_OW 19
// end ;
1742: LD_VAR 0 1
1746: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1747: LD_INT 0
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// uc_side = 1 ;
1761: LD_ADDR_OWVAR 20
1765: PUSH
1766: LD_INT 1
1768: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 2
1776: ST_TO_ADDR
// vc_engine := engine_combustion ;
1777: LD_ADDR_OWVAR 39
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_control := control_manual ;
1785: LD_ADDR_OWVAR 38
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1793: LD_ADDR_OWVAR 41
1797: PUSH
1798: LD_INT 65
1800: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 5
1808: PUSH
1809: LD_INT 3
1811: PUSH
1812: LD_INT 4
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_OWVAR 67
1824: ARRAY
1825: ST_TO_ADDR
// veh := CreateVehicle ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: CALL_OW 45
1835: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1836: LD_VAR 0 5
1840: PPUSH
1841: LD_INT 2
1843: PPUSH
1844: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1848: LD_INT 17
1850: PPUSH
1851: LD_INT 4
1853: PPUSH
1854: CALL_OW 428
1858: PUSH
1859: LD_INT 0
1861: EQUAL
1862: IFFALSE 1884
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1864: LD_VAR 0 5
1868: PPUSH
1869: LD_INT 17
1871: PPUSH
1872: LD_INT 4
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 48
1882: GO 1902
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1884: LD_VAR 0 5
1888: PPUSH
1889: LD_INT 23
1891: PPUSH
1892: LD_INT 10
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 48
// hc_class := 1 ;
1902: LD_ADDR_OWVAR 28
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// hc_sex := sex_male ;
1910: LD_ADDR_OWVAR 27
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1918: LD_ADDR_OWVAR 33
1922: PUSH
1923: LD_STRING SecondCharsGal
1925: ST_TO_ADDR
// hc_face_number := 59 ;
1926: LD_ADDR_OWVAR 34
1930: PUSH
1931: LD_INT 59
1933: ST_TO_ADDR
// hc_name := Max Gray ;
1934: LD_ADDR_OWVAR 26
1938: PUSH
1939: LD_STRING Max Gray
1941: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1942: LD_ADDR_OWVAR 29
1946: PUSH
1947: LD_INT 9
1949: PUSH
1950: LD_INT 11
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1957: LD_ADDR_OWVAR 30
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1980: LD_ADDR_OWVAR 31
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 1
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: LD_INT 0
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: ST_TO_ADDR
// un = CreateHuman ;
2003: LD_ADDR_VAR 0 4
2007: PUSH
2008: CALL_OW 44
2012: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 11
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// hc_class := 2 ;
2028: LD_ADDR_OWVAR 28
2032: PUSH
2033: LD_INT 2
2035: ST_TO_ADDR
// hc_sex := sex_male ;
2036: LD_ADDR_OWVAR 27
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2044: LD_ADDR_OWVAR 33
2048: PUSH
2049: LD_STRING SecondCharsGal
2051: ST_TO_ADDR
// hc_face_number := 50 ;
2052: LD_ADDR_OWVAR 34
2056: PUSH
2057: LD_INT 50
2059: ST_TO_ADDR
// hc_name := Frank Hughes ;
2060: LD_ADDR_OWVAR 26
2064: PUSH
2065: LD_STRING Frank Hughes
2067: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2068: LD_ADDR_OWVAR 29
2072: PUSH
2073: LD_INT 10
2075: PUSH
2076: LD_INT 10
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2083: LD_ADDR_OWVAR 30
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: LD_INT 0
2096: PUSH
2097: LD_INT 0
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2106: LD_ADDR_OWVAR 31
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: LD_INT 0
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// un = CreateHuman ;
2129: LD_ADDR_VAR 0 4
2133: PUSH
2134: CALL_OW 44
2138: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_INT 11
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: CALL_OW 49
// hc_class := 1 ;
2154: LD_ADDR_OWVAR 28
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// hc_sex := sex_male ;
2162: LD_ADDR_OWVAR 27
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2170: LD_ADDR_OWVAR 33
2174: PUSH
2175: LD_STRING SecondCharsGal
2177: ST_TO_ADDR
// hc_face_number := 54 ;
2178: LD_ADDR_OWVAR 34
2182: PUSH
2183: LD_INT 54
2185: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2186: LD_ADDR_OWVAR 26
2190: PUSH
2191: LD_STRING Luigi Ghbellin
2193: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2194: LD_ADDR_OWVAR 29
2198: PUSH
2199: LD_INT 11
2201: PUSH
2202: LD_INT 11
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2209: LD_ADDR_OWVAR 30
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 0
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2232: LD_ADDR_OWVAR 31
2236: PUSH
2237: LD_INT 2
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: LD_INT 1
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: ST_TO_ADDR
// un = CreateHuman ;
2255: LD_ADDR_VAR 0 4
2259: PUSH
2260: CALL_OW 44
2264: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2265: LD_VAR 0 4
2269: PPUSH
2270: LD_INT 11
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 49
// hc_class := 3 ;
2280: LD_ADDR_OWVAR 28
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// hc_sex := sex_male ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2296: LD_ADDR_OWVAR 33
2300: PUSH
2301: LD_STRING AmGalRemake
2303: ST_TO_ADDR
// hc_face_number := 6 ;
2304: LD_ADDR_OWVAR 34
2308: PUSH
2309: LD_INT 6
2311: ST_TO_ADDR
// hc_name := Leon Carter ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_STRING Leon Carter
2319: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2320: LD_ADDR_OWVAR 29
2324: PUSH
2325: LD_INT 10
2327: PUSH
2328: LD_INT 9
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2335: LD_ADDR_OWVAR 30
2339: PUSH
2340: LD_INT 0
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2358: LD_ADDR_OWVAR 31
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 3
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// un = CreateHuman ;
2381: LD_ADDR_VAR 0 4
2385: PUSH
2386: CALL_OW 44
2390: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2391: LD_VAR 0 4
2395: PPUSH
2396: LD_VAR 0 5
2400: PPUSH
2401: CALL_OW 52
// if count = 4 then
2405: LD_VAR 0 1
2409: PUSH
2410: LD_INT 4
2412: EQUAL
2413: IFFALSE 2541
// begin hc_class := 1 ;
2415: LD_ADDR_OWVAR 28
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
// hc_sex := sex_male ;
2423: LD_ADDR_OWVAR 27
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2431: LD_ADDR_OWVAR 33
2435: PUSH
2436: LD_STRING SecondCharsGal
2438: ST_TO_ADDR
// hc_face_number := 34 ;
2439: LD_ADDR_OWVAR 34
2443: PUSH
2444: LD_INT 34
2446: ST_TO_ADDR
// hc_name := Ian Hill ;
2447: LD_ADDR_OWVAR 26
2451: PUSH
2452: LD_STRING Ian Hill
2454: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2455: LD_ADDR_OWVAR 29
2459: PUSH
2460: LD_INT 10
2462: PUSH
2463: LD_INT 12
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2470: LD_ADDR_OWVAR 30
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2493: LD_ADDR_OWVAR 31
2497: PUSH
2498: LD_INT 3
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: LD_INT 1
2506: PUSH
2507: LD_INT 0
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: ST_TO_ADDR
// un = CreateHuman ;
2516: LD_ADDR_VAR 0 4
2520: PUSH
2521: CALL_OW 44
2525: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_INT 11
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: CALL_OW 49
// end ; if count = 5 then
2541: LD_VAR 0 1
2545: PUSH
2546: LD_INT 5
2548: EQUAL
2549: IFFALSE 2803
// begin hc_class := 1 ;
2551: LD_ADDR_OWVAR 28
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// hc_sex := sex_male ;
2559: LD_ADDR_OWVAR 27
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING SecondCharsGal
2574: ST_TO_ADDR
// hc_face_number := 34 ;
2575: LD_ADDR_OWVAR 34
2579: PUSH
2580: LD_INT 34
2582: ST_TO_ADDR
// hc_name := Ian Hill ;
2583: LD_ADDR_OWVAR 26
2587: PUSH
2588: LD_STRING Ian Hill
2590: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2591: LD_ADDR_OWVAR 29
2595: PUSH
2596: LD_INT 10
2598: PUSH
2599: LD_INT 12
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2606: LD_ADDR_OWVAR 30
2610: PUSH
2611: LD_INT 1
2613: PUSH
2614: LD_INT 0
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2629: LD_ADDR_OWVAR 31
2633: PUSH
2634: LD_INT 3
2636: PUSH
2637: LD_INT 1
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: ST_TO_ADDR
// un = CreateHuman ;
2652: LD_ADDR_VAR 0 4
2656: PUSH
2657: CALL_OW 44
2661: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2662: LD_VAR 0 4
2666: PPUSH
2667: LD_INT 11
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 49
// hc_class := 1 ;
2677: LD_ADDR_OWVAR 28
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// hc_sex := sex_female ;
2685: LD_ADDR_OWVAR 27
2689: PUSH
2690: LD_INT 2
2692: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2693: LD_ADDR_OWVAR 33
2697: PUSH
2698: LD_STRING SecondCharsGal
2700: ST_TO_ADDR
// hc_face_number := 41 ;
2701: LD_ADDR_OWVAR 34
2705: PUSH
2706: LD_INT 41
2708: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2709: LD_ADDR_OWVAR 26
2713: PUSH
2714: LD_STRING Kate Wadsworth
2716: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2717: LD_ADDR_OWVAR 29
2721: PUSH
2722: LD_INT 9
2724: PUSH
2725: LD_INT 9
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2732: LD_ADDR_OWVAR 30
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 2
2742: PUSH
2743: LD_INT 0
2745: PUSH
2746: LD_INT 0
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2755: LD_ADDR_OWVAR 31
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: LD_INT 3
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: ST_TO_ADDR
// un = CreateHuman ;
2778: LD_ADDR_VAR 0 4
2782: PUSH
2783: CALL_OW 44
2787: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2788: LD_VAR 0 4
2792: PPUSH
2793: LD_INT 11
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2803: LD_INT 11
2805: PPUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 21
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 26
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 70
2845: PUSH
2846: LD_INT 1
2848: ARRAY
2849: PPUSH
2850: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2854: LD_INT 11
2856: PPUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 26
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PPUSH
2892: CALL_OW 70
2896: PUSH
2897: LD_INT 1
2899: ARRAY
2900: PPUSH
2901: LD_STRING D6-Sol3-1
2903: PPUSH
2904: CALL_OW 88
// end ; end_of_file
2908: LD_VAR 0 2
2912: RET
// export function PrepareRussianCommander ; begin
2913: LD_INT 0
2915: PPUSH
// uc_side = 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation = 3 ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 3
2931: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2932: LD_ADDR_EXP 15
2936: PUSH
2937: LD_STRING Stolypin
2939: PPUSH
2940: CALL_OW 25
2944: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_INT 21
2952: PPUSH
2953: CALL_OW 52
// end ;
2957: LD_VAR 0 1
2961: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// if Difficulty > 1 then
2968: LD_OWVAR 67
2972: PUSH
2973: LD_INT 1
2975: GREATER
2976: IFFALSE 3086
// begin uc_side := 3 ;
2978: LD_ADDR_OWVAR 20
2982: PUSH
2983: LD_INT 3
2985: ST_TO_ADDR
// uc_nation := 3 ;
2986: LD_ADDR_OWVAR 21
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// InitHc ;
2994: CALL_OW 19
// InitBc ;
2998: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3002: LD_INT 0
3004: PPUSH
3005: LD_INT 1
3007: PPUSH
3008: LD_INT 4
3010: PPUSH
3011: CALL_OW 380
// bc_type := b_breastwork ;
3015: LD_ADDR_OWVAR 42
3019: PUSH
3020: LD_INT 31
3022: ST_TO_ADDR
// bc_level := 4 ;
3023: LD_ADDR_OWVAR 43
3027: PUSH
3028: LD_INT 4
3030: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3031: LD_ADDR_VAR 0 3
3035: PUSH
3036: LD_INT 100
3038: PPUSH
3039: LD_INT 58
3041: PPUSH
3042: LD_INT 2
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// un := CreateHuman ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_INT 5
3067: PPUSH
3068: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3072: LD_VAR 0 4
3076: PPUSH
3077: LD_VAR 0 3
3081: PPUSH
3082: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3086: LD_INT 3
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 22
3094: PPUSH
3095: LD_EXP 16
3099: PPUSH
3100: LD_EXP 17
3104: PPUSH
3105: CALL_OW 12
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 4
3118: PUSH
3119: LD_INT 5
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: PUSH
3127: LD_OWVAR 67
3131: ARRAY
3132: PPUSH
3133: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 3
3142: PPUSH
3143: LD_INT 21
3145: PPUSH
3146: LD_EXP 16
3150: PPUSH
3151: LD_EXP 17
3155: PPUSH
3156: CALL_OW 12
3160: PPUSH
3161: LD_INT 2
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3171: LD_INT 3
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_INT 1
3179: PPUSH
3180: LD_EXP 16
3184: PPUSH
3185: LD_EXP 17
3189: PPUSH
3190: CALL_OW 12
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3205: LD_INT 3
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: LD_INT 24
3213: PPUSH
3214: LD_EXP 16
3218: PPUSH
3219: LD_EXP 17
3223: PPUSH
3224: CALL_OW 12
3228: PPUSH
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 5
3234: PPUSH
3235: CALL 4335 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_INT 22
3246: PUSH
3247: LD_INT 3
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: LD_INT 30
3256: PUSH
3257: LD_INT 32
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PPUSH
3268: CALL_OW 69
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3314
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3276: LD_INT 3
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_EXP 16
3291: PPUSH
3292: LD_EXP 17
3296: PPUSH
3297: CALL_OW 12
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL 4335 0 6
3312: GO 3273
3314: POP
3315: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3316: LD_ADDR_VAR 0 2
3320: PUSH
3321: LD_INT 22
3323: PUSH
3324: LD_INT 3
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 30
3333: PUSH
3334: LD_INT 31
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3379
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3353: LD_EXP 16
3357: PPUSH
3358: LD_EXP 17
3362: PPUSH
3363: CALL_OW 12
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 4445 0 2
3377: GO 3350
3379: POP
3380: POP
// end ;
3381: LD_VAR 0 1
3385: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3386: LD_INT 0
3388: PPUSH
3389: PPUSH
3390: PPUSH
3391: PPUSH
// uc_side = 6 ;
3392: LD_ADDR_OWVAR 20
3396: PUSH
3397: LD_INT 6
3399: ST_TO_ADDR
// uc_nation = 3 ;
3400: LD_ADDR_OWVAR 21
3404: PUSH
3405: LD_INT 3
3407: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: DOUBLE
3414: LD_INT 1
3416: DEC
3417: ST_TO_ADDR
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 1
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 12
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_OWVAR 67
3444: ARRAY
3445: PUSH
3446: FOR_TO
3447: IFFALSE 3607
// begin vc_engine = 1 ;
3449: LD_ADDR_OWVAR 39
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// vc_control = 1 ;
3457: LD_ADDR_OWVAR 38
3461: PUSH
3462: LD_INT 1
3464: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3465: LD_ADDR_OWVAR 40
3469: PUSH
3470: LD_INT 42
3472: PUSH
3473: LD_INT 42
3475: PUSH
3476: LD_INT 43
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_OWVAR 67
3488: ARRAY
3489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3490: LD_ADDR_OWVAR 37
3494: PUSH
3495: LD_INT 21
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_OWVAR 67
3513: ARRAY
3514: ST_TO_ADDR
// veh = CreateVehicle ;
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: CALL_OW 45
3524: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3525: LD_VAR 0 3
3529: PPUSH
3530: LD_INT 3
3532: PPUSH
3533: LD_INT 0
3535: PPUSH
3536: CALL_OW 49
// hc_gallery =  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name =  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 3
3561: PPUSH
3562: LD_EXP 16
3566: PPUSH
3567: LD_EXP 17
3571: PPUSH
3572: CALL_OW 12
3576: PPUSH
3577: CALL_OW 380
// un = CreateHuman ;
3581: LD_ADDR_VAR 0 4
3585: PUSH
3586: CALL_OW 44
3590: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: CALL_OW 52
// end ;
3605: GO 3446
3607: POP
3608: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3609: LD_INT 0
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_EXP 16
3619: PPUSH
3620: LD_EXP 17
3624: PPUSH
3625: CALL_OW 12
3629: PUSH
3630: LD_INT 2
3632: PLUS
3633: PPUSH
3634: CALL_OW 380
// un = CreateHuman ;
3638: LD_ADDR_VAR 0 4
3642: PUSH
3643: CALL_OW 44
3647: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3648: LD_VAR 0 4
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: LD_INT 0
3658: PPUSH
3659: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3663: LD_INT 0
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_EXP 16
3673: PPUSH
3674: LD_EXP 17
3678: PPUSH
3679: CALL_OW 12
3683: PUSH
3684: LD_INT 2
3686: PLUS
3687: PPUSH
3688: CALL_OW 380
// un = CreateHuman ;
3692: LD_ADDR_VAR 0 4
3696: PUSH
3697: CALL_OW 44
3701: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3702: LD_VAR 0 4
3706: PPUSH
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3717: LD_ADDR_VAR 0 2
3721: PUSH
3722: DOUBLE
3723: LD_INT 1
3725: DEC
3726: ST_TO_ADDR
3727: LD_INT 2
3729: PUSH
3730: LD_INT 3
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 12
3757: PLUS
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3830
// begin hc_gallery =  ;
3762: LD_ADDR_OWVAR 33
3766: PUSH
3767: LD_STRING 
3769: ST_TO_ADDR
// hc_name =  ;
3770: LD_ADDR_OWVAR 26
3774: PUSH
3775: LD_STRING 
3777: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3778: LD_INT 0
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: LD_EXP 16
3788: PPUSH
3789: LD_EXP 17
3793: PPUSH
3794: CALL_OW 12
3798: PPUSH
3799: CALL_OW 380
// un = CreateHuman ;
3803: LD_ADDR_VAR 0 4
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3813: LD_VAR 0 4
3817: PPUSH
3818: LD_INT 3
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 49
// end ;
3828: GO 3759
3830: POP
3831: POP
// vc_engine = 1 ;
3832: LD_ADDR_OWVAR 39
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// vc_control = 1 ;
3840: LD_ADDR_OWVAR 38
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// vc_weapon = 51 ;
3848: LD_ADDR_OWVAR 40
3852: PUSH
3853: LD_INT 51
3855: ST_TO_ADDR
// vc_chassis = 22 ;
3856: LD_ADDR_OWVAR 37
3860: PUSH
3861: LD_INT 22
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3874: LD_VAR 0 3
3878: PPUSH
3879: LD_INT 3
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 100
3899: PPUSH
3900: CALL_OW 290
// hc_gallery =  ;
3904: LD_ADDR_OWVAR 33
3908: PUSH
3909: LD_STRING 
3911: ST_TO_ADDR
// hc_name =  ;
3912: LD_ADDR_OWVAR 26
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3920: LD_INT 0
3922: PPUSH
3923: LD_INT 3
3925: PPUSH
3926: LD_EXP 16
3930: PPUSH
3931: LD_EXP 17
3935: PPUSH
3936: CALL_OW 12
3940: PPUSH
3941: CALL_OW 380
// un = CreateHuman ;
3945: LD_ADDR_VAR 0 4
3949: PUSH
3950: CALL_OW 44
3954: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3955: LD_VAR 0 4
3959: PPUSH
3960: LD_VAR 0 3
3964: PPUSH
3965: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_INT 22
3976: PUSH
3977: LD_INT 6
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 25
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 3
4006: PUSH
4007: LD_INT 25
4009: PUSH
4010: LD_INT 4
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4055
// ComAgressiveMove ( i , 45 , 46 ) ;
4038: LD_VAR 0 2
4042: PPUSH
4043: LD_INT 45
4045: PPUSH
4046: LD_INT 46
4048: PPUSH
4049: CALL_OW 114
4053: GO 4035
4055: POP
4056: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 6
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 25
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4123
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4094: LD_ADDR_EXP 21
4098: PUSH
4099: LD_VAR 0 2
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: LD_INT 48
4109: PPUSH
4110: LD_INT 55
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL_OW 145
4120: ST_TO_ADDR
4121: GO 4091
4123: POP
4124: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: LD_INT 22
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PPUSH
4154: CALL_OW 69
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4179
// ComMoveXY ( i , 39 , 55 ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: LD_INT 39
4169: PPUSH
4170: LD_INT 55
4172: PPUSH
4173: CALL_OW 111
4177: GO 4159
4179: POP
4180: POP
// end ;
4181: LD_VAR 0 1
4185: RET
// export function PrepareFirstAttack ; var i , un ; begin
4186: LD_INT 0
4188: PPUSH
4189: PPUSH
4190: PPUSH
// uc_side = 5 ;
4191: LD_ADDR_OWVAR 20
4195: PUSH
4196: LD_INT 5
4198: ST_TO_ADDR
// uc_nation = 3 ;
4199: LD_ADDR_OWVAR 21
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// for i := 1 to 4 do
4207: LD_ADDR_VAR 0 2
4211: PUSH
4212: DOUBLE
4213: LD_INT 1
4215: DEC
4216: ST_TO_ADDR
4217: LD_INT 4
4219: PUSH
4220: FOR_TO
4221: IFFALSE 4320
// begin hc_gallery =  ;
4223: LD_ADDR_OWVAR 33
4227: PUSH
4228: LD_STRING 
4230: ST_TO_ADDR
// hc_name =  ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4239: LD_INT 0
4241: PPUSH
4242: LD_INT 1
4244: PPUSH
4245: LD_EXP 16
4249: PPUSH
4250: LD_EXP 17
4254: PPUSH
4255: CALL_OW 12
4259: PPUSH
4260: CALL_OW 380
// un = CreateHuman ;
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: CALL_OW 44
4273: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_INT 4
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 250
4303: PPUSH
4304: LD_EXP 1
4308: PPUSH
4309: CALL_OW 251
4313: PPUSH
4314: CALL_OW 114
// end ;
4318: GO 4220
4320: POP
4321: POP
// firstRussianAttack = 1 ;
4322: LD_ADDR_EXP 23
4326: PUSH
4327: LD_INT 1
4329: ST_TO_ADDR
// end ; end_of_file
4330: LD_VAR 0 1
4334: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4335: LD_INT 0
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
// for i = 1 to count do
4341: LD_ADDR_VAR 0 8
4345: PUSH
4346: DOUBLE
4347: LD_INT 1
4349: DEC
4350: ST_TO_ADDR
4351: LD_VAR 0 6
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4438
// begin uc_side = side ;
4359: LD_ADDR_OWVAR 20
4363: PUSH
4364: LD_VAR 0 1
4368: ST_TO_ADDR
// uc_nation = nation ;
4369: LD_ADDR_OWVAR 21
4373: PUSH
4374: LD_VAR 0 2
4378: ST_TO_ADDR
// hc_gallery =  ;
4379: LD_ADDR_OWVAR 33
4383: PUSH
4384: LD_STRING 
4386: ST_TO_ADDR
// hc_name =  ;
4387: LD_ADDR_OWVAR 26
4391: PUSH
4392: LD_STRING 
4394: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4395: LD_INT 0
4397: PPUSH
4398: LD_VAR 0 5
4402: PPUSH
4403: LD_VAR 0 4
4407: PPUSH
4408: CALL_OW 380
// un = CreateHuman ;
4412: LD_ADDR_VAR 0 10
4416: PUSH
4417: CALL_OW 44
4421: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4422: LD_VAR 0 10
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: CALL_OW 52
// end ;
4436: GO 4356
4438: POP
4439: POP
// end ;
4440: LD_VAR 0 7
4444: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4445: LD_INT 0
4447: PPUSH
4448: PPUSH
4449: PPUSH
// uc_side := GetSide ( b ) ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_VAR 0 2
4459: PPUSH
4460: CALL_OW 255
4464: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_VAR 0 2
4474: PPUSH
4475: CALL_OW 248
4479: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 1
4485: PPUSH
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 380
// un = CreateHuman ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4505: LD_ADDR_VAR 0 5
4509: PUSH
4510: LD_VAR 0 2
4514: PPUSH
4515: CALL_OW 254
4519: PUSH
4520: LD_INT 3
4522: MINUS
4523: ST_TO_ADDR
// if dir < 0 then
4524: LD_VAR 0 5
4528: PUSH
4529: LD_INT 0
4531: LESS
4532: IFFALSE 4548
// dir := 6 + dir ;
4534: LD_ADDR_VAR 0 5
4538: PUSH
4539: LD_INT 6
4541: PUSH
4542: LD_VAR 0 5
4546: PLUS
4547: ST_TO_ADDR
// SetDir ( un , dir ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_VAR 0 5
4557: PPUSH
4558: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4562: LD_VAR 0 4
4566: PPUSH
4567: LD_VAR 0 2
4571: PPUSH
4572: CALL_OW 52
// end ;
4576: LD_VAR 0 3
4580: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4586: LD_ADDR_VAR 0 6
4590: PUSH
4591: LD_VAR 0 1
4595: PUSH
4596: LD_INT 1
4598: PPUSH
4599: LD_VAR 0 1
4603: PPUSH
4604: CALL_OW 12
4608: ARRAY
4609: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4610: LD_VAR 0 6
4614: PPUSH
4615: CALL_OW 258
4619: PUSH
4620: LD_INT 1
4622: EQUAL
4623: IFFALSE 4641
// Say ( speaker , dialogMID ) else
4625: LD_VAR 0 6
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: CALL_OW 88
4639: GO 4655
// Say ( speaker , dialogFID ) ;
4641: LD_VAR 0 6
4645: PPUSH
4646: LD_VAR 0 3
4650: PPUSH
4651: CALL_OW 88
// result := speaker ;
4655: LD_ADDR_VAR 0 4
4659: PUSH
4660: LD_VAR 0 6
4664: ST_TO_ADDR
// end ;
4665: LD_VAR 0 4
4669: RET
// export function PrepareDifficulty ; var tmp ; begin
4670: LD_INT 0
4672: PPUSH
4673: PPUSH
// if Difficulty = 1 then
4674: LD_OWVAR 67
4678: PUSH
4679: LD_INT 1
4681: EQUAL
4682: IFFALSE 4700
// begin RuSoldMinLevel = 1 ;
4684: LD_ADDR_EXP 16
4688: PUSH
4689: LD_INT 1
4691: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4692: LD_ADDR_EXP 17
4696: PUSH
4697: LD_INT 2
4699: ST_TO_ADDR
// end ; if Difficulty = 2 then
4700: LD_OWVAR 67
4704: PUSH
4705: LD_INT 2
4707: EQUAL
4708: IFFALSE 4809
// begin RuSoldMinLevel = 2 ;
4710: LD_ADDR_EXP 16
4714: PUSH
4715: LD_INT 2
4717: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4718: LD_ADDR_EXP 17
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4726: LD_INT 23
4728: PPUSH
4729: CALL_OW 64
// uc_nation = 3 ;
4733: LD_ADDR_OWVAR 21
4737: PUSH
4738: LD_INT 3
4740: ST_TO_ADDR
// uc_side = 3 ;
4741: LD_ADDR_OWVAR 20
4745: PUSH
4746: LD_INT 3
4748: ST_TO_ADDR
// bc_level = 5 ;
4749: LD_ADDR_OWVAR 43
4753: PUSH
4754: LD_INT 5
4756: ST_TO_ADDR
// bc_type = 32 ;
4757: LD_ADDR_OWVAR 42
4761: PUSH
4762: LD_INT 32
4764: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: LD_INT 76
4772: PPUSH
4773: LD_INT 91
4775: PPUSH
4776: LD_INT 2
4778: PPUSH
4779: CALL_OW 47
4783: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4784: LD_VAR 0 2
4788: PPUSH
4789: LD_INT 43
4791: PPUSH
4792: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4796: LD_INT 51
4798: PPUSH
4799: LD_INT 3
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 322
// end ; if Difficulty = 3 then
4809: LD_OWVAR 67
4813: PUSH
4814: LD_INT 3
4816: EQUAL
4817: IFFALSE 4979
// begin RuSoldMinLevel = 2 ;
4819: LD_ADDR_EXP 16
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4827: LD_ADDR_EXP 17
4831: PUSH
4832: LD_INT 4
4834: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4835: LD_INT 26
4837: PPUSH
4838: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4842: LD_INT 23
4844: PPUSH
4845: CALL_OW 64
// uc_nation = 3 ;
4849: LD_ADDR_OWVAR 21
4853: PUSH
4854: LD_INT 3
4856: ST_TO_ADDR
// uc_side = 3 ;
4857: LD_ADDR_OWVAR 20
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// bc_level = 5 ;
4865: LD_ADDR_OWVAR 43
4869: PUSH
4870: LD_INT 5
4872: ST_TO_ADDR
// bc_type = 32 ;
4873: LD_ADDR_OWVAR 42
4877: PUSH
4878: LD_INT 32
4880: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: LD_INT 76
4888: PPUSH
4889: LD_INT 91
4891: PPUSH
4892: LD_INT 2
4894: PPUSH
4895: CALL_OW 47
4899: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4900: LD_VAR 0 2
4904: PPUSH
4905: LD_INT 44
4907: PPUSH
4908: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4912: LD_ADDR_VAR 0 2
4916: PUSH
4917: LD_INT 83
4919: PPUSH
4920: LD_INT 84
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: CALL_OW 47
4930: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4931: LD_VAR 0 2
4935: PPUSH
4936: LD_INT 43
4938: PPUSH
4939: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4943: LD_INT 51
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4956: LD_INT 52
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4969: LD_INT 25
4971: PPUSH
4972: LD_INT 44
4974: PPUSH
4975: CALL_OW 431
// end ; end ;
4979: LD_VAR 0 1
4983: RET
// export function EnergyDialog ; begin
4984: LD_INT 0
4986: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4987: LD_INT 46
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: CALL_OW 321
4997: PUSH
4998: LD_INT 1
5000: EQUAL
5001: PUSH
5002: LD_INT 35
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 321
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5041
// begin Say ( JMM , D9c-JMM-1 ) ;
5019: LD_EXP 1
5023: PPUSH
5024: LD_STRING D9c-JMM-1
5026: PPUSH
5027: CALL_OW 88
// energyVDialog = 1 ;
5031: LD_ADDR_EXP 33
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// end else
5039: GO 5195
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5041: LD_INT 35
5043: PPUSH
5044: LD_INT 1
5046: PPUSH
5047: CALL_OW 321
5051: PUSH
5052: LD_INT 2
5054: EQUAL
5055: PUSH
5056: LD_EXP 33
5060: PUSH
5061: LD_INT 0
5063: EQUAL
5064: AND
5065: IFFALSE 5087
// begin Say ( JMM , D9c-JMM-1a ) ;
5067: LD_EXP 1
5071: PPUSH
5072: LD_STRING D9c-JMM-1a
5074: PPUSH
5075: CALL_OW 88
// energyVDialog = 1 ;
5079: LD_ADDR_EXP 33
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5087: LD_INT 46
5089: PPUSH
5090: LD_INT 1
5092: PPUSH
5093: CALL_OW 321
5097: PUSH
5098: LD_INT 2
5100: EQUAL
5101: PUSH
5102: LD_EXP 33
5106: PUSH
5107: LD_INT 0
5109: EQUAL
5110: AND
5111: IFFALSE 5133
// begin Say ( JMM , D9c-JMM-1b ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D9c-JMM-1b
5120: PPUSH
5121: CALL_OW 88
// energyVDialog = 1 ;
5125: LD_ADDR_EXP 33
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5133: LD_INT 46
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 321
5143: PUSH
5144: LD_INT 2
5146: EQUAL
5147: PUSH
5148: LD_INT 21
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: CALL_OW 321
5158: PUSH
5159: LD_INT 2
5161: EQUAL
5162: AND
5163: PUSH
5164: LD_EXP 33
5168: PUSH
5169: LD_INT 0
5171: EQUAL
5172: AND
5173: IFFALSE 5195
// begin Say ( JMM , D9c-JMM-1c ) ;
5175: LD_EXP 1
5179: PPUSH
5180: LD_STRING D9c-JMM-1c
5182: PPUSH
5183: CALL_OW 88
// energyVDialog = 1 ;
5187: LD_ADDR_EXP 33
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// end ; end ; end ;
5195: LD_VAR 0 1
5199: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5200: LD_INT 0
5202: PPUSH
5203: PPUSH
5204: PPUSH
5205: PPUSH
5206: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5207: LD_VAR 0 1
5211: NOT
5212: PUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 256
5222: PUSH
5223: LD_INT 250
5225: LESS
5226: OR
5227: PUSH
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 314
5237: PUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 261
5247: PUSH
5248: LD_INT 20
5250: GREATER
5251: AND
5252: OR
5253: IFFALSE 5257
// exit ;
5255: GO 5622
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: LESS
5270: PUSH
5271: LD_VAR 0 1
5275: PPUSH
5276: CALL_OW 110
5280: PUSH
5281: LD_INT 21
5283: EQUAL
5284: NOT
5285: AND
5286: IFFALSE 5313
// begin ComStop ( bulldozer ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 21
5304: PPUSH
5305: CALL_OW 109
// exit ;
5309: GO 5622
// end else
5311: GO 5340
// if GetFuel ( bulldozer ) > 20 then
5313: LD_VAR 0 1
5317: PPUSH
5318: CALL_OW 261
5322: PUSH
5323: LD_INT 20
5325: GREATER
5326: IFFALSE 5340
// SetTag ( bulldozer , 0 ) ;
5328: LD_VAR 0 1
5332: PPUSH
5333: LD_INT 0
5335: PPUSH
5336: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5340: LD_ADDR_VAR 0 5
5344: PUSH
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 353
5354: ST_TO_ADDR
// tmp := [ ] ;
5355: LD_ADDR_VAR 0 6
5359: PUSH
5360: EMPTY
5361: ST_TO_ADDR
// for i = 1 to list do
5362: LD_ADDR_VAR 0 4
5366: PUSH
5367: DOUBLE
5368: LD_INT 1
5370: DEC
5371: ST_TO_ADDR
5372: LD_VAR 0 5
5376: PUSH
5377: FOR_TO
5378: IFFALSE 5476
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5380: LD_VAR 0 5
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: PUSH
5391: LD_INT 1
5393: ARRAY
5394: PPUSH
5395: LD_VAR 0 5
5399: PUSH
5400: LD_VAR 0 4
5404: ARRAY
5405: PUSH
5406: LD_INT 2
5408: ARRAY
5409: PPUSH
5410: CALL_OW 554
5414: IFFALSE 5474
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5416: LD_ADDR_VAR 0 6
5420: PUSH
5421: LD_VAR 0 6
5425: PPUSH
5426: LD_VAR 0 6
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: PPUSH
5435: LD_VAR 0 5
5439: PUSH
5440: LD_VAR 0 4
5444: ARRAY
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PUSH
5450: LD_VAR 0 5
5454: PUSH
5455: LD_VAR 0 4
5459: ARRAY
5460: PUSH
5461: LD_INT 2
5463: ARRAY
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 1
5473: ST_TO_ADDR
// end ;
5474: GO 5377
5476: POP
5477: POP
// ComStop ( bulldozer ) ;
5478: LD_VAR 0 1
5482: PPUSH
5483: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5487: LD_ADDR_VAR 0 7
5491: PUSH
5492: LD_VAR 0 1
5496: PPUSH
5497: CALL_OW 250
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 251
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: ST_TO_ADDR
// for i = tmp downto 1 do
5516: LD_ADDR_VAR 0 4
5520: PUSH
5521: DOUBLE
5522: LD_VAR 0 6
5526: INC
5527: ST_TO_ADDR
5528: LD_INT 1
5530: PUSH
5531: FOR_DOWNTO
5532: IFFALSE 5620
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5534: LD_ADDR_VAR 0 7
5538: PUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 7
5552: PUSH
5553: LD_INT 2
5555: ARRAY
5556: PPUSH
5557: LD_VAR 0 6
5561: PPUSH
5562: CALL 5723 0 3
5566: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5567: LD_VAR 0 1
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 1
5579: ARRAY
5580: PPUSH
5581: LD_VAR 0 7
5585: PUSH
5586: LD_INT 2
5588: ARRAY
5589: PPUSH
5590: CALL 5627 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5594: LD_ADDR_VAR 0 6
5598: PUSH
5599: LD_VAR 0 6
5603: PPUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 3
5611: ARRAY
5612: PPUSH
5613: CALL_OW 3
5617: ST_TO_ADDR
// end ;
5618: GO 5531
5620: POP
5621: POP
// end ;
5622: LD_VAR 0 3
5626: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5627: LD_INT 0
5629: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5630: LD_VAR 0 2
5634: PPUSH
5635: LD_VAR 0 3
5639: PPUSH
5640: CALL_OW 351
5644: PUSH
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_VAR 0 3
5654: PPUSH
5655: CALL_OW 554
5659: AND
5660: PUSH
5661: LD_VAR 0 2
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: CALL_OW 488
5675: AND
5676: PUSH
5677: LD_VAR 0 2
5681: PPUSH
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 428
5691: PUSH
5692: LD_INT 1
5694: NEG
5695: EQUAL
5696: AND
5697: IFFALSE 5718
// AddComMoveXY ( bulldozer , x , y ) ;
5699: LD_VAR 0 1
5703: PPUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 171
// end ;
5718: LD_VAR 0 4
5722: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
5731: PPUSH
// dist := 99999 ;
5732: LD_ADDR_VAR 0 6
5736: PUSH
5737: LD_INT 99999
5739: ST_TO_ADDR
// for i = 1 to list do
5740: LD_ADDR_VAR 0 5
5744: PUSH
5745: DOUBLE
5746: LD_INT 1
5748: DEC
5749: ST_TO_ADDR
5750: LD_VAR 0 3
5754: PUSH
5755: FOR_TO
5756: IFFALSE 5894
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5758: LD_ADDR_VAR 0 7
5762: PUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PUSH
5778: LD_VAR 0 5
5782: ARRAY
5783: PUSH
5784: LD_INT 1
5786: ARRAY
5787: PPUSH
5788: LD_VAR 0 3
5792: PUSH
5793: LD_VAR 0 5
5797: ARRAY
5798: PUSH
5799: LD_INT 2
5801: ARRAY
5802: PPUSH
5803: CALL_OW 298
5807: ST_TO_ADDR
// if d = 0 then
5808: LD_VAR 0 7
5812: PUSH
5813: LD_INT 0
5815: EQUAL
5816: IFFALSE 5820
// continue ;
5818: GO 5755
// if d < dist then
5820: LD_VAR 0 7
5824: PUSH
5825: LD_VAR 0 6
5829: LESS
5830: IFFALSE 5892
// begin _x := list [ i ] [ 1 ] ;
5832: LD_ADDR_VAR 0 8
5836: PUSH
5837: LD_VAR 0 3
5841: PUSH
5842: LD_VAR 0 5
5846: ARRAY
5847: PUSH
5848: LD_INT 1
5850: ARRAY
5851: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5852: LD_ADDR_VAR 0 9
5856: PUSH
5857: LD_VAR 0 3
5861: PUSH
5862: LD_VAR 0 5
5866: ARRAY
5867: PUSH
5868: LD_INT 2
5870: ARRAY
5871: ST_TO_ADDR
// _i := i ;
5872: LD_ADDR_VAR 0 10
5876: PUSH
5877: LD_VAR 0 5
5881: ST_TO_ADDR
// dist := d ;
5882: LD_ADDR_VAR 0 6
5886: PUSH
5887: LD_VAR 0 7
5891: ST_TO_ADDR
// end ; end ;
5892: GO 5755
5894: POP
5895: POP
// result := [ _x , _y , _i , dist ] ;
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: LD_VAR 0 8
5905: PUSH
5906: LD_VAR 0 9
5910: PUSH
5911: LD_VAR 0 10
5915: PUSH
5916: LD_VAR 0 6
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: ST_TO_ADDR
// end ;
5927: LD_VAR 0 4
5931: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5932: LD_INT 0
5934: PPUSH
5935: PPUSH
5936: PPUSH
5937: PPUSH
// for i = 1 to 72 do
5938: LD_ADDR_VAR 0 5
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 72
5950: PUSH
5951: FOR_TO
5952: IFFALSE 6010
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5954: LD_VAR 0 5
5958: PPUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: CALL_OW 321
5968: PUSH
5969: LD_INT 1
5971: EQUAL
5972: PUSH
5973: LD_VAR 0 5
5977: PPUSH
5978: LD_VAR 0 3
5982: PPUSH
5983: CALL_OW 482
5987: PUSH
5988: LD_INT 1
5990: EQUAL
5991: AND
5992: IFFALSE 6008
// AddComResearch ( lab , i ) ;
5994: LD_VAR 0 2
5998: PPUSH
5999: LD_VAR 0 5
6003: PPUSH
6004: CALL_OW 184
6008: GO 5951
6010: POP
6011: POP
// end ;
6012: LD_VAR 0 4
6016: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
6023: PPUSH
6024: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: CALL_OW 313
6039: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6040: LD_ADDR_VAR 0 8
6044: PUSH
6045: LD_VAR 0 3
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_VAR 0 1
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 24
6074: PUSH
6075: LD_INT 750
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 54
6087: PUSH
6088: EMPTY
6089: LIST
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 70
6105: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6106: LD_ADDR_VAR 0 5
6110: PUSH
6111: LD_VAR 0 3
6115: PPUSH
6116: LD_INT 22
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: LD_INT 1000
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: PUSH
6160: EMPTY
6161: LIST
6162: PPUSH
6163: CALL_OW 70
6167: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6168: LD_VAR 0 5
6172: NOT
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 25
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 24
6198: PUSH
6199: LD_INT 250
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 69
6215: NOT
6216: AND
6217: IFFALSE 6221
// exit ;
6219: GO 6333
// if buildings_list > 0 and engineerOkInside then
6221: LD_VAR 0 5
6225: PUSH
6226: LD_INT 0
6228: GREATER
6229: PUSH
6230: LD_VAR 0 7
6234: AND
6235: IFFALSE 6261
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6237: LD_VAR 0 7
6241: PPUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: PPUSH
6257: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6261: LD_VAR 0 5
6265: PUSH
6266: LD_INT 0
6268: GREATER
6269: PUSH
6270: LD_VAR 0 8
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: PUSH
6313: LD_INT 0
6315: GREATER
6316: AND
6317: IFFALSE 6333
// ComEnterUnit ( engineerOkOutside , building ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 2
6328: PPUSH
6329: CALL_OW 120
// end ;
6333: LD_VAR 0 4
6337: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: LD_INT 22
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 23
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 24
6388: PUSH
6389: LD_INT 251
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 69
6406: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6407: LD_ADDR_VAR 0 7
6411: PUSH
6412: LD_VAR 0 3
6416: PPUSH
6417: LD_INT 22
6419: PUSH
6420: LD_VAR 0 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 23
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 25
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 50
6451: PUSH
6452: EMPTY
6453: LIST
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PPUSH
6461: CALL_OW 70
6465: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6466: LD_ADDR_VAR 0 10
6470: PUSH
6471: LD_VAR 0 3
6475: PPUSH
6476: LD_INT 22
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 24
6520: PUSH
6521: LD_INT 750
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 70
6542: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6543: LD_ADDR_VAR 0 11
6547: PUSH
6548: LD_VAR 0 2
6552: PPUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 21
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 24
6597: PUSH
6598: LD_INT 1000
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 70
6619: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6620: LD_VAR 0 10
6624: NOT
6625: PUSH
6626: LD_VAR 0 11
6630: NOT
6631: AND
6632: PUSH
6633: LD_VAR 0 6
6637: NOT
6638: AND
6639: IFFALSE 6643
// exit ;
6641: GO 6877
// if damageUnits > 0 and sci_list > 0 then
6643: LD_VAR 0 10
6647: PUSH
6648: LD_INT 0
6650: GREATER
6651: PUSH
6652: LD_VAR 0 6
6656: PUSH
6657: LD_INT 0
6659: GREATER
6660: AND
6661: IFFALSE 6677
// ComMoveToArea ( damageUnits , healArea ) ;
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 2
6672: PPUSH
6673: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6677: LD_VAR 0 11
6681: PUSH
6682: LD_INT 0
6684: GREATER
6685: PUSH
6686: LD_VAR 0 6
6690: PUSH
6691: LD_INT 0
6693: GREATER
6694: AND
6695: IFFALSE 6706
// ComExitBuilding ( sci_list ) ;
6697: LD_VAR 0 6
6701: PPUSH
6702: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6706: LD_VAR 0 11
6710: PUSH
6711: LD_INT 0
6713: GREATER
6714: PUSH
6715: LD_VAR 0 7
6719: PUSH
6720: LD_INT 0
6722: GREATER
6723: AND
6724: IFFALSE 6744
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6726: LD_VAR 0 7
6730: PPUSH
6731: LD_VAR 0 11
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PPUSH
6740: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6744: LD_VAR 0 10
6748: PUSH
6749: LD_INT 0
6751: EQUAL
6752: PUSH
6753: LD_VAR 0 11
6757: PUSH
6758: LD_INT 0
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 7
6767: PUSH
6768: LD_INT 0
6770: GREATER
6771: AND
6772: IFFALSE 6877
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6774: LD_ADDR_VAR 0 12
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_VAR 0 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 30
6803: PUSH
6804: LD_INT 8
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6821: LD_ADDR_VAR 0 13
6825: PUSH
6826: LD_INT 1
6828: PPUSH
6829: LD_VAR 0 12
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6839: LD_VAR 0 7
6843: PPUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 60
6849: PUSH
6850: EMPTY
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 72
6861: PPUSH
6862: LD_VAR 0 12
6866: PUSH
6867: LD_VAR 0 13
6871: ARRAY
6872: PPUSH
6873: CALL_OW 120
// end ; end ;
6877: LD_VAR 0 5
6881: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6886: LD_INT 22
6888: PUSH
6889: LD_VAR 0 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 2
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: PUSH
6917: LD_VAR 0 3
6921: LESSEQUAL
6922: IFFALSE 6989
// for i = 1 to vehCount do
6924: LD_ADDR_VAR 0 9
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 3
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6987
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6942: LD_VAR 0 2
6946: PPUSH
6947: LD_VAR 0 7
6951: PPUSH
6952: LD_VAR 0 5
6956: PPUSH
6957: LD_VAR 0 6
6961: PPUSH
6962: LD_VAR 0 4
6966: PUSH
6967: LD_INT 1
6969: PPUSH
6970: LD_VAR 0 4
6974: PPUSH
6975: CALL_OW 12
6979: ARRAY
6980: PPUSH
6981: CALL_OW 185
6985: GO 6939
6987: POP
6988: POP
// end ;
6989: LD_VAR 0 8
6993: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6994: LD_INT 0
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
7002: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7003: LD_ADDR_VAR 0 8
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_VAR 0 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 34
7035: PUSH
7036: LD_INT 51
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 34
7045: PUSH
7046: LD_INT 53
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 34
7055: PUSH
7056: LD_INT 52
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 24
7071: PUSH
7072: LD_INT 650
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7090: LD_INT 22
7092: PUSH
7093: LD_VAR 0 1
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 21
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: LD_INT 1000
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: PPUSH
7127: CALL_OW 69
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_OWVAR 67
7150: ARRAY
7151: GREATEREQUAL
7152: IFFALSE 7649
// repeat wait ( 0 0$1 ) ;
7154: LD_INT 35
7156: PPUSH
7157: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7161: LD_ADDR_VAR 0 8
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: LD_INT 34
7193: PUSH
7194: LD_INT 51
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 34
7203: PUSH
7204: LD_INT 53
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 34
7213: PUSH
7214: LD_INT 52
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 650
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 69
7247: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7248: LD_INT 22
7250: PUSH
7251: LD_VAR 0 1
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 95
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PPUSH
7276: CALL_OW 69
7280: NOT
7281: PUSH
7282: LD_VAR 0 11
7286: PUSH
7287: LD_INT 0
7289: EQUAL
7290: AND
7291: IFFALSE 7346
// for i := 1 to wayX do
7293: LD_ADDR_VAR 0 6
7297: PUSH
7298: DOUBLE
7299: LD_INT 1
7301: DEC
7302: ST_TO_ADDR
7303: LD_VAR 0 3
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7344
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7311: LD_VAR 0 8
7315: PPUSH
7316: LD_VAR 0 3
7320: PUSH
7321: LD_VAR 0 6
7325: ARRAY
7326: PPUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_VAR 0 6
7336: ARRAY
7337: PPUSH
7338: CALL_OW 174
7342: GO 7308
7344: POP
7345: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7346: LD_INT 22
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 95
7360: PUSH
7361: LD_VAR 0 2
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: IFFALSE 7602
// begin seeEnemy = 1 ;
7380: LD_ADDR_VAR 0 11
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for j in vehiclesOK do
7388: LD_ADDR_VAR 0 7
7392: PUSH
7393: LD_VAR 0 8
7397: PUSH
7398: FOR_IN
7399: IFFALSE 7600
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7401: LD_ADDR_VAR 0 9
7405: PUSH
7406: LD_INT 81
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 101
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: PPUSH
7437: LD_VAR 0 7
7441: PPUSH
7442: CALL_OW 74
7446: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7447: LD_ADDR_VAR 0 10
7451: PUSH
7452: LD_INT 81
7454: PUSH
7455: LD_VAR 0 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 101
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: LD_INT 59
7479: PUSH
7480: EMPTY
7481: LIST
7482: PUSH
7483: LD_INT 21
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: PPUSH
7517: CALL_OW 69
7521: PPUSH
7522: LD_VAR 0 7
7526: PPUSH
7527: CALL_OW 74
7531: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7532: LD_VAR 0 7
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 296
7546: PUSH
7547: LD_INT 8
7549: PLUS
7550: PUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: LD_VAR 0 10
7560: PPUSH
7561: CALL_OW 296
7565: LESS
7566: IFFALSE 7584
// ComAttackUnit ( j , target1 ) else
7568: LD_VAR 0 7
7572: PPUSH
7573: LD_VAR 0 9
7577: PPUSH
7578: CALL_OW 115
7582: GO 7598
// ComAttackUnit ( j , target2 ) ;
7584: LD_VAR 0 7
7588: PPUSH
7589: LD_VAR 0 10
7593: PPUSH
7594: CALL_OW 115
// end ;
7598: GO 7398
7600: POP
7601: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7602: LD_INT 22
7604: PUSH
7605: LD_VAR 0 1
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 21
7616: PUSH
7617: LD_INT 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 24
7626: PUSH
7627: LD_INT 1000
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: PUSH
7644: LD_INT 0
7646: EQUAL
7647: IFFALSE 7154
// seeEnemy = 0 ;
7649: LD_ADDR_VAR 0 11
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// end ;
7657: LD_VAR 0 5
7661: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_VAR 0 1
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: LD_INT 34
7700: PUSH
7701: LD_INT 51
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 34
7710: PUSH
7711: LD_INT 53
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 34
7720: PUSH
7721: LD_INT 52
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 3
7736: PUSH
7737: LD_INT 24
7739: PUSH
7740: LD_INT 650
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: PPUSH
7757: CALL_OW 69
7761: ST_TO_ADDR
// if damageVehicles > 0 then
7762: LD_VAR 0 8
7766: PUSH
7767: LD_INT 0
7769: GREATER
7770: IFFALSE 7791
// ComMoveXY ( damageVehicles , repX , repY ) ;
7772: LD_VAR 0 8
7776: PPUSH
7777: LD_VAR 0 3
7781: PPUSH
7782: LD_VAR 0 4
7786: PPUSH
7787: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7791: LD_VAR 0 8
7795: PPUSH
7796: LD_INT 95
7798: PUSH
7799: LD_VAR 0 2
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_INT 58
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: PUSH
7830: LD_INT 0
7832: GREATER
7833: IFFALSE 7900
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7835: LD_ADDR_VAR 0 6
7839: PUSH
7840: LD_VAR 0 8
7844: PPUSH
7845: LD_INT 95
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 58
7862: PUSH
7863: EMPTY
7864: LIST
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 72
7878: PUSH
7879: FOR_IN
7880: IFFALSE 7898
// ComExitVehicle ( UnitsInside ( i ) ) ;
7882: LD_VAR 0 6
7886: PPUSH
7887: CALL_OW 313
7891: PPUSH
7892: CALL_OW 121
7896: GO 7879
7898: POP
7899: POP
// end ;
7900: LD_VAR 0 5
7904: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7905: LD_INT 0
7907: PPUSH
7908: PPUSH
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
// for i = 1 to medicCount do
7918: LD_ADDR_VAR 0 14
7922: PUSH
7923: DOUBLE
7924: LD_INT 1
7926: DEC
7927: ST_TO_ADDR
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_TO
7934: IFFALSE 8016
// begin uc_side = side ;
7936: LD_ADDR_OWVAR 20
7940: PUSH
7941: LD_VAR 0 1
7945: ST_TO_ADDR
// uc_nation = nation ;
7946: LD_ADDR_OWVAR 21
7950: PUSH
7951: LD_VAR 0 2
7955: ST_TO_ADDR
// hc_name =  ;
7956: LD_ADDR_OWVAR 26
7960: PUSH
7961: LD_STRING 
7963: ST_TO_ADDR
// hc_gallery =  ;
7964: LD_ADDR_OWVAR 33
7968: PUSH
7969: LD_STRING 
7971: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7972: LD_INT 0
7974: PPUSH
7975: LD_INT 4
7977: PPUSH
7978: LD_VAR 0 8
7982: PPUSH
7983: CALL_OW 380
// un = CreateHuman ;
7987: LD_ADDR_VAR 0 16
7991: PUSH
7992: CALL_OW 44
7996: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7997: LD_VAR 0 16
8001: PPUSH
8002: LD_VAR 0 9
8006: PPUSH
8007: LD_INT 0
8009: PPUSH
8010: CALL_OW 49
// end ;
8014: GO 7933
8016: POP
8017: POP
// for i = 1 to soldierCount do
8018: LD_ADDR_VAR 0 14
8022: PUSH
8023: DOUBLE
8024: LD_INT 1
8026: DEC
8027: ST_TO_ADDR
8028: LD_VAR 0 3
8032: PUSH
8033: FOR_TO
8034: IFFALSE 8116
// begin uc_side = side ;
8036: LD_ADDR_OWVAR 20
8040: PUSH
8041: LD_VAR 0 1
8045: ST_TO_ADDR
// uc_nation = nation ;
8046: LD_ADDR_OWVAR 21
8050: PUSH
8051: LD_VAR 0 2
8055: ST_TO_ADDR
// hc_name =  ;
8056: LD_ADDR_OWVAR 26
8060: PUSH
8061: LD_STRING 
8063: ST_TO_ADDR
// hc_gallery =  ;
8064: LD_ADDR_OWVAR 33
8068: PUSH
8069: LD_STRING 
8071: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8072: LD_INT 0
8074: PPUSH
8075: LD_INT 1
8077: PPUSH
8078: LD_VAR 0 8
8082: PPUSH
8083: CALL_OW 380
// un = CreateHuman ;
8087: LD_ADDR_VAR 0 16
8091: PUSH
8092: CALL_OW 44
8096: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8097: LD_VAR 0 16
8101: PPUSH
8102: LD_VAR 0 9
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 49
// end ;
8114: GO 8033
8116: POP
8117: POP
// for i = 1 to sniperCount do
8118: LD_ADDR_VAR 0 14
8122: PUSH
8123: DOUBLE
8124: LD_INT 1
8126: DEC
8127: ST_TO_ADDR
8128: LD_VAR 0 4
8132: PUSH
8133: FOR_TO
8134: IFFALSE 8216
// begin uc_side = side ;
8136: LD_ADDR_OWVAR 20
8140: PUSH
8141: LD_VAR 0 1
8145: ST_TO_ADDR
// uc_nation = nation ;
8146: LD_ADDR_OWVAR 21
8150: PUSH
8151: LD_VAR 0 2
8155: ST_TO_ADDR
// hc_name =  ;
8156: LD_ADDR_OWVAR 26
8160: PUSH
8161: LD_STRING 
8163: ST_TO_ADDR
// hc_gallery =  ;
8164: LD_ADDR_OWVAR 33
8168: PUSH
8169: LD_STRING 
8171: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8172: LD_INT 0
8174: PPUSH
8175: LD_INT 5
8177: PPUSH
8178: LD_VAR 0 8
8182: PPUSH
8183: CALL_OW 380
// un = CreateHuman ;
8187: LD_ADDR_VAR 0 16
8191: PUSH
8192: CALL_OW 44
8196: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8197: LD_VAR 0 16
8201: PPUSH
8202: LD_VAR 0 9
8206: PPUSH
8207: LD_INT 0
8209: PPUSH
8210: CALL_OW 49
// end ;
8214: GO 8133
8216: POP
8217: POP
// for i = 1 to bazookCount do
8218: LD_ADDR_VAR 0 14
8222: PUSH
8223: DOUBLE
8224: LD_INT 1
8226: DEC
8227: ST_TO_ADDR
8228: LD_VAR 0 5
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8316
// begin uc_side = side ;
8236: LD_ADDR_OWVAR 20
8240: PUSH
8241: LD_VAR 0 1
8245: ST_TO_ADDR
// uc_nation = nation ;
8246: LD_ADDR_OWVAR 21
8250: PUSH
8251: LD_VAR 0 2
8255: ST_TO_ADDR
// hc_name =  ;
8256: LD_ADDR_OWVAR 26
8260: PUSH
8261: LD_STRING 
8263: ST_TO_ADDR
// hc_gallery =  ;
8264: LD_ADDR_OWVAR 33
8268: PUSH
8269: LD_STRING 
8271: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8272: LD_INT 0
8274: PPUSH
8275: LD_INT 9
8277: PPUSH
8278: LD_VAR 0 8
8282: PPUSH
8283: CALL_OW 380
// un = CreateHuman ;
8287: LD_ADDR_VAR 0 16
8291: PUSH
8292: CALL_OW 44
8296: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8297: LD_VAR 0 16
8301: PPUSH
8302: LD_VAR 0 9
8306: PPUSH
8307: LD_INT 0
8309: PPUSH
8310: CALL_OW 49
// end ;
8314: GO 8233
8316: POP
8317: POP
// for i = 1 to mortalCount do
8318: LD_ADDR_VAR 0 14
8322: PUSH
8323: DOUBLE
8324: LD_INT 1
8326: DEC
8327: ST_TO_ADDR
8328: LD_VAR 0 6
8332: PUSH
8333: FOR_TO
8334: IFFALSE 8416
// begin uc_side = side ;
8336: LD_ADDR_OWVAR 20
8340: PUSH
8341: LD_VAR 0 1
8345: ST_TO_ADDR
// uc_nation = nation ;
8346: LD_ADDR_OWVAR 21
8350: PUSH
8351: LD_VAR 0 2
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// hc_gallery =  ;
8364: LD_ADDR_OWVAR 33
8368: PUSH
8369: LD_STRING 
8371: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 8
8377: PPUSH
8378: LD_VAR 0 8
8382: PPUSH
8383: CALL_OW 380
// un = CreateHuman ;
8387: LD_ADDR_VAR 0 16
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8397: LD_VAR 0 16
8401: PPUSH
8402: LD_VAR 0 9
8406: PPUSH
8407: LD_INT 0
8409: PPUSH
8410: CALL_OW 49
// end ;
8414: GO 8333
8416: POP
8417: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8418: LD_ADDR_VAR 0 19
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_VAR 0 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 25
8440: PUSH
8441: LD_INT 1
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 25
8450: PUSH
8451: LD_INT 5
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 25
8460: PUSH
8461: LD_INT 8
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 25
8470: PUSH
8471: LD_INT 9
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8494: LD_ADDR_VAR 0 18
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 4
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8530: LD_VAR 0 18
8534: PPUSH
8535: LD_VAR 0 10
8539: PPUSH
8540: CALL_OW 113
// if strategy = 1 then
8544: LD_VAR 0 12
8548: PUSH
8549: LD_INT 1
8551: EQUAL
8552: IFFALSE 9043
// begin for i in soldiersOK_list do
8554: LD_ADDR_VAR 0 14
8558: PUSH
8559: LD_VAR 0 19
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8629
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8567: LD_VAR 0 14
8571: PPUSH
8572: LD_INT 91
8574: PPUSH
8575: LD_INT 63
8577: PPUSH
8578: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8582: LD_VAR 0 14
8586: PPUSH
8587: LD_INT 101
8589: PPUSH
8590: LD_INT 53
8592: PPUSH
8593: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8597: LD_VAR 0 14
8601: PPUSH
8602: LD_INT 75
8604: PPUSH
8605: LD_INT 23
8607: PPUSH
8608: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8612: LD_VAR 0 14
8616: PPUSH
8617: LD_INT 78
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: CALL_OW 174
// end ;
8627: GO 8564
8629: POP
8630: POP
// wait ( 0 0$30 ) ;
8631: LD_INT 1050
8633: PPUSH
8634: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8638: LD_INT 35
8640: PPUSH
8641: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8645: LD_ADDR_VAR 0 17
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_VAR 0 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: LD_INT 3
8667: PUSH
8668: LD_INT 24
8670: PUSH
8671: LD_INT 550
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: LD_INT 250
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8706: LD_ADDR_VAR 0 19
8710: PUSH
8711: LD_INT 22
8713: PUSH
8714: LD_VAR 0 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: LD_INT 25
8728: PUSH
8729: LD_INT 1
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 5
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 25
8748: PUSH
8749: LD_INT 8
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 9
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 24
8775: PUSH
8776: LD_INT 1000
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: ST_TO_ADDR
// if medicCount > 0 then
8793: LD_VAR 0 7
8797: PUSH
8798: LD_INT 0
8800: GREATER
8801: IFFALSE 8845
// begin if damageUnit_list > 0 then
8803: LD_VAR 0 17
8807: PUSH
8808: LD_INT 0
8810: GREATER
8811: IFFALSE 8845
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8813: LD_VAR 0 17
8817: PPUSH
8818: LD_VAR 0 10
8822: PPUSH
8823: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8827: LD_VAR 0 7
8831: PPUSH
8832: LD_VAR 0 17
8836: PUSH
8837: LD_INT 1
8839: ARRAY
8840: PPUSH
8841: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8845: LD_ADDR_VAR 0 14
8849: PUSH
8850: LD_VAR 0 19
8854: PUSH
8855: FOR_IN
8856: IFFALSE 9032
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8858: LD_ADDR_VAR 0 22
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_VAR 0 11
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 69
8879: PPUSH
8880: LD_VAR 0 14
8884: PPUSH
8885: CALL_OW 74
8889: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8890: LD_ADDR_VAR 0 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_VAR 0 11
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 2
8909: PUSH
8910: LD_INT 59
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: PPUSH
8954: LD_VAR 0 14
8958: PPUSH
8959: CALL_OW 74
8963: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8964: LD_VAR 0 14
8968: PPUSH
8969: LD_VAR 0 22
8973: PPUSH
8974: CALL_OW 296
8978: PUSH
8979: LD_INT 8
8981: PLUS
8982: PUSH
8983: LD_VAR 0 14
8987: PPUSH
8988: LD_VAR 0 23
8992: PPUSH
8993: CALL_OW 296
8997: LESS
8998: IFFALSE 9016
// begin ComAttackUnit ( i , target1 ) ;
9000: LD_VAR 0 14
9004: PPUSH
9005: LD_VAR 0 22
9009: PPUSH
9010: CALL_OW 115
// end else
9014: GO 9030
// begin ComAttackUnit ( i , target2 ) ;
9016: LD_VAR 0 14
9020: PPUSH
9021: LD_VAR 0 23
9025: PPUSH
9026: CALL_OW 115
// end ; end ;
9030: GO 8855
9032: POP
9033: POP
// until soldiersOK_list = [ ] ;
9034: LD_VAR 0 19
9038: PUSH
9039: EMPTY
9040: EQUAL
9041: IFFALSE 8638
// end ; if strategy = 2 then
9043: LD_VAR 0 12
9047: PUSH
9048: LD_INT 2
9050: EQUAL
9051: IFFALSE 9505
// begin for i in soldiersOK_list do
9053: LD_ADDR_VAR 0 14
9057: PUSH
9058: LD_VAR 0 19
9062: PUSH
9063: FOR_IN
9064: IFFALSE 9098
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9066: LD_VAR 0 14
9070: PPUSH
9071: LD_INT 91
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9081: LD_VAR 0 14
9085: PPUSH
9086: LD_INT 75
9088: PPUSH
9089: LD_INT 33
9091: PPUSH
9092: CALL_OW 174
// end ;
9096: GO 9063
9098: POP
9099: POP
// repeat wait ( 0 0$3 ) ;
9100: LD_INT 105
9102: PPUSH
9103: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9107: LD_ADDR_VAR 0 17
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_VAR 0 1
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 1
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: LD_INT 24
9132: PUSH
9133: LD_INT 550
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 24
9146: PUSH
9147: LD_INT 250
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9168: LD_ADDR_VAR 0 19
9172: PUSH
9173: LD_INT 22
9175: PUSH
9176: LD_VAR 0 1
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 2
9187: PUSH
9188: LD_INT 25
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 25
9200: PUSH
9201: LD_INT 5
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 25
9210: PUSH
9211: LD_INT 8
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 25
9220: PUSH
9221: LD_INT 9
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 24
9237: PUSH
9238: LD_INT 1000
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 69
9254: ST_TO_ADDR
// if medicCount > 0 then
9255: LD_VAR 0 7
9259: PUSH
9260: LD_INT 0
9262: GREATER
9263: IFFALSE 9307
// begin if damageUnit_list > 0 then
9265: LD_VAR 0 17
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9307
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9275: LD_VAR 0 17
9279: PPUSH
9280: LD_VAR 0 10
9284: PPUSH
9285: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_VAR 0 17
9298: PUSH
9299: LD_INT 1
9301: ARRAY
9302: PPUSH
9303: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9307: LD_ADDR_VAR 0 14
9311: PUSH
9312: LD_VAR 0 19
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9494
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9320: LD_ADDR_VAR 0 22
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_VAR 0 11
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 69
9341: PPUSH
9342: LD_VAR 0 14
9346: PPUSH
9347: CALL_OW 74
9351: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9352: LD_ADDR_VAR 0 23
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 11
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 2
9371: PUSH
9372: LD_INT 59
9374: PUSH
9375: EMPTY
9376: LIST
9377: PUSH
9378: LD_INT 21
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 21
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: PPUSH
9411: CALL_OW 69
9415: PPUSH
9416: LD_VAR 0 14
9420: PPUSH
9421: CALL_OW 74
9425: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9426: LD_VAR 0 14
9430: PPUSH
9431: LD_VAR 0 22
9435: PPUSH
9436: CALL_OW 296
9440: PUSH
9441: LD_INT 8
9443: PLUS
9444: PUSH
9445: LD_VAR 0 14
9449: PPUSH
9450: LD_VAR 0 23
9454: PPUSH
9455: CALL_OW 296
9459: LESS
9460: IFFALSE 9478
// begin ComAttackUnit ( i , target1 ) ;
9462: LD_VAR 0 14
9466: PPUSH
9467: LD_VAR 0 22
9471: PPUSH
9472: CALL_OW 115
// end else
9476: GO 9492
// begin ComAttackUnit ( i , target2 ) ;
9478: LD_VAR 0 14
9482: PPUSH
9483: LD_VAR 0 23
9487: PPUSH
9488: CALL_OW 115
// end ; end ;
9492: GO 9317
9494: POP
9495: POP
// until soldiersOK_list = [ ] ;
9496: LD_VAR 0 19
9500: PUSH
9501: EMPTY
9502: EQUAL
9503: IFFALSE 9100
// end ; if not soldiersOK_list and medic_list then
9505: LD_VAR 0 19
9509: NOT
9510: PUSH
9511: LD_VAR 0 18
9515: AND
9516: IFFALSE 9656
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9518: LD_ADDR_VAR 0 18
9522: PUSH
9523: LD_INT 22
9525: PUSH
9526: LD_VAR 0 1
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 25
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 50
9547: PUSH
9548: EMPTY
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9561: LD_INT 35
9563: PPUSH
9564: CALL_OW 67
// for i in medic_list do
9568: LD_ADDR_VAR 0 14
9572: PUSH
9573: LD_VAR 0 18
9577: PUSH
9578: FOR_IN
9579: IFFALSE 9647
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9581: LD_VAR 0 14
9585: PPUSH
9586: CALL_OW 314
9590: NOT
9591: PUSH
9592: LD_VAR 0 14
9596: PPUSH
9597: LD_INT 4
9599: PPUSH
9600: CALL_OW 308
9604: NOT
9605: AND
9606: IFFALSE 9622
// ComMoveToArea ( i , RussianAttack ) else
9608: LD_VAR 0 14
9612: PPUSH
9613: LD_INT 4
9615: PPUSH
9616: CALL_OW 113
9620: GO 9645
// if IsInArea ( i , RussianAttack ) then
9622: LD_VAR 0 14
9626: PPUSH
9627: LD_INT 4
9629: PPUSH
9630: CALL_OW 308
9634: IFFALSE 9645
// RemoveUnit ( i ) ;
9636: LD_VAR 0 14
9640: PPUSH
9641: CALL_OW 64
9645: GO 9578
9647: POP
9648: POP
// until not medic_list ;
9649: LD_VAR 0 18
9653: NOT
9654: IFFALSE 9518
// end ; end ;
9656: LD_VAR 0 13
9660: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// amChassisTab = [ ] ;
9674: LD_ADDR_VAR 0 19
9678: PUSH
9679: EMPTY
9680: ST_TO_ADDR
// arChassisTab = [ ] ;
9681: LD_ADDR_VAR 0 18
9685: PUSH
9686: EMPTY
9687: ST_TO_ADDR
// ruChassisTab = [ ] ;
9688: LD_ADDR_VAR 0 17
9692: PUSH
9693: EMPTY
9694: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9695: LD_INT 35
9697: PPUSH
9698: CALL_OW 67
// if nation = 1 then
9702: LD_VAR 0 5
9706: PUSH
9707: LD_INT 1
9709: EQUAL
9710: IFFALSE 10201
// begin uc_side = side ;
9712: LD_ADDR_OWVAR 20
9716: PUSH
9717: LD_VAR 0 2
9721: ST_TO_ADDR
// uc_nation = nation ;
9722: LD_ADDR_OWVAR 21
9726: PUSH
9727: LD_VAR 0 5
9731: ST_TO_ADDR
// vc_engine = vehengine ;
9732: LD_ADDR_OWVAR 39
9736: PUSH
9737: LD_VAR 0 6
9741: ST_TO_ADDR
// vc_control = vehcontrol ;
9742: LD_ADDR_OWVAR 38
9746: PUSH
9747: LD_VAR 0 7
9751: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9752: LD_ADDR_OWVAR 40
9756: PUSH
9757: LD_VAR 0 10
9761: PUSH
9762: LD_INT 1
9764: PPUSH
9765: LD_VAR 0 10
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: ST_TO_ADDR
// for j = 1 to AMWeapon do
9776: LD_ADDR_VAR 0 14
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_VAR 0 10
9790: PUSH
9791: FOR_TO
9792: IFFALSE 10093
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9794: LD_VAR 0 10
9798: PUSH
9799: LD_VAR 0 14
9803: ARRAY
9804: PUSH
9805: LD_INT 2
9807: EQUAL
9808: PUSH
9809: LD_VAR 0 10
9813: PUSH
9814: LD_VAR 0 14
9818: ARRAY
9819: PUSH
9820: LD_INT 3
9822: EQUAL
9823: OR
9824: IFFALSE 9877
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9826: LD_ADDR_VAR 0 19
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: LD_INT 4
9842: PUSH
9843: LD_INT 5
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9853: LD_ADDR_OWVAR 37
9857: PUSH
9858: LD_VAR 0 19
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_VAR 0 19
9870: PPUSH
9871: CALL_OW 12
9875: ARRAY
9876: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9877: LD_VAR 0 10
9881: PUSH
9882: LD_VAR 0 14
9886: ARRAY
9887: PUSH
9888: LD_INT 4
9890: EQUAL
9891: PUSH
9892: LD_VAR 0 10
9896: PUSH
9897: LD_VAR 0 14
9901: ARRAY
9902: PUSH
9903: LD_INT 5
9905: EQUAL
9906: OR
9907: PUSH
9908: LD_VAR 0 10
9912: PUSH
9913: LD_VAR 0 14
9917: ARRAY
9918: PUSH
9919: LD_INT 9
9921: EQUAL
9922: OR
9923: PUSH
9924: LD_VAR 0 10
9928: PUSH
9929: LD_VAR 0 14
9933: ARRAY
9934: PUSH
9935: LD_INT 11
9937: EQUAL
9938: OR
9939: PUSH
9940: LD_VAR 0 10
9944: PUSH
9945: LD_VAR 0 14
9949: ARRAY
9950: PUSH
9951: LD_INT 7
9953: EQUAL
9954: OR
9955: IFFALSE 10004
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9957: LD_ADDR_VAR 0 19
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9980: LD_ADDR_OWVAR 37
9984: PUSH
9985: LD_VAR 0 19
9989: PUSH
9990: LD_INT 1
9992: PPUSH
9993: LD_VAR 0 19
9997: PPUSH
9998: CALL_OW 12
10002: ARRAY
10003: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10004: LD_VAR 0 10
10008: PUSH
10009: LD_VAR 0 14
10013: ARRAY
10014: PUSH
10015: LD_INT 8
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 10
10023: PUSH
10024: LD_VAR 0 14
10028: ARRAY
10029: PUSH
10030: LD_INT 6
10032: EQUAL
10033: OR
10034: PUSH
10035: LD_VAR 0 10
10039: PUSH
10040: LD_VAR 0 14
10044: ARRAY
10045: PUSH
10046: LD_INT 10
10048: EQUAL
10049: OR
10050: IFFALSE 10091
// begin amChassisTab = [ 4 , 5 ] ;
10052: LD_ADDR_VAR 0 19
10056: PUSH
10057: LD_INT 4
10059: PUSH
10060: LD_INT 5
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10067: LD_ADDR_OWVAR 37
10071: PUSH
10072: LD_VAR 0 19
10076: PUSH
10077: LD_INT 1
10079: PPUSH
10080: LD_VAR 0 19
10084: PPUSH
10085: CALL_OW 12
10089: ARRAY
10090: ST_TO_ADDR
// end ; end ;
10091: GO 9791
10093: POP
10094: POP
// veh = CreateVehicle ;
10095: LD_ADDR_VAR 0 16
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10105: LD_VAR 0 16
10109: PPUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: CALL_OW 49
// if vehControl = 1 then
10122: LD_VAR 0 7
10126: PUSH
10127: LD_INT 1
10129: EQUAL
10130: IFFALSE 10187
// begin hc_gallery =  ;
10132: LD_ADDR_OWVAR 33
10136: PUSH
10137: LD_STRING 
10139: ST_TO_ADDR
// hc_name =  ;
10140: LD_ADDR_OWVAR 26
10144: PUSH
10145: LD_STRING 
10147: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10148: LD_INT 0
10150: PPUSH
10151: LD_INT 3
10153: PPUSH
10154: LD_VAR 0 4
10158: PPUSH
10159: CALL_OW 380
// un = CreateHuman ;
10163: LD_ADDR_VAR 0 15
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10173: LD_VAR 0 15
10177: PPUSH
10178: LD_VAR 0 16
10182: PPUSH
10183: CALL_OW 52
// end ; i = i + 1 ;
10187: LD_ADDR_VAR 0 13
10191: PUSH
10192: LD_VAR 0 13
10196: PUSH
10197: LD_INT 1
10199: PLUS
10200: ST_TO_ADDR
// end ; if nation = 2 then
10201: LD_VAR 0 5
10205: PUSH
10206: LD_INT 2
10208: EQUAL
10209: IFFALSE 10633
// begin uc_side = side ;
10211: LD_ADDR_OWVAR 20
10215: PUSH
10216: LD_VAR 0 2
10220: ST_TO_ADDR
// uc_nation = nation ;
10221: LD_ADDR_OWVAR 21
10225: PUSH
10226: LD_VAR 0 5
10230: ST_TO_ADDR
// vc_engine = vehengine ;
10231: LD_ADDR_OWVAR 39
10235: PUSH
10236: LD_VAR 0 6
10240: ST_TO_ADDR
// vc_control = vehcontrol ;
10241: LD_ADDR_OWVAR 38
10245: PUSH
10246: LD_VAR 0 7
10250: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10251: LD_ADDR_OWVAR 40
10255: PUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_VAR 0 9
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: ST_TO_ADDR
// for j = 1 to ARWeapons do
10275: LD_ADDR_VAR 0 14
10279: PUSH
10280: DOUBLE
10281: LD_INT 1
10283: DEC
10284: ST_TO_ADDR
10285: LD_VAR 0 9
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10525
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10293: LD_VAR 0 9
10297: PUSH
10298: LD_VAR 0 14
10302: ARRAY
10303: PUSH
10304: LD_INT 24
10306: EQUAL
10307: PUSH
10308: LD_VAR 0 9
10312: PUSH
10313: LD_VAR 0 14
10317: ARRAY
10318: PUSH
10319: LD_INT 22
10321: EQUAL
10322: OR
10323: PUSH
10324: LD_VAR 0 9
10328: PUSH
10329: LD_VAR 0 14
10333: ARRAY
10334: PUSH
10335: LD_INT 23
10337: EQUAL
10338: OR
10339: PUSH
10340: LD_VAR 0 9
10344: PUSH
10345: LD_VAR 0 14
10349: ARRAY
10350: PUSH
10351: LD_INT 30
10353: EQUAL
10354: OR
10355: IFFALSE 10404
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10357: LD_ADDR_VAR 0 18
10361: PUSH
10362: LD_INT 11
10364: PUSH
10365: LD_INT 12
10367: PUSH
10368: LD_INT 13
10370: PUSH
10371: LD_INT 14
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10380: LD_ADDR_OWVAR 37
10384: PUSH
10385: LD_VAR 0 18
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_VAR 0 18
10397: PPUSH
10398: CALL_OW 12
10402: ARRAY
10403: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10404: LD_VAR 0 9
10408: PUSH
10409: LD_VAR 0 14
10413: ARRAY
10414: PUSH
10415: LD_INT 29
10417: EQUAL
10418: PUSH
10419: LD_VAR 0 9
10423: PUSH
10424: LD_VAR 0 14
10428: ARRAY
10429: PUSH
10430: LD_INT 28
10432: EQUAL
10433: OR
10434: PUSH
10435: LD_VAR 0 9
10439: PUSH
10440: LD_VAR 0 14
10444: ARRAY
10445: PUSH
10446: LD_INT 27
10448: EQUAL
10449: OR
10450: PUSH
10451: LD_VAR 0 9
10455: PUSH
10456: LD_VAR 0 14
10460: ARRAY
10461: PUSH
10462: LD_INT 26
10464: EQUAL
10465: OR
10466: PUSH
10467: LD_VAR 0 9
10471: PUSH
10472: LD_VAR 0 14
10476: ARRAY
10477: PUSH
10478: LD_INT 25
10480: EQUAL
10481: OR
10482: IFFALSE 10523
// begin arChassisTab = [ 13 , 14 ] ;
10484: LD_ADDR_VAR 0 18
10488: PUSH
10489: LD_INT 13
10491: PUSH
10492: LD_INT 14
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10499: LD_ADDR_OWVAR 37
10503: PUSH
10504: LD_VAR 0 18
10508: PUSH
10509: LD_INT 1
10511: PPUSH
10512: LD_VAR 0 18
10516: PPUSH
10517: CALL_OW 12
10521: ARRAY
10522: ST_TO_ADDR
// end ; end ;
10523: GO 10290
10525: POP
10526: POP
// veh = CreateVehicle ;
10527: LD_ADDR_VAR 0 16
10531: PUSH
10532: CALL_OW 45
10536: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10537: LD_VAR 0 16
10541: PPUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_INT 0
10549: PPUSH
10550: CALL_OW 49
// if vehcontrol = 1 then
10554: LD_VAR 0 7
10558: PUSH
10559: LD_INT 1
10561: EQUAL
10562: IFFALSE 10619
// begin hc_gallery =  ;
10564: LD_ADDR_OWVAR 33
10568: PUSH
10569: LD_STRING 
10571: ST_TO_ADDR
// hc_name =  ;
10572: LD_ADDR_OWVAR 26
10576: PUSH
10577: LD_STRING 
10579: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10580: LD_INT 0
10582: PPUSH
10583: LD_INT 3
10585: PPUSH
10586: LD_VAR 0 4
10590: PPUSH
10591: CALL_OW 380
// un = CreateHuman ;
10595: LD_ADDR_VAR 0 15
10599: PUSH
10600: CALL_OW 44
10604: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10605: LD_VAR 0 15
10609: PPUSH
10610: LD_VAR 0 16
10614: PPUSH
10615: CALL_OW 52
// end ; i = i + 1 ;
10619: LD_ADDR_VAR 0 13
10623: PUSH
10624: LD_VAR 0 13
10628: PUSH
10629: LD_INT 1
10631: PLUS
10632: ST_TO_ADDR
// end ; if nation = 3 then
10633: LD_VAR 0 5
10637: PUSH
10638: LD_INT 3
10640: EQUAL
10641: IFFALSE 11033
// begin uc_side = side ;
10643: LD_ADDR_OWVAR 20
10647: PUSH
10648: LD_VAR 0 2
10652: ST_TO_ADDR
// uc_nation = nation ;
10653: LD_ADDR_OWVAR 21
10657: PUSH
10658: LD_VAR 0 5
10662: ST_TO_ADDR
// vc_engine = vehengine ;
10663: LD_ADDR_OWVAR 39
10667: PUSH
10668: LD_VAR 0 6
10672: ST_TO_ADDR
// vc_control = vehcontrol ;
10673: LD_ADDR_OWVAR 38
10677: PUSH
10678: LD_VAR 0 7
10682: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10683: LD_ADDR_OWVAR 40
10687: PUSH
10688: LD_VAR 0 8
10692: PUSH
10693: LD_INT 1
10695: PPUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: CALL_OW 12
10705: ARRAY
10706: ST_TO_ADDR
// for j = 1 to RuWeapons do
10707: LD_ADDR_VAR 0 14
10711: PUSH
10712: DOUBLE
10713: LD_INT 1
10715: DEC
10716: ST_TO_ADDR
10717: LD_VAR 0 8
10721: PUSH
10722: FOR_TO
10723: IFFALSE 10925
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10725: LD_VAR 0 8
10729: PUSH
10730: LD_VAR 0 14
10734: ARRAY
10735: PUSH
10736: LD_INT 42
10738: EQUAL
10739: PUSH
10740: LD_VAR 0 8
10744: PUSH
10745: LD_VAR 0 14
10749: ARRAY
10750: PUSH
10751: LD_INT 43
10753: EQUAL
10754: OR
10755: PUSH
10756: LD_VAR 0 8
10760: PUSH
10761: LD_VAR 0 14
10765: ARRAY
10766: PUSH
10767: LD_INT 44
10769: EQUAL
10770: OR
10771: PUSH
10772: LD_VAR 0 8
10776: PUSH
10777: LD_VAR 0 14
10781: ARRAY
10782: PUSH
10783: LD_INT 45
10785: EQUAL
10786: OR
10787: PUSH
10788: LD_VAR 0 8
10792: PUSH
10793: LD_VAR 0 14
10797: ARRAY
10798: PUSH
10799: LD_INT 49
10801: EQUAL
10802: OR
10803: IFFALSE 10852
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10805: LD_ADDR_VAR 0 17
10809: PUSH
10810: LD_INT 21
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 23
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10828: LD_ADDR_OWVAR 37
10832: PUSH
10833: LD_VAR 0 17
10837: PUSH
10838: LD_INT 1
10840: PPUSH
10841: LD_VAR 0 17
10845: PPUSH
10846: CALL_OW 12
10850: ARRAY
10851: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10852: LD_VAR 0 8
10856: PUSH
10857: LD_VAR 0 14
10861: ARRAY
10862: PUSH
10863: LD_INT 46
10865: EQUAL
10866: PUSH
10867: LD_VAR 0 8
10871: PUSH
10872: LD_VAR 0 14
10876: ARRAY
10877: PUSH
10878: LD_INT 47
10880: EQUAL
10881: OR
10882: IFFALSE 10923
// begin ruChassisTab = [ 23 , 24 ] ;
10884: LD_ADDR_VAR 0 17
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 24
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10899: LD_ADDR_OWVAR 37
10903: PUSH
10904: LD_VAR 0 17
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_VAR 0 17
10916: PPUSH
10917: CALL_OW 12
10921: ARRAY
10922: ST_TO_ADDR
// end ; end ;
10923: GO 10722
10925: POP
10926: POP
// veh = CreateVehicle ;
10927: LD_ADDR_VAR 0 16
10931: PUSH
10932: CALL_OW 45
10936: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10937: LD_VAR 0 16
10941: PPUSH
10942: LD_VAR 0 1
10946: PPUSH
10947: LD_INT 0
10949: PPUSH
10950: CALL_OW 49
// if vehcontrol = 1 then
10954: LD_VAR 0 7
10958: PUSH
10959: LD_INT 1
10961: EQUAL
10962: IFFALSE 11019
// begin hc_gallery =  ;
10964: LD_ADDR_OWVAR 33
10968: PUSH
10969: LD_STRING 
10971: ST_TO_ADDR
// hc_name =  ;
10972: LD_ADDR_OWVAR 26
10976: PUSH
10977: LD_STRING 
10979: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10980: LD_INT 0
10982: PPUSH
10983: LD_INT 3
10985: PPUSH
10986: LD_VAR 0 4
10990: PPUSH
10991: CALL_OW 380
// un = CreateHuman ;
10995: LD_ADDR_VAR 0 15
10999: PUSH
11000: CALL_OW 44
11004: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11005: LD_VAR 0 15
11009: PPUSH
11010: LD_VAR 0 16
11014: PPUSH
11015: CALL_OW 52
// end ; i = i + 1 ;
11019: LD_ADDR_VAR 0 13
11023: PUSH
11024: LD_VAR 0 13
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ST_TO_ADDR
// end ; until i = vehCount ;
11033: LD_VAR 0 13
11037: PUSH
11038: LD_VAR 0 3
11042: EQUAL
11043: IFFALSE 9695
// repeat wait ( 0 0$1 ) ;
11045: LD_INT 35
11047: PPUSH
11048: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11052: LD_INT 22
11054: PUSH
11055: LD_VAR 0 2
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 24
11076: PUSH
11077: LD_INT 250
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: LD_INT 58
11089: PUSH
11090: EMPTY
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 69
11107: PUSH
11108: LD_INT 0
11110: GREATER
11111: IFFALSE 11353
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11113: LD_ADDR_VAR 0 13
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_VAR 0 2
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 21
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 24
11142: PUSH
11143: LD_INT 250
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 3
11152: PUSH
11153: LD_INT 58
11155: PUSH
11156: EMPTY
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11351
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11177: LD_ADDR_VAR 0 21
11181: PUSH
11182: LD_INT 22
11184: PUSH
11185: LD_VAR 0 11
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: PPUSH
11199: LD_VAR 0 13
11203: PPUSH
11204: CALL_OW 74
11208: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11209: LD_ADDR_VAR 0 22
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 59
11231: PUSH
11232: EMPTY
11233: LIST
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 21
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: PPUSH
11273: LD_VAR 0 13
11277: PPUSH
11278: CALL_OW 74
11282: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11283: LD_VAR 0 13
11287: PPUSH
11288: LD_VAR 0 21
11292: PPUSH
11293: CALL_OW 296
11297: PUSH
11298: LD_INT 8
11300: PLUS
11301: PUSH
11302: LD_VAR 0 13
11306: PPUSH
11307: LD_VAR 0 22
11311: PPUSH
11312: CALL_OW 296
11316: LESS
11317: IFFALSE 11335
// begin ComAttackUnit ( i , target1 ) ;
11319: LD_VAR 0 13
11323: PPUSH
11324: LD_VAR 0 21
11328: PPUSH
11329: CALL_OW 115
// end else
11333: GO 11349
// begin ComAttackUnit ( i , target2 ) ;
11335: LD_VAR 0 13
11339: PPUSH
11340: LD_VAR 0 22
11344: PPUSH
11345: CALL_OW 115
// end ; end ;
11349: GO 11174
11351: POP
11352: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11353: LD_INT 22
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 24
11377: PUSH
11378: LD_INT 250
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: LD_INT 58
11390: PUSH
11391: EMPTY
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PPUSH
11404: CALL_OW 69
11408: PUSH
11409: LD_INT 0
11411: EQUAL
11412: IFFALSE 11045
// end ; end_of_file
11414: LD_VAR 0 12
11418: RET
// every 1 do var i , gammaSquad , startX , startY ;
11419: GO 11421
11421: DISABLE
11422: LD_INT 0
11424: PPUSH
11425: PPUSH
11426: PPUSH
11427: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: LD_EXP 8
11437: PUSH
11438: LD_EXP 9
11442: PUSH
11443: LD_EXP 10
11447: PUSH
11448: LD_EXP 11
11452: PUSH
11453: LD_EXP 12
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11465: LD_ADDR_VAR 0 3
11469: PUSH
11470: LD_INT 46
11472: PUSH
11473: LD_INT 45
11475: PUSH
11476: LD_INT 44
11478: PUSH
11479: LD_INT 43
11481: PUSH
11482: LD_INT 42
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_INT 14
11499: PUSH
11500: LD_INT 12
11502: PUSH
11503: LD_INT 10
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: LD_INT 6
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11519: LD_EXP 11
11523: PPUSH
11524: LD_INT 31
11526: PPUSH
11527: LD_INT 59
11529: PPUSH
11530: LD_INT 19
11532: PPUSH
11533: LD_INT 5
11535: PPUSH
11536: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11540: LD_INT 32
11542: PPUSH
11543: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11547: LD_INT 32
11549: PPUSH
11550: LD_INT 51
11552: PPUSH
11553: LD_INT 26
11555: PPUSH
11556: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11560: LD_INT 32
11562: PPUSH
11563: LD_INT 53
11565: PPUSH
11566: LD_INT 23
11568: PPUSH
11569: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11573: LD_INT 32
11575: PPUSH
11576: LD_INT 52
11578: PPUSH
11579: LD_INT 19
11581: PPUSH
11582: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11586: LD_INT 35
11588: PPUSH
11589: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11593: LD_INT 32
11595: PPUSH
11596: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11600: LD_INT 32
11602: PPUSH
11603: CALL_OW 250
11607: PUSH
11608: LD_INT 52
11610: EQUAL
11611: PUSH
11612: LD_INT 32
11614: PPUSH
11615: CALL_OW 251
11619: PUSH
11620: LD_INT 19
11622: EQUAL
11623: AND
11624: IFFALSE 11586
// ComExitVehicle ( JMM ) ;
11626: LD_EXP 1
11630: PPUSH
11631: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11635: LD_EXP 7
11639: PPUSH
11640: LD_EXP 1
11644: PPUSH
11645: CALL_OW 119
// wait ( 0 0$01 ) ;
11649: LD_INT 35
11651: PPUSH
11652: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11656: LD_EXP 1
11660: PPUSH
11661: LD_INT 46
11663: PPUSH
11664: LD_INT 10
11666: PPUSH
11667: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11671: LD_EXP 1
11675: PPUSH
11676: LD_EXP 7
11680: PPUSH
11681: CALL_OW 179
// wait ( 0 0$4 ) ;
11685: LD_INT 140
11687: PPUSH
11688: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11692: LD_EXP 1
11696: PPUSH
11697: LD_STRING D1-JMM-1
11699: PPUSH
11700: CALL_OW 88
// if not dialogue_skipped then
11704: LD_OWVAR 59
11708: NOT
11709: IFFALSE 12366
// begin for i := 1 to gammaSquad do
11711: LD_ADDR_VAR 0 1
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 2
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11788
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11729: LD_VAR 0 2
11733: PUSH
11734: LD_VAR 0 1
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 3
11744: PUSH
11745: LD_VAR 0 1
11749: ARRAY
11750: PPUSH
11751: LD_VAR 0 4
11755: PUSH
11756: LD_VAR 0 1
11760: ARRAY
11761: PPUSH
11762: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11766: LD_VAR 0 2
11770: PUSH
11771: LD_VAR 0 1
11775: ARRAY
11776: PPUSH
11777: LD_EXP 1
11781: PPUSH
11782: CALL_OW 179
// end ;
11786: GO 11726
11788: POP
11789: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11790: LD_EXP 4
11794: PPUSH
11795: LD_INT 41
11797: PPUSH
11798: LD_INT 4
11800: PPUSH
11801: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11805: LD_EXP 4
11809: PPUSH
11810: LD_EXP 1
11814: PPUSH
11815: CALL_OW 179
// if Lisa = false and Bobby then
11819: LD_EXP 4
11823: PUSH
11824: LD_INT 0
11826: EQUAL
11827: PUSH
11828: LD_EXP 2
11832: AND
11833: IFFALSE 11864
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11835: LD_EXP 2
11839: PPUSH
11840: LD_INT 41
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11850: LD_EXP 2
11854: PPUSH
11855: LD_EXP 1
11859: PPUSH
11860: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11864: LD_EXP 4
11868: PUSH
11869: LD_INT 0
11871: EQUAL
11872: PUSH
11873: LD_EXP 2
11877: PUSH
11878: LD_INT 0
11880: EQUAL
11881: AND
11882: PUSH
11883: LD_EXP 3
11887: AND
11888: IFFALSE 11919
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11890: LD_EXP 3
11894: PPUSH
11895: LD_INT 41
11897: PPUSH
11898: LD_INT 4
11900: PPUSH
11901: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11905: LD_EXP 3
11909: PPUSH
11910: LD_EXP 1
11914: PPUSH
11915: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11919: LD_EXP 4
11923: PUSH
11924: LD_INT 0
11926: EQUAL
11927: PUSH
11928: LD_EXP 2
11932: PUSH
11933: LD_INT 0
11935: EQUAL
11936: AND
11937: PUSH
11938: LD_EXP 3
11942: PUSH
11943: LD_INT 0
11945: EQUAL
11946: AND
11947: IFFALSE 11978
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11949: LD_EXP 6
11953: PPUSH
11954: LD_INT 41
11956: PPUSH
11957: LD_INT 4
11959: PPUSH
11960: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11964: LD_EXP 6
11968: PPUSH
11969: LD_EXP 1
11973: PPUSH
11974: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11978: LD_EXP 7
11982: PPUSH
11983: LD_STRING D1-Brown-1
11985: PPUSH
11986: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11990: LD_EXP 1
11994: PPUSH
11995: LD_STRING D1-JMM-2
11997: PPUSH
11998: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12002: LD_EXP 7
12006: PPUSH
12007: LD_STRING D1-Brown-2
12009: PPUSH
12010: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12014: LD_EXP 1
12018: PPUSH
12019: LD_EXP 9
12023: PPUSH
12024: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12028: LD_EXP 9
12032: PPUSH
12033: LD_STRING D1-FSol1-2
12035: PPUSH
12036: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12040: LD_EXP 1
12044: PPUSH
12045: LD_EXP 8
12049: PPUSH
12050: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12054: LD_EXP 8
12058: PPUSH
12059: LD_STRING D1-Sol2-2
12061: PPUSH
12062: CALL_OW 88
// if Lisa then
12066: LD_EXP 4
12070: IFFALSE 12110
// begin ComTurnUnit ( JMM , Lisa ) ;
12072: LD_EXP 1
12076: PPUSH
12077: LD_EXP 4
12081: PPUSH
12082: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12086: LD_EXP 4
12090: PPUSH
12091: LD_STRING D1-Lisa-2
12093: PPUSH
12094: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12098: LD_EXP 1
12102: PPUSH
12103: LD_STRING D1-JMM-3
12105: PPUSH
12106: CALL_OW 88
// end ; if Bobby then
12110: LD_EXP 2
12114: IFFALSE 12154
// begin ComTurnUnit ( JMM , Bobby ) ;
12116: LD_EXP 1
12120: PPUSH
12121: LD_EXP 2
12125: PPUSH
12126: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12130: LD_EXP 2
12134: PPUSH
12135: LD_STRING D1-Bobby-2
12137: PPUSH
12138: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12142: LD_EXP 1
12146: PPUSH
12147: LD_STRING D1-JMM-3
12149: PPUSH
12150: CALL_OW 88
// end ; if Cyrus then
12154: LD_EXP 3
12158: IFFALSE 12198
// begin ComTurnUnit ( JMM , Cyrus ) ;
12160: LD_EXP 1
12164: PPUSH
12165: LD_EXP 3
12169: PPUSH
12170: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12174: LD_EXP 3
12178: PPUSH
12179: LD_STRING D1-Cyrus-2
12181: PPUSH
12182: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12186: LD_EXP 1
12190: PPUSH
12191: LD_STRING D1-JMM-3
12193: PPUSH
12194: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12198: LD_EXP 1
12202: PPUSH
12203: LD_EXP 7
12207: PPUSH
12208: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12212: LD_EXP 1
12216: PPUSH
12217: LD_STRING D1-JMM-3a
12219: PPUSH
12220: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12224: LD_EXP 7
12228: PPUSH
12229: LD_INT 38
12231: PPUSH
12232: LD_INT 5
12234: PPUSH
12235: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12239: LD_EXP 7
12243: PPUSH
12244: LD_EXP 1
12248: PPUSH
12249: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12253: LD_EXP 1
12257: PPUSH
12258: LD_INT 40
12260: PPUSH
12261: LD_INT 7
12263: PPUSH
12264: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12268: LD_EXP 1
12272: PPUSH
12273: LD_EXP 7
12277: PPUSH
12278: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12282: LD_EXP 7
12286: PPUSH
12287: LD_STRING D1-Brown-3
12289: PPUSH
12290: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12294: LD_EXP 14
12298: PPUSH
12299: LD_STRING D1-Har-3
12301: PPUSH
12302: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12306: LD_EXP 1
12310: PPUSH
12311: LD_STRING D1-JMM-4
12313: PPUSH
12314: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12318: LD_EXP 14
12322: PPUSH
12323: LD_STRING D1-Har-4
12325: PPUSH
12326: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12330: LD_EXP 1
12334: PPUSH
12335: LD_STRING D1-JMM-5
12337: PPUSH
12338: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12342: LD_EXP 14
12346: PPUSH
12347: LD_STRING D1-Har-5
12349: PPUSH
12350: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12354: LD_EXP 1
12358: PPUSH
12359: LD_STRING D1-JMM-6
12361: PPUSH
12362: CALL_OW 88
// end ; InGameOff ;
12366: CALL_OW 9
// PrepareRussianConvoy ;
12370: CALL 3386 0 0
// ChangeMissionObjectives ( M1 ) ;
12374: LD_STRING M1
12376: PPUSH
12377: CALL_OW 337
// SaveForQuickRestart ;
12381: CALL_OW 22
// timerStatus = 1 ;
12385: LD_ADDR_EXP 29
12389: PUSH
12390: LD_INT 1
12392: ST_TO_ADDR
// startTimer = 1 ;
12393: LD_ADDR_EXP 30
12397: PUSH
12398: LD_INT 1
12400: ST_TO_ADDR
// bonusAvalaible = 1 ;
12401: LD_ADDR_EXP 44
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12409: LD_INT 105
12411: PPUSH
12412: CALL_OW 67
// DialogueOn ;
12416: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12420: LD_EXP 12
12424: PPUSH
12425: LD_STRING D9-Mech1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING D9-JMM-1
12439: PPUSH
12440: CALL_OW 88
// DialogueOff ;
12444: CALL_OW 7
// end ;
12448: PPOPN 4
12450: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12451: LD_INT 47
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 321
12461: PUSH
12462: LD_INT 2
12464: EQUAL
12465: PUSH
12466: LD_EXP 31
12470: NOT
12471: AND
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 21
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 57
12505: PUSH
12506: EMPTY
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: PUSH
12520: LD_INT 0
12522: GREATER
12523: AND
12524: IFFALSE 12762
12526: GO 12528
12528: DISABLE
// begin factoryDialog := true ;
12529: LD_ADDR_EXP 31
12533: PUSH
12534: LD_INT 1
12536: ST_TO_ADDR
// if IsOk ( Campell ) then
12537: LD_EXP 12
12541: PPUSH
12542: CALL_OW 302
12546: IFFALSE 12562
// begin Say ( Campell , D10-Mech1-1 ) ;
12548: LD_EXP 12
12552: PPUSH
12553: LD_STRING D10-Mech1-1
12555: PPUSH
12556: CALL_OW 88
// end else
12560: GO 12762
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12562: LD_INT 22
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 25
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 26
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PUSH
12613: LD_EXP 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: PUSH
12621: LD_INT 0
12623: GREATER
12624: DIFF
12625: IFFALSE 12699
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12627: LD_INT 22
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 25
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 26
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: PUSH
12678: LD_EXP 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: DIFF
12686: PPUSH
12687: LD_STRING D10-Mech1-1
12689: PPUSH
12690: LD_STRING D10-Mech1-1
12692: PPUSH
12693: CALL 4581 0 3
// end else
12697: GO 12762
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 26
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 1
12736: ARRAY
12737: PPUSH
12738: CALL_OW 69
12742: PUSH
12743: LD_EXP 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: DIFF
12751: PPUSH
12752: LD_STRING D10-Mech1-1
12754: PPUSH
12755: LD_STRING D10-Mech1-1
12757: PPUSH
12758: CALL 4581 0 3
// end ; end ; end ;
12762: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12763: LD_INT 22
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 30
12775: PUSH
12776: LD_INT 32
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: PUSH
12792: LD_INT 0
12794: GREATER
12795: PUSH
12796: LD_EXP 32
12800: PUSH
12801: LD_INT 0
12803: EQUAL
12804: AND
12805: IFFALSE 13045
12807: GO 12809
12809: DISABLE
// begin if IsOK ( Claptopn ) then
12810: LD_EXP 11
12814: PPUSH
12815: CALL_OW 302
12819: IFFALSE 12835
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12821: LD_EXP 11
12825: PPUSH
12826: LD_STRING D9b-Eng1-1
12828: PPUSH
12829: CALL_OW 88
// end else
12833: GO 13031
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12835: LD_INT 22
12837: PUSH
12838: LD_INT 1
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 1
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: LD_INT 3
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 26
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PUSH
12886: LD_EXP 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: PUSH
12894: LD_INT 0
12896: GREATER
12897: DIFF
12898: IFFALSE 12972
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12900: LD_INT 22
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 21
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 26
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: PUSH
12951: LD_EXP 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: DIFF
12959: PPUSH
12960: LD_STRING D9b-Eng1-1
12962: PPUSH
12963: LD_STRING D9b-Eng1-11
12965: PPUSH
12966: CALL 4581 0 3
// end else
12970: GO 13031
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12972: LD_INT 22
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 21
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: PUSH
13012: LD_EXP 1
13016: PUSH
13017: EMPTY
13018: LIST
13019: DIFF
13020: PPUSH
13021: LD_STRING D9b-Eng1-1
13023: PPUSH
13024: LD_STRING D9b-Eng1-1
13026: PPUSH
13027: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
13031: LD_EXP 33
13035: PUSH
13036: LD_INT 0
13038: EQUAL
13039: IFFALSE 13045
// EnergyDialog ;
13041: CALL 4984 0 0
// end ;
13045: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13046: LD_EXP 34
13050: PUSH
13051: LD_INT 1
13053: EQUAL
13054: PUSH
13055: LD_EXP 35
13059: PUSH
13060: LD_INT 1
13062: EQUAL
13063: AND
13064: IFFALSE 13076
13066: GO 13068
13068: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13069: LD_STRING M1a
13071: PPUSH
13072: CALL_OW 337
13076: END
// every 3 3$0 do
13077: GO 13079
13079: DISABLE
// begin PrepareFirstAttack ;
13080: CALL 4186 0 0
// end ;
13084: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13085: LD_INT 22
13087: PUSH
13088: LD_INT 5
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 21
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 3
13107: PUSH
13108: LD_INT 24
13110: PUSH
13111: LD_INT 250
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 69
13131: PUSH
13132: LD_INT 0
13134: GREATER
13135: PUSH
13136: LD_EXP 23
13140: PUSH
13141: LD_INT 1
13143: EQUAL
13144: AND
13145: IFFALSE 13446
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
// begin firstRussianAttack = 2 ;
13153: LD_ADDR_EXP 23
13157: PUSH
13158: LD_INT 2
13160: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13161: LD_INT 22
13163: PUSH
13164: LD_INT 5
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 21
13173: PUSH
13174: LD_INT 1
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PPUSH
13190: LD_INT 125
13192: PPUSH
13193: LD_INT 98
13195: PPUSH
13196: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13200: LD_INT 22
13202: PUSH
13203: LD_INT 1
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 21
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: PUSH
13229: LD_EXP 1
13233: PUSH
13234: LD_EXP 7
13238: PUSH
13239: LD_EXP 4
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: DIFF
13249: PPUSH
13250: LD_STRING DAtt1-Sol1-1
13252: PPUSH
13253: LD_STRING DAtt1-FSol1-1
13255: PPUSH
13256: CALL 4581 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13260: LD_EXP 1
13264: PPUSH
13265: LD_STRING DAtt1-JMM-1
13267: PPUSH
13268: CALL_OW 88
// if Lisa then
13272: LD_EXP 4
13276: IFFALSE 13292
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13278: LD_EXP 4
13282: PPUSH
13283: LD_STRING DAtt1a-Lisa-1
13285: PPUSH
13286: CALL_OW 88
// end else
13290: GO 13363
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13292: LD_INT 22
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 26
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PUSH
13332: LD_EXP 1
13336: PUSH
13337: LD_EXP 7
13341: PUSH
13342: LD_EXP 4
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: DIFF
13352: PPUSH
13353: LD_STRING DAtt1a-Sol1-1
13355: PPUSH
13356: LD_STRING DAtt1-FSol1-1
13358: PPUSH
13359: CALL 4581 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13363: LD_EXP 1
13367: PPUSH
13368: LD_STRING DAtt1a-JMM-1
13370: PPUSH
13371: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13375: LD_INT 22
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: PUSH
13415: LD_EXP 1
13419: PUSH
13420: LD_EXP 7
13424: PUSH
13425: LD_EXP 4
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: DIFF
13435: PPUSH
13436: LD_STRING DAtt1b-Sol1-1
13438: PPUSH
13439: LD_STRING DAtt1a-Sol1-1
13441: PPUSH
13442: CALL 4581 0 3
// end ;
13446: PPOPN 1
13448: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13449: LD_EXP 23
13453: PUSH
13454: LD_INT 2
13456: EQUAL
13457: IFFALSE 13519
13459: GO 13461
13461: DISABLE
13462: LD_INT 0
13464: PPUSH
// begin enable ;
13465: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: LD_INT 5
13473: PPUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 70
13502: PUSH
13503: FOR_IN
13504: IFFALSE 13517
// RemoveUnit ( i ) ;
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 64
13515: GO 13503
13517: POP
13518: POP
// end ;
13519: PPOPN 1
13521: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13522: LD_INT 22
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: PPUSH
13535: CALL_OW 69
13539: PUSH
13540: LD_INT 0
13542: EQUAL
13543: PUSH
13544: LD_EXP 23
13548: PUSH
13549: LD_INT 2
13551: EQUAL
13552: AND
13553: IFFALSE 13566
13555: GO 13557
13557: DISABLE
// firstRussianAttack = 3 ;
13558: LD_ADDR_EXP 23
13562: PUSH
13563: LD_INT 3
13565: ST_TO_ADDR
13566: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13567: LD_EXP 28
13571: PUSH
13572: LD_INT 0
13574: EQUAL
13575: IFFALSE 13656
13577: GO 13579
13579: DISABLE
// begin timerStatus = 4 ;
13580: LD_ADDR_EXP 29
13584: PUSH
13585: LD_INT 4
13587: ST_TO_ADDR
// DialogueOn ;
13588: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13592: LD_EXP 13
13596: PPUSH
13597: LD_STRING D2-Don-1
13599: PPUSH
13600: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13604: LD_EXP 1
13608: PPUSH
13609: LD_STRING D2-JMM-1
13611: PPUSH
13612: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13616: LD_EXP 13
13620: PPUSH
13621: LD_STRING D2-Don-2
13623: PPUSH
13624: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13628: LD_EXP 1
13632: PPUSH
13633: LD_STRING D2-JMM-2
13635: PPUSH
13636: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13640: LD_EXP 13
13644: PPUSH
13645: LD_STRING D2-Don-3
13647: PPUSH
13648: CALL_OW 94
// DialogueOff ;
13652: CALL_OW 7
// end ;
13656: END
// every 12 12$0 do var tmp ;
13657: GO 13659
13659: DISABLE
13660: LD_INT 0
13662: PPUSH
// begin PrepareDonaldsonArmy ;
13663: CALL 1177 0 0
// CenterNowOnUnits ( Donaldson ) ;
13667: LD_EXP 13
13671: PPUSH
13672: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13676: LD_INT 22
13678: PUSH
13679: LD_INT 6
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: NOT
13691: IFFALSE 13707
// begin wait ( 3 ) ;
13693: LD_INT 3
13695: PPUSH
13696: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13700: LD_STRING ACH_BASE
13702: PPUSH
13703: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 21
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 26
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 25
13744: PUSH
13745: LD_INT 1
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: PUSH
13763: LD_EXP 5
13767: PUSH
13768: EMPTY
13769: LIST
13770: DIFF
13771: ST_TO_ADDR
// DialogueOn ;
13772: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_STRING D3-Sol1-1
13783: PPUSH
13784: LD_STRING D3-Sol1-1
13786: PPUSH
13787: CALL 4581 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13791: LD_INT 22
13793: PUSH
13794: LD_INT 4
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 26
13813: PUSH
13814: LD_INT 1
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 25
13823: PUSH
13824: LD_INT 3
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: PPUSH
13842: LD_STRING D3-Sol2-1
13844: PPUSH
13845: LD_STRING D3-Sol2-1
13847: PPUSH
13848: CALL 4581 0 3
// if Frank then
13852: LD_EXP 5
13856: IFFALSE 13870
// Say ( Frank , D3-Frank-1 ) ;
13858: LD_EXP 5
13862: PPUSH
13863: LD_STRING D3-Frank-1
13865: PPUSH
13866: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13870: LD_EXP 13
13874: PPUSH
13875: LD_STRING D3-Don-1
13877: PPUSH
13878: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13882: LD_EXP 13
13886: PPUSH
13887: LD_STRING D3-Don-1a
13889: PPUSH
13890: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13894: LD_EXP 1
13898: PPUSH
13899: LD_STRING D3-JMM-1
13901: PPUSH
13902: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13906: LD_EXP 13
13910: PPUSH
13911: LD_STRING D3-Don-2
13913: PPUSH
13914: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13918: LD_INT 22
13920: PUSH
13921: LD_INT 6
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 21
13930: PUSH
13931: LD_INT 1
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 69
13946: PUSH
13947: LD_INT 0
13949: GREATER
13950: IFFALSE 14088
// begin Say ( JMM , D3-JMM-2 ) ;
13952: LD_EXP 1
13956: PPUSH
13957: LD_STRING D3-JMM-2
13959: PPUSH
13960: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13964: LD_EXP 13
13968: PPUSH
13969: LD_STRING D3-Don-3
13971: PPUSH
13972: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13976: LD_EXP 1
13980: PPUSH
13981: LD_STRING D3-JMM-3
13983: PPUSH
13984: CALL_OW 88
// if IsOK ( Frank ) then
13988: LD_EXP 5
13992: PPUSH
13993: CALL_OW 302
13997: IFFALSE 14011
// Say ( Frank , D3-Frank-3 ) ;
13999: LD_EXP 5
14003: PPUSH
14004: LD_STRING D3-Frank-3
14006: PPUSH
14007: CALL_OW 88
// DialogueOff ;
14011: CALL_OW 7
// if IsOK ( Frank ) then
14015: LD_EXP 5
14019: PPUSH
14020: CALL_OW 302
14024: IFFALSE 14086
// begin SetSide ( Frank , 0 ) ;
14026: LD_EXP 5
14030: PPUSH
14031: LD_INT 0
14033: PPUSH
14034: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14038: LD_EXP 5
14042: PPUSH
14043: LD_INT 12
14045: PPUSH
14046: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14050: LD_EXP 5
14054: PPUSH
14055: LD_STRING 04t_Frank
14057: PPUSH
14058: CALL_OW 38
// Wait ( 0 0$3 ) ;
14062: LD_INT 105
14064: PPUSH
14065: CALL_OW 67
// frankScoutBase = 1 ;
14069: LD_ADDR_EXP 25
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14077: LD_EXP 5
14081: PPUSH
14082: CALL_OW 64
// end ; end else
14086: GO 14175
// begin Say ( JMM , D3-JMM-4 ) ;
14088: LD_EXP 1
14092: PPUSH
14093: LD_STRING D3-JMM-4
14095: PPUSH
14096: CALL_OW 88
// DialogueOff ;
14100: CALL_OW 7
// if IsOK ( Frank ) then
14104: LD_EXP 5
14108: PPUSH
14109: CALL_OW 302
14113: IFFALSE 14175
// begin SetSide ( Frank , 0 ) ;
14115: LD_EXP 5
14119: PPUSH
14120: LD_INT 0
14122: PPUSH
14123: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14127: LD_EXP 5
14131: PPUSH
14132: LD_INT 12
14134: PPUSH
14135: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14139: LD_EXP 5
14143: PPUSH
14144: LD_STRING 04t_Frank
14146: PPUSH
14147: CALL_OW 38
// Wait ( 0 0$3 ) ;
14151: LD_INT 105
14153: PPUSH
14154: CALL_OW 67
// frankScoutBase = 1 ;
14158: LD_ADDR_EXP 25
14162: PUSH
14163: LD_INT 1
14165: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14166: LD_EXP 5
14170: PPUSH
14171: CALL_OW 64
// end ; end ; end ;
14175: PPOPN 1
14177: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14178: LD_EXP 13
14182: PPUSH
14183: CALL_OW 255
14187: PUSH
14188: LD_INT 4
14190: EQUAL
14191: PUSH
14192: LD_EXP 13
14196: PPUSH
14197: CALL_OW 302
14201: AND
14202: IFFALSE 14371
14204: GO 14206
14206: DISABLE
14207: LD_INT 0
14209: PPUSH
14210: PPUSH
// begin wait ( 5 5$00 ) ;
14211: LD_INT 10500
14213: PPUSH
14214: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
14218: LD_EXP 13
14222: PPUSH
14223: CALL_OW 255
14227: PUSH
14228: LD_INT 1
14230: EQUAL
14231: PUSH
14232: LD_EXP 13
14236: PPUSH
14237: CALL_OW 301
14241: OR
14242: IFFALSE 14246
// exit ;
14244: GO 14371
// SayRadio ( Donaldson , D3b-Don-1 ) ;
14246: LD_EXP 13
14250: PPUSH
14251: LD_STRING D3b-Don-1
14253: PPUSH
14254: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14258: LD_ADDR_EXP 41
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14266: LD_ADDR_VAR 0 2
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 4
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14286: LD_INT 35
14288: PPUSH
14289: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14293: LD_VAR 0 2
14297: NOT
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 101
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: OR
14328: IFFALSE 14286
// if not tmp then
14330: LD_VAR 0 2
14334: NOT
14335: IFFALSE 14339
// exit ;
14337: GO 14371
// for i in tmp do
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_VAR 0 2
14348: PUSH
14349: FOR_IN
14350: IFFALSE 14369
// ComAgressiveMove ( i , 52 , 64 ) ;
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_INT 52
14359: PPUSH
14360: LD_INT 64
14362: PPUSH
14363: CALL_OW 114
14367: GO 14349
14369: POP
14370: POP
// end ;
14371: PPOPN 2
14373: END
// every 0 0$1 trigger not saveDonaldson and FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) do var i ;
14374: LD_EXP 24
14378: NOT
14379: PUSH
14380: LD_INT 26
14382: PPUSH
14383: LD_INT 22
14385: PUSH
14386: LD_INT 1
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 70
14397: AND
14398: IFFALSE 14453
14400: GO 14402
14402: DISABLE
14403: LD_INT 0
14405: PPUSH
// begin saveDonaldson := 1 ;
14406: LD_ADDR_EXP 24
14410: PUSH
14411: LD_INT 1
14413: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 4
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PPUSH
14429: CALL_OW 69
14433: PUSH
14434: FOR_IN
14435: IFFALSE 14451
// SetSide ( i , 1 ) ;
14437: LD_VAR 0 1
14441: PPUSH
14442: LD_INT 1
14444: PPUSH
14445: CALL_OW 235
14449: GO 14434
14451: POP
14452: POP
// end ;
14453: PPOPN 1
14455: END
// every 0 0$1 trigger frankScoutBase do
14456: LD_EXP 25
14460: IFFALSE 14825
14462: GO 14464
14464: DISABLE
// begin wait ( 2 2$30 ) ;
14465: LD_INT 5250
14467: PPUSH
14468: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14472: LD_INT 35
14474: PPUSH
14475: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14479: LD_INT 81
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 92
14491: PUSH
14492: LD_INT 84
14494: PUSH
14495: LD_INT 28
14497: PUSH
14498: LD_INT 22
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: NOT
14516: IFFALSE 14472
// uc_side = 4 ;
14518: LD_ADDR_OWVAR 20
14522: PUSH
14523: LD_INT 4
14525: ST_TO_ADDR
// uc_nation = 1 ;
14526: LD_ADDR_OWVAR 21
14530: PUSH
14531: LD_INT 1
14533: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14534: LD_ADDR_EXP 5
14538: PUSH
14539: LD_STRING 04t_Frank
14541: PPUSH
14542: CALL_OW 34
14546: ST_TO_ADDR
// if not Frank then
14547: LD_EXP 5
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14825
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14556: LD_EXP 5
14560: PPUSH
14561: LD_INT 13
14563: PPUSH
14564: LD_INT 0
14566: PPUSH
14567: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14571: LD_INT 35
14573: PPUSH
14574: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14578: LD_EXP 1
14582: PPUSH
14583: CALL_OW 310
14587: NOT
14588: PUSH
14589: LD_EXP 1
14593: PPUSH
14594: LD_INT 4
14596: PPUSH
14597: CALL_OW 296
14601: PUSH
14602: LD_INT 20
14604: LESS
14605: AND
14606: IFFALSE 14639
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14608: LD_EXP 5
14612: PPUSH
14613: LD_EXP 1
14617: PPUSH
14618: CALL_OW 250
14622: PPUSH
14623: LD_EXP 1
14627: PPUSH
14628: CALL_OW 251
14632: PPUSH
14633: CALL_OW 111
14637: GO 14654
// ComMoveXY ( Frank , 51 , 15 ) ;
14639: LD_EXP 5
14643: PPUSH
14644: LD_INT 51
14646: PPUSH
14647: LD_INT 15
14649: PPUSH
14650: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14654: LD_EXP 5
14658: PPUSH
14659: LD_EXP 1
14663: PPUSH
14664: CALL_OW 296
14668: PUSH
14669: LD_INT 10
14671: LESS
14672: IFFALSE 14571
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14674: LD_EXP 1
14678: PUSH
14679: LD_EXP 5
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 87
// DialogueOn ;
14692: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14696: LD_EXP 5
14700: PPUSH
14701: LD_STRING D3a-Frank-1
14703: PPUSH
14704: CALL_OW 88
// if Lisa then
14708: LD_EXP 4
14712: IFFALSE 14762
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14714: LD_EXP 4
14718: PPUSH
14719: LD_STRING D3a-Lisa-1
14721: PPUSH
14722: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14726: LD_EXP 5
14730: PPUSH
14731: LD_STRING D3a-Frank-2
14733: PPUSH
14734: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14738: LD_EXP 4
14742: PPUSH
14743: LD_STRING D3a-Lisa-2
14745: PPUSH
14746: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14750: LD_EXP 5
14754: PPUSH
14755: LD_STRING D3a-Frank-3
14757: PPUSH
14758: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14762: LD_EXP 1
14766: PPUSH
14767: LD_STRING D3a-JMM-3
14769: PPUSH
14770: CALL_OW 88
// DialogueOff ;
14774: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14778: LD_EXP 5
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 235
// InGameOn ;
14790: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14794: LD_INT 1
14796: PPUSH
14797: LD_INT 7
14799: PPUSH
14800: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14804: LD_INT 93
14806: PPUSH
14807: LD_INT 91
14809: PPUSH
14810: CALL_OW 84
// wait ( 0 0$5 ) ;
14814: LD_INT 175
14816: PPUSH
14817: CALL_OW 67
// InGameOff ;
14821: CALL_OW 9
// end ;
14825: END
// every 12 12$0 trigger Difficulty > 1 do
14826: LD_OWVAR 67
14830: PUSH
14831: LD_INT 1
14833: GREATER
14834: IFFALSE 14858
14836: GO 14838
14838: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14839: LD_INT 24
14841: PPUSH
14842: LD_INT 24
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: LD_INT 53
14853: PPUSH
14854: CALL_OW 185
14858: END
// every 18 18$0 do
14859: GO 14861
14861: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14862: LD_EXP 14
14866: PPUSH
14867: LD_STRING D4-Har-1
14869: PPUSH
14870: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14874: LD_EXP 1
14878: PPUSH
14879: LD_STRING D4-JMM-1
14881: PPUSH
14882: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14886: LD_EXP 14
14890: PPUSH
14891: LD_STRING D4-Har-2
14893: PPUSH
14894: CALL_OW 94
// case query ( Q1 ) of 1 :
14898: LD_STRING Q1
14900: PPUSH
14901: CALL_OW 97
14905: PUSH
14906: LD_INT 1
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 14973
14914: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14915: LD_EXP 1
14919: PPUSH
14920: LD_STRING D5-JMM-1
14922: PPUSH
14923: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14927: LD_EXP 14
14931: PPUSH
14932: LD_STRING D5-Har-1
14934: PPUSH
14935: CALL_OW 94
// timeToSupport = 10 10$0 ;
14939: LD_ADDR_EXP 28
14943: PUSH
14944: LD_INT 21000
14946: ST_TO_ADDR
// timerStatus = 2 ;
14947: LD_ADDR_EXP 29
14951: PUSH
14952: LD_INT 2
14954: ST_TO_ADDR
// startTimer = 1 ;
14955: LD_ADDR_EXP 30
14959: PUSH
14960: LD_INT 1
14962: ST_TO_ADDR
// harrAnswer = 1 ;
14963: LD_ADDR_EXP 26
14967: PUSH
14968: LD_INT 1
14970: ST_TO_ADDR
// end ; 2 :
14971: GO 15108
14973: LD_INT 2
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15040
14981: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14982: LD_EXP 1
14986: PPUSH
14987: LD_STRING D5-JMM-2
14989: PPUSH
14990: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14994: LD_EXP 14
14998: PPUSH
14999: LD_STRING D5-Har-2
15001: PPUSH
15002: CALL_OW 94
// timeToSupport = 5 5$0 ;
15006: LD_ADDR_EXP 28
15010: PUSH
15011: LD_INT 10500
15013: ST_TO_ADDR
// timerStatus = 2 ;
15014: LD_ADDR_EXP 29
15018: PUSH
15019: LD_INT 2
15021: ST_TO_ADDR
// startTimer = 1 ;
15022: LD_ADDR_EXP 30
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// harrAnswer = 2 ;
15030: LD_ADDR_EXP 26
15034: PUSH
15035: LD_INT 2
15037: ST_TO_ADDR
// end ; 3 :
15038: GO 15108
15040: LD_INT 3
15042: DOUBLE
15043: EQUAL
15044: IFTRUE 15048
15046: GO 15107
15048: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15049: LD_EXP 1
15053: PPUSH
15054: LD_STRING D5-JMM-3
15056: PPUSH
15057: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15061: LD_EXP 14
15065: PPUSH
15066: LD_STRING D5-Har-3
15068: PPUSH
15069: CALL_OW 94
// timeToSupport = 5 5$0 ;
15073: LD_ADDR_EXP 28
15077: PUSH
15078: LD_INT 10500
15080: ST_TO_ADDR
// timerStatus = 2 ;
15081: LD_ADDR_EXP 29
15085: PUSH
15086: LD_INT 2
15088: ST_TO_ADDR
// startTimer = 1 ;
15089: LD_ADDR_EXP 30
15093: PUSH
15094: LD_INT 1
15096: ST_TO_ADDR
// harrAnswer = 3 ;
15097: LD_ADDR_EXP 26
15101: PUSH
15102: LD_INT 3
15104: ST_TO_ADDR
// end ; end ;
15105: GO 15108
15107: POP
// end ;
15108: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15109: LD_EXP 29
15113: PUSH
15114: LD_INT 2
15116: EQUAL
15117: PUSH
15118: LD_EXP 28
15122: PUSH
15123: LD_INT 0
15125: EQUAL
15126: AND
15127: IFFALSE 15404
15129: GO 15131
15131: DISABLE
// begin timerStatus = 4 ;
15132: LD_ADDR_EXP 29
15136: PUSH
15137: LD_INT 4
15139: ST_TO_ADDR
// if harrAnswer = 1 then
15140: LD_EXP 26
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: IFFALSE 15228
// begin PrepareHarrisonSupport ( 3 ) ;
15150: LD_INT 3
15152: PPUSH
15153: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15157: LD_INT 2100
15159: PPUSH
15160: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15164: LD_EXP 14
15168: PPUSH
15169: LD_STRING D7-Har-1
15171: PPUSH
15172: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15176: LD_STRING M2
15178: PPUSH
15179: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15183: LD_ADDR_EXP 27
15187: PUSH
15188: LD_INT 31500
15190: PUSH
15191: LD_INT 10500
15193: PUSH
15194: LD_INT 8400
15196: PUSH
15197: LD_INT 6300
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: LD_OWVAR 67
15209: ARRAY
15210: PLUS
15211: ST_TO_ADDR
// startTimer = 1 ;
15212: LD_ADDR_EXP 30
15216: PUSH
15217: LD_INT 1
15219: ST_TO_ADDR
// timerStatus = 3 ;
15220: LD_ADDR_EXP 29
15224: PUSH
15225: LD_INT 3
15227: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15228: LD_EXP 26
15232: PUSH
15233: LD_INT 2
15235: EQUAL
15236: IFFALSE 15316
// begin PrepareHarrisonSupport ( 4 ) ;
15238: LD_INT 4
15240: PPUSH
15241: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15245: LD_INT 2100
15247: PPUSH
15248: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15252: LD_EXP 14
15256: PPUSH
15257: LD_STRING D7-Har-1
15259: PPUSH
15260: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15264: LD_STRING M2
15266: PPUSH
15267: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15271: LD_ADDR_EXP 27
15275: PUSH
15276: LD_INT 33600
15278: PUSH
15279: LD_INT 10500
15281: PUSH
15282: LD_INT 8400
15284: PUSH
15285: LD_INT 6300
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PUSH
15293: LD_OWVAR 67
15297: ARRAY
15298: PLUS
15299: ST_TO_ADDR
// startTimer = 1 ;
15300: LD_ADDR_EXP 30
15304: PUSH
15305: LD_INT 1
15307: ST_TO_ADDR
// timerStatus = 3 ;
15308: LD_ADDR_EXP 29
15312: PUSH
15313: LD_INT 3
15315: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15316: LD_EXP 26
15320: PUSH
15321: LD_INT 3
15323: EQUAL
15324: IFFALSE 15404
// begin PrepareHarrisonSupport ( 5 ) ;
15326: LD_INT 5
15328: PPUSH
15329: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15333: LD_INT 2100
15335: PPUSH
15336: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15340: LD_EXP 14
15344: PPUSH
15345: LD_STRING D7-Har-1
15347: PPUSH
15348: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15352: LD_STRING M2
15354: PPUSH
15355: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15359: LD_ADDR_EXP 27
15363: PUSH
15364: LD_INT 35700
15366: PUSH
15367: LD_INT 10500
15369: PUSH
15370: LD_INT 6300
15372: PUSH
15373: LD_INT 4200
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: LD_OWVAR 67
15385: ARRAY
15386: PLUS
15387: ST_TO_ADDR
// startTimer = 1 ;
15388: LD_ADDR_EXP 30
15392: PUSH
15393: LD_INT 1
15395: ST_TO_ADDR
// timerStatus = 3 ;
15396: LD_ADDR_EXP 29
15400: PUSH
15401: LD_INT 3
15403: ST_TO_ADDR
// end ; end ;
15404: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15405: LD_EXP 27
15409: PUSH
15410: LD_INT 8400
15412: LESSEQUAL
15413: PUSH
15414: LD_EXP 29
15418: PUSH
15419: LD_INT 3
15421: EQUAL
15422: AND
15423: IFFALSE 15455
15425: GO 15427
15427: DISABLE
// begin DialogueOn ;
15428: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15432: LD_EXP 14
15436: PPUSH
15437: LD_STRING D7a-Har-1
15439: PPUSH
15440: CALL_OW 94
// DialogueOff ;
15444: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15448: LD_STRING M2a
15450: PPUSH
15451: CALL_OW 337
// end ;
15455: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15456: LD_EXP 27
15460: PUSH
15461: LD_INT 0
15463: LESSEQUAL
15464: PUSH
15465: LD_EXP 29
15469: PUSH
15470: LD_INT 3
15472: EQUAL
15473: AND
15474: PUSH
15475: LD_EXP 40
15479: NOT
15480: AND
15481: IFFALSE 15620
15483: GO 15485
15485: DISABLE
15486: LD_INT 0
15488: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PUSH
15509: LD_EXP 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: DIFF
15517: ST_TO_ADDR
// saveDonaldson = 2 ;
15518: LD_ADDR_EXP 24
15522: PUSH
15523: LD_INT 2
15525: ST_TO_ADDR
// DialogueOn ;
15526: CALL_OW 6
// if IsOK ( Donaldson ) then
15530: LD_EXP 13
15534: PPUSH
15535: CALL_OW 302
15539: IFFALSE 15555
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15541: LD_EXP 14
15545: PPUSH
15546: LD_STRING D8-Har-1
15548: PPUSH
15549: CALL_OW 94
// end else
15553: GO 15567
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15555: LD_EXP 14
15559: PPUSH
15560: LD_STRING D8-Har-1a
15562: PPUSH
15563: CALL_OW 94
// end ; DialogueOff ;
15567: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 4
15578: PPUSH
15579: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15583: LD_VAR 0 1
15587: PPUSH
15588: LD_INT 88
15590: PPUSH
15591: LD_INT 89
15593: PPUSH
15594: CALL_OW 114
// honor = 0 ;
15598: LD_ADDR_EXP 39
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15606: LD_INT 350
15608: PPUSH
15609: CALL_OW 67
// YouLost ( LostCommand ) ;
15613: LD_STRING LostCommand
15615: PPUSH
15616: CALL_OW 104
// end ;
15620: PPOPN 1
15622: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15623: LD_INT 22
15625: PUSH
15626: LD_INT 6
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 21
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: PUSH
15656: LD_EXP 20
15660: PUSH
15661: LD_INT 0
15663: EQUAL
15664: AND
15665: PUSH
15666: LD_EXP 44
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: IFFALSE 15769
15677: GO 15679
15679: DISABLE
15680: LD_INT 0
15682: PPUSH
15683: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 21
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 23
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 69
15728: ST_TO_ADDR
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15767
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_INT 4
15752: PPUSH
15753: CALL_OW 12
15757: PPUSH
15758: LD_INT 500
15760: PPUSH
15761: CALL_OW 492
// end ;
15765: GO 15739
15767: POP
15768: POP
// end ; end_of_file
15769: PPOPN 2
15771: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15772: GO 15774
15774: DISABLE
15775: LD_INT 0
15777: PPUSH
// begin enemyWayX = [ ] ;
15778: LD_ADDR_EXP 50
15782: PUSH
15783: EMPTY
15784: ST_TO_ADDR
// enemyWayY = [ ] ;
15785: LD_ADDR_EXP 51
15789: PUSH
15790: EMPTY
15791: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15792: LD_ADDR_VAR 0 1
15796: PUSH
15797: LD_INT 1
15799: PPUSH
15800: LD_INT 3
15802: PPUSH
15803: CALL_OW 12
15807: ST_TO_ADDR
// if rnd = 1 then
15808: LD_VAR 0 1
15812: PUSH
15813: LD_INT 1
15815: EQUAL
15816: IFFALSE 15856
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15818: LD_ADDR_EXP 50
15822: PUSH
15823: LD_INT 73
15825: PUSH
15826: LD_INT 46
15828: PUSH
15829: LD_INT 29
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15837: LD_ADDR_EXP 51
15841: PUSH
15842: LD_INT 71
15844: PUSH
15845: LD_INT 43
15847: PUSH
15848: LD_INT 29
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
// end ; if rnd = 2 then
15856: LD_VAR 0 1
15860: PUSH
15861: LD_INT 2
15863: EQUAL
15864: IFFALSE 15888
// begin enemyWayX = [ 64 ] ;
15866: LD_ADDR_EXP 50
15870: PUSH
15871: LD_INT 64
15873: PUSH
15874: EMPTY
15875: LIST
15876: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15877: LD_ADDR_EXP 51
15881: PUSH
15882: LD_INT 43
15884: PUSH
15885: EMPTY
15886: LIST
15887: ST_TO_ADDR
// end ; if rnd = 3 then
15888: LD_VAR 0 1
15892: PUSH
15893: LD_INT 3
15895: EQUAL
15896: IFFALSE 15920
// begin enemyWayX = [ 80 ] ;
15898: LD_ADDR_EXP 50
15902: PUSH
15903: LD_INT 80
15905: PUSH
15906: EMPTY
15907: LIST
15908: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15909: LD_ADDR_EXP 51
15913: PUSH
15914: LD_INT 28
15916: PUSH
15917: EMPTY
15918: LIST
15919: ST_TO_ADDR
// end ; enable ;
15920: ENABLE
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger AIEnable = 1 do
15924: LD_EXP 37
15928: PUSH
15929: LD_INT 1
15931: EQUAL
15932: IFFALSE 16046
15934: GO 15936
15936: DISABLE
// begin enable ;
15937: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15938: LD_INT 3
15940: PPUSH
15941: LD_INT 21
15943: PPUSH
15944: LD_INT 7
15946: PPUSH
15947: CALL 6017 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15951: LD_INT 3
15953: PPUSH
15954: LD_INT 8
15956: PPUSH
15957: LD_INT 7
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL 6338 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15967: LD_INT 3
15969: PPUSH
15970: LD_INT 17
15972: PPUSH
15973: LD_INT 108
15975: PPUSH
15976: LD_INT 95
15978: PPUSH
15979: CALL 7662 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15983: LD_INT 3
15985: PPUSH
15986: LD_INT 23
15988: PPUSH
15989: LD_EXP 50
15993: PPUSH
15994: LD_EXP 51
15998: PPUSH
15999: CALL 6994 0 4
// if baseReadyToBuild = 2 then
16003: LD_EXP 20
16007: PUSH
16008: LD_INT 2
16010: EQUAL
16011: IFFALSE 16046
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16013: LD_INT 6
16015: PPUSH
16016: LD_EXP 21
16020: PPUSH
16021: LD_INT 6
16023: PPUSH
16024: CALL 6017 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16028: LD_INT 6
16030: PPUSH
16031: LD_INT 9
16033: PPUSH
16034: LD_INT 6
16036: PPUSH
16037: LD_EXP 22
16041: PPUSH
16042: CALL 6338 0 4
// end ; end ;
16046: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16047: LD_EXP 15
16051: PPUSH
16052: CALL_OW 310
16056: NOT
16057: PUSH
16058: LD_INT 21
16060: PPUSH
16061: CALL_OW 302
16065: AND
16066: PUSH
16067: LD_INT 21
16069: PPUSH
16070: CALL_OW 255
16074: PUSH
16075: LD_INT 3
16077: EQUAL
16078: AND
16079: IFFALSE 16097
16081: GO 16083
16083: DISABLE
// begin enable ;
16084: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16085: LD_EXP 15
16089: PPUSH
16090: LD_INT 21
16092: PPUSH
16093: CALL_OW 120
// end ;
16097: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16098: LD_INT 22
16100: PUSH
16101: LD_INT 3
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 21
16110: PUSH
16111: LD_INT 2
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 55
16120: PUSH
16121: EMPTY
16122: LIST
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: PUSH
16138: LD_INT 1
16140: PPUSH
16141: CALL_OW 255
16145: PUSH
16146: LD_INT 3
16148: EQUAL
16149: AND
16150: PUSH
16151: LD_INT 21
16153: PPUSH
16154: CALL_OW 302
16158: AND
16159: PUSH
16160: LD_INT 21
16162: PPUSH
16163: CALL_OW 255
16167: PUSH
16168: LD_INT 3
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_INT 21
16175: PPUSH
16176: CALL_OW 302
16180: AND
16181: IFFALSE 16393
16183: GO 16185
16185: DISABLE
// begin enable ;
16186: ENABLE
// if Difficulty = 1 then
16187: LD_OWVAR 67
16191: PUSH
16192: LD_INT 1
16194: EQUAL
16195: IFFALSE 16239
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16197: LD_INT 3
16199: PPUSH
16200: LD_INT 24
16202: PPUSH
16203: LD_OWVAR 67
16207: PUSH
16208: LD_INT 2
16210: PLUS
16211: PPUSH
16212: LD_INT 42
16214: PUSH
16215: LD_INT 44
16217: PUSH
16218: LD_INT 43
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: PPUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_INT 1
16231: PPUSH
16232: LD_INT 21
16234: PPUSH
16235: CALL 6882 0 7
// if Difficulty = 2 then
16239: LD_OWVAR 67
16243: PUSH
16244: LD_INT 2
16246: EQUAL
16247: IFFALSE 16314
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16249: LD_INT 3
16251: PPUSH
16252: LD_INT 24
16254: PPUSH
16255: LD_OWVAR 67
16259: PUSH
16260: LD_INT 2
16262: PLUS
16263: PPUSH
16264: LD_INT 44
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: LD_INT 43
16272: PUSH
16273: LD_INT 43
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: LD_INT 21
16290: PUSH
16291: LD_INT 22
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 1
16300: PPUSH
16301: LD_INT 2
16303: PPUSH
16304: CALL_OW 12
16308: ARRAY
16309: PPUSH
16310: CALL 6882 0 7
// if Difficulty = 3 then
16314: LD_OWVAR 67
16318: PUSH
16319: LD_INT 3
16321: EQUAL
16322: IFFALSE 16393
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16324: LD_INT 3
16326: PPUSH
16327: LD_INT 24
16329: PPUSH
16330: LD_OWVAR 67
16334: PUSH
16335: LD_INT 2
16337: PPUSH
16338: LD_INT 3
16340: PPUSH
16341: CALL_OW 12
16345: PLUS
16346: PPUSH
16347: LD_INT 44
16349: PUSH
16350: LD_INT 44
16352: PUSH
16353: LD_INT 43
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 23
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: PPUSH
16380: LD_INT 2
16382: PPUSH
16383: CALL_OW 12
16387: ARRAY
16388: PPUSH
16389: CALL 6882 0 7
// end ;
16393: END
// every 0 0$1 do
16394: GO 16396
16396: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16397: LD_INT 3
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: LD_INT 3
16405: PPUSH
16406: CALL 5932 0 3
16410: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16411: LD_EXP 20
16415: PUSH
16416: LD_INT 1
16418: EQUAL
16419: IFFALSE 16566
16421: GO 16423
16423: DISABLE
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16428: LD_ADDR_VAR 0 2
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_INT 6
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 21
16445: PUSH
16446: LD_INT 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 34
16455: PUSH
16456: LD_INT 51
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16473: LD_VAR 0 2
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_EXP 21
16486: PPUSH
16487: CALL_OW 250
16491: PUSH
16492: LD_INT 5
16494: MINUS
16495: PPUSH
16496: LD_EXP 21
16500: PPUSH
16501: CALL_OW 251
16505: PUSH
16506: LD_INT 5
16508: MINUS
16509: PPUSH
16510: CALL_OW 111
// wait ( 0 0$5 ) ;
16514: LD_INT 175
16516: PPUSH
16517: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16521: LD_VAR 0 2
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PPUSH
16530: LD_INT 41
16532: PPUSH
16533: LD_INT 52
16535: PPUSH
16536: CALL_OW 177
// wait ( 0 0$40 ) ;
16540: LD_INT 1400
16542: PPUSH
16543: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16547: LD_VAR 0 2
16551: PUSH
16552: LD_INT 1
16554: ARRAY
16555: PPUSH
16556: LD_INT 41
16558: PPUSH
16559: LD_INT 44
16561: PPUSH
16562: CALL_OW 111
// end ;
16566: PPOPN 2
16568: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16569: LD_EXP 21
16573: PPUSH
16574: CALL_OW 274
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 275
16586: PUSH
16587: LD_INT 100
16589: GREATEREQUAL
16590: IFFALSE 16818
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16598: LD_ADDR_VAR 0 1
16602: PUSH
16603: LD_INT 22
16605: PUSH
16606: LD_INT 6
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 21
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 25
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16643: LD_VAR 0 1
16647: PUSH
16648: LD_INT 1
16650: ARRAY
16651: PPUSH
16652: LD_INT 4
16654: PPUSH
16655: LD_INT 39
16657: PPUSH
16658: LD_INT 37
16660: PPUSH
16661: LD_INT 3
16663: PPUSH
16664: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16668: LD_VAR 0 1
16672: PUSH
16673: LD_INT 1
16675: ARRAY
16676: PPUSH
16677: LD_INT 29
16679: PPUSH
16680: LD_INT 42
16682: PPUSH
16683: LD_INT 54
16685: PPUSH
16686: LD_INT 3
16688: PPUSH
16689: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16693: LD_VAR 0 1
16697: PUSH
16698: LD_INT 1
16700: ARRAY
16701: PPUSH
16702: LD_INT 6
16704: PPUSH
16705: LD_INT 38
16707: PPUSH
16708: LD_INT 48
16710: PPUSH
16711: LD_INT 0
16713: PPUSH
16714: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16718: LD_VAR 0 1
16722: PUSH
16723: LD_INT 1
16725: ARRAY
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: LD_INT 32
16732: PPUSH
16733: LD_INT 38
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16743: LD_VAR 0 1
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: LD_INT 26
16754: PPUSH
16755: LD_INT 39
16757: PPUSH
16758: LD_INT 55
16760: PPUSH
16761: LD_INT 3
16763: PPUSH
16764: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16768: LD_VAR 0 1
16772: PUSH
16773: LD_INT 1
16775: ARRAY
16776: PPUSH
16777: LD_INT 32
16779: PPUSH
16780: LD_INT 31
16782: PPUSH
16783: LD_INT 31
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16793: LD_VAR 0 1
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_INT 31
16804: PPUSH
16805: LD_INT 50
16807: PPUSH
16808: LD_INT 51
16810: PPUSH
16811: LD_INT 4
16813: PPUSH
16814: CALL_OW 205
// end ;
16818: PPOPN 1
16820: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16821: LD_EXP 46
16825: IFFALSE 17382
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
16834: PPUSH
// begin enable ;
16835: ENABLE
// if not ruMobile then
16836: LD_EXP 46
16840: NOT
16841: IFFALSE 16845
// exit ;
16843: GO 17382
// for i in ruMobile do
16845: LD_ADDR_VAR 0 1
16849: PUSH
16850: LD_EXP 46
16854: PUSH
16855: FOR_IN
16856: IFFALSE 17380
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 302
16867: NOT
16868: PUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 255
16878: PUSH
16879: LD_INT 3
16881: NONEQUAL
16882: OR
16883: IFFALSE 16903
// begin ruMobile := ruMobile diff i ;
16885: LD_ADDR_EXP 46
16889: PUSH
16890: LD_EXP 46
16894: PUSH
16895: LD_VAR 0 1
16899: DIFF
16900: ST_TO_ADDR
// continue ;
16901: GO 16855
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16903: LD_VAR 0 1
16907: PPUSH
16908: CALL_OW 110
16912: NOT
16913: PUSH
16914: LD_VAR 0 1
16918: PPUSH
16919: CALL_OW 110
16923: PUSH
16924: LD_INT 0
16926: EQUAL
16927: OR
16928: IFFALSE 17043
// begin if GetFuel ( i ) < 50 then
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 261
16939: PUSH
16940: LD_INT 50
16942: LESS
16943: IFFALSE 17002
// begin ComMoveXY ( i , 106 , 88 ) ;
16945: LD_VAR 0 1
16949: PPUSH
16950: LD_INT 106
16952: PPUSH
16953: LD_INT 88
16955: PPUSH
16956: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16960: LD_INT 35
16962: PPUSH
16963: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_INT 106
16974: PPUSH
16975: LD_INT 88
16977: PPUSH
16978: CALL_OW 297
16982: PUSH
16983: LD_INT 4
16985: LESS
16986: IFFALSE 16960
// SetFuel ( i , 100 ) ;
16988: LD_VAR 0 1
16992: PPUSH
16993: LD_INT 100
16995: PPUSH
16996: CALL_OW 240
// end else
17000: GO 17043
// if not IsInArea ( i , ruParking ) then
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_INT 25
17009: PPUSH
17010: CALL_OW 308
17014: NOT
17015: IFFALSE 17031
// ComMoveToArea ( i , ruParking ) else
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_INT 25
17024: PPUSH
17025: CALL_OW 113
17029: GO 17043
// SetTag ( i , 1 ) ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 110
17052: PUSH
17053: LD_INT 1
17055: EQUAL
17056: IFFALSE 17186
// begin if GetLives ( i ) < 1000 then
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 256
17067: PUSH
17068: LD_INT 1000
17070: LESS
17071: IFFALSE 17163
// begin if not IsDrivenBy ( i ) then
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 311
17082: NOT
17083: IFFALSE 17087
// continue ;
17085: GO 16855
// mech := IsDrivenBy ( i ) ;
17087: LD_ADDR_VAR 0 2
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 311
17101: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17102: LD_VAR 0 2
17106: PPUSH
17107: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17111: LD_VAR 0 2
17115: PPUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17125: LD_INT 35
17127: PPUSH
17128: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 256
17141: PUSH
17142: LD_INT 1000
17144: EQUAL
17145: IFFALSE 17125
// ComEnterUnit ( mech , i ) ;
17147: LD_VAR 0 2
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 120
// end else
17161: GO 17186
// if IsDrivenBy ( i ) then
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 311
17172: IFFALSE 17186
// SetTag ( i , 2 ) ;
17174: LD_VAR 0 1
17178: PPUSH
17179: LD_INT 2
17181: PPUSH
17182: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 110
17195: PUSH
17196: LD_INT 2
17198: EQUAL
17199: IFFALSE 17378
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17201: LD_ADDR_VAR 0 3
17205: PUSH
17206: LD_INT 24
17208: PPUSH
17209: LD_INT 81
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PPUSH
17219: CALL_OW 70
17223: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17224: LD_VAR 0 1
17228: PPUSH
17229: CALL_OW 256
17233: PUSH
17234: LD_INT 650
17236: LESS
17237: IFFALSE 17262
// begin ComStop ( i ) ;
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 141
// SetTag ( i , 0 ) ;
17248: LD_VAR 0 1
17252: PPUSH
17253: LD_INT 0
17255: PPUSH
17256: CALL_OW 109
// continue ;
17260: GO 16855
// end ; if enemy then
17262: LD_VAR 0 3
17266: IFFALSE 17306
// begin if not HasTask ( i ) then
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 314
17277: NOT
17278: IFFALSE 17304
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_VAR 0 1
17294: PPUSH
17295: CALL_OW 74
17299: PPUSH
17300: CALL_OW 115
// end else
17304: GO 17378
// if ruMobile > 2 then
17306: LD_EXP 46
17310: PUSH
17311: LD_INT 2
17313: GREATER
17314: IFFALSE 17378
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_INT 81
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PPUSH
17331: CALL_OW 69
17335: ST_TO_ADDR
// if enemy then
17336: LD_VAR 0 3
17340: IFFALSE 17378
// if not HasTask ( i ) then
17342: LD_VAR 0 1
17346: PPUSH
17347: CALL_OW 314
17351: NOT
17352: IFFALSE 17378
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17354: LD_VAR 0 1
17358: PPUSH
17359: LD_VAR 0 3
17363: PPUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 74
17373: PPUSH
17374: CALL_OW 115
// end ; end ; end ;
17378: GO 16855
17380: POP
17381: POP
// end ; end_of_file
17382: PPOPN 3
17384: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17385: LD_INT 0
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17394: LD_ADDR_VAR 0 3
17398: PUSH
17399: LD_INT 22
17401: PUSH
17402: LD_INT 6
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 25
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: LD_INT 54
17434: PUSH
17435: EMPTY
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17453: LD_ADDR_VAR 0 7
17457: PUSH
17458: LD_INT 22
17460: PUSH
17461: LD_INT 6
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 21
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 25
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 54
17490: PUSH
17491: EMPTY
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 69
17504: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17505: LD_ADDR_VAR 0 4
17509: PUSH
17510: LD_INT 22
17512: PUSH
17513: LD_INT 6
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 21
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 25
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17550: LD_ADDR_VAR 0 6
17554: PUSH
17555: LD_INT 22
17557: PUSH
17558: LD_INT 6
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 21
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 25
17577: PUSH
17578: LD_INT 4
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17595: LD_ADDR_VAR 0 8
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_INT 6
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 34
17622: PUSH
17623: LD_INT 51
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17640: LD_VAR 0 1
17644: PPUSH
17645: CALL_OW 255
17649: PUSH
17650: LD_INT 6
17652: EQUAL
17653: PUSH
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL_OW 266
17663: PUSH
17664: LD_INT 0
17666: EQUAL
17667: AND
17668: IFFALSE 17688
// begin ruPDepot = building ;
17670: LD_ADDR_EXP 21
17674: PUSH
17675: LD_VAR 0 1
17679: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17680: LD_ADDR_EXP 20
17684: PUSH
17685: LD_INT 1
17687: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 266
17697: PUSH
17698: LD_INT 4
17700: EQUAL
17701: PUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 255
17711: PUSH
17712: LD_INT 6
17714: EQUAL
17715: AND
17716: IFFALSE 17749
// for i in tmpSold do
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_VAR 0 3
17727: PUSH
17728: FOR_IN
17729: IFFALSE 17747
// ComEnterUnit ( i , building ) ;
17731: LD_VAR 0 2
17735: PPUSH
17736: LD_VAR 0 1
17740: PPUSH
17741: CALL_OW 120
17745: GO 17728
17747: POP
17748: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 266
17758: PUSH
17759: LD_INT 6
17761: EQUAL
17762: PUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 255
17772: PUSH
17773: LD_INT 6
17775: EQUAL
17776: AND
17777: IFFALSE 17835
// begin for i in tmpSci do
17779: LD_ADDR_VAR 0 2
17783: PUSH
17784: LD_VAR 0 6
17788: PUSH
17789: FOR_IN
17790: IFFALSE 17808
// ComEnterUnit ( i , building ) ;
17792: LD_VAR 0 2
17796: PPUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 120
17806: GO 17789
17808: POP
17809: POP
// ResAllTechs ( 6 , building , 3 ) ;
17810: LD_INT 6
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_INT 3
17820: PPUSH
17821: CALL 5932 0 3
// ruPLab = building ;
17825: LD_ADDR_EXP 22
17829: PUSH
17830: LD_VAR 0 1
17834: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 266
17844: PUSH
17845: LD_INT 2
17847: EQUAL
17848: PUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 255
17858: PUSH
17859: LD_INT 6
17861: EQUAL
17862: AND
17863: IFFALSE 17914
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17865: LD_ADDR_VAR 0 5
17869: PUSH
17870: LD_VAR 0 8
17874: PUSH
17875: LD_INT 1
17877: ARRAY
17878: PPUSH
17879: CALL_OW 313
17883: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17884: LD_VAR 0 5
17888: PPUSH
17889: CALL_OW 121
// wait ( 0 0$1 ) ;
17893: LD_INT 35
17895: PPUSH
17896: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17900: LD_VAR 0 5
17904: PPUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 266
17923: PUSH
17924: LD_INT 32
17926: EQUAL
17927: PUSH
17928: LD_VAR 0 1
17932: PPUSH
17933: CALL_OW 255
17937: PUSH
17938: LD_INT 6
17940: EQUAL
17941: AND
17942: IFFALSE 17994
// begin ComPlaceWeapon ( building , 42 ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_INT 42
17951: PPUSH
17952: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17956: LD_VAR 0 7
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: CALL_OW 122
// wait ( 0 0$1 ) ;
17969: LD_INT 35
17971: PPUSH
17972: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17976: LD_VAR 0 7
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PPUSH
17985: LD_VAR 0 1
17989: PPUSH
17990: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL_OW 266
18003: PUSH
18004: LD_INT 31
18006: EQUAL
18007: PUSH
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 255
18017: PUSH
18018: LD_INT 6
18020: EQUAL
18021: AND
18022: IFFALSE 18088
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18024: LD_VAR 0 7
18028: PUSH
18029: LD_INT 2
18031: ARRAY
18032: PPUSH
18033: CALL_OW 122
// wait ( 0 0$1 ) ;
18037: LD_INT 35
18039: PPUSH
18040: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18044: LD_VAR 0 7
18048: PUSH
18049: LD_INT 2
18051: ARRAY
18052: PPUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18062: LD_VAR 0 4
18066: PUSH
18067: LD_INT 1
18069: ARRAY
18070: PPUSH
18071: LD_EXP 21
18075: PPUSH
18076: CALL_OW 120
// baseReadyToBuild = 2 ;
18080: LD_ADDR_EXP 20
18084: PUSH
18085: LD_INT 2
18087: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 266
18097: PUSH
18098: LD_INT 32
18100: EQUAL
18101: PUSH
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 255
18111: PUSH
18112: LD_INT 1
18114: EQUAL
18115: AND
18116: PUSH
18117: LD_EXP 32
18121: PUSH
18122: LD_INT 0
18124: EQUAL
18125: AND
18126: IFFALSE 18371
// begin bunkerDialog = 1 ;
18128: LD_ADDR_EXP 32
18132: PUSH
18133: LD_INT 1
18135: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18136: LD_EXP 11
18140: PPUSH
18141: CALL_OW 302
18145: IFFALSE 18161
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18147: LD_EXP 11
18151: PPUSH
18152: LD_STRING D11-Eng1-1
18154: PPUSH
18155: CALL_OW 88
// end else
18159: GO 18357
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18161: LD_INT 22
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 25
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 26
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL_OW 69
18211: PUSH
18212: LD_EXP 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: PUSH
18220: LD_INT 0
18222: GREATER
18223: DIFF
18224: IFFALSE 18298
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 25
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 26
18258: PUSH
18259: LD_INT 1
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PPUSH
18272: CALL_OW 69
18276: PUSH
18277: LD_EXP 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: DIFF
18285: PPUSH
18286: LD_STRING D11-Eng1-1
18288: PPUSH
18289: LD_STRING D11-Eng1-1
18291: PPUSH
18292: CALL 4581 0 3
// end else
18296: GO 18357
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18298: LD_INT 22
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 21
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 26
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: PUSH
18338: LD_EXP 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: DIFF
18346: PPUSH
18347: LD_STRING D11-Eng1-1
18349: PPUSH
18350: LD_STRING D11-Eng1-1
18352: PPUSH
18353: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18357: LD_EXP 33
18361: PUSH
18362: LD_INT 0
18364: EQUAL
18365: IFFALSE 18371
// EnergyDialog ;
18367: CALL 4984 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18371: LD_VAR 0 1
18375: PPUSH
18376: CALL_OW 266
18380: PUSH
18381: LD_INT 29
18383: EQUAL
18384: PUSH
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 255
18394: PUSH
18395: LD_INT 1
18397: EQUAL
18398: AND
18399: IFFALSE 18409
// buildOil = 1 ;
18401: LD_ADDR_EXP 34
18405: PUSH
18406: LD_INT 1
18408: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 266
18418: PUSH
18419: LD_INT 26
18421: EQUAL
18422: PUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 255
18432: PUSH
18433: LD_INT 1
18435: EQUAL
18436: AND
18437: IFFALSE 18447
// buildPower = 1 ;
18439: LD_ADDR_EXP 35
18443: PUSH
18444: LD_INT 1
18446: ST_TO_ADDR
// end ;
18447: PPOPN 8
18449: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 266
18459: PUSH
18460: LD_INT 3
18462: EQUAL
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 255
18473: PUSH
18474: LD_INT 1
18476: EQUAL
18477: AND
18478: PUSH
18479: LD_EXP 31
18483: PUSH
18484: LD_INT 0
18486: EQUAL
18487: AND
18488: IFFALSE 18836
// begin factoryDialog = 1 ;
18490: LD_ADDR_EXP 31
18494: PUSH
18495: LD_INT 1
18497: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18498: LD_INT 47
18500: PPUSH
18501: LD_INT 1
18503: PPUSH
18504: CALL_OW 321
18508: PUSH
18509: LD_INT 1
18511: EQUAL
18512: PUSH
18513: LD_INT 45
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: CALL_OW 321
18523: PUSH
18524: LD_INT 1
18526: EQUAL
18527: AND
18528: IFFALSE 18836
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18530: LD_INT 22
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 21
18542: PUSH
18543: LD_INT 3
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 30
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 24
18562: PUSH
18563: LD_INT 1000
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18589: LD_EXP 1
18593: PPUSH
18594: LD_STRING D9a-JMM-1
18596: PPUSH
18597: CALL_OW 88
// if IsOK ( Campell ) then
18601: LD_EXP 12
18605: PPUSH
18606: CALL_OW 302
18610: IFFALSE 18626
// begin Say ( Campell , D9a-Mech1-1 ) ;
18612: LD_EXP 12
18616: PPUSH
18617: LD_STRING D9a-Mech1-1
18619: PPUSH
18620: CALL_OW 88
// end else
18624: GO 18822
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18626: LD_INT 22
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 25
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 26
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: PUSH
18677: LD_EXP 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: GREATER
18688: DIFF
18689: IFFALSE 18763
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18691: LD_INT 22
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 21
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 25
18713: PUSH
18714: LD_INT 3
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 26
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_EXP 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: DIFF
18750: PPUSH
18751: LD_STRING D9a-Mech1-1
18753: PPUSH
18754: LD_STRING D9a-Mech1-1
18756: PPUSH
18757: CALL 4581 0 3
// end else
18761: GO 18822
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18763: LD_INT 22
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 21
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 26
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: PPUSH
18798: CALL_OW 69
18802: PUSH
18803: LD_EXP 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: DIFF
18811: PPUSH
18812: LD_STRING D9a-Mech1-1
18814: PPUSH
18815: LD_STRING D9a-Mech1-1
18817: PPUSH
18818: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18822: LD_EXP 33
18826: PUSH
18827: LD_INT 0
18829: EQUAL
18830: IFFALSE 18836
// EnergyDialog ;
18832: CALL 4984 0 0
// end ; end ; end ;
18836: PPOPN 1
18838: END
// on UnitDestroyed ( unit ) do var mech ;
18839: LD_INT 0
18841: PPUSH
// begin if unit = JMM then
18842: LD_VAR 0 1
18846: PUSH
18847: LD_EXP 1
18851: EQUAL
18852: IFFALSE 18861
// YouLost ( JMM ) ;
18854: LD_STRING JMM
18856: PPUSH
18857: CALL_OW 104
// if unit in ruMobile then
18861: LD_VAR 0 1
18865: PUSH
18866: LD_EXP 46
18870: IN
18871: IFFALSE 18889
// ruMobile = ruMobile diff ruMobile ;
18873: LD_ADDR_EXP 46
18877: PUSH
18878: LD_EXP 46
18882: PUSH
18883: LD_EXP 46
18887: DIFF
18888: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 247
18898: PUSH
18899: LD_INT 1
18901: EQUAL
18902: PUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 255
18912: PUSH
18913: LD_INT 1
18915: EQUAL
18916: AND
18917: IFFALSE 18933
// lostCounter = lostCounter + 1 ;
18919: LD_ADDR_EXP 38
18923: PUSH
18924: LD_EXP 38
18928: PUSH
18929: LD_INT 1
18931: PLUS
18932: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18933: LD_EXP 43
18937: PUSH
18938: LD_INT 24
18940: PPUSH
18941: CALL_OW 313
18945: PUSH
18946: LD_INT 6
18948: LESS
18949: AND
18950: PUSH
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 257
18960: PUSH
18961: LD_INT 3
18963: EQUAL
18964: AND
18965: PUSH
18966: LD_VAR 0 1
18970: PPUSH
18971: CALL_OW 255
18975: PUSH
18976: LD_INT 3
18978: EQUAL
18979: AND
18980: PUSH
18981: LD_INT 24
18983: PPUSH
18984: CALL_OW 302
18988: AND
18989: PUSH
18990: LD_INT 24
18992: PPUSH
18993: CALL_OW 255
18997: PUSH
18998: LD_INT 3
19000: EQUAL
19001: AND
19002: IFFALSE 19131
// begin ruMech := ruMech - 1 ;
19004: LD_ADDR_EXP 43
19008: PUSH
19009: LD_EXP 43
19013: PUSH
19014: LD_INT 1
19016: MINUS
19017: ST_TO_ADDR
// if ruMech = 0 then
19018: LD_EXP 43
19022: PUSH
19023: LD_INT 0
19025: EQUAL
19026: IFFALSE 19030
// exit ;
19028: GO 19131
// wait ( 0 0$40 ) ;
19030: LD_INT 1400
19032: PPUSH
19033: CALL_OW 67
// uc_side = 3 ;
19037: LD_ADDR_OWVAR 20
19041: PUSH
19042: LD_INT 3
19044: ST_TO_ADDR
// uc_nation = 3 ;
19045: LD_ADDR_OWVAR 21
19049: PUSH
19050: LD_INT 3
19052: ST_TO_ADDR
// hc_gallery :=  ;
19053: LD_ADDR_OWVAR 33
19057: PUSH
19058: LD_STRING 
19060: ST_TO_ADDR
// hc_name :=  ;
19061: LD_ADDR_OWVAR 26
19065: PUSH
19066: LD_STRING 
19068: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19069: LD_INT 0
19071: PPUSH
19072: LD_EXP 16
19076: PPUSH
19077: LD_EXP 17
19081: PPUSH
19082: CALL_OW 12
19086: PPUSH
19087: CALL_OW 383
// mech := CreateHuman ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: CALL_OW 44
19100: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19101: LD_VAR 0 2
19105: PPUSH
19106: LD_INT 124
19108: PPUSH
19109: LD_INT 97
19111: PPUSH
19112: LD_INT 0
19114: PPUSH
19115: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19119: LD_VAR 0 2
19123: PPUSH
19124: LD_INT 24
19126: PPUSH
19127: CALL_OW 120
// end ; end ;
19131: PPOPN 2
19133: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19134: LD_INT 0
19136: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 255
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: IFFALSE 19166
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19152: LD_ADDR_EXP 42
19156: PUSH
19157: LD_EXP 42
19161: PUSH
19162: LD_INT 1
19164: PLUS
19165: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19166: LD_VAR 0 1
19170: PPUSH
19171: CALL_OW 255
19175: PUSH
19176: LD_INT 3
19178: EQUAL
19179: PUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 264
19189: PUSH
19190: LD_INT 42
19192: PUSH
19193: LD_INT 43
19195: PUSH
19196: LD_INT 44
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: IN
19204: AND
19205: IFFALSE 19223
// ruMobile := ruMobile union vehicle ;
19207: LD_ADDR_EXP 46
19211: PUSH
19212: LD_EXP 46
19216: PUSH
19217: LD_VAR 0 1
19221: UNION
19222: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_INT 53
19235: EQUAL
19236: IFFALSE 19372
// begin uc_side = 3 ;
19238: LD_ADDR_OWVAR 20
19242: PUSH
19243: LD_INT 3
19245: ST_TO_ADDR
// uc_nation = 3 ;
19246: LD_ADDR_OWVAR 21
19250: PUSH
19251: LD_INT 3
19253: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19254: LD_INT 0
19256: PPUSH
19257: LD_EXP 17
19261: PPUSH
19262: CALL_OW 383
// driver := CreateHuman ;
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: CALL_OW 44
19275: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19276: LD_VAR 0 3
19280: PPUSH
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 21
19297: PPUSH
19298: CALL 5200 0 2
// repeat wait ( 0 0$1 ) ;
19302: LD_INT 35
19304: PPUSH
19305: CALL_OW 67
// until not HasTask ( vehicle ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: CALL_OW 314
19318: NOT
19319: IFFALSE 19302
// driver := IsDrivenBy ( vehicle ) ;
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 311
19335: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 104
19343: PPUSH
19344: LD_INT 73
19346: PPUSH
19347: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19351: LD_VAR 0 3
19355: PPUSH
19356: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19360: LD_VAR 0 3
19364: PPUSH
19365: LD_INT 24
19367: PPUSH
19368: CALL_OW 180
// end ; end ;
19372: PPOPN 3
19374: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 255
19388: PUSH
19389: LD_INT 3
19391: EQUAL
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 247
19402: PUSH
19403: LD_INT 2
19405: EQUAL
19406: AND
19407: IFFALSE 19501
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19409: LD_VAR 0 1
19413: PPUSH
19414: CALL_OW 264
19418: PUSH
19419: LD_INT 42
19421: EQUAL
19422: PUSH
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 264
19432: PUSH
19433: LD_INT 43
19435: EQUAL
19436: OR
19437: PUSH
19438: LD_VAR 0 1
19442: PPUSH
19443: CALL_OW 264
19447: PUSH
19448: LD_INT 44
19450: EQUAL
19451: OR
19452: IFFALSE 19501
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19454: LD_INT 24
19456: PPUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 265
19466: PPUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: CALL_OW 262
19476: PPUSH
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL_OW 263
19486: PPUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 264
19496: PPUSH
19497: CALL_OW 185
// end ;
19501: PPOPN 3
19503: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 255
19513: PUSH
19514: LD_INT 3
19516: EQUAL
19517: PUSH
19518: LD_VAR 0 2
19522: PPUSH
19523: CALL_OW 255
19527: PUSH
19528: LD_INT 3
19530: EQUAL
19531: AND
19532: PUSH
19533: LD_INT 24
19535: PPUSH
19536: CALL_OW 302
19540: AND
19541: PUSH
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 302
19551: NOT
19552: AND
19553: IFFALSE 19567
// ComEnterUnit ( human , rubfact0 ) ;
19555: LD_VAR 0 2
19559: PPUSH
19560: LD_INT 24
19562: PPUSH
19563: CALL_OW 120
// end ;
19567: PPOPN 2
19569: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 24
19577: EQUAL
19578: PUSH
19579: LD_VAR 0 2
19583: PPUSH
19584: CALL_OW 256
19588: PUSH
19589: LD_INT 1000
19591: LESS
19592: AND
19593: IFFALSE 19607
// SetLives ( un , 1000 ) ;
19595: LD_VAR 0 2
19599: PPUSH
19600: LD_INT 1000
19602: PPUSH
19603: CALL_OW 234
// end ;
19607: PPOPN 2
19609: END
// on Command ( comandid ) do var i , j , tmp ;
19610: LD_INT 0
19612: PPUSH
19613: PPUSH
19614: PPUSH
// begin SOS_Command ( comandid ) ;
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL 35985 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19624: LD_INT 22
19626: PUSH
19627: LD_INT 4
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: NOT
19639: IFFALSE 19643
// exit ;
19641: GO 19808
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19643: LD_ADDR_VAR 0 2
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: LD_INT 21
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 21
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PPUSH
19690: CALL_OW 69
19694: PUSH
19695: FOR_IN
19696: IFFALSE 19806
// begin if GetTaskList ( i ) > 0 then
19698: LD_VAR 0 2
19702: PPUSH
19703: CALL_OW 437
19707: PUSH
19708: LD_INT 0
19710: GREATER
19711: IFFALSE 19804
// begin for j = 1 to GetTaskList ( i ) do
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: DOUBLE
19719: LD_INT 1
19721: DEC
19722: ST_TO_ADDR
19723: LD_VAR 0 2
19727: PPUSH
19728: CALL_OW 437
19732: PUSH
19733: FOR_TO
19734: IFFALSE 19802
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19736: LD_ADDR_VAR 0 4
19740: PUSH
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 437
19750: PUSH
19751: LD_VAR 0 3
19755: ARRAY
19756: PUSH
19757: LD_INT 4
19759: ARRAY
19760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19761: LD_VAR 0 4
19765: PPUSH
19766: CALL_OW 255
19770: PUSH
19771: LD_INT 4
19773: EQUAL
19774: PUSH
19775: LD_VAR 0 4
19779: PPUSH
19780: CALL_OW 255
19784: PUSH
19785: LD_INT 0
19787: EQUAL
19788: OR
19789: IFFALSE 19800
// ComStop ( i ) ;
19791: LD_VAR 0 2
19795: PPUSH
19796: CALL_OW 141
// end ;
19800: GO 19733
19802: POP
19803: POP
// end ; end ;
19804: GO 19695
19806: POP
19807: POP
// end ; end_of_file
19808: PPOPN 4
19810: END
// every 10 10$0 do
19811: GO 19813
19813: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19814: LD_INT 5
19816: PPUSH
19817: LD_INT 3
19819: PPUSH
19820: LD_INT 2
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 3
19828: PUSH
19829: LD_INT 4
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: LIST
19836: PUSH
19837: LD_OWVAR 67
19841: ARRAY
19842: PLUS
19843: PPUSH
19844: LD_INT 0
19846: PPUSH
19847: LD_INT 0
19849: PPUSH
19850: LD_INT 0
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: LD_EXP 16
19860: PPUSH
19861: LD_EXP 17
19865: PPUSH
19866: CALL_OW 12
19870: PPUSH
19871: LD_INT 4
19873: PPUSH
19874: LD_INT 14
19876: PPUSH
19877: LD_INT 1
19879: PPUSH
19880: LD_INT 2
19882: PPUSH
19883: CALL 7905 0 12
// end ;
19887: END
// every 20 20$0 do
19888: GO 19890
19890: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19891: LD_INT 5
19893: PPUSH
19894: LD_INT 3
19896: PPUSH
19897: LD_INT 4
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 3
19905: PUSH
19906: LD_INT 4
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: LD_OWVAR 67
19918: ARRAY
19919: PLUS
19920: PPUSH
19921: LD_INT 0
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: LD_INT 0
19929: PPUSH
19930: LD_INT 2
19932: PPUSH
19933: LD_EXP 16
19937: PPUSH
19938: LD_EXP 17
19942: PPUSH
19943: CALL_OW 12
19947: PPUSH
19948: LD_INT 4
19950: PPUSH
19951: LD_INT 14
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: LD_INT 1
19959: PPUSH
19960: CALL 7905 0 12
// end ;
19964: END
// every 25 25$0 do
19965: GO 19967
19967: DISABLE
// begin if Difficulty > 1 then
19968: LD_OWVAR 67
19972: PUSH
19973: LD_INT 1
19975: GREATER
19976: IFFALSE 19986
// specAttack := true ;
19978: LD_ADDR_EXP 47
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19986: LD_INT 4
19988: PPUSH
19989: LD_INT 5
19991: PPUSH
19992: LD_INT 4
19994: PUSH
19995: LD_INT 5
19997: PUSH
19998: LD_INT 6
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: PUSH
20006: LD_OWVAR 67
20010: ARRAY
20011: PPUSH
20012: LD_EXP 16
20016: PPUSH
20017: LD_EXP 17
20021: PPUSH
20022: CALL_OW 12
20026: PPUSH
20027: LD_INT 3
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: LD_INT 42
20038: PUSH
20039: LD_INT 42
20041: PUSH
20042: LD_INT 43
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 42
20052: PUSH
20053: LD_INT 43
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 43
20062: PUSH
20063: LD_INT 43
20065: PUSH
20066: LD_INT 43
20068: PUSH
20069: LD_INT 44
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: PUSH
20083: LD_OWVAR 67
20087: ARRAY
20088: PPUSH
20089: EMPTY
20090: PPUSH
20091: EMPTY
20092: PPUSH
20093: LD_INT 1
20095: PPUSH
20096: CALL 9661 0 11
// end ;
20100: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20101: LD_EXP 47
20105: IFFALSE 20468
20107: GO 20109
20109: DISABLE
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
// begin wait ( 0 0$20 ) ;
20116: LD_INT 700
20118: PPUSH
20119: CALL_OW 67
// uc_side := 5 ;
20123: LD_ADDR_OWVAR 20
20127: PUSH
20128: LD_INT 5
20130: ST_TO_ADDR
// uc_nation := 3 ;
20131: LD_ADDR_OWVAR 21
20135: PUSH
20136: LD_INT 3
20138: ST_TO_ADDR
// InitHc ;
20139: CALL_OW 19
// hc_importance := 0 ;
20143: LD_ADDR_OWVAR 32
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// tmp := [ ] ;
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: EMPTY
20157: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20158: LD_INT 0
20160: PPUSH
20161: LD_INT 2
20163: PPUSH
20164: LD_INT 6
20166: PPUSH
20167: CALL_OW 380
// eng := CreateHuman ;
20171: LD_ADDR_VAR 0 4
20175: PUSH
20176: CALL_OW 44
20180: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20181: LD_VAR 0 4
20185: PPUSH
20186: LD_INT 78
20188: PPUSH
20189: LD_INT 2
20191: PPUSH
20192: LD_INT 4
20194: PPUSH
20195: LD_INT 0
20197: PPUSH
20198: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20202: LD_ADDR_VAR 0 3
20206: PUSH
20207: DOUBLE
20208: LD_INT 1
20210: DEC
20211: ST_TO_ADDR
20212: LD_INT 2
20214: PUSH
20215: LD_OWVAR 67
20219: PLUS
20220: PUSH
20221: FOR_TO
20222: IFFALSE 20303
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20224: LD_INT 0
20226: PPUSH
20227: LD_INT 1
20229: PPUSH
20230: LD_INT 4
20232: PUSH
20233: LD_INT 5
20235: PUSH
20236: LD_INT 6
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: LD_OWVAR 67
20248: ARRAY
20249: PPUSH
20250: CALL_OW 380
// un := CreateHuman ;
20254: LD_ADDR_VAR 0 1
20258: PUSH
20259: CALL_OW 44
20263: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20264: LD_VAR 0 1
20268: PPUSH
20269: LD_INT 78
20271: PPUSH
20272: LD_INT 2
20274: PPUSH
20275: LD_INT 4
20277: PPUSH
20278: LD_INT 0
20280: PPUSH
20281: CALL_OW 50
// tmp := tmp ^ un ;
20285: LD_ADDR_VAR 0 2
20289: PUSH
20290: LD_VAR 0 2
20294: PUSH
20295: LD_VAR 0 1
20299: ADD
20300: ST_TO_ADDR
// end ;
20301: GO 20221
20303: POP
20304: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20305: LD_VAR 0 2
20309: PPUSH
20310: LD_INT 49
20312: PPUSH
20313: LD_INT 3
20315: PPUSH
20316: CALL_OW 111
// wait ( 0 0$2 ) ;
20320: LD_INT 70
20322: PPUSH
20323: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_INT 49
20334: PPUSH
20335: LD_INT 3
20337: PPUSH
20338: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20342: LD_VAR 0 4
20346: PPUSH
20347: LD_INT 4
20349: PPUSH
20350: CALL_OW 227
// wait ( 0 0$10 ) ;
20354: LD_INT 350
20356: PPUSH
20357: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20361: LD_INT 35
20363: PPUSH
20364: CALL_OW 67
// for i in tmp do
20368: LD_ADDR_VAR 0 3
20372: PUSH
20373: LD_VAR 0 2
20377: PUSH
20378: FOR_IN
20379: IFFALSE 20459
// if not IsOk ( i ) then
20381: LD_VAR 0 3
20385: PPUSH
20386: CALL_OW 302
20390: NOT
20391: IFFALSE 20411
// tmp := tmp diff i else
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: DIFF
20408: ST_TO_ADDR
20409: GO 20457
// if not HasTask ( i ) then
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 314
20420: NOT
20421: IFFALSE 20457
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20423: LD_VAR 0 3
20427: PPUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: PPUSH
20443: LD_VAR 0 3
20447: PPUSH
20448: CALL_OW 74
20452: PPUSH
20453: CALL_OW 115
20457: GO 20378
20459: POP
20460: POP
// until not tmp ;
20461: LD_VAR 0 2
20465: NOT
20466: IFFALSE 20361
// end ; end_of_file
20468: PPOPN 4
20470: END
// every 0 0$1 trigger startTimer = 1 do
20471: LD_EXP 30
20475: PUSH
20476: LD_INT 1
20478: EQUAL
20479: IFFALSE 20609
20481: GO 20483
20483: DISABLE
// begin enable ;
20484: ENABLE
// if timerStatus = 1 then
20485: LD_EXP 29
20489: PUSH
20490: LD_INT 1
20492: EQUAL
20493: IFFALSE 20526
// begin timeToSupport = timeToSupport - 0 0$01 ;
20495: LD_ADDR_EXP 28
20499: PUSH
20500: LD_EXP 28
20504: PUSH
20505: LD_INT 35
20507: MINUS
20508: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20509: LD_ADDR_OWVAR 47
20513: PUSH
20514: LD_STRING #Am04-1
20516: PUSH
20517: LD_EXP 28
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: ST_TO_ADDR
// end ; if timerStatus = 2 then
20526: LD_EXP 29
20530: PUSH
20531: LD_INT 2
20533: EQUAL
20534: IFFALSE 20567
// begin timeToSupport = timeToSupport - 0 0$01 ;
20536: LD_ADDR_EXP 28
20540: PUSH
20541: LD_EXP 28
20545: PUSH
20546: LD_INT 35
20548: MINUS
20549: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20550: LD_ADDR_OWVAR 47
20554: PUSH
20555: LD_STRING #Am04-2
20557: PUSH
20558: LD_EXP 28
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: ST_TO_ADDR
// end ; if timerStatus = 3 then
20567: LD_EXP 29
20571: PUSH
20572: LD_INT 3
20574: EQUAL
20575: IFFALSE 20591
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20577: LD_ADDR_EXP 27
20581: PUSH
20582: LD_EXP 27
20586: PUSH
20587: LD_INT 35
20589: MINUS
20590: ST_TO_ADDR
// end ; if timerStatus = 4 then
20591: LD_EXP 29
20595: PUSH
20596: LD_INT 4
20598: EQUAL
20599: IFFALSE 20609
// begin display_strings =  ;
20601: LD_ADDR_OWVAR 47
20605: PUSH
20606: LD_STRING 
20608: ST_TO_ADDR
// end ; end ; end_of_file
20609: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20610: LD_INT 4
20612: PPUSH
20613: CALL_OW 301
20617: IFFALSE 20629
20619: GO 20621
20621: DISABLE
// YouLost ( Base ) ; end_of_file
20622: LD_STRING Base
20624: PPUSH
20625: CALL_OW 104
20629: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20630: LD_EXP 15
20634: PPUSH
20635: CALL_OW 301
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_INT 3
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: PUSH
20669: LD_INT 14
20671: PUSH
20672: LD_INT 13
20674: PUSH
20675: LD_INT 12
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: PUSH
20683: LD_OWVAR 67
20687: ARRAY
20688: LESS
20689: AND
20690: IFFALSE 21276
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
20699: PPUSH
// begin AIEnable = 0 ;
20700: LD_ADDR_EXP 37
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// escapeAvalaible = 1 ;
20708: LD_ADDR_EXP 40
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// Video ( true ) ;
20716: LD_INT 1
20718: PPUSH
20719: CALL 76188 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20723: LD_INT 3
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: LD_INT 1
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20739: LD_INT 6
20741: PPUSH
20742: LD_INT 1
20744: PPUSH
20745: LD_INT 1
20747: PPUSH
20748: LD_INT 0
20750: PPUSH
20751: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20755: LD_INT 5
20757: PPUSH
20758: LD_INT 1
20760: PPUSH
20761: LD_INT 1
20763: PPUSH
20764: LD_INT 0
20766: PPUSH
20767: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 1
20776: PPUSH
20777: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20781: LD_INT 97
20783: PPUSH
20784: LD_INT 91
20786: PPUSH
20787: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20791: LD_INT 22
20793: PUSH
20794: LD_INT 3
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 21
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PPUSH
20815: CALL_OW 69
20819: PPUSH
20820: CALL_OW 121
// wait ( 0 0$01 ) ;
20824: LD_INT 35
20826: PPUSH
20827: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20831: LD_INT 22
20833: PUSH
20834: LD_INT 3
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 21
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: PPUSH
20860: LD_INT 124
20862: PPUSH
20863: LD_INT 98
20865: PPUSH
20866: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20870: LD_INT 22
20872: PUSH
20873: LD_INT 5
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PPUSH
20894: CALL_OW 69
20898: PPUSH
20899: CALL_OW 121
// wait ( 0 0$01 ) ;
20903: LD_INT 35
20905: PPUSH
20906: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20910: LD_INT 22
20912: PUSH
20913: LD_INT 5
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PPUSH
20934: CALL_OW 69
20938: PPUSH
20939: LD_INT 124
20941: PPUSH
20942: LD_INT 98
20944: PPUSH
20945: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20949: LD_INT 22
20951: PUSH
20952: LD_INT 6
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PPUSH
20973: CALL_OW 69
20977: PPUSH
20978: CALL_OW 121
// wait ( 0 0$01 ) ;
20982: LD_INT 35
20984: PPUSH
20985: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20989: LD_INT 22
20991: PUSH
20992: LD_INT 6
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 21
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 69
21017: PPUSH
21018: LD_INT 124
21020: PPUSH
21021: LD_INT 98
21023: PPUSH
21024: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21028: LD_INT 22
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PPUSH
21052: CALL_OW 69
21056: PPUSH
21057: LD_INT 124
21059: PPUSH
21060: LD_INT 96
21062: PPUSH
21063: CALL_OW 114
// wait ( 0 0$1 ) ;
21067: LD_INT 35
21069: PPUSH
21070: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21074: LD_INT 124
21076: PPUSH
21077: LD_INT 96
21079: PPUSH
21080: CALL_OW 84
// p := 0 0$0 ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21092: LD_ADDR_VAR 0 2
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_INT 6
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 21
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 69
21143: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21144: LD_INT 35
21146: PPUSH
21147: CALL_OW 67
// p := p + 0 0$1 ;
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_VAR 0 3
21160: PUSH
21161: LD_INT 35
21163: PLUS
21164: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21165: LD_VAR 0 2
21169: PPUSH
21170: LD_INT 5
21172: PPUSH
21173: CALL_OW 113
// for i in tmp do
21177: LD_ADDR_VAR 0 1
21181: PUSH
21182: LD_VAR 0 2
21186: PUSH
21187: FOR_IN
21188: IFFALSE 21215
// if IsInArea ( tmp , RussianEscape ) then
21190: LD_VAR 0 2
21194: PPUSH
21195: LD_INT 5
21197: PPUSH
21198: CALL_OW 308
21202: IFFALSE 21213
// RemoveUnit ( i ) ;
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 64
21213: GO 21187
21215: POP
21216: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21217: LD_INT 23
21219: PUSH
21220: LD_INT 3
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 21
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 24
21239: PUSH
21240: LD_INT 250
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: PUSH
21257: LD_INT 0
21259: EQUAL
21260: PUSH
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 245
21268: GREATEREQUAL
21269: OR
21270: IFFALSE 21144
// FinishMission ;
21272: CALL 21279 0 0
// end ;
21276: PPOPN 3
21278: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
// if not vehicleProduceCounter then
21286: LD_EXP 42
21290: NOT
21291: IFFALSE 21300
// SetAchievement ( ACH_INFANTRY ) ;
21293: LD_STRING ACH_INFANTRY
21295: PPUSH
21296: CALL_OW 543
// if tick <= 20 20$00 then
21300: LD_OWVAR 1
21304: PUSH
21305: LD_INT 42000
21307: LESSEQUAL
21308: IFFALSE 21324
// begin wait ( 3 ) ;
21310: LD_INT 3
21312: PPUSH
21313: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21317: LD_STRING ACH_ASPEED_4
21319: PPUSH
21320: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21324: LD_INT 22
21326: PPUSH
21327: CALL 21968 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21331: LD_INT 69
21333: PPUSH
21334: LD_INT 1
21336: PPUSH
21337: CALL_OW 321
21341: PPUSH
21342: LD_STRING GatlingInGamma
21344: PPUSH
21345: CALL_OW 39
// m1 := false ;
21349: LD_ADDR_VAR 0 3
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// m2 := false ;
21357: LD_ADDR_VAR 0 4
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// m3 := false ;
21365: LD_ADDR_VAR 0 5
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21373: LD_EXP 34
21377: PUSH
21378: LD_INT 1
21380: EQUAL
21381: PUSH
21382: LD_EXP 35
21386: PUSH
21387: LD_INT 1
21389: EQUAL
21390: AND
21391: IFFALSE 21413
// begin AddMedal ( oil , 1 ) ;
21393: LD_STRING oil
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 101
// m1 := true ;
21403: LD_ADDR_VAR 0 3
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// end else
21411: GO 21506
// begin if buildOil = 1 and buildPower = 0 then
21413: LD_EXP 34
21417: PUSH
21418: LD_INT 1
21420: EQUAL
21421: PUSH
21422: LD_EXP 35
21426: PUSH
21427: LD_INT 0
21429: EQUAL
21430: AND
21431: IFFALSE 21444
// AddMedal ( oil , - 1 ) ;
21433: LD_STRING oil
21435: PPUSH
21436: LD_INT 1
21438: NEG
21439: PPUSH
21440: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21444: LD_EXP 34
21448: PUSH
21449: LD_INT 0
21451: EQUAL
21452: PUSH
21453: LD_EXP 35
21457: PUSH
21458: LD_INT 1
21460: EQUAL
21461: AND
21462: IFFALSE 21475
// AddMedal ( oil , - 2 ) ;
21464: LD_STRING oil
21466: PPUSH
21467: LD_INT 2
21469: NEG
21470: PPUSH
21471: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21475: LD_EXP 34
21479: PUSH
21480: LD_INT 0
21482: EQUAL
21483: PUSH
21484: LD_EXP 35
21488: PUSH
21489: LD_INT 0
21491: EQUAL
21492: AND
21493: IFFALSE 21506
// AddMedal ( oil , - 3 ) ;
21495: LD_STRING oil
21497: PPUSH
21498: LD_INT 3
21500: NEG
21501: PPUSH
21502: CALL_OW 101
// end ; if lostCounter > 3 then
21506: LD_EXP 38
21510: PUSH
21511: LD_INT 3
21513: GREATER
21514: IFFALSE 21529
// AddMedal ( deaths , - 1 ) else
21516: LD_STRING deaths
21518: PPUSH
21519: LD_INT 1
21521: NEG
21522: PPUSH
21523: CALL_OW 101
21527: GO 21547
// begin AddMedal ( deaths , 1 ) ;
21529: LD_STRING deaths
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 101
// m2 := true ;
21539: LD_ADDR_VAR 0 4
21543: PUSH
21544: LD_INT 1
21546: ST_TO_ADDR
// end ; if honor = 1 then
21547: LD_EXP 39
21551: PUSH
21552: LD_INT 1
21554: EQUAL
21555: IFFALSE 21577
// begin AddMedal ( honour , 1 ) ;
21557: LD_STRING honour
21559: PPUSH
21560: LD_INT 1
21562: PPUSH
21563: CALL_OW 101
// m3 := true ;
21567: LD_ADDR_VAR 0 5
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
// end else
21575: GO 21588
// begin AddMedal ( honour , - 1 ) ;
21577: LD_STRING honour
21579: PPUSH
21580: LD_INT 1
21582: NEG
21583: PPUSH
21584: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21588: LD_VAR 0 3
21592: PUSH
21593: LD_VAR 0 4
21597: AND
21598: PUSH
21599: LD_VAR 0 5
21603: AND
21604: PUSH
21605: LD_OWVAR 67
21609: PUSH
21610: LD_INT 3
21612: EQUAL
21613: AND
21614: IFFALSE 21626
// SetAchievementEX ( ACH_AMER , 4 ) ;
21616: LD_STRING ACH_AMER
21618: PPUSH
21619: LD_INT 4
21621: PPUSH
21622: CALL_OW 564
// GiveMedals ( Main ) ;
21626: LD_STRING Main
21628: PPUSH
21629: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21633: LD_INT 22
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 23
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 69
21672: PPUSH
21673: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21677: LD_EXP 1
21681: PPUSH
21682: LD_EXP 48
21686: PUSH
21687: LD_STRING JMM
21689: STR
21690: PPUSH
21691: CALL_OW 38
// if IsOK ( Bobby ) then
21695: LD_EXP 2
21699: PPUSH
21700: CALL_OW 302
21704: IFFALSE 21724
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21706: LD_EXP 2
21710: PPUSH
21711: LD_EXP 48
21715: PUSH
21716: LD_STRING Bobby
21718: STR
21719: PPUSH
21720: CALL_OW 38
// if IsOK ( Cyrus ) then
21724: LD_EXP 3
21728: PPUSH
21729: CALL_OW 302
21733: IFFALSE 21753
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21735: LD_EXP 3
21739: PPUSH
21740: LD_EXP 48
21744: PUSH
21745: LD_STRING Cyrus
21747: STR
21748: PPUSH
21749: CALL_OW 38
// if IsOK ( Lisa ) then
21753: LD_EXP 4
21757: PPUSH
21758: CALL_OW 302
21762: IFFALSE 21782
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21764: LD_EXP 4
21768: PPUSH
21769: LD_EXP 48
21773: PUSH
21774: LD_STRING Lisa
21776: STR
21777: PPUSH
21778: CALL_OW 38
// if IsOK ( Brown ) then
21782: LD_EXP 7
21786: PPUSH
21787: CALL_OW 302
21791: IFFALSE 21811
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21793: LD_EXP 7
21797: PPUSH
21798: LD_EXP 48
21802: PUSH
21803: LD_STRING Brown
21805: STR
21806: PPUSH
21807: CALL_OW 38
// if not IsDead ( Donaldson ) then
21811: LD_EXP 13
21815: PPUSH
21816: CALL_OW 301
21820: NOT
21821: IFFALSE 21841
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21823: LD_EXP 13
21827: PPUSH
21828: LD_EXP 48
21832: PUSH
21833: LD_STRING Donaldson
21835: STR
21836: PPUSH
21837: CALL_OW 38
// if not IsDead ( Frank ) then
21841: LD_EXP 5
21845: PPUSH
21846: CALL_OW 301
21850: NOT
21851: IFFALSE 21871
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21853: LD_EXP 5
21857: PPUSH
21858: LD_EXP 48
21862: PUSH
21863: LD_STRING Frank
21865: STR
21866: PPUSH
21867: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21871: LD_INT 50
21873: PUSH
21874: EMPTY
21875: LIST
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 69
21906: PUSH
21907: LD_EXP 1
21911: PUSH
21912: LD_EXP 2
21916: PUSH
21917: LD_EXP 3
21921: PUSH
21922: LD_EXP 4
21926: PUSH
21927: LD_EXP 7
21931: PUSH
21932: LD_EXP 13
21936: PUSH
21937: LD_EXP 5
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: DIFF
21951: PPUSH
21952: LD_STRING 04_other_survivors
21954: PPUSH
21955: CALL_OW 38
// YouWin ;
21959: CALL_OW 103
// end ;
21963: LD_VAR 0 1
21967: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21968: LD_INT 0
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
// gammaBase = [ ] ;
21974: LD_ADDR_VAR 0 4
21978: PUSH
21979: EMPTY
21980: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
21981: LD_ADDR_VAR 0 5
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: LD_INT 22
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 21
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 70
22019: ST_TO_ADDR
// for i in buildings do
22020: LD_ADDR_VAR 0 3
22024: PUSH
22025: LD_VAR 0 5
22029: PUSH
22030: FOR_IN
22031: IFFALSE 22368
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22033: LD_VAR 0 3
22037: PPUSH
22038: CALL_OW 266
22042: PUSH
22043: LD_INT 6
22045: PUSH
22046: LD_INT 7
22048: PUSH
22049: LD_INT 8
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: IN
22057: IFFALSE 22171
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22059: LD_ADDR_VAR 0 4
22063: PUSH
22064: LD_VAR 0 4
22068: PUSH
22069: LD_VAR 0 3
22073: PPUSH
22074: CALL_OW 266
22078: PUSH
22079: LD_VAR 0 3
22083: PPUSH
22084: CALL_OW 250
22088: PUSH
22089: LD_VAR 0 3
22093: PPUSH
22094: CALL_OW 251
22098: PUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: CALL_OW 254
22108: PUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL_OW 267
22118: PUSH
22119: LD_VAR 0 3
22123: PPUSH
22124: CALL_OW 248
22128: PUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: LD_INT 1
22136: PPUSH
22137: CALL_OW 268
22141: PUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: LD_INT 2
22149: PPUSH
22150: CALL_OW 268
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: ADD
22168: ST_TO_ADDR
22169: GO 22366
// if GetBType ( i ) in [ b_bunker ] then
22171: LD_VAR 0 3
22175: PPUSH
22176: CALL_OW 266
22180: PUSH
22181: LD_INT 32
22183: PUSH
22184: EMPTY
22185: LIST
22186: IN
22187: IFFALSE 22284
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22189: LD_ADDR_VAR 0 4
22193: PUSH
22194: LD_VAR 0 4
22198: PUSH
22199: LD_VAR 0 3
22203: PPUSH
22204: CALL_OW 266
22208: PUSH
22209: LD_VAR 0 3
22213: PPUSH
22214: CALL_OW 250
22218: PUSH
22219: LD_VAR 0 3
22223: PPUSH
22224: CALL_OW 251
22228: PUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: CALL_OW 254
22238: PUSH
22239: LD_VAR 0 3
22243: PPUSH
22244: CALL_OW 267
22248: PUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: CALL_OW 248
22258: PUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: CALL_OW 269
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: ADD
22281: ST_TO_ADDR
22282: GO 22366
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22284: LD_ADDR_VAR 0 4
22288: PUSH
22289: LD_VAR 0 4
22293: PUSH
22294: LD_VAR 0 3
22298: PPUSH
22299: CALL_OW 266
22303: PUSH
22304: LD_VAR 0 3
22308: PPUSH
22309: CALL_OW 250
22313: PUSH
22314: LD_VAR 0 3
22318: PPUSH
22319: CALL_OW 251
22323: PUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 254
22333: PUSH
22334: LD_VAR 0 3
22338: PPUSH
22339: CALL_OW 267
22343: PUSH
22344: LD_VAR 0 3
22348: PPUSH
22349: CALL_OW 248
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: ADD
22365: ST_TO_ADDR
// end ;
22366: GO 22030
22368: POP
22369: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22370: LD_VAR 0 4
22374: PPUSH
22375: LD_STRING GammaBase
22377: PPUSH
22378: CALL_OW 39
// end ; end_of_file
22382: LD_VAR 0 2
22386: RET
// every 1 1$15 do
22387: GO 22389
22389: DISABLE
// begin if supply <= 13 and supply > 7 then
22390: LD_EXP 36
22394: PUSH
22395: LD_INT 13
22397: LESSEQUAL
22398: PUSH
22399: LD_EXP 36
22403: PUSH
22404: LD_INT 7
22406: GREATER
22407: AND
22408: IFFALSE 22431
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22410: LD_INT 3
22412: PPUSH
22413: LD_INT 5
22415: PPUSH
22416: CALL_OW 12
22420: PPUSH
22421: LD_INT 18
22423: PPUSH
22424: LD_INT 1
22426: PPUSH
22427: CALL_OW 55
// if supply <= 7 and supply > 4 then
22431: LD_EXP 36
22435: PUSH
22436: LD_INT 7
22438: LESSEQUAL
22439: PUSH
22440: LD_EXP 36
22444: PUSH
22445: LD_INT 4
22447: GREATER
22448: AND
22449: IFFALSE 22472
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22451: LD_INT 3
22453: PPUSH
22454: LD_INT 5
22456: PPUSH
22457: CALL_OW 12
22461: PPUSH
22462: LD_INT 19
22464: PPUSH
22465: LD_INT 1
22467: PPUSH
22468: CALL_OW 55
// if supply <= 4 and supply > 0 then
22472: LD_EXP 36
22476: PUSH
22477: LD_INT 4
22479: LESSEQUAL
22480: PUSH
22481: LD_EXP 36
22485: PUSH
22486: LD_INT 0
22488: GREATER
22489: AND
22490: IFFALSE 22513
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22492: LD_INT 3
22494: PPUSH
22495: LD_INT 5
22497: PPUSH
22498: CALL_OW 12
22502: PPUSH
22503: LD_INT 20
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: CALL_OW 55
// if supply > 0 then
22513: LD_EXP 36
22517: PUSH
22518: LD_INT 0
22520: GREATER
22521: IFFALSE 22538
// begin supply = supply - 1 ;
22523: LD_ADDR_EXP 36
22527: PUSH
22528: LD_EXP 36
22532: PUSH
22533: LD_INT 1
22535: MINUS
22536: ST_TO_ADDR
// enable ;
22537: ENABLE
// end ; end ; end_of_file
22538: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22539: LD_INT 0
22541: PPUSH
// ar_miner := 81 ;
22542: LD_ADDR_EXP 59
22546: PUSH
22547: LD_INT 81
22549: ST_TO_ADDR
// ar_crane := 88 ;
22550: LD_ADDR_EXP 58
22554: PUSH
22555: LD_INT 88
22557: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22558: LD_ADDR_EXP 53
22562: PUSH
22563: LD_INT 89
22565: ST_TO_ADDR
// us_hack := 99 ;
22566: LD_ADDR_EXP 54
22570: PUSH
22571: LD_INT 99
22573: ST_TO_ADDR
// us_artillery := 97 ;
22574: LD_ADDR_EXP 55
22578: PUSH
22579: LD_INT 97
22581: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22582: LD_ADDR_EXP 56
22586: PUSH
22587: LD_INT 91
22589: ST_TO_ADDR
// ar_mortar := 92 ;
22590: LD_ADDR_EXP 57
22594: PUSH
22595: LD_INT 92
22597: ST_TO_ADDR
// ru_radar := 98 ;
22598: LD_ADDR_EXP 52
22602: PUSH
22603: LD_INT 98
22605: ST_TO_ADDR
// tech_Artillery := 80 ;
22606: LD_ADDR_EXP 60
22610: PUSH
22611: LD_INT 80
22613: ST_TO_ADDR
// tech_RadMat := 81 ;
22614: LD_ADDR_EXP 61
22618: PUSH
22619: LD_INT 81
22621: ST_TO_ADDR
// tech_BasicTools := 82 ;
22622: LD_ADDR_EXP 62
22626: PUSH
22627: LD_INT 82
22629: ST_TO_ADDR
// tech_Cargo := 83 ;
22630: LD_ADDR_EXP 63
22634: PUSH
22635: LD_INT 83
22637: ST_TO_ADDR
// tech_Track := 84 ;
22638: LD_ADDR_EXP 64
22642: PUSH
22643: LD_INT 84
22645: ST_TO_ADDR
// tech_Crane := 85 ;
22646: LD_ADDR_EXP 65
22650: PUSH
22651: LD_INT 85
22653: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22654: LD_ADDR_EXP 66
22658: PUSH
22659: LD_INT 86
22661: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22662: LD_ADDR_EXP 67
22666: PUSH
22667: LD_INT 87
22669: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
22670: LD_ADDR_EXP 68
22674: PUSH
22675: LD_INT 88
22677: ST_TO_ADDR
// class_mastodont := 31 ;
22678: LD_ADDR_EXP 69
22682: PUSH
22683: LD_INT 31
22685: ST_TO_ADDR
// class_horse := 21 ;
22686: LD_ADDR_EXP 70
22690: PUSH
22691: LD_INT 21
22693: ST_TO_ADDR
// end ;
22694: LD_VAR 0 1
22698: RET
// every 1 do
22699: GO 22701
22701: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22702: CALL 22539 0 0
22706: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22707: LD_INT 0
22709: PPUSH
// if p2 = 100 then
22710: LD_VAR 0 2
22714: PUSH
22715: LD_INT 100
22717: EQUAL
22718: IFFALSE 23667
// begin if not StreamModeActive then
22720: LD_EXP 71
22724: NOT
22725: IFFALSE 22735
// StreamModeActive := true ;
22727: LD_ADDR_EXP 71
22731: PUSH
22732: LD_INT 1
22734: ST_TO_ADDR
// if p3 = 0 then
22735: LD_VAR 0 3
22739: PUSH
22740: LD_INT 0
22742: EQUAL
22743: IFFALSE 22749
// InitStreamMode ;
22745: CALL 23827 0 0
// if p3 = 1 then
22749: LD_VAR 0 3
22753: PUSH
22754: LD_INT 1
22756: EQUAL
22757: IFFALSE 22767
// sRocket := true ;
22759: LD_ADDR_EXP 76
22763: PUSH
22764: LD_INT 1
22766: ST_TO_ADDR
// if p3 = 2 then
22767: LD_VAR 0 3
22771: PUSH
22772: LD_INT 2
22774: EQUAL
22775: IFFALSE 22785
// sSpeed := true ;
22777: LD_ADDR_EXP 75
22781: PUSH
22782: LD_INT 1
22784: ST_TO_ADDR
// if p3 = 3 then
22785: LD_VAR 0 3
22789: PUSH
22790: LD_INT 3
22792: EQUAL
22793: IFFALSE 22803
// sEngine := true ;
22795: LD_ADDR_EXP 77
22799: PUSH
22800: LD_INT 1
22802: ST_TO_ADDR
// if p3 = 4 then
22803: LD_VAR 0 3
22807: PUSH
22808: LD_INT 4
22810: EQUAL
22811: IFFALSE 22821
// sSpec := true ;
22813: LD_ADDR_EXP 74
22817: PUSH
22818: LD_INT 1
22820: ST_TO_ADDR
// if p3 = 5 then
22821: LD_VAR 0 3
22825: PUSH
22826: LD_INT 5
22828: EQUAL
22829: IFFALSE 22839
// sLevel := true ;
22831: LD_ADDR_EXP 78
22835: PUSH
22836: LD_INT 1
22838: ST_TO_ADDR
// if p3 = 6 then
22839: LD_VAR 0 3
22843: PUSH
22844: LD_INT 6
22846: EQUAL
22847: IFFALSE 22857
// sArmoury := true ;
22849: LD_ADDR_EXP 79
22853: PUSH
22854: LD_INT 1
22856: ST_TO_ADDR
// if p3 = 7 then
22857: LD_VAR 0 3
22861: PUSH
22862: LD_INT 7
22864: EQUAL
22865: IFFALSE 22875
// sRadar := true ;
22867: LD_ADDR_EXP 80
22871: PUSH
22872: LD_INT 1
22874: ST_TO_ADDR
// if p3 = 8 then
22875: LD_VAR 0 3
22879: PUSH
22880: LD_INT 8
22882: EQUAL
22883: IFFALSE 22893
// sBunker := true ;
22885: LD_ADDR_EXP 81
22889: PUSH
22890: LD_INT 1
22892: ST_TO_ADDR
// if p3 = 9 then
22893: LD_VAR 0 3
22897: PUSH
22898: LD_INT 9
22900: EQUAL
22901: IFFALSE 22911
// sHack := true ;
22903: LD_ADDR_EXP 82
22907: PUSH
22908: LD_INT 1
22910: ST_TO_ADDR
// if p3 = 10 then
22911: LD_VAR 0 3
22915: PUSH
22916: LD_INT 10
22918: EQUAL
22919: IFFALSE 22929
// sFire := true ;
22921: LD_ADDR_EXP 83
22925: PUSH
22926: LD_INT 1
22928: ST_TO_ADDR
// if p3 = 11 then
22929: LD_VAR 0 3
22933: PUSH
22934: LD_INT 11
22936: EQUAL
22937: IFFALSE 22947
// sRefresh := true ;
22939: LD_ADDR_EXP 84
22943: PUSH
22944: LD_INT 1
22946: ST_TO_ADDR
// if p3 = 12 then
22947: LD_VAR 0 3
22951: PUSH
22952: LD_INT 12
22954: EQUAL
22955: IFFALSE 22965
// sExp := true ;
22957: LD_ADDR_EXP 85
22961: PUSH
22962: LD_INT 1
22964: ST_TO_ADDR
// if p3 = 13 then
22965: LD_VAR 0 3
22969: PUSH
22970: LD_INT 13
22972: EQUAL
22973: IFFALSE 22983
// sDepot := true ;
22975: LD_ADDR_EXP 86
22979: PUSH
22980: LD_INT 1
22982: ST_TO_ADDR
// if p3 = 14 then
22983: LD_VAR 0 3
22987: PUSH
22988: LD_INT 14
22990: EQUAL
22991: IFFALSE 23001
// sFlag := true ;
22993: LD_ADDR_EXP 87
22997: PUSH
22998: LD_INT 1
23000: ST_TO_ADDR
// if p3 = 15 then
23001: LD_VAR 0 3
23005: PUSH
23006: LD_INT 15
23008: EQUAL
23009: IFFALSE 23019
// sKamikadze := true ;
23011: LD_ADDR_EXP 95
23015: PUSH
23016: LD_INT 1
23018: ST_TO_ADDR
// if p3 = 16 then
23019: LD_VAR 0 3
23023: PUSH
23024: LD_INT 16
23026: EQUAL
23027: IFFALSE 23037
// sTroll := true ;
23029: LD_ADDR_EXP 96
23033: PUSH
23034: LD_INT 1
23036: ST_TO_ADDR
// if p3 = 17 then
23037: LD_VAR 0 3
23041: PUSH
23042: LD_INT 17
23044: EQUAL
23045: IFFALSE 23055
// sSlow := true ;
23047: LD_ADDR_EXP 97
23051: PUSH
23052: LD_INT 1
23054: ST_TO_ADDR
// if p3 = 18 then
23055: LD_VAR 0 3
23059: PUSH
23060: LD_INT 18
23062: EQUAL
23063: IFFALSE 23073
// sLack := true ;
23065: LD_ADDR_EXP 98
23069: PUSH
23070: LD_INT 1
23072: ST_TO_ADDR
// if p3 = 19 then
23073: LD_VAR 0 3
23077: PUSH
23078: LD_INT 19
23080: EQUAL
23081: IFFALSE 23091
// sTank := true ;
23083: LD_ADDR_EXP 100
23087: PUSH
23088: LD_INT 1
23090: ST_TO_ADDR
// if p3 = 20 then
23091: LD_VAR 0 3
23095: PUSH
23096: LD_INT 20
23098: EQUAL
23099: IFFALSE 23109
// sRemote := true ;
23101: LD_ADDR_EXP 101
23105: PUSH
23106: LD_INT 1
23108: ST_TO_ADDR
// if p3 = 21 then
23109: LD_VAR 0 3
23113: PUSH
23114: LD_INT 21
23116: EQUAL
23117: IFFALSE 23127
// sPowell := true ;
23119: LD_ADDR_EXP 102
23123: PUSH
23124: LD_INT 1
23126: ST_TO_ADDR
// if p3 = 22 then
23127: LD_VAR 0 3
23131: PUSH
23132: LD_INT 22
23134: EQUAL
23135: IFFALSE 23145
// sTeleport := true ;
23137: LD_ADDR_EXP 105
23141: PUSH
23142: LD_INT 1
23144: ST_TO_ADDR
// if p3 = 23 then
23145: LD_VAR 0 3
23149: PUSH
23150: LD_INT 23
23152: EQUAL
23153: IFFALSE 23163
// sOilTower := true ;
23155: LD_ADDR_EXP 107
23159: PUSH
23160: LD_INT 1
23162: ST_TO_ADDR
// if p3 = 24 then
23163: LD_VAR 0 3
23167: PUSH
23168: LD_INT 24
23170: EQUAL
23171: IFFALSE 23181
// sShovel := true ;
23173: LD_ADDR_EXP 108
23177: PUSH
23178: LD_INT 1
23180: ST_TO_ADDR
// if p3 = 25 then
23181: LD_VAR 0 3
23185: PUSH
23186: LD_INT 25
23188: EQUAL
23189: IFFALSE 23199
// sSheik := true ;
23191: LD_ADDR_EXP 109
23195: PUSH
23196: LD_INT 1
23198: ST_TO_ADDR
// if p3 = 26 then
23199: LD_VAR 0 3
23203: PUSH
23204: LD_INT 26
23206: EQUAL
23207: IFFALSE 23217
// sEarthquake := true ;
23209: LD_ADDR_EXP 111
23213: PUSH
23214: LD_INT 1
23216: ST_TO_ADDR
// if p3 = 27 then
23217: LD_VAR 0 3
23221: PUSH
23222: LD_INT 27
23224: EQUAL
23225: IFFALSE 23235
// sAI := true ;
23227: LD_ADDR_EXP 112
23231: PUSH
23232: LD_INT 1
23234: ST_TO_ADDR
// if p3 = 28 then
23235: LD_VAR 0 3
23239: PUSH
23240: LD_INT 28
23242: EQUAL
23243: IFFALSE 23253
// sCargo := true ;
23245: LD_ADDR_EXP 115
23249: PUSH
23250: LD_INT 1
23252: ST_TO_ADDR
// if p3 = 29 then
23253: LD_VAR 0 3
23257: PUSH
23258: LD_INT 29
23260: EQUAL
23261: IFFALSE 23271
// sDLaser := true ;
23263: LD_ADDR_EXP 116
23267: PUSH
23268: LD_INT 1
23270: ST_TO_ADDR
// if p3 = 30 then
23271: LD_VAR 0 3
23275: PUSH
23276: LD_INT 30
23278: EQUAL
23279: IFFALSE 23289
// sExchange := true ;
23281: LD_ADDR_EXP 117
23285: PUSH
23286: LD_INT 1
23288: ST_TO_ADDR
// if p3 = 31 then
23289: LD_VAR 0 3
23293: PUSH
23294: LD_INT 31
23296: EQUAL
23297: IFFALSE 23307
// sFac := true ;
23299: LD_ADDR_EXP 118
23303: PUSH
23304: LD_INT 1
23306: ST_TO_ADDR
// if p3 = 32 then
23307: LD_VAR 0 3
23311: PUSH
23312: LD_INT 32
23314: EQUAL
23315: IFFALSE 23325
// sPower := true ;
23317: LD_ADDR_EXP 119
23321: PUSH
23322: LD_INT 1
23324: ST_TO_ADDR
// if p3 = 33 then
23325: LD_VAR 0 3
23329: PUSH
23330: LD_INT 33
23332: EQUAL
23333: IFFALSE 23343
// sRandom := true ;
23335: LD_ADDR_EXP 120
23339: PUSH
23340: LD_INT 1
23342: ST_TO_ADDR
// if p3 = 34 then
23343: LD_VAR 0 3
23347: PUSH
23348: LD_INT 34
23350: EQUAL
23351: IFFALSE 23361
// sShield := true ;
23353: LD_ADDR_EXP 121
23357: PUSH
23358: LD_INT 1
23360: ST_TO_ADDR
// if p3 = 35 then
23361: LD_VAR 0 3
23365: PUSH
23366: LD_INT 35
23368: EQUAL
23369: IFFALSE 23379
// sTime := true ;
23371: LD_ADDR_EXP 122
23375: PUSH
23376: LD_INT 1
23378: ST_TO_ADDR
// if p3 = 36 then
23379: LD_VAR 0 3
23383: PUSH
23384: LD_INT 36
23386: EQUAL
23387: IFFALSE 23397
// sTools := true ;
23389: LD_ADDR_EXP 123
23393: PUSH
23394: LD_INT 1
23396: ST_TO_ADDR
// if p3 = 101 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 101
23404: EQUAL
23405: IFFALSE 23415
// sSold := true ;
23407: LD_ADDR_EXP 88
23411: PUSH
23412: LD_INT 1
23414: ST_TO_ADDR
// if p3 = 102 then
23415: LD_VAR 0 3
23419: PUSH
23420: LD_INT 102
23422: EQUAL
23423: IFFALSE 23433
// sDiff := true ;
23425: LD_ADDR_EXP 89
23429: PUSH
23430: LD_INT 1
23432: ST_TO_ADDR
// if p3 = 103 then
23433: LD_VAR 0 3
23437: PUSH
23438: LD_INT 103
23440: EQUAL
23441: IFFALSE 23451
// sFog := true ;
23443: LD_ADDR_EXP 92
23447: PUSH
23448: LD_INT 1
23450: ST_TO_ADDR
// if p3 = 104 then
23451: LD_VAR 0 3
23455: PUSH
23456: LD_INT 104
23458: EQUAL
23459: IFFALSE 23469
// sReset := true ;
23461: LD_ADDR_EXP 93
23465: PUSH
23466: LD_INT 1
23468: ST_TO_ADDR
// if p3 = 105 then
23469: LD_VAR 0 3
23473: PUSH
23474: LD_INT 105
23476: EQUAL
23477: IFFALSE 23487
// sSun := true ;
23479: LD_ADDR_EXP 94
23483: PUSH
23484: LD_INT 1
23486: ST_TO_ADDR
// if p3 = 106 then
23487: LD_VAR 0 3
23491: PUSH
23492: LD_INT 106
23494: EQUAL
23495: IFFALSE 23505
// sTiger := true ;
23497: LD_ADDR_EXP 90
23501: PUSH
23502: LD_INT 1
23504: ST_TO_ADDR
// if p3 = 107 then
23505: LD_VAR 0 3
23509: PUSH
23510: LD_INT 107
23512: EQUAL
23513: IFFALSE 23523
// sBomb := true ;
23515: LD_ADDR_EXP 91
23519: PUSH
23520: LD_INT 1
23522: ST_TO_ADDR
// if p3 = 108 then
23523: LD_VAR 0 3
23527: PUSH
23528: LD_INT 108
23530: EQUAL
23531: IFFALSE 23541
// sWound := true ;
23533: LD_ADDR_EXP 99
23537: PUSH
23538: LD_INT 1
23540: ST_TO_ADDR
// if p3 = 109 then
23541: LD_VAR 0 3
23545: PUSH
23546: LD_INT 109
23548: EQUAL
23549: IFFALSE 23559
// sBetray := true ;
23551: LD_ADDR_EXP 103
23555: PUSH
23556: LD_INT 1
23558: ST_TO_ADDR
// if p3 = 110 then
23559: LD_VAR 0 3
23563: PUSH
23564: LD_INT 110
23566: EQUAL
23567: IFFALSE 23577
// sContamin := true ;
23569: LD_ADDR_EXP 104
23573: PUSH
23574: LD_INT 1
23576: ST_TO_ADDR
// if p3 = 111 then
23577: LD_VAR 0 3
23581: PUSH
23582: LD_INT 111
23584: EQUAL
23585: IFFALSE 23595
// sOil := true ;
23587: LD_ADDR_EXP 106
23591: PUSH
23592: LD_INT 1
23594: ST_TO_ADDR
// if p3 = 112 then
23595: LD_VAR 0 3
23599: PUSH
23600: LD_INT 112
23602: EQUAL
23603: IFFALSE 23613
// sStu := true ;
23605: LD_ADDR_EXP 110
23609: PUSH
23610: LD_INT 1
23612: ST_TO_ADDR
// if p3 = 113 then
23613: LD_VAR 0 3
23617: PUSH
23618: LD_INT 113
23620: EQUAL
23621: IFFALSE 23631
// sBazooka := true ;
23623: LD_ADDR_EXP 113
23627: PUSH
23628: LD_INT 1
23630: ST_TO_ADDR
// if p3 = 114 then
23631: LD_VAR 0 3
23635: PUSH
23636: LD_INT 114
23638: EQUAL
23639: IFFALSE 23649
// sMortar := true ;
23641: LD_ADDR_EXP 114
23645: PUSH
23646: LD_INT 1
23648: ST_TO_ADDR
// if p3 = 115 then
23649: LD_VAR 0 3
23653: PUSH
23654: LD_INT 115
23656: EQUAL
23657: IFFALSE 23667
// sRanger := true ;
23659: LD_ADDR_EXP 124
23663: PUSH
23664: LD_INT 1
23666: ST_TO_ADDR
// end ; if p2 = 101 then
23667: LD_VAR 0 2
23671: PUSH
23672: LD_INT 101
23674: EQUAL
23675: IFFALSE 23803
// begin case p3 of 1 :
23677: LD_VAR 0 3
23681: PUSH
23682: LD_INT 1
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23697
23690: POP
// hHackUnlimitedResources ; 2 :
23691: CALL 34840 0 0
23695: GO 23803
23697: LD_INT 2
23699: DOUBLE
23700: EQUAL
23701: IFTRUE 23705
23703: GO 23712
23705: POP
// hHackSetLevel10 ; 3 :
23706: CALL 34973 0 0
23710: GO 23803
23712: LD_INT 3
23714: DOUBLE
23715: EQUAL
23716: IFTRUE 23720
23718: GO 23727
23720: POP
// hHackSetLevel10YourUnits ; 4 :
23721: CALL 35058 0 0
23725: GO 23803
23727: LD_INT 4
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 23742
23735: POP
// hHackInvincible ; 5 :
23736: CALL 35506 0 0
23740: GO 23803
23742: LD_INT 5
23744: DOUBLE
23745: EQUAL
23746: IFTRUE 23750
23748: GO 23757
23750: POP
// hHackInvisible ; 6 :
23751: CALL 35617 0 0
23755: GO 23803
23757: LD_INT 6
23759: DOUBLE
23760: EQUAL
23761: IFTRUE 23765
23763: GO 23772
23765: POP
// hHackChangeYourSide ; 7 :
23766: CALL 35674 0 0
23770: GO 23803
23772: LD_INT 7
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23787
23780: POP
// hHackChangeUnitSide ; 8 :
23781: CALL 35716 0 0
23785: GO 23803
23787: LD_INT 8
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23802
23795: POP
// hHackFog ; end ;
23796: CALL 35817 0 0
23800: GO 23803
23802: POP
// end ; end ;
23803: LD_VAR 0 7
23807: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
23808: GO 23810
23810: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
23811: LD_STRING initStreamRollete();
23813: PPUSH
23814: CALL_OW 559
// InitStreamMode ;
23818: CALL 23827 0 0
// DefineStreamItems ( ) ;
23822: CALL 24267 0 0
// end ;
23826: END
// function InitStreamMode ; begin
23827: LD_INT 0
23829: PPUSH
// streamModeActive := false ;
23830: LD_ADDR_EXP 71
23834: PUSH
23835: LD_INT 0
23837: ST_TO_ADDR
// normalCounter := 36 ;
23838: LD_ADDR_EXP 72
23842: PUSH
23843: LD_INT 36
23845: ST_TO_ADDR
// hardcoreCounter := 16 ;
23846: LD_ADDR_EXP 73
23850: PUSH
23851: LD_INT 16
23853: ST_TO_ADDR
// sRocket := false ;
23854: LD_ADDR_EXP 76
23858: PUSH
23859: LD_INT 0
23861: ST_TO_ADDR
// sSpeed := false ;
23862: LD_ADDR_EXP 75
23866: PUSH
23867: LD_INT 0
23869: ST_TO_ADDR
// sEngine := false ;
23870: LD_ADDR_EXP 77
23874: PUSH
23875: LD_INT 0
23877: ST_TO_ADDR
// sSpec := false ;
23878: LD_ADDR_EXP 74
23882: PUSH
23883: LD_INT 0
23885: ST_TO_ADDR
// sLevel := false ;
23886: LD_ADDR_EXP 78
23890: PUSH
23891: LD_INT 0
23893: ST_TO_ADDR
// sArmoury := false ;
23894: LD_ADDR_EXP 79
23898: PUSH
23899: LD_INT 0
23901: ST_TO_ADDR
// sRadar := false ;
23902: LD_ADDR_EXP 80
23906: PUSH
23907: LD_INT 0
23909: ST_TO_ADDR
// sBunker := false ;
23910: LD_ADDR_EXP 81
23914: PUSH
23915: LD_INT 0
23917: ST_TO_ADDR
// sHack := false ;
23918: LD_ADDR_EXP 82
23922: PUSH
23923: LD_INT 0
23925: ST_TO_ADDR
// sFire := false ;
23926: LD_ADDR_EXP 83
23930: PUSH
23931: LD_INT 0
23933: ST_TO_ADDR
// sRefresh := false ;
23934: LD_ADDR_EXP 84
23938: PUSH
23939: LD_INT 0
23941: ST_TO_ADDR
// sExp := false ;
23942: LD_ADDR_EXP 85
23946: PUSH
23947: LD_INT 0
23949: ST_TO_ADDR
// sDepot := false ;
23950: LD_ADDR_EXP 86
23954: PUSH
23955: LD_INT 0
23957: ST_TO_ADDR
// sFlag := false ;
23958: LD_ADDR_EXP 87
23962: PUSH
23963: LD_INT 0
23965: ST_TO_ADDR
// sKamikadze := false ;
23966: LD_ADDR_EXP 95
23970: PUSH
23971: LD_INT 0
23973: ST_TO_ADDR
// sTroll := false ;
23974: LD_ADDR_EXP 96
23978: PUSH
23979: LD_INT 0
23981: ST_TO_ADDR
// sSlow := false ;
23982: LD_ADDR_EXP 97
23986: PUSH
23987: LD_INT 0
23989: ST_TO_ADDR
// sLack := false ;
23990: LD_ADDR_EXP 98
23994: PUSH
23995: LD_INT 0
23997: ST_TO_ADDR
// sTank := false ;
23998: LD_ADDR_EXP 100
24002: PUSH
24003: LD_INT 0
24005: ST_TO_ADDR
// sRemote := false ;
24006: LD_ADDR_EXP 101
24010: PUSH
24011: LD_INT 0
24013: ST_TO_ADDR
// sPowell := false ;
24014: LD_ADDR_EXP 102
24018: PUSH
24019: LD_INT 0
24021: ST_TO_ADDR
// sTeleport := false ;
24022: LD_ADDR_EXP 105
24026: PUSH
24027: LD_INT 0
24029: ST_TO_ADDR
// sOilTower := false ;
24030: LD_ADDR_EXP 107
24034: PUSH
24035: LD_INT 0
24037: ST_TO_ADDR
// sShovel := false ;
24038: LD_ADDR_EXP 108
24042: PUSH
24043: LD_INT 0
24045: ST_TO_ADDR
// sSheik := false ;
24046: LD_ADDR_EXP 109
24050: PUSH
24051: LD_INT 0
24053: ST_TO_ADDR
// sEarthquake := false ;
24054: LD_ADDR_EXP 111
24058: PUSH
24059: LD_INT 0
24061: ST_TO_ADDR
// sAI := false ;
24062: LD_ADDR_EXP 112
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
// sCargo := false ;
24070: LD_ADDR_EXP 115
24074: PUSH
24075: LD_INT 0
24077: ST_TO_ADDR
// sDLaser := false ;
24078: LD_ADDR_EXP 116
24082: PUSH
24083: LD_INT 0
24085: ST_TO_ADDR
// sExchange := false ;
24086: LD_ADDR_EXP 117
24090: PUSH
24091: LD_INT 0
24093: ST_TO_ADDR
// sFac := false ;
24094: LD_ADDR_EXP 118
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// sPower := false ;
24102: LD_ADDR_EXP 119
24106: PUSH
24107: LD_INT 0
24109: ST_TO_ADDR
// sRandom := false ;
24110: LD_ADDR_EXP 120
24114: PUSH
24115: LD_INT 0
24117: ST_TO_ADDR
// sShield := false ;
24118: LD_ADDR_EXP 121
24122: PUSH
24123: LD_INT 0
24125: ST_TO_ADDR
// sTime := false ;
24126: LD_ADDR_EXP 122
24130: PUSH
24131: LD_INT 0
24133: ST_TO_ADDR
// sTools := false ;
24134: LD_ADDR_EXP 123
24138: PUSH
24139: LD_INT 0
24141: ST_TO_ADDR
// sSold := false ;
24142: LD_ADDR_EXP 88
24146: PUSH
24147: LD_INT 0
24149: ST_TO_ADDR
// sDiff := false ;
24150: LD_ADDR_EXP 89
24154: PUSH
24155: LD_INT 0
24157: ST_TO_ADDR
// sFog := false ;
24158: LD_ADDR_EXP 92
24162: PUSH
24163: LD_INT 0
24165: ST_TO_ADDR
// sReset := false ;
24166: LD_ADDR_EXP 93
24170: PUSH
24171: LD_INT 0
24173: ST_TO_ADDR
// sSun := false ;
24174: LD_ADDR_EXP 94
24178: PUSH
24179: LD_INT 0
24181: ST_TO_ADDR
// sTiger := false ;
24182: LD_ADDR_EXP 90
24186: PUSH
24187: LD_INT 0
24189: ST_TO_ADDR
// sBomb := false ;
24190: LD_ADDR_EXP 91
24194: PUSH
24195: LD_INT 0
24197: ST_TO_ADDR
// sWound := false ;
24198: LD_ADDR_EXP 99
24202: PUSH
24203: LD_INT 0
24205: ST_TO_ADDR
// sBetray := false ;
24206: LD_ADDR_EXP 103
24210: PUSH
24211: LD_INT 0
24213: ST_TO_ADDR
// sContamin := false ;
24214: LD_ADDR_EXP 104
24218: PUSH
24219: LD_INT 0
24221: ST_TO_ADDR
// sOil := false ;
24222: LD_ADDR_EXP 106
24226: PUSH
24227: LD_INT 0
24229: ST_TO_ADDR
// sStu := false ;
24230: LD_ADDR_EXP 110
24234: PUSH
24235: LD_INT 0
24237: ST_TO_ADDR
// sBazooka := false ;
24238: LD_ADDR_EXP 113
24242: PUSH
24243: LD_INT 0
24245: ST_TO_ADDR
// sMortar := false ;
24246: LD_ADDR_EXP 114
24250: PUSH
24251: LD_INT 0
24253: ST_TO_ADDR
// sRanger := false ;
24254: LD_ADDR_EXP 124
24258: PUSH
24259: LD_INT 0
24261: ST_TO_ADDR
// end ;
24262: LD_VAR 0 1
24266: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
24273: PPUSH
// result := [ ] ;
24274: LD_ADDR_VAR 0 1
24278: PUSH
24279: EMPTY
24280: ST_TO_ADDR
// if campaign_id = 1 then
24281: LD_OWVAR 69
24285: PUSH
24286: LD_INT 1
24288: EQUAL
24289: IFFALSE 27227
// begin case mission_number of 1 :
24291: LD_OWVAR 70
24295: PUSH
24296: LD_INT 1
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24368
24304: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24305: LD_ADDR_VAR 0 1
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: LD_INT 4
24315: PUSH
24316: LD_INT 11
24318: PUSH
24319: LD_INT 12
24321: PUSH
24322: LD_INT 15
24324: PUSH
24325: LD_INT 16
24327: PUSH
24328: LD_INT 22
24330: PUSH
24331: LD_INT 23
24333: PUSH
24334: LD_INT 26
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 101
24350: PUSH
24351: LD_INT 102
24353: PUSH
24354: LD_INT 106
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: ST_TO_ADDR
24366: GO 27225
24368: LD_INT 2
24370: DOUBLE
24371: EQUAL
24372: IFTRUE 24376
24374: GO 24448
24376: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24377: LD_ADDR_VAR 0 1
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 4
24387: PUSH
24388: LD_INT 11
24390: PUSH
24391: LD_INT 12
24393: PUSH
24394: LD_INT 15
24396: PUSH
24397: LD_INT 16
24399: PUSH
24400: LD_INT 22
24402: PUSH
24403: LD_INT 23
24405: PUSH
24406: LD_INT 26
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 101
24422: PUSH
24423: LD_INT 102
24425: PUSH
24426: LD_INT 105
24428: PUSH
24429: LD_INT 106
24431: PUSH
24432: LD_INT 108
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: ST_TO_ADDR
24446: GO 27225
24448: LD_INT 3
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24532
24456: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
24457: LD_ADDR_VAR 0 1
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: LD_INT 4
24467: PUSH
24468: LD_INT 5
24470: PUSH
24471: LD_INT 11
24473: PUSH
24474: LD_INT 12
24476: PUSH
24477: LD_INT 15
24479: PUSH
24480: LD_INT 16
24482: PUSH
24483: LD_INT 22
24485: PUSH
24486: LD_INT 26
24488: PUSH
24489: LD_INT 36
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 101
24506: PUSH
24507: LD_INT 102
24509: PUSH
24510: LD_INT 105
24512: PUSH
24513: LD_INT 106
24515: PUSH
24516: LD_INT 108
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: ST_TO_ADDR
24530: GO 27225
24532: LD_INT 4
24534: DOUBLE
24535: EQUAL
24536: IFTRUE 24540
24538: GO 24624
24540: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
24541: LD_ADDR_VAR 0 1
24545: PUSH
24546: LD_INT 2
24548: PUSH
24549: LD_INT 4
24551: PUSH
24552: LD_INT 5
24554: PUSH
24555: LD_INT 8
24557: PUSH
24558: LD_INT 11
24560: PUSH
24561: LD_INT 12
24563: PUSH
24564: LD_INT 15
24566: PUSH
24567: LD_INT 16
24569: PUSH
24570: LD_INT 22
24572: PUSH
24573: LD_INT 23
24575: PUSH
24576: LD_INT 26
24578: PUSH
24579: LD_INT 36
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 101
24598: PUSH
24599: LD_INT 102
24601: PUSH
24602: LD_INT 105
24604: PUSH
24605: LD_INT 106
24607: PUSH
24608: LD_INT 108
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: ST_TO_ADDR
24622: GO 27225
24624: LD_INT 5
24626: DOUBLE
24627: EQUAL
24628: IFTRUE 24632
24630: GO 24732
24632: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
24633: LD_ADDR_VAR 0 1
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: LD_INT 4
24643: PUSH
24644: LD_INT 5
24646: PUSH
24647: LD_INT 6
24649: PUSH
24650: LD_INT 8
24652: PUSH
24653: LD_INT 11
24655: PUSH
24656: LD_INT 12
24658: PUSH
24659: LD_INT 15
24661: PUSH
24662: LD_INT 16
24664: PUSH
24665: LD_INT 22
24667: PUSH
24668: LD_INT 23
24670: PUSH
24671: LD_INT 25
24673: PUSH
24674: LD_INT 26
24676: PUSH
24677: LD_INT 36
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 101
24698: PUSH
24699: LD_INT 102
24701: PUSH
24702: LD_INT 105
24704: PUSH
24705: LD_INT 106
24707: PUSH
24708: LD_INT 108
24710: PUSH
24711: LD_INT 109
24713: PUSH
24714: LD_INT 112
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: ST_TO_ADDR
24730: GO 27225
24732: LD_INT 6
24734: DOUBLE
24735: EQUAL
24736: IFTRUE 24740
24738: GO 24860
24740: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
24741: LD_ADDR_VAR 0 1
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 4
24751: PUSH
24752: LD_INT 5
24754: PUSH
24755: LD_INT 6
24757: PUSH
24758: LD_INT 8
24760: PUSH
24761: LD_INT 11
24763: PUSH
24764: LD_INT 12
24766: PUSH
24767: LD_INT 15
24769: PUSH
24770: LD_INT 16
24772: PUSH
24773: LD_INT 20
24775: PUSH
24776: LD_INT 21
24778: PUSH
24779: LD_INT 22
24781: PUSH
24782: LD_INT 23
24784: PUSH
24785: LD_INT 25
24787: PUSH
24788: LD_INT 26
24790: PUSH
24791: LD_INT 30
24793: PUSH
24794: LD_INT 31
24796: PUSH
24797: LD_INT 32
24799: PUSH
24800: LD_INT 36
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 101
24826: PUSH
24827: LD_INT 102
24829: PUSH
24830: LD_INT 105
24832: PUSH
24833: LD_INT 106
24835: PUSH
24836: LD_INT 108
24838: PUSH
24839: LD_INT 109
24841: PUSH
24842: LD_INT 112
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: ST_TO_ADDR
24858: GO 27225
24860: LD_INT 7
24862: DOUBLE
24863: EQUAL
24864: IFTRUE 24868
24866: GO 24968
24868: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
24869: LD_ADDR_VAR 0 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 4
24879: PUSH
24880: LD_INT 5
24882: PUSH
24883: LD_INT 7
24885: PUSH
24886: LD_INT 11
24888: PUSH
24889: LD_INT 12
24891: PUSH
24892: LD_INT 15
24894: PUSH
24895: LD_INT 16
24897: PUSH
24898: LD_INT 20
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 22
24906: PUSH
24907: LD_INT 23
24909: PUSH
24910: LD_INT 25
24912: PUSH
24913: LD_INT 26
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 101
24934: PUSH
24935: LD_INT 102
24937: PUSH
24938: LD_INT 103
24940: PUSH
24941: LD_INT 105
24943: PUSH
24944: LD_INT 106
24946: PUSH
24947: LD_INT 108
24949: PUSH
24950: LD_INT 112
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: ST_TO_ADDR
24966: GO 27225
24968: LD_INT 8
24970: DOUBLE
24971: EQUAL
24972: IFTRUE 24976
24974: GO 25104
24976: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
24977: LD_ADDR_VAR 0 1
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 4
24987: PUSH
24988: LD_INT 5
24990: PUSH
24991: LD_INT 6
24993: PUSH
24994: LD_INT 7
24996: PUSH
24997: LD_INT 8
24999: PUSH
25000: LD_INT 11
25002: PUSH
25003: LD_INT 12
25005: PUSH
25006: LD_INT 15
25008: PUSH
25009: LD_INT 16
25011: PUSH
25012: LD_INT 20
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 22
25020: PUSH
25021: LD_INT 23
25023: PUSH
25024: LD_INT 25
25026: PUSH
25027: LD_INT 26
25029: PUSH
25030: LD_INT 30
25032: PUSH
25033: LD_INT 31
25035: PUSH
25036: LD_INT 32
25038: PUSH
25039: LD_INT 36
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 101
25066: PUSH
25067: LD_INT 102
25069: PUSH
25070: LD_INT 103
25072: PUSH
25073: LD_INT 105
25075: PUSH
25076: LD_INT 106
25078: PUSH
25079: LD_INT 108
25081: PUSH
25082: LD_INT 109
25084: PUSH
25085: LD_INT 112
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: ST_TO_ADDR
25102: GO 27225
25104: LD_INT 9
25106: DOUBLE
25107: EQUAL
25108: IFTRUE 25112
25110: GO 25248
25112: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25113: LD_ADDR_VAR 0 1
25117: PUSH
25118: LD_INT 2
25120: PUSH
25121: LD_INT 4
25123: PUSH
25124: LD_INT 5
25126: PUSH
25127: LD_INT 6
25129: PUSH
25130: LD_INT 7
25132: PUSH
25133: LD_INT 8
25135: PUSH
25136: LD_INT 11
25138: PUSH
25139: LD_INT 12
25141: PUSH
25142: LD_INT 15
25144: PUSH
25145: LD_INT 16
25147: PUSH
25148: LD_INT 20
25150: PUSH
25151: LD_INT 21
25153: PUSH
25154: LD_INT 22
25156: PUSH
25157: LD_INT 23
25159: PUSH
25160: LD_INT 25
25162: PUSH
25163: LD_INT 26
25165: PUSH
25166: LD_INT 28
25168: PUSH
25169: LD_INT 30
25171: PUSH
25172: LD_INT 31
25174: PUSH
25175: LD_INT 32
25177: PUSH
25178: LD_INT 36
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 101
25206: PUSH
25207: LD_INT 102
25209: PUSH
25210: LD_INT 103
25212: PUSH
25213: LD_INT 105
25215: PUSH
25216: LD_INT 106
25218: PUSH
25219: LD_INT 108
25221: PUSH
25222: LD_INT 109
25224: PUSH
25225: LD_INT 112
25227: PUSH
25228: LD_INT 114
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 27225
25248: LD_INT 10
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25440
25256: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25257: LD_ADDR_VAR 0 1
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: LD_INT 4
25267: PUSH
25268: LD_INT 5
25270: PUSH
25271: LD_INT 6
25273: PUSH
25274: LD_INT 7
25276: PUSH
25277: LD_INT 8
25279: PUSH
25280: LD_INT 9
25282: PUSH
25283: LD_INT 10
25285: PUSH
25286: LD_INT 11
25288: PUSH
25289: LD_INT 12
25291: PUSH
25292: LD_INT 13
25294: PUSH
25295: LD_INT 14
25297: PUSH
25298: LD_INT 15
25300: PUSH
25301: LD_INT 16
25303: PUSH
25304: LD_INT 17
25306: PUSH
25307: LD_INT 18
25309: PUSH
25310: LD_INT 19
25312: PUSH
25313: LD_INT 20
25315: PUSH
25316: LD_INT 21
25318: PUSH
25319: LD_INT 22
25321: PUSH
25322: LD_INT 23
25324: PUSH
25325: LD_INT 24
25327: PUSH
25328: LD_INT 25
25330: PUSH
25331: LD_INT 26
25333: PUSH
25334: LD_INT 28
25336: PUSH
25337: LD_INT 30
25339: PUSH
25340: LD_INT 31
25342: PUSH
25343: LD_INT 32
25345: PUSH
25346: LD_INT 36
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 101
25382: PUSH
25383: LD_INT 102
25385: PUSH
25386: LD_INT 103
25388: PUSH
25389: LD_INT 104
25391: PUSH
25392: LD_INT 105
25394: PUSH
25395: LD_INT 106
25397: PUSH
25398: LD_INT 107
25400: PUSH
25401: LD_INT 108
25403: PUSH
25404: LD_INT 109
25406: PUSH
25407: LD_INT 110
25409: PUSH
25410: LD_INT 111
25412: PUSH
25413: LD_INT 112
25415: PUSH
25416: LD_INT 114
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: ST_TO_ADDR
25438: GO 27225
25440: LD_INT 11
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25640
25448: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
25449: LD_ADDR_VAR 0 1
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: LD_INT 3
25459: PUSH
25460: LD_INT 4
25462: PUSH
25463: LD_INT 5
25465: PUSH
25466: LD_INT 6
25468: PUSH
25469: LD_INT 7
25471: PUSH
25472: LD_INT 8
25474: PUSH
25475: LD_INT 9
25477: PUSH
25478: LD_INT 10
25480: PUSH
25481: LD_INT 11
25483: PUSH
25484: LD_INT 12
25486: PUSH
25487: LD_INT 13
25489: PUSH
25490: LD_INT 14
25492: PUSH
25493: LD_INT 15
25495: PUSH
25496: LD_INT 16
25498: PUSH
25499: LD_INT 17
25501: PUSH
25502: LD_INT 18
25504: PUSH
25505: LD_INT 19
25507: PUSH
25508: LD_INT 20
25510: PUSH
25511: LD_INT 21
25513: PUSH
25514: LD_INT 22
25516: PUSH
25517: LD_INT 23
25519: PUSH
25520: LD_INT 24
25522: PUSH
25523: LD_INT 25
25525: PUSH
25526: LD_INT 26
25528: PUSH
25529: LD_INT 28
25531: PUSH
25532: LD_INT 30
25534: PUSH
25535: LD_INT 31
25537: PUSH
25538: LD_INT 32
25540: PUSH
25541: LD_INT 34
25543: PUSH
25544: LD_INT 36
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 101
25582: PUSH
25583: LD_INT 102
25585: PUSH
25586: LD_INT 103
25588: PUSH
25589: LD_INT 104
25591: PUSH
25592: LD_INT 105
25594: PUSH
25595: LD_INT 106
25597: PUSH
25598: LD_INT 107
25600: PUSH
25601: LD_INT 108
25603: PUSH
25604: LD_INT 109
25606: PUSH
25607: LD_INT 110
25609: PUSH
25610: LD_INT 111
25612: PUSH
25613: LD_INT 112
25615: PUSH
25616: LD_INT 114
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: ST_TO_ADDR
25638: GO 27225
25640: LD_INT 12
25642: DOUBLE
25643: EQUAL
25644: IFTRUE 25648
25646: GO 25856
25648: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
25649: LD_ADDR_VAR 0 1
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: LD_INT 3
25662: PUSH
25663: LD_INT 4
25665: PUSH
25666: LD_INT 5
25668: PUSH
25669: LD_INT 6
25671: PUSH
25672: LD_INT 7
25674: PUSH
25675: LD_INT 8
25677: PUSH
25678: LD_INT 9
25680: PUSH
25681: LD_INT 10
25683: PUSH
25684: LD_INT 11
25686: PUSH
25687: LD_INT 12
25689: PUSH
25690: LD_INT 13
25692: PUSH
25693: LD_INT 14
25695: PUSH
25696: LD_INT 15
25698: PUSH
25699: LD_INT 16
25701: PUSH
25702: LD_INT 17
25704: PUSH
25705: LD_INT 18
25707: PUSH
25708: LD_INT 19
25710: PUSH
25711: LD_INT 20
25713: PUSH
25714: LD_INT 21
25716: PUSH
25717: LD_INT 22
25719: PUSH
25720: LD_INT 23
25722: PUSH
25723: LD_INT 24
25725: PUSH
25726: LD_INT 25
25728: PUSH
25729: LD_INT 26
25731: PUSH
25732: LD_INT 27
25734: PUSH
25735: LD_INT 28
25737: PUSH
25738: LD_INT 30
25740: PUSH
25741: LD_INT 31
25743: PUSH
25744: LD_INT 32
25746: PUSH
25747: LD_INT 33
25749: PUSH
25750: LD_INT 34
25752: PUSH
25753: LD_INT 36
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 101
25794: PUSH
25795: LD_INT 102
25797: PUSH
25798: LD_INT 103
25800: PUSH
25801: LD_INT 104
25803: PUSH
25804: LD_INT 105
25806: PUSH
25807: LD_INT 106
25809: PUSH
25810: LD_INT 107
25812: PUSH
25813: LD_INT 108
25815: PUSH
25816: LD_INT 109
25818: PUSH
25819: LD_INT 110
25821: PUSH
25822: LD_INT 111
25824: PUSH
25825: LD_INT 112
25827: PUSH
25828: LD_INT 113
25830: PUSH
25831: LD_INT 114
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: ST_TO_ADDR
25854: GO 27225
25856: LD_INT 13
25858: DOUBLE
25859: EQUAL
25860: IFTRUE 25864
25862: GO 26060
25864: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
25865: LD_ADDR_VAR 0 1
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: LD_INT 4
25881: PUSH
25882: LD_INT 5
25884: PUSH
25885: LD_INT 8
25887: PUSH
25888: LD_INT 9
25890: PUSH
25891: LD_INT 10
25893: PUSH
25894: LD_INT 11
25896: PUSH
25897: LD_INT 12
25899: PUSH
25900: LD_INT 14
25902: PUSH
25903: LD_INT 15
25905: PUSH
25906: LD_INT 16
25908: PUSH
25909: LD_INT 17
25911: PUSH
25912: LD_INT 18
25914: PUSH
25915: LD_INT 19
25917: PUSH
25918: LD_INT 20
25920: PUSH
25921: LD_INT 21
25923: PUSH
25924: LD_INT 22
25926: PUSH
25927: LD_INT 23
25929: PUSH
25930: LD_INT 24
25932: PUSH
25933: LD_INT 25
25935: PUSH
25936: LD_INT 26
25938: PUSH
25939: LD_INT 27
25941: PUSH
25942: LD_INT 28
25944: PUSH
25945: LD_INT 30
25947: PUSH
25948: LD_INT 31
25950: PUSH
25951: LD_INT 32
25953: PUSH
25954: LD_INT 33
25956: PUSH
25957: LD_INT 34
25959: PUSH
25960: LD_INT 36
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 101
25998: PUSH
25999: LD_INT 102
26001: PUSH
26002: LD_INT 103
26004: PUSH
26005: LD_INT 104
26007: PUSH
26008: LD_INT 105
26010: PUSH
26011: LD_INT 106
26013: PUSH
26014: LD_INT 107
26016: PUSH
26017: LD_INT 108
26019: PUSH
26020: LD_INT 109
26022: PUSH
26023: LD_INT 110
26025: PUSH
26026: LD_INT 111
26028: PUSH
26029: LD_INT 112
26031: PUSH
26032: LD_INT 113
26034: PUSH
26035: LD_INT 114
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: ST_TO_ADDR
26058: GO 27225
26060: LD_INT 14
26062: DOUBLE
26063: EQUAL
26064: IFTRUE 26068
26066: GO 26280
26068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26069: LD_ADDR_VAR 0 1
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 4
26085: PUSH
26086: LD_INT 5
26088: PUSH
26089: LD_INT 6
26091: PUSH
26092: LD_INT 7
26094: PUSH
26095: LD_INT 8
26097: PUSH
26098: LD_INT 9
26100: PUSH
26101: LD_INT 10
26103: PUSH
26104: LD_INT 11
26106: PUSH
26107: LD_INT 12
26109: PUSH
26110: LD_INT 13
26112: PUSH
26113: LD_INT 14
26115: PUSH
26116: LD_INT 15
26118: PUSH
26119: LD_INT 16
26121: PUSH
26122: LD_INT 17
26124: PUSH
26125: LD_INT 18
26127: PUSH
26128: LD_INT 19
26130: PUSH
26131: LD_INT 20
26133: PUSH
26134: LD_INT 21
26136: PUSH
26137: LD_INT 22
26139: PUSH
26140: LD_INT 23
26142: PUSH
26143: LD_INT 24
26145: PUSH
26146: LD_INT 25
26148: PUSH
26149: LD_INT 26
26151: PUSH
26152: LD_INT 27
26154: PUSH
26155: LD_INT 28
26157: PUSH
26158: LD_INT 29
26160: PUSH
26161: LD_INT 30
26163: PUSH
26164: LD_INT 31
26166: PUSH
26167: LD_INT 32
26169: PUSH
26170: LD_INT 33
26172: PUSH
26173: LD_INT 34
26175: PUSH
26176: LD_INT 36
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 101
26218: PUSH
26219: LD_INT 102
26221: PUSH
26222: LD_INT 103
26224: PUSH
26225: LD_INT 104
26227: PUSH
26228: LD_INT 105
26230: PUSH
26231: LD_INT 106
26233: PUSH
26234: LD_INT 107
26236: PUSH
26237: LD_INT 108
26239: PUSH
26240: LD_INT 109
26242: PUSH
26243: LD_INT 110
26245: PUSH
26246: LD_INT 111
26248: PUSH
26249: LD_INT 112
26251: PUSH
26252: LD_INT 113
26254: PUSH
26255: LD_INT 114
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: ST_TO_ADDR
26278: GO 27225
26280: LD_INT 15
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26500
26288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26289: LD_ADDR_VAR 0 1
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 3
26302: PUSH
26303: LD_INT 4
26305: PUSH
26306: LD_INT 5
26308: PUSH
26309: LD_INT 6
26311: PUSH
26312: LD_INT 7
26314: PUSH
26315: LD_INT 8
26317: PUSH
26318: LD_INT 9
26320: PUSH
26321: LD_INT 10
26323: PUSH
26324: LD_INT 11
26326: PUSH
26327: LD_INT 12
26329: PUSH
26330: LD_INT 13
26332: PUSH
26333: LD_INT 14
26335: PUSH
26336: LD_INT 15
26338: PUSH
26339: LD_INT 16
26341: PUSH
26342: LD_INT 17
26344: PUSH
26345: LD_INT 18
26347: PUSH
26348: LD_INT 19
26350: PUSH
26351: LD_INT 20
26353: PUSH
26354: LD_INT 21
26356: PUSH
26357: LD_INT 22
26359: PUSH
26360: LD_INT 23
26362: PUSH
26363: LD_INT 24
26365: PUSH
26366: LD_INT 25
26368: PUSH
26369: LD_INT 26
26371: PUSH
26372: LD_INT 27
26374: PUSH
26375: LD_INT 28
26377: PUSH
26378: LD_INT 29
26380: PUSH
26381: LD_INT 30
26383: PUSH
26384: LD_INT 31
26386: PUSH
26387: LD_INT 32
26389: PUSH
26390: LD_INT 33
26392: PUSH
26393: LD_INT 34
26395: PUSH
26396: LD_INT 36
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 101
26438: PUSH
26439: LD_INT 102
26441: PUSH
26442: LD_INT 103
26444: PUSH
26445: LD_INT 104
26447: PUSH
26448: LD_INT 105
26450: PUSH
26451: LD_INT 106
26453: PUSH
26454: LD_INT 107
26456: PUSH
26457: LD_INT 108
26459: PUSH
26460: LD_INT 109
26462: PUSH
26463: LD_INT 110
26465: PUSH
26466: LD_INT 111
26468: PUSH
26469: LD_INT 112
26471: PUSH
26472: LD_INT 113
26474: PUSH
26475: LD_INT 114
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: ST_TO_ADDR
26498: GO 27225
26500: LD_INT 16
26502: DOUBLE
26503: EQUAL
26504: IFTRUE 26508
26506: GO 26632
26508: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
26509: LD_ADDR_VAR 0 1
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 4
26519: PUSH
26520: LD_INT 5
26522: PUSH
26523: LD_INT 7
26525: PUSH
26526: LD_INT 11
26528: PUSH
26529: LD_INT 12
26531: PUSH
26532: LD_INT 15
26534: PUSH
26535: LD_INT 16
26537: PUSH
26538: LD_INT 20
26540: PUSH
26541: LD_INT 21
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_INT 23
26549: PUSH
26550: LD_INT 25
26552: PUSH
26553: LD_INT 26
26555: PUSH
26556: LD_INT 30
26558: PUSH
26559: LD_INT 31
26561: PUSH
26562: LD_INT 32
26564: PUSH
26565: LD_INT 33
26567: PUSH
26568: LD_INT 34
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 101
26594: PUSH
26595: LD_INT 102
26597: PUSH
26598: LD_INT 103
26600: PUSH
26601: LD_INT 106
26603: PUSH
26604: LD_INT 108
26606: PUSH
26607: LD_INT 112
26609: PUSH
26610: LD_INT 113
26612: PUSH
26613: LD_INT 114
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: ST_TO_ADDR
26630: GO 27225
26632: LD_INT 17
26634: DOUBLE
26635: EQUAL
26636: IFTRUE 26640
26638: GO 26852
26640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
26641: LD_ADDR_VAR 0 1
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: LD_INT 3
26654: PUSH
26655: LD_INT 4
26657: PUSH
26658: LD_INT 5
26660: PUSH
26661: LD_INT 6
26663: PUSH
26664: LD_INT 7
26666: PUSH
26667: LD_INT 8
26669: PUSH
26670: LD_INT 9
26672: PUSH
26673: LD_INT 10
26675: PUSH
26676: LD_INT 11
26678: PUSH
26679: LD_INT 12
26681: PUSH
26682: LD_INT 13
26684: PUSH
26685: LD_INT 14
26687: PUSH
26688: LD_INT 15
26690: PUSH
26691: LD_INT 16
26693: PUSH
26694: LD_INT 17
26696: PUSH
26697: LD_INT 18
26699: PUSH
26700: LD_INT 19
26702: PUSH
26703: LD_INT 20
26705: PUSH
26706: LD_INT 21
26708: PUSH
26709: LD_INT 22
26711: PUSH
26712: LD_INT 23
26714: PUSH
26715: LD_INT 24
26717: PUSH
26718: LD_INT 25
26720: PUSH
26721: LD_INT 26
26723: PUSH
26724: LD_INT 27
26726: PUSH
26727: LD_INT 28
26729: PUSH
26730: LD_INT 29
26732: PUSH
26733: LD_INT 30
26735: PUSH
26736: LD_INT 31
26738: PUSH
26739: LD_INT 32
26741: PUSH
26742: LD_INT 33
26744: PUSH
26745: LD_INT 34
26747: PUSH
26748: LD_INT 36
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 101
26790: PUSH
26791: LD_INT 102
26793: PUSH
26794: LD_INT 103
26796: PUSH
26797: LD_INT 104
26799: PUSH
26800: LD_INT 105
26802: PUSH
26803: LD_INT 106
26805: PUSH
26806: LD_INT 107
26808: PUSH
26809: LD_INT 108
26811: PUSH
26812: LD_INT 109
26814: PUSH
26815: LD_INT 110
26817: PUSH
26818: LD_INT 111
26820: PUSH
26821: LD_INT 112
26823: PUSH
26824: LD_INT 113
26826: PUSH
26827: LD_INT 114
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: ST_TO_ADDR
26850: GO 27225
26852: LD_INT 18
26854: DOUBLE
26855: EQUAL
26856: IFTRUE 26860
26858: GO 26996
26860: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
26861: LD_ADDR_VAR 0 1
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 4
26871: PUSH
26872: LD_INT 5
26874: PUSH
26875: LD_INT 7
26877: PUSH
26878: LD_INT 11
26880: PUSH
26881: LD_INT 12
26883: PUSH
26884: LD_INT 15
26886: PUSH
26887: LD_INT 16
26889: PUSH
26890: LD_INT 20
26892: PUSH
26893: LD_INT 21
26895: PUSH
26896: LD_INT 22
26898: PUSH
26899: LD_INT 23
26901: PUSH
26902: LD_INT 25
26904: PUSH
26905: LD_INT 26
26907: PUSH
26908: LD_INT 30
26910: PUSH
26911: LD_INT 31
26913: PUSH
26914: LD_INT 32
26916: PUSH
26917: LD_INT 33
26919: PUSH
26920: LD_INT 34
26922: PUSH
26923: LD_INT 35
26925: PUSH
26926: LD_INT 36
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 101
26954: PUSH
26955: LD_INT 102
26957: PUSH
26958: LD_INT 103
26960: PUSH
26961: LD_INT 106
26963: PUSH
26964: LD_INT 108
26966: PUSH
26967: LD_INT 112
26969: PUSH
26970: LD_INT 113
26972: PUSH
26973: LD_INT 114
26975: PUSH
26976: LD_INT 115
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: ST_TO_ADDR
26994: GO 27225
26996: LD_INT 19
26998: DOUBLE
26999: EQUAL
27000: IFTRUE 27004
27002: GO 27224
27004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 3
27018: PUSH
27019: LD_INT 4
27021: PUSH
27022: LD_INT 5
27024: PUSH
27025: LD_INT 6
27027: PUSH
27028: LD_INT 7
27030: PUSH
27031: LD_INT 8
27033: PUSH
27034: LD_INT 9
27036: PUSH
27037: LD_INT 10
27039: PUSH
27040: LD_INT 11
27042: PUSH
27043: LD_INT 12
27045: PUSH
27046: LD_INT 13
27048: PUSH
27049: LD_INT 14
27051: PUSH
27052: LD_INT 15
27054: PUSH
27055: LD_INT 16
27057: PUSH
27058: LD_INT 17
27060: PUSH
27061: LD_INT 18
27063: PUSH
27064: LD_INT 19
27066: PUSH
27067: LD_INT 20
27069: PUSH
27070: LD_INT 21
27072: PUSH
27073: LD_INT 22
27075: PUSH
27076: LD_INT 23
27078: PUSH
27079: LD_INT 24
27081: PUSH
27082: LD_INT 25
27084: PUSH
27085: LD_INT 26
27087: PUSH
27088: LD_INT 27
27090: PUSH
27091: LD_INT 28
27093: PUSH
27094: LD_INT 29
27096: PUSH
27097: LD_INT 30
27099: PUSH
27100: LD_INT 31
27102: PUSH
27103: LD_INT 32
27105: PUSH
27106: LD_INT 33
27108: PUSH
27109: LD_INT 34
27111: PUSH
27112: LD_INT 35
27114: PUSH
27115: LD_INT 36
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 101
27158: PUSH
27159: LD_INT 102
27161: PUSH
27162: LD_INT 103
27164: PUSH
27165: LD_INT 104
27167: PUSH
27168: LD_INT 105
27170: PUSH
27171: LD_INT 106
27173: PUSH
27174: LD_INT 107
27176: PUSH
27177: LD_INT 108
27179: PUSH
27180: LD_INT 109
27182: PUSH
27183: LD_INT 110
27185: PUSH
27186: LD_INT 111
27188: PUSH
27189: LD_INT 112
27191: PUSH
27192: LD_INT 113
27194: PUSH
27195: LD_INT 114
27197: PUSH
27198: LD_INT 115
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: ST_TO_ADDR
27222: GO 27225
27224: POP
// end else
27225: GO 27444
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27227: LD_ADDR_VAR 0 1
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: LD_INT 4
27243: PUSH
27244: LD_INT 5
27246: PUSH
27247: LD_INT 6
27249: PUSH
27250: LD_INT 7
27252: PUSH
27253: LD_INT 8
27255: PUSH
27256: LD_INT 9
27258: PUSH
27259: LD_INT 10
27261: PUSH
27262: LD_INT 11
27264: PUSH
27265: LD_INT 12
27267: PUSH
27268: LD_INT 13
27270: PUSH
27271: LD_INT 14
27273: PUSH
27274: LD_INT 15
27276: PUSH
27277: LD_INT 16
27279: PUSH
27280: LD_INT 17
27282: PUSH
27283: LD_INT 18
27285: PUSH
27286: LD_INT 19
27288: PUSH
27289: LD_INT 20
27291: PUSH
27292: LD_INT 21
27294: PUSH
27295: LD_INT 22
27297: PUSH
27298: LD_INT 23
27300: PUSH
27301: LD_INT 24
27303: PUSH
27304: LD_INT 25
27306: PUSH
27307: LD_INT 26
27309: PUSH
27310: LD_INT 27
27312: PUSH
27313: LD_INT 28
27315: PUSH
27316: LD_INT 29
27318: PUSH
27319: LD_INT 30
27321: PUSH
27322: LD_INT 31
27324: PUSH
27325: LD_INT 32
27327: PUSH
27328: LD_INT 33
27330: PUSH
27331: LD_INT 34
27333: PUSH
27334: LD_INT 35
27336: PUSH
27337: LD_INT 36
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 101
27380: PUSH
27381: LD_INT 102
27383: PUSH
27384: LD_INT 103
27386: PUSH
27387: LD_INT 104
27389: PUSH
27390: LD_INT 105
27392: PUSH
27393: LD_INT 106
27395: PUSH
27396: LD_INT 107
27398: PUSH
27399: LD_INT 108
27401: PUSH
27402: LD_INT 109
27404: PUSH
27405: LD_INT 110
27407: PUSH
27408: LD_INT 111
27410: PUSH
27411: LD_INT 112
27413: PUSH
27414: LD_INT 113
27416: PUSH
27417: LD_INT 114
27419: PUSH
27420: LD_INT 115
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// if result then
27444: LD_VAR 0 1
27448: IFFALSE 27737
// begin normal :=  ;
27450: LD_ADDR_VAR 0 3
27454: PUSH
27455: LD_STRING 
27457: ST_TO_ADDR
// hardcore :=  ;
27458: LD_ADDR_VAR 0 4
27462: PUSH
27463: LD_STRING 
27465: ST_TO_ADDR
// for i = 1 to normalCounter do
27466: LD_ADDR_VAR 0 5
27470: PUSH
27471: DOUBLE
27472: LD_INT 1
27474: DEC
27475: ST_TO_ADDR
27476: LD_EXP 72
27480: PUSH
27481: FOR_TO
27482: IFFALSE 27583
// begin tmp := 0 ;
27484: LD_ADDR_VAR 0 2
27488: PUSH
27489: LD_STRING 0
27491: ST_TO_ADDR
// if result [ 1 ] then
27492: LD_VAR 0 1
27496: PUSH
27497: LD_INT 1
27499: ARRAY
27500: IFFALSE 27565
// if result [ 1 ] [ 1 ] = i then
27502: LD_VAR 0 1
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PUSH
27511: LD_INT 1
27513: ARRAY
27514: PUSH
27515: LD_VAR 0 5
27519: EQUAL
27520: IFFALSE 27565
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27522: LD_ADDR_VAR 0 1
27526: PUSH
27527: LD_VAR 0 1
27531: PPUSH
27532: LD_INT 1
27534: PPUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: PPUSH
27544: LD_INT 1
27546: PPUSH
27547: CALL_OW 3
27551: PPUSH
27552: CALL_OW 1
27556: ST_TO_ADDR
// tmp := 1 ;
27557: LD_ADDR_VAR 0 2
27561: PUSH
27562: LD_STRING 1
27564: ST_TO_ADDR
// end ; normal := normal & tmp ;
27565: LD_ADDR_VAR 0 3
27569: PUSH
27570: LD_VAR 0 3
27574: PUSH
27575: LD_VAR 0 2
27579: STR
27580: ST_TO_ADDR
// end ;
27581: GO 27481
27583: POP
27584: POP
// for i = 1 to hardcoreCounter do
27585: LD_ADDR_VAR 0 5
27589: PUSH
27590: DOUBLE
27591: LD_INT 1
27593: DEC
27594: ST_TO_ADDR
27595: LD_EXP 73
27599: PUSH
27600: FOR_TO
27601: IFFALSE 27706
// begin tmp := 0 ;
27603: LD_ADDR_VAR 0 2
27607: PUSH
27608: LD_STRING 0
27610: ST_TO_ADDR
// if result [ 2 ] then
27611: LD_VAR 0 1
27615: PUSH
27616: LD_INT 2
27618: ARRAY
27619: IFFALSE 27688
// if result [ 2 ] [ 1 ] = 100 + i then
27621: LD_VAR 0 1
27625: PUSH
27626: LD_INT 2
27628: ARRAY
27629: PUSH
27630: LD_INT 1
27632: ARRAY
27633: PUSH
27634: LD_INT 100
27636: PUSH
27637: LD_VAR 0 5
27641: PLUS
27642: EQUAL
27643: IFFALSE 27688
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27645: LD_ADDR_VAR 0 1
27649: PUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: LD_INT 2
27657: PPUSH
27658: LD_VAR 0 1
27662: PUSH
27663: LD_INT 2
27665: ARRAY
27666: PPUSH
27667: LD_INT 1
27669: PPUSH
27670: CALL_OW 3
27674: PPUSH
27675: CALL_OW 1
27679: ST_TO_ADDR
// tmp := 1 ;
27680: LD_ADDR_VAR 0 2
27684: PUSH
27685: LD_STRING 1
27687: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27688: LD_ADDR_VAR 0 4
27692: PUSH
27693: LD_VAR 0 4
27697: PUSH
27698: LD_VAR 0 2
27702: STR
27703: ST_TO_ADDR
// end ;
27704: GO 27600
27706: POP
27707: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
27708: LD_STRING getStreamItemsFromMission("
27710: PUSH
27711: LD_VAR 0 3
27715: STR
27716: PUSH
27717: LD_STRING ","
27719: STR
27720: PUSH
27721: LD_VAR 0 4
27725: STR
27726: PUSH
27727: LD_STRING ")
27729: STR
27730: PPUSH
27731: CALL_OW 559
// end else
27735: GO 27744
// ToLua ( getStreamItemsFromMission("","") ) ;
27737: LD_STRING getStreamItemsFromMission("","")
27739: PPUSH
27740: CALL_OW 559
// end ;
27744: LD_VAR 0 1
27748: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27749: LD_EXP 71
27753: PUSH
27754: LD_EXP 76
27758: AND
27759: IFFALSE 27883
27761: GO 27763
27763: DISABLE
27764: LD_INT 0
27766: PPUSH
27767: PPUSH
// begin enable ;
27768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27769: LD_ADDR_VAR 0 2
27773: PUSH
27774: LD_INT 22
27776: PUSH
27777: LD_OWVAR 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 2
27788: PUSH
27789: LD_INT 34
27791: PUSH
27792: LD_INT 7
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 34
27801: PUSH
27802: LD_INT 45
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 34
27811: PUSH
27812: LD_INT 28
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 34
27821: PUSH
27822: LD_INT 47
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PPUSH
27840: CALL_OW 69
27844: ST_TO_ADDR
// if not tmp then
27845: LD_VAR 0 2
27849: NOT
27850: IFFALSE 27854
// exit ;
27852: GO 27883
// for i in tmp do
27854: LD_ADDR_VAR 0 1
27858: PUSH
27859: LD_VAR 0 2
27863: PUSH
27864: FOR_IN
27865: IFFALSE 27881
// begin SetLives ( i , 0 ) ;
27867: LD_VAR 0 1
27871: PPUSH
27872: LD_INT 0
27874: PPUSH
27875: CALL_OW 234
// end ;
27879: GO 27864
27881: POP
27882: POP
// end ;
27883: PPOPN 2
27885: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27886: LD_EXP 71
27890: PUSH
27891: LD_EXP 77
27895: AND
27896: IFFALSE 27980
27898: GO 27900
27900: DISABLE
27901: LD_INT 0
27903: PPUSH
27904: PPUSH
// begin enable ;
27905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27906: LD_ADDR_VAR 0 2
27910: PUSH
27911: LD_INT 22
27913: PUSH
27914: LD_OWVAR 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 32
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PPUSH
27937: CALL_OW 69
27941: ST_TO_ADDR
// if not tmp then
27942: LD_VAR 0 2
27946: NOT
27947: IFFALSE 27951
// exit ;
27949: GO 27980
// for i in tmp do
27951: LD_ADDR_VAR 0 1
27955: PUSH
27956: LD_VAR 0 2
27960: PUSH
27961: FOR_IN
27962: IFFALSE 27978
// begin SetLives ( i , 0 ) ;
27964: LD_VAR 0 1
27968: PPUSH
27969: LD_INT 0
27971: PPUSH
27972: CALL_OW 234
// end ;
27976: GO 27961
27978: POP
27979: POP
// end ;
27980: PPOPN 2
27982: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27983: LD_EXP 71
27987: PUSH
27988: LD_EXP 74
27992: AND
27993: IFFALSE 28086
27995: GO 27997
27997: DISABLE
27998: LD_INT 0
28000: PPUSH
// begin enable ;
28001: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28002: LD_ADDR_VAR 0 1
28006: PUSH
28007: LD_INT 22
28009: PUSH
28010: LD_OWVAR 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: LD_INT 25
28024: PUSH
28025: LD_INT 5
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 25
28034: PUSH
28035: LD_INT 9
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 25
28044: PUSH
28045: LD_INT 8
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 69
28066: PUSH
28067: FOR_IN
28068: IFFALSE 28084
// begin SetClass ( i , 1 ) ;
28070: LD_VAR 0 1
28074: PPUSH
28075: LD_INT 1
28077: PPUSH
28078: CALL_OW 336
// end ;
28082: GO 28067
28084: POP
28085: POP
// end ;
28086: PPOPN 1
28088: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28089: LD_EXP 71
28093: PUSH
28094: LD_EXP 75
28098: AND
28099: PUSH
28100: LD_OWVAR 65
28104: PUSH
28105: LD_INT 7
28107: LESS
28108: AND
28109: IFFALSE 28123
28111: GO 28113
28113: DISABLE
// begin enable ;
28114: ENABLE
// game_speed := 7 ;
28115: LD_ADDR_OWVAR 65
28119: PUSH
28120: LD_INT 7
28122: ST_TO_ADDR
// end ;
28123: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28124: LD_EXP 71
28128: PUSH
28129: LD_EXP 78
28133: AND
28134: IFFALSE 28336
28136: GO 28138
28138: DISABLE
28139: LD_INT 0
28141: PPUSH
28142: PPUSH
28143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28144: LD_ADDR_VAR 0 3
28148: PUSH
28149: LD_INT 81
28151: PUSH
28152: LD_OWVAR 2
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 21
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PPUSH
28175: CALL_OW 69
28179: ST_TO_ADDR
// if not tmp then
28180: LD_VAR 0 3
28184: NOT
28185: IFFALSE 28189
// exit ;
28187: GO 28336
// if tmp > 5 then
28189: LD_VAR 0 3
28193: PUSH
28194: LD_INT 5
28196: GREATER
28197: IFFALSE 28209
// k := 5 else
28199: LD_ADDR_VAR 0 2
28203: PUSH
28204: LD_INT 5
28206: ST_TO_ADDR
28207: GO 28219
// k := tmp ;
28209: LD_ADDR_VAR 0 2
28213: PUSH
28214: LD_VAR 0 3
28218: ST_TO_ADDR
// for i := 1 to k do
28219: LD_ADDR_VAR 0 1
28223: PUSH
28224: DOUBLE
28225: LD_INT 1
28227: DEC
28228: ST_TO_ADDR
28229: LD_VAR 0 2
28233: PUSH
28234: FOR_TO
28235: IFFALSE 28334
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28237: LD_VAR 0 3
28241: PUSH
28242: LD_VAR 0 1
28246: ARRAY
28247: PPUSH
28248: LD_VAR 0 1
28252: PUSH
28253: LD_INT 4
28255: MOD
28256: PUSH
28257: LD_INT 1
28259: PLUS
28260: PPUSH
28261: CALL_OW 259
28265: PUSH
28266: LD_INT 10
28268: LESS
28269: IFFALSE 28332
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28271: LD_VAR 0 3
28275: PUSH
28276: LD_VAR 0 1
28280: ARRAY
28281: PPUSH
28282: LD_VAR 0 1
28286: PUSH
28287: LD_INT 4
28289: MOD
28290: PUSH
28291: LD_INT 1
28293: PLUS
28294: PPUSH
28295: LD_VAR 0 3
28299: PUSH
28300: LD_VAR 0 1
28304: ARRAY
28305: PPUSH
28306: LD_VAR 0 1
28310: PUSH
28311: LD_INT 4
28313: MOD
28314: PUSH
28315: LD_INT 1
28317: PLUS
28318: PPUSH
28319: CALL_OW 259
28323: PUSH
28324: LD_INT 1
28326: PLUS
28327: PPUSH
28328: CALL_OW 237
28332: GO 28234
28334: POP
28335: POP
// end ;
28336: PPOPN 3
28338: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28339: LD_EXP 71
28343: PUSH
28344: LD_EXP 79
28348: AND
28349: IFFALSE 28369
28351: GO 28353
28353: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28354: LD_INT 4
28356: PPUSH
28357: LD_OWVAR 2
28361: PPUSH
28362: LD_INT 0
28364: PPUSH
28365: CALL_OW 324
28369: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28370: LD_EXP 71
28374: PUSH
28375: LD_EXP 108
28379: AND
28380: IFFALSE 28400
28382: GO 28384
28384: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28385: LD_INT 19
28387: PPUSH
28388: LD_OWVAR 2
28392: PPUSH
28393: LD_INT 0
28395: PPUSH
28396: CALL_OW 324
28400: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28401: LD_EXP 71
28405: PUSH
28406: LD_EXP 80
28410: AND
28411: IFFALSE 28513
28413: GO 28415
28415: DISABLE
28416: LD_INT 0
28418: PPUSH
28419: PPUSH
// begin enable ;
28420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28421: LD_ADDR_VAR 0 2
28425: PUSH
28426: LD_INT 22
28428: PUSH
28429: LD_OWVAR 2
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: LD_INT 34
28443: PUSH
28444: LD_INT 11
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 34
28453: PUSH
28454: LD_INT 30
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PPUSH
28470: CALL_OW 69
28474: ST_TO_ADDR
// if not tmp then
28475: LD_VAR 0 2
28479: NOT
28480: IFFALSE 28484
// exit ;
28482: GO 28513
// for i in tmp do
28484: LD_ADDR_VAR 0 1
28488: PUSH
28489: LD_VAR 0 2
28493: PUSH
28494: FOR_IN
28495: IFFALSE 28511
// begin SetLives ( i , 0 ) ;
28497: LD_VAR 0 1
28501: PPUSH
28502: LD_INT 0
28504: PPUSH
28505: CALL_OW 234
// end ;
28509: GO 28494
28511: POP
28512: POP
// end ;
28513: PPOPN 2
28515: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28516: LD_EXP 71
28520: PUSH
28521: LD_EXP 81
28525: AND
28526: IFFALSE 28546
28528: GO 28530
28530: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28531: LD_INT 32
28533: PPUSH
28534: LD_OWVAR 2
28538: PPUSH
28539: LD_INT 0
28541: PPUSH
28542: CALL_OW 324
28546: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28547: LD_EXP 71
28551: PUSH
28552: LD_EXP 82
28556: AND
28557: IFFALSE 28738
28559: GO 28561
28561: DISABLE
28562: LD_INT 0
28564: PPUSH
28565: PPUSH
28566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28567: LD_ADDR_VAR 0 2
28571: PUSH
28572: LD_INT 22
28574: PUSH
28575: LD_OWVAR 2
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 33
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PPUSH
28598: CALL_OW 69
28602: ST_TO_ADDR
// if not tmp then
28603: LD_VAR 0 2
28607: NOT
28608: IFFALSE 28612
// exit ;
28610: GO 28738
// side := 0 ;
28612: LD_ADDR_VAR 0 3
28616: PUSH
28617: LD_INT 0
28619: ST_TO_ADDR
// for i := 1 to 8 do
28620: LD_ADDR_VAR 0 1
28624: PUSH
28625: DOUBLE
28626: LD_INT 1
28628: DEC
28629: ST_TO_ADDR
28630: LD_INT 8
28632: PUSH
28633: FOR_TO
28634: IFFALSE 28682
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28636: LD_OWVAR 2
28640: PUSH
28641: LD_VAR 0 1
28645: NONEQUAL
28646: PUSH
28647: LD_OWVAR 2
28651: PPUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 81
28661: PUSH
28662: LD_INT 2
28664: EQUAL
28665: AND
28666: IFFALSE 28680
// begin side := i ;
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_VAR 0 1
28677: ST_TO_ADDR
// break ;
28678: GO 28682
// end ;
28680: GO 28633
28682: POP
28683: POP
// if not side then
28684: LD_VAR 0 3
28688: NOT
28689: IFFALSE 28693
// exit ;
28691: GO 28738
// for i := 1 to tmp do
28693: LD_ADDR_VAR 0 1
28697: PUSH
28698: DOUBLE
28699: LD_INT 1
28701: DEC
28702: ST_TO_ADDR
28703: LD_VAR 0 2
28707: PUSH
28708: FOR_TO
28709: IFFALSE 28736
// if Prob ( 60 ) then
28711: LD_INT 60
28713: PPUSH
28714: CALL_OW 13
28718: IFFALSE 28734
// SetSide ( i , side ) ;
28720: LD_VAR 0 1
28724: PPUSH
28725: LD_VAR 0 3
28729: PPUSH
28730: CALL_OW 235
28734: GO 28708
28736: POP
28737: POP
// end ;
28738: PPOPN 3
28740: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28741: LD_EXP 71
28745: PUSH
28746: LD_EXP 84
28750: AND
28751: IFFALSE 28870
28753: GO 28755
28755: DISABLE
28756: LD_INT 0
28758: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_INT 22
28766: PUSH
28767: LD_OWVAR 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 21
28778: PUSH
28779: LD_INT 1
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: LD_INT 23
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: PPUSH
28808: CALL_OW 69
28812: PUSH
28813: FOR_IN
28814: IFFALSE 28868
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 257
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: LD_INT 3
28834: PUSH
28835: LD_INT 4
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: IN
28844: IFFALSE 28866
// SetClass ( un , rand ( 1 , 4 ) ) ;
28846: LD_VAR 0 1
28850: PPUSH
28851: LD_INT 1
28853: PPUSH
28854: LD_INT 4
28856: PPUSH
28857: CALL_OW 12
28861: PPUSH
28862: CALL_OW 336
28866: GO 28813
28868: POP
28869: POP
// end ;
28870: PPOPN 1
28872: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28873: LD_EXP 71
28877: PUSH
28878: LD_EXP 83
28882: AND
28883: IFFALSE 28962
28885: GO 28887
28887: DISABLE
28888: LD_INT 0
28890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28891: LD_ADDR_VAR 0 1
28895: PUSH
28896: LD_INT 22
28898: PUSH
28899: LD_OWVAR 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 21
28910: PUSH
28911: LD_INT 3
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 69
28926: ST_TO_ADDR
// if not tmp then
28927: LD_VAR 0 1
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 28962
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28936: LD_VAR 0 1
28940: PUSH
28941: LD_INT 1
28943: PPUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 12
28953: ARRAY
28954: PPUSH
28955: LD_INT 100
28957: PPUSH
28958: CALL_OW 234
// end ;
28962: PPOPN 1
28964: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28965: LD_EXP 71
28969: PUSH
28970: LD_EXP 85
28974: AND
28975: IFFALSE 29073
28977: GO 28979
28979: DISABLE
28980: LD_INT 0
28982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28983: LD_ADDR_VAR 0 1
28987: PUSH
28988: LD_INT 22
28990: PUSH
28991: LD_OWVAR 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 21
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PPUSH
29014: CALL_OW 69
29018: ST_TO_ADDR
// if not tmp then
29019: LD_VAR 0 1
29023: NOT
29024: IFFALSE 29028
// exit ;
29026: GO 29073
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29028: LD_VAR 0 1
29032: PUSH
29033: LD_INT 1
29035: PPUSH
29036: LD_VAR 0 1
29040: PPUSH
29041: CALL_OW 12
29045: ARRAY
29046: PPUSH
29047: LD_INT 1
29049: PPUSH
29050: LD_INT 4
29052: PPUSH
29053: CALL_OW 12
29057: PPUSH
29058: LD_INT 3000
29060: PPUSH
29061: LD_INT 9000
29063: PPUSH
29064: CALL_OW 12
29068: PPUSH
29069: CALL_OW 492
// end ;
29073: PPOPN 1
29075: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29076: LD_EXP 71
29080: PUSH
29081: LD_EXP 86
29085: AND
29086: IFFALSE 29106
29088: GO 29090
29090: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29091: LD_INT 1
29093: PPUSH
29094: LD_OWVAR 2
29098: PPUSH
29099: LD_INT 0
29101: PPUSH
29102: CALL_OW 324
29106: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29107: LD_EXP 71
29111: PUSH
29112: LD_EXP 87
29116: AND
29117: IFFALSE 29200
29119: GO 29121
29121: DISABLE
29122: LD_INT 0
29124: PPUSH
29125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29126: LD_ADDR_VAR 0 2
29130: PUSH
29131: LD_INT 22
29133: PUSH
29134: LD_OWVAR 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 21
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PPUSH
29157: CALL_OW 69
29161: ST_TO_ADDR
// if not tmp then
29162: LD_VAR 0 2
29166: NOT
29167: IFFALSE 29171
// exit ;
29169: GO 29200
// for i in tmp do
29171: LD_ADDR_VAR 0 1
29175: PUSH
29176: LD_VAR 0 2
29180: PUSH
29181: FOR_IN
29182: IFFALSE 29198
// SetBLevel ( i , 10 ) ;
29184: LD_VAR 0 1
29188: PPUSH
29189: LD_INT 10
29191: PPUSH
29192: CALL_OW 241
29196: GO 29181
29198: POP
29199: POP
// end ;
29200: PPOPN 2
29202: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29203: LD_EXP 71
29207: PUSH
29208: LD_EXP 88
29212: AND
29213: IFFALSE 29324
29215: GO 29217
29217: DISABLE
29218: LD_INT 0
29220: PPUSH
29221: PPUSH
29222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29223: LD_ADDR_VAR 0 3
29227: PUSH
29228: LD_INT 22
29230: PUSH
29231: LD_OWVAR 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 25
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PPUSH
29254: CALL_OW 69
29258: ST_TO_ADDR
// if not tmp then
29259: LD_VAR 0 3
29263: NOT
29264: IFFALSE 29268
// exit ;
29266: GO 29324
// un := tmp [ rand ( 1 , tmp ) ] ;
29268: LD_ADDR_VAR 0 2
29272: PUSH
29273: LD_VAR 0 3
29277: PUSH
29278: LD_INT 1
29280: PPUSH
29281: LD_VAR 0 3
29285: PPUSH
29286: CALL_OW 12
29290: ARRAY
29291: ST_TO_ADDR
// if Crawls ( un ) then
29292: LD_VAR 0 2
29296: PPUSH
29297: CALL_OW 318
29301: IFFALSE 29312
// ComWalk ( un ) ;
29303: LD_VAR 0 2
29307: PPUSH
29308: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29312: LD_VAR 0 2
29316: PPUSH
29317: LD_INT 5
29319: PPUSH
29320: CALL_OW 336
// end ;
29324: PPOPN 3
29326: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29327: LD_EXP 71
29331: PUSH
29332: LD_EXP 89
29336: AND
29337: PUSH
29338: LD_OWVAR 67
29342: PUSH
29343: LD_INT 3
29345: LESS
29346: AND
29347: IFFALSE 29366
29349: GO 29351
29351: DISABLE
// Difficulty := Difficulty + 1 ;
29352: LD_ADDR_OWVAR 67
29356: PUSH
29357: LD_OWVAR 67
29361: PUSH
29362: LD_INT 1
29364: PLUS
29365: ST_TO_ADDR
29366: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29367: LD_EXP 71
29371: PUSH
29372: LD_EXP 90
29376: AND
29377: IFFALSE 29480
29379: GO 29381
29381: DISABLE
29382: LD_INT 0
29384: PPUSH
// begin for i := 1 to 5 do
29385: LD_ADDR_VAR 0 1
29389: PUSH
29390: DOUBLE
29391: LD_INT 1
29393: DEC
29394: ST_TO_ADDR
29395: LD_INT 5
29397: PUSH
29398: FOR_TO
29399: IFFALSE 29478
// begin uc_nation := nation_nature ;
29401: LD_ADDR_OWVAR 21
29405: PUSH
29406: LD_INT 0
29408: ST_TO_ADDR
// uc_side := 0 ;
29409: LD_ADDR_OWVAR 20
29413: PUSH
29414: LD_INT 0
29416: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29417: LD_ADDR_OWVAR 29
29421: PUSH
29422: LD_INT 12
29424: PUSH
29425: LD_INT 12
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: ST_TO_ADDR
// hc_agressivity := 20 ;
29432: LD_ADDR_OWVAR 35
29436: PUSH
29437: LD_INT 20
29439: ST_TO_ADDR
// hc_class := class_tiger ;
29440: LD_ADDR_OWVAR 28
29444: PUSH
29445: LD_INT 14
29447: ST_TO_ADDR
// hc_gallery :=  ;
29448: LD_ADDR_OWVAR 33
29452: PUSH
29453: LD_STRING 
29455: ST_TO_ADDR
// hc_name :=  ;
29456: LD_ADDR_OWVAR 26
29460: PUSH
29461: LD_STRING 
29463: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29464: CALL_OW 44
29468: PPUSH
29469: LD_INT 0
29471: PPUSH
29472: CALL_OW 51
// end ;
29476: GO 29398
29478: POP
29479: POP
// end ;
29480: PPOPN 1
29482: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29483: LD_EXP 71
29487: PUSH
29488: LD_EXP 91
29492: AND
29493: IFFALSE 29502
29495: GO 29497
29497: DISABLE
// StreamSibBomb ;
29498: CALL 29503 0 0
29502: END
// export function StreamSibBomb ; var i , x , y ; begin
29503: LD_INT 0
29505: PPUSH
29506: PPUSH
29507: PPUSH
29508: PPUSH
// result := false ;
29509: LD_ADDR_VAR 0 1
29513: PUSH
29514: LD_INT 0
29516: ST_TO_ADDR
// for i := 1 to 16 do
29517: LD_ADDR_VAR 0 2
29521: PUSH
29522: DOUBLE
29523: LD_INT 1
29525: DEC
29526: ST_TO_ADDR
29527: LD_INT 16
29529: PUSH
29530: FOR_TO
29531: IFFALSE 29730
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29533: LD_ADDR_VAR 0 3
29537: PUSH
29538: LD_INT 10
29540: PUSH
29541: LD_INT 20
29543: PUSH
29544: LD_INT 30
29546: PUSH
29547: LD_INT 40
29549: PUSH
29550: LD_INT 50
29552: PUSH
29553: LD_INT 60
29555: PUSH
29556: LD_INT 70
29558: PUSH
29559: LD_INT 80
29561: PUSH
29562: LD_INT 90
29564: PUSH
29565: LD_INT 100
29567: PUSH
29568: LD_INT 110
29570: PUSH
29571: LD_INT 120
29573: PUSH
29574: LD_INT 130
29576: PUSH
29577: LD_INT 140
29579: PUSH
29580: LD_INT 150
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: PPUSH
29603: LD_INT 15
29605: PPUSH
29606: CALL_OW 12
29610: ARRAY
29611: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29612: LD_ADDR_VAR 0 4
29616: PUSH
29617: LD_INT 10
29619: PUSH
29620: LD_INT 20
29622: PUSH
29623: LD_INT 30
29625: PUSH
29626: LD_INT 40
29628: PUSH
29629: LD_INT 50
29631: PUSH
29632: LD_INT 60
29634: PUSH
29635: LD_INT 70
29637: PUSH
29638: LD_INT 80
29640: PUSH
29641: LD_INT 90
29643: PUSH
29644: LD_INT 100
29646: PUSH
29647: LD_INT 110
29649: PUSH
29650: LD_INT 120
29652: PUSH
29653: LD_INT 130
29655: PUSH
29656: LD_INT 140
29658: PUSH
29659: LD_INT 150
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: PPUSH
29682: LD_INT 15
29684: PPUSH
29685: CALL_OW 12
29689: ARRAY
29690: ST_TO_ADDR
// if ValidHex ( x , y ) then
29691: LD_VAR 0 3
29695: PPUSH
29696: LD_VAR 0 4
29700: PPUSH
29701: CALL_OW 488
29705: IFFALSE 29728
// begin result := [ x , y ] ;
29707: LD_ADDR_VAR 0 1
29711: PUSH
29712: LD_VAR 0 3
29716: PUSH
29717: LD_VAR 0 4
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: ST_TO_ADDR
// break ;
29726: GO 29730
// end ; end ;
29728: GO 29530
29730: POP
29731: POP
// if result then
29732: LD_VAR 0 1
29736: IFFALSE 29796
// begin ToLua ( playSibBomb() ) ;
29738: LD_STRING playSibBomb()
29740: PPUSH
29741: CALL_OW 559
// wait ( 0 0$14 ) ;
29745: LD_INT 490
29747: PPUSH
29748: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29752: LD_VAR 0 1
29756: PUSH
29757: LD_INT 1
29759: ARRAY
29760: PPUSH
29761: LD_VAR 0 1
29765: PUSH
29766: LD_INT 2
29768: ARRAY
29769: PPUSH
29770: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29774: LD_VAR 0 1
29778: PUSH
29779: LD_INT 1
29781: ARRAY
29782: PPUSH
29783: LD_VAR 0 1
29787: PUSH
29788: LD_INT 2
29790: ARRAY
29791: PPUSH
29792: CALL_OW 429
// end ; end ;
29796: LD_VAR 0 1
29800: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29801: LD_EXP 71
29805: PUSH
29806: LD_EXP 93
29810: AND
29811: IFFALSE 29823
29813: GO 29815
29815: DISABLE
// YouLost (  ) ;
29816: LD_STRING 
29818: PPUSH
29819: CALL_OW 104
29823: END
// every 0 0$1 trigger StreamModeActive and sFog do
29824: LD_EXP 71
29828: PUSH
29829: LD_EXP 92
29833: AND
29834: IFFALSE 29848
29836: GO 29838
29838: DISABLE
// FogOff ( your_side ) ;
29839: LD_OWVAR 2
29843: PPUSH
29844: CALL_OW 344
29848: END
// every 0 0$1 trigger StreamModeActive and sSun do
29849: LD_EXP 71
29853: PUSH
29854: LD_EXP 94
29858: AND
29859: IFFALSE 29887
29861: GO 29863
29863: DISABLE
// begin solar_recharge_percent := 0 ;
29864: LD_ADDR_OWVAR 79
29868: PUSH
29869: LD_INT 0
29871: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29872: LD_INT 10500
29874: PPUSH
29875: CALL_OW 67
// solar_recharge_percent := 100 ;
29879: LD_ADDR_OWVAR 79
29883: PUSH
29884: LD_INT 100
29886: ST_TO_ADDR
// end ;
29887: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29888: LD_EXP 71
29892: PUSH
29893: LD_EXP 95
29897: AND
29898: IFFALSE 30137
29900: GO 29902
29902: DISABLE
29903: LD_INT 0
29905: PPUSH
29906: PPUSH
29907: PPUSH
// begin tmp := [ ] ;
29908: LD_ADDR_VAR 0 3
29912: PUSH
29913: EMPTY
29914: ST_TO_ADDR
// for i := 1 to 6 do
29915: LD_ADDR_VAR 0 1
29919: PUSH
29920: DOUBLE
29921: LD_INT 1
29923: DEC
29924: ST_TO_ADDR
29925: LD_INT 6
29927: PUSH
29928: FOR_TO
29929: IFFALSE 30034
// begin uc_nation := nation_nature ;
29931: LD_ADDR_OWVAR 21
29935: PUSH
29936: LD_INT 0
29938: ST_TO_ADDR
// uc_side := 0 ;
29939: LD_ADDR_OWVAR 20
29943: PUSH
29944: LD_INT 0
29946: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29947: LD_ADDR_OWVAR 29
29951: PUSH
29952: LD_INT 12
29954: PUSH
29955: LD_INT 12
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: ST_TO_ADDR
// hc_agressivity := 20 ;
29962: LD_ADDR_OWVAR 35
29966: PUSH
29967: LD_INT 20
29969: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29970: LD_ADDR_OWVAR 28
29974: PUSH
29975: LD_INT 17
29977: ST_TO_ADDR
// hc_gallery :=  ;
29978: LD_ADDR_OWVAR 33
29982: PUSH
29983: LD_STRING 
29985: ST_TO_ADDR
// hc_name :=  ;
29986: LD_ADDR_OWVAR 26
29990: PUSH
29991: LD_STRING 
29993: ST_TO_ADDR
// un := CreateHuman ;
29994: LD_ADDR_VAR 0 2
29998: PUSH
29999: CALL_OW 44
30003: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30004: LD_VAR 0 2
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL_OW 51
// tmp := tmp ^ un ;
30016: LD_ADDR_VAR 0 3
30020: PUSH
30021: LD_VAR 0 3
30025: PUSH
30026: LD_VAR 0 2
30030: ADD
30031: ST_TO_ADDR
// end ;
30032: GO 29928
30034: POP
30035: POP
// repeat wait ( 0 0$1 ) ;
30036: LD_INT 35
30038: PPUSH
30039: CALL_OW 67
// for un in tmp do
30043: LD_ADDR_VAR 0 2
30047: PUSH
30048: LD_VAR 0 3
30052: PUSH
30053: FOR_IN
30054: IFFALSE 30128
// begin if IsDead ( un ) then
30056: LD_VAR 0 2
30060: PPUSH
30061: CALL_OW 301
30065: IFFALSE 30085
// begin tmp := tmp diff un ;
30067: LD_ADDR_VAR 0 3
30071: PUSH
30072: LD_VAR 0 3
30076: PUSH
30077: LD_VAR 0 2
30081: DIFF
30082: ST_TO_ADDR
// continue ;
30083: GO 30053
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30085: LD_VAR 0 2
30089: PPUSH
30090: LD_INT 3
30092: PUSH
30093: LD_INT 22
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PPUSH
30107: CALL_OW 69
30111: PPUSH
30112: LD_VAR 0 2
30116: PPUSH
30117: CALL_OW 74
30121: PPUSH
30122: CALL_OW 115
// end ;
30126: GO 30053
30128: POP
30129: POP
// until not tmp ;
30130: LD_VAR 0 3
30134: NOT
30135: IFFALSE 30036
// end ;
30137: PPOPN 3
30139: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30140: LD_EXP 71
30144: PUSH
30145: LD_EXP 96
30149: AND
30150: IFFALSE 30204
30152: GO 30154
30154: DISABLE
// begin ToLua ( displayTroll(); ) ;
30155: LD_STRING displayTroll();
30157: PPUSH
30158: CALL_OW 559
// wait ( 3 3$00 ) ;
30162: LD_INT 6300
30164: PPUSH
30165: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30169: LD_STRING hideTroll();
30171: PPUSH
30172: CALL_OW 559
// wait ( 1 1$00 ) ;
30176: LD_INT 2100
30178: PPUSH
30179: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30183: LD_STRING displayTroll();
30185: PPUSH
30186: CALL_OW 559
// wait ( 1 1$00 ) ;
30190: LD_INT 2100
30192: PPUSH
30193: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30197: LD_STRING hideTroll();
30199: PPUSH
30200: CALL_OW 559
// end ;
30204: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30205: LD_EXP 71
30209: PUSH
30210: LD_EXP 97
30214: AND
30215: IFFALSE 30278
30217: GO 30219
30219: DISABLE
30220: LD_INT 0
30222: PPUSH
// begin p := 0 ;
30223: LD_ADDR_VAR 0 1
30227: PUSH
30228: LD_INT 0
30230: ST_TO_ADDR
// repeat game_speed := 1 ;
30231: LD_ADDR_OWVAR 65
30235: PUSH
30236: LD_INT 1
30238: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30239: LD_INT 35
30241: PPUSH
30242: CALL_OW 67
// p := p + 1 ;
30246: LD_ADDR_VAR 0 1
30250: PUSH
30251: LD_VAR 0 1
30255: PUSH
30256: LD_INT 1
30258: PLUS
30259: ST_TO_ADDR
// until p >= 60 ;
30260: LD_VAR 0 1
30264: PUSH
30265: LD_INT 60
30267: GREATEREQUAL
30268: IFFALSE 30231
// game_speed := 4 ;
30270: LD_ADDR_OWVAR 65
30274: PUSH
30275: LD_INT 4
30277: ST_TO_ADDR
// end ;
30278: PPOPN 1
30280: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30281: LD_EXP 71
30285: PUSH
30286: LD_EXP 98
30290: AND
30291: IFFALSE 30437
30293: GO 30295
30295: DISABLE
30296: LD_INT 0
30298: PPUSH
30299: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30300: LD_ADDR_VAR 0 1
30304: PUSH
30305: LD_INT 22
30307: PUSH
30308: LD_OWVAR 2
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 30
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 30
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PPUSH
30349: CALL_OW 69
30353: ST_TO_ADDR
// if not depot then
30354: LD_VAR 0 1
30358: NOT
30359: IFFALSE 30363
// exit ;
30361: GO 30437
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30363: LD_ADDR_VAR 0 2
30367: PUSH
30368: LD_VAR 0 1
30372: PUSH
30373: LD_INT 1
30375: PPUSH
30376: LD_VAR 0 1
30380: PPUSH
30381: CALL_OW 12
30385: ARRAY
30386: PPUSH
30387: CALL_OW 274
30391: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30392: LD_VAR 0 2
30396: PPUSH
30397: LD_INT 1
30399: PPUSH
30400: LD_INT 0
30402: PPUSH
30403: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30407: LD_VAR 0 2
30411: PPUSH
30412: LD_INT 2
30414: PPUSH
30415: LD_INT 0
30417: PPUSH
30418: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30422: LD_VAR 0 2
30426: PPUSH
30427: LD_INT 3
30429: PPUSH
30430: LD_INT 0
30432: PPUSH
30433: CALL_OW 277
// end ;
30437: PPOPN 2
30439: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30440: LD_EXP 71
30444: PUSH
30445: LD_EXP 99
30449: AND
30450: IFFALSE 30547
30452: GO 30454
30454: DISABLE
30455: LD_INT 0
30457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30458: LD_ADDR_VAR 0 1
30462: PUSH
30463: LD_INT 22
30465: PUSH
30466: LD_OWVAR 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 21
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: LD_INT 23
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: LIST
30506: PPUSH
30507: CALL_OW 69
30511: ST_TO_ADDR
// if not tmp then
30512: LD_VAR 0 1
30516: NOT
30517: IFFALSE 30521
// exit ;
30519: GO 30547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30521: LD_VAR 0 1
30525: PUSH
30526: LD_INT 1
30528: PPUSH
30529: LD_VAR 0 1
30533: PPUSH
30534: CALL_OW 12
30538: ARRAY
30539: PPUSH
30540: LD_INT 200
30542: PPUSH
30543: CALL_OW 234
// end ;
30547: PPOPN 1
30549: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30550: LD_EXP 71
30554: PUSH
30555: LD_EXP 100
30559: AND
30560: IFFALSE 30639
30562: GO 30564
30564: DISABLE
30565: LD_INT 0
30567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30568: LD_ADDR_VAR 0 1
30572: PUSH
30573: LD_INT 22
30575: PUSH
30576: LD_OWVAR 2
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 21
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PPUSH
30599: CALL_OW 69
30603: ST_TO_ADDR
// if not tmp then
30604: LD_VAR 0 1
30608: NOT
30609: IFFALSE 30613
// exit ;
30611: GO 30639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30613: LD_VAR 0 1
30617: PUSH
30618: LD_INT 1
30620: PPUSH
30621: LD_VAR 0 1
30625: PPUSH
30626: CALL_OW 12
30630: ARRAY
30631: PPUSH
30632: LD_INT 60
30634: PPUSH
30635: CALL_OW 234
// end ;
30639: PPOPN 1
30641: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30642: LD_EXP 71
30646: PUSH
30647: LD_EXP 101
30651: AND
30652: IFFALSE 30751
30654: GO 30656
30656: DISABLE
30657: LD_INT 0
30659: PPUSH
30660: PPUSH
// begin enable ;
30661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30662: LD_ADDR_VAR 0 1
30666: PUSH
30667: LD_INT 22
30669: PUSH
30670: LD_OWVAR 2
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 61
30681: PUSH
30682: EMPTY
30683: LIST
30684: PUSH
30685: LD_INT 33
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: PPUSH
30700: CALL_OW 69
30704: ST_TO_ADDR
// if not tmp then
30705: LD_VAR 0 1
30709: NOT
30710: IFFALSE 30714
// exit ;
30712: GO 30751
// for i in tmp do
30714: LD_ADDR_VAR 0 2
30718: PUSH
30719: LD_VAR 0 1
30723: PUSH
30724: FOR_IN
30725: IFFALSE 30749
// if IsControledBy ( i ) then
30727: LD_VAR 0 2
30731: PPUSH
30732: CALL_OW 312
30736: IFFALSE 30747
// ComUnlink ( i ) ;
30738: LD_VAR 0 2
30742: PPUSH
30743: CALL_OW 136
30747: GO 30724
30749: POP
30750: POP
// end ;
30751: PPOPN 2
30753: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30754: LD_EXP 71
30758: PUSH
30759: LD_EXP 102
30763: AND
30764: IFFALSE 30904
30766: GO 30768
30768: DISABLE
30769: LD_INT 0
30771: PPUSH
30772: PPUSH
// begin ToLua ( displayPowell(); ) ;
30773: LD_STRING displayPowell();
30775: PPUSH
30776: CALL_OW 559
// uc_side := 0 ;
30780: LD_ADDR_OWVAR 20
30784: PUSH
30785: LD_INT 0
30787: ST_TO_ADDR
// uc_nation := 2 ;
30788: LD_ADDR_OWVAR 21
30792: PUSH
30793: LD_INT 2
30795: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30796: LD_ADDR_OWVAR 37
30800: PUSH
30801: LD_INT 14
30803: ST_TO_ADDR
// vc_engine := engine_siberite ;
30804: LD_ADDR_OWVAR 39
30808: PUSH
30809: LD_INT 3
30811: ST_TO_ADDR
// vc_control := control_apeman ;
30812: LD_ADDR_OWVAR 38
30816: PUSH
30817: LD_INT 5
30819: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30820: LD_ADDR_OWVAR 40
30824: PUSH
30825: LD_INT 29
30827: ST_TO_ADDR
// un := CreateVehicle ;
30828: LD_ADDR_VAR 0 2
30832: PUSH
30833: CALL_OW 45
30837: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30838: LD_VAR 0 2
30842: PPUSH
30843: LD_INT 1
30845: PPUSH
30846: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30850: LD_INT 35
30852: PPUSH
30853: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30857: LD_VAR 0 2
30861: PPUSH
30862: LD_INT 22
30864: PUSH
30865: LD_OWVAR 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PPUSH
30874: CALL_OW 69
30878: PPUSH
30879: LD_VAR 0 2
30883: PPUSH
30884: CALL_OW 74
30888: PPUSH
30889: CALL_OW 115
// until IsDead ( un ) ;
30893: LD_VAR 0 2
30897: PPUSH
30898: CALL_OW 301
30902: IFFALSE 30850
// end ;
30904: PPOPN 2
30906: END
// every 0 0$1 trigger StreamModeActive and sStu do
30907: LD_EXP 71
30911: PUSH
30912: LD_EXP 110
30916: AND
30917: IFFALSE 30933
30919: GO 30921
30921: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30922: LD_STRING displayStucuk();
30924: PPUSH
30925: CALL_OW 559
// ResetFog ;
30929: CALL_OW 335
// end ;
30933: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30934: LD_EXP 71
30938: PUSH
30939: LD_EXP 103
30943: AND
30944: IFFALSE 31085
30946: GO 30948
30948: DISABLE
30949: LD_INT 0
30951: PPUSH
30952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30953: LD_ADDR_VAR 0 2
30957: PUSH
30958: LD_INT 22
30960: PUSH
30961: LD_OWVAR 2
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 21
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PPUSH
30984: CALL_OW 69
30988: ST_TO_ADDR
// if not tmp then
30989: LD_VAR 0 2
30993: NOT
30994: IFFALSE 30998
// exit ;
30996: GO 31085
// un := tmp [ rand ( 1 , tmp ) ] ;
30998: LD_ADDR_VAR 0 1
31002: PUSH
31003: LD_VAR 0 2
31007: PUSH
31008: LD_INT 1
31010: PPUSH
31011: LD_VAR 0 2
31015: PPUSH
31016: CALL_OW 12
31020: ARRAY
31021: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31022: LD_VAR 0 1
31026: PPUSH
31027: LD_INT 0
31029: PPUSH
31030: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31034: LD_VAR 0 1
31038: PPUSH
31039: LD_OWVAR 3
31043: PUSH
31044: LD_VAR 0 1
31048: DIFF
31049: PPUSH
31050: LD_VAR 0 1
31054: PPUSH
31055: CALL_OW 74
31059: PPUSH
31060: CALL_OW 115
// wait ( 0 0$20 ) ;
31064: LD_INT 700
31066: PPUSH
31067: CALL_OW 67
// SetSide ( un , your_side ) ;
31071: LD_VAR 0 1
31075: PPUSH
31076: LD_OWVAR 2
31080: PPUSH
31081: CALL_OW 235
// end ;
31085: PPOPN 2
31087: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31088: LD_EXP 71
31092: PUSH
31093: LD_EXP 104
31097: AND
31098: IFFALSE 31204
31100: GO 31102
31102: DISABLE
31103: LD_INT 0
31105: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31106: LD_ADDR_VAR 0 1
31110: PUSH
31111: LD_INT 22
31113: PUSH
31114: LD_OWVAR 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 30
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 30
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PPUSH
31155: CALL_OW 69
31159: ST_TO_ADDR
// if not depot then
31160: LD_VAR 0 1
31164: NOT
31165: IFFALSE 31169
// exit ;
31167: GO 31204
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31169: LD_VAR 0 1
31173: PUSH
31174: LD_INT 1
31176: ARRAY
31177: PPUSH
31178: CALL_OW 250
31182: PPUSH
31183: LD_VAR 0 1
31187: PUSH
31188: LD_INT 1
31190: ARRAY
31191: PPUSH
31192: CALL_OW 251
31196: PPUSH
31197: LD_INT 70
31199: PPUSH
31200: CALL_OW 495
// end ;
31204: PPOPN 1
31206: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31207: LD_EXP 71
31211: PUSH
31212: LD_EXP 105
31216: AND
31217: IFFALSE 31428
31219: GO 31221
31221: DISABLE
31222: LD_INT 0
31224: PPUSH
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31229: LD_ADDR_VAR 0 5
31233: PUSH
31234: LD_INT 22
31236: PUSH
31237: LD_OWVAR 2
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 21
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PPUSH
31260: CALL_OW 69
31264: ST_TO_ADDR
// if not tmp then
31265: LD_VAR 0 5
31269: NOT
31270: IFFALSE 31274
// exit ;
31272: GO 31428
// for i in tmp do
31274: LD_ADDR_VAR 0 1
31278: PUSH
31279: LD_VAR 0 5
31283: PUSH
31284: FOR_IN
31285: IFFALSE 31426
// begin d := rand ( 0 , 5 ) ;
31287: LD_ADDR_VAR 0 4
31291: PUSH
31292: LD_INT 0
31294: PPUSH
31295: LD_INT 5
31297: PPUSH
31298: CALL_OW 12
31302: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31303: LD_ADDR_VAR 0 2
31307: PUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL_OW 250
31317: PPUSH
31318: LD_VAR 0 4
31322: PPUSH
31323: LD_INT 3
31325: PPUSH
31326: LD_INT 12
31328: PPUSH
31329: CALL_OW 12
31333: PPUSH
31334: CALL_OW 272
31338: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_VAR 0 1
31348: PPUSH
31349: CALL_OW 251
31353: PPUSH
31354: LD_VAR 0 4
31358: PPUSH
31359: LD_INT 3
31361: PPUSH
31362: LD_INT 12
31364: PPUSH
31365: CALL_OW 12
31369: PPUSH
31370: CALL_OW 273
31374: ST_TO_ADDR
// if ValidHex ( x , y ) then
31375: LD_VAR 0 2
31379: PPUSH
31380: LD_VAR 0 3
31384: PPUSH
31385: CALL_OW 488
31389: IFFALSE 31424
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31391: LD_VAR 0 1
31395: PPUSH
31396: LD_VAR 0 2
31400: PPUSH
31401: LD_VAR 0 3
31405: PPUSH
31406: LD_INT 3
31408: PPUSH
31409: LD_INT 6
31411: PPUSH
31412: CALL_OW 12
31416: PPUSH
31417: LD_INT 1
31419: PPUSH
31420: CALL_OW 483
// end ;
31424: GO 31284
31426: POP
31427: POP
// end ;
31428: PPOPN 5
31430: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31431: LD_EXP 71
31435: PUSH
31436: LD_EXP 106
31440: AND
31441: IFFALSE 31535
31443: GO 31445
31445: DISABLE
31446: LD_INT 0
31448: PPUSH
31449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31450: LD_ADDR_VAR 0 2
31454: PUSH
31455: LD_INT 22
31457: PUSH
31458: LD_OWVAR 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 32
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 21
31479: PUSH
31480: LD_INT 2
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: PPUSH
31492: CALL_OW 69
31496: ST_TO_ADDR
// if not tmp then
31497: LD_VAR 0 2
31501: NOT
31502: IFFALSE 31506
// exit ;
31504: GO 31535
// for i in tmp do
31506: LD_ADDR_VAR 0 1
31510: PUSH
31511: LD_VAR 0 2
31515: PUSH
31516: FOR_IN
31517: IFFALSE 31533
// SetFuel ( i , 0 ) ;
31519: LD_VAR 0 1
31523: PPUSH
31524: LD_INT 0
31526: PPUSH
31527: CALL_OW 240
31531: GO 31516
31533: POP
31534: POP
// end ;
31535: PPOPN 2
31537: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31538: LD_EXP 71
31542: PUSH
31543: LD_EXP 107
31547: AND
31548: IFFALSE 31614
31550: GO 31552
31552: DISABLE
31553: LD_INT 0
31555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31556: LD_ADDR_VAR 0 1
31560: PUSH
31561: LD_INT 22
31563: PUSH
31564: LD_OWVAR 2
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 30
31575: PUSH
31576: LD_INT 29
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PPUSH
31587: CALL_OW 69
31591: ST_TO_ADDR
// if not tmp then
31592: LD_VAR 0 1
31596: NOT
31597: IFFALSE 31601
// exit ;
31599: GO 31614
// DestroyUnit ( tmp [ 1 ] ) ;
31601: LD_VAR 0 1
31605: PUSH
31606: LD_INT 1
31608: ARRAY
31609: PPUSH
31610: CALL_OW 65
// end ;
31614: PPOPN 1
31616: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31617: LD_EXP 71
31621: PUSH
31622: LD_EXP 109
31626: AND
31627: IFFALSE 31756
31629: GO 31631
31631: DISABLE
31632: LD_INT 0
31634: PPUSH
// begin uc_side := 0 ;
31635: LD_ADDR_OWVAR 20
31639: PUSH
31640: LD_INT 0
31642: ST_TO_ADDR
// uc_nation := nation_arabian ;
31643: LD_ADDR_OWVAR 21
31647: PUSH
31648: LD_INT 2
31650: ST_TO_ADDR
// hc_gallery :=  ;
31651: LD_ADDR_OWVAR 33
31655: PUSH
31656: LD_STRING 
31658: ST_TO_ADDR
// hc_name :=  ;
31659: LD_ADDR_OWVAR 26
31663: PUSH
31664: LD_STRING 
31666: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31667: LD_INT 1
31669: PPUSH
31670: LD_INT 11
31672: PPUSH
31673: LD_INT 10
31675: PPUSH
31676: CALL_OW 380
// un := CreateHuman ;
31680: LD_ADDR_VAR 0 1
31684: PUSH
31685: CALL_OW 44
31689: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31690: LD_VAR 0 1
31694: PPUSH
31695: LD_INT 1
31697: PPUSH
31698: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31702: LD_INT 35
31704: PPUSH
31705: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_INT 22
31716: PUSH
31717: LD_OWVAR 2
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PPUSH
31726: CALL_OW 69
31730: PPUSH
31731: LD_VAR 0 1
31735: PPUSH
31736: CALL_OW 74
31740: PPUSH
31741: CALL_OW 115
// until IsDead ( un ) ;
31745: LD_VAR 0 1
31749: PPUSH
31750: CALL_OW 301
31754: IFFALSE 31702
// end ;
31756: PPOPN 1
31758: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31759: LD_EXP 71
31763: PUSH
31764: LD_EXP 111
31768: AND
31769: IFFALSE 31781
31771: GO 31773
31773: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31774: LD_STRING earthquake(getX(game), 0, 32)
31776: PPUSH
31777: CALL_OW 559
31781: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31782: LD_EXP 71
31786: PUSH
31787: LD_EXP 112
31791: AND
31792: IFFALSE 31883
31794: GO 31796
31796: DISABLE
31797: LD_INT 0
31799: PPUSH
// begin enable ;
31800: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31801: LD_ADDR_VAR 0 1
31805: PUSH
31806: LD_INT 22
31808: PUSH
31809: LD_OWVAR 2
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 21
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 33
31830: PUSH
31831: LD_INT 3
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: PPUSH
31843: CALL_OW 69
31847: ST_TO_ADDR
// if not tmp then
31848: LD_VAR 0 1
31852: NOT
31853: IFFALSE 31857
// exit ;
31855: GO 31883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31857: LD_VAR 0 1
31861: PUSH
31862: LD_INT 1
31864: PPUSH
31865: LD_VAR 0 1
31869: PPUSH
31870: CALL_OW 12
31874: ARRAY
31875: PPUSH
31876: LD_INT 1
31878: PPUSH
31879: CALL_OW 234
// end ;
31883: PPOPN 1
31885: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31886: LD_EXP 71
31890: PUSH
31891: LD_EXP 113
31895: AND
31896: IFFALSE 32037
31898: GO 31900
31900: DISABLE
31901: LD_INT 0
31903: PPUSH
31904: PPUSH
31905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31906: LD_ADDR_VAR 0 3
31910: PUSH
31911: LD_INT 22
31913: PUSH
31914: LD_OWVAR 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 25
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PPUSH
31937: CALL_OW 69
31941: ST_TO_ADDR
// if not tmp then
31942: LD_VAR 0 3
31946: NOT
31947: IFFALSE 31951
// exit ;
31949: GO 32037
// un := tmp [ rand ( 1 , tmp ) ] ;
31951: LD_ADDR_VAR 0 2
31955: PUSH
31956: LD_VAR 0 3
31960: PUSH
31961: LD_INT 1
31963: PPUSH
31964: LD_VAR 0 3
31968: PPUSH
31969: CALL_OW 12
31973: ARRAY
31974: ST_TO_ADDR
// if Crawls ( un ) then
31975: LD_VAR 0 2
31979: PPUSH
31980: CALL_OW 318
31984: IFFALSE 31995
// ComWalk ( un ) ;
31986: LD_VAR 0 2
31990: PPUSH
31991: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31995: LD_VAR 0 2
31999: PPUSH
32000: LD_INT 9
32002: PPUSH
32003: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32007: LD_INT 28
32009: PPUSH
32010: LD_OWVAR 2
32014: PPUSH
32015: LD_INT 2
32017: PPUSH
32018: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32022: LD_INT 29
32024: PPUSH
32025: LD_OWVAR 2
32029: PPUSH
32030: LD_INT 2
32032: PPUSH
32033: CALL_OW 322
// end ;
32037: PPOPN 3
32039: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32040: LD_EXP 71
32044: PUSH
32045: LD_EXP 114
32049: AND
32050: IFFALSE 32161
32052: GO 32054
32054: DISABLE
32055: LD_INT 0
32057: PPUSH
32058: PPUSH
32059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32060: LD_ADDR_VAR 0 3
32064: PUSH
32065: LD_INT 22
32067: PUSH
32068: LD_OWVAR 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 25
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PPUSH
32091: CALL_OW 69
32095: ST_TO_ADDR
// if not tmp then
32096: LD_VAR 0 3
32100: NOT
32101: IFFALSE 32105
// exit ;
32103: GO 32161
// un := tmp [ rand ( 1 , tmp ) ] ;
32105: LD_ADDR_VAR 0 2
32109: PUSH
32110: LD_VAR 0 3
32114: PUSH
32115: LD_INT 1
32117: PPUSH
32118: LD_VAR 0 3
32122: PPUSH
32123: CALL_OW 12
32127: ARRAY
32128: ST_TO_ADDR
// if Crawls ( un ) then
32129: LD_VAR 0 2
32133: PPUSH
32134: CALL_OW 318
32138: IFFALSE 32149
// ComWalk ( un ) ;
32140: LD_VAR 0 2
32144: PPUSH
32145: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32149: LD_VAR 0 2
32153: PPUSH
32154: LD_INT 8
32156: PPUSH
32157: CALL_OW 336
// end ;
32161: PPOPN 3
32163: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32164: LD_EXP 71
32168: PUSH
32169: LD_EXP 115
32173: AND
32174: IFFALSE 32318
32176: GO 32178
32178: DISABLE
32179: LD_INT 0
32181: PPUSH
32182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32183: LD_ADDR_VAR 0 2
32187: PUSH
32188: LD_INT 22
32190: PUSH
32191: LD_OWVAR 2
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 21
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 34
32215: PUSH
32216: LD_INT 12
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 34
32225: PUSH
32226: LD_INT 51
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 34
32235: PUSH
32236: LD_INT 32
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: PPUSH
32254: CALL_OW 69
32258: ST_TO_ADDR
// if not tmp then
32259: LD_VAR 0 2
32263: NOT
32264: IFFALSE 32268
// exit ;
32266: GO 32318
// for i in tmp do
32268: LD_ADDR_VAR 0 1
32272: PUSH
32273: LD_VAR 0 2
32277: PUSH
32278: FOR_IN
32279: IFFALSE 32316
// if GetCargo ( i , mat_artifact ) = 0 then
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_INT 4
32288: PPUSH
32289: CALL_OW 289
32293: PUSH
32294: LD_INT 0
32296: EQUAL
32297: IFFALSE 32314
// SetCargo ( i , mat_siberit , 100 ) ;
32299: LD_VAR 0 1
32303: PPUSH
32304: LD_INT 3
32306: PPUSH
32307: LD_INT 100
32309: PPUSH
32310: CALL_OW 290
32314: GO 32278
32316: POP
32317: POP
// end ;
32318: PPOPN 2
32320: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32321: LD_EXP 71
32325: PUSH
32326: LD_EXP 116
32330: AND
32331: IFFALSE 32514
32333: GO 32335
32335: DISABLE
32336: LD_INT 0
32338: PPUSH
32339: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32340: LD_ADDR_VAR 0 2
32344: PUSH
32345: LD_INT 22
32347: PUSH
32348: LD_OWVAR 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PPUSH
32357: CALL_OW 69
32361: ST_TO_ADDR
// if not tmp then
32362: LD_VAR 0 2
32366: NOT
32367: IFFALSE 32371
// exit ;
32369: GO 32514
// for i := 1 to 2 do
32371: LD_ADDR_VAR 0 1
32375: PUSH
32376: DOUBLE
32377: LD_INT 1
32379: DEC
32380: ST_TO_ADDR
32381: LD_INT 2
32383: PUSH
32384: FOR_TO
32385: IFFALSE 32512
// begin uc_side := your_side ;
32387: LD_ADDR_OWVAR 20
32391: PUSH
32392: LD_OWVAR 2
32396: ST_TO_ADDR
// uc_nation := nation_american ;
32397: LD_ADDR_OWVAR 21
32401: PUSH
32402: LD_INT 1
32404: ST_TO_ADDR
// vc_chassis := us_morphling ;
32405: LD_ADDR_OWVAR 37
32409: PUSH
32410: LD_INT 5
32412: ST_TO_ADDR
// vc_engine := engine_siberite ;
32413: LD_ADDR_OWVAR 39
32417: PUSH
32418: LD_INT 3
32420: ST_TO_ADDR
// vc_control := control_computer ;
32421: LD_ADDR_OWVAR 38
32425: PUSH
32426: LD_INT 3
32428: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32429: LD_ADDR_OWVAR 40
32433: PUSH
32434: LD_INT 10
32436: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32437: LD_VAR 0 2
32441: PUSH
32442: LD_INT 1
32444: ARRAY
32445: PPUSH
32446: CALL_OW 310
32450: NOT
32451: IFFALSE 32498
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32453: CALL_OW 45
32457: PPUSH
32458: LD_VAR 0 2
32462: PUSH
32463: LD_INT 1
32465: ARRAY
32466: PPUSH
32467: CALL_OW 250
32471: PPUSH
32472: LD_VAR 0 2
32476: PUSH
32477: LD_INT 1
32479: ARRAY
32480: PPUSH
32481: CALL_OW 251
32485: PPUSH
32486: LD_INT 12
32488: PPUSH
32489: LD_INT 1
32491: PPUSH
32492: CALL_OW 50
32496: GO 32510
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32498: CALL_OW 45
32502: PPUSH
32503: LD_INT 1
32505: PPUSH
32506: CALL_OW 51
// end ;
32510: GO 32384
32512: POP
32513: POP
// end ;
32514: PPOPN 2
32516: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32517: LD_EXP 71
32521: PUSH
32522: LD_EXP 117
32526: AND
32527: IFFALSE 32749
32529: GO 32531
32531: DISABLE
32532: LD_INT 0
32534: PPUSH
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
32539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32540: LD_ADDR_VAR 0 6
32544: PUSH
32545: LD_INT 22
32547: PUSH
32548: LD_OWVAR 2
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 21
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: LD_INT 23
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: LIST
32588: PPUSH
32589: CALL_OW 69
32593: ST_TO_ADDR
// if not tmp then
32594: LD_VAR 0 6
32598: NOT
32599: IFFALSE 32603
// exit ;
32601: GO 32749
// s1 := rand ( 1 , 4 ) ;
32603: LD_ADDR_VAR 0 2
32607: PUSH
32608: LD_INT 1
32610: PPUSH
32611: LD_INT 4
32613: PPUSH
32614: CALL_OW 12
32618: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32619: LD_ADDR_VAR 0 4
32623: PUSH
32624: LD_VAR 0 6
32628: PUSH
32629: LD_INT 1
32631: ARRAY
32632: PPUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 259
32642: ST_TO_ADDR
// if s1 = 1 then
32643: LD_VAR 0 2
32647: PUSH
32648: LD_INT 1
32650: EQUAL
32651: IFFALSE 32671
// s2 := rand ( 2 , 4 ) else
32653: LD_ADDR_VAR 0 3
32657: PUSH
32658: LD_INT 2
32660: PPUSH
32661: LD_INT 4
32663: PPUSH
32664: CALL_OW 12
32668: ST_TO_ADDR
32669: GO 32679
// s2 := 1 ;
32671: LD_ADDR_VAR 0 3
32675: PUSH
32676: LD_INT 1
32678: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32679: LD_ADDR_VAR 0 5
32683: PUSH
32684: LD_VAR 0 6
32688: PUSH
32689: LD_INT 1
32691: ARRAY
32692: PPUSH
32693: LD_VAR 0 3
32697: PPUSH
32698: CALL_OW 259
32702: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32703: LD_VAR 0 6
32707: PUSH
32708: LD_INT 1
32710: ARRAY
32711: PPUSH
32712: LD_VAR 0 2
32716: PPUSH
32717: LD_VAR 0 5
32721: PPUSH
32722: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32726: LD_VAR 0 6
32730: PUSH
32731: LD_INT 1
32733: ARRAY
32734: PPUSH
32735: LD_VAR 0 3
32739: PPUSH
32740: LD_VAR 0 4
32744: PPUSH
32745: CALL_OW 237
// end ;
32749: PPOPN 6
32751: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32752: LD_EXP 71
32756: PUSH
32757: LD_EXP 118
32761: AND
32762: IFFALSE 32841
32764: GO 32766
32766: DISABLE
32767: LD_INT 0
32769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32770: LD_ADDR_VAR 0 1
32774: PUSH
32775: LD_INT 22
32777: PUSH
32778: LD_OWVAR 2
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 30
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PPUSH
32801: CALL_OW 69
32805: ST_TO_ADDR
// if not tmp then
32806: LD_VAR 0 1
32810: NOT
32811: IFFALSE 32815
// exit ;
32813: GO 32841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32815: LD_VAR 0 1
32819: PUSH
32820: LD_INT 1
32822: PPUSH
32823: LD_VAR 0 1
32827: PPUSH
32828: CALL_OW 12
32832: ARRAY
32833: PPUSH
32834: LD_INT 1
32836: PPUSH
32837: CALL_OW 234
// end ;
32841: PPOPN 1
32843: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32844: LD_EXP 71
32848: PUSH
32849: LD_EXP 119
32853: AND
32854: IFFALSE 32966
32856: GO 32858
32858: DISABLE
32859: LD_INT 0
32861: PPUSH
32862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32863: LD_ADDR_VAR 0 2
32867: PUSH
32868: LD_INT 22
32870: PUSH
32871: LD_OWVAR 2
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: LD_INT 30
32885: PUSH
32886: LD_INT 27
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 30
32895: PUSH
32896: LD_INT 26
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 30
32905: PUSH
32906: LD_INT 28
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 69
32927: ST_TO_ADDR
// if not tmp then
32928: LD_VAR 0 2
32932: NOT
32933: IFFALSE 32937
// exit ;
32935: GO 32966
// for i in tmp do
32937: LD_ADDR_VAR 0 1
32941: PUSH
32942: LD_VAR 0 2
32946: PUSH
32947: FOR_IN
32948: IFFALSE 32964
// SetLives ( i , 1 ) ;
32950: LD_VAR 0 1
32954: PPUSH
32955: LD_INT 1
32957: PPUSH
32958: CALL_OW 234
32962: GO 32947
32964: POP
32965: POP
// end ;
32966: PPOPN 2
32968: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32969: LD_EXP 71
32973: PUSH
32974: LD_EXP 120
32978: AND
32979: IFFALSE 33253
32981: GO 32983
32983: DISABLE
32984: LD_INT 0
32986: PPUSH
32987: PPUSH
32988: PPUSH
// begin i := rand ( 1 , 7 ) ;
32989: LD_ADDR_VAR 0 1
32993: PUSH
32994: LD_INT 1
32996: PPUSH
32997: LD_INT 7
32999: PPUSH
33000: CALL_OW 12
33004: ST_TO_ADDR
// case i of 1 :
33005: LD_VAR 0 1
33009: PUSH
33010: LD_INT 1
33012: DOUBLE
33013: EQUAL
33014: IFTRUE 33018
33016: GO 33028
33018: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33019: LD_STRING earthquake(getX(game), 0, 32)
33021: PPUSH
33022: CALL_OW 559
33026: GO 33253
33028: LD_INT 2
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33036
33034: GO 33050
33036: POP
// begin ToLua ( displayStucuk(); ) ;
33037: LD_STRING displayStucuk();
33039: PPUSH
33040: CALL_OW 559
// ResetFog ;
33044: CALL_OW 335
// end ; 3 :
33048: GO 33253
33050: LD_INT 3
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33058
33056: GO 33162
33058: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33059: LD_ADDR_VAR 0 2
33063: PUSH
33064: LD_INT 22
33066: PUSH
33067: LD_OWVAR 2
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 25
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 69
33094: ST_TO_ADDR
// if not tmp then
33095: LD_VAR 0 2
33099: NOT
33100: IFFALSE 33104
// exit ;
33102: GO 33253
// un := tmp [ rand ( 1 , tmp ) ] ;
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_VAR 0 2
33113: PUSH
33114: LD_INT 1
33116: PPUSH
33117: LD_VAR 0 2
33121: PPUSH
33122: CALL_OW 12
33126: ARRAY
33127: ST_TO_ADDR
// if Crawls ( un ) then
33128: LD_VAR 0 3
33132: PPUSH
33133: CALL_OW 318
33137: IFFALSE 33148
// ComWalk ( un ) ;
33139: LD_VAR 0 3
33143: PPUSH
33144: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33148: LD_VAR 0 3
33152: PPUSH
33153: LD_INT 8
33155: PPUSH
33156: CALL_OW 336
// end ; 4 :
33160: GO 33253
33162: LD_INT 4
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33231
33170: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33171: LD_ADDR_VAR 0 2
33175: PUSH
33176: LD_INT 22
33178: PUSH
33179: LD_OWVAR 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 30
33190: PUSH
33191: LD_INT 29
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PPUSH
33202: CALL_OW 69
33206: ST_TO_ADDR
// if not tmp then
33207: LD_VAR 0 2
33211: NOT
33212: IFFALSE 33216
// exit ;
33214: GO 33253
// DestroyUnit ( tmp [ 1 ] ) ;
33216: LD_VAR 0 2
33220: PUSH
33221: LD_INT 1
33223: ARRAY
33224: PPUSH
33225: CALL_OW 65
// end ; 5 .. 7 :
33229: GO 33253
33231: LD_INT 5
33233: DOUBLE
33234: GREATEREQUAL
33235: IFFALSE 33243
33237: LD_INT 7
33239: DOUBLE
33240: LESSEQUAL
33241: IFTRUE 33245
33243: GO 33252
33245: POP
// StreamSibBomb ; end ;
33246: CALL 29503 0 0
33250: GO 33253
33252: POP
// end ;
33253: PPOPN 3
33255: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33256: LD_EXP 71
33260: PUSH
33261: LD_EXP 121
33265: AND
33266: IFFALSE 33422
33268: GO 33270
33270: DISABLE
33271: LD_INT 0
33273: PPUSH
33274: PPUSH
33275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33276: LD_ADDR_VAR 0 2
33280: PUSH
33281: LD_INT 81
33283: PUSH
33284: LD_OWVAR 2
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 21
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 21
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PPUSH
33325: CALL_OW 69
33329: ST_TO_ADDR
// if not tmp then
33330: LD_VAR 0 2
33334: NOT
33335: IFFALSE 33339
// exit ;
33337: GO 33422
// p := 0 ;
33339: LD_ADDR_VAR 0 3
33343: PUSH
33344: LD_INT 0
33346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33347: LD_INT 35
33349: PPUSH
33350: CALL_OW 67
// p := p + 1 ;
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_VAR 0 3
33363: PUSH
33364: LD_INT 1
33366: PLUS
33367: ST_TO_ADDR
// for i in tmp do
33368: LD_ADDR_VAR 0 1
33372: PUSH
33373: LD_VAR 0 2
33377: PUSH
33378: FOR_IN
33379: IFFALSE 33410
// if GetLives ( i ) < 1000 then
33381: LD_VAR 0 1
33385: PPUSH
33386: CALL_OW 256
33390: PUSH
33391: LD_INT 1000
33393: LESS
33394: IFFALSE 33408
// SetLives ( i , 1000 ) ;
33396: LD_VAR 0 1
33400: PPUSH
33401: LD_INT 1000
33403: PPUSH
33404: CALL_OW 234
33408: GO 33378
33410: POP
33411: POP
// until p > 20 ;
33412: LD_VAR 0 3
33416: PUSH
33417: LD_INT 20
33419: GREATER
33420: IFFALSE 33347
// end ;
33422: PPOPN 3
33424: END
// every 0 0$1 trigger StreamModeActive and sTime do
33425: LD_EXP 71
33429: PUSH
33430: LD_EXP 122
33434: AND
33435: IFFALSE 33470
33437: GO 33439
33439: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33440: LD_INT 28
33442: PPUSH
33443: LD_OWVAR 2
33447: PPUSH
33448: LD_INT 2
33450: PPUSH
33451: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33455: LD_INT 30
33457: PPUSH
33458: LD_OWVAR 2
33462: PPUSH
33463: LD_INT 2
33465: PPUSH
33466: CALL_OW 322
// end ;
33470: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33471: LD_EXP 71
33475: PUSH
33476: LD_EXP 123
33480: AND
33481: IFFALSE 33602
33483: GO 33485
33485: DISABLE
33486: LD_INT 0
33488: PPUSH
33489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33490: LD_ADDR_VAR 0 2
33494: PUSH
33495: LD_INT 22
33497: PUSH
33498: LD_OWVAR 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 21
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: PUSH
33520: LD_INT 23
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: PPUSH
33539: CALL_OW 69
33543: ST_TO_ADDR
// if not tmp then
33544: LD_VAR 0 2
33548: NOT
33549: IFFALSE 33553
// exit ;
33551: GO 33602
// for i in tmp do
33553: LD_ADDR_VAR 0 1
33557: PUSH
33558: LD_VAR 0 2
33562: PUSH
33563: FOR_IN
33564: IFFALSE 33600
// begin if Crawls ( i ) then
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL_OW 318
33575: IFFALSE 33586
// ComWalk ( i ) ;
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 138
// SetClass ( i , 2 ) ;
33586: LD_VAR 0 1
33590: PPUSH
33591: LD_INT 2
33593: PPUSH
33594: CALL_OW 336
// end ;
33598: GO 33563
33600: POP
33601: POP
// end ;
33602: PPOPN 2
33604: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33605: LD_EXP 71
33609: PUSH
33610: LD_EXP 124
33614: AND
33615: IFFALSE 33896
33617: GO 33619
33619: DISABLE
33620: LD_INT 0
33622: PPUSH
33623: PPUSH
33624: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33625: LD_OWVAR 2
33629: PPUSH
33630: LD_INT 9
33632: PPUSH
33633: LD_INT 1
33635: PPUSH
33636: LD_INT 1
33638: PPUSH
33639: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33643: LD_INT 9
33645: PPUSH
33646: LD_OWVAR 2
33650: PPUSH
33651: CALL_OW 343
// uc_side := 9 ;
33655: LD_ADDR_OWVAR 20
33659: PUSH
33660: LD_INT 9
33662: ST_TO_ADDR
// uc_nation := 2 ;
33663: LD_ADDR_OWVAR 21
33667: PUSH
33668: LD_INT 2
33670: ST_TO_ADDR
// hc_name := Dark Warrior ;
33671: LD_ADDR_OWVAR 26
33675: PUSH
33676: LD_STRING Dark Warrior
33678: ST_TO_ADDR
// hc_gallery :=  ;
33679: LD_ADDR_OWVAR 33
33683: PUSH
33684: LD_STRING 
33686: ST_TO_ADDR
// hc_noskilllimit := true ;
33687: LD_ADDR_OWVAR 76
33691: PUSH
33692: LD_INT 1
33694: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33695: LD_ADDR_OWVAR 31
33699: PUSH
33700: LD_INT 30
33702: PUSH
33703: LD_INT 30
33705: PUSH
33706: LD_INT 30
33708: PUSH
33709: LD_INT 30
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: ST_TO_ADDR
// un := CreateHuman ;
33718: LD_ADDR_VAR 0 3
33722: PUSH
33723: CALL_OW 44
33727: ST_TO_ADDR
// hc_noskilllimit := false ;
33728: LD_ADDR_OWVAR 76
33732: PUSH
33733: LD_INT 0
33735: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33736: LD_VAR 0 3
33740: PPUSH
33741: LD_INT 1
33743: PPUSH
33744: CALL_OW 51
// p := 0 ;
33748: LD_ADDR_VAR 0 2
33752: PUSH
33753: LD_INT 0
33755: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33756: LD_INT 35
33758: PPUSH
33759: CALL_OW 67
// p := p + 1 ;
33763: LD_ADDR_VAR 0 2
33767: PUSH
33768: LD_VAR 0 2
33772: PUSH
33773: LD_INT 1
33775: PLUS
33776: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33777: LD_VAR 0 3
33781: PPUSH
33782: CALL_OW 256
33786: PUSH
33787: LD_INT 1000
33789: LESS
33790: IFFALSE 33804
// SetLives ( un , 1000 ) ;
33792: LD_VAR 0 3
33796: PPUSH
33797: LD_INT 1000
33799: PPUSH
33800: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33804: LD_VAR 0 3
33808: PPUSH
33809: LD_INT 81
33811: PUSH
33812: LD_OWVAR 2
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 91
33823: PUSH
33824: LD_VAR 0 3
33828: PUSH
33829: LD_INT 30
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PPUSH
33841: CALL_OW 69
33845: PPUSH
33846: LD_VAR 0 3
33850: PPUSH
33851: CALL_OW 74
33855: PPUSH
33856: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33860: LD_VAR 0 2
33864: PUSH
33865: LD_INT 60
33867: GREATER
33868: PUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: CALL_OW 301
33878: OR
33879: IFFALSE 33756
// if un then
33881: LD_VAR 0 3
33885: IFFALSE 33896
// RemoveUnit ( un ) ;
33887: LD_VAR 0 3
33891: PPUSH
33892: CALL_OW 64
// end ;
33896: PPOPN 3
33898: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33899: LD_INT 0
33901: PPUSH
// case cmd of 301 :
33902: LD_VAR 0 1
33906: PUSH
33907: LD_INT 301
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33947
33915: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33916: LD_VAR 0 6
33920: PPUSH
33921: LD_VAR 0 7
33925: PPUSH
33926: LD_VAR 0 8
33930: PPUSH
33931: LD_VAR 0 4
33935: PPUSH
33936: LD_VAR 0 5
33940: PPUSH
33941: CALL 35148 0 5
33945: GO 34068
33947: LD_INT 302
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 33992
33955: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33956: LD_VAR 0 6
33960: PPUSH
33961: LD_VAR 0 7
33965: PPUSH
33966: LD_VAR 0 8
33970: PPUSH
33971: LD_VAR 0 9
33975: PPUSH
33976: LD_VAR 0 4
33980: PPUSH
33981: LD_VAR 0 5
33985: PPUSH
33986: CALL 35239 0 6
33990: GO 34068
33992: LD_INT 303
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34037
34000: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34001: LD_VAR 0 6
34005: PPUSH
34006: LD_VAR 0 7
34010: PPUSH
34011: LD_VAR 0 8
34015: PPUSH
34016: LD_VAR 0 9
34020: PPUSH
34021: LD_VAR 0 4
34025: PPUSH
34026: LD_VAR 0 5
34030: PPUSH
34031: CALL 34073 0 6
34035: GO 34068
34037: LD_INT 304
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34045
34043: GO 34067
34045: POP
// hHackTeleport ( unit , x , y ) ; end ;
34046: LD_VAR 0 2
34050: PPUSH
34051: LD_VAR 0 4
34055: PPUSH
34056: LD_VAR 0 5
34060: PPUSH
34061: CALL 35832 0 3
34065: GO 34068
34067: POP
// end ;
34068: LD_VAR 0 12
34072: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34073: LD_INT 0
34075: PPUSH
34076: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34077: LD_VAR 0 1
34081: PUSH
34082: LD_INT 1
34084: LESS
34085: PUSH
34086: LD_VAR 0 1
34090: PUSH
34091: LD_INT 3
34093: GREATER
34094: OR
34095: PUSH
34096: LD_VAR 0 5
34100: PPUSH
34101: LD_VAR 0 6
34105: PPUSH
34106: CALL_OW 428
34110: OR
34111: IFFALSE 34115
// exit ;
34113: GO 34835
// uc_side := your_side ;
34115: LD_ADDR_OWVAR 20
34119: PUSH
34120: LD_OWVAR 2
34124: ST_TO_ADDR
// uc_nation := nation ;
34125: LD_ADDR_OWVAR 21
34129: PUSH
34130: LD_VAR 0 1
34134: ST_TO_ADDR
// bc_level = 1 ;
34135: LD_ADDR_OWVAR 43
34139: PUSH
34140: LD_INT 1
34142: ST_TO_ADDR
// case btype of 1 :
34143: LD_VAR 0 2
34147: PUSH
34148: LD_INT 1
34150: DOUBLE
34151: EQUAL
34152: IFTRUE 34156
34154: GO 34167
34156: POP
// bc_type := b_depot ; 2 :
34157: LD_ADDR_OWVAR 42
34161: PUSH
34162: LD_INT 0
34164: ST_TO_ADDR
34165: GO 34779
34167: LD_INT 2
34169: DOUBLE
34170: EQUAL
34171: IFTRUE 34175
34173: GO 34186
34175: POP
// bc_type := b_warehouse ; 3 :
34176: LD_ADDR_OWVAR 42
34180: PUSH
34181: LD_INT 1
34183: ST_TO_ADDR
34184: GO 34779
34186: LD_INT 3
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34205
34194: POP
// bc_type := b_lab ; 4 .. 9 :
34195: LD_ADDR_OWVAR 42
34199: PUSH
34200: LD_INT 6
34202: ST_TO_ADDR
34203: GO 34779
34205: LD_INT 4
34207: DOUBLE
34208: GREATEREQUAL
34209: IFFALSE 34217
34211: LD_INT 9
34213: DOUBLE
34214: LESSEQUAL
34215: IFTRUE 34219
34217: GO 34271
34219: POP
// begin bc_type := b_lab_half ;
34220: LD_ADDR_OWVAR 42
34224: PUSH
34225: LD_INT 7
34227: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34228: LD_ADDR_OWVAR 44
34232: PUSH
34233: LD_INT 10
34235: PUSH
34236: LD_INT 11
34238: PUSH
34239: LD_INT 12
34241: PUSH
34242: LD_INT 15
34244: PUSH
34245: LD_INT 14
34247: PUSH
34248: LD_INT 13
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: PUSH
34259: LD_VAR 0 2
34263: PUSH
34264: LD_INT 3
34266: MINUS
34267: ARRAY
34268: ST_TO_ADDR
// end ; 10 .. 13 :
34269: GO 34779
34271: LD_INT 10
34273: DOUBLE
34274: GREATEREQUAL
34275: IFFALSE 34283
34277: LD_INT 13
34279: DOUBLE
34280: LESSEQUAL
34281: IFTRUE 34285
34283: GO 34362
34285: POP
// begin bc_type := b_lab_full ;
34286: LD_ADDR_OWVAR 42
34290: PUSH
34291: LD_INT 8
34293: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34294: LD_ADDR_OWVAR 44
34298: PUSH
34299: LD_INT 10
34301: PUSH
34302: LD_INT 12
34304: PUSH
34305: LD_INT 14
34307: PUSH
34308: LD_INT 13
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: PUSH
34317: LD_VAR 0 2
34321: PUSH
34322: LD_INT 9
34324: MINUS
34325: ARRAY
34326: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34327: LD_ADDR_OWVAR 45
34331: PUSH
34332: LD_INT 11
34334: PUSH
34335: LD_INT 15
34337: PUSH
34338: LD_INT 12
34340: PUSH
34341: LD_INT 15
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: PUSH
34350: LD_VAR 0 2
34354: PUSH
34355: LD_INT 9
34357: MINUS
34358: ARRAY
34359: ST_TO_ADDR
// end ; 14 :
34360: GO 34779
34362: LD_INT 14
34364: DOUBLE
34365: EQUAL
34366: IFTRUE 34370
34368: GO 34381
34370: POP
// bc_type := b_workshop ; 15 :
34371: LD_ADDR_OWVAR 42
34375: PUSH
34376: LD_INT 2
34378: ST_TO_ADDR
34379: GO 34779
34381: LD_INT 15
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34389
34387: GO 34400
34389: POP
// bc_type := b_factory ; 16 :
34390: LD_ADDR_OWVAR 42
34394: PUSH
34395: LD_INT 3
34397: ST_TO_ADDR
34398: GO 34779
34400: LD_INT 16
34402: DOUBLE
34403: EQUAL
34404: IFTRUE 34408
34406: GO 34419
34408: POP
// bc_type := b_ext_gun ; 17 :
34409: LD_ADDR_OWVAR 42
34413: PUSH
34414: LD_INT 17
34416: ST_TO_ADDR
34417: GO 34779
34419: LD_INT 17
34421: DOUBLE
34422: EQUAL
34423: IFTRUE 34427
34425: GO 34455
34427: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34428: LD_ADDR_OWVAR 42
34432: PUSH
34433: LD_INT 19
34435: PUSH
34436: LD_INT 23
34438: PUSH
34439: LD_INT 19
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: PUSH
34447: LD_VAR 0 1
34451: ARRAY
34452: ST_TO_ADDR
34453: GO 34779
34455: LD_INT 18
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34463
34461: GO 34474
34463: POP
// bc_type := b_ext_radar ; 19 :
34464: LD_ADDR_OWVAR 42
34468: PUSH
34469: LD_INT 20
34471: ST_TO_ADDR
34472: GO 34779
34474: LD_INT 19
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34482
34480: GO 34493
34482: POP
// bc_type := b_ext_radio ; 20 :
34483: LD_ADDR_OWVAR 42
34487: PUSH
34488: LD_INT 22
34490: ST_TO_ADDR
34491: GO 34779
34493: LD_INT 20
34495: DOUBLE
34496: EQUAL
34497: IFTRUE 34501
34499: GO 34512
34501: POP
// bc_type := b_ext_siberium ; 21 :
34502: LD_ADDR_OWVAR 42
34506: PUSH
34507: LD_INT 21
34509: ST_TO_ADDR
34510: GO 34779
34512: LD_INT 21
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34531
34520: POP
// bc_type := b_ext_computer ; 22 :
34521: LD_ADDR_OWVAR 42
34525: PUSH
34526: LD_INT 24
34528: ST_TO_ADDR
34529: GO 34779
34531: LD_INT 22
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34550
34539: POP
// bc_type := b_ext_track ; 23 :
34540: LD_ADDR_OWVAR 42
34544: PUSH
34545: LD_INT 16
34547: ST_TO_ADDR
34548: GO 34779
34550: LD_INT 23
34552: DOUBLE
34553: EQUAL
34554: IFTRUE 34558
34556: GO 34569
34558: POP
// bc_type := b_ext_laser ; 24 :
34559: LD_ADDR_OWVAR 42
34563: PUSH
34564: LD_INT 25
34566: ST_TO_ADDR
34567: GO 34779
34569: LD_INT 24
34571: DOUBLE
34572: EQUAL
34573: IFTRUE 34577
34575: GO 34588
34577: POP
// bc_type := b_control_tower ; 25 :
34578: LD_ADDR_OWVAR 42
34582: PUSH
34583: LD_INT 36
34585: ST_TO_ADDR
34586: GO 34779
34588: LD_INT 25
34590: DOUBLE
34591: EQUAL
34592: IFTRUE 34596
34594: GO 34607
34596: POP
// bc_type := b_breastwork ; 26 :
34597: LD_ADDR_OWVAR 42
34601: PUSH
34602: LD_INT 31
34604: ST_TO_ADDR
34605: GO 34779
34607: LD_INT 26
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34626
34615: POP
// bc_type := b_bunker ; 27 :
34616: LD_ADDR_OWVAR 42
34620: PUSH
34621: LD_INT 32
34623: ST_TO_ADDR
34624: GO 34779
34626: LD_INT 27
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34634
34632: GO 34645
34634: POP
// bc_type := b_turret ; 28 :
34635: LD_ADDR_OWVAR 42
34639: PUSH
34640: LD_INT 33
34642: ST_TO_ADDR
34643: GO 34779
34645: LD_INT 28
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34664
34653: POP
// bc_type := b_armoury ; 29 :
34654: LD_ADDR_OWVAR 42
34658: PUSH
34659: LD_INT 4
34661: ST_TO_ADDR
34662: GO 34779
34664: LD_INT 29
34666: DOUBLE
34667: EQUAL
34668: IFTRUE 34672
34670: GO 34683
34672: POP
// bc_type := b_barracks ; 30 :
34673: LD_ADDR_OWVAR 42
34677: PUSH
34678: LD_INT 5
34680: ST_TO_ADDR
34681: GO 34779
34683: LD_INT 30
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34702
34691: POP
// bc_type := b_solar_power ; 31 :
34692: LD_ADDR_OWVAR 42
34696: PUSH
34697: LD_INT 27
34699: ST_TO_ADDR
34700: GO 34779
34702: LD_INT 31
34704: DOUBLE
34705: EQUAL
34706: IFTRUE 34710
34708: GO 34721
34710: POP
// bc_type := b_oil_power ; 32 :
34711: LD_ADDR_OWVAR 42
34715: PUSH
34716: LD_INT 26
34718: ST_TO_ADDR
34719: GO 34779
34721: LD_INT 32
34723: DOUBLE
34724: EQUAL
34725: IFTRUE 34729
34727: GO 34740
34729: POP
// bc_type := b_siberite_power ; 33 :
34730: LD_ADDR_OWVAR 42
34734: PUSH
34735: LD_INT 28
34737: ST_TO_ADDR
34738: GO 34779
34740: LD_INT 33
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34748
34746: GO 34759
34748: POP
// bc_type := b_oil_mine ; 34 :
34749: LD_ADDR_OWVAR 42
34753: PUSH
34754: LD_INT 29
34756: ST_TO_ADDR
34757: GO 34779
34759: LD_INT 34
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34778
34767: POP
// bc_type := b_siberite_mine ; end ;
34768: LD_ADDR_OWVAR 42
34772: PUSH
34773: LD_INT 30
34775: ST_TO_ADDR
34776: GO 34779
34778: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34779: LD_ADDR_VAR 0 8
34783: PUSH
34784: LD_VAR 0 5
34788: PPUSH
34789: LD_VAR 0 6
34793: PPUSH
34794: LD_VAR 0 3
34798: PPUSH
34799: CALL_OW 47
34803: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34804: LD_OWVAR 42
34808: PUSH
34809: LD_INT 32
34811: PUSH
34812: LD_INT 33
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: IN
34819: IFFALSE 34835
// PlaceWeaponTurret ( b , weapon ) ;
34821: LD_VAR 0 8
34825: PPUSH
34826: LD_VAR 0 4
34830: PPUSH
34831: CALL_OW 431
// end ;
34835: LD_VAR 0 7
34839: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34840: LD_INT 0
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34846: LD_ADDR_VAR 0 4
34850: PUSH
34851: LD_INT 22
34853: PUSH
34854: LD_OWVAR 2
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 30
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 30
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PPUSH
34895: CALL_OW 69
34899: ST_TO_ADDR
// if not tmp then
34900: LD_VAR 0 4
34904: NOT
34905: IFFALSE 34909
// exit ;
34907: GO 34968
// for i in tmp do
34909: LD_ADDR_VAR 0 2
34913: PUSH
34914: LD_VAR 0 4
34918: PUSH
34919: FOR_IN
34920: IFFALSE 34966
// for j = 1 to 3 do
34922: LD_ADDR_VAR 0 3
34926: PUSH
34927: DOUBLE
34928: LD_INT 1
34930: DEC
34931: ST_TO_ADDR
34932: LD_INT 3
34934: PUSH
34935: FOR_TO
34936: IFFALSE 34962
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34938: LD_VAR 0 2
34942: PPUSH
34943: CALL_OW 274
34947: PPUSH
34948: LD_VAR 0 3
34952: PPUSH
34953: LD_INT 99999
34955: PPUSH
34956: CALL_OW 277
34960: GO 34935
34962: POP
34963: POP
34964: GO 34919
34966: POP
34967: POP
// end ;
34968: LD_VAR 0 1
34972: RET
// export function hHackSetLevel10 ; var i , j ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
34977: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34978: LD_ADDR_VAR 0 2
34982: PUSH
34983: LD_INT 21
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PPUSH
34993: CALL_OW 69
34997: PUSH
34998: FOR_IN
34999: IFFALSE 35051
// if IsSelected ( i ) then
35001: LD_VAR 0 2
35005: PPUSH
35006: CALL_OW 306
35010: IFFALSE 35049
// begin for j := 1 to 4 do
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: DOUBLE
35018: LD_INT 1
35020: DEC
35021: ST_TO_ADDR
35022: LD_INT 4
35024: PUSH
35025: FOR_TO
35026: IFFALSE 35047
// SetSkill ( i , j , 10 ) ;
35028: LD_VAR 0 2
35032: PPUSH
35033: LD_VAR 0 3
35037: PPUSH
35038: LD_INT 10
35040: PPUSH
35041: CALL_OW 237
35045: GO 35025
35047: POP
35048: POP
// end ;
35049: GO 34998
35051: POP
35052: POP
// end ;
35053: LD_VAR 0 1
35057: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35058: LD_INT 0
35060: PPUSH
35061: PPUSH
35062: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35063: LD_ADDR_VAR 0 2
35067: PUSH
35068: LD_INT 22
35070: PUSH
35071: LD_OWVAR 2
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 21
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PPUSH
35094: CALL_OW 69
35098: PUSH
35099: FOR_IN
35100: IFFALSE 35141
// begin for j := 1 to 4 do
35102: LD_ADDR_VAR 0 3
35106: PUSH
35107: DOUBLE
35108: LD_INT 1
35110: DEC
35111: ST_TO_ADDR
35112: LD_INT 4
35114: PUSH
35115: FOR_TO
35116: IFFALSE 35137
// SetSkill ( i , j , 10 ) ;
35118: LD_VAR 0 2
35122: PPUSH
35123: LD_VAR 0 3
35127: PPUSH
35128: LD_INT 10
35130: PPUSH
35131: CALL_OW 237
35135: GO 35115
35137: POP
35138: POP
// end ;
35139: GO 35099
35141: POP
35142: POP
// end ;
35143: LD_VAR 0 1
35147: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35148: LD_INT 0
35150: PPUSH
// uc_side := your_side ;
35151: LD_ADDR_OWVAR 20
35155: PUSH
35156: LD_OWVAR 2
35160: ST_TO_ADDR
// uc_nation := nation ;
35161: LD_ADDR_OWVAR 21
35165: PUSH
35166: LD_VAR 0 1
35170: ST_TO_ADDR
// InitHc ;
35171: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35175: LD_INT 0
35177: PPUSH
35178: LD_VAR 0 2
35182: PPUSH
35183: LD_VAR 0 3
35187: PPUSH
35188: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35192: LD_VAR 0 4
35196: PPUSH
35197: LD_VAR 0 5
35201: PPUSH
35202: CALL_OW 428
35206: PUSH
35207: LD_INT 0
35209: EQUAL
35210: IFFALSE 35234
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35212: CALL_OW 44
35216: PPUSH
35217: LD_VAR 0 4
35221: PPUSH
35222: LD_VAR 0 5
35226: PPUSH
35227: LD_INT 1
35229: PPUSH
35230: CALL_OW 48
// end ;
35234: LD_VAR 0 6
35238: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35239: LD_INT 0
35241: PPUSH
35242: PPUSH
// uc_side := your_side ;
35243: LD_ADDR_OWVAR 20
35247: PUSH
35248: LD_OWVAR 2
35252: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35253: LD_VAR 0 1
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 3
35266: PUSH
35267: LD_INT 4
35269: PUSH
35270: LD_INT 5
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: IN
35280: IFFALSE 35292
// uc_nation := nation_american else
35282: LD_ADDR_OWVAR 21
35286: PUSH
35287: LD_INT 1
35289: ST_TO_ADDR
35290: GO 35335
// if chassis in [ 11 , 12 , 13 , 14 ] then
35292: LD_VAR 0 1
35296: PUSH
35297: LD_INT 11
35299: PUSH
35300: LD_INT 12
35302: PUSH
35303: LD_INT 13
35305: PUSH
35306: LD_INT 14
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: IN
35315: IFFALSE 35327
// uc_nation := nation_arabian else
35317: LD_ADDR_OWVAR 21
35321: PUSH
35322: LD_INT 2
35324: ST_TO_ADDR
35325: GO 35335
// uc_nation := nation_russian ;
35327: LD_ADDR_OWVAR 21
35331: PUSH
35332: LD_INT 3
35334: ST_TO_ADDR
// vc_chassis := chassis ;
35335: LD_ADDR_OWVAR 37
35339: PUSH
35340: LD_VAR 0 1
35344: ST_TO_ADDR
// vc_engine := engine ;
35345: LD_ADDR_OWVAR 39
35349: PUSH
35350: LD_VAR 0 2
35354: ST_TO_ADDR
// vc_control := control ;
35355: LD_ADDR_OWVAR 38
35359: PUSH
35360: LD_VAR 0 3
35364: ST_TO_ADDR
// vc_weapon := weapon ;
35365: LD_ADDR_OWVAR 40
35369: PUSH
35370: LD_VAR 0 4
35374: ST_TO_ADDR
// un := CreateVehicle ;
35375: LD_ADDR_VAR 0 8
35379: PUSH
35380: CALL_OW 45
35384: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35385: LD_VAR 0 8
35389: PPUSH
35390: LD_INT 0
35392: PPUSH
35393: LD_INT 5
35395: PPUSH
35396: CALL_OW 12
35400: PPUSH
35401: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35405: LD_VAR 0 8
35409: PPUSH
35410: LD_VAR 0 5
35414: PPUSH
35415: LD_VAR 0 6
35419: PPUSH
35420: LD_INT 1
35422: PPUSH
35423: CALL_OW 48
// end ;
35427: LD_VAR 0 7
35431: RET
// export hInvincible ; every 1 do
35432: GO 35434
35434: DISABLE
// hInvincible := [ ] ;
35435: LD_ADDR_EXP 125
35439: PUSH
35440: EMPTY
35441: ST_TO_ADDR
35442: END
// every 10 do var i ;
35443: GO 35445
35445: DISABLE
35446: LD_INT 0
35448: PPUSH
// begin enable ;
35449: ENABLE
// if not hInvincible then
35450: LD_EXP 125
35454: NOT
35455: IFFALSE 35459
// exit ;
35457: GO 35503
// for i in hInvincible do
35459: LD_ADDR_VAR 0 1
35463: PUSH
35464: LD_EXP 125
35468: PUSH
35469: FOR_IN
35470: IFFALSE 35501
// if GetLives ( i ) < 1000 then
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 256
35481: PUSH
35482: LD_INT 1000
35484: LESS
35485: IFFALSE 35499
// SetLives ( i , 1000 ) ;
35487: LD_VAR 0 1
35491: PPUSH
35492: LD_INT 1000
35494: PPUSH
35495: CALL_OW 234
35499: GO 35469
35501: POP
35502: POP
// end ;
35503: PPOPN 1
35505: END
// export function hHackInvincible ; var i ; begin
35506: LD_INT 0
35508: PPUSH
35509: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35510: LD_ADDR_VAR 0 2
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 21
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 21
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: LIST
35542: PPUSH
35543: CALL_OW 69
35547: PUSH
35548: FOR_IN
35549: IFFALSE 35610
// if IsSelected ( i ) then
35551: LD_VAR 0 2
35555: PPUSH
35556: CALL_OW 306
35560: IFFALSE 35608
// begin if i in hInvincible then
35562: LD_VAR 0 2
35566: PUSH
35567: LD_EXP 125
35571: IN
35572: IFFALSE 35592
// hInvincible := hInvincible diff i else
35574: LD_ADDR_EXP 125
35578: PUSH
35579: LD_EXP 125
35583: PUSH
35584: LD_VAR 0 2
35588: DIFF
35589: ST_TO_ADDR
35590: GO 35608
// hInvincible := hInvincible union i ;
35592: LD_ADDR_EXP 125
35596: PUSH
35597: LD_EXP 125
35601: PUSH
35602: LD_VAR 0 2
35606: UNION
35607: ST_TO_ADDR
// end ;
35608: GO 35548
35610: POP
35611: POP
// end ;
35612: LD_VAR 0 1
35616: RET
// export function hHackInvisible ; var i , j ; begin
35617: LD_INT 0
35619: PPUSH
35620: PPUSH
35621: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35622: LD_ADDR_VAR 0 2
35626: PUSH
35627: LD_INT 21
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PPUSH
35637: CALL_OW 69
35641: PUSH
35642: FOR_IN
35643: IFFALSE 35667
// if IsSelected ( i ) then
35645: LD_VAR 0 2
35649: PPUSH
35650: CALL_OW 306
35654: IFFALSE 35665
// ComForceInvisible ( i ) ;
35656: LD_VAR 0 2
35660: PPUSH
35661: CALL_OW 496
35665: GO 35642
35667: POP
35668: POP
// end ;
35669: LD_VAR 0 1
35673: RET
// export function hHackChangeYourSide ; begin
35674: LD_INT 0
35676: PPUSH
// if your_side = 8 then
35677: LD_OWVAR 2
35681: PUSH
35682: LD_INT 8
35684: EQUAL
35685: IFFALSE 35697
// your_side := 0 else
35687: LD_ADDR_OWVAR 2
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
35695: GO 35711
// your_side := your_side + 1 ;
35697: LD_ADDR_OWVAR 2
35701: PUSH
35702: LD_OWVAR 2
35706: PUSH
35707: LD_INT 1
35709: PLUS
35710: ST_TO_ADDR
// end ;
35711: LD_VAR 0 1
35715: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35716: LD_INT 0
35718: PPUSH
35719: PPUSH
35720: PPUSH
// for i in all_units do
35721: LD_ADDR_VAR 0 2
35725: PUSH
35726: LD_OWVAR 3
35730: PUSH
35731: FOR_IN
35732: IFFALSE 35810
// if IsSelected ( i ) then
35734: LD_VAR 0 2
35738: PPUSH
35739: CALL_OW 306
35743: IFFALSE 35808
// begin j := GetSide ( i ) ;
35745: LD_ADDR_VAR 0 3
35749: PUSH
35750: LD_VAR 0 2
35754: PPUSH
35755: CALL_OW 255
35759: ST_TO_ADDR
// if j = 8 then
35760: LD_VAR 0 3
35764: PUSH
35765: LD_INT 8
35767: EQUAL
35768: IFFALSE 35780
// j := 0 else
35770: LD_ADDR_VAR 0 3
35774: PUSH
35775: LD_INT 0
35777: ST_TO_ADDR
35778: GO 35794
// j := j + 1 ;
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_VAR 0 3
35789: PUSH
35790: LD_INT 1
35792: PLUS
35793: ST_TO_ADDR
// SetSide ( i , j ) ;
35794: LD_VAR 0 2
35798: PPUSH
35799: LD_VAR 0 3
35803: PPUSH
35804: CALL_OW 235
// end ;
35808: GO 35731
35810: POP
35811: POP
// end ;
35812: LD_VAR 0 1
35816: RET
// export function hHackFog ; begin
35817: LD_INT 0
35819: PPUSH
// FogOff ( true ) ;
35820: LD_INT 1
35822: PPUSH
35823: CALL_OW 344
// end ;
35827: LD_VAR 0 1
35831: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35832: LD_INT 0
35834: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35835: LD_VAR 0 1
35839: PPUSH
35840: LD_VAR 0 2
35844: PPUSH
35845: LD_VAR 0 3
35849: PPUSH
35850: LD_INT 1
35852: PPUSH
35853: LD_INT 1
35855: PPUSH
35856: CALL_OW 483
// CenterOnXY ( x , y ) ;
35860: LD_VAR 0 2
35864: PPUSH
35865: LD_VAR 0 3
35869: PPUSH
35870: CALL_OW 84
// end ; end_of_file
35874: LD_VAR 0 4
35878: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35879: LD_INT 0
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL_OW 264
35894: PUSH
35895: LD_EXP 56
35899: EQUAL
35900: IFFALSE 35972
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35902: LD_INT 68
35904: PPUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: CALL_OW 255
35914: PPUSH
35915: CALL_OW 321
35919: PUSH
35920: LD_INT 2
35922: EQUAL
35923: IFFALSE 35935
// eff := 70 else
35925: LD_ADDR_VAR 0 4
35929: PUSH
35930: LD_INT 70
35932: ST_TO_ADDR
35933: GO 35943
// eff := 30 ;
35935: LD_ADDR_VAR 0 4
35939: PUSH
35940: LD_INT 30
35942: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 250
35952: PPUSH
35953: LD_VAR 0 1
35957: PPUSH
35958: CALL_OW 251
35962: PPUSH
35963: LD_VAR 0 4
35967: PPUSH
35968: CALL_OW 495
// end ; end ;
35972: LD_VAR 0 2
35976: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35977: LD_INT 0
35979: PPUSH
// end ;
35980: LD_VAR 0 4
35984: RET
// export function SOS_Command ( cmd ) ; begin
35985: LD_INT 0
35987: PPUSH
// end ;
35988: LD_VAR 0 2
35992: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35993: LD_INT 0
35995: PPUSH
// if cmd = 121 then
35996: LD_VAR 0 1
36000: PUSH
36001: LD_INT 121
36003: EQUAL
36004: IFFALSE 36006
// end ;
36006: LD_VAR 0 6
36010: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36011: LD_INT 0
36013: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36014: LD_VAR 0 1
36018: PUSH
36019: LD_INT 250
36021: EQUAL
36022: PUSH
36023: LD_VAR 0 2
36027: PPUSH
36028: CALL_OW 264
36032: PUSH
36033: LD_EXP 59
36037: EQUAL
36038: AND
36039: IFFALSE 36060
// MinerPlaceMine ( unit , x , y ) ;
36041: LD_VAR 0 2
36045: PPUSH
36046: LD_VAR 0 4
36050: PPUSH
36051: LD_VAR 0 5
36055: PPUSH
36056: CALL 38409 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36060: LD_VAR 0 1
36064: PUSH
36065: LD_INT 251
36067: EQUAL
36068: PUSH
36069: LD_VAR 0 2
36073: PPUSH
36074: CALL_OW 264
36078: PUSH
36079: LD_EXP 59
36083: EQUAL
36084: AND
36085: IFFALSE 36106
// MinerDetonateMine ( unit , x , y ) ;
36087: LD_VAR 0 2
36091: PPUSH
36092: LD_VAR 0 4
36096: PPUSH
36097: LD_VAR 0 5
36101: PPUSH
36102: CALL 38686 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36106: LD_VAR 0 1
36110: PUSH
36111: LD_INT 252
36113: EQUAL
36114: PUSH
36115: LD_VAR 0 2
36119: PPUSH
36120: CALL_OW 264
36124: PUSH
36125: LD_EXP 59
36129: EQUAL
36130: AND
36131: IFFALSE 36152
// MinerCreateMinefield ( unit , x , y ) ;
36133: LD_VAR 0 2
36137: PPUSH
36138: LD_VAR 0 4
36142: PPUSH
36143: LD_VAR 0 5
36147: PPUSH
36148: CALL 39103 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36152: LD_VAR 0 1
36156: PUSH
36157: LD_INT 253
36159: EQUAL
36160: PUSH
36161: LD_VAR 0 2
36165: PPUSH
36166: CALL_OW 257
36170: PUSH
36171: LD_INT 5
36173: EQUAL
36174: AND
36175: IFFALSE 36196
// ComBinocular ( unit , x , y ) ;
36177: LD_VAR 0 2
36181: PPUSH
36182: LD_VAR 0 4
36186: PPUSH
36187: LD_VAR 0 5
36191: PPUSH
36192: CALL 39474 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36196: LD_VAR 0 1
36200: PUSH
36201: LD_INT 254
36203: EQUAL
36204: PUSH
36205: LD_VAR 0 2
36209: PPUSH
36210: CALL_OW 264
36214: PUSH
36215: LD_EXP 54
36219: EQUAL
36220: AND
36221: PUSH
36222: LD_VAR 0 3
36226: PPUSH
36227: CALL_OW 263
36231: PUSH
36232: LD_INT 3
36234: EQUAL
36235: AND
36236: IFFALSE 36252
// HackDestroyVehicle ( unit , selectedUnit ) ;
36238: LD_VAR 0 2
36242: PPUSH
36243: LD_VAR 0 3
36247: PPUSH
36248: CALL 37769 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36252: LD_VAR 0 1
36256: PUSH
36257: LD_INT 255
36259: EQUAL
36260: PUSH
36261: LD_VAR 0 2
36265: PPUSH
36266: CALL_OW 264
36270: PUSH
36271: LD_INT 14
36273: PUSH
36274: LD_INT 53
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: IN
36281: AND
36282: PUSH
36283: LD_VAR 0 4
36287: PPUSH
36288: LD_VAR 0 5
36292: PPUSH
36293: CALL_OW 488
36297: AND
36298: IFFALSE 36322
// CutTreeXYR ( unit , x , y , 12 ) ;
36300: LD_VAR 0 2
36304: PPUSH
36305: LD_VAR 0 4
36309: PPUSH
36310: LD_VAR 0 5
36314: PPUSH
36315: LD_INT 12
36317: PPUSH
36318: CALL 36335 0 4
// end ;
36322: LD_VAR 0 6
36326: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
36327: LD_INT 0
36329: PPUSH
// end ;
36330: LD_VAR 0 4
36334: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36335: LD_INT 0
36337: PPUSH
36338: PPUSH
36339: PPUSH
36340: PPUSH
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36346: LD_VAR 0 1
36350: NOT
36351: PUSH
36352: LD_VAR 0 2
36356: PPUSH
36357: LD_VAR 0 3
36361: PPUSH
36362: CALL_OW 488
36366: NOT
36367: OR
36368: PUSH
36369: LD_VAR 0 4
36373: NOT
36374: OR
36375: IFFALSE 36379
// exit ;
36377: GO 36719
// list := [ ] ;
36379: LD_ADDR_VAR 0 13
36383: PUSH
36384: EMPTY
36385: ST_TO_ADDR
// if x - r < 0 then
36386: LD_VAR 0 2
36390: PUSH
36391: LD_VAR 0 4
36395: MINUS
36396: PUSH
36397: LD_INT 0
36399: LESS
36400: IFFALSE 36412
// min_x := 0 else
36402: LD_ADDR_VAR 0 7
36406: PUSH
36407: LD_INT 0
36409: ST_TO_ADDR
36410: GO 36428
// min_x := x - r ;
36412: LD_ADDR_VAR 0 7
36416: PUSH
36417: LD_VAR 0 2
36421: PUSH
36422: LD_VAR 0 4
36426: MINUS
36427: ST_TO_ADDR
// if y - r < 0 then
36428: LD_VAR 0 3
36432: PUSH
36433: LD_VAR 0 4
36437: MINUS
36438: PUSH
36439: LD_INT 0
36441: LESS
36442: IFFALSE 36454
// min_y := 0 else
36444: LD_ADDR_VAR 0 8
36448: PUSH
36449: LD_INT 0
36451: ST_TO_ADDR
36452: GO 36470
// min_y := y - r ;
36454: LD_ADDR_VAR 0 8
36458: PUSH
36459: LD_VAR 0 3
36463: PUSH
36464: LD_VAR 0 4
36468: MINUS
36469: ST_TO_ADDR
// max_x := x + r ;
36470: LD_ADDR_VAR 0 9
36474: PUSH
36475: LD_VAR 0 2
36479: PUSH
36480: LD_VAR 0 4
36484: PLUS
36485: ST_TO_ADDR
// max_y := y + r ;
36486: LD_ADDR_VAR 0 10
36490: PUSH
36491: LD_VAR 0 3
36495: PUSH
36496: LD_VAR 0 4
36500: PLUS
36501: ST_TO_ADDR
// for _x = min_x to max_x do
36502: LD_ADDR_VAR 0 11
36506: PUSH
36507: DOUBLE
36508: LD_VAR 0 7
36512: DEC
36513: ST_TO_ADDR
36514: LD_VAR 0 9
36518: PUSH
36519: FOR_TO
36520: IFFALSE 36637
// for _y = min_y to max_y do
36522: LD_ADDR_VAR 0 12
36526: PUSH
36527: DOUBLE
36528: LD_VAR 0 8
36532: DEC
36533: ST_TO_ADDR
36534: LD_VAR 0 10
36538: PUSH
36539: FOR_TO
36540: IFFALSE 36633
// begin if not ValidHex ( _x , _y ) then
36542: LD_VAR 0 11
36546: PPUSH
36547: LD_VAR 0 12
36551: PPUSH
36552: CALL_OW 488
36556: NOT
36557: IFFALSE 36561
// continue ;
36559: GO 36539
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36561: LD_VAR 0 11
36565: PPUSH
36566: LD_VAR 0 12
36570: PPUSH
36571: CALL_OW 351
36575: PUSH
36576: LD_VAR 0 11
36580: PPUSH
36581: LD_VAR 0 12
36585: PPUSH
36586: CALL_OW 554
36590: AND
36591: IFFALSE 36631
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36593: LD_ADDR_VAR 0 13
36597: PUSH
36598: LD_VAR 0 13
36602: PPUSH
36603: LD_VAR 0 13
36607: PUSH
36608: LD_INT 1
36610: PLUS
36611: PPUSH
36612: LD_VAR 0 11
36616: PUSH
36617: LD_VAR 0 12
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PPUSH
36626: CALL_OW 2
36630: ST_TO_ADDR
// end ;
36631: GO 36539
36633: POP
36634: POP
36635: GO 36519
36637: POP
36638: POP
// if not list then
36639: LD_VAR 0 13
36643: NOT
36644: IFFALSE 36648
// exit ;
36646: GO 36719
// for i in list do
36648: LD_ADDR_VAR 0 6
36652: PUSH
36653: LD_VAR 0 13
36657: PUSH
36658: FOR_IN
36659: IFFALSE 36717
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36661: LD_VAR 0 1
36665: PPUSH
36666: LD_STRING M
36668: PUSH
36669: LD_VAR 0 6
36673: PUSH
36674: LD_INT 1
36676: ARRAY
36677: PUSH
36678: LD_VAR 0 6
36682: PUSH
36683: LD_INT 2
36685: ARRAY
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: PPUSH
36711: CALL_OW 447
36715: GO 36658
36717: POP
36718: POP
// end ;
36719: LD_VAR 0 5
36723: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36724: LD_EXP 128
36728: NOT
36729: IFFALSE 36779
36731: GO 36733
36733: DISABLE
// begin initHack := true ;
36734: LD_ADDR_EXP 128
36738: PUSH
36739: LD_INT 1
36741: ST_TO_ADDR
// hackTanks := [ ] ;
36742: LD_ADDR_EXP 129
36746: PUSH
36747: EMPTY
36748: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36749: LD_ADDR_EXP 130
36753: PUSH
36754: EMPTY
36755: ST_TO_ADDR
// hackLimit := 3 ;
36756: LD_ADDR_EXP 131
36760: PUSH
36761: LD_INT 3
36763: ST_TO_ADDR
// hackDist := 12 ;
36764: LD_ADDR_EXP 132
36768: PUSH
36769: LD_INT 12
36771: ST_TO_ADDR
// hackCounter := [ ] ;
36772: LD_ADDR_EXP 133
36776: PUSH
36777: EMPTY
36778: ST_TO_ADDR
// end ;
36779: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36780: LD_EXP 128
36784: PUSH
36785: LD_INT 34
36787: PUSH
36788: LD_EXP 54
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PPUSH
36797: CALL_OW 69
36801: AND
36802: IFFALSE 37057
36804: GO 36806
36806: DISABLE
36807: LD_INT 0
36809: PPUSH
36810: PPUSH
// begin enable ;
36811: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36812: LD_ADDR_VAR 0 1
36816: PUSH
36817: LD_INT 34
36819: PUSH
36820: LD_EXP 54
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PPUSH
36829: CALL_OW 69
36833: PUSH
36834: FOR_IN
36835: IFFALSE 37055
// begin if not i in hackTanks then
36837: LD_VAR 0 1
36841: PUSH
36842: LD_EXP 129
36846: IN
36847: NOT
36848: IFFALSE 36931
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36850: LD_ADDR_EXP 129
36854: PUSH
36855: LD_EXP 129
36859: PPUSH
36860: LD_EXP 129
36864: PUSH
36865: LD_INT 1
36867: PLUS
36868: PPUSH
36869: LD_VAR 0 1
36873: PPUSH
36874: CALL_OW 1
36878: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36879: LD_ADDR_EXP 130
36883: PUSH
36884: LD_EXP 130
36888: PPUSH
36889: LD_EXP 130
36893: PUSH
36894: LD_INT 1
36896: PLUS
36897: PPUSH
36898: EMPTY
36899: PPUSH
36900: CALL_OW 1
36904: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36905: LD_ADDR_EXP 133
36909: PUSH
36910: LD_EXP 133
36914: PPUSH
36915: LD_EXP 133
36919: PUSH
36920: LD_INT 1
36922: PLUS
36923: PPUSH
36924: EMPTY
36925: PPUSH
36926: CALL_OW 1
36930: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36931: LD_VAR 0 1
36935: PPUSH
36936: CALL_OW 302
36940: NOT
36941: IFFALSE 36954
// begin HackUnlinkAll ( i ) ;
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL 37060 0 1
// continue ;
36952: GO 36834
// end ; HackCheckCapturedStatus ( i ) ;
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL 37503 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36963: LD_ADDR_VAR 0 2
36967: PUSH
36968: LD_INT 81
36970: PUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 255
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 33
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 91
36997: PUSH
36998: LD_VAR 0 1
37002: PUSH
37003: LD_EXP 132
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 50
37015: PUSH
37016: EMPTY
37017: LIST
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: PPUSH
37025: CALL_OW 69
37029: ST_TO_ADDR
// if not tmp then
37030: LD_VAR 0 2
37034: NOT
37035: IFFALSE 37039
// continue ;
37037: GO 36834
// HackLink ( i , tmp ) ;
37039: LD_VAR 0 1
37043: PPUSH
37044: LD_VAR 0 2
37048: PPUSH
37049: CALL 37196 0 2
// end ;
37053: GO 36834
37055: POP
37056: POP
// end ;
37057: PPOPN 2
37059: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37060: LD_INT 0
37062: PPUSH
37063: PPUSH
37064: PPUSH
// if not hack in hackTanks then
37065: LD_VAR 0 1
37069: PUSH
37070: LD_EXP 129
37074: IN
37075: NOT
37076: IFFALSE 37080
// exit ;
37078: GO 37191
// index := GetElementIndex ( hackTanks , hack ) ;
37080: LD_ADDR_VAR 0 4
37084: PUSH
37085: LD_EXP 129
37089: PPUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL 44625 0 2
37099: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37100: LD_EXP 130
37104: PUSH
37105: LD_VAR 0 4
37109: ARRAY
37110: IFFALSE 37191
// begin for i in hackTanksCaptured [ index ] do
37112: LD_ADDR_VAR 0 3
37116: PUSH
37117: LD_EXP 130
37121: PUSH
37122: LD_VAR 0 4
37126: ARRAY
37127: PUSH
37128: FOR_IN
37129: IFFALSE 37155
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37131: LD_VAR 0 3
37135: PUSH
37136: LD_INT 1
37138: ARRAY
37139: PPUSH
37140: LD_VAR 0 3
37144: PUSH
37145: LD_INT 2
37147: ARRAY
37148: PPUSH
37149: CALL_OW 235
37153: GO 37128
37155: POP
37156: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37157: LD_ADDR_EXP 130
37161: PUSH
37162: LD_EXP 130
37166: PPUSH
37167: LD_VAR 0 4
37171: PPUSH
37172: EMPTY
37173: PPUSH
37174: CALL_OW 1
37178: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37179: LD_VAR 0 1
37183: PPUSH
37184: LD_INT 0
37186: PPUSH
37187: CALL_OW 505
// end ; end ;
37191: LD_VAR 0 2
37195: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37196: LD_INT 0
37198: PPUSH
37199: PPUSH
37200: PPUSH
// if not hack in hackTanks or not vehicles then
37201: LD_VAR 0 1
37205: PUSH
37206: LD_EXP 129
37210: IN
37211: NOT
37212: PUSH
37213: LD_VAR 0 2
37217: NOT
37218: OR
37219: IFFALSE 37223
// exit ;
37221: GO 37498
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37223: LD_ADDR_VAR 0 2
37227: PUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: LD_VAR 0 2
37237: PPUSH
37238: LD_INT 1
37240: PPUSH
37241: LD_INT 1
37243: PPUSH
37244: CALL 45275 0 4
37248: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37249: LD_ADDR_VAR 0 5
37253: PUSH
37254: LD_EXP 129
37258: PPUSH
37259: LD_VAR 0 1
37263: PPUSH
37264: CALL 44625 0 2
37268: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37269: LD_EXP 130
37273: PUSH
37274: LD_VAR 0 5
37278: ARRAY
37279: PUSH
37280: LD_EXP 131
37284: LESS
37285: IFFALSE 37474
// begin for i := 1 to vehicles do
37287: LD_ADDR_VAR 0 4
37291: PUSH
37292: DOUBLE
37293: LD_INT 1
37295: DEC
37296: ST_TO_ADDR
37297: LD_VAR 0 2
37301: PUSH
37302: FOR_TO
37303: IFFALSE 37472
// begin if hackTanksCaptured [ index ] = hackLimit then
37305: LD_EXP 130
37309: PUSH
37310: LD_VAR 0 5
37314: ARRAY
37315: PUSH
37316: LD_EXP 131
37320: EQUAL
37321: IFFALSE 37325
// break ;
37323: GO 37472
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37325: LD_ADDR_EXP 133
37329: PUSH
37330: LD_EXP 133
37334: PPUSH
37335: LD_VAR 0 5
37339: PPUSH
37340: LD_EXP 133
37344: PUSH
37345: LD_VAR 0 5
37349: ARRAY
37350: PUSH
37351: LD_INT 1
37353: PLUS
37354: PPUSH
37355: CALL_OW 1
37359: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37360: LD_ADDR_EXP 130
37364: PUSH
37365: LD_EXP 130
37369: PPUSH
37370: LD_VAR 0 5
37374: PUSH
37375: LD_EXP 130
37379: PUSH
37380: LD_VAR 0 5
37384: ARRAY
37385: PUSH
37386: LD_INT 1
37388: PLUS
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PPUSH
37394: LD_VAR 0 2
37398: PUSH
37399: LD_VAR 0 4
37403: ARRAY
37404: PUSH
37405: LD_VAR 0 2
37409: PUSH
37410: LD_VAR 0 4
37414: ARRAY
37415: PPUSH
37416: CALL_OW 255
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PPUSH
37425: CALL 44840 0 3
37429: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37430: LD_VAR 0 2
37434: PUSH
37435: LD_VAR 0 4
37439: ARRAY
37440: PPUSH
37441: LD_VAR 0 1
37445: PPUSH
37446: CALL_OW 255
37450: PPUSH
37451: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37455: LD_VAR 0 2
37459: PUSH
37460: LD_VAR 0 4
37464: ARRAY
37465: PPUSH
37466: CALL_OW 141
// end ;
37470: GO 37302
37472: POP
37473: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37474: LD_VAR 0 1
37478: PPUSH
37479: LD_EXP 130
37483: PUSH
37484: LD_VAR 0 5
37488: ARRAY
37489: PUSH
37490: LD_INT 0
37492: PLUS
37493: PPUSH
37494: CALL_OW 505
// end ;
37498: LD_VAR 0 3
37502: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37503: LD_INT 0
37505: PPUSH
37506: PPUSH
37507: PPUSH
37508: PPUSH
// if not hack in hackTanks then
37509: LD_VAR 0 1
37513: PUSH
37514: LD_EXP 129
37518: IN
37519: NOT
37520: IFFALSE 37524
// exit ;
37522: GO 37764
// index := GetElementIndex ( hackTanks , hack ) ;
37524: LD_ADDR_VAR 0 4
37528: PUSH
37529: LD_EXP 129
37533: PPUSH
37534: LD_VAR 0 1
37538: PPUSH
37539: CALL 44625 0 2
37543: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37544: LD_ADDR_VAR 0 3
37548: PUSH
37549: DOUBLE
37550: LD_EXP 130
37554: PUSH
37555: LD_VAR 0 4
37559: ARRAY
37560: INC
37561: ST_TO_ADDR
37562: LD_INT 1
37564: PUSH
37565: FOR_DOWNTO
37566: IFFALSE 37738
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37568: LD_ADDR_VAR 0 5
37572: PUSH
37573: LD_EXP 130
37577: PUSH
37578: LD_VAR 0 4
37582: ARRAY
37583: PUSH
37584: LD_VAR 0 3
37588: ARRAY
37589: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37590: LD_VAR 0 5
37594: PUSH
37595: LD_INT 1
37597: ARRAY
37598: PPUSH
37599: CALL_OW 302
37603: NOT
37604: PUSH
37605: LD_VAR 0 5
37609: PUSH
37610: LD_INT 1
37612: ARRAY
37613: PPUSH
37614: CALL_OW 255
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL_OW 255
37628: NONEQUAL
37629: OR
37630: IFFALSE 37736
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37632: LD_VAR 0 5
37636: PUSH
37637: LD_INT 1
37639: ARRAY
37640: PPUSH
37641: CALL_OW 305
37645: PUSH
37646: LD_VAR 0 5
37650: PUSH
37651: LD_INT 1
37653: ARRAY
37654: PPUSH
37655: CALL_OW 255
37659: PUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL_OW 255
37669: EQUAL
37670: AND
37671: IFFALSE 37695
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37673: LD_VAR 0 5
37677: PUSH
37678: LD_INT 1
37680: ARRAY
37681: PPUSH
37682: LD_VAR 0 5
37686: PUSH
37687: LD_INT 2
37689: ARRAY
37690: PPUSH
37691: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37695: LD_ADDR_EXP 130
37699: PUSH
37700: LD_EXP 130
37704: PPUSH
37705: LD_VAR 0 4
37709: PPUSH
37710: LD_EXP 130
37714: PUSH
37715: LD_VAR 0 4
37719: ARRAY
37720: PPUSH
37721: LD_VAR 0 3
37725: PPUSH
37726: CALL_OW 3
37730: PPUSH
37731: CALL_OW 1
37735: ST_TO_ADDR
// end ; end ;
37736: GO 37565
37738: POP
37739: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37740: LD_VAR 0 1
37744: PPUSH
37745: LD_EXP 130
37749: PUSH
37750: LD_VAR 0 4
37754: ARRAY
37755: PUSH
37756: LD_INT 0
37758: PLUS
37759: PPUSH
37760: CALL_OW 505
// end ;
37764: LD_VAR 0 2
37768: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37769: LD_INT 0
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
// if not hack in hackTanks then
37775: LD_VAR 0 1
37779: PUSH
37780: LD_EXP 129
37784: IN
37785: NOT
37786: IFFALSE 37790
// exit ;
37788: GO 37875
// index := GetElementIndex ( hackTanks , hack ) ;
37790: LD_ADDR_VAR 0 5
37794: PUSH
37795: LD_EXP 129
37799: PPUSH
37800: LD_VAR 0 1
37804: PPUSH
37805: CALL 44625 0 2
37809: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37810: LD_ADDR_VAR 0 4
37814: PUSH
37815: DOUBLE
37816: LD_INT 1
37818: DEC
37819: ST_TO_ADDR
37820: LD_EXP 130
37824: PUSH
37825: LD_VAR 0 5
37829: ARRAY
37830: PUSH
37831: FOR_TO
37832: IFFALSE 37873
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37834: LD_EXP 130
37838: PUSH
37839: LD_VAR 0 5
37843: ARRAY
37844: PUSH
37845: LD_VAR 0 4
37849: ARRAY
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: PUSH
37855: LD_VAR 0 2
37859: EQUAL
37860: IFFALSE 37871
// KillUnit ( vehicle ) ;
37862: LD_VAR 0 2
37866: PPUSH
37867: CALL_OW 66
37871: GO 37831
37873: POP
37874: POP
// end ;
37875: LD_VAR 0 3
37879: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37880: LD_EXP 134
37884: NOT
37885: IFFALSE 37920
37887: GO 37889
37889: DISABLE
// begin initMiner := true ;
37890: LD_ADDR_EXP 134
37894: PUSH
37895: LD_INT 1
37897: ST_TO_ADDR
// minersList := [ ] ;
37898: LD_ADDR_EXP 135
37902: PUSH
37903: EMPTY
37904: ST_TO_ADDR
// minerMinesList := [ ] ;
37905: LD_ADDR_EXP 136
37909: PUSH
37910: EMPTY
37911: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37912: LD_ADDR_EXP 137
37916: PUSH
37917: LD_INT 5
37919: ST_TO_ADDR
// end ;
37920: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37921: LD_EXP 134
37925: PUSH
37926: LD_INT 34
37928: PUSH
37929: LD_EXP 59
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PPUSH
37938: CALL_OW 69
37942: AND
37943: IFFALSE 38406
37945: GO 37947
37947: DISABLE
37948: LD_INT 0
37950: PPUSH
37951: PPUSH
37952: PPUSH
37953: PPUSH
// begin enable ;
37954: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37955: LD_ADDR_VAR 0 1
37959: PUSH
37960: LD_INT 34
37962: PUSH
37963: LD_EXP 59
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PPUSH
37972: CALL_OW 69
37976: PUSH
37977: FOR_IN
37978: IFFALSE 38050
// begin if not i in minersList then
37980: LD_VAR 0 1
37984: PUSH
37985: LD_EXP 135
37989: IN
37990: NOT
37991: IFFALSE 38048
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37993: LD_ADDR_EXP 135
37997: PUSH
37998: LD_EXP 135
38002: PPUSH
38003: LD_EXP 135
38007: PUSH
38008: LD_INT 1
38010: PLUS
38011: PPUSH
38012: LD_VAR 0 1
38016: PPUSH
38017: CALL_OW 1
38021: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38022: LD_ADDR_EXP 136
38026: PUSH
38027: LD_EXP 136
38031: PPUSH
38032: LD_EXP 136
38036: PUSH
38037: LD_INT 1
38039: PLUS
38040: PPUSH
38041: EMPTY
38042: PPUSH
38043: CALL_OW 1
38047: ST_TO_ADDR
// end end ;
38048: GO 37977
38050: POP
38051: POP
// for i := minerMinesList downto 1 do
38052: LD_ADDR_VAR 0 1
38056: PUSH
38057: DOUBLE
38058: LD_EXP 136
38062: INC
38063: ST_TO_ADDR
38064: LD_INT 1
38066: PUSH
38067: FOR_DOWNTO
38068: IFFALSE 38404
// begin if IsLive ( minersList [ i ] ) then
38070: LD_EXP 135
38074: PUSH
38075: LD_VAR 0 1
38079: ARRAY
38080: PPUSH
38081: CALL_OW 300
38085: IFFALSE 38113
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38087: LD_EXP 135
38091: PUSH
38092: LD_VAR 0 1
38096: ARRAY
38097: PPUSH
38098: LD_EXP 136
38102: PUSH
38103: LD_VAR 0 1
38107: ARRAY
38108: PPUSH
38109: CALL_OW 505
// if not minerMinesList [ i ] then
38113: LD_EXP 136
38117: PUSH
38118: LD_VAR 0 1
38122: ARRAY
38123: NOT
38124: IFFALSE 38128
// continue ;
38126: GO 38067
// for j := minerMinesList [ i ] downto 1 do
38128: LD_ADDR_VAR 0 2
38132: PUSH
38133: DOUBLE
38134: LD_EXP 136
38138: PUSH
38139: LD_VAR 0 1
38143: ARRAY
38144: INC
38145: ST_TO_ADDR
38146: LD_INT 1
38148: PUSH
38149: FOR_DOWNTO
38150: IFFALSE 38400
// begin side := GetSide ( minersList [ i ] ) ;
38152: LD_ADDR_VAR 0 3
38156: PUSH
38157: LD_EXP 135
38161: PUSH
38162: LD_VAR 0 1
38166: ARRAY
38167: PPUSH
38168: CALL_OW 255
38172: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38173: LD_ADDR_VAR 0 4
38177: PUSH
38178: LD_EXP 136
38182: PUSH
38183: LD_VAR 0 1
38187: ARRAY
38188: PUSH
38189: LD_VAR 0 2
38193: ARRAY
38194: PUSH
38195: LD_INT 1
38197: ARRAY
38198: PPUSH
38199: LD_EXP 136
38203: PUSH
38204: LD_VAR 0 1
38208: ARRAY
38209: PUSH
38210: LD_VAR 0 2
38214: ARRAY
38215: PUSH
38216: LD_INT 2
38218: ARRAY
38219: PPUSH
38220: CALL_OW 428
38224: ST_TO_ADDR
// if not tmp then
38225: LD_VAR 0 4
38229: NOT
38230: IFFALSE 38234
// continue ;
38232: GO 38149
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38234: LD_VAR 0 4
38238: PUSH
38239: LD_INT 81
38241: PUSH
38242: LD_VAR 0 3
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PPUSH
38251: CALL_OW 69
38255: IN
38256: PUSH
38257: LD_EXP 136
38261: PUSH
38262: LD_VAR 0 1
38266: ARRAY
38267: PUSH
38268: LD_VAR 0 2
38272: ARRAY
38273: PUSH
38274: LD_INT 1
38276: ARRAY
38277: PPUSH
38278: LD_EXP 136
38282: PUSH
38283: LD_VAR 0 1
38287: ARRAY
38288: PUSH
38289: LD_VAR 0 2
38293: ARRAY
38294: PUSH
38295: LD_INT 2
38297: ARRAY
38298: PPUSH
38299: CALL_OW 458
38303: AND
38304: IFFALSE 38398
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38306: LD_EXP 136
38310: PUSH
38311: LD_VAR 0 1
38315: ARRAY
38316: PUSH
38317: LD_VAR 0 2
38321: ARRAY
38322: PUSH
38323: LD_INT 1
38325: ARRAY
38326: PPUSH
38327: LD_EXP 136
38331: PUSH
38332: LD_VAR 0 1
38336: ARRAY
38337: PUSH
38338: LD_VAR 0 2
38342: ARRAY
38343: PUSH
38344: LD_INT 2
38346: ARRAY
38347: PPUSH
38348: LD_VAR 0 3
38352: PPUSH
38353: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38357: LD_ADDR_EXP 136
38361: PUSH
38362: LD_EXP 136
38366: PPUSH
38367: LD_VAR 0 1
38371: PPUSH
38372: LD_EXP 136
38376: PUSH
38377: LD_VAR 0 1
38381: ARRAY
38382: PPUSH
38383: LD_VAR 0 2
38387: PPUSH
38388: CALL_OW 3
38392: PPUSH
38393: CALL_OW 1
38397: ST_TO_ADDR
// end ; end ;
38398: GO 38149
38400: POP
38401: POP
// end ;
38402: GO 38067
38404: POP
38405: POP
// end ;
38406: PPOPN 4
38408: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38409: LD_INT 0
38411: PPUSH
38412: PPUSH
// result := false ;
38413: LD_ADDR_VAR 0 4
38417: PUSH
38418: LD_INT 0
38420: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38421: LD_VAR 0 1
38425: PPUSH
38426: CALL_OW 264
38430: PUSH
38431: LD_EXP 59
38435: EQUAL
38436: NOT
38437: IFFALSE 38441
// exit ;
38439: GO 38681
// index := GetElementIndex ( minersList , unit ) ;
38441: LD_ADDR_VAR 0 5
38445: PUSH
38446: LD_EXP 135
38450: PPUSH
38451: LD_VAR 0 1
38455: PPUSH
38456: CALL 44625 0 2
38460: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38461: LD_EXP 136
38465: PUSH
38466: LD_VAR 0 5
38470: ARRAY
38471: PUSH
38472: LD_EXP 137
38476: GREATEREQUAL
38477: IFFALSE 38481
// exit ;
38479: GO 38681
// ComMoveXY ( unit , x , y ) ;
38481: LD_VAR 0 1
38485: PPUSH
38486: LD_VAR 0 2
38490: PPUSH
38491: LD_VAR 0 3
38495: PPUSH
38496: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38500: LD_INT 35
38502: PPUSH
38503: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38507: LD_VAR 0 1
38511: PPUSH
38512: LD_VAR 0 2
38516: PPUSH
38517: LD_VAR 0 3
38521: PPUSH
38522: CALL 75022 0 3
38526: NOT
38527: PUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 314
38537: AND
38538: IFFALSE 38542
// exit ;
38540: GO 38681
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38542: LD_VAR 0 2
38546: PPUSH
38547: LD_VAR 0 3
38551: PPUSH
38552: CALL_OW 428
38556: PUSH
38557: LD_VAR 0 1
38561: EQUAL
38562: PUSH
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 314
38572: NOT
38573: AND
38574: IFFALSE 38500
// PlaySoundXY ( x , y , PlantMine ) ;
38576: LD_VAR 0 2
38580: PPUSH
38581: LD_VAR 0 3
38585: PPUSH
38586: LD_STRING PlantMine
38588: PPUSH
38589: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38593: LD_VAR 0 2
38597: PPUSH
38598: LD_VAR 0 3
38602: PPUSH
38603: LD_VAR 0 1
38607: PPUSH
38608: CALL_OW 255
38612: PPUSH
38613: LD_INT 0
38615: PPUSH
38616: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38620: LD_ADDR_EXP 136
38624: PUSH
38625: LD_EXP 136
38629: PPUSH
38630: LD_VAR 0 5
38634: PUSH
38635: LD_EXP 136
38639: PUSH
38640: LD_VAR 0 5
38644: ARRAY
38645: PUSH
38646: LD_INT 1
38648: PLUS
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PPUSH
38654: LD_VAR 0 2
38658: PUSH
38659: LD_VAR 0 3
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PPUSH
38668: CALL 44840 0 3
38672: ST_TO_ADDR
// result := true ;
38673: LD_ADDR_VAR 0 4
38677: PUSH
38678: LD_INT 1
38680: ST_TO_ADDR
// end ;
38681: LD_VAR 0 4
38685: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38686: LD_INT 0
38688: PPUSH
38689: PPUSH
38690: PPUSH
// if not unit in minersList then
38691: LD_VAR 0 1
38695: PUSH
38696: LD_EXP 135
38700: IN
38701: NOT
38702: IFFALSE 38706
// exit ;
38704: GO 39098
// index := GetElementIndex ( minersList , unit ) ;
38706: LD_ADDR_VAR 0 6
38710: PUSH
38711: LD_EXP 135
38715: PPUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: CALL 44625 0 2
38725: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38726: LD_ADDR_VAR 0 5
38730: PUSH
38731: DOUBLE
38732: LD_EXP 136
38736: PUSH
38737: LD_VAR 0 6
38741: ARRAY
38742: INC
38743: ST_TO_ADDR
38744: LD_INT 1
38746: PUSH
38747: FOR_DOWNTO
38748: IFFALSE 38909
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38750: LD_EXP 136
38754: PUSH
38755: LD_VAR 0 6
38759: ARRAY
38760: PUSH
38761: LD_VAR 0 5
38765: ARRAY
38766: PUSH
38767: LD_INT 1
38769: ARRAY
38770: PUSH
38771: LD_VAR 0 2
38775: EQUAL
38776: PUSH
38777: LD_EXP 136
38781: PUSH
38782: LD_VAR 0 6
38786: ARRAY
38787: PUSH
38788: LD_VAR 0 5
38792: ARRAY
38793: PUSH
38794: LD_INT 2
38796: ARRAY
38797: PUSH
38798: LD_VAR 0 3
38802: EQUAL
38803: AND
38804: IFFALSE 38907
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38806: LD_EXP 136
38810: PUSH
38811: LD_VAR 0 6
38815: ARRAY
38816: PUSH
38817: LD_VAR 0 5
38821: ARRAY
38822: PUSH
38823: LD_INT 1
38825: ARRAY
38826: PPUSH
38827: LD_EXP 136
38831: PUSH
38832: LD_VAR 0 6
38836: ARRAY
38837: PUSH
38838: LD_VAR 0 5
38842: ARRAY
38843: PUSH
38844: LD_INT 2
38846: ARRAY
38847: PPUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL_OW 255
38857: PPUSH
38858: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38862: LD_ADDR_EXP 136
38866: PUSH
38867: LD_EXP 136
38871: PPUSH
38872: LD_VAR 0 6
38876: PPUSH
38877: LD_EXP 136
38881: PUSH
38882: LD_VAR 0 6
38886: ARRAY
38887: PPUSH
38888: LD_VAR 0 5
38892: PPUSH
38893: CALL_OW 3
38897: PPUSH
38898: CALL_OW 1
38902: ST_TO_ADDR
// exit ;
38903: POP
38904: POP
38905: GO 39098
// end ; end ;
38907: GO 38747
38909: POP
38910: POP
// for i := minerMinesList [ index ] downto 1 do
38911: LD_ADDR_VAR 0 5
38915: PUSH
38916: DOUBLE
38917: LD_EXP 136
38921: PUSH
38922: LD_VAR 0 6
38926: ARRAY
38927: INC
38928: ST_TO_ADDR
38929: LD_INT 1
38931: PUSH
38932: FOR_DOWNTO
38933: IFFALSE 39096
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38935: LD_EXP 136
38939: PUSH
38940: LD_VAR 0 6
38944: ARRAY
38945: PUSH
38946: LD_VAR 0 5
38950: ARRAY
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: PPUSH
38956: LD_EXP 136
38960: PUSH
38961: LD_VAR 0 6
38965: ARRAY
38966: PUSH
38967: LD_VAR 0 5
38971: ARRAY
38972: PUSH
38973: LD_INT 2
38975: ARRAY
38976: PPUSH
38977: LD_VAR 0 2
38981: PPUSH
38982: LD_VAR 0 3
38986: PPUSH
38987: CALL_OW 298
38991: PUSH
38992: LD_INT 6
38994: LESS
38995: IFFALSE 39094
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38997: LD_EXP 136
39001: PUSH
39002: LD_VAR 0 6
39006: ARRAY
39007: PUSH
39008: LD_VAR 0 5
39012: ARRAY
39013: PUSH
39014: LD_INT 1
39016: ARRAY
39017: PPUSH
39018: LD_EXP 136
39022: PUSH
39023: LD_VAR 0 6
39027: ARRAY
39028: PUSH
39029: LD_VAR 0 5
39033: ARRAY
39034: PUSH
39035: LD_INT 2
39037: ARRAY
39038: PPUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 255
39048: PPUSH
39049: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39053: LD_ADDR_EXP 136
39057: PUSH
39058: LD_EXP 136
39062: PPUSH
39063: LD_VAR 0 6
39067: PPUSH
39068: LD_EXP 136
39072: PUSH
39073: LD_VAR 0 6
39077: ARRAY
39078: PPUSH
39079: LD_VAR 0 5
39083: PPUSH
39084: CALL_OW 3
39088: PPUSH
39089: CALL_OW 1
39093: ST_TO_ADDR
// end ; end ;
39094: GO 38932
39096: POP
39097: POP
// end ;
39098: LD_VAR 0 4
39102: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39103: LD_INT 0
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
39110: PPUSH
39111: PPUSH
39112: PPUSH
39113: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 264
39123: PUSH
39124: LD_EXP 59
39128: EQUAL
39129: NOT
39130: PUSH
39131: LD_VAR 0 1
39135: PUSH
39136: LD_EXP 135
39140: IN
39141: NOT
39142: OR
39143: IFFALSE 39147
// exit ;
39145: GO 39469
// index := GetElementIndex ( minersList , unit ) ;
39147: LD_ADDR_VAR 0 6
39151: PUSH
39152: LD_EXP 135
39156: PPUSH
39157: LD_VAR 0 1
39161: PPUSH
39162: CALL 44625 0 2
39166: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39167: LD_ADDR_VAR 0 8
39171: PUSH
39172: LD_EXP 137
39176: PUSH
39177: LD_EXP 136
39181: PUSH
39182: LD_VAR 0 6
39186: ARRAY
39187: MINUS
39188: ST_TO_ADDR
// if not minesFreeAmount then
39189: LD_VAR 0 8
39193: NOT
39194: IFFALSE 39198
// exit ;
39196: GO 39469
// tmp := [ ] ;
39198: LD_ADDR_VAR 0 7
39202: PUSH
39203: EMPTY
39204: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39205: LD_ADDR_VAR 0 5
39209: PUSH
39210: DOUBLE
39211: LD_INT 1
39213: DEC
39214: ST_TO_ADDR
39215: LD_VAR 0 8
39219: PUSH
39220: FOR_TO
39221: IFFALSE 39416
// begin _d := rand ( 0 , 5 ) ;
39223: LD_ADDR_VAR 0 11
39227: PUSH
39228: LD_INT 0
39230: PPUSH
39231: LD_INT 5
39233: PPUSH
39234: CALL_OW 12
39238: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39239: LD_ADDR_VAR 0 12
39243: PUSH
39244: LD_INT 2
39246: PPUSH
39247: LD_INT 6
39249: PPUSH
39250: CALL_OW 12
39254: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39255: LD_ADDR_VAR 0 9
39259: PUSH
39260: LD_VAR 0 2
39264: PPUSH
39265: LD_VAR 0 11
39269: PPUSH
39270: LD_VAR 0 12
39274: PPUSH
39275: CALL_OW 272
39279: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39280: LD_ADDR_VAR 0 10
39284: PUSH
39285: LD_VAR 0 3
39289: PPUSH
39290: LD_VAR 0 11
39294: PPUSH
39295: LD_VAR 0 12
39299: PPUSH
39300: CALL_OW 273
39304: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39305: LD_VAR 0 9
39309: PPUSH
39310: LD_VAR 0 10
39314: PPUSH
39315: CALL_OW 488
39319: PUSH
39320: LD_VAR 0 9
39324: PUSH
39325: LD_VAR 0 10
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_VAR 0 7
39338: IN
39339: NOT
39340: AND
39341: PUSH
39342: LD_VAR 0 9
39346: PPUSH
39347: LD_VAR 0 10
39351: PPUSH
39352: CALL_OW 458
39356: NOT
39357: AND
39358: IFFALSE 39400
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39360: LD_ADDR_VAR 0 7
39364: PUSH
39365: LD_VAR 0 7
39369: PPUSH
39370: LD_VAR 0 7
39374: PUSH
39375: LD_INT 1
39377: PLUS
39378: PPUSH
39379: LD_VAR 0 9
39383: PUSH
39384: LD_VAR 0 10
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PPUSH
39393: CALL_OW 1
39397: ST_TO_ADDR
39398: GO 39414
// i := i - 1 ;
39400: LD_ADDR_VAR 0 5
39404: PUSH
39405: LD_VAR 0 5
39409: PUSH
39410: LD_INT 1
39412: MINUS
39413: ST_TO_ADDR
// end ;
39414: GO 39220
39416: POP
39417: POP
// for i in tmp do
39418: LD_ADDR_VAR 0 5
39422: PUSH
39423: LD_VAR 0 7
39427: PUSH
39428: FOR_IN
39429: IFFALSE 39467
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39431: LD_VAR 0 1
39435: PPUSH
39436: LD_VAR 0 5
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: PPUSH
39445: LD_VAR 0 5
39449: PUSH
39450: LD_INT 2
39452: ARRAY
39453: PPUSH
39454: CALL 38409 0 3
39458: NOT
39459: IFFALSE 39465
// exit ;
39461: POP
39462: POP
39463: GO 39469
39465: GO 39428
39467: POP
39468: POP
// end ;
39469: LD_VAR 0 4
39473: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39474: LD_INT 0
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
// if not GetClass ( unit ) = class_sniper then
39483: LD_VAR 0 1
39487: PPUSH
39488: CALL_OW 257
39492: PUSH
39493: LD_INT 5
39495: EQUAL
39496: NOT
39497: IFFALSE 39501
// exit ;
39499: GO 39889
// dist := 8 ;
39501: LD_ADDR_VAR 0 5
39505: PUSH
39506: LD_INT 8
39508: ST_TO_ADDR
// viewRange := 12 ;
39509: LD_ADDR_VAR 0 7
39513: PUSH
39514: LD_INT 12
39516: ST_TO_ADDR
// side := GetSide ( unit ) ;
39517: LD_ADDR_VAR 0 6
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 255
39531: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39532: LD_INT 61
39534: PPUSH
39535: LD_VAR 0 6
39539: PPUSH
39540: CALL_OW 321
39544: PUSH
39545: LD_INT 2
39547: EQUAL
39548: IFFALSE 39558
// viewRange := 16 ;
39550: LD_ADDR_VAR 0 7
39554: PUSH
39555: LD_INT 16
39557: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39558: LD_VAR 0 1
39562: PPUSH
39563: LD_VAR 0 2
39567: PPUSH
39568: LD_VAR 0 3
39572: PPUSH
39573: CALL_OW 297
39577: PUSH
39578: LD_VAR 0 5
39582: GREATER
39583: IFFALSE 39662
// begin ComMoveXY ( unit , x , y ) ;
39585: LD_VAR 0 1
39589: PPUSH
39590: LD_VAR 0 2
39594: PPUSH
39595: LD_VAR 0 3
39599: PPUSH
39600: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39604: LD_INT 35
39606: PPUSH
39607: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39611: LD_VAR 0 1
39615: PPUSH
39616: LD_VAR 0 2
39620: PPUSH
39621: LD_VAR 0 3
39625: PPUSH
39626: CALL 75022 0 3
39630: NOT
39631: IFFALSE 39635
// exit ;
39633: GO 39889
// until GetDistUnitXY ( unit , x , y ) < dist ;
39635: LD_VAR 0 1
39639: PPUSH
39640: LD_VAR 0 2
39644: PPUSH
39645: LD_VAR 0 3
39649: PPUSH
39650: CALL_OW 297
39654: PUSH
39655: LD_VAR 0 5
39659: LESS
39660: IFFALSE 39604
// end ; ComTurnXY ( unit , x , y ) ;
39662: LD_VAR 0 1
39666: PPUSH
39667: LD_VAR 0 2
39671: PPUSH
39672: LD_VAR 0 3
39676: PPUSH
39677: CALL_OW 118
// wait ( 5 ) ;
39681: LD_INT 5
39683: PPUSH
39684: CALL_OW 67
// _d := GetDir ( unit ) ;
39688: LD_ADDR_VAR 0 10
39692: PUSH
39693: LD_VAR 0 1
39697: PPUSH
39698: CALL_OW 254
39702: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39703: LD_ADDR_VAR 0 8
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 250
39717: PPUSH
39718: LD_VAR 0 10
39722: PPUSH
39723: LD_VAR 0 5
39727: PPUSH
39728: CALL_OW 272
39732: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39733: LD_ADDR_VAR 0 9
39737: PUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 251
39747: PPUSH
39748: LD_VAR 0 10
39752: PPUSH
39753: LD_VAR 0 5
39757: PPUSH
39758: CALL_OW 273
39762: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39763: LD_VAR 0 8
39767: PPUSH
39768: LD_VAR 0 9
39772: PPUSH
39773: CALL_OW 488
39777: NOT
39778: IFFALSE 39782
// exit ;
39780: GO 39889
// ComAnimCustom ( unit , 1 ) ;
39782: LD_VAR 0 1
39786: PPUSH
39787: LD_INT 1
39789: PPUSH
39790: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39794: LD_VAR 0 8
39798: PPUSH
39799: LD_VAR 0 9
39803: PPUSH
39804: LD_VAR 0 6
39808: PPUSH
39809: LD_VAR 0 7
39813: PPUSH
39814: CALL_OW 330
// repeat wait ( 1 ) ;
39818: LD_INT 1
39820: PPUSH
39821: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 316
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 314
39844: OR
39845: PUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 302
39855: NOT
39856: OR
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 301
39867: OR
39868: IFFALSE 39818
// RemoveSeeing ( _x , _y , side ) ;
39870: LD_VAR 0 8
39874: PPUSH
39875: LD_VAR 0 9
39879: PPUSH
39880: LD_VAR 0 6
39884: PPUSH
39885: CALL_OW 331
// end ; end_of_file
39889: LD_VAR 0 4
39893: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39894: LD_INT 0
39896: PPUSH
39897: PPUSH
// if exist_mode then
39898: LD_VAR 0 2
39902: IFFALSE 39927
// unit := CreateCharacter ( prefix & ident ) else
39904: LD_ADDR_VAR 0 5
39908: PUSH
39909: LD_VAR 0 3
39913: PUSH
39914: LD_VAR 0 1
39918: STR
39919: PPUSH
39920: CALL_OW 34
39924: ST_TO_ADDR
39925: GO 39942
// unit := NewCharacter ( ident ) ;
39927: LD_ADDR_VAR 0 5
39931: PUSH
39932: LD_VAR 0 1
39936: PPUSH
39937: CALL_OW 25
39941: ST_TO_ADDR
// result := unit ;
39942: LD_ADDR_VAR 0 4
39946: PUSH
39947: LD_VAR 0 5
39951: ST_TO_ADDR
// end ;
39952: LD_VAR 0 4
39956: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39957: LD_INT 0
39959: PPUSH
39960: PPUSH
// if not side or not nation then
39961: LD_VAR 0 1
39965: NOT
39966: PUSH
39967: LD_VAR 0 2
39971: NOT
39972: OR
39973: IFFALSE 39977
// exit ;
39975: GO 40741
// case nation of nation_american :
39977: LD_VAR 0 2
39981: PUSH
39982: LD_INT 1
39984: DOUBLE
39985: EQUAL
39986: IFTRUE 39990
39988: GO 40204
39990: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39991: LD_ADDR_VAR 0 4
39995: PUSH
39996: LD_INT 35
39998: PUSH
39999: LD_INT 45
40001: PUSH
40002: LD_INT 46
40004: PUSH
40005: LD_INT 47
40007: PUSH
40008: LD_INT 82
40010: PUSH
40011: LD_INT 83
40013: PUSH
40014: LD_INT 84
40016: PUSH
40017: LD_INT 85
40019: PUSH
40020: LD_INT 86
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 6
40031: PUSH
40032: LD_INT 15
40034: PUSH
40035: LD_INT 16
40037: PUSH
40038: LD_INT 7
40040: PUSH
40041: LD_INT 12
40043: PUSH
40044: LD_INT 13
40046: PUSH
40047: LD_INT 10
40049: PUSH
40050: LD_INT 14
40052: PUSH
40053: LD_INT 20
40055: PUSH
40056: LD_INT 21
40058: PUSH
40059: LD_INT 22
40061: PUSH
40062: LD_INT 25
40064: PUSH
40065: LD_INT 32
40067: PUSH
40068: LD_INT 27
40070: PUSH
40071: LD_INT 36
40073: PUSH
40074: LD_INT 69
40076: PUSH
40077: LD_INT 39
40079: PUSH
40080: LD_INT 34
40082: PUSH
40083: LD_INT 40
40085: PUSH
40086: LD_INT 48
40088: PUSH
40089: LD_INT 49
40091: PUSH
40092: LD_INT 50
40094: PUSH
40095: LD_INT 51
40097: PUSH
40098: LD_INT 52
40100: PUSH
40101: LD_INT 53
40103: PUSH
40104: LD_INT 54
40106: PUSH
40107: LD_INT 55
40109: PUSH
40110: LD_INT 56
40112: PUSH
40113: LD_INT 57
40115: PUSH
40116: LD_INT 58
40118: PUSH
40119: LD_INT 59
40121: PUSH
40122: LD_INT 60
40124: PUSH
40125: LD_INT 61
40127: PUSH
40128: LD_INT 62
40130: PUSH
40131: LD_INT 80
40133: PUSH
40134: LD_INT 82
40136: PUSH
40137: LD_INT 83
40139: PUSH
40140: LD_INT 84
40142: PUSH
40143: LD_INT 85
40145: PUSH
40146: LD_INT 86
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
40202: GO 40665
40204: LD_INT 2
40206: DOUBLE
40207: EQUAL
40208: IFTRUE 40212
40210: GO 40434
40212: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
40213: LD_ADDR_VAR 0 4
40217: PUSH
40218: LD_INT 35
40220: PUSH
40221: LD_INT 45
40223: PUSH
40224: LD_INT 46
40226: PUSH
40227: LD_INT 47
40229: PUSH
40230: LD_INT 82
40232: PUSH
40233: LD_INT 83
40235: PUSH
40236: LD_INT 84
40238: PUSH
40239: LD_INT 85
40241: PUSH
40242: LD_INT 87
40244: PUSH
40245: LD_INT 70
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 11
40253: PUSH
40254: LD_INT 3
40256: PUSH
40257: LD_INT 4
40259: PUSH
40260: LD_INT 5
40262: PUSH
40263: LD_INT 6
40265: PUSH
40266: LD_INT 15
40268: PUSH
40269: LD_INT 18
40271: PUSH
40272: LD_INT 7
40274: PUSH
40275: LD_INT 17
40277: PUSH
40278: LD_INT 8
40280: PUSH
40281: LD_INT 20
40283: PUSH
40284: LD_INT 21
40286: PUSH
40287: LD_INT 22
40289: PUSH
40290: LD_INT 72
40292: PUSH
40293: LD_INT 26
40295: PUSH
40296: LD_INT 69
40298: PUSH
40299: LD_INT 39
40301: PUSH
40302: LD_INT 40
40304: PUSH
40305: LD_INT 41
40307: PUSH
40308: LD_INT 42
40310: PUSH
40311: LD_INT 43
40313: PUSH
40314: LD_INT 48
40316: PUSH
40317: LD_INT 49
40319: PUSH
40320: LD_INT 50
40322: PUSH
40323: LD_INT 51
40325: PUSH
40326: LD_INT 52
40328: PUSH
40329: LD_INT 53
40331: PUSH
40332: LD_INT 54
40334: PUSH
40335: LD_INT 55
40337: PUSH
40338: LD_INT 56
40340: PUSH
40341: LD_INT 60
40343: PUSH
40344: LD_INT 61
40346: PUSH
40347: LD_INT 62
40349: PUSH
40350: LD_INT 66
40352: PUSH
40353: LD_INT 67
40355: PUSH
40356: LD_INT 68
40358: PUSH
40359: LD_INT 81
40361: PUSH
40362: LD_INT 82
40364: PUSH
40365: LD_INT 83
40367: PUSH
40368: LD_INT 84
40370: PUSH
40371: LD_INT 85
40373: PUSH
40374: LD_INT 87
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: ST_TO_ADDR
40432: GO 40665
40434: LD_INT 3
40436: DOUBLE
40437: EQUAL
40438: IFTRUE 40442
40440: GO 40664
40442: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40443: LD_ADDR_VAR 0 4
40447: PUSH
40448: LD_INT 46
40450: PUSH
40451: LD_INT 47
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 82
40462: PUSH
40463: LD_INT 83
40465: PUSH
40466: LD_INT 84
40468: PUSH
40469: LD_INT 85
40471: PUSH
40472: LD_INT 86
40474: PUSH
40475: LD_INT 11
40477: PUSH
40478: LD_INT 9
40480: PUSH
40481: LD_INT 20
40483: PUSH
40484: LD_INT 19
40486: PUSH
40487: LD_INT 21
40489: PUSH
40490: LD_INT 24
40492: PUSH
40493: LD_INT 22
40495: PUSH
40496: LD_INT 25
40498: PUSH
40499: LD_INT 28
40501: PUSH
40502: LD_INT 29
40504: PUSH
40505: LD_INT 30
40507: PUSH
40508: LD_INT 31
40510: PUSH
40511: LD_INT 37
40513: PUSH
40514: LD_INT 38
40516: PUSH
40517: LD_INT 32
40519: PUSH
40520: LD_INT 27
40522: PUSH
40523: LD_INT 33
40525: PUSH
40526: LD_INT 69
40528: PUSH
40529: LD_INT 39
40531: PUSH
40532: LD_INT 34
40534: PUSH
40535: LD_INT 40
40537: PUSH
40538: LD_INT 71
40540: PUSH
40541: LD_INT 23
40543: PUSH
40544: LD_INT 44
40546: PUSH
40547: LD_INT 48
40549: PUSH
40550: LD_INT 49
40552: PUSH
40553: LD_INT 50
40555: PUSH
40556: LD_INT 51
40558: PUSH
40559: LD_INT 52
40561: PUSH
40562: LD_INT 53
40564: PUSH
40565: LD_INT 54
40567: PUSH
40568: LD_INT 55
40570: PUSH
40571: LD_INT 56
40573: PUSH
40574: LD_INT 57
40576: PUSH
40577: LD_INT 58
40579: PUSH
40580: LD_INT 59
40582: PUSH
40583: LD_INT 63
40585: PUSH
40586: LD_INT 64
40588: PUSH
40589: LD_INT 65
40591: PUSH
40592: LD_INT 82
40594: PUSH
40595: LD_INT 83
40597: PUSH
40598: LD_INT 84
40600: PUSH
40601: LD_INT 85
40603: PUSH
40604: LD_INT 86
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: ST_TO_ADDR
40662: GO 40665
40664: POP
// if state > - 1 and state < 3 then
40665: LD_VAR 0 3
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: GREATER
40674: PUSH
40675: LD_VAR 0 3
40679: PUSH
40680: LD_INT 3
40682: LESS
40683: AND
40684: IFFALSE 40741
// for i in result do
40686: LD_ADDR_VAR 0 5
40690: PUSH
40691: LD_VAR 0 4
40695: PUSH
40696: FOR_IN
40697: IFFALSE 40739
// if GetTech ( i , side ) <> state then
40699: LD_VAR 0 5
40703: PPUSH
40704: LD_VAR 0 1
40708: PPUSH
40709: CALL_OW 321
40713: PUSH
40714: LD_VAR 0 3
40718: NONEQUAL
40719: IFFALSE 40737
// result := result diff i ;
40721: LD_ADDR_VAR 0 4
40725: PUSH
40726: LD_VAR 0 4
40730: PUSH
40731: LD_VAR 0 5
40735: DIFF
40736: ST_TO_ADDR
40737: GO 40696
40739: POP
40740: POP
// end ;
40741: LD_VAR 0 4
40745: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40746: LD_INT 0
40748: PPUSH
40749: PPUSH
40750: PPUSH
// result := true ;
40751: LD_ADDR_VAR 0 3
40755: PUSH
40756: LD_INT 1
40758: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40759: LD_ADDR_VAR 0 5
40763: PUSH
40764: LD_VAR 0 2
40768: PPUSH
40769: CALL_OW 480
40773: ST_TO_ADDR
// if not tmp then
40774: LD_VAR 0 5
40778: NOT
40779: IFFALSE 40783
// exit ;
40781: GO 40832
// for i in tmp do
40783: LD_ADDR_VAR 0 4
40787: PUSH
40788: LD_VAR 0 5
40792: PUSH
40793: FOR_IN
40794: IFFALSE 40830
// if GetTech ( i , side ) <> state_researched then
40796: LD_VAR 0 4
40800: PPUSH
40801: LD_VAR 0 1
40805: PPUSH
40806: CALL_OW 321
40810: PUSH
40811: LD_INT 2
40813: NONEQUAL
40814: IFFALSE 40828
// begin result := false ;
40816: LD_ADDR_VAR 0 3
40820: PUSH
40821: LD_INT 0
40823: ST_TO_ADDR
// exit ;
40824: POP
40825: POP
40826: GO 40832
// end ;
40828: GO 40793
40830: POP
40831: POP
// end ;
40832: LD_VAR 0 3
40836: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40837: LD_INT 0
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40852: LD_VAR 0 1
40856: NOT
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: CALL_OW 257
40867: PUSH
40868: LD_INT 9
40870: NONEQUAL
40871: OR
40872: IFFALSE 40876
// exit ;
40874: GO 41449
// side := GetSide ( unit ) ;
40876: LD_ADDR_VAR 0 9
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 255
40890: ST_TO_ADDR
// tech_space := tech_spacanom ;
40891: LD_ADDR_VAR 0 12
40895: PUSH
40896: LD_INT 29
40898: ST_TO_ADDR
// tech_time := tech_taurad ;
40899: LD_ADDR_VAR 0 13
40903: PUSH
40904: LD_INT 28
40906: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40907: LD_ADDR_VAR 0 11
40911: PUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 310
40921: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40922: LD_VAR 0 11
40926: PPUSH
40927: CALL_OW 247
40931: PUSH
40932: LD_INT 2
40934: EQUAL
40935: IFFALSE 40939
// exit ;
40937: GO 41449
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40939: LD_ADDR_VAR 0 8
40943: PUSH
40944: LD_INT 81
40946: PUSH
40947: LD_VAR 0 9
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: LD_INT 21
40961: PUSH
40962: LD_INT 3
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PPUSH
40977: CALL_OW 69
40981: ST_TO_ADDR
// if not tmp then
40982: LD_VAR 0 8
40986: NOT
40987: IFFALSE 40991
// exit ;
40989: GO 41449
// if in_unit then
40991: LD_VAR 0 11
40995: IFFALSE 41019
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40997: LD_ADDR_VAR 0 10
41001: PUSH
41002: LD_VAR 0 8
41006: PPUSH
41007: LD_VAR 0 11
41011: PPUSH
41012: CALL_OW 74
41016: ST_TO_ADDR
41017: GO 41039
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41019: LD_ADDR_VAR 0 10
41023: PUSH
41024: LD_VAR 0 8
41028: PPUSH
41029: LD_VAR 0 1
41033: PPUSH
41034: CALL_OW 74
41038: ST_TO_ADDR
// if not enemy then
41039: LD_VAR 0 10
41043: NOT
41044: IFFALSE 41048
// exit ;
41046: GO 41449
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41048: LD_VAR 0 11
41052: PUSH
41053: LD_VAR 0 11
41057: PPUSH
41058: LD_VAR 0 10
41062: PPUSH
41063: CALL_OW 296
41067: PUSH
41068: LD_INT 13
41070: GREATER
41071: AND
41072: PUSH
41073: LD_VAR 0 1
41077: PPUSH
41078: LD_VAR 0 10
41082: PPUSH
41083: CALL_OW 296
41087: PUSH
41088: LD_INT 12
41090: GREATER
41091: OR
41092: IFFALSE 41096
// exit ;
41094: GO 41449
// missile := [ 1 ] ;
41096: LD_ADDR_VAR 0 14
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41107: LD_VAR 0 9
41111: PPUSH
41112: LD_VAR 0 12
41116: PPUSH
41117: CALL_OW 325
41121: IFFALSE 41150
// missile := Insert ( missile , missile + 1 , 2 ) ;
41123: LD_ADDR_VAR 0 14
41127: PUSH
41128: LD_VAR 0 14
41132: PPUSH
41133: LD_VAR 0 14
41137: PUSH
41138: LD_INT 1
41140: PLUS
41141: PPUSH
41142: LD_INT 2
41144: PPUSH
41145: CALL_OW 2
41149: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41150: LD_VAR 0 9
41154: PPUSH
41155: LD_VAR 0 13
41159: PPUSH
41160: CALL_OW 325
41164: PUSH
41165: LD_VAR 0 10
41169: PPUSH
41170: CALL_OW 255
41174: PPUSH
41175: LD_VAR 0 13
41179: PPUSH
41180: CALL_OW 325
41184: NOT
41185: AND
41186: IFFALSE 41215
// missile := Insert ( missile , missile + 1 , 3 ) ;
41188: LD_ADDR_VAR 0 14
41192: PUSH
41193: LD_VAR 0 14
41197: PPUSH
41198: LD_VAR 0 14
41202: PUSH
41203: LD_INT 1
41205: PLUS
41206: PPUSH
41207: LD_INT 3
41209: PPUSH
41210: CALL_OW 2
41214: ST_TO_ADDR
// if missile < 2 then
41215: LD_VAR 0 14
41219: PUSH
41220: LD_INT 2
41222: LESS
41223: IFFALSE 41227
// exit ;
41225: GO 41449
// x := GetX ( enemy ) ;
41227: LD_ADDR_VAR 0 4
41231: PUSH
41232: LD_VAR 0 10
41236: PPUSH
41237: CALL_OW 250
41241: ST_TO_ADDR
// y := GetY ( enemy ) ;
41242: LD_ADDR_VAR 0 5
41246: PUSH
41247: LD_VAR 0 10
41251: PPUSH
41252: CALL_OW 251
41256: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41257: LD_ADDR_VAR 0 6
41261: PUSH
41262: LD_VAR 0 4
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PPUSH
41271: LD_INT 1
41273: PPUSH
41274: CALL_OW 12
41278: PLUS
41279: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41280: LD_ADDR_VAR 0 7
41284: PUSH
41285: LD_VAR 0 5
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PPUSH
41294: LD_INT 1
41296: PPUSH
41297: CALL_OW 12
41301: PLUS
41302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41303: LD_VAR 0 6
41307: PPUSH
41308: LD_VAR 0 7
41312: PPUSH
41313: CALL_OW 488
41317: NOT
41318: IFFALSE 41340
// begin _x := x ;
41320: LD_ADDR_VAR 0 6
41324: PUSH
41325: LD_VAR 0 4
41329: ST_TO_ADDR
// _y := y ;
41330: LD_ADDR_VAR 0 7
41334: PUSH
41335: LD_VAR 0 5
41339: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41340: LD_ADDR_VAR 0 3
41344: PUSH
41345: LD_INT 1
41347: PPUSH
41348: LD_VAR 0 14
41352: PPUSH
41353: CALL_OW 12
41357: ST_TO_ADDR
// case i of 1 :
41358: LD_VAR 0 3
41362: PUSH
41363: LD_INT 1
41365: DOUBLE
41366: EQUAL
41367: IFTRUE 41371
41369: GO 41388
41371: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41372: LD_VAR 0 1
41376: PPUSH
41377: LD_VAR 0 10
41381: PPUSH
41382: CALL_OW 115
41386: GO 41449
41388: LD_INT 2
41390: DOUBLE
41391: EQUAL
41392: IFTRUE 41396
41394: GO 41418
41396: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41397: LD_VAR 0 1
41401: PPUSH
41402: LD_VAR 0 6
41406: PPUSH
41407: LD_VAR 0 7
41411: PPUSH
41412: CALL_OW 153
41416: GO 41449
41418: LD_INT 3
41420: DOUBLE
41421: EQUAL
41422: IFTRUE 41426
41424: GO 41448
41426: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41427: LD_VAR 0 1
41431: PPUSH
41432: LD_VAR 0 6
41436: PPUSH
41437: LD_VAR 0 7
41441: PPUSH
41442: CALL_OW 154
41446: GO 41449
41448: POP
// end ;
41449: LD_VAR 0 2
41453: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41454: LD_INT 0
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
// if not unit or not building then
41462: LD_VAR 0 1
41466: NOT
41467: PUSH
41468: LD_VAR 0 2
41472: NOT
41473: OR
41474: IFFALSE 41478
// exit ;
41476: GO 41636
// x := GetX ( building ) ;
41478: LD_ADDR_VAR 0 5
41482: PUSH
41483: LD_VAR 0 2
41487: PPUSH
41488: CALL_OW 250
41492: ST_TO_ADDR
// y := GetY ( building ) ;
41493: LD_ADDR_VAR 0 6
41497: PUSH
41498: LD_VAR 0 2
41502: PPUSH
41503: CALL_OW 251
41507: ST_TO_ADDR
// for i = 0 to 5 do
41508: LD_ADDR_VAR 0 4
41512: PUSH
41513: DOUBLE
41514: LD_INT 0
41516: DEC
41517: ST_TO_ADDR
41518: LD_INT 5
41520: PUSH
41521: FOR_TO
41522: IFFALSE 41634
// begin _x := ShiftX ( x , i , 3 ) ;
41524: LD_ADDR_VAR 0 7
41528: PUSH
41529: LD_VAR 0 5
41533: PPUSH
41534: LD_VAR 0 4
41538: PPUSH
41539: LD_INT 3
41541: PPUSH
41542: CALL_OW 272
41546: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41547: LD_ADDR_VAR 0 8
41551: PUSH
41552: LD_VAR 0 6
41556: PPUSH
41557: LD_VAR 0 4
41561: PPUSH
41562: LD_INT 3
41564: PPUSH
41565: CALL_OW 273
41569: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41570: LD_VAR 0 7
41574: PPUSH
41575: LD_VAR 0 8
41579: PPUSH
41580: CALL_OW 488
41584: NOT
41585: IFFALSE 41589
// continue ;
41587: GO 41521
// if HexInfo ( _x , _y ) = 0 then
41589: LD_VAR 0 7
41593: PPUSH
41594: LD_VAR 0 8
41598: PPUSH
41599: CALL_OW 428
41603: PUSH
41604: LD_INT 0
41606: EQUAL
41607: IFFALSE 41632
// begin ComMoveXY ( unit , _x , _y ) ;
41609: LD_VAR 0 1
41613: PPUSH
41614: LD_VAR 0 7
41618: PPUSH
41619: LD_VAR 0 8
41623: PPUSH
41624: CALL_OW 111
// exit ;
41628: POP
41629: POP
41630: GO 41636
// end ; end ;
41632: GO 41521
41634: POP
41635: POP
// end ;
41636: LD_VAR 0 3
41640: RET
// export function ScanBase ( side , base_area ) ; begin
41641: LD_INT 0
41643: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41644: LD_ADDR_VAR 0 3
41648: PUSH
41649: LD_VAR 0 2
41653: PPUSH
41654: LD_INT 81
41656: PUSH
41657: LD_VAR 0 1
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PPUSH
41666: CALL_OW 70
41670: ST_TO_ADDR
// end ;
41671: LD_VAR 0 3
41675: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41676: LD_INT 0
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
// result := false ;
41682: LD_ADDR_VAR 0 2
41686: PUSH
41687: LD_INT 0
41689: ST_TO_ADDR
// side := GetSide ( unit ) ;
41690: LD_ADDR_VAR 0 3
41694: PUSH
41695: LD_VAR 0 1
41699: PPUSH
41700: CALL_OW 255
41704: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41705: LD_ADDR_VAR 0 4
41709: PUSH
41710: LD_VAR 0 1
41714: PPUSH
41715: CALL_OW 248
41719: ST_TO_ADDR
// case nat of 1 :
41720: LD_VAR 0 4
41724: PUSH
41725: LD_INT 1
41727: DOUBLE
41728: EQUAL
41729: IFTRUE 41733
41731: GO 41744
41733: POP
// tech := tech_lassight ; 2 :
41734: LD_ADDR_VAR 0 5
41738: PUSH
41739: LD_INT 12
41741: ST_TO_ADDR
41742: GO 41783
41744: LD_INT 2
41746: DOUBLE
41747: EQUAL
41748: IFTRUE 41752
41750: GO 41763
41752: POP
// tech := tech_mortar ; 3 :
41753: LD_ADDR_VAR 0 5
41757: PUSH
41758: LD_INT 41
41760: ST_TO_ADDR
41761: GO 41783
41763: LD_INT 3
41765: DOUBLE
41766: EQUAL
41767: IFTRUE 41771
41769: GO 41782
41771: POP
// tech := tech_bazooka ; end ;
41772: LD_ADDR_VAR 0 5
41776: PUSH
41777: LD_INT 44
41779: ST_TO_ADDR
41780: GO 41783
41782: POP
// if Researched ( side , tech ) then
41783: LD_VAR 0 3
41787: PPUSH
41788: LD_VAR 0 5
41792: PPUSH
41793: CALL_OW 325
41797: IFFALSE 41824
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41799: LD_ADDR_VAR 0 2
41803: PUSH
41804: LD_INT 5
41806: PUSH
41807: LD_INT 8
41809: PUSH
41810: LD_INT 9
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: PUSH
41818: LD_VAR 0 4
41822: ARRAY
41823: ST_TO_ADDR
// end ;
41824: LD_VAR 0 2
41828: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41829: LD_INT 0
41831: PPUSH
41832: PPUSH
41833: PPUSH
// if not mines then
41834: LD_VAR 0 2
41838: NOT
41839: IFFALSE 41843
// exit ;
41841: GO 41987
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41843: LD_ADDR_VAR 0 5
41847: PUSH
41848: LD_INT 81
41850: PUSH
41851: LD_VAR 0 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 21
41865: PUSH
41866: LD_INT 3
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PPUSH
41881: CALL_OW 69
41885: ST_TO_ADDR
// for i in mines do
41886: LD_ADDR_VAR 0 4
41890: PUSH
41891: LD_VAR 0 2
41895: PUSH
41896: FOR_IN
41897: IFFALSE 41985
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41899: LD_VAR 0 4
41903: PUSH
41904: LD_INT 1
41906: ARRAY
41907: PPUSH
41908: LD_VAR 0 4
41912: PUSH
41913: LD_INT 2
41915: ARRAY
41916: PPUSH
41917: CALL_OW 458
41921: NOT
41922: IFFALSE 41926
// continue ;
41924: GO 41896
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41926: LD_VAR 0 4
41930: PUSH
41931: LD_INT 1
41933: ARRAY
41934: PPUSH
41935: LD_VAR 0 4
41939: PUSH
41940: LD_INT 2
41942: ARRAY
41943: PPUSH
41944: CALL_OW 428
41948: PUSH
41949: LD_VAR 0 5
41953: IN
41954: IFFALSE 41983
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41956: LD_VAR 0 4
41960: PUSH
41961: LD_INT 1
41963: ARRAY
41964: PPUSH
41965: LD_VAR 0 4
41969: PUSH
41970: LD_INT 2
41972: ARRAY
41973: PPUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 456
// end ;
41983: GO 41896
41985: POP
41986: POP
// end ;
41987: LD_VAR 0 3
41991: RET
// export function Count ( array ) ; var i ; begin
41992: LD_INT 0
41994: PPUSH
41995: PPUSH
// result := 0 ;
41996: LD_ADDR_VAR 0 2
42000: PUSH
42001: LD_INT 0
42003: ST_TO_ADDR
// for i in array do
42004: LD_ADDR_VAR 0 3
42008: PUSH
42009: LD_VAR 0 1
42013: PUSH
42014: FOR_IN
42015: IFFALSE 42039
// if i then
42017: LD_VAR 0 3
42021: IFFALSE 42037
// result := result + 1 ;
42023: LD_ADDR_VAR 0 2
42027: PUSH
42028: LD_VAR 0 2
42032: PUSH
42033: LD_INT 1
42035: PLUS
42036: ST_TO_ADDR
42037: GO 42014
42039: POP
42040: POP
// end ;
42041: LD_VAR 0 2
42045: RET
// export function IsEmpty ( building ) ; begin
42046: LD_INT 0
42048: PPUSH
// if not building then
42049: LD_VAR 0 1
42053: NOT
42054: IFFALSE 42058
// exit ;
42056: GO 42101
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42058: LD_ADDR_VAR 0 2
42062: PUSH
42063: LD_VAR 0 1
42067: PUSH
42068: LD_INT 22
42070: PUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: CALL_OW 255
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 58
42087: PUSH
42088: EMPTY
42089: LIST
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PPUSH
42095: CALL_OW 69
42099: IN
42100: ST_TO_ADDR
// end ;
42101: LD_VAR 0 2
42105: RET
// export function IsNotFull ( building ) ; begin
42106: LD_INT 0
42108: PPUSH
// if not building then
42109: LD_VAR 0 1
42113: NOT
42114: IFFALSE 42118
// exit ;
42116: GO 42137
// result := UnitsInside ( building ) < 6 ;
42118: LD_ADDR_VAR 0 2
42122: PUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: CALL_OW 313
42132: PUSH
42133: LD_INT 6
42135: LESS
42136: ST_TO_ADDR
// end ;
42137: LD_VAR 0 2
42141: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42142: LD_INT 0
42144: PPUSH
42145: PPUSH
42146: PPUSH
42147: PPUSH
// tmp := [ ] ;
42148: LD_ADDR_VAR 0 3
42152: PUSH
42153: EMPTY
42154: ST_TO_ADDR
// list := [ ] ;
42155: LD_ADDR_VAR 0 5
42159: PUSH
42160: EMPTY
42161: ST_TO_ADDR
// for i = 16 to 25 do
42162: LD_ADDR_VAR 0 4
42166: PUSH
42167: DOUBLE
42168: LD_INT 16
42170: DEC
42171: ST_TO_ADDR
42172: LD_INT 25
42174: PUSH
42175: FOR_TO
42176: IFFALSE 42249
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42178: LD_ADDR_VAR 0 3
42182: PUSH
42183: LD_VAR 0 3
42187: PUSH
42188: LD_INT 22
42190: PUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: CALL_OW 255
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 91
42207: PUSH
42208: LD_VAR 0 1
42212: PUSH
42213: LD_INT 6
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 30
42223: PUSH
42224: LD_VAR 0 4
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: PUSH
42238: EMPTY
42239: LIST
42240: PPUSH
42241: CALL_OW 69
42245: ADD
42246: ST_TO_ADDR
42247: GO 42175
42249: POP
42250: POP
// for i = 1 to tmp do
42251: LD_ADDR_VAR 0 4
42255: PUSH
42256: DOUBLE
42257: LD_INT 1
42259: DEC
42260: ST_TO_ADDR
42261: LD_VAR 0 3
42265: PUSH
42266: FOR_TO
42267: IFFALSE 42355
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42269: LD_ADDR_VAR 0 5
42273: PUSH
42274: LD_VAR 0 5
42278: PUSH
42279: LD_VAR 0 3
42283: PUSH
42284: LD_VAR 0 4
42288: ARRAY
42289: PPUSH
42290: CALL_OW 266
42294: PUSH
42295: LD_VAR 0 3
42299: PUSH
42300: LD_VAR 0 4
42304: ARRAY
42305: PPUSH
42306: CALL_OW 250
42310: PUSH
42311: LD_VAR 0 3
42315: PUSH
42316: LD_VAR 0 4
42320: ARRAY
42321: PPUSH
42322: CALL_OW 251
42326: PUSH
42327: LD_VAR 0 3
42331: PUSH
42332: LD_VAR 0 4
42336: ARRAY
42337: PPUSH
42338: CALL_OW 254
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: PUSH
42349: EMPTY
42350: LIST
42351: ADD
42352: ST_TO_ADDR
42353: GO 42266
42355: POP
42356: POP
// result := list ;
42357: LD_ADDR_VAR 0 2
42361: PUSH
42362: LD_VAR 0 5
42366: ST_TO_ADDR
// end ;
42367: LD_VAR 0 2
42371: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42372: LD_INT 0
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
42380: PPUSH
// if not factory then
42381: LD_VAR 0 1
42385: NOT
42386: IFFALSE 42390
// exit ;
42388: GO 42983
// if control = control_apeman then
42390: LD_VAR 0 4
42394: PUSH
42395: LD_INT 5
42397: EQUAL
42398: IFFALSE 42507
// begin tmp := UnitsInside ( factory ) ;
42400: LD_ADDR_VAR 0 8
42404: PUSH
42405: LD_VAR 0 1
42409: PPUSH
42410: CALL_OW 313
42414: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42415: LD_VAR 0 8
42419: PPUSH
42420: LD_INT 25
42422: PUSH
42423: LD_INT 12
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PPUSH
42430: CALL_OW 72
42434: NOT
42435: IFFALSE 42445
// control := control_manual ;
42437: LD_ADDR_VAR 0 4
42441: PUSH
42442: LD_INT 1
42444: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42445: LD_ADDR_VAR 0 8
42449: PUSH
42450: LD_VAR 0 1
42454: PPUSH
42455: CALL 42142 0 1
42459: ST_TO_ADDR
// if tmp then
42460: LD_VAR 0 8
42464: IFFALSE 42507
// begin for i in tmp do
42466: LD_ADDR_VAR 0 7
42470: PUSH
42471: LD_VAR 0 8
42475: PUSH
42476: FOR_IN
42477: IFFALSE 42505
// if i [ 1 ] = b_ext_radio then
42479: LD_VAR 0 7
42483: PUSH
42484: LD_INT 1
42486: ARRAY
42487: PUSH
42488: LD_INT 22
42490: EQUAL
42491: IFFALSE 42503
// begin control := control_remote ;
42493: LD_ADDR_VAR 0 4
42497: PUSH
42498: LD_INT 2
42500: ST_TO_ADDR
// break ;
42501: GO 42505
// end ;
42503: GO 42476
42505: POP
42506: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42507: LD_VAR 0 1
42511: PPUSH
42512: LD_VAR 0 2
42516: PPUSH
42517: LD_VAR 0 3
42521: PPUSH
42522: LD_VAR 0 4
42526: PPUSH
42527: LD_VAR 0 5
42531: PPUSH
42532: CALL_OW 448
42536: IFFALSE 42571
// begin result := [ chassis , engine , control , weapon ] ;
42538: LD_ADDR_VAR 0 6
42542: PUSH
42543: LD_VAR 0 2
42547: PUSH
42548: LD_VAR 0 3
42552: PUSH
42553: LD_VAR 0 4
42557: PUSH
42558: LD_VAR 0 5
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
// exit ;
42569: GO 42983
// end ; _chassis := AvailableChassisList ( factory ) ;
42571: LD_ADDR_VAR 0 9
42575: PUSH
42576: LD_VAR 0 1
42580: PPUSH
42581: CALL_OW 475
42585: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42586: LD_ADDR_VAR 0 11
42590: PUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 476
42600: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42601: LD_ADDR_VAR 0 12
42605: PUSH
42606: LD_VAR 0 1
42610: PPUSH
42611: CALL_OW 477
42615: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42616: LD_ADDR_VAR 0 10
42620: PUSH
42621: LD_VAR 0 1
42625: PPUSH
42626: CALL_OW 478
42630: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42631: LD_VAR 0 9
42635: NOT
42636: PUSH
42637: LD_VAR 0 11
42641: NOT
42642: OR
42643: PUSH
42644: LD_VAR 0 12
42648: NOT
42649: OR
42650: PUSH
42651: LD_VAR 0 10
42655: NOT
42656: OR
42657: IFFALSE 42692
// begin result := [ chassis , engine , control , weapon ] ;
42659: LD_ADDR_VAR 0 6
42663: PUSH
42664: LD_VAR 0 2
42668: PUSH
42669: LD_VAR 0 3
42673: PUSH
42674: LD_VAR 0 4
42678: PUSH
42679: LD_VAR 0 5
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// exit ;
42690: GO 42983
// end ; if not chassis in _chassis then
42692: LD_VAR 0 2
42696: PUSH
42697: LD_VAR 0 9
42701: IN
42702: NOT
42703: IFFALSE 42729
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42705: LD_ADDR_VAR 0 2
42709: PUSH
42710: LD_VAR 0 9
42714: PUSH
42715: LD_INT 1
42717: PPUSH
42718: LD_VAR 0 9
42722: PPUSH
42723: CALL_OW 12
42727: ARRAY
42728: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42729: LD_VAR 0 2
42733: PPUSH
42734: LD_VAR 0 3
42738: PPUSH
42739: CALL 42988 0 2
42743: NOT
42744: IFFALSE 42803
// repeat engine := _engine [ 1 ] ;
42746: LD_ADDR_VAR 0 3
42750: PUSH
42751: LD_VAR 0 11
42755: PUSH
42756: LD_INT 1
42758: ARRAY
42759: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42760: LD_ADDR_VAR 0 11
42764: PUSH
42765: LD_VAR 0 11
42769: PPUSH
42770: LD_INT 1
42772: PPUSH
42773: CALL_OW 3
42777: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42778: LD_VAR 0 2
42782: PPUSH
42783: LD_VAR 0 3
42787: PPUSH
42788: CALL 42988 0 2
42792: PUSH
42793: LD_VAR 0 11
42797: PUSH
42798: EMPTY
42799: EQUAL
42800: OR
42801: IFFALSE 42746
// if not control in _control then
42803: LD_VAR 0 4
42807: PUSH
42808: LD_VAR 0 12
42812: IN
42813: NOT
42814: IFFALSE 42840
// control := _control [ rand ( 1 , _control ) ] ;
42816: LD_ADDR_VAR 0 4
42820: PUSH
42821: LD_VAR 0 12
42825: PUSH
42826: LD_INT 1
42828: PPUSH
42829: LD_VAR 0 12
42833: PPUSH
42834: CALL_OW 12
42838: ARRAY
42839: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42840: LD_VAR 0 2
42844: PPUSH
42845: LD_VAR 0 5
42849: PPUSH
42850: CALL 43208 0 2
42854: NOT
42855: IFFALSE 42914
// repeat weapon := _weapon [ 1 ] ;
42857: LD_ADDR_VAR 0 5
42861: PUSH
42862: LD_VAR 0 10
42866: PUSH
42867: LD_INT 1
42869: ARRAY
42870: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42871: LD_ADDR_VAR 0 10
42875: PUSH
42876: LD_VAR 0 10
42880: PPUSH
42881: LD_INT 1
42883: PPUSH
42884: CALL_OW 3
42888: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42889: LD_VAR 0 2
42893: PPUSH
42894: LD_VAR 0 5
42898: PPUSH
42899: CALL 43208 0 2
42903: PUSH
42904: LD_VAR 0 10
42908: PUSH
42909: EMPTY
42910: EQUAL
42911: OR
42912: IFFALSE 42857
// result := [ ] ;
42914: LD_ADDR_VAR 0 6
42918: PUSH
42919: EMPTY
42920: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42921: LD_VAR 0 1
42925: PPUSH
42926: LD_VAR 0 2
42930: PPUSH
42931: LD_VAR 0 3
42935: PPUSH
42936: LD_VAR 0 4
42940: PPUSH
42941: LD_VAR 0 5
42945: PPUSH
42946: CALL_OW 448
42950: IFFALSE 42983
// result := [ chassis , engine , control , weapon ] ;
42952: LD_ADDR_VAR 0 6
42956: PUSH
42957: LD_VAR 0 2
42961: PUSH
42962: LD_VAR 0 3
42966: PUSH
42967: LD_VAR 0 4
42971: PUSH
42972: LD_VAR 0 5
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: ST_TO_ADDR
// end ;
42983: LD_VAR 0 6
42987: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42988: LD_INT 0
42990: PPUSH
// if not chassis or not engine then
42991: LD_VAR 0 1
42995: NOT
42996: PUSH
42997: LD_VAR 0 2
43001: NOT
43002: OR
43003: IFFALSE 43007
// exit ;
43005: GO 43203
// case engine of engine_solar :
43007: LD_VAR 0 2
43011: PUSH
43012: LD_INT 2
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43058
43020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43021: LD_ADDR_VAR 0 3
43025: PUSH
43026: LD_INT 11
43028: PUSH
43029: LD_INT 12
43031: PUSH
43032: LD_INT 13
43034: PUSH
43035: LD_INT 14
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: ST_TO_ADDR
43056: GO 43187
43058: LD_INT 1
43060: DOUBLE
43061: EQUAL
43062: IFTRUE 43066
43064: GO 43128
43066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43067: LD_ADDR_VAR 0 3
43071: PUSH
43072: LD_INT 11
43074: PUSH
43075: LD_INT 12
43077: PUSH
43078: LD_INT 13
43080: PUSH
43081: LD_INT 14
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 4
43095: PUSH
43096: LD_INT 5
43098: PUSH
43099: LD_INT 21
43101: PUSH
43102: LD_INT 23
43104: PUSH
43105: LD_INT 22
43107: PUSH
43108: LD_INT 24
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
43126: GO 43187
43128: LD_INT 3
43130: DOUBLE
43131: EQUAL
43132: IFTRUE 43136
43134: GO 43186
43136: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_INT 13
43144: PUSH
43145: LD_INT 14
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: LD_INT 4
43156: PUSH
43157: LD_INT 5
43159: PUSH
43160: LD_INT 21
43162: PUSH
43163: LD_INT 22
43165: PUSH
43166: LD_INT 23
43168: PUSH
43169: LD_INT 24
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
43184: GO 43187
43186: POP
// result := ( chassis in result ) ;
43187: LD_ADDR_VAR 0 3
43191: PUSH
43192: LD_VAR 0 1
43196: PUSH
43197: LD_VAR 0 3
43201: IN
43202: ST_TO_ADDR
// end ;
43203: LD_VAR 0 3
43207: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43208: LD_INT 0
43210: PPUSH
// if not chassis or not weapon then
43211: LD_VAR 0 1
43215: NOT
43216: PUSH
43217: LD_VAR 0 2
43221: NOT
43222: OR
43223: IFFALSE 43227
// exit ;
43225: GO 44253
// case weapon of us_machine_gun :
43227: LD_VAR 0 2
43231: PUSH
43232: LD_INT 2
43234: DOUBLE
43235: EQUAL
43236: IFTRUE 43240
43238: GO 43270
43240: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43241: LD_ADDR_VAR 0 3
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: LD_INT 4
43257: PUSH
43258: LD_INT 5
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
43268: GO 44237
43270: LD_INT 3
43272: DOUBLE
43273: EQUAL
43274: IFTRUE 43278
43276: GO 43308
43278: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43279: LD_ADDR_VAR 0 3
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: LD_INT 4
43295: PUSH
43296: LD_INT 5
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: ST_TO_ADDR
43306: GO 44237
43308: LD_INT 11
43310: DOUBLE
43311: EQUAL
43312: IFTRUE 43316
43314: GO 43346
43316: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43317: LD_ADDR_VAR 0 3
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: LD_INT 4
43333: PUSH
43334: LD_INT 5
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: ST_TO_ADDR
43344: GO 44237
43346: LD_INT 4
43348: DOUBLE
43349: EQUAL
43350: IFTRUE 43354
43352: GO 43380
43354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43355: LD_ADDR_VAR 0 3
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: LD_INT 4
43368: PUSH
43369: LD_INT 5
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
43378: GO 44237
43380: LD_INT 5
43382: DOUBLE
43383: EQUAL
43384: IFTRUE 43388
43386: GO 43414
43388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43389: LD_ADDR_VAR 0 3
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 3
43399: PUSH
43400: LD_INT 4
43402: PUSH
43403: LD_INT 5
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
43412: GO 44237
43414: LD_INT 9
43416: DOUBLE
43417: EQUAL
43418: IFTRUE 43422
43420: GO 43448
43422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43423: LD_ADDR_VAR 0 3
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 4
43436: PUSH
43437: LD_INT 5
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
43446: GO 44237
43448: LD_INT 7
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43482
43456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: LD_INT 4
43470: PUSH
43471: LD_INT 5
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: ST_TO_ADDR
43480: GO 44237
43482: LD_INT 12
43484: DOUBLE
43485: EQUAL
43486: IFTRUE 43490
43488: GO 43516
43490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: LD_INT 4
43504: PUSH
43505: LD_INT 5
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
43514: GO 44237
43516: LD_INT 13
43518: DOUBLE
43519: EQUAL
43520: IFTRUE 43524
43522: GO 43550
43524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 4
43538: PUSH
43539: LD_INT 5
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
43548: GO 44237
43550: LD_INT 14
43552: DOUBLE
43553: EQUAL
43554: IFTRUE 43558
43556: GO 43576
43558: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: LD_INT 4
43566: PUSH
43567: LD_INT 5
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: ST_TO_ADDR
43574: GO 44237
43576: LD_INT 6
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 43602
43584: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_INT 4
43592: PUSH
43593: LD_INT 5
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: ST_TO_ADDR
43600: GO 44237
43602: LD_INT 10
43604: DOUBLE
43605: EQUAL
43606: IFTRUE 43610
43608: GO 43628
43610: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 4
43618: PUSH
43619: LD_INT 5
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: ST_TO_ADDR
43626: GO 44237
43628: LD_INT 22
43630: DOUBLE
43631: EQUAL
43632: IFTRUE 43636
43634: GO 43662
43636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43637: LD_ADDR_VAR 0 3
43641: PUSH
43642: LD_INT 11
43644: PUSH
43645: LD_INT 12
43647: PUSH
43648: LD_INT 13
43650: PUSH
43651: LD_INT 14
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: ST_TO_ADDR
43660: GO 44237
43662: LD_INT 23
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43696
43670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 11
43678: PUSH
43679: LD_INT 12
43681: PUSH
43682: LD_INT 13
43684: PUSH
43685: LD_INT 14
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: ST_TO_ADDR
43694: GO 44237
43696: LD_INT 24
43698: DOUBLE
43699: EQUAL
43700: IFTRUE 43704
43702: GO 43730
43704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43705: LD_ADDR_VAR 0 3
43709: PUSH
43710: LD_INT 11
43712: PUSH
43713: LD_INT 12
43715: PUSH
43716: LD_INT 13
43718: PUSH
43719: LD_INT 14
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: ST_TO_ADDR
43728: GO 44237
43730: LD_INT 30
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43764
43738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 11
43746: PUSH
43747: LD_INT 12
43749: PUSH
43750: LD_INT 13
43752: PUSH
43753: LD_INT 14
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
43762: GO 44237
43764: LD_INT 25
43766: DOUBLE
43767: EQUAL
43768: IFTRUE 43772
43770: GO 43790
43772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_INT 13
43780: PUSH
43781: LD_INT 14
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: ST_TO_ADDR
43788: GO 44237
43790: LD_INT 27
43792: DOUBLE
43793: EQUAL
43794: IFTRUE 43798
43796: GO 43816
43798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43799: LD_ADDR_VAR 0 3
43803: PUSH
43804: LD_INT 13
43806: PUSH
43807: LD_INT 14
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: ST_TO_ADDR
43814: GO 44237
43816: LD_INT 28
43818: DOUBLE
43819: EQUAL
43820: IFTRUE 43824
43822: GO 43842
43824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43825: LD_ADDR_VAR 0 3
43829: PUSH
43830: LD_INT 13
43832: PUSH
43833: LD_INT 14
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: ST_TO_ADDR
43840: GO 44237
43842: LD_INT 29
43844: DOUBLE
43845: EQUAL
43846: IFTRUE 43850
43848: GO 43868
43850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43851: LD_ADDR_VAR 0 3
43855: PUSH
43856: LD_INT 13
43858: PUSH
43859: LD_INT 14
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: ST_TO_ADDR
43866: GO 44237
43868: LD_INT 31
43870: DOUBLE
43871: EQUAL
43872: IFTRUE 43876
43874: GO 43894
43876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43877: LD_ADDR_VAR 0 3
43881: PUSH
43882: LD_INT 13
43884: PUSH
43885: LD_INT 14
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: ST_TO_ADDR
43892: GO 44237
43894: LD_INT 26
43896: DOUBLE
43897: EQUAL
43898: IFTRUE 43902
43900: GO 43920
43902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_INT 13
43910: PUSH
43911: LD_INT 14
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: ST_TO_ADDR
43918: GO 44237
43920: LD_INT 42
43922: DOUBLE
43923: EQUAL
43924: IFTRUE 43928
43926: GO 43954
43928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43929: LD_ADDR_VAR 0 3
43933: PUSH
43934: LD_INT 21
43936: PUSH
43937: LD_INT 22
43939: PUSH
43940: LD_INT 23
43942: PUSH
43943: LD_INT 24
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: ST_TO_ADDR
43952: GO 44237
43954: LD_INT 43
43956: DOUBLE
43957: EQUAL
43958: IFTRUE 43962
43960: GO 43988
43962: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43963: LD_ADDR_VAR 0 3
43967: PUSH
43968: LD_INT 21
43970: PUSH
43971: LD_INT 22
43973: PUSH
43974: LD_INT 23
43976: PUSH
43977: LD_INT 24
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: ST_TO_ADDR
43986: GO 44237
43988: LD_INT 44
43990: DOUBLE
43991: EQUAL
43992: IFTRUE 43996
43994: GO 44022
43996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43997: LD_ADDR_VAR 0 3
44001: PUSH
44002: LD_INT 21
44004: PUSH
44005: LD_INT 22
44007: PUSH
44008: LD_INT 23
44010: PUSH
44011: LD_INT 24
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: ST_TO_ADDR
44020: GO 44237
44022: LD_INT 45
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44056
44030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_INT 21
44038: PUSH
44039: LD_INT 22
44041: PUSH
44042: LD_INT 23
44044: PUSH
44045: LD_INT 24
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
44054: GO 44237
44056: LD_INT 49
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44064
44062: GO 44090
44064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44065: LD_ADDR_VAR 0 3
44069: PUSH
44070: LD_INT 21
44072: PUSH
44073: LD_INT 22
44075: PUSH
44076: LD_INT 23
44078: PUSH
44079: LD_INT 24
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
44088: GO 44237
44090: LD_INT 51
44092: DOUBLE
44093: EQUAL
44094: IFTRUE 44098
44096: GO 44124
44098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: LD_INT 21
44106: PUSH
44107: LD_INT 22
44109: PUSH
44110: LD_INT 23
44112: PUSH
44113: LD_INT 24
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
44122: GO 44237
44124: LD_INT 52
44126: DOUBLE
44127: EQUAL
44128: IFTRUE 44132
44130: GO 44158
44132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44133: LD_ADDR_VAR 0 3
44137: PUSH
44138: LD_INT 21
44140: PUSH
44141: LD_INT 22
44143: PUSH
44144: LD_INT 23
44146: PUSH
44147: LD_INT 24
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: ST_TO_ADDR
44156: GO 44237
44158: LD_INT 53
44160: DOUBLE
44161: EQUAL
44162: IFTRUE 44166
44164: GO 44184
44166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44167: LD_ADDR_VAR 0 3
44171: PUSH
44172: LD_INT 23
44174: PUSH
44175: LD_INT 24
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: ST_TO_ADDR
44182: GO 44237
44184: LD_INT 46
44186: DOUBLE
44187: EQUAL
44188: IFTRUE 44192
44190: GO 44210
44192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44193: LD_ADDR_VAR 0 3
44197: PUSH
44198: LD_INT 23
44200: PUSH
44201: LD_INT 24
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: ST_TO_ADDR
44208: GO 44237
44210: LD_INT 47
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44236
44218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 23
44226: PUSH
44227: LD_INT 24
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: ST_TO_ADDR
44234: GO 44237
44236: POP
// result := ( chassis in result ) ;
44237: LD_ADDR_VAR 0 3
44241: PUSH
44242: LD_VAR 0 1
44246: PUSH
44247: LD_VAR 0 3
44251: IN
44252: ST_TO_ADDR
// end ;
44253: LD_VAR 0 3
44257: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44258: LD_INT 0
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
// result := array ;
44267: LD_ADDR_VAR 0 5
44271: PUSH
44272: LD_VAR 0 1
44276: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44277: LD_VAR 0 1
44281: NOT
44282: PUSH
44283: LD_VAR 0 2
44287: NOT
44288: OR
44289: PUSH
44290: LD_VAR 0 3
44294: NOT
44295: OR
44296: PUSH
44297: LD_VAR 0 2
44301: PUSH
44302: LD_VAR 0 1
44306: GREATER
44307: OR
44308: PUSH
44309: LD_VAR 0 3
44313: PUSH
44314: LD_VAR 0 1
44318: GREATER
44319: OR
44320: IFFALSE 44324
// exit ;
44322: GO 44620
// if direction then
44324: LD_VAR 0 4
44328: IFFALSE 44392
// begin d := 1 ;
44330: LD_ADDR_VAR 0 9
44334: PUSH
44335: LD_INT 1
44337: ST_TO_ADDR
// if i_from > i_to then
44338: LD_VAR 0 2
44342: PUSH
44343: LD_VAR 0 3
44347: GREATER
44348: IFFALSE 44374
// length := ( array - i_from ) + i_to else
44350: LD_ADDR_VAR 0 11
44354: PUSH
44355: LD_VAR 0 1
44359: PUSH
44360: LD_VAR 0 2
44364: MINUS
44365: PUSH
44366: LD_VAR 0 3
44370: PLUS
44371: ST_TO_ADDR
44372: GO 44390
// length := i_to - i_from ;
44374: LD_ADDR_VAR 0 11
44378: PUSH
44379: LD_VAR 0 3
44383: PUSH
44384: LD_VAR 0 2
44388: MINUS
44389: ST_TO_ADDR
// end else
44390: GO 44453
// begin d := - 1 ;
44392: LD_ADDR_VAR 0 9
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: ST_TO_ADDR
// if i_from > i_to then
44401: LD_VAR 0 2
44405: PUSH
44406: LD_VAR 0 3
44410: GREATER
44411: IFFALSE 44431
// length := i_from - i_to else
44413: LD_ADDR_VAR 0 11
44417: PUSH
44418: LD_VAR 0 2
44422: PUSH
44423: LD_VAR 0 3
44427: MINUS
44428: ST_TO_ADDR
44429: GO 44453
// length := ( array - i_to ) + i_from ;
44431: LD_ADDR_VAR 0 11
44435: PUSH
44436: LD_VAR 0 1
44440: PUSH
44441: LD_VAR 0 3
44445: MINUS
44446: PUSH
44447: LD_VAR 0 2
44451: PLUS
44452: ST_TO_ADDR
// end ; if not length then
44453: LD_VAR 0 11
44457: NOT
44458: IFFALSE 44462
// exit ;
44460: GO 44620
// tmp := array ;
44462: LD_ADDR_VAR 0 10
44466: PUSH
44467: LD_VAR 0 1
44471: ST_TO_ADDR
// for i = 1 to length do
44472: LD_ADDR_VAR 0 6
44476: PUSH
44477: DOUBLE
44478: LD_INT 1
44480: DEC
44481: ST_TO_ADDR
44482: LD_VAR 0 11
44486: PUSH
44487: FOR_TO
44488: IFFALSE 44608
// begin for j = 1 to array do
44490: LD_ADDR_VAR 0 7
44494: PUSH
44495: DOUBLE
44496: LD_INT 1
44498: DEC
44499: ST_TO_ADDR
44500: LD_VAR 0 1
44504: PUSH
44505: FOR_TO
44506: IFFALSE 44594
// begin k := j + d ;
44508: LD_ADDR_VAR 0 8
44512: PUSH
44513: LD_VAR 0 7
44517: PUSH
44518: LD_VAR 0 9
44522: PLUS
44523: ST_TO_ADDR
// if k > array then
44524: LD_VAR 0 8
44528: PUSH
44529: LD_VAR 0 1
44533: GREATER
44534: IFFALSE 44544
// k := 1 ;
44536: LD_ADDR_VAR 0 8
44540: PUSH
44541: LD_INT 1
44543: ST_TO_ADDR
// if not k then
44544: LD_VAR 0 8
44548: NOT
44549: IFFALSE 44561
// k := array ;
44551: LD_ADDR_VAR 0 8
44555: PUSH
44556: LD_VAR 0 1
44560: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44561: LD_ADDR_VAR 0 10
44565: PUSH
44566: LD_VAR 0 10
44570: PPUSH
44571: LD_VAR 0 8
44575: PPUSH
44576: LD_VAR 0 1
44580: PUSH
44581: LD_VAR 0 7
44585: ARRAY
44586: PPUSH
44587: CALL_OW 1
44591: ST_TO_ADDR
// end ;
44592: GO 44505
44594: POP
44595: POP
// array := tmp ;
44596: LD_ADDR_VAR 0 1
44600: PUSH
44601: LD_VAR 0 10
44605: ST_TO_ADDR
// end ;
44606: GO 44487
44608: POP
44609: POP
// result := array ;
44610: LD_ADDR_VAR 0 5
44614: PUSH
44615: LD_VAR 0 1
44619: ST_TO_ADDR
// end ;
44620: LD_VAR 0 5
44624: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44625: LD_INT 0
44627: PPUSH
44628: PPUSH
// result := 0 ;
44629: LD_ADDR_VAR 0 3
44633: PUSH
44634: LD_INT 0
44636: ST_TO_ADDR
// if not array or not value in array then
44637: LD_VAR 0 1
44641: NOT
44642: PUSH
44643: LD_VAR 0 2
44647: PUSH
44648: LD_VAR 0 1
44652: IN
44653: NOT
44654: OR
44655: IFFALSE 44659
// exit ;
44657: GO 44713
// for i = 1 to array do
44659: LD_ADDR_VAR 0 4
44663: PUSH
44664: DOUBLE
44665: LD_INT 1
44667: DEC
44668: ST_TO_ADDR
44669: LD_VAR 0 1
44673: PUSH
44674: FOR_TO
44675: IFFALSE 44711
// if value = array [ i ] then
44677: LD_VAR 0 2
44681: PUSH
44682: LD_VAR 0 1
44686: PUSH
44687: LD_VAR 0 4
44691: ARRAY
44692: EQUAL
44693: IFFALSE 44709
// begin result := i ;
44695: LD_ADDR_VAR 0 3
44699: PUSH
44700: LD_VAR 0 4
44704: ST_TO_ADDR
// exit ;
44705: POP
44706: POP
44707: GO 44713
// end ;
44709: GO 44674
44711: POP
44712: POP
// end ;
44713: LD_VAR 0 3
44717: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44718: LD_INT 0
44720: PPUSH
// vc_chassis := chassis ;
44721: LD_ADDR_OWVAR 37
44725: PUSH
44726: LD_VAR 0 1
44730: ST_TO_ADDR
// vc_engine := engine ;
44731: LD_ADDR_OWVAR 39
44735: PUSH
44736: LD_VAR 0 2
44740: ST_TO_ADDR
// vc_control := control ;
44741: LD_ADDR_OWVAR 38
44745: PUSH
44746: LD_VAR 0 3
44750: ST_TO_ADDR
// vc_weapon := weapon ;
44751: LD_ADDR_OWVAR 40
44755: PUSH
44756: LD_VAR 0 4
44760: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44761: LD_ADDR_OWVAR 41
44765: PUSH
44766: LD_VAR 0 5
44770: ST_TO_ADDR
// end ;
44771: LD_VAR 0 6
44775: RET
// export function WantPlant ( unit ) ; var task ; begin
44776: LD_INT 0
44778: PPUSH
44779: PPUSH
// result := false ;
44780: LD_ADDR_VAR 0 2
44784: PUSH
44785: LD_INT 0
44787: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44788: LD_ADDR_VAR 0 3
44792: PUSH
44793: LD_VAR 0 1
44797: PPUSH
44798: CALL_OW 437
44802: ST_TO_ADDR
// if task then
44803: LD_VAR 0 3
44807: IFFALSE 44835
// if task [ 1 ] [ 1 ] = p then
44809: LD_VAR 0 3
44813: PUSH
44814: LD_INT 1
44816: ARRAY
44817: PUSH
44818: LD_INT 1
44820: ARRAY
44821: PUSH
44822: LD_STRING p
44824: EQUAL
44825: IFFALSE 44835
// result := true ;
44827: LD_ADDR_VAR 0 2
44831: PUSH
44832: LD_INT 1
44834: ST_TO_ADDR
// end ;
44835: LD_VAR 0 2
44839: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44840: LD_INT 0
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
// if pos < 1 then
44846: LD_VAR 0 2
44850: PUSH
44851: LD_INT 1
44853: LESS
44854: IFFALSE 44858
// exit ;
44856: GO 45161
// if pos = 1 then
44858: LD_VAR 0 2
44862: PUSH
44863: LD_INT 1
44865: EQUAL
44866: IFFALSE 44899
// result := Replace ( arr , pos [ 1 ] , value ) else
44868: LD_ADDR_VAR 0 4
44872: PUSH
44873: LD_VAR 0 1
44877: PPUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 1
44885: ARRAY
44886: PPUSH
44887: LD_VAR 0 3
44891: PPUSH
44892: CALL_OW 1
44896: ST_TO_ADDR
44897: GO 45161
// begin tmp := arr ;
44899: LD_ADDR_VAR 0 6
44903: PUSH
44904: LD_VAR 0 1
44908: ST_TO_ADDR
// s_arr := [ tmp ] ;
44909: LD_ADDR_VAR 0 7
44913: PUSH
44914: LD_VAR 0 6
44918: PUSH
44919: EMPTY
44920: LIST
44921: ST_TO_ADDR
// for i = 1 to pos - 1 do
44922: LD_ADDR_VAR 0 5
44926: PUSH
44927: DOUBLE
44928: LD_INT 1
44930: DEC
44931: ST_TO_ADDR
44932: LD_VAR 0 2
44936: PUSH
44937: LD_INT 1
44939: MINUS
44940: PUSH
44941: FOR_TO
44942: IFFALSE 44987
// begin tmp := tmp [ pos [ i ] ] ;
44944: LD_ADDR_VAR 0 6
44948: PUSH
44949: LD_VAR 0 6
44953: PUSH
44954: LD_VAR 0 2
44958: PUSH
44959: LD_VAR 0 5
44963: ARRAY
44964: ARRAY
44965: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44966: LD_ADDR_VAR 0 7
44970: PUSH
44971: LD_VAR 0 7
44975: PUSH
44976: LD_VAR 0 6
44980: PUSH
44981: EMPTY
44982: LIST
44983: ADD
44984: ST_TO_ADDR
// end ;
44985: GO 44941
44987: POP
44988: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44989: LD_ADDR_VAR 0 6
44993: PUSH
44994: LD_VAR 0 6
44998: PPUSH
44999: LD_VAR 0 2
45003: PUSH
45004: LD_VAR 0 2
45008: ARRAY
45009: PPUSH
45010: LD_VAR 0 3
45014: PPUSH
45015: CALL_OW 1
45019: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45020: LD_ADDR_VAR 0 7
45024: PUSH
45025: LD_VAR 0 7
45029: PPUSH
45030: LD_VAR 0 7
45034: PPUSH
45035: LD_VAR 0 6
45039: PPUSH
45040: CALL_OW 1
45044: ST_TO_ADDR
// for i = s_arr downto 2 do
45045: LD_ADDR_VAR 0 5
45049: PUSH
45050: DOUBLE
45051: LD_VAR 0 7
45055: INC
45056: ST_TO_ADDR
45057: LD_INT 2
45059: PUSH
45060: FOR_DOWNTO
45061: IFFALSE 45145
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45063: LD_ADDR_VAR 0 6
45067: PUSH
45068: LD_VAR 0 7
45072: PUSH
45073: LD_VAR 0 5
45077: PUSH
45078: LD_INT 1
45080: MINUS
45081: ARRAY
45082: PPUSH
45083: LD_VAR 0 2
45087: PUSH
45088: LD_VAR 0 5
45092: PUSH
45093: LD_INT 1
45095: MINUS
45096: ARRAY
45097: PPUSH
45098: LD_VAR 0 7
45102: PUSH
45103: LD_VAR 0 5
45107: ARRAY
45108: PPUSH
45109: CALL_OW 1
45113: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45114: LD_ADDR_VAR 0 7
45118: PUSH
45119: LD_VAR 0 7
45123: PPUSH
45124: LD_VAR 0 5
45128: PUSH
45129: LD_INT 1
45131: MINUS
45132: PPUSH
45133: LD_VAR 0 6
45137: PPUSH
45138: CALL_OW 1
45142: ST_TO_ADDR
// end ;
45143: GO 45060
45145: POP
45146: POP
// result := s_arr [ 1 ] ;
45147: LD_ADDR_VAR 0 4
45151: PUSH
45152: LD_VAR 0 7
45156: PUSH
45157: LD_INT 1
45159: ARRAY
45160: ST_TO_ADDR
// end ; end ;
45161: LD_VAR 0 4
45165: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45166: LD_INT 0
45168: PPUSH
45169: PPUSH
// if not list then
45170: LD_VAR 0 1
45174: NOT
45175: IFFALSE 45179
// exit ;
45177: GO 45270
// i := list [ pos1 ] ;
45179: LD_ADDR_VAR 0 5
45183: PUSH
45184: LD_VAR 0 1
45188: PUSH
45189: LD_VAR 0 2
45193: ARRAY
45194: ST_TO_ADDR
// if not i then
45195: LD_VAR 0 5
45199: NOT
45200: IFFALSE 45204
// exit ;
45202: GO 45270
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45204: LD_ADDR_VAR 0 1
45208: PUSH
45209: LD_VAR 0 1
45213: PPUSH
45214: LD_VAR 0 2
45218: PPUSH
45219: LD_VAR 0 1
45223: PUSH
45224: LD_VAR 0 3
45228: ARRAY
45229: PPUSH
45230: CALL_OW 1
45234: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45235: LD_ADDR_VAR 0 1
45239: PUSH
45240: LD_VAR 0 1
45244: PPUSH
45245: LD_VAR 0 3
45249: PPUSH
45250: LD_VAR 0 5
45254: PPUSH
45255: CALL_OW 1
45259: ST_TO_ADDR
// result := list ;
45260: LD_ADDR_VAR 0 4
45264: PUSH
45265: LD_VAR 0 1
45269: ST_TO_ADDR
// end ;
45270: LD_VAR 0 4
45274: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45275: LD_INT 0
45277: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45278: LD_ADDR_VAR 0 5
45282: PUSH
45283: LD_VAR 0 1
45287: PPUSH
45288: CALL_OW 250
45292: PPUSH
45293: LD_VAR 0 1
45297: PPUSH
45298: CALL_OW 251
45302: PPUSH
45303: LD_VAR 0 2
45307: PPUSH
45308: LD_VAR 0 3
45312: PPUSH
45313: LD_VAR 0 4
45317: PPUSH
45318: CALL 45328 0 5
45322: ST_TO_ADDR
// end ;
45323: LD_VAR 0 5
45327: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45328: LD_INT 0
45330: PPUSH
45331: PPUSH
45332: PPUSH
45333: PPUSH
// if not list then
45334: LD_VAR 0 3
45338: NOT
45339: IFFALSE 45343
// exit ;
45341: GO 45731
// result := [ ] ;
45343: LD_ADDR_VAR 0 6
45347: PUSH
45348: EMPTY
45349: ST_TO_ADDR
// for i in list do
45350: LD_ADDR_VAR 0 7
45354: PUSH
45355: LD_VAR 0 3
45359: PUSH
45360: FOR_IN
45361: IFFALSE 45563
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45363: LD_ADDR_VAR 0 9
45367: PUSH
45368: LD_VAR 0 7
45372: PPUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: LD_VAR 0 2
45382: PPUSH
45383: CALL_OW 297
45387: ST_TO_ADDR
// if not result then
45388: LD_VAR 0 6
45392: NOT
45393: IFFALSE 45419
// result := [ [ i , tmp ] ] else
45395: LD_ADDR_VAR 0 6
45399: PUSH
45400: LD_VAR 0 7
45404: PUSH
45405: LD_VAR 0 9
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: ST_TO_ADDR
45417: GO 45561
// begin if result [ result ] [ 2 ] < tmp then
45419: LD_VAR 0 6
45423: PUSH
45424: LD_VAR 0 6
45428: ARRAY
45429: PUSH
45430: LD_INT 2
45432: ARRAY
45433: PUSH
45434: LD_VAR 0 9
45438: LESS
45439: IFFALSE 45481
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45441: LD_ADDR_VAR 0 6
45445: PUSH
45446: LD_VAR 0 6
45450: PPUSH
45451: LD_VAR 0 6
45455: PUSH
45456: LD_INT 1
45458: PLUS
45459: PPUSH
45460: LD_VAR 0 7
45464: PUSH
45465: LD_VAR 0 9
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PPUSH
45474: CALL_OW 2
45478: ST_TO_ADDR
45479: GO 45561
// for j = 1 to result do
45481: LD_ADDR_VAR 0 8
45485: PUSH
45486: DOUBLE
45487: LD_INT 1
45489: DEC
45490: ST_TO_ADDR
45491: LD_VAR 0 6
45495: PUSH
45496: FOR_TO
45497: IFFALSE 45559
// begin if tmp < result [ j ] [ 2 ] then
45499: LD_VAR 0 9
45503: PUSH
45504: LD_VAR 0 6
45508: PUSH
45509: LD_VAR 0 8
45513: ARRAY
45514: PUSH
45515: LD_INT 2
45517: ARRAY
45518: LESS
45519: IFFALSE 45557
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45521: LD_ADDR_VAR 0 6
45525: PUSH
45526: LD_VAR 0 6
45530: PPUSH
45531: LD_VAR 0 8
45535: PPUSH
45536: LD_VAR 0 7
45540: PUSH
45541: LD_VAR 0 9
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PPUSH
45550: CALL_OW 2
45554: ST_TO_ADDR
// break ;
45555: GO 45559
// end ; end ;
45557: GO 45496
45559: POP
45560: POP
// end ; end ;
45561: GO 45360
45563: POP
45564: POP
// if result and not asc then
45565: LD_VAR 0 6
45569: PUSH
45570: LD_VAR 0 4
45574: NOT
45575: AND
45576: IFFALSE 45651
// begin tmp := result ;
45578: LD_ADDR_VAR 0 9
45582: PUSH
45583: LD_VAR 0 6
45587: ST_TO_ADDR
// for i = tmp downto 1 do
45588: LD_ADDR_VAR 0 7
45592: PUSH
45593: DOUBLE
45594: LD_VAR 0 9
45598: INC
45599: ST_TO_ADDR
45600: LD_INT 1
45602: PUSH
45603: FOR_DOWNTO
45604: IFFALSE 45649
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45606: LD_ADDR_VAR 0 6
45610: PUSH
45611: LD_VAR 0 6
45615: PPUSH
45616: LD_VAR 0 9
45620: PUSH
45621: LD_VAR 0 7
45625: MINUS
45626: PUSH
45627: LD_INT 1
45629: PLUS
45630: PPUSH
45631: LD_VAR 0 9
45635: PUSH
45636: LD_VAR 0 7
45640: ARRAY
45641: PPUSH
45642: CALL_OW 1
45646: ST_TO_ADDR
45647: GO 45603
45649: POP
45650: POP
// end ; tmp := [ ] ;
45651: LD_ADDR_VAR 0 9
45655: PUSH
45656: EMPTY
45657: ST_TO_ADDR
// if mode then
45658: LD_VAR 0 5
45662: IFFALSE 45731
// begin for i = 1 to result do
45664: LD_ADDR_VAR 0 7
45668: PUSH
45669: DOUBLE
45670: LD_INT 1
45672: DEC
45673: ST_TO_ADDR
45674: LD_VAR 0 6
45678: PUSH
45679: FOR_TO
45680: IFFALSE 45719
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45682: LD_ADDR_VAR 0 9
45686: PUSH
45687: LD_VAR 0 9
45691: PPUSH
45692: LD_VAR 0 7
45696: PPUSH
45697: LD_VAR 0 6
45701: PUSH
45702: LD_VAR 0 7
45706: ARRAY
45707: PUSH
45708: LD_INT 1
45710: ARRAY
45711: PPUSH
45712: CALL_OW 1
45716: ST_TO_ADDR
45717: GO 45679
45719: POP
45720: POP
// result := tmp ;
45721: LD_ADDR_VAR 0 6
45725: PUSH
45726: LD_VAR 0 9
45730: ST_TO_ADDR
// end ; end ;
45731: LD_VAR 0 6
45735: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45736: LD_INT 0
45738: PPUSH
45739: PPUSH
45740: PPUSH
45741: PPUSH
45742: PPUSH
45743: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45744: LD_ADDR_VAR 0 5
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: ST_TO_ADDR
// if not x or not y then
45766: LD_VAR 0 2
45770: NOT
45771: PUSH
45772: LD_VAR 0 3
45776: NOT
45777: OR
45778: IFFALSE 45782
// exit ;
45780: GO 47428
// if not range then
45782: LD_VAR 0 4
45786: NOT
45787: IFFALSE 45797
// range := 10 ;
45789: LD_ADDR_VAR 0 4
45793: PUSH
45794: LD_INT 10
45796: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45797: LD_ADDR_VAR 0 8
45801: PUSH
45802: LD_INT 81
45804: PUSH
45805: LD_VAR 0 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 92
45816: PUSH
45817: LD_VAR 0 2
45821: PUSH
45822: LD_VAR 0 3
45826: PUSH
45827: LD_VAR 0 4
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: LD_INT 21
45843: PUSH
45844: LD_INT 3
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: PPUSH
45860: CALL_OW 69
45864: ST_TO_ADDR
// if not tmp then
45865: LD_VAR 0 8
45869: NOT
45870: IFFALSE 45874
// exit ;
45872: GO 47428
// for i in tmp do
45874: LD_ADDR_VAR 0 6
45878: PUSH
45879: LD_VAR 0 8
45883: PUSH
45884: FOR_IN
45885: IFFALSE 47403
// begin points := [ 0 , 0 , 0 ] ;
45887: LD_ADDR_VAR 0 9
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// bpoints := 1 ;
45906: LD_ADDR_VAR 0 10
45910: PUSH
45911: LD_INT 1
45913: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45914: LD_VAR 0 6
45918: PPUSH
45919: CALL_OW 247
45923: PUSH
45924: LD_INT 1
45926: DOUBLE
45927: EQUAL
45928: IFTRUE 45932
45930: GO 46510
45932: POP
// begin if GetClass ( i ) = 1 then
45933: LD_VAR 0 6
45937: PPUSH
45938: CALL_OW 257
45942: PUSH
45943: LD_INT 1
45945: EQUAL
45946: IFFALSE 45967
// points := [ 10 , 5 , 3 ] ;
45948: LD_ADDR_VAR 0 9
45952: PUSH
45953: LD_INT 10
45955: PUSH
45956: LD_INT 5
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45967: LD_VAR 0 6
45971: PPUSH
45972: CALL_OW 257
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: LD_INT 4
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: IN
45991: IFFALSE 46012
// points := [ 3 , 2 , 1 ] ;
45993: LD_ADDR_VAR 0 9
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46012: LD_VAR 0 6
46016: PPUSH
46017: CALL_OW 257
46021: PUSH
46022: LD_INT 5
46024: EQUAL
46025: IFFALSE 46046
// points := [ 130 , 5 , 2 ] ;
46027: LD_ADDR_VAR 0 9
46031: PUSH
46032: LD_INT 130
46034: PUSH
46035: LD_INT 5
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46046: LD_VAR 0 6
46050: PPUSH
46051: CALL_OW 257
46055: PUSH
46056: LD_INT 8
46058: EQUAL
46059: IFFALSE 46080
// points := [ 35 , 35 , 30 ] ;
46061: LD_ADDR_VAR 0 9
46065: PUSH
46066: LD_INT 35
46068: PUSH
46069: LD_INT 35
46071: PUSH
46072: LD_INT 30
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46080: LD_VAR 0 6
46084: PPUSH
46085: CALL_OW 257
46089: PUSH
46090: LD_INT 9
46092: EQUAL
46093: IFFALSE 46114
// points := [ 20 , 55 , 40 ] ;
46095: LD_ADDR_VAR 0 9
46099: PUSH
46100: LD_INT 20
46102: PUSH
46103: LD_INT 55
46105: PUSH
46106: LD_INT 40
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46114: LD_VAR 0 6
46118: PPUSH
46119: CALL_OW 257
46123: PUSH
46124: LD_INT 12
46126: PUSH
46127: LD_INT 16
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: IN
46134: IFFALSE 46155
// points := [ 5 , 3 , 2 ] ;
46136: LD_ADDR_VAR 0 9
46140: PUSH
46141: LD_INT 5
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46155: LD_VAR 0 6
46159: PPUSH
46160: CALL_OW 257
46164: PUSH
46165: LD_INT 17
46167: EQUAL
46168: IFFALSE 46189
// points := [ 100 , 50 , 75 ] ;
46170: LD_ADDR_VAR 0 9
46174: PUSH
46175: LD_INT 100
46177: PUSH
46178: LD_INT 50
46180: PUSH
46181: LD_INT 75
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46189: LD_VAR 0 6
46193: PPUSH
46194: CALL_OW 257
46198: PUSH
46199: LD_INT 15
46201: EQUAL
46202: IFFALSE 46223
// points := [ 10 , 5 , 3 ] ;
46204: LD_ADDR_VAR 0 9
46208: PUSH
46209: LD_INT 10
46211: PUSH
46212: LD_INT 5
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46223: LD_VAR 0 6
46227: PPUSH
46228: CALL_OW 257
46232: PUSH
46233: LD_INT 14
46235: EQUAL
46236: IFFALSE 46257
// points := [ 10 , 0 , 0 ] ;
46238: LD_ADDR_VAR 0 9
46242: PUSH
46243: LD_INT 10
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46257: LD_VAR 0 6
46261: PPUSH
46262: CALL_OW 257
46266: PUSH
46267: LD_INT 11
46269: EQUAL
46270: IFFALSE 46291
// points := [ 30 , 10 , 5 ] ;
46272: LD_ADDR_VAR 0 9
46276: PUSH
46277: LD_INT 30
46279: PUSH
46280: LD_INT 10
46282: PUSH
46283: LD_INT 5
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46291: LD_VAR 0 1
46295: PPUSH
46296: LD_INT 5
46298: PPUSH
46299: CALL_OW 321
46303: PUSH
46304: LD_INT 2
46306: EQUAL
46307: IFFALSE 46324
// bpoints := bpoints * 1.8 ;
46309: LD_ADDR_VAR 0 10
46313: PUSH
46314: LD_VAR 0 10
46318: PUSH
46319: LD_REAL  1.80000000000000E+0000
46322: MUL
46323: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46324: LD_VAR 0 6
46328: PPUSH
46329: CALL_OW 257
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: LD_INT 4
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: IN
46352: PUSH
46353: LD_VAR 0 1
46357: PPUSH
46358: LD_INT 51
46360: PPUSH
46361: CALL_OW 321
46365: PUSH
46366: LD_INT 2
46368: EQUAL
46369: AND
46370: IFFALSE 46387
// bpoints := bpoints * 1.2 ;
46372: LD_ADDR_VAR 0 10
46376: PUSH
46377: LD_VAR 0 10
46381: PUSH
46382: LD_REAL  1.20000000000000E+0000
46385: MUL
46386: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46387: LD_VAR 0 6
46391: PPUSH
46392: CALL_OW 257
46396: PUSH
46397: LD_INT 5
46399: PUSH
46400: LD_INT 7
46402: PUSH
46403: LD_INT 9
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: IN
46411: PUSH
46412: LD_VAR 0 1
46416: PPUSH
46417: LD_INT 52
46419: PPUSH
46420: CALL_OW 321
46424: PUSH
46425: LD_INT 2
46427: EQUAL
46428: AND
46429: IFFALSE 46446
// bpoints := bpoints * 1.5 ;
46431: LD_ADDR_VAR 0 10
46435: PUSH
46436: LD_VAR 0 10
46440: PUSH
46441: LD_REAL  1.50000000000000E+0000
46444: MUL
46445: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46446: LD_VAR 0 1
46450: PPUSH
46451: LD_INT 66
46453: PPUSH
46454: CALL_OW 321
46458: PUSH
46459: LD_INT 2
46461: EQUAL
46462: IFFALSE 46479
// bpoints := bpoints * 1.1 ;
46464: LD_ADDR_VAR 0 10
46468: PUSH
46469: LD_VAR 0 10
46473: PUSH
46474: LD_REAL  1.10000000000000E+0000
46477: MUL
46478: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46479: LD_ADDR_VAR 0 10
46483: PUSH
46484: LD_VAR 0 10
46488: PUSH
46489: LD_VAR 0 6
46493: PPUSH
46494: LD_INT 1
46496: PPUSH
46497: CALL_OW 259
46501: PUSH
46502: LD_REAL  1.15000000000000E+0000
46505: MUL
46506: MUL
46507: ST_TO_ADDR
// end ; unit_vehicle :
46508: GO 47332
46510: LD_INT 2
46512: DOUBLE
46513: EQUAL
46514: IFTRUE 46518
46516: GO 47320
46518: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46519: LD_VAR 0 6
46523: PPUSH
46524: CALL_OW 264
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: LD_INT 42
46534: PUSH
46535: LD_INT 24
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: IN
46543: IFFALSE 46564
// points := [ 25 , 5 , 3 ] ;
46545: LD_ADDR_VAR 0 9
46549: PUSH
46550: LD_INT 25
46552: PUSH
46553: LD_INT 5
46555: PUSH
46556: LD_INT 3
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46564: LD_VAR 0 6
46568: PPUSH
46569: CALL_OW 264
46573: PUSH
46574: LD_INT 4
46576: PUSH
46577: LD_INT 43
46579: PUSH
46580: LD_INT 25
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: IN
46588: IFFALSE 46609
// points := [ 40 , 15 , 5 ] ;
46590: LD_ADDR_VAR 0 9
46594: PUSH
46595: LD_INT 40
46597: PUSH
46598: LD_INT 15
46600: PUSH
46601: LD_INT 5
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46609: LD_VAR 0 6
46613: PPUSH
46614: CALL_OW 264
46618: PUSH
46619: LD_INT 3
46621: PUSH
46622: LD_INT 23
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: IN
46629: IFFALSE 46650
// points := [ 7 , 25 , 8 ] ;
46631: LD_ADDR_VAR 0 9
46635: PUSH
46636: LD_INT 7
46638: PUSH
46639: LD_INT 25
46641: PUSH
46642: LD_INT 8
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46650: LD_VAR 0 6
46654: PPUSH
46655: CALL_OW 264
46659: PUSH
46660: LD_INT 5
46662: PUSH
46663: LD_INT 27
46665: PUSH
46666: LD_INT 44
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: IN
46674: IFFALSE 46695
// points := [ 14 , 50 , 16 ] ;
46676: LD_ADDR_VAR 0 9
46680: PUSH
46681: LD_INT 14
46683: PUSH
46684: LD_INT 50
46686: PUSH
46687: LD_INT 16
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46695: LD_VAR 0 6
46699: PPUSH
46700: CALL_OW 264
46704: PUSH
46705: LD_INT 6
46707: PUSH
46708: LD_INT 46
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: IN
46715: IFFALSE 46736
// points := [ 32 , 120 , 70 ] ;
46717: LD_ADDR_VAR 0 9
46721: PUSH
46722: LD_INT 32
46724: PUSH
46725: LD_INT 120
46727: PUSH
46728: LD_INT 70
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
46736: LD_VAR 0 6
46740: PPUSH
46741: CALL_OW 264
46745: PUSH
46746: LD_INT 7
46748: PUSH
46749: LD_INT 28
46751: PUSH
46752: LD_INT 45
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: LIST
46759: IN
46760: IFFALSE 46781
// points := [ 35 , 20 , 45 ] ;
46762: LD_ADDR_VAR 0 9
46766: PUSH
46767: LD_INT 35
46769: PUSH
46770: LD_INT 20
46772: PUSH
46773: LD_INT 45
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46781: LD_VAR 0 6
46785: PPUSH
46786: CALL_OW 264
46790: PUSH
46791: LD_INT 47
46793: PUSH
46794: EMPTY
46795: LIST
46796: IN
46797: IFFALSE 46818
// points := [ 67 , 45 , 75 ] ;
46799: LD_ADDR_VAR 0 9
46803: PUSH
46804: LD_INT 67
46806: PUSH
46807: LD_INT 45
46809: PUSH
46810: LD_INT 75
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46818: LD_VAR 0 6
46822: PPUSH
46823: CALL_OW 264
46827: PUSH
46828: LD_INT 26
46830: PUSH
46831: EMPTY
46832: LIST
46833: IN
46834: IFFALSE 46855
// points := [ 120 , 30 , 80 ] ;
46836: LD_ADDR_VAR 0 9
46840: PUSH
46841: LD_INT 120
46843: PUSH
46844: LD_INT 30
46846: PUSH
46847: LD_INT 80
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46855: LD_VAR 0 6
46859: PPUSH
46860: CALL_OW 264
46864: PUSH
46865: LD_INT 22
46867: PUSH
46868: EMPTY
46869: LIST
46870: IN
46871: IFFALSE 46892
// points := [ 40 , 1 , 1 ] ;
46873: LD_ADDR_VAR 0 9
46877: PUSH
46878: LD_INT 40
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46892: LD_VAR 0 6
46896: PPUSH
46897: CALL_OW 264
46901: PUSH
46902: LD_INT 29
46904: PUSH
46905: EMPTY
46906: LIST
46907: IN
46908: IFFALSE 46929
// points := [ 70 , 200 , 400 ] ;
46910: LD_ADDR_VAR 0 9
46914: PUSH
46915: LD_INT 70
46917: PUSH
46918: LD_INT 200
46920: PUSH
46921: LD_INT 400
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46929: LD_VAR 0 6
46933: PPUSH
46934: CALL_OW 264
46938: PUSH
46939: LD_INT 14
46941: PUSH
46942: LD_INT 53
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: IN
46949: IFFALSE 46970
// points := [ 40 , 10 , 20 ] ;
46951: LD_ADDR_VAR 0 9
46955: PUSH
46956: LD_INT 40
46958: PUSH
46959: LD_INT 10
46961: PUSH
46962: LD_INT 20
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46970: LD_VAR 0 6
46974: PPUSH
46975: CALL_OW 264
46979: PUSH
46980: LD_INT 9
46982: PUSH
46983: EMPTY
46984: LIST
46985: IN
46986: IFFALSE 47007
// points := [ 5 , 70 , 20 ] ;
46988: LD_ADDR_VAR 0 9
46992: PUSH
46993: LD_INT 5
46995: PUSH
46996: LD_INT 70
46998: PUSH
46999: LD_INT 20
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47007: LD_VAR 0 6
47011: PPUSH
47012: CALL_OW 264
47016: PUSH
47017: LD_INT 10
47019: PUSH
47020: EMPTY
47021: LIST
47022: IN
47023: IFFALSE 47044
// points := [ 35 , 110 , 70 ] ;
47025: LD_ADDR_VAR 0 9
47029: PUSH
47030: LD_INT 35
47032: PUSH
47033: LD_INT 110
47035: PUSH
47036: LD_INT 70
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47044: LD_VAR 0 6
47048: PPUSH
47049: CALL_OW 265
47053: PUSH
47054: LD_INT 25
47056: EQUAL
47057: IFFALSE 47078
// points := [ 80 , 65 , 100 ] ;
47059: LD_ADDR_VAR 0 9
47063: PUSH
47064: LD_INT 80
47066: PUSH
47067: LD_INT 65
47069: PUSH
47070: LD_INT 100
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47078: LD_VAR 0 6
47082: PPUSH
47083: CALL_OW 263
47087: PUSH
47088: LD_INT 1
47090: EQUAL
47091: IFFALSE 47126
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47093: LD_ADDR_VAR 0 10
47097: PUSH
47098: LD_VAR 0 10
47102: PUSH
47103: LD_VAR 0 6
47107: PPUSH
47108: CALL_OW 311
47112: PPUSH
47113: LD_INT 3
47115: PPUSH
47116: CALL_OW 259
47120: PUSH
47121: LD_INT 4
47123: MUL
47124: MUL
47125: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47126: LD_VAR 0 6
47130: PPUSH
47131: CALL_OW 263
47135: PUSH
47136: LD_INT 2
47138: EQUAL
47139: IFFALSE 47190
// begin j := IsControledBy ( i ) ;
47141: LD_ADDR_VAR 0 7
47145: PUSH
47146: LD_VAR 0 6
47150: PPUSH
47151: CALL_OW 312
47155: ST_TO_ADDR
// if j then
47156: LD_VAR 0 7
47160: IFFALSE 47190
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47162: LD_ADDR_VAR 0 10
47166: PUSH
47167: LD_VAR 0 10
47171: PUSH
47172: LD_VAR 0 7
47176: PPUSH
47177: LD_INT 3
47179: PPUSH
47180: CALL_OW 259
47184: PUSH
47185: LD_INT 3
47187: MUL
47188: MUL
47189: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47190: LD_VAR 0 6
47194: PPUSH
47195: CALL_OW 264
47199: PUSH
47200: LD_INT 5
47202: PUSH
47203: LD_INT 6
47205: PUSH
47206: LD_INT 46
47208: PUSH
47209: LD_INT 44
47211: PUSH
47212: LD_INT 47
47214: PUSH
47215: LD_INT 45
47217: PUSH
47218: LD_INT 28
47220: PUSH
47221: LD_INT 7
47223: PUSH
47224: LD_INT 27
47226: PUSH
47227: LD_INT 29
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: IN
47242: PUSH
47243: LD_VAR 0 1
47247: PPUSH
47248: LD_INT 52
47250: PPUSH
47251: CALL_OW 321
47255: PUSH
47256: LD_INT 2
47258: EQUAL
47259: AND
47260: IFFALSE 47277
// bpoints := bpoints * 1.2 ;
47262: LD_ADDR_VAR 0 10
47266: PUSH
47267: LD_VAR 0 10
47271: PUSH
47272: LD_REAL  1.20000000000000E+0000
47275: MUL
47276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47277: LD_VAR 0 6
47281: PPUSH
47282: CALL_OW 264
47286: PUSH
47287: LD_INT 6
47289: PUSH
47290: LD_INT 46
47292: PUSH
47293: LD_INT 47
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: IN
47301: IFFALSE 47318
// bpoints := bpoints * 1.2 ;
47303: LD_ADDR_VAR 0 10
47307: PUSH
47308: LD_VAR 0 10
47312: PUSH
47313: LD_REAL  1.20000000000000E+0000
47316: MUL
47317: ST_TO_ADDR
// end ; unit_building :
47318: GO 47332
47320: LD_INT 3
47322: DOUBLE
47323: EQUAL
47324: IFTRUE 47328
47326: GO 47331
47328: POP
// ; end ;
47329: GO 47332
47331: POP
// for j = 1 to 3 do
47332: LD_ADDR_VAR 0 7
47336: PUSH
47337: DOUBLE
47338: LD_INT 1
47340: DEC
47341: ST_TO_ADDR
47342: LD_INT 3
47344: PUSH
47345: FOR_TO
47346: IFFALSE 47399
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47348: LD_ADDR_VAR 0 5
47352: PUSH
47353: LD_VAR 0 5
47357: PPUSH
47358: LD_VAR 0 7
47362: PPUSH
47363: LD_VAR 0 5
47367: PUSH
47368: LD_VAR 0 7
47372: ARRAY
47373: PUSH
47374: LD_VAR 0 9
47378: PUSH
47379: LD_VAR 0 7
47383: ARRAY
47384: PUSH
47385: LD_VAR 0 10
47389: MUL
47390: PLUS
47391: PPUSH
47392: CALL_OW 1
47396: ST_TO_ADDR
47397: GO 47345
47399: POP
47400: POP
// end ;
47401: GO 45884
47403: POP
47404: POP
// result := Replace ( result , 4 , tmp ) ;
47405: LD_ADDR_VAR 0 5
47409: PUSH
47410: LD_VAR 0 5
47414: PPUSH
47415: LD_INT 4
47417: PPUSH
47418: LD_VAR 0 8
47422: PPUSH
47423: CALL_OW 1
47427: ST_TO_ADDR
// end ;
47428: LD_VAR 0 5
47432: RET
// export function DangerAtRange ( unit , range ) ; begin
47433: LD_INT 0
47435: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47436: LD_ADDR_VAR 0 3
47440: PUSH
47441: LD_VAR 0 1
47445: PPUSH
47446: CALL_OW 255
47450: PPUSH
47451: LD_VAR 0 1
47455: PPUSH
47456: CALL_OW 250
47460: PPUSH
47461: LD_VAR 0 1
47465: PPUSH
47466: CALL_OW 251
47470: PPUSH
47471: LD_VAR 0 2
47475: PPUSH
47476: CALL 45736 0 4
47480: ST_TO_ADDR
// end ;
47481: LD_VAR 0 3
47485: RET
// export function DangerInArea ( side , area ) ; begin
47486: LD_INT 0
47488: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47489: LD_ADDR_VAR 0 3
47493: PUSH
47494: LD_VAR 0 2
47498: PPUSH
47499: LD_INT 81
47501: PUSH
47502: LD_VAR 0 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PPUSH
47511: CALL_OW 70
47515: ST_TO_ADDR
// end ;
47516: LD_VAR 0 3
47520: RET
// export function IsExtension ( b ) ; begin
47521: LD_INT 0
47523: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47524: LD_ADDR_VAR 0 2
47528: PUSH
47529: LD_VAR 0 1
47533: PUSH
47534: LD_INT 23
47536: PUSH
47537: LD_INT 20
47539: PUSH
47540: LD_INT 22
47542: PUSH
47543: LD_INT 17
47545: PUSH
47546: LD_INT 24
47548: PUSH
47549: LD_INT 21
47551: PUSH
47552: LD_INT 19
47554: PUSH
47555: LD_INT 16
47557: PUSH
47558: LD_INT 25
47560: PUSH
47561: LD_INT 18
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: IN
47576: ST_TO_ADDR
// end ;
47577: LD_VAR 0 2
47581: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47582: LD_INT 0
47584: PPUSH
47585: PPUSH
47586: PPUSH
// result := [ ] ;
47587: LD_ADDR_VAR 0 4
47591: PUSH
47592: EMPTY
47593: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47594: LD_ADDR_VAR 0 5
47598: PUSH
47599: LD_VAR 0 2
47603: PPUSH
47604: LD_INT 21
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PPUSH
47614: CALL_OW 70
47618: ST_TO_ADDR
// if not tmp then
47619: LD_VAR 0 5
47623: NOT
47624: IFFALSE 47628
// exit ;
47626: GO 47692
// if checkLink then
47628: LD_VAR 0 3
47632: IFFALSE 47682
// begin for i in tmp do
47634: LD_ADDR_VAR 0 6
47638: PUSH
47639: LD_VAR 0 5
47643: PUSH
47644: FOR_IN
47645: IFFALSE 47680
// if GetBase ( i ) <> base then
47647: LD_VAR 0 6
47651: PPUSH
47652: CALL_OW 274
47656: PUSH
47657: LD_VAR 0 1
47661: NONEQUAL
47662: IFFALSE 47678
// ComLinkToBase ( base , i ) ;
47664: LD_VAR 0 1
47668: PPUSH
47669: LD_VAR 0 6
47673: PPUSH
47674: CALL_OW 169
47678: GO 47644
47680: POP
47681: POP
// end ; result := tmp ;
47682: LD_ADDR_VAR 0 4
47686: PUSH
47687: LD_VAR 0 5
47691: ST_TO_ADDR
// end ;
47692: LD_VAR 0 4
47696: RET
// export function ComComplete ( units , b ) ; var i ; begin
47697: LD_INT 0
47699: PPUSH
47700: PPUSH
// if not units then
47701: LD_VAR 0 1
47705: NOT
47706: IFFALSE 47710
// exit ;
47708: GO 47800
// for i in units do
47710: LD_ADDR_VAR 0 4
47714: PUSH
47715: LD_VAR 0 1
47719: PUSH
47720: FOR_IN
47721: IFFALSE 47798
// if BuildingStatus ( b ) = bs_build then
47723: LD_VAR 0 2
47727: PPUSH
47728: CALL_OW 461
47732: PUSH
47733: LD_INT 1
47735: EQUAL
47736: IFFALSE 47796
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47738: LD_VAR 0 4
47742: PPUSH
47743: LD_STRING h
47745: PUSH
47746: LD_VAR 0 2
47750: PPUSH
47751: CALL_OW 250
47755: PUSH
47756: LD_VAR 0 2
47760: PPUSH
47761: CALL_OW 251
47765: PUSH
47766: LD_VAR 0 2
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: PPUSH
47792: CALL_OW 446
47796: GO 47720
47798: POP
47799: POP
// end ;
47800: LD_VAR 0 3
47804: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47805: LD_INT 0
47807: PPUSH
47808: PPUSH
47809: PPUSH
47810: PPUSH
47811: PPUSH
47812: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47813: LD_VAR 0 1
47817: NOT
47818: PUSH
47819: LD_VAR 0 1
47823: PPUSH
47824: CALL_OW 263
47828: PUSH
47829: LD_INT 2
47831: EQUAL
47832: NOT
47833: OR
47834: IFFALSE 47838
// exit ;
47836: GO 48154
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47838: LD_ADDR_VAR 0 6
47842: PUSH
47843: LD_INT 22
47845: PUSH
47846: LD_VAR 0 1
47850: PPUSH
47851: CALL_OW 255
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: LD_INT 30
47865: PUSH
47866: LD_INT 36
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 34
47875: PUSH
47876: LD_INT 31
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PPUSH
47892: CALL_OW 69
47896: ST_TO_ADDR
// if not tmp then
47897: LD_VAR 0 6
47901: NOT
47902: IFFALSE 47906
// exit ;
47904: GO 48154
// result := [ ] ;
47906: LD_ADDR_VAR 0 2
47910: PUSH
47911: EMPTY
47912: ST_TO_ADDR
// for i in tmp do
47913: LD_ADDR_VAR 0 3
47917: PUSH
47918: LD_VAR 0 6
47922: PUSH
47923: FOR_IN
47924: IFFALSE 47995
// begin t := UnitsInside ( i ) ;
47926: LD_ADDR_VAR 0 4
47930: PUSH
47931: LD_VAR 0 3
47935: PPUSH
47936: CALL_OW 313
47940: ST_TO_ADDR
// if t then
47941: LD_VAR 0 4
47945: IFFALSE 47993
// for j in t do
47947: LD_ADDR_VAR 0 7
47951: PUSH
47952: LD_VAR 0 4
47956: PUSH
47957: FOR_IN
47958: IFFALSE 47991
// result := Insert ( result , result + 1 , j ) ;
47960: LD_ADDR_VAR 0 2
47964: PUSH
47965: LD_VAR 0 2
47969: PPUSH
47970: LD_VAR 0 2
47974: PUSH
47975: LD_INT 1
47977: PLUS
47978: PPUSH
47979: LD_VAR 0 7
47983: PPUSH
47984: CALL_OW 2
47988: ST_TO_ADDR
47989: GO 47957
47991: POP
47992: POP
// end ;
47993: GO 47923
47995: POP
47996: POP
// if not result then
47997: LD_VAR 0 2
48001: NOT
48002: IFFALSE 48006
// exit ;
48004: GO 48154
// mech := result [ 1 ] ;
48006: LD_ADDR_VAR 0 5
48010: PUSH
48011: LD_VAR 0 2
48015: PUSH
48016: LD_INT 1
48018: ARRAY
48019: ST_TO_ADDR
// if result > 1 then
48020: LD_VAR 0 2
48024: PUSH
48025: LD_INT 1
48027: GREATER
48028: IFFALSE 48140
// for i = 2 to result do
48030: LD_ADDR_VAR 0 3
48034: PUSH
48035: DOUBLE
48036: LD_INT 2
48038: DEC
48039: ST_TO_ADDR
48040: LD_VAR 0 2
48044: PUSH
48045: FOR_TO
48046: IFFALSE 48138
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48048: LD_ADDR_VAR 0 4
48052: PUSH
48053: LD_VAR 0 2
48057: PUSH
48058: LD_VAR 0 3
48062: ARRAY
48063: PPUSH
48064: LD_INT 3
48066: PPUSH
48067: CALL_OW 259
48071: PUSH
48072: LD_VAR 0 2
48076: PUSH
48077: LD_VAR 0 3
48081: ARRAY
48082: PPUSH
48083: CALL_OW 432
48087: MINUS
48088: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48089: LD_VAR 0 4
48093: PUSH
48094: LD_VAR 0 5
48098: PPUSH
48099: LD_INT 3
48101: PPUSH
48102: CALL_OW 259
48106: PUSH
48107: LD_VAR 0 5
48111: PPUSH
48112: CALL_OW 432
48116: MINUS
48117: GREATEREQUAL
48118: IFFALSE 48136
// mech := result [ i ] ;
48120: LD_ADDR_VAR 0 5
48124: PUSH
48125: LD_VAR 0 2
48129: PUSH
48130: LD_VAR 0 3
48134: ARRAY
48135: ST_TO_ADDR
// end ;
48136: GO 48045
48138: POP
48139: POP
// ComLinkTo ( vehicle , mech ) ;
48140: LD_VAR 0 1
48144: PPUSH
48145: LD_VAR 0 5
48149: PPUSH
48150: CALL_OW 135
// end ;
48154: LD_VAR 0 2
48158: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48159: LD_INT 0
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
// result := [ ] ;
48174: LD_ADDR_VAR 0 7
48178: PUSH
48179: EMPTY
48180: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48181: LD_VAR 0 1
48185: PPUSH
48186: CALL_OW 266
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: IN
48201: NOT
48202: IFFALSE 48206
// exit ;
48204: GO 49840
// if name then
48206: LD_VAR 0 3
48210: IFFALSE 48226
// SetBName ( base_dep , name ) ;
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_VAR 0 3
48221: PPUSH
48222: CALL_OW 500
// base := GetBase ( base_dep ) ;
48226: LD_ADDR_VAR 0 15
48230: PUSH
48231: LD_VAR 0 1
48235: PPUSH
48236: CALL_OW 274
48240: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48241: LD_ADDR_VAR 0 16
48245: PUSH
48246: LD_VAR 0 1
48250: PPUSH
48251: CALL_OW 255
48255: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48256: LD_ADDR_VAR 0 17
48260: PUSH
48261: LD_VAR 0 1
48265: PPUSH
48266: CALL_OW 248
48270: ST_TO_ADDR
// if sources then
48271: LD_VAR 0 5
48275: IFFALSE 48322
// for i = 1 to 3 do
48277: LD_ADDR_VAR 0 8
48281: PUSH
48282: DOUBLE
48283: LD_INT 1
48285: DEC
48286: ST_TO_ADDR
48287: LD_INT 3
48289: PUSH
48290: FOR_TO
48291: IFFALSE 48320
// AddResourceType ( base , i , sources [ i ] ) ;
48293: LD_VAR 0 15
48297: PPUSH
48298: LD_VAR 0 8
48302: PPUSH
48303: LD_VAR 0 5
48307: PUSH
48308: LD_VAR 0 8
48312: ARRAY
48313: PPUSH
48314: CALL_OW 276
48318: GO 48290
48320: POP
48321: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48322: LD_ADDR_VAR 0 18
48326: PUSH
48327: LD_VAR 0 15
48331: PPUSH
48332: LD_VAR 0 2
48336: PPUSH
48337: LD_INT 1
48339: PPUSH
48340: CALL 47582 0 3
48344: ST_TO_ADDR
// InitHc ;
48345: CALL_OW 19
// InitUc ;
48349: CALL_OW 18
// uc_side := side ;
48353: LD_ADDR_OWVAR 20
48357: PUSH
48358: LD_VAR 0 16
48362: ST_TO_ADDR
// uc_nation := nation ;
48363: LD_ADDR_OWVAR 21
48367: PUSH
48368: LD_VAR 0 17
48372: ST_TO_ADDR
// if buildings then
48373: LD_VAR 0 18
48377: IFFALSE 49699
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48379: LD_ADDR_VAR 0 19
48383: PUSH
48384: LD_VAR 0 18
48388: PPUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 30
48394: PUSH
48395: LD_INT 29
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 30
48404: PUSH
48405: LD_INT 30
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: PPUSH
48417: CALL_OW 72
48421: ST_TO_ADDR
// if tmp then
48422: LD_VAR 0 19
48426: IFFALSE 48474
// for i in tmp do
48428: LD_ADDR_VAR 0 8
48432: PUSH
48433: LD_VAR 0 19
48437: PUSH
48438: FOR_IN
48439: IFFALSE 48472
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48441: LD_VAR 0 8
48445: PPUSH
48446: CALL_OW 250
48450: PPUSH
48451: LD_VAR 0 8
48455: PPUSH
48456: CALL_OW 251
48460: PPUSH
48461: LD_VAR 0 16
48465: PPUSH
48466: CALL_OW 441
48470: GO 48438
48472: POP
48473: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48474: LD_VAR 0 18
48478: PPUSH
48479: LD_INT 2
48481: PUSH
48482: LD_INT 30
48484: PUSH
48485: LD_INT 32
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 30
48494: PUSH
48495: LD_INT 33
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: PPUSH
48507: CALL_OW 72
48511: IFFALSE 48599
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48513: LD_ADDR_VAR 0 8
48517: PUSH
48518: LD_VAR 0 18
48522: PPUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 30
48528: PUSH
48529: LD_INT 32
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 30
48538: PUSH
48539: LD_INT 33
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: PPUSH
48551: CALL_OW 72
48555: PUSH
48556: FOR_IN
48557: IFFALSE 48597
// begin if not GetBWeapon ( i ) then
48559: LD_VAR 0 8
48563: PPUSH
48564: CALL_OW 269
48568: NOT
48569: IFFALSE 48595
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48571: LD_VAR 0 8
48575: PPUSH
48576: LD_VAR 0 8
48580: PPUSH
48581: LD_VAR 0 2
48585: PPUSH
48586: CALL 49845 0 2
48590: PPUSH
48591: CALL_OW 431
// end ;
48595: GO 48556
48597: POP
48598: POP
// end ; for i = 1 to personel do
48599: LD_ADDR_VAR 0 8
48603: PUSH
48604: DOUBLE
48605: LD_INT 1
48607: DEC
48608: ST_TO_ADDR
48609: LD_VAR 0 6
48613: PUSH
48614: FOR_TO
48615: IFFALSE 49679
// begin if i > 4 then
48617: LD_VAR 0 8
48621: PUSH
48622: LD_INT 4
48624: GREATER
48625: IFFALSE 48629
// break ;
48627: GO 49679
// case i of 1 :
48629: LD_VAR 0 8
48633: PUSH
48634: LD_INT 1
48636: DOUBLE
48637: EQUAL
48638: IFTRUE 48642
48640: GO 48722
48642: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48643: LD_ADDR_VAR 0 12
48647: PUSH
48648: LD_VAR 0 18
48652: PPUSH
48653: LD_INT 22
48655: PUSH
48656: LD_VAR 0 16
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 58
48667: PUSH
48668: EMPTY
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 30
48676: PUSH
48677: LD_INT 32
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 30
48686: PUSH
48687: LD_INT 4
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 30
48696: PUSH
48697: LD_INT 5
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: PPUSH
48715: CALL_OW 72
48719: ST_TO_ADDR
48720: GO 48944
48722: LD_INT 2
48724: DOUBLE
48725: EQUAL
48726: IFTRUE 48730
48728: GO 48792
48730: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48731: LD_ADDR_VAR 0 12
48735: PUSH
48736: LD_VAR 0 18
48740: PPUSH
48741: LD_INT 22
48743: PUSH
48744: LD_VAR 0 16
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 30
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 30
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PPUSH
48785: CALL_OW 72
48789: ST_TO_ADDR
48790: GO 48944
48792: LD_INT 3
48794: DOUBLE
48795: EQUAL
48796: IFTRUE 48800
48798: GO 48862
48800: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48801: LD_ADDR_VAR 0 12
48805: PUSH
48806: LD_VAR 0 18
48810: PPUSH
48811: LD_INT 22
48813: PUSH
48814: LD_VAR 0 16
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 30
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 30
48838: PUSH
48839: LD_INT 3
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PPUSH
48855: CALL_OW 72
48859: ST_TO_ADDR
48860: GO 48944
48862: LD_INT 4
48864: DOUBLE
48865: EQUAL
48866: IFTRUE 48870
48868: GO 48943
48870: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48871: LD_ADDR_VAR 0 12
48875: PUSH
48876: LD_VAR 0 18
48880: PPUSH
48881: LD_INT 22
48883: PUSH
48884: LD_VAR 0 16
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 30
48898: PUSH
48899: LD_INT 6
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 30
48908: PUSH
48909: LD_INT 7
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 30
48918: PUSH
48919: LD_INT 8
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PPUSH
48936: CALL_OW 72
48940: ST_TO_ADDR
48941: GO 48944
48943: POP
// if i = 1 then
48944: LD_VAR 0 8
48948: PUSH
48949: LD_INT 1
48951: EQUAL
48952: IFFALSE 49063
// begin tmp := [ ] ;
48954: LD_ADDR_VAR 0 19
48958: PUSH
48959: EMPTY
48960: ST_TO_ADDR
// for j in f do
48961: LD_ADDR_VAR 0 9
48965: PUSH
48966: LD_VAR 0 12
48970: PUSH
48971: FOR_IN
48972: IFFALSE 49045
// if GetBType ( j ) = b_bunker then
48974: LD_VAR 0 9
48978: PPUSH
48979: CALL_OW 266
48983: PUSH
48984: LD_INT 32
48986: EQUAL
48987: IFFALSE 49014
// tmp := Insert ( tmp , 1 , j ) else
48989: LD_ADDR_VAR 0 19
48993: PUSH
48994: LD_VAR 0 19
48998: PPUSH
48999: LD_INT 1
49001: PPUSH
49002: LD_VAR 0 9
49006: PPUSH
49007: CALL_OW 2
49011: ST_TO_ADDR
49012: GO 49043
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49014: LD_ADDR_VAR 0 19
49018: PUSH
49019: LD_VAR 0 19
49023: PPUSH
49024: LD_VAR 0 19
49028: PUSH
49029: LD_INT 1
49031: PLUS
49032: PPUSH
49033: LD_VAR 0 9
49037: PPUSH
49038: CALL_OW 2
49042: ST_TO_ADDR
49043: GO 48971
49045: POP
49046: POP
// if tmp then
49047: LD_VAR 0 19
49051: IFFALSE 49063
// f := tmp ;
49053: LD_ADDR_VAR 0 12
49057: PUSH
49058: LD_VAR 0 19
49062: ST_TO_ADDR
// end ; x := personel [ i ] ;
49063: LD_ADDR_VAR 0 13
49067: PUSH
49068: LD_VAR 0 6
49072: PUSH
49073: LD_VAR 0 8
49077: ARRAY
49078: ST_TO_ADDR
// if x = - 1 then
49079: LD_VAR 0 13
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: EQUAL
49088: IFFALSE 49297
// begin for j in f do
49090: LD_ADDR_VAR 0 9
49094: PUSH
49095: LD_VAR 0 12
49099: PUSH
49100: FOR_IN
49101: IFFALSE 49293
// repeat InitHc ;
49103: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49107: LD_VAR 0 9
49111: PPUSH
49112: CALL_OW 266
49116: PUSH
49117: LD_INT 5
49119: EQUAL
49120: IFFALSE 49190
// begin if UnitsInside ( j ) < 3 then
49122: LD_VAR 0 9
49126: PPUSH
49127: CALL_OW 313
49131: PUSH
49132: LD_INT 3
49134: LESS
49135: IFFALSE 49171
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49137: LD_INT 0
49139: PPUSH
49140: LD_INT 5
49142: PUSH
49143: LD_INT 8
49145: PUSH
49146: LD_INT 9
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: PUSH
49154: LD_VAR 0 17
49158: ARRAY
49159: PPUSH
49160: LD_VAR 0 4
49164: PPUSH
49165: CALL_OW 380
49169: GO 49188
// PrepareHuman ( false , i , skill ) ;
49171: LD_INT 0
49173: PPUSH
49174: LD_VAR 0 8
49178: PPUSH
49179: LD_VAR 0 4
49183: PPUSH
49184: CALL_OW 380
// end else
49188: GO 49207
// PrepareHuman ( false , i , skill ) ;
49190: LD_INT 0
49192: PPUSH
49193: LD_VAR 0 8
49197: PPUSH
49198: LD_VAR 0 4
49202: PPUSH
49203: CALL_OW 380
// un := CreateHuman ;
49207: LD_ADDR_VAR 0 14
49211: PUSH
49212: CALL_OW 44
49216: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49217: LD_ADDR_VAR 0 7
49221: PUSH
49222: LD_VAR 0 7
49226: PPUSH
49227: LD_INT 1
49229: PPUSH
49230: LD_VAR 0 14
49234: PPUSH
49235: CALL_OW 2
49239: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49240: LD_VAR 0 14
49244: PPUSH
49245: LD_VAR 0 9
49249: PPUSH
49250: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49254: LD_VAR 0 9
49258: PPUSH
49259: CALL_OW 313
49263: PUSH
49264: LD_INT 6
49266: EQUAL
49267: PUSH
49268: LD_VAR 0 9
49272: PPUSH
49273: CALL_OW 266
49277: PUSH
49278: LD_INT 32
49280: PUSH
49281: LD_INT 31
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: IN
49288: OR
49289: IFFALSE 49103
49291: GO 49100
49293: POP
49294: POP
// end else
49295: GO 49677
// for j = 1 to x do
49297: LD_ADDR_VAR 0 9
49301: PUSH
49302: DOUBLE
49303: LD_INT 1
49305: DEC
49306: ST_TO_ADDR
49307: LD_VAR 0 13
49311: PUSH
49312: FOR_TO
49313: IFFALSE 49675
// begin InitHc ;
49315: CALL_OW 19
// if not f then
49319: LD_VAR 0 12
49323: NOT
49324: IFFALSE 49413
// begin PrepareHuman ( false , i , skill ) ;
49326: LD_INT 0
49328: PPUSH
49329: LD_VAR 0 8
49333: PPUSH
49334: LD_VAR 0 4
49338: PPUSH
49339: CALL_OW 380
// un := CreateHuman ;
49343: LD_ADDR_VAR 0 14
49347: PUSH
49348: CALL_OW 44
49352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49353: LD_ADDR_VAR 0 7
49357: PUSH
49358: LD_VAR 0 7
49362: PPUSH
49363: LD_INT 1
49365: PPUSH
49366: LD_VAR 0 14
49370: PPUSH
49371: CALL_OW 2
49375: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49376: LD_VAR 0 14
49380: PPUSH
49381: LD_VAR 0 1
49385: PPUSH
49386: CALL_OW 250
49390: PPUSH
49391: LD_VAR 0 1
49395: PPUSH
49396: CALL_OW 251
49400: PPUSH
49401: LD_INT 10
49403: PPUSH
49404: LD_INT 0
49406: PPUSH
49407: CALL_OW 50
// continue ;
49411: GO 49312
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49413: LD_VAR 0 12
49417: PUSH
49418: LD_INT 1
49420: ARRAY
49421: PPUSH
49422: CALL_OW 313
49426: PUSH
49427: LD_VAR 0 12
49431: PUSH
49432: LD_INT 1
49434: ARRAY
49435: PPUSH
49436: CALL_OW 266
49440: PUSH
49441: LD_INT 32
49443: PUSH
49444: LD_INT 31
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: IN
49451: AND
49452: PUSH
49453: LD_VAR 0 12
49457: PUSH
49458: LD_INT 1
49460: ARRAY
49461: PPUSH
49462: CALL_OW 313
49466: PUSH
49467: LD_INT 6
49469: EQUAL
49470: OR
49471: IFFALSE 49491
// f := Delete ( f , 1 ) ;
49473: LD_ADDR_VAR 0 12
49477: PUSH
49478: LD_VAR 0 12
49482: PPUSH
49483: LD_INT 1
49485: PPUSH
49486: CALL_OW 3
49490: ST_TO_ADDR
// if not f then
49491: LD_VAR 0 12
49495: NOT
49496: IFFALSE 49514
// begin x := x + 2 ;
49498: LD_ADDR_VAR 0 13
49502: PUSH
49503: LD_VAR 0 13
49507: PUSH
49508: LD_INT 2
49510: PLUS
49511: ST_TO_ADDR
// continue ;
49512: GO 49312
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49514: LD_VAR 0 12
49518: PUSH
49519: LD_INT 1
49521: ARRAY
49522: PPUSH
49523: CALL_OW 266
49527: PUSH
49528: LD_INT 5
49530: EQUAL
49531: IFFALSE 49605
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49533: LD_VAR 0 12
49537: PUSH
49538: LD_INT 1
49540: ARRAY
49541: PPUSH
49542: CALL_OW 313
49546: PUSH
49547: LD_INT 3
49549: LESS
49550: IFFALSE 49586
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49552: LD_INT 0
49554: PPUSH
49555: LD_INT 5
49557: PUSH
49558: LD_INT 8
49560: PUSH
49561: LD_INT 9
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: LIST
49568: PUSH
49569: LD_VAR 0 17
49573: ARRAY
49574: PPUSH
49575: LD_VAR 0 4
49579: PPUSH
49580: CALL_OW 380
49584: GO 49603
// PrepareHuman ( false , i , skill ) ;
49586: LD_INT 0
49588: PPUSH
49589: LD_VAR 0 8
49593: PPUSH
49594: LD_VAR 0 4
49598: PPUSH
49599: CALL_OW 380
// end else
49603: GO 49622
// PrepareHuman ( false , i , skill ) ;
49605: LD_INT 0
49607: PPUSH
49608: LD_VAR 0 8
49612: PPUSH
49613: LD_VAR 0 4
49617: PPUSH
49618: CALL_OW 380
// un := CreateHuman ;
49622: LD_ADDR_VAR 0 14
49626: PUSH
49627: CALL_OW 44
49631: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49632: LD_ADDR_VAR 0 7
49636: PUSH
49637: LD_VAR 0 7
49641: PPUSH
49642: LD_INT 1
49644: PPUSH
49645: LD_VAR 0 14
49649: PPUSH
49650: CALL_OW 2
49654: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49655: LD_VAR 0 14
49659: PPUSH
49660: LD_VAR 0 12
49664: PUSH
49665: LD_INT 1
49667: ARRAY
49668: PPUSH
49669: CALL_OW 52
// end ;
49673: GO 49312
49675: POP
49676: POP
// end ;
49677: GO 48614
49679: POP
49680: POP
// result := result ^ buildings ;
49681: LD_ADDR_VAR 0 7
49685: PUSH
49686: LD_VAR 0 7
49690: PUSH
49691: LD_VAR 0 18
49695: ADD
49696: ST_TO_ADDR
// end else
49697: GO 49840
// begin for i = 1 to personel do
49699: LD_ADDR_VAR 0 8
49703: PUSH
49704: DOUBLE
49705: LD_INT 1
49707: DEC
49708: ST_TO_ADDR
49709: LD_VAR 0 6
49713: PUSH
49714: FOR_TO
49715: IFFALSE 49838
// begin if i > 4 then
49717: LD_VAR 0 8
49721: PUSH
49722: LD_INT 4
49724: GREATER
49725: IFFALSE 49729
// break ;
49727: GO 49838
// x := personel [ i ] ;
49729: LD_ADDR_VAR 0 13
49733: PUSH
49734: LD_VAR 0 6
49738: PUSH
49739: LD_VAR 0 8
49743: ARRAY
49744: ST_TO_ADDR
// if x = - 1 then
49745: LD_VAR 0 13
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: EQUAL
49754: IFFALSE 49758
// continue ;
49756: GO 49714
// PrepareHuman ( false , i , skill ) ;
49758: LD_INT 0
49760: PPUSH
49761: LD_VAR 0 8
49765: PPUSH
49766: LD_VAR 0 4
49770: PPUSH
49771: CALL_OW 380
// un := CreateHuman ;
49775: LD_ADDR_VAR 0 14
49779: PUSH
49780: CALL_OW 44
49784: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49785: LD_VAR 0 14
49789: PPUSH
49790: LD_VAR 0 1
49794: PPUSH
49795: CALL_OW 250
49799: PPUSH
49800: LD_VAR 0 1
49804: PPUSH
49805: CALL_OW 251
49809: PPUSH
49810: LD_INT 10
49812: PPUSH
49813: LD_INT 0
49815: PPUSH
49816: CALL_OW 50
// result := result ^ un ;
49820: LD_ADDR_VAR 0 7
49824: PUSH
49825: LD_VAR 0 7
49829: PUSH
49830: LD_VAR 0 14
49834: ADD
49835: ST_TO_ADDR
// end ;
49836: GO 49714
49838: POP
49839: POP
// end ; end ;
49840: LD_VAR 0 7
49844: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49845: LD_INT 0
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
49857: PPUSH
49858: PPUSH
49859: PPUSH
49860: PPUSH
49861: PPUSH
49862: PPUSH
// result := false ;
49863: LD_ADDR_VAR 0 3
49867: PUSH
49868: LD_INT 0
49870: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49871: LD_VAR 0 1
49875: NOT
49876: PUSH
49877: LD_VAR 0 1
49881: PPUSH
49882: CALL_OW 266
49886: PUSH
49887: LD_INT 32
49889: PUSH
49890: LD_INT 33
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: IN
49897: NOT
49898: OR
49899: IFFALSE 49903
// exit ;
49901: GO 51042
// nat := GetNation ( tower ) ;
49903: LD_ADDR_VAR 0 12
49907: PUSH
49908: LD_VAR 0 1
49912: PPUSH
49913: CALL_OW 248
49917: ST_TO_ADDR
// side := GetSide ( tower ) ;
49918: LD_ADDR_VAR 0 16
49922: PUSH
49923: LD_VAR 0 1
49927: PPUSH
49928: CALL_OW 255
49932: ST_TO_ADDR
// x := GetX ( tower ) ;
49933: LD_ADDR_VAR 0 10
49937: PUSH
49938: LD_VAR 0 1
49942: PPUSH
49943: CALL_OW 250
49947: ST_TO_ADDR
// y := GetY ( tower ) ;
49948: LD_ADDR_VAR 0 11
49952: PUSH
49953: LD_VAR 0 1
49957: PPUSH
49958: CALL_OW 251
49962: ST_TO_ADDR
// if not x or not y then
49963: LD_VAR 0 10
49967: NOT
49968: PUSH
49969: LD_VAR 0 11
49973: NOT
49974: OR
49975: IFFALSE 49979
// exit ;
49977: GO 51042
// weapon := 0 ;
49979: LD_ADDR_VAR 0 18
49983: PUSH
49984: LD_INT 0
49986: ST_TO_ADDR
// fac_list := [ ] ;
49987: LD_ADDR_VAR 0 17
49991: PUSH
49992: EMPTY
49993: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49994: LD_ADDR_VAR 0 6
49998: PUSH
49999: LD_VAR 0 1
50003: PPUSH
50004: CALL_OW 274
50008: PPUSH
50009: LD_VAR 0 2
50013: PPUSH
50014: LD_INT 0
50016: PPUSH
50017: CALL 47582 0 3
50021: PPUSH
50022: LD_INT 30
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PPUSH
50032: CALL_OW 72
50036: ST_TO_ADDR
// if not factories then
50037: LD_VAR 0 6
50041: NOT
50042: IFFALSE 50046
// exit ;
50044: GO 51042
// for i in factories do
50046: LD_ADDR_VAR 0 8
50050: PUSH
50051: LD_VAR 0 6
50055: PUSH
50056: FOR_IN
50057: IFFALSE 50082
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50059: LD_ADDR_VAR 0 17
50063: PUSH
50064: LD_VAR 0 17
50068: PUSH
50069: LD_VAR 0 8
50073: PPUSH
50074: CALL_OW 478
50078: UNION
50079: ST_TO_ADDR
50080: GO 50056
50082: POP
50083: POP
// if not fac_list then
50084: LD_VAR 0 17
50088: NOT
50089: IFFALSE 50093
// exit ;
50091: GO 51042
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50093: LD_ADDR_VAR 0 5
50097: PUSH
50098: LD_INT 4
50100: PUSH
50101: LD_INT 5
50103: PUSH
50104: LD_INT 9
50106: PUSH
50107: LD_INT 10
50109: PUSH
50110: LD_INT 6
50112: PUSH
50113: LD_INT 7
50115: PUSH
50116: LD_INT 11
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 27
50130: PUSH
50131: LD_INT 28
50133: PUSH
50134: LD_INT 26
50136: PUSH
50137: LD_INT 30
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 43
50148: PUSH
50149: LD_INT 44
50151: PUSH
50152: LD_INT 46
50154: PUSH
50155: LD_INT 45
50157: PUSH
50158: LD_INT 47
50160: PUSH
50161: LD_INT 49
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: PUSH
50177: LD_VAR 0 12
50181: ARRAY
50182: ST_TO_ADDR
// for i in list do
50183: LD_ADDR_VAR 0 8
50187: PUSH
50188: LD_VAR 0 5
50192: PUSH
50193: FOR_IN
50194: IFFALSE 50227
// if not i in fac_list then
50196: LD_VAR 0 8
50200: PUSH
50201: LD_VAR 0 17
50205: IN
50206: NOT
50207: IFFALSE 50225
// list := list diff i ;
50209: LD_ADDR_VAR 0 5
50213: PUSH
50214: LD_VAR 0 5
50218: PUSH
50219: LD_VAR 0 8
50223: DIFF
50224: ST_TO_ADDR
50225: GO 50193
50227: POP
50228: POP
// if not list then
50229: LD_VAR 0 5
50233: NOT
50234: IFFALSE 50238
// exit ;
50236: GO 51042
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50238: LD_VAR 0 12
50242: PUSH
50243: LD_INT 3
50245: EQUAL
50246: PUSH
50247: LD_INT 49
50249: PUSH
50250: LD_VAR 0 5
50254: IN
50255: AND
50256: PUSH
50257: LD_INT 31
50259: PPUSH
50260: LD_VAR 0 16
50264: PPUSH
50265: CALL_OW 321
50269: PUSH
50270: LD_INT 2
50272: EQUAL
50273: AND
50274: IFFALSE 50334
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50276: LD_INT 22
50278: PUSH
50279: LD_VAR 0 16
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 35
50290: PUSH
50291: LD_INT 49
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 91
50300: PUSH
50301: LD_VAR 0 1
50305: PUSH
50306: LD_INT 10
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: PPUSH
50319: CALL_OW 69
50323: NOT
50324: IFFALSE 50334
// weapon := ru_time_lapser ;
50326: LD_ADDR_VAR 0 18
50330: PUSH
50331: LD_INT 49
50333: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50334: LD_VAR 0 12
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: IN
50349: PUSH
50350: LD_INT 11
50352: PUSH
50353: LD_VAR 0 5
50357: IN
50358: PUSH
50359: LD_INT 30
50361: PUSH
50362: LD_VAR 0 5
50366: IN
50367: OR
50368: AND
50369: PUSH
50370: LD_INT 6
50372: PPUSH
50373: LD_VAR 0 16
50377: PPUSH
50378: CALL_OW 321
50382: PUSH
50383: LD_INT 2
50385: EQUAL
50386: AND
50387: IFFALSE 50552
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50389: LD_INT 22
50391: PUSH
50392: LD_VAR 0 16
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 35
50406: PUSH
50407: LD_INT 11
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 35
50416: PUSH
50417: LD_INT 30
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 91
50431: PUSH
50432: LD_VAR 0 1
50436: PUSH
50437: LD_INT 18
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: PPUSH
50450: CALL_OW 69
50454: NOT
50455: PUSH
50456: LD_INT 22
50458: PUSH
50459: LD_VAR 0 16
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 30
50473: PUSH
50474: LD_INT 32
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 30
50483: PUSH
50484: LD_INT 33
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 91
50498: PUSH
50499: LD_VAR 0 1
50503: PUSH
50504: LD_INT 12
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: LIST
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: PPUSH
50520: CALL_OW 69
50524: PUSH
50525: LD_INT 2
50527: GREATER
50528: AND
50529: IFFALSE 50552
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50531: LD_ADDR_VAR 0 18
50535: PUSH
50536: LD_INT 11
50538: PUSH
50539: LD_INT 30
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_VAR 0 12
50550: ARRAY
50551: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50552: LD_VAR 0 18
50556: NOT
50557: PUSH
50558: LD_INT 40
50560: PPUSH
50561: LD_VAR 0 16
50565: PPUSH
50566: CALL_OW 321
50570: PUSH
50571: LD_INT 2
50573: EQUAL
50574: AND
50575: PUSH
50576: LD_INT 7
50578: PUSH
50579: LD_VAR 0 5
50583: IN
50584: PUSH
50585: LD_INT 28
50587: PUSH
50588: LD_VAR 0 5
50592: IN
50593: OR
50594: PUSH
50595: LD_INT 45
50597: PUSH
50598: LD_VAR 0 5
50602: IN
50603: OR
50604: AND
50605: IFFALSE 50859
// begin hex := GetHexInfo ( x , y ) ;
50607: LD_ADDR_VAR 0 4
50611: PUSH
50612: LD_VAR 0 10
50616: PPUSH
50617: LD_VAR 0 11
50621: PPUSH
50622: CALL_OW 546
50626: ST_TO_ADDR
// if hex [ 1 ] then
50627: LD_VAR 0 4
50631: PUSH
50632: LD_INT 1
50634: ARRAY
50635: IFFALSE 50639
// exit ;
50637: GO 51042
// height := hex [ 2 ] ;
50639: LD_ADDR_VAR 0 15
50643: PUSH
50644: LD_VAR 0 4
50648: PUSH
50649: LD_INT 2
50651: ARRAY
50652: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50653: LD_ADDR_VAR 0 14
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: LD_INT 5
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: ST_TO_ADDR
// for i in tmp do
50676: LD_ADDR_VAR 0 8
50680: PUSH
50681: LD_VAR 0 14
50685: PUSH
50686: FOR_IN
50687: IFFALSE 50857
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50689: LD_ADDR_VAR 0 9
50693: PUSH
50694: LD_VAR 0 10
50698: PPUSH
50699: LD_VAR 0 8
50703: PPUSH
50704: LD_INT 5
50706: PPUSH
50707: CALL_OW 272
50711: PUSH
50712: LD_VAR 0 11
50716: PPUSH
50717: LD_VAR 0 8
50721: PPUSH
50722: LD_INT 5
50724: PPUSH
50725: CALL_OW 273
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50734: LD_VAR 0 9
50738: PUSH
50739: LD_INT 1
50741: ARRAY
50742: PPUSH
50743: LD_VAR 0 9
50747: PUSH
50748: LD_INT 2
50750: ARRAY
50751: PPUSH
50752: CALL_OW 488
50756: IFFALSE 50855
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50758: LD_ADDR_VAR 0 4
50762: PUSH
50763: LD_VAR 0 9
50767: PUSH
50768: LD_INT 1
50770: ARRAY
50771: PPUSH
50772: LD_VAR 0 9
50776: PUSH
50777: LD_INT 2
50779: ARRAY
50780: PPUSH
50781: CALL_OW 546
50785: ST_TO_ADDR
// if hex [ 1 ] then
50786: LD_VAR 0 4
50790: PUSH
50791: LD_INT 1
50793: ARRAY
50794: IFFALSE 50798
// continue ;
50796: GO 50686
// h := hex [ 2 ] ;
50798: LD_ADDR_VAR 0 13
50802: PUSH
50803: LD_VAR 0 4
50807: PUSH
50808: LD_INT 2
50810: ARRAY
50811: ST_TO_ADDR
// if h + 7 < height then
50812: LD_VAR 0 13
50816: PUSH
50817: LD_INT 7
50819: PLUS
50820: PUSH
50821: LD_VAR 0 15
50825: LESS
50826: IFFALSE 50855
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50828: LD_ADDR_VAR 0 18
50832: PUSH
50833: LD_INT 7
50835: PUSH
50836: LD_INT 28
50838: PUSH
50839: LD_INT 45
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: PUSH
50847: LD_VAR 0 12
50851: ARRAY
50852: ST_TO_ADDR
// break ;
50853: GO 50857
// end ; end ; end ;
50855: GO 50686
50857: POP
50858: POP
// end ; if not weapon then
50859: LD_VAR 0 18
50863: NOT
50864: IFFALSE 50924
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50866: LD_ADDR_VAR 0 5
50870: PUSH
50871: LD_VAR 0 5
50875: PUSH
50876: LD_INT 11
50878: PUSH
50879: LD_INT 30
50881: PUSH
50882: LD_INT 49
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: DIFF
50890: ST_TO_ADDR
// if not list then
50891: LD_VAR 0 5
50895: NOT
50896: IFFALSE 50900
// exit ;
50898: GO 51042
// weapon := list [ rand ( 1 , list ) ] ;
50900: LD_ADDR_VAR 0 18
50904: PUSH
50905: LD_VAR 0 5
50909: PUSH
50910: LD_INT 1
50912: PPUSH
50913: LD_VAR 0 5
50917: PPUSH
50918: CALL_OW 12
50922: ARRAY
50923: ST_TO_ADDR
// end ; if weapon then
50924: LD_VAR 0 18
50928: IFFALSE 51042
// begin tmp := CostOfWeapon ( weapon ) ;
50930: LD_ADDR_VAR 0 14
50934: PUSH
50935: LD_VAR 0 18
50939: PPUSH
50940: CALL_OW 451
50944: ST_TO_ADDR
// j := GetBase ( tower ) ;
50945: LD_ADDR_VAR 0 9
50949: PUSH
50950: LD_VAR 0 1
50954: PPUSH
50955: CALL_OW 274
50959: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50960: LD_VAR 0 9
50964: PPUSH
50965: LD_INT 1
50967: PPUSH
50968: CALL_OW 275
50972: PUSH
50973: LD_VAR 0 14
50977: PUSH
50978: LD_INT 1
50980: ARRAY
50981: GREATEREQUAL
50982: PUSH
50983: LD_VAR 0 9
50987: PPUSH
50988: LD_INT 2
50990: PPUSH
50991: CALL_OW 275
50995: PUSH
50996: LD_VAR 0 14
51000: PUSH
51001: LD_INT 2
51003: ARRAY
51004: GREATEREQUAL
51005: AND
51006: PUSH
51007: LD_VAR 0 9
51011: PPUSH
51012: LD_INT 3
51014: PPUSH
51015: CALL_OW 275
51019: PUSH
51020: LD_VAR 0 14
51024: PUSH
51025: LD_INT 3
51027: ARRAY
51028: GREATEREQUAL
51029: AND
51030: IFFALSE 51042
// result := weapon ;
51032: LD_ADDR_VAR 0 3
51036: PUSH
51037: LD_VAR 0 18
51041: ST_TO_ADDR
// end ; end ;
51042: LD_VAR 0 3
51046: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51047: LD_INT 0
51049: PPUSH
51050: PPUSH
// result := true ;
51051: LD_ADDR_VAR 0 3
51055: PUSH
51056: LD_INT 1
51058: ST_TO_ADDR
// if array1 = array2 then
51059: LD_VAR 0 1
51063: PUSH
51064: LD_VAR 0 2
51068: EQUAL
51069: IFFALSE 51129
// begin for i = 1 to array1 do
51071: LD_ADDR_VAR 0 4
51075: PUSH
51076: DOUBLE
51077: LD_INT 1
51079: DEC
51080: ST_TO_ADDR
51081: LD_VAR 0 1
51085: PUSH
51086: FOR_TO
51087: IFFALSE 51125
// if array1 [ i ] <> array2 [ i ] then
51089: LD_VAR 0 1
51093: PUSH
51094: LD_VAR 0 4
51098: ARRAY
51099: PUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_VAR 0 4
51109: ARRAY
51110: NONEQUAL
51111: IFFALSE 51123
// begin result := false ;
51113: LD_ADDR_VAR 0 3
51117: PUSH
51118: LD_INT 0
51120: ST_TO_ADDR
// break ;
51121: GO 51125
// end ;
51123: GO 51086
51125: POP
51126: POP
// end else
51127: GO 51137
// result := false ;
51129: LD_ADDR_VAR 0 3
51133: PUSH
51134: LD_INT 0
51136: ST_TO_ADDR
// end ;
51137: LD_VAR 0 3
51141: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51142: LD_INT 0
51144: PPUSH
51145: PPUSH
// if not array1 or not array2 then
51146: LD_VAR 0 1
51150: NOT
51151: PUSH
51152: LD_VAR 0 2
51156: NOT
51157: OR
51158: IFFALSE 51162
// exit ;
51160: GO 51226
// result := true ;
51162: LD_ADDR_VAR 0 3
51166: PUSH
51167: LD_INT 1
51169: ST_TO_ADDR
// for i = 1 to array1 do
51170: LD_ADDR_VAR 0 4
51174: PUSH
51175: DOUBLE
51176: LD_INT 1
51178: DEC
51179: ST_TO_ADDR
51180: LD_VAR 0 1
51184: PUSH
51185: FOR_TO
51186: IFFALSE 51224
// if array1 [ i ] <> array2 [ i ] then
51188: LD_VAR 0 1
51192: PUSH
51193: LD_VAR 0 4
51197: ARRAY
51198: PUSH
51199: LD_VAR 0 2
51203: PUSH
51204: LD_VAR 0 4
51208: ARRAY
51209: NONEQUAL
51210: IFFALSE 51222
// begin result := false ;
51212: LD_ADDR_VAR 0 3
51216: PUSH
51217: LD_INT 0
51219: ST_TO_ADDR
// break ;
51220: GO 51224
// end ;
51222: GO 51185
51224: POP
51225: POP
// end ;
51226: LD_VAR 0 3
51230: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51231: LD_INT 0
51233: PPUSH
51234: PPUSH
51235: PPUSH
// pom := GetBase ( fac ) ;
51236: LD_ADDR_VAR 0 5
51240: PUSH
51241: LD_VAR 0 1
51245: PPUSH
51246: CALL_OW 274
51250: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51251: LD_ADDR_VAR 0 4
51255: PUSH
51256: LD_VAR 0 2
51260: PUSH
51261: LD_INT 1
51263: ARRAY
51264: PPUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_INT 2
51272: ARRAY
51273: PPUSH
51274: LD_VAR 0 2
51278: PUSH
51279: LD_INT 3
51281: ARRAY
51282: PPUSH
51283: LD_VAR 0 2
51287: PUSH
51288: LD_INT 4
51290: ARRAY
51291: PPUSH
51292: CALL_OW 449
51296: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51297: LD_ADDR_VAR 0 3
51301: PUSH
51302: LD_VAR 0 5
51306: PPUSH
51307: LD_INT 1
51309: PPUSH
51310: CALL_OW 275
51314: PUSH
51315: LD_VAR 0 4
51319: PUSH
51320: LD_INT 1
51322: ARRAY
51323: GREATEREQUAL
51324: PUSH
51325: LD_VAR 0 5
51329: PPUSH
51330: LD_INT 2
51332: PPUSH
51333: CALL_OW 275
51337: PUSH
51338: LD_VAR 0 4
51342: PUSH
51343: LD_INT 2
51345: ARRAY
51346: GREATEREQUAL
51347: AND
51348: PUSH
51349: LD_VAR 0 5
51353: PPUSH
51354: LD_INT 3
51356: PPUSH
51357: CALL_OW 275
51361: PUSH
51362: LD_VAR 0 4
51366: PUSH
51367: LD_INT 3
51369: ARRAY
51370: GREATEREQUAL
51371: AND
51372: ST_TO_ADDR
// end ;
51373: LD_VAR 0 3
51377: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51378: LD_INT 0
51380: PPUSH
51381: PPUSH
51382: PPUSH
51383: PPUSH
// pom := GetBase ( building ) ;
51384: LD_ADDR_VAR 0 3
51388: PUSH
51389: LD_VAR 0 1
51393: PPUSH
51394: CALL_OW 274
51398: ST_TO_ADDR
// if not pom then
51399: LD_VAR 0 3
51403: NOT
51404: IFFALSE 51408
// exit ;
51406: GO 51578
// btype := GetBType ( building ) ;
51408: LD_ADDR_VAR 0 5
51412: PUSH
51413: LD_VAR 0 1
51417: PPUSH
51418: CALL_OW 266
51422: ST_TO_ADDR
// if btype = b_armoury then
51423: LD_VAR 0 5
51427: PUSH
51428: LD_INT 4
51430: EQUAL
51431: IFFALSE 51441
// btype := b_barracks ;
51433: LD_ADDR_VAR 0 5
51437: PUSH
51438: LD_INT 5
51440: ST_TO_ADDR
// if btype = b_depot then
51441: LD_VAR 0 5
51445: PUSH
51446: LD_INT 0
51448: EQUAL
51449: IFFALSE 51459
// btype := b_warehouse ;
51451: LD_ADDR_VAR 0 5
51455: PUSH
51456: LD_INT 1
51458: ST_TO_ADDR
// if btype = b_workshop then
51459: LD_VAR 0 5
51463: PUSH
51464: LD_INT 2
51466: EQUAL
51467: IFFALSE 51477
// btype := b_factory ;
51469: LD_ADDR_VAR 0 5
51473: PUSH
51474: LD_INT 3
51476: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51477: LD_ADDR_VAR 0 4
51481: PUSH
51482: LD_VAR 0 5
51486: PPUSH
51487: LD_VAR 0 1
51491: PPUSH
51492: CALL_OW 248
51496: PPUSH
51497: CALL_OW 450
51501: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51502: LD_ADDR_VAR 0 2
51506: PUSH
51507: LD_VAR 0 3
51511: PPUSH
51512: LD_INT 1
51514: PPUSH
51515: CALL_OW 275
51519: PUSH
51520: LD_VAR 0 4
51524: PUSH
51525: LD_INT 1
51527: ARRAY
51528: GREATEREQUAL
51529: PUSH
51530: LD_VAR 0 3
51534: PPUSH
51535: LD_INT 2
51537: PPUSH
51538: CALL_OW 275
51542: PUSH
51543: LD_VAR 0 4
51547: PUSH
51548: LD_INT 2
51550: ARRAY
51551: GREATEREQUAL
51552: AND
51553: PUSH
51554: LD_VAR 0 3
51558: PPUSH
51559: LD_INT 3
51561: PPUSH
51562: CALL_OW 275
51566: PUSH
51567: LD_VAR 0 4
51571: PUSH
51572: LD_INT 3
51574: ARRAY
51575: GREATEREQUAL
51576: AND
51577: ST_TO_ADDR
// end ;
51578: LD_VAR 0 2
51582: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51583: LD_INT 0
51585: PPUSH
51586: PPUSH
51587: PPUSH
// pom := GetBase ( building ) ;
51588: LD_ADDR_VAR 0 4
51592: PUSH
51593: LD_VAR 0 1
51597: PPUSH
51598: CALL_OW 274
51602: ST_TO_ADDR
// if not pom then
51603: LD_VAR 0 4
51607: NOT
51608: IFFALSE 51612
// exit ;
51610: GO 51713
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51612: LD_ADDR_VAR 0 5
51616: PUSH
51617: LD_VAR 0 2
51621: PPUSH
51622: LD_VAR 0 1
51626: PPUSH
51627: CALL_OW 248
51631: PPUSH
51632: CALL_OW 450
51636: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51637: LD_ADDR_VAR 0 3
51641: PUSH
51642: LD_VAR 0 4
51646: PPUSH
51647: LD_INT 1
51649: PPUSH
51650: CALL_OW 275
51654: PUSH
51655: LD_VAR 0 5
51659: PUSH
51660: LD_INT 1
51662: ARRAY
51663: GREATEREQUAL
51664: PUSH
51665: LD_VAR 0 4
51669: PPUSH
51670: LD_INT 2
51672: PPUSH
51673: CALL_OW 275
51677: PUSH
51678: LD_VAR 0 5
51682: PUSH
51683: LD_INT 2
51685: ARRAY
51686: GREATEREQUAL
51687: AND
51688: PUSH
51689: LD_VAR 0 4
51693: PPUSH
51694: LD_INT 3
51696: PPUSH
51697: CALL_OW 275
51701: PUSH
51702: LD_VAR 0 5
51706: PUSH
51707: LD_INT 3
51709: ARRAY
51710: GREATEREQUAL
51711: AND
51712: ST_TO_ADDR
// end ;
51713: LD_VAR 0 3
51717: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51718: LD_INT 0
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
// result := false ;
51731: LD_ADDR_VAR 0 8
51735: PUSH
51736: LD_INT 0
51738: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51739: LD_VAR 0 5
51743: NOT
51744: PUSH
51745: LD_VAR 0 1
51749: NOT
51750: OR
51751: PUSH
51752: LD_VAR 0 2
51756: NOT
51757: OR
51758: PUSH
51759: LD_VAR 0 3
51763: NOT
51764: OR
51765: IFFALSE 51769
// exit ;
51767: GO 52583
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51769: LD_ADDR_VAR 0 14
51773: PUSH
51774: LD_VAR 0 1
51778: PPUSH
51779: LD_VAR 0 2
51783: PPUSH
51784: LD_VAR 0 3
51788: PPUSH
51789: LD_VAR 0 4
51793: PPUSH
51794: LD_VAR 0 5
51798: PUSH
51799: LD_INT 1
51801: ARRAY
51802: PPUSH
51803: CALL_OW 248
51807: PPUSH
51808: LD_INT 0
51810: PPUSH
51811: CALL 53420 0 6
51815: ST_TO_ADDR
// if not hexes then
51816: LD_VAR 0 14
51820: NOT
51821: IFFALSE 51825
// exit ;
51823: GO 52583
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51825: LD_ADDR_VAR 0 17
51829: PUSH
51830: LD_VAR 0 5
51834: PPUSH
51835: LD_INT 22
51837: PUSH
51838: LD_VAR 0 13
51842: PPUSH
51843: CALL_OW 255
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 30
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 30
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PPUSH
51884: CALL_OW 72
51888: ST_TO_ADDR
// for i = 1 to hexes do
51889: LD_ADDR_VAR 0 9
51893: PUSH
51894: DOUBLE
51895: LD_INT 1
51897: DEC
51898: ST_TO_ADDR
51899: LD_VAR 0 14
51903: PUSH
51904: FOR_TO
51905: IFFALSE 52581
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51907: LD_ADDR_VAR 0 13
51911: PUSH
51912: LD_VAR 0 14
51916: PUSH
51917: LD_VAR 0 9
51921: ARRAY
51922: PUSH
51923: LD_INT 1
51925: ARRAY
51926: PPUSH
51927: LD_VAR 0 14
51931: PUSH
51932: LD_VAR 0 9
51936: ARRAY
51937: PUSH
51938: LD_INT 2
51940: ARRAY
51941: PPUSH
51942: CALL_OW 428
51946: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51947: LD_VAR 0 14
51951: PUSH
51952: LD_VAR 0 9
51956: ARRAY
51957: PUSH
51958: LD_INT 1
51960: ARRAY
51961: PPUSH
51962: LD_VAR 0 14
51966: PUSH
51967: LD_VAR 0 9
51971: ARRAY
51972: PUSH
51973: LD_INT 2
51975: ARRAY
51976: PPUSH
51977: CALL_OW 351
51981: PUSH
51982: LD_VAR 0 14
51986: PUSH
51987: LD_VAR 0 9
51991: ARRAY
51992: PUSH
51993: LD_INT 1
51995: ARRAY
51996: PPUSH
51997: LD_VAR 0 14
52001: PUSH
52002: LD_VAR 0 9
52006: ARRAY
52007: PUSH
52008: LD_INT 2
52010: ARRAY
52011: PPUSH
52012: CALL_OW 488
52016: NOT
52017: OR
52018: PUSH
52019: LD_VAR 0 13
52023: PPUSH
52024: CALL_OW 247
52028: PUSH
52029: LD_INT 3
52031: EQUAL
52032: OR
52033: IFFALSE 52039
// exit ;
52035: POP
52036: POP
52037: GO 52583
// if not tmp then
52039: LD_VAR 0 13
52043: NOT
52044: IFFALSE 52048
// continue ;
52046: GO 51904
// result := true ;
52048: LD_ADDR_VAR 0 8
52052: PUSH
52053: LD_INT 1
52055: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52056: LD_VAR 0 6
52060: PUSH
52061: LD_VAR 0 13
52065: PPUSH
52066: CALL_OW 247
52070: PUSH
52071: LD_INT 2
52073: EQUAL
52074: AND
52075: PUSH
52076: LD_VAR 0 13
52080: PPUSH
52081: CALL_OW 263
52085: PUSH
52086: LD_INT 1
52088: EQUAL
52089: AND
52090: IFFALSE 52254
// begin if IsDrivenBy ( tmp ) then
52092: LD_VAR 0 13
52096: PPUSH
52097: CALL_OW 311
52101: IFFALSE 52105
// continue ;
52103: GO 51904
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52105: LD_VAR 0 6
52109: PPUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 60
52115: PUSH
52116: EMPTY
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: LD_INT 55
52128: PUSH
52129: EMPTY
52130: LIST
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PPUSH
52140: CALL_OW 72
52144: IFFALSE 52252
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52146: LD_ADDR_VAR 0 18
52150: PUSH
52151: LD_VAR 0 6
52155: PPUSH
52156: LD_INT 3
52158: PUSH
52159: LD_INT 60
52161: PUSH
52162: EMPTY
52163: LIST
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: LD_INT 55
52174: PUSH
52175: EMPTY
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PPUSH
52186: CALL_OW 72
52190: PUSH
52191: LD_INT 1
52193: ARRAY
52194: ST_TO_ADDR
// if IsInUnit ( driver ) then
52195: LD_VAR 0 18
52199: PPUSH
52200: CALL_OW 310
52204: IFFALSE 52215
// ComExit ( driver ) ;
52206: LD_VAR 0 18
52210: PPUSH
52211: CALL 76604 0 1
// AddComEnterUnit ( driver , tmp ) ;
52215: LD_VAR 0 18
52219: PPUSH
52220: LD_VAR 0 13
52224: PPUSH
52225: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52229: LD_VAR 0 18
52233: PPUSH
52234: LD_VAR 0 7
52238: PPUSH
52239: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52243: LD_VAR 0 18
52247: PPUSH
52248: CALL_OW 181
// end ; continue ;
52252: GO 51904
// end ; if not cleaners or not tmp in cleaners then
52254: LD_VAR 0 6
52258: NOT
52259: PUSH
52260: LD_VAR 0 13
52264: PUSH
52265: LD_VAR 0 6
52269: IN
52270: NOT
52271: OR
52272: IFFALSE 52579
// begin if dep then
52274: LD_VAR 0 17
52278: IFFALSE 52414
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52280: LD_ADDR_VAR 0 16
52284: PUSH
52285: LD_VAR 0 17
52289: PUSH
52290: LD_INT 1
52292: ARRAY
52293: PPUSH
52294: CALL_OW 250
52298: PPUSH
52299: LD_VAR 0 17
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PPUSH
52308: CALL_OW 254
52312: PPUSH
52313: LD_INT 5
52315: PPUSH
52316: CALL_OW 272
52320: PUSH
52321: LD_VAR 0 17
52325: PUSH
52326: LD_INT 1
52328: ARRAY
52329: PPUSH
52330: CALL_OW 251
52334: PPUSH
52335: LD_VAR 0 17
52339: PUSH
52340: LD_INT 1
52342: ARRAY
52343: PPUSH
52344: CALL_OW 254
52348: PPUSH
52349: LD_INT 5
52351: PPUSH
52352: CALL_OW 273
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52361: LD_VAR 0 16
52365: PUSH
52366: LD_INT 1
52368: ARRAY
52369: PPUSH
52370: LD_VAR 0 16
52374: PUSH
52375: LD_INT 2
52377: ARRAY
52378: PPUSH
52379: CALL_OW 488
52383: IFFALSE 52414
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52385: LD_VAR 0 13
52389: PPUSH
52390: LD_VAR 0 16
52394: PUSH
52395: LD_INT 1
52397: ARRAY
52398: PPUSH
52399: LD_VAR 0 16
52403: PUSH
52404: LD_INT 2
52406: ARRAY
52407: PPUSH
52408: CALL_OW 111
// continue ;
52412: GO 51904
// end ; end ; r := GetDir ( tmp ) ;
52414: LD_ADDR_VAR 0 15
52418: PUSH
52419: LD_VAR 0 13
52423: PPUSH
52424: CALL_OW 254
52428: ST_TO_ADDR
// if r = 5 then
52429: LD_VAR 0 15
52433: PUSH
52434: LD_INT 5
52436: EQUAL
52437: IFFALSE 52447
// r := 0 ;
52439: LD_ADDR_VAR 0 15
52443: PUSH
52444: LD_INT 0
52446: ST_TO_ADDR
// for j = r to 5 do
52447: LD_ADDR_VAR 0 10
52451: PUSH
52452: DOUBLE
52453: LD_VAR 0 15
52457: DEC
52458: ST_TO_ADDR
52459: LD_INT 5
52461: PUSH
52462: FOR_TO
52463: IFFALSE 52577
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52465: LD_ADDR_VAR 0 11
52469: PUSH
52470: LD_VAR 0 13
52474: PPUSH
52475: CALL_OW 250
52479: PPUSH
52480: LD_VAR 0 10
52484: PPUSH
52485: LD_INT 2
52487: PPUSH
52488: CALL_OW 272
52492: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52493: LD_ADDR_VAR 0 12
52497: PUSH
52498: LD_VAR 0 13
52502: PPUSH
52503: CALL_OW 251
52507: PPUSH
52508: LD_VAR 0 10
52512: PPUSH
52513: LD_INT 2
52515: PPUSH
52516: CALL_OW 273
52520: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52521: LD_VAR 0 11
52525: PPUSH
52526: LD_VAR 0 12
52530: PPUSH
52531: CALL_OW 488
52535: PUSH
52536: LD_VAR 0 11
52540: PPUSH
52541: LD_VAR 0 12
52545: PPUSH
52546: CALL_OW 428
52550: NOT
52551: AND
52552: IFFALSE 52575
// begin ComMoveXY ( tmp , _x , _y ) ;
52554: LD_VAR 0 13
52558: PPUSH
52559: LD_VAR 0 11
52563: PPUSH
52564: LD_VAR 0 12
52568: PPUSH
52569: CALL_OW 111
// break ;
52573: GO 52577
// end ; end ;
52575: GO 52462
52577: POP
52578: POP
// end ; end ;
52579: GO 51904
52581: POP
52582: POP
// end ;
52583: LD_VAR 0 8
52587: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
52588: LD_INT 0
52590: PPUSH
52591: PPUSH
52592: PPUSH
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
52599: PPUSH
// result := false ;
52600: LD_ADDR_VAR 0 6
52604: PUSH
52605: LD_INT 0
52607: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52608: LD_VAR 0 1
52612: NOT
52613: PUSH
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 266
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: IN
52634: NOT
52635: OR
52636: PUSH
52637: LD_VAR 0 2
52641: NOT
52642: OR
52643: PUSH
52644: LD_VAR 0 5
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 4
52663: PUSH
52664: LD_INT 5
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: IN
52675: NOT
52676: OR
52677: PUSH
52678: LD_VAR 0 3
52682: PPUSH
52683: LD_VAR 0 4
52687: PPUSH
52688: CALL_OW 488
52692: NOT
52693: OR
52694: IFFALSE 52698
// exit ;
52696: GO 53415
// pom := GetBase ( depot ) ;
52698: LD_ADDR_VAR 0 10
52702: PUSH
52703: LD_VAR 0 1
52707: PPUSH
52708: CALL_OW 274
52712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52713: LD_ADDR_VAR 0 11
52717: PUSH
52718: LD_VAR 0 2
52722: PPUSH
52723: LD_VAR 0 1
52727: PPUSH
52728: CALL_OW 248
52732: PPUSH
52733: CALL_OW 450
52737: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52738: LD_VAR 0 10
52742: PPUSH
52743: LD_INT 1
52745: PPUSH
52746: CALL_OW 275
52750: PUSH
52751: LD_VAR 0 11
52755: PUSH
52756: LD_INT 1
52758: ARRAY
52759: GREATEREQUAL
52760: PUSH
52761: LD_VAR 0 10
52765: PPUSH
52766: LD_INT 2
52768: PPUSH
52769: CALL_OW 275
52773: PUSH
52774: LD_VAR 0 11
52778: PUSH
52779: LD_INT 2
52781: ARRAY
52782: GREATEREQUAL
52783: AND
52784: PUSH
52785: LD_VAR 0 10
52789: PPUSH
52790: LD_INT 3
52792: PPUSH
52793: CALL_OW 275
52797: PUSH
52798: LD_VAR 0 11
52802: PUSH
52803: LD_INT 3
52805: ARRAY
52806: GREATEREQUAL
52807: AND
52808: NOT
52809: IFFALSE 52813
// exit ;
52811: GO 53415
// if GetBType ( depot ) = b_depot then
52813: LD_VAR 0 1
52817: PPUSH
52818: CALL_OW 266
52822: PUSH
52823: LD_INT 0
52825: EQUAL
52826: IFFALSE 52838
// dist := 28 else
52828: LD_ADDR_VAR 0 14
52832: PUSH
52833: LD_INT 28
52835: ST_TO_ADDR
52836: GO 52846
// dist := 36 ;
52838: LD_ADDR_VAR 0 14
52842: PUSH
52843: LD_INT 36
52845: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52846: LD_VAR 0 1
52850: PPUSH
52851: LD_VAR 0 3
52855: PPUSH
52856: LD_VAR 0 4
52860: PPUSH
52861: CALL_OW 297
52865: PUSH
52866: LD_VAR 0 14
52870: GREATER
52871: IFFALSE 52875
// exit ;
52873: GO 53415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52875: LD_ADDR_VAR 0 12
52879: PUSH
52880: LD_VAR 0 2
52884: PPUSH
52885: LD_VAR 0 3
52889: PPUSH
52890: LD_VAR 0 4
52894: PPUSH
52895: LD_VAR 0 5
52899: PPUSH
52900: LD_VAR 0 1
52904: PPUSH
52905: CALL_OW 248
52909: PPUSH
52910: LD_INT 0
52912: PPUSH
52913: CALL 53420 0 6
52917: ST_TO_ADDR
// if not hexes then
52918: LD_VAR 0 12
52922: NOT
52923: IFFALSE 52927
// exit ;
52925: GO 53415
// hex := GetHexInfo ( x , y ) ;
52927: LD_ADDR_VAR 0 15
52931: PUSH
52932: LD_VAR 0 3
52936: PPUSH
52937: LD_VAR 0 4
52941: PPUSH
52942: CALL_OW 546
52946: ST_TO_ADDR
// if hex [ 1 ] then
52947: LD_VAR 0 15
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: IFFALSE 52959
// exit ;
52957: GO 53415
// height := hex [ 2 ] ;
52959: LD_ADDR_VAR 0 13
52963: PUSH
52964: LD_VAR 0 15
52968: PUSH
52969: LD_INT 2
52971: ARRAY
52972: ST_TO_ADDR
// for i = 1 to hexes do
52973: LD_ADDR_VAR 0 7
52977: PUSH
52978: DOUBLE
52979: LD_INT 1
52981: DEC
52982: ST_TO_ADDR
52983: LD_VAR 0 12
52987: PUSH
52988: FOR_TO
52989: IFFALSE 53319
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52991: LD_VAR 0 12
52995: PUSH
52996: LD_VAR 0 7
53000: ARRAY
53001: PUSH
53002: LD_INT 1
53004: ARRAY
53005: PPUSH
53006: LD_VAR 0 12
53010: PUSH
53011: LD_VAR 0 7
53015: ARRAY
53016: PUSH
53017: LD_INT 2
53019: ARRAY
53020: PPUSH
53021: CALL_OW 488
53025: NOT
53026: PUSH
53027: LD_VAR 0 12
53031: PUSH
53032: LD_VAR 0 7
53036: ARRAY
53037: PUSH
53038: LD_INT 1
53040: ARRAY
53041: PPUSH
53042: LD_VAR 0 12
53046: PUSH
53047: LD_VAR 0 7
53051: ARRAY
53052: PUSH
53053: LD_INT 2
53055: ARRAY
53056: PPUSH
53057: CALL_OW 428
53061: PUSH
53062: LD_INT 0
53064: GREATER
53065: OR
53066: PUSH
53067: LD_VAR 0 12
53071: PUSH
53072: LD_VAR 0 7
53076: ARRAY
53077: PUSH
53078: LD_INT 1
53080: ARRAY
53081: PPUSH
53082: LD_VAR 0 12
53086: PUSH
53087: LD_VAR 0 7
53091: ARRAY
53092: PUSH
53093: LD_INT 2
53095: ARRAY
53096: PPUSH
53097: CALL_OW 351
53101: OR
53102: IFFALSE 53108
// exit ;
53104: POP
53105: POP
53106: GO 53415
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53108: LD_ADDR_VAR 0 8
53112: PUSH
53113: LD_VAR 0 12
53117: PUSH
53118: LD_VAR 0 7
53122: ARRAY
53123: PUSH
53124: LD_INT 1
53126: ARRAY
53127: PPUSH
53128: LD_VAR 0 12
53132: PUSH
53133: LD_VAR 0 7
53137: ARRAY
53138: PUSH
53139: LD_INT 2
53141: ARRAY
53142: PPUSH
53143: CALL_OW 546
53147: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53148: LD_VAR 0 8
53152: PUSH
53153: LD_INT 1
53155: ARRAY
53156: PUSH
53157: LD_VAR 0 8
53161: PUSH
53162: LD_INT 2
53164: ARRAY
53165: PUSH
53166: LD_VAR 0 13
53170: PUSH
53171: LD_INT 2
53173: PLUS
53174: GREATER
53175: OR
53176: PUSH
53177: LD_VAR 0 8
53181: PUSH
53182: LD_INT 2
53184: ARRAY
53185: PUSH
53186: LD_VAR 0 13
53190: PUSH
53191: LD_INT 2
53193: MINUS
53194: LESS
53195: OR
53196: PUSH
53197: LD_VAR 0 8
53201: PUSH
53202: LD_INT 3
53204: ARRAY
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 8
53211: PUSH
53212: LD_INT 9
53214: PUSH
53215: LD_INT 10
53217: PUSH
53218: LD_INT 11
53220: PUSH
53221: LD_INT 12
53223: PUSH
53224: LD_INT 13
53226: PUSH
53227: LD_INT 16
53229: PUSH
53230: LD_INT 17
53232: PUSH
53233: LD_INT 18
53235: PUSH
53236: LD_INT 19
53238: PUSH
53239: LD_INT 20
53241: PUSH
53242: LD_INT 21
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: IN
53260: NOT
53261: OR
53262: PUSH
53263: LD_VAR 0 8
53267: PUSH
53268: LD_INT 5
53270: ARRAY
53271: NOT
53272: OR
53273: PUSH
53274: LD_VAR 0 8
53278: PUSH
53279: LD_INT 6
53281: ARRAY
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: LD_INT 7
53291: PUSH
53292: LD_INT 9
53294: PUSH
53295: LD_INT 10
53297: PUSH
53298: LD_INT 11
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: IN
53309: NOT
53310: OR
53311: IFFALSE 53317
// exit ;
53313: POP
53314: POP
53315: GO 53415
// end ;
53317: GO 52988
53319: POP
53320: POP
// side := GetSide ( depot ) ;
53321: LD_ADDR_VAR 0 9
53325: PUSH
53326: LD_VAR 0 1
53330: PPUSH
53331: CALL_OW 255
53335: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53336: LD_VAR 0 9
53340: PPUSH
53341: LD_VAR 0 3
53345: PPUSH
53346: LD_VAR 0 4
53350: PPUSH
53351: LD_INT 20
53353: PPUSH
53354: CALL 45736 0 4
53358: PUSH
53359: LD_INT 4
53361: ARRAY
53362: IFFALSE 53366
// exit ;
53364: GO 53415
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53366: LD_VAR 0 2
53370: PUSH
53371: LD_INT 29
53373: PUSH
53374: LD_INT 30
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: IN
53381: PUSH
53382: LD_VAR 0 3
53386: PPUSH
53387: LD_VAR 0 4
53391: PPUSH
53392: LD_VAR 0 9
53396: PPUSH
53397: CALL_OW 440
53401: NOT
53402: AND
53403: IFFALSE 53407
// exit ;
53405: GO 53415
// result := true ;
53407: LD_ADDR_VAR 0 6
53411: PUSH
53412: LD_INT 1
53414: ST_TO_ADDR
// end ;
53415: LD_VAR 0 6
53419: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53420: LD_INT 0
53422: PPUSH
53423: PPUSH
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
53430: PPUSH
53431: PPUSH
53432: PPUSH
53433: PPUSH
53434: PPUSH
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
53440: PPUSH
53441: PPUSH
53442: PPUSH
53443: PPUSH
53444: PPUSH
53445: PPUSH
53446: PPUSH
53447: PPUSH
53448: PPUSH
53449: PPUSH
53450: PPUSH
53451: PPUSH
53452: PPUSH
53453: PPUSH
53454: PPUSH
53455: PPUSH
53456: PPUSH
53457: PPUSH
53458: PPUSH
53459: PPUSH
53460: PPUSH
53461: PPUSH
53462: PPUSH
53463: PPUSH
53464: PPUSH
53465: PPUSH
53466: PPUSH
53467: PPUSH
53468: PPUSH
53469: PPUSH
53470: PPUSH
53471: PPUSH
53472: PPUSH
53473: PPUSH
53474: PPUSH
53475: PPUSH
53476: PPUSH
53477: PPUSH
53478: PPUSH
53479: PPUSH
// result = [ ] ;
53480: LD_ADDR_VAR 0 7
53484: PUSH
53485: EMPTY
53486: ST_TO_ADDR
// temp_list = [ ] ;
53487: LD_ADDR_VAR 0 9
53491: PUSH
53492: EMPTY
53493: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53494: LD_VAR 0 4
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: LD_INT 4
53513: PUSH
53514: LD_INT 5
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: IN
53525: NOT
53526: PUSH
53527: LD_VAR 0 1
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: IN
53542: PUSH
53543: LD_VAR 0 5
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: LIST
53561: IN
53562: NOT
53563: AND
53564: OR
53565: IFFALSE 53569
// exit ;
53567: GO 71960
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53569: LD_VAR 0 1
53573: PUSH
53574: LD_INT 6
53576: PUSH
53577: LD_INT 7
53579: PUSH
53580: LD_INT 8
53582: PUSH
53583: LD_INT 13
53585: PUSH
53586: LD_INT 12
53588: PUSH
53589: LD_INT 15
53591: PUSH
53592: LD_INT 11
53594: PUSH
53595: LD_INT 14
53597: PUSH
53598: LD_INT 10
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: IN
53612: IFFALSE 53622
// btype = b_lab ;
53614: LD_ADDR_VAR 0 1
53618: PUSH
53619: LD_INT 6
53621: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53622: LD_VAR 0 6
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: IN
53641: NOT
53642: PUSH
53643: LD_VAR 0 1
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 6
53662: PUSH
53663: LD_INT 36
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: LD_INT 5
53671: PUSH
53672: LD_INT 31
53674: PUSH
53675: LD_INT 32
53677: PUSH
53678: LD_INT 33
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: IN
53694: NOT
53695: PUSH
53696: LD_VAR 0 6
53700: PUSH
53701: LD_INT 1
53703: EQUAL
53704: AND
53705: OR
53706: PUSH
53707: LD_VAR 0 1
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: IN
53722: NOT
53723: PUSH
53724: LD_VAR 0 6
53728: PUSH
53729: LD_INT 2
53731: EQUAL
53732: AND
53733: OR
53734: IFFALSE 53744
// mode = 0 ;
53736: LD_ADDR_VAR 0 6
53740: PUSH
53741: LD_INT 0
53743: ST_TO_ADDR
// case mode of 0 :
53744: LD_VAR 0 6
53748: PUSH
53749: LD_INT 0
53751: DOUBLE
53752: EQUAL
53753: IFTRUE 53757
53755: GO 65210
53757: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53758: LD_ADDR_VAR 0 11
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53951: LD_ADDR_VAR 0 12
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54147: LD_ADDR_VAR 0 13
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54346: LD_ADDR_VAR 0 14
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54542: LD_ADDR_VAR 0 15
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54735: LD_ADDR_VAR 0 16
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54928: LD_ADDR_VAR 0 17
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55158: LD_ADDR_VAR 0 18
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55388: LD_ADDR_VAR 0 19
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55618: LD_ADDR_VAR 0 20
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55848: LD_ADDR_VAR 0 21
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56078: LD_ADDR_VAR 0 22
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56308: LD_ADDR_VAR 0 23
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 3
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56588: LD_ADDR_VAR 0 24
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 2
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 3
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 3
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56864: LD_ADDR_VAR 0 25
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57138: LD_ADDR_VAR 0 26
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57414: LD_ADDR_VAR 0 27
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57694: LD_ADDR_VAR 0 28
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57976: LD_ADDR_VAR 0 29
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: LD_INT 2
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58255: LD_ADDR_VAR 0 30
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58533: LD_ADDR_VAR 0 31
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: LD_INT 1
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58811: LD_ADDR_VAR 0 32
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59089: LD_ADDR_VAR 0 33
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 2
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: LD_INT 3
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 3
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59368: LD_ADDR_VAR 0 34
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59648: LD_ADDR_VAR 0 35
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59760: LD_ADDR_VAR 0 36
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59872: LD_ADDR_VAR 0 37
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59984: LD_ADDR_VAR 0 38
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 2
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60096: LD_ADDR_VAR 0 39
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60208: LD_ADDR_VAR 0 40
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60320: LD_ADDR_VAR 0 41
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: LD_INT 3
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: LD_INT 3
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60670: LD_ADDR_VAR 0 42
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: LD_INT 2
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: LD_INT 3
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 3
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: LD_INT 3
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 3
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 3
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: NEG
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: NEG
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61020: LD_ADDR_VAR 0 43
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: NEG
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: LD_INT 3
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 2
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 3
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 3
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 3
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: NEG
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61368: LD_ADDR_VAR 0 44
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: LD_INT 0
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 2
61523: NEG
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 3
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: LD_INT 3
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 2
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 3
61642: NEG
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61718: LD_ADDR_VAR 0 45
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: LD_INT 2
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 2
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: LD_INT 3
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 3
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 3
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: LD_INT 3
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 2
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: LD_INT 3
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: LD_INT 2
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: LD_INT 3
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62068: LD_ADDR_VAR 0 46
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: LD_INT 2
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 2
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 3
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: LD_INT 3
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 3
62364: NEG
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: NEG
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62416: LD_ADDR_VAR 0 47
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: NEG
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: NEG
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: LD_INT 1
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 2
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62567: LD_ADDR_VAR 0 48
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62714: LD_ADDR_VAR 0 49
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 0
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62858: LD_ADDR_VAR 0 50
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 1
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63002: LD_ADDR_VAR 0 51
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63149: LD_ADDR_VAR 0 52
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: LD_INT 2
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63300: LD_ADDR_VAR 0 53
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 2
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 2
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63530: LD_ADDR_VAR 0 54
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 1
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: LD_INT 2
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63760: LD_ADDR_VAR 0 55
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 1
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 2
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: LD_INT 2
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: NEG
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63990: LD_ADDR_VAR 0 56
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: LD_INT 2
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 2
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: LD_INT 1
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64220: LD_ADDR_VAR 0 57
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: NEG
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 2
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 2
64396: NEG
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: NEG
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64450: LD_ADDR_VAR 0 58
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: LD_INT 2
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 2
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64680: LD_ADDR_VAR 0 59
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64768: LD_ADDR_VAR 0 60
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: LD_INT 0
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64856: LD_ADDR_VAR 0 61
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64944: LD_ADDR_VAR 0 62
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65032: LD_ADDR_VAR 0 63
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 0
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65120: LD_ADDR_VAR 0 64
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 1
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// end ; 1 :
65208: GO 71105
65210: LD_INT 1
65212: DOUBLE
65213: EQUAL
65214: IFTRUE 65218
65216: GO 67841
65218: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65219: LD_ADDR_VAR 0 11
65223: PUSH
65224: LD_INT 1
65226: NEG
65227: PUSH
65228: LD_INT 3
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 3
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65263: LD_ADDR_VAR 0 12
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 3
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65304: LD_ADDR_VAR 0 13
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: LD_INT 3
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 3
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65344: LD_ADDR_VAR 0 14
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65385: LD_ADDR_VAR 0 15
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65429: LD_ADDR_VAR 0 16
65433: PUSH
65434: LD_INT 2
65436: NEG
65437: PUSH
65438: LD_INT 3
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: LD_INT 3
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65475: LD_ADDR_VAR 0 17
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: LD_INT 3
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: LD_INT 2
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: LIST
65518: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65519: LD_ADDR_VAR 0 18
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 3
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65560: LD_ADDR_VAR 0 19
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 3
65577: PUSH
65578: LD_INT 3
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: LD_INT 3
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65600: LD_ADDR_VAR 0 20
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: LD_INT 3
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: LD_INT 2
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65641: LD_ADDR_VAR 0 21
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 3
65670: NEG
65671: PUSH
65672: LD_INT 1
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: LIST
65684: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65685: LD_ADDR_VAR 0 22
65689: PUSH
65690: LD_INT 2
65692: NEG
65693: PUSH
65694: LD_INT 3
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 3
65704: NEG
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: LD_INT 3
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65731: LD_ADDR_VAR 0 23
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 3
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: LD_INT 4
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: LD_INT 3
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65775: LD_ADDR_VAR 0 24
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 3
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 4
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65816: LD_ADDR_VAR 0 25
65820: PUSH
65821: LD_INT 3
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 4
65833: PUSH
65834: LD_INT 3
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 3
65843: PUSH
65844: LD_INT 4
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65856: LD_ADDR_VAR 0 26
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: LD_INT 3
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65897: LD_ADDR_VAR 0 27
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 4
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65941: LD_ADDR_VAR 0 28
65945: PUSH
65946: LD_INT 3
65948: NEG
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 3
65960: NEG
65961: PUSH
65962: LD_INT 4
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 4
65972: NEG
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65987: LD_ADDR_VAR 0 29
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: LD_INT 3
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 3
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 1
66017: PUSH
66018: LD_INT 2
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 4
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 4
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 5
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_INT 5
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: LD_INT 4
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 1
66096: NEG
66097: PUSH
66098: LD_INT 6
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 6
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: LD_INT 5
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66142: LD_ADDR_VAR 0 30
66146: PUSH
66147: LD_INT 2
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 3
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 4
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 4
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 4
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 5
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 5
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 5
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 6
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 6
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66285: LD_ADDR_VAR 0 31
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: LD_INT 3
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: LD_INT 3
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 4
66322: PUSH
66323: LD_INT 3
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 4
66332: PUSH
66333: LD_INT 4
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 3
66342: PUSH
66343: LD_INT 4
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 5
66352: PUSH
66353: LD_INT 4
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 5
66362: PUSH
66363: LD_INT 5
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 4
66372: PUSH
66373: LD_INT 5
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 6
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 6
66392: PUSH
66393: LD_INT 6
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 5
66402: PUSH
66403: LD_INT 6
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66424: LD_ADDR_VAR 0 32
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: LD_INT 3
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: LD_INT 2
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: LD_INT 4
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: LD_INT 4
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: LD_INT 3
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: LD_INT 5
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: LD_INT 5
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: NEG
66514: PUSH
66515: LD_INT 4
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 1
66524: PUSH
66525: LD_INT 6
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 0
66534: PUSH
66535: LD_INT 6
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 1
66544: NEG
66545: PUSH
66546: LD_INT 5
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66567: LD_ADDR_VAR 0 33
66571: PUSH
66572: LD_INT 2
66574: NEG
66575: PUSH
66576: LD_INT 1
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 3
66585: NEG
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 3
66596: NEG
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 3
66608: NEG
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 4
66619: NEG
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 4
66630: NEG
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 4
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 5
66653: NEG
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 5
66664: NEG
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 5
66676: NEG
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 6
66687: NEG
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 6
66698: NEG
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66722: LD_ADDR_VAR 0 34
66726: PUSH
66727: LD_INT 2
66729: NEG
66730: PUSH
66731: LD_INT 3
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 3
66741: NEG
66742: PUSH
66743: LD_INT 2
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 3
66753: NEG
66754: PUSH
66755: LD_INT 3
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 3
66765: NEG
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 4
66777: NEG
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 4
66789: NEG
66790: PUSH
66791: LD_INT 4
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 4
66801: NEG
66802: PUSH
66803: LD_INT 5
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 5
66813: NEG
66814: PUSH
66815: LD_INT 4
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 5
66825: NEG
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 5
66837: NEG
66838: PUSH
66839: LD_INT 6
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 6
66849: NEG
66850: PUSH
66851: LD_INT 5
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 6
66861: NEG
66862: PUSH
66863: LD_INT 6
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66885: LD_ADDR_VAR 0 41
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: LD_INT 2
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 1
66903: NEG
66904: PUSH
66905: LD_INT 3
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: LD_INT 2
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66929: LD_ADDR_VAR 0 42
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 1
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: LIST
66969: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66970: LD_ADDR_VAR 0 43
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: LD_INT 2
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 2
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67010: LD_ADDR_VAR 0 44
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67051: LD_ADDR_VAR 0 45
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 2
67069: NEG
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 3
67080: NEG
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: LIST
67094: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67095: LD_ADDR_VAR 0 46
67099: PUSH
67100: LD_INT 2
67102: NEG
67103: PUSH
67104: LD_INT 2
67106: NEG
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 2
67114: NEG
67115: PUSH
67116: LD_INT 3
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 3
67126: NEG
67127: PUSH
67128: LD_INT 2
67130: NEG
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: LIST
67140: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67141: LD_ADDR_VAR 0 47
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: LD_INT 3
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: LD_INT 3
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67174: LD_ADDR_VAR 0 48
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: LD_INT 2
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67205: LD_ADDR_VAR 0 49
67209: PUSH
67210: LD_INT 3
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 3
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67234: LD_ADDR_VAR 0 50
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: LD_INT 3
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 1
67251: PUSH
67252: LD_INT 3
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67263: LD_ADDR_VAR 0 51
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 2
67281: NEG
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67294: LD_ADDR_VAR 0 52
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 3
67313: NEG
67314: PUSH
67315: LD_INT 2
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67327: LD_ADDR_VAR 0 53
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: LD_INT 3
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: LD_INT 3
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 2
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: LIST
67370: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67371: LD_ADDR_VAR 0 54
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 3
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67412: LD_ADDR_VAR 0 55
67416: PUSH
67417: LD_INT 3
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 3
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 2
67439: PUSH
67440: LD_INT 3
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: LIST
67451: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67452: LD_ADDR_VAR 0 56
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: LD_INT 3
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: LD_INT 2
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67493: LD_ADDR_VAR 0 57
67497: PUSH
67498: LD_INT 2
67500: NEG
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 3
67511: NEG
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: LIST
67536: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67537: LD_ADDR_VAR 0 58
67541: PUSH
67542: LD_INT 2
67544: NEG
67545: PUSH
67546: LD_INT 3
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 3
67556: NEG
67557: PUSH
67558: LD_INT 2
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: LD_INT 3
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67583: LD_ADDR_VAR 0 59
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 0
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: LIST
67626: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67627: LD_ADDR_VAR 0 60
67631: PUSH
67632: LD_INT 1
67634: PUSH
67635: LD_INT 1
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67668: LD_ADDR_VAR 0 61
67672: PUSH
67673: LD_INT 2
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: LIST
67707: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67708: LD_ADDR_VAR 0 62
67712: PUSH
67713: LD_INT 1
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 0
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 1
67735: NEG
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: LIST
67748: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67749: LD_ADDR_VAR 0 63
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: PUSH
67758: LD_INT 1
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: LD_INT 0
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: LD_INT 1
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: LIST
67792: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67793: LD_ADDR_VAR 0 64
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: LD_INT 1
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 2
67824: NEG
67825: PUSH
67826: LD_INT 2
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: ST_TO_ADDR
// end ; 2 :
67839: GO 71105
67841: LD_INT 2
67843: DOUBLE
67844: EQUAL
67845: IFTRUE 67849
67847: GO 71104
67849: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67850: LD_ADDR_VAR 0 29
67854: PUSH
67855: LD_INT 4
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 4
67867: PUSH
67868: LD_INT 1
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 5
67878: PUSH
67879: LD_INT 0
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 5
67888: PUSH
67889: LD_INT 1
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 4
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: LD_INT 1
67921: NEG
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 3
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 5
67940: PUSH
67941: LD_INT 2
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 3
67950: PUSH
67951: LD_INT 3
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 3
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: LD_INT 3
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 4
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: PUSH
67991: LD_INT 4
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: LD_INT 3
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: LD_INT 2
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 4
68020: PUSH
68021: LD_INT 2
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 2
68030: PUSH
68031: LD_INT 4
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: LD_INT 4
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_INT 3
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: LD_INT 4
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: LD_INT 5
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 5
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 1
68090: NEG
68091: PUSH
68092: LD_INT 4
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 1
68101: NEG
68102: PUSH
68103: LD_INT 3
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: LD_INT 5
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 2
68122: NEG
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 3
68133: NEG
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 3
68144: NEG
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 2
68156: NEG
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 2
68167: NEG
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 4
68189: NEG
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 4
68200: NEG
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 4
68212: NEG
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 2
68224: NEG
68225: PUSH
68226: LD_INT 2
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 4
68235: NEG
68236: PUSH
68237: LD_INT 4
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 4
68247: NEG
68248: PUSH
68249: LD_INT 5
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 3
68259: NEG
68260: PUSH
68261: LD_INT 4
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 3
68271: NEG
68272: PUSH
68273: LD_INT 3
68275: NEG
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 4
68283: NEG
68284: PUSH
68285: LD_INT 3
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 5
68295: NEG
68296: PUSH
68297: LD_INT 4
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 5
68307: NEG
68308: PUSH
68309: LD_INT 5
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: LD_INT 5
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 5
68331: NEG
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68388: LD_ADDR_VAR 0 30
68392: PUSH
68393: LD_INT 4
68395: PUSH
68396: LD_INT 4
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 4
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 5
68415: PUSH
68416: LD_INT 4
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 5
68425: PUSH
68426: LD_INT 5
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 4
68435: PUSH
68436: LD_INT 5
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 3
68445: PUSH
68446: LD_INT 4
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: LD_INT 3
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 5
68465: PUSH
68466: LD_INT 3
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 3
68475: PUSH
68476: LD_INT 5
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: LD_INT 2
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 1
68505: PUSH
68506: LD_INT 3
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 4
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: LD_INT 4
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 1
68535: NEG
68536: PUSH
68537: LD_INT 3
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 2
68557: PUSH
68558: LD_INT 4
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 2
68567: NEG
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 4
68578: NEG
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 4
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 3
68601: NEG
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 3
68612: NEG
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 4
68623: NEG
68624: PUSH
68625: LD_INT 1
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 5
68634: NEG
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 5
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 5
68657: NEG
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 3
68669: NEG
68670: PUSH
68671: LD_INT 2
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 3
68680: NEG
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 3
68692: NEG
68693: PUSH
68694: LD_INT 4
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 2
68704: NEG
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 2
68716: NEG
68717: PUSH
68718: LD_INT 2
68720: NEG
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 3
68728: NEG
68729: PUSH
68730: LD_INT 2
68732: NEG
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 4
68740: NEG
68741: PUSH
68742: LD_INT 3
68744: NEG
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 4
68752: NEG
68753: PUSH
68754: LD_INT 4
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 2
68764: NEG
68765: PUSH
68766: LD_INT 4
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 4
68776: NEG
68777: PUSH
68778: LD_INT 2
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: LD_INT 4
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 0
68799: PUSH
68800: LD_INT 5
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 1
68810: PUSH
68811: LD_INT 4
68813: NEG
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 1
68821: PUSH
68822: LD_INT 3
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 0
68832: PUSH
68833: LD_INT 3
68835: NEG
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 1
68843: NEG
68844: PUSH
68845: LD_INT 4
68847: NEG
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 1
68855: NEG
68856: PUSH
68857: LD_INT 5
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 2
68867: PUSH
68868: LD_INT 3
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 2
68878: NEG
68879: PUSH
68880: LD_INT 5
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68935: LD_ADDR_VAR 0 31
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 3
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: LD_INT 4
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 1
68972: PUSH
68973: LD_INT 5
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: LD_INT 5
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: LD_INT 4
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 1
69003: NEG
69004: PUSH
69005: LD_INT 3
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 2
69014: PUSH
69015: LD_INT 5
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 2
69024: NEG
69025: PUSH
69026: LD_INT 3
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 3
69035: NEG
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 2
69058: NEG
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 2
69069: NEG
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: NEG
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 4
69091: NEG
69092: PUSH
69093: LD_INT 0
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 4
69102: NEG
69103: PUSH
69104: LD_INT 1
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 4
69114: NEG
69115: PUSH
69116: LD_INT 2
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 2
69126: NEG
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: NEG
69138: PUSH
69139: LD_INT 4
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 4
69149: NEG
69150: PUSH
69151: LD_INT 5
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: NEG
69162: PUSH
69163: LD_INT 4
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 3
69173: NEG
69174: PUSH
69175: LD_INT 3
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 4
69185: NEG
69186: PUSH
69187: LD_INT 3
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 5
69197: NEG
69198: PUSH
69199: LD_INT 4
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 5
69209: NEG
69210: PUSH
69211: LD_INT 5
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 3
69221: NEG
69222: PUSH
69223: LD_INT 5
69225: NEG
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 5
69233: NEG
69234: PUSH
69235: LD_INT 3
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: LD_INT 3
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: LD_INT 4
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 1
69267: PUSH
69268: LD_INT 3
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: LD_INT 2
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 2
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: LD_INT 3
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 1
69312: NEG
69313: PUSH
69314: LD_INT 4
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 2
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 2
69335: NEG
69336: PUSH
69337: LD_INT 4
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 4
69347: PUSH
69348: LD_INT 0
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 4
69357: PUSH
69358: LD_INT 1
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 5
69368: PUSH
69369: LD_INT 0
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 5
69378: PUSH
69379: LD_INT 1
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 4
69388: PUSH
69389: LD_INT 1
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 3
69398: PUSH
69399: LD_INT 0
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 3
69408: PUSH
69409: LD_INT 1
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 3
69419: PUSH
69420: LD_INT 2
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 5
69430: PUSH
69431: LD_INT 2
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69485: LD_ADDR_VAR 0 32
69489: PUSH
69490: LD_INT 4
69492: NEG
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 4
69503: NEG
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 3
69515: NEG
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 3
69526: NEG
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 4
69537: NEG
69538: PUSH
69539: LD_INT 1
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 5
69548: NEG
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 5
69559: NEG
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 5
69571: NEG
69572: PUSH
69573: LD_INT 2
69575: NEG
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 3
69583: NEG
69584: PUSH
69585: LD_INT 2
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 3
69594: NEG
69595: PUSH
69596: LD_INT 3
69598: NEG
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 3
69606: NEG
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 2
69618: NEG
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: LD_INT 2
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 3
69642: NEG
69643: PUSH
69644: LD_INT 2
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 4
69654: NEG
69655: PUSH
69656: LD_INT 3
69658: NEG
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 4
69666: NEG
69667: PUSH
69668: LD_INT 4
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 2
69678: NEG
69679: PUSH
69680: LD_INT 4
69682: NEG
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 4
69690: NEG
69691: PUSH
69692: LD_INT 2
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: LD_INT 4
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: LD_INT 5
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 1
69724: PUSH
69725: LD_INT 4
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 1
69735: PUSH
69736: LD_INT 3
69738: NEG
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_INT 3
69749: NEG
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 1
69757: NEG
69758: PUSH
69759: LD_INT 4
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: PUSH
69771: LD_INT 5
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 2
69781: PUSH
69782: LD_INT 3
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 2
69792: NEG
69793: PUSH
69794: LD_INT 5
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: LD_INT 1
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 4
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 4
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 2
69865: PUSH
69866: LD_INT 1
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: LD_INT 2
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: LD_INT 2
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 4
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 4
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 5
69917: PUSH
69918: LD_INT 4
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 5
69927: PUSH
69928: LD_INT 5
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: LD_INT 5
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 3
69947: PUSH
69948: LD_INT 4
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: LD_INT 3
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 5
69967: PUSH
69968: LD_INT 3
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 3
69977: PUSH
69978: LD_INT 5
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: LIST
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70032: LD_ADDR_VAR 0 33
70036: PUSH
70037: LD_INT 4
70039: NEG
70040: PUSH
70041: LD_INT 4
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 4
70051: NEG
70052: PUSH
70053: LD_INT 5
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 3
70063: NEG
70064: PUSH
70065: LD_INT 4
70067: NEG
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: NEG
70076: PUSH
70077: LD_INT 3
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 4
70087: NEG
70088: PUSH
70089: LD_INT 3
70091: NEG
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 5
70099: NEG
70100: PUSH
70101: LD_INT 4
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 5
70111: NEG
70112: PUSH
70113: LD_INT 5
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 3
70123: NEG
70124: PUSH
70125: LD_INT 5
70127: NEG
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 5
70135: NEG
70136: PUSH
70137: LD_INT 3
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: LD_INT 4
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 1
70169: PUSH
70170: LD_INT 3
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: LD_INT 2
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 2
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: LD_INT 3
70206: NEG
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 1
70214: NEG
70215: PUSH
70216: LD_INT 4
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 2
70226: PUSH
70227: LD_INT 2
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 2
70237: NEG
70238: PUSH
70239: LD_INT 4
70241: NEG
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 4
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 4
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 5
70270: PUSH
70271: LD_INT 0
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 5
70280: PUSH
70281: LD_INT 1
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 4
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 3
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 3
70310: PUSH
70311: LD_INT 1
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 3
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 5
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 3
70342: PUSH
70343: LD_INT 3
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 3
70352: PUSH
70353: LD_INT 2
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 4
70362: PUSH
70363: LD_INT 3
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 4
70372: PUSH
70373: LD_INT 4
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 3
70382: PUSH
70383: LD_INT 4
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 2
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 2
70402: PUSH
70403: LD_INT 2
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 4
70412: PUSH
70413: LD_INT 2
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 2
70422: PUSH
70423: LD_INT 4
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 0
70432: PUSH
70433: LD_INT 4
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 0
70442: PUSH
70443: LD_INT 3
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 1
70452: PUSH
70453: LD_INT 4
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 1
70462: PUSH
70463: LD_INT 5
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: LD_INT 5
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 1
70482: NEG
70483: PUSH
70484: LD_INT 4
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 1
70493: NEG
70494: PUSH
70495: LD_INT 3
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 2
70504: PUSH
70505: LD_INT 5
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 2
70514: NEG
70515: PUSH
70516: LD_INT 3
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70570: LD_ADDR_VAR 0 34
70574: PUSH
70575: LD_INT 0
70577: PUSH
70578: LD_INT 4
70580: NEG
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 0
70588: PUSH
70589: LD_INT 5
70591: NEG
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 1
70599: PUSH
70600: LD_INT 4
70602: NEG
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: PUSH
70611: LD_INT 3
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 0
70621: PUSH
70622: LD_INT 3
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 1
70632: NEG
70633: PUSH
70634: LD_INT 4
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 1
70644: NEG
70645: PUSH
70646: LD_INT 5
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 2
70656: PUSH
70657: LD_INT 3
70659: NEG
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 2
70667: NEG
70668: PUSH
70669: LD_INT 5
70671: NEG
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 3
70679: PUSH
70680: LD_INT 0
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 3
70689: PUSH
70690: LD_INT 1
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 4
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 4
70710: PUSH
70711: LD_INT 1
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 3
70720: PUSH
70721: LD_INT 1
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 2
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 2
70740: PUSH
70741: LD_INT 1
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 2
70751: PUSH
70752: LD_INT 2
70754: NEG
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 4
70762: PUSH
70763: LD_INT 2
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 4
70772: PUSH
70773: LD_INT 4
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 4
70782: PUSH
70783: LD_INT 3
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 5
70792: PUSH
70793: LD_INT 4
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 5
70802: PUSH
70803: LD_INT 5
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 4
70812: PUSH
70813: LD_INT 5
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 3
70822: PUSH
70823: LD_INT 4
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 3
70832: PUSH
70833: LD_INT 3
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 5
70842: PUSH
70843: LD_INT 3
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: LD_INT 5
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: LD_INT 3
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 0
70872: PUSH
70873: LD_INT 2
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 1
70882: PUSH
70883: LD_INT 3
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 1
70892: PUSH
70893: LD_INT 4
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 0
70902: PUSH
70903: LD_INT 4
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 1
70912: NEG
70913: PUSH
70914: LD_INT 3
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 1
70923: NEG
70924: PUSH
70925: LD_INT 2
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 2
70934: PUSH
70935: LD_INT 4
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 2
70944: NEG
70945: PUSH
70946: LD_INT 2
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 4
70955: NEG
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 4
70966: NEG
70967: PUSH
70968: LD_INT 1
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 3
70978: NEG
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: NEG
70990: PUSH
70991: LD_INT 1
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 4
71000: NEG
71001: PUSH
71002: LD_INT 1
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 5
71011: NEG
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 5
71022: NEG
71023: PUSH
71024: LD_INT 1
71026: NEG
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 5
71034: NEG
71035: PUSH
71036: LD_INT 2
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 3
71046: NEG
71047: PUSH
71048: LD_INT 2
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: ST_TO_ADDR
// end ; end ;
71102: GO 71105
71104: POP
// case btype of b_depot , b_warehouse :
71105: LD_VAR 0 1
71109: PUSH
71110: LD_INT 0
71112: DOUBLE
71113: EQUAL
71114: IFTRUE 71124
71116: LD_INT 1
71118: DOUBLE
71119: EQUAL
71120: IFTRUE 71124
71122: GO 71325
71124: POP
// case nation of nation_american :
71125: LD_VAR 0 5
71129: PUSH
71130: LD_INT 1
71132: DOUBLE
71133: EQUAL
71134: IFTRUE 71138
71136: GO 71194
71138: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71139: LD_ADDR_VAR 0 9
71143: PUSH
71144: LD_VAR 0 11
71148: PUSH
71149: LD_VAR 0 12
71153: PUSH
71154: LD_VAR 0 13
71158: PUSH
71159: LD_VAR 0 14
71163: PUSH
71164: LD_VAR 0 15
71168: PUSH
71169: LD_VAR 0 16
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: PUSH
71182: LD_VAR 0 4
71186: PUSH
71187: LD_INT 1
71189: PLUS
71190: ARRAY
71191: ST_TO_ADDR
71192: GO 71323
71194: LD_INT 2
71196: DOUBLE
71197: EQUAL
71198: IFTRUE 71202
71200: GO 71258
71202: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71203: LD_ADDR_VAR 0 9
71207: PUSH
71208: LD_VAR 0 17
71212: PUSH
71213: LD_VAR 0 18
71217: PUSH
71218: LD_VAR 0 19
71222: PUSH
71223: LD_VAR 0 20
71227: PUSH
71228: LD_VAR 0 21
71232: PUSH
71233: LD_VAR 0 22
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: PUSH
71246: LD_VAR 0 4
71250: PUSH
71251: LD_INT 1
71253: PLUS
71254: ARRAY
71255: ST_TO_ADDR
71256: GO 71323
71258: LD_INT 3
71260: DOUBLE
71261: EQUAL
71262: IFTRUE 71266
71264: GO 71322
71266: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71267: LD_ADDR_VAR 0 9
71271: PUSH
71272: LD_VAR 0 23
71276: PUSH
71277: LD_VAR 0 24
71281: PUSH
71282: LD_VAR 0 25
71286: PUSH
71287: LD_VAR 0 26
71291: PUSH
71292: LD_VAR 0 27
71296: PUSH
71297: LD_VAR 0 28
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: PUSH
71310: LD_VAR 0 4
71314: PUSH
71315: LD_INT 1
71317: PLUS
71318: ARRAY
71319: ST_TO_ADDR
71320: GO 71323
71322: POP
71323: GO 71878
71325: LD_INT 2
71327: DOUBLE
71328: EQUAL
71329: IFTRUE 71339
71331: LD_INT 3
71333: DOUBLE
71334: EQUAL
71335: IFTRUE 71339
71337: GO 71395
71339: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71340: LD_ADDR_VAR 0 9
71344: PUSH
71345: LD_VAR 0 29
71349: PUSH
71350: LD_VAR 0 30
71354: PUSH
71355: LD_VAR 0 31
71359: PUSH
71360: LD_VAR 0 32
71364: PUSH
71365: LD_VAR 0 33
71369: PUSH
71370: LD_VAR 0 34
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: PUSH
71383: LD_VAR 0 4
71387: PUSH
71388: LD_INT 1
71390: PLUS
71391: ARRAY
71392: ST_TO_ADDR
71393: GO 71878
71395: LD_INT 16
71397: DOUBLE
71398: EQUAL
71399: IFTRUE 71457
71401: LD_INT 17
71403: DOUBLE
71404: EQUAL
71405: IFTRUE 71457
71407: LD_INT 18
71409: DOUBLE
71410: EQUAL
71411: IFTRUE 71457
71413: LD_INT 19
71415: DOUBLE
71416: EQUAL
71417: IFTRUE 71457
71419: LD_INT 22
71421: DOUBLE
71422: EQUAL
71423: IFTRUE 71457
71425: LD_INT 20
71427: DOUBLE
71428: EQUAL
71429: IFTRUE 71457
71431: LD_INT 21
71433: DOUBLE
71434: EQUAL
71435: IFTRUE 71457
71437: LD_INT 23
71439: DOUBLE
71440: EQUAL
71441: IFTRUE 71457
71443: LD_INT 24
71445: DOUBLE
71446: EQUAL
71447: IFTRUE 71457
71449: LD_INT 25
71451: DOUBLE
71452: EQUAL
71453: IFTRUE 71457
71455: GO 71513
71457: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71458: LD_ADDR_VAR 0 9
71462: PUSH
71463: LD_VAR 0 35
71467: PUSH
71468: LD_VAR 0 36
71472: PUSH
71473: LD_VAR 0 37
71477: PUSH
71478: LD_VAR 0 38
71482: PUSH
71483: LD_VAR 0 39
71487: PUSH
71488: LD_VAR 0 40
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: PUSH
71501: LD_VAR 0 4
71505: PUSH
71506: LD_INT 1
71508: PLUS
71509: ARRAY
71510: ST_TO_ADDR
71511: GO 71878
71513: LD_INT 6
71515: DOUBLE
71516: EQUAL
71517: IFTRUE 71569
71519: LD_INT 7
71521: DOUBLE
71522: EQUAL
71523: IFTRUE 71569
71525: LD_INT 8
71527: DOUBLE
71528: EQUAL
71529: IFTRUE 71569
71531: LD_INT 13
71533: DOUBLE
71534: EQUAL
71535: IFTRUE 71569
71537: LD_INT 12
71539: DOUBLE
71540: EQUAL
71541: IFTRUE 71569
71543: LD_INT 15
71545: DOUBLE
71546: EQUAL
71547: IFTRUE 71569
71549: LD_INT 11
71551: DOUBLE
71552: EQUAL
71553: IFTRUE 71569
71555: LD_INT 14
71557: DOUBLE
71558: EQUAL
71559: IFTRUE 71569
71561: LD_INT 10
71563: DOUBLE
71564: EQUAL
71565: IFTRUE 71569
71567: GO 71625
71569: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71570: LD_ADDR_VAR 0 9
71574: PUSH
71575: LD_VAR 0 41
71579: PUSH
71580: LD_VAR 0 42
71584: PUSH
71585: LD_VAR 0 43
71589: PUSH
71590: LD_VAR 0 44
71594: PUSH
71595: LD_VAR 0 45
71599: PUSH
71600: LD_VAR 0 46
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: PUSH
71613: LD_VAR 0 4
71617: PUSH
71618: LD_INT 1
71620: PLUS
71621: ARRAY
71622: ST_TO_ADDR
71623: GO 71878
71625: LD_INT 36
71627: DOUBLE
71628: EQUAL
71629: IFTRUE 71633
71631: GO 71689
71633: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71634: LD_ADDR_VAR 0 9
71638: PUSH
71639: LD_VAR 0 47
71643: PUSH
71644: LD_VAR 0 48
71648: PUSH
71649: LD_VAR 0 49
71653: PUSH
71654: LD_VAR 0 50
71658: PUSH
71659: LD_VAR 0 51
71663: PUSH
71664: LD_VAR 0 52
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: PUSH
71677: LD_VAR 0 4
71681: PUSH
71682: LD_INT 1
71684: PLUS
71685: ARRAY
71686: ST_TO_ADDR
71687: GO 71878
71689: LD_INT 4
71691: DOUBLE
71692: EQUAL
71693: IFTRUE 71715
71695: LD_INT 5
71697: DOUBLE
71698: EQUAL
71699: IFTRUE 71715
71701: LD_INT 34
71703: DOUBLE
71704: EQUAL
71705: IFTRUE 71715
71707: LD_INT 37
71709: DOUBLE
71710: EQUAL
71711: IFTRUE 71715
71713: GO 71771
71715: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71716: LD_ADDR_VAR 0 9
71720: PUSH
71721: LD_VAR 0 53
71725: PUSH
71726: LD_VAR 0 54
71730: PUSH
71731: LD_VAR 0 55
71735: PUSH
71736: LD_VAR 0 56
71740: PUSH
71741: LD_VAR 0 57
71745: PUSH
71746: LD_VAR 0 58
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: PUSH
71759: LD_VAR 0 4
71763: PUSH
71764: LD_INT 1
71766: PLUS
71767: ARRAY
71768: ST_TO_ADDR
71769: GO 71878
71771: LD_INT 31
71773: DOUBLE
71774: EQUAL
71775: IFTRUE 71821
71777: LD_INT 32
71779: DOUBLE
71780: EQUAL
71781: IFTRUE 71821
71783: LD_INT 33
71785: DOUBLE
71786: EQUAL
71787: IFTRUE 71821
71789: LD_INT 27
71791: DOUBLE
71792: EQUAL
71793: IFTRUE 71821
71795: LD_INT 26
71797: DOUBLE
71798: EQUAL
71799: IFTRUE 71821
71801: LD_INT 28
71803: DOUBLE
71804: EQUAL
71805: IFTRUE 71821
71807: LD_INT 29
71809: DOUBLE
71810: EQUAL
71811: IFTRUE 71821
71813: LD_INT 30
71815: DOUBLE
71816: EQUAL
71817: IFTRUE 71821
71819: GO 71877
71821: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71822: LD_ADDR_VAR 0 9
71826: PUSH
71827: LD_VAR 0 59
71831: PUSH
71832: LD_VAR 0 60
71836: PUSH
71837: LD_VAR 0 61
71841: PUSH
71842: LD_VAR 0 62
71846: PUSH
71847: LD_VAR 0 63
71851: PUSH
71852: LD_VAR 0 64
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: PUSH
71865: LD_VAR 0 4
71869: PUSH
71870: LD_INT 1
71872: PLUS
71873: ARRAY
71874: ST_TO_ADDR
71875: GO 71878
71877: POP
// temp_list2 = [ ] ;
71878: LD_ADDR_VAR 0 10
71882: PUSH
71883: EMPTY
71884: ST_TO_ADDR
// for i in temp_list do
71885: LD_ADDR_VAR 0 8
71889: PUSH
71890: LD_VAR 0 9
71894: PUSH
71895: FOR_IN
71896: IFFALSE 71948
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71898: LD_ADDR_VAR 0 10
71902: PUSH
71903: LD_VAR 0 10
71907: PUSH
71908: LD_VAR 0 8
71912: PUSH
71913: LD_INT 1
71915: ARRAY
71916: PUSH
71917: LD_VAR 0 2
71921: PLUS
71922: PUSH
71923: LD_VAR 0 8
71927: PUSH
71928: LD_INT 2
71930: ARRAY
71931: PUSH
71932: LD_VAR 0 3
71936: PLUS
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: EMPTY
71943: LIST
71944: ADD
71945: ST_TO_ADDR
71946: GO 71895
71948: POP
71949: POP
// result = temp_list2 ;
71950: LD_ADDR_VAR 0 7
71954: PUSH
71955: LD_VAR 0 10
71959: ST_TO_ADDR
// end ;
71960: LD_VAR 0 7
71964: RET
// export function EnemyInRange ( unit , dist ) ; begin
71965: LD_INT 0
71967: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71968: LD_ADDR_VAR 0 3
71972: PUSH
71973: LD_VAR 0 1
71977: PPUSH
71978: CALL_OW 255
71982: PPUSH
71983: LD_VAR 0 1
71987: PPUSH
71988: CALL_OW 250
71992: PPUSH
71993: LD_VAR 0 1
71997: PPUSH
71998: CALL_OW 251
72002: PPUSH
72003: LD_VAR 0 2
72007: PPUSH
72008: CALL 45736 0 4
72012: PUSH
72013: LD_INT 4
72015: ARRAY
72016: ST_TO_ADDR
// end ;
72017: LD_VAR 0 3
72021: RET
// export function PlayerSeeMe ( unit ) ; begin
72022: LD_INT 0
72024: PPUSH
// result := See ( your_side , unit ) ;
72025: LD_ADDR_VAR 0 2
72029: PUSH
72030: LD_OWVAR 2
72034: PPUSH
72035: LD_VAR 0 1
72039: PPUSH
72040: CALL_OW 292
72044: ST_TO_ADDR
// end ;
72045: LD_VAR 0 2
72049: RET
// export function ReverseDir ( unit ) ; begin
72050: LD_INT 0
72052: PPUSH
// if not unit then
72053: LD_VAR 0 1
72057: NOT
72058: IFFALSE 72062
// exit ;
72060: GO 72085
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72062: LD_ADDR_VAR 0 2
72066: PUSH
72067: LD_VAR 0 1
72071: PPUSH
72072: CALL_OW 254
72076: PUSH
72077: LD_INT 3
72079: PLUS
72080: PUSH
72081: LD_INT 6
72083: MOD
72084: ST_TO_ADDR
// end ;
72085: LD_VAR 0 2
72089: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72090: LD_INT 0
72092: PPUSH
72093: PPUSH
72094: PPUSH
72095: PPUSH
72096: PPUSH
// if not hexes then
72097: LD_VAR 0 2
72101: NOT
72102: IFFALSE 72106
// exit ;
72104: GO 72254
// dist := 9999 ;
72106: LD_ADDR_VAR 0 5
72110: PUSH
72111: LD_INT 9999
72113: ST_TO_ADDR
// for i = 1 to hexes do
72114: LD_ADDR_VAR 0 4
72118: PUSH
72119: DOUBLE
72120: LD_INT 1
72122: DEC
72123: ST_TO_ADDR
72124: LD_VAR 0 2
72128: PUSH
72129: FOR_TO
72130: IFFALSE 72242
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72132: LD_VAR 0 1
72136: PPUSH
72137: LD_VAR 0 2
72141: PUSH
72142: LD_VAR 0 4
72146: ARRAY
72147: PUSH
72148: LD_INT 1
72150: ARRAY
72151: PPUSH
72152: LD_VAR 0 2
72156: PUSH
72157: LD_VAR 0 4
72161: ARRAY
72162: PUSH
72163: LD_INT 2
72165: ARRAY
72166: PPUSH
72167: CALL_OW 297
72171: PUSH
72172: LD_VAR 0 5
72176: LESS
72177: IFFALSE 72240
// begin hex := hexes [ i ] ;
72179: LD_ADDR_VAR 0 7
72183: PUSH
72184: LD_VAR 0 2
72188: PUSH
72189: LD_VAR 0 4
72193: ARRAY
72194: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72195: LD_ADDR_VAR 0 5
72199: PUSH
72200: LD_VAR 0 1
72204: PPUSH
72205: LD_VAR 0 2
72209: PUSH
72210: LD_VAR 0 4
72214: ARRAY
72215: PUSH
72216: LD_INT 1
72218: ARRAY
72219: PPUSH
72220: LD_VAR 0 2
72224: PUSH
72225: LD_VAR 0 4
72229: ARRAY
72230: PUSH
72231: LD_INT 2
72233: ARRAY
72234: PPUSH
72235: CALL_OW 297
72239: ST_TO_ADDR
// end ; end ;
72240: GO 72129
72242: POP
72243: POP
// result := hex ;
72244: LD_ADDR_VAR 0 3
72248: PUSH
72249: LD_VAR 0 7
72253: ST_TO_ADDR
// end ;
72254: LD_VAR 0 3
72258: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72259: LD_INT 0
72261: PPUSH
72262: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72263: LD_VAR 0 1
72267: NOT
72268: PUSH
72269: LD_VAR 0 1
72273: PUSH
72274: LD_INT 21
72276: PUSH
72277: LD_INT 2
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: LD_INT 23
72286: PUSH
72287: LD_INT 2
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PPUSH
72298: CALL_OW 69
72302: IN
72303: NOT
72304: OR
72305: IFFALSE 72309
// exit ;
72307: GO 72356
// for i = 1 to 3 do
72309: LD_ADDR_VAR 0 3
72313: PUSH
72314: DOUBLE
72315: LD_INT 1
72317: DEC
72318: ST_TO_ADDR
72319: LD_INT 3
72321: PUSH
72322: FOR_TO
72323: IFFALSE 72354
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72325: LD_VAR 0 1
72329: PPUSH
72330: CALL_OW 250
72334: PPUSH
72335: LD_VAR 0 1
72339: PPUSH
72340: CALL_OW 251
72344: PPUSH
72345: LD_INT 1
72347: PPUSH
72348: CALL_OW 453
72352: GO 72322
72354: POP
72355: POP
// end ;
72356: LD_VAR 0 2
72360: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72361: LD_INT 0
72363: PPUSH
72364: PPUSH
72365: PPUSH
72366: PPUSH
72367: PPUSH
72368: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72369: LD_VAR 0 1
72373: NOT
72374: PUSH
72375: LD_VAR 0 2
72379: NOT
72380: OR
72381: PUSH
72382: LD_VAR 0 1
72386: PPUSH
72387: CALL_OW 314
72391: OR
72392: IFFALSE 72396
// exit ;
72394: GO 72837
// x := GetX ( enemy_unit ) ;
72396: LD_ADDR_VAR 0 7
72400: PUSH
72401: LD_VAR 0 2
72405: PPUSH
72406: CALL_OW 250
72410: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72411: LD_ADDR_VAR 0 8
72415: PUSH
72416: LD_VAR 0 2
72420: PPUSH
72421: CALL_OW 251
72425: ST_TO_ADDR
// if not x or not y then
72426: LD_VAR 0 7
72430: NOT
72431: PUSH
72432: LD_VAR 0 8
72436: NOT
72437: OR
72438: IFFALSE 72442
// exit ;
72440: GO 72837
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72442: LD_ADDR_VAR 0 6
72446: PUSH
72447: LD_VAR 0 7
72451: PPUSH
72452: LD_INT 0
72454: PPUSH
72455: LD_INT 4
72457: PPUSH
72458: CALL_OW 272
72462: PUSH
72463: LD_VAR 0 8
72467: PPUSH
72468: LD_INT 0
72470: PPUSH
72471: LD_INT 4
72473: PPUSH
72474: CALL_OW 273
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_VAR 0 7
72487: PPUSH
72488: LD_INT 1
72490: PPUSH
72491: LD_INT 4
72493: PPUSH
72494: CALL_OW 272
72498: PUSH
72499: LD_VAR 0 8
72503: PPUSH
72504: LD_INT 1
72506: PPUSH
72507: LD_INT 4
72509: PPUSH
72510: CALL_OW 273
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_VAR 0 7
72523: PPUSH
72524: LD_INT 2
72526: PPUSH
72527: LD_INT 4
72529: PPUSH
72530: CALL_OW 272
72534: PUSH
72535: LD_VAR 0 8
72539: PPUSH
72540: LD_INT 2
72542: PPUSH
72543: LD_INT 4
72545: PPUSH
72546: CALL_OW 273
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_VAR 0 7
72559: PPUSH
72560: LD_INT 3
72562: PPUSH
72563: LD_INT 4
72565: PPUSH
72566: CALL_OW 272
72570: PUSH
72571: LD_VAR 0 8
72575: PPUSH
72576: LD_INT 3
72578: PPUSH
72579: LD_INT 4
72581: PPUSH
72582: CALL_OW 273
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_VAR 0 7
72595: PPUSH
72596: LD_INT 4
72598: PPUSH
72599: LD_INT 4
72601: PPUSH
72602: CALL_OW 272
72606: PUSH
72607: LD_VAR 0 8
72611: PPUSH
72612: LD_INT 4
72614: PPUSH
72615: LD_INT 4
72617: PPUSH
72618: CALL_OW 273
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_VAR 0 7
72631: PPUSH
72632: LD_INT 5
72634: PPUSH
72635: LD_INT 4
72637: PPUSH
72638: CALL_OW 272
72642: PUSH
72643: LD_VAR 0 8
72647: PPUSH
72648: LD_INT 5
72650: PPUSH
72651: LD_INT 4
72653: PPUSH
72654: CALL_OW 273
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: ST_TO_ADDR
// for i = tmp downto 1 do
72671: LD_ADDR_VAR 0 4
72675: PUSH
72676: DOUBLE
72677: LD_VAR 0 6
72681: INC
72682: ST_TO_ADDR
72683: LD_INT 1
72685: PUSH
72686: FOR_DOWNTO
72687: IFFALSE 72788
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72689: LD_VAR 0 6
72693: PUSH
72694: LD_VAR 0 4
72698: ARRAY
72699: PUSH
72700: LD_INT 1
72702: ARRAY
72703: PPUSH
72704: LD_VAR 0 6
72708: PUSH
72709: LD_VAR 0 4
72713: ARRAY
72714: PUSH
72715: LD_INT 2
72717: ARRAY
72718: PPUSH
72719: CALL_OW 488
72723: NOT
72724: PUSH
72725: LD_VAR 0 6
72729: PUSH
72730: LD_VAR 0 4
72734: ARRAY
72735: PUSH
72736: LD_INT 1
72738: ARRAY
72739: PPUSH
72740: LD_VAR 0 6
72744: PUSH
72745: LD_VAR 0 4
72749: ARRAY
72750: PUSH
72751: LD_INT 2
72753: ARRAY
72754: PPUSH
72755: CALL_OW 428
72759: PUSH
72760: LD_INT 0
72762: NONEQUAL
72763: OR
72764: IFFALSE 72786
// tmp := Delete ( tmp , i ) ;
72766: LD_ADDR_VAR 0 6
72770: PUSH
72771: LD_VAR 0 6
72775: PPUSH
72776: LD_VAR 0 4
72780: PPUSH
72781: CALL_OW 3
72785: ST_TO_ADDR
72786: GO 72686
72788: POP
72789: POP
// j := GetClosestHex ( unit , tmp ) ;
72790: LD_ADDR_VAR 0 5
72794: PUSH
72795: LD_VAR 0 1
72799: PPUSH
72800: LD_VAR 0 6
72804: PPUSH
72805: CALL 72090 0 2
72809: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72810: LD_VAR 0 1
72814: PPUSH
72815: LD_VAR 0 5
72819: PUSH
72820: LD_INT 1
72822: ARRAY
72823: PPUSH
72824: LD_VAR 0 5
72828: PUSH
72829: LD_INT 2
72831: ARRAY
72832: PPUSH
72833: CALL_OW 111
// end ;
72837: LD_VAR 0 3
72841: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72842: LD_INT 0
72844: PPUSH
72845: PPUSH
72846: PPUSH
// uc_side = 0 ;
72847: LD_ADDR_OWVAR 20
72851: PUSH
72852: LD_INT 0
72854: ST_TO_ADDR
// uc_nation = 0 ;
72855: LD_ADDR_OWVAR 21
72859: PUSH
72860: LD_INT 0
72862: ST_TO_ADDR
// InitHc_All ( ) ;
72863: CALL_OW 584
// InitVc ;
72867: CALL_OW 20
// if mastodonts then
72871: LD_VAR 0 6
72875: IFFALSE 72942
// for i = 1 to mastodonts do
72877: LD_ADDR_VAR 0 11
72881: PUSH
72882: DOUBLE
72883: LD_INT 1
72885: DEC
72886: ST_TO_ADDR
72887: LD_VAR 0 6
72891: PUSH
72892: FOR_TO
72893: IFFALSE 72940
// begin vc_chassis := 31 ;
72895: LD_ADDR_OWVAR 37
72899: PUSH
72900: LD_INT 31
72902: ST_TO_ADDR
// vc_control := control_rider ;
72903: LD_ADDR_OWVAR 38
72907: PUSH
72908: LD_INT 4
72910: ST_TO_ADDR
// animal := CreateVehicle ;
72911: LD_ADDR_VAR 0 12
72915: PUSH
72916: CALL_OW 45
72920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72921: LD_VAR 0 12
72925: PPUSH
72926: LD_VAR 0 8
72930: PPUSH
72931: LD_INT 0
72933: PPUSH
72934: CALL 75130 0 3
// end ;
72938: GO 72892
72940: POP
72941: POP
// if horses then
72942: LD_VAR 0 5
72946: IFFALSE 73013
// for i = 1 to horses do
72948: LD_ADDR_VAR 0 11
72952: PUSH
72953: DOUBLE
72954: LD_INT 1
72956: DEC
72957: ST_TO_ADDR
72958: LD_VAR 0 5
72962: PUSH
72963: FOR_TO
72964: IFFALSE 73011
// begin hc_class := 21 ;
72966: LD_ADDR_OWVAR 28
72970: PUSH
72971: LD_INT 21
72973: ST_TO_ADDR
// hc_gallery :=  ;
72974: LD_ADDR_OWVAR 33
72978: PUSH
72979: LD_STRING 
72981: ST_TO_ADDR
// animal := CreateHuman ;
72982: LD_ADDR_VAR 0 12
72986: PUSH
72987: CALL_OW 44
72991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72992: LD_VAR 0 12
72996: PPUSH
72997: LD_VAR 0 8
73001: PPUSH
73002: LD_INT 0
73004: PPUSH
73005: CALL 75130 0 3
// end ;
73009: GO 72963
73011: POP
73012: POP
// if birds then
73013: LD_VAR 0 1
73017: IFFALSE 73084
// for i = 1 to birds do
73019: LD_ADDR_VAR 0 11
73023: PUSH
73024: DOUBLE
73025: LD_INT 1
73027: DEC
73028: ST_TO_ADDR
73029: LD_VAR 0 1
73033: PUSH
73034: FOR_TO
73035: IFFALSE 73082
// begin hc_class = 18 ;
73037: LD_ADDR_OWVAR 28
73041: PUSH
73042: LD_INT 18
73044: ST_TO_ADDR
// hc_gallery =  ;
73045: LD_ADDR_OWVAR 33
73049: PUSH
73050: LD_STRING 
73052: ST_TO_ADDR
// animal := CreateHuman ;
73053: LD_ADDR_VAR 0 12
73057: PUSH
73058: CALL_OW 44
73062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73063: LD_VAR 0 12
73067: PPUSH
73068: LD_VAR 0 8
73072: PPUSH
73073: LD_INT 0
73075: PPUSH
73076: CALL 75130 0 3
// end ;
73080: GO 73034
73082: POP
73083: POP
// if tigers then
73084: LD_VAR 0 2
73088: IFFALSE 73172
// for i = 1 to tigers do
73090: LD_ADDR_VAR 0 11
73094: PUSH
73095: DOUBLE
73096: LD_INT 1
73098: DEC
73099: ST_TO_ADDR
73100: LD_VAR 0 2
73104: PUSH
73105: FOR_TO
73106: IFFALSE 73170
// begin hc_class = class_tiger ;
73108: LD_ADDR_OWVAR 28
73112: PUSH
73113: LD_INT 14
73115: ST_TO_ADDR
// hc_gallery =  ;
73116: LD_ADDR_OWVAR 33
73120: PUSH
73121: LD_STRING 
73123: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73124: LD_ADDR_OWVAR 35
73128: PUSH
73129: LD_INT 7
73131: NEG
73132: PPUSH
73133: LD_INT 7
73135: PPUSH
73136: CALL_OW 12
73140: ST_TO_ADDR
// animal := CreateHuman ;
73141: LD_ADDR_VAR 0 12
73145: PUSH
73146: CALL_OW 44
73150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73151: LD_VAR 0 12
73155: PPUSH
73156: LD_VAR 0 8
73160: PPUSH
73161: LD_INT 0
73163: PPUSH
73164: CALL 75130 0 3
// end ;
73168: GO 73105
73170: POP
73171: POP
// if apemans then
73172: LD_VAR 0 3
73176: IFFALSE 73299
// for i = 1 to apemans do
73178: LD_ADDR_VAR 0 11
73182: PUSH
73183: DOUBLE
73184: LD_INT 1
73186: DEC
73187: ST_TO_ADDR
73188: LD_VAR 0 3
73192: PUSH
73193: FOR_TO
73194: IFFALSE 73297
// begin hc_class = class_apeman ;
73196: LD_ADDR_OWVAR 28
73200: PUSH
73201: LD_INT 12
73203: ST_TO_ADDR
// hc_gallery =  ;
73204: LD_ADDR_OWVAR 33
73208: PUSH
73209: LD_STRING 
73211: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
73212: LD_ADDR_OWVAR 35
73216: PUSH
73217: LD_INT 5
73219: NEG
73220: PPUSH
73221: LD_INT 5
73223: PPUSH
73224: CALL_OW 12
73228: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73229: LD_ADDR_OWVAR 31
73233: PUSH
73234: LD_INT 1
73236: PPUSH
73237: LD_INT 3
73239: PPUSH
73240: CALL_OW 12
73244: PUSH
73245: LD_INT 1
73247: PPUSH
73248: LD_INT 3
73250: PPUSH
73251: CALL_OW 12
73255: PUSH
73256: LD_INT 0
73258: PUSH
73259: LD_INT 0
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: ST_TO_ADDR
// animal := CreateHuman ;
73268: LD_ADDR_VAR 0 12
73272: PUSH
73273: CALL_OW 44
73277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73278: LD_VAR 0 12
73282: PPUSH
73283: LD_VAR 0 8
73287: PPUSH
73288: LD_INT 0
73290: PPUSH
73291: CALL 75130 0 3
// end ;
73295: GO 73193
73297: POP
73298: POP
// if enchidnas then
73299: LD_VAR 0 4
73303: IFFALSE 73370
// for i = 1 to enchidnas do
73305: LD_ADDR_VAR 0 11
73309: PUSH
73310: DOUBLE
73311: LD_INT 1
73313: DEC
73314: ST_TO_ADDR
73315: LD_VAR 0 4
73319: PUSH
73320: FOR_TO
73321: IFFALSE 73368
// begin hc_class = 13 ;
73323: LD_ADDR_OWVAR 28
73327: PUSH
73328: LD_INT 13
73330: ST_TO_ADDR
// hc_gallery =  ;
73331: LD_ADDR_OWVAR 33
73335: PUSH
73336: LD_STRING 
73338: ST_TO_ADDR
// animal := CreateHuman ;
73339: LD_ADDR_VAR 0 12
73343: PUSH
73344: CALL_OW 44
73348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73349: LD_VAR 0 12
73353: PPUSH
73354: LD_VAR 0 8
73358: PPUSH
73359: LD_INT 0
73361: PPUSH
73362: CALL 75130 0 3
// end ;
73366: GO 73320
73368: POP
73369: POP
// if fishes then
73370: LD_VAR 0 7
73374: IFFALSE 73441
// for i = 1 to fishes do
73376: LD_ADDR_VAR 0 11
73380: PUSH
73381: DOUBLE
73382: LD_INT 1
73384: DEC
73385: ST_TO_ADDR
73386: LD_VAR 0 7
73390: PUSH
73391: FOR_TO
73392: IFFALSE 73439
// begin hc_class = 20 ;
73394: LD_ADDR_OWVAR 28
73398: PUSH
73399: LD_INT 20
73401: ST_TO_ADDR
// hc_gallery =  ;
73402: LD_ADDR_OWVAR 33
73406: PUSH
73407: LD_STRING 
73409: ST_TO_ADDR
// animal := CreateHuman ;
73410: LD_ADDR_VAR 0 12
73414: PUSH
73415: CALL_OW 44
73419: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73420: LD_VAR 0 12
73424: PPUSH
73425: LD_VAR 0 9
73429: PPUSH
73430: LD_INT 0
73432: PPUSH
73433: CALL 75130 0 3
// end ;
73437: GO 73391
73439: POP
73440: POP
// end ;
73441: LD_VAR 0 10
73445: RET
// export function WantHeal ( sci , unit ) ; begin
73446: LD_INT 0
73448: PPUSH
// if GetTaskList ( sci ) > 0 then
73449: LD_VAR 0 1
73453: PPUSH
73454: CALL_OW 437
73458: PUSH
73459: LD_INT 0
73461: GREATER
73462: IFFALSE 73532
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73464: LD_VAR 0 1
73468: PPUSH
73469: CALL_OW 437
73473: PUSH
73474: LD_INT 1
73476: ARRAY
73477: PUSH
73478: LD_INT 1
73480: ARRAY
73481: PUSH
73482: LD_STRING l
73484: EQUAL
73485: PUSH
73486: LD_VAR 0 1
73490: PPUSH
73491: CALL_OW 437
73495: PUSH
73496: LD_INT 1
73498: ARRAY
73499: PUSH
73500: LD_INT 4
73502: ARRAY
73503: PUSH
73504: LD_VAR 0 2
73508: EQUAL
73509: AND
73510: IFFALSE 73522
// result := true else
73512: LD_ADDR_VAR 0 3
73516: PUSH
73517: LD_INT 1
73519: ST_TO_ADDR
73520: GO 73530
// result := false ;
73522: LD_ADDR_VAR 0 3
73526: PUSH
73527: LD_INT 0
73529: ST_TO_ADDR
// end else
73530: GO 73540
// result := false ;
73532: LD_ADDR_VAR 0 3
73536: PUSH
73537: LD_INT 0
73539: ST_TO_ADDR
// end ;
73540: LD_VAR 0 3
73544: RET
// export function HealTarget ( sci ) ; begin
73545: LD_INT 0
73547: PPUSH
// if not sci then
73548: LD_VAR 0 1
73552: NOT
73553: IFFALSE 73557
// exit ;
73555: GO 73622
// result := 0 ;
73557: LD_ADDR_VAR 0 2
73561: PUSH
73562: LD_INT 0
73564: ST_TO_ADDR
// if GetTaskList ( sci ) then
73565: LD_VAR 0 1
73569: PPUSH
73570: CALL_OW 437
73574: IFFALSE 73622
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73576: LD_VAR 0 1
73580: PPUSH
73581: CALL_OW 437
73585: PUSH
73586: LD_INT 1
73588: ARRAY
73589: PUSH
73590: LD_INT 1
73592: ARRAY
73593: PUSH
73594: LD_STRING l
73596: EQUAL
73597: IFFALSE 73622
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73599: LD_ADDR_VAR 0 2
73603: PUSH
73604: LD_VAR 0 1
73608: PPUSH
73609: CALL_OW 437
73613: PUSH
73614: LD_INT 1
73616: ARRAY
73617: PUSH
73618: LD_INT 4
73620: ARRAY
73621: ST_TO_ADDR
// end ;
73622: LD_VAR 0 2
73626: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73627: LD_INT 0
73629: PPUSH
73630: PPUSH
73631: PPUSH
73632: PPUSH
// if not base_units then
73633: LD_VAR 0 1
73637: NOT
73638: IFFALSE 73642
// exit ;
73640: GO 73729
// result := false ;
73642: LD_ADDR_VAR 0 2
73646: PUSH
73647: LD_INT 0
73649: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73650: LD_ADDR_VAR 0 5
73654: PUSH
73655: LD_VAR 0 1
73659: PPUSH
73660: LD_INT 21
73662: PUSH
73663: LD_INT 3
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PPUSH
73670: CALL_OW 72
73674: ST_TO_ADDR
// if not tmp then
73675: LD_VAR 0 5
73679: NOT
73680: IFFALSE 73684
// exit ;
73682: GO 73729
// for i in tmp do
73684: LD_ADDR_VAR 0 3
73688: PUSH
73689: LD_VAR 0 5
73693: PUSH
73694: FOR_IN
73695: IFFALSE 73727
// begin result := EnemyInRange ( i , 22 ) ;
73697: LD_ADDR_VAR 0 2
73701: PUSH
73702: LD_VAR 0 3
73706: PPUSH
73707: LD_INT 22
73709: PPUSH
73710: CALL 71965 0 2
73714: ST_TO_ADDR
// if result then
73715: LD_VAR 0 2
73719: IFFALSE 73725
// exit ;
73721: POP
73722: POP
73723: GO 73729
// end ;
73725: GO 73694
73727: POP
73728: POP
// end ;
73729: LD_VAR 0 2
73733: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73734: LD_INT 0
73736: PPUSH
73737: PPUSH
// if not units then
73738: LD_VAR 0 1
73742: NOT
73743: IFFALSE 73747
// exit ;
73745: GO 73817
// result := [ ] ;
73747: LD_ADDR_VAR 0 3
73751: PUSH
73752: EMPTY
73753: ST_TO_ADDR
// for i in units do
73754: LD_ADDR_VAR 0 4
73758: PUSH
73759: LD_VAR 0 1
73763: PUSH
73764: FOR_IN
73765: IFFALSE 73815
// if GetTag ( i ) = tag then
73767: LD_VAR 0 4
73771: PPUSH
73772: CALL_OW 110
73776: PUSH
73777: LD_VAR 0 2
73781: EQUAL
73782: IFFALSE 73813
// result := Insert ( result , result + 1 , i ) ;
73784: LD_ADDR_VAR 0 3
73788: PUSH
73789: LD_VAR 0 3
73793: PPUSH
73794: LD_VAR 0 3
73798: PUSH
73799: LD_INT 1
73801: PLUS
73802: PPUSH
73803: LD_VAR 0 4
73807: PPUSH
73808: CALL_OW 2
73812: ST_TO_ADDR
73813: GO 73764
73815: POP
73816: POP
// end ;
73817: LD_VAR 0 3
73821: RET
// export function IsDriver ( un ) ; begin
73822: LD_INT 0
73824: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73825: LD_ADDR_VAR 0 2
73829: PUSH
73830: LD_VAR 0 1
73834: PUSH
73835: LD_INT 55
73837: PUSH
73838: EMPTY
73839: LIST
73840: PPUSH
73841: CALL_OW 69
73845: IN
73846: ST_TO_ADDR
// end ;
73847: LD_VAR 0 2
73851: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73852: LD_INT 0
73854: PPUSH
73855: PPUSH
// list := [ ] ;
73856: LD_ADDR_VAR 0 5
73860: PUSH
73861: EMPTY
73862: ST_TO_ADDR
// case d of 0 :
73863: LD_VAR 0 3
73867: PUSH
73868: LD_INT 0
73870: DOUBLE
73871: EQUAL
73872: IFTRUE 73876
73874: GO 74009
73876: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73877: LD_ADDR_VAR 0 5
73881: PUSH
73882: LD_VAR 0 1
73886: PUSH
73887: LD_INT 4
73889: MINUS
73890: PUSH
73891: LD_VAR 0 2
73895: PUSH
73896: LD_INT 4
73898: MINUS
73899: PUSH
73900: LD_INT 2
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: LIST
73907: PUSH
73908: LD_VAR 0 1
73912: PUSH
73913: LD_INT 3
73915: MINUS
73916: PUSH
73917: LD_VAR 0 2
73921: PUSH
73922: LD_INT 1
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: LIST
73929: PUSH
73930: LD_VAR 0 1
73934: PUSH
73935: LD_INT 4
73937: PLUS
73938: PUSH
73939: LD_VAR 0 2
73943: PUSH
73944: LD_INT 4
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: LIST
73951: PUSH
73952: LD_VAR 0 1
73956: PUSH
73957: LD_INT 3
73959: PLUS
73960: PUSH
73961: LD_VAR 0 2
73965: PUSH
73966: LD_INT 3
73968: PLUS
73969: PUSH
73970: LD_INT 5
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: LIST
73977: PUSH
73978: LD_VAR 0 1
73982: PUSH
73983: LD_VAR 0 2
73987: PUSH
73988: LD_INT 4
73990: PLUS
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: LIST
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: ST_TO_ADDR
// end ; 1 :
74007: GO 74707
74009: LD_INT 1
74011: DOUBLE
74012: EQUAL
74013: IFTRUE 74017
74015: GO 74150
74017: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74018: LD_ADDR_VAR 0 5
74022: PUSH
74023: LD_VAR 0 1
74027: PUSH
74028: LD_VAR 0 2
74032: PUSH
74033: LD_INT 4
74035: MINUS
74036: PUSH
74037: LD_INT 3
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: PUSH
74045: LD_VAR 0 1
74049: PUSH
74050: LD_INT 3
74052: MINUS
74053: PUSH
74054: LD_VAR 0 2
74058: PUSH
74059: LD_INT 3
74061: MINUS
74062: PUSH
74063: LD_INT 2
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: LIST
74070: PUSH
74071: LD_VAR 0 1
74075: PUSH
74076: LD_INT 4
74078: MINUS
74079: PUSH
74080: LD_VAR 0 2
74084: PUSH
74085: LD_INT 1
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: LIST
74092: PUSH
74093: LD_VAR 0 1
74097: PUSH
74098: LD_VAR 0 2
74102: PUSH
74103: LD_INT 3
74105: PLUS
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: PUSH
74115: LD_VAR 0 1
74119: PUSH
74120: LD_INT 4
74122: PLUS
74123: PUSH
74124: LD_VAR 0 2
74128: PUSH
74129: LD_INT 4
74131: PLUS
74132: PUSH
74133: LD_INT 5
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: LIST
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: ST_TO_ADDR
// end ; 2 :
74148: GO 74707
74150: LD_INT 2
74152: DOUBLE
74153: EQUAL
74154: IFTRUE 74158
74156: GO 74287
74158: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74159: LD_ADDR_VAR 0 5
74163: PUSH
74164: LD_VAR 0 1
74168: PUSH
74169: LD_VAR 0 2
74173: PUSH
74174: LD_INT 3
74176: MINUS
74177: PUSH
74178: LD_INT 3
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: LIST
74185: PUSH
74186: LD_VAR 0 1
74190: PUSH
74191: LD_INT 4
74193: PLUS
74194: PUSH
74195: LD_VAR 0 2
74199: PUSH
74200: LD_INT 4
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: LIST
74207: PUSH
74208: LD_VAR 0 1
74212: PUSH
74213: LD_VAR 0 2
74217: PUSH
74218: LD_INT 4
74220: PLUS
74221: PUSH
74222: LD_INT 0
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: PUSH
74230: LD_VAR 0 1
74234: PUSH
74235: LD_INT 3
74237: MINUS
74238: PUSH
74239: LD_VAR 0 2
74243: PUSH
74244: LD_INT 1
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: LIST
74251: PUSH
74252: LD_VAR 0 1
74256: PUSH
74257: LD_INT 4
74259: MINUS
74260: PUSH
74261: LD_VAR 0 2
74265: PUSH
74266: LD_INT 4
74268: MINUS
74269: PUSH
74270: LD_INT 2
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: LIST
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: ST_TO_ADDR
// end ; 3 :
74285: GO 74707
74287: LD_INT 3
74289: DOUBLE
74290: EQUAL
74291: IFTRUE 74295
74293: GO 74428
74295: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74296: LD_ADDR_VAR 0 5
74300: PUSH
74301: LD_VAR 0 1
74305: PUSH
74306: LD_INT 3
74308: PLUS
74309: PUSH
74310: LD_VAR 0 2
74314: PUSH
74315: LD_INT 4
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: LIST
74322: PUSH
74323: LD_VAR 0 1
74327: PUSH
74328: LD_INT 4
74330: PLUS
74331: PUSH
74332: LD_VAR 0 2
74336: PUSH
74337: LD_INT 4
74339: PLUS
74340: PUSH
74341: LD_INT 5
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: LIST
74348: PUSH
74349: LD_VAR 0 1
74353: PUSH
74354: LD_INT 4
74356: MINUS
74357: PUSH
74358: LD_VAR 0 2
74362: PUSH
74363: LD_INT 1
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: LIST
74370: PUSH
74371: LD_VAR 0 1
74375: PUSH
74376: LD_VAR 0 2
74380: PUSH
74381: LD_INT 4
74383: MINUS
74384: PUSH
74385: LD_INT 3
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: PUSH
74393: LD_VAR 0 1
74397: PUSH
74398: LD_INT 3
74400: MINUS
74401: PUSH
74402: LD_VAR 0 2
74406: PUSH
74407: LD_INT 3
74409: MINUS
74410: PUSH
74411: LD_INT 2
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: LIST
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: ST_TO_ADDR
// end ; 4 :
74426: GO 74707
74428: LD_INT 4
74430: DOUBLE
74431: EQUAL
74432: IFTRUE 74436
74434: GO 74569
74436: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74437: LD_ADDR_VAR 0 5
74441: PUSH
74442: LD_VAR 0 1
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_INT 4
74454: PLUS
74455: PUSH
74456: LD_INT 0
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: LIST
74463: PUSH
74464: LD_VAR 0 1
74468: PUSH
74469: LD_INT 3
74471: PLUS
74472: PUSH
74473: LD_VAR 0 2
74477: PUSH
74478: LD_INT 3
74480: PLUS
74481: PUSH
74482: LD_INT 5
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: LIST
74489: PUSH
74490: LD_VAR 0 1
74494: PUSH
74495: LD_INT 4
74497: PLUS
74498: PUSH
74499: LD_VAR 0 2
74503: PUSH
74504: LD_INT 4
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: LIST
74511: PUSH
74512: LD_VAR 0 1
74516: PUSH
74517: LD_VAR 0 2
74521: PUSH
74522: LD_INT 3
74524: MINUS
74525: PUSH
74526: LD_INT 3
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: LIST
74533: PUSH
74534: LD_VAR 0 1
74538: PUSH
74539: LD_INT 4
74541: MINUS
74542: PUSH
74543: LD_VAR 0 2
74547: PUSH
74548: LD_INT 4
74550: MINUS
74551: PUSH
74552: LD_INT 2
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: LIST
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: ST_TO_ADDR
// end ; 5 :
74567: GO 74707
74569: LD_INT 5
74571: DOUBLE
74572: EQUAL
74573: IFTRUE 74577
74575: GO 74706
74577: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74578: LD_ADDR_VAR 0 5
74582: PUSH
74583: LD_VAR 0 1
74587: PUSH
74588: LD_INT 4
74590: MINUS
74591: PUSH
74592: LD_VAR 0 2
74596: PUSH
74597: LD_INT 1
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: PUSH
74605: LD_VAR 0 1
74609: PUSH
74610: LD_VAR 0 2
74614: PUSH
74615: LD_INT 4
74617: MINUS
74618: PUSH
74619: LD_INT 3
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: LIST
74626: PUSH
74627: LD_VAR 0 1
74631: PUSH
74632: LD_INT 4
74634: PLUS
74635: PUSH
74636: LD_VAR 0 2
74640: PUSH
74641: LD_INT 4
74643: PLUS
74644: PUSH
74645: LD_INT 5
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: LIST
74652: PUSH
74653: LD_VAR 0 1
74657: PUSH
74658: LD_INT 3
74660: PLUS
74661: PUSH
74662: LD_VAR 0 2
74666: PUSH
74667: LD_INT 4
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: LIST
74674: PUSH
74675: LD_VAR 0 1
74679: PUSH
74680: LD_VAR 0 2
74684: PUSH
74685: LD_INT 3
74687: PLUS
74688: PUSH
74689: LD_INT 0
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: LIST
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: ST_TO_ADDR
// end ; end ;
74704: GO 74707
74706: POP
// result := list ;
74707: LD_ADDR_VAR 0 4
74711: PUSH
74712: LD_VAR 0 5
74716: ST_TO_ADDR
// end ;
74717: LD_VAR 0 4
74721: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74722: LD_INT 0
74724: PPUSH
74725: PPUSH
74726: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74727: LD_VAR 0 1
74731: NOT
74732: PUSH
74733: LD_VAR 0 2
74737: PUSH
74738: LD_INT 1
74740: PUSH
74741: LD_INT 2
74743: PUSH
74744: LD_INT 3
74746: PUSH
74747: LD_INT 4
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: IN
74756: NOT
74757: OR
74758: IFFALSE 74762
// exit ;
74760: GO 74854
// tmp := [ ] ;
74762: LD_ADDR_VAR 0 5
74766: PUSH
74767: EMPTY
74768: ST_TO_ADDR
// for i in units do
74769: LD_ADDR_VAR 0 4
74773: PUSH
74774: LD_VAR 0 1
74778: PUSH
74779: FOR_IN
74780: IFFALSE 74823
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74782: LD_ADDR_VAR 0 5
74786: PUSH
74787: LD_VAR 0 5
74791: PPUSH
74792: LD_VAR 0 5
74796: PUSH
74797: LD_INT 1
74799: PLUS
74800: PPUSH
74801: LD_VAR 0 4
74805: PPUSH
74806: LD_VAR 0 2
74810: PPUSH
74811: CALL_OW 259
74815: PPUSH
74816: CALL_OW 2
74820: ST_TO_ADDR
74821: GO 74779
74823: POP
74824: POP
// if not tmp then
74825: LD_VAR 0 5
74829: NOT
74830: IFFALSE 74834
// exit ;
74832: GO 74854
// result := SortListByListDesc ( units , tmp ) ;
74834: LD_ADDR_VAR 0 3
74838: PUSH
74839: LD_VAR 0 1
74843: PPUSH
74844: LD_VAR 0 5
74848: PPUSH
74849: CALL_OW 77
74853: ST_TO_ADDR
// end ;
74854: LD_VAR 0 3
74858: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74859: LD_INT 0
74861: PPUSH
74862: PPUSH
74863: PPUSH
// result := false ;
74864: LD_ADDR_VAR 0 3
74868: PUSH
74869: LD_INT 0
74871: ST_TO_ADDR
// x := GetX ( building ) ;
74872: LD_ADDR_VAR 0 4
74876: PUSH
74877: LD_VAR 0 2
74881: PPUSH
74882: CALL_OW 250
74886: ST_TO_ADDR
// y := GetY ( building ) ;
74887: LD_ADDR_VAR 0 5
74891: PUSH
74892: LD_VAR 0 2
74896: PPUSH
74897: CALL_OW 251
74901: ST_TO_ADDR
// if not building or not x or not y then
74902: LD_VAR 0 2
74906: NOT
74907: PUSH
74908: LD_VAR 0 4
74912: NOT
74913: OR
74914: PUSH
74915: LD_VAR 0 5
74919: NOT
74920: OR
74921: IFFALSE 74925
// exit ;
74923: GO 75017
// if GetTaskList ( unit ) then
74925: LD_VAR 0 1
74929: PPUSH
74930: CALL_OW 437
74934: IFFALSE 75017
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74936: LD_STRING e
74938: PUSH
74939: LD_VAR 0 1
74943: PPUSH
74944: CALL_OW 437
74948: PUSH
74949: LD_INT 1
74951: ARRAY
74952: PUSH
74953: LD_INT 1
74955: ARRAY
74956: EQUAL
74957: PUSH
74958: LD_VAR 0 4
74962: PUSH
74963: LD_VAR 0 1
74967: PPUSH
74968: CALL_OW 437
74972: PUSH
74973: LD_INT 1
74975: ARRAY
74976: PUSH
74977: LD_INT 2
74979: ARRAY
74980: EQUAL
74981: AND
74982: PUSH
74983: LD_VAR 0 5
74987: PUSH
74988: LD_VAR 0 1
74992: PPUSH
74993: CALL_OW 437
74997: PUSH
74998: LD_INT 1
75000: ARRAY
75001: PUSH
75002: LD_INT 3
75004: ARRAY
75005: EQUAL
75006: AND
75007: IFFALSE 75017
// result := true end ;
75009: LD_ADDR_VAR 0 3
75013: PUSH
75014: LD_INT 1
75016: ST_TO_ADDR
// end ;
75017: LD_VAR 0 3
75021: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75022: LD_INT 0
75024: PPUSH
// result := false ;
75025: LD_ADDR_VAR 0 4
75029: PUSH
75030: LD_INT 0
75032: ST_TO_ADDR
// if GetTaskList ( unit ) then
75033: LD_VAR 0 1
75037: PPUSH
75038: CALL_OW 437
75042: IFFALSE 75125
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75044: LD_STRING M
75046: PUSH
75047: LD_VAR 0 1
75051: PPUSH
75052: CALL_OW 437
75056: PUSH
75057: LD_INT 1
75059: ARRAY
75060: PUSH
75061: LD_INT 1
75063: ARRAY
75064: EQUAL
75065: PUSH
75066: LD_VAR 0 2
75070: PUSH
75071: LD_VAR 0 1
75075: PPUSH
75076: CALL_OW 437
75080: PUSH
75081: LD_INT 1
75083: ARRAY
75084: PUSH
75085: LD_INT 2
75087: ARRAY
75088: EQUAL
75089: AND
75090: PUSH
75091: LD_VAR 0 3
75095: PUSH
75096: LD_VAR 0 1
75100: PPUSH
75101: CALL_OW 437
75105: PUSH
75106: LD_INT 1
75108: ARRAY
75109: PUSH
75110: LD_INT 3
75112: ARRAY
75113: EQUAL
75114: AND
75115: IFFALSE 75125
// result := true ;
75117: LD_ADDR_VAR 0 4
75121: PUSH
75122: LD_INT 1
75124: ST_TO_ADDR
// end ; end ;
75125: LD_VAR 0 4
75129: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75130: LD_INT 0
75132: PPUSH
75133: PPUSH
75134: PPUSH
75135: PPUSH
// if not unit or not area then
75136: LD_VAR 0 1
75140: NOT
75141: PUSH
75142: LD_VAR 0 2
75146: NOT
75147: OR
75148: IFFALSE 75152
// exit ;
75150: GO 75316
// tmp := AreaToList ( area , i ) ;
75152: LD_ADDR_VAR 0 6
75156: PUSH
75157: LD_VAR 0 2
75161: PPUSH
75162: LD_VAR 0 5
75166: PPUSH
75167: CALL_OW 517
75171: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75172: LD_ADDR_VAR 0 5
75176: PUSH
75177: DOUBLE
75178: LD_INT 1
75180: DEC
75181: ST_TO_ADDR
75182: LD_VAR 0 6
75186: PUSH
75187: LD_INT 1
75189: ARRAY
75190: PUSH
75191: FOR_TO
75192: IFFALSE 75314
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75194: LD_ADDR_VAR 0 7
75198: PUSH
75199: LD_VAR 0 6
75203: PUSH
75204: LD_INT 1
75206: ARRAY
75207: PUSH
75208: LD_VAR 0 5
75212: ARRAY
75213: PUSH
75214: LD_VAR 0 6
75218: PUSH
75219: LD_INT 2
75221: ARRAY
75222: PUSH
75223: LD_VAR 0 5
75227: ARRAY
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75233: LD_VAR 0 7
75237: PUSH
75238: LD_INT 1
75240: ARRAY
75241: PPUSH
75242: LD_VAR 0 7
75246: PUSH
75247: LD_INT 2
75249: ARRAY
75250: PPUSH
75251: CALL_OW 428
75255: PUSH
75256: LD_INT 0
75258: EQUAL
75259: IFFALSE 75312
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75261: LD_VAR 0 1
75265: PPUSH
75266: LD_VAR 0 7
75270: PUSH
75271: LD_INT 1
75273: ARRAY
75274: PPUSH
75275: LD_VAR 0 7
75279: PUSH
75280: LD_INT 2
75282: ARRAY
75283: PPUSH
75284: LD_VAR 0 3
75288: PPUSH
75289: CALL_OW 48
// result := IsPlaced ( unit ) ;
75293: LD_ADDR_VAR 0 4
75297: PUSH
75298: LD_VAR 0 1
75302: PPUSH
75303: CALL_OW 305
75307: ST_TO_ADDR
// exit ;
75308: POP
75309: POP
75310: GO 75316
// end ; end ;
75312: GO 75191
75314: POP
75315: POP
// end ;
75316: LD_VAR 0 4
75320: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75321: LD_INT 0
75323: PPUSH
75324: PPUSH
75325: PPUSH
// if not side or side > 8 then
75326: LD_VAR 0 1
75330: NOT
75331: PUSH
75332: LD_VAR 0 1
75336: PUSH
75337: LD_INT 8
75339: GREATER
75340: OR
75341: IFFALSE 75345
// exit ;
75343: GO 75532
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75345: LD_ADDR_VAR 0 4
75349: PUSH
75350: LD_INT 22
75352: PUSH
75353: LD_VAR 0 1
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 21
75364: PUSH
75365: LD_INT 3
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PPUSH
75376: CALL_OW 69
75380: ST_TO_ADDR
// if not tmp then
75381: LD_VAR 0 4
75385: NOT
75386: IFFALSE 75390
// exit ;
75388: GO 75532
// enable_addtolog := true ;
75390: LD_ADDR_OWVAR 81
75394: PUSH
75395: LD_INT 1
75397: ST_TO_ADDR
// AddToLog ( [ ) ;
75398: LD_STRING [
75400: PPUSH
75401: CALL_OW 561
// for i in tmp do
75405: LD_ADDR_VAR 0 3
75409: PUSH
75410: LD_VAR 0 4
75414: PUSH
75415: FOR_IN
75416: IFFALSE 75523
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75418: LD_STRING [
75420: PUSH
75421: LD_VAR 0 3
75425: PPUSH
75426: CALL_OW 266
75430: STR
75431: PUSH
75432: LD_STRING , 
75434: STR
75435: PUSH
75436: LD_VAR 0 3
75440: PPUSH
75441: CALL_OW 250
75445: STR
75446: PUSH
75447: LD_STRING , 
75449: STR
75450: PUSH
75451: LD_VAR 0 3
75455: PPUSH
75456: CALL_OW 251
75460: STR
75461: PUSH
75462: LD_STRING , 
75464: STR
75465: PUSH
75466: LD_VAR 0 3
75470: PPUSH
75471: CALL_OW 254
75475: STR
75476: PUSH
75477: LD_STRING , 
75479: STR
75480: PUSH
75481: LD_VAR 0 3
75485: PPUSH
75486: LD_INT 1
75488: PPUSH
75489: CALL_OW 268
75493: STR
75494: PUSH
75495: LD_STRING , 
75497: STR
75498: PUSH
75499: LD_VAR 0 3
75503: PPUSH
75504: LD_INT 2
75506: PPUSH
75507: CALL_OW 268
75511: STR
75512: PUSH
75513: LD_STRING ],
75515: STR
75516: PPUSH
75517: CALL_OW 561
// end ;
75521: GO 75415
75523: POP
75524: POP
// AddToLog ( ]; ) ;
75525: LD_STRING ];
75527: PPUSH
75528: CALL_OW 561
// end ;
75532: LD_VAR 0 2
75536: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75537: LD_INT 0
75539: PPUSH
75540: PPUSH
75541: PPUSH
75542: PPUSH
75543: PPUSH
// if not area or not rate or not max then
75544: LD_VAR 0 1
75548: NOT
75549: PUSH
75550: LD_VAR 0 2
75554: NOT
75555: OR
75556: PUSH
75557: LD_VAR 0 4
75561: NOT
75562: OR
75563: IFFALSE 75567
// exit ;
75565: GO 75759
// while 1 do
75567: LD_INT 1
75569: IFFALSE 75759
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75571: LD_ADDR_VAR 0 9
75575: PUSH
75576: LD_VAR 0 1
75580: PPUSH
75581: LD_INT 1
75583: PPUSH
75584: CALL_OW 287
75588: PUSH
75589: LD_INT 10
75591: MUL
75592: ST_TO_ADDR
// r := rate / 10 ;
75593: LD_ADDR_VAR 0 7
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 10
75605: DIVREAL
75606: ST_TO_ADDR
// time := 1 1$00 ;
75607: LD_ADDR_VAR 0 8
75611: PUSH
75612: LD_INT 2100
75614: ST_TO_ADDR
// if amount < min then
75615: LD_VAR 0 9
75619: PUSH
75620: LD_VAR 0 3
75624: LESS
75625: IFFALSE 75643
// r := r * 2 else
75627: LD_ADDR_VAR 0 7
75631: PUSH
75632: LD_VAR 0 7
75636: PUSH
75637: LD_INT 2
75639: MUL
75640: ST_TO_ADDR
75641: GO 75669
// if amount > max then
75643: LD_VAR 0 9
75647: PUSH
75648: LD_VAR 0 4
75652: GREATER
75653: IFFALSE 75669
// r := r / 2 ;
75655: LD_ADDR_VAR 0 7
75659: PUSH
75660: LD_VAR 0 7
75664: PUSH
75665: LD_INT 2
75667: DIVREAL
75668: ST_TO_ADDR
// time := time / r ;
75669: LD_ADDR_VAR 0 8
75673: PUSH
75674: LD_VAR 0 8
75678: PUSH
75679: LD_VAR 0 7
75683: DIVREAL
75684: ST_TO_ADDR
// if time < 0 then
75685: LD_VAR 0 8
75689: PUSH
75690: LD_INT 0
75692: LESS
75693: IFFALSE 75710
// time := time * - 1 ;
75695: LD_ADDR_VAR 0 8
75699: PUSH
75700: LD_VAR 0 8
75704: PUSH
75705: LD_INT 1
75707: NEG
75708: MUL
75709: ST_TO_ADDR
// wait ( time ) ;
75710: LD_VAR 0 8
75714: PPUSH
75715: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75719: LD_INT 35
75721: PPUSH
75722: LD_INT 875
75724: PPUSH
75725: CALL_OW 12
75729: PPUSH
75730: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75734: LD_INT 1
75736: PPUSH
75737: LD_INT 5
75739: PPUSH
75740: CALL_OW 12
75744: PPUSH
75745: LD_VAR 0 1
75749: PPUSH
75750: LD_INT 1
75752: PPUSH
75753: CALL_OW 55
// end ;
75757: GO 75567
// end ;
75759: LD_VAR 0 5
75763: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75764: LD_INT 0
75766: PPUSH
75767: PPUSH
75768: PPUSH
75769: PPUSH
75770: PPUSH
75771: PPUSH
75772: PPUSH
75773: PPUSH
// if not turrets or not factories then
75774: LD_VAR 0 1
75778: NOT
75779: PUSH
75780: LD_VAR 0 2
75784: NOT
75785: OR
75786: IFFALSE 75790
// exit ;
75788: GO 76097
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75790: LD_ADDR_VAR 0 10
75794: PUSH
75795: LD_INT 5
75797: PUSH
75798: LD_INT 6
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 2
75807: PUSH
75808: LD_INT 4
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 3
75817: PUSH
75818: LD_INT 5
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 24
75832: PUSH
75833: LD_INT 25
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: LD_INT 23
75842: PUSH
75843: LD_INT 27
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PUSH
75854: LD_INT 42
75856: PUSH
75857: LD_INT 43
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: PUSH
75864: LD_INT 44
75866: PUSH
75867: LD_INT 46
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 45
75876: PUSH
75877: LD_INT 47
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: LIST
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: LIST
75893: ST_TO_ADDR
// result := [ ] ;
75894: LD_ADDR_VAR 0 3
75898: PUSH
75899: EMPTY
75900: ST_TO_ADDR
// for i in turrets do
75901: LD_ADDR_VAR 0 4
75905: PUSH
75906: LD_VAR 0 1
75910: PUSH
75911: FOR_IN
75912: IFFALSE 76095
// begin nat := GetNation ( i ) ;
75914: LD_ADDR_VAR 0 7
75918: PUSH
75919: LD_VAR 0 4
75923: PPUSH
75924: CALL_OW 248
75928: ST_TO_ADDR
// weapon := 0 ;
75929: LD_ADDR_VAR 0 8
75933: PUSH
75934: LD_INT 0
75936: ST_TO_ADDR
// if not nat then
75937: LD_VAR 0 7
75941: NOT
75942: IFFALSE 75946
// continue ;
75944: GO 75911
// for j in list [ nat ] do
75946: LD_ADDR_VAR 0 5
75950: PUSH
75951: LD_VAR 0 10
75955: PUSH
75956: LD_VAR 0 7
75960: ARRAY
75961: PUSH
75962: FOR_IN
75963: IFFALSE 76004
// if GetBWeapon ( i ) = j [ 1 ] then
75965: LD_VAR 0 4
75969: PPUSH
75970: CALL_OW 269
75974: PUSH
75975: LD_VAR 0 5
75979: PUSH
75980: LD_INT 1
75982: ARRAY
75983: EQUAL
75984: IFFALSE 76002
// begin weapon := j [ 2 ] ;
75986: LD_ADDR_VAR 0 8
75990: PUSH
75991: LD_VAR 0 5
75995: PUSH
75996: LD_INT 2
75998: ARRAY
75999: ST_TO_ADDR
// break ;
76000: GO 76004
// end ;
76002: GO 75962
76004: POP
76005: POP
// if not weapon then
76006: LD_VAR 0 8
76010: NOT
76011: IFFALSE 76015
// continue ;
76013: GO 75911
// for k in factories do
76015: LD_ADDR_VAR 0 6
76019: PUSH
76020: LD_VAR 0 2
76024: PUSH
76025: FOR_IN
76026: IFFALSE 76091
// begin weapons := AvailableWeaponList ( k ) ;
76028: LD_ADDR_VAR 0 9
76032: PUSH
76033: LD_VAR 0 6
76037: PPUSH
76038: CALL_OW 478
76042: ST_TO_ADDR
// if not weapons then
76043: LD_VAR 0 9
76047: NOT
76048: IFFALSE 76052
// continue ;
76050: GO 76025
// if weapon in weapons then
76052: LD_VAR 0 8
76056: PUSH
76057: LD_VAR 0 9
76061: IN
76062: IFFALSE 76089
// begin result := [ i , weapon ] ;
76064: LD_ADDR_VAR 0 3
76068: PUSH
76069: LD_VAR 0 4
76073: PUSH
76074: LD_VAR 0 8
76078: PUSH
76079: EMPTY
76080: LIST
76081: LIST
76082: ST_TO_ADDR
// exit ;
76083: POP
76084: POP
76085: POP
76086: POP
76087: GO 76097
// end ; end ;
76089: GO 76025
76091: POP
76092: POP
// end ;
76093: GO 75911
76095: POP
76096: POP
// end ;
76097: LD_VAR 0 3
76101: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76102: LD_INT 0
76104: PPUSH
// if not side or side > 8 then
76105: LD_VAR 0 3
76109: NOT
76110: PUSH
76111: LD_VAR 0 3
76115: PUSH
76116: LD_INT 8
76118: GREATER
76119: OR
76120: IFFALSE 76124
// exit ;
76122: GO 76183
// if not range then
76124: LD_VAR 0 4
76128: NOT
76129: IFFALSE 76140
// range := - 12 ;
76131: LD_ADDR_VAR 0 4
76135: PUSH
76136: LD_INT 12
76138: NEG
76139: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76140: LD_VAR 0 1
76144: PPUSH
76145: LD_VAR 0 2
76149: PPUSH
76150: LD_VAR 0 3
76154: PPUSH
76155: LD_VAR 0 4
76159: PPUSH
76160: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76164: LD_VAR 0 1
76168: PPUSH
76169: LD_VAR 0 2
76173: PPUSH
76174: LD_VAR 0 3
76178: PPUSH
76179: CALL_OW 331
// end ;
76183: LD_VAR 0 5
76187: RET
// export function Video ( mode ) ; begin
76188: LD_INT 0
76190: PPUSH
// ingame_video = mode ;
76191: LD_ADDR_OWVAR 52
76195: PUSH
76196: LD_VAR 0 1
76200: ST_TO_ADDR
// interface_hidden = mode ;
76201: LD_ADDR_OWVAR 54
76205: PUSH
76206: LD_VAR 0 1
76210: ST_TO_ADDR
// end ;
76211: LD_VAR 0 2
76215: RET
// export function Join ( array , element ) ; begin
76216: LD_INT 0
76218: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76219: LD_ADDR_VAR 0 3
76223: PUSH
76224: LD_VAR 0 1
76228: PPUSH
76229: LD_VAR 0 1
76233: PUSH
76234: LD_INT 1
76236: PLUS
76237: PPUSH
76238: LD_VAR 0 2
76242: PPUSH
76243: CALL_OW 1
76247: ST_TO_ADDR
// end ;
76248: LD_VAR 0 3
76252: RET
// export function JoinUnion ( array , element ) ; begin
76253: LD_INT 0
76255: PPUSH
// result := array union element ;
76256: LD_ADDR_VAR 0 3
76260: PUSH
76261: LD_VAR 0 1
76265: PUSH
76266: LD_VAR 0 2
76270: UNION
76271: ST_TO_ADDR
// end ;
76272: LD_VAR 0 3
76276: RET
// export function GetBehemoths ( side ) ; begin
76277: LD_INT 0
76279: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76280: LD_ADDR_VAR 0 2
76284: PUSH
76285: LD_INT 22
76287: PUSH
76288: LD_VAR 0 1
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: LD_INT 31
76299: PUSH
76300: LD_INT 25
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PPUSH
76311: CALL_OW 69
76315: ST_TO_ADDR
// end ;
76316: LD_VAR 0 2
76320: RET
// export function Shuffle ( array ) ; var i , index ; begin
76321: LD_INT 0
76323: PPUSH
76324: PPUSH
76325: PPUSH
// result := [ ] ;
76326: LD_ADDR_VAR 0 2
76330: PUSH
76331: EMPTY
76332: ST_TO_ADDR
// if not array then
76333: LD_VAR 0 1
76337: NOT
76338: IFFALSE 76342
// exit ;
76340: GO 76441
// Randomize ;
76342: CALL_OW 10
// for i = array downto 1 do
76346: LD_ADDR_VAR 0 3
76350: PUSH
76351: DOUBLE
76352: LD_VAR 0 1
76356: INC
76357: ST_TO_ADDR
76358: LD_INT 1
76360: PUSH
76361: FOR_DOWNTO
76362: IFFALSE 76439
// begin index := rand ( 1 , array ) ;
76364: LD_ADDR_VAR 0 4
76368: PUSH
76369: LD_INT 1
76371: PPUSH
76372: LD_VAR 0 1
76376: PPUSH
76377: CALL_OW 12
76381: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76382: LD_ADDR_VAR 0 2
76386: PUSH
76387: LD_VAR 0 2
76391: PPUSH
76392: LD_VAR 0 2
76396: PUSH
76397: LD_INT 1
76399: PLUS
76400: PPUSH
76401: LD_VAR 0 1
76405: PUSH
76406: LD_VAR 0 4
76410: ARRAY
76411: PPUSH
76412: CALL_OW 2
76416: ST_TO_ADDR
// array := Delete ( array , index ) ;
76417: LD_ADDR_VAR 0 1
76421: PUSH
76422: LD_VAR 0 1
76426: PPUSH
76427: LD_VAR 0 4
76431: PPUSH
76432: CALL_OW 3
76436: ST_TO_ADDR
// end ;
76437: GO 76361
76439: POP
76440: POP
// end ;
76441: LD_VAR 0 2
76445: RET
// export function GetBaseMaterials ( base ) ; begin
76446: LD_INT 0
76448: PPUSH
// result := [ 0 , 0 , 0 ] ;
76449: LD_ADDR_VAR 0 2
76453: PUSH
76454: LD_INT 0
76456: PUSH
76457: LD_INT 0
76459: PUSH
76460: LD_INT 0
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: LIST
76467: ST_TO_ADDR
// if not base then
76468: LD_VAR 0 1
76472: NOT
76473: IFFALSE 76477
// exit ;
76475: GO 76526
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76477: LD_ADDR_VAR 0 2
76481: PUSH
76482: LD_VAR 0 1
76486: PPUSH
76487: LD_INT 1
76489: PPUSH
76490: CALL_OW 275
76494: PUSH
76495: LD_VAR 0 1
76499: PPUSH
76500: LD_INT 2
76502: PPUSH
76503: CALL_OW 275
76507: PUSH
76508: LD_VAR 0 1
76512: PPUSH
76513: LD_INT 3
76515: PPUSH
76516: CALL_OW 275
76520: PUSH
76521: EMPTY
76522: LIST
76523: LIST
76524: LIST
76525: ST_TO_ADDR
// end ;
76526: LD_VAR 0 2
76530: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76531: LD_INT 0
76533: PPUSH
76534: PPUSH
// result := array ;
76535: LD_ADDR_VAR 0 3
76539: PUSH
76540: LD_VAR 0 1
76544: ST_TO_ADDR
// if size > 0 then
76545: LD_VAR 0 2
76549: PUSH
76550: LD_INT 0
76552: GREATER
76553: IFFALSE 76599
// for i := array downto size do
76555: LD_ADDR_VAR 0 4
76559: PUSH
76560: DOUBLE
76561: LD_VAR 0 1
76565: INC
76566: ST_TO_ADDR
76567: LD_VAR 0 2
76571: PUSH
76572: FOR_DOWNTO
76573: IFFALSE 76597
// result := Delete ( result , result ) ;
76575: LD_ADDR_VAR 0 3
76579: PUSH
76580: LD_VAR 0 3
76584: PPUSH
76585: LD_VAR 0 3
76589: PPUSH
76590: CALL_OW 3
76594: ST_TO_ADDR
76595: GO 76572
76597: POP
76598: POP
// end ;
76599: LD_VAR 0 3
76603: RET
// export function ComExit ( unit ) ; var tmp ; begin
76604: LD_INT 0
76606: PPUSH
76607: PPUSH
// if not IsInUnit ( unit ) then
76608: LD_VAR 0 1
76612: PPUSH
76613: CALL_OW 310
76617: NOT
76618: IFFALSE 76622
// exit ;
76620: GO 76682
// tmp := IsInUnit ( unit ) ;
76622: LD_ADDR_VAR 0 3
76626: PUSH
76627: LD_VAR 0 1
76631: PPUSH
76632: CALL_OW 310
76636: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76637: LD_VAR 0 3
76641: PPUSH
76642: CALL_OW 247
76646: PUSH
76647: LD_INT 2
76649: EQUAL
76650: IFFALSE 76663
// ComExitVehicle ( unit ) else
76652: LD_VAR 0 1
76656: PPUSH
76657: CALL_OW 121
76661: GO 76672
// ComExitBuilding ( unit ) ;
76663: LD_VAR 0 1
76667: PPUSH
76668: CALL_OW 122
// result := tmp ;
76672: LD_ADDR_VAR 0 2
76676: PUSH
76677: LD_VAR 0 3
76681: ST_TO_ADDR
// end ;
76682: LD_VAR 0 2
76686: RET
// export function ComExitAll ( units ) ; var i ; begin
76687: LD_INT 0
76689: PPUSH
76690: PPUSH
// if not units then
76691: LD_VAR 0 1
76695: NOT
76696: IFFALSE 76700
// exit ;
76698: GO 76726
// for i in units do
76700: LD_ADDR_VAR 0 3
76704: PUSH
76705: LD_VAR 0 1
76709: PUSH
76710: FOR_IN
76711: IFFALSE 76724
// ComExit ( i ) ;
76713: LD_VAR 0 3
76717: PPUSH
76718: CALL 76604 0 1
76722: GO 76710
76724: POP
76725: POP
// end ;
76726: LD_VAR 0 2
76730: RET
// export function ResetHc ; begin
76731: LD_INT 0
76733: PPUSH
// InitHc ;
76734: CALL_OW 19
// hc_importance := 0 ;
76738: LD_ADDR_OWVAR 32
76742: PUSH
76743: LD_INT 0
76745: ST_TO_ADDR
// end ;
76746: LD_VAR 0 1
76750: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76751: LD_INT 0
76753: PPUSH
76754: PPUSH
76755: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76756: LD_ADDR_VAR 0 6
76760: PUSH
76761: LD_VAR 0 1
76765: PUSH
76766: LD_VAR 0 3
76770: PLUS
76771: PUSH
76772: LD_INT 2
76774: DIV
76775: ST_TO_ADDR
// if _x < 0 then
76776: LD_VAR 0 6
76780: PUSH
76781: LD_INT 0
76783: LESS
76784: IFFALSE 76801
// _x := _x * - 1 ;
76786: LD_ADDR_VAR 0 6
76790: PUSH
76791: LD_VAR 0 6
76795: PUSH
76796: LD_INT 1
76798: NEG
76799: MUL
76800: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76801: LD_ADDR_VAR 0 7
76805: PUSH
76806: LD_VAR 0 2
76810: PUSH
76811: LD_VAR 0 4
76815: PLUS
76816: PUSH
76817: LD_INT 2
76819: DIV
76820: ST_TO_ADDR
// if _y < 0 then
76821: LD_VAR 0 7
76825: PUSH
76826: LD_INT 0
76828: LESS
76829: IFFALSE 76846
// _y := _y * - 1 ;
76831: LD_ADDR_VAR 0 7
76835: PUSH
76836: LD_VAR 0 7
76840: PUSH
76841: LD_INT 1
76843: NEG
76844: MUL
76845: ST_TO_ADDR
// result := [ _x , _y ] ;
76846: LD_ADDR_VAR 0 5
76850: PUSH
76851: LD_VAR 0 6
76855: PUSH
76856: LD_VAR 0 7
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: ST_TO_ADDR
// end ;
76865: LD_VAR 0 5
76869: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76870: LD_INT 0
76872: PPUSH
76873: PPUSH
76874: PPUSH
76875: PPUSH
// task := GetTaskList ( unit ) ;
76876: LD_ADDR_VAR 0 7
76880: PUSH
76881: LD_VAR 0 1
76885: PPUSH
76886: CALL_OW 437
76890: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76891: LD_VAR 0 7
76895: NOT
76896: PUSH
76897: LD_VAR 0 1
76901: PPUSH
76902: LD_VAR 0 2
76906: PPUSH
76907: CALL_OW 308
76911: NOT
76912: AND
76913: IFFALSE 76917
// exit ;
76915: GO 77035
// if IsInArea ( unit , area ) then
76917: LD_VAR 0 1
76921: PPUSH
76922: LD_VAR 0 2
76926: PPUSH
76927: CALL_OW 308
76931: IFFALSE 76949
// begin ComMoveToArea ( unit , goAway ) ;
76933: LD_VAR 0 1
76937: PPUSH
76938: LD_VAR 0 3
76942: PPUSH
76943: CALL_OW 113
// exit ;
76947: GO 77035
// end ; if task [ 1 ] [ 1 ] <> M then
76949: LD_VAR 0 7
76953: PUSH
76954: LD_INT 1
76956: ARRAY
76957: PUSH
76958: LD_INT 1
76960: ARRAY
76961: PUSH
76962: LD_STRING M
76964: NONEQUAL
76965: IFFALSE 76969
// exit ;
76967: GO 77035
// x := task [ 1 ] [ 2 ] ;
76969: LD_ADDR_VAR 0 5
76973: PUSH
76974: LD_VAR 0 7
76978: PUSH
76979: LD_INT 1
76981: ARRAY
76982: PUSH
76983: LD_INT 2
76985: ARRAY
76986: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76987: LD_ADDR_VAR 0 6
76991: PUSH
76992: LD_VAR 0 7
76996: PUSH
76997: LD_INT 1
76999: ARRAY
77000: PUSH
77001: LD_INT 3
77003: ARRAY
77004: ST_TO_ADDR
// if InArea ( x , y , area ) then
77005: LD_VAR 0 5
77009: PPUSH
77010: LD_VAR 0 6
77014: PPUSH
77015: LD_VAR 0 2
77019: PPUSH
77020: CALL_OW 309
77024: IFFALSE 77035
// ComStop ( unit ) ;
77026: LD_VAR 0 1
77030: PPUSH
77031: CALL_OW 141
// end ;
77035: LD_VAR 0 4
77039: RET
// export function Abs ( value ) ; begin
77040: LD_INT 0
77042: PPUSH
// result := value ;
77043: LD_ADDR_VAR 0 2
77047: PUSH
77048: LD_VAR 0 1
77052: ST_TO_ADDR
// if value < 0 then
77053: LD_VAR 0 1
77057: PUSH
77058: LD_INT 0
77060: LESS
77061: IFFALSE 77078
// result := value * - 1 ;
77063: LD_ADDR_VAR 0 2
77067: PUSH
77068: LD_VAR 0 1
77072: PUSH
77073: LD_INT 1
77075: NEG
77076: MUL
77077: ST_TO_ADDR
// end ;
77078: LD_VAR 0 2
77082: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77083: LD_INT 0
77085: PPUSH
77086: PPUSH
77087: PPUSH
77088: PPUSH
77089: PPUSH
77090: PPUSH
77091: PPUSH
77092: PPUSH
// if not unit or not building then
77093: LD_VAR 0 1
77097: NOT
77098: PUSH
77099: LD_VAR 0 2
77103: NOT
77104: OR
77105: IFFALSE 77109
// exit ;
77107: GO 77335
// x := GetX ( building ) ;
77109: LD_ADDR_VAR 0 4
77113: PUSH
77114: LD_VAR 0 2
77118: PPUSH
77119: CALL_OW 250
77123: ST_TO_ADDR
// y := GetY ( building ) ;
77124: LD_ADDR_VAR 0 6
77128: PUSH
77129: LD_VAR 0 2
77133: PPUSH
77134: CALL_OW 251
77138: ST_TO_ADDR
// d := GetDir ( building ) ;
77139: LD_ADDR_VAR 0 8
77143: PUSH
77144: LD_VAR 0 2
77148: PPUSH
77149: CALL_OW 254
77153: ST_TO_ADDR
// r := 4 ;
77154: LD_ADDR_VAR 0 9
77158: PUSH
77159: LD_INT 4
77161: ST_TO_ADDR
// for i := 1 to 5 do
77162: LD_ADDR_VAR 0 10
77166: PUSH
77167: DOUBLE
77168: LD_INT 1
77170: DEC
77171: ST_TO_ADDR
77172: LD_INT 5
77174: PUSH
77175: FOR_TO
77176: IFFALSE 77333
// begin _x := ShiftX ( x , d , r + i ) ;
77178: LD_ADDR_VAR 0 5
77182: PUSH
77183: LD_VAR 0 4
77187: PPUSH
77188: LD_VAR 0 8
77192: PPUSH
77193: LD_VAR 0 9
77197: PUSH
77198: LD_VAR 0 10
77202: PLUS
77203: PPUSH
77204: CALL_OW 272
77208: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77209: LD_ADDR_VAR 0 7
77213: PUSH
77214: LD_VAR 0 6
77218: PPUSH
77219: LD_VAR 0 8
77223: PPUSH
77224: LD_VAR 0 9
77228: PUSH
77229: LD_VAR 0 10
77233: PLUS
77234: PPUSH
77235: CALL_OW 273
77239: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77240: LD_VAR 0 5
77244: PPUSH
77245: LD_VAR 0 7
77249: PPUSH
77250: CALL_OW 488
77254: PUSH
77255: LD_VAR 0 5
77259: PPUSH
77260: LD_VAR 0 7
77264: PPUSH
77265: CALL_OW 428
77269: PPUSH
77270: CALL_OW 247
77274: PUSH
77275: LD_INT 3
77277: PUSH
77278: LD_INT 2
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: IN
77285: NOT
77286: AND
77287: IFFALSE 77331
// begin ComMoveXY ( unit , _x , _y ) ;
77289: LD_VAR 0 1
77293: PPUSH
77294: LD_VAR 0 5
77298: PPUSH
77299: LD_VAR 0 7
77303: PPUSH
77304: CALL_OW 111
// result := [ _x , _y ] ;
77308: LD_ADDR_VAR 0 3
77312: PUSH
77313: LD_VAR 0 5
77317: PUSH
77318: LD_VAR 0 7
77322: PUSH
77323: EMPTY
77324: LIST
77325: LIST
77326: ST_TO_ADDR
// exit ;
77327: POP
77328: POP
77329: GO 77335
// end ; end ;
77331: GO 77175
77333: POP
77334: POP
// end ;
77335: LD_VAR 0 3
77339: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77340: LD_INT 0
77342: PPUSH
77343: PPUSH
77344: PPUSH
// result := 0 ;
77345: LD_ADDR_VAR 0 3
77349: PUSH
77350: LD_INT 0
77352: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77353: LD_VAR 0 1
77357: PUSH
77358: LD_INT 0
77360: LESS
77361: PUSH
77362: LD_VAR 0 1
77366: PUSH
77367: LD_INT 8
77369: GREATER
77370: OR
77371: PUSH
77372: LD_VAR 0 2
77376: PUSH
77377: LD_INT 0
77379: LESS
77380: OR
77381: PUSH
77382: LD_VAR 0 2
77386: PUSH
77387: LD_INT 8
77389: GREATER
77390: OR
77391: IFFALSE 77395
// exit ;
77393: GO 77470
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77395: LD_ADDR_VAR 0 4
77399: PUSH
77400: LD_INT 22
77402: PUSH
77403: LD_VAR 0 2
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PPUSH
77412: CALL_OW 69
77416: PUSH
77417: FOR_IN
77418: IFFALSE 77468
// begin un := UnitShoot ( i ) ;
77420: LD_ADDR_VAR 0 5
77424: PUSH
77425: LD_VAR 0 4
77429: PPUSH
77430: CALL_OW 504
77434: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77435: LD_VAR 0 5
77439: PPUSH
77440: CALL_OW 255
77444: PUSH
77445: LD_VAR 0 1
77449: EQUAL
77450: IFFALSE 77466
// begin result := un ;
77452: LD_ADDR_VAR 0 3
77456: PUSH
77457: LD_VAR 0 5
77461: ST_TO_ADDR
// exit ;
77462: POP
77463: POP
77464: GO 77470
// end ; end ;
77466: GO 77417
77468: POP
77469: POP
// end ;
77470: LD_VAR 0 3
77474: RET
// export function GetCargoBay ( units ) ; begin
77475: LD_INT 0
77477: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77478: LD_ADDR_VAR 0 2
77482: PUSH
77483: LD_VAR 0 1
77487: PPUSH
77488: LD_INT 2
77490: PUSH
77491: LD_INT 34
77493: PUSH
77494: LD_INT 12
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: PUSH
77501: LD_INT 34
77503: PUSH
77504: LD_INT 51
77506: PUSH
77507: EMPTY
77508: LIST
77509: LIST
77510: PUSH
77511: LD_INT 34
77513: PUSH
77514: LD_INT 32
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PUSH
77521: LD_INT 34
77523: PUSH
77524: LD_EXP 53
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: EMPTY
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: PPUSH
77540: CALL_OW 72
77544: ST_TO_ADDR
// end ; end_of_file
77545: LD_VAR 0 2
77549: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77550: LD_VAR 0 1
77554: PUSH
77555: LD_INT 200
77557: DOUBLE
77558: GREATEREQUAL
77559: IFFALSE 77567
77561: LD_INT 299
77563: DOUBLE
77564: LESSEQUAL
77565: IFTRUE 77569
77567: GO 77601
77569: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77570: LD_VAR 0 1
77574: PPUSH
77575: LD_VAR 0 2
77579: PPUSH
77580: LD_VAR 0 3
77584: PPUSH
77585: LD_VAR 0 4
77589: PPUSH
77590: LD_VAR 0 5
77594: PPUSH
77595: CALL 36011 0 5
77599: GO 77678
77601: LD_INT 300
77603: DOUBLE
77604: GREATEREQUAL
77605: IFFALSE 77613
77607: LD_INT 399
77609: DOUBLE
77610: LESSEQUAL
77611: IFTRUE 77615
77613: GO 77677
77615: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77616: LD_VAR 0 1
77620: PPUSH
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 3
77630: PPUSH
77631: LD_VAR 0 4
77635: PPUSH
77636: LD_VAR 0 5
77640: PPUSH
77641: LD_VAR 0 6
77645: PPUSH
77646: LD_VAR 0 7
77650: PPUSH
77651: LD_VAR 0 8
77655: PPUSH
77656: LD_VAR 0 9
77660: PPUSH
77661: LD_VAR 0 10
77665: PPUSH
77666: LD_VAR 0 11
77670: PPUSH
77671: CALL 33899 0 11
77675: GO 77678
77677: POP
// end ;
77678: PPOPN 11
77680: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77681: LD_VAR 0 1
77685: PPUSH
77686: LD_VAR 0 2
77690: PPUSH
77691: LD_VAR 0 3
77695: PPUSH
77696: LD_VAR 0 4
77700: PPUSH
77701: LD_VAR 0 5
77705: PPUSH
77706: CALL 35993 0 5
// end ; end_of_file
77710: PPOPN 5
77712: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77713: LD_VAR 0 1
77717: PPUSH
77718: LD_VAR 0 2
77722: PPUSH
77723: LD_VAR 0 3
77727: PPUSH
77728: LD_VAR 0 4
77732: PPUSH
77733: LD_VAR 0 5
77737: PPUSH
77738: LD_VAR 0 6
77742: PPUSH
77743: CALL 22707 0 6
// end ;
77747: PPOPN 6
77749: END
